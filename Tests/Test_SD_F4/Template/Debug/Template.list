
Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009764  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  080098f4  080098f4  000198f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  080098f8  080098f8  000198f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000002d8  20000000  080098fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  000202d8  2**0
                  CONTENTS
  6 .bss          00001084  200002d8  200002d8  000202d8  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2000135c  2000135c  000202d8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000202d8  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000cc07  00000000  00000000  00020308  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001e67  00000000  00000000  0002cf0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a90  00000000  00000000  0002ed78  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000988  00000000  00000000  0002f808  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005111  00000000  00000000  00030190  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000031fb  00000000  00000000  000352a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003849c  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003db8  00000000  00000000  00038518  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stab         00000024  00000000  00000000  0003c2d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000004e  00000000  00000000  0003c2f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d8 	.word	0x200002d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080098dc 	.word	0x080098dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002dc 	.word	0x200002dc
 80001cc:	080098dc 	.word	0x080098dc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f092 0f00 	teq	r2, #0
 800058a:	bf14      	ite	ne
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a0:	e720      	b.n	80003e4 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_ul2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	e00a      	b.n	80005ca <__aeabi_l2d+0x16>

080005b4 <__aeabi_l2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c2:	d502      	bpl.n	80005ca <__aeabi_l2d+0x16>
 80005c4:	4240      	negs	r0, r0
 80005c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d6:	f43f aedc 	beq.w	8000392 <__adddf3+0xe6>
 80005da:	f04f 0203 	mov.w	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f2:	f1c2 0320 	rsb	r3, r2, #32
 80005f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000602:	ea40 000e 	orr.w	r0, r0, lr
 8000606:	fa21 f102 	lsr.w	r1, r1, r2
 800060a:	4414      	add	r4, r2
 800060c:	e6c1      	b.n	8000392 <__adddf3+0xe6>
 800060e:	bf00      	nop

08000610 <__aeabi_dmul>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000616:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061e:	bf1d      	ittte	ne
 8000620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000624:	ea94 0f0c 	teqne	r4, ip
 8000628:	ea95 0f0c 	teqne	r5, ip
 800062c:	f000 f8de 	bleq	80007ec <__aeabi_dmul+0x1dc>
 8000630:	442c      	add	r4, r5
 8000632:	ea81 0603 	eor.w	r6, r1, r3
 8000636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000642:	bf18      	it	ne
 8000644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000650:	d038      	beq.n	80006c4 <__aeabi_dmul+0xb4>
 8000652:	fba0 ce02 	umull	ip, lr, r0, r2
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000662:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000666:	f04f 0600 	mov.w	r6, #0
 800066a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066e:	f09c 0f00 	teq	ip, #0
 8000672:	bf18      	it	ne
 8000674:	f04e 0e01 	orrne.w	lr, lr, #1
 8000678:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800067c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000680:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000684:	d204      	bcs.n	8000690 <__aeabi_dmul+0x80>
 8000686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068a:	416d      	adcs	r5, r5
 800068c:	eb46 0606 	adc.w	r6, r6, r6
 8000690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800069c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a8:	bf88      	it	hi
 80006aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ae:	d81e      	bhi.n	80006ee <__aeabi_dmul+0xde>
 80006b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b4:	bf08      	it	eq
 80006b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ba:	f150 0000 	adcs.w	r0, r0, #0
 80006be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c8:	ea46 0101 	orr.w	r1, r6, r1
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d8:	bfc2      	ittt	gt
 80006da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	popgt	{r4, r5, r6, pc}
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e8:	f04f 0e00 	mov.w	lr, #0
 80006ec:	3c01      	subs	r4, #1
 80006ee:	f300 80ab 	bgt.w	8000848 <__aeabi_dmul+0x238>
 80006f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f6:	bfde      	ittt	le
 80006f8:	2000      	movle	r0, #0
 80006fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd70      	pople	{r4, r5, r6, pc}
 8000700:	f1c4 0400 	rsb	r4, r4, #0
 8000704:	3c20      	subs	r4, #32
 8000706:	da35      	bge.n	8000774 <__aeabi_dmul+0x164>
 8000708:	340c      	adds	r4, #12
 800070a:	dc1b      	bgt.n	8000744 <__aeabi_dmul+0x134>
 800070c:	f104 0414 	add.w	r4, r4, #20
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f305 	lsl.w	r3, r0, r5
 8000718:	fa20 f004 	lsr.w	r0, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	fa21 f604 	lsr.w	r6, r1, r4
 8000734:	eb42 0106 	adc.w	r1, r2, r6
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 040c 	rsb	r4, r4, #12
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f304 	lsl.w	r3, r0, r4
 8000750:	fa20 f005 	lsr.w	r0, r0, r5
 8000754:	fa01 f204 	lsl.w	r2, r1, r4
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f205 	lsl.w	r2, r0, r5
 800077c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000780:	fa20 f304 	lsr.w	r3, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea43 0302 	orr.w	r3, r3, r2
 800078c:	fa21 f004 	lsr.w	r0, r1, r4
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	fa21 f204 	lsr.w	r2, r1, r4
 8000798:	ea20 0002 	bic.w	r0, r0, r2
 800079c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f094 0f00 	teq	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__aeabi_dmul+0x1c2>
 80007b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b6:	0040      	lsls	r0, r0, #1
 80007b8:	eb41 0101 	adc.w	r1, r1, r1
 80007bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3c01      	subeq	r4, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1a6>
 80007c6:	ea41 0106 	orr.w	r1, r1, r6
 80007ca:	f095 0f00 	teq	r5, #0
 80007ce:	bf18      	it	ne
 80007d0:	4770      	bxne	lr
 80007d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	eb43 0303 	adc.w	r3, r3, r3
 80007dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3d01      	subeq	r5, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1c6>
 80007e6:	ea43 0306 	orr.w	r3, r3, r6
 80007ea:	4770      	bx	lr
 80007ec:	ea94 0f0c 	teq	r4, ip
 80007f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f4:	bf18      	it	ne
 80007f6:	ea95 0f0c 	teqne	r5, ip
 80007fa:	d00c      	beq.n	8000816 <__aeabi_dmul+0x206>
 80007fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000806:	d1d1      	bne.n	80007ac <__aeabi_dmul+0x19c>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081a:	bf06      	itte	eq
 800081c:	4610      	moveq	r0, r2
 800081e:	4619      	moveq	r1, r3
 8000820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000824:	d019      	beq.n	800085a <__aeabi_dmul+0x24a>
 8000826:	ea94 0f0c 	teq	r4, ip
 800082a:	d102      	bne.n	8000832 <__aeabi_dmul+0x222>
 800082c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000830:	d113      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000832:	ea95 0f0c 	teq	r5, ip
 8000836:	d105      	bne.n	8000844 <__aeabi_dmul+0x234>
 8000838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800083c:	bf1c      	itt	ne
 800083e:	4610      	movne	r0, r2
 8000840:	4619      	movne	r1, r3
 8000842:	d10a      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000850:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <__aeabi_ddiv>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000872:	bf1d      	ittte	ne
 8000874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000878:	ea94 0f0c 	teqne	r4, ip
 800087c:	ea95 0f0c 	teqne	r5, ip
 8000880:	f000 f8a7 	bleq	80009d2 <__aeabi_ddiv+0x16e>
 8000884:	eba4 0405 	sub.w	r4, r4, r5
 8000888:	ea81 0e03 	eor.w	lr, r1, r3
 800088c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f000 8088 	beq.w	80009a8 <__aeabi_ddiv+0x144>
 8000898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800089c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008bc:	429d      	cmp	r5, r3
 80008be:	bf08      	it	eq
 80008c0:	4296      	cmpeq	r6, r2
 80008c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ca:	d202      	bcs.n	80008d2 <__aeabi_ddiv+0x6e>
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	eb65 0503 	sbc.w	r5, r5, r3
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000940:	ea55 0e06 	orrs.w	lr, r5, r6
 8000944:	d018      	beq.n	8000978 <__aeabi_ddiv+0x114>
 8000946:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000962:	d1c0      	bne.n	80008e6 <__aeabi_ddiv+0x82>
 8000964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000968:	d10b      	bne.n	8000982 <__aeabi_ddiv+0x11e>
 800096a:	ea41 0100 	orr.w	r1, r1, r0
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000976:	e7b6      	b.n	80008e6 <__aeabi_ddiv+0x82>
 8000978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800097c:	bf04      	itt	eq
 800097e:	4301      	orreq	r1, r0
 8000980:	2000      	moveq	r0, #0
 8000982:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000986:	bf88      	it	hi
 8000988:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800098c:	f63f aeaf 	bhi.w	80006ee <__aeabi_dmul+0xde>
 8000990:	ebb5 0c03 	subs.w	ip, r5, r3
 8000994:	bf04      	itt	eq
 8000996:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099e:	f150 0000 	adcs.w	r0, r0, #0
 80009a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b4:	bfc2      	ittt	gt
 80009b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009be:	bd70      	popgt	{r4, r5, r6, pc}
 80009c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c4:	f04f 0e00 	mov.w	lr, #0
 80009c8:	3c01      	subs	r4, #1
 80009ca:	e690      	b.n	80006ee <__aeabi_dmul+0xde>
 80009cc:	ea45 0e06 	orr.w	lr, r5, r6
 80009d0:	e68d      	b.n	80006ee <__aeabi_dmul+0xde>
 80009d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d6:	ea94 0f0c 	teq	r4, ip
 80009da:	bf08      	it	eq
 80009dc:	ea95 0f0c 	teqeq	r5, ip
 80009e0:	f43f af3b 	beq.w	800085a <__aeabi_dmul+0x24a>
 80009e4:	ea94 0f0c 	teq	r4, ip
 80009e8:	d10a      	bne.n	8000a00 <__aeabi_ddiv+0x19c>
 80009ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ee:	f47f af34 	bne.w	800085a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	f47f af25 	bne.w	8000844 <__aeabi_dmul+0x234>
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	e72c      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a00:	ea95 0f0c 	teq	r5, ip
 8000a04:	d106      	bne.n	8000a14 <__aeabi_ddiv+0x1b0>
 8000a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0a:	f43f aefd 	beq.w	8000808 <__aeabi_dmul+0x1f8>
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	e722      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	f47f aec5 	bne.w	80007ac <__aeabi_dmul+0x19c>
 8000a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a26:	f47f af0d 	bne.w	8000844 <__aeabi_dmul+0x234>
 8000a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2e:	f47f aeeb 	bne.w	8000808 <__aeabi_dmul+0x1f8>
 8000a32:	e712      	b.n	800085a <__aeabi_dmul+0x24a>

08000a34 <__gedf2>:
 8000a34:	f04f 3cff 	mov.w	ip, #4294967295
 8000a38:	e006      	b.n	8000a48 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__ledf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	e002      	b.n	8000a48 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__cmpdf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5e:	d01b      	beq.n	8000a98 <__cmpdf2+0x54>
 8000a60:	b001      	add	sp, #4
 8000a62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a66:	bf0c      	ite	eq
 8000a68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a6c:	ea91 0f03 	teqne	r1, r3
 8000a70:	bf02      	ittt	eq
 8000a72:	ea90 0f02 	teqeq	r0, r2
 8000a76:	2000      	moveq	r0, #0
 8000a78:	4770      	bxeq	lr
 8000a7a:	f110 0f00 	cmn.w	r0, #0
 8000a7e:	ea91 0f03 	teq	r1, r3
 8000a82:	bf58      	it	pl
 8000a84:	4299      	cmppl	r1, r3
 8000a86:	bf08      	it	eq
 8000a88:	4290      	cmpeq	r0, r2
 8000a8a:	bf2c      	ite	cs
 8000a8c:	17d8      	asrcs	r0, r3, #31
 8000a8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a92:	f040 0001 	orr.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__cmpdf2+0x64>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d107      	bne.n	8000ab8 <__cmpdf2+0x74>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d1d6      	bne.n	8000a60 <__cmpdf2+0x1c>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d0d3      	beq.n	8000a60 <__cmpdf2+0x1c>
 8000ab8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdrcmple>:
 8000ac0:	4684      	mov	ip, r0
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4662      	mov	r2, ip
 8000ac6:	468c      	mov	ip, r1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4663      	mov	r3, ip
 8000acc:	e000      	b.n	8000ad0 <__aeabi_cdcmpeq>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdcmpeq>:
 8000ad0:	b501      	push	{r0, lr}
 8000ad2:	f7ff ffb7 	bl	8000a44 <__cmpdf2>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	bf48      	it	mi
 8000ada:	f110 0f00 	cmnmi.w	r0, #0
 8000ade:	bd01      	pop	{r0, pc}

08000ae0 <__aeabi_dcmpeq>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff fff4 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000ae8:	bf0c      	ite	eq
 8000aea:	2001      	moveq	r0, #1
 8000aec:	2000      	movne	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmplt>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffea 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000afc:	bf34      	ite	cc
 8000afe:	2001      	movcc	r0, #1
 8000b00:	2000      	movcs	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmple>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffe0 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000b10:	bf94      	ite	ls
 8000b12:	2001      	movls	r0, #1
 8000b14:	2000      	movhi	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpge>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffce 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b24:	bf94      	ite	ls
 8000b26:	2001      	movls	r0, #1
 8000b28:	2000      	movhi	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmpgt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffc4 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_d2iz>:
 8000b44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b4c:	d215      	bcs.n	8000b7a <__aeabi_d2iz+0x36>
 8000b4e:	d511      	bpl.n	8000b74 <__aeabi_d2iz+0x30>
 8000b50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b58:	d912      	bls.n	8000b80 <__aeabi_d2iz+0x3c>
 8000b5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7e:	d105      	bne.n	8000b8c <__aeabi_d2iz+0x48>
 8000b80:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	bf08      	it	eq
 8000b86:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop

08000b94 <__aeabi_d2uiz>:
 8000b94:	004a      	lsls	r2, r1, #1
 8000b96:	d211      	bcs.n	8000bbc <__aeabi_d2uiz+0x28>
 8000b98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b9c:	d211      	bcs.n	8000bc2 <__aeabi_d2uiz+0x2e>
 8000b9e:	d50d      	bpl.n	8000bbc <__aeabi_d2uiz+0x28>
 8000ba0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba8:	d40e      	bmi.n	8000bc8 <__aeabi_d2uiz+0x34>
 8000baa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d102      	bne.n	8000bce <__aeabi_d2uiz+0x3a>
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	4770      	bx	lr
 8000bce:	f04f 0000 	mov.w	r0, #0
 8000bd2:	4770      	bx	lr

08000bd4 <__aeabi_d2f>:
 8000bd4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bdc:	bf24      	itt	cs
 8000bde:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000be6:	d90d      	bls.n	8000c04 <__aeabi_d2f+0x30>
 8000be8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bfc:	bf08      	it	eq
 8000bfe:	f020 0001 	biceq.w	r0, r0, #1
 8000c02:	4770      	bx	lr
 8000c04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c08:	d121      	bne.n	8000c4e <__aeabi_d2f+0x7a>
 8000c0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c0e:	bfbc      	itt	lt
 8000c10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c14:	4770      	bxlt	lr
 8000c16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c1e:	f1c2 0218 	rsb	r2, r2, #24
 8000c22:	f1c2 0c20 	rsb	ip, r2, #32
 8000c26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c2e:	bf18      	it	ne
 8000c30:	f040 0001 	orrne.w	r0, r0, #1
 8000c34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c40:	ea40 000c 	orr.w	r0, r0, ip
 8000c44:	fa23 f302 	lsr.w	r3, r3, r2
 8000c48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c4c:	e7cc      	b.n	8000be8 <__aeabi_d2f+0x14>
 8000c4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c52:	d107      	bne.n	8000c64 <__aeabi_d2f+0x90>
 8000c54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c58:	bf1e      	ittt	ne
 8000c5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c62:	4770      	bxne	lr
 8000c64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop

08000c74 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c80:	78fb      	ldrb	r3, [r7, #3]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d006      	beq.n	8000c94 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f043 0201 	orr.w	r2, r3, #1
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000c92:	e005      	b.n	8000ca0 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f023 0201 	bic.w	r2, r3, #1
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	601a      	str	r2, [r3, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <DMA_GetCurrDataCounter>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	b29b      	uxth	r3, r3
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b085      	sub	sp, #20
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d002      	beq.n	8000ce4 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	73fb      	strb	r3, [r7, #15]
 8000ce2:	e001      	b.n	8000ce8 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3714      	adds	r7, #20
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
	...

08000cf8 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b087      	sub	sp, #28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000d02:	2300      	movs	r3, #0
 8000d04:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a15      	ldr	r2, [pc, #84]	; (8000d64 <DMA_GetFlagStatus+0x6c>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d802      	bhi.n	8000d18 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <DMA_GetFlagStatus+0x70>)
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	e001      	b.n	8000d1c <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000d18:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <DMA_GetFlagStatus+0x74>)
 8000d1a:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d003      	beq.n	8000d2e <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	e002      	b.n	8000d34 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000d3a:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000d3e:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000d40:	68fa      	ldr	r2, [r7, #12]
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	4013      	ands	r3, r2
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d002      	beq.n	8000d50 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	75fb      	strb	r3, [r7, #23]
 8000d4e:	e001      	b.n	8000d54 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000d50:	2300      	movs	r3, #0
 8000d52:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	371c      	adds	r7, #28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	4002640f 	.word	0x4002640f
 8000d68:	40026000 	.word	0x40026000
 8000d6c:	40026400 	.word	0x40026400

08000d70 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a10      	ldr	r2, [pc, #64]	; (8000dc0 <DMA_ClearITPendingBit+0x50>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d802      	bhi.n	8000d88 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <DMA_ClearITPendingBit+0x54>)
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	e001      	b.n	8000d8c <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <DMA_ClearITPendingBit+0x58>)
 8000d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d007      	beq.n	8000da6 <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000d9c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000da0:	68fa      	ldr	r2, [r7, #12]
 8000da2:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 8000da4:	e006      	b.n	8000db4 <DMA_ClearITPendingBit+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000dac:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000db0:	68fa      	ldr	r2, [r7, #12]
 8000db2:	6093      	str	r3, [r2, #8]
}
 8000db4:	bf00      	nop
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	4002640f 	.word	0x4002640f
 8000dc4:	40026000 	.word	0x40026000
 8000dc8:	40026400 	.word	0x40026400

08000dcc <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000de0:	89fb      	ldrh	r3, [r7, #14]
 8000de2:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8000de6:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	881a      	ldrh	r2, [r3, #0]
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	885b      	ldrh	r3, [r3, #2]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000e00:	4313      	orrs	r3, r2
 8000e02:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000e10:	4313      	orrs	r3, r2
 8000e12:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000e20:	4313      	orrs	r3, r2
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	89fb      	ldrh	r3, [r7, #14]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	89fa      	ldrh	r2, [r7, #14]
 8000e2e:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	8b9b      	ldrh	r3, [r3, #28]
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	8a1a      	ldrh	r2, [r3, #16]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	821a      	strh	r2, [r3, #16]
}
 8000e48:	bf00      	nop
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2200      	movs	r2, #0
 8000e72:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2200      	movs	r2, #0
 8000e84:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2207      	movs	r2, #7
 8000e90:	821a      	strh	r2, [r3, #16]
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b083      	sub	sp, #12
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	889b      	ldrh	r3, [r3, #4]
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000eb0:	b29b      	uxth	r3, r3
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b085      	sub	sp, #20
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	881b      	ldrh	r3, [r3, #0]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	887b      	ldrh	r3, [r7, #2]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d002      	beq.n	8000ee4 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	73fb      	strb	r3, [r7, #15]
 8000ee2:	e001      	b.n	8000ee8 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b087      	sub	sp, #28
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
 8000efe:	460b      	mov	r3, r1
 8000f00:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000f12:	887b      	ldrh	r3, [r7, #2]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	095b      	lsrs	r3, r3, #5
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000f1c:	887b      	ldrh	r3, [r7, #2]
 8000f1e:	f003 031f 	and.w	r3, r3, #31
 8000f22:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000f24:	2201      	movs	r2, #1
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d107      	bne.n	8000f44 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	899b      	ldrh	r3, [r3, #12]
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	e011      	b.n	8000f68 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d107      	bne.n	8000f5a <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	8a1b      	ldrh	r3, [r3, #16]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	461a      	mov	r2, r3
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	4013      	ands	r3, r2
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	e006      	b.n	8000f68 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	8a9b      	ldrh	r3, [r3, #20]
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	461a      	mov	r2, r3
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	4013      	ands	r3, r2
 8000f66:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000f68:	887b      	ldrh	r3, [r7, #2]
 8000f6a:	0a1b      	lsrs	r3, r3, #8
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000f70:	2201      	movs	r2, #1
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	461a      	mov	r2, r3
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	4013      	ands	r3, r2
 8000f86:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d005      	beq.n	8000f9a <USART_GetITStatus+0xa4>
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d002      	beq.n	8000f9a <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000f94:	2301      	movs	r3, #1
 8000f96:	74fb      	strb	r3, [r7, #19]
 8000f98:	e001      	b.n	8000f9e <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000f9e:	7cfb      	ldrb	r3, [r7, #19]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	371c      	adds	r7, #28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8000fb8:	88fb      	ldrh	r3, [r7, #6]
 8000fba:	2b7f      	cmp	r3, #127	; 0x7f
 8000fbc:	d802      	bhi.n	8000fc4 <ff_convert+0x18>
		c = chr;
 8000fbe:	88fb      	ldrh	r3, [r7, #6]
 8000fc0:	81fb      	strh	r3, [r7, #14]
 8000fc2:	e025      	b.n	8001010 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00b      	beq.n	8000fe2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8000fca:	88fb      	ldrh	r3, [r7, #6]
 8000fcc:	2bff      	cmp	r3, #255	; 0xff
 8000fce:	d805      	bhi.n	8000fdc <ff_convert+0x30>
 8000fd0:	88fb      	ldrh	r3, [r7, #6]
 8000fd2:	3b80      	subs	r3, #128	; 0x80
 8000fd4:	4a12      	ldr	r2, [pc, #72]	; (8001020 <ff_convert+0x74>)
 8000fd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fda:	e000      	b.n	8000fde <ff_convert+0x32>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	81fb      	strh	r3, [r7, #14]
 8000fe0:	e016      	b.n	8001010 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	81fb      	strh	r3, [r7, #14]
 8000fe6:	e009      	b.n	8000ffc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8000fe8:	89fb      	ldrh	r3, [r7, #14]
 8000fea:	4a0d      	ldr	r2, [pc, #52]	; (8001020 <ff_convert+0x74>)
 8000fec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ff0:	88fa      	ldrh	r2, [r7, #6]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d006      	beq.n	8001004 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8000ff6:	89fb      	ldrh	r3, [r7, #14]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	81fb      	strh	r3, [r7, #14]
 8000ffc:	89fb      	ldrh	r3, [r7, #14]
 8000ffe:	2b7f      	cmp	r3, #127	; 0x7f
 8001000:	d9f2      	bls.n	8000fe8 <ff_convert+0x3c>
 8001002:	e000      	b.n	8001006 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8001004:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8001006:	89fb      	ldrh	r3, [r7, #14]
 8001008:	3380      	adds	r3, #128	; 0x80
 800100a:	b29b      	uxth	r3, r3
 800100c:	b2db      	uxtb	r3, r3
 800100e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8001010:	89fb      	ldrh	r3, [r7, #14]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	08008f84 	.word	0x08008f84

08001024 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	e002      	b.n	800103a <ff_wtoupper+0x16>
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3301      	adds	r3, #1
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	4a0f      	ldr	r2, [pc, #60]	; (8001078 <ff_wtoupper+0x54>)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d006      	beq.n	8001054 <ff_wtoupper+0x30>
 8001046:	4a0c      	ldr	r2, [pc, #48]	; (8001078 <ff_wtoupper+0x54>)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800104e:	88fa      	ldrh	r2, [r7, #6]
 8001050:	429a      	cmp	r2, r3
 8001052:	d1ef      	bne.n	8001034 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8001054:	4a08      	ldr	r2, [pc, #32]	; (8001078 <ff_wtoupper+0x54>)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d004      	beq.n	800106a <ff_wtoupper+0x46>
 8001060:	4a06      	ldr	r2, [pc, #24]	; (800107c <ff_wtoupper+0x58>)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001068:	e000      	b.n	800106c <ff_wtoupper+0x48>
 800106a:	88fb      	ldrh	r3, [r7, #6]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	08009084 	.word	0x08009084
 800107c:	08009264 	.word	0x08009264

08001080 <disk_initialize>:
/* Inidialize a Drive                                                    */
/*-----------------------------------------------------------------------*/
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber (0..) */
)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
	/* Return low level status */
	if (FATFS_LowLevelDrivers[pdrv].disk_initialize) {
 800108a:	79fa      	ldrb	r2, [r7, #7]
 800108c:	490c      	ldr	r1, [pc, #48]	; (80010c0 <disk_initialize+0x40>)
 800108e:	4613      	mov	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	440b      	add	r3, r1
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d00a      	beq.n	80010b4 <disk_initialize+0x34>
		return FATFS_LowLevelDrivers[pdrv].disk_initialize();
 800109e:	79fa      	ldrb	r2, [r7, #7]
 80010a0:	4907      	ldr	r1, [pc, #28]	; (80010c0 <disk_initialize+0x40>)
 80010a2:	4613      	mov	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	440b      	add	r3, r1
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4798      	blx	r3
 80010b0:	4603      	mov	r3, r0
 80010b2:	e000      	b.n	80010b6 <disk_initialize+0x36>
	}
	
	/* Return parameter error */
	return RES_PARERR;
 80010b4:	2304      	movs	r3, #4
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000000 	.word	0x20000000

080010c4 <disk_status>:
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0..) */
)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
	/* Return low level status */
	if (FATFS_LowLevelDrivers[pdrv].disk_status) {
 80010ce:	79fa      	ldrb	r2, [r7, #7]
 80010d0:	490d      	ldr	r1, [pc, #52]	; (8001108 <disk_status+0x44>)
 80010d2:	4613      	mov	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	440b      	add	r3, r1
 80010dc:	3304      	adds	r3, #4
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d00b      	beq.n	80010fc <disk_status+0x38>
		return FATFS_LowLevelDrivers[pdrv].disk_status();
 80010e4:	79fa      	ldrb	r2, [r7, #7]
 80010e6:	4908      	ldr	r1, [pc, #32]	; (8001108 <disk_status+0x44>)
 80010e8:	4613      	mov	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	4413      	add	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	440b      	add	r3, r1
 80010f2:	3304      	adds	r3, #4
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4798      	blx	r3
 80010f8:	4603      	mov	r3, r0
 80010fa:	e000      	b.n	80010fe <disk_status+0x3a>
	}
	
	/* Return parameter error */
	return RES_PARERR;
 80010fc:	2304      	movs	r3, #4
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000000 	.word	0x20000000

0800110c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607a      	str	r2, [r7, #4]
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	4603      	mov	r3, r0
 800111a:	73fb      	strb	r3, [r7, #15]
	/* Check count */
	if (!count) {
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <disk_read+0x1a>
		return RES_PARERR;
 8001122:	2304      	movs	r3, #4
 8001124:	e01a      	b.n	800115c <disk_read+0x50>
	}
	
	/* Return low level status */
	if (FATFS_LowLevelDrivers[pdrv].disk_read) {
 8001126:	7bfa      	ldrb	r2, [r7, #15]
 8001128:	490e      	ldr	r1, [pc, #56]	; (8001164 <disk_read+0x58>)
 800112a:	4613      	mov	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	440b      	add	r3, r1
 8001134:	3310      	adds	r3, #16
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d00e      	beq.n	800115a <disk_read+0x4e>
		return FATFS_LowLevelDrivers[pdrv].disk_read(buff, sector, count);
 800113c:	7bfa      	ldrb	r2, [r7, #15]
 800113e:	4909      	ldr	r1, [pc, #36]	; (8001164 <disk_read+0x58>)
 8001140:	4613      	mov	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	440b      	add	r3, r1
 800114a:	3310      	adds	r3, #16
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	6879      	ldr	r1, [r7, #4]
 8001152:	68b8      	ldr	r0, [r7, #8]
 8001154:	4798      	blx	r3
 8001156:	4603      	mov	r3, r0
 8001158:	e000      	b.n	800115c <disk_read+0x50>
	}
	
	/* Return parameter error */
	return RES_PARERR;
 800115a:	2304      	movs	r3, #4
}
 800115c:	4618      	mov	r0, r3
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000000 	.word	0x20000000

08001168 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0..) */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
 8001172:	603b      	str	r3, [r7, #0]
 8001174:	4603      	mov	r3, r0
 8001176:	73fb      	strb	r3, [r7, #15]
	/* Check count */
	if (!count) {
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <disk_write+0x1a>
		return RES_PARERR;
 800117e:	2304      	movs	r3, #4
 8001180:	e01a      	b.n	80011b8 <disk_write+0x50>
	}
	
	/* Return low level status */
	if (FATFS_LowLevelDrivers[pdrv].disk_write) {
 8001182:	7bfa      	ldrb	r2, [r7, #15]
 8001184:	490e      	ldr	r1, [pc, #56]	; (80011c0 <disk_write+0x58>)
 8001186:	4613      	mov	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	440b      	add	r3, r1
 8001190:	330c      	adds	r3, #12
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00e      	beq.n	80011b6 <disk_write+0x4e>
		return FATFS_LowLevelDrivers[pdrv].disk_write(buff, sector, count);
 8001198:	7bfa      	ldrb	r2, [r7, #15]
 800119a:	4909      	ldr	r1, [pc, #36]	; (80011c0 <disk_write+0x58>)
 800119c:	4613      	mov	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	440b      	add	r3, r1
 80011a6:	330c      	adds	r3, #12
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	6879      	ldr	r1, [r7, #4]
 80011ae:	68b8      	ldr	r0, [r7, #8]
 80011b0:	4798      	blx	r3
 80011b2:	4603      	mov	r3, r0
 80011b4:	e000      	b.n	80011b8 <disk_write+0x50>
	}
	
	/* Return parameter error */
	return RES_PARERR;
 80011b6:	2304      	movs	r3, #4
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000000 	.word	0x20000000

080011c4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	603a      	str	r2, [r7, #0]
 80011ce:	71fb      	strb	r3, [r7, #7]
 80011d0:	460b      	mov	r3, r1
 80011d2:	71bb      	strb	r3, [r7, #6]
	/* Return low level status */
	if (FATFS_LowLevelDrivers[pdrv].disk_ioctl) {
 80011d4:	79fa      	ldrb	r2, [r7, #7]
 80011d6:	490f      	ldr	r1, [pc, #60]	; (8001214 <disk_ioctl+0x50>)
 80011d8:	4613      	mov	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4413      	add	r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	440b      	add	r3, r1
 80011e2:	3308      	adds	r3, #8
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d00e      	beq.n	8001208 <disk_ioctl+0x44>
		return FATFS_LowLevelDrivers[pdrv].disk_ioctl(cmd, buff);
 80011ea:	79fa      	ldrb	r2, [r7, #7]
 80011ec:	4909      	ldr	r1, [pc, #36]	; (8001214 <disk_ioctl+0x50>)
 80011ee:	4613      	mov	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	440b      	add	r3, r1
 80011f8:	3308      	adds	r3, #8
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	79ba      	ldrb	r2, [r7, #6]
 80011fe:	6839      	ldr	r1, [r7, #0]
 8001200:	4610      	mov	r0, r2
 8001202:	4798      	blx	r3
 8001204:	4603      	mov	r3, r0
 8001206:	e000      	b.n	800120a <disk_ioctl+0x46>
	}
	
	/* Return parameter error */
	return RES_PARERR;
 8001208:	2304      	movs	r3, #4
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000000 	.word	0x20000000

08001218 <get_fattime>:
#endif

/*-----------------------------------------------------------------------*/
/* Get time for fatfs for files                                          */
/*-----------------------------------------------------------------------*/
__weak DWORD get_fattime(void) {
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
	/* Returns current time packed into a DWORD variable */
	return	  ((DWORD)(2013 - 1980) << 25)	/* Year 2013 */
 800121c:	4b02      	ldr	r3, [pc, #8]	; (8001228 <get_fattime+0x10>)
			| ((DWORD)7 << 21)				/* Month 7 */
			| ((DWORD)28 << 16)				/* Mday 28 */
			| ((DWORD)0 << 11)				/* Hour 0 */
			| ((DWORD)0 << 5)				/* Min 0 */
			| ((DWORD)0 >> 1);				/* Sec 0 */
}
 800121e:	4618      	mov	r0, r3
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	42fc0000 	.word	0x42fc0000

0800122c <TM_FATFS_USB_disk_initialize>:

/* Function declarations to prevent link errors if functions are not found */
__weak DSTATUS TM_FATFS_SD_SDIO_disk_initialize(void) {return RES_ERROR;}
__weak DSTATUS TM_FATFS_SD_disk_initialize(void) {return RES_ERROR;}
__weak DSTATUS TM_FATFS_USB_disk_initialize(void) {return RES_ERROR;}
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
 8001230:	2301      	movs	r3, #1
 8001232:	4618      	mov	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <TM_FATFS_SDRAM_disk_initialize>:
__weak DSTATUS TM_FATFS_SDRAM_disk_initialize(void) {return RES_ERROR;}
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
 8001240:	2301      	movs	r3, #1
 8001242:	4618      	mov	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <TM_FATFS_SPI_FLASH_disk_initialize>:
__weak DSTATUS TM_FATFS_SPI_FLASH_disk_initialize(void) {return RES_ERROR;}
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
 8001250:	2301      	movs	r3, #1
 8001252:	4618      	mov	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <TM_FATFS_USB_disk_status>:

__weak DSTATUS TM_FATFS_SD_SDIO_disk_status(void) {return RES_ERROR;}
__weak DSTATUS TM_FATFS_SD_disk_status(void) {return RES_ERROR;}
__weak DSTATUS TM_FATFS_USB_disk_status(void) {return RES_ERROR;}
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
 8001260:	2301      	movs	r3, #1
 8001262:	4618      	mov	r0, r3
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <TM_FATFS_SDRAM_disk_status>:
__weak DSTATUS TM_FATFS_SDRAM_disk_status(void) {return RES_ERROR;}
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
 8001270:	2301      	movs	r3, #1
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <TM_FATFS_SPI_FLASH_disk_status>:
__weak DSTATUS TM_FATFS_SPI_FLASH_disk_status(void) {return RES_ERROR;}
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
 8001280:	2301      	movs	r3, #1
 8001282:	4618      	mov	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <TM_FATFS_USB_disk_ioctl>:

__weak DRESULT TM_FATFS_SD_SDIO_disk_ioctl(BYTE cmd, void *buff) {return (DRESULT)STA_NOINIT;}
__weak DRESULT TM_FATFS_SD_disk_ioctl(BYTE cmd, void *buff) {return (DRESULT)STA_NOINIT;}
__weak DRESULT TM_FATFS_USB_disk_ioctl(BYTE cmd, void *buff) {return (DRESULT)STA_NOINIT;}
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	6039      	str	r1, [r7, #0]
 8001296:	71fb      	strb	r3, [r7, #7]
 8001298:	2301      	movs	r3, #1
 800129a:	4618      	mov	r0, r3
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <TM_FATFS_SDRAM_disk_ioctl>:
__weak DRESULT TM_FATFS_SDRAM_disk_ioctl(BYTE cmd, void *buff) {return (DRESULT)STA_NOINIT;}
 80012a6:	b480      	push	{r7}
 80012a8:	b083      	sub	sp, #12
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	4603      	mov	r3, r0
 80012ae:	6039      	str	r1, [r7, #0]
 80012b0:	71fb      	strb	r3, [r7, #7]
 80012b2:	2301      	movs	r3, #1
 80012b4:	4618      	mov	r0, r3
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <TM_FATFS_SPI_FLASH_disk_ioctl>:
__weak DRESULT TM_FATFS_SPI_FLASH_disk_ioctl(BYTE cmd, void *buff) {return (DRESULT)STA_NOINIT;}
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	6039      	str	r1, [r7, #0]
 80012ca:	71fb      	strb	r3, [r7, #7]
 80012cc:	2301      	movs	r3, #1
 80012ce:	4618      	mov	r0, r3
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <TM_FATFS_USB_disk_read>:

__weak DRESULT TM_FATFS_SD_SDIO_disk_read(BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
__weak DRESULT TM_FATFS_SD_disk_read(BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
__weak DRESULT TM_FATFS_USB_disk_read(BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
 80012da:	b480      	push	{r7}
 80012dc:	b085      	sub	sp, #20
 80012de:	af00      	add	r7, sp, #0
 80012e0:	60f8      	str	r0, [r7, #12]
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	2301      	movs	r3, #1
 80012e8:	4618      	mov	r0, r3
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <TM_FATFS_SDRAM_disk_read>:
__weak DRESULT TM_FATFS_SDRAM_disk_read(BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
 8001300:	2301      	movs	r3, #1
 8001302:	4618      	mov	r0, r3
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <TM_FATFS_SPI_FLASH_disk_read>:
__weak DRESULT TM_FATFS_SPI_FLASH_disk_read(BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
 800130e:	b480      	push	{r7}
 8001310:	b085      	sub	sp, #20
 8001312:	af00      	add	r7, sp, #0
 8001314:	60f8      	str	r0, [r7, #12]
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
 800131a:	2301      	movs	r3, #1
 800131c:	4618      	mov	r0, r3
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <TM_FATFS_USB_disk_write>:

__weak DRESULT TM_FATFS_SD_SDIO_disk_write(const BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
__weak DRESULT TM_FATFS_SD_disk_write(const BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
__weak DRESULT TM_FATFS_USB_disk_write(const BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
 8001334:	2301      	movs	r3, #1
 8001336:	4618      	mov	r0, r3
 8001338:	3714      	adds	r7, #20
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <TM_FATFS_SDRAM_disk_write>:
__weak DRESULT TM_FATFS_SDRAM_disk_write(const BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
 8001342:	b480      	push	{r7}
 8001344:	b085      	sub	sp, #20
 8001346:	af00      	add	r7, sp, #0
 8001348:	60f8      	str	r0, [r7, #12]
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	2301      	movs	r3, #1
 8001350:	4618      	mov	r0, r3
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <TM_FATFS_SPI_FLASH_disk_write>:
__weak DRESULT TM_FATFS_SPI_FLASH_disk_write(const BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
 8001368:	2301      	movs	r3, #1
 800136a:	4618      	mov	r0, r3
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <TM_SPI_Send>:
 * @brief  Sends single byte over SPI
 * @param  *SPIx: Pointer to SPIx peripheral you will use, where x is between 1 to 6
 * @param  data: 8-bit data size to send over SPI
 * @retval Received byte from slave device
 */
static __INLINE uint8_t TM_SPI_Send(SPI_TypeDef* SPIx, uint8_t data) {
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	460b      	mov	r3, r1
 8001380:	70fb      	strb	r3, [r7, #3]
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED_RESP(SPIx, 0);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	b29b      	uxth	r3, r3
 8001388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800138c:	2b00      	cmp	r3, #0
 800138e:	d101      	bne.n	8001394 <TM_SPI_Send+0x1e>
 8001390:	2300      	movs	r3, #0
 8001392:	e025      	b.n	80013e0 <TM_SPI_Send+0x6a>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
 8001394:	bf00      	nop
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	891b      	ldrh	r3, [r3, #8]
 800139a:	b29b      	uxth	r3, r3
 800139c:	f003 0303 	and.w	r3, r3, #3
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0f8      	beq.n	8001396 <TM_SPI_Send+0x20>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	891b      	ldrh	r3, [r3, #8]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f1      	bne.n	8001396 <TM_SPI_Send+0x20>
	
	/* Fill output buffer with data */
	SPIx->DR = data;
 80013b2:	78fb      	ldrb	r3, [r7, #3]
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	819a      	strh	r2, [r3, #12]
	
	/* Wait for transmission to complete */
	SPI_WAIT(SPIx);
 80013ba:	bf00      	nop
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	891b      	ldrh	r3, [r3, #8]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	f003 0303 	and.w	r3, r3, #3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0f8      	beq.n	80013bc <TM_SPI_Send+0x46>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	891b      	ldrh	r3, [r3, #8]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1f1      	bne.n	80013bc <TM_SPI_Send+0x46>
	
	/* Return data from buffer */
	return SPIx->DR;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	899b      	ldrh	r3, [r3, #12]
 80013dc:	b29b      	uxth	r3, r3
 80013de:	b2db      	uxtb	r3, r3
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <Delayms>:
 * @param  Delays for specific amount of milliseconds
 * @param  millis: Time in milliseconds for delay
 * @retval None
 * @note   Declared as static inline
 */
static __INLINE void Delayms(uint32_t millis) {
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	volatile uint32_t timer = TM_Time;
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <Delayms+0x50>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	60bb      	str	r3, [r7, #8]
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80013fa:	f3ef 8305 	mrs	r3, IPSR
 80013fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8001400:	68fb      	ldr	r3, [r7, #12]

	/* Called from thread */
	if (!__get_IPSR()) {
 8001402:	2b00      	cmp	r3, #0
 8001404:	d111      	bne.n	800142a <Delayms+0x3e>
		/* Wait for timer to count milliseconds */
		while ((TM_Time - timer) < millis) {
 8001406:	bf00      	nop
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <Delayms+0x50>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	1ad2      	subs	r2, r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	429a      	cmp	r2, r3
 8001414:	d3f8      	bcc.n	8001408 <Delayms+0x1c>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
				millis--;
			}
		}
	}
}
 8001416:	e00b      	b.n	8001430 <Delayms+0x44>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <Delayms+0x54>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d002      	beq.n	800142a <Delayms+0x3e>
				millis--;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	607b      	str	r3, [r7, #4]
		while (millis) {
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1f3      	bne.n	8001418 <Delayms+0x2c>
}
 8001430:	bf00      	nop
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	20000320 	.word	0x20000320
 8001440:	e000e010 	.word	0xe000e010

08001444 <init_spi>:
static volatile DSTATUS TM_FATFS_SD_Stat = STA_NOINIT;	/* Physical drive status */

static BYTE TM_FATFS_SD_CardType;			/* Card type flags */

/* Initialize MMC interface */
static void init_spi (void) {
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
	/* Init delay functions */
	TM_DELAY_Init();
 8001448:	f003 f9da 	bl	8004800 <TM_DELAY_Init>
	
	/* Init SPI */
	TM_SPI_Init(FATFS_SPI, FATFS_SPI_PINSPACK);
 800144c:	2100      	movs	r1, #0
 800144e:	4806      	ldr	r0, [pc, #24]	; (8001468 <init_spi+0x24>)
 8001450:	f003 fb24 	bl	8004a9c <TM_SPI_Init>
	
	/* Set CS high */
	FATFS_CS_HIGH;
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <init_spi+0x28>)
 8001456:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800145a:	831a      	strh	r2, [r3, #24]
	
	/* Wait for stable */
	Delayms(10);
 800145c:	200a      	movs	r0, #10
 800145e:	f7ff ffc5 	bl	80013ec <Delayms>
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40013000 	.word	0x40013000
 800146c:	40020000 	.word	0x40020000

08001470 <rcvr_spi_multi>:
/* Receive multiple byte */
static void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
	/* Read multiple bytes, send 0xFF as dummy */
	TM_SPI_ReadMulti(FATFS_SPI, buff, 0xFF, btr);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	22ff      	movs	r2, #255	; 0xff
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	4803      	ldr	r0, [pc, #12]	; (8001490 <rcvr_spi_multi+0x20>)
 8001482:	f003 fb8e 	bl	8004ba2 <TM_SPI_ReadMulti>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40013000 	.word	0x40013000

08001494 <xmit_spi_multi>:
/* Send multiple byte */
static void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
	/* Write multiple bytes */
	TM_SPI_WriteMulti(FATFS_SPI, (uint8_t *)buff, btx);
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	6879      	ldr	r1, [r7, #4]
 80014a2:	4803      	ldr	r0, [pc, #12]	; (80014b0 <xmit_spi_multi+0x1c>)
 80014a4:	f003 fb38 	bl	8004b18 <TM_SPI_WriteMulti>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40013000 	.word	0x40013000

080014b4 <wait_ready>:
/*-----------------------------------------------------------------------*/

static int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	BYTE d;

	/* Set down counter */
	TM_DELAY_SetTime2(wt);
 80014bc:	4a0c      	ldr	r2, [pc, #48]	; (80014f0 <wait_ready+0x3c>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6013      	str	r3, [r2, #0]
	
	do {
		d = TM_SPI_Send(FATFS_SPI, 0xFF);
 80014c2:	21ff      	movs	r1, #255	; 0xff
 80014c4:	480b      	ldr	r0, [pc, #44]	; (80014f4 <wait_ready+0x40>)
 80014c6:	f7ff ff56 	bl	8001376 <TM_SPI_Send>
 80014ca:	4603      	mov	r3, r0
 80014cc:	73fb      	strb	r3, [r7, #15]
	} while (d != 0xFF && TM_DELAY_Time2());	/* Wait for card goes ready or timeout */
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	2bff      	cmp	r3, #255	; 0xff
 80014d2:	d003      	beq.n	80014dc <wait_ready+0x28>
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <wait_ready+0x3c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1f2      	bne.n	80014c2 <wait_ready+0xe>
	if (d == 0xFF) {
		FATFS_DEBUG_SEND_USART("wait_ready: OK");
	} else {
		FATFS_DEBUG_SEND_USART("wait_ready: timeout");
	}
	return (d == 0xFF) ? 1 : 0;
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	2bff      	cmp	r3, #255	; 0xff
 80014e0:	bf0c      	ite	eq
 80014e2:	2301      	moveq	r3, #1
 80014e4:	2300      	movne	r3, #0
 80014e6:	b2db      	uxtb	r3, r3
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000324 	.word	0x20000324
 80014f4:	40013000 	.word	0x40013000

080014f8 <deselect>:
/*-----------------------------------------------------------------------*/
/* Deselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static void deselect (void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
	FATFS_CS_HIGH;			/* CS = H */
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <deselect+0x18>)
 80014fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001502:	831a      	strh	r2, [r3, #24]
	TM_SPI_Send(FATFS_SPI, 0xFF);			/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8001504:	21ff      	movs	r1, #255	; 0xff
 8001506:	4803      	ldr	r0, [pc, #12]	; (8001514 <deselect+0x1c>)
 8001508:	f7ff ff35 	bl	8001376 <TM_SPI_Send>
	FATFS_DEBUG_SEND_USART("deselect: ok");
}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40020000 	.word	0x40020000
 8001514:	40013000 	.word	0x40013000

08001518 <Select>:
/*-----------------------------------------------------------------------*/
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static int Select (void)	/* 1:OK, 0:Timeout */
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	FATFS_CS_LOW;
 800151c:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <Select+0x30>)
 800151e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001522:	835a      	strh	r2, [r3, #26]
	TM_SPI_Send(FATFS_SPI, 0xFF);	/* Dummy clock (force DO enabled) */
 8001524:	21ff      	movs	r1, #255	; 0xff
 8001526:	4809      	ldr	r0, [pc, #36]	; (800154c <Select+0x34>)
 8001528:	f7ff ff25 	bl	8001376 <TM_SPI_Send>

	if (wait_ready(500)) {
 800152c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001530:	f7ff ffc0 	bl	80014b4 <wait_ready>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <Select+0x26>
		FATFS_DEBUG_SEND_USART("select: OK");
		return 1;	/* OK */
 800153a:	2301      	movs	r3, #1
 800153c:	e002      	b.n	8001544 <Select+0x2c>
	}
	FATFS_DEBUG_SEND_USART("select: no");
	deselect();
 800153e:	f7ff ffdb 	bl	80014f8 <deselect>
	return 0;	/* Timeout */
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40020000 	.word	0x40020000
 800154c:	40013000 	.word	0x40013000

08001550 <rcvr_datablock>:

static int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
	BYTE token;
	
	//Timer1 = 200;
	
	TM_DELAY_SetTime2(200);
 800155a:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <rcvr_datablock+0x58>)
 800155c:	22c8      	movs	r2, #200	; 0xc8
 800155e:	601a      	str	r2, [r3, #0]
	do {							// Wait for DataStart token in timeout of 200ms 
		token = TM_SPI_Send(FATFS_SPI, 0xFF);
 8001560:	21ff      	movs	r1, #255	; 0xff
 8001562:	4812      	ldr	r0, [pc, #72]	; (80015ac <rcvr_datablock+0x5c>)
 8001564:	f7ff ff07 	bl	8001376 <TM_SPI_Send>
 8001568:	4603      	mov	r3, r0
 800156a:	73fb      	strb	r3, [r7, #15]
		// This loop will take a time. Insert rot_rdq() here for multitask envilonment. 
	} while ((token == 0xFF) && TM_DELAY_Time2());
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	2bff      	cmp	r3, #255	; 0xff
 8001570:	d103      	bne.n	800157a <rcvr_datablock+0x2a>
 8001572:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <rcvr_datablock+0x58>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f2      	bne.n	8001560 <rcvr_datablock+0x10>
	if (token != 0xFE) {
 800157a:	7bfb      	ldrb	r3, [r7, #15]
 800157c:	2bfe      	cmp	r3, #254	; 0xfe
 800157e:	d001      	beq.n	8001584 <rcvr_datablock+0x34>
		FATFS_DEBUG_SEND_USART("rcvr_datablock: token != 0xFE");
		return 0;		// Function fails if invalid DataStart token or timeout 
 8001580:	2300      	movs	r3, #0
 8001582:	e00c      	b.n	800159e <rcvr_datablock+0x4e>
	}

	rcvr_spi_multi(buff, btr);		// Store trailing data to the buffer 
 8001584:	6839      	ldr	r1, [r7, #0]
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff ff72 	bl	8001470 <rcvr_spi_multi>
	TM_SPI_Send(FATFS_SPI, 0xFF); TM_SPI_Send(FATFS_SPI, 0xFF);			// Discard CRC 
 800158c:	21ff      	movs	r1, #255	; 0xff
 800158e:	4807      	ldr	r0, [pc, #28]	; (80015ac <rcvr_datablock+0x5c>)
 8001590:	f7ff fef1 	bl	8001376 <TM_SPI_Send>
 8001594:	21ff      	movs	r1, #255	; 0xff
 8001596:	4805      	ldr	r0, [pc, #20]	; (80015ac <rcvr_datablock+0x5c>)
 8001598:	f7ff feed 	bl	8001376 <TM_SPI_Send>
	return 1;						// Function succeeded 
 800159c:	2301      	movs	r3, #1
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000324 	.word	0x20000324
 80015ac:	40013000 	.word	0x40013000

080015b0 <xmit_datablock>:
#if _USE_WRITE
static int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	70fb      	strb	r3, [r7, #3]
	BYTE resp;
	
	FATFS_DEBUG_SEND_USART("xmit_datablock: inside");

	if (!wait_ready(500)) {
 80015bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015c0:	f7ff ff78 	bl	80014b4 <wait_ready>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <xmit_datablock+0x1e>
		FATFS_DEBUG_SEND_USART("xmit_datablock: not ready");
		return 0;		/* Wait for card ready */
 80015ca:	2300      	movs	r3, #0
 80015cc:	e022      	b.n	8001614 <xmit_datablock+0x64>
	}
	FATFS_DEBUG_SEND_USART("xmit_datablock: ready");

	TM_SPI_Send(FATFS_SPI, token);					/* Send token */
 80015ce:	78fb      	ldrb	r3, [r7, #3]
 80015d0:	4619      	mov	r1, r3
 80015d2:	4812      	ldr	r0, [pc, #72]	; (800161c <xmit_datablock+0x6c>)
 80015d4:	f7ff fecf 	bl	8001376 <TM_SPI_Send>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	2bfd      	cmp	r3, #253	; 0xfd
 80015dc:	d019      	beq.n	8001612 <xmit_datablock+0x62>
		xmit_spi_multi(buff, 512);		/* Data */
 80015de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff ff56 	bl	8001494 <xmit_spi_multi>
		TM_SPI_Send(FATFS_SPI, 0xFF); TM_SPI_Send(FATFS_SPI, 0xFF);	/* Dummy CRC */
 80015e8:	21ff      	movs	r1, #255	; 0xff
 80015ea:	480c      	ldr	r0, [pc, #48]	; (800161c <xmit_datablock+0x6c>)
 80015ec:	f7ff fec3 	bl	8001376 <TM_SPI_Send>
 80015f0:	21ff      	movs	r1, #255	; 0xff
 80015f2:	480a      	ldr	r0, [pc, #40]	; (800161c <xmit_datablock+0x6c>)
 80015f4:	f7ff febf 	bl	8001376 <TM_SPI_Send>

		resp = TM_SPI_Send(FATFS_SPI, 0xFF);				/* Receive data resp */
 80015f8:	21ff      	movs	r1, #255	; 0xff
 80015fa:	4808      	ldr	r0, [pc, #32]	; (800161c <xmit_datablock+0x6c>)
 80015fc:	f7ff febb 	bl	8001376 <TM_SPI_Send>
 8001600:	4603      	mov	r3, r0
 8001602:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05)		/* Function fails if the data packet was not accepted */
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	f003 031f 	and.w	r3, r3, #31
 800160a:	2b05      	cmp	r3, #5
 800160c:	d001      	beq.n	8001612 <xmit_datablock+0x62>
			return 0;
 800160e:	2300      	movs	r3, #0
 8001610:	e000      	b.n	8001614 <xmit_datablock+0x64>
	}
	return 1;
 8001612:	2301      	movs	r3, #1
}
 8001614:	4618      	mov	r0, r3
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40013000 	.word	0x40013000

08001620 <send_cmd>:

static BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	6039      	str	r1, [r7, #0]
 800162a:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;
	
	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800162c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001630:	2b00      	cmp	r3, #0
 8001632:	da0e      	bge.n	8001652 <send_cmd+0x32>
		cmd &= 0x7F;
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800163a:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800163c:	2100      	movs	r1, #0
 800163e:	2037      	movs	r0, #55	; 0x37
 8001640:	f7ff ffee 	bl	8001620 <send_cmd>
 8001644:	4603      	mov	r3, r0
 8001646:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8001648:	7bbb      	ldrb	r3, [r7, #14]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d901      	bls.n	8001652 <send_cmd+0x32>
 800164e:	7bbb      	ldrb	r3, [r7, #14]
 8001650:	e059      	b.n	8001706 <send_cmd+0xe6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	2b0c      	cmp	r3, #12
 8001656:	d008      	beq.n	800166a <send_cmd+0x4a>
		deselect();
 8001658:	f7ff ff4e 	bl	80014f8 <deselect>
		if (!Select()) return 0xFF;
 800165c:	f7ff ff5c 	bl	8001518 <Select>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <send_cmd+0x4a>
 8001666:	23ff      	movs	r3, #255	; 0xff
 8001668:	e04d      	b.n	8001706 <send_cmd+0xe6>
	}

	/* Send command packet */
	TM_SPI_Send(FATFS_SPI, 0x40 | cmd);				/* Start + command index */
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001670:	b2db      	uxtb	r3, r3
 8001672:	4619      	mov	r1, r3
 8001674:	4826      	ldr	r0, [pc, #152]	; (8001710 <send_cmd+0xf0>)
 8001676:	f7ff fe7e 	bl	8001376 <TM_SPI_Send>
	TM_SPI_Send(FATFS_SPI, (BYTE)(arg >> 24));		/* Argument[31..24] */
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	0e1b      	lsrs	r3, r3, #24
 800167e:	b2db      	uxtb	r3, r3
 8001680:	4619      	mov	r1, r3
 8001682:	4823      	ldr	r0, [pc, #140]	; (8001710 <send_cmd+0xf0>)
 8001684:	f7ff fe77 	bl	8001376 <TM_SPI_Send>
	TM_SPI_Send(FATFS_SPI, (BYTE)(arg >> 16));		/* Argument[23..16] */
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	0c1b      	lsrs	r3, r3, #16
 800168c:	b2db      	uxtb	r3, r3
 800168e:	4619      	mov	r1, r3
 8001690:	481f      	ldr	r0, [pc, #124]	; (8001710 <send_cmd+0xf0>)
 8001692:	f7ff fe70 	bl	8001376 <TM_SPI_Send>
	TM_SPI_Send(FATFS_SPI, (BYTE)(arg >> 8));		/* Argument[15..8] */
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	0a1b      	lsrs	r3, r3, #8
 800169a:	b2db      	uxtb	r3, r3
 800169c:	4619      	mov	r1, r3
 800169e:	481c      	ldr	r0, [pc, #112]	; (8001710 <send_cmd+0xf0>)
 80016a0:	f7ff fe69 	bl	8001376 <TM_SPI_Send>
	TM_SPI_Send(FATFS_SPI, (BYTE)arg);				/* Argument[7..0] */
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	4619      	mov	r1, r3
 80016aa:	4819      	ldr	r0, [pc, #100]	; (8001710 <send_cmd+0xf0>)
 80016ac:	f7ff fe63 	bl	8001376 <TM_SPI_Send>
	n = 0x01;										/* Dummy CRC + Stop */
 80016b0:	2301      	movs	r3, #1
 80016b2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;						/* Valid CRC for CMD0(0) */
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <send_cmd+0x9e>
 80016ba:	2395      	movs	r3, #149	; 0x95
 80016bc:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;						/* Valid CRC for CMD8(0x1AA) */
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	2b08      	cmp	r3, #8
 80016c2:	d101      	bne.n	80016c8 <send_cmd+0xa8>
 80016c4:	2387      	movs	r3, #135	; 0x87
 80016c6:	73fb      	strb	r3, [r7, #15]
	TM_SPI_Send(FATFS_SPI, n);
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	4619      	mov	r1, r3
 80016cc:	4810      	ldr	r0, [pc, #64]	; (8001710 <send_cmd+0xf0>)
 80016ce:	f7ff fe52 	bl	8001376 <TM_SPI_Send>

	/* Receive command resp */
	if (cmd == CMD12) {
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	2b0c      	cmp	r3, #12
 80016d6:	d103      	bne.n	80016e0 <send_cmd+0xc0>
		TM_SPI_Send(FATFS_SPI, 0xFF);					/* Diacard following one byte when CMD12 */
 80016d8:	21ff      	movs	r1, #255	; 0xff
 80016da:	480d      	ldr	r0, [pc, #52]	; (8001710 <send_cmd+0xf0>)
 80016dc:	f7ff fe4b 	bl	8001376 <TM_SPI_Send>
	}
	
	n = 10;								/* Wait for response (10 bytes max) */
 80016e0:	230a      	movs	r3, #10
 80016e2:	73fb      	strb	r3, [r7, #15]
	do {
		res = TM_SPI_Send(FATFS_SPI, 0xFF);
 80016e4:	21ff      	movs	r1, #255	; 0xff
 80016e6:	480a      	ldr	r0, [pc, #40]	; (8001710 <send_cmd+0xf0>)
 80016e8:	f7ff fe45 	bl	8001376 <TM_SPI_Send>
 80016ec:	4603      	mov	r3, r0
 80016ee:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80016f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	da05      	bge.n	8001704 <send_cmd+0xe4>
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	73fb      	strb	r3, [r7, #15]
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1ef      	bne.n	80016e4 <send_cmd+0xc4>

	return res;							/* Return received response */
 8001704:	7bbb      	ldrb	r3, [r7, #14]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40013000 	.word	0x40013000

08001714 <TM_FATFS_InitPins>:

void TM_FATFS_InitPins(void) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af02      	add	r7, sp, #8
	/* CS pin */
	TM_GPIO_Init(FATFS_CS_PORT, FATFS_CS_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Low);
 800171a:	2300      	movs	r3, #0
 800171c:	9301      	str	r3, [sp, #4]
 800171e:	2301      	movs	r3, #1
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	2300      	movs	r3, #0
 8001724:	2201      	movs	r2, #1
 8001726:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800172a:	4803      	ldr	r0, [pc, #12]	; (8001738 <TM_FATFS_InitPins+0x24>)
 800172c:	f003 f890 	bl	8004850 <TM_GPIO_Init>

	/* Write protect pin */
#if FATFS_USE_WRITEPROTECT_PIN > 0
	TM_GPIO_Init(FATFS_USE_WRITEPROTECT_PIN_PORT, FATFS_USE_WRITEPROTECT_PIN_PIN, TM_GPIO_Mode_IN, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Low);
#endif
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40020000 	.word	0x40020000

0800173c <TM_FATFS_Detect>:

uint8_t TM_FATFS_Detect(void) {
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
#if FATFS_USE_DETECT_PIN > 0
	return !TM_GPIO_GetInputPinValue(FATFS_USE_DETECT_PIN_PORT, FATFS_USE_DETECT_PIN_PIN);
#else
	return 1;
 8001740:	2301      	movs	r3, #1
#endif
}
 8001742:	4618      	mov	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <TM_FATFS_WriteEnabled>:

uint8_t TM_FATFS_WriteEnabled(void) {
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
#if FATFS_USE_WRITEPROTECT_PIN > 0
	return !TM_GPIO_GetInputPinValue(FATFS_USE_WRITEPROTECT_PIN_PORT, FATFS_USE_WRITEPROTECT_PIN_PIN);
#else
	return 1;
 8001750:	2301      	movs	r3, #1
#endif	
}
 8001752:	4618      	mov	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <TM_FATFS_SD_disk_initialize>:

DSTATUS TM_FATFS_SD_disk_initialize (void) {
 800175c:	b590      	push	{r4, r7, lr}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
	BYTE n, cmd, ty, ocr[4];
	
	//Initialize CS pin
	TM_FATFS_InitPins();
 8001762:	f7ff ffd7 	bl	8001714 <TM_FATFS_InitPins>
	init_spi();
 8001766:	f7ff fe6d 	bl	8001444 <init_spi>
	
	if (!TM_FATFS_Detect()) {
 800176a:	f7ff ffe7 	bl	800173c <TM_FATFS_Detect>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <TM_FATFS_SD_disk_initialize+0x1c>
		return STA_NODISK;
 8001774:	2302      	movs	r3, #2
 8001776:	e0cc      	b.n	8001912 <TM_FATFS_SD_disk_initialize+0x1b6>
	}
	for (n = 10; n; n--) {
 8001778:	230a      	movs	r3, #10
 800177a:	71fb      	strb	r3, [r7, #7]
 800177c:	e006      	b.n	800178c <TM_FATFS_SD_disk_initialize+0x30>
		TM_SPI_Send(FATFS_SPI, 0xFF);
 800177e:	21ff      	movs	r1, #255	; 0xff
 8001780:	4866      	ldr	r0, [pc, #408]	; (800191c <TM_FATFS_SD_disk_initialize+0x1c0>)
 8001782:	f7ff fdf8 	bl	8001376 <TM_SPI_Send>
	for (n = 10; n; n--) {
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	3b01      	subs	r3, #1
 800178a:	71fb      	strb	r3, [r7, #7]
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f5      	bne.n	800177e <TM_FATFS_SD_disk_initialize+0x22>
	}
	ty = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	717b      	strb	r3, [r7, #5]
	if (send_cmd(CMD0, 0) == 1) {				/* Put the card SPI/Idle state */
 8001796:	2100      	movs	r1, #0
 8001798:	2000      	movs	r0, #0
 800179a:	f7ff ff41 	bl	8001620 <send_cmd>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	f040 8089 	bne.w	80018b8 <TM_FATFS_SD_disk_initialize+0x15c>
		TM_DELAY_SetTime2(1000);				/* Initialization timeout = 1 sec */
 80017a6:	4b5e      	ldr	r3, [pc, #376]	; (8001920 <TM_FATFS_SD_disk_initialize+0x1c4>)
 80017a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017ac:	601a      	str	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80017ae:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80017b2:	2008      	movs	r0, #8
 80017b4:	f7ff ff34 	bl	8001620 <send_cmd>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d151      	bne.n	8001862 <TM_FATFS_SD_disk_initialize+0x106>
			for (n = 0; n < 4; n++) {
 80017be:	2300      	movs	r3, #0
 80017c0:	71fb      	strb	r3, [r7, #7]
 80017c2:	e00e      	b.n	80017e2 <TM_FATFS_SD_disk_initialize+0x86>
				ocr[n] = TM_SPI_Send(FATFS_SPI, 0xFF);	/* Get 32 bit return value of R7 resp */
 80017c4:	79fc      	ldrb	r4, [r7, #7]
 80017c6:	21ff      	movs	r1, #255	; 0xff
 80017c8:	4854      	ldr	r0, [pc, #336]	; (800191c <TM_FATFS_SD_disk_initialize+0x1c0>)
 80017ca:	f7ff fdd4 	bl	8001376 <TM_SPI_Send>
 80017ce:	4603      	mov	r3, r0
 80017d0:	461a      	mov	r2, r3
 80017d2:	f107 0308 	add.w	r3, r7, #8
 80017d6:	4423      	add	r3, r4
 80017d8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++) {
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	3301      	adds	r3, #1
 80017e0:	71fb      	strb	r3, [r7, #7]
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	2b03      	cmp	r3, #3
 80017e6:	d9ed      	bls.n	80017c4 <TM_FATFS_SD_disk_initialize+0x68>
			}
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80017e8:	78bb      	ldrb	r3, [r7, #2]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d164      	bne.n	80018b8 <TM_FATFS_SD_disk_initialize+0x15c>
 80017ee:	78fb      	ldrb	r3, [r7, #3]
 80017f0:	2baa      	cmp	r3, #170	; 0xaa
 80017f2:	d161      	bne.n	80018b8 <TM_FATFS_SD_disk_initialize+0x15c>
				while (TM_DELAY_Time2() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80017f4:	bf00      	nop
 80017f6:	4b4a      	ldr	r3, [pc, #296]	; (8001920 <TM_FATFS_SD_disk_initialize+0x1c4>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d007      	beq.n	800180e <TM_FATFS_SD_disk_initialize+0xb2>
 80017fe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001802:	20a9      	movs	r0, #169	; 0xa9
 8001804:	f7ff ff0c 	bl	8001620 <send_cmd>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f3      	bne.n	80017f6 <TM_FATFS_SD_disk_initialize+0x9a>
				if (TM_DELAY_Time2() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800180e:	4b44      	ldr	r3, [pc, #272]	; (8001920 <TM_FATFS_SD_disk_initialize+0x1c4>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d050      	beq.n	80018b8 <TM_FATFS_SD_disk_initialize+0x15c>
 8001816:	2100      	movs	r1, #0
 8001818:	203a      	movs	r0, #58	; 0x3a
 800181a:	f7ff ff01 	bl	8001620 <send_cmd>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d149      	bne.n	80018b8 <TM_FATFS_SD_disk_initialize+0x15c>
					for (n = 0; n < 4; n++) {
 8001824:	2300      	movs	r3, #0
 8001826:	71fb      	strb	r3, [r7, #7]
 8001828:	e00e      	b.n	8001848 <TM_FATFS_SD_disk_initialize+0xec>
						ocr[n] = TM_SPI_Send(FATFS_SPI, 0xFF);
 800182a:	79fc      	ldrb	r4, [r7, #7]
 800182c:	21ff      	movs	r1, #255	; 0xff
 800182e:	483b      	ldr	r0, [pc, #236]	; (800191c <TM_FATFS_SD_disk_initialize+0x1c0>)
 8001830:	f7ff fda1 	bl	8001376 <TM_SPI_Send>
 8001834:	4603      	mov	r3, r0
 8001836:	461a      	mov	r2, r3
 8001838:	f107 0308 	add.w	r3, r7, #8
 800183c:	4423      	add	r3, r4
 800183e:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++) {
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	3301      	adds	r3, #1
 8001846:	71fb      	strb	r3, [r7, #7]
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	2b03      	cmp	r3, #3
 800184c:	d9ed      	bls.n	800182a <TM_FATFS_SD_disk_initialize+0xce>
					}
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800184e:	783b      	ldrb	r3, [r7, #0]
 8001850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <TM_FATFS_SD_disk_initialize+0x100>
 8001858:	230c      	movs	r3, #12
 800185a:	e000      	b.n	800185e <TM_FATFS_SD_disk_initialize+0x102>
 800185c:	2304      	movs	r3, #4
 800185e:	717b      	strb	r3, [r7, #5]
 8001860:	e02a      	b.n	80018b8 <TM_FATFS_SD_disk_initialize+0x15c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8001862:	2100      	movs	r1, #0
 8001864:	20a9      	movs	r0, #169	; 0xa9
 8001866:	f7ff fedb 	bl	8001620 <send_cmd>
 800186a:	4603      	mov	r3, r0
 800186c:	2b01      	cmp	r3, #1
 800186e:	d804      	bhi.n	800187a <TM_FATFS_SD_disk_initialize+0x11e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8001870:	2302      	movs	r3, #2
 8001872:	717b      	strb	r3, [r7, #5]
 8001874:	23a9      	movs	r3, #169	; 0xa9
 8001876:	71bb      	strb	r3, [r7, #6]
 8001878:	e003      	b.n	8001882 <TM_FATFS_SD_disk_initialize+0x126>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800187a:	2301      	movs	r3, #1
 800187c:	717b      	strb	r3, [r7, #5]
 800187e:	2301      	movs	r3, #1
 8001880:	71bb      	strb	r3, [r7, #6]
			}
			while (TM_DELAY_Time2() && send_cmd(cmd, 0));			/* Wait for end of initialization */
 8001882:	bf00      	nop
 8001884:	4b26      	ldr	r3, [pc, #152]	; (8001920 <TM_FATFS_SD_disk_initialize+0x1c4>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d007      	beq.n	800189c <TM_FATFS_SD_disk_initialize+0x140>
 800188c:	79bb      	ldrb	r3, [r7, #6]
 800188e:	2100      	movs	r1, #0
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fec5 	bl	8001620 <send_cmd>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1f3      	bne.n	8001884 <TM_FATFS_SD_disk_initialize+0x128>
			if (TM_DELAY_Time2() || send_cmd(CMD16, 512) != 0) {	/* Set block length: 512 */
 800189c:	4b20      	ldr	r3, [pc, #128]	; (8001920 <TM_FATFS_SD_disk_initialize+0x1c4>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d107      	bne.n	80018b4 <TM_FATFS_SD_disk_initialize+0x158>
 80018a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018a8:	2010      	movs	r0, #16
 80018aa:	f7ff feb9 	bl	8001620 <send_cmd>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <TM_FATFS_SD_disk_initialize+0x15c>
				ty = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	717b      	strb	r3, [r7, #5]
			}
		}
	}
	TM_FATFS_SD_CardType = ty;	/* Card type */
 80018b8:	4a1a      	ldr	r2, [pc, #104]	; (8001924 <TM_FATFS_SD_disk_initialize+0x1c8>)
 80018ba:	797b      	ldrb	r3, [r7, #5]
 80018bc:	7013      	strb	r3, [r2, #0]
	deselect();
 80018be:	f7ff fe1b 	bl	80014f8 <deselect>

	if (ty) {			/* OK */
 80018c2:	797b      	ldrb	r3, [r7, #5]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d008      	beq.n	80018da <TM_FATFS_SD_disk_initialize+0x17e>
		TM_FATFS_SD_Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80018c8:	4b17      	ldr	r3, [pc, #92]	; (8001928 <TM_FATFS_SD_disk_initialize+0x1cc>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	f023 0301 	bic.w	r3, r3, #1
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	4b14      	ldr	r3, [pc, #80]	; (8001928 <TM_FATFS_SD_disk_initialize+0x1cc>)
 80018d6:	701a      	strb	r2, [r3, #0]
 80018d8:	e002      	b.n	80018e0 <TM_FATFS_SD_disk_initialize+0x184>
	} else {			/* Failed */
		TM_FATFS_SD_Stat = STA_NOINIT;
 80018da:	4b13      	ldr	r3, [pc, #76]	; (8001928 <TM_FATFS_SD_disk_initialize+0x1cc>)
 80018dc:	2201      	movs	r2, #1
 80018de:	701a      	strb	r2, [r3, #0]
	}

	if (!TM_FATFS_WriteEnabled()) {
 80018e0:	f7ff ff34 	bl	800174c <TM_FATFS_WriteEnabled>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d108      	bne.n	80018fc <TM_FATFS_SD_disk_initialize+0x1a0>
		TM_FATFS_SD_Stat |= STA_PROTECT;
 80018ea:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <TM_FATFS_SD_disk_initialize+0x1cc>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	f043 0304 	orr.w	r3, r3, #4
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <TM_FATFS_SD_disk_initialize+0x1cc>)
 80018f8:	701a      	strb	r2, [r3, #0]
 80018fa:	e007      	b.n	800190c <TM_FATFS_SD_disk_initialize+0x1b0>
	} else {
		TM_FATFS_SD_Stat &= ~STA_PROTECT;
 80018fc:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <TM_FATFS_SD_disk_initialize+0x1cc>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	f023 0304 	bic.w	r3, r3, #4
 8001906:	b2da      	uxtb	r2, r3
 8001908:	4b07      	ldr	r3, [pc, #28]	; (8001928 <TM_FATFS_SD_disk_initialize+0x1cc>)
 800190a:	701a      	strb	r2, [r3, #0]
	}
	
	return TM_FATFS_SD_Stat;
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <TM_FATFS_SD_disk_initialize+0x1cc>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	b2db      	uxtb	r3, r3
}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	bd90      	pop	{r4, r7, pc}
 800191a:	bf00      	nop
 800191c:	40013000 	.word	0x40013000
 8001920:	20000324 	.word	0x20000324
 8001924:	200002f4 	.word	0x200002f4
 8001928:	200000b4 	.word	0x200000b4

0800192c <TM_FATFS_SD_disk_status>:

/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS TM_FATFS_SD_disk_status (void) {
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
	
	/* Check card detect pin if enabled */
	if (!TM_FATFS_Detect()) {
 8001930:	f7ff ff04 	bl	800173c <TM_FATFS_Detect>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <TM_FATFS_SD_disk_status+0x12>
		return STA_NOINIT;
 800193a:	2301      	movs	r3, #1
 800193c:	e018      	b.n	8001970 <TM_FATFS_SD_disk_status+0x44>
	}
	
	/* Check if write is enabled */
	if (!TM_FATFS_WriteEnabled()) {
 800193e:	f7ff ff05 	bl	800174c <TM_FATFS_WriteEnabled>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d108      	bne.n	800195a <TM_FATFS_SD_disk_status+0x2e>
		TM_FATFS_SD_Stat |= STA_PROTECT;
 8001948:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <TM_FATFS_SD_disk_status+0x48>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	b2db      	uxtb	r3, r3
 800194e:	f043 0304 	orr.w	r3, r3, #4
 8001952:	b2da      	uxtb	r2, r3
 8001954:	4b07      	ldr	r3, [pc, #28]	; (8001974 <TM_FATFS_SD_disk_status+0x48>)
 8001956:	701a      	strb	r2, [r3, #0]
 8001958:	e007      	b.n	800196a <TM_FATFS_SD_disk_status+0x3e>
	} else {
		TM_FATFS_SD_Stat &= ~STA_PROTECT;
 800195a:	4b06      	ldr	r3, [pc, #24]	; (8001974 <TM_FATFS_SD_disk_status+0x48>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	f023 0304 	bic.w	r3, r3, #4
 8001964:	b2da      	uxtb	r2, r3
 8001966:	4b03      	ldr	r3, [pc, #12]	; (8001974 <TM_FATFS_SD_disk_status+0x48>)
 8001968:	701a      	strb	r2, [r3, #0]
	}
	
	return TM_FATFS_SD_Stat;	/* Return disk status */
 800196a:	4b02      	ldr	r3, [pc, #8]	; (8001974 <TM_FATFS_SD_disk_status+0x48>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	b2db      	uxtb	r3, r3
}
 8001970:	4618      	mov	r0, r3
 8001972:	bd80      	pop	{r7, pc}
 8001974:	200000b4 	.word	0x200000b4

08001978 <TM_FATFS_SD_disk_read>:
DRESULT TM_FATFS_SD_disk_read (
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
	FATFS_DEBUG_SEND_USART("disk_read: inside");
	if (!TM_FATFS_Detect() || (TM_FATFS_SD_Stat & STA_NOINIT)) {
 8001984:	f7ff feda 	bl	800173c <TM_FATFS_Detect>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d006      	beq.n	800199c <TM_FATFS_SD_disk_read+0x24>
 800198e:	4b29      	ldr	r3, [pc, #164]	; (8001a34 <TM_FATFS_SD_disk_read+0xbc>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	b2db      	uxtb	r3, r3
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <TM_FATFS_SD_disk_read+0x28>
		return RES_NOTRDY;
 800199c:	2303      	movs	r3, #3
 800199e:	e044      	b.n	8001a2a <TM_FATFS_SD_disk_read+0xb2>
	}

	if (!(TM_FATFS_SD_CardType & CT_BLOCK)) {
 80019a0:	4b25      	ldr	r3, [pc, #148]	; (8001a38 <TM_FATFS_SD_disk_read+0xc0>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	f003 0308 	and.w	r3, r3, #8
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d102      	bne.n	80019b2 <TM_FATFS_SD_disk_read+0x3a>
		sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	025b      	lsls	r3, r3, #9
 80019b0:	60bb      	str	r3, [r7, #8]
	}

	if (count == 1) {	/* Single sector read */
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d111      	bne.n	80019dc <TM_FATFS_SD_disk_read+0x64>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80019b8:	68b9      	ldr	r1, [r7, #8]
 80019ba:	2011      	movs	r0, #17
 80019bc:	f7ff fe30 	bl	8001620 <send_cmd>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d129      	bne.n	8001a1a <TM_FATFS_SD_disk_read+0xa2>
			&& rcvr_datablock(buff, 512))
 80019c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f7ff fdc0 	bl	8001550 <rcvr_datablock>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d021      	beq.n	8001a1a <TM_FATFS_SD_disk_read+0xa2>
			count = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	e01e      	b.n	8001a1a <TM_FATFS_SD_disk_read+0xa2>
	} else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80019dc:	68b9      	ldr	r1, [r7, #8]
 80019de:	2012      	movs	r0, #18
 80019e0:	f7ff fe1e 	bl	8001620 <send_cmd>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d117      	bne.n	8001a1a <TM_FATFS_SD_disk_read+0xa2>
			do {
				if (!rcvr_datablock(buff, 512)) {
 80019ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f7ff fdae 	bl	8001550 <rcvr_datablock>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00a      	beq.n	8001a10 <TM_FATFS_SD_disk_read+0x98>
					break;
				}
				buff += 512;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001a00:	60fb      	str	r3, [r7, #12]
			} while (--count);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3b01      	subs	r3, #1
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1ed      	bne.n	80019ea <TM_FATFS_SD_disk_read+0x72>
 8001a0e:	e000      	b.n	8001a12 <TM_FATFS_SD_disk_read+0x9a>
					break;
 8001a10:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8001a12:	2100      	movs	r1, #0
 8001a14:	200c      	movs	r0, #12
 8001a16:	f7ff fe03 	bl	8001620 <send_cmd>
		}
	}
	deselect();
 8001a1a:	f7ff fd6d 	bl	80014f8 <deselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	bf14      	ite	ne
 8001a24:	2301      	movne	r3, #1
 8001a26:	2300      	moveq	r3, #0
 8001a28:	b2db      	uxtb	r3, r3
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	200000b4 	.word	0x200000b4
 8001a38:	200002f4 	.word	0x200002f4

08001a3c <TM_FATFS_SD_disk_write>:
DRESULT TM_FATFS_SD_disk_write (
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
	FATFS_DEBUG_SEND_USART("disk_write: inside");
	if (!TM_FATFS_Detect()) {
 8001a48:	f7ff fe78 	bl	800173c <TM_FATFS_Detect>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <TM_FATFS_SD_disk_write+0x1a>
		return RES_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e06a      	b.n	8001b2c <TM_FATFS_SD_disk_write+0xf0>
	}
	if (!TM_FATFS_WriteEnabled()) {
 8001a56:	f7ff fe79 	bl	800174c <TM_FATFS_WriteEnabled>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <TM_FATFS_SD_disk_write+0x28>
		FATFS_DEBUG_SEND_USART("disk_write: Write protected!!! \n---------------------------------------------");
		return RES_WRPRT;
 8001a60:	2302      	movs	r3, #2
 8001a62:	e063      	b.n	8001b2c <TM_FATFS_SD_disk_write+0xf0>
	}
	if (TM_FATFS_SD_Stat & STA_NOINIT) {
 8001a64:	4b33      	ldr	r3, [pc, #204]	; (8001b34 <TM_FATFS_SD_disk_write+0xf8>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <TM_FATFS_SD_disk_write+0x3a>
		return RES_NOTRDY;	/* Check drive status */
 8001a72:	2303      	movs	r3, #3
 8001a74:	e05a      	b.n	8001b2c <TM_FATFS_SD_disk_write+0xf0>
	}
	if (TM_FATFS_SD_Stat & STA_PROTECT) {
 8001a76:	4b2f      	ldr	r3, [pc, #188]	; (8001b34 <TM_FATFS_SD_disk_write+0xf8>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <TM_FATFS_SD_disk_write+0x4c>
		return RES_WRPRT;	/* Check write protect */
 8001a84:	2302      	movs	r3, #2
 8001a86:	e051      	b.n	8001b2c <TM_FATFS_SD_disk_write+0xf0>
	}

	if (!(TM_FATFS_SD_CardType & CT_BLOCK)) {
 8001a88:	4b2b      	ldr	r3, [pc, #172]	; (8001b38 <TM_FATFS_SD_disk_write+0xfc>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	f003 0308 	and.w	r3, r3, #8
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d102      	bne.n	8001a9a <TM_FATFS_SD_disk_write+0x5e>
		sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	025b      	lsls	r3, r3, #9
 8001a98:	60bb      	str	r3, [r7, #8]
	}

	if (count == 1) {	/* Single sector write */
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d110      	bne.n	8001ac2 <TM_FATFS_SD_disk_write+0x86>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8001aa0:	68b9      	ldr	r1, [r7, #8]
 8001aa2:	2018      	movs	r0, #24
 8001aa4:	f7ff fdbc 	bl	8001620 <send_cmd>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d136      	bne.n	8001b1c <TM_FATFS_SD_disk_write+0xe0>
			&& xmit_datablock(buff, 0xFE))
 8001aae:	21fe      	movs	r1, #254	; 0xfe
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f7ff fd7d 	bl	80015b0 <xmit_datablock>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d02f      	beq.n	8001b1c <TM_FATFS_SD_disk_write+0xe0>
			count = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	e02c      	b.n	8001b1c <TM_FATFS_SD_disk_write+0xe0>
	} else {				/* Multiple sector write */
		if (TM_FATFS_SD_CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8001ac2:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <TM_FATFS_SD_disk_write+0xfc>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	f003 0306 	and.w	r3, r3, #6
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <TM_FATFS_SD_disk_write+0x9a>
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	2097      	movs	r0, #151	; 0x97
 8001ad2:	f7ff fda5 	bl	8001620 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8001ad6:	68b9      	ldr	r1, [r7, #8]
 8001ad8:	2019      	movs	r0, #25
 8001ada:	f7ff fda1 	bl	8001620 <send_cmd>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d11b      	bne.n	8001b1c <TM_FATFS_SD_disk_write+0xe0>
			do {
				if (!xmit_datablock(buff, 0xFC)) {
 8001ae4:	21fc      	movs	r1, #252	; 0xfc
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f7ff fd62 	bl	80015b0 <xmit_datablock>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d00a      	beq.n	8001b08 <TM_FATFS_SD_disk_write+0xcc>
					break;
				}
				buff += 512;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001af8:	60fb      	str	r3, [r7, #12]
			} while (--count);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3b01      	subs	r3, #1
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1ee      	bne.n	8001ae4 <TM_FATFS_SD_disk_write+0xa8>
 8001b06:	e000      	b.n	8001b0a <TM_FATFS_SD_disk_write+0xce>
					break;
 8001b08:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) {	/* STOP_TRAN token */
 8001b0a:	21fd      	movs	r1, #253	; 0xfd
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	f7ff fd4f 	bl	80015b0 <xmit_datablock>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d101      	bne.n	8001b1c <TM_FATFS_SD_disk_write+0xe0>
				count = 1;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	607b      	str	r3, [r7, #4]
			}
		}
	}
	deselect();
 8001b1c:	f7ff fcec 	bl	80014f8 <deselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	bf14      	ite	ne
 8001b26:	2301      	movne	r3, #1
 8001b28:	2300      	moveq	r3, #0
 8001b2a:	b2db      	uxtb	r3, r3
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	200000b4 	.word	0x200000b4
 8001b38:	200002f4 	.word	0x200002f4

08001b3c <TM_FATFS_SD_disk_ioctl>:
#if _USE_IOCTL
DRESULT TM_FATFS_SD_disk_ioctl (
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08c      	sub	sp, #48	; 0x30
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	6039      	str	r1, [r7, #0]
 8001b46:	71fb      	strb	r3, [r7, #7]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;

	if (TM_FATFS_SD_Stat & STA_NOINIT) {
 8001b48:	4bb3      	ldr	r3, [pc, #716]	; (8001e18 <TM_FATFS_SD_disk_ioctl+0x2dc>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <TM_FATFS_SD_disk_ioctl+0x1e>
		return RES_NOTRDY;	/* Check if drive is ready */
 8001b56:	2303      	movs	r3, #3
 8001b58:	e159      	b.n	8001e0e <TM_FATFS_SD_disk_ioctl+0x2d2>
	}
	if (!TM_FATFS_Detect()) {
 8001b5a:	f7ff fdef 	bl	800173c <TM_FATFS_Detect>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <TM_FATFS_SD_disk_ioctl+0x2c>
		return RES_NOTRDY;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e152      	b.n	8001e0e <TM_FATFS_SD_disk_ioctl+0x2d2>
	}

	res = RES_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	2b04      	cmp	r3, #4
 8001b72:	f200 8137 	bhi.w	8001de4 <TM_FATFS_SD_disk_ioctl+0x2a8>
 8001b76:	a201      	add	r2, pc, #4	; (adr r2, 8001b7c <TM_FATFS_SD_disk_ioctl+0x40>)
 8001b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b7c:	08001b91 	.word	0x08001b91
 8001b80:	08001ba5 	.word	0x08001ba5
 8001b84:	08001de5 	.word	0x08001de5
 8001b88:	08001c51 	.word	0x08001c51
 8001b8c:	08001d4b 	.word	0x08001d4b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (Select()) res = RES_OK;
 8001b90:	f7ff fcc2 	bl	8001518 <Select>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 8128 	beq.w	8001dec <TM_FATFS_SD_disk_ioctl+0x2b0>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8001ba2:	e123      	b.n	8001dec <TM_FATFS_SD_disk_ioctl+0x2b0>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	2009      	movs	r0, #9
 8001ba8:	f7ff fd3a 	bl	8001620 <send_cmd>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f040 811e 	bne.w	8001df0 <TM_FATFS_SD_disk_ioctl+0x2b4>
 8001bb4:	f107 030c 	add.w	r3, r7, #12
 8001bb8:	2110      	movs	r1, #16
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fcc8 	bl	8001550 <rcvr_datablock>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 8114 	beq.w	8001df0 <TM_FATFS_SD_disk_ioctl+0x2b4>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8001bc8:	7b3b      	ldrb	r3, [r7, #12]
 8001bca:	099b      	lsrs	r3, r3, #6
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d111      	bne.n	8001bf6 <TM_FATFS_SD_disk_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8001bd2:	7d7b      	ldrb	r3, [r7, #21]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	7d3b      	ldrb	r3, [r7, #20]
 8001bd8:	021b      	lsls	r3, r3, #8
 8001bda:	4413      	add	r3, r2
 8001bdc:	461a      	mov	r2, r3
 8001bde:	7cfb      	ldrb	r3, [r7, #19]
 8001be0:	041b      	lsls	r3, r3, #16
 8001be2:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8001be6:	4413      	add	r3, r2
 8001be8:	3301      	adds	r3, #1
 8001bea:	623b      	str	r3, [r7, #32]
				*(DWORD*)buff = csize << 10;
 8001bec:	6a3b      	ldr	r3, [r7, #32]
 8001bee:	029a      	lsls	r2, r3, #10
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	e028      	b.n	8001c48 <TM_FATFS_SD_disk_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001bf6:	7c7b      	ldrb	r3, [r7, #17]
 8001bf8:	f003 030f 	and.w	r3, r3, #15
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	7dbb      	ldrb	r3, [r7, #22]
 8001c00:	09db      	lsrs	r3, r3, #7
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	4413      	add	r3, r2
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	7d7b      	ldrb	r3, [r7, #21]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	f003 0306 	and.w	r3, r3, #6
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	4413      	add	r3, r2
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	3302      	adds	r3, #2
 8001c1a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8001c1e:	7d3b      	ldrb	r3, [r7, #20]
 8001c20:	099b      	lsrs	r3, r3, #6
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	461a      	mov	r2, r3
 8001c26:	7cfb      	ldrb	r3, [r7, #19]
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	441a      	add	r2, r3
 8001c2c:	7cbb      	ldrb	r3, [r7, #18]
 8001c2e:	029b      	lsls	r3, r3, #10
 8001c30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c34:	4413      	add	r3, r2
 8001c36:	3301      	adds	r3, #1
 8001c38:	623b      	str	r3, [r7, #32]
				*(DWORD*)buff = csize << (n - 9);
 8001c3a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001c3e:	3b09      	subs	r3, #9
 8001c40:	6a3a      	ldr	r2, [r7, #32]
 8001c42:	409a      	lsls	r2, r3
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8001c4e:	e0cf      	b.n	8001df0 <TM_FATFS_SD_disk_ioctl+0x2b4>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (TM_FATFS_SD_CardType & CT_SD2) {	/* SDC ver 2.00 */
 8001c50:	4b72      	ldr	r3, [pc, #456]	; (8001e1c <TM_FATFS_SD_disk_ioctl+0x2e0>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d033      	beq.n	8001cc4 <TM_FATFS_SD_disk_ioctl+0x188>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	208d      	movs	r0, #141	; 0x8d
 8001c60:	f7ff fcde 	bl	8001620 <send_cmd>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f040 80c4 	bne.w	8001df4 <TM_FATFS_SD_disk_ioctl+0x2b8>
				TM_SPI_Send(FATFS_SPI, 0xFF);
 8001c6c:	21ff      	movs	r1, #255	; 0xff
 8001c6e:	486c      	ldr	r0, [pc, #432]	; (8001e20 <TM_FATFS_SD_disk_ioctl+0x2e4>)
 8001c70:	f7ff fb81 	bl	8001376 <TM_SPI_Send>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	2110      	movs	r1, #16
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fc68 	bl	8001550 <rcvr_datablock>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 80b6 	beq.w	8001df4 <TM_FATFS_SD_disk_ioctl+0x2b8>
					for (n = 64 - 16; n; n--) TM_SPI_Send(FATFS_SPI, 0xFF);	/* Purge trailing data */
 8001c88:	2330      	movs	r3, #48	; 0x30
 8001c8a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001c8e:	e008      	b.n	8001ca2 <TM_FATFS_SD_disk_ioctl+0x166>
 8001c90:	21ff      	movs	r1, #255	; 0xff
 8001c92:	4863      	ldr	r0, [pc, #396]	; (8001e20 <TM_FATFS_SD_disk_ioctl+0x2e4>)
 8001c94:	f7ff fb6f 	bl	8001376 <TM_SPI_Send>
 8001c98:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001ca2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f2      	bne.n	8001c90 <TM_FATFS_SD_disk_ioctl+0x154>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8001caa:	7dbb      	ldrb	r3, [r7, #22]
 8001cac:	091b      	lsrs	r3, r3, #4
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	2310      	movs	r3, #16
 8001cb4:	fa03 f202 	lsl.w	r2, r3, r2
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8001cc2:	e097      	b.n	8001df4 <TM_FATFS_SD_disk_ioctl+0x2b8>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	2009      	movs	r0, #9
 8001cc8:	f7ff fcaa 	bl	8001620 <send_cmd>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f040 8090 	bne.w	8001df4 <TM_FATFS_SD_disk_ioctl+0x2b8>
 8001cd4:	f107 030c 	add.w	r3, r7, #12
 8001cd8:	2110      	movs	r1, #16
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fc38 	bl	8001550 <rcvr_datablock>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 8086 	beq.w	8001df4 <TM_FATFS_SD_disk_ioctl+0x2b8>
				if (TM_FATFS_SD_CardType & CT_SD1) {	/* SDC ver 1.XX */
 8001ce8:	4b4c      	ldr	r3, [pc, #304]	; (8001e1c <TM_FATFS_SD_disk_ioctl+0x2e0>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d012      	beq.n	8001d1a <TM_FATFS_SD_disk_ioctl+0x1de>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8001cf4:	7dbb      	ldrb	r3, [r7, #22]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001cfc:	7dfa      	ldrb	r2, [r7, #23]
 8001cfe:	09d2      	lsrs	r2, r2, #7
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	4413      	add	r3, r2
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	7e7b      	ldrb	r3, [r7, #25]
 8001d08:	099b      	lsrs	r3, r3, #6
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	461a      	mov	r2, r3
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	e013      	b.n	8001d42 <TM_FATFS_SD_disk_ioctl+0x206>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8001d1a:	7dbb      	ldrb	r3, [r7, #22]
 8001d1c:	109b      	asrs	r3, r3, #2
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	f003 031f 	and.w	r3, r3, #31
 8001d24:	3301      	adds	r3, #1
 8001d26:	7dfa      	ldrb	r2, [r7, #23]
 8001d28:	00d2      	lsls	r2, r2, #3
 8001d2a:	f002 0218 	and.w	r2, r2, #24
 8001d2e:	7df9      	ldrb	r1, [r7, #23]
 8001d30:	0949      	lsrs	r1, r1, #5
 8001d32:	b2c9      	uxtb	r1, r1
 8001d34:	440a      	add	r2, r1
 8001d36:	3201      	adds	r2, #1
 8001d38:	fb02 f303 	mul.w	r3, r2, r3
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8001d42:	2300      	movs	r3, #0
 8001d44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8001d48:	e054      	b.n	8001df4 <TM_FATFS_SD_disk_ioctl+0x2b8>

	case CTRL_ERASE_SECTOR :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(TM_FATFS_SD_CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8001d4a:	4b34      	ldr	r3, [pc, #208]	; (8001e1c <TM_FATFS_SD_disk_ioctl+0x2e0>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	f003 0306 	and.w	r3, r3, #6
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d050      	beq.n	8001df8 <TM_FATFS_SD_disk_ioctl+0x2bc>
		if (TM_FATFS_SD_disk_ioctl(MMC_GET_CSD, csd)) break;	/* Get CSD */
 8001d56:	f107 030c 	add.w	r3, r7, #12
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	200b      	movs	r0, #11
 8001d5e:	f7ff feed 	bl	8001b3c <TM_FATFS_SD_disk_ioctl>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d149      	bne.n	8001dfc <TM_FATFS_SD_disk_ioctl+0x2c0>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8001d68:	7b3b      	ldrb	r3, [r7, #12]
 8001d6a:	099b      	lsrs	r3, r3, #6
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d104      	bne.n	8001d7c <TM_FATFS_SD_disk_ioctl+0x240>
 8001d72:	7dbb      	ldrb	r3, [r7, #22]
 8001d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d041      	beq.n	8001e00 <TM_FATFS_SD_disk_ioctl+0x2c4>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	61fb      	str	r3, [r7, #28]
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(TM_FATFS_SD_CardType & CT_BLOCK)) {
 8001d8c:	4b23      	ldr	r3, [pc, #140]	; (8001e1c <TM_FATFS_SD_disk_ioctl+0x2e0>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d105      	bne.n	8001da4 <TM_FATFS_SD_disk_ioctl+0x268>
			st *= 512; ed *= 512;
 8001d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d9a:	025b      	lsls	r3, r3, #9
 8001d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	025b      	lsls	r3, r3, #9
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000))	/* Erase sector block */
 8001da4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001da6:	2020      	movs	r0, #32
 8001da8:	f7ff fc3a 	bl	8001620 <send_cmd>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d128      	bne.n	8001e04 <TM_FATFS_SD_disk_ioctl+0x2c8>
 8001db2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001db4:	2021      	movs	r0, #33	; 0x21
 8001db6:	f7ff fc33 	bl	8001620 <send_cmd>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d121      	bne.n	8001e04 <TM_FATFS_SD_disk_ioctl+0x2c8>
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	2026      	movs	r0, #38	; 0x26
 8001dc4:	f7ff fc2c 	bl	8001620 <send_cmd>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d11a      	bne.n	8001e04 <TM_FATFS_SD_disk_ioctl+0x2c8>
 8001dce:	f247 5030 	movw	r0, #30000	; 0x7530
 8001dd2:	f7ff fb6f 	bl	80014b4 <wait_ready>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d013      	beq.n	8001e04 <TM_FATFS_SD_disk_ioctl+0x2c8>
			res = RES_OK;	/* FatFs does not check result of this command */
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8001de2:	e00f      	b.n	8001e04 <TM_FATFS_SD_disk_ioctl+0x2c8>

	default:
		res = RES_PARERR;
 8001de4:	2304      	movs	r3, #4
 8001de6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001dea:	e00c      	b.n	8001e06 <TM_FATFS_SD_disk_ioctl+0x2ca>
		break;
 8001dec:	bf00      	nop
 8001dee:	e00a      	b.n	8001e06 <TM_FATFS_SD_disk_ioctl+0x2ca>
		break;
 8001df0:	bf00      	nop
 8001df2:	e008      	b.n	8001e06 <TM_FATFS_SD_disk_ioctl+0x2ca>
		break;
 8001df4:	bf00      	nop
 8001df6:	e006      	b.n	8001e06 <TM_FATFS_SD_disk_ioctl+0x2ca>
		if (!(TM_FATFS_SD_CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8001df8:	bf00      	nop
 8001dfa:	e004      	b.n	8001e06 <TM_FATFS_SD_disk_ioctl+0x2ca>
		if (TM_FATFS_SD_disk_ioctl(MMC_GET_CSD, csd)) break;	/* Get CSD */
 8001dfc:	bf00      	nop
 8001dfe:	e002      	b.n	8001e06 <TM_FATFS_SD_disk_ioctl+0x2ca>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8001e00:	bf00      	nop
 8001e02:	e000      	b.n	8001e06 <TM_FATFS_SD_disk_ioctl+0x2ca>
		break;
 8001e04:	bf00      	nop
	}

	deselect();
 8001e06:	f7ff fb77 	bl	80014f8 <deselect>

	return res;
 8001e0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3730      	adds	r7, #48	; 0x30
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	200000b4 	.word	0x200000b4
 8001e1c:	200002f4 	.word	0x200002f4
 8001e20:	40013000 	.word	0x40013000

08001e24 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8001e24:	b480      	push	{r7}
 8001e26:	b087      	sub	sp, #28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8001e38:	e007      	b.n	8001e4a <mem_cpy+0x26>
		*d++ = *s++;
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	1c5a      	adds	r2, r3, #1
 8001e3e:	617a      	str	r2, [r7, #20]
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	1c51      	adds	r1, r2, #1
 8001e44:	6139      	str	r1, [r7, #16]
 8001e46:	7812      	ldrb	r2, [r2, #0]
 8001e48:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	1e5a      	subs	r2, r3, #1
 8001e4e:	607a      	str	r2, [r7, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1f2      	bne.n	8001e3a <mem_cpy+0x16>
}
 8001e54:	bf00      	nop
 8001e56:	371c      	adds	r7, #28
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8001e60:	b480      	push	{r7}
 8001e62:	b087      	sub	sp, #28
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8001e70:	e005      	b.n	8001e7e <mem_set+0x1e>
		*d++ = (BYTE)val;
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	1c5a      	adds	r2, r3, #1
 8001e76:	617a      	str	r2, [r7, #20]
 8001e78:	68ba      	ldr	r2, [r7, #8]
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	1e5a      	subs	r2, r3, #1
 8001e82:	607a      	str	r2, [r7, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1f4      	bne.n	8001e72 <mem_set+0x12>
}
 8001e88:	bf00      	nop
 8001e8a:	371c      	adds	r7, #28
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8001e94:	b480      	push	{r7}
 8001e96:	b089      	sub	sp, #36	; 0x24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	61fb      	str	r3, [r7, #28]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8001eac:	bf00      	nop
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	1e5a      	subs	r2, r3, #1
 8001eb2:	607a      	str	r2, [r7, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00d      	beq.n	8001ed4 <mem_cmp+0x40>
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	61fa      	str	r2, [r7, #28]
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	1c5a      	adds	r2, r3, #1
 8001ec6:	61ba      	str	r2, [r7, #24]
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	1acb      	subs	r3, r1, r3
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0ec      	beq.n	8001eae <mem_cmp+0x1a>
	return r;
 8001ed4:	697b      	ldr	r3, [r7, #20]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3724      	adds	r7, #36	; 0x24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8001eec:	e002      	b.n	8001ef4 <chk_chr+0x12>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d005      	beq.n	8001f08 <chk_chr+0x26>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	461a      	mov	r2, r3
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d1f2      	bne.n	8001eee <chk_chr+0xc>
	return *str;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	781b      	ldrb	r3, [r3, #0]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8001f20:	2300      	movs	r3, #0
 8001f22:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	791b      	ldrb	r3, [r3, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d034      	beq.n	8001f96 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f30:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	7858      	ldrb	r0, [r3, #1]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	f7ff f912 	bl	8001168 <disk_write>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d002      	beq.n	8001f50 <sync_window+0x38>
			res = FR_DISK_ERR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	73fb      	strb	r3, [r7, #15]
 8001f4e:	e022      	b.n	8001f96 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	1ad2      	subs	r2, r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d217      	bcs.n	8001f96 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	78db      	ldrb	r3, [r3, #3]
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	e010      	b.n	8001f90 <sync_window+0x78>
					wsect += fs->fsize;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	4413      	add	r3, r2
 8001f76:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	7858      	ldrb	r0, [r3, #1]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8001f82:	2301      	movs	r3, #1
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	f7ff f8ef 	bl	8001168 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d8eb      	bhi.n	8001f6e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d01b      	beq.n	8001ff0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff ffad 	bl	8001f18 <sync_window>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d113      	bne.n	8001ff0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	7858      	ldrb	r0, [r3, #1]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	f7ff f899 	bl	800110c <disk_read>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d004      	beq.n	8001fea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8001fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b084      	sub	sp, #16
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff ff88 	bl	8001f18 <sync_window>
 8002008:	4603      	mov	r3, r0
 800200a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800200c:	7bfb      	ldrb	r3, [r7, #15]
 800200e:	2b00      	cmp	r3, #0
 8002010:	f040 8090 	bne.w	8002134 <sync_fs+0x13a>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b03      	cmp	r3, #3
 800201a:	d17f      	bne.n	800211c <sync_fs+0x122>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	795b      	ldrb	r3, [r3, #5]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d17b      	bne.n	800211c <sync_fs+0x122>
			/* Create FSINFO structure */
			mem_set(fs->win, 0, SS(fs));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3334      	adds	r3, #52	; 0x34
 8002028:	f44f 7200 	mov.w	r2, #512	; 0x200
 800202c:	2100      	movs	r1, #0
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff ff16 	bl	8001e60 <mem_set>
			ST_WORD(fs->win + BS_55AA, 0xAA55);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2255      	movs	r2, #85	; 0x55
 8002038:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	22aa      	movs	r2, #170	; 0xaa
 8002040:	f883 2233 	strb.w	r2, [r3, #563]	; 0x233
			ST_DWORD(fs->win + FSI_LeadSig, 0x41615252);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2252      	movs	r2, #82	; 0x52
 8002048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2252      	movs	r2, #82	; 0x52
 8002050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2261      	movs	r2, #97	; 0x61
 8002058:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2241      	movs	r2, #65	; 0x41
 8002060:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
			ST_DWORD(fs->win + FSI_StrucSig, 0x61417272);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2272      	movs	r2, #114	; 0x72
 8002068:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2272      	movs	r2, #114	; 0x72
 8002070:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2241      	movs	r2, #65	; 0x41
 8002078:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2261      	movs	r2, #97	; 0x61
 8002080:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
			ST_DWORD(fs->win + FSI_Free_Count, fs->free_clust);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	b2da      	uxtb	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	b29b      	uxth	r3, r3
 8002096:	0a1b      	lsrs	r3, r3, #8
 8002098:	b29b      	uxth	r3, r3
 800209a:	b2da      	uxtb	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	0c1b      	lsrs	r3, r3, #16
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	0e1b      	lsrs	r3, r3, #24
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
			ST_DWORD(fs->win + FSI_Nxt_Free, fs->last_clust);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	0a1b      	lsrs	r3, r3, #8
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	0c1b      	lsrs	r3, r3, #16
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	0e1b      	lsrs	r3, r3, #24
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	1c5a      	adds	r2, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	7858      	ldrb	r0, [r3, #1]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002110:	2301      	movs	r3, #1
 8002112:	f7ff f829 	bl	8001168 <disk_write>
			fs->fsi_flag = 0;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	785b      	ldrb	r3, [r3, #1]
 8002120:	2200      	movs	r2, #0
 8002122:	2100      	movs	r1, #0
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff f84d 	bl	80011c4 <disk_ioctl>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <sync_fs+0x13a>
			res = FR_DISK_ERR;
 8002130:	2301      	movs	r3, #1
 8002132:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8002134:	7bfb      	ldrb	r3, [r7, #15]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
 8002146:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	3b02      	subs	r3, #2
 800214c:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	1e9a      	subs	r2, r3, #2
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d801      	bhi.n	800215e <clust2sect+0x20>
 800215a:	2300      	movs	r3, #0
 800215c:	e008      	b.n	8002170 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	789b      	ldrb	r3, [r3, #2]
 8002162:	461a      	mov	r2, r3
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	fb03 f202 	mul.w	r2, r3, r2
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216e:	4413      	add	r3, r2
}
 8002170:	4618      	mov	r0, r3
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d904      	bls.n	8002196 <get_fat+0x1a>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	699a      	ldr	r2, [r3, #24]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d802      	bhi.n	800219c <get_fat+0x20>
		val = 1;	/* Internal error */
 8002196:	2301      	movs	r3, #1
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	e0a3      	b.n	80022e4 <get_fat+0x168>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800219c:	f04f 33ff 	mov.w	r3, #4294967295
 80021a0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d046      	beq.n	8002238 <get_fat+0xbc>
 80021aa:	2b03      	cmp	r3, #3
 80021ac:	d066      	beq.n	800227c <get_fat+0x100>
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	f040 808e 	bne.w	80022d0 <get_fat+0x154>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	085b      	lsrs	r3, r3, #1
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4413      	add	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	0a5b      	lsrs	r3, r3, #9
 80021ca:	4413      	add	r3, r2
 80021cc:	4619      	mov	r1, r3
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7ff fee6 	bl	8001fa0 <move_window>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d17d      	bne.n	80022d6 <get_fat+0x15a>
			wc = fs->win[bc++ % SS(fs)];
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1c5a      	adds	r2, r3, #1
 80021de:	613a      	str	r2, [r7, #16]
 80021e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	4413      	add	r3, r2
 80021e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021ec:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	0a5b      	lsrs	r3, r3, #9
 80021f6:	4413      	add	r3, r2
 80021f8:	4619      	mov	r1, r3
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff fed0 	bl	8001fa0 <move_window>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d169      	bne.n	80022da <get_fat+0x15e>
			wc |= fs->win[bc % SS(fs)] << 8;
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	4413      	add	r3, r2
 8002210:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002214:	021b      	lsls	r3, r3, #8
 8002216:	461a      	mov	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4313      	orrs	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b00      	cmp	r3, #0
 8002226:	d002      	beq.n	800222e <get_fat+0xb2>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	091b      	lsrs	r3, r3, #4
 800222c:	e002      	b.n	8002234 <get_fat+0xb8>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002234:	617b      	str	r3, [r7, #20]
			break;
 8002236:	e055      	b.n	80022e4 <get_fat+0x168>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	0a1b      	lsrs	r3, r3, #8
 8002240:	4413      	add	r3, r2
 8002242:	4619      	mov	r1, r3
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff feab 	bl	8001fa0 <move_window>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d146      	bne.n	80022de <get_fat+0x162>
			p = &fs->win[clst * 2 % SS(fs)];
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8002258:	3330      	adds	r3, #48	; 0x30
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	4413      	add	r3, r2
 800225e:	3304      	adds	r3, #4
 8002260:	60bb      	str	r3, [r7, #8]
			val = LD_WORD(p);
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	3301      	adds	r3, #1
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	021b      	lsls	r3, r3, #8
 800226a:	b21a      	sxth	r2, r3
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	b21b      	sxth	r3, r3
 8002272:	4313      	orrs	r3, r2
 8002274:	b21b      	sxth	r3, r3
 8002276:	b29b      	uxth	r3, r3
 8002278:	617b      	str	r3, [r7, #20]
			break;
 800227a:	e033      	b.n	80022e4 <get_fat+0x168>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	09db      	lsrs	r3, r3, #7
 8002284:	4413      	add	r3, r2
 8002286:	4619      	mov	r1, r3
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff fe89 	bl	8001fa0 <move_window>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d126      	bne.n	80022e2 <get_fat+0x166>
			p = &fs->win[clst * 4 % SS(fs)];
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800229c:	3330      	adds	r3, #48	; 0x30
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	4413      	add	r3, r2
 80022a2:	3304      	adds	r3, #4
 80022a4:	60bb      	str	r3, [r7, #8]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	3303      	adds	r3, #3
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	061a      	lsls	r2, r3, #24
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	3302      	adds	r3, #2
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	041b      	lsls	r3, r3, #16
 80022b6:	4313      	orrs	r3, r2
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	3201      	adds	r2, #1
 80022bc:	7812      	ldrb	r2, [r2, #0]
 80022be:	0212      	lsls	r2, r2, #8
 80022c0:	4313      	orrs	r3, r2
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	7812      	ldrb	r2, [r2, #0]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80022cc:	617b      	str	r3, [r7, #20]
			break;
 80022ce:	e009      	b.n	80022e4 <get_fat+0x168>

		default:
			val = 1;	/* Internal error */
 80022d0:	2301      	movs	r3, #1
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	e006      	b.n	80022e4 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80022d6:	bf00      	nop
 80022d8:	e004      	b.n	80022e4 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80022da:	bf00      	nop
 80022dc:	e002      	b.n	80022e4 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80022de:	bf00      	nop
 80022e0:	e000      	b.n	80022e4 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80022e2:	bf00      	nop
		}
	}

	return val;
 80022e4:	697b      	ldr	r3, [r7, #20]
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b088      	sub	sp, #32
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	60f8      	str	r0, [r7, #12]
 80022f6:	60b9      	str	r1, [r7, #8]
 80022f8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d904      	bls.n	800230a <put_fat+0x1c>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	699a      	ldr	r2, [r3, #24]
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	429a      	cmp	r2, r3
 8002308:	d802      	bhi.n	8002310 <put_fat+0x22>
		res = FR_INT_ERR;
 800230a:	2302      	movs	r3, #2
 800230c:	77fb      	strb	r3, [r7, #31]
 800230e:	e0f2      	b.n	80024f6 <put_fat+0x208>

	} else {
		switch (fs->fs_type) {
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b02      	cmp	r3, #2
 8002316:	d074      	beq.n	8002402 <put_fat+0x114>
 8002318:	2b03      	cmp	r3, #3
 800231a:	f000 8099 	beq.w	8002450 <put_fat+0x162>
 800231e:	2b01      	cmp	r3, #1
 8002320:	f040 80df 	bne.w	80024e2 <put_fat+0x1f4>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	61bb      	str	r3, [r7, #24]
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	085b      	lsrs	r3, r3, #1
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4413      	add	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	0a5b      	lsrs	r3, r3, #9
 800233a:	4413      	add	r3, r2
 800233c:	4619      	mov	r1, r3
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f7ff fe2e 	bl	8001fa0 <move_window>
 8002344:	4603      	mov	r3, r0
 8002346:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002348:	7ffb      	ldrb	r3, [r7, #31]
 800234a:	2b00      	cmp	r3, #0
 800234c:	f040 80cc 	bne.w	80024e8 <put_fat+0x1fa>
			p = &fs->win[bc++ % SS(fs)];
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	1c5a      	adds	r2, r3, #1
 8002354:	61ba      	str	r2, [r7, #24]
 8002356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800235a:	3330      	adds	r3, #48	; 0x30
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	4413      	add	r3, r2
 8002360:	3304      	adds	r3, #4
 8002362:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00d      	beq.n	800238a <put_fat+0x9c>
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	b25b      	sxtb	r3, r3
 8002374:	f003 030f 	and.w	r3, r3, #15
 8002378:	b25a      	sxtb	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	b25b      	sxtb	r3, r3
 8002382:	4313      	orrs	r3, r2
 8002384:	b25b      	sxtb	r3, r3
 8002386:	b2db      	uxtb	r3, r3
 8002388:	e001      	b.n	800238e <put_fat+0xa0>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	b2db      	uxtb	r3, r3
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2201      	movs	r2, #1
 8002396:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	0a5b      	lsrs	r3, r3, #9
 80023a0:	4413      	add	r3, r2
 80023a2:	4619      	mov	r1, r3
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f7ff fdfb 	bl	8001fa0 <move_window>
 80023aa:	4603      	mov	r3, r0
 80023ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80023ae:	7ffb      	ldrb	r3, [r7, #31]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f040 809b 	bne.w	80024ec <put_fat+0x1fe>
			p = &fs->win[bc % SS(fs)];
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023bc:	3330      	adds	r3, #48	; 0x30
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	4413      	add	r3, r2
 80023c2:	3304      	adds	r3, #4
 80023c4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <put_fat+0xea>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	091b      	lsrs	r3, r3, #4
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	e00e      	b.n	80023f6 <put_fat+0x108>
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	b25b      	sxtb	r3, r3
 80023de:	f023 030f 	bic.w	r3, r3, #15
 80023e2:	b25a      	sxtb	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	0a1b      	lsrs	r3, r3, #8
 80023e8:	b25b      	sxtb	r3, r3
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	b25b      	sxtb	r3, r3
 80023f0:	4313      	orrs	r3, r2
 80023f2:	b25b      	sxtb	r3, r3
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2201      	movs	r2, #1
 80023fe:	711a      	strb	r2, [r3, #4]
			break;
 8002400:	e079      	b.n	80024f6 <put_fat+0x208>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	0a1b      	lsrs	r3, r3, #8
 800240a:	4413      	add	r3, r2
 800240c:	4619      	mov	r1, r3
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f7ff fdc6 	bl	8001fa0 <move_window>
 8002414:	4603      	mov	r3, r0
 8002416:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002418:	7ffb      	ldrb	r3, [r7, #31]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d168      	bne.n	80024f0 <put_fat+0x202>
			p = &fs->win[clst * 2 % SS(fs)];
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8002426:	3330      	adds	r3, #48	; 0x30
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	4413      	add	r3, r2
 800242c:	3304      	adds	r3, #4
 800242e:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	b2da      	uxtb	r2, r3
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	701a      	strb	r2, [r3, #0]
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	3301      	adds	r3, #1
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	b292      	uxth	r2, r2
 8002440:	0a12      	lsrs	r2, r2, #8
 8002442:	b292      	uxth	r2, r2
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2201      	movs	r2, #1
 800244c:	711a      	strb	r2, [r3, #4]
			break;
 800244e:	e052      	b.n	80024f6 <put_fat+0x208>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	09db      	lsrs	r3, r3, #7
 8002458:	4413      	add	r3, r2
 800245a:	4619      	mov	r1, r3
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f7ff fd9f 	bl	8001fa0 <move_window>
 8002462:	4603      	mov	r3, r0
 8002464:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002466:	7ffb      	ldrb	r3, [r7, #31]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d143      	bne.n	80024f4 <put_fat+0x206>
			p = &fs->win[clst * 4 % SS(fs)];
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8002474:	3330      	adds	r3, #48	; 0x30
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	4413      	add	r3, r2
 800247a:	3304      	adds	r3, #4
 800247c:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	3303      	adds	r3, #3
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	061a      	lsls	r2, r3, #24
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	3302      	adds	r3, #2
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	041b      	lsls	r3, r3, #16
 800248e:	4313      	orrs	r3, r2
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	3201      	adds	r2, #1
 8002494:	7812      	ldrb	r2, [r2, #0]
 8002496:	0212      	lsls	r2, r2, #8
 8002498:	4313      	orrs	r3, r2
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	7812      	ldrb	r2, [r2, #0]
 800249e:	4313      	orrs	r3, r2
 80024a0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	701a      	strb	r2, [r3, #0]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	3301      	adds	r3, #1
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	b292      	uxth	r2, r2
 80024ba:	0a12      	lsrs	r2, r2, #8
 80024bc:	b292      	uxth	r2, r2
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	701a      	strb	r2, [r3, #0]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	3302      	adds	r3, #2
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	0c12      	lsrs	r2, r2, #16
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	701a      	strb	r2, [r3, #0]
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	3303      	adds	r3, #3
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	0e12      	lsrs	r2, r2, #24
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2201      	movs	r2, #1
 80024de:	711a      	strb	r2, [r3, #4]
			break;
 80024e0:	e009      	b.n	80024f6 <put_fat+0x208>

		default :
			res = FR_INT_ERR;
 80024e2:	2302      	movs	r3, #2
 80024e4:	77fb      	strb	r3, [r7, #31]
 80024e6:	e006      	b.n	80024f6 <put_fat+0x208>
			if (res != FR_OK) break;
 80024e8:	bf00      	nop
 80024ea:	e004      	b.n	80024f6 <put_fat+0x208>
			if (res != FR_OK) break;
 80024ec:	bf00      	nop
 80024ee:	e002      	b.n	80024f6 <put_fat+0x208>
			if (res != FR_OK) break;
 80024f0:	bf00      	nop
 80024f2:	e000      	b.n	80024f6 <put_fat+0x208>
			if (res != FR_OK) break;
 80024f4:	bf00      	nop
		}
	}

	return res;
 80024f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3720      	adds	r7, #32
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d904      	bls.n	800251a <remove_chain+0x1a>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	699a      	ldr	r2, [r3, #24]
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d802      	bhi.n	8002520 <remove_chain+0x20>
		res = FR_INT_ERR;
 800251a:	2302      	movs	r3, #2
 800251c:	73fb      	strb	r3, [r7, #15]
 800251e:	e03d      	b.n	800259c <remove_chain+0x9c>

	} else {
		res = FR_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8002524:	e031      	b.n	800258a <remove_chain+0x8a>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8002526:	6839      	ldr	r1, [r7, #0]
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7ff fe27 	bl	800217c <get_fat>
 800252e:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d02f      	beq.n	8002596 <remove_chain+0x96>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d102      	bne.n	8002542 <remove_chain+0x42>
 800253c:	2302      	movs	r3, #2
 800253e:	73fb      	strb	r3, [r7, #15]
 8002540:	e02c      	b.n	800259c <remove_chain+0x9c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002548:	d102      	bne.n	8002550 <remove_chain+0x50>
 800254a:	2301      	movs	r3, #1
 800254c:	73fb      	strb	r3, [r7, #15]
 800254e:	e025      	b.n	800259c <remove_chain+0x9c>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8002550:	2200      	movs	r2, #0
 8002552:	6839      	ldr	r1, [r7, #0]
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7ff feca 	bl	80022ee <put_fat>
 800255a:	4603      	mov	r3, r0
 800255c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d11a      	bne.n	800259a <remove_chain+0x9a>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256c:	d00b      	beq.n	8002586 <remove_chain+0x86>
				fs->free_clust++;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	611a      	str	r2, [r3, #16]
				fs->fsi_flag |= 1;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	795b      	ldrb	r3, [r3, #5]
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	b2da      	uxtb	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699a      	ldr	r2, [r3, #24]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d8c8      	bhi.n	8002526 <remove_chain+0x26>
 8002594:	e002      	b.n	800259c <remove_chain+0x9c>
			if (nxt == 0) break;				/* Empty cluster? */
 8002596:	bf00      	nop
 8002598:	e000      	b.n	800259c <remove_chain+0x9c>
			if (res != FR_OK) break;
 800259a:	bf00      	nop
		}
	}

	return res;
 800259c:	7bfb      	ldrb	r3, [r7, #15]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b086      	sub	sp, #24
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10d      	bne.n	80025d2 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d004      	beq.n	80025cc <create_chain+0x26>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699a      	ldr	r2, [r3, #24]
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d81b      	bhi.n	8002604 <create_chain+0x5e>
 80025cc:	2301      	movs	r3, #1
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	e018      	b.n	8002604 <create_chain+0x5e>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80025d2:	6839      	ldr	r1, [r7, #0]
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff fdd1 	bl	800217c <get_fat>
 80025da:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d801      	bhi.n	80025e6 <create_chain+0x40>
 80025e2:	2301      	movs	r3, #1
 80025e4:	e06e      	b.n	80026c4 <create_chain+0x11e>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ec:	d101      	bne.n	80025f2 <create_chain+0x4c>
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	e068      	b.n	80026c4 <create_chain+0x11e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699a      	ldr	r2, [r3, #24]
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d901      	bls.n	8002600 <create_chain+0x5a>
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	e061      	b.n	80026c4 <create_chain+0x11e>
		scl = clst;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	3301      	adds	r3, #1
 800260c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699a      	ldr	r2, [r3, #24]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	429a      	cmp	r2, r3
 8002616:	d807      	bhi.n	8002628 <create_chain+0x82>
			ncl = 2;
 8002618:	2302      	movs	r3, #2
 800261a:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	429a      	cmp	r2, r3
 8002622:	d901      	bls.n	8002628 <create_chain+0x82>
 8002624:	2300      	movs	r3, #0
 8002626:	e04d      	b.n	80026c4 <create_chain+0x11e>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8002628:	6979      	ldr	r1, [r7, #20]
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7ff fda6 	bl	800217c <get_fat>
 8002630:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00e      	beq.n	8002656 <create_chain+0xb0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263e:	d002      	beq.n	8002646 <create_chain+0xa0>
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d101      	bne.n	800264a <create_chain+0xa4>
			return cs;
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	e03c      	b.n	80026c4 <create_chain+0x11e>
		if (ncl == scl) return 0;		/* No free cluster */
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	429a      	cmp	r2, r3
 8002650:	d1da      	bne.n	8002608 <create_chain+0x62>
 8002652:	2300      	movs	r3, #0
 8002654:	e036      	b.n	80026c4 <create_chain+0x11e>
		if (cs == 0) break;				/* Found a free cluster */
 8002656:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8002658:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800265c:	6979      	ldr	r1, [r7, #20]
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff fe45 	bl	80022ee <put_fat>
 8002664:	4603      	mov	r3, r0
 8002666:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d109      	bne.n	8002682 <create_chain+0xdc>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d006      	beq.n	8002682 <create_chain+0xdc>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	6839      	ldr	r1, [r7, #0]
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff fe38 	bl	80022ee <put_fat>
 800267e:	4603      	mov	r3, r0
 8002680:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8002682:	7bfb      	ldrb	r3, [r7, #15]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d114      	bne.n	80026b2 <create_chain+0x10c>
		fs->last_clust = ncl;			/* Update FSINFO */
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002696:	d014      	beq.n	80026c2 <create_chain+0x11c>
			fs->free_clust--;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	1e5a      	subs	r2, r3, #1
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	795b      	ldrb	r3, [r3, #5]
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	715a      	strb	r2, [r3, #5]
 80026b0:	e007      	b.n	80026c2 <create_chain+0x11c>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d102      	bne.n	80026be <create_chain+0x118>
 80026b8:	f04f 33ff 	mov.w	r3, #4294967295
 80026bc:	e000      	b.n	80026c0 <create_chain+0x11a>
 80026be:	2301      	movs	r3, #1
 80026c0:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80026c2:	697b      	ldr	r3, [r7, #20]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	b29a      	uxth	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d005      	beq.n	80026f6 <dir_sdi+0x2a>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	699a      	ldr	r2, [r3, #24]
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d801      	bhi.n	80026fa <dir_sdi+0x2e>
		return FR_INT_ERR;
 80026f6:	2302      	movs	r3, #2
 80026f8:	e063      	b.n	80027c2 <dir_sdi+0xf6>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d108      	bne.n	8002712 <dir_sdi+0x46>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b03      	cmp	r3, #3
 8002708:	d103      	bne.n	8002712 <dir_sdi+0x46>
		clst = dp->fs->dirbase;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002710:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10d      	bne.n	8002734 <dir_sdi+0x68>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	891b      	ldrh	r3, [r3, #8]
 800271e:	461a      	mov	r2, r3
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d801      	bhi.n	800272a <dir_sdi+0x5e>
			return FR_INT_ERR;
 8002726:	2302      	movs	r3, #2
 8002728:	e04b      	b.n	80027c2 <dir_sdi+0xf6>
		sect = dp->fs->dirbase;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	613b      	str	r3, [r7, #16]
 8002732:	e02c      	b.n	800278e <dir_sdi+0xc2>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	789b      	ldrb	r3, [r3, #2]
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800273e:	e01b      	b.n	8002778 <dir_sdi+0xac>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6979      	ldr	r1, [r7, #20]
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff fd18 	bl	800217c <get_fat>
 800274c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002754:	d101      	bne.n	800275a <dir_sdi+0x8e>
 8002756:	2301      	movs	r3, #1
 8002758:	e033      	b.n	80027c2 <dir_sdi+0xf6>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d905      	bls.n	800276c <dir_sdi+0xa0>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	699a      	ldr	r2, [r3, #24]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	429a      	cmp	r2, r3
 800276a:	d801      	bhi.n	8002770 <dir_sdi+0xa4>
				return FR_INT_ERR;
 800276c:	2302      	movs	r3, #2
 800276e:	e028      	b.n	80027c2 <dir_sdi+0xf6>
			idx -= ic;
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	429a      	cmp	r2, r3
 800277e:	d2df      	bcs.n	8002740 <dir_sdi+0x74>
		}
		sect = clust2sect(dp->fs, clst);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6979      	ldr	r1, [r7, #20]
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff fcd9 	bl	800213e <clust2sect>
 800278c:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	60da      	str	r2, [r3, #12]
	if (!sect) return FR_INT_ERR;
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <dir_sdi+0xd2>
 800279a:	2302      	movs	r3, #2
 800279c:	e011      	b.n	80027c2 <dir_sdi+0xf6>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	091a      	lsrs	r2, r3, #4
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	441a      	add	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	611a      	str	r2, [r3, #16]
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	f003 030f 	and.w	r3, r3, #15
 80027b8:	015b      	lsls	r3, r3, #5
 80027ba:	441a      	add	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	615a      	str	r2, [r3, #20]

	return FR_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80027ca:	b590      	push	{r4, r7, lr}
 80027cc:	b087      	sub	sp, #28
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	88db      	ldrh	r3, [r3, #6]
 80027d8:	3301      	adds	r3, #1
 80027da:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <dir_next+0x22>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <dir_next+0x26>
		return FR_NO_FILE;
 80027ec:	2304      	movs	r3, #4
 80027ee:	e0bb      	b.n	8002968 <dir_next+0x19e>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f040 80a6 	bne.w	8002948 <dir_next+0x17e>
		dp->sect++;					/* Next sector */
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	611a      	str	r2, [r3, #16]

		if (!dp->clust) {		/* Static table */
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d109      	bne.n	8002822 <dir_next+0x58>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	891b      	ldrh	r3, [r3, #8]
 8002814:	461a      	mov	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	429a      	cmp	r2, r3
 800281a:	f200 8095 	bhi.w	8002948 <dir_next+0x17e>
				return FR_NO_FILE;
 800281e:	2304      	movs	r3, #4
 8002820:	e0a2      	b.n	8002968 <dir_next+0x19e>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	091b      	lsrs	r3, r3, #4
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6812      	ldr	r2, [r2, #0]
 800282a:	7892      	ldrb	r2, [r2, #2]
 800282c:	3a01      	subs	r2, #1
 800282e:	4013      	ands	r3, r2
 8002830:	2b00      	cmp	r3, #0
 8002832:	f040 8089 	bne.w	8002948 <dir_next+0x17e>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	4619      	mov	r1, r3
 8002840:	4610      	mov	r0, r2
 8002842:	f7ff fc9b 	bl	800217c <get_fat>
 8002846:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d801      	bhi.n	8002852 <dir_next+0x88>
 800284e:	2302      	movs	r3, #2
 8002850:	e08a      	b.n	8002968 <dir_next+0x19e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002858:	d101      	bne.n	800285e <dir_next+0x94>
 800285a:	2301      	movs	r3, #1
 800285c:	e084      	b.n	8002968 <dir_next+0x19e>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	699a      	ldr	r2, [r3, #24]
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	429a      	cmp	r2, r3
 8002868:	d862      	bhi.n	8002930 <dir_next+0x166>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <dir_next+0xaa>
 8002870:	2304      	movs	r3, #4
 8002872:	e079      	b.n	8002968 <dir_next+0x19e>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	4619      	mov	r1, r3
 800287e:	4610      	mov	r0, r2
 8002880:	f7ff fe91 	bl	80025a6 <create_chain>
 8002884:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <dir_next+0xc6>
 800288c:	2307      	movs	r3, #7
 800288e:	e06b      	b.n	8002968 <dir_next+0x19e>
					if (clst == 1) return FR_INT_ERR;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d101      	bne.n	800289a <dir_next+0xd0>
 8002896:	2302      	movs	r3, #2
 8002898:	e066      	b.n	8002968 <dir_next+0x19e>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a0:	d101      	bne.n	80028a6 <dir_next+0xdc>
 80028a2:	2301      	movs	r3, #1
 80028a4:	e060      	b.n	8002968 <dir_next+0x19e>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff fb34 	bl	8001f18 <sync_window>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <dir_next+0xf0>
 80028b6:	2301      	movs	r3, #1
 80028b8:	e056      	b.n	8002968 <dir_next+0x19e>
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	3334      	adds	r3, #52	; 0x34
 80028c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028c4:	2100      	movs	r1, #0
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff faca 	bl	8001e60 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681c      	ldr	r4, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6979      	ldr	r1, [r7, #20]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff fc31 	bl	800213e <clust2sect>
 80028dc:	4603      	mov	r3, r0
 80028de:	6323      	str	r3, [r4, #48]	; 0x30
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80028e0:	2300      	movs	r3, #0
 80028e2:	613b      	str	r3, [r7, #16]
 80028e4:	e015      	b.n	8002912 <dir_next+0x148>
						dp->fs->wflag = 1;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2201      	movs	r2, #1
 80028ec:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff fb10 	bl	8001f18 <sync_window>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <dir_next+0x138>
 80028fe:	2301      	movs	r3, #1
 8002900:	e032      	b.n	8002968 <dir_next+0x19e>
						dp->fs->winsect++;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002908:	3201      	adds	r2, #1
 800290a:	631a      	str	r2, [r3, #48]	; 0x30
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	3301      	adds	r3, #1
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	789b      	ldrb	r3, [r3, #2]
 8002918:	461a      	mov	r2, r3
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	429a      	cmp	r2, r3
 800291e:	d8e2      	bhi.n	80028e6 <dir_next+0x11c>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6812      	ldr	r2, [r2, #0]
 8002928:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	1a8a      	subs	r2, r1, r2
 800292e:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	60da      	str	r2, [r3, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6979      	ldr	r1, [r7, #20]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff fbfe 	bl	800213e <clust2sect>
 8002942:	4602      	mov	r2, r0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	b29a      	uxth	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	015b      	lsls	r3, r3, #5
 8002960:	441a      	add	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	615a      	str	r2, [r3, #20]

	return FR_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	371c      	adds	r7, #28
 800296c:	46bd      	mov	sp, r7
 800296e:	bd90      	pop	{r4, r7, pc}

08002970 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800297a:	2100      	movs	r1, #0
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff fea5 	bl	80026cc <dir_sdi>
 8002982:	4603      	mov	r3, r0
 8002984:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8002986:	7bfb      	ldrb	r3, [r7, #15]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d12d      	bne.n	80029e8 <dir_alloc+0x78>
		n = 0;
 800298c:	2300      	movs	r3, #0
 800298e:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	4619      	mov	r1, r3
 800299a:	4610      	mov	r0, r2
 800299c:	f7ff fb00 	bl	8001fa0 <move_window>
 80029a0:	4603      	mov	r3, r0
 80029a2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d11d      	bne.n	80029e6 <dir_alloc+0x76>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	2be5      	cmp	r3, #229	; 0xe5
 80029b2:	d004      	beq.n	80029be <dir_alloc+0x4e>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d107      	bne.n	80029ce <dir_alloc+0x5e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	3301      	adds	r3, #1
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d102      	bne.n	80029d2 <dir_alloc+0x62>
 80029cc:	e00c      	b.n	80029e8 <dir_alloc+0x78>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80029ce:	2300      	movs	r3, #0
 80029d0:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80029d2:	2101      	movs	r1, #1
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f7ff fef8 	bl	80027ca <dir_next>
 80029da:	4603      	mov	r3, r0
 80029dc:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80029de:	7bfb      	ldrb	r3, [r7, #15]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0d5      	beq.n	8002990 <dir_alloc+0x20>
 80029e4:	e000      	b.n	80029e8 <dir_alloc+0x78>
			if (res != FR_OK) break;
 80029e6:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80029e8:	7bfb      	ldrb	r3, [r7, #15]
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	d101      	bne.n	80029f2 <dir_alloc+0x82>
 80029ee:	2307      	movs	r3, #7
 80029f0:	73fb      	strb	r3, [r7, #15]
	return res;
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	331b      	adds	r3, #27
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	021b      	lsls	r3, r3, #8
 8002a0e:	b21a      	sxth	r2, r3
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	331a      	adds	r3, #26
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	b21b      	sxth	r3, r3
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	b21b      	sxth	r3, r3
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b03      	cmp	r3, #3
 8002a26:	d10f      	bne.n	8002a48 <ld_clust+0x4c>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	3315      	adds	r3, #21
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	021b      	lsls	r3, r3, #8
 8002a30:	b21a      	sxth	r2, r3
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	3314      	adds	r3, #20
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	b21b      	sxth	r3, r3
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	b21b      	sxth	r3, r3
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	041b      	lsls	r3, r3, #16
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]

	return cl;
 8002a48:	68fb      	ldr	r3, [r7, #12]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
 8002a5e:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	331a      	adds	r3, #26
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	701a      	strb	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	331b      	adds	r3, #27
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	b292      	uxth	r2, r2
 8002a72:	0a12      	lsrs	r2, r2, #8
 8002a74:	b292      	uxth	r2, r2
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3314      	adds	r3, #20
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	0c12      	lsrs	r2, r2, #16
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	701a      	strb	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3315      	adds	r3, #21
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	0c12      	lsrs	r2, r2, #16
 8002a8e:	b292      	uxth	r2, r2
 8002a90:	0a12      	lsrs	r2, r2, #8
 8002a92:	b292      	uxth	r2, r2
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	701a      	strb	r2, [r3, #0]
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ab6:	1e5a      	subs	r2, r3, #1
 8002ab8:	4613      	mov	r3, r2
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	4413      	add	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	2301      	movs	r3, #1
 8002aca:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8002acc:	4a2b      	ldr	r2, [pc, #172]	; (8002b7c <cmp_lfn+0xd8>)
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	4413      	add	r3, r2
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	021b      	lsls	r3, r3, #8
 8002ade:	b21a      	sxth	r2, r3
 8002ae0:	4926      	ldr	r1, [pc, #152]	; (8002b7c <cmp_lfn+0xd8>)
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	440b      	add	r3, r1
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	4619      	mov	r1, r3
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	440b      	add	r3, r1
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	b21b      	sxth	r3, r3
 8002af2:	4313      	orrs	r3, r2
 8002af4:	b21b      	sxth	r3, r3
 8002af6:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8002af8:	89fb      	ldrh	r3, [r7, #14]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d019      	beq.n	8002b32 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8002afe:	89bb      	ldrh	r3, [r7, #12]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7fe fa8f 	bl	8001024 <ff_wtoupper>
 8002b06:	4603      	mov	r3, r0
 8002b08:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	2bfe      	cmp	r3, #254	; 0xfe
 8002b0e:	d80e      	bhi.n	8002b2e <cmp_lfn+0x8a>
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	617a      	str	r2, [r7, #20]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fe fa80 	bl	8001024 <ff_wtoupper>
 8002b24:	4603      	mov	r3, r0
 8002b26:	461a      	mov	r2, r3
 8002b28:	89fb      	ldrh	r3, [r7, #14]
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d008      	beq.n	8002b40 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e01f      	b.n	8002b72 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8002b32:	89bb      	ldrh	r3, [r7, #12]
 8002b34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d001      	beq.n	8002b40 <cmp_lfn+0x9c>
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	e018      	b.n	8002b72 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	3301      	adds	r3, #1
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	2b0c      	cmp	r3, #12
 8002b4a:	d9bf      	bls.n	8002acc <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00b      	beq.n	8002b70 <cmp_lfn+0xcc>
 8002b58:	89fb      	ldrh	r3, [r7, #14]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d008      	beq.n	8002b70 <cmp_lfn+0xcc>
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	4413      	add	r3, r2
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <cmp_lfn+0xcc>
		return 0;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	e000      	b.n	8002b72 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8002b70:	2301      	movs	r3, #1
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	080094c4 	.word	0x080094c4

08002b80 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b089      	sub	sp, #36	; 0x24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	4611      	mov	r1, r2
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	460b      	mov	r3, r1
 8002b90:	71fb      	strb	r3, [r7, #7]
 8002b92:	4613      	mov	r3, r2
 8002b94:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	330d      	adds	r3, #13
 8002b9a:	79ba      	ldrb	r2, [r7, #6]
 8002b9c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	330b      	adds	r3, #11
 8002ba2:	220f      	movs	r2, #15
 8002ba4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	330c      	adds	r3, #12
 8002baa:	2200      	movs	r2, #0
 8002bac:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	331a      	adds	r3, #26
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	701a      	strb	r2, [r3, #0]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	331b      	adds	r3, #27
 8002bba:	2200      	movs	r2, #0
 8002bbc:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	1e5a      	subs	r2, r3, #1
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	4413      	add	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	82fb      	strh	r3, [r7, #22]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8002bd6:	8afb      	ldrh	r3, [r7, #22]
 8002bd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d007      	beq.n	8002bf0 <fit_lfn+0x70>
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	1c5a      	adds	r2, r3, #1
 8002be4:	61fa      	str	r2, [r7, #28]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	4413      	add	r3, r2
 8002bec:	881b      	ldrh	r3, [r3, #0]
 8002bee:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8002bf0:	4a1d      	ldr	r2, [pc, #116]	; (8002c68 <fit_lfn+0xe8>)
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	8afa      	ldrh	r2, [r7, #22]
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	701a      	strb	r2, [r3, #0]
 8002c04:	4a18      	ldr	r2, [pc, #96]	; (8002c68 <fit_lfn+0xe8>)
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	4413      	add	r3, r2
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	4413      	add	r3, r2
 8002c12:	8afa      	ldrh	r2, [r7, #22]
 8002c14:	0a12      	lsrs	r2, r2, #8
 8002c16:	b292      	uxth	r2, r2
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8002c1c:	8afb      	ldrh	r3, [r7, #22]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d102      	bne.n	8002c28 <fit_lfn+0xa8>
 8002c22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c26:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	61bb      	str	r3, [r7, #24]
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	2b0c      	cmp	r3, #12
 8002c32:	d9d0      	bls.n	8002bd6 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8002c34:	8afb      	ldrh	r3, [r7, #22]
 8002c36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d006      	beq.n	8002c4c <fit_lfn+0xcc>
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	4413      	add	r3, r2
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d103      	bne.n	8002c54 <fit_lfn+0xd4>
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c52:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	79fa      	ldrb	r2, [r7, #7]
 8002c58:	701a      	strb	r2, [r3, #0]
}
 8002c5a:	bf00      	nop
 8002c5c:	3724      	adds	r7, #36	; 0x24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	080094c4 	.word	0x080094c4

08002c6c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b08c      	sub	sp, #48	; 0x30
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8002c7a:	220b      	movs	r2, #11
 8002c7c:	68b9      	ldr	r1, [r7, #8]
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f7ff f8d0 	bl	8001e24 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	2b05      	cmp	r3, #5
 8002c88:	d92b      	bls.n	8002ce2 <gen_numname+0x76>
		sr = seq;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8002c8e:	e022      	b.n	8002cd6 <gen_numname+0x6a>
			wc = *lfn++;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	1c9a      	adds	r2, r3, #2
 8002c94:	607a      	str	r2, [r7, #4]
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c9e:	e017      	b.n	8002cd0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	005a      	lsls	r2, r3, #1
 8002ca4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	4413      	add	r3, r2
 8002cac:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8002cae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002cb0:	085b      	lsrs	r3, r3, #1
 8002cb2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d005      	beq.n	8002cca <gen_numname+0x5e>
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8002cc4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8002cc8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8002cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ccc:	3301      	adds	r3, #1
 8002cce:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd2:	2b0f      	cmp	r3, #15
 8002cd4:	d9e4      	bls.n	8002ca0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1d8      	bne.n	8002c90 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8002ce2:	2307      	movs	r3, #7
 8002ce4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	3330      	adds	r3, #48	; 0x30
 8002cf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8002cf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002cfa:	2b39      	cmp	r3, #57	; 0x39
 8002cfc:	d904      	bls.n	8002d08 <gen_numname+0x9c>
 8002cfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d02:	3307      	adds	r3, #7
 8002d04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8002d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0a:	1e5a      	subs	r2, r3, #1
 8002d0c:	62ba      	str	r2, [r7, #40]	; 0x28
 8002d0e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002d12:	4413      	add	r3, r2
 8002d14:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002d18:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	091b      	lsrs	r3, r3, #4
 8002d20:	603b      	str	r3, [r7, #0]
	} while (seq);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1de      	bne.n	8002ce6 <gen_numname+0x7a>
	ns[i] = '~';
 8002d28:	f107 0214 	add.w	r2, r7, #20
 8002d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2e:	4413      	add	r3, r2
 8002d30:	227e      	movs	r2, #126	; 0x7e
 8002d32:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8002d34:	2300      	movs	r3, #0
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
 8002d38:	e002      	b.n	8002d40 <gen_numname+0xd4>
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d205      	bcs.n	8002d54 <gen_numname+0xe8>
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4c:	4413      	add	r3, r2
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b20      	cmp	r3, #32
 8002d52:	d1f2      	bne.n	8002d3a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	1c5a      	adds	r2, r3, #1
 8002d58:	627a      	str	r2, [r7, #36]	; 0x24
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	441a      	add	r2, r3
 8002d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d60:	2b07      	cmp	r3, #7
 8002d62:	d808      	bhi.n	8002d76 <gen_numname+0x10a>
 8002d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d66:	1c59      	adds	r1, r3, #1
 8002d68:	62b9      	str	r1, [r7, #40]	; 0x28
 8002d6a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002d6e:	440b      	add	r3, r1
 8002d70:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002d74:	e000      	b.n	8002d78 <gen_numname+0x10c>
 8002d76:	2320      	movs	r3, #32
 8002d78:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	2b07      	cmp	r3, #7
 8002d7e:	d9e9      	bls.n	8002d54 <gen_numname+0xe8>
}
 8002d80:	bf00      	nop
 8002d82:	3730      	adds	r7, #48	; 0x30
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8002d90:	2300      	movs	r3, #0
 8002d92:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8002d94:	230b      	movs	r3, #11
 8002d96:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	0852      	lsrs	r2, r2, #1
 8002d9e:	01db      	lsls	r3, r3, #7
 8002da0:	4313      	orrs	r3, r2
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	1c59      	adds	r1, r3, #1
 8002da8:	6079      	str	r1, [r7, #4]
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	4413      	add	r3, r2
 8002dae:	73fb      	strb	r3, [r7, #15]
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1ed      	bne.n	8002d98 <sum_sfn+0x10>
	return sum;
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b086      	sub	sp, #24
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff fc79 	bl	80026cc <dir_sdi>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8002dde:	7dfb      	ldrb	r3, [r7, #23]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <dir_find+0x1e>
 8002de4:	7dfb      	ldrb	r3, [r7, #23]
 8002de6:	e0a0      	b.n	8002f2a <dir_find+0x160>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8002de8:	23ff      	movs	r3, #255	; 0xff
 8002dea:	753b      	strb	r3, [r7, #20]
 8002dec:	7d3b      	ldrb	r3, [r7, #20]
 8002dee:	757b      	strb	r3, [r7, #21]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002df6:	841a      	strh	r2, [r3, #32]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	4619      	mov	r1, r3
 8002e02:	4610      	mov	r0, r2
 8002e04:	f7ff f8cc 	bl	8001fa0 <move_window>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8002e0c:	7dfb      	ldrb	r3, [r7, #23]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f040 8085 	bne.w	8002f1e <dir_find+0x154>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8002e20:	7dbb      	ldrb	r3, [r7, #22]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d102      	bne.n	8002e2c <dir_find+0x62>
 8002e26:	2304      	movs	r3, #4
 8002e28:	75fb      	strb	r3, [r7, #23]
 8002e2a:	e07d      	b.n	8002f28 <dir_find+0x15e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	330b      	adds	r3, #11
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e36:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8002e38:	7dbb      	ldrb	r3, [r7, #22]
 8002e3a:	2be5      	cmp	r3, #229	; 0xe5
 8002e3c:	d007      	beq.n	8002e4e <dir_find+0x84>
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
 8002e40:	f003 0308 	and.w	r3, r3, #8
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d009      	beq.n	8002e5c <dir_find+0x92>
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
 8002e4a:	2b0f      	cmp	r3, #15
 8002e4c:	d006      	beq.n	8002e5c <dir_find+0x92>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8002e4e:	23ff      	movs	r3, #255	; 0xff
 8002e50:	757b      	strb	r3, [r7, #21]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e58:	841a      	strh	r2, [r3, #32]
 8002e5a:	e055      	b.n	8002f08 <dir_find+0x13e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
 8002e5e:	2b0f      	cmp	r3, #15
 8002e60:	d12f      	bne.n	8002ec2 <dir_find+0xf8>
				if (dp->lfn) {
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d04e      	beq.n	8002f08 <dir_find+0x13e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8002e6a:	7dbb      	ldrb	r3, [r7, #22]
 8002e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00c      	beq.n	8002e8e <dir_find+0xc4>
						sum = dir[LDIR_Chksum];
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	7b5b      	ldrb	r3, [r3, #13]
 8002e78:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8002e7a:	7dbb      	ldrb	r3, [r7, #22]
 8002e7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e80:	75bb      	strb	r3, [r7, #22]
 8002e82:	7dbb      	ldrb	r3, [r7, #22]
 8002e84:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	88da      	ldrh	r2, [r3, #6]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8002e8e:	7dba      	ldrb	r2, [r7, #22]
 8002e90:	7d7b      	ldrb	r3, [r7, #21]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d112      	bne.n	8002ebc <dir_find+0xf2>
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	330d      	adds	r3, #13
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	7d3a      	ldrb	r2, [r7, #20]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d10c      	bne.n	8002ebc <dir_find+0xf2>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	6939      	ldr	r1, [r7, #16]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fdfb 	bl	8002aa4 <cmp_lfn>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <dir_find+0xf2>
 8002eb4:	7d7b      	ldrb	r3, [r7, #21]
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	e000      	b.n	8002ebe <dir_find+0xf4>
 8002ebc:	23ff      	movs	r3, #255	; 0xff
 8002ebe:	757b      	strb	r3, [r7, #21]
 8002ec0:	e022      	b.n	8002f08 <dir_find+0x13e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8002ec2:	7d7b      	ldrb	r3, [r7, #21]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d107      	bne.n	8002ed8 <dir_find+0x10e>
 8002ec8:	6938      	ldr	r0, [r7, #16]
 8002eca:	f7ff ff5d 	bl	8002d88 <sum_sfn>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	7d3b      	ldrb	r3, [r7, #20]
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d024      	beq.n	8002f22 <dir_find+0x158>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	330b      	adds	r3, #11
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d109      	bne.n	8002efc <dir_find+0x132>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	220b      	movs	r2, #11
 8002eee:	4619      	mov	r1, r3
 8002ef0:	6938      	ldr	r0, [r7, #16]
 8002ef2:	f7fe ffcf 	bl	8001e94 <mem_cmp>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d014      	beq.n	8002f26 <dir_find+0x15c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8002efc:	23ff      	movs	r3, #255	; 0xff
 8002efe:	757b      	strb	r3, [r7, #21]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f06:	841a      	strh	r2, [r3, #32]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8002f08:	2100      	movs	r1, #0
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7ff fc5d 	bl	80027ca <dir_next>
 8002f10:	4603      	mov	r3, r0
 8002f12:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8002f14:	7dfb      	ldrb	r3, [r7, #23]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f43f af6e 	beq.w	8002df8 <dir_find+0x2e>
 8002f1c:	e004      	b.n	8002f28 <dir_find+0x15e>
		if (res != FR_OK) break;
 8002f1e:	bf00      	nop
 8002f20:	e002      	b.n	8002f28 <dir_find+0x15e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8002f22:	bf00      	nop
 8002f24:	e000      	b.n	8002f28 <dir_find+0x15e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8002f26:	bf00      	nop

	return res;
 8002f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3718      	adds	r7, #24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b08c      	sub	sp, #48	; 0x30
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	623b      	str	r3, [r7, #32]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8002f48:	f107 030c 	add.w	r3, r7, #12
 8002f4c:	220c      	movs	r2, #12
 8002f4e:	6a39      	ldr	r1, [r7, #32]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fe ff67 	bl	8001e24 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
 8002f56:	7dfb      	ldrb	r3, [r7, #23]
 8002f58:	f003 0320 	and.w	r3, r3, #32
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <dir_register+0x30>
		return FR_INVALID_NAME;
 8002f60:	2306      	movs	r3, #6
 8002f62:	e0e0      	b.n	8003126 <dir_register+0x1f2>

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8002f64:	7dfb      	ldrb	r3, [r7, #23]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d035      	beq.n	8002fda <dir_register+0xa6>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	330b      	adds	r3, #11
 8002f72:	2200      	movs	r2, #0
 8002f74:	701a      	strb	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f80:	e013      	b.n	8002faa <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8002f82:	f107 010c 	add.w	r1, r7, #12
 8002f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f88:	69fa      	ldr	r2, [r7, #28]
 8002f8a:	6a38      	ldr	r0, [r7, #32]
 8002f8c:	f7ff fe6e 	bl	8002c6c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff ff1a 	bl	8002dca <dir_find>
 8002f96:	4603      	mov	r3, r0
 8002f98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8002f9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d106      	bne.n	8002fb2 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8002fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fac:	2b63      	cmp	r3, #99	; 0x63
 8002fae:	d9e8      	bls.n	8002f82 <dir_register+0x4e>
 8002fb0:	e000      	b.n	8002fb4 <dir_register+0x80>
			if (res != FR_OK) break;
 8002fb2:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8002fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb6:	2b64      	cmp	r3, #100	; 0x64
 8002fb8:	d101      	bne.n	8002fbe <dir_register+0x8a>
 8002fba:	2307      	movs	r3, #7
 8002fbc:	e0b3      	b.n	8003126 <dir_register+0x1f2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8002fbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d002      	beq.n	8002fcc <dir_register+0x98>
 8002fc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002fca:	e0ac      	b.n	8003126 <dir_register+0x1f2>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	330b      	adds	r3, #11
 8002fd0:	7dfa      	ldrb	r2, [r7, #23]
 8002fd2:	701a      	strb	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69fa      	ldr	r2, [r7, #28]
 8002fd8:	61da      	str	r2, [r3, #28]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8002fda:	7dfb      	ldrb	r3, [r7, #23]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d014      	beq.n	800300e <dir_register+0xda>
		for (n = 0; lfn[n]; n++) ;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fe8:	e002      	b.n	8002ff0 <dir_register+0xbc>
 8002fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fec:	3301      	adds	r3, #1
 8002fee:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	69fa      	ldr	r2, [r7, #28]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	881b      	ldrh	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f5      	bne.n	8002fea <dir_register+0xb6>
		nent = (n + 25) / 13;
 8002ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003000:	3319      	adds	r3, #25
 8003002:	4a4b      	ldr	r2, [pc, #300]	; (8003130 <dir_register+0x1fc>)
 8003004:	fba2 2303 	umull	r2, r3, r2, r3
 8003008:	089b      	lsrs	r3, r3, #2
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
 800300c:	e001      	b.n	8003012 <dir_register+0xde>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800300e:	2301      	movs	r3, #1
 8003010:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8003012:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7ff fcab 	bl	8002970 <dir_alloc>
 800301a:	4603      	mov	r3, r0
 800301c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8003020:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003024:	2b00      	cmp	r3, #0
 8003026:	d14b      	bne.n	80030c0 <dir_register+0x18c>
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	3b01      	subs	r3, #1
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	2b00      	cmp	r3, #0
 8003032:	d045      	beq.n	80030c0 <dir_register+0x18c>
		res = dir_sdi(dp, dp->index - nent);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	88db      	ldrh	r3, [r3, #6]
 8003038:	461a      	mov	r2, r3
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	4619      	mov	r1, r3
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7ff fb43 	bl	80026cc <dir_sdi>
 8003046:	4603      	mov	r3, r0
 8003048:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800304c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003050:	2b00      	cmp	r3, #0
 8003052:	d135      	bne.n	80030c0 <dir_register+0x18c>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff fe95 	bl	8002d88 <sum_sfn>
 800305e:	4603      	mov	r3, r0
 8003060:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	4619      	mov	r1, r3
 800306c:	4610      	mov	r0, r2
 800306e:	f7fe ff97 	bl	8001fa0 <move_window>
 8003072:	4603      	mov	r3, r0
 8003074:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8003078:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800307c:	2b00      	cmp	r3, #0
 800307e:	d11e      	bne.n	80030be <dir_register+0x18a>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	69d8      	ldr	r0, [r3, #28]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6959      	ldr	r1, [r3, #20]
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	b2da      	uxtb	r2, r3
 800308c:	7efb      	ldrb	r3, [r7, #27]
 800308e:	f7ff fd77 	bl	8002b80 <fit_lfn>
				dp->fs->wflag = 1;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2201      	movs	r2, #1
 8003098:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 800309a:	2100      	movs	r1, #0
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7ff fb94 	bl	80027ca <dir_next>
 80030a2:	4603      	mov	r3, r0
 80030a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80030a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d107      	bne.n	80030c0 <dir_register+0x18c>
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	3b01      	subs	r3, #1
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1d2      	bne.n	8003062 <dir_register+0x12e>
 80030bc:	e000      	b.n	80030c0 <dir_register+0x18c>
				if (res != FR_OK) break;
 80030be:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80030c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d12c      	bne.n	8003122 <dir_register+0x1ee>
		res = move_window(dp->fs, dp->sect);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	4619      	mov	r1, r3
 80030d2:	4610      	mov	r0, r2
 80030d4:	f7fe ff64 	bl	8001fa0 <move_window>
 80030d8:	4603      	mov	r3, r0
 80030da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80030de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d11d      	bne.n	8003122 <dir_register+0x1ee>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	2220      	movs	r2, #32
 80030ec:	2100      	movs	r1, #0
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe feb6 	bl	8001e60 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6958      	ldr	r0, [r3, #20]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	220b      	movs	r2, #11
 80030fe:	4619      	mov	r1, r3
 8003100:	f7fe fe90 	bl	8001e24 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	330c      	adds	r3, #12
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6992      	ldr	r2, [r2, #24]
 800310e:	320b      	adds	r2, #11
 8003110:	7812      	ldrb	r2, [r2, #0]
 8003112:	f002 0218 	and.w	r2, r2, #24
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2201      	movs	r2, #1
 8003120:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8003122:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003126:	4618      	mov	r0, r3
 8003128:	3730      	adds	r7, #48	; 0x30
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	4ec4ec4f 	.word	0x4ec4ec4f

08003134 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b08a      	sub	sp, #40	; 0x28
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	613b      	str	r3, [r7, #16]
 8003144:	e002      	b.n	800314c <create_name+0x18>
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	3301      	adds	r3, #1
 800314a:	613b      	str	r3, [r7, #16]
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b2f      	cmp	r3, #47	; 0x2f
 8003152:	d0f8      	beq.n	8003146 <create_name+0x12>
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b5c      	cmp	r3, #92	; 0x5c
 800315a:	d0f4      	beq.n	8003146 <create_name+0x12>
	lfn = dp->lfn;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8003162:	2300      	movs	r3, #0
 8003164:	617b      	str	r3, [r7, #20]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	61ba      	str	r2, [r7, #24]
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4413      	add	r3, r2
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8003178:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800317a:	2b1f      	cmp	r3, #31
 800317c:	d92f      	bls.n	80031de <create_name+0xaa>
 800317e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003180:	2b2f      	cmp	r3, #47	; 0x2f
 8003182:	d02c      	beq.n	80031de <create_name+0xaa>
 8003184:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003186:	2b5c      	cmp	r3, #92	; 0x5c
 8003188:	d029      	beq.n	80031de <create_name+0xaa>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2bfe      	cmp	r3, #254	; 0xfe
 800318e:	d901      	bls.n	8003194 <create_name+0x60>
			return FR_INVALID_NAME;
 8003190:	2306      	movs	r3, #6
 8003192:	e1c7      	b.n	8003524 <create_name+0x3f0>
#if !_LFN_UNICODE
		w &= 0xFF;
 8003194:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003196:	b2db      	uxtb	r3, r3
 8003198:	84bb      	strh	r3, [r7, #36]	; 0x24
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800319a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800319c:	2101      	movs	r1, #1
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fd ff04 	bl	8000fac <ff_convert>
 80031a4:	4603      	mov	r3, r0
 80031a6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80031a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <create_name+0x7e>
 80031ae:	2306      	movs	r3, #6
 80031b0:	e1b8      	b.n	8003524 <create_name+0x3f0>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 80031b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80031b4:	2b7f      	cmp	r3, #127	; 0x7f
 80031b6:	d809      	bhi.n	80031cc <create_name+0x98>
 80031b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80031ba:	4619      	mov	r1, r3
 80031bc:	48a4      	ldr	r0, [pc, #656]	; (8003450 <create_name+0x31c>)
 80031be:	f7fe fe90 	bl	8001ee2 <chk_chr>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <create_name+0x98>
			return FR_INVALID_NAME;
 80031c8:	2306      	movs	r3, #6
 80031ca:	e1ab      	b.n	8003524 <create_name+0x3f0>
		lfn[di++] = w;					/* Store the Unicode character */
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	617a      	str	r2, [r7, #20]
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	4413      	add	r3, r2
 80031d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031da:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80031dc:	e7c5      	b.n	800316a <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	441a      	add	r2, r3
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80031e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80031ea:	2b1f      	cmp	r3, #31
 80031ec:	d801      	bhi.n	80031f2 <create_name+0xbe>
 80031ee:	2304      	movs	r3, #4
 80031f0:	e000      	b.n	80031f4 <create_name+0xc0>
 80031f2:	2300      	movs	r3, #0
 80031f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if _FS_RPATH
	if ((di == 1 && lfn[di - 1] == '.') || /* Is this a dot entry? */
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d109      	bne.n	8003212 <create_name+0xde>
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003204:	3b01      	subs	r3, #1
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	4413      	add	r3, r2
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	2b2e      	cmp	r3, #46	; 0x2e
 8003210:	d016      	beq.n	8003240 <create_name+0x10c>
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	2b02      	cmp	r3, #2
 8003216:	d14c      	bne.n	80032b2 <create_name+0x17e>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800321e:	3b01      	subs	r3, #1
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	4413      	add	r3, r2
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	2b2e      	cmp	r3, #46	; 0x2e
 800322a:	d142      	bne.n	80032b2 <create_name+0x17e>
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003232:	3b02      	subs	r3, #2
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4413      	add	r3, r2
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	2b2e      	cmp	r3, #46	; 0x2e
 800323e:	d138      	bne.n	80032b2 <create_name+0x17e>
		lfn[di] = 0;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	4413      	add	r3, r2
 8003248:	2200      	movs	r2, #0
 800324a:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)
 800324c:	2300      	movs	r3, #0
 800324e:	623b      	str	r3, [r7, #32]
 8003250:	e00e      	b.n	8003270 <create_name+0x13c>
			dp->fn[i] = (i < di) ? '.' : ' ';
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	699a      	ldr	r2, [r3, #24]
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	4413      	add	r3, r2
 800325a:	6a39      	ldr	r1, [r7, #32]
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	4291      	cmp	r1, r2
 8003260:	d201      	bcs.n	8003266 <create_name+0x132>
 8003262:	222e      	movs	r2, #46	; 0x2e
 8003264:	e000      	b.n	8003268 <create_name+0x134>
 8003266:	2220      	movs	r2, #32
 8003268:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	3301      	adds	r3, #1
 800326e:	623b      	str	r3, [r7, #32]
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	2b0a      	cmp	r3, #10
 8003274:	d9ed      	bls.n	8003252 <create_name+0x11e>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	699a      	ldr	r2, [r3, #24]
 800327a:	6a3b      	ldr	r3, [r7, #32]
 800327c:	4413      	add	r3, r2
 800327e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003282:	f042 0220 	orr.w	r2, r2, #32
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	e14a      	b.n	8003524 <create_name+0x3f0>
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
		w = lfn[di - 1];
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003294:	3b01      	subs	r3, #1
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	4413      	add	r3, r2
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80032a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032a2:	2b20      	cmp	r3, #32
 80032a4:	d002      	beq.n	80032ac <create_name+0x178>
 80032a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032a8:	2b2e      	cmp	r3, #46	; 0x2e
 80032aa:	d106      	bne.n	80032ba <create_name+0x186>
		di--;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	3b01      	subs	r3, #1
 80032b0:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1ea      	bne.n	800328e <create_name+0x15a>
 80032b8:	e000      	b.n	80032bc <create_name+0x188>
		if (w != ' ' && w != '.') break;
 80032ba:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <create_name+0x192>
 80032c2:	2306      	movs	r3, #6
 80032c4:	e12e      	b.n	8003524 <create_name+0x3f0>

	lfn[di] = 0;						/* LFN is created */
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4413      	add	r3, r2
 80032ce:	2200      	movs	r2, #0
 80032d0:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	220b      	movs	r2, #11
 80032d8:	2120      	movs	r1, #32
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fe fdc0 	bl	8001e60 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80032e0:	2300      	movs	r3, #0
 80032e2:	61bb      	str	r3, [r7, #24]
 80032e4:	e002      	b.n	80032ec <create_name+0x1b8>
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	3301      	adds	r3, #1
 80032ea:	61bb      	str	r3, [r7, #24]
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	4413      	add	r3, r2
 80032f4:	881b      	ldrh	r3, [r3, #0]
 80032f6:	2b20      	cmp	r3, #32
 80032f8:	d0f5      	beq.n	80032e6 <create_name+0x1b2>
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4413      	add	r3, r2
 8003302:	881b      	ldrh	r3, [r3, #0]
 8003304:	2b2e      	cmp	r3, #46	; 0x2e
 8003306:	d0ee      	beq.n	80032e6 <create_name+0x1b2>
	if (si) cf |= NS_LOSS | NS_LFN;
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d009      	beq.n	8003322 <create_name+0x1ee>
 800330e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003312:	f043 0303 	orr.w	r3, r3, #3
 8003316:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800331a:	e002      	b.n	8003322 <create_name+0x1ee>
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	3b01      	subs	r3, #1
 8003320:	617b      	str	r3, [r7, #20]
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d009      	beq.n	800333c <create_name+0x208>
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800332e:	3b01      	subs	r3, #1
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	4413      	add	r3, r2
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	2b2e      	cmp	r3, #46	; 0x2e
 800333a:	d1ef      	bne.n	800331c <create_name+0x1e8>

	b = i = 0; ni = 8;
 800333c:	2300      	movs	r3, #0
 800333e:	623b      	str	r3, [r7, #32]
 8003340:	2300      	movs	r3, #0
 8003342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003346:	2308      	movs	r3, #8
 8003348:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	1c5a      	adds	r2, r3, #1
 800334e:	61ba      	str	r2, [r7, #24]
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	4413      	add	r3, r2
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800335a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 8096 	beq.w	800348e <create_name+0x35a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8003362:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003364:	2b20      	cmp	r3, #32
 8003366:	d006      	beq.n	8003376 <create_name+0x242>
 8003368:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800336a:	2b2e      	cmp	r3, #46	; 0x2e
 800336c:	d10a      	bne.n	8003384 <create_name+0x250>
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	429a      	cmp	r2, r3
 8003374:	d006      	beq.n	8003384 <create_name+0x250>
			cf |= NS_LOSS | NS_LFN; continue;
 8003376:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800337a:	f043 0303 	orr.w	r3, r3, #3
 800337e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003382:	e083      	b.n	800348c <create_name+0x358>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8003384:	6a3a      	ldr	r2, [r7, #32]
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	429a      	cmp	r2, r3
 800338a:	d203      	bcs.n	8003394 <create_name+0x260>
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	429a      	cmp	r2, r3
 8003392:	d123      	bne.n	80033dc <create_name+0x2a8>
			if (ni == 11) {				/* Long extension */
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	2b0b      	cmp	r3, #11
 8003398:	d106      	bne.n	80033a8 <create_name+0x274>
				cf |= NS_LOSS | NS_LFN; break;
 800339a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800339e:	f043 0303 	orr.w	r3, r3, #3
 80033a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80033a6:	e075      	b.n	8003494 <create_name+0x360>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d005      	beq.n	80033bc <create_name+0x288>
 80033b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80033b4:	f043 0303 	orr.w	r3, r3, #3
 80033b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d866      	bhi.n	8003492 <create_name+0x35e>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	61bb      	str	r3, [r7, #24]
 80033c8:	2308      	movs	r3, #8
 80033ca:	623b      	str	r3, [r7, #32]
 80033cc:	230b      	movs	r3, #11
 80033ce:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80033d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80033da:	e057      	b.n	800348c <create_name+0x358>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80033dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80033de:	2b7f      	cmp	r3, #127	; 0x7f
 80033e0:	d914      	bls.n	800340c <create_name+0x2d8>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80033e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80033e4:	2100      	movs	r1, #0
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd fde0 	bl	8000fac <ff_convert>
 80033ec:	4603      	mov	r3, r0
 80033ee:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80033f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d004      	beq.n	8003400 <create_name+0x2cc>
 80033f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80033f8:	3b80      	subs	r3, #128	; 0x80
 80033fa:	4a16      	ldr	r2, [pc, #88]	; (8003454 <create_name+0x320>)
 80033fc:	5cd3      	ldrb	r3, [r2, r3]
 80033fe:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8003400:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003404:	f043 0302 	orr.w	r3, r3, #2
 8003408:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800340c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800340e:	2b00      	cmp	r3, #0
 8003410:	d007      	beq.n	8003422 <create_name+0x2ee>
 8003412:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003414:	4619      	mov	r1, r3
 8003416:	4810      	ldr	r0, [pc, #64]	; (8003458 <create_name+0x324>)
 8003418:	f7fe fd63 	bl	8001ee2 <chk_chr>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d008      	beq.n	8003434 <create_name+0x300>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8003422:	235f      	movs	r3, #95	; 0x5f
 8003424:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003426:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800342a:	f043 0303 	orr.w	r3, r3, #3
 800342e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003432:	e022      	b.n	800347a <create_name+0x346>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8003434:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003436:	2b40      	cmp	r3, #64	; 0x40
 8003438:	d910      	bls.n	800345c <create_name+0x328>
 800343a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800343c:	2b5a      	cmp	r3, #90	; 0x5a
 800343e:	d80d      	bhi.n	800345c <create_name+0x328>
					b |= 2;
 8003440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003444:	f043 0302 	orr.w	r3, r3, #2
 8003448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800344c:	e015      	b.n	800347a <create_name+0x346>
 800344e:	bf00      	nop
 8003450:	08008e70 	.word	0x08008e70
 8003454:	08009444 	.word	0x08009444
 8003458:	08008e7c 	.word	0x08008e7c
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800345c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800345e:	2b60      	cmp	r3, #96	; 0x60
 8003460:	d90b      	bls.n	800347a <create_name+0x346>
 8003462:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003464:	2b7a      	cmp	r3, #122	; 0x7a
 8003466:	d808      	bhi.n	800347a <create_name+0x346>
						b |= 1; w -= 0x20;
 8003468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003474:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003476:	3b20      	subs	r3, #32
 8003478:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699a      	ldr	r2, [r3, #24]
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	1c59      	adds	r1, r3, #1
 8003482:	6239      	str	r1, [r7, #32]
 8003484:	4413      	add	r3, r2
 8003486:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800348c:	e75d      	b.n	800334a <create_name+0x216>
		if (!w) break;					/* Break on end of the LFN */
 800348e:	bf00      	nop
 8003490:	e000      	b.n	8003494 <create_name+0x360>
			if (si > di) break;			/* No extension */
 8003492:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2be5      	cmp	r3, #229	; 0xe5
 800349c:	d103      	bne.n	80034a6 <create_name+0x372>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	2205      	movs	r2, #5
 80034a4:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d104      	bne.n	80034b6 <create_name+0x382>
 80034ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 80034b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034ba:	f003 030c 	and.w	r3, r3, #12
 80034be:	2b0c      	cmp	r3, #12
 80034c0:	d005      	beq.n	80034ce <create_name+0x39a>
 80034c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	2b03      	cmp	r3, #3
 80034cc:	d105      	bne.n	80034da <create_name+0x3a6>
		cf |= NS_LFN;
 80034ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80034d2:	f043 0302 	orr.w	r3, r3, #2
 80034d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80034da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d117      	bne.n	8003516 <create_name+0x3e2>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80034e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d105      	bne.n	80034fe <create_name+0x3ca>
 80034f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80034f6:	f043 0310 	orr.w	r3, r3, #16
 80034fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80034fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003502:	f003 030c 	and.w	r3, r3, #12
 8003506:	2b04      	cmp	r3, #4
 8003508:	d105      	bne.n	8003516 <create_name+0x3e2>
 800350a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800350e:	f043 0308 	orr.w	r3, r3, #8
 8003512:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	330b      	adds	r3, #11
 800351c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003520:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8003522:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8003524:	4618      	mov	r0, r3
 8003526:	3728      	adds	r7, #40	; 0x28
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE *dir, ns;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') {	/* There is a heading separator */
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b2f      	cmp	r3, #47	; 0x2f
 800353c:	d003      	beq.n	8003546 <follow_path+0x1a>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2b5c      	cmp	r3, #92	; 0x5c
 8003544:	d106      	bne.n	8003554 <follow_path+0x28>
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	3301      	adds	r3, #1
 800354a:	603b      	str	r3, [r7, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	609a      	str	r2, [r3, #8]
 8003552:	e004      	b.n	800355e <follow_path+0x32>
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695a      	ldr	r2, [r3, #20]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	609a      	str	r2, [r3, #8]
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
		path++;
	dp->sclust = 0;							/* Always start from the root directory */
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b1f      	cmp	r3, #31
 8003564:	d809      	bhi.n	800357a <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8003566:	2100      	movs	r1, #0
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff f8af 	bl	80026cc <dir_sdi>
 800356e:	4603      	mov	r3, r0
 8003570:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	615a      	str	r2, [r3, #20]
 8003578:	e056      	b.n	8003628 <follow_path+0xfc>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800357a:	463b      	mov	r3, r7
 800357c:	4619      	mov	r1, r3
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7ff fdd8 	bl	8003134 <create_name>
 8003584:	4603      	mov	r3, r0
 8003586:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8003588:	7bfb      	ldrb	r3, [r7, #15]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d147      	bne.n	800361e <follow_path+0xf2>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7ff fc1b 	bl	8002dca <dir_find>
 8003594:	4603      	mov	r3, r0
 8003596:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	7adb      	ldrb	r3, [r3, #11]
 800359e:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d01d      	beq.n	80035e2 <follow_path+0xb6>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80035a6:	7bfb      	ldrb	r3, [r7, #15]
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d13a      	bne.n	8003622 <follow_path+0xf6>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
 80035ac:	7bbb      	ldrb	r3, [r7, #14]
 80035ae:	f003 0320 	and.w	r3, r3, #32
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00d      	beq.n	80035d2 <follow_path+0xa6>
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	609a      	str	r2, [r3, #8]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	615a      	str	r2, [r3, #20]
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80035c2:	7bbb      	ldrb	r3, [r7, #14]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d026      	beq.n	800361a <follow_path+0xee>
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
 80035cc:	2300      	movs	r3, #0
 80035ce:	73fb      	strb	r3, [r7, #15]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 80035d0:	e027      	b.n	8003622 <follow_path+0xf6>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80035d2:	7bbb      	ldrb	r3, [r7, #14]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d122      	bne.n	8003622 <follow_path+0xf6>
 80035dc:	2305      	movs	r3, #5
 80035de:	73fb      	strb	r3, [r7, #15]
				break;
 80035e0:	e01f      	b.n	8003622 <follow_path+0xf6>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80035e2:	7bbb      	ldrb	r3, [r7, #14]
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d11c      	bne.n	8003626 <follow_path+0xfa>
			dir = dp->dir;						/* Follow the sub-directory */
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	330b      	adds	r3, #11
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	f003 0310 	and.w	r3, r3, #16
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d102      	bne.n	8003606 <follow_path+0xda>
				res = FR_NO_PATH; break;
 8003600:	2305      	movs	r3, #5
 8003602:	73fb      	strb	r3, [r7, #15]
 8003604:	e010      	b.n	8003628 <follow_path+0xfc>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68b9      	ldr	r1, [r7, #8]
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff f9f5 	bl	80029fc <ld_clust>
 8003612:	4602      	mov	r2, r0
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	609a      	str	r2, [r3, #8]
 8003618:	e7af      	b.n	800357a <follow_path+0x4e>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800361a:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800361c:	e7ad      	b.n	800357a <follow_path+0x4e>
			if (res != FR_OK) break;
 800361e:	bf00      	nop
 8003620:	e002      	b.n	8003628 <follow_path+0xfc>
				break;
 8003622:	bf00      	nop
 8003624:	e000      	b.n	8003628 <follow_path+0xfc>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003626:	bf00      	nop
		}
	}

	return res;
 8003628:	7bfb      	ldrb	r3, [r7, #15]
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
	...

08003634 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8003634:	b480      	push	{r7}
 8003636:	b089      	sub	sp, #36	; 0x24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800363c:	f04f 33ff 	mov.w	r3, #4294967295
 8003640:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d06f      	beq.n	800372a <get_ldnumber+0xf6>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	61bb      	str	r3, [r7, #24]
 8003650:	e002      	b.n	8003658 <get_ldnumber+0x24>
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	3301      	adds	r3, #1
 8003656:	61bb      	str	r3, [r7, #24]
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b1f      	cmp	r3, #31
 800365e:	d903      	bls.n	8003668 <get_ldnumber+0x34>
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b3a      	cmp	r3, #58	; 0x3a
 8003666:	d1f4      	bne.n	8003652 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	2b3a      	cmp	r3, #58	; 0x3a
 800366e:	d159      	bne.n	8003724 <get_ldnumber+0xf0>
			tp = *path;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	61fb      	str	r3, [r7, #28]
			i = *tp++ - '0'; 
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	61fa      	str	r2, [r7, #28]
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	3b30      	subs	r3, #48	; 0x30
 8003680:	617b      	str	r3, [r7, #20]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2b09      	cmp	r3, #9
 8003686:	d80f      	bhi.n	80036a8 <get_ldnumber+0x74>
 8003688:	69fa      	ldr	r2, [r7, #28]
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	429a      	cmp	r2, r3
 800368e:	d10b      	bne.n	80036a8 <get_ldnumber+0x74>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	2b08      	cmp	r3, #8
 8003694:	d844      	bhi.n	8003720 <get_ldnumber+0xec>
					vol = (int)i;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	3301      	adds	r3, #1
 800369e:	61bb      	str	r3, [r7, #24]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	601a      	str	r2, [r3, #0]
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80036a6:	e03b      	b.n	8003720 <get_ldnumber+0xec>
				}
			}
#if _STR_VOLUME_ID
			 else {	/* No numeric drive number, find string drive id */
				i = 0; tt++;
 80036a8:	2300      	movs	r3, #0
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	3301      	adds	r3, #1
 80036b0:	61bb      	str	r3, [r7, #24]
				do {
					sp = str[i]; tp = *path;
 80036b2:	4a21      	ldr	r2, [pc, #132]	; (8003738 <get_ldnumber+0x104>)
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	61fb      	str	r3, [r7, #28]
					do {	/* Compare a string drive id with path name */
						c = *sp++; tc = *tp++;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	60fa      	str	r2, [r7, #12]
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	72bb      	strb	r3, [r7, #10]
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	1c5a      	adds	r2, r3, #1
 80036d0:	61fa      	str	r2, [r7, #28]
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	72fb      	strb	r3, [r7, #11]
						if (IsLower(tc)) tc -= 0x20;
 80036d6:	7afb      	ldrb	r3, [r7, #11]
 80036d8:	2b60      	cmp	r3, #96	; 0x60
 80036da:	d905      	bls.n	80036e8 <get_ldnumber+0xb4>
 80036dc:	7afb      	ldrb	r3, [r7, #11]
 80036de:	2b7a      	cmp	r3, #122	; 0x7a
 80036e0:	d802      	bhi.n	80036e8 <get_ldnumber+0xb4>
 80036e2:	7afb      	ldrb	r3, [r7, #11]
 80036e4:	3b20      	subs	r3, #32
 80036e6:	72fb      	strb	r3, [r7, #11]
					} while (c && (TCHAR)c == tc);
 80036e8:	7abb      	ldrb	r3, [r7, #10]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <get_ldnumber+0xc2>
 80036ee:	7aba      	ldrb	r2, [r7, #10]
 80036f0:	7afb      	ldrb	r3, [r7, #11]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d0e5      	beq.n	80036c2 <get_ldnumber+0x8e>
				} while ((c || tp != tt) && ++i < _VOLUMES);	/* Repeat for each id until pattern match */
 80036f6:	7abb      	ldrb	r3, [r7, #10]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d103      	bne.n	8003704 <get_ldnumber+0xd0>
 80036fc:	69fa      	ldr	r2, [r7, #28]
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	429a      	cmp	r2, r3
 8003702:	d005      	beq.n	8003710 <get_ldnumber+0xdc>
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	3301      	adds	r3, #1
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	2b08      	cmp	r3, #8
 800370e:	d9d0      	bls.n	80036b2 <get_ldnumber+0x7e>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	2b08      	cmp	r3, #8
 8003714:	d804      	bhi.n	8003720 <get_ldnumber+0xec>
					vol = (int)i;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	613b      	str	r3, [r7, #16]
					*path = tt;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	601a      	str	r2, [r3, #0]
				}
			}
#endif
			return vol;
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	e003      	b.n	800372c <get_ldnumber+0xf8>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
 8003724:	4b05      	ldr	r3, [pc, #20]	; (800373c <get_ldnumber+0x108>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	613b      	str	r3, [r7, #16]
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
 800372a:	693b      	ldr	r3, [r7, #16]
}
 800372c:	4618      	mov	r0, r3
 800372e:	3724      	adds	r7, #36	; 0x24
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	080094d4 	.word	0x080094d4
 800373c:	2000031e 	.word	0x2000031e

08003740 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	711a      	strb	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f04f 32ff 	mov.w	r2, #4294967295
 8003756:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8003758:	6839      	ldr	r1, [r7, #0]
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7fe fc20 	bl	8001fa0 <move_window>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <check_fs+0x2a>
		return 3;
 8003766:	2303      	movs	r3, #3
 8003768:	e04a      	b.n	8003800 <check_fs+0xc0>

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f203 2332 	addw	r3, r3, #562	; 0x232
 8003770:	3301      	adds	r3, #1
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	021b      	lsls	r3, r3, #8
 8003776:	b21a      	sxth	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 3232 	ldrb.w	r3, [r3, #562]	; 0x232
 800377e:	b21b      	sxth	r3, r3
 8003780:	4313      	orrs	r3, r2
 8003782:	b21b      	sxth	r3, r3
 8003784:	4a20      	ldr	r2, [pc, #128]	; (8003808 <check_fs+0xc8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d001      	beq.n	800378e <check_fs+0x4e>
		return 2;
 800378a:	2302      	movs	r3, #2
 800378c:	e038      	b.n	8003800 <check_fs+0xc0>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	336a      	adds	r3, #106	; 0x6a
 8003792:	3303      	adds	r3, #3
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	061a      	lsls	r2, r3, #24
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	336a      	adds	r3, #106	; 0x6a
 800379c:	3302      	adds	r3, #2
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	041b      	lsls	r3, r3, #16
 80037a2:	4313      	orrs	r3, r2
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	326a      	adds	r2, #106	; 0x6a
 80037a8:	3201      	adds	r2, #1
 80037aa:	7812      	ldrb	r2, [r2, #0]
 80037ac:	0212      	lsls	r2, r2, #8
 80037ae:	4313      	orrs	r3, r2
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
 80037b6:	4313      	orrs	r3, r2
 80037b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80037bc:	4a13      	ldr	r2, [pc, #76]	; (800380c <check_fs+0xcc>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d101      	bne.n	80037c6 <check_fs+0x86>
		return 0;
 80037c2:	2300      	movs	r3, #0
 80037c4:	e01c      	b.n	8003800 <check_fs+0xc0>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	3386      	adds	r3, #134	; 0x86
 80037ca:	3303      	adds	r3, #3
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	061a      	lsls	r2, r3, #24
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3386      	adds	r3, #134	; 0x86
 80037d4:	3302      	adds	r3, #2
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	041b      	lsls	r3, r3, #16
 80037da:	4313      	orrs	r3, r2
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	3286      	adds	r2, #134	; 0x86
 80037e0:	3201      	adds	r2, #1
 80037e2:	7812      	ldrb	r2, [r2, #0]
 80037e4:	0212      	lsls	r2, r2, #8
 80037e6:	4313      	orrs	r3, r2
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80037f4:	4a05      	ldr	r2, [pc, #20]	; (800380c <check_fs+0xcc>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d101      	bne.n	80037fe <check_fs+0xbe>
		return 0;
 80037fa:	2300      	movs	r3, #0
 80037fc:	e000      	b.n	8003800 <check_fs+0xc0>

	return 1;
 80037fe:	2301      	movs	r3, #1
}
 8003800:	4618      	mov	r0, r3
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	ffffaa55 	.word	0xffffaa55
 800380c:	00544146 	.word	0x00544146

08003810 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b096      	sub	sp, #88	; 0x58
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	4613      	mov	r3, r2
 800381c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8003824:	68b8      	ldr	r0, [r7, #8]
 8003826:	f7ff ff05 	bl	8003634 <get_ldnumber>
 800382a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800382c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800382e:	2b00      	cmp	r3, #0
 8003830:	da01      	bge.n	8003836 <find_volume+0x26>
 8003832:	230b      	movs	r3, #11
 8003834:	e293      	b.n	8003d5e <find_volume+0x54e>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8003836:	4a9b      	ldr	r2, [pc, #620]	; (8003aa4 <find_volume+0x294>)
 8003838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800383a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800383e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8003840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <find_volume+0x3a>
 8003846:	230c      	movs	r3, #12
 8003848:	e289      	b.n	8003d5e <find_volume+0x54e>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800384e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8003850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d01a      	beq.n	800388e <find_volume+0x7e>
		stat = disk_status(fs->drv);
 8003858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385a:	785b      	ldrb	r3, [r3, #1]
 800385c:	4618      	mov	r0, r3
 800385e:	f7fd fc31 	bl	80010c4 <disk_status>
 8003862:	4603      	mov	r3, r0
 8003864:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8003868:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10c      	bne.n	800388e <find_volume+0x7e>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8003874:	79fb      	ldrb	r3, [r7, #7]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d007      	beq.n	800388a <find_volume+0x7a>
 800387a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800387e:	f003 0304 	and.w	r3, r3, #4
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <find_volume+0x7a>
				return FR_WRITE_PROTECTED;
 8003886:	230a      	movs	r3, #10
 8003888:	e269      	b.n	8003d5e <find_volume+0x54e>
			return FR_OK;				/* The file system object is valid */
 800388a:	2300      	movs	r3, #0
 800388c:	e267      	b.n	8003d5e <find_volume+0x54e>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800388e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003890:	2200      	movs	r2, #0
 8003892:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8003894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003896:	b2da      	uxtb	r2, r3
 8003898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800389a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800389c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800389e:	785b      	ldrb	r3, [r3, #1]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7fd fbed 	bl	8001080 <disk_initialize>
 80038a6:	4603      	mov	r3, r0
 80038a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80038ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <find_volume+0xac>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80038b8:	2303      	movs	r3, #3
 80038ba:	e250      	b.n	8003d5e <find_volume+0x54e>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80038bc:	79fb      	ldrb	r3, [r7, #7]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d007      	beq.n	80038d2 <find_volume+0xc2>
 80038c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <find_volume+0xc2>
		return FR_WRITE_PROTECTED;
 80038ce:	230a      	movs	r3, #10
 80038d0:	e245      	b.n	8003d5e <find_volume+0x54e>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80038d2:	2300      	movs	r3, #0
 80038d4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80038d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80038d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80038da:	f7ff ff31 	bl	8003740 <check_fs>
 80038de:	4603      	mov	r3, r0
 80038e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80038e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d157      	bne.n	800399c <find_volume+0x18c>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80038ec:	2300      	movs	r3, #0
 80038ee:	643b      	str	r3, [r7, #64]	; 0x40
 80038f0:	e02b      	b.n	800394a <find_volume+0x13a>
			pt = fs->win + MBR_Table + i * SZ_PTE;
 80038f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80038f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8003900:	4413      	add	r3, r2
 8003902:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8003904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003906:	3304      	adds	r3, #4
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d012      	beq.n	8003934 <find_volume+0x124>
 800390e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003910:	330b      	adds	r3, #11
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	061a      	lsls	r2, r3, #24
 8003916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003918:	330a      	adds	r3, #10
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	041b      	lsls	r3, r3, #16
 800391e:	4313      	orrs	r3, r2
 8003920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003922:	3209      	adds	r2, #9
 8003924:	7812      	ldrb	r2, [r2, #0]
 8003926:	0212      	lsls	r2, r2, #8
 8003928:	4313      	orrs	r3, r2
 800392a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800392c:	3208      	adds	r2, #8
 800392e:	7812      	ldrb	r2, [r2, #0]
 8003930:	431a      	orrs	r2, r3
 8003932:	e000      	b.n	8003936 <find_volume+0x126>
 8003934:	2200      	movs	r2, #0
 8003936:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800393e:	440b      	add	r3, r1
 8003940:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8003944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003946:	3301      	adds	r3, #1
 8003948:	643b      	str	r3, [r7, #64]	; 0x40
 800394a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800394c:	2b03      	cmp	r3, #3
 800394e:	d9d0      	bls.n	80038f2 <find_volume+0xe2>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8003950:	2300      	movs	r3, #0
 8003952:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8003954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003956:	2b00      	cmp	r3, #0
 8003958:	d002      	beq.n	8003960 <find_volume+0x150>
 800395a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800395c:	3b01      	subs	r3, #1
 800395e:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8003960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003968:	4413      	add	r3, r2
 800396a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800396e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8003970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003972:	2b00      	cmp	r3, #0
 8003974:	d005      	beq.n	8003982 <find_volume+0x172>
 8003976:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003978:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800397a:	f7ff fee1 	bl	8003740 <check_fs>
 800397e:	4603      	mov	r3, r0
 8003980:	e000      	b.n	8003984 <find_volume+0x174>
 8003982:	2302      	movs	r3, #2
 8003984:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8003988:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800398c:	2b00      	cmp	r3, #0
 800398e:	d005      	beq.n	800399c <find_volume+0x18c>
 8003990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003992:	3301      	adds	r3, #1
 8003994:	643b      	str	r3, [r7, #64]	; 0x40
 8003996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003998:	2b03      	cmp	r3, #3
 800399a:	d9e1      	bls.n	8003960 <find_volume+0x150>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800399c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	d101      	bne.n	80039a8 <find_volume+0x198>
 80039a4:	2301      	movs	r3, #1
 80039a6:	e1da      	b.n	8003d5e <find_volume+0x54e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80039a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <find_volume+0x1a4>
 80039b0:	230d      	movs	r3, #13
 80039b2:	e1d4      	b.n	8003d5e <find_volume+0x54e>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80039b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039ba:	021b      	lsls	r3, r3, #8
 80039bc:	b21a      	sxth	r2, r3
 80039be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039c4:	b21b      	sxth	r3, r3
 80039c6:	4313      	orrs	r3, r2
 80039c8:	b21b      	sxth	r3, r3
 80039ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039ce:	d001      	beq.n	80039d4 <find_volume+0x1c4>
		return FR_NO_FILESYSTEM;
 80039d0:	230d      	movs	r3, #13
 80039d2:	e1c4      	b.n	8003d5e <find_volume+0x54e>

	fasize = LD_WORD(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
 80039d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d6:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80039da:	021b      	lsls	r3, r3, #8
 80039dc:	b21a      	sxth	r2, r3
 80039de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e0:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80039e4:	b21b      	sxth	r3, r3
 80039e6:	4313      	orrs	r3, r2
 80039e8:	b21b      	sxth	r3, r3
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
 80039ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d112      	bne.n	8003a1a <find_volume+0x20a>
 80039f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f6:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 80039fa:	061a      	lsls	r2, r3, #24
 80039fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fe:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8003a02:	041b      	lsls	r3, r3, #16
 8003a04:	4313      	orrs	r3, r2
 8003a06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a08:	f892 2059 	ldrb.w	r2, [r2, #89]	; 0x59
 8003a0c:	0212      	lsls	r2, r2, #8
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a12:	f892 2058 	ldrb.w	r2, [r2, #88]	; 0x58
 8003a16:	4313      	orrs	r3, r2
 8003a18:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8003a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a1e:	61da      	str	r2, [r3, #28]

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 8003a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a22:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8003a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a28:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8003a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a2c:	78db      	ldrb	r3, [r3, #3]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d005      	beq.n	8003a3e <find_volume+0x22e>
 8003a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a34:	78db      	ldrb	r3, [r3, #3]
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d001      	beq.n	8003a3e <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 8003a3a:	230d      	movs	r3, #13
 8003a3c:	e18f      	b.n	8003d5e <find_volume+0x54e>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8003a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a40:	78db      	ldrb	r3, [r3, #3]
 8003a42:	461a      	mov	r2, r3
 8003a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a46:	fb02 f303 	mul.w	r3, r2, r3
 8003a4a:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
 8003a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8003a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a54:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8003a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a58:	789b      	ldrb	r3, [r3, #2]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d008      	beq.n	8003a70 <find_volume+0x260>
 8003a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a60:	789b      	ldrb	r3, [r3, #2]
 8003a62:	461a      	mov	r2, r3
 8003a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a66:	789b      	ldrb	r3, [r3, #2]
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <find_volume+0x264>
		return FR_NO_FILESYSTEM;
 8003a70:	230d      	movs	r3, #13
 8003a72:	e174      	b.n	8003d5e <find_volume+0x54e>

	fs->n_rootdir = LD_WORD(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8003a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a76:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003a7a:	021b      	lsls	r3, r3, #8
 8003a7c:	b21a      	sxth	r2, r3
 8003a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a84:	b21b      	sxth	r3, r3
 8003a86:	4313      	orrs	r3, r2
 8003a88:	b21b      	sxth	r3, r3
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8e:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8003a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a92:	891b      	ldrh	r3, [r3, #8]
 8003a94:	f003 030f 	and.w	r3, r3, #15
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d004      	beq.n	8003aa8 <find_volume+0x298>
		return FR_NO_FILESYSTEM;
 8003a9e:	230d      	movs	r3, #13
 8003aa0:	e15d      	b.n	8003d5e <find_volume+0x54e>
 8003aa2:	bf00      	nop
 8003aa4:	200002f8 	.word	0x200002f8

	tsect = LD_WORD(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
 8003aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aaa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003aae:	021b      	lsls	r3, r3, #8
 8003ab0:	b21a      	sxth	r2, r3
 8003ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab4:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003ab8:	b21b      	sxth	r3, r3
 8003aba:	4313      	orrs	r3, r2
 8003abc:	b21b      	sxth	r3, r3
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win + BPB_TotSec32);
 8003ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d112      	bne.n	8003aee <find_volume+0x2de>
 8003ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aca:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8003ace:	061a      	lsls	r2, r3, #24
 8003ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003ad6:	041b      	lsls	r3, r3, #16
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003adc:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003ae0:	0212      	lsls	r2, r2, #8
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ae6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003aea:	4313      	orrs	r3, r2
 8003aec:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8003aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003af4:	021b      	lsls	r3, r3, #8
 8003af6:	b21a      	sxth	r2, r3
 8003af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003afa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003afe:	b21b      	sxth	r3, r3
 8003b00:	4313      	orrs	r3, r2
 8003b02:	b21b      	sxth	r3, r3
 8003b04:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8003b06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <find_volume+0x300>
 8003b0c:	230d      	movs	r3, #13
 8003b0e:	e126      	b.n	8003d5e <find_volume+0x54e>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8003b10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b14:	4413      	add	r3, r2
 8003b16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b18:	8912      	ldrh	r2, [r2, #8]
 8003b1a:	0912      	lsrs	r2, r2, #4
 8003b1c:	b292      	uxth	r2, r2
 8003b1e:	4413      	add	r3, r2
 8003b20:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003b22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d201      	bcs.n	8003b2e <find_volume+0x31e>
 8003b2a:	230d      	movs	r3, #13
 8003b2c:	e117      	b.n	8003d5e <find_volume+0x54e>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8003b2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b36:	7892      	ldrb	r2, [r2, #2]
 8003b38:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <find_volume+0x338>
 8003b44:	230d      	movs	r3, #13
 8003b46:	e10a      	b.n	8003d5e <find_volume+0x54e>
	fmt = FS_FAT12;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	f640 72f5 	movw	r2, #4085	; 0xff5
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d902      	bls.n	8003b5e <find_volume+0x34e>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d902      	bls.n	8003b6e <find_volume+0x35e>
 8003b68:	2303      	movs	r3, #3
 8003b6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	1c9a      	adds	r2, r3, #2
 8003b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b74:	619a      	str	r2, [r3, #24]
	fs->volbase = bsect;								/* Volume start sector */
 8003b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003b7a:	621a      	str	r2, [r3, #32]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8003b7c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b80:	441a      	add	r2, r3
 8003b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b84:	625a      	str	r2, [r3, #36]	; 0x24
	fs->database = bsect + sysect;						/* Data start sector */
 8003b86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8a:	441a      	add	r2, r3
 8003b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (fmt == FS_FAT32) {
 8003b90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003b94:	2b03      	cmp	r3, #3
 8003b96:	d11e      	bne.n	8003bd6 <find_volume+0x3c6>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8003b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9a:	891b      	ldrh	r3, [r3, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <find_volume+0x394>
 8003ba0:	230d      	movs	r3, #13
 8003ba2:	e0dc      	b.n	8003d5e <find_volume+0x54e>
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
 8003ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba6:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8003baa:	061a      	lsls	r2, r3, #24
 8003bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bae:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003bb2:	041b      	lsls	r3, r3, #16
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bb8:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
 8003bbc:	0212      	lsls	r2, r2, #8
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bc2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bca:	629a      	str	r2, [r3, #40]	; 0x28
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8003bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	647b      	str	r3, [r7, #68]	; 0x44
 8003bd4:	e01f      	b.n	8003c16 <find_volume+0x406>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8003bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd8:	891b      	ldrh	r3, [r3, #8]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <find_volume+0x3d2>
 8003bde:	230d      	movs	r3, #13
 8003be0:	e0bd      	b.n	8003d5e <find_volume+0x54e>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8003be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003be8:	441a      	add	r2, r3
 8003bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bec:	629a      	str	r2, [r3, #40]	; 0x28
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003bee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d103      	bne.n	8003bfe <find_volume+0x3ee>
 8003bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	e00a      	b.n	8003c14 <find_volume+0x404>
 8003bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c00:	699a      	ldr	r2, [r3, #24]
 8003c02:	4613      	mov	r3, r2
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	4413      	add	r3, r2
 8003c08:	085a      	lsrs	r2, r3, #1
 8003c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8003c14:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8003c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c18:	69da      	ldr	r2, [r3, #28]
 8003c1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c1c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003c20:	0a5b      	lsrs	r3, r3, #9
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d201      	bcs.n	8003c2a <find_volume+0x41a>
		return FR_NO_FILESYSTEM;
 8003c26:	230d      	movs	r3, #13
 8003c28:	e099      	b.n	8003d5e <find_volume+0x54e>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8003c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c30:	611a      	str	r2, [r3, #16]
 8003c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c34:	691a      	ldr	r2, [r3, #16]
 8003c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c38:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8003c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c3c:	2280      	movs	r2, #128	; 0x80
 8003c3e:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8003c40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003c44:	2b03      	cmp	r3, #3
 8003c46:	d178      	bne.n	8003d3a <find_volume+0x52a>
		&& LD_WORD(fs->win + BPB_FSInfo) == 1
 8003c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4a:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8003c4e:	021b      	lsls	r3, r3, #8
 8003c50:	b21a      	sxth	r2, r3
 8003c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c54:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8003c58:	b21b      	sxth	r3, r3
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	b21b      	sxth	r3, r3
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d16b      	bne.n	8003d3a <find_volume+0x52a>
		&& move_window(fs, bsect + 1) == FR_OK)
 8003c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c64:	3301      	adds	r3, #1
 8003c66:	4619      	mov	r1, r3
 8003c68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003c6a:	f7fe f999 	bl	8001fa0 <move_window>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d162      	bne.n	8003d3a <find_volume+0x52a>
	{
		fs->fsi_flag = 0;
 8003c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c76:	2200      	movs	r2, #0
 8003c78:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8003c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7c:	f893 3233 	ldrb.w	r3, [r3, #563]	; 0x233
 8003c80:	021b      	lsls	r3, r3, #8
 8003c82:	b21a      	sxth	r2, r3
 8003c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c86:	f893 3232 	ldrb.w	r3, [r3, #562]	; 0x232
 8003c8a:	b21b      	sxth	r3, r3
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	b21b      	sxth	r3, r3
 8003c90:	4a35      	ldr	r2, [pc, #212]	; (8003d68 <find_volume+0x558>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d151      	bne.n	8003d3a <find_volume+0x52a>
			&& LD_DWORD(fs->win + FSI_LeadSig) == 0x41615252
 8003c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c98:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003c9c:	061a      	lsls	r2, r3, #24
 8003c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003ca4:	041b      	lsls	r3, r3, #16
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003caa:	f892 2035 	ldrb.w	r2, [r2, #53]	; 0x35
 8003cae:	0212      	lsls	r2, r2, #8
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cb4:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	4a2c      	ldr	r2, [pc, #176]	; (8003d6c <find_volume+0x55c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d13c      	bne.n	8003d3a <find_volume+0x52a>
			&& LD_DWORD(fs->win + FSI_StrucSig) == 0x61417272)
 8003cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc2:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8003cc6:	061a      	lsls	r2, r3, #24
 8003cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cca:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 8003cce:	041b      	lsls	r3, r3, #16
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cd4:	f892 2219 	ldrb.w	r2, [r2, #537]	; 0x219
 8003cd8:	0212      	lsls	r2, r2, #8
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cde:	f892 2218 	ldrb.w	r2, [r2, #536]	; 0x218
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	4a22      	ldr	r2, [pc, #136]	; (8003d70 <find_volume+0x560>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d127      	bne.n	8003d3a <find_volume+0x52a>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win + FSI_Free_Count);
 8003cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cec:	f893 321f 	ldrb.w	r3, [r3, #543]	; 0x21f
 8003cf0:	061a      	lsls	r2, r3, #24
 8003cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf4:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8003cf8:	041b      	lsls	r3, r3, #16
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cfe:	f892 221d 	ldrb.w	r2, [r2, #541]	; 0x21d
 8003d02:	0212      	lsls	r2, r2, #8
 8003d04:	4313      	orrs	r3, r2
 8003d06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d08:	f892 221c 	ldrb.w	r2, [r2, #540]	; 0x21c
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d10:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win + FSI_Nxt_Free);
 8003d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d14:	f893 3223 	ldrb.w	r3, [r3, #547]	; 0x223
 8003d18:	061a      	lsls	r2, r3, #24
 8003d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1c:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
 8003d20:	041b      	lsls	r3, r3, #16
 8003d22:	4313      	orrs	r3, r2
 8003d24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d26:	f892 2221 	ldrb.w	r2, [r2, #545]	; 0x221
 8003d2a:	0212      	lsls	r2, r2, #8
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d30:	f892 2220 	ldrb.w	r2, [r2, #544]	; 0x220
 8003d34:	431a      	orrs	r2, r3
 8003d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d38:	60da      	str	r2, [r3, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8003d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003d40:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8003d42:	4b0c      	ldr	r3, [pc, #48]	; (8003d74 <find_volume+0x564>)
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	3301      	adds	r3, #1
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	4b0a      	ldr	r3, [pc, #40]	; (8003d74 <find_volume+0x564>)
 8003d4c:	801a      	strh	r2, [r3, #0]
 8003d4e:	4b09      	ldr	r3, [pc, #36]	; (8003d74 <find_volume+0x564>)
 8003d50:	881a      	ldrh	r2, [r3, #0]
 8003d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d54:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
 8003d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d58:	2200      	movs	r2, #0
 8003d5a:	615a      	str	r2, [r3, #20]
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3758      	adds	r7, #88	; 0x58
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	ffffaa55 	.word	0xffffaa55
 8003d6c:	41615252 	.word	0x41615252
 8003d70:	61417272 	.word	0x61417272
 8003d74:	2000031c 	.word	0x2000031c

08003d78 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00f      	beq.n	8003daa <validate+0x32>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00b      	beq.n	8003daa <validate+0x32>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d006      	beq.n	8003daa <validate+0x32>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	88da      	ldrh	r2, [r3, #6]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	889b      	ldrh	r3, [r3, #4]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d001      	beq.n	8003dae <validate+0x36>
		return FR_INVALID_OBJECT;
 8003daa:	2309      	movs	r3, #9
 8003dac:	e00d      	b.n	8003dca <validate+0x52>

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	785b      	ldrb	r3, [r3, #1]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fd f985 	bl	80010c4 <disk_status>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <validate+0x50>
		return FR_NOT_READY;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e000      	b.n	8003dca <validate+0x52>

	return FR_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
	...

08003dd4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b088      	sub	sp, #32
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	4613      	mov	r3, r2
 8003de0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8003de6:	f107 0310 	add.w	r3, r7, #16
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7ff fc22 	bl	8003634 <get_ldnumber>
 8003df0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	da01      	bge.n	8003dfc <f_mount+0x28>
 8003df8:	230b      	movs	r3, #11
 8003dfa:	e028      	b.n	8003e4e <f_mount+0x7a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8003dfc:	4a16      	ldr	r2, [pc, #88]	; (8003e58 <f_mount+0x84>)
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e04:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d002      	beq.n	8003e12 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d002      	beq.n	8003e1e <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	490d      	ldr	r1, [pc, #52]	; (8003e58 <f_mount+0x84>)
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <f_mount+0x60>
 8003e2e:	79fb      	ldrb	r3, [r7, #7]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d001      	beq.n	8003e38 <f_mount+0x64>
 8003e34:	2300      	movs	r3, #0
 8003e36:	e00a      	b.n	8003e4e <f_mount+0x7a>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8003e38:	f107 0108 	add.w	r1, r7, #8
 8003e3c:	f107 030c 	add.w	r3, r7, #12
 8003e40:	2200      	movs	r2, #0
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7ff fce4 	bl	8003810 <find_volume>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8003e4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3720      	adds	r7, #32
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	200002f8 	.word	0x200002f8

08003e5c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b096      	sub	sp, #88	; 0x58
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	4613      	mov	r3, r2
 8003e68:	71fb      	strb	r3, [r7, #7]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d101      	bne.n	8003e74 <f_open+0x18>
 8003e70:	2309      	movs	r3, #9
 8003e72:	e13e      	b.n	80040f2 <f_open+0x296>
	fp->fs = 0;			/* Clear file object */
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8003e7a:	79fb      	ldrb	r3, [r7, #7]
 8003e7c:	f003 031f 	and.w	r3, r3, #31
 8003e80:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8003e82:	79fb      	ldrb	r3, [r7, #7]
 8003e84:	f023 0301 	bic.w	r3, r3, #1
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	f107 0108 	add.w	r1, r7, #8
 8003e8e:	f107 031c 	add.w	r3, r7, #28
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7ff fcbc 	bl	8003810 <find_volume>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8003e9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f040 8123 	bne.w	80040ee <f_open+0x292>
		INIT_BUF(dj);
 8003ea8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003eac:	f000 fbcc 	bl	8004648 <ff_memalloc>
 8003eb0:	64f8      	str	r0, [r7, #76]	; 0x4c
 8003eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <f_open+0x60>
 8003eb8:	2311      	movs	r3, #17
 8003eba:	e11a      	b.n	80040f2 <f_open+0x296>
 8003ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ebe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ec0:	f107 0310 	add.w	r3, r7, #16
 8003ec4:	637b      	str	r3, [r7, #52]	; 0x34
		res = follow_path(&dj, path);	/* Follow the file path */
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	f107 031c 	add.w	r3, r7, #28
 8003ecc:	4611      	mov	r1, r2
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff fb2c 	bl	800352c <follow_path>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		dir = dj.dir;
 8003eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003edc:	653b      	str	r3, [r7, #80]	; 0x50
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8003ede:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d105      	bne.n	8003ef2 <f_open+0x96>
			if (!dir)	/* Default directory itself */
 8003ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d102      	bne.n	8003ef2 <f_open+0x96>
				res = FR_INVALID_NAME;
 8003eec:	2306      	movs	r3, #6
 8003eee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8003ef2:	79fb      	ldrb	r3, [r7, #7]
 8003ef4:	f003 031c 	and.w	r3, r3, #28
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 808f 	beq.w	800401c <f_open+0x1c0>
			if (res != FR_OK) {					/* No file, create new */
 8003efe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d012      	beq.n	8003f2c <f_open+0xd0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8003f06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d107      	bne.n	8003f1e <f_open+0xc2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8003f0e:	f107 031c 	add.w	r3, r7, #28
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff f80e 	bl	8002f34 <dir_register>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8003f1e:	79fb      	ldrb	r3, [r7, #7]
 8003f20:	f043 0308 	orr.w	r3, r3, #8
 8003f24:	71fb      	strb	r3, [r7, #7]
				dir = dj.dir;					/* New entry */
 8003f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f28:	653b      	str	r3, [r7, #80]	; 0x50
 8003f2a:	e012      	b.n	8003f52 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8003f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f2e:	330b      	adds	r3, #11
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	f003 0311 	and.w	r3, r3, #17
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <f_open+0xe6>
					res = FR_DENIED;
 8003f3a:	2307      	movs	r3, #7
 8003f3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8003f40:	e007      	b.n	8003f52 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8003f42:	79fb      	ldrb	r3, [r7, #7]
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d002      	beq.n	8003f52 <f_open+0xf6>
						res = FR_EXIST;
 8003f4c:	2308      	movs	r3, #8
 8003f4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8003f52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d17e      	bne.n	8004058 <f_open+0x1fc>
 8003f5a:	79fb      	ldrb	r3, [r7, #7]
 8003f5c:	f003 0308 	and.w	r3, r3, #8
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d079      	beq.n	8004058 <f_open+0x1fc>
				dw = GET_FATTIME();				/* Created time */
 8003f64:	f7fd f958 	bl	8001218 <get_fattime>
 8003f68:	64b8      	str	r0, [r7, #72]	; 0x48
				ST_DWORD(dir + DIR_CrtTime, dw);
 8003f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f6c:	330e      	adds	r3, #14
 8003f6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f70:	b2d2      	uxtb	r2, r2
 8003f72:	701a      	strb	r2, [r3, #0]
 8003f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f76:	330f      	adds	r3, #15
 8003f78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f7a:	b292      	uxth	r2, r2
 8003f7c:	0a12      	lsrs	r2, r2, #8
 8003f7e:	b292      	uxth	r2, r2
 8003f80:	b2d2      	uxtb	r2, r2
 8003f82:	701a      	strb	r2, [r3, #0]
 8003f84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f86:	3310      	adds	r3, #16
 8003f88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f8a:	0c12      	lsrs	r2, r2, #16
 8003f8c:	b2d2      	uxtb	r2, r2
 8003f8e:	701a      	strb	r2, [r3, #0]
 8003f90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f92:	3311      	adds	r3, #17
 8003f94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f96:	0e12      	lsrs	r2, r2, #24
 8003f98:	b2d2      	uxtb	r2, r2
 8003f9a:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8003f9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f9e:	330b      	adds	r3, #11
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8003fa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fa6:	331c      	adds	r3, #28
 8003fa8:	2200      	movs	r2, #0
 8003faa:	701a      	strb	r2, [r3, #0]
 8003fac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fae:	331d      	adds	r3, #29
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	701a      	strb	r2, [r3, #0]
 8003fb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fb6:	331e      	adds	r3, #30
 8003fb8:	2200      	movs	r2, #0
 8003fba:	701a      	strb	r2, [r3, #0]
 8003fbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fbe:	331f      	adds	r3, #31
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7fe fd17 	bl	80029fc <ld_clust>
 8003fce:	6478      	str	r0, [r7, #68]	; 0x44
				st_clust(dir, 0);				/* cluster = 0 */
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003fd4:	f7fe fd3f 	bl	8002a56 <st_clust>
				dj.fs->wflag = 1;
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8003fde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d039      	beq.n	8004058 <f_open+0x1fc>
					dw = dj.fs->winsect;
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe8:	64bb      	str	r3, [r7, #72]	; 0x48
					res = remove_chain(dj.fs, cl);
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fe fa86 	bl	8002500 <remove_chain>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res == FR_OK) {
 8003ffa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d12a      	bne.n	8004058 <f_open+0x1fc>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004006:	3a01      	subs	r2, #1
 8004008:	60da      	str	r2, [r3, #12]
						res = move_window(dj.fs, dw);
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800400e:	4618      	mov	r0, r3
 8004010:	f7fd ffc6 	bl	8001fa0 <move_window>
 8004014:	4603      	mov	r3, r0
 8004016:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800401a:	e01d      	b.n	8004058 <f_open+0x1fc>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800401c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004020:	2b00      	cmp	r3, #0
 8004022:	d119      	bne.n	8004058 <f_open+0x1fc>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8004024:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004026:	330b      	adds	r3, #11
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	f003 0310 	and.w	r3, r3, #16
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <f_open+0x1de>
					res = FR_NO_FILE;
 8004032:	2304      	movs	r3, #4
 8004034:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8004038:	e00e      	b.n	8004058 <f_open+0x1fc>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800403a:	79fb      	ldrb	r3, [r7, #7]
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d009      	beq.n	8004058 <f_open+0x1fc>
 8004044:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004046:	330b      	adds	r3, #11
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d002      	beq.n	8004058 <f_open+0x1fc>
						res = FR_DENIED;
 8004052:	2307      	movs	r3, #7
 8004054:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				}
			}
		}
		if (res == FR_OK) {
 8004058:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10f      	bne.n	8004080 <f_open+0x224>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004060:	79fb      	ldrb	r3, [r7, #7]
 8004062:	f003 0308 	and.w	r3, r3, #8
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <f_open+0x216>
				mode |= FA__WRITTEN;
 800406a:	79fb      	ldrb	r3, [r7, #7]
 800406c:	f043 0320 	orr.w	r3, r3, #32
 8004070:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	61da      	str	r2, [r3, #28]
			fp->dir_ptr = dir;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800407e:	621a      	str	r2, [r3, #32]
				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
					res = FR_NO_FILE;
			}
		}
#endif
		FREE_BUF();
 8004080:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004082:	f000 faed 	bl	8004660 <ff_memfree>

		if (res == FR_OK) {
 8004086:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800408a:	2b00      	cmp	r3, #0
 800408c:	d12f      	bne.n	80040ee <f_open+0x292>
			fp->flag = mode;					/* File access mode */
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	79fa      	ldrb	r2, [r7, #7]
 8004092:	719a      	strb	r2, [r3, #6]
			fp->err = 0;						/* Clear error flag */
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fe fcac 	bl	80029fc <ld_clust>
 80040a4:	4602      	mov	r2, r0
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80040aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040ac:	331f      	adds	r3, #31
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	061a      	lsls	r2, r3, #24
 80040b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040b4:	331e      	adds	r3, #30
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	041b      	lsls	r3, r3, #16
 80040ba:	4313      	orrs	r3, r2
 80040bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80040be:	321d      	adds	r2, #29
 80040c0:	7812      	ldrb	r2, [r2, #0]
 80040c2:	0212      	lsls	r2, r2, #8
 80040c4:	4313      	orrs	r3, r2
 80040c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80040c8:	321c      	adds	r2, #28
 80040ca:	7812      	ldrb	r2, [r2, #0]
 80040cc:	431a      	orrs	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	60da      	str	r2, [r3, #12]
			fp->fptr = 0;						/* File pointer */
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	609a      	str	r2, [r3, #8]
			fp->dsect = 0;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80040de:	69fa      	ldr	r2, [r7, #28]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	88da      	ldrh	r2, [r3, #6]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 80040ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3758      	adds	r7, #88	; 0x58
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b08a      	sub	sp, #40	; 0x28
 80040fe:	af00      	add	r7, sp, #0
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	607a      	str	r2, [r7, #4]
 8004106:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	2200      	movs	r2, #0
 8004110:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f7ff fe30 	bl	8003d78 <validate>
 8004118:	4603      	mov	r3, r0
 800411a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800411c:	7dfb      	ldrb	r3, [r7, #23]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <f_write+0x2c>
 8004122:	7dfb      	ldrb	r3, [r7, #23]
 8004124:	e151      	b.n	80043ca <f_write+0x2d0>
	if (fp->err)							/* Check error */
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	79db      	ldrb	r3, [r3, #7]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <f_write+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	79db      	ldrb	r3, [r3, #7]
 8004132:	e14a      	b.n	80043ca <f_write+0x2d0>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	799b      	ldrb	r3, [r3, #6]
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <f_write+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 8004140:	2307      	movs	r3, #7
 8004142:	e142      	b.n	80043ca <f_write+0x2d0>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	441a      	add	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	429a      	cmp	r2, r3
 8004152:	f080 8122 	bcs.w	800439a <f_write+0x2a0>
 8004156:	2300      	movs	r3, #0
 8004158:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800415a:	e11e      	b.n	800439a <f_write+0x2a0>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004164:	2b00      	cmp	r3, #0
 8004166:	f040 80e3 	bne.w	8004330 <f_write+0x236>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	0a5b      	lsrs	r3, r3, #9
 8004170:	b2da      	uxtb	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	789b      	ldrb	r3, [r3, #2]
 8004178:	3b01      	subs	r3, #1
 800417a:	b2db      	uxtb	r3, r3
 800417c:	4013      	ands	r3, r2
 800417e:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8004180:	7dbb      	ldrb	r3, [r7, #22]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d139      	bne.n	80041fa <f_write+0x100>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10d      	bne.n	80041aa <f_write+0xb0>
					clst = fp->sclust;		/* Follow from the origin */
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	2b00      	cmp	r3, #0
 8004198:	d110      	bne.n	80041bc <f_write+0xc2>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2100      	movs	r1, #0
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fe fa00 	bl	80025a6 <create_chain>
 80041a6:	6278      	str	r0, [r7, #36]	; 0x24
 80041a8:	e008      	b.n	80041bc <f_write+0xc2>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	4619      	mov	r1, r3
 80041b4:	4610      	mov	r0, r2
 80041b6:	f7fe f9f6 	bl	80025a6 <create_chain>
 80041ba:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80041bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f000 80f0 	beq.w	80043a4 <f_write+0x2aa>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d104      	bne.n	80041d4 <f_write+0xda>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2202      	movs	r2, #2
 80041ce:	71da      	strb	r2, [r3, #7]
 80041d0:	2302      	movs	r3, #2
 80041d2:	e0fa      	b.n	80043ca <f_write+0x2d0>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041da:	d104      	bne.n	80041e6 <f_write+0xec>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2201      	movs	r2, #1
 80041e0:	71da      	strb	r2, [r3, #7]
 80041e2:	2301      	movs	r3, #1
 80041e4:	e0f1      	b.n	80043ca <f_write+0x2d0>
				fp->clust = clst;			/* Update current cluster */
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ea:	615a      	str	r2, [r3, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d102      	bne.n	80041fa <f_write+0x100>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f8:	611a      	str	r2, [r3, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	799b      	ldrb	r3, [r3, #6]
 80041fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004202:	2b00      	cmp	r3, #0
 8004204:	d019      	beq.n	800423a <f_write+0x140>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	7858      	ldrb	r0, [r3, #1]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	699a      	ldr	r2, [r3, #24]
 8004216:	2301      	movs	r3, #1
 8004218:	f7fc ffa6 	bl	8001168 <disk_write>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d004      	beq.n	800422c <f_write+0x132>
					ABORT(fp->fs, FR_DISK_ERR);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2201      	movs	r2, #1
 8004226:	71da      	strb	r2, [r3, #7]
 8004228:	2301      	movs	r3, #1
 800422a:	e0ce      	b.n	80043ca <f_write+0x2d0>
				fp->flag &= ~FA__DIRTY;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	799b      	ldrb	r3, [r3, #6]
 8004230:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004234:	b2da      	uxtb	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	4619      	mov	r1, r3
 8004244:	4610      	mov	r0, r2
 8004246:	f7fd ff7a 	bl	800213e <clust2sect>
 800424a:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d104      	bne.n	800425c <f_write+0x162>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2202      	movs	r2, #2
 8004256:	71da      	strb	r2, [r3, #7]
 8004258:	2302      	movs	r3, #2
 800425a:	e0b6      	b.n	80043ca <f_write+0x2d0>
			sect += csect;
 800425c:	7dbb      	ldrb	r3, [r7, #22]
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	4413      	add	r3, r2
 8004262:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	0a5b      	lsrs	r3, r3, #9
 8004268:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d03f      	beq.n	80042f0 <f_write+0x1f6>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8004270:	7dba      	ldrb	r2, [r7, #22]
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	4413      	add	r3, r2
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	6812      	ldr	r2, [r2, #0]
 800427a:	7892      	ldrb	r2, [r2, #2]
 800427c:	4293      	cmp	r3, r2
 800427e:	d906      	bls.n	800428e <f_write+0x194>
					cc = fp->fs->csize - csect;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	789b      	ldrb	r3, [r3, #2]
 8004286:	461a      	mov	r2, r3
 8004288:	7dbb      	ldrb	r3, [r7, #22]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	7858      	ldrb	r0, [r3, #1]
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	69b9      	ldr	r1, [r7, #24]
 800429a:	f7fc ff65 	bl	8001168 <disk_write>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d004      	beq.n	80042ae <f_write+0x1b4>
					ABORT(fp->fs, FR_DISK_ERR);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2201      	movs	r2, #1
 80042a8:	71da      	strb	r2, [r3, #7]
 80042aa:	2301      	movs	r3, #1
 80042ac:	e08d      	b.n	80043ca <f_write+0x2d0>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	699a      	ldr	r2, [r3, #24]
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad2      	subs	r2, r2, r3
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d215      	bcs.n	80042e8 <f_write+0x1ee>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	699a      	ldr	r2, [r3, #24]
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	025b      	lsls	r3, r3, #9
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	4413      	add	r3, r2
 80042d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042d4:	4619      	mov	r1, r3
 80042d6:	f7fd fda5 	bl	8001e24 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	799b      	ldrb	r3, [r3, #6]
 80042de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	025b      	lsls	r3, r3, #9
 80042ec:	623b      	str	r3, [r7, #32]
				continue;
 80042ee:	e040      	b.n	8004372 <f_write+0x278>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	699a      	ldr	r2, [r3, #24]
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d017      	beq.n	800432a <f_write+0x230>
				if (fp->fptr < fp->fsize &&
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	689a      	ldr	r2, [r3, #8]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	429a      	cmp	r2, r3
 8004304:	d211      	bcs.n	800432a <f_write+0x230>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	7858      	ldrb	r0, [r3, #1]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8004312:	2301      	movs	r3, #1
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	f7fc fef9 	bl	800110c <disk_read>
 800431a:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800431c:	2b00      	cmp	r3, #0
 800431e:	d004      	beq.n	800432a <f_write+0x230>
						ABORT(fp->fs, FR_DISK_ERR);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2201      	movs	r2, #1
 8004324:	71da      	strb	r2, [r3, #7]
 8004326:	2301      	movs	r3, #1
 8004328:	e04f      	b.n	80043ca <f_write+0x2d0>
			}
#endif
			fp->dsect = sect;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004338:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800433c:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800433e:	6a3a      	ldr	r2, [r7, #32]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	429a      	cmp	r2, r3
 8004344:	d901      	bls.n	800434a <f_write+0x250>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004352:	3320      	adds	r3, #32
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4413      	add	r3, r2
 8004358:	3304      	adds	r3, #4
 800435a:	6a3a      	ldr	r2, [r7, #32]
 800435c:	69b9      	ldr	r1, [r7, #24]
 800435e:	4618      	mov	r0, r3
 8004360:	f7fd fd60 	bl	8001e24 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	799b      	ldrb	r3, [r3, #6]
 8004368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800436c:	b2da      	uxtb	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	4413      	add	r3, r2
 8004378:	61bb      	str	r3, [r7, #24]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	6a3b      	ldr	r3, [r7, #32]
 8004380:	441a      	add	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	609a      	str	r2, [r3, #8]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	441a      	add	r2, r3
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	f47f aedd 	bne.w	800415c <f_write+0x62>
 80043a2:	e000      	b.n	80043a6 <f_write+0x2ac>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80043a4:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	689a      	ldr	r2, [r3, #8]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d903      	bls.n	80043ba <f_write+0x2c0>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	689a      	ldr	r2, [r3, #8]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	799b      	ldrb	r3, [r3, #6]
 80043be:	f043 0320 	orr.w	r3, r3, #32
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3728      	adds	r7, #40	; 0x28
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b086      	sub	sp, #24
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7ff fccc 	bl	8003d78 <validate>
 80043e0:	4603      	mov	r3, r0
 80043e2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80043e4:	7dfb      	ldrb	r3, [r7, #23]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f040 8096 	bne.w	8004518 <f_sync+0x146>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	799b      	ldrb	r3, [r3, #6]
 80043f0:	f003 0320 	and.w	r3, r3, #32
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 808f 	beq.w	8004518 <f_sync+0x146>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	799b      	ldrb	r3, [r3, #6]
 80043fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004402:	2b00      	cmp	r3, #0
 8004404:	d016      	beq.n	8004434 <f_sync+0x62>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	7858      	ldrb	r0, [r3, #1]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699a      	ldr	r2, [r3, #24]
 8004416:	2301      	movs	r3, #1
 8004418:	f7fc fea6 	bl	8001168 <disk_write>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <f_sync+0x54>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8004422:	2301      	movs	r3, #1
 8004424:	e079      	b.n	800451a <f_sync+0x148>
				fp->flag &= ~FA__DIRTY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	799b      	ldrb	r3, [r3, #6]
 800442a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800442e:	b2da      	uxtb	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	4619      	mov	r1, r3
 800443e:	4610      	mov	r0, r2
 8004440:	f7fd fdae 	bl	8001fa0 <move_window>
 8004444:	4603      	mov	r3, r0
 8004446:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8004448:	7dfb      	ldrb	r3, [r7, #23]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d164      	bne.n	8004518 <f_sync+0x146>
				dir = fp->dir_ptr;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	330b      	adds	r3, #11
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	320b      	adds	r2, #11
 800445c:	7812      	ldrb	r2, [r2, #0]
 800445e:	f042 0220 	orr.w	r2, r2, #32
 8004462:	b2d2      	uxtb	r2, r2
 8004464:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	331c      	adds	r3, #28
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	68d2      	ldr	r2, [r2, #12]
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	701a      	strb	r2, [r3, #0]
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	331d      	adds	r3, #29
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	68d2      	ldr	r2, [r2, #12]
 800447a:	b292      	uxth	r2, r2
 800447c:	0a12      	lsrs	r2, r2, #8
 800447e:	b292      	uxth	r2, r2
 8004480:	b2d2      	uxtb	r2, r2
 8004482:	701a      	strb	r2, [r3, #0]
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	331e      	adds	r3, #30
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	68d2      	ldr	r2, [r2, #12]
 800448c:	0c12      	lsrs	r2, r2, #16
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	701a      	strb	r2, [r3, #0]
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	331f      	adds	r3, #31
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	68d2      	ldr	r2, [r2, #12]
 800449a:	0e12      	lsrs	r2, r2, #24
 800449c:	b2d2      	uxtb	r2, r2
 800449e:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	4619      	mov	r1, r3
 80044a6:	6938      	ldr	r0, [r7, #16]
 80044a8:	f7fe fad5 	bl	8002a56 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80044ac:	f7fc feb4 	bl	8001218 <get_fattime>
 80044b0:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	3316      	adds	r3, #22
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	b2d2      	uxtb	r2, r2
 80044ba:	701a      	strb	r2, [r3, #0]
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	3317      	adds	r3, #23
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	b292      	uxth	r2, r2
 80044c4:	0a12      	lsrs	r2, r2, #8
 80044c6:	b292      	uxth	r2, r2
 80044c8:	b2d2      	uxtb	r2, r2
 80044ca:	701a      	strb	r2, [r3, #0]
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	3318      	adds	r3, #24
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	0c12      	lsrs	r2, r2, #16
 80044d4:	b2d2      	uxtb	r2, r2
 80044d6:	701a      	strb	r2, [r3, #0]
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	3319      	adds	r3, #25
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	0e12      	lsrs	r2, r2, #24
 80044e0:	b2d2      	uxtb	r2, r2
 80044e2:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	3312      	adds	r3, #18
 80044e8:	2200      	movs	r2, #0
 80044ea:	701a      	strb	r2, [r3, #0]
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	3313      	adds	r3, #19
 80044f0:	2200      	movs	r2, #0
 80044f2:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	799b      	ldrb	r3, [r3, #6]
 80044f8:	f023 0320 	bic.w	r3, r3, #32
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2201      	movs	r2, #1
 8004508:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4618      	mov	r0, r3
 8004510:	f7fd fd73 	bl	8001ffa <sync_fs>
 8004514:	4603      	mov	r3, r0
 8004516:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8004518:	7dfb      	ldrb	r3, [r7, #23]
}
 800451a:	4618      	mov	r0, r3
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b084      	sub	sp, #16
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7ff ff51 	bl	80043d2 <f_sync>
 8004530:	4603      	mov	r3, r0
 8004532:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8004534:	7bfb      	ldrb	r3, [r7, #15]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10a      	bne.n	8004550 <f_close+0x2e>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7ff fc1c 	bl	8003d78 <validate>
 8004540:	4603      	mov	r3, r0
 8004542:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004544:	7bfb      	ldrb	r3, [r7, #15]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d102      	bne.n	8004550 <f_close+0x2e>
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
				fp->fs = 0;				/* Invalidate file object */
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8004550:	7bfb      	ldrb	r3, [r7, #15]
}
 8004552:	4618      	mov	r0, r3
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b084      	sub	sp, #16
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	460b      	mov	r3, r1
 8004564:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8004566:	78fb      	ldrb	r3, [r7, #3]
 8004568:	2b0a      	cmp	r3, #10
 800456a:	d103      	bne.n	8004574 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800456c:	210d      	movs	r1, #13
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7ff fff3 	bl	800455a <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2b00      	cmp	r3, #0
 800457e:	db25      	blt.n	80045cc <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	1c5a      	adds	r2, r3, #1
 8004584:	60fa      	str	r2, [r7, #12]
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	4413      	add	r3, r2
 800458a:	78fa      	ldrb	r2, [r7, #3]
 800458c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2b3c      	cmp	r3, #60	; 0x3c
 8004592:	dd12      	ble.n	80045ba <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6818      	ldr	r0, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f103 010c 	add.w	r1, r3, #12
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	f107 0308 	add.w	r3, r7, #8
 80045a4:	f7ff fda9 	bl	80040fa <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d101      	bne.n	80045b4 <putc_bfd+0x5a>
 80045b0:	2300      	movs	r3, #0
 80045b2:	e001      	b.n	80045b8 <putc_bfd+0x5e>
 80045b4:	f04f 33ff 	mov.w	r3, #4294967295
 80045b8:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	609a      	str	r2, [r3, #8]
 80045ca:	e000      	b.n	80045ce <putc_bfd+0x74>
	if (i < 0) return;
 80045cc:	bf00      	nop
}
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80045d4:	b590      	push	{r4, r7, lr}
 80045d6:	b097      	sub	sp, #92	; 0x5c
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 80045e2:	2300      	movs	r3, #0
 80045e4:	613b      	str	r3, [r7, #16]
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 80045ea:	e009      	b.n	8004600 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	1c5a      	adds	r2, r3, #1
 80045f0:	607a      	str	r2, [r7, #4]
 80045f2:	781a      	ldrb	r2, [r3, #0]
 80045f4:	f107 030c 	add.w	r3, r7, #12
 80045f8:	4611      	mov	r1, r2
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff ffad 	bl	800455a <putc_bfd>
	while (*str)			/* Put the string */
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1f1      	bne.n	80045ec <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	2b00      	cmp	r3, #0
 800460c:	db16      	blt.n	800463c <f_puts+0x68>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	461c      	mov	r4, r3
 8004614:	f107 0208 	add.w	r2, r7, #8
 8004618:	f107 030c 	add.w	r3, r7, #12
 800461c:	f103 010c 	add.w	r1, r3, #12
 8004620:	4613      	mov	r3, r2
 8004622:	4622      	mov	r2, r4
 8004624:	f7ff fd69 	bl	80040fa <f_write>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d106      	bne.n	800463c <f_puts+0x68>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	461a      	mov	r2, r3
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	429a      	cmp	r2, r3
 8004636:	d101      	bne.n	800463c <f_puts+0x68>
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	e001      	b.n	8004640 <f_puts+0x6c>
	return EOF;
 800463c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004640:	4618      	mov	r0, r3
 8004642:	375c      	adds	r7, #92	; 0x5c
 8004644:	46bd      	mov	sp, r7
 8004646:	bd90      	pop	{r4, r7, pc}

08004648 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
	return malloc(msize);	/* Allocate a new memory block with POSIX API */
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f001 fa97 	bl	8005b84 <malloc>
 8004656:	4603      	mov	r3, r0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
	free(mblock);	/* Discard the memory block with POSIX API */
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f001 fa93 	bl	8005b94 <free>
}
 800466e:	bf00      	nop
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
	...

08004678 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	4603      	mov	r3, r0
 8004680:	6039      	str	r1, [r7, #0]
 8004682:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8004684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004688:	2b00      	cmp	r3, #0
 800468a:	da0b      	bge.n	80046a4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800468c:	490d      	ldr	r1, [pc, #52]	; (80046c4 <NVIC_SetPriority+0x4c>)
 800468e:	79fb      	ldrb	r3, [r7, #7]
 8004690:	f003 030f 	and.w	r3, r3, #15
 8004694:	3b04      	subs	r3, #4
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	b2d2      	uxtb	r2, r2
 800469a:	0112      	lsls	r2, r2, #4
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	440b      	add	r3, r1
 80046a0:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80046a2:	e009      	b.n	80046b8 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80046a4:	4908      	ldr	r1, [pc, #32]	; (80046c8 <NVIC_SetPriority+0x50>)
 80046a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	b2d2      	uxtb	r2, r2
 80046ae:	0112      	lsls	r2, r2, #4
 80046b0:	b2d2      	uxtb	r2, r2
 80046b2:	440b      	add	r3, r1
 80046b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	e000ed00 	.word	0xe000ed00
 80046c8:	e000e100 	.word	0xe000e100

080046cc <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046da:	d301      	bcc.n	80046e0 <SysTick_Config+0x14>
 80046dc:	2301      	movs	r3, #1
 80046de:	e011      	b.n	8004704 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80046e0:	4a0a      	ldr	r2, [pc, #40]	; (800470c <SysTick_Config+0x40>)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80046e8:	3b01      	subs	r3, #1
 80046ea:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 80046ec:	210f      	movs	r1, #15
 80046ee:	f04f 30ff 	mov.w	r0, #4294967295
 80046f2:	f7ff ffc1 	bl	8004678 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80046f6:	4b05      	ldr	r3, [pc, #20]	; (800470c <SysTick_Config+0x40>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046fc:	4b03      	ldr	r3, [pc, #12]	; (800470c <SysTick_Config+0x40>)
 80046fe:	2207      	movs	r2, #7
 8004700:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3708      	adds	r7, #8
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	e000e010 	.word	0xe000e010

08004710 <SysTick_Handler>:
void TM_DELAY_TIM_IRQ_HANDLER(void) {
	TM_DELAY_TIM->SR = ~TIM_IT_Update;
#elif defined(KEIL_IDE)
void TimingDelay_Decrement(void) {
#else
void SysTick_Handler(void) {
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
#endif
	uint8_t i;
	
	TM_Time++;
 8004716:	4b37      	ldr	r3, [pc, #220]	; (80047f4 <SysTick_Handler+0xe4>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	3301      	adds	r3, #1
 800471c:	4a35      	ldr	r2, [pc, #212]	; (80047f4 <SysTick_Handler+0xe4>)
 800471e:	6013      	str	r3, [r2, #0]
	if (TM_Time2 != 0x00) {
 8004720:	4b35      	ldr	r3, [pc, #212]	; (80047f8 <SysTick_Handler+0xe8>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d004      	beq.n	8004732 <SysTick_Handler+0x22>
		TM_Time2--;
 8004728:	4b33      	ldr	r3, [pc, #204]	; (80047f8 <SysTick_Handler+0xe8>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3b01      	subs	r3, #1
 800472e:	4a32      	ldr	r2, [pc, #200]	; (80047f8 <SysTick_Handler+0xe8>)
 8004730:	6013      	str	r3, [r2, #0]
	}
	
	/* Call user function */
	TM_DELAY_1msHandler();
 8004732:	f3af 8000 	nop.w
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 8004736:	2300      	movs	r3, #0
 8004738:	71fb      	strb	r3, [r7, #7]
 800473a:	e052      	b.n	80047e2 <SysTick_Handler+0xd2>
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 800473c:	79fb      	ldrb	r3, [r7, #7]
 800473e:	4a2f      	ldr	r2, [pc, #188]	; (80047fc <SysTick_Handler+0xec>)
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4413      	add	r3, r2
 8004744:	685b      	ldr	r3, [r3, #4]
		if (
 8004746:	2b00      	cmp	r3, #0
 8004748:	d048      	beq.n	80047dc <SysTick_Handler+0xcc>
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 800474a:	79fb      	ldrb	r3, [r7, #7]
 800474c:	4a2b      	ldr	r2, [pc, #172]	; (80047fc <SysTick_Handler+0xec>)
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	7b1b      	ldrb	r3, [r3, #12]
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 8004756:	2b00      	cmp	r3, #0
 8004758:	d040      	beq.n	80047dc <SysTick_Handler+0xcc>
			CustomTimers.Timers[i]->CNT > 0    /*!< Counter is not NULL */
 800475a:	79fb      	ldrb	r3, [r7, #7]
 800475c:	4a27      	ldr	r2, [pc, #156]	; (80047fc <SysTick_Handler+0xec>)
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	689b      	ldr	r3, [r3, #8]
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 8004766:	2b00      	cmp	r3, #0
 8004768:	d038      	beq.n	80047dc <SysTick_Handler+0xcc>
		) {
			/* Decrease counter */
			CustomTimers.Timers[i]->CNT--;
 800476a:	79fb      	ldrb	r3, [r7, #7]
 800476c:	4a23      	ldr	r2, [pc, #140]	; (80047fc <SysTick_Handler+0xec>)
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	689a      	ldr	r2, [r3, #8]
 8004776:	3a01      	subs	r2, #1
 8004778:	609a      	str	r2, [r3, #8]
			
			/* Check if count is zero */
			if (CustomTimers.Timers[i]->CNT == 0) {
 800477a:	79fb      	ldrb	r3, [r7, #7]
 800477c:	4a1f      	ldr	r2, [pc, #124]	; (80047fc <SysTick_Handler+0xec>)
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d128      	bne.n	80047dc <SysTick_Handler+0xcc>
				/* Call user callback function */
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i]->UserParameters);
 800478a:	79fb      	ldrb	r3, [r7, #7]
 800478c:	4a1b      	ldr	r2, [pc, #108]	; (80047fc <SysTick_Handler+0xec>)
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	691a      	ldr	r2, [r3, #16]
 8004796:	79fb      	ldrb	r3, [r7, #7]
 8004798:	4918      	ldr	r1, [pc, #96]	; (80047fc <SysTick_Handler+0xec>)
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	440b      	add	r3, r1
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	4618      	mov	r0, r3
 80047a4:	4790      	blx	r2
				
				/* Set new counter value */
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 80047a6:	79fb      	ldrb	r3, [r7, #7]
 80047a8:	4a14      	ldr	r2, [pc, #80]	; (80047fc <SysTick_Handler+0xec>)
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	79fb      	ldrb	r3, [r7, #7]
 80047b2:	4912      	ldr	r1, [pc, #72]	; (80047fc <SysTick_Handler+0xec>)
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	440b      	add	r3, r1
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6093      	str	r3, [r2, #8]
				
				/* Disable timer if auto reload feature is not used */
				if (!CustomTimers.Timers[i]->AutoReload) {
 80047be:	79fb      	ldrb	r3, [r7, #7]
 80047c0:	4a0e      	ldr	r2, [pc, #56]	; (80047fc <SysTick_Handler+0xec>)
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d106      	bne.n	80047dc <SysTick_Handler+0xcc>
					/* Disable counter */
					CustomTimers.Timers[i]->Enabled = 0;
 80047ce:	79fb      	ldrb	r3, [r7, #7]
 80047d0:	4a0a      	ldr	r2, [pc, #40]	; (80047fc <SysTick_Handler+0xec>)
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < CustomTimers.Count; i++) {
 80047dc:	79fb      	ldrb	r3, [r7, #7]
 80047de:	3301      	adds	r3, #1
 80047e0:	71fb      	strb	r3, [r7, #7]
 80047e2:	4b06      	ldr	r3, [pc, #24]	; (80047fc <SysTick_Handler+0xec>)
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	79fa      	ldrb	r2, [r7, #7]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d3a7      	bcc.n	800473c <SysTick_Handler+0x2c>
				}
			}
		}
	}
}
 80047ec:	bf00      	nop
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	20000320 	.word	0x20000320
 80047f8:	20000324 	.word	0x20000324
 80047fc:	2000032c 	.word	0x2000032c

08004800 <TM_DELAY_Init>:

void TM_DELAY_Init(void) {	
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
#if defined(TM_DELAY_TIM)
	TM_DELAY_INT_InitTIM();
#else
	/* Set Systick interrupt every 1ms */
	if (SysTick_Config(SystemCoreClock / 1000)) {
 8004804:	4b0d      	ldr	r3, [pc, #52]	; (800483c <TM_DELAY_Init+0x3c>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a0d      	ldr	r2, [pc, #52]	; (8004840 <TM_DELAY_Init+0x40>)
 800480a:	fba2 2303 	umull	r2, r3, r2, r3
 800480e:	099b      	lsrs	r3, r3, #6
 8004810:	4618      	mov	r0, r3
 8004812:	f7ff ff5b 	bl	80046cc <SysTick_Config>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d000      	beq.n	800481e <TM_DELAY_Init+0x1e>
		/* Capture error */
		while (1);
 800481c:	e7fe      	b.n	800481c <TM_DELAY_Init+0x1c>
	}
	
	#ifdef __GNUC__
		/* Set multiplier for delay under 1us with pooling mode = not so accurate */
		mult = SystemCoreClock / 7000000;
 800481e:	4b07      	ldr	r3, [pc, #28]	; (800483c <TM_DELAY_Init+0x3c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	099b      	lsrs	r3, r3, #6
 8004824:	4a07      	ldr	r2, [pc, #28]	; (8004844 <TM_DELAY_Init+0x44>)
 8004826:	fba2 2303 	umull	r2, r3, r2, r3
 800482a:	0a9b      	lsrs	r3, r3, #10
 800482c:	4a06      	ldr	r2, [pc, #24]	; (8004848 <TM_DELAY_Init+0x48>)
 800482e:	6013      	str	r3, [r2, #0]
		mult = SystemCoreClock / 3000000;
	#endif
#endif
	
	/* Set initialized flag */
	TM_DELAY_Initialized = 1;
 8004830:	4b06      	ldr	r3, [pc, #24]	; (800484c <TM_DELAY_Init+0x4c>)
 8004832:	2201      	movs	r2, #1
 8004834:	701a      	strb	r2, [r3, #0]
}
 8004836:	bf00      	nop
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	200000bc 	.word	0x200000bc
 8004840:	10624dd3 	.word	0x10624dd3
 8004844:	02659117 	.word	0x02659117
 8004848:	20000390 	.word	0x20000390
 800484c:	20000328 	.word	0x20000328

08004850 <TM_GPIO_Init>:
/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af02      	add	r7, sp, #8
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	4608      	mov	r0, r1
 800485a:	4611      	mov	r1, r2
 800485c:	461a      	mov	r2, r3
 800485e:	4603      	mov	r3, r0
 8004860:	807b      	strh	r3, [r7, #2]
 8004862:	460b      	mov	r3, r1
 8004864:	707b      	strb	r3, [r7, #1]
 8004866:	4613      	mov	r3, r2
 8004868:	703b      	strb	r3, [r7, #0]
	/* Check input */
	if (GPIO_Pin == 0x00) {
 800486a:	887b      	ldrh	r3, [r7, #2]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00e      	beq.n	800488e <TM_GPIO_Init+0x3e>
		return;
	}
	
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 f875 	bl	8004960 <TM_GPIO_INT_EnableClock>
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8004876:	7838      	ldrb	r0, [r7, #0]
 8004878:	787a      	ldrb	r2, [r7, #1]
 800487a:	8879      	ldrh	r1, [r7, #2]
 800487c:	7d3b      	ldrb	r3, [r7, #20]
 800487e:	9301      	str	r3, [sp, #4]
 8004880:	7c3b      	ldrb	r3, [r7, #16]
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	4603      	mov	r3, r0
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f882 	bl	8004990 <TM_GPIO_INT_Init>
 800488c:	e000      	b.n	8004890 <TM_GPIO_Init+0x40>
		return;
 800488e:	bf00      	nop
}
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <TM_GPIO_InitAlternate>:

void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
 8004896:	b580      	push	{r7, lr}
 8004898:	b086      	sub	sp, #24
 800489a:	af02      	add	r7, sp, #8
 800489c:	6078      	str	r0, [r7, #4]
 800489e:	4608      	mov	r0, r1
 80048a0:	4611      	mov	r1, r2
 80048a2:	461a      	mov	r2, r3
 80048a4:	4603      	mov	r3, r0
 80048a6:	807b      	strh	r3, [r7, #2]
 80048a8:	460b      	mov	r3, r1
 80048aa:	707b      	strb	r3, [r7, #1]
 80048ac:	4613      	mov	r3, r2
 80048ae:	703b      	strb	r3, [r7, #0]
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
 80048b0:	887b      	ldrh	r3, [r7, #2]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d03e      	beq.n	8004934 <TM_GPIO_InitAlternate+0x9e>
		return;
	}
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f852 	bl	8004960 <TM_GPIO_INT_EnableClock>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80048bc:	2300      	movs	r3, #0
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	e029      	b.n	8004916 <TM_GPIO_InitAlternate+0x80>
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 80048c2:	887a      	ldrh	r2, [r7, #2]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	fa42 f303 	asr.w	r3, r2, r3
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d01d      	beq.n	800490e <TM_GPIO_InitAlternate+0x78>
			continue;
		}
		
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	08da      	lsrs	r2, r3, #3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	08d9      	lsrs	r1, r3, #3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	3108      	adds	r1, #8
 80048de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80048e2:	68f9      	ldr	r1, [r7, #12]
 80048e4:	f001 0107 	and.w	r1, r1, #7
 80048e8:	0089      	lsls	r1, r1, #2
 80048ea:	200f      	movs	r0, #15
 80048ec:	fa00 f101 	lsl.w	r1, r0, r1
 80048f0:	43c9      	mvns	r1, r1
 80048f2:	400b      	ands	r3, r1
 80048f4:	7f38      	ldrb	r0, [r7, #28]
 80048f6:	68f9      	ldr	r1, [r7, #12]
 80048f8:	f001 0107 	and.w	r1, r1, #7
 80048fc:	0089      	lsls	r1, r1, #2
 80048fe:	fa00 f101 	lsl.w	r1, r0, r1
 8004902:	4319      	orrs	r1, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3208      	adds	r2, #8
 8004908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800490c:	e000      	b.n	8004910 <TM_GPIO_InitAlternate+0x7a>
			continue;
 800490e:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	3301      	adds	r3, #1
 8004914:	60fb      	str	r3, [r7, #12]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2b0f      	cmp	r3, #15
 800491a:	d9d2      	bls.n	80048c2 <TM_GPIO_InitAlternate+0x2c>
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 800491c:	787a      	ldrb	r2, [r7, #1]
 800491e:	8879      	ldrh	r1, [r7, #2]
 8004920:	7e3b      	ldrb	r3, [r7, #24]
 8004922:	9301      	str	r3, [sp, #4]
 8004924:	783b      	ldrb	r3, [r7, #0]
 8004926:	9300      	str	r3, [sp, #0]
 8004928:	4613      	mov	r3, r2
 800492a:	2202      	movs	r2, #2
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f82f 	bl	8004990 <TM_GPIO_INT_Init>
 8004932:	e000      	b.n	8004936 <TM_GPIO_InitAlternate+0xa0>
		return;
 8004934:	bf00      	nop
}
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 800494a:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800494e:	0a9b      	lsrs	r3, r3, #10
 8004950:	b29b      	uxth	r3, r3
}
 8004952:	4618      	mov	r0, r3
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
	...

08004960 <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7ff ffe7 	bl	800493c <TM_GPIO_GetPortSource>
 800496e:	4603      	mov	r3, r0
 8004970:	461a      	mov	r2, r3
 8004972:	2301      	movs	r3, #1
 8004974:	fa03 f102 	lsl.w	r1, r3, r2
 8004978:	4a04      	ldr	r2, [pc, #16]	; (800498c <TM_GPIO_INT_EnableClock+0x2c>)
 800497a:	4b04      	ldr	r3, [pc, #16]	; (800498c <TM_GPIO_INT_EnableClock+0x2c>)
 800497c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497e:	430b      	orrs	r3, r1
 8004980:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004982:	bf00      	nop
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	40023800 	.word	0x40023800

08004990 <TM_GPIO_INT_Init>:
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx) {
	/* Clear bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	4608      	mov	r0, r1
 800499a:	4611      	mov	r1, r2
 800499c:	461a      	mov	r2, r3
 800499e:	4603      	mov	r3, r0
 80049a0:	807b      	strh	r3, [r7, #2]
 80049a2:	460b      	mov	r3, r1
 80049a4:	707b      	strb	r3, [r7, #1]
 80049a6:	4613      	mov	r3, r2
 80049a8:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7ff ffc6 	bl	800493c <TM_GPIO_GetPortSource>
 80049b0:	4603      	mov	r3, r0
 80049b2:	73bb      	strb	r3, [r7, #14]
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80049b4:	2300      	movs	r3, #0
 80049b6:	73fb      	strb	r3, [r7, #15]
 80049b8:	e067      	b.n	8004a8a <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 80049ba:	887a      	ldrh	r2, [r7, #2]
 80049bc:	7bfb      	ldrb	r3, [r7, #15]
 80049be:	fa42 f303 	asr.w	r3, r2, r3
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d05b      	beq.n	8004a82 <TM_GPIO_INT_Init+0xf2>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 80049ca:	7bbb      	ldrb	r3, [r7, #14]
 80049cc:	7bba      	ldrb	r2, [r7, #14]
 80049ce:	4932      	ldr	r1, [pc, #200]	; (8004a98 <TM_GPIO_INT_Init+0x108>)
 80049d0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80049d4:	b211      	sxth	r1, r2
 80049d6:	7bfa      	ldrb	r2, [r7, #15]
 80049d8:	2001      	movs	r0, #1
 80049da:	fa00 f202 	lsl.w	r2, r0, r2
 80049de:	b212      	sxth	r2, r2
 80049e0:	430a      	orrs	r2, r1
 80049e2:	b212      	sxth	r2, r2
 80049e4:	b291      	uxth	r1, r2
 80049e6:	4a2c      	ldr	r2, [pc, #176]	; (8004a98 <TM_GPIO_INT_Init+0x108>)
 80049e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	7bfa      	ldrb	r2, [r7, #15]
 80049f2:	0052      	lsls	r2, r2, #1
 80049f4:	2103      	movs	r1, #3
 80049f6:	fa01 f202 	lsl.w	r2, r1, r2
 80049fa:	43d2      	mvns	r2, r2
 80049fc:	4013      	ands	r3, r2
 80049fe:	7e39      	ldrb	r1, [r7, #24]
 8004a00:	7bfa      	ldrb	r2, [r7, #15]
 8004a02:	0052      	lsls	r2, r2, #1
 8004a04:	fa01 f202 	lsl.w	r2, r1, r2
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	7bfb      	ldrb	r3, [r7, #15]
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	2103      	movs	r1, #3
 8004a18:	fa01 f303 	lsl.w	r3, r1, r3
 8004a1c:	43db      	mvns	r3, r3
 8004a1e:	4013      	ands	r3, r2
 8004a20:	7879      	ldrb	r1, [r7, #1]
 8004a22:	7bfa      	ldrb	r2, [r7, #15]
 8004a24:	0052      	lsls	r2, r2, #1
 8004a26:	fa01 f202 	lsl.w	r2, r1, r2
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8004a30:	787b      	ldrb	r3, [r7, #1]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d002      	beq.n	8004a3c <TM_GPIO_INT_Init+0xac>
 8004a36:	787b      	ldrb	r3, [r7, #1]
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d123      	bne.n	8004a84 <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	7bfa      	ldrb	r2, [r7, #15]
 8004a42:	2101      	movs	r1, #1
 8004a44:	fa01 f202 	lsl.w	r2, r1, r2
 8004a48:	b292      	uxth	r2, r2
 8004a4a:	43d2      	mvns	r2, r2
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	7839      	ldrb	r1, [r7, #0]
 8004a50:	7bfa      	ldrb	r2, [r7, #15]
 8004a52:	fa01 f202 	lsl.w	r2, r1, r2
 8004a56:	b292      	uxth	r2, r2
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	7bfb      	ldrb	r3, [r7, #15]
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	2103      	movs	r1, #3
 8004a68:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6c:	43db      	mvns	r3, r3
 8004a6e:	4013      	ands	r3, r2
 8004a70:	7f39      	ldrb	r1, [r7, #28]
 8004a72:	7bfa      	ldrb	r2, [r7, #15]
 8004a74:	0052      	lsls	r2, r2, #1
 8004a76:	fa01 f202 	lsl.w	r2, r1, r2
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	609a      	str	r2, [r3, #8]
 8004a80:	e000      	b.n	8004a84 <TM_GPIO_INT_Init+0xf4>
			continue;
 8004a82:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8004a84:	7bfb      	ldrb	r3, [r7, #15]
 8004a86:	3301      	adds	r3, #1
 8004a88:	73fb      	strb	r3, [r7, #15]
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
 8004a8c:	2b0f      	cmp	r3, #15
 8004a8e:	d994      	bls.n	80049ba <TM_GPIO_INT_Init+0x2a>
		}
	}
}
 8004a90:	bf00      	nop
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	20000344 	.word	0x20000344

08004a9c <TM_SPI_Init>:
void TM_SPI3_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI4_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI5_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI6_INT_InitPins(TM_SPI_PinsPack_t pinspack);

void TM_SPI_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack) {
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af02      	add	r7, sp, #8
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	70fb      	strb	r3, [r7, #3]
	/* Init with default settings */
#ifdef USE_SPI1
	if (SPIx == SPI1) {
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a18      	ldr	r2, [pc, #96]	; (8004b0c <TM_SPI_Init+0x70>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d10a      	bne.n	8004ac6 <TM_SPI_Init+0x2a>
		TM_SPIx_Init(SPI1, pinspack, TM_SPI1_MODE, TM_SPI1_PRESCALER, TM_SPI1_MASTERSLAVE, TM_SPI1_FIRSTBIT);
 8004ab0:	78f9      	ldrb	r1, [r7, #3]
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	9301      	str	r3, [sp, #4]
 8004ab6:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	2320      	movs	r3, #32
 8004abe:	2200      	movs	r2, #0
 8004ac0:	4812      	ldr	r0, [pc, #72]	; (8004b0c <TM_SPI_Init+0x70>)
 8004ac2:	f000 f8c5 	bl	8004c50 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI2
	if (SPIx == SPI2) {
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a11      	ldr	r2, [pc, #68]	; (8004b10 <TM_SPI_Init+0x74>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d10a      	bne.n	8004ae4 <TM_SPI_Init+0x48>
		TM_SPIx_Init(SPI2, pinspack, TM_SPI2_MODE, TM_SPI2_PRESCALER, TM_SPI2_MASTERSLAVE, TM_SPI2_FIRSTBIT);
 8004ace:	78f9      	ldrb	r1, [r7, #3]
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	9301      	str	r3, [sp, #4]
 8004ad4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	2320      	movs	r3, #32
 8004adc:	2200      	movs	r2, #0
 8004ade:	480c      	ldr	r0, [pc, #48]	; (8004b10 <TM_SPI_Init+0x74>)
 8004ae0:	f000 f8b6 	bl	8004c50 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI3
	if (SPIx == SPI3) {
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a0b      	ldr	r2, [pc, #44]	; (8004b14 <TM_SPI_Init+0x78>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d10a      	bne.n	8004b02 <TM_SPI_Init+0x66>
		TM_SPIx_Init(SPI3, pinspack, TM_SPI3_MODE, TM_SPI3_PRESCALER, TM_SPI3_MASTERSLAVE, TM_SPI3_FIRSTBIT);
 8004aec:	78f9      	ldrb	r1, [r7, #3]
 8004aee:	2300      	movs	r3, #0
 8004af0:	9301      	str	r3, [sp, #4]
 8004af2:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004af6:	9300      	str	r3, [sp, #0]
 8004af8:	2320      	movs	r3, #32
 8004afa:	2200      	movs	r2, #0
 8004afc:	4805      	ldr	r0, [pc, #20]	; (8004b14 <TM_SPI_Init+0x78>)
 8004afe:	f000 f8a7 	bl	8004c50 <TM_SPIx_Init>
#ifdef USE_SPI6
	if (SPIx == SPI6) {
		TM_SPIx_Init(SPI6, pinspack, TM_SPI6_MODE, TM_SPI6_PRESCALER, TM_SPI6_MASTERSLAVE, TM_SPI6_FIRSTBIT);
	}
#endif
}
 8004b02:	bf00      	nop
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40013000 	.word	0x40013000
 8004b10:	40003800 	.word	0x40003800
 8004b14:	40003c00 	.word	0x40003c00

08004b18 <TM_SPI_WriteMulti>:
		/* Read data register */
		dataIn[i] = SPIx->DR;
	}
}

void TM_SPI_WriteMulti(SPI_TypeDef* SPIx, uint8_t* dataOut, uint32_t count) {
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
	uint32_t i;	
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	881b      	ldrh	r3, [r3, #0]
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d031      	beq.n	8004b96 <TM_SPI_WriteMulti+0x7e>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
 8004b32:	bf00      	nop
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	891b      	ldrh	r3, [r3, #8]
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d0f8      	beq.n	8004b34 <TM_SPI_WriteMulti+0x1c>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	891b      	ldrh	r3, [r3, #8]
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1f1      	bne.n	8004b34 <TM_SPI_WriteMulti+0x1c>
	
	for (i = 0; i < count; i++) {
 8004b50:	2300      	movs	r3, #0
 8004b52:	617b      	str	r3, [r7, #20]
 8004b54:	e01a      	b.n	8004b8c <TM_SPI_WriteMulti+0x74>
		/* Fill output buffer with data */
		SPIx->DR = dataOut[i];
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	819a      	strh	r2, [r3, #12]
		
		/* Wait for SPI to end everything */
		SPI_WAIT(SPIx);
 8004b64:	bf00      	nop
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	891b      	ldrh	r3, [r3, #8]
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	f003 0303 	and.w	r3, r3, #3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d0f8      	beq.n	8004b66 <TM_SPI_WriteMulti+0x4e>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	891b      	ldrh	r3, [r3, #8]
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1f1      	bne.n	8004b66 <TM_SPI_WriteMulti+0x4e>
		
		/* Read data register */
		(void)SPIx->DR;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	899b      	ldrh	r3, [r3, #12]
	for (i = 0; i < count; i++) {
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	617b      	str	r3, [r7, #20]
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d3e0      	bcc.n	8004b56 <TM_SPI_WriteMulti+0x3e>
 8004b94:	e000      	b.n	8004b98 <TM_SPI_WriteMulti+0x80>
	SPI_CHECK_ENABLED(SPIx);
 8004b96:	bf00      	nop
	}
}
 8004b98:	371c      	adds	r7, #28
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <TM_SPI_ReadMulti>:

void TM_SPI_ReadMulti(SPI_TypeDef* SPIx, uint8_t* dataIn, uint8_t dummy, uint32_t count) {
 8004ba2:	b480      	push	{r7}
 8004ba4:	b087      	sub	sp, #28
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	60f8      	str	r0, [r7, #12]
 8004baa:	60b9      	str	r1, [r7, #8]
 8004bac:	603b      	str	r3, [r7, #0]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	71fb      	strb	r3, [r7, #7]
	uint32_t i;
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	881b      	ldrh	r3, [r3, #0]
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d034      	beq.n	8004c2a <TM_SPI_ReadMulti+0x88>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
 8004bc0:	bf00      	nop
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	891b      	ldrh	r3, [r3, #8]
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	f003 0303 	and.w	r3, r3, #3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0f8      	beq.n	8004bc2 <TM_SPI_ReadMulti+0x20>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	891b      	ldrh	r3, [r3, #8]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1f1      	bne.n	8004bc2 <TM_SPI_ReadMulti+0x20>
	
	for (i = 0; i < count; i++) {
 8004bde:	2300      	movs	r3, #0
 8004be0:	617b      	str	r3, [r7, #20]
 8004be2:	e01d      	b.n	8004c20 <TM_SPI_ReadMulti+0x7e>
		/* Fill output buffer with data */
		SPIx->DR = dummy;
 8004be4:	79fb      	ldrb	r3, [r7, #7]
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	819a      	strh	r2, [r3, #12]
		
		/* Wait for SPI to end everything */
		SPI_WAIT(SPIx);
 8004bec:	bf00      	nop
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	891b      	ldrh	r3, [r3, #8]
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	f003 0303 	and.w	r3, r3, #3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d0f8      	beq.n	8004bee <TM_SPI_ReadMulti+0x4c>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	891b      	ldrh	r3, [r3, #8]
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1f1      	bne.n	8004bee <TM_SPI_ReadMulti+0x4c>
		
		/* Save data to buffer */
		dataIn[i] = SPIx->DR;
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	4413      	add	r3, r2
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	8992      	ldrh	r2, [r2, #12]
 8004c14:	b292      	uxth	r2, r2
 8004c16:	b2d2      	uxtb	r2, r2
 8004c18:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; i++) {
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	617b      	str	r3, [r7, #20]
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d3dd      	bcc.n	8004be4 <TM_SPI_ReadMulti+0x42>
 8004c28:	e000      	b.n	8004c2c <TM_SPI_ReadMulti+0x8a>
	SPI_CHECK_ENABLED(SPIx);
 8004c2a:	bf00      	nop
	}
}
 8004c2c:	371c      	adds	r7, #28
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <TM_SPI_InitCustomPinsCallback>:
		/* Save data to buffer */
		dataIn[i] = SPIx->DR;
	}
}

__weak void TM_SPI_InitCustomPinsCallback(SPI_TypeDef* SPIx, uint16_t AlternateFunction) {
 8004c36:	b480      	push	{r7}
 8004c38:	b083      	sub	sp, #12
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
 8004c3e:	460b      	mov	r3, r1
 8004c40:	807b      	strh	r3, [r7, #2]
	/* Custom user function. */
	/* In case user needs functionality for custom pins, this function should be declared outside this library */
}
 8004c42:	bf00      	nop
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
	...

08004c50 <TM_SPIx_Init>:

/* Private functions */
static void TM_SPIx_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack, TM_SPI_Mode_t SPI_Mode, uint16_t SPI_BaudRatePrescaler, uint16_t SPI_MasterSlave, uint16_t SPI_FirstBit) {
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b088      	sub	sp, #32
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	4608      	mov	r0, r1
 8004c5a:	4611      	mov	r1, r2
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	4603      	mov	r3, r0
 8004c60:	70fb      	strb	r3, [r7, #3]
 8004c62:	460b      	mov	r3, r1
 8004c64:	70bb      	strb	r3, [r7, #2]
 8004c66:	4613      	mov	r3, r2
 8004c68:	803b      	strh	r3, [r7, #0]
	SPI_InitTypeDef SPI_InitStruct;

	/* Set default settings */
	SPI_StructInit(&SPI_InitStruct);
 8004c6a:	f107 030c 	add.w	r3, r7, #12
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fc f8f0 	bl	8000e54 <SPI_StructInit>
#ifdef USE_SPI1	
	if (SPIx == SPI1) {
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a39      	ldr	r2, [pc, #228]	; (8004d5c <TM_SPIx_Init+0x10c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d10b      	bne.n	8004c94 <TM_SPIx_Init+0x44>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8004c7c:	4a38      	ldr	r2, [pc, #224]	; (8004d60 <TM_SPIx_Init+0x110>)
 8004c7e:	4b38      	ldr	r3, [pc, #224]	; (8004d60 <TM_SPIx_Init+0x110>)
 8004c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c86:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI1_INT_InitPins(pinspack);
 8004c88:	78fb      	ldrb	r3, [r7, #3]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 f86e 	bl	8004d6c <TM_SPI1_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI1_DATASIZE;
 8004c90:	2300      	movs	r3, #0
 8004c92:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI2
	if (SPIx == SPI2) {
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a33      	ldr	r2, [pc, #204]	; (8004d64 <TM_SPIx_Init+0x114>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d10b      	bne.n	8004cb4 <TM_SPIx_Init+0x64>
		/* Enable SPI clock */
		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8004c9c:	4a30      	ldr	r2, [pc, #192]	; (8004d60 <TM_SPIx_Init+0x110>)
 8004c9e:	4b30      	ldr	r3, [pc, #192]	; (8004d60 <TM_SPIx_Init+0x110>)
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ca6:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Init pins */
		TM_SPI2_INT_InitPins(pinspack);
 8004ca8:	78fb      	ldrb	r3, [r7, #3]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 f88e 	bl	8004dcc <TM_SPI2_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI2_DATASIZE;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI3
	if (SPIx == SPI3) {
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a2c      	ldr	r2, [pc, #176]	; (8004d68 <TM_SPIx_Init+0x118>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d10b      	bne.n	8004cd4 <TM_SPIx_Init+0x84>
		/* Enable SPI clock */
		RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 8004cbc:	4a28      	ldr	r2, [pc, #160]	; (8004d60 <TM_SPIx_Init+0x110>)
 8004cbe:	4b28      	ldr	r3, [pc, #160]	; (8004d60 <TM_SPIx_Init+0x110>)
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cc6:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Init pins */
		TM_SPI3_INT_InitPins(pinspack);
 8004cc8:	78fb      	ldrb	r3, [r7, #3]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 f8ca 	bl	8004e64 <TM_SPI3_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI3_DATASIZE;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	823b      	strh	r3, [r7, #16]
		SPI_InitStruct.SPI_DataSize = TM_SPI6_DATASIZE;
	}
#endif

	/* Fill SPI settings */
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler;
 8004cd4:	883b      	ldrh	r3, [r7, #0]
 8004cd6:	833b      	strh	r3, [r7, #24]
	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	81bb      	strh	r3, [r7, #12]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit;
 8004cdc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004cde:	837b      	strh	r3, [r7, #26]
	SPI_InitStruct.SPI_Mode = SPI_MasterSlave;
 8004ce0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004ce2:	81fb      	strh	r3, [r7, #14]
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8004ce4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ce8:	82fb      	strh	r3, [r7, #22]
	//SPI_InitStruct.SPI_DataSize = SPI_DataSize_16b;
	
	/* SPI mode */
	if (SPI_Mode == TM_SPI_Mode_0) {
 8004cea:	78bb      	ldrb	r3, [r7, #2]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d104      	bne.n	8004cfa <TM_SPIx_Init+0xaa>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	82bb      	strh	r3, [r7, #20]
 8004cf8:	e016      	b.n	8004d28 <TM_SPIx_Init+0xd8>
	} else if (SPI_Mode == TM_SPI_Mode_1) {
 8004cfa:	78bb      	ldrb	r3, [r7, #2]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d104      	bne.n	8004d0a <TM_SPIx_Init+0xba>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 8004d00:	2300      	movs	r3, #0
 8004d02:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_2Edge;
 8004d04:	2301      	movs	r3, #1
 8004d06:	82bb      	strh	r3, [r7, #20]
 8004d08:	e00e      	b.n	8004d28 <TM_SPIx_Init+0xd8>
	} else if (SPI_Mode == TM_SPI_Mode_2) {
 8004d0a:	78bb      	ldrb	r3, [r7, #2]
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d104      	bne.n	8004d1a <TM_SPIx_Init+0xca>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_High;
 8004d10:	2302      	movs	r3, #2
 8004d12:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8004d14:	2300      	movs	r3, #0
 8004d16:	82bb      	strh	r3, [r7, #20]
 8004d18:	e006      	b.n	8004d28 <TM_SPIx_Init+0xd8>
	} else if (SPI_Mode == TM_SPI_Mode_3) {
 8004d1a:	78bb      	ldrb	r3, [r7, #2]
 8004d1c:	2b03      	cmp	r3, #3
 8004d1e:	d103      	bne.n	8004d28 <TM_SPIx_Init+0xd8>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_High;
 8004d20:	2302      	movs	r3, #2
 8004d22:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_2Edge;
 8004d24:	2301      	movs	r3, #1
 8004d26:	82bb      	strh	r3, [r7, #20]
	}
	
	/* Disable first */
	SPIx->CR1 &= ~SPI_CR1_SPE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	801a      	strh	r2, [r3, #0]
	
	/* Init SPI */
	SPI_Init(SPIx, &SPI_InitStruct);
 8004d38:	f107 030c 	add.w	r3, r7, #12
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7fc f844 	bl	8000dcc <SPI_Init>
	
	/* Enable SPI */
	SPIx->CR1 |= SPI_CR1_SPE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	881b      	ldrh	r3, [r3, #0]
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	801a      	strh	r2, [r3, #0]
}
 8004d54:	bf00      	nop
 8004d56:	3720      	adds	r7, #32
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	40013000 	.word	0x40013000
 8004d60:	40023800 	.word	0x40023800
 8004d64:	40003800 	.word	0x40003800
 8004d68:	40003c00 	.word	0x40003c00

08004d6c <TM_SPI1_INT_InitPins>:

/* Private functions */
#ifdef USE_SPI1
void TM_SPI1_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af02      	add	r7, sp, #8
 8004d72:	4603      	mov	r3, r0
 8004d74:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOA)
	if (pinspack == TM_SPI_PinsPack_1) {
 8004d76:	79fb      	ldrb	r3, [r7, #7]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d109      	bne.n	8004d90 <TM_SPI1_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI1);
 8004d7c:	2305      	movs	r3, #5
 8004d7e:	9301      	str	r3, [sp, #4]
 8004d80:	2303      	movs	r3, #3
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	2300      	movs	r3, #0
 8004d86:	2200      	movs	r2, #0
 8004d88:	21e0      	movs	r1, #224	; 0xe0
 8004d8a:	480d      	ldr	r0, [pc, #52]	; (8004dc0 <TM_SPI1_INT_InitPins+0x54>)
 8004d8c:	f7ff fd83 	bl	8004896 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_2) {
 8004d90:	79fb      	ldrb	r3, [r7, #7]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d109      	bne.n	8004daa <TM_SPI1_INT_InitPins+0x3e>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI1);
 8004d96:	2305      	movs	r3, #5
 8004d98:	9301      	str	r3, [sp, #4]
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	2300      	movs	r3, #0
 8004da0:	2200      	movs	r2, #0
 8004da2:	2138      	movs	r1, #56	; 0x38
 8004da4:	4807      	ldr	r0, [pc, #28]	; (8004dc4 <TM_SPI1_INT_InitPins+0x58>)
 8004da6:	f7ff fd76 	bl	8004896 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8004daa:	79fb      	ldrb	r3, [r7, #7]
 8004dac:	2b03      	cmp	r3, #3
 8004dae:	d103      	bne.n	8004db8 <TM_SPI1_INT_InitPins+0x4c>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI1, GPIO_AF_SPI1);
 8004db0:	2105      	movs	r1, #5
 8004db2:	4805      	ldr	r0, [pc, #20]	; (8004dc8 <TM_SPI1_INT_InitPins+0x5c>)
 8004db4:	f7ff ff3f 	bl	8004c36 <TM_SPI_InitCustomPinsCallback>
	}
}
 8004db8:	bf00      	nop
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	40020000 	.word	0x40020000
 8004dc4:	40020400 	.word	0x40020400
 8004dc8:	40013000 	.word	0x40013000

08004dcc <TM_SPI2_INT_InitPins>:
#endif

#ifdef USE_SPI2
void TM_SPI2_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af02      	add	r7, sp, #8
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOB) && defined(GPIOC)
	if (pinspack == TM_SPI_PinsPack_1) {
 8004dd6:	79fb      	ldrb	r3, [r7, #7]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d114      	bne.n	8004e06 <TM_SPI2_INT_InitPins+0x3a>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8004ddc:	2305      	movs	r3, #5
 8004dde:	9301      	str	r3, [sp, #4]
 8004de0:	2303      	movs	r3, #3
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	2300      	movs	r3, #0
 8004de6:	2200      	movs	r2, #0
 8004de8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004dec:	4819      	ldr	r0, [pc, #100]	; (8004e54 <TM_SPI2_INT_InitPins+0x88>)
 8004dee:	f7ff fd52 	bl	8004896 <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_2 | GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8004df2:	2305      	movs	r3, #5
 8004df4:	9301      	str	r3, [sp, #4]
 8004df6:	2303      	movs	r3, #3
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	210c      	movs	r1, #12
 8004e00:	4815      	ldr	r0, [pc, #84]	; (8004e58 <TM_SPI2_INT_InitPins+0x8c>)
 8004e02:	f7ff fd48 	bl	8004896 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_2) {
 8004e06:	79fb      	ldrb	r3, [r7, #7]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d10a      	bne.n	8004e22 <TM_SPI2_INT_InitPins+0x56>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8004e0c:	2305      	movs	r3, #5
 8004e0e:	9301      	str	r3, [sp, #4]
 8004e10:	2303      	movs	r3, #3
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	2300      	movs	r3, #0
 8004e16:	2200      	movs	r2, #0
 8004e18:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8004e1c:	480d      	ldr	r0, [pc, #52]	; (8004e54 <TM_SPI2_INT_InitPins+0x88>)
 8004e1e:	f7ff fd3a 	bl	8004896 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOI)
	if (pinspack == TM_SPI_PinsPack_3) {
 8004e22:	79fb      	ldrb	r3, [r7, #7]
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d109      	bne.n	8004e3c <TM_SPI2_INT_InitPins+0x70>
		TM_GPIO_InitAlternate(GPIOI, GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8004e28:	2305      	movs	r3, #5
 8004e2a:	9301      	str	r3, [sp, #4]
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	2300      	movs	r3, #0
 8004e32:	2200      	movs	r2, #0
 8004e34:	210d      	movs	r1, #13
 8004e36:	4809      	ldr	r0, [pc, #36]	; (8004e5c <TM_SPI2_INT_InitPins+0x90>)
 8004e38:	f7ff fd2d 	bl	8004896 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8004e3c:	79fb      	ldrb	r3, [r7, #7]
 8004e3e:	2b03      	cmp	r3, #3
 8004e40:	d103      	bne.n	8004e4a <TM_SPI2_INT_InitPins+0x7e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI2, GPIO_AF_SPI2);
 8004e42:	2105      	movs	r1, #5
 8004e44:	4806      	ldr	r0, [pc, #24]	; (8004e60 <TM_SPI2_INT_InitPins+0x94>)
 8004e46:	f7ff fef6 	bl	8004c36 <TM_SPI_InitCustomPinsCallback>
	}
}
 8004e4a:	bf00      	nop
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	40020400 	.word	0x40020400
 8004e58:	40020800 	.word	0x40020800
 8004e5c:	40022000 	.word	0x40022000
 8004e60:	40003800 	.word	0x40003800

08004e64 <TM_SPI3_INT_InitPins>:
#endif

#ifdef USE_SPI3
void TM_SPI3_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af02      	add	r7, sp, #8
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	71fb      	strb	r3, [r7, #7]
	/* Enable SPI pins */
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_1) {
 8004e6e:	79fb      	ldrb	r3, [r7, #7]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d109      	bne.n	8004e88 <TM_SPI3_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI3);
 8004e74:	2306      	movs	r3, #6
 8004e76:	9301      	str	r3, [sp, #4]
 8004e78:	2303      	movs	r3, #3
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	2200      	movs	r2, #0
 8004e80:	2138      	movs	r1, #56	; 0x38
 8004e82:	480e      	ldr	r0, [pc, #56]	; (8004ebc <TM_SPI3_INT_InitPins+0x58>)
 8004e84:	f7ff fd07 	bl	8004896 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOC)
	if (pinspack == TM_SPI_PinsPack_2) {
 8004e88:	79fb      	ldrb	r3, [r7, #7]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d10a      	bne.n	8004ea4 <TM_SPI3_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI3);
 8004e8e:	2306      	movs	r3, #6
 8004e90:	9301      	str	r3, [sp, #4]
 8004e92:	2303      	movs	r3, #3
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	2300      	movs	r3, #0
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8004e9e:	4808      	ldr	r0, [pc, #32]	; (8004ec0 <TM_SPI3_INT_InitPins+0x5c>)
 8004ea0:	f7ff fcf9 	bl	8004896 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8004ea4:	79fb      	ldrb	r3, [r7, #7]
 8004ea6:	2b03      	cmp	r3, #3
 8004ea8:	d103      	bne.n	8004eb2 <TM_SPI3_INT_InitPins+0x4e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI3, GPIO_AF_SPI3);
 8004eaa:	2106      	movs	r1, #6
 8004eac:	4805      	ldr	r0, [pc, #20]	; (8004ec4 <TM_SPI3_INT_InitPins+0x60>)
 8004eae:	f7ff fec2 	bl	8004c36 <TM_SPI_InitCustomPinsCallback>
	}
}
 8004eb2:	bf00      	nop
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	40020400 	.word	0x40020400
 8004ec0:	40020800 	.word	0x40020800
 8004ec4:	40003c00 	.word	0x40003c00

08004ec8 <zero_dma_gnss_memory>:
}

//==========================================================================
/* USART BUFFER FUNCTIONS*/
void zero_dma_gnss_memory(void)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
		for (int i = 0; i < DMA_RX_BUFFER_SIZE; i++)
 8004ece:	2300      	movs	r3, #0
 8004ed0:	607b      	str	r3, [r7, #4]
 8004ed2:	e007      	b.n	8004ee4 <zero_dma_gnss_memory+0x1c>
		{
			DMA_RX_Buffer[i] = 0;
 8004ed4:	4a08      	ldr	r2, [pc, #32]	; (8004ef8 <zero_dma_gnss_memory+0x30>)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4413      	add	r3, r2
 8004eda:	2200      	movs	r2, #0
 8004edc:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < DMA_RX_BUFFER_SIZE; i++)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	607b      	str	r3, [r7, #4]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004eea:	dbf3      	blt.n	8004ed4 <zero_dma_gnss_memory+0xc>
		}
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr
 8004ef8:	20000b88 	.word	0x20000b88

08004efc <zero_gnss_memory>:
void zero_gnss_memory(void)
	{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
		for (int i = 0; i < GNSS_LOG_BUFFER_SIZE; i++){
 8004f02:	2300      	movs	r3, #0
 8004f04:	607b      	str	r3, [r7, #4]
 8004f06:	e007      	b.n	8004f18 <zero_gnss_memory+0x1c>
			GNSS_LOG_Buffer[i] = 0;
 8004f08:	4a08      	ldr	r2, [pc, #32]	; (8004f2c <zero_gnss_memory+0x30>)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	2200      	movs	r2, #0
 8004f10:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < GNSS_LOG_BUFFER_SIZE; i++){
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	3301      	adds	r3, #1
 8004f16:	607b      	str	r3, [r7, #4]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004f1e:	dbf3      	blt.n	8004f08 <zero_gnss_memory+0xc>
		}
	}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	20000394 	.word	0x20000394

08004f30 <USART1_IRQHandler>:
/*
 * called when USART has finished receiving
 * disables the stream
 */
void USART1_IRQHandler(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
	//idle line detection
	if(USART_GetFlagStatus(USART1,USART_FLAG_IDLE) != RESET)
 8004f36:	2110      	movs	r1, #16
 8004f38:	4812      	ldr	r0, [pc, #72]	; (8004f84 <USART1_IRQHandler+0x54>)
 8004f3a:	f7fb ffc0 	bl	8000ebe <USART_GetFlagStatus>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d01a      	beq.n	8004f7a <USART1_IRQHandler+0x4a>
	{
		//clear reg
		RX_COMPLETE_FLAG = 0;
 8004f44:	4b10      	ldr	r3, [pc, #64]	; (8004f88 <USART1_IRQHandler+0x58>)
 8004f46:	2200      	movs	r2, #0
 8004f48:	601a      	str	r2, [r3, #0]
		volatile uint32_t tmp;
		tmp = USART_GetITStatus(USART1, USART_IT_IDLE);
 8004f4a:	f240 4124 	movw	r1, #1060	; 0x424
 8004f4e:	480d      	ldr	r0, [pc, #52]	; (8004f84 <USART1_IRQHandler+0x54>)
 8004f50:	f7fb ffd1 	bl	8000ef6 <USART_GetITStatus>
 8004f54:	4603      	mov	r3, r0
 8004f56:	607b      	str	r3, [r7, #4]
		tmp = USART_ReceiveData(USART1);
 8004f58:	480a      	ldr	r0, [pc, #40]	; (8004f84 <USART1_IRQHandler+0x54>)
 8004f5a:	f7fb ffa0 	bl	8000e9e <USART_ReceiveData>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	607b      	str	r3, [r7, #4]
		(void)tmp;
 8004f62:	687b      	ldr	r3, [r7, #4]

		DMA_Cmd(DMA2_Stream2,DISABLE);
 8004f64:	2100      	movs	r1, #0
 8004f66:	4809      	ldr	r0, [pc, #36]	; (8004f8c <USART1_IRQHandler+0x5c>)
 8004f68:	f7fb fe84 	bl	8000c74 <DMA_Cmd>
		while(DMA_GetCmdStatus(DMA2_Stream2) != DISABLE);
 8004f6c:	bf00      	nop
 8004f6e:	4807      	ldr	r0, [pc, #28]	; (8004f8c <USART1_IRQHandler+0x5c>)
 8004f70:	f7fb fea9 	bl	8000cc6 <DMA_GetCmdStatus>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1f9      	bne.n	8004f6e <USART1_IRQHandler+0x3e>

	}

}
 8004f7a:	bf00      	nop
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	40011000 	.word	0x40011000
 8004f88:	20000b74 	.word	0x20000b74
 8004f8c:	40026440 	.word	0x40026440

08004f90 <DMA2_Stream2_IRQHandler>:

/* UART-MEM IRQ HANDLER */
#ifdef STM32_GNSS_USE_DMA
void DMA2_Stream2_IRQHandler(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
	//check transfer complete flag
	if(DMA_GetFlagStatus(DMA2_Stream2,DMA_FLAG_TCIF2) == SET)
 8004f94:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 8004f98:	4810      	ldr	r0, [pc, #64]	; (8004fdc <DMA2_Stream2_IRQHandler+0x4c>)
 8004f9a:	f7fb fead 	bl	8000cf8 <DMA_GetFlagStatus>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d119      	bne.n	8004fd8 <DMA2_Stream2_IRQHandler+0x48>
	{

		//set log to off
		RX_COMPLETE_FLAG = 0;
 8004fa4:	4b0e      	ldr	r3, [pc, #56]	; (8004fe0 <DMA2_Stream2_IRQHandler+0x50>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	601a      	str	r2, [r3, #0]
		//get data that still needs to be transferred
		gnss_length = DMA_RX_BUFFER_SIZE - DMA_GetCurrDataCounter(DMA2_Stream2);
 8004faa:	480c      	ldr	r0, [pc, #48]	; (8004fdc <DMA2_Stream2_IRQHandler+0x4c>)
 8004fac:	f7fb fe7e 	bl	8000cac <DMA_GetCurrDataCounter>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 8004fb6:	4a0b      	ldr	r2, [pc, #44]	; (8004fe4 <DMA2_Stream2_IRQHandler+0x54>)
 8004fb8:	6013      	str	r3, [r2, #0]
		//zero_gnss_memory();

		//clear USART-DMA Transfer bit
		DMA_ClearITPendingBit(DMA2_Stream2, DMA_IT_TCIF2);
 8004fba:	490b      	ldr	r1, [pc, #44]	; (8004fe8 <DMA2_Stream2_IRQHandler+0x58>)
 8004fbc:	4807      	ldr	r0, [pc, #28]	; (8004fdc <DMA2_Stream2_IRQHandler+0x4c>)
 8004fbe:	f7fb fed7 	bl	8000d70 <DMA_ClearITPendingBit>

		/* Enable DMA transfer to memory */
		#ifdef STM32_GMEM_USE_DMA
		DMA_Cmd(DMA2_Stream0, ENABLE);
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	4809      	ldr	r0, [pc, #36]	; (8004fec <DMA2_Stream2_IRQHandler+0x5c>)
 8004fc6:	f7fb fe55 	bl	8000c74 <DMA_Cmd>
		while (DMA_GetCmdStatus(DMA2_Stream0) != ENABLE) { ; }
 8004fca:	bf00      	nop
 8004fcc:	4807      	ldr	r0, [pc, #28]	; (8004fec <DMA2_Stream2_IRQHandler+0x5c>)
 8004fce:	f7fb fe7a 	bl	8000cc6 <DMA_GetCmdStatus>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d1f9      	bne.n	8004fcc <DMA2_Stream2_IRQHandler+0x3c>
		DMA_Cmd(DMA2_Stream2, ENABLE);
		while (DMA_GetCmdStatus(DMA_Stream_USART_GNSS_RX ) != ENABLE) { ; }
		#endif
	}

}
 8004fd8:	bf00      	nop
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	40026440 	.word	0x40026440
 8004fe0:	20000b74 	.word	0x20000b74
 8004fe4:	20000b64 	.word	0x20000b64
 8004fe8:	10208000 	.word	0x10208000
 8004fec:	40026410 	.word	0x40026410

08004ff0 <DMA2_Stream0_IRQHandler>:
#endif
/* MEM _ MEM IRQ HANDLER */
#ifdef STM32_GMEM_USE_DMA
void DMA2_Stream0_IRQHandler (void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
	/* Test on DMA Stream Transfer Complete interrupt */
	if (DMA_GetFlagStatus(DMA2_Stream0, DMA_FLAG_TCIF0) != RESET)
 8004ff6:	4934      	ldr	r1, [pc, #208]	; (80050c8 <DMA2_Stream0_IRQHandler+0xd8>)
 8004ff8:	4834      	ldr	r0, [pc, #208]	; (80050cc <DMA2_Stream0_IRQHandler+0xdc>)
 8004ffa:	f7fb fe7d 	bl	8000cf8 <DMA_GetFlagStatus>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d05d      	beq.n	80050c0 <DMA2_Stream0_IRQHandler+0xd0>
	{

		RX_COMPLETE_FLAG = 1;
 8005004:	4b32      	ldr	r3, [pc, #200]	; (80050d0 <DMA2_Stream0_IRQHandler+0xe0>)
 8005006:	2201      	movs	r2, #1
 8005008:	601a      	str	r2, [r3, #0]
		// transfer message to buffer
		char* msg;
		msg = strtok((char*)DMA_RX_Buffer,"$");
 800500a:	4932      	ldr	r1, [pc, #200]	; (80050d4 <DMA2_Stream0_IRQHandler+0xe4>)
 800500c:	4832      	ldr	r0, [pc, #200]	; (80050d8 <DMA2_Stream0_IRQHandler+0xe8>)
 800500e:	f001 ff07 	bl	8006e20 <strtok>
 8005012:	6078      	str	r0, [r7, #4]
		while(msg != NULL)
 8005014:	e03e      	b.n	8005094 <DMA2_Stream0_IRQHandler+0xa4>
		{
			switch(is_valid(msg))
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f866 	bl	80050e8 <is_valid>
 800501c:	4603      	mov	r3, r0
 800501e:	2b02      	cmp	r3, #2
 8005020:	d012      	beq.n	8005048 <DMA2_Stream0_IRQHandler+0x58>
 8005022:	2b03      	cmp	r3, #3
 8005024:	d01e      	beq.n	8005064 <DMA2_Stream0_IRQHandler+0x74>
 8005026:	2b01      	cmp	r3, #1
 8005028:	d000      	beq.n	800502c <DMA2_Stream0_IRQHandler+0x3c>
						packet_full |= 0b100;
					}
					break;
				default:
					// invalid case
					break;
 800502a:	e02e      	b.n	800508a <DMA2_Stream0_IRQHandler+0x9a>
					if(Parse_GLL(msg) == 2)
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 f9d1 	bl	80053d4 <Parse_GLL>
 8005032:	4603      	mov	r3, r0
 8005034:	2b02      	cmp	r3, #2
 8005036:	d123      	bne.n	8005080 <DMA2_Stream0_IRQHandler+0x90>
						packet_full |= 0b1;
 8005038:	4b28      	ldr	r3, [pc, #160]	; (80050dc <DMA2_Stream0_IRQHandler+0xec>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	f043 0301 	orr.w	r3, r3, #1
 8005040:	b2da      	uxtb	r2, r3
 8005042:	4b26      	ldr	r3, [pc, #152]	; (80050dc <DMA2_Stream0_IRQHandler+0xec>)
 8005044:	701a      	strb	r2, [r3, #0]
					break;
 8005046:	e01b      	b.n	8005080 <DMA2_Stream0_IRQHandler+0x90>
					if(parse_GSA(msg) == 0)
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 fa5b 	bl	8005504 <parse_GSA>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d117      	bne.n	8005084 <DMA2_Stream0_IRQHandler+0x94>
						packet_full |= 0b10;
 8005054:	4b21      	ldr	r3, [pc, #132]	; (80050dc <DMA2_Stream0_IRQHandler+0xec>)
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	f043 0302 	orr.w	r3, r3, #2
 800505c:	b2da      	uxtb	r2, r3
 800505e:	4b1f      	ldr	r3, [pc, #124]	; (80050dc <DMA2_Stream0_IRQHandler+0xec>)
 8005060:	701a      	strb	r2, [r3, #0]
					break;
 8005062:	e00f      	b.n	8005084 <DMA2_Stream0_IRQHandler+0x94>
					if(parse_ZDA(msg) == 0)
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f8ed 	bl	8005244 <parse_ZDA>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10b      	bne.n	8005088 <DMA2_Stream0_IRQHandler+0x98>
						packet_full |= 0b100;
 8005070:	4b1a      	ldr	r3, [pc, #104]	; (80050dc <DMA2_Stream0_IRQHandler+0xec>)
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	f043 0304 	orr.w	r3, r3, #4
 8005078:	b2da      	uxtb	r2, r3
 800507a:	4b18      	ldr	r3, [pc, #96]	; (80050dc <DMA2_Stream0_IRQHandler+0xec>)
 800507c:	701a      	strb	r2, [r3, #0]
					break;
 800507e:	e003      	b.n	8005088 <DMA2_Stream0_IRQHandler+0x98>
					break;
 8005080:	bf00      	nop
 8005082:	e002      	b.n	800508a <DMA2_Stream0_IRQHandler+0x9a>
					break;
 8005084:	bf00      	nop
 8005086:	e000      	b.n	800508a <DMA2_Stream0_IRQHandler+0x9a>
					break;
 8005088:	bf00      	nop
			}
			msg = strtok(NULL,"$");
 800508a:	4912      	ldr	r1, [pc, #72]	; (80050d4 <DMA2_Stream0_IRQHandler+0xe4>)
 800508c:	2000      	movs	r0, #0
 800508e:	f001 fec7 	bl	8006e20 <strtok>
 8005092:	6078      	str	r0, [r7, #4]
		while(msg != NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1bd      	bne.n	8005016 <DMA2_Stream0_IRQHandler+0x26>
		}
		zero_dma_gnss_memory();
 800509a:	f7ff ff15 	bl	8004ec8 <zero_dma_gnss_memory>
		zero_gnss_memory();
 800509e:	f7ff ff2d 	bl	8004efc <zero_gnss_memory>
		/* Clear DMA Stream Transfer Complete interrupt pending bit */
		DMA_ClearITPendingBit(DMA2_Stream0, DMA_IT_TCIF0);
 80050a2:	490f      	ldr	r1, [pc, #60]	; (80050e0 <DMA2_Stream0_IRQHandler+0xf0>)
 80050a4:	4809      	ldr	r0, [pc, #36]	; (80050cc <DMA2_Stream0_IRQHandler+0xdc>)
 80050a6:	f7fb fe63 	bl	8000d70 <DMA_ClearITPendingBit>

		/* Enable DMA transfer */
		DMA_Cmd(DMA2_Stream2, ENABLE);
 80050aa:	2101      	movs	r1, #1
 80050ac:	480d      	ldr	r0, [pc, #52]	; (80050e4 <DMA2_Stream0_IRQHandler+0xf4>)
 80050ae:	f7fb fde1 	bl	8000c74 <DMA_Cmd>
		while (DMA_GetCmdStatus(DMA2_Stream2 ) != ENABLE);
 80050b2:	bf00      	nop
 80050b4:	480b      	ldr	r0, [pc, #44]	; (80050e4 <DMA2_Stream0_IRQHandler+0xf4>)
 80050b6:	f7fb fe06 	bl	8000cc6 <DMA_GetCmdStatus>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d1f9      	bne.n	80050b4 <DMA2_Stream0_IRQHandler+0xc4>

	}
}
 80050c0:	bf00      	nop
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	10000020 	.word	0x10000020
 80050cc:	40026410 	.word	0x40026410
 80050d0:	20000b74 	.word	0x20000b74
 80050d4:	08008f0c 	.word	0x08008f0c
 80050d8:	20000b88 	.word	0x20000b88
 80050dc:	20000b7c 	.word	0x20000b7c
 80050e0:	10008020 	.word	0x10008020
 80050e4:	40026440 	.word	0x40026440

080050e8 <is_valid>:
 *   1 GLL msg
 *   2 GGA msg
 *   3 ZDA msg
 */
uint8_t is_valid(char* nmeamsg)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b088      	sub	sp, #32
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
	uint8_t flag = 0;
 80050f0:	2300      	movs	r3, #0
 80050f2:	77fb      	strb	r3, [r7, #31]

	char msg[4] = {0};
 80050f4:	2300      	movs	r3, #0
 80050f6:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 80050f8:	2300      	movs	r3, #0
 80050fa:	61bb      	str	r3, [r7, #24]
 80050fc:	e00d      	b.n	800511a <is_valid+0x32>
	{
		msg[i] = *(nmeamsg+2+i);
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	3302      	adds	r3, #2
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	4413      	add	r3, r2
 8005106:	7819      	ldrb	r1, [r3, #0]
 8005108:	f107 020c 	add.w	r2, r7, #12
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	4413      	add	r3, r2
 8005110:	460a      	mov	r2, r1
 8005112:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; ++i)
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	3301      	adds	r3, #1
 8005118:	61bb      	str	r3, [r7, #24]
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	2b02      	cmp	r3, #2
 800511e:	ddee      	ble.n	80050fe <is_valid+0x16>
	}
	if((strcmp((char*)msg,"GLL") != 0))
 8005120:	f107 030c 	add.w	r3, r7, #12
 8005124:	492c      	ldr	r1, [pc, #176]	; (80051d8 <is_valid+0xf0>)
 8005126:	4618      	mov	r0, r3
 8005128:	f7fb f852 	bl	80001d0 <strcmp>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d019      	beq.n	8005166 <is_valid+0x7e>
	{

		if (strcmp((char*)msg,"ZDA") != 0)
 8005132:	f107 030c 	add.w	r3, r7, #12
 8005136:	4929      	ldr	r1, [pc, #164]	; (80051dc <is_valid+0xf4>)
 8005138:	4618      	mov	r0, r3
 800513a:	f7fb f849 	bl	80001d0 <strcmp>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00d      	beq.n	8005160 <is_valid+0x78>
		{
			if(strcmp((char*)msg,"GSA") != 0)
 8005144:	f107 030c 	add.w	r3, r7, #12
 8005148:	4925      	ldr	r1, [pc, #148]	; (80051e0 <is_valid+0xf8>)
 800514a:	4618      	mov	r0, r3
 800514c:	f7fb f840 	bl	80001d0 <strcmp>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d001      	beq.n	800515a <is_valid+0x72>
			{
				return -1;
 8005156:	23ff      	movs	r3, #255	; 0xff
 8005158:	e039      	b.n	80051ce <is_valid+0xe6>
			}
			else
			{
				flag = 2;
 800515a:	2302      	movs	r3, #2
 800515c:	77fb      	strb	r3, [r7, #31]
 800515e:	e004      	b.n	800516a <is_valid+0x82>
			}
		}else
		{
			flag = 3;
 8005160:	2303      	movs	r3, #3
 8005162:	77fb      	strb	r3, [r7, #31]
 8005164:	e001      	b.n	800516a <is_valid+0x82>
		}

	}
	else
	{
		flag = 1;
 8005166:	2301      	movs	r3, #1
 8005168:	77fb      	strb	r3, [r7, #31]
	}
	/* check sum */
	uint16_t checksum = 0;
 800516a:	2300      	movs	r3, #0
 800516c:	82fb      	strh	r3, [r7, #22]
	while(*nmeamsg != '*')
 800516e:	e008      	b.n	8005182 <is_valid+0x9a>
	{
		checksum^= *nmeamsg;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	b29a      	uxth	r2, r3
 8005176:	8afb      	ldrh	r3, [r7, #22]
 8005178:	4053      	eors	r3, r2
 800517a:	82fb      	strh	r3, [r7, #22]
		nmeamsg++;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3301      	adds	r3, #1
 8005180:	607b      	str	r3, [r7, #4]
	while(*nmeamsg != '*')
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	2b2a      	cmp	r3, #42	; 0x2a
 8005188:	d1f2      	bne.n	8005170 <is_valid+0x88>
	}
	uint8_t h = char_to_hex(*(++nmeamsg))*16;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	3301      	adds	r3, #1
 800518e:	607b      	str	r3, [r7, #4]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	4618      	mov	r0, r3
 8005196:	f000 f825 	bl	80051e4 <char_to_hex>
 800519a:	4603      	mov	r3, r0
 800519c:	011b      	lsls	r3, r3, #4
 800519e:	757b      	strb	r3, [r7, #21]
	uint8_t l = char_to_hex(*(++nmeamsg));
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	3301      	adds	r3, #1
 80051a4:	607b      	str	r3, [r7, #4]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f000 f81a 	bl	80051e4 <char_to_hex>
 80051b0:	4603      	mov	r3, r0
 80051b2:	753b      	strb	r3, [r7, #20]
	uint16_t checkbyte= h+l;
 80051b4:	7d7b      	ldrb	r3, [r7, #21]
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	7d3b      	ldrb	r3, [r7, #20]
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	4413      	add	r3, r2
 80051be:	827b      	strh	r3, [r7, #18]

	if(!(checksum == checkbyte))
 80051c0:	8afa      	ldrh	r2, [r7, #22]
 80051c2:	8a7b      	ldrh	r3, [r7, #18]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d001      	beq.n	80051cc <is_valid+0xe4>
	{
		return -1;
 80051c8:	23ff      	movs	r3, #255	; 0xff
 80051ca:	e000      	b.n	80051ce <is_valid+0xe6>
	}

	return flag;
 80051cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3720      	adds	r7, #32
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	08008f10 	.word	0x08008f10
 80051dc:	08008f14 	.word	0x08008f14
 80051e0:	08008f18 	.word	0x08008f18

080051e4 <char_to_hex>:
/*
 * Flag keeps track of successful coordinate retrievals
 */
uint8_t char_to_hex(char c)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	4603      	mov	r3, r0
 80051ec:	71fb      	strb	r3, [r7, #7]
	if(c == '\0')
 80051ee:	79fb      	ldrb	r3, [r7, #7]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <char_to_hex+0x14>
	{
		return 0;
 80051f4:	2300      	movs	r3, #0
 80051f6:	e01e      	b.n	8005236 <char_to_hex+0x52>
	}
	if ((c >='0') &&(c <='9'))
 80051f8:	79fb      	ldrb	r3, [r7, #7]
 80051fa:	2b2f      	cmp	r3, #47	; 0x2f
 80051fc:	d906      	bls.n	800520c <char_to_hex+0x28>
 80051fe:	79fb      	ldrb	r3, [r7, #7]
 8005200:	2b39      	cmp	r3, #57	; 0x39
 8005202:	d803      	bhi.n	800520c <char_to_hex+0x28>
	{
		return (uint8_t)c - 48;
 8005204:	79fb      	ldrb	r3, [r7, #7]
 8005206:	3b30      	subs	r3, #48	; 0x30
 8005208:	b2db      	uxtb	r3, r3
 800520a:	e014      	b.n	8005236 <char_to_hex+0x52>
	}
	if((c >='a') &&(c <='f'))
 800520c:	79fb      	ldrb	r3, [r7, #7]
 800520e:	2b60      	cmp	r3, #96	; 0x60
 8005210:	d906      	bls.n	8005220 <char_to_hex+0x3c>
 8005212:	79fb      	ldrb	r3, [r7, #7]
 8005214:	2b66      	cmp	r3, #102	; 0x66
 8005216:	d803      	bhi.n	8005220 <char_to_hex+0x3c>
	{
		return (uint8_t)c - 87;
 8005218:	79fb      	ldrb	r3, [r7, #7]
 800521a:	3b57      	subs	r3, #87	; 0x57
 800521c:	b2db      	uxtb	r3, r3
 800521e:	e00a      	b.n	8005236 <char_to_hex+0x52>
	}
	if((c >='A') &&(c <='F'))
 8005220:	79fb      	ldrb	r3, [r7, #7]
 8005222:	2b40      	cmp	r3, #64	; 0x40
 8005224:	d906      	bls.n	8005234 <char_to_hex+0x50>
 8005226:	79fb      	ldrb	r3, [r7, #7]
 8005228:	2b46      	cmp	r3, #70	; 0x46
 800522a:	d803      	bhi.n	8005234 <char_to_hex+0x50>
	{
		return (uint8_t)c - 55;
 800522c:	79fb      	ldrb	r3, [r7, #7]
 800522e:	3b37      	subs	r3, #55	; 0x37
 8005230:	b2db      	uxtb	r3, r3
 8005232:	e000      	b.n	8005236 <char_to_hex+0x52>
	}
	return -1; //invalid charachter
 8005234:	23ff      	movs	r3, #255	; 0xff
}
 8005236:	4618      	mov	r0, r3
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
	...

08005244 <parse_ZDA>:
/*
 * Parser Functions:
 * Extract key data from NMEA message strings.
 */
uint8_t parse_ZDA(char* ZDAstring)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b088      	sub	sp, #32
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
	time_t t;
	struct tm *timepointer;

	t = time(NULL);
 800524c:	2000      	movs	r0, #0
 800524e:	f001 fe3b 	bl	8006ec8 <time>
 8005252:	4603      	mov	r3, r0
 8005254:	60fb      	str	r3, [r7, #12]
	timepointer = localtime(&t);
 8005256:	f107 030c 	add.w	r3, r7, #12
 800525a:	4618      	mov	r0, r3
 800525c:	f000 fb9c 	bl	8005998 <localtime>
 8005260:	61b8      	str	r0, [r7, #24]
	/* Get UTC time*/
	while(*ZDAstring++ != ',');
 8005262:	bf00      	nop
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	607a      	str	r2, [r7, #4]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	2b2c      	cmp	r3, #44	; 0x2c
 800526e:	d1f9      	bne.n	8005264 <parse_ZDA+0x20>
	char* temp = ZDAstring++;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	1c5a      	adds	r2, r3, #1
 8005274:	607a      	str	r2, [r7, #4]
 8005276:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < strlen(ZDAstring); ++i)
 8005278:	2300      	movs	r3, #0
 800527a:	61fb      	str	r3, [r7, #28]
 800527c:	e011      	b.n	80052a2 <parse_ZDA+0x5e>
	{
		if ((ZDAstring[i]==',')&&(ZDAstring[i+1] == ','))
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	4413      	add	r3, r2
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	2b2c      	cmp	r3, #44	; 0x2c
 8005288:	d108      	bne.n	800529c <parse_ZDA+0x58>
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	3301      	adds	r3, #1
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	4413      	add	r3, r2
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	2b2c      	cmp	r3, #44	; 0x2c
 8005296:	d101      	bne.n	800529c <parse_ZDA+0x58>
		{
			/* Data is invalid*/
			return -1;
 8005298:	23ff      	movs	r3, #255	; 0xff
 800529a:	e094      	b.n	80053c6 <parse_ZDA+0x182>
	for (int i = 0; i < strlen(ZDAstring); ++i)
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	3301      	adds	r3, #1
 80052a0:	61fb      	str	r3, [r7, #28]
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7fa ff9e 	bl	80001e4 <strlen>
 80052a8:	4602      	mov	r2, r0
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d8e6      	bhi.n	800527e <parse_ZDA+0x3a>
		}
	}
	timepointer->tm_hour = (temp[0]-48)*10+ (temp[1]-48)+2;
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80052b8:	4613      	mov	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	461a      	mov	r2, r3
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	3301      	adds	r3, #1
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	3b30      	subs	r3, #48	; 0x30
 80052ca:	4413      	add	r3, r2
 80052cc:	1c9a      	adds	r2, r3, #2
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	609a      	str	r2, [r3, #8]
	timepointer->tm_min = (temp[2]-48)*10+ (temp[3]-48)-1;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	3302      	adds	r3, #2
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80052dc:	4613      	mov	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4413      	add	r3, r2
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	461a      	mov	r2, r3
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	3303      	adds	r3, #3
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	3b30      	subs	r3, #48	; 0x30
 80052ee:	4413      	add	r3, r2
 80052f0:	1e5a      	subs	r2, r3, #1
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	605a      	str	r2, [r3, #4]
	timepointer->tm_sec = (temp[4]-48)*10+ (temp[5]-48) -1 ;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	3304      	adds	r3, #4
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005300:	4613      	mov	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	005b      	lsls	r3, r3, #1
 8005308:	461a      	mov	r2, r3
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	3305      	adds	r3, #5
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	3b30      	subs	r3, #48	; 0x30
 8005312:	4413      	add	r3, r2
 8005314:	1e5a      	subs	r2, r3, #1
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	601a      	str	r2, [r3, #0]
	while(*ZDAstring++ != ',');
 800531a:	bf00      	nop
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	1c5a      	adds	r2, r3, #1
 8005320:	607a      	str	r2, [r7, #4]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	2b2c      	cmp	r3, #44	; 0x2c
 8005326:	d1f9      	bne.n	800531c <parse_ZDA+0xd8>
	temp = ZDAstring;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	617b      	str	r3, [r7, #20]
	timepointer->tm_mday = (temp[0]-48)*10+ (temp[1]-48);
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005334:	4613      	mov	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	005b      	lsls	r3, r3, #1
 800533c:	461a      	mov	r2, r3
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	3301      	adds	r3, #1
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	3b30      	subs	r3, #48	; 0x30
 8005346:	441a      	add	r2, r3
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	60da      	str	r2, [r3, #12]
	timepointer->tm_mon = (temp[3]-48)*10+ (temp[4]-48)-1;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	3303      	adds	r3, #3
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005356:	4613      	mov	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	461a      	mov	r2, r3
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	3304      	adds	r3, #4
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	3b30      	subs	r3, #48	; 0x30
 8005368:	4413      	add	r3, r2
 800536a:	1e5a      	subs	r2, r3, #1
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	611a      	str	r2, [r3, #16]
	timepointer->tm_year = (temp[6]-48)*1000 +(temp[7]-48)*100 + (temp[8]-48)*10 +(temp[9]-48)-1900;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	3306      	adds	r3, #6
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	3b30      	subs	r3, #48	; 0x30
 8005378:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800537c:	fb02 f203 	mul.w	r2, r2, r3
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	3307      	adds	r3, #7
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	3b30      	subs	r3, #48	; 0x30
 8005388:	2164      	movs	r1, #100	; 0x64
 800538a:	fb01 f303 	mul.w	r3, r1, r3
 800538e:	18d1      	adds	r1, r2, r3
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	3308      	adds	r3, #8
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800539a:	4613      	mov	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	18ca      	adds	r2, r1, r3
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	3309      	adds	r3, #9
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	3b30      	subs	r3, #48	; 0x30
 80053ac:	4413      	add	r3, r2
 80053ae:	f2a3 726c 	subw	r2, r3, #1900	; 0x76c
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	615a      	str	r2, [r3, #20]
	time_t result;

	 result = mktime(timepointer);
 80053b6:	69b8      	ldr	r0, [r7, #24]
 80053b8:	f000 fcd4 	bl	8005d64 <mktime>
 80053bc:	6138      	str	r0, [r7, #16]
	 eTime =  result;
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	4a03      	ldr	r2, [pc, #12]	; (80053d0 <parse_ZDA+0x18c>)
 80053c2:	6013      	str	r3, [r2, #0]
	return 0;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3720      	adds	r7, #32
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	20000b78 	.word	0x20000b78

080053d4 <Parse_GLL>:
uint8_t Parse_GLL(char* GLLstring)
{
 80053d4:	b5b0      	push	{r4, r5, r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
	/* Extract latitude*/
	uint8_t flag = 0;
 80053dc:	2300      	movs	r3, #0
 80053de:	75fb      	strb	r3, [r7, #23]
	GLLstring+= 6;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3306      	adds	r3, #6
 80053e4:	607b      	str	r3, [r7, #4]
	char* temp = GLLstring;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	613b      	str	r3, [r7, #16]
	uint8_t count = 0;
 80053ea:	2300      	movs	r3, #0
 80053ec:	75bb      	strb	r3, [r7, #22]
	while(*GLLstring++ != ',')
 80053ee:	e002      	b.n	80053f6 <Parse_GLL+0x22>
	{
		count++;
 80053f0:	7dbb      	ldrb	r3, [r7, #22]
 80053f2:	3301      	adds	r3, #1
 80053f4:	75bb      	strb	r3, [r7, #22]
	while(*GLLstring++ != ',')
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	1c5a      	adds	r2, r3, #1
 80053fa:	607a      	str	r2, [r7, #4]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	2b2c      	cmp	r3, #44	; 0x2c
 8005400:	d1f6      	bne.n	80053f0 <Parse_GLL+0x1c>
	}
	if((count > 0))
 8005402:	7dbb      	ldrb	r3, [r7, #22]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d02e      	beq.n	8005466 <Parse_GLL+0x92>
	{
		temp[count] = '\0';
 8005408:	7dbb      	ldrb	r3, [r7, #22]
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	4413      	add	r3, r2
 800540e:	2200      	movs	r2, #0
 8005410:	701a      	strb	r2, [r3, #0]
		int8_t sign = 1 -2*( temp[++count] =='S');
 8005412:	7dbb      	ldrb	r3, [r7, #22]
 8005414:	3301      	adds	r3, #1
 8005416:	75bb      	strb	r3, [r7, #22]
 8005418:	7dbb      	ldrb	r3, [r7, #22]
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	4413      	add	r3, r2
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	2b53      	cmp	r3, #83	; 0x53
 8005422:	d102      	bne.n	800542a <Parse_GLL+0x56>
 8005424:	f04f 33ff 	mov.w	r3, #4294967295
 8005428:	e000      	b.n	800542c <Parse_GLL+0x58>
 800542a:	2301      	movs	r3, #1
 800542c:	73fb      	strb	r3, [r7, #15]
		GPS_coord.lat = sign*atof(temp);
 800542e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005432:	4618      	mov	r0, r3
 8005434:	f7fb f886 	bl	8000544 <__aeabi_i2d>
 8005438:	4604      	mov	r4, r0
 800543a:	460d      	mov	r5, r1
 800543c:	6938      	ldr	r0, [r7, #16]
 800543e:	f000 fa83 	bl	8005948 <atof>
 8005442:	ec53 2b10 	vmov	r2, r3, d0
 8005446:	4620      	mov	r0, r4
 8005448:	4629      	mov	r1, r5
 800544a:	f7fb f8e1 	bl	8000610 <__aeabi_dmul>
 800544e:	4603      	mov	r3, r0
 8005450:	460c      	mov	r4, r1
 8005452:	4618      	mov	r0, r3
 8005454:	4621      	mov	r1, r4
 8005456:	f7fb fbbd 	bl	8000bd4 <__aeabi_d2f>
 800545a:	4602      	mov	r2, r0
 800545c:	4b28      	ldr	r3, [pc, #160]	; (8005500 <Parse_GLL+0x12c>)
 800545e:	601a      	str	r2, [r3, #0]
		flag++;
 8005460:	7dfb      	ldrb	r3, [r7, #23]
 8005462:	3301      	adds	r3, #1
 8005464:	75fb      	strb	r3, [r7, #23]
	}

	/* Extract longitude */
	while(*GLLstring++ !=',');
 8005466:	bf00      	nop
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	1c5a      	adds	r2, r3, #1
 800546c:	607a      	str	r2, [r7, #4]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	2b2c      	cmp	r3, #44	; 0x2c
 8005472:	d1f9      	bne.n	8005468 <Parse_GLL+0x94>
	temp = GLLstring;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	613b      	str	r3, [r7, #16]
	count = 0;
 8005478:	2300      	movs	r3, #0
 800547a:	75bb      	strb	r3, [r7, #22]
	while(*GLLstring++ != ',')
 800547c:	e002      	b.n	8005484 <Parse_GLL+0xb0>
	{
			count++;
 800547e:	7dbb      	ldrb	r3, [r7, #22]
 8005480:	3301      	adds	r3, #1
 8005482:	75bb      	strb	r3, [r7, #22]
	while(*GLLstring++ != ',')
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	1c5a      	adds	r2, r3, #1
 8005488:	607a      	str	r2, [r7, #4]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	2b2c      	cmp	r3, #44	; 0x2c
 800548e:	d1f6      	bne.n	800547e <Parse_GLL+0xaa>
	}
	if((count > 0))
 8005490:	7dbb      	ldrb	r3, [r7, #22]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d02e      	beq.n	80054f4 <Parse_GLL+0x120>
	{
			temp[count] = '\0';
 8005496:	7dbb      	ldrb	r3, [r7, #22]
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	4413      	add	r3, r2
 800549c:	2200      	movs	r2, #0
 800549e:	701a      	strb	r2, [r3, #0]
			int8_t sign = 1 -2*( temp[++count] =='W');
 80054a0:	7dbb      	ldrb	r3, [r7, #22]
 80054a2:	3301      	adds	r3, #1
 80054a4:	75bb      	strb	r3, [r7, #22]
 80054a6:	7dbb      	ldrb	r3, [r7, #22]
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	4413      	add	r3, r2
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	2b57      	cmp	r3, #87	; 0x57
 80054b0:	d102      	bne.n	80054b8 <Parse_GLL+0xe4>
 80054b2:	f04f 33ff 	mov.w	r3, #4294967295
 80054b6:	e000      	b.n	80054ba <Parse_GLL+0xe6>
 80054b8:	2301      	movs	r3, #1
 80054ba:	73bb      	strb	r3, [r7, #14]
			GPS_coord.longi = sign*atof(temp);
 80054bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fb f83f 	bl	8000544 <__aeabi_i2d>
 80054c6:	4604      	mov	r4, r0
 80054c8:	460d      	mov	r5, r1
 80054ca:	6938      	ldr	r0, [r7, #16]
 80054cc:	f000 fa3c 	bl	8005948 <atof>
 80054d0:	ec53 2b10 	vmov	r2, r3, d0
 80054d4:	4620      	mov	r0, r4
 80054d6:	4629      	mov	r1, r5
 80054d8:	f7fb f89a 	bl	8000610 <__aeabi_dmul>
 80054dc:	4603      	mov	r3, r0
 80054de:	460c      	mov	r4, r1
 80054e0:	4618      	mov	r0, r3
 80054e2:	4621      	mov	r1, r4
 80054e4:	f7fb fb76 	bl	8000bd4 <__aeabi_d2f>
 80054e8:	4602      	mov	r2, r0
 80054ea:	4b05      	ldr	r3, [pc, #20]	; (8005500 <Parse_GLL+0x12c>)
 80054ec:	605a      	str	r2, [r3, #4]
			flag++;
 80054ee:	7dfb      	ldrb	r3, [r7, #23]
 80054f0:	3301      	adds	r3, #1
 80054f2:	75fb      	strb	r3, [r7, #23]

	}

return flag;
 80054f4:	7dfb      	ldrb	r3, [r7, #23]

}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3718      	adds	r7, #24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bdb0      	pop	{r4, r5, r7, pc}
 80054fe:	bf00      	nop
 8005500:	20000b80 	.word	0x20000b80

08005504 <parse_GSA>:
uint8_t parse_GSA(char* GSA_string)
{
 8005504:	b480      	push	{r7}
 8005506:	b089      	sub	sp, #36	; 0x24
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
	/* Isolate Dilation of Precisions*/
	uint8_t count = 0;
 800550c:	2300      	movs	r3, #0
 800550e:	77fb      	strb	r3, [r7, #31]
	char* t = GSA_string;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	61bb      	str	r3, [r7, #24]
	while(count < 2)
 8005514:	e008      	b.n	8005528 <parse_GSA+0x24>
	{
		if(*t++==',')count++;
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	1c5a      	adds	r2, r3, #1
 800551a:	61ba      	str	r2, [r7, #24]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	2b2c      	cmp	r3, #44	; 0x2c
 8005520:	d102      	bne.n	8005528 <parse_GSA+0x24>
 8005522:	7ffb      	ldrb	r3, [r7, #31]
 8005524:	3301      	adds	r3, #1
 8005526:	77fb      	strb	r3, [r7, #31]
	while(count < 2)
 8005528:	7ffb      	ldrb	r3, [r7, #31]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d9f3      	bls.n	8005516 <parse_GSA+0x12>
	}
	diag.fix_type = (*t++-48);
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	1c5a      	adds	r2, r3, #1
 8005532:	61ba      	str	r2, [r7, #24]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	3b30      	subs	r3, #48	; 0x30
 8005538:	b2da      	uxtb	r2, r3
 800553a:	4b45      	ldr	r3, [pc, #276]	; (8005650 <parse_GSA+0x14c>)
 800553c:	71da      	strb	r2, [r3, #7]

	//field 3 - 15 indicate satelites
	uint8_t numsats = 0;
 800553e:	2300      	movs	r3, #0
 8005540:	75fb      	strb	r3, [r7, #23]
	uint8_t numfields = 0;
 8005542:	2300      	movs	r3, #0
 8005544:	75bb      	strb	r3, [r7, #22]
	while(numfields < 12)
 8005546:	e015      	b.n	8005574 <parse_GSA+0x70>
	{
		uint8_t count = 0;
 8005548:	2300      	movs	r3, #0
 800554a:	757b      	strb	r3, [r7, #21]
		while(*++t !=',')count++;
 800554c:	e002      	b.n	8005554 <parse_GSA+0x50>
 800554e:	7d7b      	ldrb	r3, [r7, #21]
 8005550:	3301      	adds	r3, #1
 8005552:	757b      	strb	r3, [r7, #21]
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	3301      	adds	r3, #1
 8005558:	61bb      	str	r3, [r7, #24]
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	2b2c      	cmp	r3, #44	; 0x2c
 8005560:	d1f5      	bne.n	800554e <parse_GSA+0x4a>
		if(count > 0)
 8005562:	7d7b      	ldrb	r3, [r7, #21]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d002      	beq.n	800556e <parse_GSA+0x6a>
		{
			numsats++;
 8005568:	7dfb      	ldrb	r3, [r7, #23]
 800556a:	3301      	adds	r3, #1
 800556c:	75fb      	strb	r3, [r7, #23]
		}
		numfields++;
 800556e:	7dbb      	ldrb	r3, [r7, #22]
 8005570:	3301      	adds	r3, #1
 8005572:	75bb      	strb	r3, [r7, #22]
	while(numfields < 12)
 8005574:	7dbb      	ldrb	r3, [r7, #22]
 8005576:	2b0b      	cmp	r3, #11
 8005578:	d9e6      	bls.n	8005548 <parse_GSA+0x44>

	}
	diag.num_sats = numsats;
 800557a:	4a35      	ldr	r2, [pc, #212]	; (8005650 <parse_GSA+0x14c>)
 800557c:	7dfb      	ldrb	r3, [r7, #23]
 800557e:	7193      	strb	r3, [r2, #6]
	DOP_t dop[3] = {0};
 8005580:	f107 0308 	add.w	r3, r7, #8
 8005584:	2200      	movs	r2, #0
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	809a      	strh	r2, [r3, #4]
	for (int i = 0; i < 3; ++i)
 800558a:	2300      	movs	r3, #0
 800558c:	613b      	str	r3, [r7, #16]
 800558e:	e043      	b.n	8005618 <parse_GSA+0x114>
	{
		//get digit
		while(*++t != '.')
		{
			dop[i].digit = dop[i].digit*10 +(*t-48);
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	005b      	lsls	r3, r3, #1
 8005594:	f107 0220 	add.w	r2, r7, #32
 8005598:	4413      	add	r3, r2
 800559a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800559e:	461a      	mov	r2, r3
 80055a0:	0092      	lsls	r2, r2, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	005b      	lsls	r3, r3, #1
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	4413      	add	r3, r2
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	3b30      	subs	r3, #48	; 0x30
 80055b2:	b2da      	uxtb	r2, r3
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	005b      	lsls	r3, r3, #1
 80055b8:	f107 0120 	add.w	r1, r7, #32
 80055bc:	440b      	add	r3, r1
 80055be:	f803 2c18 	strb.w	r2, [r3, #-24]
		while(*++t != '.')
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	3301      	adds	r3, #1
 80055c6:	61bb      	str	r3, [r7, #24]
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	2b2e      	cmp	r3, #46	; 0x2e
 80055ce:	d1df      	bne.n	8005590 <parse_GSA+0x8c>
		}
		while(*++t != ',')
 80055d0:	e018      	b.n	8005604 <parse_GSA+0x100>
		{
			dop[i].precision = dop[i].precision*10+(*t-48);
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	005b      	lsls	r3, r3, #1
 80055d6:	f107 0220 	add.w	r2, r7, #32
 80055da:	4413      	add	r3, r2
 80055dc:	f813 3c17 	ldrb.w	r3, [r3, #-23]
 80055e0:	461a      	mov	r2, r3
 80055e2:	0092      	lsls	r2, r2, #2
 80055e4:	4413      	add	r3, r2
 80055e6:	005b      	lsls	r3, r3, #1
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	4413      	add	r3, r2
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	3b30      	subs	r3, #48	; 0x30
 80055f4:	b2da      	uxtb	r2, r3
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	f107 0120 	add.w	r1, r7, #32
 80055fe:	440b      	add	r3, r1
 8005600:	f803 2c17 	strb.w	r2, [r3, #-23]
		while(*++t != ',')
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	3301      	adds	r3, #1
 8005608:	61bb      	str	r3, [r7, #24]
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	2b2c      	cmp	r3, #44	; 0x2c
 8005610:	d1df      	bne.n	80055d2 <parse_GSA+0xce>
	for (int i = 0; i < 3; ++i)
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	3301      	adds	r3, #1
 8005616:	613b      	str	r3, [r7, #16]
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	2b02      	cmp	r3, #2
 800561c:	ddd1      	ble.n	80055c2 <parse_GSA+0xbe>
	}
	/*
	 * If successful, add to diagnostic struct
	 *
	 */
diag.HDOP = dop[0];
 800561e:	4b0c      	ldr	r3, [pc, #48]	; (8005650 <parse_GSA+0x14c>)
 8005620:	3302      	adds	r3, #2
 8005622:	f107 0208 	add.w	r2, r7, #8
 8005626:	8812      	ldrh	r2, [r2, #0]
 8005628:	801a      	strh	r2, [r3, #0]
diag.PDOP = dop[1];
 800562a:	4b09      	ldr	r3, [pc, #36]	; (8005650 <parse_GSA+0x14c>)
 800562c:	461a      	mov	r2, r3
 800562e:	f107 030a 	add.w	r3, r7, #10
 8005632:	881b      	ldrh	r3, [r3, #0]
 8005634:	8013      	strh	r3, [r2, #0]
diag.VDOP = dop[2];
 8005636:	4b06      	ldr	r3, [pc, #24]	; (8005650 <parse_GSA+0x14c>)
 8005638:	3304      	adds	r3, #4
 800563a:	f107 020c 	add.w	r2, r7, #12
 800563e:	8812      	ldrh	r2, [r2, #0]
 8005640:	801a      	strh	r2, [r3, #0]
	return 0;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3724      	adds	r7, #36	; 0x24
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	20000b6c 	.word	0x20000b6c

08005654 <main>:
  /* @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8005654:	b5b0      	push	{r4, r5, r7, lr}
 8005656:	f5ad 6d93 	sub.w	sp, sp, #1176	; 0x498
 800565a:	af00      	add	r7, sp, #0
  int i = 0;
 800565c:	2300      	movs	r3, #0
 800565e:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
  FATFS fatfs;
  FIL file;
  uint32_t total, free;
  TM_DELAY_Init();
 8005662:	f7ff f8cd 	bl	8004800 <TM_DELAY_Init>
  if(f_mount(&fatfs,"",1) == FR_OK)
 8005666:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800566a:	2201      	movs	r2, #1
 800566c:	491b      	ldr	r1, [pc, #108]	; (80056dc <main+0x88>)
 800566e:	4618      	mov	r0, r3
 8005670:	f7fe fbb0 	bl	8003dd4 <f_mount>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d12a      	bne.n	80056d0 <main+0x7c>
  {
	  //try to open file
	  if(f_open(&file,"test.txt",FA_OPEN_APPEND | FA_WRITE) == FR_OK)
 800567a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800567e:	2232      	movs	r2, #50	; 0x32
 8005680:	4917      	ldr	r1, [pc, #92]	; (80056e0 <main+0x8c>)
 8005682:	4618      	mov	r0, r3
 8005684:	f7fe fbea 	bl	8003e5c <f_open>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d116      	bne.n	80056bc <main+0x68>
	  {
		  char buff[60];
		  f_puts("Accelerometer Data Reading 09/23/2019\n\r",&file);
 800568e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005692:	4619      	mov	r1, r3
 8005694:	4813      	ldr	r0, [pc, #76]	; (80056e4 <main+0x90>)
 8005696:	f7fe ff9d 	bl	80045d4 <f_puts>
		  sprintf(buff,"ACC:\t Ax\t Ay\t Az GYR:\t Gx\t Gy\t Gz\n\r");
 800569a:	463b      	mov	r3, r7
 800569c:	4a12      	ldr	r2, [pc, #72]	; (80056e8 <main+0x94>)
 800569e:	461c      	mov	r4, r3
 80056a0:	4615      	mov	r5, r2
 80056a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056aa:	682b      	ldr	r3, [r5, #0]
 80056ac:	6023      	str	r3, [r4, #0]
		  f_puts((char *)buff,&file);
 80056ae:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80056b2:	463b      	mov	r3, r7
 80056b4:	4611      	mov	r1, r2
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7fe ff8c 	bl	80045d4 <f_puts>

	  }
	  f_close(&file);
 80056bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7fe ff2e 	bl	8004522 <f_close>
	  f_mount(0,"",1);
 80056c6:	2201      	movs	r2, #1
 80056c8:	4904      	ldr	r1, [pc, #16]	; (80056dc <main+0x88>)
 80056ca:	2000      	movs	r0, #0
 80056cc:	f7fe fb82 	bl	8003dd4 <f_mount>
  }
  while(1)
  {
	  i++;
 80056d0:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 80056d4:	3301      	adds	r3, #1
 80056d6:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
 80056da:	e7f9      	b.n	80056d0 <main+0x7c>
 80056dc:	08008f1c 	.word	0x08008f1c
 80056e0:	08008f20 	.word	0x08008f20
 80056e4:	08008f2c 	.word	0x08008f2c
 80056e8:	08008f54 	.word	0x08008f54

080056ec <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80056ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80056ee:	e003      	b.n	80056f8 <LoopCopyDataInit>

080056f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80056f0:	4b0b      	ldr	r3, [pc, #44]	; (8005720 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80056f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80056f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80056f6:	3104      	adds	r1, #4

080056f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80056f8:	480a      	ldr	r0, [pc, #40]	; (8005724 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80056fa:	4b0b      	ldr	r3, [pc, #44]	; (8005728 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80056fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80056fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005700:	d3f6      	bcc.n	80056f0 <CopyDataInit>
  ldr  r2, =_sbss
 8005702:	4a0a      	ldr	r2, [pc, #40]	; (800572c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8005704:	e002      	b.n	800570c <LoopFillZerobss>

08005706 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005706:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005708:	f842 3b04 	str.w	r3, [r2], #4

0800570c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800570c:	4b08      	ldr	r3, [pc, #32]	; (8005730 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800570e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005710:	d3f9      	bcc.n	8005706 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005712:	f000 f867 	bl	80057e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005716:	f000 f91b 	bl	8005950 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800571a:	f7ff ff9b 	bl	8005654 <main>
  bx  lr    
 800571e:	4770      	bx	lr
  ldr  r3, =_sidata
 8005720:	080098fc 	.word	0x080098fc
  ldr  r0, =_sdata
 8005724:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005728:	200002d8 	.word	0x200002d8
  ldr  r2, =_sbss
 800572c:	200002d8 	.word	0x200002d8
  ldr  r3, = _ebss
 8005730:	2000135c 	.word	0x2000135c

08005734 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005734:	e7fe      	b.n	8005734 <ADC_IRQHandler>

08005736 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8005736:	b480      	push	{r7}
 8005738:	af00      	add	r7, sp, #0
}
 800573a:	bf00      	nop
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8005748:	e7fe      	b.n	8005748 <HardFault_Handler+0x4>

0800574a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800574a:	b480      	push	{r7}
 800574c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800574e:	e7fe      	b.n	800574e <MemManage_Handler+0x4>

08005750 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8005750:	b480      	push	{r7}
 8005752:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8005754:	e7fe      	b.n	8005754 <BusFault_Handler+0x4>

08005756 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8005756:	b480      	push	{r7}
 8005758:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800575a:	e7fe      	b.n	800575a <UsageFault_Handler+0x4>

0800575c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
}
 8005760:	bf00      	nop
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800576a:	b480      	push	{r7}
 800576c:	af00      	add	r7, sp, #0
}
 800576e:	bf00      	nop
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8005778:	b480      	push	{r7}
 800577a:	af00      	add	r7, sp, #0
}
 800577c:	bf00      	nop
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
	...

08005788 <_sbrk>:
	/* Implement your write code here, this is used by puts and printf for example */
	return len;
}

caddr_t _sbrk(int incr)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005790:	4b11      	ldr	r3, [pc, #68]	; (80057d8 <_sbrk+0x50>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d102      	bne.n	800579e <_sbrk+0x16>
		heap_end = &end;
 8005798:	4b0f      	ldr	r3, [pc, #60]	; (80057d8 <_sbrk+0x50>)
 800579a:	4a10      	ldr	r2, [pc, #64]	; (80057dc <_sbrk+0x54>)
 800579c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800579e:	4b0e      	ldr	r3, [pc, #56]	; (80057d8 <_sbrk+0x50>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80057a4:	4b0c      	ldr	r3, [pc, #48]	; (80057d8 <_sbrk+0x50>)
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4413      	add	r3, r2
 80057ac:	466a      	mov	r2, sp
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d905      	bls.n	80057be <_sbrk+0x36>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80057b2:	4b0b      	ldr	r3, [pc, #44]	; (80057e0 <_sbrk+0x58>)
 80057b4:	220c      	movs	r2, #12
 80057b6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80057b8:	f04f 33ff 	mov.w	r3, #4294967295
 80057bc:	e006      	b.n	80057cc <_sbrk+0x44>
	}

	heap_end += incr;
 80057be:	4b06      	ldr	r3, [pc, #24]	; (80057d8 <_sbrk+0x50>)
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4413      	add	r3, r2
 80057c6:	4a04      	ldr	r2, [pc, #16]	; (80057d8 <_sbrk+0x50>)
 80057c8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80057ca:	68fb      	ldr	r3, [r7, #12]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3714      	adds	r7, #20
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr
 80057d8:	20000360 	.word	0x20000360
 80057dc:	2000135c 	.word	0x2000135c
 80057e0:	20001358 	.word	0x20001358

080057e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80057e8:	4a16      	ldr	r2, [pc, #88]	; (8005844 <SystemInit+0x60>)
 80057ea:	4b16      	ldr	r3, [pc, #88]	; (8005844 <SystemInit+0x60>)
 80057ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80057f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
	
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80057f8:	4a13      	ldr	r2, [pc, #76]	; (8005848 <SystemInit+0x64>)
 80057fa:	4b13      	ldr	r3, [pc, #76]	; (8005848 <SystemInit+0x64>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f043 0301 	orr.w	r3, r3, #1
 8005802:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005804:	4b10      	ldr	r3, [pc, #64]	; (8005848 <SystemInit+0x64>)
 8005806:	2200      	movs	r2, #0
 8005808:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800580a:	4a0f      	ldr	r2, [pc, #60]	; (8005848 <SystemInit+0x64>)
 800580c:	4b0e      	ldr	r3, [pc, #56]	; (8005848 <SystemInit+0x64>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005818:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800581a:	4b0b      	ldr	r3, [pc, #44]	; (8005848 <SystemInit+0x64>)
 800581c:	4a0b      	ldr	r2, [pc, #44]	; (800584c <SystemInit+0x68>)
 800581e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005820:	4a09      	ldr	r2, [pc, #36]	; (8005848 <SystemInit+0x64>)
 8005822:	4b09      	ldr	r3, [pc, #36]	; (8005848 <SystemInit+0x64>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800582a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800582c:	4b06      	ldr	r3, [pc, #24]	; (8005848 <SystemInit+0x64>)
 800582e:	2200      	movs	r2, #0
 8005830:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8005832:	f000 f80d 	bl	8005850 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005836:	4b03      	ldr	r3, [pc, #12]	; (8005844 <SystemInit+0x60>)
 8005838:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800583c:	609a      	str	r2, [r3, #8]
#endif
}
 800583e:	bf00      	nop
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	e000ed00 	.word	0xe000ed00
 8005848:	40023800 	.word	0x40023800
 800584c:	24003010 	.word	0x24003010

08005850 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8005856:	2300      	movs	r3, #0
 8005858:	607b      	str	r3, [r7, #4]
 800585a:	2300      	movs	r3, #0
 800585c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800585e:	4a36      	ldr	r2, [pc, #216]	; (8005938 <SetSysClock+0xe8>)
 8005860:	4b35      	ldr	r3, [pc, #212]	; (8005938 <SetSysClock+0xe8>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005868:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800586a:	4b33      	ldr	r3, [pc, #204]	; (8005938 <SetSysClock+0xe8>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005872:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	3301      	adds	r3, #1
 8005878:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d103      	bne.n	8005888 <SetSysClock+0x38>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005886:	d1f0      	bne.n	800586a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8005888:	4b2b      	ldr	r3, [pc, #172]	; (8005938 <SetSysClock+0xe8>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8005894:	2301      	movs	r3, #1
 8005896:	603b      	str	r3, [r7, #0]
 8005898:	e001      	b.n	800589e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800589a:	2300      	movs	r3, #0
 800589c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d142      	bne.n	800592a <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80058a4:	4a24      	ldr	r2, [pc, #144]	; (8005938 <SetSysClock+0xe8>)
 80058a6:	4b24      	ldr	r3, [pc, #144]	; (8005938 <SetSysClock+0xe8>)
 80058a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ae:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 80058b0:	4a22      	ldr	r2, [pc, #136]	; (800593c <SetSysClock+0xec>)
 80058b2:	4b22      	ldr	r3, [pc, #136]	; (800593c <SetSysClock+0xec>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058ba:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80058bc:	4a1e      	ldr	r2, [pc, #120]	; (8005938 <SetSysClock+0xe8>)
 80058be:	4b1e      	ldr	r3, [pc, #120]	; (8005938 <SetSysClock+0xe8>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80058c4:	4a1c      	ldr	r2, [pc, #112]	; (8005938 <SetSysClock+0xe8>)
 80058c6:	4b1c      	ldr	r3, [pc, #112]	; (8005938 <SetSysClock+0xe8>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058ce:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80058d0:	4a19      	ldr	r2, [pc, #100]	; (8005938 <SetSysClock+0xe8>)
 80058d2:	4b19      	ldr	r3, [pc, #100]	; (8005938 <SetSysClock+0xe8>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80058da:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80058dc:	4b16      	ldr	r3, [pc, #88]	; (8005938 <SetSysClock+0xe8>)
 80058de:	4a18      	ldr	r2, [pc, #96]	; (8005940 <SetSysClock+0xf0>)
 80058e0:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80058e2:	4a15      	ldr	r2, [pc, #84]	; (8005938 <SetSysClock+0xe8>)
 80058e4:	4b14      	ldr	r3, [pc, #80]	; (8005938 <SetSysClock+0xe8>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058ec:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80058ee:	bf00      	nop
 80058f0:	4b11      	ldr	r3, [pc, #68]	; (8005938 <SetSysClock+0xe8>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d0f9      	beq.n	80058f0 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80058fc:	4b11      	ldr	r3, [pc, #68]	; (8005944 <SetSysClock+0xf4>)
 80058fe:	f240 6205 	movw	r2, #1541	; 0x605
 8005902:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8005904:	4a0c      	ldr	r2, [pc, #48]	; (8005938 <SetSysClock+0xe8>)
 8005906:	4b0c      	ldr	r3, [pc, #48]	; (8005938 <SetSysClock+0xe8>)
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f023 0303 	bic.w	r3, r3, #3
 800590e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8005910:	4a09      	ldr	r2, [pc, #36]	; (8005938 <SetSysClock+0xe8>)
 8005912:	4b09      	ldr	r3, [pc, #36]	; (8005938 <SetSysClock+0xe8>)
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f043 0302 	orr.w	r3, r3, #2
 800591a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800591c:	bf00      	nop
 800591e:	4b06      	ldr	r3, [pc, #24]	; (8005938 <SetSysClock+0xe8>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f003 030c 	and.w	r3, r3, #12
 8005926:	2b08      	cmp	r3, #8
 8005928:	d1f9      	bne.n	800591e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800592a:	bf00      	nop
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	40023800 	.word	0x40023800
 800593c:	40007000 	.word	0x40007000
 8005940:	07405408 	.word	0x07405408
 8005944:	40023c00 	.word	0x40023c00

08005948 <atof>:
 8005948:	2100      	movs	r1, #0
 800594a:	f001 ba55 	b.w	8006df8 <strtod>
	...

08005950 <__libc_init_array>:
 8005950:	b570      	push	{r4, r5, r6, lr}
 8005952:	4e0d      	ldr	r6, [pc, #52]	; (8005988 <__libc_init_array+0x38>)
 8005954:	4c0d      	ldr	r4, [pc, #52]	; (800598c <__libc_init_array+0x3c>)
 8005956:	1ba4      	subs	r4, r4, r6
 8005958:	10a4      	asrs	r4, r4, #2
 800595a:	2500      	movs	r5, #0
 800595c:	42a5      	cmp	r5, r4
 800595e:	d109      	bne.n	8005974 <__libc_init_array+0x24>
 8005960:	4e0b      	ldr	r6, [pc, #44]	; (8005990 <__libc_init_array+0x40>)
 8005962:	4c0c      	ldr	r4, [pc, #48]	; (8005994 <__libc_init_array+0x44>)
 8005964:	f003 ffba 	bl	80098dc <_init>
 8005968:	1ba4      	subs	r4, r4, r6
 800596a:	10a4      	asrs	r4, r4, #2
 800596c:	2500      	movs	r5, #0
 800596e:	42a5      	cmp	r5, r4
 8005970:	d105      	bne.n	800597e <__libc_init_array+0x2e>
 8005972:	bd70      	pop	{r4, r5, r6, pc}
 8005974:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005978:	4798      	blx	r3
 800597a:	3501      	adds	r5, #1
 800597c:	e7ee      	b.n	800595c <__libc_init_array+0xc>
 800597e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005982:	4798      	blx	r3
 8005984:	3501      	adds	r5, #1
 8005986:	e7f2      	b.n	800596e <__libc_init_array+0x1e>
 8005988:	080098f4 	.word	0x080098f4
 800598c:	080098f4 	.word	0x080098f4
 8005990:	080098f4 	.word	0x080098f4
 8005994:	080098f8 	.word	0x080098f8

08005998 <localtime>:
 8005998:	b538      	push	{r3, r4, r5, lr}
 800599a:	4b07      	ldr	r3, [pc, #28]	; (80059b8 <localtime+0x20>)
 800599c:	681c      	ldr	r4, [r3, #0]
 800599e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80059a0:	4605      	mov	r5, r0
 80059a2:	b91b      	cbnz	r3, 80059ac <localtime+0x14>
 80059a4:	2024      	movs	r0, #36	; 0x24
 80059a6:	f000 f8ed 	bl	8005b84 <malloc>
 80059aa:	63e0      	str	r0, [r4, #60]	; 0x3c
 80059ac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80059ae:	4628      	mov	r0, r5
 80059b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059b4:	f000 b802 	b.w	80059bc <localtime_r>
 80059b8:	20000108 	.word	0x20000108

080059bc <localtime_r>:
 80059bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059c0:	460c      	mov	r4, r1
 80059c2:	4680      	mov	r8, r0
 80059c4:	f002 f852 	bl	8007a6c <__gettzinfo>
 80059c8:	4621      	mov	r1, r4
 80059ca:	4607      	mov	r7, r0
 80059cc:	4640      	mov	r0, r8
 80059ce:	f002 f851 	bl	8007a74 <gmtime_r>
 80059d2:	6946      	ldr	r6, [r0, #20]
 80059d4:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80059d8:	07b3      	lsls	r3, r6, #30
 80059da:	4604      	mov	r4, r0
 80059dc:	d105      	bne.n	80059ea <localtime_r+0x2e>
 80059de:	2264      	movs	r2, #100	; 0x64
 80059e0:	fb96 f3f2 	sdiv	r3, r6, r2
 80059e4:	fb02 6313 	mls	r3, r2, r3, r6
 80059e8:	b9fb      	cbnz	r3, 8005a2a <localtime_r+0x6e>
 80059ea:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80059ee:	fb96 f5f3 	sdiv	r5, r6, r3
 80059f2:	fb03 6515 	mls	r5, r3, r5, r6
 80059f6:	fab5 f585 	clz	r5, r5
 80059fa:	096d      	lsrs	r5, r5, #5
 80059fc:	4b5f      	ldr	r3, [pc, #380]	; (8005b7c <localtime_r+0x1c0>)
 80059fe:	2230      	movs	r2, #48	; 0x30
 8005a00:	fb02 3505 	mla	r5, r2, r5, r3
 8005a04:	f001 fb1c 	bl	8007040 <__tz_lock>
 8005a08:	f001 fb1c 	bl	8007044 <_tzset_unlocked>
 8005a0c:	4b5c      	ldr	r3, [pc, #368]	; (8005b80 <localtime_r+0x1c4>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	b1e3      	cbz	r3, 8005a4c <localtime_r+0x90>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	429e      	cmp	r6, r3
 8005a16:	d10a      	bne.n	8005a2e <localtime_r+0x72>
 8005a18:	6839      	ldr	r1, [r7, #0]
 8005a1a:	f8d8 3000 	ldr.w	r3, [r8]
 8005a1e:	69fa      	ldr	r2, [r7, #28]
 8005a20:	b969      	cbnz	r1, 8005a3e <localtime_r+0x82>
 8005a22:	4293      	cmp	r3, r2
 8005a24:	db0d      	blt.n	8005a42 <localtime_r+0x86>
 8005a26:	2301      	movs	r3, #1
 8005a28:	e010      	b.n	8005a4c <localtime_r+0x90>
 8005a2a:	2501      	movs	r5, #1
 8005a2c:	e7e6      	b.n	80059fc <localtime_r+0x40>
 8005a2e:	4630      	mov	r0, r6
 8005a30:	f001 fa5e 	bl	8006ef0 <__tzcalc_limits>
 8005a34:	2800      	cmp	r0, #0
 8005a36:	d1ef      	bne.n	8005a18 <localtime_r+0x5c>
 8005a38:	f04f 33ff 	mov.w	r3, #4294967295
 8005a3c:	e006      	b.n	8005a4c <localtime_r+0x90>
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	db55      	blt.n	8005aee <localtime_r+0x132>
 8005a42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a44:	4293      	cmp	r3, r2
 8005a46:	bfac      	ite	ge
 8005a48:	2300      	movge	r3, #0
 8005a4a:	2301      	movlt	r3, #1
 8005a4c:	6223      	str	r3, [r4, #32]
 8005a4e:	6a23      	ldr	r3, [r4, #32]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	bf0c      	ite	eq
 8005a54:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 8005a56:	6a39      	ldrne	r1, [r7, #32]
 8005a58:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005a5c:	203c      	movs	r0, #60	; 0x3c
 8005a5e:	fb91 f6f3 	sdiv	r6, r1, r3
 8005a62:	fb03 1316 	mls	r3, r3, r6, r1
 8005a66:	6861      	ldr	r1, [r4, #4]
 8005a68:	fb93 f2f0 	sdiv	r2, r3, r0
 8005a6c:	fb00 3012 	mls	r0, r0, r2, r3
 8005a70:	6823      	ldr	r3, [r4, #0]
 8005a72:	1a89      	subs	r1, r1, r2
 8005a74:	68a2      	ldr	r2, [r4, #8]
 8005a76:	6061      	str	r1, [r4, #4]
 8005a78:	1a1b      	subs	r3, r3, r0
 8005a7a:	1b92      	subs	r2, r2, r6
 8005a7c:	2b3b      	cmp	r3, #59	; 0x3b
 8005a7e:	6023      	str	r3, [r4, #0]
 8005a80:	60a2      	str	r2, [r4, #8]
 8005a82:	dd36      	ble.n	8005af2 <localtime_r+0x136>
 8005a84:	3101      	adds	r1, #1
 8005a86:	6061      	str	r1, [r4, #4]
 8005a88:	3b3c      	subs	r3, #60	; 0x3c
 8005a8a:	6023      	str	r3, [r4, #0]
 8005a8c:	6863      	ldr	r3, [r4, #4]
 8005a8e:	2b3b      	cmp	r3, #59	; 0x3b
 8005a90:	dd35      	ble.n	8005afe <localtime_r+0x142>
 8005a92:	3201      	adds	r2, #1
 8005a94:	60a2      	str	r2, [r4, #8]
 8005a96:	3b3c      	subs	r3, #60	; 0x3c
 8005a98:	6063      	str	r3, [r4, #4]
 8005a9a:	68a3      	ldr	r3, [r4, #8]
 8005a9c:	2b17      	cmp	r3, #23
 8005a9e:	dd34      	ble.n	8005b0a <localtime_r+0x14e>
 8005aa0:	69e2      	ldr	r2, [r4, #28]
 8005aa2:	3201      	adds	r2, #1
 8005aa4:	61e2      	str	r2, [r4, #28]
 8005aa6:	69a2      	ldr	r2, [r4, #24]
 8005aa8:	3201      	adds	r2, #1
 8005aaa:	2a06      	cmp	r2, #6
 8005aac:	bfc8      	it	gt
 8005aae:	2200      	movgt	r2, #0
 8005ab0:	61a2      	str	r2, [r4, #24]
 8005ab2:	68e2      	ldr	r2, [r4, #12]
 8005ab4:	3b18      	subs	r3, #24
 8005ab6:	3201      	adds	r2, #1
 8005ab8:	60a3      	str	r3, [r4, #8]
 8005aba:	6923      	ldr	r3, [r4, #16]
 8005abc:	60e2      	str	r2, [r4, #12]
 8005abe:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8005ac2:	428a      	cmp	r2, r1
 8005ac4:	dd0e      	ble.n	8005ae4 <localtime_r+0x128>
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	2b0c      	cmp	r3, #12
 8005aca:	bf0c      	ite	eq
 8005acc:	6963      	ldreq	r3, [r4, #20]
 8005ace:	6123      	strne	r3, [r4, #16]
 8005ad0:	eba2 0201 	sub.w	r2, r2, r1
 8005ad4:	60e2      	str	r2, [r4, #12]
 8005ad6:	bf01      	itttt	eq
 8005ad8:	3301      	addeq	r3, #1
 8005ada:	2200      	moveq	r2, #0
 8005adc:	6122      	streq	r2, [r4, #16]
 8005ade:	6163      	streq	r3, [r4, #20]
 8005ae0:	bf08      	it	eq
 8005ae2:	61e2      	streq	r2, [r4, #28]
 8005ae4:	f001 faad 	bl	8007042 <__tz_unlock>
 8005ae8:	4620      	mov	r0, r4
 8005aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005aee:	2300      	movs	r3, #0
 8005af0:	e7ac      	b.n	8005a4c <localtime_r+0x90>
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	daca      	bge.n	8005a8c <localtime_r+0xd0>
 8005af6:	3901      	subs	r1, #1
 8005af8:	6061      	str	r1, [r4, #4]
 8005afa:	333c      	adds	r3, #60	; 0x3c
 8005afc:	e7c5      	b.n	8005a8a <localtime_r+0xce>
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	dacb      	bge.n	8005a9a <localtime_r+0xde>
 8005b02:	3a01      	subs	r2, #1
 8005b04:	60a2      	str	r2, [r4, #8]
 8005b06:	333c      	adds	r3, #60	; 0x3c
 8005b08:	e7c6      	b.n	8005a98 <localtime_r+0xdc>
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	daea      	bge.n	8005ae4 <localtime_r+0x128>
 8005b0e:	69e2      	ldr	r2, [r4, #28]
 8005b10:	3a01      	subs	r2, #1
 8005b12:	61e2      	str	r2, [r4, #28]
 8005b14:	69a2      	ldr	r2, [r4, #24]
 8005b16:	3a01      	subs	r2, #1
 8005b18:	bf48      	it	mi
 8005b1a:	2206      	movmi	r2, #6
 8005b1c:	61a2      	str	r2, [r4, #24]
 8005b1e:	68e2      	ldr	r2, [r4, #12]
 8005b20:	3318      	adds	r3, #24
 8005b22:	3a01      	subs	r2, #1
 8005b24:	60e2      	str	r2, [r4, #12]
 8005b26:	60a3      	str	r3, [r4, #8]
 8005b28:	2a00      	cmp	r2, #0
 8005b2a:	d1db      	bne.n	8005ae4 <localtime_r+0x128>
 8005b2c:	6923      	ldr	r3, [r4, #16]
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	d405      	bmi.n	8005b3e <localtime_r+0x182>
 8005b32:	6123      	str	r3, [r4, #16]
 8005b34:	6923      	ldr	r3, [r4, #16]
 8005b36:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8005b3a:	60e3      	str	r3, [r4, #12]
 8005b3c:	e7d2      	b.n	8005ae4 <localtime_r+0x128>
 8005b3e:	230b      	movs	r3, #11
 8005b40:	6123      	str	r3, [r4, #16]
 8005b42:	6963      	ldr	r3, [r4, #20]
 8005b44:	1e5a      	subs	r2, r3, #1
 8005b46:	f012 0f03 	tst.w	r2, #3
 8005b4a:	6162      	str	r2, [r4, #20]
 8005b4c:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 8005b50:	d105      	bne.n	8005b5e <localtime_r+0x1a2>
 8005b52:	2164      	movs	r1, #100	; 0x64
 8005b54:	fb92 f3f1 	sdiv	r3, r2, r1
 8005b58:	fb01 2313 	mls	r3, r1, r3, r2
 8005b5c:	b963      	cbnz	r3, 8005b78 <localtime_r+0x1bc>
 8005b5e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005b62:	fb92 f3f1 	sdiv	r3, r2, r1
 8005b66:	fb01 2313 	mls	r3, r1, r3, r2
 8005b6a:	fab3 f383 	clz	r3, r3
 8005b6e:	095b      	lsrs	r3, r3, #5
 8005b70:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8005b74:	61e3      	str	r3, [r4, #28]
 8005b76:	e7dd      	b.n	8005b34 <localtime_r+0x178>
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e7f9      	b.n	8005b70 <localtime_r+0x1b4>
 8005b7c:	08009558 	.word	0x08009558
 8005b80:	20000388 	.word	0x20000388

08005b84 <malloc>:
 8005b84:	4b02      	ldr	r3, [pc, #8]	; (8005b90 <malloc+0xc>)
 8005b86:	4601      	mov	r1, r0
 8005b88:	6818      	ldr	r0, [r3, #0]
 8005b8a:	f000 bab5 	b.w	80060f8 <_malloc_r>
 8005b8e:	bf00      	nop
 8005b90:	20000108 	.word	0x20000108

08005b94 <free>:
 8005b94:	4b02      	ldr	r3, [pc, #8]	; (8005ba0 <free+0xc>)
 8005b96:	4601      	mov	r1, r0
 8005b98:	6818      	ldr	r0, [r3, #0]
 8005b9a:	f000 ba5f 	b.w	800605c <_free_r>
 8005b9e:	bf00      	nop
 8005ba0:	20000108 	.word	0x20000108

08005ba4 <validate_structure>:
 8005ba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ba6:	6801      	ldr	r1, [r0, #0]
 8005ba8:	293b      	cmp	r1, #59	; 0x3b
 8005baa:	4604      	mov	r4, r0
 8005bac:	d911      	bls.n	8005bd2 <validate_structure+0x2e>
 8005bae:	223c      	movs	r2, #60	; 0x3c
 8005bb0:	4668      	mov	r0, sp
 8005bb2:	f001 fbcf 	bl	8007354 <div>
 8005bb6:	9a01      	ldr	r2, [sp, #4]
 8005bb8:	6863      	ldr	r3, [r4, #4]
 8005bba:	9900      	ldr	r1, [sp, #0]
 8005bbc:	2a00      	cmp	r2, #0
 8005bbe:	440b      	add	r3, r1
 8005bc0:	6063      	str	r3, [r4, #4]
 8005bc2:	bfbb      	ittet	lt
 8005bc4:	323c      	addlt	r2, #60	; 0x3c
 8005bc6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8005bca:	6022      	strge	r2, [r4, #0]
 8005bcc:	6022      	strlt	r2, [r4, #0]
 8005bce:	bfb8      	it	lt
 8005bd0:	6063      	strlt	r3, [r4, #4]
 8005bd2:	6861      	ldr	r1, [r4, #4]
 8005bd4:	293b      	cmp	r1, #59	; 0x3b
 8005bd6:	d911      	bls.n	8005bfc <validate_structure+0x58>
 8005bd8:	223c      	movs	r2, #60	; 0x3c
 8005bda:	4668      	mov	r0, sp
 8005bdc:	f001 fbba 	bl	8007354 <div>
 8005be0:	9a01      	ldr	r2, [sp, #4]
 8005be2:	68a3      	ldr	r3, [r4, #8]
 8005be4:	9900      	ldr	r1, [sp, #0]
 8005be6:	2a00      	cmp	r2, #0
 8005be8:	440b      	add	r3, r1
 8005bea:	60a3      	str	r3, [r4, #8]
 8005bec:	bfbb      	ittet	lt
 8005bee:	323c      	addlt	r2, #60	; 0x3c
 8005bf0:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8005bf4:	6062      	strge	r2, [r4, #4]
 8005bf6:	6062      	strlt	r2, [r4, #4]
 8005bf8:	bfb8      	it	lt
 8005bfa:	60a3      	strlt	r3, [r4, #8]
 8005bfc:	68a1      	ldr	r1, [r4, #8]
 8005bfe:	2917      	cmp	r1, #23
 8005c00:	d911      	bls.n	8005c26 <validate_structure+0x82>
 8005c02:	2218      	movs	r2, #24
 8005c04:	4668      	mov	r0, sp
 8005c06:	f001 fba5 	bl	8007354 <div>
 8005c0a:	9a01      	ldr	r2, [sp, #4]
 8005c0c:	68e3      	ldr	r3, [r4, #12]
 8005c0e:	9900      	ldr	r1, [sp, #0]
 8005c10:	2a00      	cmp	r2, #0
 8005c12:	440b      	add	r3, r1
 8005c14:	60e3      	str	r3, [r4, #12]
 8005c16:	bfbb      	ittet	lt
 8005c18:	3218      	addlt	r2, #24
 8005c1a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8005c1e:	60a2      	strge	r2, [r4, #8]
 8005c20:	60a2      	strlt	r2, [r4, #8]
 8005c22:	bfb8      	it	lt
 8005c24:	60e3      	strlt	r3, [r4, #12]
 8005c26:	6921      	ldr	r1, [r4, #16]
 8005c28:	290b      	cmp	r1, #11
 8005c2a:	d911      	bls.n	8005c50 <validate_structure+0xac>
 8005c2c:	220c      	movs	r2, #12
 8005c2e:	4668      	mov	r0, sp
 8005c30:	f001 fb90 	bl	8007354 <div>
 8005c34:	9a01      	ldr	r2, [sp, #4]
 8005c36:	6963      	ldr	r3, [r4, #20]
 8005c38:	9900      	ldr	r1, [sp, #0]
 8005c3a:	2a00      	cmp	r2, #0
 8005c3c:	440b      	add	r3, r1
 8005c3e:	6163      	str	r3, [r4, #20]
 8005c40:	bfbb      	ittet	lt
 8005c42:	320c      	addlt	r2, #12
 8005c44:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8005c48:	6122      	strge	r2, [r4, #16]
 8005c4a:	6122      	strlt	r2, [r4, #16]
 8005c4c:	bfb8      	it	lt
 8005c4e:	6163      	strlt	r3, [r4, #20]
 8005c50:	6963      	ldr	r3, [r4, #20]
 8005c52:	0799      	lsls	r1, r3, #30
 8005c54:	d143      	bne.n	8005cde <validate_structure+0x13a>
 8005c56:	2164      	movs	r1, #100	; 0x64
 8005c58:	fb93 f2f1 	sdiv	r2, r3, r1
 8005c5c:	fb01 3212 	mls	r2, r1, r2, r3
 8005c60:	2a00      	cmp	r2, #0
 8005c62:	d13e      	bne.n	8005ce2 <validate_structure+0x13e>
 8005c64:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8005c68:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005c6c:	fb93 f2f1 	sdiv	r2, r3, r1
 8005c70:	fb01 3312 	mls	r3, r1, r2, r3
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	bf14      	ite	ne
 8005c78:	231c      	movne	r3, #28
 8005c7a:	231d      	moveq	r3, #29
 8005c7c:	68e2      	ldr	r2, [r4, #12]
 8005c7e:	2a00      	cmp	r2, #0
 8005c80:	dd31      	ble.n	8005ce6 <validate_structure+0x142>
 8005c82:	4f37      	ldr	r7, [pc, #220]	; (8005d60 <validate_structure+0x1bc>)
 8005c84:	2602      	movs	r6, #2
 8005c86:	f04f 0e00 	mov.w	lr, #0
 8005c8a:	2064      	movs	r0, #100	; 0x64
 8005c8c:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8005c90:	6921      	ldr	r1, [r4, #16]
 8005c92:	68e2      	ldr	r2, [r4, #12]
 8005c94:	2901      	cmp	r1, #1
 8005c96:	d05d      	beq.n	8005d54 <validate_structure+0x1b0>
 8005c98:	f857 c021 	ldr.w	ip, [r7, r1, lsl #2]
 8005c9c:	4562      	cmp	r2, ip
 8005c9e:	dd2c      	ble.n	8005cfa <validate_structure+0x156>
 8005ca0:	3101      	adds	r1, #1
 8005ca2:	eba2 020c 	sub.w	r2, r2, ip
 8005ca6:	290c      	cmp	r1, #12
 8005ca8:	60e2      	str	r2, [r4, #12]
 8005caa:	6121      	str	r1, [r4, #16]
 8005cac:	d1f0      	bne.n	8005c90 <validate_structure+0xec>
 8005cae:	6963      	ldr	r3, [r4, #20]
 8005cb0:	f8c4 e010 	str.w	lr, [r4, #16]
 8005cb4:	1c5a      	adds	r2, r3, #1
 8005cb6:	0791      	lsls	r1, r2, #30
 8005cb8:	6162      	str	r2, [r4, #20]
 8005cba:	d147      	bne.n	8005d4c <validate_structure+0x1a8>
 8005cbc:	fb92 f1f0 	sdiv	r1, r2, r0
 8005cc0:	fb00 2211 	mls	r2, r0, r1, r2
 8005cc4:	2a00      	cmp	r2, #0
 8005cc6:	d143      	bne.n	8005d50 <validate_structure+0x1ac>
 8005cc8:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8005ccc:	fb93 f2f5 	sdiv	r2, r3, r5
 8005cd0:	fb05 3312 	mls	r3, r5, r2, r3
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	bf14      	ite	ne
 8005cd8:	231c      	movne	r3, #28
 8005cda:	231d      	moveq	r3, #29
 8005cdc:	e7d8      	b.n	8005c90 <validate_structure+0xec>
 8005cde:	231c      	movs	r3, #28
 8005ce0:	e7cc      	b.n	8005c7c <validate_structure+0xd8>
 8005ce2:	231d      	movs	r3, #29
 8005ce4:	e7ca      	b.n	8005c7c <validate_structure+0xd8>
 8005ce6:	4f1e      	ldr	r7, [pc, #120]	; (8005d60 <validate_structure+0x1bc>)
 8005ce8:	260b      	movs	r6, #11
 8005cea:	2064      	movs	r0, #100	; 0x64
 8005cec:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8005cf0:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8005cf4:	f1be 0f00 	cmp.w	lr, #0
 8005cf8:	dd01      	ble.n	8005cfe <validate_structure+0x15a>
 8005cfa:	b003      	add	sp, #12
 8005cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cfe:	6921      	ldr	r1, [r4, #16]
 8005d00:	3901      	subs	r1, #1
 8005d02:	6121      	str	r1, [r4, #16]
 8005d04:	3101      	adds	r1, #1
 8005d06:	d114      	bne.n	8005d32 <validate_structure+0x18e>
 8005d08:	6963      	ldr	r3, [r4, #20]
 8005d0a:	6126      	str	r6, [r4, #16]
 8005d0c:	1e59      	subs	r1, r3, #1
 8005d0e:	078a      	lsls	r2, r1, #30
 8005d10:	6161      	str	r1, [r4, #20]
 8005d12:	d117      	bne.n	8005d44 <validate_structure+0x1a0>
 8005d14:	fb91 f2f0 	sdiv	r2, r1, r0
 8005d18:	fb00 1112 	mls	r1, r0, r2, r1
 8005d1c:	b9a1      	cbnz	r1, 8005d48 <validate_structure+0x1a4>
 8005d1e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8005d22:	fb93 f2f5 	sdiv	r2, r3, r5
 8005d26:	fb05 3312 	mls	r3, r5, r2, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	bf14      	ite	ne
 8005d2e:	231c      	movne	r3, #28
 8005d30:	231d      	moveq	r3, #29
 8005d32:	6922      	ldr	r2, [r4, #16]
 8005d34:	2a01      	cmp	r2, #1
 8005d36:	bf14      	ite	ne
 8005d38:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8005d3c:	461a      	moveq	r2, r3
 8005d3e:	4472      	add	r2, lr
 8005d40:	60e2      	str	r2, [r4, #12]
 8005d42:	e7d5      	b.n	8005cf0 <validate_structure+0x14c>
 8005d44:	231c      	movs	r3, #28
 8005d46:	e7f4      	b.n	8005d32 <validate_structure+0x18e>
 8005d48:	231d      	movs	r3, #29
 8005d4a:	e7f2      	b.n	8005d32 <validate_structure+0x18e>
 8005d4c:	231c      	movs	r3, #28
 8005d4e:	e79f      	b.n	8005c90 <validate_structure+0xec>
 8005d50:	231d      	movs	r3, #29
 8005d52:	e79d      	b.n	8005c90 <validate_structure+0xec>
 8005d54:	4293      	cmp	r3, r2
 8005d56:	dad0      	bge.n	8005cfa <validate_structure+0x156>
 8005d58:	1ad2      	subs	r2, r2, r3
 8005d5a:	60e2      	str	r2, [r4, #12]
 8005d5c:	6126      	str	r6, [r4, #16]
 8005d5e:	e797      	b.n	8005c90 <validate_structure+0xec>
 8005d60:	080094f8 	.word	0x080094f8

08005d64 <mktime>:
 8005d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d68:	4681      	mov	r9, r0
 8005d6a:	f001 fe7f 	bl	8007a6c <__gettzinfo>
 8005d6e:	4680      	mov	r8, r0
 8005d70:	4648      	mov	r0, r9
 8005d72:	f7ff ff17 	bl	8005ba4 <validate_structure>
 8005d76:	e899 0081 	ldmia.w	r9, {r0, r7}
 8005d7a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005d7e:	4ab4      	ldr	r2, [pc, #720]	; (8006050 <mktime+0x2ec>)
 8005d80:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8005d84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005d88:	253c      	movs	r5, #60	; 0x3c
 8005d8a:	fb05 0707 	mla	r7, r5, r7, r0
 8005d8e:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8005d92:	f44f 6561 	mov.w	r5, #3600	; 0xe10
 8005d96:	3c01      	subs	r4, #1
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	fb05 7000 	mla	r0, r5, r0, r7
 8005d9e:	4414      	add	r4, r2
 8005da0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8005da4:	dd11      	ble.n	8005dca <mktime+0x66>
 8005da6:	0799      	lsls	r1, r3, #30
 8005da8:	d10f      	bne.n	8005dca <mktime+0x66>
 8005daa:	2164      	movs	r1, #100	; 0x64
 8005dac:	fb93 f2f1 	sdiv	r2, r3, r1
 8005db0:	fb01 3212 	mls	r2, r1, r2, r3
 8005db4:	b942      	cbnz	r2, 8005dc8 <mktime+0x64>
 8005db6:	f203 756c 	addw	r5, r3, #1900	; 0x76c
 8005dba:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005dbe:	fb95 f2f1 	sdiv	r2, r5, r1
 8005dc2:	fb01 5212 	mls	r2, r1, r2, r5
 8005dc6:	b902      	cbnz	r2, 8005dca <mktime+0x66>
 8005dc8:	3401      	adds	r4, #1
 8005dca:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
 8005dce:	3210      	adds	r2, #16
 8005dd0:	f644 6120 	movw	r1, #20000	; 0x4e20
 8005dd4:	428a      	cmp	r2, r1
 8005dd6:	f8c9 401c 	str.w	r4, [r9, #28]
 8005dda:	f200 812d 	bhi.w	8006038 <mktime+0x2d4>
 8005dde:	2b46      	cmp	r3, #70	; 0x46
 8005de0:	dd70      	ble.n	8005ec4 <mktime+0x160>
 8005de2:	2546      	movs	r5, #70	; 0x46
 8005de4:	f240 176d 	movw	r7, #365	; 0x16d
 8005de8:	2164      	movs	r1, #100	; 0x64
 8005dea:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8005dee:	07aa      	lsls	r2, r5, #30
 8005df0:	d162      	bne.n	8005eb8 <mktime+0x154>
 8005df2:	fb95 f2f1 	sdiv	r2, r5, r1
 8005df6:	fb01 5212 	mls	r2, r1, r2, r5
 8005dfa:	2a00      	cmp	r2, #0
 8005dfc:	d15f      	bne.n	8005ebe <mktime+0x15a>
 8005dfe:	f205 7e6c 	addw	lr, r5, #1900	; 0x76c
 8005e02:	fb9e f2f6 	sdiv	r2, lr, r6
 8005e06:	fb06 e212 	mls	r2, r6, r2, lr
 8005e0a:	2a00      	cmp	r2, #0
 8005e0c:	bf14      	ite	ne
 8005e0e:	463a      	movne	r2, r7
 8005e10:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8005e14:	3501      	adds	r5, #1
 8005e16:	42ab      	cmp	r3, r5
 8005e18:	4414      	add	r4, r2
 8005e1a:	d1e8      	bne.n	8005dee <mktime+0x8a>
 8005e1c:	4f8d      	ldr	r7, [pc, #564]	; (8006054 <mktime+0x2f0>)
 8005e1e:	fb07 0704 	mla	r7, r7, r4, r0
 8005e22:	f001 f90d 	bl	8007040 <__tz_lock>
 8005e26:	f001 f90d 	bl	8007044 <_tzset_unlocked>
 8005e2a:	4b8b      	ldr	r3, [pc, #556]	; (8006058 <mktime+0x2f4>)
 8005e2c:	681e      	ldr	r6, [r3, #0]
 8005e2e:	2e00      	cmp	r6, #0
 8005e30:	f000 810a 	beq.w	8006048 <mktime+0x2e4>
 8005e34:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8005e38:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	bfa8      	it	ge
 8005e40:	2301      	movge	r3, #1
 8005e42:	469a      	mov	sl, r3
 8005e44:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005e48:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8005e4c:	4298      	cmp	r0, r3
 8005e4e:	d17c      	bne.n	8005f4a <mktime+0x1e6>
 8005e50:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 8005e54:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8005e58:	f8d8 003c 	ldr.w	r0, [r8, #60]	; 0x3c
 8005e5c:	f8d8 101c 	ldr.w	r1, [r8, #28]
 8005e60:	1ad6      	subs	r6, r2, r3
 8005e62:	42b7      	cmp	r7, r6
 8005e64:	eba1 0100 	sub.w	r1, r1, r0
 8005e68:	da76      	bge.n	8005f58 <mktime+0x1f4>
 8005e6a:	f8d8 2000 	ldr.w	r2, [r8]
 8005e6e:	2a00      	cmp	r2, #0
 8005e70:	d076      	beq.n	8005f60 <mktime+0x1fc>
 8005e72:	428f      	cmp	r7, r1
 8005e74:	f2c0 80e3 	blt.w	800603e <mktime+0x2da>
 8005e78:	42b7      	cmp	r7, r6
 8005e7a:	bfac      	ite	ge
 8005e7c:	2600      	movge	r6, #0
 8005e7e:	2601      	movlt	r6, #1
 8005e80:	f1ba 0f00 	cmp.w	sl, #0
 8005e84:	da72      	bge.n	8005f6c <mktime+0x208>
 8005e86:	2e01      	cmp	r6, #1
 8005e88:	f040 80de 	bne.w	8006048 <mktime+0x2e4>
 8005e8c:	f8d8 503c 	ldr.w	r5, [r8, #60]	; 0x3c
 8005e90:	2601      	movs	r6, #1
 8005e92:	443d      	add	r5, r7
 8005e94:	f001 f8d5 	bl	8007042 <__tz_unlock>
 8005e98:	3404      	adds	r4, #4
 8005e9a:	2307      	movs	r3, #7
 8005e9c:	fb94 f3f3 	sdiv	r3, r4, r3
 8005ea0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005ea4:	1ae4      	subs	r4, r4, r3
 8005ea6:	bf48      	it	mi
 8005ea8:	3407      	addmi	r4, #7
 8005eaa:	f8c9 6020 	str.w	r6, [r9, #32]
 8005eae:	f8c9 4018 	str.w	r4, [r9, #24]
 8005eb2:	4628      	mov	r0, r5
 8005eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eb8:	f240 126d 	movw	r2, #365	; 0x16d
 8005ebc:	e7aa      	b.n	8005e14 <mktime+0xb0>
 8005ebe:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8005ec2:	e7a7      	b.n	8005e14 <mktime+0xb0>
 8005ec4:	d01e      	beq.n	8005f04 <mktime+0x1a0>
 8005ec6:	2245      	movs	r2, #69	; 0x45
 8005ec8:	f240 176d 	movw	r7, #365	; 0x16d
 8005ecc:	2564      	movs	r5, #100	; 0x64
 8005ece:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	dc18      	bgt.n	8005f08 <mktime+0x1a4>
 8005ed6:	079d      	lsls	r5, r3, #30
 8005ed8:	d131      	bne.n	8005f3e <mktime+0x1da>
 8005eda:	2164      	movs	r1, #100	; 0x64
 8005edc:	fb93 f2f1 	sdiv	r2, r3, r1
 8005ee0:	fb01 3212 	mls	r2, r1, r2, r3
 8005ee4:	bb72      	cbnz	r2, 8005f44 <mktime+0x1e0>
 8005ee6:	f203 756c 	addw	r5, r3, #1900	; 0x76c
 8005eea:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005eee:	fb95 f2f1 	sdiv	r2, r5, r1
 8005ef2:	fb01 5212 	mls	r2, r1, r2, r5
 8005ef6:	2a00      	cmp	r2, #0
 8005ef8:	f240 126d 	movw	r2, #365	; 0x16d
 8005efc:	bf08      	it	eq
 8005efe:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8005f02:	1aa4      	subs	r4, r4, r2
 8005f04:	461d      	mov	r5, r3
 8005f06:	e789      	b.n	8005e1c <mktime+0xb8>
 8005f08:	0791      	lsls	r1, r2, #30
 8005f0a:	d112      	bne.n	8005f32 <mktime+0x1ce>
 8005f0c:	fb92 f1f5 	sdiv	r1, r2, r5
 8005f10:	fb05 2111 	mls	r1, r5, r1, r2
 8005f14:	b981      	cbnz	r1, 8005f38 <mktime+0x1d4>
 8005f16:	f202 7e6c 	addw	lr, r2, #1900	; 0x76c
 8005f1a:	fb9e f1f6 	sdiv	r1, lr, r6
 8005f1e:	fb06 e111 	mls	r1, r6, r1, lr
 8005f22:	2900      	cmp	r1, #0
 8005f24:	bf14      	ite	ne
 8005f26:	4639      	movne	r1, r7
 8005f28:	f44f 71b7 	moveq.w	r1, #366	; 0x16e
 8005f2c:	1a64      	subs	r4, r4, r1
 8005f2e:	3a01      	subs	r2, #1
 8005f30:	e7cf      	b.n	8005ed2 <mktime+0x16e>
 8005f32:	f240 116d 	movw	r1, #365	; 0x16d
 8005f36:	e7f9      	b.n	8005f2c <mktime+0x1c8>
 8005f38:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8005f3c:	e7f6      	b.n	8005f2c <mktime+0x1c8>
 8005f3e:	f240 126d 	movw	r2, #365	; 0x16d
 8005f42:	e7de      	b.n	8005f02 <mktime+0x19e>
 8005f44:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8005f48:	e7db      	b.n	8005f02 <mktime+0x19e>
 8005f4a:	f000 ffd1 	bl	8006ef0 <__tzcalc_limits>
 8005f4e:	2800      	cmp	r0, #0
 8005f50:	f47f af7e 	bne.w	8005e50 <mktime+0xec>
 8005f54:	4656      	mov	r6, sl
 8005f56:	e796      	b.n	8005e86 <mktime+0x122>
 8005f58:	1a12      	subs	r2, r2, r0
 8005f5a:	4297      	cmp	r7, r2
 8005f5c:	dbfa      	blt.n	8005f54 <mktime+0x1f0>
 8005f5e:	e784      	b.n	8005e6a <mktime+0x106>
 8005f60:	428f      	cmp	r7, r1
 8005f62:	db89      	blt.n	8005e78 <mktime+0x114>
 8005f64:	f1ba 0f00 	cmp.w	sl, #0
 8005f68:	db90      	blt.n	8005e8c <mktime+0x128>
 8005f6a:	2601      	movs	r6, #1
 8005f6c:	ea8a 0a06 	eor.w	sl, sl, r6
 8005f70:	f1ba 0f01 	cmp.w	sl, #1
 8005f74:	d187      	bne.n	8005e86 <mktime+0x122>
 8005f76:	1a1b      	subs	r3, r3, r0
 8005f78:	b906      	cbnz	r6, 8005f7c <mktime+0x218>
 8005f7a:	425b      	negs	r3, r3
 8005f7c:	f8d9 2000 	ldr.w	r2, [r9]
 8005f80:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 8005f84:	441a      	add	r2, r3
 8005f86:	f8c9 2000 	str.w	r2, [r9]
 8005f8a:	4648      	mov	r0, r9
 8005f8c:	441f      	add	r7, r3
 8005f8e:	f7ff fe09 	bl	8005ba4 <validate_structure>
 8005f92:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8005f96:	ebb3 030a 	subs.w	r3, r3, sl
 8005f9a:	f43f af74 	beq.w	8005e86 <mktime+0x122>
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	dc21      	bgt.n	8005fe6 <mktime+0x282>
 8005fa2:	1c98      	adds	r0, r3, #2
 8005fa4:	bfd8      	it	le
 8005fa6:	2301      	movle	r3, #1
 8005fa8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8005fac:	441c      	add	r4, r3
 8005fae:	189b      	adds	r3, r3, r2
 8005fb0:	d522      	bpl.n	8005ff8 <mktime+0x294>
 8005fb2:	1e6a      	subs	r2, r5, #1
 8005fb4:	0791      	lsls	r1, r2, #30
 8005fb6:	d119      	bne.n	8005fec <mktime+0x288>
 8005fb8:	2164      	movs	r1, #100	; 0x64
 8005fba:	fb92 f3f1 	sdiv	r3, r2, r1
 8005fbe:	fb01 2313 	mls	r3, r1, r3, r2
 8005fc2:	b9b3      	cbnz	r3, 8005ff2 <mktime+0x28e>
 8005fc4:	f205 756b 	addw	r5, r5, #1899	; 0x76b
 8005fc8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005fcc:	fb95 f3f2 	sdiv	r3, r5, r2
 8005fd0:	fb02 5513 	mls	r5, r2, r3, r5
 8005fd4:	2d00      	cmp	r5, #0
 8005fd6:	f240 136d 	movw	r3, #365	; 0x16d
 8005fda:	bf18      	it	ne
 8005fdc:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8005fe0:	f8c9 301c 	str.w	r3, [r9, #28]
 8005fe4:	e74f      	b.n	8005e86 <mktime+0x122>
 8005fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8005fea:	e7dd      	b.n	8005fa8 <mktime+0x244>
 8005fec:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8005ff0:	e7f6      	b.n	8005fe0 <mktime+0x27c>
 8005ff2:	f240 136d 	movw	r3, #365	; 0x16d
 8005ff6:	e7f3      	b.n	8005fe0 <mktime+0x27c>
 8005ff8:	07aa      	lsls	r2, r5, #30
 8005ffa:	d117      	bne.n	800602c <mktime+0x2c8>
 8005ffc:	2164      	movs	r1, #100	; 0x64
 8005ffe:	fb95 f2f1 	sdiv	r2, r5, r1
 8006002:	fb01 5212 	mls	r2, r1, r2, r5
 8006006:	b9a2      	cbnz	r2, 8006032 <mktime+0x2ce>
 8006008:	f205 756c 	addw	r5, r5, #1900	; 0x76c
 800600c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006010:	fb95 f2f1 	sdiv	r2, r5, r1
 8006014:	fb01 5512 	mls	r5, r1, r2, r5
 8006018:	2d00      	cmp	r5, #0
 800601a:	f240 126d 	movw	r2, #365	; 0x16d
 800601e:	bf08      	it	eq
 8006020:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8006024:	429a      	cmp	r2, r3
 8006026:	bfd8      	it	le
 8006028:	1a9b      	suble	r3, r3, r2
 800602a:	e7d9      	b.n	8005fe0 <mktime+0x27c>
 800602c:	f240 126d 	movw	r2, #365	; 0x16d
 8006030:	e7f8      	b.n	8006024 <mktime+0x2c0>
 8006032:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8006036:	e7f5      	b.n	8006024 <mktime+0x2c0>
 8006038:	f04f 35ff 	mov.w	r5, #4294967295
 800603c:	e739      	b.n	8005eb2 <mktime+0x14e>
 800603e:	f1ba 0f00 	cmp.w	sl, #0
 8006042:	f04f 0600 	mov.w	r6, #0
 8006046:	da91      	bge.n	8005f6c <mktime+0x208>
 8006048:	f8d8 5020 	ldr.w	r5, [r8, #32]
 800604c:	443d      	add	r5, r7
 800604e:	e721      	b.n	8005e94 <mktime+0x130>
 8006050:	08009528 	.word	0x08009528
 8006054:	00015180 	.word	0x00015180
 8006058:	20000388 	.word	0x20000388

0800605c <_free_r>:
 800605c:	b538      	push	{r3, r4, r5, lr}
 800605e:	4605      	mov	r5, r0
 8006060:	2900      	cmp	r1, #0
 8006062:	d045      	beq.n	80060f0 <_free_r+0x94>
 8006064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006068:	1f0c      	subs	r4, r1, #4
 800606a:	2b00      	cmp	r3, #0
 800606c:	bfb8      	it	lt
 800606e:	18e4      	addlt	r4, r4, r3
 8006070:	f001 fdcb 	bl	8007c0a <__malloc_lock>
 8006074:	4a1f      	ldr	r2, [pc, #124]	; (80060f4 <_free_r+0x98>)
 8006076:	6813      	ldr	r3, [r2, #0]
 8006078:	4610      	mov	r0, r2
 800607a:	b933      	cbnz	r3, 800608a <_free_r+0x2e>
 800607c:	6063      	str	r3, [r4, #4]
 800607e:	6014      	str	r4, [r2, #0]
 8006080:	4628      	mov	r0, r5
 8006082:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006086:	f001 bdc1 	b.w	8007c0c <__malloc_unlock>
 800608a:	42a3      	cmp	r3, r4
 800608c:	d90c      	bls.n	80060a8 <_free_r+0x4c>
 800608e:	6821      	ldr	r1, [r4, #0]
 8006090:	1862      	adds	r2, r4, r1
 8006092:	4293      	cmp	r3, r2
 8006094:	bf04      	itt	eq
 8006096:	681a      	ldreq	r2, [r3, #0]
 8006098:	685b      	ldreq	r3, [r3, #4]
 800609a:	6063      	str	r3, [r4, #4]
 800609c:	bf04      	itt	eq
 800609e:	1852      	addeq	r2, r2, r1
 80060a0:	6022      	streq	r2, [r4, #0]
 80060a2:	6004      	str	r4, [r0, #0]
 80060a4:	e7ec      	b.n	8006080 <_free_r+0x24>
 80060a6:	4613      	mov	r3, r2
 80060a8:	685a      	ldr	r2, [r3, #4]
 80060aa:	b10a      	cbz	r2, 80060b0 <_free_r+0x54>
 80060ac:	42a2      	cmp	r2, r4
 80060ae:	d9fa      	bls.n	80060a6 <_free_r+0x4a>
 80060b0:	6819      	ldr	r1, [r3, #0]
 80060b2:	1858      	adds	r0, r3, r1
 80060b4:	42a0      	cmp	r0, r4
 80060b6:	d10b      	bne.n	80060d0 <_free_r+0x74>
 80060b8:	6820      	ldr	r0, [r4, #0]
 80060ba:	4401      	add	r1, r0
 80060bc:	1858      	adds	r0, r3, r1
 80060be:	4282      	cmp	r2, r0
 80060c0:	6019      	str	r1, [r3, #0]
 80060c2:	d1dd      	bne.n	8006080 <_free_r+0x24>
 80060c4:	6810      	ldr	r0, [r2, #0]
 80060c6:	6852      	ldr	r2, [r2, #4]
 80060c8:	605a      	str	r2, [r3, #4]
 80060ca:	4401      	add	r1, r0
 80060cc:	6019      	str	r1, [r3, #0]
 80060ce:	e7d7      	b.n	8006080 <_free_r+0x24>
 80060d0:	d902      	bls.n	80060d8 <_free_r+0x7c>
 80060d2:	230c      	movs	r3, #12
 80060d4:	602b      	str	r3, [r5, #0]
 80060d6:	e7d3      	b.n	8006080 <_free_r+0x24>
 80060d8:	6820      	ldr	r0, [r4, #0]
 80060da:	1821      	adds	r1, r4, r0
 80060dc:	428a      	cmp	r2, r1
 80060de:	bf04      	itt	eq
 80060e0:	6811      	ldreq	r1, [r2, #0]
 80060e2:	6852      	ldreq	r2, [r2, #4]
 80060e4:	6062      	str	r2, [r4, #4]
 80060e6:	bf04      	itt	eq
 80060e8:	1809      	addeq	r1, r1, r0
 80060ea:	6021      	streq	r1, [r4, #0]
 80060ec:	605c      	str	r4, [r3, #4]
 80060ee:	e7c7      	b.n	8006080 <_free_r+0x24>
 80060f0:	bd38      	pop	{r3, r4, r5, pc}
 80060f2:	bf00      	nop
 80060f4:	20000364 	.word	0x20000364

080060f8 <_malloc_r>:
 80060f8:	b570      	push	{r4, r5, r6, lr}
 80060fa:	1ccd      	adds	r5, r1, #3
 80060fc:	f025 0503 	bic.w	r5, r5, #3
 8006100:	3508      	adds	r5, #8
 8006102:	2d0c      	cmp	r5, #12
 8006104:	bf38      	it	cc
 8006106:	250c      	movcc	r5, #12
 8006108:	2d00      	cmp	r5, #0
 800610a:	4606      	mov	r6, r0
 800610c:	db01      	blt.n	8006112 <_malloc_r+0x1a>
 800610e:	42a9      	cmp	r1, r5
 8006110:	d903      	bls.n	800611a <_malloc_r+0x22>
 8006112:	230c      	movs	r3, #12
 8006114:	6033      	str	r3, [r6, #0]
 8006116:	2000      	movs	r0, #0
 8006118:	bd70      	pop	{r4, r5, r6, pc}
 800611a:	f001 fd76 	bl	8007c0a <__malloc_lock>
 800611e:	4a23      	ldr	r2, [pc, #140]	; (80061ac <_malloc_r+0xb4>)
 8006120:	6814      	ldr	r4, [r2, #0]
 8006122:	4621      	mov	r1, r4
 8006124:	b991      	cbnz	r1, 800614c <_malloc_r+0x54>
 8006126:	4c22      	ldr	r4, [pc, #136]	; (80061b0 <_malloc_r+0xb8>)
 8006128:	6823      	ldr	r3, [r4, #0]
 800612a:	b91b      	cbnz	r3, 8006134 <_malloc_r+0x3c>
 800612c:	4630      	mov	r0, r6
 800612e:	f000 f841 	bl	80061b4 <_sbrk_r>
 8006132:	6020      	str	r0, [r4, #0]
 8006134:	4629      	mov	r1, r5
 8006136:	4630      	mov	r0, r6
 8006138:	f000 f83c 	bl	80061b4 <_sbrk_r>
 800613c:	1c43      	adds	r3, r0, #1
 800613e:	d126      	bne.n	800618e <_malloc_r+0x96>
 8006140:	230c      	movs	r3, #12
 8006142:	6033      	str	r3, [r6, #0]
 8006144:	4630      	mov	r0, r6
 8006146:	f001 fd61 	bl	8007c0c <__malloc_unlock>
 800614a:	e7e4      	b.n	8006116 <_malloc_r+0x1e>
 800614c:	680b      	ldr	r3, [r1, #0]
 800614e:	1b5b      	subs	r3, r3, r5
 8006150:	d41a      	bmi.n	8006188 <_malloc_r+0x90>
 8006152:	2b0b      	cmp	r3, #11
 8006154:	d90f      	bls.n	8006176 <_malloc_r+0x7e>
 8006156:	600b      	str	r3, [r1, #0]
 8006158:	50cd      	str	r5, [r1, r3]
 800615a:	18cc      	adds	r4, r1, r3
 800615c:	4630      	mov	r0, r6
 800615e:	f001 fd55 	bl	8007c0c <__malloc_unlock>
 8006162:	f104 000b 	add.w	r0, r4, #11
 8006166:	1d23      	adds	r3, r4, #4
 8006168:	f020 0007 	bic.w	r0, r0, #7
 800616c:	1ac3      	subs	r3, r0, r3
 800616e:	d01b      	beq.n	80061a8 <_malloc_r+0xb0>
 8006170:	425a      	negs	r2, r3
 8006172:	50e2      	str	r2, [r4, r3]
 8006174:	bd70      	pop	{r4, r5, r6, pc}
 8006176:	428c      	cmp	r4, r1
 8006178:	bf0d      	iteet	eq
 800617a:	6863      	ldreq	r3, [r4, #4]
 800617c:	684b      	ldrne	r3, [r1, #4]
 800617e:	6063      	strne	r3, [r4, #4]
 8006180:	6013      	streq	r3, [r2, #0]
 8006182:	bf18      	it	ne
 8006184:	460c      	movne	r4, r1
 8006186:	e7e9      	b.n	800615c <_malloc_r+0x64>
 8006188:	460c      	mov	r4, r1
 800618a:	6849      	ldr	r1, [r1, #4]
 800618c:	e7ca      	b.n	8006124 <_malloc_r+0x2c>
 800618e:	1cc4      	adds	r4, r0, #3
 8006190:	f024 0403 	bic.w	r4, r4, #3
 8006194:	42a0      	cmp	r0, r4
 8006196:	d005      	beq.n	80061a4 <_malloc_r+0xac>
 8006198:	1a21      	subs	r1, r4, r0
 800619a:	4630      	mov	r0, r6
 800619c:	f000 f80a 	bl	80061b4 <_sbrk_r>
 80061a0:	3001      	adds	r0, #1
 80061a2:	d0cd      	beq.n	8006140 <_malloc_r+0x48>
 80061a4:	6025      	str	r5, [r4, #0]
 80061a6:	e7d9      	b.n	800615c <_malloc_r+0x64>
 80061a8:	bd70      	pop	{r4, r5, r6, pc}
 80061aa:	bf00      	nop
 80061ac:	20000364 	.word	0x20000364
 80061b0:	20000368 	.word	0x20000368

080061b4 <_sbrk_r>:
 80061b4:	b538      	push	{r3, r4, r5, lr}
 80061b6:	4c06      	ldr	r4, [pc, #24]	; (80061d0 <_sbrk_r+0x1c>)
 80061b8:	2300      	movs	r3, #0
 80061ba:	4605      	mov	r5, r0
 80061bc:	4608      	mov	r0, r1
 80061be:	6023      	str	r3, [r4, #0]
 80061c0:	f7ff fae2 	bl	8005788 <_sbrk>
 80061c4:	1c43      	adds	r3, r0, #1
 80061c6:	d102      	bne.n	80061ce <_sbrk_r+0x1a>
 80061c8:	6823      	ldr	r3, [r4, #0]
 80061ca:	b103      	cbz	r3, 80061ce <_sbrk_r+0x1a>
 80061cc:	602b      	str	r3, [r5, #0]
 80061ce:	bd38      	pop	{r3, r4, r5, pc}
 80061d0:	20001358 	.word	0x20001358

080061d4 <strcpy>:
 80061d4:	4603      	mov	r3, r0
 80061d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061da:	f803 2b01 	strb.w	r2, [r3], #1
 80061de:	2a00      	cmp	r2, #0
 80061e0:	d1f9      	bne.n	80061d6 <strcpy+0x2>
 80061e2:	4770      	bx	lr

080061e4 <sulp>:
 80061e4:	b570      	push	{r4, r5, r6, lr}
 80061e6:	4604      	mov	r4, r0
 80061e8:	460d      	mov	r5, r1
 80061ea:	ec45 4b10 	vmov	d0, r4, r5
 80061ee:	4616      	mov	r6, r2
 80061f0:	f001 ffce 	bl	8008190 <__ulp>
 80061f4:	ec51 0b10 	vmov	r0, r1, d0
 80061f8:	b17e      	cbz	r6, 800621a <sulp+0x36>
 80061fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80061fe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006202:	2b00      	cmp	r3, #0
 8006204:	dd09      	ble.n	800621a <sulp+0x36>
 8006206:	051b      	lsls	r3, r3, #20
 8006208:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800620c:	2400      	movs	r4, #0
 800620e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006212:	4622      	mov	r2, r4
 8006214:	462b      	mov	r3, r5
 8006216:	f7fa f9fb 	bl	8000610 <__aeabi_dmul>
 800621a:	bd70      	pop	{r4, r5, r6, pc}
 800621c:	0000      	movs	r0, r0
	...

08006220 <_strtod_l>:
 8006220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006224:	b09f      	sub	sp, #124	; 0x7c
 8006226:	4698      	mov	r8, r3
 8006228:	9004      	str	r0, [sp, #16]
 800622a:	2300      	movs	r3, #0
 800622c:	4640      	mov	r0, r8
 800622e:	460c      	mov	r4, r1
 8006230:	9215      	str	r2, [sp, #84]	; 0x54
 8006232:	931a      	str	r3, [sp, #104]	; 0x68
 8006234:	f001 fcca 	bl	8007bcc <__localeconv_l>
 8006238:	4607      	mov	r7, r0
 800623a:	6800      	ldr	r0, [r0, #0]
 800623c:	f7f9 ffd2 	bl	80001e4 <strlen>
 8006240:	f04f 0a00 	mov.w	sl, #0
 8006244:	4605      	mov	r5, r0
 8006246:	f04f 0b00 	mov.w	fp, #0
 800624a:	9419      	str	r4, [sp, #100]	; 0x64
 800624c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800624e:	781a      	ldrb	r2, [r3, #0]
 8006250:	2a0d      	cmp	r2, #13
 8006252:	d833      	bhi.n	80062bc <_strtod_l+0x9c>
 8006254:	2a09      	cmp	r2, #9
 8006256:	d237      	bcs.n	80062c8 <_strtod_l+0xa8>
 8006258:	2a00      	cmp	r2, #0
 800625a:	d03f      	beq.n	80062dc <_strtod_l+0xbc>
 800625c:	2300      	movs	r3, #0
 800625e:	9309      	str	r3, [sp, #36]	; 0x24
 8006260:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006262:	7833      	ldrb	r3, [r6, #0]
 8006264:	2b30      	cmp	r3, #48	; 0x30
 8006266:	f040 8103 	bne.w	8006470 <_strtod_l+0x250>
 800626a:	7873      	ldrb	r3, [r6, #1]
 800626c:	2b58      	cmp	r3, #88	; 0x58
 800626e:	d001      	beq.n	8006274 <_strtod_l+0x54>
 8006270:	2b78      	cmp	r3, #120	; 0x78
 8006272:	d16b      	bne.n	800634c <_strtod_l+0x12c>
 8006274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006276:	9301      	str	r3, [sp, #4]
 8006278:	ab1a      	add	r3, sp, #104	; 0x68
 800627a:	9300      	str	r3, [sp, #0]
 800627c:	f8cd 8008 	str.w	r8, [sp, #8]
 8006280:	ab1b      	add	r3, sp, #108	; 0x6c
 8006282:	4aad      	ldr	r2, [pc, #692]	; (8006538 <_strtod_l+0x318>)
 8006284:	9804      	ldr	r0, [sp, #16]
 8006286:	a919      	add	r1, sp, #100	; 0x64
 8006288:	f001 f8c2 	bl	8007410 <__gethex>
 800628c:	f010 0407 	ands.w	r4, r0, #7
 8006290:	4605      	mov	r5, r0
 8006292:	d005      	beq.n	80062a0 <_strtod_l+0x80>
 8006294:	2c06      	cmp	r4, #6
 8006296:	d12b      	bne.n	80062f0 <_strtod_l+0xd0>
 8006298:	3601      	adds	r6, #1
 800629a:	2300      	movs	r3, #0
 800629c:	9619      	str	r6, [sp, #100]	; 0x64
 800629e:	9309      	str	r3, [sp, #36]	; 0x24
 80062a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f040 8590 	bne.w	8006dc8 <_strtod_l+0xba8>
 80062a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062aa:	b1e3      	cbz	r3, 80062e6 <_strtod_l+0xc6>
 80062ac:	4652      	mov	r2, sl
 80062ae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80062b2:	ec43 2b10 	vmov	d0, r2, r3
 80062b6:	b01f      	add	sp, #124	; 0x7c
 80062b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062bc:	2a2b      	cmp	r2, #43	; 0x2b
 80062be:	d006      	beq.n	80062ce <_strtod_l+0xae>
 80062c0:	2a2d      	cmp	r2, #45	; 0x2d
 80062c2:	d013      	beq.n	80062ec <_strtod_l+0xcc>
 80062c4:	2a20      	cmp	r2, #32
 80062c6:	d1c9      	bne.n	800625c <_strtod_l+0x3c>
 80062c8:	3301      	adds	r3, #1
 80062ca:	9319      	str	r3, [sp, #100]	; 0x64
 80062cc:	e7be      	b.n	800624c <_strtod_l+0x2c>
 80062ce:	2200      	movs	r2, #0
 80062d0:	9209      	str	r2, [sp, #36]	; 0x24
 80062d2:	1c5a      	adds	r2, r3, #1
 80062d4:	9219      	str	r2, [sp, #100]	; 0x64
 80062d6:	785b      	ldrb	r3, [r3, #1]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1c1      	bne.n	8006260 <_strtod_l+0x40>
 80062dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80062de:	9419      	str	r4, [sp, #100]	; 0x64
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f040 856f 	bne.w	8006dc4 <_strtod_l+0xba4>
 80062e6:	4652      	mov	r2, sl
 80062e8:	465b      	mov	r3, fp
 80062ea:	e7e2      	b.n	80062b2 <_strtod_l+0x92>
 80062ec:	2201      	movs	r2, #1
 80062ee:	e7ef      	b.n	80062d0 <_strtod_l+0xb0>
 80062f0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80062f2:	b13a      	cbz	r2, 8006304 <_strtod_l+0xe4>
 80062f4:	2135      	movs	r1, #53	; 0x35
 80062f6:	a81c      	add	r0, sp, #112	; 0x70
 80062f8:	f002 f83b 	bl	8008372 <__copybits>
 80062fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80062fe:	9804      	ldr	r0, [sp, #16]
 8006300:	f001 fcb9 	bl	8007c76 <_Bfree>
 8006304:	3c01      	subs	r4, #1
 8006306:	2c04      	cmp	r4, #4
 8006308:	d808      	bhi.n	800631c <_strtod_l+0xfc>
 800630a:	e8df f004 	tbb	[pc, r4]
 800630e:	030c      	.short	0x030c
 8006310:	1a17      	.short	0x1a17
 8006312:	0c          	.byte	0x0c
 8006313:	00          	.byte	0x00
 8006314:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8006318:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 800631c:	0729      	lsls	r1, r5, #28
 800631e:	d5bf      	bpl.n	80062a0 <_strtod_l+0x80>
 8006320:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006324:	e7bc      	b.n	80062a0 <_strtod_l+0x80>
 8006326:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006328:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800632a:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 800632e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006332:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006336:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800633a:	e7ef      	b.n	800631c <_strtod_l+0xfc>
 800633c:	f8df b204 	ldr.w	fp, [pc, #516]	; 8006544 <_strtod_l+0x324>
 8006340:	e7ec      	b.n	800631c <_strtod_l+0xfc>
 8006342:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006346:	f04f 3aff 	mov.w	sl, #4294967295
 800634a:	e7e7      	b.n	800631c <_strtod_l+0xfc>
 800634c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800634e:	1c5a      	adds	r2, r3, #1
 8006350:	9219      	str	r2, [sp, #100]	; 0x64
 8006352:	785b      	ldrb	r3, [r3, #1]
 8006354:	2b30      	cmp	r3, #48	; 0x30
 8006356:	d0f9      	beq.n	800634c <_strtod_l+0x12c>
 8006358:	2b00      	cmp	r3, #0
 800635a:	d0a1      	beq.n	80062a0 <_strtod_l+0x80>
 800635c:	2301      	movs	r3, #1
 800635e:	f04f 0900 	mov.w	r9, #0
 8006362:	9308      	str	r3, [sp, #32]
 8006364:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006366:	930a      	str	r3, [sp, #40]	; 0x28
 8006368:	f8cd 901c 	str.w	r9, [sp, #28]
 800636c:	f8cd 9018 	str.w	r9, [sp, #24]
 8006370:	220a      	movs	r2, #10
 8006372:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006374:	7806      	ldrb	r6, [r0, #0]
 8006376:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800637a:	b2d9      	uxtb	r1, r3
 800637c:	2909      	cmp	r1, #9
 800637e:	d979      	bls.n	8006474 <_strtod_l+0x254>
 8006380:	462a      	mov	r2, r5
 8006382:	6839      	ldr	r1, [r7, #0]
 8006384:	f002 f86a 	bl	800845c <strncmp>
 8006388:	2800      	cmp	r0, #0
 800638a:	f000 8082 	beq.w	8006492 <_strtod_l+0x272>
 800638e:	2000      	movs	r0, #0
 8006390:	9d06      	ldr	r5, [sp, #24]
 8006392:	4633      	mov	r3, r6
 8006394:	4602      	mov	r2, r0
 8006396:	4601      	mov	r1, r0
 8006398:	2b65      	cmp	r3, #101	; 0x65
 800639a:	d002      	beq.n	80063a2 <_strtod_l+0x182>
 800639c:	2b45      	cmp	r3, #69	; 0x45
 800639e:	f040 80e8 	bne.w	8006572 <_strtod_l+0x352>
 80063a2:	b925      	cbnz	r5, 80063ae <_strtod_l+0x18e>
 80063a4:	b910      	cbnz	r0, 80063ac <_strtod_l+0x18c>
 80063a6:	9b08      	ldr	r3, [sp, #32]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d097      	beq.n	80062dc <_strtod_l+0xbc>
 80063ac:	2500      	movs	r5, #0
 80063ae:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80063b0:	1c63      	adds	r3, r4, #1
 80063b2:	9319      	str	r3, [sp, #100]	; 0x64
 80063b4:	7863      	ldrb	r3, [r4, #1]
 80063b6:	2b2b      	cmp	r3, #43	; 0x2b
 80063b8:	f000 80c8 	beq.w	800654c <_strtod_l+0x32c>
 80063bc:	2b2d      	cmp	r3, #45	; 0x2d
 80063be:	f000 80cb 	beq.w	8006558 <_strtod_l+0x338>
 80063c2:	2600      	movs	r6, #0
 80063c4:	9605      	str	r6, [sp, #20]
 80063c6:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80063ca:	2e09      	cmp	r6, #9
 80063cc:	f200 80d0 	bhi.w	8006570 <_strtod_l+0x350>
 80063d0:	2b30      	cmp	r3, #48	; 0x30
 80063d2:	f000 80c3 	beq.w	800655c <_strtod_l+0x33c>
 80063d6:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 80063da:	2e08      	cmp	r6, #8
 80063dc:	f200 80c9 	bhi.w	8006572 <_strtod_l+0x352>
 80063e0:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80063e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80063e6:	f04f 0c0a 	mov.w	ip, #10
 80063ea:	461f      	mov	r7, r3
 80063ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80063ee:	1c5e      	adds	r6, r3, #1
 80063f0:	9619      	str	r6, [sp, #100]	; 0x64
 80063f2:	785b      	ldrb	r3, [r3, #1]
 80063f4:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80063f8:	f1b8 0f09 	cmp.w	r8, #9
 80063fc:	f240 80b3 	bls.w	8006566 <_strtod_l+0x346>
 8006400:	1bf6      	subs	r6, r6, r7
 8006402:	2e08      	cmp	r6, #8
 8006404:	f644 681f 	movw	r8, #19999	; 0x4e1f
 8006408:	dc02      	bgt.n	8006410 <_strtod_l+0x1f0>
 800640a:	45f0      	cmp	r8, lr
 800640c:	bfa8      	it	ge
 800640e:	46f0      	movge	r8, lr
 8006410:	9e05      	ldr	r6, [sp, #20]
 8006412:	b10e      	cbz	r6, 8006418 <_strtod_l+0x1f8>
 8006414:	f1c8 0800 	rsb	r8, r8, #0
 8006418:	2d00      	cmp	r5, #0
 800641a:	f040 80d0 	bne.w	80065be <_strtod_l+0x39e>
 800641e:	2800      	cmp	r0, #0
 8006420:	f47f af3e 	bne.w	80062a0 <_strtod_l+0x80>
 8006424:	9a08      	ldr	r2, [sp, #32]
 8006426:	2a00      	cmp	r2, #0
 8006428:	f47f af3a 	bne.w	80062a0 <_strtod_l+0x80>
 800642c:	2900      	cmp	r1, #0
 800642e:	f47f af55 	bne.w	80062dc <_strtod_l+0xbc>
 8006432:	2b4e      	cmp	r3, #78	; 0x4e
 8006434:	f000 80a6 	beq.w	8006584 <_strtod_l+0x364>
 8006438:	f300 809e 	bgt.w	8006578 <_strtod_l+0x358>
 800643c:	2b49      	cmp	r3, #73	; 0x49
 800643e:	f47f af4d 	bne.w	80062dc <_strtod_l+0xbc>
 8006442:	493e      	ldr	r1, [pc, #248]	; (800653c <_strtod_l+0x31c>)
 8006444:	a819      	add	r0, sp, #100	; 0x64
 8006446:	f001 fa13 	bl	8007870 <__match>
 800644a:	2800      	cmp	r0, #0
 800644c:	f43f af46 	beq.w	80062dc <_strtod_l+0xbc>
 8006450:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006452:	493b      	ldr	r1, [pc, #236]	; (8006540 <_strtod_l+0x320>)
 8006454:	3b01      	subs	r3, #1
 8006456:	a819      	add	r0, sp, #100	; 0x64
 8006458:	9319      	str	r3, [sp, #100]	; 0x64
 800645a:	f001 fa09 	bl	8007870 <__match>
 800645e:	b910      	cbnz	r0, 8006466 <_strtod_l+0x246>
 8006460:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006462:	3301      	adds	r3, #1
 8006464:	9319      	str	r3, [sp, #100]	; 0x64
 8006466:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 8006544 <_strtod_l+0x324>
 800646a:	f04f 0a00 	mov.w	sl, #0
 800646e:	e717      	b.n	80062a0 <_strtod_l+0x80>
 8006470:	2300      	movs	r3, #0
 8006472:	e774      	b.n	800635e <_strtod_l+0x13e>
 8006474:	9906      	ldr	r1, [sp, #24]
 8006476:	2908      	cmp	r1, #8
 8006478:	bfdd      	ittte	le
 800647a:	9907      	ldrle	r1, [sp, #28]
 800647c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006480:	9307      	strle	r3, [sp, #28]
 8006482:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006486:	9b06      	ldr	r3, [sp, #24]
 8006488:	3001      	adds	r0, #1
 800648a:	3301      	adds	r3, #1
 800648c:	9306      	str	r3, [sp, #24]
 800648e:	9019      	str	r0, [sp, #100]	; 0x64
 8006490:	e76f      	b.n	8006372 <_strtod_l+0x152>
 8006492:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006494:	195a      	adds	r2, r3, r5
 8006496:	9219      	str	r2, [sp, #100]	; 0x64
 8006498:	9a06      	ldr	r2, [sp, #24]
 800649a:	5d5b      	ldrb	r3, [r3, r5]
 800649c:	2a00      	cmp	r2, #0
 800649e:	d148      	bne.n	8006532 <_strtod_l+0x312>
 80064a0:	4610      	mov	r0, r2
 80064a2:	2b30      	cmp	r3, #48	; 0x30
 80064a4:	d02a      	beq.n	80064fc <_strtod_l+0x2dc>
 80064a6:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80064aa:	2a08      	cmp	r2, #8
 80064ac:	f200 8491 	bhi.w	8006dd2 <_strtod_l+0xbb2>
 80064b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80064b2:	920a      	str	r2, [sp, #40]	; 0x28
 80064b4:	4602      	mov	r2, r0
 80064b6:	2000      	movs	r0, #0
 80064b8:	4605      	mov	r5, r0
 80064ba:	3b30      	subs	r3, #48	; 0x30
 80064bc:	f100 0101 	add.w	r1, r0, #1
 80064c0:	d011      	beq.n	80064e6 <_strtod_l+0x2c6>
 80064c2:	440a      	add	r2, r1
 80064c4:	eb00 0c05 	add.w	ip, r0, r5
 80064c8:	4629      	mov	r1, r5
 80064ca:	260a      	movs	r6, #10
 80064cc:	4561      	cmp	r1, ip
 80064ce:	d11b      	bne.n	8006508 <_strtod_l+0x2e8>
 80064d0:	4428      	add	r0, r5
 80064d2:	2808      	cmp	r0, #8
 80064d4:	f100 0501 	add.w	r5, r0, #1
 80064d8:	dc25      	bgt.n	8006526 <_strtod_l+0x306>
 80064da:	9807      	ldr	r0, [sp, #28]
 80064dc:	210a      	movs	r1, #10
 80064de:	fb01 3300 	mla	r3, r1, r0, r3
 80064e2:	9307      	str	r3, [sp, #28]
 80064e4:	2100      	movs	r1, #0
 80064e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80064e8:	1c58      	adds	r0, r3, #1
 80064ea:	9019      	str	r0, [sp, #100]	; 0x64
 80064ec:	785b      	ldrb	r3, [r3, #1]
 80064ee:	4608      	mov	r0, r1
 80064f0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80064f4:	2909      	cmp	r1, #9
 80064f6:	d9e0      	bls.n	80064ba <_strtod_l+0x29a>
 80064f8:	2101      	movs	r1, #1
 80064fa:	e74d      	b.n	8006398 <_strtod_l+0x178>
 80064fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80064fe:	1c5a      	adds	r2, r3, #1
 8006500:	9219      	str	r2, [sp, #100]	; 0x64
 8006502:	3001      	adds	r0, #1
 8006504:	785b      	ldrb	r3, [r3, #1]
 8006506:	e7cc      	b.n	80064a2 <_strtod_l+0x282>
 8006508:	3101      	adds	r1, #1
 800650a:	f101 3eff 	add.w	lr, r1, #4294967295
 800650e:	f1be 0f08 	cmp.w	lr, #8
 8006512:	dc03      	bgt.n	800651c <_strtod_l+0x2fc>
 8006514:	9f07      	ldr	r7, [sp, #28]
 8006516:	4377      	muls	r7, r6
 8006518:	9707      	str	r7, [sp, #28]
 800651a:	e7d7      	b.n	80064cc <_strtod_l+0x2ac>
 800651c:	2910      	cmp	r1, #16
 800651e:	bfd8      	it	le
 8006520:	fb06 f909 	mulle.w	r9, r6, r9
 8006524:	e7d2      	b.n	80064cc <_strtod_l+0x2ac>
 8006526:	2d10      	cmp	r5, #16
 8006528:	bfdc      	itt	le
 800652a:	210a      	movle	r1, #10
 800652c:	fb01 3909 	mlale	r9, r1, r9, r3
 8006530:	e7d8      	b.n	80064e4 <_strtod_l+0x2c4>
 8006532:	4602      	mov	r2, r0
 8006534:	9d06      	ldr	r5, [sp, #24]
 8006536:	e7db      	b.n	80064f0 <_strtod_l+0x2d0>
 8006538:	080095c4 	.word	0x080095c4
 800653c:	080095b8 	.word	0x080095b8
 8006540:	080095bb 	.word	0x080095bb
 8006544:	7ff00000 	.word	0x7ff00000
 8006548:	2101      	movs	r1, #1
 800654a:	e72b      	b.n	80063a4 <_strtod_l+0x184>
 800654c:	2300      	movs	r3, #0
 800654e:	9305      	str	r3, [sp, #20]
 8006550:	1ca3      	adds	r3, r4, #2
 8006552:	9319      	str	r3, [sp, #100]	; 0x64
 8006554:	78a3      	ldrb	r3, [r4, #2]
 8006556:	e736      	b.n	80063c6 <_strtod_l+0x1a6>
 8006558:	2301      	movs	r3, #1
 800655a:	e7f8      	b.n	800654e <_strtod_l+0x32e>
 800655c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800655e:	1c5e      	adds	r6, r3, #1
 8006560:	9619      	str	r6, [sp, #100]	; 0x64
 8006562:	785b      	ldrb	r3, [r3, #1]
 8006564:	e734      	b.n	80063d0 <_strtod_l+0x1b0>
 8006566:	fb0c 3e0e 	mla	lr, ip, lr, r3
 800656a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800656e:	e73d      	b.n	80063ec <_strtod_l+0x1cc>
 8006570:	9419      	str	r4, [sp, #100]	; 0x64
 8006572:	f04f 0800 	mov.w	r8, #0
 8006576:	e74f      	b.n	8006418 <_strtod_l+0x1f8>
 8006578:	2b69      	cmp	r3, #105	; 0x69
 800657a:	f43f af62 	beq.w	8006442 <_strtod_l+0x222>
 800657e:	2b6e      	cmp	r3, #110	; 0x6e
 8006580:	f47f aeac 	bne.w	80062dc <_strtod_l+0xbc>
 8006584:	4988      	ldr	r1, [pc, #544]	; (80067a8 <_strtod_l+0x588>)
 8006586:	a819      	add	r0, sp, #100	; 0x64
 8006588:	f001 f972 	bl	8007870 <__match>
 800658c:	2800      	cmp	r0, #0
 800658e:	f43f aea5 	beq.w	80062dc <_strtod_l+0xbc>
 8006592:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	2b28      	cmp	r3, #40	; 0x28
 8006598:	d10e      	bne.n	80065b8 <_strtod_l+0x398>
 800659a:	aa1c      	add	r2, sp, #112	; 0x70
 800659c:	4983      	ldr	r1, [pc, #524]	; (80067ac <_strtod_l+0x58c>)
 800659e:	a819      	add	r0, sp, #100	; 0x64
 80065a0:	f001 f979 	bl	8007896 <__hexnan>
 80065a4:	2805      	cmp	r0, #5
 80065a6:	d107      	bne.n	80065b8 <_strtod_l+0x398>
 80065a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80065aa:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 80065ae:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80065b2:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80065b6:	e673      	b.n	80062a0 <_strtod_l+0x80>
 80065b8:	f8df b200 	ldr.w	fp, [pc, #512]	; 80067bc <_strtod_l+0x59c>
 80065bc:	e755      	b.n	800646a <_strtod_l+0x24a>
 80065be:	9b06      	ldr	r3, [sp, #24]
 80065c0:	9807      	ldr	r0, [sp, #28]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	bf08      	it	eq
 80065c6:	462b      	moveq	r3, r5
 80065c8:	2d10      	cmp	r5, #16
 80065ca:	462c      	mov	r4, r5
 80065cc:	eba8 0802 	sub.w	r8, r8, r2
 80065d0:	bfa8      	it	ge
 80065d2:	2410      	movge	r4, #16
 80065d4:	9306      	str	r3, [sp, #24]
 80065d6:	f7f9 ffa5 	bl	8000524 <__aeabi_ui2d>
 80065da:	2c09      	cmp	r4, #9
 80065dc:	4682      	mov	sl, r0
 80065de:	468b      	mov	fp, r1
 80065e0:	dd13      	ble.n	800660a <_strtod_l+0x3ea>
 80065e2:	4b73      	ldr	r3, [pc, #460]	; (80067b0 <_strtod_l+0x590>)
 80065e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80065e8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80065ec:	f7fa f810 	bl	8000610 <__aeabi_dmul>
 80065f0:	4606      	mov	r6, r0
 80065f2:	4648      	mov	r0, r9
 80065f4:	460f      	mov	r7, r1
 80065f6:	f7f9 ff95 	bl	8000524 <__aeabi_ui2d>
 80065fa:	4602      	mov	r2, r0
 80065fc:	460b      	mov	r3, r1
 80065fe:	4630      	mov	r0, r6
 8006600:	4639      	mov	r1, r7
 8006602:	f7f9 fe53 	bl	80002ac <__adddf3>
 8006606:	4682      	mov	sl, r0
 8006608:	468b      	mov	fp, r1
 800660a:	2d0f      	cmp	r5, #15
 800660c:	dc36      	bgt.n	800667c <_strtod_l+0x45c>
 800660e:	f1b8 0f00 	cmp.w	r8, #0
 8006612:	f43f ae45 	beq.w	80062a0 <_strtod_l+0x80>
 8006616:	dd24      	ble.n	8006662 <_strtod_l+0x442>
 8006618:	f1b8 0f16 	cmp.w	r8, #22
 800661c:	dc0b      	bgt.n	8006636 <_strtod_l+0x416>
 800661e:	4d64      	ldr	r5, [pc, #400]	; (80067b0 <_strtod_l+0x590>)
 8006620:	eb05 08c8 	add.w	r8, r5, r8, lsl #3
 8006624:	e9d8 0100 	ldrd	r0, r1, [r8]
 8006628:	4652      	mov	r2, sl
 800662a:	465b      	mov	r3, fp
 800662c:	f7f9 fff0 	bl	8000610 <__aeabi_dmul>
 8006630:	4682      	mov	sl, r0
 8006632:	468b      	mov	fp, r1
 8006634:	e634      	b.n	80062a0 <_strtod_l+0x80>
 8006636:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800663a:	4598      	cmp	r8, r3
 800663c:	dc1e      	bgt.n	800667c <_strtod_l+0x45c>
 800663e:	4c5c      	ldr	r4, [pc, #368]	; (80067b0 <_strtod_l+0x590>)
 8006640:	f1c5 050f 	rsb	r5, r5, #15
 8006644:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006648:	eba8 0505 	sub.w	r5, r8, r5
 800664c:	4652      	mov	r2, sl
 800664e:	465b      	mov	r3, fp
 8006650:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006654:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006658:	f7f9 ffda 	bl	8000610 <__aeabi_dmul>
 800665c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006660:	e7e4      	b.n	800662c <_strtod_l+0x40c>
 8006662:	f118 0f16 	cmn.w	r8, #22
 8006666:	db09      	blt.n	800667c <_strtod_l+0x45c>
 8006668:	4d51      	ldr	r5, [pc, #324]	; (80067b0 <_strtod_l+0x590>)
 800666a:	eba5 08c8 	sub.w	r8, r5, r8, lsl #3
 800666e:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006672:	4650      	mov	r0, sl
 8006674:	4659      	mov	r1, fp
 8006676:	f7fa f8f5 	bl	8000864 <__aeabi_ddiv>
 800667a:	e7d9      	b.n	8006630 <_strtod_l+0x410>
 800667c:	1b2c      	subs	r4, r5, r4
 800667e:	4444      	add	r4, r8
 8006680:	2c00      	cmp	r4, #0
 8006682:	dd70      	ble.n	8006766 <_strtod_l+0x546>
 8006684:	f014 030f 	ands.w	r3, r4, #15
 8006688:	d00a      	beq.n	80066a0 <_strtod_l+0x480>
 800668a:	4949      	ldr	r1, [pc, #292]	; (80067b0 <_strtod_l+0x590>)
 800668c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006690:	4652      	mov	r2, sl
 8006692:	465b      	mov	r3, fp
 8006694:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006698:	f7f9 ffba 	bl	8000610 <__aeabi_dmul>
 800669c:	4682      	mov	sl, r0
 800669e:	468b      	mov	fp, r1
 80066a0:	f034 040f 	bics.w	r4, r4, #15
 80066a4:	d050      	beq.n	8006748 <_strtod_l+0x528>
 80066a6:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 80066aa:	dd23      	ble.n	80066f4 <_strtod_l+0x4d4>
 80066ac:	2400      	movs	r4, #0
 80066ae:	4625      	mov	r5, r4
 80066b0:	9407      	str	r4, [sp, #28]
 80066b2:	9406      	str	r4, [sp, #24]
 80066b4:	9a04      	ldr	r2, [sp, #16]
 80066b6:	f8df b108 	ldr.w	fp, [pc, #264]	; 80067c0 <_strtod_l+0x5a0>
 80066ba:	2322      	movs	r3, #34	; 0x22
 80066bc:	6013      	str	r3, [r2, #0]
 80066be:	f04f 0a00 	mov.w	sl, #0
 80066c2:	9b07      	ldr	r3, [sp, #28]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f43f adeb 	beq.w	80062a0 <_strtod_l+0x80>
 80066ca:	991a      	ldr	r1, [sp, #104]	; 0x68
 80066cc:	9804      	ldr	r0, [sp, #16]
 80066ce:	f001 fad2 	bl	8007c76 <_Bfree>
 80066d2:	9906      	ldr	r1, [sp, #24]
 80066d4:	9804      	ldr	r0, [sp, #16]
 80066d6:	f001 face 	bl	8007c76 <_Bfree>
 80066da:	4629      	mov	r1, r5
 80066dc:	9804      	ldr	r0, [sp, #16]
 80066de:	f001 faca 	bl	8007c76 <_Bfree>
 80066e2:	9907      	ldr	r1, [sp, #28]
 80066e4:	9804      	ldr	r0, [sp, #16]
 80066e6:	f001 fac6 	bl	8007c76 <_Bfree>
 80066ea:	4621      	mov	r1, r4
 80066ec:	9804      	ldr	r0, [sp, #16]
 80066ee:	f001 fac2 	bl	8007c76 <_Bfree>
 80066f2:	e5d5      	b.n	80062a0 <_strtod_l+0x80>
 80066f4:	4e2f      	ldr	r6, [pc, #188]	; (80067b4 <_strtod_l+0x594>)
 80066f6:	2300      	movs	r3, #0
 80066f8:	1124      	asrs	r4, r4, #4
 80066fa:	4650      	mov	r0, sl
 80066fc:	4659      	mov	r1, fp
 80066fe:	4699      	mov	r9, r3
 8006700:	4637      	mov	r7, r6
 8006702:	2c01      	cmp	r4, #1
 8006704:	dc23      	bgt.n	800674e <_strtod_l+0x52e>
 8006706:	b10b      	cbz	r3, 800670c <_strtod_l+0x4ec>
 8006708:	4682      	mov	sl, r0
 800670a:	468b      	mov	fp, r1
 800670c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006710:	eb07 07c9 	add.w	r7, r7, r9, lsl #3
 8006714:	4652      	mov	r2, sl
 8006716:	465b      	mov	r3, fp
 8006718:	e9d7 0100 	ldrd	r0, r1, [r7]
 800671c:	f7f9 ff78 	bl	8000610 <__aeabi_dmul>
 8006720:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006724:	468b      	mov	fp, r1
 8006726:	460a      	mov	r2, r1
 8006728:	0d1b      	lsrs	r3, r3, #20
 800672a:	4923      	ldr	r1, [pc, #140]	; (80067b8 <_strtod_l+0x598>)
 800672c:	051b      	lsls	r3, r3, #20
 800672e:	428b      	cmp	r3, r1
 8006730:	4682      	mov	sl, r0
 8006732:	d8bb      	bhi.n	80066ac <_strtod_l+0x48c>
 8006734:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006738:	428b      	cmp	r3, r1
 800673a:	bf86      	itte	hi
 800673c:	f8df b084 	ldrhi.w	fp, [pc, #132]	; 80067c4 <_strtod_l+0x5a4>
 8006740:	f04f 3aff 	movhi.w	sl, #4294967295
 8006744:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006748:	2300      	movs	r3, #0
 800674a:	9305      	str	r3, [sp, #20]
 800674c:	e06d      	b.n	800682a <_strtod_l+0x60a>
 800674e:	07e2      	lsls	r2, r4, #31
 8006750:	d504      	bpl.n	800675c <_strtod_l+0x53c>
 8006752:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006756:	f7f9 ff5b 	bl	8000610 <__aeabi_dmul>
 800675a:	2301      	movs	r3, #1
 800675c:	f109 0901 	add.w	r9, r9, #1
 8006760:	1064      	asrs	r4, r4, #1
 8006762:	3608      	adds	r6, #8
 8006764:	e7cd      	b.n	8006702 <_strtod_l+0x4e2>
 8006766:	d0ef      	beq.n	8006748 <_strtod_l+0x528>
 8006768:	4264      	negs	r4, r4
 800676a:	f014 020f 	ands.w	r2, r4, #15
 800676e:	d00a      	beq.n	8006786 <_strtod_l+0x566>
 8006770:	4b0f      	ldr	r3, [pc, #60]	; (80067b0 <_strtod_l+0x590>)
 8006772:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006776:	4650      	mov	r0, sl
 8006778:	4659      	mov	r1, fp
 800677a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677e:	f7fa f871 	bl	8000864 <__aeabi_ddiv>
 8006782:	4682      	mov	sl, r0
 8006784:	468b      	mov	fp, r1
 8006786:	1124      	asrs	r4, r4, #4
 8006788:	d0de      	beq.n	8006748 <_strtod_l+0x528>
 800678a:	2c1f      	cmp	r4, #31
 800678c:	dd1c      	ble.n	80067c8 <_strtod_l+0x5a8>
 800678e:	2400      	movs	r4, #0
 8006790:	4625      	mov	r5, r4
 8006792:	9407      	str	r4, [sp, #28]
 8006794:	9406      	str	r4, [sp, #24]
 8006796:	9a04      	ldr	r2, [sp, #16]
 8006798:	2322      	movs	r3, #34	; 0x22
 800679a:	f04f 0a00 	mov.w	sl, #0
 800679e:	f04f 0b00 	mov.w	fp, #0
 80067a2:	6013      	str	r3, [r2, #0]
 80067a4:	e78d      	b.n	80066c2 <_strtod_l+0x4a2>
 80067a6:	bf00      	nop
 80067a8:	080095c1 	.word	0x080095c1
 80067ac:	080095d8 	.word	0x080095d8
 80067b0:	08009688 	.word	0x08009688
 80067b4:	08009660 	.word	0x08009660
 80067b8:	7ca00000 	.word	0x7ca00000
 80067bc:	fff80000 	.word	0xfff80000
 80067c0:	7ff00000 	.word	0x7ff00000
 80067c4:	7fefffff 	.word	0x7fefffff
 80067c8:	f014 0310 	ands.w	r3, r4, #16
 80067cc:	bf18      	it	ne
 80067ce:	236a      	movne	r3, #106	; 0x6a
 80067d0:	4ea0      	ldr	r6, [pc, #640]	; (8006a54 <_strtod_l+0x834>)
 80067d2:	9305      	str	r3, [sp, #20]
 80067d4:	4650      	mov	r0, sl
 80067d6:	4659      	mov	r1, fp
 80067d8:	2300      	movs	r3, #0
 80067da:	2c00      	cmp	r4, #0
 80067dc:	f300 8106 	bgt.w	80069ec <_strtod_l+0x7cc>
 80067e0:	b10b      	cbz	r3, 80067e6 <_strtod_l+0x5c6>
 80067e2:	4682      	mov	sl, r0
 80067e4:	468b      	mov	fp, r1
 80067e6:	9b05      	ldr	r3, [sp, #20]
 80067e8:	b1bb      	cbz	r3, 800681a <_strtod_l+0x5fa>
 80067ea:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80067ee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	4659      	mov	r1, fp
 80067f6:	dd10      	ble.n	800681a <_strtod_l+0x5fa>
 80067f8:	2b1f      	cmp	r3, #31
 80067fa:	f340 8101 	ble.w	8006a00 <_strtod_l+0x7e0>
 80067fe:	2b34      	cmp	r3, #52	; 0x34
 8006800:	bfde      	ittt	le
 8006802:	3b20      	suble	r3, #32
 8006804:	f04f 32ff 	movle.w	r2, #4294967295
 8006808:	fa02 f303 	lslle.w	r3, r2, r3
 800680c:	f04f 0a00 	mov.w	sl, #0
 8006810:	bfcc      	ite	gt
 8006812:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006816:	ea03 0b01 	andle.w	fp, r3, r1
 800681a:	2200      	movs	r2, #0
 800681c:	2300      	movs	r3, #0
 800681e:	4650      	mov	r0, sl
 8006820:	4659      	mov	r1, fp
 8006822:	f7fa f95d 	bl	8000ae0 <__aeabi_dcmpeq>
 8006826:	2800      	cmp	r0, #0
 8006828:	d1b1      	bne.n	800678e <_strtod_l+0x56e>
 800682a:	9b07      	ldr	r3, [sp, #28]
 800682c:	9300      	str	r3, [sp, #0]
 800682e:	9a06      	ldr	r2, [sp, #24]
 8006830:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006832:	9804      	ldr	r0, [sp, #16]
 8006834:	462b      	mov	r3, r5
 8006836:	f001 fa70 	bl	8007d1a <__s2b>
 800683a:	9007      	str	r0, [sp, #28]
 800683c:	2800      	cmp	r0, #0
 800683e:	f43f af35 	beq.w	80066ac <_strtod_l+0x48c>
 8006842:	f1b8 0f00 	cmp.w	r8, #0
 8006846:	f1c8 0300 	rsb	r3, r8, #0
 800684a:	bfa8      	it	ge
 800684c:	2300      	movge	r3, #0
 800684e:	930e      	str	r3, [sp, #56]	; 0x38
 8006850:	2400      	movs	r4, #0
 8006852:	ea28 73e8 	bic.w	r3, r8, r8, asr #31
 8006856:	930f      	str	r3, [sp, #60]	; 0x3c
 8006858:	4625      	mov	r5, r4
 800685a:	9b07      	ldr	r3, [sp, #28]
 800685c:	9804      	ldr	r0, [sp, #16]
 800685e:	6859      	ldr	r1, [r3, #4]
 8006860:	f001 f9d5 	bl	8007c0e <_Balloc>
 8006864:	9006      	str	r0, [sp, #24]
 8006866:	2800      	cmp	r0, #0
 8006868:	f43f af24 	beq.w	80066b4 <_strtod_l+0x494>
 800686c:	9b07      	ldr	r3, [sp, #28]
 800686e:	691a      	ldr	r2, [r3, #16]
 8006870:	3202      	adds	r2, #2
 8006872:	f103 010c 	add.w	r1, r3, #12
 8006876:	0092      	lsls	r2, r2, #2
 8006878:	300c      	adds	r0, #12
 800687a:	f001 f9bb 	bl	8007bf4 <memcpy>
 800687e:	aa1c      	add	r2, sp, #112	; 0x70
 8006880:	a91b      	add	r1, sp, #108	; 0x6c
 8006882:	ec4b ab10 	vmov	d0, sl, fp
 8006886:	9804      	ldr	r0, [sp, #16]
 8006888:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800688c:	f001 fcf6 	bl	800827c <__d2b>
 8006890:	901a      	str	r0, [sp, #104]	; 0x68
 8006892:	2800      	cmp	r0, #0
 8006894:	f43f af0e 	beq.w	80066b4 <_strtod_l+0x494>
 8006898:	2101      	movs	r1, #1
 800689a:	9804      	ldr	r0, [sp, #16]
 800689c:	f001 fac9 	bl	8007e32 <__i2b>
 80068a0:	4605      	mov	r5, r0
 80068a2:	2800      	cmp	r0, #0
 80068a4:	f43f af06 	beq.w	80066b4 <_strtod_l+0x494>
 80068a8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80068aa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80068ac:	2e00      	cmp	r6, #0
 80068ae:	bfab      	itete	ge
 80068b0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80068b2:	9b0f      	ldrlt	r3, [sp, #60]	; 0x3c
 80068b4:	9f0f      	ldrge	r7, [sp, #60]	; 0x3c
 80068b6:	f8dd 8038 	ldrlt.w	r8, [sp, #56]	; 0x38
 80068ba:	bfac      	ite	ge
 80068bc:	eb03 0806 	addge.w	r8, r3, r6
 80068c0:	1b9f      	sublt	r7, r3, r6
 80068c2:	9b05      	ldr	r3, [sp, #20]
 80068c4:	1af6      	subs	r6, r6, r3
 80068c6:	4416      	add	r6, r2
 80068c8:	4b63      	ldr	r3, [pc, #396]	; (8006a58 <_strtod_l+0x838>)
 80068ca:	3e01      	subs	r6, #1
 80068cc:	429e      	cmp	r6, r3
 80068ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80068d2:	f280 80a8 	bge.w	8006a26 <_strtod_l+0x806>
 80068d6:	1b9b      	subs	r3, r3, r6
 80068d8:	2b1f      	cmp	r3, #31
 80068da:	eba2 0203 	sub.w	r2, r2, r3
 80068de:	f04f 0901 	mov.w	r9, #1
 80068e2:	f300 8094 	bgt.w	8006a0e <_strtod_l+0x7ee>
 80068e6:	fa09 f303 	lsl.w	r3, r9, r3
 80068ea:	9314      	str	r3, [sp, #80]	; 0x50
 80068ec:	2600      	movs	r6, #0
 80068ee:	eb08 0902 	add.w	r9, r8, r2
 80068f2:	9b05      	ldr	r3, [sp, #20]
 80068f4:	45c8      	cmp	r8, r9
 80068f6:	4417      	add	r7, r2
 80068f8:	441f      	add	r7, r3
 80068fa:	4643      	mov	r3, r8
 80068fc:	bfa8      	it	ge
 80068fe:	464b      	movge	r3, r9
 8006900:	42bb      	cmp	r3, r7
 8006902:	bfa8      	it	ge
 8006904:	463b      	movge	r3, r7
 8006906:	2b00      	cmp	r3, #0
 8006908:	bfc2      	ittt	gt
 800690a:	eba9 0903 	subgt.w	r9, r9, r3
 800690e:	1aff      	subgt	r7, r7, r3
 8006910:	eba8 0803 	subgt.w	r8, r8, r3
 8006914:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006916:	b1bb      	cbz	r3, 8006948 <_strtod_l+0x728>
 8006918:	4629      	mov	r1, r5
 800691a:	461a      	mov	r2, r3
 800691c:	9804      	ldr	r0, [sp, #16]
 800691e:	f001 fb1f 	bl	8007f60 <__pow5mult>
 8006922:	4605      	mov	r5, r0
 8006924:	2800      	cmp	r0, #0
 8006926:	f43f aec5 	beq.w	80066b4 <_strtod_l+0x494>
 800692a:	4601      	mov	r1, r0
 800692c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800692e:	9804      	ldr	r0, [sp, #16]
 8006930:	f001 fa88 	bl	8007e44 <__multiply>
 8006934:	9008      	str	r0, [sp, #32]
 8006936:	2800      	cmp	r0, #0
 8006938:	f43f aebc 	beq.w	80066b4 <_strtod_l+0x494>
 800693c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800693e:	9804      	ldr	r0, [sp, #16]
 8006940:	f001 f999 	bl	8007c76 <_Bfree>
 8006944:	9b08      	ldr	r3, [sp, #32]
 8006946:	931a      	str	r3, [sp, #104]	; 0x68
 8006948:	f1b9 0f00 	cmp.w	r9, #0
 800694c:	dc6f      	bgt.n	8006a2e <_strtod_l+0x80e>
 800694e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006950:	2b00      	cmp	r3, #0
 8006952:	d175      	bne.n	8006a40 <_strtod_l+0x820>
 8006954:	2f00      	cmp	r7, #0
 8006956:	dd08      	ble.n	800696a <_strtod_l+0x74a>
 8006958:	463a      	mov	r2, r7
 800695a:	9906      	ldr	r1, [sp, #24]
 800695c:	9804      	ldr	r0, [sp, #16]
 800695e:	f001 fb4d 	bl	8007ffc <__lshift>
 8006962:	9006      	str	r0, [sp, #24]
 8006964:	2800      	cmp	r0, #0
 8006966:	f43f aea5 	beq.w	80066b4 <_strtod_l+0x494>
 800696a:	f1b8 0f00 	cmp.w	r8, #0
 800696e:	dd08      	ble.n	8006982 <_strtod_l+0x762>
 8006970:	4629      	mov	r1, r5
 8006972:	4642      	mov	r2, r8
 8006974:	9804      	ldr	r0, [sp, #16]
 8006976:	f001 fb41 	bl	8007ffc <__lshift>
 800697a:	4605      	mov	r5, r0
 800697c:	2800      	cmp	r0, #0
 800697e:	f43f ae99 	beq.w	80066b4 <_strtod_l+0x494>
 8006982:	9a06      	ldr	r2, [sp, #24]
 8006984:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006986:	9804      	ldr	r0, [sp, #16]
 8006988:	f001 fba3 	bl	80080d2 <__mdiff>
 800698c:	4604      	mov	r4, r0
 800698e:	2800      	cmp	r0, #0
 8006990:	f43f ae90 	beq.w	80066b4 <_strtod_l+0x494>
 8006994:	68c3      	ldr	r3, [r0, #12]
 8006996:	9308      	str	r3, [sp, #32]
 8006998:	2300      	movs	r3, #0
 800699a:	60c3      	str	r3, [r0, #12]
 800699c:	4629      	mov	r1, r5
 800699e:	f001 fb7e 	bl	800809e <__mcmp>
 80069a2:	2800      	cmp	r0, #0
 80069a4:	da5a      	bge.n	8006a5c <_strtod_l+0x83c>
 80069a6:	9b08      	ldr	r3, [sp, #32]
 80069a8:	b9e3      	cbnz	r3, 80069e4 <_strtod_l+0x7c4>
 80069aa:	f1ba 0f00 	cmp.w	sl, #0
 80069ae:	d119      	bne.n	80069e4 <_strtod_l+0x7c4>
 80069b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80069b4:	b9b3      	cbnz	r3, 80069e4 <_strtod_l+0x7c4>
 80069b6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80069ba:	0d1b      	lsrs	r3, r3, #20
 80069bc:	051b      	lsls	r3, r3, #20
 80069be:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80069c2:	d90f      	bls.n	80069e4 <_strtod_l+0x7c4>
 80069c4:	6963      	ldr	r3, [r4, #20]
 80069c6:	b913      	cbnz	r3, 80069ce <_strtod_l+0x7ae>
 80069c8:	6923      	ldr	r3, [r4, #16]
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	dd0a      	ble.n	80069e4 <_strtod_l+0x7c4>
 80069ce:	4621      	mov	r1, r4
 80069d0:	2201      	movs	r2, #1
 80069d2:	9804      	ldr	r0, [sp, #16]
 80069d4:	f001 fb12 	bl	8007ffc <__lshift>
 80069d8:	4629      	mov	r1, r5
 80069da:	4604      	mov	r4, r0
 80069dc:	f001 fb5f 	bl	800809e <__mcmp>
 80069e0:	2800      	cmp	r0, #0
 80069e2:	dc6c      	bgt.n	8006abe <_strtod_l+0x89e>
 80069e4:	9b05      	ldr	r3, [sp, #20]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d176      	bne.n	8006ad8 <_strtod_l+0x8b8>
 80069ea:	e66e      	b.n	80066ca <_strtod_l+0x4aa>
 80069ec:	07e2      	lsls	r2, r4, #31
 80069ee:	d504      	bpl.n	80069fa <_strtod_l+0x7da>
 80069f0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80069f4:	f7f9 fe0c 	bl	8000610 <__aeabi_dmul>
 80069f8:	2301      	movs	r3, #1
 80069fa:	1064      	asrs	r4, r4, #1
 80069fc:	3608      	adds	r6, #8
 80069fe:	e6ec      	b.n	80067da <_strtod_l+0x5ba>
 8006a00:	f04f 32ff 	mov.w	r2, #4294967295
 8006a04:	fa02 f303 	lsl.w	r3, r2, r3
 8006a08:	ea03 0a0a 	and.w	sl, r3, sl
 8006a0c:	e705      	b.n	800681a <_strtod_l+0x5fa>
 8006a0e:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8006a12:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8006a16:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8006a1a:	36e2      	adds	r6, #226	; 0xe2
 8006a1c:	fa09 f606 	lsl.w	r6, r9, r6
 8006a20:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 8006a24:	e763      	b.n	80068ee <_strtod_l+0x6ce>
 8006a26:	2301      	movs	r3, #1
 8006a28:	2600      	movs	r6, #0
 8006a2a:	9314      	str	r3, [sp, #80]	; 0x50
 8006a2c:	e75f      	b.n	80068ee <_strtod_l+0x6ce>
 8006a2e:	464a      	mov	r2, r9
 8006a30:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006a32:	9804      	ldr	r0, [sp, #16]
 8006a34:	f001 fae2 	bl	8007ffc <__lshift>
 8006a38:	901a      	str	r0, [sp, #104]	; 0x68
 8006a3a:	2800      	cmp	r0, #0
 8006a3c:	d187      	bne.n	800694e <_strtod_l+0x72e>
 8006a3e:	e639      	b.n	80066b4 <_strtod_l+0x494>
 8006a40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a42:	9906      	ldr	r1, [sp, #24]
 8006a44:	9804      	ldr	r0, [sp, #16]
 8006a46:	f001 fa8b 	bl	8007f60 <__pow5mult>
 8006a4a:	9006      	str	r0, [sp, #24]
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	d181      	bne.n	8006954 <_strtod_l+0x734>
 8006a50:	e630      	b.n	80066b4 <_strtod_l+0x494>
 8006a52:	bf00      	nop
 8006a54:	080095f0 	.word	0x080095f0
 8006a58:	fffffc02 	.word	0xfffffc02
 8006a5c:	f040 8086 	bne.w	8006b6c <_strtod_l+0x94c>
 8006a60:	9a08      	ldr	r2, [sp, #32]
 8006a62:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a66:	b332      	cbz	r2, 8006ab6 <_strtod_l+0x896>
 8006a68:	4aad      	ldr	r2, [pc, #692]	; (8006d20 <_strtod_l+0xb00>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	4659      	mov	r1, fp
 8006a6e:	d152      	bne.n	8006b16 <_strtod_l+0x8f6>
 8006a70:	9b05      	ldr	r3, [sp, #20]
 8006a72:	4650      	mov	r0, sl
 8006a74:	b1d3      	cbz	r3, 8006aac <_strtod_l+0x88c>
 8006a76:	4aab      	ldr	r2, [pc, #684]	; (8006d24 <_strtod_l+0xb04>)
 8006a78:	400a      	ands	r2, r1
 8006a7a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006a7e:	f04f 37ff 	mov.w	r7, #4294967295
 8006a82:	d816      	bhi.n	8006ab2 <_strtod_l+0x892>
 8006a84:	0d12      	lsrs	r2, r2, #20
 8006a86:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006a8a:	fa07 f303 	lsl.w	r3, r7, r3
 8006a8e:	4283      	cmp	r3, r0
 8006a90:	d141      	bne.n	8006b16 <_strtod_l+0x8f6>
 8006a92:	4aa5      	ldr	r2, [pc, #660]	; (8006d28 <_strtod_l+0xb08>)
 8006a94:	4291      	cmp	r1, r2
 8006a96:	d102      	bne.n	8006a9e <_strtod_l+0x87e>
 8006a98:	3301      	adds	r3, #1
 8006a9a:	f43f ae0b 	beq.w	80066b4 <_strtod_l+0x494>
 8006a9e:	4ba1      	ldr	r3, [pc, #644]	; (8006d24 <_strtod_l+0xb04>)
 8006aa0:	400b      	ands	r3, r1
 8006aa2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006aa6:	f04f 0a00 	mov.w	sl, #0
 8006aaa:	e79b      	b.n	80069e4 <_strtod_l+0x7c4>
 8006aac:	f04f 33ff 	mov.w	r3, #4294967295
 8006ab0:	e7ed      	b.n	8006a8e <_strtod_l+0x86e>
 8006ab2:	463b      	mov	r3, r7
 8006ab4:	e7eb      	b.n	8006a8e <_strtod_l+0x86e>
 8006ab6:	bb73      	cbnz	r3, 8006b16 <_strtod_l+0x8f6>
 8006ab8:	f1ba 0f00 	cmp.w	sl, #0
 8006abc:	d12b      	bne.n	8006b16 <_strtod_l+0x8f6>
 8006abe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006ac2:	9a05      	ldr	r2, [sp, #20]
 8006ac4:	0d1b      	lsrs	r3, r3, #20
 8006ac6:	051b      	lsls	r3, r3, #20
 8006ac8:	b1e2      	cbz	r2, 8006b04 <_strtod_l+0x8e4>
 8006aca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006ace:	dc19      	bgt.n	8006b04 <_strtod_l+0x8e4>
 8006ad0:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 8006ad4:	f77f ae5f 	ble.w	8006796 <_strtod_l+0x576>
 8006ad8:	4b94      	ldr	r3, [pc, #592]	; (8006d2c <_strtod_l+0xb0c>)
 8006ada:	930d      	str	r3, [sp, #52]	; 0x34
 8006adc:	2300      	movs	r3, #0
 8006ade:	930c      	str	r3, [sp, #48]	; 0x30
 8006ae0:	4650      	mov	r0, sl
 8006ae2:	4659      	mov	r1, fp
 8006ae4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006ae8:	f7f9 fd92 	bl	8000610 <__aeabi_dmul>
 8006aec:	4682      	mov	sl, r0
 8006aee:	468b      	mov	fp, r1
 8006af0:	2900      	cmp	r1, #0
 8006af2:	f47f adea 	bne.w	80066ca <_strtod_l+0x4aa>
 8006af6:	2800      	cmp	r0, #0
 8006af8:	f47f ade7 	bne.w	80066ca <_strtod_l+0x4aa>
 8006afc:	9a04      	ldr	r2, [sp, #16]
 8006afe:	2322      	movs	r3, #34	; 0x22
 8006b00:	6013      	str	r3, [r2, #0]
 8006b02:	e5e2      	b.n	80066ca <_strtod_l+0x4aa>
 8006b04:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006b08:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006b0c:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006b10:	f04f 3aff 	mov.w	sl, #4294967295
 8006b14:	e766      	b.n	80069e4 <_strtod_l+0x7c4>
 8006b16:	b19e      	cbz	r6, 8006b40 <_strtod_l+0x920>
 8006b18:	ea16 0f0b 	tst.w	r6, fp
 8006b1c:	f43f af62 	beq.w	80069e4 <_strtod_l+0x7c4>
 8006b20:	9b08      	ldr	r3, [sp, #32]
 8006b22:	9a05      	ldr	r2, [sp, #20]
 8006b24:	4650      	mov	r0, sl
 8006b26:	4659      	mov	r1, fp
 8006b28:	b173      	cbz	r3, 8006b48 <_strtod_l+0x928>
 8006b2a:	f7ff fb5b 	bl	80061e4 <sulp>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	460b      	mov	r3, r1
 8006b32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006b36:	f7f9 fbb9 	bl	80002ac <__adddf3>
 8006b3a:	4682      	mov	sl, r0
 8006b3c:	468b      	mov	fp, r1
 8006b3e:	e751      	b.n	80069e4 <_strtod_l+0x7c4>
 8006b40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b42:	ea13 0f0a 	tst.w	r3, sl
 8006b46:	e7e9      	b.n	8006b1c <_strtod_l+0x8fc>
 8006b48:	f7ff fb4c 	bl	80061e4 <sulp>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	460b      	mov	r3, r1
 8006b50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006b54:	f7f9 fba8 	bl	80002a8 <__aeabi_dsub>
 8006b58:	2200      	movs	r2, #0
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	4682      	mov	sl, r0
 8006b5e:	468b      	mov	fp, r1
 8006b60:	f7f9 ffbe 	bl	8000ae0 <__aeabi_dcmpeq>
 8006b64:	2800      	cmp	r0, #0
 8006b66:	f47f ae16 	bne.w	8006796 <_strtod_l+0x576>
 8006b6a:	e73b      	b.n	80069e4 <_strtod_l+0x7c4>
 8006b6c:	4629      	mov	r1, r5
 8006b6e:	4620      	mov	r0, r4
 8006b70:	f001 fbd3 	bl	800831a <__ratio>
 8006b74:	ec57 6b10 	vmov	r6, r7, d0
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b7e:	ee10 0a10 	vmov	r0, s0
 8006b82:	4639      	mov	r1, r7
 8006b84:	f7f9 ffc0 	bl	8000b08 <__aeabi_dcmple>
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	d074      	beq.n	8006c76 <_strtod_l+0xa56>
 8006b8c:	9b08      	ldr	r3, [sp, #32]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d046      	beq.n	8006c20 <_strtod_l+0xa00>
 8006b92:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8006d30 <_strtod_l+0xb10>
 8006b96:	f04f 0800 	mov.w	r8, #0
 8006b9a:	4f65      	ldr	r7, [pc, #404]	; (8006d30 <_strtod_l+0xb10>)
 8006b9c:	2600      	movs	r6, #0
 8006b9e:	4b61      	ldr	r3, [pc, #388]	; (8006d24 <_strtod_l+0xb04>)
 8006ba0:	ea0b 0303 	and.w	r3, fp, r3
 8006ba4:	9314      	str	r3, [sp, #80]	; 0x50
 8006ba6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006ba8:	4b62      	ldr	r3, [pc, #392]	; (8006d34 <_strtod_l+0xb14>)
 8006baa:	429a      	cmp	r2, r3
 8006bac:	f040 80ca 	bne.w	8006d44 <_strtod_l+0xb24>
 8006bb0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006bb4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006bb8:	ec4b ab10 	vmov	d0, sl, fp
 8006bbc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006bc0:	f001 fae6 	bl	8008190 <__ulp>
 8006bc4:	4640      	mov	r0, r8
 8006bc6:	ec53 2b10 	vmov	r2, r3, d0
 8006bca:	4649      	mov	r1, r9
 8006bcc:	f7f9 fd20 	bl	8000610 <__aeabi_dmul>
 8006bd0:	4652      	mov	r2, sl
 8006bd2:	465b      	mov	r3, fp
 8006bd4:	f7f9 fb6a 	bl	80002ac <__adddf3>
 8006bd8:	4a52      	ldr	r2, [pc, #328]	; (8006d24 <_strtod_l+0xb04>)
 8006bda:	4b57      	ldr	r3, [pc, #348]	; (8006d38 <_strtod_l+0xb18>)
 8006bdc:	400a      	ands	r2, r1
 8006bde:	429a      	cmp	r2, r3
 8006be0:	4682      	mov	sl, r0
 8006be2:	d95c      	bls.n	8006c9e <_strtod_l+0xa7e>
 8006be4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006be6:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d103      	bne.n	8006bf6 <_strtod_l+0x9d6>
 8006bee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	f43f ad5f 	beq.w	80066b4 <_strtod_l+0x494>
 8006bf6:	f8df b130 	ldr.w	fp, [pc, #304]	; 8006d28 <_strtod_l+0xb08>
 8006bfa:	f04f 3aff 	mov.w	sl, #4294967295
 8006bfe:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006c00:	9804      	ldr	r0, [sp, #16]
 8006c02:	f001 f838 	bl	8007c76 <_Bfree>
 8006c06:	9906      	ldr	r1, [sp, #24]
 8006c08:	9804      	ldr	r0, [sp, #16]
 8006c0a:	f001 f834 	bl	8007c76 <_Bfree>
 8006c0e:	4629      	mov	r1, r5
 8006c10:	9804      	ldr	r0, [sp, #16]
 8006c12:	f001 f830 	bl	8007c76 <_Bfree>
 8006c16:	4621      	mov	r1, r4
 8006c18:	9804      	ldr	r0, [sp, #16]
 8006c1a:	f001 f82c 	bl	8007c76 <_Bfree>
 8006c1e:	e61c      	b.n	800685a <_strtod_l+0x63a>
 8006c20:	f1ba 0f00 	cmp.w	sl, #0
 8006c24:	d118      	bne.n	8006c58 <_strtod_l+0xa38>
 8006c26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c2a:	b9e3      	cbnz	r3, 8006c66 <_strtod_l+0xa46>
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	4b40      	ldr	r3, [pc, #256]	; (8006d30 <_strtod_l+0xb10>)
 8006c30:	4630      	mov	r0, r6
 8006c32:	4639      	mov	r1, r7
 8006c34:	f7f9 ff5e 	bl	8000af4 <__aeabi_dcmplt>
 8006c38:	b9d0      	cbnz	r0, 8006c70 <_strtod_l+0xa50>
 8006c3a:	4630      	mov	r0, r6
 8006c3c:	4639      	mov	r1, r7
 8006c3e:	2200      	movs	r2, #0
 8006c40:	4b3e      	ldr	r3, [pc, #248]	; (8006d3c <_strtod_l+0xb1c>)
 8006c42:	f7f9 fce5 	bl	8000610 <__aeabi_dmul>
 8006c46:	4606      	mov	r6, r0
 8006c48:	460f      	mov	r7, r1
 8006c4a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006c4e:	9616      	str	r6, [sp, #88]	; 0x58
 8006c50:	9317      	str	r3, [sp, #92]	; 0x5c
 8006c52:	e9dd 8916 	ldrd	r8, r9, [sp, #88]	; 0x58
 8006c56:	e7a2      	b.n	8006b9e <_strtod_l+0x97e>
 8006c58:	f1ba 0f01 	cmp.w	sl, #1
 8006c5c:	d103      	bne.n	8006c66 <_strtod_l+0xa46>
 8006c5e:	f1bb 0f00 	cmp.w	fp, #0
 8006c62:	f43f ad98 	beq.w	8006796 <_strtod_l+0x576>
 8006c66:	f04f 0800 	mov.w	r8, #0
 8006c6a:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8006d40 <_strtod_l+0xb20>
 8006c6e:	e794      	b.n	8006b9a <_strtod_l+0x97a>
 8006c70:	2600      	movs	r6, #0
 8006c72:	4f32      	ldr	r7, [pc, #200]	; (8006d3c <_strtod_l+0xb1c>)
 8006c74:	e7e9      	b.n	8006c4a <_strtod_l+0xa2a>
 8006c76:	4b31      	ldr	r3, [pc, #196]	; (8006d3c <_strtod_l+0xb1c>)
 8006c78:	4630      	mov	r0, r6
 8006c7a:	4639      	mov	r1, r7
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f7f9 fcc7 	bl	8000610 <__aeabi_dmul>
 8006c82:	9b08      	ldr	r3, [sp, #32]
 8006c84:	4606      	mov	r6, r0
 8006c86:	460f      	mov	r7, r1
 8006c88:	b933      	cbnz	r3, 8006c98 <_strtod_l+0xa78>
 8006c8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c8e:	9010      	str	r0, [sp, #64]	; 0x40
 8006c90:	9311      	str	r3, [sp, #68]	; 0x44
 8006c92:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8006c96:	e782      	b.n	8006b9e <_strtod_l+0x97e>
 8006c98:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8006c9c:	e7f9      	b.n	8006c92 <_strtod_l+0xa72>
 8006c9e:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
 8006ca2:	9b05      	ldr	r3, [sp, #20]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1aa      	bne.n	8006bfe <_strtod_l+0x9de>
 8006ca8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006cac:	0d1b      	lsrs	r3, r3, #20
 8006cae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006cb0:	051b      	lsls	r3, r3, #20
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	46d8      	mov	r8, fp
 8006cb6:	d1a2      	bne.n	8006bfe <_strtod_l+0x9de>
 8006cb8:	4639      	mov	r1, r7
 8006cba:	4630      	mov	r0, r6
 8006cbc:	f7f9 ff42 	bl	8000b44 <__aeabi_d2iz>
 8006cc0:	f7f9 fc40 	bl	8000544 <__aeabi_i2d>
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	4639      	mov	r1, r7
 8006cca:	4630      	mov	r0, r6
 8006ccc:	f7f9 faec 	bl	80002a8 <__aeabi_dsub>
 8006cd0:	9b08      	ldr	r3, [sp, #32]
 8006cd2:	4606      	mov	r6, r0
 8006cd4:	460f      	mov	r7, r1
 8006cd6:	b933      	cbnz	r3, 8006ce6 <_strtod_l+0xac6>
 8006cd8:	f1ba 0f00 	cmp.w	sl, #0
 8006cdc:	d103      	bne.n	8006ce6 <_strtod_l+0xac6>
 8006cde:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d068      	beq.n	8006db8 <_strtod_l+0xb98>
 8006ce6:	a30a      	add	r3, pc, #40	; (adr r3, 8006d10 <_strtod_l+0xaf0>)
 8006ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cec:	4630      	mov	r0, r6
 8006cee:	4639      	mov	r1, r7
 8006cf0:	f7f9 ff00 	bl	8000af4 <__aeabi_dcmplt>
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	f47f ace8 	bne.w	80066ca <_strtod_l+0x4aa>
 8006cfa:	a307      	add	r3, pc, #28	; (adr r3, 8006d18 <_strtod_l+0xaf8>)
 8006cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d00:	4630      	mov	r0, r6
 8006d02:	4639      	mov	r1, r7
 8006d04:	f7f9 ff14 	bl	8000b30 <__aeabi_dcmpgt>
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	f43f af78 	beq.w	8006bfe <_strtod_l+0x9de>
 8006d0e:	e4dc      	b.n	80066ca <_strtod_l+0x4aa>
 8006d10:	94a03595 	.word	0x94a03595
 8006d14:	3fdfffff 	.word	0x3fdfffff
 8006d18:	35afe535 	.word	0x35afe535
 8006d1c:	3fe00000 	.word	0x3fe00000
 8006d20:	000fffff 	.word	0x000fffff
 8006d24:	7ff00000 	.word	0x7ff00000
 8006d28:	7fefffff 	.word	0x7fefffff
 8006d2c:	39500000 	.word	0x39500000
 8006d30:	3ff00000 	.word	0x3ff00000
 8006d34:	7fe00000 	.word	0x7fe00000
 8006d38:	7c9fffff 	.word	0x7c9fffff
 8006d3c:	3fe00000 	.word	0x3fe00000
 8006d40:	bff00000 	.word	0xbff00000
 8006d44:	9b05      	ldr	r3, [sp, #20]
 8006d46:	b31b      	cbz	r3, 8006d90 <_strtod_l+0xb70>
 8006d48:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d4a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006d4e:	d81f      	bhi.n	8006d90 <_strtod_l+0xb70>
 8006d50:	a325      	add	r3, pc, #148	; (adr r3, 8006de8 <_strtod_l+0xbc8>)
 8006d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d56:	4630      	mov	r0, r6
 8006d58:	4639      	mov	r1, r7
 8006d5a:	f7f9 fed5 	bl	8000b08 <__aeabi_dcmple>
 8006d5e:	b190      	cbz	r0, 8006d86 <_strtod_l+0xb66>
 8006d60:	4639      	mov	r1, r7
 8006d62:	4630      	mov	r0, r6
 8006d64:	f7f9 ff16 	bl	8000b94 <__aeabi_d2uiz>
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	bf08      	it	eq
 8006d6c:	2001      	moveq	r0, #1
 8006d6e:	f7f9 fbd9 	bl	8000524 <__aeabi_ui2d>
 8006d72:	9b08      	ldr	r3, [sp, #32]
 8006d74:	4606      	mov	r6, r0
 8006d76:	460f      	mov	r7, r1
 8006d78:	b9db      	cbnz	r3, 8006db2 <_strtod_l+0xb92>
 8006d7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d7e:	9012      	str	r0, [sp, #72]	; 0x48
 8006d80:	9313      	str	r3, [sp, #76]	; 0x4c
 8006d82:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
 8006d86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006d88:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
 8006d8c:	eba3 0902 	sub.w	r9, r3, r2
 8006d90:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006d94:	f001 f9fc 	bl	8008190 <__ulp>
 8006d98:	4640      	mov	r0, r8
 8006d9a:	ec53 2b10 	vmov	r2, r3, d0
 8006d9e:	4649      	mov	r1, r9
 8006da0:	f7f9 fc36 	bl	8000610 <__aeabi_dmul>
 8006da4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006da8:	f7f9 fa80 	bl	80002ac <__adddf3>
 8006dac:	4682      	mov	sl, r0
 8006dae:	468b      	mov	fp, r1
 8006db0:	e777      	b.n	8006ca2 <_strtod_l+0xa82>
 8006db2:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8006db6:	e7e4      	b.n	8006d82 <_strtod_l+0xb62>
 8006db8:	a30d      	add	r3, pc, #52	; (adr r3, 8006df0 <_strtod_l+0xbd0>)
 8006dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dbe:	f7f9 fe99 	bl	8000af4 <__aeabi_dcmplt>
 8006dc2:	e7a1      	b.n	8006d08 <_strtod_l+0xae8>
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	9309      	str	r3, [sp, #36]	; 0x24
 8006dc8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006dca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006dcc:	6013      	str	r3, [r2, #0]
 8006dce:	f7ff ba6b 	b.w	80062a8 <_strtod_l+0x88>
 8006dd2:	2b65      	cmp	r3, #101	; 0x65
 8006dd4:	f04f 0200 	mov.w	r2, #0
 8006dd8:	f43f abb6 	beq.w	8006548 <_strtod_l+0x328>
 8006ddc:	4615      	mov	r5, r2
 8006dde:	2101      	movs	r1, #1
 8006de0:	f7ff badc 	b.w	800639c <_strtod_l+0x17c>
 8006de4:	f3af 8000 	nop.w
 8006de8:	ffc00000 	.word	0xffc00000
 8006dec:	41dfffff 	.word	0x41dfffff
 8006df0:	94a03595 	.word	0x94a03595
 8006df4:	3fcfffff 	.word	0x3fcfffff

08006df8 <strtod>:
 8006df8:	4b07      	ldr	r3, [pc, #28]	; (8006e18 <strtod+0x20>)
 8006dfa:	4a08      	ldr	r2, [pc, #32]	; (8006e1c <strtod+0x24>)
 8006dfc:	b410      	push	{r4}
 8006dfe:	681c      	ldr	r4, [r3, #0]
 8006e00:	6a23      	ldr	r3, [r4, #32]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	bf08      	it	eq
 8006e06:	4613      	moveq	r3, r2
 8006e08:	460a      	mov	r2, r1
 8006e0a:	4601      	mov	r1, r0
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e12:	f7ff ba05 	b.w	8006220 <_strtod_l>
 8006e16:	bf00      	nop
 8006e18:	20000108 	.word	0x20000108
 8006e1c:	2000016c 	.word	0x2000016c

08006e20 <strtok>:
 8006e20:	4b13      	ldr	r3, [pc, #76]	; (8006e70 <strtok+0x50>)
 8006e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e26:	681d      	ldr	r5, [r3, #0]
 8006e28:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8006e2a:	4606      	mov	r6, r0
 8006e2c:	460f      	mov	r7, r1
 8006e2e:	b9b4      	cbnz	r4, 8006e5e <strtok+0x3e>
 8006e30:	2050      	movs	r0, #80	; 0x50
 8006e32:	f7fe fea7 	bl	8005b84 <malloc>
 8006e36:	65a8      	str	r0, [r5, #88]	; 0x58
 8006e38:	6004      	str	r4, [r0, #0]
 8006e3a:	6044      	str	r4, [r0, #4]
 8006e3c:	6084      	str	r4, [r0, #8]
 8006e3e:	60c4      	str	r4, [r0, #12]
 8006e40:	6104      	str	r4, [r0, #16]
 8006e42:	6144      	str	r4, [r0, #20]
 8006e44:	6184      	str	r4, [r0, #24]
 8006e46:	6284      	str	r4, [r0, #40]	; 0x28
 8006e48:	62c4      	str	r4, [r0, #44]	; 0x2c
 8006e4a:	6304      	str	r4, [r0, #48]	; 0x30
 8006e4c:	6344      	str	r4, [r0, #52]	; 0x34
 8006e4e:	6384      	str	r4, [r0, #56]	; 0x38
 8006e50:	63c4      	str	r4, [r0, #60]	; 0x3c
 8006e52:	6404      	str	r4, [r0, #64]	; 0x40
 8006e54:	6444      	str	r4, [r0, #68]	; 0x44
 8006e56:	6484      	str	r4, [r0, #72]	; 0x48
 8006e58:	64c4      	str	r4, [r0, #76]	; 0x4c
 8006e5a:	7704      	strb	r4, [r0, #28]
 8006e5c:	6244      	str	r4, [r0, #36]	; 0x24
 8006e5e:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8006e60:	4639      	mov	r1, r7
 8006e62:	4630      	mov	r0, r6
 8006e64:	2301      	movs	r3, #1
 8006e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e6a:	f000 b803 	b.w	8006e74 <__strtok_r>
 8006e6e:	bf00      	nop
 8006e70:	20000108 	.word	0x20000108

08006e74 <__strtok_r>:
 8006e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e76:	b918      	cbnz	r0, 8006e80 <__strtok_r+0xc>
 8006e78:	6810      	ldr	r0, [r2, #0]
 8006e7a:	b908      	cbnz	r0, 8006e80 <__strtok_r+0xc>
 8006e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e7e:	4620      	mov	r0, r4
 8006e80:	4604      	mov	r4, r0
 8006e82:	460f      	mov	r7, r1
 8006e84:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006e88:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006e8c:	b91e      	cbnz	r6, 8006e96 <__strtok_r+0x22>
 8006e8e:	b965      	cbnz	r5, 8006eaa <__strtok_r+0x36>
 8006e90:	6015      	str	r5, [r2, #0]
 8006e92:	4628      	mov	r0, r5
 8006e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e96:	42b5      	cmp	r5, r6
 8006e98:	d1f6      	bne.n	8006e88 <__strtok_r+0x14>
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d1ef      	bne.n	8006e7e <__strtok_r+0xa>
 8006e9e:	6014      	str	r4, [r2, #0]
 8006ea0:	7003      	strb	r3, [r0, #0]
 8006ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ea4:	461c      	mov	r4, r3
 8006ea6:	e00c      	b.n	8006ec2 <__strtok_r+0x4e>
 8006ea8:	b915      	cbnz	r5, 8006eb0 <__strtok_r+0x3c>
 8006eaa:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006eae:	460e      	mov	r6, r1
 8006eb0:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006eb4:	42ab      	cmp	r3, r5
 8006eb6:	d1f7      	bne.n	8006ea8 <__strtok_r+0x34>
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d0f3      	beq.n	8006ea4 <__strtok_r+0x30>
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006ec2:	6014      	str	r4, [r2, #0]
 8006ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006ec8 <time>:
 8006ec8:	b513      	push	{r0, r1, r4, lr}
 8006eca:	4b08      	ldr	r3, [pc, #32]	; (8006eec <time+0x24>)
 8006ecc:	4604      	mov	r4, r0
 8006ece:	2200      	movs	r2, #0
 8006ed0:	6818      	ldr	r0, [r3, #0]
 8006ed2:	4669      	mov	r1, sp
 8006ed4:	f000 fdb8 	bl	8007a48 <_gettimeofday_r>
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	bfbc      	itt	lt
 8006edc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ee0:	9300      	strlt	r3, [sp, #0]
 8006ee2:	9800      	ldr	r0, [sp, #0]
 8006ee4:	b104      	cbz	r4, 8006ee8 <time+0x20>
 8006ee6:	6020      	str	r0, [r4, #0]
 8006ee8:	b002      	add	sp, #8
 8006eea:	bd10      	pop	{r4, pc}
 8006eec:	20000108 	.word	0x20000108

08006ef0 <__tzcalc_limits>:
 8006ef0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef4:	4604      	mov	r4, r0
 8006ef6:	f000 fdb9 	bl	8007a6c <__gettzinfo>
 8006efa:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8006efe:	429c      	cmp	r4, r3
 8006f00:	f340 8098 	ble.w	8007034 <__tzcalc_limits+0x144>
 8006f04:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8006f08:	18e3      	adds	r3, r4, r3
 8006f0a:	109b      	asrs	r3, r3, #2
 8006f0c:	f240 126d 	movw	r2, #365	; 0x16d
 8006f10:	f2a4 75b2 	subw	r5, r4, #1970	; 0x7b2
 8006f14:	fb02 3505 	mla	r5, r2, r5, r3
 8006f18:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8006f1c:	f2a4 736d 	subw	r3, r4, #1901	; 0x76d
 8006f20:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f24:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8006f28:	441d      	add	r5, r3
 8006f2a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006f2e:	18a2      	adds	r2, r4, r2
 8006f30:	fb94 f7f3 	sdiv	r7, r4, r3
 8006f34:	fb92 f2f3 	sdiv	r2, r2, r3
 8006f38:	fb03 4717 	mls	r7, r3, r7, r4
 8006f3c:	f100 0338 	add.w	r3, r0, #56	; 0x38
 8006f40:	4415      	add	r5, r2
 8006f42:	fab7 fe87 	clz	lr, r7
 8006f46:	2264      	movs	r2, #100	; 0x64
 8006f48:	9301      	str	r3, [sp, #4]
 8006f4a:	f004 0303 	and.w	r3, r4, #3
 8006f4e:	fb94 f6f2 	sdiv	r6, r4, r2
 8006f52:	6044      	str	r4, [r0, #4]
 8006f54:	fb02 4616 	mls	r6, r2, r6, r4
 8006f58:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8006f5c:	4601      	mov	r1, r0
 8006f5e:	9300      	str	r3, [sp, #0]
 8006f60:	f06f 4c40 	mvn.w	ip, #3221225472	; 0xc0000000
 8006f64:	7a0b      	ldrb	r3, [r1, #8]
 8006f66:	2b4a      	cmp	r3, #74	; 0x4a
 8006f68:	d123      	bne.n	8006fb2 <__tzcalc_limits+0xc2>
 8006f6a:	694c      	ldr	r4, [r1, #20]
 8006f6c:	9a00      	ldr	r2, [sp, #0]
 8006f6e:	192b      	adds	r3, r5, r4
 8006f70:	b902      	cbnz	r2, 8006f74 <__tzcalc_limits+0x84>
 8006f72:	b906      	cbnz	r6, 8006f76 <__tzcalc_limits+0x86>
 8006f74:	b9df      	cbnz	r7, 8006fae <__tzcalc_limits+0xbe>
 8006f76:	2c3b      	cmp	r4, #59	; 0x3b
 8006f78:	bfd4      	ite	le
 8006f7a:	2400      	movle	r4, #0
 8006f7c:	2401      	movgt	r4, #1
 8006f7e:	441c      	add	r4, r3
 8006f80:	3c01      	subs	r4, #1
 8006f82:	4b2d      	ldr	r3, [pc, #180]	; (8007038 <__tzcalc_limits+0x148>)
 8006f84:	698a      	ldr	r2, [r1, #24]
 8006f86:	fb03 2404 	mla	r4, r3, r4, r2
 8006f8a:	6a0b      	ldr	r3, [r1, #32]
 8006f8c:	441c      	add	r4, r3
 8006f8e:	f841 4f1c 	str.w	r4, [r1, #28]!
 8006f92:	9b01      	ldr	r3, [sp, #4]
 8006f94:	428b      	cmp	r3, r1
 8006f96:	d1e5      	bne.n	8006f64 <__tzcalc_limits+0x74>
 8006f98:	69c3      	ldr	r3, [r0, #28]
 8006f9a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	bfac      	ite	ge
 8006fa0:	2300      	movge	r3, #0
 8006fa2:	2301      	movlt	r3, #1
 8006fa4:	6003      	str	r3, [r0, #0]
 8006fa6:	2001      	movs	r0, #1
 8006fa8:	b003      	add	sp, #12
 8006faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fae:	2400      	movs	r4, #0
 8006fb0:	e7e5      	b.n	8006f7e <__tzcalc_limits+0x8e>
 8006fb2:	2b44      	cmp	r3, #68	; 0x44
 8006fb4:	d102      	bne.n	8006fbc <__tzcalc_limits+0xcc>
 8006fb6:	694b      	ldr	r3, [r1, #20]
 8006fb8:	18ec      	adds	r4, r5, r3
 8006fba:	e7e2      	b.n	8006f82 <__tzcalc_limits+0x92>
 8006fbc:	9b00      	ldr	r3, [sp, #0]
 8006fbe:	bb7b      	cbnz	r3, 8007020 <__tzcalc_limits+0x130>
 8006fc0:	2e00      	cmp	r6, #0
 8006fc2:	bf0c      	ite	eq
 8006fc4:	46f0      	moveq	r8, lr
 8006fc6:	f04f 0801 	movne.w	r8, #1
 8006fca:	4b1c      	ldr	r3, [pc, #112]	; (800703c <__tzcalc_limits+0x14c>)
 8006fcc:	68cc      	ldr	r4, [r1, #12]
 8006fce:	2230      	movs	r2, #48	; 0x30
 8006fd0:	fb02 3808 	mla	r8, r2, r8, r3
 8006fd4:	f1a8 0a04 	sub.w	sl, r8, #4
 8006fd8:	462b      	mov	r3, r5
 8006fda:	f04f 0901 	mov.w	r9, #1
 8006fde:	45a1      	cmp	r9, r4
 8006fe0:	db20      	blt.n	8007024 <__tzcalc_limits+0x134>
 8006fe2:	2c01      	cmp	r4, #1
 8006fe4:	bfb8      	it	lt
 8006fe6:	2401      	movlt	r4, #1
 8006fe8:	46a1      	mov	r9, r4
 8006fea:	f103 0b04 	add.w	fp, r3, #4
 8006fee:	2207      	movs	r2, #7
 8006ff0:	694c      	ldr	r4, [r1, #20]
 8006ff2:	fb9b faf2 	sdiv	sl, fp, r2
 8006ff6:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 8006ffa:	ebab 0a0a 	sub.w	sl, fp, sl
 8006ffe:	ebb4 0a0a 	subs.w	sl, r4, sl
 8007002:	690c      	ldr	r4, [r1, #16]
 8007004:	44e1      	add	r9, ip
 8007006:	f104 34ff 	add.w	r4, r4, #4294967295
 800700a:	bf48      	it	mi
 800700c:	4492      	addmi	sl, r2
 800700e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8007012:	f858 8029 	ldr.w	r8, [r8, r9, lsl #2]
 8007016:	4454      	add	r4, sl
 8007018:	4544      	cmp	r4, r8
 800701a:	da09      	bge.n	8007030 <__tzcalc_limits+0x140>
 800701c:	441c      	add	r4, r3
 800701e:	e7b0      	b.n	8006f82 <__tzcalc_limits+0x92>
 8007020:	46f0      	mov	r8, lr
 8007022:	e7d2      	b.n	8006fca <__tzcalc_limits+0xda>
 8007024:	f85a bf04 	ldr.w	fp, [sl, #4]!
 8007028:	f109 0901 	add.w	r9, r9, #1
 800702c:	445b      	add	r3, fp
 800702e:	e7d6      	b.n	8006fde <__tzcalc_limits+0xee>
 8007030:	3c07      	subs	r4, #7
 8007032:	e7f1      	b.n	8007018 <__tzcalc_limits+0x128>
 8007034:	2000      	movs	r0, #0
 8007036:	e7b7      	b.n	8006fa8 <__tzcalc_limits+0xb8>
 8007038:	00015180 	.word	0x00015180
 800703c:	08009558 	.word	0x08009558

08007040 <__tz_lock>:
 8007040:	4770      	bx	lr

08007042 <__tz_unlock>:
 8007042:	4770      	bx	lr

08007044 <_tzset_unlocked>:
 8007044:	4b01      	ldr	r3, [pc, #4]	; (800704c <_tzset_unlocked+0x8>)
 8007046:	6818      	ldr	r0, [r3, #0]
 8007048:	f000 b802 	b.w	8007050 <_tzset_unlocked_r>
 800704c:	20000108 	.word	0x20000108

08007050 <_tzset_unlocked_r>:
 8007050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007054:	b08d      	sub	sp, #52	; 0x34
 8007056:	4607      	mov	r7, r0
 8007058:	f000 fd08 	bl	8007a6c <__gettzinfo>
 800705c:	49b1      	ldr	r1, [pc, #708]	; (8007324 <_tzset_unlocked_r+0x2d4>)
 800705e:	4eb2      	ldr	r6, [pc, #712]	; (8007328 <_tzset_unlocked_r+0x2d8>)
 8007060:	4605      	mov	r5, r0
 8007062:	4638      	mov	r0, r7
 8007064:	f000 fce8 	bl	8007a38 <_getenv_r>
 8007068:	4604      	mov	r4, r0
 800706a:	b970      	cbnz	r0, 800708a <_tzset_unlocked_r+0x3a>
 800706c:	4baf      	ldr	r3, [pc, #700]	; (800732c <_tzset_unlocked_r+0x2dc>)
 800706e:	4ab0      	ldr	r2, [pc, #704]	; (8007330 <_tzset_unlocked_r+0x2e0>)
 8007070:	6018      	str	r0, [r3, #0]
 8007072:	4bb0      	ldr	r3, [pc, #704]	; (8007334 <_tzset_unlocked_r+0x2e4>)
 8007074:	6018      	str	r0, [r3, #0]
 8007076:	4bb0      	ldr	r3, [pc, #704]	; (8007338 <_tzset_unlocked_r+0x2e8>)
 8007078:	6830      	ldr	r0, [r6, #0]
 800707a:	601a      	str	r2, [r3, #0]
 800707c:	605a      	str	r2, [r3, #4]
 800707e:	f7fe fd89 	bl	8005b94 <free>
 8007082:	6034      	str	r4, [r6, #0]
 8007084:	b00d      	add	sp, #52	; 0x34
 8007086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800708a:	6831      	ldr	r1, [r6, #0]
 800708c:	2900      	cmp	r1, #0
 800708e:	d160      	bne.n	8007152 <_tzset_unlocked_r+0x102>
 8007090:	6830      	ldr	r0, [r6, #0]
 8007092:	f7fe fd7f 	bl	8005b94 <free>
 8007096:	4620      	mov	r0, r4
 8007098:	f7f9 f8a4 	bl	80001e4 <strlen>
 800709c:	1c41      	adds	r1, r0, #1
 800709e:	4638      	mov	r0, r7
 80070a0:	f7ff f82a 	bl	80060f8 <_malloc_r>
 80070a4:	6030      	str	r0, [r6, #0]
 80070a6:	2800      	cmp	r0, #0
 80070a8:	d158      	bne.n	800715c <_tzset_unlocked_r+0x10c>
 80070aa:	7823      	ldrb	r3, [r4, #0]
 80070ac:	4aa3      	ldr	r2, [pc, #652]	; (800733c <_tzset_unlocked_r+0x2ec>)
 80070ae:	49a4      	ldr	r1, [pc, #656]	; (8007340 <_tzset_unlocked_r+0x2f0>)
 80070b0:	2b3a      	cmp	r3, #58	; 0x3a
 80070b2:	bf08      	it	eq
 80070b4:	3401      	addeq	r4, #1
 80070b6:	ae0a      	add	r6, sp, #40	; 0x28
 80070b8:	4633      	mov	r3, r6
 80070ba:	4620      	mov	r0, r4
 80070bc:	f001 f9a2 	bl	8008404 <siscanf>
 80070c0:	2800      	cmp	r0, #0
 80070c2:	dddf      	ble.n	8007084 <_tzset_unlocked_r+0x34>
 80070c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070c6:	18e7      	adds	r7, r4, r3
 80070c8:	5ce3      	ldrb	r3, [r4, r3]
 80070ca:	2b2d      	cmp	r3, #45	; 0x2d
 80070cc:	d14a      	bne.n	8007164 <_tzset_unlocked_r+0x114>
 80070ce:	3701      	adds	r7, #1
 80070d0:	f04f 34ff 	mov.w	r4, #4294967295
 80070d4:	f10d 0a20 	add.w	sl, sp, #32
 80070d8:	f10d 0b1e 	add.w	fp, sp, #30
 80070dc:	f04f 0800 	mov.w	r8, #0
 80070e0:	9603      	str	r6, [sp, #12]
 80070e2:	f8cd a008 	str.w	sl, [sp, #8]
 80070e6:	9601      	str	r6, [sp, #4]
 80070e8:	f8cd b000 	str.w	fp, [sp]
 80070ec:	4633      	mov	r3, r6
 80070ee:	aa07      	add	r2, sp, #28
 80070f0:	4994      	ldr	r1, [pc, #592]	; (8007344 <_tzset_unlocked_r+0x2f4>)
 80070f2:	f8ad 801e 	strh.w	r8, [sp, #30]
 80070f6:	4638      	mov	r0, r7
 80070f8:	f8ad 8020 	strh.w	r8, [sp, #32]
 80070fc:	f001 f982 	bl	8008404 <siscanf>
 8007100:	4540      	cmp	r0, r8
 8007102:	ddbf      	ble.n	8007084 <_tzset_unlocked_r+0x34>
 8007104:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8007108:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800710c:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8007350 <_tzset_unlocked_r+0x300>
 8007110:	213c      	movs	r1, #60	; 0x3c
 8007112:	fb01 2203 	mla	r2, r1, r3, r2
 8007116:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800711a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800711e:	fb01 2303 	mla	r3, r1, r3, r2
 8007122:	435c      	muls	r4, r3
 8007124:	622c      	str	r4, [r5, #32]
 8007126:	4c84      	ldr	r4, [pc, #528]	; (8007338 <_tzset_unlocked_r+0x2e8>)
 8007128:	4b84      	ldr	r3, [pc, #528]	; (800733c <_tzset_unlocked_r+0x2ec>)
 800712a:	6023      	str	r3, [r4, #0]
 800712c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800712e:	4984      	ldr	r1, [pc, #528]	; (8007340 <_tzset_unlocked_r+0x2f0>)
 8007130:	441f      	add	r7, r3
 8007132:	464a      	mov	r2, r9
 8007134:	4633      	mov	r3, r6
 8007136:	4638      	mov	r0, r7
 8007138:	f001 f964 	bl	8008404 <siscanf>
 800713c:	4540      	cmp	r0, r8
 800713e:	dc16      	bgt.n	800716e <_tzset_unlocked_r+0x11e>
 8007140:	6823      	ldr	r3, [r4, #0]
 8007142:	6063      	str	r3, [r4, #4]
 8007144:	4b79      	ldr	r3, [pc, #484]	; (800732c <_tzset_unlocked_r+0x2dc>)
 8007146:	6a2a      	ldr	r2, [r5, #32]
 8007148:	601a      	str	r2, [r3, #0]
 800714a:	4b7a      	ldr	r3, [pc, #488]	; (8007334 <_tzset_unlocked_r+0x2e4>)
 800714c:	f8c3 8000 	str.w	r8, [r3]
 8007150:	e798      	b.n	8007084 <_tzset_unlocked_r+0x34>
 8007152:	f7f9 f83d 	bl	80001d0 <strcmp>
 8007156:	2800      	cmp	r0, #0
 8007158:	d094      	beq.n	8007084 <_tzset_unlocked_r+0x34>
 800715a:	e799      	b.n	8007090 <_tzset_unlocked_r+0x40>
 800715c:	4621      	mov	r1, r4
 800715e:	f7ff f839 	bl	80061d4 <strcpy>
 8007162:	e7a2      	b.n	80070aa <_tzset_unlocked_r+0x5a>
 8007164:	2b2b      	cmp	r3, #43	; 0x2b
 8007166:	bf08      	it	eq
 8007168:	3701      	addeq	r7, #1
 800716a:	2401      	movs	r4, #1
 800716c:	e7b2      	b.n	80070d4 <_tzset_unlocked_r+0x84>
 800716e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007170:	f8c4 9004 	str.w	r9, [r4, #4]
 8007174:	18fc      	adds	r4, r7, r3
 8007176:	5cfb      	ldrb	r3, [r7, r3]
 8007178:	2b2d      	cmp	r3, #45	; 0x2d
 800717a:	f040 8092 	bne.w	80072a2 <_tzset_unlocked_r+0x252>
 800717e:	3401      	adds	r4, #1
 8007180:	f04f 37ff 	mov.w	r7, #4294967295
 8007184:	2300      	movs	r3, #0
 8007186:	f8ad 301c 	strh.w	r3, [sp, #28]
 800718a:	f8ad 301e 	strh.w	r3, [sp, #30]
 800718e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8007192:	930a      	str	r3, [sp, #40]	; 0x28
 8007194:	9603      	str	r6, [sp, #12]
 8007196:	f8cd a008 	str.w	sl, [sp, #8]
 800719a:	9601      	str	r6, [sp, #4]
 800719c:	f8cd b000 	str.w	fp, [sp]
 80071a0:	4633      	mov	r3, r6
 80071a2:	aa07      	add	r2, sp, #28
 80071a4:	4967      	ldr	r1, [pc, #412]	; (8007344 <_tzset_unlocked_r+0x2f4>)
 80071a6:	4620      	mov	r0, r4
 80071a8:	f001 f92c 	bl	8008404 <siscanf>
 80071ac:	2800      	cmp	r0, #0
 80071ae:	dc7d      	bgt.n	80072ac <_tzset_unlocked_r+0x25c>
 80071b0:	6a2b      	ldr	r3, [r5, #32]
 80071b2:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80071b6:	63eb      	str	r3, [r5, #60]	; 0x3c
 80071b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071ba:	462f      	mov	r7, r5
 80071bc:	441c      	add	r4, r3
 80071be:	f04f 0900 	mov.w	r9, #0
 80071c2:	7823      	ldrb	r3, [r4, #0]
 80071c4:	2b2c      	cmp	r3, #44	; 0x2c
 80071c6:	bf08      	it	eq
 80071c8:	3401      	addeq	r4, #1
 80071ca:	f894 8000 	ldrb.w	r8, [r4]
 80071ce:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80071d2:	d17b      	bne.n	80072cc <_tzset_unlocked_r+0x27c>
 80071d4:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80071d8:	9302      	str	r3, [sp, #8]
 80071da:	ab09      	add	r3, sp, #36	; 0x24
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	9603      	str	r6, [sp, #12]
 80071e0:	9601      	str	r6, [sp, #4]
 80071e2:	4633      	mov	r3, r6
 80071e4:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80071e8:	4957      	ldr	r1, [pc, #348]	; (8007348 <_tzset_unlocked_r+0x2f8>)
 80071ea:	4620      	mov	r0, r4
 80071ec:	f001 f90a 	bl	8008404 <siscanf>
 80071f0:	2803      	cmp	r0, #3
 80071f2:	f47f af47 	bne.w	8007084 <_tzset_unlocked_r+0x34>
 80071f6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80071fa:	1e4b      	subs	r3, r1, #1
 80071fc:	2b0b      	cmp	r3, #11
 80071fe:	f63f af41 	bhi.w	8007084 <_tzset_unlocked_r+0x34>
 8007202:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8007206:	1e53      	subs	r3, r2, #1
 8007208:	2b04      	cmp	r3, #4
 800720a:	f63f af3b 	bhi.w	8007084 <_tzset_unlocked_r+0x34>
 800720e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8007212:	2b06      	cmp	r3, #6
 8007214:	f63f af36 	bhi.w	8007084 <_tzset_unlocked_r+0x34>
 8007218:	f887 8008 	strb.w	r8, [r7, #8]
 800721c:	60f9      	str	r1, [r7, #12]
 800721e:	613a      	str	r2, [r7, #16]
 8007220:	617b      	str	r3, [r7, #20]
 8007222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007224:	eb04 0803 	add.w	r8, r4, r3
 8007228:	2302      	movs	r3, #2
 800722a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800722e:	2300      	movs	r3, #0
 8007230:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007234:	f8ad 3020 	strh.w	r3, [sp, #32]
 8007238:	930a      	str	r3, [sp, #40]	; 0x28
 800723a:	f898 3000 	ldrb.w	r3, [r8]
 800723e:	2b2f      	cmp	r3, #47	; 0x2f
 8007240:	d10b      	bne.n	800725a <_tzset_unlocked_r+0x20a>
 8007242:	9603      	str	r6, [sp, #12]
 8007244:	f8cd a008 	str.w	sl, [sp, #8]
 8007248:	9601      	str	r6, [sp, #4]
 800724a:	f8cd b000 	str.w	fp, [sp]
 800724e:	4633      	mov	r3, r6
 8007250:	aa07      	add	r2, sp, #28
 8007252:	493e      	ldr	r1, [pc, #248]	; (800734c <_tzset_unlocked_r+0x2fc>)
 8007254:	4640      	mov	r0, r8
 8007256:	f001 f8d5 	bl	8008404 <siscanf>
 800725a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800725e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8007262:	213c      	movs	r1, #60	; 0x3c
 8007264:	fb01 2203 	mla	r2, r1, r3, r2
 8007268:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800726c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8007270:	fb01 2303 	mla	r3, r1, r3, r2
 8007274:	61bb      	str	r3, [r7, #24]
 8007276:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007278:	f109 0901 	add.w	r9, r9, #1
 800727c:	f1b9 0f02 	cmp.w	r9, #2
 8007280:	4444      	add	r4, r8
 8007282:	f107 071c 	add.w	r7, r7, #28
 8007286:	d19c      	bne.n	80071c2 <_tzset_unlocked_r+0x172>
 8007288:	6868      	ldr	r0, [r5, #4]
 800728a:	f7ff fe31 	bl	8006ef0 <__tzcalc_limits>
 800728e:	4b27      	ldr	r3, [pc, #156]	; (800732c <_tzset_unlocked_r+0x2dc>)
 8007290:	6a2a      	ldr	r2, [r5, #32]
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8007296:	1a9b      	subs	r3, r3, r2
 8007298:	4a26      	ldr	r2, [pc, #152]	; (8007334 <_tzset_unlocked_r+0x2e4>)
 800729a:	bf18      	it	ne
 800729c:	2301      	movne	r3, #1
 800729e:	6013      	str	r3, [r2, #0]
 80072a0:	e6f0      	b.n	8007084 <_tzset_unlocked_r+0x34>
 80072a2:	2b2b      	cmp	r3, #43	; 0x2b
 80072a4:	bf08      	it	eq
 80072a6:	3401      	addeq	r4, #1
 80072a8:	2701      	movs	r7, #1
 80072aa:	e76b      	b.n	8007184 <_tzset_unlocked_r+0x134>
 80072ac:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80072b0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80072b4:	213c      	movs	r1, #60	; 0x3c
 80072b6:	fb01 2203 	mla	r2, r1, r3, r2
 80072ba:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80072be:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80072c2:	fb01 2303 	mla	r3, r1, r3, r2
 80072c6:	435f      	muls	r7, r3
 80072c8:	63ef      	str	r7, [r5, #60]	; 0x3c
 80072ca:	e775      	b.n	80071b8 <_tzset_unlocked_r+0x168>
 80072cc:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80072d0:	bf06      	itte	eq
 80072d2:	3401      	addeq	r4, #1
 80072d4:	4643      	moveq	r3, r8
 80072d6:	2344      	movne	r3, #68	; 0x44
 80072d8:	220a      	movs	r2, #10
 80072da:	a90b      	add	r1, sp, #44	; 0x2c
 80072dc:	4620      	mov	r0, r4
 80072de:	9305      	str	r3, [sp, #20]
 80072e0:	f001 f95e 	bl	80085a0 <strtoul>
 80072e4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80072e8:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80072ec:	4544      	cmp	r4, r8
 80072ee:	9b05      	ldr	r3, [sp, #20]
 80072f0:	d114      	bne.n	800731c <_tzset_unlocked_r+0x2cc>
 80072f2:	234d      	movs	r3, #77	; 0x4d
 80072f4:	f1b9 0f00 	cmp.w	r9, #0
 80072f8:	d107      	bne.n	800730a <_tzset_unlocked_r+0x2ba>
 80072fa:	722b      	strb	r3, [r5, #8]
 80072fc:	2303      	movs	r3, #3
 80072fe:	60eb      	str	r3, [r5, #12]
 8007300:	2302      	movs	r3, #2
 8007302:	612b      	str	r3, [r5, #16]
 8007304:	f8c5 9014 	str.w	r9, [r5, #20]
 8007308:	e78e      	b.n	8007228 <_tzset_unlocked_r+0x1d8>
 800730a:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 800730e:	230b      	movs	r3, #11
 8007310:	62ab      	str	r3, [r5, #40]	; 0x28
 8007312:	2301      	movs	r3, #1
 8007314:	62eb      	str	r3, [r5, #44]	; 0x2c
 8007316:	2300      	movs	r3, #0
 8007318:	632b      	str	r3, [r5, #48]	; 0x30
 800731a:	e785      	b.n	8007228 <_tzset_unlocked_r+0x1d8>
 800731c:	b280      	uxth	r0, r0
 800731e:	723b      	strb	r3, [r7, #8]
 8007320:	6178      	str	r0, [r7, #20]
 8007322:	e781      	b.n	8007228 <_tzset_unlocked_r+0x1d8>
 8007324:	08009618 	.word	0x08009618
 8007328:	20000384 	.word	0x20000384
 800732c:	2000038c 	.word	0x2000038c
 8007330:	0800961b 	.word	0x0800961b
 8007334:	20000388 	.word	0x20000388
 8007338:	200000c0 	.word	0x200000c0
 800733c:	20000377 	.word	0x20000377
 8007340:	0800961f 	.word	0x0800961f
 8007344:	08009642 	.word	0x08009642
 8007348:	0800962e 	.word	0x0800962e
 800734c:	08009641 	.word	0x08009641
 8007350:	2000036c 	.word	0x2000036c

08007354 <div>:
 8007354:	2900      	cmp	r1, #0
 8007356:	b510      	push	{r4, lr}
 8007358:	fb91 f4f2 	sdiv	r4, r1, r2
 800735c:	fb02 1314 	mls	r3, r2, r4, r1
 8007360:	db06      	blt.n	8007370 <div+0x1c>
 8007362:	2b00      	cmp	r3, #0
 8007364:	da01      	bge.n	800736a <div+0x16>
 8007366:	3401      	adds	r4, #1
 8007368:	1a9b      	subs	r3, r3, r2
 800736a:	6004      	str	r4, [r0, #0]
 800736c:	6043      	str	r3, [r0, #4]
 800736e:	bd10      	pop	{r4, pc}
 8007370:	2b00      	cmp	r3, #0
 8007372:	bfc4      	itt	gt
 8007374:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8007378:	189b      	addgt	r3, r3, r2
 800737a:	e7f6      	b.n	800736a <div+0x16>

0800737c <rshift>:
 800737c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800737e:	6906      	ldr	r6, [r0, #16]
 8007380:	114b      	asrs	r3, r1, #5
 8007382:	42b3      	cmp	r3, r6
 8007384:	f100 0514 	add.w	r5, r0, #20
 8007388:	da2b      	bge.n	80073e2 <rshift+0x66>
 800738a:	f011 011f 	ands.w	r1, r1, #31
 800738e:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8007392:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8007396:	d108      	bne.n	80073aa <rshift+0x2e>
 8007398:	4629      	mov	r1, r5
 800739a:	42b2      	cmp	r2, r6
 800739c:	460b      	mov	r3, r1
 800739e:	d210      	bcs.n	80073c2 <rshift+0x46>
 80073a0:	f852 3b04 	ldr.w	r3, [r2], #4
 80073a4:	f841 3b04 	str.w	r3, [r1], #4
 80073a8:	e7f7      	b.n	800739a <rshift+0x1e>
 80073aa:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 80073ae:	f1c1 0e20 	rsb	lr, r1, #32
 80073b2:	3204      	adds	r2, #4
 80073b4:	40cc      	lsrs	r4, r1
 80073b6:	462b      	mov	r3, r5
 80073b8:	42b2      	cmp	r2, r6
 80073ba:	d308      	bcc.n	80073ce <rshift+0x52>
 80073bc:	601c      	str	r4, [r3, #0]
 80073be:	b104      	cbz	r4, 80073c2 <rshift+0x46>
 80073c0:	3304      	adds	r3, #4
 80073c2:	1b5b      	subs	r3, r3, r5
 80073c4:	109b      	asrs	r3, r3, #2
 80073c6:	6103      	str	r3, [r0, #16]
 80073c8:	b903      	cbnz	r3, 80073cc <rshift+0x50>
 80073ca:	6143      	str	r3, [r0, #20]
 80073cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073ce:	6817      	ldr	r7, [r2, #0]
 80073d0:	fa07 f70e 	lsl.w	r7, r7, lr
 80073d4:	433c      	orrs	r4, r7
 80073d6:	f843 4b04 	str.w	r4, [r3], #4
 80073da:	f852 4b04 	ldr.w	r4, [r2], #4
 80073de:	40cc      	lsrs	r4, r1
 80073e0:	e7ea      	b.n	80073b8 <rshift+0x3c>
 80073e2:	462b      	mov	r3, r5
 80073e4:	e7ed      	b.n	80073c2 <rshift+0x46>

080073e6 <__hexdig_fun>:
 80073e6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80073ea:	2b09      	cmp	r3, #9
 80073ec:	d802      	bhi.n	80073f4 <__hexdig_fun+0xe>
 80073ee:	3820      	subs	r0, #32
 80073f0:	b2c0      	uxtb	r0, r0
 80073f2:	4770      	bx	lr
 80073f4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80073f8:	2b05      	cmp	r3, #5
 80073fa:	d801      	bhi.n	8007400 <__hexdig_fun+0x1a>
 80073fc:	3847      	subs	r0, #71	; 0x47
 80073fe:	e7f7      	b.n	80073f0 <__hexdig_fun+0xa>
 8007400:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007404:	2b05      	cmp	r3, #5
 8007406:	d801      	bhi.n	800740c <__hexdig_fun+0x26>
 8007408:	3827      	subs	r0, #39	; 0x27
 800740a:	e7f1      	b.n	80073f0 <__hexdig_fun+0xa>
 800740c:	2000      	movs	r0, #0
 800740e:	4770      	bx	lr

08007410 <__gethex>:
 8007410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007414:	b08b      	sub	sp, #44	; 0x2c
 8007416:	468a      	mov	sl, r1
 8007418:	9002      	str	r0, [sp, #8]
 800741a:	9816      	ldr	r0, [sp, #88]	; 0x58
 800741c:	9306      	str	r3, [sp, #24]
 800741e:	4690      	mov	r8, r2
 8007420:	f000 fbd4 	bl	8007bcc <__localeconv_l>
 8007424:	6803      	ldr	r3, [r0, #0]
 8007426:	9303      	str	r3, [sp, #12]
 8007428:	4618      	mov	r0, r3
 800742a:	f7f8 fedb 	bl	80001e4 <strlen>
 800742e:	9b03      	ldr	r3, [sp, #12]
 8007430:	9001      	str	r0, [sp, #4]
 8007432:	4403      	add	r3, r0
 8007434:	f04f 0b00 	mov.w	fp, #0
 8007438:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800743c:	9307      	str	r3, [sp, #28]
 800743e:	f8da 3000 	ldr.w	r3, [sl]
 8007442:	3302      	adds	r3, #2
 8007444:	461f      	mov	r7, r3
 8007446:	f813 0b01 	ldrb.w	r0, [r3], #1
 800744a:	2830      	cmp	r0, #48	; 0x30
 800744c:	d06c      	beq.n	8007528 <__gethex+0x118>
 800744e:	f7ff ffca 	bl	80073e6 <__hexdig_fun>
 8007452:	4604      	mov	r4, r0
 8007454:	2800      	cmp	r0, #0
 8007456:	d16a      	bne.n	800752e <__gethex+0x11e>
 8007458:	9a01      	ldr	r2, [sp, #4]
 800745a:	9903      	ldr	r1, [sp, #12]
 800745c:	4638      	mov	r0, r7
 800745e:	f000 fffd 	bl	800845c <strncmp>
 8007462:	2800      	cmp	r0, #0
 8007464:	d166      	bne.n	8007534 <__gethex+0x124>
 8007466:	9b01      	ldr	r3, [sp, #4]
 8007468:	5cf8      	ldrb	r0, [r7, r3]
 800746a:	18fe      	adds	r6, r7, r3
 800746c:	f7ff ffbb 	bl	80073e6 <__hexdig_fun>
 8007470:	2800      	cmp	r0, #0
 8007472:	d062      	beq.n	800753a <__gethex+0x12a>
 8007474:	4633      	mov	r3, r6
 8007476:	7818      	ldrb	r0, [r3, #0]
 8007478:	2830      	cmp	r0, #48	; 0x30
 800747a:	461f      	mov	r7, r3
 800747c:	f103 0301 	add.w	r3, r3, #1
 8007480:	d0f9      	beq.n	8007476 <__gethex+0x66>
 8007482:	f7ff ffb0 	bl	80073e6 <__hexdig_fun>
 8007486:	fab0 f580 	clz	r5, r0
 800748a:	096d      	lsrs	r5, r5, #5
 800748c:	4634      	mov	r4, r6
 800748e:	f04f 0b01 	mov.w	fp, #1
 8007492:	463a      	mov	r2, r7
 8007494:	4616      	mov	r6, r2
 8007496:	3201      	adds	r2, #1
 8007498:	7830      	ldrb	r0, [r6, #0]
 800749a:	f7ff ffa4 	bl	80073e6 <__hexdig_fun>
 800749e:	2800      	cmp	r0, #0
 80074a0:	d1f8      	bne.n	8007494 <__gethex+0x84>
 80074a2:	9a01      	ldr	r2, [sp, #4]
 80074a4:	9903      	ldr	r1, [sp, #12]
 80074a6:	4630      	mov	r0, r6
 80074a8:	f000 ffd8 	bl	800845c <strncmp>
 80074ac:	b950      	cbnz	r0, 80074c4 <__gethex+0xb4>
 80074ae:	b954      	cbnz	r4, 80074c6 <__gethex+0xb6>
 80074b0:	9b01      	ldr	r3, [sp, #4]
 80074b2:	18f4      	adds	r4, r6, r3
 80074b4:	4622      	mov	r2, r4
 80074b6:	4616      	mov	r6, r2
 80074b8:	3201      	adds	r2, #1
 80074ba:	7830      	ldrb	r0, [r6, #0]
 80074bc:	f7ff ff93 	bl	80073e6 <__hexdig_fun>
 80074c0:	2800      	cmp	r0, #0
 80074c2:	d1f8      	bne.n	80074b6 <__gethex+0xa6>
 80074c4:	b10c      	cbz	r4, 80074ca <__gethex+0xba>
 80074c6:	1ba4      	subs	r4, r4, r6
 80074c8:	00a4      	lsls	r4, r4, #2
 80074ca:	7833      	ldrb	r3, [r6, #0]
 80074cc:	2b50      	cmp	r3, #80	; 0x50
 80074ce:	d001      	beq.n	80074d4 <__gethex+0xc4>
 80074d0:	2b70      	cmp	r3, #112	; 0x70
 80074d2:	d140      	bne.n	8007556 <__gethex+0x146>
 80074d4:	7873      	ldrb	r3, [r6, #1]
 80074d6:	2b2b      	cmp	r3, #43	; 0x2b
 80074d8:	d035      	beq.n	8007546 <__gethex+0x136>
 80074da:	2b2d      	cmp	r3, #45	; 0x2d
 80074dc:	d02f      	beq.n	800753e <__gethex+0x12e>
 80074de:	1c71      	adds	r1, r6, #1
 80074e0:	f04f 0900 	mov.w	r9, #0
 80074e4:	7808      	ldrb	r0, [r1, #0]
 80074e6:	f7ff ff7e 	bl	80073e6 <__hexdig_fun>
 80074ea:	1e43      	subs	r3, r0, #1
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	2b18      	cmp	r3, #24
 80074f0:	d831      	bhi.n	8007556 <__gethex+0x146>
 80074f2:	f1a0 0210 	sub.w	r2, r0, #16
 80074f6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80074fa:	f7ff ff74 	bl	80073e6 <__hexdig_fun>
 80074fe:	1e43      	subs	r3, r0, #1
 8007500:	b2db      	uxtb	r3, r3
 8007502:	2b18      	cmp	r3, #24
 8007504:	d922      	bls.n	800754c <__gethex+0x13c>
 8007506:	f1b9 0f00 	cmp.w	r9, #0
 800750a:	d000      	beq.n	800750e <__gethex+0xfe>
 800750c:	4252      	negs	r2, r2
 800750e:	4414      	add	r4, r2
 8007510:	f8ca 1000 	str.w	r1, [sl]
 8007514:	b30d      	cbz	r5, 800755a <__gethex+0x14a>
 8007516:	f1bb 0f00 	cmp.w	fp, #0
 800751a:	bf14      	ite	ne
 800751c:	2700      	movne	r7, #0
 800751e:	2706      	moveq	r7, #6
 8007520:	4638      	mov	r0, r7
 8007522:	b00b      	add	sp, #44	; 0x2c
 8007524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007528:	f10b 0b01 	add.w	fp, fp, #1
 800752c:	e78a      	b.n	8007444 <__gethex+0x34>
 800752e:	2500      	movs	r5, #0
 8007530:	462c      	mov	r4, r5
 8007532:	e7ae      	b.n	8007492 <__gethex+0x82>
 8007534:	463e      	mov	r6, r7
 8007536:	2501      	movs	r5, #1
 8007538:	e7c7      	b.n	80074ca <__gethex+0xba>
 800753a:	4604      	mov	r4, r0
 800753c:	e7fb      	b.n	8007536 <__gethex+0x126>
 800753e:	f04f 0901 	mov.w	r9, #1
 8007542:	1cb1      	adds	r1, r6, #2
 8007544:	e7ce      	b.n	80074e4 <__gethex+0xd4>
 8007546:	f04f 0900 	mov.w	r9, #0
 800754a:	e7fa      	b.n	8007542 <__gethex+0x132>
 800754c:	230a      	movs	r3, #10
 800754e:	fb03 0202 	mla	r2, r3, r2, r0
 8007552:	3a10      	subs	r2, #16
 8007554:	e7cf      	b.n	80074f6 <__gethex+0xe6>
 8007556:	4631      	mov	r1, r6
 8007558:	e7da      	b.n	8007510 <__gethex+0x100>
 800755a:	1bf3      	subs	r3, r6, r7
 800755c:	3b01      	subs	r3, #1
 800755e:	4629      	mov	r1, r5
 8007560:	2b07      	cmp	r3, #7
 8007562:	dc49      	bgt.n	80075f8 <__gethex+0x1e8>
 8007564:	9802      	ldr	r0, [sp, #8]
 8007566:	f000 fb52 	bl	8007c0e <_Balloc>
 800756a:	9b01      	ldr	r3, [sp, #4]
 800756c:	f100 0914 	add.w	r9, r0, #20
 8007570:	f04f 0b00 	mov.w	fp, #0
 8007574:	f1c3 0301 	rsb	r3, r3, #1
 8007578:	4605      	mov	r5, r0
 800757a:	f8cd 9010 	str.w	r9, [sp, #16]
 800757e:	46da      	mov	sl, fp
 8007580:	9308      	str	r3, [sp, #32]
 8007582:	42b7      	cmp	r7, r6
 8007584:	d33b      	bcc.n	80075fe <__gethex+0x1ee>
 8007586:	9804      	ldr	r0, [sp, #16]
 8007588:	f840 ab04 	str.w	sl, [r0], #4
 800758c:	eba0 0009 	sub.w	r0, r0, r9
 8007590:	1080      	asrs	r0, r0, #2
 8007592:	6128      	str	r0, [r5, #16]
 8007594:	0147      	lsls	r7, r0, #5
 8007596:	4650      	mov	r0, sl
 8007598:	f000 fbfd 	bl	8007d96 <__hi0bits>
 800759c:	f8d8 6000 	ldr.w	r6, [r8]
 80075a0:	1a3f      	subs	r7, r7, r0
 80075a2:	42b7      	cmp	r7, r6
 80075a4:	dd64      	ble.n	8007670 <__gethex+0x260>
 80075a6:	1bbf      	subs	r7, r7, r6
 80075a8:	4639      	mov	r1, r7
 80075aa:	4628      	mov	r0, r5
 80075ac:	f000 fefb 	bl	80083a6 <__any_on>
 80075b0:	4682      	mov	sl, r0
 80075b2:	b178      	cbz	r0, 80075d4 <__gethex+0x1c4>
 80075b4:	1e7b      	subs	r3, r7, #1
 80075b6:	1159      	asrs	r1, r3, #5
 80075b8:	f003 021f 	and.w	r2, r3, #31
 80075bc:	f04f 0a01 	mov.w	sl, #1
 80075c0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80075c4:	fa0a f202 	lsl.w	r2, sl, r2
 80075c8:	420a      	tst	r2, r1
 80075ca:	d003      	beq.n	80075d4 <__gethex+0x1c4>
 80075cc:	4553      	cmp	r3, sl
 80075ce:	dc46      	bgt.n	800765e <__gethex+0x24e>
 80075d0:	f04f 0a02 	mov.w	sl, #2
 80075d4:	4639      	mov	r1, r7
 80075d6:	4628      	mov	r0, r5
 80075d8:	f7ff fed0 	bl	800737c <rshift>
 80075dc:	443c      	add	r4, r7
 80075de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80075e2:	429c      	cmp	r4, r3
 80075e4:	dd52      	ble.n	800768c <__gethex+0x27c>
 80075e6:	4629      	mov	r1, r5
 80075e8:	9802      	ldr	r0, [sp, #8]
 80075ea:	f000 fb44 	bl	8007c76 <_Bfree>
 80075ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80075f0:	2300      	movs	r3, #0
 80075f2:	6013      	str	r3, [r2, #0]
 80075f4:	27a3      	movs	r7, #163	; 0xa3
 80075f6:	e793      	b.n	8007520 <__gethex+0x110>
 80075f8:	3101      	adds	r1, #1
 80075fa:	105b      	asrs	r3, r3, #1
 80075fc:	e7b0      	b.n	8007560 <__gethex+0x150>
 80075fe:	1e73      	subs	r3, r6, #1
 8007600:	9305      	str	r3, [sp, #20]
 8007602:	9a07      	ldr	r2, [sp, #28]
 8007604:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007608:	4293      	cmp	r3, r2
 800760a:	d018      	beq.n	800763e <__gethex+0x22e>
 800760c:	f1bb 0f20 	cmp.w	fp, #32
 8007610:	d107      	bne.n	8007622 <__gethex+0x212>
 8007612:	9b04      	ldr	r3, [sp, #16]
 8007614:	f8c3 a000 	str.w	sl, [r3]
 8007618:	3304      	adds	r3, #4
 800761a:	f04f 0a00 	mov.w	sl, #0
 800761e:	9304      	str	r3, [sp, #16]
 8007620:	46d3      	mov	fp, sl
 8007622:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007626:	f7ff fede 	bl	80073e6 <__hexdig_fun>
 800762a:	f000 000f 	and.w	r0, r0, #15
 800762e:	fa00 f00b 	lsl.w	r0, r0, fp
 8007632:	ea4a 0a00 	orr.w	sl, sl, r0
 8007636:	f10b 0b04 	add.w	fp, fp, #4
 800763a:	9b05      	ldr	r3, [sp, #20]
 800763c:	e00d      	b.n	800765a <__gethex+0x24a>
 800763e:	9b05      	ldr	r3, [sp, #20]
 8007640:	9a08      	ldr	r2, [sp, #32]
 8007642:	4413      	add	r3, r2
 8007644:	429f      	cmp	r7, r3
 8007646:	d8e1      	bhi.n	800760c <__gethex+0x1fc>
 8007648:	4618      	mov	r0, r3
 800764a:	9a01      	ldr	r2, [sp, #4]
 800764c:	9903      	ldr	r1, [sp, #12]
 800764e:	9309      	str	r3, [sp, #36]	; 0x24
 8007650:	f000 ff04 	bl	800845c <strncmp>
 8007654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007656:	2800      	cmp	r0, #0
 8007658:	d1d8      	bne.n	800760c <__gethex+0x1fc>
 800765a:	461e      	mov	r6, r3
 800765c:	e791      	b.n	8007582 <__gethex+0x172>
 800765e:	1eb9      	subs	r1, r7, #2
 8007660:	4628      	mov	r0, r5
 8007662:	f000 fea0 	bl	80083a6 <__any_on>
 8007666:	2800      	cmp	r0, #0
 8007668:	d0b2      	beq.n	80075d0 <__gethex+0x1c0>
 800766a:	f04f 0a03 	mov.w	sl, #3
 800766e:	e7b1      	b.n	80075d4 <__gethex+0x1c4>
 8007670:	da09      	bge.n	8007686 <__gethex+0x276>
 8007672:	1bf7      	subs	r7, r6, r7
 8007674:	4629      	mov	r1, r5
 8007676:	463a      	mov	r2, r7
 8007678:	9802      	ldr	r0, [sp, #8]
 800767a:	f000 fcbf 	bl	8007ffc <__lshift>
 800767e:	1be4      	subs	r4, r4, r7
 8007680:	4605      	mov	r5, r0
 8007682:	f100 0914 	add.w	r9, r0, #20
 8007686:	f04f 0a00 	mov.w	sl, #0
 800768a:	e7a8      	b.n	80075de <__gethex+0x1ce>
 800768c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007690:	4284      	cmp	r4, r0
 8007692:	da6a      	bge.n	800776a <__gethex+0x35a>
 8007694:	1b04      	subs	r4, r0, r4
 8007696:	42a6      	cmp	r6, r4
 8007698:	dc2e      	bgt.n	80076f8 <__gethex+0x2e8>
 800769a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d022      	beq.n	80076e8 <__gethex+0x2d8>
 80076a2:	2b03      	cmp	r3, #3
 80076a4:	d024      	beq.n	80076f0 <__gethex+0x2e0>
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d115      	bne.n	80076d6 <__gethex+0x2c6>
 80076aa:	42a6      	cmp	r6, r4
 80076ac:	d113      	bne.n	80076d6 <__gethex+0x2c6>
 80076ae:	2e01      	cmp	r6, #1
 80076b0:	dc0b      	bgt.n	80076ca <__gethex+0x2ba>
 80076b2:	9a06      	ldr	r2, [sp, #24]
 80076b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80076b8:	6013      	str	r3, [r2, #0]
 80076ba:	2301      	movs	r3, #1
 80076bc:	612b      	str	r3, [r5, #16]
 80076be:	f8c9 3000 	str.w	r3, [r9]
 80076c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80076c4:	2762      	movs	r7, #98	; 0x62
 80076c6:	601d      	str	r5, [r3, #0]
 80076c8:	e72a      	b.n	8007520 <__gethex+0x110>
 80076ca:	1e71      	subs	r1, r6, #1
 80076cc:	4628      	mov	r0, r5
 80076ce:	f000 fe6a 	bl	80083a6 <__any_on>
 80076d2:	2800      	cmp	r0, #0
 80076d4:	d1ed      	bne.n	80076b2 <__gethex+0x2a2>
 80076d6:	4629      	mov	r1, r5
 80076d8:	9802      	ldr	r0, [sp, #8]
 80076da:	f000 facc 	bl	8007c76 <_Bfree>
 80076de:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80076e0:	2300      	movs	r3, #0
 80076e2:	6013      	str	r3, [r2, #0]
 80076e4:	2750      	movs	r7, #80	; 0x50
 80076e6:	e71b      	b.n	8007520 <__gethex+0x110>
 80076e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d0e1      	beq.n	80076b2 <__gethex+0x2a2>
 80076ee:	e7f2      	b.n	80076d6 <__gethex+0x2c6>
 80076f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d1dd      	bne.n	80076b2 <__gethex+0x2a2>
 80076f6:	e7ee      	b.n	80076d6 <__gethex+0x2c6>
 80076f8:	1e67      	subs	r7, r4, #1
 80076fa:	f1ba 0f00 	cmp.w	sl, #0
 80076fe:	d131      	bne.n	8007764 <__gethex+0x354>
 8007700:	b127      	cbz	r7, 800770c <__gethex+0x2fc>
 8007702:	4639      	mov	r1, r7
 8007704:	4628      	mov	r0, r5
 8007706:	f000 fe4e 	bl	80083a6 <__any_on>
 800770a:	4682      	mov	sl, r0
 800770c:	117a      	asrs	r2, r7, #5
 800770e:	2301      	movs	r3, #1
 8007710:	f007 071f 	and.w	r7, r7, #31
 8007714:	fa03 f707 	lsl.w	r7, r3, r7
 8007718:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800771c:	4621      	mov	r1, r4
 800771e:	421f      	tst	r7, r3
 8007720:	4628      	mov	r0, r5
 8007722:	bf18      	it	ne
 8007724:	f04a 0a02 	orrne.w	sl, sl, #2
 8007728:	1b36      	subs	r6, r6, r4
 800772a:	f7ff fe27 	bl	800737c <rshift>
 800772e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8007732:	2702      	movs	r7, #2
 8007734:	f1ba 0f00 	cmp.w	sl, #0
 8007738:	d045      	beq.n	80077c6 <__gethex+0x3b6>
 800773a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800773e:	2b02      	cmp	r3, #2
 8007740:	d015      	beq.n	800776e <__gethex+0x35e>
 8007742:	2b03      	cmp	r3, #3
 8007744:	d017      	beq.n	8007776 <__gethex+0x366>
 8007746:	2b01      	cmp	r3, #1
 8007748:	d109      	bne.n	800775e <__gethex+0x34e>
 800774a:	f01a 0f02 	tst.w	sl, #2
 800774e:	d006      	beq.n	800775e <__gethex+0x34e>
 8007750:	f8d9 3000 	ldr.w	r3, [r9]
 8007754:	ea4a 0a03 	orr.w	sl, sl, r3
 8007758:	f01a 0f01 	tst.w	sl, #1
 800775c:	d10e      	bne.n	800777c <__gethex+0x36c>
 800775e:	f047 0710 	orr.w	r7, r7, #16
 8007762:	e030      	b.n	80077c6 <__gethex+0x3b6>
 8007764:	f04f 0a01 	mov.w	sl, #1
 8007768:	e7d0      	b.n	800770c <__gethex+0x2fc>
 800776a:	2701      	movs	r7, #1
 800776c:	e7e2      	b.n	8007734 <__gethex+0x324>
 800776e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007770:	f1c3 0301 	rsb	r3, r3, #1
 8007774:	9315      	str	r3, [sp, #84]	; 0x54
 8007776:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007778:	2b00      	cmp	r3, #0
 800777a:	d0f0      	beq.n	800775e <__gethex+0x34e>
 800777c:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8007780:	f105 0314 	add.w	r3, r5, #20
 8007784:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8007788:	eb03 010a 	add.w	r1, r3, sl
 800778c:	2000      	movs	r0, #0
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007794:	d01c      	beq.n	80077d0 <__gethex+0x3c0>
 8007796:	3201      	adds	r2, #1
 8007798:	601a      	str	r2, [r3, #0]
 800779a:	2f02      	cmp	r7, #2
 800779c:	f105 0314 	add.w	r3, r5, #20
 80077a0:	d138      	bne.n	8007814 <__gethex+0x404>
 80077a2:	f8d8 2000 	ldr.w	r2, [r8]
 80077a6:	3a01      	subs	r2, #1
 80077a8:	4296      	cmp	r6, r2
 80077aa:	d10a      	bne.n	80077c2 <__gethex+0x3b2>
 80077ac:	1171      	asrs	r1, r6, #5
 80077ae:	2201      	movs	r2, #1
 80077b0:	f006 061f 	and.w	r6, r6, #31
 80077b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80077b8:	fa02 f606 	lsl.w	r6, r2, r6
 80077bc:	421e      	tst	r6, r3
 80077be:	bf18      	it	ne
 80077c0:	4617      	movne	r7, r2
 80077c2:	f047 0720 	orr.w	r7, r7, #32
 80077c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80077c8:	601d      	str	r5, [r3, #0]
 80077ca:	9b06      	ldr	r3, [sp, #24]
 80077cc:	601c      	str	r4, [r3, #0]
 80077ce:	e6a7      	b.n	8007520 <__gethex+0x110>
 80077d0:	f843 0b04 	str.w	r0, [r3], #4
 80077d4:	4299      	cmp	r1, r3
 80077d6:	d8da      	bhi.n	800778e <__gethex+0x37e>
 80077d8:	68ab      	ldr	r3, [r5, #8]
 80077da:	4599      	cmp	r9, r3
 80077dc:	db12      	blt.n	8007804 <__gethex+0x3f4>
 80077de:	6869      	ldr	r1, [r5, #4]
 80077e0:	9802      	ldr	r0, [sp, #8]
 80077e2:	3101      	adds	r1, #1
 80077e4:	f000 fa13 	bl	8007c0e <_Balloc>
 80077e8:	692a      	ldr	r2, [r5, #16]
 80077ea:	3202      	adds	r2, #2
 80077ec:	f105 010c 	add.w	r1, r5, #12
 80077f0:	4683      	mov	fp, r0
 80077f2:	0092      	lsls	r2, r2, #2
 80077f4:	300c      	adds	r0, #12
 80077f6:	f000 f9fd 	bl	8007bf4 <memcpy>
 80077fa:	4629      	mov	r1, r5
 80077fc:	9802      	ldr	r0, [sp, #8]
 80077fe:	f000 fa3a 	bl	8007c76 <_Bfree>
 8007802:	465d      	mov	r5, fp
 8007804:	692b      	ldr	r3, [r5, #16]
 8007806:	1c5a      	adds	r2, r3, #1
 8007808:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800780c:	612a      	str	r2, [r5, #16]
 800780e:	2201      	movs	r2, #1
 8007810:	615a      	str	r2, [r3, #20]
 8007812:	e7c2      	b.n	800779a <__gethex+0x38a>
 8007814:	692a      	ldr	r2, [r5, #16]
 8007816:	4591      	cmp	r9, r2
 8007818:	da0b      	bge.n	8007832 <__gethex+0x422>
 800781a:	2101      	movs	r1, #1
 800781c:	4628      	mov	r0, r5
 800781e:	f7ff fdad 	bl	800737c <rshift>
 8007822:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007826:	3401      	adds	r4, #1
 8007828:	429c      	cmp	r4, r3
 800782a:	f73f aedc 	bgt.w	80075e6 <__gethex+0x1d6>
 800782e:	2701      	movs	r7, #1
 8007830:	e7c7      	b.n	80077c2 <__gethex+0x3b2>
 8007832:	f016 061f 	ands.w	r6, r6, #31
 8007836:	d0fa      	beq.n	800782e <__gethex+0x41e>
 8007838:	449a      	add	sl, r3
 800783a:	f1c6 0620 	rsb	r6, r6, #32
 800783e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007842:	f000 faa8 	bl	8007d96 <__hi0bits>
 8007846:	42b0      	cmp	r0, r6
 8007848:	dbe7      	blt.n	800781a <__gethex+0x40a>
 800784a:	e7f0      	b.n	800782e <__gethex+0x41e>

0800784c <L_shift>:
 800784c:	f1c2 0208 	rsb	r2, r2, #8
 8007850:	0092      	lsls	r2, r2, #2
 8007852:	b570      	push	{r4, r5, r6, lr}
 8007854:	f1c2 0620 	rsb	r6, r2, #32
 8007858:	6843      	ldr	r3, [r0, #4]
 800785a:	6804      	ldr	r4, [r0, #0]
 800785c:	fa03 f506 	lsl.w	r5, r3, r6
 8007860:	432c      	orrs	r4, r5
 8007862:	40d3      	lsrs	r3, r2
 8007864:	6004      	str	r4, [r0, #0]
 8007866:	f840 3f04 	str.w	r3, [r0, #4]!
 800786a:	4288      	cmp	r0, r1
 800786c:	d3f4      	bcc.n	8007858 <L_shift+0xc>
 800786e:	bd70      	pop	{r4, r5, r6, pc}

08007870 <__match>:
 8007870:	b530      	push	{r4, r5, lr}
 8007872:	6803      	ldr	r3, [r0, #0]
 8007874:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007878:	3301      	adds	r3, #1
 800787a:	b914      	cbnz	r4, 8007882 <__match+0x12>
 800787c:	6003      	str	r3, [r0, #0]
 800787e:	2001      	movs	r0, #1
 8007880:	bd30      	pop	{r4, r5, pc}
 8007882:	781a      	ldrb	r2, [r3, #0]
 8007884:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007888:	2d19      	cmp	r5, #25
 800788a:	bf98      	it	ls
 800788c:	3220      	addls	r2, #32
 800788e:	42a2      	cmp	r2, r4
 8007890:	d0f0      	beq.n	8007874 <__match+0x4>
 8007892:	2000      	movs	r0, #0
 8007894:	bd30      	pop	{r4, r5, pc}

08007896 <__hexnan>:
 8007896:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800789a:	680b      	ldr	r3, [r1, #0]
 800789c:	6801      	ldr	r1, [r0, #0]
 800789e:	115f      	asrs	r7, r3, #5
 80078a0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80078a4:	f013 031f 	ands.w	r3, r3, #31
 80078a8:	b087      	sub	sp, #28
 80078aa:	bf18      	it	ne
 80078ac:	3704      	addne	r7, #4
 80078ae:	2500      	movs	r5, #0
 80078b0:	1f3e      	subs	r6, r7, #4
 80078b2:	4682      	mov	sl, r0
 80078b4:	4690      	mov	r8, r2
 80078b6:	9302      	str	r3, [sp, #8]
 80078b8:	f847 5c04 	str.w	r5, [r7, #-4]
 80078bc:	46b1      	mov	r9, r6
 80078be:	4634      	mov	r4, r6
 80078c0:	9501      	str	r5, [sp, #4]
 80078c2:	46ab      	mov	fp, r5
 80078c4:	784a      	ldrb	r2, [r1, #1]
 80078c6:	1c4b      	adds	r3, r1, #1
 80078c8:	9303      	str	r3, [sp, #12]
 80078ca:	b342      	cbz	r2, 800791e <__hexnan+0x88>
 80078cc:	4610      	mov	r0, r2
 80078ce:	9105      	str	r1, [sp, #20]
 80078d0:	9204      	str	r2, [sp, #16]
 80078d2:	f7ff fd88 	bl	80073e6 <__hexdig_fun>
 80078d6:	2800      	cmp	r0, #0
 80078d8:	d143      	bne.n	8007962 <__hexnan+0xcc>
 80078da:	9a04      	ldr	r2, [sp, #16]
 80078dc:	9905      	ldr	r1, [sp, #20]
 80078de:	2a20      	cmp	r2, #32
 80078e0:	d818      	bhi.n	8007914 <__hexnan+0x7e>
 80078e2:	9b01      	ldr	r3, [sp, #4]
 80078e4:	459b      	cmp	fp, r3
 80078e6:	dd13      	ble.n	8007910 <__hexnan+0x7a>
 80078e8:	454c      	cmp	r4, r9
 80078ea:	d206      	bcs.n	80078fa <__hexnan+0x64>
 80078ec:	2d07      	cmp	r5, #7
 80078ee:	dc04      	bgt.n	80078fa <__hexnan+0x64>
 80078f0:	462a      	mov	r2, r5
 80078f2:	4649      	mov	r1, r9
 80078f4:	4620      	mov	r0, r4
 80078f6:	f7ff ffa9 	bl	800784c <L_shift>
 80078fa:	4544      	cmp	r4, r8
 80078fc:	d944      	bls.n	8007988 <__hexnan+0xf2>
 80078fe:	2300      	movs	r3, #0
 8007900:	f1a4 0904 	sub.w	r9, r4, #4
 8007904:	f844 3c04 	str.w	r3, [r4, #-4]
 8007908:	f8cd b004 	str.w	fp, [sp, #4]
 800790c:	464c      	mov	r4, r9
 800790e:	461d      	mov	r5, r3
 8007910:	9903      	ldr	r1, [sp, #12]
 8007912:	e7d7      	b.n	80078c4 <__hexnan+0x2e>
 8007914:	2a29      	cmp	r2, #41	; 0x29
 8007916:	d14a      	bne.n	80079ae <__hexnan+0x118>
 8007918:	3102      	adds	r1, #2
 800791a:	f8ca 1000 	str.w	r1, [sl]
 800791e:	f1bb 0f00 	cmp.w	fp, #0
 8007922:	d044      	beq.n	80079ae <__hexnan+0x118>
 8007924:	454c      	cmp	r4, r9
 8007926:	d206      	bcs.n	8007936 <__hexnan+0xa0>
 8007928:	2d07      	cmp	r5, #7
 800792a:	dc04      	bgt.n	8007936 <__hexnan+0xa0>
 800792c:	462a      	mov	r2, r5
 800792e:	4649      	mov	r1, r9
 8007930:	4620      	mov	r0, r4
 8007932:	f7ff ff8b 	bl	800784c <L_shift>
 8007936:	4544      	cmp	r4, r8
 8007938:	d928      	bls.n	800798c <__hexnan+0xf6>
 800793a:	4643      	mov	r3, r8
 800793c:	f854 2b04 	ldr.w	r2, [r4], #4
 8007940:	f843 2b04 	str.w	r2, [r3], #4
 8007944:	42a6      	cmp	r6, r4
 8007946:	d2f9      	bcs.n	800793c <__hexnan+0xa6>
 8007948:	2200      	movs	r2, #0
 800794a:	f843 2b04 	str.w	r2, [r3], #4
 800794e:	429e      	cmp	r6, r3
 8007950:	d2fb      	bcs.n	800794a <__hexnan+0xb4>
 8007952:	6833      	ldr	r3, [r6, #0]
 8007954:	b91b      	cbnz	r3, 800795e <__hexnan+0xc8>
 8007956:	4546      	cmp	r6, r8
 8007958:	d127      	bne.n	80079aa <__hexnan+0x114>
 800795a:	2301      	movs	r3, #1
 800795c:	6033      	str	r3, [r6, #0]
 800795e:	2005      	movs	r0, #5
 8007960:	e026      	b.n	80079b0 <__hexnan+0x11a>
 8007962:	3501      	adds	r5, #1
 8007964:	2d08      	cmp	r5, #8
 8007966:	f10b 0b01 	add.w	fp, fp, #1
 800796a:	dd06      	ble.n	800797a <__hexnan+0xe4>
 800796c:	4544      	cmp	r4, r8
 800796e:	d9cf      	bls.n	8007910 <__hexnan+0x7a>
 8007970:	2300      	movs	r3, #0
 8007972:	f844 3c04 	str.w	r3, [r4, #-4]
 8007976:	2501      	movs	r5, #1
 8007978:	3c04      	subs	r4, #4
 800797a:	6822      	ldr	r2, [r4, #0]
 800797c:	f000 000f 	and.w	r0, r0, #15
 8007980:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007984:	6020      	str	r0, [r4, #0]
 8007986:	e7c3      	b.n	8007910 <__hexnan+0x7a>
 8007988:	2508      	movs	r5, #8
 800798a:	e7c1      	b.n	8007910 <__hexnan+0x7a>
 800798c:	9b02      	ldr	r3, [sp, #8]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d0df      	beq.n	8007952 <__hexnan+0xbc>
 8007992:	f04f 32ff 	mov.w	r2, #4294967295
 8007996:	f1c3 0320 	rsb	r3, r3, #32
 800799a:	fa22 f303 	lsr.w	r3, r2, r3
 800799e:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80079a2:	401a      	ands	r2, r3
 80079a4:	f847 2c04 	str.w	r2, [r7, #-4]
 80079a8:	e7d3      	b.n	8007952 <__hexnan+0xbc>
 80079aa:	3e04      	subs	r6, #4
 80079ac:	e7d1      	b.n	8007952 <__hexnan+0xbc>
 80079ae:	2004      	movs	r0, #4
 80079b0:	b007      	add	sp, #28
 80079b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080079b8 <_findenv_r>:
 80079b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079bc:	4606      	mov	r6, r0
 80079be:	468a      	mov	sl, r1
 80079c0:	4617      	mov	r7, r2
 80079c2:	f000 fe10 	bl	80085e6 <__env_lock>
 80079c6:	4b1b      	ldr	r3, [pc, #108]	; (8007a34 <_findenv_r+0x7c>)
 80079c8:	f8d3 8000 	ldr.w	r8, [r3]
 80079cc:	4699      	mov	r9, r3
 80079ce:	f1b8 0f00 	cmp.w	r8, #0
 80079d2:	d007      	beq.n	80079e4 <_findenv_r+0x2c>
 80079d4:	4654      	mov	r4, sl
 80079d6:	4623      	mov	r3, r4
 80079d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079dc:	b332      	cbz	r2, 8007a2c <_findenv_r+0x74>
 80079de:	2a3d      	cmp	r2, #61	; 0x3d
 80079e0:	461c      	mov	r4, r3
 80079e2:	d1f8      	bne.n	80079d6 <_findenv_r+0x1e>
 80079e4:	4630      	mov	r0, r6
 80079e6:	f000 fdff 	bl	80085e8 <__env_unlock>
 80079ea:	2000      	movs	r0, #0
 80079ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079f0:	f108 0804 	add.w	r8, r8, #4
 80079f4:	f8d8 0000 	ldr.w	r0, [r8]
 80079f8:	2800      	cmp	r0, #0
 80079fa:	d0f3      	beq.n	80079e4 <_findenv_r+0x2c>
 80079fc:	4622      	mov	r2, r4
 80079fe:	4651      	mov	r1, sl
 8007a00:	f000 fd2c 	bl	800845c <strncmp>
 8007a04:	2800      	cmp	r0, #0
 8007a06:	d1f3      	bne.n	80079f0 <_findenv_r+0x38>
 8007a08:	f8d8 3000 	ldr.w	r3, [r8]
 8007a0c:	191d      	adds	r5, r3, r4
 8007a0e:	5d1b      	ldrb	r3, [r3, r4]
 8007a10:	2b3d      	cmp	r3, #61	; 0x3d
 8007a12:	d1ed      	bne.n	80079f0 <_findenv_r+0x38>
 8007a14:	f8d9 3000 	ldr.w	r3, [r9]
 8007a18:	eba8 0303 	sub.w	r3, r8, r3
 8007a1c:	109b      	asrs	r3, r3, #2
 8007a1e:	4630      	mov	r0, r6
 8007a20:	603b      	str	r3, [r7, #0]
 8007a22:	f000 fde1 	bl	80085e8 <__env_unlock>
 8007a26:	1c68      	adds	r0, r5, #1
 8007a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a2c:	eba4 040a 	sub.w	r4, r4, sl
 8007a30:	e7e0      	b.n	80079f4 <_findenv_r+0x3c>
 8007a32:	bf00      	nop
 8007a34:	200000b8 	.word	0x200000b8

08007a38 <_getenv_r>:
 8007a38:	b507      	push	{r0, r1, r2, lr}
 8007a3a:	aa01      	add	r2, sp, #4
 8007a3c:	f7ff ffbc 	bl	80079b8 <_findenv_r>
 8007a40:	b003      	add	sp, #12
 8007a42:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007a48 <_gettimeofday_r>:
 8007a48:	b538      	push	{r3, r4, r5, lr}
 8007a4a:	4c07      	ldr	r4, [pc, #28]	; (8007a68 <_gettimeofday_r+0x20>)
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	4605      	mov	r5, r0
 8007a50:	4608      	mov	r0, r1
 8007a52:	4611      	mov	r1, r2
 8007a54:	6023      	str	r3, [r4, #0]
 8007a56:	f001 fa03 	bl	8008e60 <_gettimeofday>
 8007a5a:	1c43      	adds	r3, r0, #1
 8007a5c:	d102      	bne.n	8007a64 <_gettimeofday_r+0x1c>
 8007a5e:	6823      	ldr	r3, [r4, #0]
 8007a60:	b103      	cbz	r3, 8007a64 <_gettimeofday_r+0x1c>
 8007a62:	602b      	str	r3, [r5, #0]
 8007a64:	bd38      	pop	{r3, r4, r5, pc}
 8007a66:	bf00      	nop
 8007a68:	20001358 	.word	0x20001358

08007a6c <__gettzinfo>:
 8007a6c:	4800      	ldr	r0, [pc, #0]	; (8007a70 <__gettzinfo+0x4>)
 8007a6e:	4770      	bx	lr
 8007a70:	200000c8 	.word	0x200000c8

08007a74 <gmtime_r>:
 8007a74:	6802      	ldr	r2, [r0, #0]
 8007a76:	4848      	ldr	r0, [pc, #288]	; (8007b98 <gmtime_r+0x124>)
 8007a78:	fb92 f3f0 	sdiv	r3, r2, r0
 8007a7c:	fb00 2013 	mls	r0, r0, r3, r2
 8007a80:	2800      	cmp	r0, #0
 8007a82:	bfb8      	it	lt
 8007a84:	f500 30a8 	addlt.w	r0, r0, #86016	; 0x15000
 8007a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a8a:	bfb8      	it	lt
 8007a8c:	f500 70c0 	addlt.w	r0, r0, #384	; 0x180
 8007a90:	f44f 6461 	mov.w	r4, #3600	; 0xe10
 8007a94:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 8007a98:	fb90 f2f4 	sdiv	r2, r0, r4
 8007a9c:	fb04 0012 	mls	r0, r4, r2, r0
 8007aa0:	f04f 043c 	mov.w	r4, #60	; 0x3c
 8007aa4:	bfac      	ite	ge
 8007aa6:	f603 236c 	addwge	r3, r3, #2668	; 0xa6c
 8007aaa:	f603 236b 	addwlt	r3, r3, #2667	; 0xa6b
 8007aae:	608a      	str	r2, [r1, #8]
 8007ab0:	fb90 f2f4 	sdiv	r2, r0, r4
 8007ab4:	fb04 0012 	mls	r0, r4, r2, r0
 8007ab8:	604a      	str	r2, [r1, #4]
 8007aba:	6008      	str	r0, [r1, #0]
 8007abc:	2207      	movs	r2, #7
 8007abe:	1cd8      	adds	r0, r3, #3
 8007ac0:	fb90 f2f2 	sdiv	r2, r0, r2
 8007ac4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8007ac8:	1a82      	subs	r2, r0, r2
 8007aca:	618a      	str	r2, [r1, #24]
 8007acc:	4a33      	ldr	r2, [pc, #204]	; (8007b9c <gmtime_r+0x128>)
 8007ace:	4c34      	ldr	r4, [pc, #208]	; (8007ba0 <gmtime_r+0x12c>)
 8007ad0:	fb93 f4f4 	sdiv	r4, r3, r4
 8007ad4:	fb02 3304 	mla	r3, r2, r4, r3
 8007ad8:	f648 60ac 	movw	r0, #36524	; 0x8eac
 8007adc:	fbb3 f0f0 	udiv	r0, r3, r0
 8007ae0:	4418      	add	r0, r3
 8007ae2:	f240 57b4 	movw	r7, #1460	; 0x5b4
 8007ae6:	fbb3 f2f7 	udiv	r2, r3, r7
 8007aea:	1a80      	subs	r0, r0, r2
 8007aec:	4a2d      	ldr	r2, [pc, #180]	; (8007ba4 <gmtime_r+0x130>)
 8007aee:	fbb3 f2f2 	udiv	r2, r3, r2
 8007af2:	1a82      	subs	r2, r0, r2
 8007af4:	f648 6094 	movw	r0, #36500	; 0x8e94
 8007af8:	fbb2 f0f0 	udiv	r0, r2, r0
 8007afc:	4403      	add	r3, r0
 8007afe:	f240 166d 	movw	r6, #365	; 0x16d
 8007b02:	fbb2 f5f6 	udiv	r5, r2, r6
 8007b06:	fbb2 f2f7 	udiv	r2, r2, r7
 8007b0a:	1a9a      	subs	r2, r3, r2
 8007b0c:	fb06 2315 	mls	r3, r6, r5, r2
 8007b10:	2099      	movs	r0, #153	; 0x99
 8007b12:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8007b16:	1c5e      	adds	r6, r3, #1
 8007b18:	3202      	adds	r2, #2
 8007b1a:	fbb2 f2f0 	udiv	r2, r2, r0
 8007b1e:	2a0a      	cmp	r2, #10
 8007b20:	fb00 f002 	mul.w	r0, r0, r2
 8007b24:	f100 0002 	add.w	r0, r0, #2
 8007b28:	f04f 0705 	mov.w	r7, #5
 8007b2c:	fbb0 f0f7 	udiv	r0, r0, r7
 8007b30:	eba6 0000 	sub.w	r0, r6, r0
 8007b34:	bf34      	ite	cc
 8007b36:	2602      	movcc	r6, #2
 8007b38:	f06f 0609 	mvncs.w	r6, #9
 8007b3c:	4416      	add	r6, r2
 8007b3e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007b42:	fb02 5404 	mla	r4, r2, r4, r5
 8007b46:	2e01      	cmp	r6, #1
 8007b48:	bf98      	it	ls
 8007b4a:	3401      	addls	r4, #1
 8007b4c:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8007b50:	d30b      	bcc.n	8007b6a <gmtime_r+0xf6>
 8007b52:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8007b56:	61cb      	str	r3, [r1, #28]
 8007b58:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	60c8      	str	r0, [r1, #12]
 8007b60:	614c      	str	r4, [r1, #20]
 8007b62:	610e      	str	r6, [r1, #16]
 8007b64:	620b      	str	r3, [r1, #32]
 8007b66:	4608      	mov	r0, r1
 8007b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b6a:	07aa      	lsls	r2, r5, #30
 8007b6c:	d105      	bne.n	8007b7a <gmtime_r+0x106>
 8007b6e:	2764      	movs	r7, #100	; 0x64
 8007b70:	fbb5 f2f7 	udiv	r2, r5, r7
 8007b74:	fb07 5212 	mls	r2, r7, r2, r5
 8007b78:	b95a      	cbnz	r2, 8007b92 <gmtime_r+0x11e>
 8007b7a:	f44f 77c8 	mov.w	r7, #400	; 0x190
 8007b7e:	fbb5 f2f7 	udiv	r2, r5, r7
 8007b82:	fb07 5212 	mls	r2, r7, r2, r5
 8007b86:	fab2 f282 	clz	r2, r2
 8007b8a:	0952      	lsrs	r2, r2, #5
 8007b8c:	333b      	adds	r3, #59	; 0x3b
 8007b8e:	4413      	add	r3, r2
 8007b90:	e7e1      	b.n	8007b56 <gmtime_r+0xe2>
 8007b92:	2201      	movs	r2, #1
 8007b94:	e7fa      	b.n	8007b8c <gmtime_r+0x118>
 8007b96:	bf00      	nop
 8007b98:	00015180 	.word	0x00015180
 8007b9c:	fffdc54f 	.word	0xfffdc54f
 8007ba0:	00023ab1 	.word	0x00023ab1
 8007ba4:	00023ab0 	.word	0x00023ab0

08007ba8 <__locale_ctype_ptr_l>:
 8007ba8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007bac:	4770      	bx	lr
	...

08007bb0 <__locale_ctype_ptr>:
 8007bb0:	4b04      	ldr	r3, [pc, #16]	; (8007bc4 <__locale_ctype_ptr+0x14>)
 8007bb2:	4a05      	ldr	r2, [pc, #20]	; (8007bc8 <__locale_ctype_ptr+0x18>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	6a1b      	ldr	r3, [r3, #32]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	bf08      	it	eq
 8007bbc:	4613      	moveq	r3, r2
 8007bbe:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8007bc2:	4770      	bx	lr
 8007bc4:	20000108 	.word	0x20000108
 8007bc8:	2000016c 	.word	0x2000016c

08007bcc <__localeconv_l>:
 8007bcc:	30f0      	adds	r0, #240	; 0xf0
 8007bce:	4770      	bx	lr

08007bd0 <__ascii_mbtowc>:
 8007bd0:	b082      	sub	sp, #8
 8007bd2:	b901      	cbnz	r1, 8007bd6 <__ascii_mbtowc+0x6>
 8007bd4:	a901      	add	r1, sp, #4
 8007bd6:	b142      	cbz	r2, 8007bea <__ascii_mbtowc+0x1a>
 8007bd8:	b14b      	cbz	r3, 8007bee <__ascii_mbtowc+0x1e>
 8007bda:	7813      	ldrb	r3, [r2, #0]
 8007bdc:	600b      	str	r3, [r1, #0]
 8007bde:	7812      	ldrb	r2, [r2, #0]
 8007be0:	1c10      	adds	r0, r2, #0
 8007be2:	bf18      	it	ne
 8007be4:	2001      	movne	r0, #1
 8007be6:	b002      	add	sp, #8
 8007be8:	4770      	bx	lr
 8007bea:	4610      	mov	r0, r2
 8007bec:	e7fb      	b.n	8007be6 <__ascii_mbtowc+0x16>
 8007bee:	f06f 0001 	mvn.w	r0, #1
 8007bf2:	e7f8      	b.n	8007be6 <__ascii_mbtowc+0x16>

08007bf4 <memcpy>:
 8007bf4:	b510      	push	{r4, lr}
 8007bf6:	1e43      	subs	r3, r0, #1
 8007bf8:	440a      	add	r2, r1
 8007bfa:	4291      	cmp	r1, r2
 8007bfc:	d100      	bne.n	8007c00 <memcpy+0xc>
 8007bfe:	bd10      	pop	{r4, pc}
 8007c00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c08:	e7f7      	b.n	8007bfa <memcpy+0x6>

08007c0a <__malloc_lock>:
 8007c0a:	4770      	bx	lr

08007c0c <__malloc_unlock>:
 8007c0c:	4770      	bx	lr

08007c0e <_Balloc>:
 8007c0e:	b570      	push	{r4, r5, r6, lr}
 8007c10:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007c12:	4604      	mov	r4, r0
 8007c14:	460e      	mov	r6, r1
 8007c16:	b93d      	cbnz	r5, 8007c28 <_Balloc+0x1a>
 8007c18:	2010      	movs	r0, #16
 8007c1a:	f7fd ffb3 	bl	8005b84 <malloc>
 8007c1e:	6260      	str	r0, [r4, #36]	; 0x24
 8007c20:	6045      	str	r5, [r0, #4]
 8007c22:	6085      	str	r5, [r0, #8]
 8007c24:	6005      	str	r5, [r0, #0]
 8007c26:	60c5      	str	r5, [r0, #12]
 8007c28:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007c2a:	68eb      	ldr	r3, [r5, #12]
 8007c2c:	b183      	cbz	r3, 8007c50 <_Balloc+0x42>
 8007c2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007c36:	b9b8      	cbnz	r0, 8007c68 <_Balloc+0x5a>
 8007c38:	2101      	movs	r1, #1
 8007c3a:	fa01 f506 	lsl.w	r5, r1, r6
 8007c3e:	1d6a      	adds	r2, r5, #5
 8007c40:	0092      	lsls	r2, r2, #2
 8007c42:	4620      	mov	r0, r4
 8007c44:	f000 fbd0 	bl	80083e8 <_calloc_r>
 8007c48:	b160      	cbz	r0, 8007c64 <_Balloc+0x56>
 8007c4a:	6046      	str	r6, [r0, #4]
 8007c4c:	6085      	str	r5, [r0, #8]
 8007c4e:	e00e      	b.n	8007c6e <_Balloc+0x60>
 8007c50:	2221      	movs	r2, #33	; 0x21
 8007c52:	2104      	movs	r1, #4
 8007c54:	4620      	mov	r0, r4
 8007c56:	f000 fbc7 	bl	80083e8 <_calloc_r>
 8007c5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c5c:	60e8      	str	r0, [r5, #12]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1e4      	bne.n	8007c2e <_Balloc+0x20>
 8007c64:	2000      	movs	r0, #0
 8007c66:	bd70      	pop	{r4, r5, r6, pc}
 8007c68:	6802      	ldr	r2, [r0, #0]
 8007c6a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007c6e:	2300      	movs	r3, #0
 8007c70:	6103      	str	r3, [r0, #16]
 8007c72:	60c3      	str	r3, [r0, #12]
 8007c74:	bd70      	pop	{r4, r5, r6, pc}

08007c76 <_Bfree>:
 8007c76:	b570      	push	{r4, r5, r6, lr}
 8007c78:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007c7a:	4606      	mov	r6, r0
 8007c7c:	460d      	mov	r5, r1
 8007c7e:	b93c      	cbnz	r4, 8007c90 <_Bfree+0x1a>
 8007c80:	2010      	movs	r0, #16
 8007c82:	f7fd ff7f 	bl	8005b84 <malloc>
 8007c86:	6270      	str	r0, [r6, #36]	; 0x24
 8007c88:	6044      	str	r4, [r0, #4]
 8007c8a:	6084      	str	r4, [r0, #8]
 8007c8c:	6004      	str	r4, [r0, #0]
 8007c8e:	60c4      	str	r4, [r0, #12]
 8007c90:	b13d      	cbz	r5, 8007ca2 <_Bfree+0x2c>
 8007c92:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007c94:	686a      	ldr	r2, [r5, #4]
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c9c:	6029      	str	r1, [r5, #0]
 8007c9e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007ca2:	bd70      	pop	{r4, r5, r6, pc}

08007ca4 <__multadd>:
 8007ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ca8:	690d      	ldr	r5, [r1, #16]
 8007caa:	461f      	mov	r7, r3
 8007cac:	4606      	mov	r6, r0
 8007cae:	460c      	mov	r4, r1
 8007cb0:	f101 0e14 	add.w	lr, r1, #20
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	f8de 0000 	ldr.w	r0, [lr]
 8007cba:	b281      	uxth	r1, r0
 8007cbc:	fb02 7101 	mla	r1, r2, r1, r7
 8007cc0:	0c0f      	lsrs	r7, r1, #16
 8007cc2:	0c00      	lsrs	r0, r0, #16
 8007cc4:	fb02 7000 	mla	r0, r2, r0, r7
 8007cc8:	b289      	uxth	r1, r1
 8007cca:	3301      	adds	r3, #1
 8007ccc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007cd0:	429d      	cmp	r5, r3
 8007cd2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007cd6:	f84e 1b04 	str.w	r1, [lr], #4
 8007cda:	dcec      	bgt.n	8007cb6 <__multadd+0x12>
 8007cdc:	b1d7      	cbz	r7, 8007d14 <__multadd+0x70>
 8007cde:	68a3      	ldr	r3, [r4, #8]
 8007ce0:	429d      	cmp	r5, r3
 8007ce2:	db12      	blt.n	8007d0a <__multadd+0x66>
 8007ce4:	6861      	ldr	r1, [r4, #4]
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	3101      	adds	r1, #1
 8007cea:	f7ff ff90 	bl	8007c0e <_Balloc>
 8007cee:	6922      	ldr	r2, [r4, #16]
 8007cf0:	3202      	adds	r2, #2
 8007cf2:	f104 010c 	add.w	r1, r4, #12
 8007cf6:	4680      	mov	r8, r0
 8007cf8:	0092      	lsls	r2, r2, #2
 8007cfa:	300c      	adds	r0, #12
 8007cfc:	f7ff ff7a 	bl	8007bf4 <memcpy>
 8007d00:	4621      	mov	r1, r4
 8007d02:	4630      	mov	r0, r6
 8007d04:	f7ff ffb7 	bl	8007c76 <_Bfree>
 8007d08:	4644      	mov	r4, r8
 8007d0a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d0e:	3501      	adds	r5, #1
 8007d10:	615f      	str	r7, [r3, #20]
 8007d12:	6125      	str	r5, [r4, #16]
 8007d14:	4620      	mov	r0, r4
 8007d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007d1a <__s2b>:
 8007d1a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d1e:	460c      	mov	r4, r1
 8007d20:	4615      	mov	r5, r2
 8007d22:	461f      	mov	r7, r3
 8007d24:	2209      	movs	r2, #9
 8007d26:	3308      	adds	r3, #8
 8007d28:	4606      	mov	r6, r0
 8007d2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d2e:	2100      	movs	r1, #0
 8007d30:	2201      	movs	r2, #1
 8007d32:	429a      	cmp	r2, r3
 8007d34:	db20      	blt.n	8007d78 <__s2b+0x5e>
 8007d36:	4630      	mov	r0, r6
 8007d38:	f7ff ff69 	bl	8007c0e <_Balloc>
 8007d3c:	9b08      	ldr	r3, [sp, #32]
 8007d3e:	6143      	str	r3, [r0, #20]
 8007d40:	2d09      	cmp	r5, #9
 8007d42:	f04f 0301 	mov.w	r3, #1
 8007d46:	6103      	str	r3, [r0, #16]
 8007d48:	dd19      	ble.n	8007d7e <__s2b+0x64>
 8007d4a:	f104 0909 	add.w	r9, r4, #9
 8007d4e:	46c8      	mov	r8, r9
 8007d50:	442c      	add	r4, r5
 8007d52:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007d56:	4601      	mov	r1, r0
 8007d58:	3b30      	subs	r3, #48	; 0x30
 8007d5a:	220a      	movs	r2, #10
 8007d5c:	4630      	mov	r0, r6
 8007d5e:	f7ff ffa1 	bl	8007ca4 <__multadd>
 8007d62:	45a0      	cmp	r8, r4
 8007d64:	d1f5      	bne.n	8007d52 <__s2b+0x38>
 8007d66:	f1a5 0408 	sub.w	r4, r5, #8
 8007d6a:	444c      	add	r4, r9
 8007d6c:	1b2d      	subs	r5, r5, r4
 8007d6e:	1963      	adds	r3, r4, r5
 8007d70:	42bb      	cmp	r3, r7
 8007d72:	db07      	blt.n	8007d84 <__s2b+0x6a>
 8007d74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d78:	0052      	lsls	r2, r2, #1
 8007d7a:	3101      	adds	r1, #1
 8007d7c:	e7d9      	b.n	8007d32 <__s2b+0x18>
 8007d7e:	340a      	adds	r4, #10
 8007d80:	2509      	movs	r5, #9
 8007d82:	e7f3      	b.n	8007d6c <__s2b+0x52>
 8007d84:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007d88:	4601      	mov	r1, r0
 8007d8a:	3b30      	subs	r3, #48	; 0x30
 8007d8c:	220a      	movs	r2, #10
 8007d8e:	4630      	mov	r0, r6
 8007d90:	f7ff ff88 	bl	8007ca4 <__multadd>
 8007d94:	e7eb      	b.n	8007d6e <__s2b+0x54>

08007d96 <__hi0bits>:
 8007d96:	0c02      	lsrs	r2, r0, #16
 8007d98:	0412      	lsls	r2, r2, #16
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	b9b2      	cbnz	r2, 8007dcc <__hi0bits+0x36>
 8007d9e:	0403      	lsls	r3, r0, #16
 8007da0:	2010      	movs	r0, #16
 8007da2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007da6:	bf04      	itt	eq
 8007da8:	021b      	lsleq	r3, r3, #8
 8007daa:	3008      	addeq	r0, #8
 8007dac:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007db0:	bf04      	itt	eq
 8007db2:	011b      	lsleq	r3, r3, #4
 8007db4:	3004      	addeq	r0, #4
 8007db6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007dba:	bf04      	itt	eq
 8007dbc:	009b      	lsleq	r3, r3, #2
 8007dbe:	3002      	addeq	r0, #2
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	db06      	blt.n	8007dd2 <__hi0bits+0x3c>
 8007dc4:	005b      	lsls	r3, r3, #1
 8007dc6:	d503      	bpl.n	8007dd0 <__hi0bits+0x3a>
 8007dc8:	3001      	adds	r0, #1
 8007dca:	4770      	bx	lr
 8007dcc:	2000      	movs	r0, #0
 8007dce:	e7e8      	b.n	8007da2 <__hi0bits+0xc>
 8007dd0:	2020      	movs	r0, #32
 8007dd2:	4770      	bx	lr

08007dd4 <__lo0bits>:
 8007dd4:	6803      	ldr	r3, [r0, #0]
 8007dd6:	f013 0207 	ands.w	r2, r3, #7
 8007dda:	4601      	mov	r1, r0
 8007ddc:	d00b      	beq.n	8007df6 <__lo0bits+0x22>
 8007dde:	07da      	lsls	r2, r3, #31
 8007de0:	d423      	bmi.n	8007e2a <__lo0bits+0x56>
 8007de2:	0798      	lsls	r0, r3, #30
 8007de4:	bf49      	itett	mi
 8007de6:	085b      	lsrmi	r3, r3, #1
 8007de8:	089b      	lsrpl	r3, r3, #2
 8007dea:	2001      	movmi	r0, #1
 8007dec:	600b      	strmi	r3, [r1, #0]
 8007dee:	bf5c      	itt	pl
 8007df0:	600b      	strpl	r3, [r1, #0]
 8007df2:	2002      	movpl	r0, #2
 8007df4:	4770      	bx	lr
 8007df6:	b298      	uxth	r0, r3
 8007df8:	b9a8      	cbnz	r0, 8007e26 <__lo0bits+0x52>
 8007dfa:	0c1b      	lsrs	r3, r3, #16
 8007dfc:	2010      	movs	r0, #16
 8007dfe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007e02:	bf04      	itt	eq
 8007e04:	0a1b      	lsreq	r3, r3, #8
 8007e06:	3008      	addeq	r0, #8
 8007e08:	071a      	lsls	r2, r3, #28
 8007e0a:	bf04      	itt	eq
 8007e0c:	091b      	lsreq	r3, r3, #4
 8007e0e:	3004      	addeq	r0, #4
 8007e10:	079a      	lsls	r2, r3, #30
 8007e12:	bf04      	itt	eq
 8007e14:	089b      	lsreq	r3, r3, #2
 8007e16:	3002      	addeq	r0, #2
 8007e18:	07da      	lsls	r2, r3, #31
 8007e1a:	d402      	bmi.n	8007e22 <__lo0bits+0x4e>
 8007e1c:	085b      	lsrs	r3, r3, #1
 8007e1e:	d006      	beq.n	8007e2e <__lo0bits+0x5a>
 8007e20:	3001      	adds	r0, #1
 8007e22:	600b      	str	r3, [r1, #0]
 8007e24:	4770      	bx	lr
 8007e26:	4610      	mov	r0, r2
 8007e28:	e7e9      	b.n	8007dfe <__lo0bits+0x2a>
 8007e2a:	2000      	movs	r0, #0
 8007e2c:	4770      	bx	lr
 8007e2e:	2020      	movs	r0, #32
 8007e30:	4770      	bx	lr

08007e32 <__i2b>:
 8007e32:	b510      	push	{r4, lr}
 8007e34:	460c      	mov	r4, r1
 8007e36:	2101      	movs	r1, #1
 8007e38:	f7ff fee9 	bl	8007c0e <_Balloc>
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	6144      	str	r4, [r0, #20]
 8007e40:	6102      	str	r2, [r0, #16]
 8007e42:	bd10      	pop	{r4, pc}

08007e44 <__multiply>:
 8007e44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e48:	4614      	mov	r4, r2
 8007e4a:	690a      	ldr	r2, [r1, #16]
 8007e4c:	6923      	ldr	r3, [r4, #16]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	bfb8      	it	lt
 8007e52:	460b      	movlt	r3, r1
 8007e54:	4689      	mov	r9, r1
 8007e56:	bfbc      	itt	lt
 8007e58:	46a1      	movlt	r9, r4
 8007e5a:	461c      	movlt	r4, r3
 8007e5c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007e60:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007e64:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8007e68:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007e6c:	eb07 060a 	add.w	r6, r7, sl
 8007e70:	429e      	cmp	r6, r3
 8007e72:	bfc8      	it	gt
 8007e74:	3101      	addgt	r1, #1
 8007e76:	f7ff feca 	bl	8007c0e <_Balloc>
 8007e7a:	f100 0514 	add.w	r5, r0, #20
 8007e7e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007e82:	462b      	mov	r3, r5
 8007e84:	2200      	movs	r2, #0
 8007e86:	4543      	cmp	r3, r8
 8007e88:	d316      	bcc.n	8007eb8 <__multiply+0x74>
 8007e8a:	f104 0214 	add.w	r2, r4, #20
 8007e8e:	f109 0114 	add.w	r1, r9, #20
 8007e92:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8007e96:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007e9a:	9301      	str	r3, [sp, #4]
 8007e9c:	9c01      	ldr	r4, [sp, #4]
 8007e9e:	4294      	cmp	r4, r2
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	d80c      	bhi.n	8007ebe <__multiply+0x7a>
 8007ea4:	2e00      	cmp	r6, #0
 8007ea6:	dd03      	ble.n	8007eb0 <__multiply+0x6c>
 8007ea8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d054      	beq.n	8007f5a <__multiply+0x116>
 8007eb0:	6106      	str	r6, [r0, #16]
 8007eb2:	b003      	add	sp, #12
 8007eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eb8:	f843 2b04 	str.w	r2, [r3], #4
 8007ebc:	e7e3      	b.n	8007e86 <__multiply+0x42>
 8007ebe:	f8b3 a000 	ldrh.w	sl, [r3]
 8007ec2:	3204      	adds	r2, #4
 8007ec4:	f1ba 0f00 	cmp.w	sl, #0
 8007ec8:	d020      	beq.n	8007f0c <__multiply+0xc8>
 8007eca:	46ae      	mov	lr, r5
 8007ecc:	4689      	mov	r9, r1
 8007ece:	f04f 0c00 	mov.w	ip, #0
 8007ed2:	f859 4b04 	ldr.w	r4, [r9], #4
 8007ed6:	f8be b000 	ldrh.w	fp, [lr]
 8007eda:	b2a3      	uxth	r3, r4
 8007edc:	fb0a b303 	mla	r3, sl, r3, fp
 8007ee0:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8007ee4:	f8de 4000 	ldr.w	r4, [lr]
 8007ee8:	4463      	add	r3, ip
 8007eea:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8007eee:	fb0a c40b 	mla	r4, sl, fp, ip
 8007ef2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007efc:	454f      	cmp	r7, r9
 8007efe:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8007f02:	f84e 3b04 	str.w	r3, [lr], #4
 8007f06:	d8e4      	bhi.n	8007ed2 <__multiply+0x8e>
 8007f08:	f8ce c000 	str.w	ip, [lr]
 8007f0c:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8007f10:	f1b9 0f00 	cmp.w	r9, #0
 8007f14:	d01f      	beq.n	8007f56 <__multiply+0x112>
 8007f16:	682b      	ldr	r3, [r5, #0]
 8007f18:	46ae      	mov	lr, r5
 8007f1a:	468c      	mov	ip, r1
 8007f1c:	f04f 0a00 	mov.w	sl, #0
 8007f20:	f8bc 4000 	ldrh.w	r4, [ip]
 8007f24:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007f28:	fb09 b404 	mla	r4, r9, r4, fp
 8007f2c:	44a2      	add	sl, r4
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8007f34:	f84e 3b04 	str.w	r3, [lr], #4
 8007f38:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007f3c:	f8be 4000 	ldrh.w	r4, [lr]
 8007f40:	0c1b      	lsrs	r3, r3, #16
 8007f42:	fb09 4303 	mla	r3, r9, r3, r4
 8007f46:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8007f4a:	4567      	cmp	r7, ip
 8007f4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f50:	d8e6      	bhi.n	8007f20 <__multiply+0xdc>
 8007f52:	f8ce 3000 	str.w	r3, [lr]
 8007f56:	3504      	adds	r5, #4
 8007f58:	e7a0      	b.n	8007e9c <__multiply+0x58>
 8007f5a:	3e01      	subs	r6, #1
 8007f5c:	e7a2      	b.n	8007ea4 <__multiply+0x60>
	...

08007f60 <__pow5mult>:
 8007f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f64:	4615      	mov	r5, r2
 8007f66:	f012 0203 	ands.w	r2, r2, #3
 8007f6a:	4606      	mov	r6, r0
 8007f6c:	460f      	mov	r7, r1
 8007f6e:	d007      	beq.n	8007f80 <__pow5mult+0x20>
 8007f70:	3a01      	subs	r2, #1
 8007f72:	4c21      	ldr	r4, [pc, #132]	; (8007ff8 <__pow5mult+0x98>)
 8007f74:	2300      	movs	r3, #0
 8007f76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f7a:	f7ff fe93 	bl	8007ca4 <__multadd>
 8007f7e:	4607      	mov	r7, r0
 8007f80:	10ad      	asrs	r5, r5, #2
 8007f82:	d035      	beq.n	8007ff0 <__pow5mult+0x90>
 8007f84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007f86:	b93c      	cbnz	r4, 8007f98 <__pow5mult+0x38>
 8007f88:	2010      	movs	r0, #16
 8007f8a:	f7fd fdfb 	bl	8005b84 <malloc>
 8007f8e:	6270      	str	r0, [r6, #36]	; 0x24
 8007f90:	6044      	str	r4, [r0, #4]
 8007f92:	6084      	str	r4, [r0, #8]
 8007f94:	6004      	str	r4, [r0, #0]
 8007f96:	60c4      	str	r4, [r0, #12]
 8007f98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007f9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007fa0:	b94c      	cbnz	r4, 8007fb6 <__pow5mult+0x56>
 8007fa2:	f240 2171 	movw	r1, #625	; 0x271
 8007fa6:	4630      	mov	r0, r6
 8007fa8:	f7ff ff43 	bl	8007e32 <__i2b>
 8007fac:	2300      	movs	r3, #0
 8007fae:	f8c8 0008 	str.w	r0, [r8, #8]
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	6003      	str	r3, [r0, #0]
 8007fb6:	f04f 0800 	mov.w	r8, #0
 8007fba:	07eb      	lsls	r3, r5, #31
 8007fbc:	d50a      	bpl.n	8007fd4 <__pow5mult+0x74>
 8007fbe:	4639      	mov	r1, r7
 8007fc0:	4622      	mov	r2, r4
 8007fc2:	4630      	mov	r0, r6
 8007fc4:	f7ff ff3e 	bl	8007e44 <__multiply>
 8007fc8:	4639      	mov	r1, r7
 8007fca:	4681      	mov	r9, r0
 8007fcc:	4630      	mov	r0, r6
 8007fce:	f7ff fe52 	bl	8007c76 <_Bfree>
 8007fd2:	464f      	mov	r7, r9
 8007fd4:	106d      	asrs	r5, r5, #1
 8007fd6:	d00b      	beq.n	8007ff0 <__pow5mult+0x90>
 8007fd8:	6820      	ldr	r0, [r4, #0]
 8007fda:	b938      	cbnz	r0, 8007fec <__pow5mult+0x8c>
 8007fdc:	4622      	mov	r2, r4
 8007fde:	4621      	mov	r1, r4
 8007fe0:	4630      	mov	r0, r6
 8007fe2:	f7ff ff2f 	bl	8007e44 <__multiply>
 8007fe6:	6020      	str	r0, [r4, #0]
 8007fe8:	f8c0 8000 	str.w	r8, [r0]
 8007fec:	4604      	mov	r4, r0
 8007fee:	e7e4      	b.n	8007fba <__pow5mult+0x5a>
 8007ff0:	4638      	mov	r0, r7
 8007ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ff6:	bf00      	nop
 8007ff8:	08009750 	.word	0x08009750

08007ffc <__lshift>:
 8007ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008000:	460c      	mov	r4, r1
 8008002:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008006:	6923      	ldr	r3, [r4, #16]
 8008008:	6849      	ldr	r1, [r1, #4]
 800800a:	eb0a 0903 	add.w	r9, sl, r3
 800800e:	68a3      	ldr	r3, [r4, #8]
 8008010:	4607      	mov	r7, r0
 8008012:	4616      	mov	r6, r2
 8008014:	f109 0501 	add.w	r5, r9, #1
 8008018:	42ab      	cmp	r3, r5
 800801a:	db31      	blt.n	8008080 <__lshift+0x84>
 800801c:	4638      	mov	r0, r7
 800801e:	f7ff fdf6 	bl	8007c0e <_Balloc>
 8008022:	2200      	movs	r2, #0
 8008024:	4680      	mov	r8, r0
 8008026:	f100 0314 	add.w	r3, r0, #20
 800802a:	4611      	mov	r1, r2
 800802c:	4552      	cmp	r2, sl
 800802e:	db2a      	blt.n	8008086 <__lshift+0x8a>
 8008030:	6920      	ldr	r0, [r4, #16]
 8008032:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008036:	f104 0114 	add.w	r1, r4, #20
 800803a:	f016 021f 	ands.w	r2, r6, #31
 800803e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8008042:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8008046:	d022      	beq.n	800808e <__lshift+0x92>
 8008048:	f1c2 0c20 	rsb	ip, r2, #32
 800804c:	2000      	movs	r0, #0
 800804e:	680e      	ldr	r6, [r1, #0]
 8008050:	4096      	lsls	r6, r2
 8008052:	4330      	orrs	r0, r6
 8008054:	f843 0b04 	str.w	r0, [r3], #4
 8008058:	f851 0b04 	ldr.w	r0, [r1], #4
 800805c:	458e      	cmp	lr, r1
 800805e:	fa20 f00c 	lsr.w	r0, r0, ip
 8008062:	d8f4      	bhi.n	800804e <__lshift+0x52>
 8008064:	6018      	str	r0, [r3, #0]
 8008066:	b108      	cbz	r0, 800806c <__lshift+0x70>
 8008068:	f109 0502 	add.w	r5, r9, #2
 800806c:	3d01      	subs	r5, #1
 800806e:	4638      	mov	r0, r7
 8008070:	f8c8 5010 	str.w	r5, [r8, #16]
 8008074:	4621      	mov	r1, r4
 8008076:	f7ff fdfe 	bl	8007c76 <_Bfree>
 800807a:	4640      	mov	r0, r8
 800807c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008080:	3101      	adds	r1, #1
 8008082:	005b      	lsls	r3, r3, #1
 8008084:	e7c8      	b.n	8008018 <__lshift+0x1c>
 8008086:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800808a:	3201      	adds	r2, #1
 800808c:	e7ce      	b.n	800802c <__lshift+0x30>
 800808e:	3b04      	subs	r3, #4
 8008090:	f851 2b04 	ldr.w	r2, [r1], #4
 8008094:	f843 2f04 	str.w	r2, [r3, #4]!
 8008098:	458e      	cmp	lr, r1
 800809a:	d8f9      	bhi.n	8008090 <__lshift+0x94>
 800809c:	e7e6      	b.n	800806c <__lshift+0x70>

0800809e <__mcmp>:
 800809e:	6903      	ldr	r3, [r0, #16]
 80080a0:	690a      	ldr	r2, [r1, #16]
 80080a2:	1a9b      	subs	r3, r3, r2
 80080a4:	b530      	push	{r4, r5, lr}
 80080a6:	d10c      	bne.n	80080c2 <__mcmp+0x24>
 80080a8:	0092      	lsls	r2, r2, #2
 80080aa:	3014      	adds	r0, #20
 80080ac:	3114      	adds	r1, #20
 80080ae:	1884      	adds	r4, r0, r2
 80080b0:	4411      	add	r1, r2
 80080b2:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80080b6:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80080ba:	4295      	cmp	r5, r2
 80080bc:	d003      	beq.n	80080c6 <__mcmp+0x28>
 80080be:	d305      	bcc.n	80080cc <__mcmp+0x2e>
 80080c0:	2301      	movs	r3, #1
 80080c2:	4618      	mov	r0, r3
 80080c4:	bd30      	pop	{r4, r5, pc}
 80080c6:	42a0      	cmp	r0, r4
 80080c8:	d3f3      	bcc.n	80080b2 <__mcmp+0x14>
 80080ca:	e7fa      	b.n	80080c2 <__mcmp+0x24>
 80080cc:	f04f 33ff 	mov.w	r3, #4294967295
 80080d0:	e7f7      	b.n	80080c2 <__mcmp+0x24>

080080d2 <__mdiff>:
 80080d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080d6:	460d      	mov	r5, r1
 80080d8:	4607      	mov	r7, r0
 80080da:	4611      	mov	r1, r2
 80080dc:	4628      	mov	r0, r5
 80080de:	4614      	mov	r4, r2
 80080e0:	f7ff ffdd 	bl	800809e <__mcmp>
 80080e4:	1e06      	subs	r6, r0, #0
 80080e6:	d108      	bne.n	80080fa <__mdiff+0x28>
 80080e8:	4631      	mov	r1, r6
 80080ea:	4638      	mov	r0, r7
 80080ec:	f7ff fd8f 	bl	8007c0e <_Balloc>
 80080f0:	2301      	movs	r3, #1
 80080f2:	6103      	str	r3, [r0, #16]
 80080f4:	6146      	str	r6, [r0, #20]
 80080f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080fa:	bfa4      	itt	ge
 80080fc:	4623      	movge	r3, r4
 80080fe:	462c      	movge	r4, r5
 8008100:	4638      	mov	r0, r7
 8008102:	6861      	ldr	r1, [r4, #4]
 8008104:	bfa6      	itte	ge
 8008106:	461d      	movge	r5, r3
 8008108:	2600      	movge	r6, #0
 800810a:	2601      	movlt	r6, #1
 800810c:	f7ff fd7f 	bl	8007c0e <_Balloc>
 8008110:	692b      	ldr	r3, [r5, #16]
 8008112:	60c6      	str	r6, [r0, #12]
 8008114:	6926      	ldr	r6, [r4, #16]
 8008116:	f105 0914 	add.w	r9, r5, #20
 800811a:	f104 0214 	add.w	r2, r4, #20
 800811e:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008122:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008126:	f100 0514 	add.w	r5, r0, #20
 800812a:	f04f 0c00 	mov.w	ip, #0
 800812e:	f852 ab04 	ldr.w	sl, [r2], #4
 8008132:	f859 4b04 	ldr.w	r4, [r9], #4
 8008136:	fa1c f18a 	uxtah	r1, ip, sl
 800813a:	b2a3      	uxth	r3, r4
 800813c:	1ac9      	subs	r1, r1, r3
 800813e:	0c23      	lsrs	r3, r4, #16
 8008140:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008144:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008148:	b289      	uxth	r1, r1
 800814a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800814e:	45c8      	cmp	r8, r9
 8008150:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008154:	4696      	mov	lr, r2
 8008156:	f845 3b04 	str.w	r3, [r5], #4
 800815a:	d8e8      	bhi.n	800812e <__mdiff+0x5c>
 800815c:	45be      	cmp	lr, r7
 800815e:	d305      	bcc.n	800816c <__mdiff+0x9a>
 8008160:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008164:	b18b      	cbz	r3, 800818a <__mdiff+0xb8>
 8008166:	6106      	str	r6, [r0, #16]
 8008168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800816c:	f85e 1b04 	ldr.w	r1, [lr], #4
 8008170:	fa1c f381 	uxtah	r3, ip, r1
 8008174:	141a      	asrs	r2, r3, #16
 8008176:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800817a:	b29b      	uxth	r3, r3
 800817c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008180:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008184:	f845 3b04 	str.w	r3, [r5], #4
 8008188:	e7e8      	b.n	800815c <__mdiff+0x8a>
 800818a:	3e01      	subs	r6, #1
 800818c:	e7e8      	b.n	8008160 <__mdiff+0x8e>
	...

08008190 <__ulp>:
 8008190:	4b12      	ldr	r3, [pc, #72]	; (80081dc <__ulp+0x4c>)
 8008192:	ee10 2a90 	vmov	r2, s1
 8008196:	401a      	ands	r2, r3
 8008198:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800819c:	2b00      	cmp	r3, #0
 800819e:	dd04      	ble.n	80081aa <__ulp+0x1a>
 80081a0:	2000      	movs	r0, #0
 80081a2:	4619      	mov	r1, r3
 80081a4:	ec41 0b10 	vmov	d0, r0, r1
 80081a8:	4770      	bx	lr
 80081aa:	425b      	negs	r3, r3
 80081ac:	151b      	asrs	r3, r3, #20
 80081ae:	2b13      	cmp	r3, #19
 80081b0:	f04f 0000 	mov.w	r0, #0
 80081b4:	f04f 0100 	mov.w	r1, #0
 80081b8:	dc04      	bgt.n	80081c4 <__ulp+0x34>
 80081ba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80081be:	fa42 f103 	asr.w	r1, r2, r3
 80081c2:	e7ef      	b.n	80081a4 <__ulp+0x14>
 80081c4:	3b14      	subs	r3, #20
 80081c6:	2b1e      	cmp	r3, #30
 80081c8:	f04f 0201 	mov.w	r2, #1
 80081cc:	bfda      	itte	le
 80081ce:	f1c3 031f 	rsble	r3, r3, #31
 80081d2:	fa02 f303 	lslle.w	r3, r2, r3
 80081d6:	4613      	movgt	r3, r2
 80081d8:	4618      	mov	r0, r3
 80081da:	e7e3      	b.n	80081a4 <__ulp+0x14>
 80081dc:	7ff00000 	.word	0x7ff00000

080081e0 <__b2d>:
 80081e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081e2:	6905      	ldr	r5, [r0, #16]
 80081e4:	f100 0714 	add.w	r7, r0, #20
 80081e8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80081ec:	1f2e      	subs	r6, r5, #4
 80081ee:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80081f2:	4620      	mov	r0, r4
 80081f4:	f7ff fdcf 	bl	8007d96 <__hi0bits>
 80081f8:	f1c0 0320 	rsb	r3, r0, #32
 80081fc:	280a      	cmp	r0, #10
 80081fe:	600b      	str	r3, [r1, #0]
 8008200:	f8df e074 	ldr.w	lr, [pc, #116]	; 8008278 <__b2d+0x98>
 8008204:	dc14      	bgt.n	8008230 <__b2d+0x50>
 8008206:	f1c0 0c0b 	rsb	ip, r0, #11
 800820a:	fa24 f10c 	lsr.w	r1, r4, ip
 800820e:	42b7      	cmp	r7, r6
 8008210:	ea41 030e 	orr.w	r3, r1, lr
 8008214:	bf34      	ite	cc
 8008216:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800821a:	2100      	movcs	r1, #0
 800821c:	3015      	adds	r0, #21
 800821e:	fa04 f000 	lsl.w	r0, r4, r0
 8008222:	fa21 f10c 	lsr.w	r1, r1, ip
 8008226:	ea40 0201 	orr.w	r2, r0, r1
 800822a:	ec43 2b10 	vmov	d0, r2, r3
 800822e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008230:	42b7      	cmp	r7, r6
 8008232:	bf3a      	itte	cc
 8008234:	f1a5 0608 	subcc.w	r6, r5, #8
 8008238:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800823c:	2100      	movcs	r1, #0
 800823e:	380b      	subs	r0, #11
 8008240:	d015      	beq.n	800826e <__b2d+0x8e>
 8008242:	4084      	lsls	r4, r0
 8008244:	f1c0 0520 	rsb	r5, r0, #32
 8008248:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800824c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8008250:	42be      	cmp	r6, r7
 8008252:	fa21 fe05 	lsr.w	lr, r1, r5
 8008256:	ea44 030e 	orr.w	r3, r4, lr
 800825a:	bf8c      	ite	hi
 800825c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008260:	2400      	movls	r4, #0
 8008262:	fa01 f000 	lsl.w	r0, r1, r0
 8008266:	40ec      	lsrs	r4, r5
 8008268:	ea40 0204 	orr.w	r2, r0, r4
 800826c:	e7dd      	b.n	800822a <__b2d+0x4a>
 800826e:	ea44 030e 	orr.w	r3, r4, lr
 8008272:	460a      	mov	r2, r1
 8008274:	e7d9      	b.n	800822a <__b2d+0x4a>
 8008276:	bf00      	nop
 8008278:	3ff00000 	.word	0x3ff00000

0800827c <__d2b>:
 800827c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008280:	460e      	mov	r6, r1
 8008282:	2101      	movs	r1, #1
 8008284:	ec59 8b10 	vmov	r8, r9, d0
 8008288:	4615      	mov	r5, r2
 800828a:	f7ff fcc0 	bl	8007c0e <_Balloc>
 800828e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008292:	4607      	mov	r7, r0
 8008294:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008298:	bb34      	cbnz	r4, 80082e8 <__d2b+0x6c>
 800829a:	9301      	str	r3, [sp, #4]
 800829c:	f1b8 0f00 	cmp.w	r8, #0
 80082a0:	d027      	beq.n	80082f2 <__d2b+0x76>
 80082a2:	a802      	add	r0, sp, #8
 80082a4:	f840 8d08 	str.w	r8, [r0, #-8]!
 80082a8:	f7ff fd94 	bl	8007dd4 <__lo0bits>
 80082ac:	9900      	ldr	r1, [sp, #0]
 80082ae:	b1f0      	cbz	r0, 80082ee <__d2b+0x72>
 80082b0:	9a01      	ldr	r2, [sp, #4]
 80082b2:	f1c0 0320 	rsb	r3, r0, #32
 80082b6:	fa02 f303 	lsl.w	r3, r2, r3
 80082ba:	430b      	orrs	r3, r1
 80082bc:	40c2      	lsrs	r2, r0
 80082be:	617b      	str	r3, [r7, #20]
 80082c0:	9201      	str	r2, [sp, #4]
 80082c2:	9b01      	ldr	r3, [sp, #4]
 80082c4:	61bb      	str	r3, [r7, #24]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	bf14      	ite	ne
 80082ca:	2102      	movne	r1, #2
 80082cc:	2101      	moveq	r1, #1
 80082ce:	6139      	str	r1, [r7, #16]
 80082d0:	b1c4      	cbz	r4, 8008304 <__d2b+0x88>
 80082d2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80082d6:	4404      	add	r4, r0
 80082d8:	6034      	str	r4, [r6, #0]
 80082da:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80082de:	6028      	str	r0, [r5, #0]
 80082e0:	4638      	mov	r0, r7
 80082e2:	b003      	add	sp, #12
 80082e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082ec:	e7d5      	b.n	800829a <__d2b+0x1e>
 80082ee:	6179      	str	r1, [r7, #20]
 80082f0:	e7e7      	b.n	80082c2 <__d2b+0x46>
 80082f2:	a801      	add	r0, sp, #4
 80082f4:	f7ff fd6e 	bl	8007dd4 <__lo0bits>
 80082f8:	9b01      	ldr	r3, [sp, #4]
 80082fa:	617b      	str	r3, [r7, #20]
 80082fc:	2101      	movs	r1, #1
 80082fe:	6139      	str	r1, [r7, #16]
 8008300:	3020      	adds	r0, #32
 8008302:	e7e5      	b.n	80082d0 <__d2b+0x54>
 8008304:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008308:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800830c:	6030      	str	r0, [r6, #0]
 800830e:	6918      	ldr	r0, [r3, #16]
 8008310:	f7ff fd41 	bl	8007d96 <__hi0bits>
 8008314:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008318:	e7e1      	b.n	80082de <__d2b+0x62>

0800831a <__ratio>:
 800831a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800831e:	4688      	mov	r8, r1
 8008320:	4669      	mov	r1, sp
 8008322:	4681      	mov	r9, r0
 8008324:	f7ff ff5c 	bl	80081e0 <__b2d>
 8008328:	a901      	add	r1, sp, #4
 800832a:	4640      	mov	r0, r8
 800832c:	ec55 4b10 	vmov	r4, r5, d0
 8008330:	f7ff ff56 	bl	80081e0 <__b2d>
 8008334:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008338:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800833c:	1a9a      	subs	r2, r3, r2
 800833e:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8008342:	1acb      	subs	r3, r1, r3
 8008344:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8008348:	ec57 6b10 	vmov	r6, r7, d0
 800834c:	2b00      	cmp	r3, #0
 800834e:	bfd6      	itet	le
 8008350:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008354:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 8008358:	eb07 5703 	addle.w	r7, r7, r3, lsl #20
 800835c:	4632      	mov	r2, r6
 800835e:	463b      	mov	r3, r7
 8008360:	4620      	mov	r0, r4
 8008362:	4629      	mov	r1, r5
 8008364:	f7f8 fa7e 	bl	8000864 <__aeabi_ddiv>
 8008368:	ec41 0b10 	vmov	d0, r0, r1
 800836c:	b003      	add	sp, #12
 800836e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08008372 <__copybits>:
 8008372:	3901      	subs	r1, #1
 8008374:	b510      	push	{r4, lr}
 8008376:	1149      	asrs	r1, r1, #5
 8008378:	6914      	ldr	r4, [r2, #16]
 800837a:	3101      	adds	r1, #1
 800837c:	f102 0314 	add.w	r3, r2, #20
 8008380:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008384:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008388:	42a3      	cmp	r3, r4
 800838a:	4602      	mov	r2, r0
 800838c:	d303      	bcc.n	8008396 <__copybits+0x24>
 800838e:	2300      	movs	r3, #0
 8008390:	428a      	cmp	r2, r1
 8008392:	d305      	bcc.n	80083a0 <__copybits+0x2e>
 8008394:	bd10      	pop	{r4, pc}
 8008396:	f853 2b04 	ldr.w	r2, [r3], #4
 800839a:	f840 2b04 	str.w	r2, [r0], #4
 800839e:	e7f3      	b.n	8008388 <__copybits+0x16>
 80083a0:	f842 3b04 	str.w	r3, [r2], #4
 80083a4:	e7f4      	b.n	8008390 <__copybits+0x1e>

080083a6 <__any_on>:
 80083a6:	f100 0214 	add.w	r2, r0, #20
 80083aa:	6900      	ldr	r0, [r0, #16]
 80083ac:	114b      	asrs	r3, r1, #5
 80083ae:	4298      	cmp	r0, r3
 80083b0:	b510      	push	{r4, lr}
 80083b2:	db11      	blt.n	80083d8 <__any_on+0x32>
 80083b4:	dd0a      	ble.n	80083cc <__any_on+0x26>
 80083b6:	f011 011f 	ands.w	r1, r1, #31
 80083ba:	d007      	beq.n	80083cc <__any_on+0x26>
 80083bc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80083c0:	fa24 f001 	lsr.w	r0, r4, r1
 80083c4:	fa00 f101 	lsl.w	r1, r0, r1
 80083c8:	428c      	cmp	r4, r1
 80083ca:	d10b      	bne.n	80083e4 <__any_on+0x3e>
 80083cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d803      	bhi.n	80083dc <__any_on+0x36>
 80083d4:	2000      	movs	r0, #0
 80083d6:	bd10      	pop	{r4, pc}
 80083d8:	4603      	mov	r3, r0
 80083da:	e7f7      	b.n	80083cc <__any_on+0x26>
 80083dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80083e0:	2900      	cmp	r1, #0
 80083e2:	d0f5      	beq.n	80083d0 <__any_on+0x2a>
 80083e4:	2001      	movs	r0, #1
 80083e6:	bd10      	pop	{r4, pc}

080083e8 <_calloc_r>:
 80083e8:	b538      	push	{r3, r4, r5, lr}
 80083ea:	fb02 f401 	mul.w	r4, r2, r1
 80083ee:	4621      	mov	r1, r4
 80083f0:	f7fd fe82 	bl	80060f8 <_malloc_r>
 80083f4:	4605      	mov	r5, r0
 80083f6:	b118      	cbz	r0, 8008400 <_calloc_r+0x18>
 80083f8:	4622      	mov	r2, r4
 80083fa:	2100      	movs	r1, #0
 80083fc:	f000 f8f5 	bl	80085ea <memset>
 8008400:	4628      	mov	r0, r5
 8008402:	bd38      	pop	{r3, r4, r5, pc}

08008404 <siscanf>:
 8008404:	b40e      	push	{r1, r2, r3}
 8008406:	b530      	push	{r4, r5, lr}
 8008408:	b09c      	sub	sp, #112	; 0x70
 800840a:	ac1f      	add	r4, sp, #124	; 0x7c
 800840c:	f44f 7201 	mov.w	r2, #516	; 0x204
 8008410:	f854 5b04 	ldr.w	r5, [r4], #4
 8008414:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008418:	9002      	str	r0, [sp, #8]
 800841a:	9006      	str	r0, [sp, #24]
 800841c:	f7f7 fee2 	bl	80001e4 <strlen>
 8008420:	4b0b      	ldr	r3, [pc, #44]	; (8008450 <siscanf+0x4c>)
 8008422:	9003      	str	r0, [sp, #12]
 8008424:	9007      	str	r0, [sp, #28]
 8008426:	930b      	str	r3, [sp, #44]	; 0x2c
 8008428:	480a      	ldr	r0, [pc, #40]	; (8008454 <siscanf+0x50>)
 800842a:	9401      	str	r4, [sp, #4]
 800842c:	2300      	movs	r3, #0
 800842e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008430:	9314      	str	r3, [sp, #80]	; 0x50
 8008432:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008436:	f8ad 3016 	strh.w	r3, [sp, #22]
 800843a:	462a      	mov	r2, r5
 800843c:	4623      	mov	r3, r4
 800843e:	a902      	add	r1, sp, #8
 8008440:	6800      	ldr	r0, [r0, #0]
 8008442:	f000 f935 	bl	80086b0 <__ssvfiscanf_r>
 8008446:	b01c      	add	sp, #112	; 0x70
 8008448:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800844c:	b003      	add	sp, #12
 800844e:	4770      	bx	lr
 8008450:	08008459 	.word	0x08008459
 8008454:	20000108 	.word	0x20000108

08008458 <__seofread>:
 8008458:	2000      	movs	r0, #0
 800845a:	4770      	bx	lr

0800845c <strncmp>:
 800845c:	b510      	push	{r4, lr}
 800845e:	b16a      	cbz	r2, 800847c <strncmp+0x20>
 8008460:	3901      	subs	r1, #1
 8008462:	1884      	adds	r4, r0, r2
 8008464:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008468:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800846c:	4293      	cmp	r3, r2
 800846e:	d103      	bne.n	8008478 <strncmp+0x1c>
 8008470:	42a0      	cmp	r0, r4
 8008472:	d001      	beq.n	8008478 <strncmp+0x1c>
 8008474:	2b00      	cmp	r3, #0
 8008476:	d1f5      	bne.n	8008464 <strncmp+0x8>
 8008478:	1a98      	subs	r0, r3, r2
 800847a:	bd10      	pop	{r4, pc}
 800847c:	4610      	mov	r0, r2
 800847e:	bd10      	pop	{r4, pc}

08008480 <_strtoul_l.isra.0>:
 8008480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008484:	4680      	mov	r8, r0
 8008486:	4689      	mov	r9, r1
 8008488:	4692      	mov	sl, r2
 800848a:	461e      	mov	r6, r3
 800848c:	460f      	mov	r7, r1
 800848e:	463d      	mov	r5, r7
 8008490:	9808      	ldr	r0, [sp, #32]
 8008492:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008496:	f7ff fb87 	bl	8007ba8 <__locale_ctype_ptr_l>
 800849a:	4420      	add	r0, r4
 800849c:	7843      	ldrb	r3, [r0, #1]
 800849e:	f013 0308 	ands.w	r3, r3, #8
 80084a2:	d10a      	bne.n	80084ba <_strtoul_l.isra.0+0x3a>
 80084a4:	2c2d      	cmp	r4, #45	; 0x2d
 80084a6:	d10a      	bne.n	80084be <_strtoul_l.isra.0+0x3e>
 80084a8:	782c      	ldrb	r4, [r5, #0]
 80084aa:	2301      	movs	r3, #1
 80084ac:	1cbd      	adds	r5, r7, #2
 80084ae:	b15e      	cbz	r6, 80084c8 <_strtoul_l.isra.0+0x48>
 80084b0:	2e10      	cmp	r6, #16
 80084b2:	d113      	bne.n	80084dc <_strtoul_l.isra.0+0x5c>
 80084b4:	2c30      	cmp	r4, #48	; 0x30
 80084b6:	d009      	beq.n	80084cc <_strtoul_l.isra.0+0x4c>
 80084b8:	e010      	b.n	80084dc <_strtoul_l.isra.0+0x5c>
 80084ba:	462f      	mov	r7, r5
 80084bc:	e7e7      	b.n	800848e <_strtoul_l.isra.0+0xe>
 80084be:	2c2b      	cmp	r4, #43	; 0x2b
 80084c0:	bf04      	itt	eq
 80084c2:	782c      	ldrbeq	r4, [r5, #0]
 80084c4:	1cbd      	addeq	r5, r7, #2
 80084c6:	e7f2      	b.n	80084ae <_strtoul_l.isra.0+0x2e>
 80084c8:	2c30      	cmp	r4, #48	; 0x30
 80084ca:	d125      	bne.n	8008518 <_strtoul_l.isra.0+0x98>
 80084cc:	782a      	ldrb	r2, [r5, #0]
 80084ce:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80084d2:	2a58      	cmp	r2, #88	; 0x58
 80084d4:	d14a      	bne.n	800856c <_strtoul_l.isra.0+0xec>
 80084d6:	786c      	ldrb	r4, [r5, #1]
 80084d8:	2610      	movs	r6, #16
 80084da:	3502      	adds	r5, #2
 80084dc:	f04f 31ff 	mov.w	r1, #4294967295
 80084e0:	2700      	movs	r7, #0
 80084e2:	fbb1 f1f6 	udiv	r1, r1, r6
 80084e6:	fb06 fe01 	mul.w	lr, r6, r1
 80084ea:	ea6f 0e0e 	mvn.w	lr, lr
 80084ee:	4638      	mov	r0, r7
 80084f0:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 80084f4:	2a09      	cmp	r2, #9
 80084f6:	d811      	bhi.n	800851c <_strtoul_l.isra.0+0x9c>
 80084f8:	4614      	mov	r4, r2
 80084fa:	42a6      	cmp	r6, r4
 80084fc:	dd1d      	ble.n	800853a <_strtoul_l.isra.0+0xba>
 80084fe:	2f00      	cmp	r7, #0
 8008500:	db18      	blt.n	8008534 <_strtoul_l.isra.0+0xb4>
 8008502:	4281      	cmp	r1, r0
 8008504:	d316      	bcc.n	8008534 <_strtoul_l.isra.0+0xb4>
 8008506:	d101      	bne.n	800850c <_strtoul_l.isra.0+0x8c>
 8008508:	45a6      	cmp	lr, r4
 800850a:	db13      	blt.n	8008534 <_strtoul_l.isra.0+0xb4>
 800850c:	fb00 4006 	mla	r0, r0, r6, r4
 8008510:	2701      	movs	r7, #1
 8008512:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008516:	e7eb      	b.n	80084f0 <_strtoul_l.isra.0+0x70>
 8008518:	260a      	movs	r6, #10
 800851a:	e7df      	b.n	80084dc <_strtoul_l.isra.0+0x5c>
 800851c:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8008520:	2a19      	cmp	r2, #25
 8008522:	d801      	bhi.n	8008528 <_strtoul_l.isra.0+0xa8>
 8008524:	3c37      	subs	r4, #55	; 0x37
 8008526:	e7e8      	b.n	80084fa <_strtoul_l.isra.0+0x7a>
 8008528:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 800852c:	2a19      	cmp	r2, #25
 800852e:	d804      	bhi.n	800853a <_strtoul_l.isra.0+0xba>
 8008530:	3c57      	subs	r4, #87	; 0x57
 8008532:	e7e2      	b.n	80084fa <_strtoul_l.isra.0+0x7a>
 8008534:	f04f 37ff 	mov.w	r7, #4294967295
 8008538:	e7eb      	b.n	8008512 <_strtoul_l.isra.0+0x92>
 800853a:	2f00      	cmp	r7, #0
 800853c:	da09      	bge.n	8008552 <_strtoul_l.isra.0+0xd2>
 800853e:	2322      	movs	r3, #34	; 0x22
 8008540:	f8c8 3000 	str.w	r3, [r8]
 8008544:	f04f 30ff 	mov.w	r0, #4294967295
 8008548:	f1ba 0f00 	cmp.w	sl, #0
 800854c:	d107      	bne.n	800855e <_strtoul_l.isra.0+0xde>
 800854e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008552:	b103      	cbz	r3, 8008556 <_strtoul_l.isra.0+0xd6>
 8008554:	4240      	negs	r0, r0
 8008556:	f1ba 0f00 	cmp.w	sl, #0
 800855a:	d00c      	beq.n	8008576 <_strtoul_l.isra.0+0xf6>
 800855c:	b127      	cbz	r7, 8008568 <_strtoul_l.isra.0+0xe8>
 800855e:	3d01      	subs	r5, #1
 8008560:	f8ca 5000 	str.w	r5, [sl]
 8008564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008568:	464d      	mov	r5, r9
 800856a:	e7f9      	b.n	8008560 <_strtoul_l.isra.0+0xe0>
 800856c:	2430      	movs	r4, #48	; 0x30
 800856e:	2e00      	cmp	r6, #0
 8008570:	d1b4      	bne.n	80084dc <_strtoul_l.isra.0+0x5c>
 8008572:	2608      	movs	r6, #8
 8008574:	e7b2      	b.n	80084dc <_strtoul_l.isra.0+0x5c>
 8008576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800857c <_strtoul_r>:
 800857c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800857e:	4c06      	ldr	r4, [pc, #24]	; (8008598 <_strtoul_r+0x1c>)
 8008580:	4d06      	ldr	r5, [pc, #24]	; (800859c <_strtoul_r+0x20>)
 8008582:	6824      	ldr	r4, [r4, #0]
 8008584:	6a24      	ldr	r4, [r4, #32]
 8008586:	2c00      	cmp	r4, #0
 8008588:	bf08      	it	eq
 800858a:	462c      	moveq	r4, r5
 800858c:	9400      	str	r4, [sp, #0]
 800858e:	f7ff ff77 	bl	8008480 <_strtoul_l.isra.0>
 8008592:	b003      	add	sp, #12
 8008594:	bd30      	pop	{r4, r5, pc}
 8008596:	bf00      	nop
 8008598:	20000108 	.word	0x20000108
 800859c:	2000016c 	.word	0x2000016c

080085a0 <strtoul>:
 80085a0:	4b08      	ldr	r3, [pc, #32]	; (80085c4 <strtoul+0x24>)
 80085a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085a4:	681c      	ldr	r4, [r3, #0]
 80085a6:	4d08      	ldr	r5, [pc, #32]	; (80085c8 <strtoul+0x28>)
 80085a8:	6a23      	ldr	r3, [r4, #32]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	bf08      	it	eq
 80085ae:	462b      	moveq	r3, r5
 80085b0:	9300      	str	r3, [sp, #0]
 80085b2:	4613      	mov	r3, r2
 80085b4:	460a      	mov	r2, r1
 80085b6:	4601      	mov	r1, r0
 80085b8:	4620      	mov	r0, r4
 80085ba:	f7ff ff61 	bl	8008480 <_strtoul_l.isra.0>
 80085be:	b003      	add	sp, #12
 80085c0:	bd30      	pop	{r4, r5, pc}
 80085c2:	bf00      	nop
 80085c4:	20000108 	.word	0x20000108
 80085c8:	2000016c 	.word	0x2000016c

080085cc <__ascii_wctomb>:
 80085cc:	b149      	cbz	r1, 80085e2 <__ascii_wctomb+0x16>
 80085ce:	2aff      	cmp	r2, #255	; 0xff
 80085d0:	bf85      	ittet	hi
 80085d2:	238a      	movhi	r3, #138	; 0x8a
 80085d4:	6003      	strhi	r3, [r0, #0]
 80085d6:	700a      	strbls	r2, [r1, #0]
 80085d8:	f04f 30ff 	movhi.w	r0, #4294967295
 80085dc:	bf98      	it	ls
 80085de:	2001      	movls	r0, #1
 80085e0:	4770      	bx	lr
 80085e2:	4608      	mov	r0, r1
 80085e4:	4770      	bx	lr

080085e6 <__env_lock>:
 80085e6:	4770      	bx	lr

080085e8 <__env_unlock>:
 80085e8:	4770      	bx	lr

080085ea <memset>:
 80085ea:	4402      	add	r2, r0
 80085ec:	4603      	mov	r3, r0
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d100      	bne.n	80085f4 <memset+0xa>
 80085f2:	4770      	bx	lr
 80085f4:	f803 1b01 	strb.w	r1, [r3], #1
 80085f8:	e7f9      	b.n	80085ee <memset+0x4>

080085fa <_sungetc_r>:
 80085fa:	b538      	push	{r3, r4, r5, lr}
 80085fc:	1c4b      	adds	r3, r1, #1
 80085fe:	4614      	mov	r4, r2
 8008600:	d103      	bne.n	800860a <_sungetc_r+0x10>
 8008602:	f04f 35ff 	mov.w	r5, #4294967295
 8008606:	4628      	mov	r0, r5
 8008608:	bd38      	pop	{r3, r4, r5, pc}
 800860a:	8993      	ldrh	r3, [r2, #12]
 800860c:	f023 0320 	bic.w	r3, r3, #32
 8008610:	8193      	strh	r3, [r2, #12]
 8008612:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8008614:	6852      	ldr	r2, [r2, #4]
 8008616:	b2cd      	uxtb	r5, r1
 8008618:	b18b      	cbz	r3, 800863e <_sungetc_r+0x44>
 800861a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800861c:	429a      	cmp	r2, r3
 800861e:	da08      	bge.n	8008632 <_sungetc_r+0x38>
 8008620:	6823      	ldr	r3, [r4, #0]
 8008622:	1e5a      	subs	r2, r3, #1
 8008624:	6022      	str	r2, [r4, #0]
 8008626:	f803 5c01 	strb.w	r5, [r3, #-1]
 800862a:	6863      	ldr	r3, [r4, #4]
 800862c:	3301      	adds	r3, #1
 800862e:	6063      	str	r3, [r4, #4]
 8008630:	e7e9      	b.n	8008606 <_sungetc_r+0xc>
 8008632:	4621      	mov	r1, r4
 8008634:	f000 fbaa 	bl	8008d8c <__submore>
 8008638:	2800      	cmp	r0, #0
 800863a:	d0f1      	beq.n	8008620 <_sungetc_r+0x26>
 800863c:	e7e1      	b.n	8008602 <_sungetc_r+0x8>
 800863e:	6921      	ldr	r1, [r4, #16]
 8008640:	6823      	ldr	r3, [r4, #0]
 8008642:	b151      	cbz	r1, 800865a <_sungetc_r+0x60>
 8008644:	4299      	cmp	r1, r3
 8008646:	d208      	bcs.n	800865a <_sungetc_r+0x60>
 8008648:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800864c:	428d      	cmp	r5, r1
 800864e:	d104      	bne.n	800865a <_sungetc_r+0x60>
 8008650:	3b01      	subs	r3, #1
 8008652:	3201      	adds	r2, #1
 8008654:	6023      	str	r3, [r4, #0]
 8008656:	6062      	str	r2, [r4, #4]
 8008658:	e7d5      	b.n	8008606 <_sungetc_r+0xc>
 800865a:	63e3      	str	r3, [r4, #60]	; 0x3c
 800865c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008660:	6363      	str	r3, [r4, #52]	; 0x34
 8008662:	2303      	movs	r3, #3
 8008664:	63a3      	str	r3, [r4, #56]	; 0x38
 8008666:	4623      	mov	r3, r4
 8008668:	6422      	str	r2, [r4, #64]	; 0x40
 800866a:	f803 5f46 	strb.w	r5, [r3, #70]!
 800866e:	6023      	str	r3, [r4, #0]
 8008670:	2301      	movs	r3, #1
 8008672:	e7dc      	b.n	800862e <_sungetc_r+0x34>

08008674 <__ssrefill_r>:
 8008674:	b510      	push	{r4, lr}
 8008676:	460c      	mov	r4, r1
 8008678:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800867a:	b169      	cbz	r1, 8008698 <__ssrefill_r+0x24>
 800867c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008680:	4299      	cmp	r1, r3
 8008682:	d001      	beq.n	8008688 <__ssrefill_r+0x14>
 8008684:	f7fd fcea 	bl	800605c <_free_r>
 8008688:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800868a:	6063      	str	r3, [r4, #4]
 800868c:	2000      	movs	r0, #0
 800868e:	6360      	str	r0, [r4, #52]	; 0x34
 8008690:	b113      	cbz	r3, 8008698 <__ssrefill_r+0x24>
 8008692:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008694:	6023      	str	r3, [r4, #0]
 8008696:	bd10      	pop	{r4, pc}
 8008698:	6923      	ldr	r3, [r4, #16]
 800869a:	6023      	str	r3, [r4, #0]
 800869c:	2300      	movs	r3, #0
 800869e:	6063      	str	r3, [r4, #4]
 80086a0:	89a3      	ldrh	r3, [r4, #12]
 80086a2:	f043 0320 	orr.w	r3, r3, #32
 80086a6:	81a3      	strh	r3, [r4, #12]
 80086a8:	f04f 30ff 	mov.w	r0, #4294967295
 80086ac:	bd10      	pop	{r4, pc}
	...

080086b0 <__ssvfiscanf_r>:
 80086b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086b4:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 80086b8:	f10d 080c 	add.w	r8, sp, #12
 80086bc:	9301      	str	r3, [sp, #4]
 80086be:	2300      	movs	r3, #0
 80086c0:	9346      	str	r3, [sp, #280]	; 0x118
 80086c2:	9347      	str	r3, [sp, #284]	; 0x11c
 80086c4:	4ba0      	ldr	r3, [pc, #640]	; (8008948 <__ssvfiscanf_r+0x298>)
 80086c6:	93a2      	str	r3, [sp, #648]	; 0x288
 80086c8:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8008950 <__ssvfiscanf_r+0x2a0>
 80086cc:	4b9f      	ldr	r3, [pc, #636]	; (800894c <__ssvfiscanf_r+0x29c>)
 80086ce:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 80086d2:	4606      	mov	r6, r0
 80086d4:	460c      	mov	r4, r1
 80086d6:	93a3      	str	r3, [sp, #652]	; 0x28c
 80086d8:	4692      	mov	sl, r2
 80086da:	270a      	movs	r7, #10
 80086dc:	f89a 3000 	ldrb.w	r3, [sl]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	f000 812f 	beq.w	8008944 <__ssvfiscanf_r+0x294>
 80086e6:	f7ff fa63 	bl	8007bb0 <__locale_ctype_ptr>
 80086ea:	f89a b000 	ldrb.w	fp, [sl]
 80086ee:	4458      	add	r0, fp
 80086f0:	7843      	ldrb	r3, [r0, #1]
 80086f2:	f013 0308 	ands.w	r3, r3, #8
 80086f6:	d143      	bne.n	8008780 <__ssvfiscanf_r+0xd0>
 80086f8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80086fc:	f10a 0501 	add.w	r5, sl, #1
 8008700:	f040 8099 	bne.w	8008836 <__ssvfiscanf_r+0x186>
 8008704:	9345      	str	r3, [sp, #276]	; 0x114
 8008706:	9343      	str	r3, [sp, #268]	; 0x10c
 8008708:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800870c:	2b2a      	cmp	r3, #42	; 0x2a
 800870e:	d103      	bne.n	8008718 <__ssvfiscanf_r+0x68>
 8008710:	2310      	movs	r3, #16
 8008712:	9343      	str	r3, [sp, #268]	; 0x10c
 8008714:	f10a 0502 	add.w	r5, sl, #2
 8008718:	7829      	ldrb	r1, [r5, #0]
 800871a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800871e:	2a09      	cmp	r2, #9
 8008720:	46aa      	mov	sl, r5
 8008722:	f105 0501 	add.w	r5, r5, #1
 8008726:	d941      	bls.n	80087ac <__ssvfiscanf_r+0xfc>
 8008728:	2203      	movs	r2, #3
 800872a:	4889      	ldr	r0, [pc, #548]	; (8008950 <__ssvfiscanf_r+0x2a0>)
 800872c:	f7f7 fd68 	bl	8000200 <memchr>
 8008730:	b138      	cbz	r0, 8008742 <__ssvfiscanf_r+0x92>
 8008732:	eba0 0309 	sub.w	r3, r0, r9
 8008736:	2001      	movs	r0, #1
 8008738:	4098      	lsls	r0, r3
 800873a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800873c:	4318      	orrs	r0, r3
 800873e:	9043      	str	r0, [sp, #268]	; 0x10c
 8008740:	46aa      	mov	sl, r5
 8008742:	f89a 3000 	ldrb.w	r3, [sl]
 8008746:	2b67      	cmp	r3, #103	; 0x67
 8008748:	f10a 0501 	add.w	r5, sl, #1
 800874c:	d84a      	bhi.n	80087e4 <__ssvfiscanf_r+0x134>
 800874e:	2b65      	cmp	r3, #101	; 0x65
 8008750:	f080 80b7 	bcs.w	80088c2 <__ssvfiscanf_r+0x212>
 8008754:	2b47      	cmp	r3, #71	; 0x47
 8008756:	d82f      	bhi.n	80087b8 <__ssvfiscanf_r+0x108>
 8008758:	2b45      	cmp	r3, #69	; 0x45
 800875a:	f080 80b2 	bcs.w	80088c2 <__ssvfiscanf_r+0x212>
 800875e:	2b00      	cmp	r3, #0
 8008760:	f000 8082 	beq.w	8008868 <__ssvfiscanf_r+0x1b8>
 8008764:	2b25      	cmp	r3, #37	; 0x25
 8008766:	d066      	beq.n	8008836 <__ssvfiscanf_r+0x186>
 8008768:	2303      	movs	r3, #3
 800876a:	9349      	str	r3, [sp, #292]	; 0x124
 800876c:	9744      	str	r7, [sp, #272]	; 0x110
 800876e:	e045      	b.n	80087fc <__ssvfiscanf_r+0x14c>
 8008770:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8008772:	3101      	adds	r1, #1
 8008774:	9147      	str	r1, [sp, #284]	; 0x11c
 8008776:	6861      	ldr	r1, [r4, #4]
 8008778:	3301      	adds	r3, #1
 800877a:	3901      	subs	r1, #1
 800877c:	6061      	str	r1, [r4, #4]
 800877e:	6023      	str	r3, [r4, #0]
 8008780:	6863      	ldr	r3, [r4, #4]
 8008782:	2b00      	cmp	r3, #0
 8008784:	dd0b      	ble.n	800879e <__ssvfiscanf_r+0xee>
 8008786:	f7ff fa13 	bl	8007bb0 <__locale_ctype_ptr>
 800878a:	6823      	ldr	r3, [r4, #0]
 800878c:	7819      	ldrb	r1, [r3, #0]
 800878e:	4408      	add	r0, r1
 8008790:	7841      	ldrb	r1, [r0, #1]
 8008792:	070d      	lsls	r5, r1, #28
 8008794:	d4ec      	bmi.n	8008770 <__ssvfiscanf_r+0xc0>
 8008796:	f10a 0501 	add.w	r5, sl, #1
 800879a:	46aa      	mov	sl, r5
 800879c:	e79e      	b.n	80086dc <__ssvfiscanf_r+0x2c>
 800879e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80087a0:	4621      	mov	r1, r4
 80087a2:	4630      	mov	r0, r6
 80087a4:	4798      	blx	r3
 80087a6:	2800      	cmp	r0, #0
 80087a8:	d0ed      	beq.n	8008786 <__ssvfiscanf_r+0xd6>
 80087aa:	e7f4      	b.n	8008796 <__ssvfiscanf_r+0xe6>
 80087ac:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80087ae:	fb07 1303 	mla	r3, r7, r3, r1
 80087b2:	3b30      	subs	r3, #48	; 0x30
 80087b4:	9345      	str	r3, [sp, #276]	; 0x114
 80087b6:	e7af      	b.n	8008718 <__ssvfiscanf_r+0x68>
 80087b8:	2b5b      	cmp	r3, #91	; 0x5b
 80087ba:	d061      	beq.n	8008880 <__ssvfiscanf_r+0x1d0>
 80087bc:	d80c      	bhi.n	80087d8 <__ssvfiscanf_r+0x128>
 80087be:	2b58      	cmp	r3, #88	; 0x58
 80087c0:	d1d2      	bne.n	8008768 <__ssvfiscanf_r+0xb8>
 80087c2:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80087c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087c8:	9243      	str	r2, [sp, #268]	; 0x10c
 80087ca:	2210      	movs	r2, #16
 80087cc:	9244      	str	r2, [sp, #272]	; 0x110
 80087ce:	2b6f      	cmp	r3, #111	; 0x6f
 80087d0:	bfb4      	ite	lt
 80087d2:	2303      	movlt	r3, #3
 80087d4:	2304      	movge	r3, #4
 80087d6:	e010      	b.n	80087fa <__ssvfiscanf_r+0x14a>
 80087d8:	2b63      	cmp	r3, #99	; 0x63
 80087da:	d05c      	beq.n	8008896 <__ssvfiscanf_r+0x1e6>
 80087dc:	2b64      	cmp	r3, #100	; 0x64
 80087de:	d1c3      	bne.n	8008768 <__ssvfiscanf_r+0xb8>
 80087e0:	9744      	str	r7, [sp, #272]	; 0x110
 80087e2:	e7f4      	b.n	80087ce <__ssvfiscanf_r+0x11e>
 80087e4:	2b70      	cmp	r3, #112	; 0x70
 80087e6:	d042      	beq.n	800886e <__ssvfiscanf_r+0x1be>
 80087e8:	d81d      	bhi.n	8008826 <__ssvfiscanf_r+0x176>
 80087ea:	2b6e      	cmp	r3, #110	; 0x6e
 80087ec:	d059      	beq.n	80088a2 <__ssvfiscanf_r+0x1f2>
 80087ee:	d843      	bhi.n	8008878 <__ssvfiscanf_r+0x1c8>
 80087f0:	2b69      	cmp	r3, #105	; 0x69
 80087f2:	d1b9      	bne.n	8008768 <__ssvfiscanf_r+0xb8>
 80087f4:	2300      	movs	r3, #0
 80087f6:	9344      	str	r3, [sp, #272]	; 0x110
 80087f8:	2303      	movs	r3, #3
 80087fa:	9349      	str	r3, [sp, #292]	; 0x124
 80087fc:	6863      	ldr	r3, [r4, #4]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	dd61      	ble.n	80088c6 <__ssvfiscanf_r+0x216>
 8008802:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008804:	0659      	lsls	r1, r3, #25
 8008806:	d56f      	bpl.n	80088e8 <__ssvfiscanf_r+0x238>
 8008808:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800880a:	2b02      	cmp	r3, #2
 800880c:	dc7c      	bgt.n	8008908 <__ssvfiscanf_r+0x258>
 800880e:	ab01      	add	r3, sp, #4
 8008810:	4622      	mov	r2, r4
 8008812:	a943      	add	r1, sp, #268	; 0x10c
 8008814:	4630      	mov	r0, r6
 8008816:	f000 f89f 	bl	8008958 <_scanf_chars>
 800881a:	2801      	cmp	r0, #1
 800881c:	f000 8092 	beq.w	8008944 <__ssvfiscanf_r+0x294>
 8008820:	2802      	cmp	r0, #2
 8008822:	d1ba      	bne.n	800879a <__ssvfiscanf_r+0xea>
 8008824:	e01d      	b.n	8008862 <__ssvfiscanf_r+0x1b2>
 8008826:	2b75      	cmp	r3, #117	; 0x75
 8008828:	d0da      	beq.n	80087e0 <__ssvfiscanf_r+0x130>
 800882a:	2b78      	cmp	r3, #120	; 0x78
 800882c:	d0c9      	beq.n	80087c2 <__ssvfiscanf_r+0x112>
 800882e:	2b73      	cmp	r3, #115	; 0x73
 8008830:	d19a      	bne.n	8008768 <__ssvfiscanf_r+0xb8>
 8008832:	2302      	movs	r3, #2
 8008834:	e7e1      	b.n	80087fa <__ssvfiscanf_r+0x14a>
 8008836:	6863      	ldr	r3, [r4, #4]
 8008838:	2b00      	cmp	r3, #0
 800883a:	dd0c      	ble.n	8008856 <__ssvfiscanf_r+0x1a6>
 800883c:	6823      	ldr	r3, [r4, #0]
 800883e:	781a      	ldrb	r2, [r3, #0]
 8008840:	4593      	cmp	fp, r2
 8008842:	d17f      	bne.n	8008944 <__ssvfiscanf_r+0x294>
 8008844:	3301      	adds	r3, #1
 8008846:	6862      	ldr	r2, [r4, #4]
 8008848:	6023      	str	r3, [r4, #0]
 800884a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800884c:	3a01      	subs	r2, #1
 800884e:	3301      	adds	r3, #1
 8008850:	6062      	str	r2, [r4, #4]
 8008852:	9347      	str	r3, [sp, #284]	; 0x11c
 8008854:	e7a1      	b.n	800879a <__ssvfiscanf_r+0xea>
 8008856:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008858:	4621      	mov	r1, r4
 800885a:	4630      	mov	r0, r6
 800885c:	4798      	blx	r3
 800885e:	2800      	cmp	r0, #0
 8008860:	d0ec      	beq.n	800883c <__ssvfiscanf_r+0x18c>
 8008862:	9846      	ldr	r0, [sp, #280]	; 0x118
 8008864:	2800      	cmp	r0, #0
 8008866:	d163      	bne.n	8008930 <__ssvfiscanf_r+0x280>
 8008868:	f04f 30ff 	mov.w	r0, #4294967295
 800886c:	e066      	b.n	800893c <__ssvfiscanf_r+0x28c>
 800886e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8008870:	f042 0220 	orr.w	r2, r2, #32
 8008874:	9243      	str	r2, [sp, #268]	; 0x10c
 8008876:	e7a4      	b.n	80087c2 <__ssvfiscanf_r+0x112>
 8008878:	2308      	movs	r3, #8
 800887a:	9344      	str	r3, [sp, #272]	; 0x110
 800887c:	2304      	movs	r3, #4
 800887e:	e7bc      	b.n	80087fa <__ssvfiscanf_r+0x14a>
 8008880:	4629      	mov	r1, r5
 8008882:	4640      	mov	r0, r8
 8008884:	f000 f9c0 	bl	8008c08 <__sccl>
 8008888:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800888a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800888e:	9343      	str	r3, [sp, #268]	; 0x10c
 8008890:	4605      	mov	r5, r0
 8008892:	2301      	movs	r3, #1
 8008894:	e7b1      	b.n	80087fa <__ssvfiscanf_r+0x14a>
 8008896:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800889c:	9343      	str	r3, [sp, #268]	; 0x10c
 800889e:	2300      	movs	r3, #0
 80088a0:	e7ab      	b.n	80087fa <__ssvfiscanf_r+0x14a>
 80088a2:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80088a4:	06d0      	lsls	r0, r2, #27
 80088a6:	f53f af78 	bmi.w	800879a <__ssvfiscanf_r+0xea>
 80088aa:	f012 0f01 	tst.w	r2, #1
 80088ae:	9a01      	ldr	r2, [sp, #4]
 80088b0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80088b2:	f102 0104 	add.w	r1, r2, #4
 80088b6:	9101      	str	r1, [sp, #4]
 80088b8:	6812      	ldr	r2, [r2, #0]
 80088ba:	bf14      	ite	ne
 80088bc:	8013      	strhne	r3, [r2, #0]
 80088be:	6013      	streq	r3, [r2, #0]
 80088c0:	e76b      	b.n	800879a <__ssvfiscanf_r+0xea>
 80088c2:	2305      	movs	r3, #5
 80088c4:	e799      	b.n	80087fa <__ssvfiscanf_r+0x14a>
 80088c6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80088c8:	4621      	mov	r1, r4
 80088ca:	4630      	mov	r0, r6
 80088cc:	4798      	blx	r3
 80088ce:	2800      	cmp	r0, #0
 80088d0:	d097      	beq.n	8008802 <__ssvfiscanf_r+0x152>
 80088d2:	e7c6      	b.n	8008862 <__ssvfiscanf_r+0x1b2>
 80088d4:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 80088d6:	3201      	adds	r2, #1
 80088d8:	9247      	str	r2, [sp, #284]	; 0x11c
 80088da:	6862      	ldr	r2, [r4, #4]
 80088dc:	3a01      	subs	r2, #1
 80088de:	2a00      	cmp	r2, #0
 80088e0:	6062      	str	r2, [r4, #4]
 80088e2:	dd0a      	ble.n	80088fa <__ssvfiscanf_r+0x24a>
 80088e4:	3301      	adds	r3, #1
 80088e6:	6023      	str	r3, [r4, #0]
 80088e8:	f7ff f962 	bl	8007bb0 <__locale_ctype_ptr>
 80088ec:	6823      	ldr	r3, [r4, #0]
 80088ee:	781a      	ldrb	r2, [r3, #0]
 80088f0:	4410      	add	r0, r2
 80088f2:	7842      	ldrb	r2, [r0, #1]
 80088f4:	0712      	lsls	r2, r2, #28
 80088f6:	d4ed      	bmi.n	80088d4 <__ssvfiscanf_r+0x224>
 80088f8:	e786      	b.n	8008808 <__ssvfiscanf_r+0x158>
 80088fa:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80088fc:	4621      	mov	r1, r4
 80088fe:	4630      	mov	r0, r6
 8008900:	4798      	blx	r3
 8008902:	2800      	cmp	r0, #0
 8008904:	d0f0      	beq.n	80088e8 <__ssvfiscanf_r+0x238>
 8008906:	e7ac      	b.n	8008862 <__ssvfiscanf_r+0x1b2>
 8008908:	2b04      	cmp	r3, #4
 800890a:	dc06      	bgt.n	800891a <__ssvfiscanf_r+0x26a>
 800890c:	ab01      	add	r3, sp, #4
 800890e:	4622      	mov	r2, r4
 8008910:	a943      	add	r1, sp, #268	; 0x10c
 8008912:	4630      	mov	r0, r6
 8008914:	f000 f884 	bl	8008a20 <_scanf_i>
 8008918:	e77f      	b.n	800881a <__ssvfiscanf_r+0x16a>
 800891a:	4b0e      	ldr	r3, [pc, #56]	; (8008954 <__ssvfiscanf_r+0x2a4>)
 800891c:	2b00      	cmp	r3, #0
 800891e:	f43f af3c 	beq.w	800879a <__ssvfiscanf_r+0xea>
 8008922:	ab01      	add	r3, sp, #4
 8008924:	4622      	mov	r2, r4
 8008926:	a943      	add	r1, sp, #268	; 0x10c
 8008928:	4630      	mov	r0, r6
 800892a:	f3af 8000 	nop.w
 800892e:	e774      	b.n	800881a <__ssvfiscanf_r+0x16a>
 8008930:	89a3      	ldrh	r3, [r4, #12]
 8008932:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008936:	bf18      	it	ne
 8008938:	f04f 30ff 	movne.w	r0, #4294967295
 800893c:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 8008940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008944:	9846      	ldr	r0, [sp, #280]	; 0x118
 8008946:	e7f9      	b.n	800893c <__ssvfiscanf_r+0x28c>
 8008948:	080085fb 	.word	0x080085fb
 800894c:	08008675 	.word	0x08008675
 8008950:	0800985d 	.word	0x0800985d
 8008954:	00000000 	.word	0x00000000

08008958 <_scanf_chars>:
 8008958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800895c:	4615      	mov	r5, r2
 800895e:	688a      	ldr	r2, [r1, #8]
 8008960:	4680      	mov	r8, r0
 8008962:	460c      	mov	r4, r1
 8008964:	b932      	cbnz	r2, 8008974 <_scanf_chars+0x1c>
 8008966:	698a      	ldr	r2, [r1, #24]
 8008968:	2a00      	cmp	r2, #0
 800896a:	bf0c      	ite	eq
 800896c:	2201      	moveq	r2, #1
 800896e:	f04f 32ff 	movne.w	r2, #4294967295
 8008972:	608a      	str	r2, [r1, #8]
 8008974:	6822      	ldr	r2, [r4, #0]
 8008976:	06d1      	lsls	r1, r2, #27
 8008978:	bf5f      	itttt	pl
 800897a:	681a      	ldrpl	r2, [r3, #0]
 800897c:	1d11      	addpl	r1, r2, #4
 800897e:	6019      	strpl	r1, [r3, #0]
 8008980:	6817      	ldrpl	r7, [r2, #0]
 8008982:	2600      	movs	r6, #0
 8008984:	69a3      	ldr	r3, [r4, #24]
 8008986:	b1db      	cbz	r3, 80089c0 <_scanf_chars+0x68>
 8008988:	2b01      	cmp	r3, #1
 800898a:	d107      	bne.n	800899c <_scanf_chars+0x44>
 800898c:	682b      	ldr	r3, [r5, #0]
 800898e:	6962      	ldr	r2, [r4, #20]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	5cd3      	ldrb	r3, [r2, r3]
 8008994:	b9a3      	cbnz	r3, 80089c0 <_scanf_chars+0x68>
 8008996:	2e00      	cmp	r6, #0
 8008998:	d132      	bne.n	8008a00 <_scanf_chars+0xa8>
 800899a:	e006      	b.n	80089aa <_scanf_chars+0x52>
 800899c:	2b02      	cmp	r3, #2
 800899e:	d007      	beq.n	80089b0 <_scanf_chars+0x58>
 80089a0:	2e00      	cmp	r6, #0
 80089a2:	d12d      	bne.n	8008a00 <_scanf_chars+0xa8>
 80089a4:	69a3      	ldr	r3, [r4, #24]
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d12a      	bne.n	8008a00 <_scanf_chars+0xa8>
 80089aa:	2001      	movs	r0, #1
 80089ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089b0:	f7ff f8fe 	bl	8007bb0 <__locale_ctype_ptr>
 80089b4:	682b      	ldr	r3, [r5, #0]
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	4418      	add	r0, r3
 80089ba:	7843      	ldrb	r3, [r0, #1]
 80089bc:	071b      	lsls	r3, r3, #28
 80089be:	d4ef      	bmi.n	80089a0 <_scanf_chars+0x48>
 80089c0:	6823      	ldr	r3, [r4, #0]
 80089c2:	06da      	lsls	r2, r3, #27
 80089c4:	bf5e      	ittt	pl
 80089c6:	682b      	ldrpl	r3, [r5, #0]
 80089c8:	781b      	ldrbpl	r3, [r3, #0]
 80089ca:	703b      	strbpl	r3, [r7, #0]
 80089cc:	682a      	ldr	r2, [r5, #0]
 80089ce:	686b      	ldr	r3, [r5, #4]
 80089d0:	f102 0201 	add.w	r2, r2, #1
 80089d4:	602a      	str	r2, [r5, #0]
 80089d6:	68a2      	ldr	r2, [r4, #8]
 80089d8:	f103 33ff 	add.w	r3, r3, #4294967295
 80089dc:	f102 32ff 	add.w	r2, r2, #4294967295
 80089e0:	606b      	str	r3, [r5, #4]
 80089e2:	f106 0601 	add.w	r6, r6, #1
 80089e6:	bf58      	it	pl
 80089e8:	3701      	addpl	r7, #1
 80089ea:	60a2      	str	r2, [r4, #8]
 80089ec:	b142      	cbz	r2, 8008a00 <_scanf_chars+0xa8>
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	dcc8      	bgt.n	8008984 <_scanf_chars+0x2c>
 80089f2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80089f6:	4629      	mov	r1, r5
 80089f8:	4640      	mov	r0, r8
 80089fa:	4798      	blx	r3
 80089fc:	2800      	cmp	r0, #0
 80089fe:	d0c1      	beq.n	8008984 <_scanf_chars+0x2c>
 8008a00:	6823      	ldr	r3, [r4, #0]
 8008a02:	f013 0310 	ands.w	r3, r3, #16
 8008a06:	d105      	bne.n	8008a14 <_scanf_chars+0xbc>
 8008a08:	68e2      	ldr	r2, [r4, #12]
 8008a0a:	3201      	adds	r2, #1
 8008a0c:	60e2      	str	r2, [r4, #12]
 8008a0e:	69a2      	ldr	r2, [r4, #24]
 8008a10:	b102      	cbz	r2, 8008a14 <_scanf_chars+0xbc>
 8008a12:	703b      	strb	r3, [r7, #0]
 8008a14:	6923      	ldr	r3, [r4, #16]
 8008a16:	441e      	add	r6, r3
 8008a18:	6126      	str	r6, [r4, #16]
 8008a1a:	2000      	movs	r0, #0
 8008a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008a20 <_scanf_i>:
 8008a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a24:	469a      	mov	sl, r3
 8008a26:	4b74      	ldr	r3, [pc, #464]	; (8008bf8 <_scanf_i+0x1d8>)
 8008a28:	460c      	mov	r4, r1
 8008a2a:	4683      	mov	fp, r0
 8008a2c:	4616      	mov	r6, r2
 8008a2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008a32:	b087      	sub	sp, #28
 8008a34:	ab03      	add	r3, sp, #12
 8008a36:	68a7      	ldr	r7, [r4, #8]
 8008a38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008a3c:	4b6f      	ldr	r3, [pc, #444]	; (8008bfc <_scanf_i+0x1dc>)
 8008a3e:	69a1      	ldr	r1, [r4, #24]
 8008a40:	4a6f      	ldr	r2, [pc, #444]	; (8008c00 <_scanf_i+0x1e0>)
 8008a42:	2903      	cmp	r1, #3
 8008a44:	bf18      	it	ne
 8008a46:	461a      	movne	r2, r3
 8008a48:	1e7b      	subs	r3, r7, #1
 8008a4a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8008a4e:	bf84      	itt	hi
 8008a50:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008a54:	60a3      	strhi	r3, [r4, #8]
 8008a56:	6823      	ldr	r3, [r4, #0]
 8008a58:	9200      	str	r2, [sp, #0]
 8008a5a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008a5e:	bf88      	it	hi
 8008a60:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008a64:	f104 091c 	add.w	r9, r4, #28
 8008a68:	6023      	str	r3, [r4, #0]
 8008a6a:	bf8c      	ite	hi
 8008a6c:	197f      	addhi	r7, r7, r5
 8008a6e:	2700      	movls	r7, #0
 8008a70:	464b      	mov	r3, r9
 8008a72:	f04f 0800 	mov.w	r8, #0
 8008a76:	9301      	str	r3, [sp, #4]
 8008a78:	6831      	ldr	r1, [r6, #0]
 8008a7a:	ab03      	add	r3, sp, #12
 8008a7c:	2202      	movs	r2, #2
 8008a7e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008a82:	7809      	ldrb	r1, [r1, #0]
 8008a84:	f7f7 fbbc 	bl	8000200 <memchr>
 8008a88:	9b01      	ldr	r3, [sp, #4]
 8008a8a:	b328      	cbz	r0, 8008ad8 <_scanf_i+0xb8>
 8008a8c:	f1b8 0f01 	cmp.w	r8, #1
 8008a90:	d156      	bne.n	8008b40 <_scanf_i+0x120>
 8008a92:	6862      	ldr	r2, [r4, #4]
 8008a94:	b92a      	cbnz	r2, 8008aa2 <_scanf_i+0x82>
 8008a96:	2208      	movs	r2, #8
 8008a98:	6062      	str	r2, [r4, #4]
 8008a9a:	6822      	ldr	r2, [r4, #0]
 8008a9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008aa0:	6022      	str	r2, [r4, #0]
 8008aa2:	6822      	ldr	r2, [r4, #0]
 8008aa4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008aa8:	6022      	str	r2, [r4, #0]
 8008aaa:	68a2      	ldr	r2, [r4, #8]
 8008aac:	1e51      	subs	r1, r2, #1
 8008aae:	60a1      	str	r1, [r4, #8]
 8008ab0:	b192      	cbz	r2, 8008ad8 <_scanf_i+0xb8>
 8008ab2:	6832      	ldr	r2, [r6, #0]
 8008ab4:	1c51      	adds	r1, r2, #1
 8008ab6:	6031      	str	r1, [r6, #0]
 8008ab8:	7812      	ldrb	r2, [r2, #0]
 8008aba:	701a      	strb	r2, [r3, #0]
 8008abc:	1c5d      	adds	r5, r3, #1
 8008abe:	6873      	ldr	r3, [r6, #4]
 8008ac0:	3b01      	subs	r3, #1
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	6073      	str	r3, [r6, #4]
 8008ac6:	dc06      	bgt.n	8008ad6 <_scanf_i+0xb6>
 8008ac8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008acc:	4631      	mov	r1, r6
 8008ace:	4658      	mov	r0, fp
 8008ad0:	4798      	blx	r3
 8008ad2:	2800      	cmp	r0, #0
 8008ad4:	d176      	bne.n	8008bc4 <_scanf_i+0x1a4>
 8008ad6:	462b      	mov	r3, r5
 8008ad8:	f108 0801 	add.w	r8, r8, #1
 8008adc:	f1b8 0f03 	cmp.w	r8, #3
 8008ae0:	d1c9      	bne.n	8008a76 <_scanf_i+0x56>
 8008ae2:	6862      	ldr	r2, [r4, #4]
 8008ae4:	b90a      	cbnz	r2, 8008aea <_scanf_i+0xca>
 8008ae6:	220a      	movs	r2, #10
 8008ae8:	6062      	str	r2, [r4, #4]
 8008aea:	6862      	ldr	r2, [r4, #4]
 8008aec:	4945      	ldr	r1, [pc, #276]	; (8008c04 <_scanf_i+0x1e4>)
 8008aee:	6960      	ldr	r0, [r4, #20]
 8008af0:	9301      	str	r3, [sp, #4]
 8008af2:	1a89      	subs	r1, r1, r2
 8008af4:	f000 f888 	bl	8008c08 <__sccl>
 8008af8:	9b01      	ldr	r3, [sp, #4]
 8008afa:	f04f 0800 	mov.w	r8, #0
 8008afe:	461d      	mov	r5, r3
 8008b00:	68a3      	ldr	r3, [r4, #8]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d038      	beq.n	8008b78 <_scanf_i+0x158>
 8008b06:	6831      	ldr	r1, [r6, #0]
 8008b08:	6960      	ldr	r0, [r4, #20]
 8008b0a:	780a      	ldrb	r2, [r1, #0]
 8008b0c:	5c80      	ldrb	r0, [r0, r2]
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	d032      	beq.n	8008b78 <_scanf_i+0x158>
 8008b12:	2a30      	cmp	r2, #48	; 0x30
 8008b14:	6822      	ldr	r2, [r4, #0]
 8008b16:	d121      	bne.n	8008b5c <_scanf_i+0x13c>
 8008b18:	0510      	lsls	r0, r2, #20
 8008b1a:	d51f      	bpl.n	8008b5c <_scanf_i+0x13c>
 8008b1c:	f108 0801 	add.w	r8, r8, #1
 8008b20:	b117      	cbz	r7, 8008b28 <_scanf_i+0x108>
 8008b22:	3301      	adds	r3, #1
 8008b24:	3f01      	subs	r7, #1
 8008b26:	60a3      	str	r3, [r4, #8]
 8008b28:	6873      	ldr	r3, [r6, #4]
 8008b2a:	3b01      	subs	r3, #1
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	6073      	str	r3, [r6, #4]
 8008b30:	dd1b      	ble.n	8008b6a <_scanf_i+0x14a>
 8008b32:	6833      	ldr	r3, [r6, #0]
 8008b34:	3301      	adds	r3, #1
 8008b36:	6033      	str	r3, [r6, #0]
 8008b38:	68a3      	ldr	r3, [r4, #8]
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	60a3      	str	r3, [r4, #8]
 8008b3e:	e7df      	b.n	8008b00 <_scanf_i+0xe0>
 8008b40:	f1b8 0f02 	cmp.w	r8, #2
 8008b44:	d1b1      	bne.n	8008aaa <_scanf_i+0x8a>
 8008b46:	6822      	ldr	r2, [r4, #0]
 8008b48:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008b4c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008b50:	d1c2      	bne.n	8008ad8 <_scanf_i+0xb8>
 8008b52:	2110      	movs	r1, #16
 8008b54:	6061      	str	r1, [r4, #4]
 8008b56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b5a:	e7a5      	b.n	8008aa8 <_scanf_i+0x88>
 8008b5c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008b60:	6022      	str	r2, [r4, #0]
 8008b62:	780b      	ldrb	r3, [r1, #0]
 8008b64:	702b      	strb	r3, [r5, #0]
 8008b66:	3501      	adds	r5, #1
 8008b68:	e7de      	b.n	8008b28 <_scanf_i+0x108>
 8008b6a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008b6e:	4631      	mov	r1, r6
 8008b70:	4658      	mov	r0, fp
 8008b72:	4798      	blx	r3
 8008b74:	2800      	cmp	r0, #0
 8008b76:	d0df      	beq.n	8008b38 <_scanf_i+0x118>
 8008b78:	6823      	ldr	r3, [r4, #0]
 8008b7a:	05d9      	lsls	r1, r3, #23
 8008b7c:	d50c      	bpl.n	8008b98 <_scanf_i+0x178>
 8008b7e:	454d      	cmp	r5, r9
 8008b80:	d908      	bls.n	8008b94 <_scanf_i+0x174>
 8008b82:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008b86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b8a:	4632      	mov	r2, r6
 8008b8c:	4658      	mov	r0, fp
 8008b8e:	4798      	blx	r3
 8008b90:	1e6f      	subs	r7, r5, #1
 8008b92:	463d      	mov	r5, r7
 8008b94:	454d      	cmp	r5, r9
 8008b96:	d02c      	beq.n	8008bf2 <_scanf_i+0x1d2>
 8008b98:	6822      	ldr	r2, [r4, #0]
 8008b9a:	f012 0210 	ands.w	r2, r2, #16
 8008b9e:	d11e      	bne.n	8008bde <_scanf_i+0x1be>
 8008ba0:	702a      	strb	r2, [r5, #0]
 8008ba2:	6863      	ldr	r3, [r4, #4]
 8008ba4:	9e00      	ldr	r6, [sp, #0]
 8008ba6:	4649      	mov	r1, r9
 8008ba8:	4658      	mov	r0, fp
 8008baa:	47b0      	blx	r6
 8008bac:	6822      	ldr	r2, [r4, #0]
 8008bae:	f8da 3000 	ldr.w	r3, [sl]
 8008bb2:	f012 0f20 	tst.w	r2, #32
 8008bb6:	d008      	beq.n	8008bca <_scanf_i+0x1aa>
 8008bb8:	1d1a      	adds	r2, r3, #4
 8008bba:	f8ca 2000 	str.w	r2, [sl]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	6018      	str	r0, [r3, #0]
 8008bc2:	e009      	b.n	8008bd8 <_scanf_i+0x1b8>
 8008bc4:	f04f 0800 	mov.w	r8, #0
 8008bc8:	e7d6      	b.n	8008b78 <_scanf_i+0x158>
 8008bca:	07d2      	lsls	r2, r2, #31
 8008bcc:	d5f4      	bpl.n	8008bb8 <_scanf_i+0x198>
 8008bce:	1d1a      	adds	r2, r3, #4
 8008bd0:	f8ca 2000 	str.w	r2, [sl]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	8018      	strh	r0, [r3, #0]
 8008bd8:	68e3      	ldr	r3, [r4, #12]
 8008bda:	3301      	adds	r3, #1
 8008bdc:	60e3      	str	r3, [r4, #12]
 8008bde:	eba5 0509 	sub.w	r5, r5, r9
 8008be2:	44a8      	add	r8, r5
 8008be4:	6925      	ldr	r5, [r4, #16]
 8008be6:	4445      	add	r5, r8
 8008be8:	6125      	str	r5, [r4, #16]
 8008bea:	2000      	movs	r0, #0
 8008bec:	b007      	add	sp, #28
 8008bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bf2:	2001      	movs	r0, #1
 8008bf4:	e7fa      	b.n	8008bec <_scanf_i+0x1cc>
 8008bf6:	bf00      	nop
 8008bf8:	08008f78 	.word	0x08008f78
 8008bfc:	0800857d 	.word	0x0800857d
 8008c00:	08008d69 	.word	0x08008d69
 8008c04:	08009871 	.word	0x08009871

08008c08 <__sccl>:
 8008c08:	b570      	push	{r4, r5, r6, lr}
 8008c0a:	780b      	ldrb	r3, [r1, #0]
 8008c0c:	2b5e      	cmp	r3, #94	; 0x5e
 8008c0e:	bf13      	iteet	ne
 8008c10:	1c4a      	addne	r2, r1, #1
 8008c12:	1c8a      	addeq	r2, r1, #2
 8008c14:	784b      	ldrbeq	r3, [r1, #1]
 8008c16:	2100      	movne	r1, #0
 8008c18:	bf08      	it	eq
 8008c1a:	2101      	moveq	r1, #1
 8008c1c:	1e44      	subs	r4, r0, #1
 8008c1e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8008c22:	f804 1f01 	strb.w	r1, [r4, #1]!
 8008c26:	42a5      	cmp	r5, r4
 8008c28:	d1fb      	bne.n	8008c22 <__sccl+0x1a>
 8008c2a:	b913      	cbnz	r3, 8008c32 <__sccl+0x2a>
 8008c2c:	3a01      	subs	r2, #1
 8008c2e:	4610      	mov	r0, r2
 8008c30:	bd70      	pop	{r4, r5, r6, pc}
 8008c32:	f081 0401 	eor.w	r4, r1, #1
 8008c36:	54c4      	strb	r4, [r0, r3]
 8008c38:	4611      	mov	r1, r2
 8008c3a:	780d      	ldrb	r5, [r1, #0]
 8008c3c:	2d2d      	cmp	r5, #45	; 0x2d
 8008c3e:	f101 0201 	add.w	r2, r1, #1
 8008c42:	d006      	beq.n	8008c52 <__sccl+0x4a>
 8008c44:	2d5d      	cmp	r5, #93	; 0x5d
 8008c46:	d0f2      	beq.n	8008c2e <__sccl+0x26>
 8008c48:	b90d      	cbnz	r5, 8008c4e <__sccl+0x46>
 8008c4a:	460a      	mov	r2, r1
 8008c4c:	e7ef      	b.n	8008c2e <__sccl+0x26>
 8008c4e:	462b      	mov	r3, r5
 8008c50:	e7f1      	b.n	8008c36 <__sccl+0x2e>
 8008c52:	784e      	ldrb	r6, [r1, #1]
 8008c54:	2e5d      	cmp	r6, #93	; 0x5d
 8008c56:	d0fa      	beq.n	8008c4e <__sccl+0x46>
 8008c58:	42b3      	cmp	r3, r6
 8008c5a:	dcf8      	bgt.n	8008c4e <__sccl+0x46>
 8008c5c:	3102      	adds	r1, #2
 8008c5e:	3301      	adds	r3, #1
 8008c60:	429e      	cmp	r6, r3
 8008c62:	54c4      	strb	r4, [r0, r3]
 8008c64:	dcfb      	bgt.n	8008c5e <__sccl+0x56>
 8008c66:	e7e8      	b.n	8008c3a <__sccl+0x32>

08008c68 <_strtol_l.isra.0>:
 8008c68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c6c:	4680      	mov	r8, r0
 8008c6e:	4689      	mov	r9, r1
 8008c70:	4692      	mov	sl, r2
 8008c72:	461f      	mov	r7, r3
 8008c74:	468b      	mov	fp, r1
 8008c76:	465d      	mov	r5, fp
 8008c78:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008c7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c7e:	f7fe ff93 	bl	8007ba8 <__locale_ctype_ptr_l>
 8008c82:	4420      	add	r0, r4
 8008c84:	7846      	ldrb	r6, [r0, #1]
 8008c86:	f016 0608 	ands.w	r6, r6, #8
 8008c8a:	d10b      	bne.n	8008ca4 <_strtol_l.isra.0+0x3c>
 8008c8c:	2c2d      	cmp	r4, #45	; 0x2d
 8008c8e:	d10b      	bne.n	8008ca8 <_strtol_l.isra.0+0x40>
 8008c90:	782c      	ldrb	r4, [r5, #0]
 8008c92:	2601      	movs	r6, #1
 8008c94:	f10b 0502 	add.w	r5, fp, #2
 8008c98:	b167      	cbz	r7, 8008cb4 <_strtol_l.isra.0+0x4c>
 8008c9a:	2f10      	cmp	r7, #16
 8008c9c:	d114      	bne.n	8008cc8 <_strtol_l.isra.0+0x60>
 8008c9e:	2c30      	cmp	r4, #48	; 0x30
 8008ca0:	d00a      	beq.n	8008cb8 <_strtol_l.isra.0+0x50>
 8008ca2:	e011      	b.n	8008cc8 <_strtol_l.isra.0+0x60>
 8008ca4:	46ab      	mov	fp, r5
 8008ca6:	e7e6      	b.n	8008c76 <_strtol_l.isra.0+0xe>
 8008ca8:	2c2b      	cmp	r4, #43	; 0x2b
 8008caa:	bf04      	itt	eq
 8008cac:	782c      	ldrbeq	r4, [r5, #0]
 8008cae:	f10b 0502 	addeq.w	r5, fp, #2
 8008cb2:	e7f1      	b.n	8008c98 <_strtol_l.isra.0+0x30>
 8008cb4:	2c30      	cmp	r4, #48	; 0x30
 8008cb6:	d127      	bne.n	8008d08 <_strtol_l.isra.0+0xa0>
 8008cb8:	782b      	ldrb	r3, [r5, #0]
 8008cba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008cbe:	2b58      	cmp	r3, #88	; 0x58
 8008cc0:	d14b      	bne.n	8008d5a <_strtol_l.isra.0+0xf2>
 8008cc2:	786c      	ldrb	r4, [r5, #1]
 8008cc4:	2710      	movs	r7, #16
 8008cc6:	3502      	adds	r5, #2
 8008cc8:	2e00      	cmp	r6, #0
 8008cca:	bf0c      	ite	eq
 8008ccc:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008cd0:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	fbb1 fef7 	udiv	lr, r1, r7
 8008cda:	4610      	mov	r0, r2
 8008cdc:	fb07 1c1e 	mls	ip, r7, lr, r1
 8008ce0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008ce4:	2b09      	cmp	r3, #9
 8008ce6:	d811      	bhi.n	8008d0c <_strtol_l.isra.0+0xa4>
 8008ce8:	461c      	mov	r4, r3
 8008cea:	42a7      	cmp	r7, r4
 8008cec:	dd1d      	ble.n	8008d2a <_strtol_l.isra.0+0xc2>
 8008cee:	1c53      	adds	r3, r2, #1
 8008cf0:	d007      	beq.n	8008d02 <_strtol_l.isra.0+0x9a>
 8008cf2:	4586      	cmp	lr, r0
 8008cf4:	d316      	bcc.n	8008d24 <_strtol_l.isra.0+0xbc>
 8008cf6:	d101      	bne.n	8008cfc <_strtol_l.isra.0+0x94>
 8008cf8:	45a4      	cmp	ip, r4
 8008cfa:	db13      	blt.n	8008d24 <_strtol_l.isra.0+0xbc>
 8008cfc:	fb00 4007 	mla	r0, r0, r7, r4
 8008d00:	2201      	movs	r2, #1
 8008d02:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d06:	e7eb      	b.n	8008ce0 <_strtol_l.isra.0+0x78>
 8008d08:	270a      	movs	r7, #10
 8008d0a:	e7dd      	b.n	8008cc8 <_strtol_l.isra.0+0x60>
 8008d0c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008d10:	2b19      	cmp	r3, #25
 8008d12:	d801      	bhi.n	8008d18 <_strtol_l.isra.0+0xb0>
 8008d14:	3c37      	subs	r4, #55	; 0x37
 8008d16:	e7e8      	b.n	8008cea <_strtol_l.isra.0+0x82>
 8008d18:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008d1c:	2b19      	cmp	r3, #25
 8008d1e:	d804      	bhi.n	8008d2a <_strtol_l.isra.0+0xc2>
 8008d20:	3c57      	subs	r4, #87	; 0x57
 8008d22:	e7e2      	b.n	8008cea <_strtol_l.isra.0+0x82>
 8008d24:	f04f 32ff 	mov.w	r2, #4294967295
 8008d28:	e7eb      	b.n	8008d02 <_strtol_l.isra.0+0x9a>
 8008d2a:	1c53      	adds	r3, r2, #1
 8008d2c:	d108      	bne.n	8008d40 <_strtol_l.isra.0+0xd8>
 8008d2e:	2322      	movs	r3, #34	; 0x22
 8008d30:	f8c8 3000 	str.w	r3, [r8]
 8008d34:	4608      	mov	r0, r1
 8008d36:	f1ba 0f00 	cmp.w	sl, #0
 8008d3a:	d107      	bne.n	8008d4c <_strtol_l.isra.0+0xe4>
 8008d3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d40:	b106      	cbz	r6, 8008d44 <_strtol_l.isra.0+0xdc>
 8008d42:	4240      	negs	r0, r0
 8008d44:	f1ba 0f00 	cmp.w	sl, #0
 8008d48:	d00c      	beq.n	8008d64 <_strtol_l.isra.0+0xfc>
 8008d4a:	b122      	cbz	r2, 8008d56 <_strtol_l.isra.0+0xee>
 8008d4c:	3d01      	subs	r5, #1
 8008d4e:	f8ca 5000 	str.w	r5, [sl]
 8008d52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d56:	464d      	mov	r5, r9
 8008d58:	e7f9      	b.n	8008d4e <_strtol_l.isra.0+0xe6>
 8008d5a:	2430      	movs	r4, #48	; 0x30
 8008d5c:	2f00      	cmp	r7, #0
 8008d5e:	d1b3      	bne.n	8008cc8 <_strtol_l.isra.0+0x60>
 8008d60:	2708      	movs	r7, #8
 8008d62:	e7b1      	b.n	8008cc8 <_strtol_l.isra.0+0x60>
 8008d64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d68 <_strtol_r>:
 8008d68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d6a:	4c06      	ldr	r4, [pc, #24]	; (8008d84 <_strtol_r+0x1c>)
 8008d6c:	4d06      	ldr	r5, [pc, #24]	; (8008d88 <_strtol_r+0x20>)
 8008d6e:	6824      	ldr	r4, [r4, #0]
 8008d70:	6a24      	ldr	r4, [r4, #32]
 8008d72:	2c00      	cmp	r4, #0
 8008d74:	bf08      	it	eq
 8008d76:	462c      	moveq	r4, r5
 8008d78:	9400      	str	r4, [sp, #0]
 8008d7a:	f7ff ff75 	bl	8008c68 <_strtol_l.isra.0>
 8008d7e:	b003      	add	sp, #12
 8008d80:	bd30      	pop	{r4, r5, pc}
 8008d82:	bf00      	nop
 8008d84:	20000108 	.word	0x20000108
 8008d88:	2000016c 	.word	0x2000016c

08008d8c <__submore>:
 8008d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d90:	460c      	mov	r4, r1
 8008d92:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008d94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d98:	4299      	cmp	r1, r3
 8008d9a:	d11e      	bne.n	8008dda <__submore+0x4e>
 8008d9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008da0:	f7fd f9aa 	bl	80060f8 <_malloc_r>
 8008da4:	b918      	cbnz	r0, 8008dae <__submore+0x22>
 8008da6:	f04f 30ff 	mov.w	r0, #4294967295
 8008daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008db2:	63a3      	str	r3, [r4, #56]	; 0x38
 8008db4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008db8:	6360      	str	r0, [r4, #52]	; 0x34
 8008dba:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008dbe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008dc2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8008dc6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008dca:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8008dce:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008dd2:	6020      	str	r0, [r4, #0]
 8008dd4:	2000      	movs	r0, #0
 8008dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dda:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008ddc:	0077      	lsls	r7, r6, #1
 8008dde:	463a      	mov	r2, r7
 8008de0:	f000 f80f 	bl	8008e02 <_realloc_r>
 8008de4:	4605      	mov	r5, r0
 8008de6:	2800      	cmp	r0, #0
 8008de8:	d0dd      	beq.n	8008da6 <__submore+0x1a>
 8008dea:	eb00 0806 	add.w	r8, r0, r6
 8008dee:	4601      	mov	r1, r0
 8008df0:	4632      	mov	r2, r6
 8008df2:	4640      	mov	r0, r8
 8008df4:	f7fe fefe 	bl	8007bf4 <memcpy>
 8008df8:	f8c4 8000 	str.w	r8, [r4]
 8008dfc:	6365      	str	r5, [r4, #52]	; 0x34
 8008dfe:	63a7      	str	r7, [r4, #56]	; 0x38
 8008e00:	e7e8      	b.n	8008dd4 <__submore+0x48>

08008e02 <_realloc_r>:
 8008e02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e04:	4607      	mov	r7, r0
 8008e06:	4614      	mov	r4, r2
 8008e08:	460e      	mov	r6, r1
 8008e0a:	b921      	cbnz	r1, 8008e16 <_realloc_r+0x14>
 8008e0c:	4611      	mov	r1, r2
 8008e0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008e12:	f7fd b971 	b.w	80060f8 <_malloc_r>
 8008e16:	b922      	cbnz	r2, 8008e22 <_realloc_r+0x20>
 8008e18:	f7fd f920 	bl	800605c <_free_r>
 8008e1c:	4625      	mov	r5, r4
 8008e1e:	4628      	mov	r0, r5
 8008e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e22:	f000 f814 	bl	8008e4e <_malloc_usable_size_r>
 8008e26:	4284      	cmp	r4, r0
 8008e28:	d90f      	bls.n	8008e4a <_realloc_r+0x48>
 8008e2a:	4621      	mov	r1, r4
 8008e2c:	4638      	mov	r0, r7
 8008e2e:	f7fd f963 	bl	80060f8 <_malloc_r>
 8008e32:	4605      	mov	r5, r0
 8008e34:	2800      	cmp	r0, #0
 8008e36:	d0f2      	beq.n	8008e1e <_realloc_r+0x1c>
 8008e38:	4631      	mov	r1, r6
 8008e3a:	4622      	mov	r2, r4
 8008e3c:	f7fe feda 	bl	8007bf4 <memcpy>
 8008e40:	4631      	mov	r1, r6
 8008e42:	4638      	mov	r0, r7
 8008e44:	f7fd f90a 	bl	800605c <_free_r>
 8008e48:	e7e9      	b.n	8008e1e <_realloc_r+0x1c>
 8008e4a:	4635      	mov	r5, r6
 8008e4c:	e7e7      	b.n	8008e1e <_realloc_r+0x1c>

08008e4e <_malloc_usable_size_r>:
 8008e4e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8008e52:	2800      	cmp	r0, #0
 8008e54:	f1a0 0004 	sub.w	r0, r0, #4
 8008e58:	bfbc      	itt	lt
 8008e5a:	580b      	ldrlt	r3, [r1, r0]
 8008e5c:	18c0      	addlt	r0, r0, r3
 8008e5e:	4770      	bx	lr

08008e60 <_gettimeofday>:
 8008e60:	4b02      	ldr	r3, [pc, #8]	; (8008e6c <_gettimeofday+0xc>)
 8008e62:	2258      	movs	r2, #88	; 0x58
 8008e64:	601a      	str	r2, [r3, #0]
 8008e66:	f04f 30ff 	mov.w	r0, #4294967295
 8008e6a:	4770      	bx	lr
 8008e6c:	20001358 	.word	0x20001358
 8008e70:	3c3a2a22 	.word	0x3c3a2a22
 8008e74:	7f7c3f3e 	.word	0x7f7c3f3e
 8008e78:	00000000 	.word	0x00000000
 8008e7c:	3d3b2c2b 	.word	0x3d3b2c2b
 8008e80:	00005d5b 	.word	0x00005d5b
 8008e84:	2c2b2a22 	.word	0x2c2b2a22
 8008e88:	3c3b3a2e 	.word	0x3c3b3a2e
 8008e8c:	5b3f3e3d 	.word	0x5b3f3e3d
 8008e90:	007f7c5d 	.word	0x007f7c5d
 8008e94:	4d90feeb 	.word	0x4d90feeb
 8008e98:	534f4453 	.word	0x534f4453
 8008e9c:	00302e35 	.word	0x00302e35
 8008ea0:	4e204f4e 	.word	0x4e204f4e
 8008ea4:	20454d41 	.word	0x20454d41
 8008ea8:	46202020 	.word	0x46202020
 8008eac:	32335441 	.word	0x32335441
 8008eb0:	00202020 	.word	0x00202020
 8008eb4:	4e204f4e 	.word	0x4e204f4e
 8008eb8:	20454d41 	.word	0x20454d41
 8008ebc:	46202020 	.word	0x46202020
 8008ec0:	20205441 	.word	0x20205441
 8008ec4:	00202020 	.word	0x00202020
 8008ec8:	00004453 	.word	0x00004453
 8008ecc:	00425355 	.word	0x00425355
 8008ed0:	41524453 	.word	0x41524453
 8008ed4:	0000004d 	.word	0x0000004d
 8008ed8:	46495053 	.word	0x46495053
 8008edc:	4853414c 	.word	0x4853414c
 8008ee0:	00000000 	.word	0x00000000
 8008ee4:	31554652 	.word	0x31554652
 8008ee8:	00000000 	.word	0x00000000
 8008eec:	32554652 	.word	0x32554652
 8008ef0:	00000000 	.word	0x00000000
 8008ef4:	33554652 	.word	0x33554652
 8008ef8:	00000000 	.word	0x00000000
 8008efc:	52455355 	.word	0x52455355
 8008f00:	00000031 	.word	0x00000031
 8008f04:	52455355 	.word	0x52455355
 8008f08:	00000032 	.word	0x00000032
 8008f0c:	00000024 	.word	0x00000024
 8008f10:	004c4c47 	.word	0x004c4c47
 8008f14:	0041445a 	.word	0x0041445a
 8008f18:	00415347 	.word	0x00415347
 8008f1c:	00000000 	.word	0x00000000
 8008f20:	74736574 	.word	0x74736574
 8008f24:	7478742e 	.word	0x7478742e
 8008f28:	00000000 	.word	0x00000000
 8008f2c:	65636341 	.word	0x65636341
 8008f30:	6f72656c 	.word	0x6f72656c
 8008f34:	6574656d 	.word	0x6574656d
 8008f38:	61442072 	.word	0x61442072
 8008f3c:	52206174 	.word	0x52206174
 8008f40:	69646165 	.word	0x69646165
 8008f44:	3020676e 	.word	0x3020676e
 8008f48:	33322f39 	.word	0x33322f39
 8008f4c:	3130322f 	.word	0x3130322f
 8008f50:	000d0a39 	.word	0x000d0a39
 8008f54:	3a434341 	.word	0x3a434341
 8008f58:	78412009 	.word	0x78412009
 8008f5c:	79412009 	.word	0x79412009
 8008f60:	7a412009 	.word	0x7a412009
 8008f64:	52594720 	.word	0x52594720
 8008f68:	4720093a 	.word	0x4720093a
 8008f6c:	47200978 	.word	0x47200978
 8008f70:	47200979 	.word	0x47200979
 8008f74:	000d0a7a 	.word	0x000d0a7a
 8008f78:	08009873 	.word	0x08009873
 8008f7c:	08009876 	.word	0x08009876
 8008f80:	08009879 	.word	0x08009879

08008f84 <Tbl>:
 8008f84:	000020ac 0192201a 2026201e 20212020     . ... ... &   ! 
 8008f94:	203002c6 20390160 00000152 0000017d     ..0 `.9 R...}...
 8008fa4:	20180000 201c2019 2022201d 20142013     ... . . . " . . 
 8008fb4:	212202dc 203a0161 00000153 0178017e     .."!a.: S...~.x.
 8008fc4:	00a100a0 00a300a2 00a500a4 00a700a6     ................
 8008fd4:	00a900a8 00ab00aa 00ad00ac 00af00ae     ................
 8008fe4:	00b100b0 00b300b2 00b500b4 00b700b6     ................
 8008ff4:	00b900b8 00bb00ba 00bd00bc 00bf00be     ................
 8009004:	00c100c0 00c300c2 00c500c4 00c700c6     ................
 8009014:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
 8009024:	00d100d0 00d300d2 00d500d4 00d700d6     ................
 8009034:	00d900d8 00db00da 00dd00dc 00df00de     ................
 8009044:	00e100e0 00e300e2 00e500e4 00e700e6     ................
 8009054:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
 8009064:	00f100f0 00f300f2 00f500f4 00f700f6     ................
 8009074:	00f900f8 00fb00fa 00fd00fc 00ff00fe     ................

08009084 <tbl_lower.5451>:
 8009084:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
 8009094:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
 80090a4:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
 80090b4:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
 80090c4:	00e100e0 00e300e2 00e500e4 00e700e6     ................
 80090d4:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
 80090e4:	00f100f0 00f300f2 00f500f4 00f800f6     ................
 80090f4:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
 8009104:	01050103 01090107 010d010b 0111010f     ................
 8009114:	01150113 01190117 011d011b 0121011f     ..............!.
 8009124:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
 8009134:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
 8009144:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
 8009154:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
 8009164:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
 8009174:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
 8009184:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
 8009194:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
 80091a4:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
 80091b4:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
 80091c4:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
 80091d4:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
 80091e4:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
 80091f4:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
 8009204:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
 8009214:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
 8009224:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
 8009234:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
 8009244:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
 8009254:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

08009264 <tbl_upper.5452>:
 8009264:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
 8009274:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
 8009284:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
 8009294:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
 80092a4:	00c100c0 00c300c2 00c500c4 00c700c6     ................
 80092b4:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
 80092c4:	00d100d0 00d300d2 00d500d4 00d800d6     ................
 80092d4:	00da00d9 00dc00db 00de00dd 01000178     ............x...
 80092e4:	01040102 01080106 010c010a 0110010e     ................
 80092f4:	01140112 01180116 011c011a 0120011e     .............. .
 8009304:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
 8009314:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
 8009324:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
 8009334:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
 8009344:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
 8009354:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
 8009364:	03940393 03960395 03980397 039a0399     ................
 8009374:	039c039b 039e039d 03a0039f 03a303a1     ................
 8009384:	03a503a4 03a703a6 03a903a8 041003aa     ................
 8009394:	04120411 04140413 04160415 04180417     ................
 80093a4:	041a0419 041c041b 041e041d 0420041f     .............. .
 80093b4:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
 80093c4:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
 80093d4:	04030402 04050404 04070406 04090408     ................
 80093e4:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
 80093f4:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
 8009404:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
 8009414:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
 8009424:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
 8009434:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...

08009444 <ExCvt>:
 8009444:	83828180 87868584 8b8a8988 8f8e8d8c     ................
 8009454:	93929190 97969594 9bad9998 9fae9d8c     ................
 8009464:	a3a221a0 a7a6a5a4 abaaa9a8 afaeadac     .!..............
 8009474:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
 8009484:	c3c2c1c0 c7c6c5c4 cbcac9c8 cfcecdcc     ................
 8009494:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
 80094a4:	c3c2c1c0 c7c6c5c4 cbcac9c8 cfcecdcc     ................
 80094b4:	d3d2d1d0 f7d6d5d4 dbdad9d8 9fdedddc     ................

080094c4 <LfnOfs>:
 80094c4:	07050301 12100e09 1c181614 0000001e     ................

080094d4 <str.5913>:
 80094d4:	08008ec8 08008ecc 08008ed0 08008ed8     ................
 80094e4:	08008ee4 08008eec 08008ef4 08008efc     ................
 80094f4:	08008f04                                ....

080094f8 <DAYS_IN_MONTH>:
 80094f8:	0000001f 0000001c 0000001f 0000001e     ................
 8009508:	0000001f 0000001e 0000001f 0000001f     ................
 8009518:	0000001e 0000001f 0000001e 0000001f     ................

08009528 <_DAYS_BEFORE_MONTH>:
 8009528:	00000000 0000001f 0000003b 0000005a     ........;...Z...
 8009538:	00000078 00000097 000000b5 000000d4     x...............
 8009548:	000000f3 00000111 00000130 0000014e     ........0...N...

08009558 <__month_lengths>:
 8009558:	0000001f 0000001c 0000001f 0000001e     ................
 8009568:	0000001f 0000001e 0000001f 0000001f     ................
 8009578:	0000001e 0000001f 0000001e 0000001f     ................
 8009588:	0000001f 0000001d 0000001f 0000001e     ................
 8009598:	0000001f 0000001e 0000001f 0000001f     ................
 80095a8:	0000001e 0000001f 0000001e 0000001f     ................
 80095b8:	6900666e 7974696e 006e6100              nf.inity.an.

080095c4 <fpi.7257>:
 80095c4:	00000035 fffffbce 000003cb 00000001     5...............
 80095d4:	00000000                                ....

080095d8 <fpinan.7293>:
 80095d8:	00000034 fffffbce 000003cb 00000001     4...............
	...

080095f0 <tinytens>:
 80095f0:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 8009600:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 8009610:	64ac6f43 11680628 47005a54 2500544d     Co.d(.h.TZ.GMT.%
 8009620:	5e5b3031 2c392d30 255d2d2b 254d006e     10[^0-9,+-]%n.M%
 8009630:	6e257568 7568252e 252e6e25 6e257568     hu%n.%hu%n.%hu%n
 8009640:	68252f00 3a6e2575 25756825 68253a6e     ./%hu%n:%hu%n:%h
 8009650:	006e2575 4f500043 00584953 0000002e     u%n.C.POSIX.....

08009660 <__mprec_bigtens>:
 8009660:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 8009670:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 8009680:	7f73bf3c 75154fdd                       <.s..O.u

08009688 <__mprec_tens>:
 8009688:	00000000 3ff00000 00000000 40240000     .......?......$@
 8009698:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 80096a8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 80096b8:	00000000 412e8480 00000000 416312d0     .......A......cA
 80096c8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 80096d8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 80096e8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 80096f8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 8009708:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 8009718:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 8009728:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 8009738:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 8009748:	79d99db4 44ea7843                       ...yCx.D

08009750 <p05.7175>:
 8009750:	00000005 00000019 0000007d              ........}...

0800975c <_ctype_>:
 800975c:	20202000 20202020 28282020 20282828     .         ((((( 
 800976c:	20202020 20202020 20202020 20202020                     
 800977c:	10108820 10101010 10101010 10101010      ...............
 800978c:	04040410 04040404 10040404 10101010     ................
 800979c:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80097ac:	01010101 01010101 01010101 10101010     ................
 80097bc:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80097cc:	02020202 02020202 02020202 10101010     ................
 80097dc:	00000020 00000000 00000000 00000000      ...............
	...
 800985c:	4c6c6800 462d4100 38662d61 32313039     .hlL.A-Fa-f89012
 800986c:	36353433 2b005d37 3030002d 00587800     34567].+-.00.xX.

0800987c <__sf_fake_stderr>:
	...

0800989c <__sf_fake_stdin>:
	...

080098bc <__sf_fake_stdout>:
	...

080098dc <_init>:
 80098dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098de:	bf00      	nop
 80098e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098e2:	bc08      	pop	{r3}
 80098e4:	469e      	mov	lr, r3
 80098e6:	4770      	bx	lr

080098e8 <_fini>:
 80098e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ea:	bf00      	nop
 80098ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ee:	bc08      	pop	{r3}
 80098f0:	469e      	mov	lr, r3
 80098f2:	4770      	bx	lr
