
Test_Anemometer_F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c60  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08001de8  08001de8  00011de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08001dec  08001dec  00011dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000010  20000000  08001df0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  6 .bss          00000048  20000010  20000010  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000058  20000058  00020010  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00006512  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000f56  00000000  00000000  00026552  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000007d8  00000000  00000000  000274a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000730  00000000  00000000  00027c80  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002839  00000000  00000000  000283b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002b31  00000000  00000000  0002abe9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002d71a  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002298  00000000  00000000  0002d798  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001dd0 	.word	0x08001dd0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08001dd0 	.word	0x08001dd0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2f>:
 800095c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000960:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000964:	bf24      	itt	cs
 8000966:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800096a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800096e:	d90d      	bls.n	800098c <__aeabi_d2f+0x30>
 8000970:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000974:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000978:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800097c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000980:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000984:	bf08      	it	eq
 8000986:	f020 0001 	biceq.w	r0, r0, #1
 800098a:	4770      	bx	lr
 800098c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000990:	d121      	bne.n	80009d6 <__aeabi_d2f+0x7a>
 8000992:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000996:	bfbc      	itt	lt
 8000998:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800099c:	4770      	bxlt	lr
 800099e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009a6:	f1c2 0218 	rsb	r2, r2, #24
 80009aa:	f1c2 0c20 	rsb	ip, r2, #32
 80009ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80009b2:	fa20 f002 	lsr.w	r0, r0, r2
 80009b6:	bf18      	it	ne
 80009b8:	f040 0001 	orrne.w	r0, r0, #1
 80009bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009c8:	ea40 000c 	orr.w	r0, r0, ip
 80009cc:	fa23 f302 	lsr.w	r3, r3, r2
 80009d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009d4:	e7cc      	b.n	8000970 <__aeabi_d2f+0x14>
 80009d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009da:	d107      	bne.n	80009ec <__aeabi_d2f+0x90>
 80009dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e0:	bf1e      	ittt	ne
 80009e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ea:	4770      	bxne	lr
 80009ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000a04:	2300      	movs	r3, #0
 8000a06:	73fb      	strb	r3, [r7, #15]
 8000a08:	2300      	movs	r3, #0
 8000a0a:	73bb      	strb	r3, [r7, #14]
 8000a0c:	230f      	movs	r3, #15
 8000a0e:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	78db      	ldrb	r3, [r3, #3]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d039      	beq.n	8000a8c <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000a18:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <NVIC_Init+0xbc>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	43db      	mvns	r3, r3
 8000a1e:	0a1b      	lsrs	r3, r3, #8
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
 8000a2a:	f1c3 0304 	rsb	r3, r3, #4
 8000a2e:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000a30:	7b7a      	ldrb	r2, [r7, #13]
 8000a32:	7bfb      	ldrb	r3, [r7, #15]
 8000a34:	fa42 f303 	asr.w	r3, r2, r3
 8000a38:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	785b      	ldrb	r3, [r3, #1]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	7bbb      	ldrb	r3, [r7, #14]
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	789a      	ldrb	r2, [r3, #2]
 8000a4c:	7b7b      	ldrb	r3, [r7, #13]
 8000a4e:	4013      	ands	r3, r2
 8000a50:	b2da      	uxtb	r2, r3
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	011b      	lsls	r3, r3, #4
 8000a5c:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000a5e:	4a17      	ldr	r2, [pc, #92]	; (8000abc <NVIC_Init+0xc0>)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4413      	add	r3, r2
 8000a66:	7bfa      	ldrb	r2, [r7, #15]
 8000a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a6c:	4a13      	ldr	r2, [pc, #76]	; (8000abc <NVIC_Init+0xc0>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	095b      	lsrs	r3, r3, #5
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	f003 031f 	and.w	r3, r3, #31
 8000a80:	2101      	movs	r1, #1
 8000a82:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a86:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000a8a:	e00f      	b.n	8000aac <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a8c:	490b      	ldr	r1, [pc, #44]	; (8000abc <NVIC_Init+0xc0>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	095b      	lsrs	r3, r3, #5
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	f003 031f 	and.w	r3, r3, #31
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000aa4:	f100 0320 	add.w	r3, r0, #32
 8000aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000aac:	bf00      	nop
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	e000ed00 	.word	0xe000ed00
 8000abc:	e000e100 	.word	0xe000e100

08000ac0 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000ade:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ae2:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	791b      	ldrb	r3, [r3, #4]
 8000ae8:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000aee:	4313      	orrs	r3, r2
 8000af0:	68fa      	ldr	r2, [r7, #12]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	68fa      	ldr	r2, [r7, #12]
 8000afa:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <ADC_Init+0xa8>)
 8000b06:	4013      	ands	r3, r2
 8000b08:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000b12:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000b18:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	795b      	ldrb	r3, [r3, #5]
 8000b1e:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000b20:	4313      	orrs	r3, r2
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b32:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000b3a:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	7d1b      	ldrb	r3, [r3, #20]
 8000b40:	3b01      	subs	r3, #1
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	7afb      	ldrb	r3, [r7, #11]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000b4a:	7afb      	ldrb	r3, [r7, #11]
 8000b4c:	051b      	lsls	r3, r3, #20
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000b5a:	bf00      	nop
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	c0fff7fd 	.word	0xc0fff7fd

08000b6c <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	460b      	mov	r3, r1
 8000b76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b78:	78fb      	ldrb	r3, [r7, #3]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d006      	beq.n	8000b8c <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	f043 0201 	orr.w	r2, r3, #1
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8000b8a:	e005      	b.n	8000b98 <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	f023 0201 	bic.w	r2, r3, #1
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	609a      	str	r2, [r3, #8]
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	4608      	mov	r0, r1
 8000bae:	4611      	mov	r1, r2
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	70fb      	strb	r3, [r7, #3]
 8000bb6:	460b      	mov	r3, r1
 8000bb8:	70bb      	strb	r3, [r7, #2]
 8000bba:	4613      	mov	r3, r2
 8000bbc:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000bc6:	78fb      	ldrb	r3, [r7, #3]
 8000bc8:	2b09      	cmp	r3, #9
 8000bca:	d923      	bls.n	8000c14 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8000bd2:	78fb      	ldrb	r3, [r7, #3]
 8000bd4:	f1a3 020a 	sub.w	r2, r3, #10
 8000bd8:	4613      	mov	r3, r2
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	4413      	add	r3, r2
 8000bde:	2207      	movs	r2, #7
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	43db      	mvns	r3, r3
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	4013      	ands	r3, r2
 8000bee:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000bf0:	7879      	ldrb	r1, [r7, #1]
 8000bf2:	78fb      	ldrb	r3, [r7, #3]
 8000bf4:	f1a3 020a 	sub.w	r2, r3, #10
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	4413      	add	r3, r2
 8000bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000c02:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000c04:	68fa      	ldr	r2, [r7, #12]
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	e01e      	b.n	8000c52 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	691b      	ldr	r3, [r3, #16]
 8000c18:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8000c1a:	78fa      	ldrb	r2, [r7, #3]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	4413      	add	r3, r2
 8000c22:	2207      	movs	r2, #7
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	4013      	ands	r3, r2
 8000c32:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000c34:	7879      	ldrb	r1, [r7, #1]
 8000c36:	78fa      	ldrb	r2, [r7, #3]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	4413      	add	r3, r2
 8000c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c42:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000c44:	68fa      	ldr	r2, [r7, #12]
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000c52:	78bb      	ldrb	r3, [r7, #2]
 8000c54:	2b06      	cmp	r3, #6
 8000c56:	d821      	bhi.n	8000c9c <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c5c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8000c5e:	78bb      	ldrb	r3, [r7, #2]
 8000c60:	1e5a      	subs	r2, r3, #1
 8000c62:	4613      	mov	r3, r2
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	4413      	add	r3, r2
 8000c68:	221f      	movs	r2, #31
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	43db      	mvns	r3, r3
 8000c74:	68fa      	ldr	r2, [r7, #12]
 8000c76:	4013      	ands	r3, r2
 8000c78:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000c7a:	78f9      	ldrb	r1, [r7, #3]
 8000c7c:	78bb      	ldrb	r3, [r7, #2]
 8000c7e:	1e5a      	subs	r2, r3, #1
 8000c80:	4613      	mov	r3, r2
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4413      	add	r3, r2
 8000c86:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8a:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000c8c:	68fa      	ldr	r2, [r7, #12]
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000c9a:	e047      	b.n	8000d2c <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 8000c9c:	78bb      	ldrb	r3, [r7, #2]
 8000c9e:	2b0c      	cmp	r3, #12
 8000ca0:	d821      	bhi.n	8000ce6 <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8000ca8:	78bb      	ldrb	r3, [r7, #2]
 8000caa:	1fda      	subs	r2, r3, #7
 8000cac:	4613      	mov	r3, r2
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	4413      	add	r3, r2
 8000cb2:	221f      	movs	r2, #31
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000cc4:	78f9      	ldrb	r1, [r7, #3]
 8000cc6:	78bb      	ldrb	r3, [r7, #2]
 8000cc8:	1fda      	subs	r2, r3, #7
 8000cca:	4613      	mov	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4413      	add	r3, r2
 8000cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd4:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000ce4:	e022      	b.n	8000d2c <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cea:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000cec:	78bb      	ldrb	r3, [r7, #2]
 8000cee:	f1a3 020d 	sub.w	r2, r3, #13
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	4413      	add	r3, r2
 8000cf8:	221f      	movs	r2, #31
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	43db      	mvns	r3, r3
 8000d04:	68fa      	ldr	r2, [r7, #12]
 8000d06:	4013      	ands	r3, r2
 8000d08:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000d0a:	78f9      	ldrb	r1, [r7, #3]
 8000d0c:	78bb      	ldrb	r3, [r7, #2]
 8000d0e:	f1a3 020d 	sub.w	r2, r3, #13
 8000d12:	4613      	mov	r3, r2
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	4413      	add	r3, r2
 8000d18:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1c:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	68fa      	ldr	r2, [r7, #12]
 8000d2a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000d2c:	bf00      	nop
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d64:	b29b      	uxth	r3, r3
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b085      	sub	sp, #20
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	78fb      	ldrb	r3, [r7, #3]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d002      	beq.n	8000d94 <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	73fb      	strb	r3, [r7, #15]
 8000d92:	e001      	b.n	8000d98 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8000d94:	2300      	movs	r3, #0
 8000d96:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000da6:	b480      	push	{r7}
 8000da8:	b087      	sub	sp, #28
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
 8000dae:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	2300      	movs	r3, #0
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	e076      	b.n	8000eb0 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d165      	bne.n	8000eaa <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	2103      	movs	r1, #3
 8000de8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	401a      	ands	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	791b      	ldrb	r3, [r3, #4]
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	fa01 f303 	lsl.w	r3, r1, r3
 8000e06:	431a      	orrs	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	791b      	ldrb	r3, [r3, #4]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d003      	beq.n	8000e1c <GPIO_Init+0x76>
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	791b      	ldrb	r3, [r3, #4]
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d12e      	bne.n	8000e7a <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	689a      	ldr	r2, [r3, #8]
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	2103      	movs	r1, #3
 8000e26:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	401a      	ands	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	689a      	ldr	r2, [r3, #8]
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	795b      	ldrb	r3, [r3, #5]
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	fa01 f303 	lsl.w	r3, r1, r3
 8000e44:	431a      	orrs	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	685a      	ldr	r2, [r3, #4]
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	4619      	mov	r1, r3
 8000e54:	2301      	movs	r3, #1
 8000e56:	408b      	lsls	r3, r1
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	401a      	ands	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	683a      	ldr	r2, [r7, #0]
 8000e66:	7992      	ldrb	r2, [r2, #6]
 8000e68:	4611      	mov	r1, r2
 8000e6a:	697a      	ldr	r2, [r7, #20]
 8000e6c:	b292      	uxth	r2, r2
 8000e6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e72:	b292      	uxth	r2, r2
 8000e74:	431a      	orrs	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	68da      	ldr	r2, [r3, #12]
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	2103      	movs	r1, #3
 8000e86:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	401a      	ands	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	68da      	ldr	r2, [r3, #12]
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	79db      	ldrb	r3, [r3, #7]
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea4:	431a      	orrs	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	3301      	adds	r3, #1
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	2b0f      	cmp	r3, #15
 8000eb4:	d985      	bls.n	8000dc2 <GPIO_Init+0x1c>
    }
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	371c      	adds	r7, #28
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b085      	sub	sp, #20
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	460b      	mov	r3, r1
 8000ecc:	807b      	strh	r3, [r7, #2]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000eda:	787a      	ldrb	r2, [r7, #1]
 8000edc:	887b      	ldrh	r3, [r7, #2]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000eea:	887b      	ldrh	r3, [r7, #2]
 8000eec:	08db      	lsrs	r3, r3, #3
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	887b      	ldrh	r3, [r7, #2]
 8000ef4:	08db      	lsrs	r3, r3, #3
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	461a      	mov	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	3208      	adds	r2, #8
 8000efe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f02:	887b      	ldrh	r3, [r7, #2]
 8000f04:	f003 0307 	and.w	r3, r3, #7
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	210f      	movs	r1, #15
 8000f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	ea02 0103 	and.w	r1, r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f100 0208 	add.w	r2, r0, #8
 8000f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000f20:	887b      	ldrh	r3, [r7, #2]
 8000f22:	08db      	lsrs	r3, r3, #3
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	461a      	mov	r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3208      	adds	r2, #8
 8000f2c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000f36:	887b      	ldrh	r3, [r7, #2]
 8000f38:	08db      	lsrs	r3, r3, #3
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3208      	adds	r2, #8
 8000f42:	68b9      	ldr	r1, [r7, #8]
 8000f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b089      	sub	sp, #36	; 0x24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61bb      	str	r3, [r7, #24]
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	2300      	movs	r3, #0
 8000f66:	61fb      	str	r3, [r7, #28]
 8000f68:	2302      	movs	r3, #2
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	2302      	movs	r3, #2
 8000f72:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000f74:	4b47      	ldr	r3, [pc, #284]	; (8001094 <RCC_GetClocksFreq+0x140>)
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	f003 030c 	and.w	r3, r3, #12
 8000f7c:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	2b04      	cmp	r3, #4
 8000f82:	d007      	beq.n	8000f94 <RCC_GetClocksFreq+0x40>
 8000f84:	2b08      	cmp	r3, #8
 8000f86:	d009      	beq.n	8000f9c <RCC_GetClocksFreq+0x48>
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d13d      	bne.n	8001008 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a42      	ldr	r2, [pc, #264]	; (8001098 <RCC_GetClocksFreq+0x144>)
 8000f90:	601a      	str	r2, [r3, #0]
      break;
 8000f92:	e03d      	b.n	8001010 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a41      	ldr	r2, [pc, #260]	; (800109c <RCC_GetClocksFreq+0x148>)
 8000f98:	601a      	str	r2, [r3, #0]
      break;
 8000f9a:	e039      	b.n	8001010 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000f9c:	4b3d      	ldr	r3, [pc, #244]	; (8001094 <RCC_GetClocksFreq+0x140>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	0d9b      	lsrs	r3, r3, #22
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fa8:	4b3a      	ldr	r3, [pc, #232]	; (8001094 <RCC_GetClocksFreq+0x140>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fb0:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d00c      	beq.n	8000fd2 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000fb8:	4a38      	ldr	r2, [pc, #224]	; (800109c <RCC_GetClocksFreq+0x148>)
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc0:	4a34      	ldr	r2, [pc, #208]	; (8001094 <RCC_GetClocksFreq+0x140>)
 8000fc2:	6852      	ldr	r2, [r2, #4]
 8000fc4:	0992      	lsrs	r2, r2, #6
 8000fc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000fca:	fb02 f303 	mul.w	r3, r2, r3
 8000fce:	61fb      	str	r3, [r7, #28]
 8000fd0:	e00b      	b.n	8000fea <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000fd2:	4a31      	ldr	r2, [pc, #196]	; (8001098 <RCC_GetClocksFreq+0x144>)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fda:	4a2e      	ldr	r2, [pc, #184]	; (8001094 <RCC_GetClocksFreq+0x140>)
 8000fdc:	6852      	ldr	r2, [r2, #4]
 8000fde:	0992      	lsrs	r2, r2, #6
 8000fe0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000fe4:	fb02 f303 	mul.w	r3, r2, r3
 8000fe8:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000fea:	4b2a      	ldr	r3, [pc, #168]	; (8001094 <RCC_GetClocksFreq+0x140>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	0c1b      	lsrs	r3, r3, #16
 8000ff0:	f003 0303 	and.w	r3, r3, #3
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000ffa:	69fa      	ldr	r2, [r7, #28]
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	fbb2 f2f3 	udiv	r2, r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	601a      	str	r2, [r3, #0]
      break;
 8001006:	e003      	b.n	8001010 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a23      	ldr	r2, [pc, #140]	; (8001098 <RCC_GetClocksFreq+0x144>)
 800100c:	601a      	str	r2, [r3, #0]
      break;
 800100e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001010:	4b20      	ldr	r3, [pc, #128]	; (8001094 <RCC_GetClocksFreq+0x140>)
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001018:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	091b      	lsrs	r3, r3, #4
 800101e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001020:	4a1f      	ldr	r2, [pc, #124]	; (80010a0 <RCC_GetClocksFreq+0x14c>)
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	4413      	add	r3, r2
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	40da      	lsrs	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001038:	4b16      	ldr	r3, [pc, #88]	; (8001094 <RCC_GetClocksFreq+0x140>)
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001040:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	0a9b      	lsrs	r3, r3, #10
 8001046:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001048:	4a15      	ldr	r2, [pc, #84]	; (80010a0 <RCC_GetClocksFreq+0x14c>)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	4413      	add	r3, r2
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	b2db      	uxtb	r3, r3
 8001052:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	40da      	lsrs	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <RCC_GetClocksFreq+0x140>)
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001068:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	0b5b      	lsrs	r3, r3, #13
 800106e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001070:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <RCC_GetClocksFreq+0x14c>)
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	4413      	add	r3, r2
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	b2db      	uxtb	r3, r3
 800107a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	40da      	lsrs	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	60da      	str	r2, [r3, #12]
}
 8001088:	bf00      	nop
 800108a:	3724      	adds	r7, #36	; 0x24
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	40023800 	.word	0x40023800
 8001098:	00f42400 	.word	0x00f42400
 800109c:	007a1200 	.word	0x007a1200
 80010a0:	20000000 	.word	0x20000000

080010a4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80010b0:	78fb      	ldrb	r3, [r7, #3]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d006      	beq.n	80010c4 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80010b6:	490a      	ldr	r1, [pc, #40]	; (80010e0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80010b8:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80010ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4313      	orrs	r3, r2
 80010c0:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80010c2:	e006      	b.n	80010d2 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80010c4:	4906      	ldr	r1, [pc, #24]	; (80010e0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80010c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	4013      	ands	r3, r2
 80010d0:	630b      	str	r3, [r1, #48]	; 0x30
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40023800 	.word	0x40023800

080010e4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	460b      	mov	r3, r1
 80010ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80010f0:	78fb      	ldrb	r3, [r7, #3]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d006      	beq.n	8001104 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80010f6:	490a      	ldr	r1, [pc, #40]	; (8001120 <RCC_APB1PeriphClockCmd+0x3c>)
 80010f8:	4b09      	ldr	r3, [pc, #36]	; (8001120 <RCC_APB1PeriphClockCmd+0x3c>)
 80010fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4313      	orrs	r3, r2
 8001100:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001102:	e006      	b.n	8001112 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001104:	4906      	ldr	r1, [pc, #24]	; (8001120 <RCC_APB1PeriphClockCmd+0x3c>)
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <RCC_APB1PeriphClockCmd+0x3c>)
 8001108:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	43db      	mvns	r3, r3
 800110e:	4013      	ands	r3, r2
 8001110:	640b      	str	r3, [r1, #64]	; 0x40
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40023800 	.word	0x40023800

08001124 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d006      	beq.n	8001144 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001136:	490a      	ldr	r1, [pc, #40]	; (8001160 <RCC_APB2PeriphClockCmd+0x3c>)
 8001138:	4b09      	ldr	r3, [pc, #36]	; (8001160 <RCC_APB2PeriphClockCmd+0x3c>)
 800113a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4313      	orrs	r3, r2
 8001140:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001142:	e006      	b.n	8001152 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001144:	4906      	ldr	r1, [pc, #24]	; (8001160 <RCC_APB2PeriphClockCmd+0x3c>)
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <RCC_APB2PeriphClockCmd+0x3c>)
 8001148:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	43db      	mvns	r3, r3
 800114e:	4013      	ands	r3, r2
 8001150:	644b      	str	r3, [r1, #68]	; 0x44
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	40023800 	.word	0x40023800

08001164 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	881b      	ldrh	r3, [r3, #0]
 8001176:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a29      	ldr	r2, [pc, #164]	; (8001220 <TIM_TimeBaseInit+0xbc>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d013      	beq.n	80011a8 <TIM_TimeBaseInit+0x44>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a28      	ldr	r2, [pc, #160]	; (8001224 <TIM_TimeBaseInit+0xc0>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d00f      	beq.n	80011a8 <TIM_TimeBaseInit+0x44>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800118e:	d00b      	beq.n	80011a8 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a25      	ldr	r2, [pc, #148]	; (8001228 <TIM_TimeBaseInit+0xc4>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d007      	beq.n	80011a8 <TIM_TimeBaseInit+0x44>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a24      	ldr	r2, [pc, #144]	; (800122c <TIM_TimeBaseInit+0xc8>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d003      	beq.n	80011a8 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a23      	ldr	r2, [pc, #140]	; (8001230 <TIM_TimeBaseInit+0xcc>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d108      	bne.n	80011ba <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80011a8:	89fb      	ldrh	r3, [r7, #14]
 80011aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011ae:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	885a      	ldrh	r2, [r3, #2]
 80011b4:	89fb      	ldrh	r3, [r7, #14]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a1d      	ldr	r2, [pc, #116]	; (8001234 <TIM_TimeBaseInit+0xd0>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d00c      	beq.n	80011dc <TIM_TimeBaseInit+0x78>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a1c      	ldr	r2, [pc, #112]	; (8001238 <TIM_TimeBaseInit+0xd4>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d008      	beq.n	80011dc <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80011ca:	89fb      	ldrh	r3, [r7, #14]
 80011cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011d0:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	891a      	ldrh	r2, [r3, #8]
 80011d6:	89fb      	ldrh	r3, [r7, #14]
 80011d8:	4313      	orrs	r3, r2
 80011da:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	89fa      	ldrh	r2, [r7, #14]
 80011e0:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	881a      	ldrh	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <TIM_TimeBaseInit+0xbc>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d003      	beq.n	8001202 <TIM_TimeBaseInit+0x9e>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a09      	ldr	r2, [pc, #36]	; (8001224 <TIM_TimeBaseInit+0xc0>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d104      	bne.n	800120c <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	7a9b      	ldrb	r3, [r3, #10]
 8001206:	b29a      	uxth	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2201      	movs	r2, #1
 8001210:	829a      	strh	r2, [r3, #20]
}
 8001212:	bf00      	nop
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40010000 	.word	0x40010000
 8001224:	40010400 	.word	0x40010400
 8001228:	40000400 	.word	0x40000400
 800122c:	40000800 	.word	0x40000800
 8001230:	40000c00 	.word	0x40000c00
 8001234:	40001000 	.word	0x40001000
 8001238:	40001400 	.word	0x40001400

0800123c <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Regular: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8001248:	887b      	ldrh	r3, [r7, #2]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d008      	beq.n	8001260 <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	b29b      	uxth	r3, r3
 8001254:	f043 0304 	orr.w	r3, r3, #4
 8001258:	b29a      	uxth	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
  }
}
 800125e:	e007      	b.n	8001270 <TIM_UpdateRequestConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	881b      	ldrh	r3, [r3, #0]
 8001264:	b29b      	uxth	r3, r3
 8001266:	f023 0304 	bic.w	r3, r3, #4
 800126a:	b29a      	uxth	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	801a      	strh	r2, [r3, #0]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001288:	78fb      	ldrb	r3, [r7, #3]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d008      	beq.n	80012a0 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	b29b      	uxth	r3, r3
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	b29a      	uxth	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 800129e:	e007      	b.n	80012b0 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	f023 0301 	bic.w	r3, r3, #1
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	801a      	strh	r2, [r3, #0]
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	807b      	strh	r3, [r7, #2]
 80012c8:	4613      	mov	r3, r2
 80012ca:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 80012d0:	887b      	ldrh	r3, [r7, #2]
 80012d2:	2201      	movs	r2, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	8c1b      	ldrh	r3, [r3, #32]
 80012de:	b29a      	uxth	r2, r3
 80012e0:	89fb      	ldrh	r3, [r7, #14]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	4013      	ands	r3, r2
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	8c1b      	ldrh	r3, [r3, #32]
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	8839      	ldrh	r1, [r7, #0]
 80012f6:	887b      	ldrh	r3, [r7, #2]
 80012f8:	fa01 f303 	lsl.w	r3, r1, r3
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	4313      	orrs	r3, r2
 8001300:	b29a      	uxth	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	841a      	strh	r2, [r3, #32]
}
 8001306:	bf00      	nop
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
 800131a:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d10f      	bne.n	8001344 <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	8859      	ldrh	r1, [r3, #2]
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	889a      	ldrh	r2, [r3, #4]
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	891b      	ldrh	r3, [r3, #8]
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 f8eb 	bl	800150c <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	88db      	ldrh	r3, [r3, #6]
 800133a:	4619      	mov	r1, r3
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f000 f83c 	bl	80013ba <TIM_SetIC1Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8001342:	e036      	b.n	80013b2 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	2b04      	cmp	r3, #4
 800134a:	d10f      	bne.n	800136c <TIM_ICInit+0x5a>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	8859      	ldrh	r1, [r3, #2]
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	889a      	ldrh	r2, [r3, #4]
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	891b      	ldrh	r3, [r3, #8]
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 f91a 	bl	8001592 <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	88db      	ldrh	r3, [r3, #6]
 8001362:	4619      	mov	r1, r3
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f000 f844 	bl	80013f2 <TIM_SetIC2Prescaler>
}
 800136a:	e022      	b.n	80013b2 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	881b      	ldrh	r3, [r3, #0]
 8001370:	2b08      	cmp	r3, #8
 8001372:	d10f      	bne.n	8001394 <TIM_ICInit+0x82>
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	8859      	ldrh	r1, [r3, #2]
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	889a      	ldrh	r2, [r3, #4]
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	891b      	ldrh	r3, [r3, #8]
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 f953 	bl	800162c <TI3_Config>
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	88db      	ldrh	r3, [r3, #6]
 800138a:	4619      	mov	r1, r3
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f000 f84e 	bl	800142e <TIM_SetIC3Prescaler>
}
 8001392:	e00e      	b.n	80013b2 <TIM_ICInit+0xa0>
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	8859      	ldrh	r1, [r3, #2]
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	889a      	ldrh	r2, [r3, #4]
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	891b      	ldrh	r3, [r3, #8]
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f98b 	bl	80016bc <TI4_Config>
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	88db      	ldrh	r3, [r3, #6]
 80013aa:	4619      	mov	r1, r3
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 f85a 	bl	8001466 <TIM_SetIC4Prescaler>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
 80013c2:	460b      	mov	r3, r1
 80013c4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	8b1b      	ldrh	r3, [r3, #24]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	f023 030c 	bic.w	r3, r3, #12
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	831a      	strh	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	8b1b      	ldrh	r3, [r3, #24]
 80013da:	b29a      	uxth	r2, r3
 80013dc:	887b      	ldrh	r3, [r7, #2]
 80013de:	4313      	orrs	r3, r2
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	831a      	strh	r2, [r3, #24]
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	460b      	mov	r3, r1
 80013fc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	8b1b      	ldrh	r3, [r3, #24]
 8001402:	b29b      	uxth	r3, r3
 8001404:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001408:	b29a      	uxth	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	831a      	strh	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	8b1b      	ldrh	r3, [r3, #24]
 8001412:	b29a      	uxth	r2, r3
 8001414:	887b      	ldrh	r3, [r7, #2]
 8001416:	021b      	lsls	r3, r3, #8
 8001418:	b29b      	uxth	r3, r3
 800141a:	4313      	orrs	r3, r2
 800141c:	b29a      	uxth	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	831a      	strh	r2, [r3, #24]
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
 8001436:	460b      	mov	r3, r1
 8001438:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	8b9b      	ldrh	r3, [r3, #28]
 800143e:	b29b      	uxth	r3, r3
 8001440:	f023 030c 	bic.w	r3, r3, #12
 8001444:	b29a      	uxth	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	839a      	strh	r2, [r3, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	8b9b      	ldrh	r3, [r3, #28]
 800144e:	b29a      	uxth	r2, r3
 8001450:	887b      	ldrh	r3, [r7, #2]
 8001452:	4313      	orrs	r3, r2
 8001454:	b29a      	uxth	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	839a      	strh	r2, [r3, #28]
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	460b      	mov	r3, r1
 8001470:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	8b9b      	ldrh	r3, [r3, #28]
 8001476:	b29b      	uxth	r3, r3
 8001478:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800147c:	b29a      	uxth	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	839a      	strh	r2, [r3, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	8b9b      	ldrh	r3, [r3, #28]
 8001486:	b29a      	uxth	r2, r3
 8001488:	887b      	ldrh	r3, [r7, #2]
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	b29b      	uxth	r3, r3
 800148e:	4313      	orrs	r3, r2
 8001490:	b29a      	uxth	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	839a      	strh	r2, [r3, #28]
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80014a2:	b480      	push	{r7}
 80014a4:	b083      	sub	sp, #12
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	460b      	mov	r3, r1
 80014ac:	807b      	strh	r3, [r7, #2]
 80014ae:	4613      	mov	r3, r2
 80014b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80014b2:	787b      	ldrb	r3, [r7, #1]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d008      	beq.n	80014ca <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	899b      	ldrh	r3, [r3, #12]
 80014bc:	b29a      	uxth	r2, r3
 80014be:	887b      	ldrh	r3, [r7, #2]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80014c8:	e009      	b.n	80014de <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	899b      	ldrh	r3, [r3, #12]
 80014ce:	b29a      	uxth	r2, r3
 80014d0:	887b      	ldrh	r3, [r7, #2]
 80014d2:	43db      	mvns	r3, r3
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	4013      	ands	r3, r2
 80014d8:	b29a      	uxth	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	819a      	strh	r2, [r3, #12]
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
 80014f2:	460b      	mov	r3, r1
 80014f4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80014f6:	887b      	ldrh	r3, [r7, #2]
 80014f8:	43db      	mvns	r3, r3
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	821a      	strh	r2, [r3, #16]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800150c:	b480      	push	{r7}
 800150e:	b087      	sub	sp, #28
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	4608      	mov	r0, r1
 8001516:	4611      	mov	r1, r2
 8001518:	461a      	mov	r2, r3
 800151a:	4603      	mov	r3, r0
 800151c:	817b      	strh	r3, [r7, #10]
 800151e:	460b      	mov	r3, r1
 8001520:	813b      	strh	r3, [r7, #8]
 8001522:	4613      	mov	r3, r2
 8001524:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	82fb      	strh	r3, [r7, #22]
 800152a:	2300      	movs	r3, #0
 800152c:	82bb      	strh	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	8c1b      	ldrh	r3, [r3, #32]
 8001532:	b29b      	uxth	r3, r3
 8001534:	f023 0301 	bic.w	r3, r3, #1
 8001538:	b29a      	uxth	r2, r3
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	8b1b      	ldrh	r3, [r3, #24]
 8001542:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	8c1b      	ldrh	r3, [r3, #32]
 8001548:	82bb      	strh	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 800154a:	8afb      	ldrh	r3, [r7, #22]
 800154c:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8001550:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	011b      	lsls	r3, r3, #4
 8001556:	b29a      	uxth	r2, r3
 8001558:	893b      	ldrh	r3, [r7, #8]
 800155a:	4313      	orrs	r3, r2
 800155c:	b29a      	uxth	r2, r3
 800155e:	8afb      	ldrh	r3, [r7, #22]
 8001560:	4313      	orrs	r3, r2
 8001562:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001564:	8abb      	ldrh	r3, [r7, #20]
 8001566:	f023 030a 	bic.w	r3, r3, #10
 800156a:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 800156c:	897a      	ldrh	r2, [r7, #10]
 800156e:	8abb      	ldrh	r3, [r7, #20]
 8001570:	4313      	orrs	r3, r2
 8001572:	b29b      	uxth	r3, r3
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	8afa      	ldrh	r2, [r7, #22]
 800157e:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	8aba      	ldrh	r2, [r7, #20]
 8001584:	841a      	strh	r2, [r3, #32]
}
 8001586:	bf00      	nop
 8001588:	371c      	adds	r7, #28
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001592:	b480      	push	{r7}
 8001594:	b087      	sub	sp, #28
 8001596:	af00      	add	r7, sp, #0
 8001598:	60f8      	str	r0, [r7, #12]
 800159a:	4608      	mov	r0, r1
 800159c:	4611      	mov	r1, r2
 800159e:	461a      	mov	r2, r3
 80015a0:	4603      	mov	r3, r0
 80015a2:	817b      	strh	r3, [r7, #10]
 80015a4:	460b      	mov	r3, r1
 80015a6:	813b      	strh	r3, [r7, #8]
 80015a8:	4613      	mov	r3, r2
 80015aa:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	82fb      	strh	r3, [r7, #22]
 80015b0:	2300      	movs	r3, #0
 80015b2:	82bb      	strh	r3, [r7, #20]
 80015b4:	2300      	movs	r3, #0
 80015b6:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	8c1b      	ldrh	r3, [r3, #32]
 80015bc:	b29b      	uxth	r3, r3
 80015be:	f023 0310 	bic.w	r3, r3, #16
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	8b1b      	ldrh	r3, [r3, #24]
 80015cc:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	8c1b      	ldrh	r3, [r3, #32]
 80015d2:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 80015d4:	897b      	ldrh	r3, [r7, #10]
 80015d6:	011b      	lsls	r3, r3, #4
 80015d8:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80015da:	8afb      	ldrh	r3, [r7, #22]
 80015dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015e0:	051b      	lsls	r3, r3, #20
 80015e2:	0d1b      	lsrs	r3, r3, #20
 80015e4:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 80015e6:	88fb      	ldrh	r3, [r7, #6]
 80015e8:	031b      	lsls	r3, r3, #12
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	8afb      	ldrh	r3, [r7, #22]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 80015f2:	893b      	ldrh	r3, [r7, #8]
 80015f4:	021b      	lsls	r3, r3, #8
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	8afb      	ldrh	r3, [r7, #22]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80015fe:	8abb      	ldrh	r3, [r7, #20]
 8001600:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001604:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001606:	8a7a      	ldrh	r2, [r7, #18]
 8001608:	8abb      	ldrh	r3, [r7, #20]
 800160a:	4313      	orrs	r3, r2
 800160c:	b29b      	uxth	r3, r3
 800160e:	f043 0310 	orr.w	r3, r3, #16
 8001612:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	8afa      	ldrh	r2, [r7, #22]
 8001618:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	8aba      	ldrh	r2, [r7, #20]
 800161e:	841a      	strh	r2, [r3, #32]
}
 8001620:	bf00      	nop
 8001622:	371c      	adds	r7, #28
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800162c:	b480      	push	{r7}
 800162e:	b087      	sub	sp, #28
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	4608      	mov	r0, r1
 8001636:	4611      	mov	r1, r2
 8001638:	461a      	mov	r2, r3
 800163a:	4603      	mov	r3, r0
 800163c:	817b      	strh	r3, [r7, #10]
 800163e:	460b      	mov	r3, r1
 8001640:	813b      	strh	r3, [r7, #8]
 8001642:	4613      	mov	r3, r2
 8001644:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	82fb      	strh	r3, [r7, #22]
 800164a:	2300      	movs	r3, #0
 800164c:	82bb      	strh	r3, [r7, #20]
 800164e:	2300      	movs	r3, #0
 8001650:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	8c1b      	ldrh	r3, [r3, #32]
 8001656:	b29b      	uxth	r3, r3
 8001658:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800165c:	b29a      	uxth	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	8b9b      	ldrh	r3, [r3, #28]
 8001666:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	8c1b      	ldrh	r3, [r3, #32]
 800166c:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 800166e:	897b      	ldrh	r3, [r7, #10]
 8001670:	021b      	lsls	r3, r3, #8
 8001672:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8001674:	8afb      	ldrh	r3, [r7, #22]
 8001676:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 800167a:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	011b      	lsls	r3, r3, #4
 8001680:	b29a      	uxth	r2, r3
 8001682:	893b      	ldrh	r3, [r7, #8]
 8001684:	4313      	orrs	r3, r2
 8001686:	b29a      	uxth	r2, r3
 8001688:	8afb      	ldrh	r3, [r7, #22]
 800168a:	4313      	orrs	r3, r2
 800168c:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800168e:	8abb      	ldrh	r3, [r7, #20]
 8001690:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8001694:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8001696:	8a7a      	ldrh	r2, [r7, #18]
 8001698:	8abb      	ldrh	r3, [r7, #20]
 800169a:	4313      	orrs	r3, r2
 800169c:	b29b      	uxth	r3, r3
 800169e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a2:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	8afa      	ldrh	r2, [r7, #22]
 80016a8:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	8aba      	ldrh	r2, [r7, #20]
 80016ae:	841a      	strh	r2, [r3, #32]
}
 80016b0:	bf00      	nop
 80016b2:	371c      	adds	r7, #28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80016bc:	b480      	push	{r7}
 80016be:	b087      	sub	sp, #28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	4608      	mov	r0, r1
 80016c6:	4611      	mov	r1, r2
 80016c8:	461a      	mov	r2, r3
 80016ca:	4603      	mov	r3, r0
 80016cc:	817b      	strh	r3, [r7, #10]
 80016ce:	460b      	mov	r3, r1
 80016d0:	813b      	strh	r3, [r7, #8]
 80016d2:	4613      	mov	r3, r2
 80016d4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	82fb      	strh	r3, [r7, #22]
 80016da:	2300      	movs	r3, #0
 80016dc:	82bb      	strh	r3, [r7, #20]
 80016de:	2300      	movs	r3, #0
 80016e0:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8c1b      	ldrh	r3, [r3, #32]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	8b9b      	ldrh	r3, [r3, #28]
 80016f6:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	8c1b      	ldrh	r3, [r3, #32]
 80016fc:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 80016fe:	897b      	ldrh	r3, [r7, #10]
 8001700:	031b      	lsls	r3, r3, #12
 8001702:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001704:	8afb      	ldrh	r3, [r7, #22]
 8001706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800170a:	051b      	lsls	r3, r3, #20
 800170c:	0d1b      	lsrs	r3, r3, #20
 800170e:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8001710:	893b      	ldrh	r3, [r7, #8]
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	b29a      	uxth	r2, r3
 8001716:	8afb      	ldrh	r3, [r7, #22]
 8001718:	4313      	orrs	r3, r2
 800171a:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	031b      	lsls	r3, r3, #12
 8001720:	b29a      	uxth	r2, r3
 8001722:	8afb      	ldrh	r3, [r7, #22]
 8001724:	4313      	orrs	r3, r2
 8001726:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001728:	8abb      	ldrh	r3, [r7, #20]
 800172a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800172e:	045b      	lsls	r3, r3, #17
 8001730:	0c5b      	lsrs	r3, r3, #17
 8001732:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8001734:	8a7a      	ldrh	r2, [r7, #18]
 8001736:	8abb      	ldrh	r3, [r7, #20]
 8001738:	4313      	orrs	r3, r2
 800173a:	b29b      	uxth	r3, r3
 800173c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001740:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	8afa      	ldrh	r2, [r7, #22]
 8001746:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	8aba      	ldrh	r2, [r7, #20]
 800174c:	841a      	strh	r2, [r3, #32]
}
 800174e:	bf00      	nop
 8001750:	371c      	adds	r7, #28
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <init_Delay>:
#include "Delay.h"

RCC_ClocksTypeDef rcc;

void init_Delay(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
	RCC_DelayPeriphClockCmd(RCC_Delay_Periph,ENABLE);
 8001762:	2101      	movs	r1, #1
 8001764:	2002      	movs	r0, #2
 8001766:	f7ff fcbd 	bl	80010e4 <RCC_APB1PeriphClockCmd>


	RCC_GetClocksFreq(&rcc);
 800176a:	4820      	ldr	r0, [pc, #128]	; (80017ec <init_Delay+0x90>)
 800176c:	f7ff fbf2 	bl	8000f54 <RCC_GetClocksFreq>
	uint32_t psc = 2*rcc.PCLK2_Frequency/(65536);
 8001770:	4b1e      	ldr	r3, [pc, #120]	; (80017ec <init_Delay+0x90>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	0c1b      	lsrs	r3, r3, #16
 8001778:	617b      	str	r3, [r7, #20]
	uint32_t arr = 2*rcc.PCLK2_Frequency/(psc+1);
 800177a:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <init_Delay+0x90>)
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	005a      	lsls	r2, r3, #1
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	3301      	adds	r3, #1
 8001784:	fbb2 f3f3 	udiv	r3, r2, r3
 8001788:	613b      	str	r3, [r7, #16]
	TIM_TimeBaseInitTypeDef timerInitStructure; //create a 1ms delaay

	timerInitStructure.TIM_Prescaler = psc;
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	b29b      	uxth	r3, r3
 800178e:	80bb      	strh	r3, [r7, #4]
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8001790:	2300      	movs	r3, #0
 8001792:	80fb      	strh	r3, [r7, #6]
	timerInitStructure.TIM_Period= arr;
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	60bb      	str	r3, [r7, #8]
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8001798:	2300      	movs	r3, #0
 800179a:	81bb      	strh	r3, [r7, #12]
	timerInitStructure.TIM_RepetitionCounter = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	73bb      	strb	r3, [r7, #14]

	/* Prevent interrupt from triggering*/
	TIM_ClearITPendingBit(Delay_Timer,TIM_IT_Update);
 80017a0:	2101      	movs	r1, #1
 80017a2:	4813      	ldr	r0, [pc, #76]	; (80017f0 <init_Delay+0x94>)
 80017a4:	f7ff fea1 	bl	80014ea <TIM_ClearITPendingBit>
	TIM_UpdateRequestConfig(Delay_Timer,TIM_UpdateSource_Regular);
 80017a8:	2101      	movs	r1, #1
 80017aa:	4811      	ldr	r0, [pc, #68]	; (80017f0 <init_Delay+0x94>)
 80017ac:	f7ff fd46 	bl	800123c <TIM_UpdateRequestConfig>
	TIM_ITConfig(Delay_Timer, TIM_IT_Update,ENABLE);
 80017b0:	2201      	movs	r2, #1
 80017b2:	2101      	movs	r1, #1
 80017b4:	480e      	ldr	r0, [pc, #56]	; (80017f0 <init_Delay+0x94>)
 80017b6:	f7ff fe74 	bl	80014a2 <TIM_ITConfig>

	TIM_TimeBaseInit(Delay_Timer, &timerInitStructure);
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	4619      	mov	r1, r3
 80017be:	480c      	ldr	r0, [pc, #48]	; (80017f0 <init_Delay+0x94>)
 80017c0:	f7ff fcd0 	bl	8001164 <TIM_TimeBaseInit>
	NVIC_InitTypeDef nvicStructure;
    nvicStructure.NVIC_IRQChannel = Delay_IRQn;
 80017c4:	231d      	movs	r3, #29
 80017c6:	703b      	strb	r3, [r7, #0]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	707b      	strb	r3, [r7, #1]
	nvicStructure.NVIC_IRQChannelSubPriority = 1;
 80017cc:	2301      	movs	r3, #1
 80017ce:	70bb      	strb	r3, [r7, #2]
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 80017d0:	2301      	movs	r3, #1
 80017d2:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&nvicStructure);
 80017d4:	463b      	mov	r3, r7
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff f910 	bl	80009fc <NVIC_Init>
	timeout = 0;
 80017dc:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <init_Delay+0x98>)
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
	//enable interrupts
}
 80017e2:	bf00      	nop
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000030 	.word	0x20000030
 80017f0:	40000400 	.word	0x40000400
 80017f4:	20000044 	.word	0x20000044

080017f8 <Delay_begin_Timeout>:

void Delay_begin_Timeout(uint32_t time)//time in ms
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
	//clear any active flags
	timeout = 0;
 8001800:	4b1f      	ldr	r3, [pc, #124]	; (8001880 <Delay_begin_Timeout+0x88>)
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
	float seconds = (float)time/1000;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	ee07 3a90 	vmov	s15, r3
 800180c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001810:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001884 <Delay_begin_Timeout+0x8c>
 8001814:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001818:	edc7 7a03 	vstr	s15, [r7, #12]
	//set prescaler to 100
	uint32_t arr_value = 4*seconds*rcc.PCLK2_Frequency/(Delay_Timer->PSC +1) -1;
 800181c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001820:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001824:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001828:	4b17      	ldr	r3, [pc, #92]	; (8001888 <Delay_begin_Timeout+0x90>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	ee07 3a90 	vmov	s15, r3
 8001830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001834:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001838:	4b14      	ldr	r3, [pc, #80]	; (800188c <Delay_begin_Timeout+0x94>)
 800183a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800183c:	b29b      	uxth	r3, r3
 800183e:	3301      	adds	r3, #1
 8001840:	ee07 3a90 	vmov	s15, r3
 8001844:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001848:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800184c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001850:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001854:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001858:	ee17 3a90 	vmov	r3, s15
 800185c:	60bb      	str	r3, [r7, #8]
	Delay_Timer->ARR = arr_value;
 800185e:	4a0b      	ldr	r2, [pc, #44]	; (800188c <Delay_begin_Timeout+0x94>)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM_Cmd(Delay_Timer, ENABLE);
 8001864:	2101      	movs	r1, #1
 8001866:	4809      	ldr	r0, [pc, #36]	; (800188c <Delay_begin_Timeout+0x94>)
 8001868:	f7ff fd08 	bl	800127c <TIM_Cmd>
	TIM_ITConfig(Delay_Timer,TIM_IT_Update,ENABLE);
 800186c:	2201      	movs	r2, #1
 800186e:	2101      	movs	r1, #1
 8001870:	4806      	ldr	r0, [pc, #24]	; (800188c <Delay_begin_Timeout+0x94>)
 8001872:	f7ff fe16 	bl	80014a2 <TIM_ITConfig>
}
 8001876:	bf00      	nop
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000044 	.word	0x20000044
 8001884:	447a0000 	.word	0x447a0000
 8001888:	20000030 	.word	0x20000030
 800188c:	40000400 	.word	0x40000400

08001890 <TIM3_IRQHandler>:
void Delay_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
	//set timeout flag
	timeout = 1;
 8001894:	4b05      	ldr	r3, [pc, #20]	; (80018ac <TIM3_IRQHandler+0x1c>)
 8001896:	2201      	movs	r2, #1
 8001898:	601a      	str	r2, [r3, #0]
	//disable timer
	TIM_ClearITPendingBit(Delay_Timer, TIM_IT_Update);
 800189a:	2101      	movs	r1, #1
 800189c:	4804      	ldr	r0, [pc, #16]	; (80018b0 <TIM3_IRQHandler+0x20>)
 800189e:	f7ff fe24 	bl	80014ea <TIM_ClearITPendingBit>
	Delay_Disable();
 80018a2:	f000 f807 	bl	80018b4 <Delay_Disable>
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000044 	.word	0x20000044
 80018b0:	40000400 	.word	0x40000400

080018b4 <Delay_Disable>:

void Delay_Disable(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
	//turn off timer
	TIM_ITConfig(Delay_Timer,TIM_IT_Update,DISABLE);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2101      	movs	r1, #1
 80018bc:	4805      	ldr	r0, [pc, #20]	; (80018d4 <Delay_Disable+0x20>)
 80018be:	f7ff fdf0 	bl	80014a2 <TIM_ITConfig>
	TIM_Cmd(Delay_Timer, DISABLE);
 80018c2:	2100      	movs	r1, #0
 80018c4:	4803      	ldr	r0, [pc, #12]	; (80018d4 <Delay_Disable+0x20>)
 80018c6:	f7ff fcd9 	bl	800127c <TIM_Cmd>
	//clear counter
	assert_param(IS_TIM_ALL_PERIPH(Delay_Timer));
	Delay_Timer->CNT = 0;
 80018ca:	4b02      	ldr	r3, [pc, #8]	; (80018d4 <Delay_Disable+0x20>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	625a      	str	r2, [r3, #36]	; 0x24

}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40000400 	.word	0x40000400

080018d8 <init_ADC>:

static int N_pulse = 0;

/* Private functions ---------------------------------------------------------*/
void init_ADC(ADC_TypeDef* ADCx,uint32_t pin)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	; 0x28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
	//enable peripherals
	RCC_APB2PeriphClockCmd(RCC_ADCPeriph, ENABLE);
 80018e2:	2101      	movs	r1, #1
 80018e4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80018e8:	f7ff fc1c 	bl	8001124 <RCC_APB2PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_GPIOPeriph,ENABLE);
 80018ec:	2101      	movs	r1, #1
 80018ee:	2001      	movs	r0, #1
 80018f0:	f7ff fbd8 	bl	80010a4 <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_Initstruct;
	GPIO_Initstruct.GPIO_Mode = GPIO_Mode_AN;
 80018f4:	2303      	movs	r3, #3
 80018f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_Initstruct.GPIO_Pin = pin;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	623b      	str	r3, [r7, #32]
	GPIO_Initstruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIO_AN,&GPIO_Initstruct);
 8001904:	f107 0320 	add.w	r3, r7, #32
 8001908:	4619      	mov	r1, r3
 800190a:	4811      	ldr	r0, [pc, #68]	; (8001950 <init_ADC+0x78>)
 800190c:	f7ff fa4b 	bl	8000da6 <GPIO_Init>
	//ADC initialisation
	ADC_InitTypeDef ADC_Initstruct;
	ADC_Initstruct.ADC_Resolution = ADC_Resolution_12b;
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]
	ADC_Initstruct.ADC_DataAlign = ADC_DataAlign_Right;
 8001914:	2300      	movs	r3, #0
 8001916:	61bb      	str	r3, [r7, #24]
	ADC_Initstruct.ADC_ContinuousConvMode = DISABLE;
 8001918:	2300      	movs	r3, #0
 800191a:	737b      	strb	r3, [r7, #13]
	ADC_Initstruct.ADC_NbrOfConversion = 1;
 800191c:	2301      	movs	r3, #1
 800191e:	773b      	strb	r3, [r7, #28]
	ADC_Initstruct.ADC_ExternalTrigConv = ADC_ExternalTrigConvEdge_None;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
	ADC_Initstruct.ADC_ScanConvMode = DISABLE;
 8001924:	2300      	movs	r3, #0
 8001926:	733b      	strb	r3, [r7, #12]
	ADC_Init(ADCx,&ADC_Initstruct);
 8001928:	f107 0308 	add.w	r3, r7, #8
 800192c:	4619      	mov	r1, r3
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff f8c6 	bl	8000ac0 <ADC_Init>
	ADC_Cmd(ADCx,ENABLE);
 8001934:	2101      	movs	r1, #1
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff f918 	bl	8000b6c <ADC_Cmd>
	//channel config
	ADC_RegularChannelConfig(ADC_AN,ADC_AN_Channel,1,ADC_SampleTime_84Cycles);
 800193c:	2304      	movs	r3, #4
 800193e:	2201      	movs	r2, #1
 8001940:	2100      	movs	r1, #0
 8001942:	4804      	ldr	r0, [pc, #16]	; (8001954 <init_ADC+0x7c>)
 8001944:	f7ff f92e 	bl	8000ba4 <ADC_RegularChannelConfig>
}
 8001948:	bf00      	nop
 800194a:	3728      	adds	r7, #40	; 0x28
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40020000 	.word	0x40020000
 8001954:	40012000 	.word	0x40012000

08001958 <get_ADC_Val>:

uint16_t get_ADC_Val(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
	//start conversion
	ADC_SoftwareStartConv(ADC_AN);
 800195c:	4808      	ldr	r0, [pc, #32]	; (8001980 <get_ADC_Val+0x28>)
 800195e:	f7ff f9eb 	bl	8000d38 <ADC_SoftwareStartConv>
	//wait for completion
	while(!ADC_GetFlagStatus(ADC_AN, ADC_FLAG_EOC));
 8001962:	bf00      	nop
 8001964:	2102      	movs	r1, #2
 8001966:	4806      	ldr	r0, [pc, #24]	; (8001980 <get_ADC_Val+0x28>)
 8001968:	f7ff fa03 	bl	8000d72 <ADC_GetFlagStatus>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f8      	beq.n	8001964 <get_ADC_Val+0xc>
	return ADC_GetConversionValue(ADC_AN);
 8001972:	4803      	ldr	r0, [pc, #12]	; (8001980 <get_ADC_Val+0x28>)
 8001974:	f7ff f9f0 	bl	8000d58 <ADC_GetConversionValue>
 8001978:	4603      	mov	r3, r0
}
 800197a:	4618      	mov	r0, r3
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40012000 	.word	0x40012000

08001984 <get_Wind_Direction>:

float get_Wind_Direction(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
	uint16_t ad_val = get_ADC_Val() >>4;
 800198a:	f7ff ffe5 	bl	8001958 <get_ADC_Val>
 800198e:	4603      	mov	r3, r0
 8001990:	091b      	lsrs	r3, r3, #4
 8001992:	80fb      	strh	r3, [r7, #6]
	return (((float)ad_val)/MAX_VAL)*360 + DIR_OFFSET;
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	ee07 3a90 	vmov	s15, r3
 800199a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800199e:	eddf 6a08 	vldr	s13, [pc, #32]	; 80019c0 <get_Wind_Direction+0x3c>
 80019a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019a6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80019c4 <get_Wind_Direction+0x40>
 80019aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ae:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80019c8 <get_Wind_Direction+0x44>
 80019b2:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80019b6:	eeb0 0a67 	vmov.f32	s0, s15
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	457ff000 	.word	0x457ff000
 80019c4:	43b40000 	.word	0x43b40000
 80019c8:	00000000 	.word	0x00000000

080019cc <init_InputCapture>:

void init_InputCapture(uint32_t pin)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
 80019d4:	2101      	movs	r1, #1
 80019d6:	2001      	movs	r0, #1
 80019d8:	f7ff fb84 	bl	80010e4 <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_GPIOPeriph,ENABLE);
 80019dc:	2101      	movs	r1, #1
 80019de:	2001      	movs	r0, #1
 80019e0:	f7ff fb60 	bl	80010a4 <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 80019e4:	2302      	movs	r3, #2
 80019e6:	773b      	strb	r3, [r7, #28]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStruct.GPIO_Pin = pin;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	61bb      	str	r3, [r7, #24]
	GPIO_Init(GPIO_AN,&GPIO_InitStruct);
 80019f0:	f107 0318 	add.w	r3, r7, #24
 80019f4:	4619      	mov	r1, r3
 80019f6:	4820      	ldr	r0, [pc, #128]	; (8001a78 <init_InputCapture+0xac>)
 80019f8:	f7ff f9d5 	bl	8000da6 <GPIO_Init>
	//AF Mapping
	GPIO_PinAFConfig(GPIO_AN,GPIO_PinSource1,GPIO_AF_TIM2);
 80019fc:	2201      	movs	r2, #1
 80019fe:	2101      	movs	r1, #1
 8001a00:	481d      	ldr	r0, [pc, #116]	; (8001a78 <init_InputCapture+0xac>)
 8001a02:	f7ff fa5e 	bl	8000ec2 <GPIO_PinAFConfig>
	//init base clock with a counter frequency of 200Hz

	//configure input capture parameters
	TIM_ICInitTypeDef TIM_ICInitStruct;
	TIM_ICInitStruct.TIM_Channel = TIM_AN_Channel;
 8001a06:	2304      	movs	r3, #4
 8001a08:	81bb      	strh	r3, [r7, #12]
	TIM_ICInitStruct.TIM_ICFilter = 0x00;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	82bb      	strh	r3, [r7, #20]
	TIM_ICInitStruct.TIM_ICPolarity = TIM_ICPolarity_Falling;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	81fb      	strh	r3, [r7, #14]
	TIM_ICInitStruct.TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8001a12:	2300      	movs	r3, #0
 8001a14:	827b      	strh	r3, [r7, #18]
	TIM_ICInitStruct.TIM_ICSelection = TIM_ICSelection_DirectTI;
 8001a16:	2301      	movs	r3, #1
 8001a18:	823b      	strh	r3, [r7, #16]
	TIM_ICInit(TIM_AN,&TIM_ICInitStruct);
 8001a1a:	f107 030c 	add.w	r3, r7, #12
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001a24:	f7ff fc75 	bl	8001312 <TIM_ICInit>
	TIM_CCxCmd(TIM_AN,TIM_Channel_2,TIM_CCx_Enable);
 8001a28:	2201      	movs	r2, #1
 8001a2a:	2104      	movs	r1, #4
 8001a2c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001a30:	f7ff fc44 	bl	80012bc <TIM_CCxCmd>
	TIM_Cmd(TIM_AN,ENABLE);
 8001a34:	2101      	movs	r1, #1
 8001a36:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001a3a:	f7ff fc1f 	bl	800127c <TIM_Cmd>
	//enable interrupt
	TIM_ITConfig(TIM_AN,TIM_IT_CC2,ENABLE);
 8001a3e:	2201      	movs	r2, #1
 8001a40:	2104      	movs	r1, #4
 8001a42:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001a46:	f7ff fd2c 	bl	80014a2 <TIM_ITConfig>
	TIM_ClearITPendingBit(TIM_AN,TIM_IT_CC2);
 8001a4a:	2104      	movs	r1, #4
 8001a4c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001a50:	f7ff fd4b 	bl	80014ea <TIM_ClearITPendingBit>

	NVIC_InitTypeDef NVIC_Initstruct;
	NVIC_Initstruct.NVIC_IRQChannel = TIM2_IRQn;
 8001a54:	231c      	movs	r3, #28
 8001a56:	723b      	strb	r3, [r7, #8]
	NVIC_Initstruct.NVIC_IRQChannelPreemptionPriority = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	727b      	strb	r3, [r7, #9]
	NVIC_Initstruct.NVIC_IRQChannelSubPriority = 1;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	72bb      	strb	r3, [r7, #10]
	NVIC_Initstruct.NVIC_IRQChannelCmd = ENABLE;
 8001a60:	2301      	movs	r3, #1
 8001a62:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&NVIC_Initstruct);
 8001a64:	f107 0308 	add.w	r3, r7, #8
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe ffc7 	bl	80009fc <NVIC_Init>


}
 8001a6e:	bf00      	nop
 8001a70:	3720      	adds	r7, #32
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40020000 	.word	0x40020000
 8001a7c:	00000000 	.word	0x00000000

08001a80 <get_Wind_Speed>:

float get_Wind_Speed(void)
{
 8001a80:	b590      	push	{r4, r7, lr}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0

	N_pulse = 0;
 8001a86:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <get_Wind_Speed+0x88>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
	//set a 2500 sample time and count the number of pulses
	Delay_begin_Timeout(2500);
 8001a8c:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8001a90:	f7ff feb2 	bl	80017f8 <Delay_begin_Timeout>
	while(!timeout);
 8001a94:	bf00      	nop
 8001a96:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <get_Wind_Speed+0x8c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0fb      	beq.n	8001a96 <get_Wind_Speed+0x16>
	//calculate wind
	float windspeed = (float)N_pulse*2.25*1.61/2.5;
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <get_Wind_Speed+0x88>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	ee07 3a90 	vmov	s15, r3
 8001aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aaa:	ee17 0a90 	vmov	r0, s15
 8001aae:	f7fe fcef 	bl	8000490 <__aeabi_f2d>
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <get_Wind_Speed+0x90>)
 8001ab8:	f7fe fd3e 	bl	8000538 <__aeabi_dmul>
 8001abc:	4603      	mov	r3, r0
 8001abe:	460c      	mov	r4, r1
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	4621      	mov	r1, r4
 8001ac4:	a30e      	add	r3, pc, #56	; (adr r3, 8001b00 <get_Wind_Speed+0x80>)
 8001ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aca:	f7fe fd35 	bl	8000538 <__aeabi_dmul>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	460c      	mov	r4, r1
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	4621      	mov	r1, r4
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <get_Wind_Speed+0x94>)
 8001adc:	f7fe fe56 	bl	800078c <__aeabi_ddiv>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	460c      	mov	r4, r1
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	4621      	mov	r1, r4
 8001ae8:	f7fe ff38 	bl	800095c <__aeabi_d2f>
 8001aec:	4603      	mov	r3, r0
 8001aee:	607b      	str	r3, [r7, #4]
	return windspeed;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	ee07 3a90 	vmov	s15, r3

}
 8001af6:	eeb0 0a67 	vmov.f32	s0, s15
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd90      	pop	{r4, r7, pc}
 8001b00:	5c28f5c3 	.word	0x5c28f5c3
 8001b04:	3ff9c28f 	.word	0x3ff9c28f
 8001b08:	2000002c 	.word	0x2000002c
 8001b0c:	20000044 	.word	0x20000044
 8001b10:	40020000 	.word	0x40020000
 8001b14:	40040000 	.word	0x40040000

08001b18 <TIM2_IRQHandler>:
void TIM2_IRQHandler()
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0

	N_pulse++;
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <TIM2_IRQHandler+0x1c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	3301      	adds	r3, #1
 8001b22:	4a04      	ldr	r2, [pc, #16]	; (8001b34 <TIM2_IRQHandler+0x1c>)
 8001b24:	6013      	str	r3, [r2, #0]
	//clear pending bit
	TIM_ClearITPendingBit(TIM_AN,TIM_IT_CC2);
 8001b26:	2104      	movs	r1, #4
 8001b28:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001b2c:	f7ff fcdd 	bl	80014ea <TIM_ClearITPendingBit>
}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	2000002c 	.word	0x2000002c

08001b38 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
	//TODO: User code
  init_ADC(ADC_AN,Weather_Vane_Pin);
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	480c      	ldr	r0, [pc, #48]	; (8001b70 <main+0x38>)
 8001b40:	f7ff feca 	bl	80018d8 <init_ADC>
  init_InputCapture(Wind_Speed_Pin);
 8001b44:	2002      	movs	r0, #2
 8001b46:	f7ff ff41 	bl	80019cc <init_InputCapture>
  init_Delay();
 8001b4a:	f7ff fe07 	bl	800175c <init_Delay>

  while (1)
  {
	  winddir = get_Wind_Direction();
 8001b4e:	f7ff ff19 	bl	8001984 <get_Wind_Direction>
 8001b52:	eef0 7a40 	vmov.f32	s15, s0
 8001b56:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <main+0x3c>)
 8001b58:	edc3 7a00 	vstr	s15, [r3]
	  windspeed = get_Wind_Speed();
 8001b5c:	f7ff ff90 	bl	8001a80 <get_Wind_Speed>
 8001b60:	ee07 0a90 	vmov	s15, r0
 8001b64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b68:	4b03      	ldr	r3, [pc, #12]	; (8001b78 <main+0x40>)
 8001b6a:	edc3 7a00 	vstr	s15, [r3]
  {
 8001b6e:	e7ee      	b.n	8001b4e <main+0x16>
 8001b70:	40012000 	.word	0x40012000
 8001b74:	20000050 	.word	0x20000050
 8001b78:	20000054 	.word	0x20000054

08001b7c <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b7e:	e003      	b.n	8001b88 <LoopCopyDataInit>

08001b80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001b82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b86:	3104      	adds	r1, #4

08001b88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b88:	480a      	ldr	r0, [pc, #40]	; (8001bb4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001b8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b90:	d3f6      	bcc.n	8001b80 <CopyDataInit>
  ldr  r2, =_sbss
 8001b92:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001b94:	e002      	b.n	8001b9c <LoopFillZerobss>

08001b96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b98:	f842 3b04 	str.w	r3, [r2], #4

08001b9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b9c:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001b9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ba0:	d3f9      	bcc.n	8001b96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ba2:	f000 f83f 	bl	8001c24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ba6:	f000 f8ef 	bl	8001d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001baa:	f7ff ffc5 	bl	8001b38 <main>
  bx  lr    
 8001bae:	4770      	bx	lr
  ldr  r3, =_sidata
 8001bb0:	08001df0 	.word	0x08001df0
  ldr  r0, =_sdata
 8001bb4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001bb8:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001bbc:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001bc0:	20000058 	.word	0x20000058

08001bc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bc4:	e7fe      	b.n	8001bc4 <ADC_IRQHandler>

08001bc6 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0
}
 8001bca:	bf00      	nop
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <HardFault_Handler+0x4>

08001bda <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001bde:	e7fe      	b.n	8001bde <MemManage_Handler+0x4>

08001be0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <BusFault_Handler+0x4>

08001be6 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001bea:	e7fe      	b.n	8001bea <UsageFault_Handler+0x4>

08001bec <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0
}
 8001bfe:	bf00      	nop
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0
}
 8001c1a:	bf00      	nop
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c28:	4a16      	ldr	r2, [pc, #88]	; (8001c84 <SystemInit+0x60>)
 8001c2a:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <SystemInit+0x60>)
 8001c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
	
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001c38:	4a13      	ldr	r2, [pc, #76]	; (8001c88 <SystemInit+0x64>)
 8001c3a:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <SystemInit+0x64>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f043 0301 	orr.w	r3, r3, #1
 8001c42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c44:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <SystemInit+0x64>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001c4a:	4a0f      	ldr	r2, [pc, #60]	; (8001c88 <SystemInit+0x64>)
 8001c4c:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <SystemInit+0x64>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c58:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001c5a:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <SystemInit+0x64>)
 8001c5c:	4a0b      	ldr	r2, [pc, #44]	; (8001c8c <SystemInit+0x68>)
 8001c5e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001c60:	4a09      	ldr	r2, [pc, #36]	; (8001c88 <SystemInit+0x64>)
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <SystemInit+0x64>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c6a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <SystemInit+0x64>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001c72:	f000 f80d 	bl	8001c90 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c76:	4b03      	ldr	r3, [pc, #12]	; (8001c84 <SystemInit+0x60>)
 8001c78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c7c:	609a      	str	r2, [r3, #8]
#endif
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	e000ed00 	.word	0xe000ed00
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	24003010 	.word	0x24003010

08001c90 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	607b      	str	r3, [r7, #4]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001c9e:	4a36      	ldr	r2, [pc, #216]	; (8001d78 <SetSysClock+0xe8>)
 8001ca0:	4b35      	ldr	r3, [pc, #212]	; (8001d78 <SetSysClock+0xe8>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001caa:	4b33      	ldr	r3, [pc, #204]	; (8001d78 <SetSysClock+0xe8>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d103      	bne.n	8001cc8 <SetSysClock+0x38>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001cc6:	d1f0      	bne.n	8001caa <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001cc8:	4b2b      	ldr	r3, [pc, #172]	; (8001d78 <SetSysClock+0xe8>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d002      	beq.n	8001cda <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	603b      	str	r3, [r7, #0]
 8001cd8:	e001      	b.n	8001cde <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d142      	bne.n	8001d6a <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001ce4:	4a24      	ldr	r2, [pc, #144]	; (8001d78 <SetSysClock+0xe8>)
 8001ce6:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <SetSysClock+0xe8>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cee:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8001cf0:	4a22      	ldr	r2, [pc, #136]	; (8001d7c <SetSysClock+0xec>)
 8001cf2:	4b22      	ldr	r3, [pc, #136]	; (8001d7c <SetSysClock+0xec>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cfa:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001cfc:	4a1e      	ldr	r2, [pc, #120]	; (8001d78 <SetSysClock+0xe8>)
 8001cfe:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <SetSysClock+0xe8>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001d04:	4a1c      	ldr	r2, [pc, #112]	; (8001d78 <SetSysClock+0xe8>)
 8001d06:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <SetSysClock+0xe8>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d0e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001d10:	4a19      	ldr	r2, [pc, #100]	; (8001d78 <SetSysClock+0xe8>)
 8001d12:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <SetSysClock+0xe8>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001d1a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001d1c:	4b16      	ldr	r3, [pc, #88]	; (8001d78 <SetSysClock+0xe8>)
 8001d1e:	4a18      	ldr	r2, [pc, #96]	; (8001d80 <SetSysClock+0xf0>)
 8001d20:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001d22:	4a15      	ldr	r2, [pc, #84]	; (8001d78 <SetSysClock+0xe8>)
 8001d24:	4b14      	ldr	r3, [pc, #80]	; (8001d78 <SetSysClock+0xe8>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d2c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001d2e:	bf00      	nop
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <SetSysClock+0xe8>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f9      	beq.n	8001d30 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001d3c:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <SetSysClock+0xf4>)
 8001d3e:	f240 6205 	movw	r2, #1541	; 0x605
 8001d42:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001d44:	4a0c      	ldr	r2, [pc, #48]	; (8001d78 <SetSysClock+0xe8>)
 8001d46:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <SetSysClock+0xe8>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f023 0303 	bic.w	r3, r3, #3
 8001d4e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001d50:	4a09      	ldr	r2, [pc, #36]	; (8001d78 <SetSysClock+0xe8>)
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <SetSysClock+0xe8>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f043 0302 	orr.w	r3, r3, #2
 8001d5a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001d5c:	bf00      	nop
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <SetSysClock+0xe8>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d1f9      	bne.n	8001d5e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40007000 	.word	0x40007000
 8001d80:	07405408 	.word	0x07405408
 8001d84:	40023c00 	.word	0x40023c00

08001d88 <__libc_init_array>:
 8001d88:	b570      	push	{r4, r5, r6, lr}
 8001d8a:	4e0d      	ldr	r6, [pc, #52]	; (8001dc0 <__libc_init_array+0x38>)
 8001d8c:	4c0d      	ldr	r4, [pc, #52]	; (8001dc4 <__libc_init_array+0x3c>)
 8001d8e:	1ba4      	subs	r4, r4, r6
 8001d90:	10a4      	asrs	r4, r4, #2
 8001d92:	2500      	movs	r5, #0
 8001d94:	42a5      	cmp	r5, r4
 8001d96:	d109      	bne.n	8001dac <__libc_init_array+0x24>
 8001d98:	4e0b      	ldr	r6, [pc, #44]	; (8001dc8 <__libc_init_array+0x40>)
 8001d9a:	4c0c      	ldr	r4, [pc, #48]	; (8001dcc <__libc_init_array+0x44>)
 8001d9c:	f000 f818 	bl	8001dd0 <_init>
 8001da0:	1ba4      	subs	r4, r4, r6
 8001da2:	10a4      	asrs	r4, r4, #2
 8001da4:	2500      	movs	r5, #0
 8001da6:	42a5      	cmp	r5, r4
 8001da8:	d105      	bne.n	8001db6 <__libc_init_array+0x2e>
 8001daa:	bd70      	pop	{r4, r5, r6, pc}
 8001dac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001db0:	4798      	blx	r3
 8001db2:	3501      	adds	r5, #1
 8001db4:	e7ee      	b.n	8001d94 <__libc_init_array+0xc>
 8001db6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001dba:	4798      	blx	r3
 8001dbc:	3501      	adds	r5, #1
 8001dbe:	e7f2      	b.n	8001da6 <__libc_init_array+0x1e>
 8001dc0:	08001de8 	.word	0x08001de8
 8001dc4:	08001de8 	.word	0x08001de8
 8001dc8:	08001de8 	.word	0x08001de8
 8001dcc:	08001dec 	.word	0x08001dec

08001dd0 <_init>:
 8001dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dd2:	bf00      	nop
 8001dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dd6:	bc08      	pop	{r3}
 8001dd8:	469e      	mov	lr, r3
 8001dda:	4770      	bx	lr

08001ddc <_fini>:
 8001ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dde:	bf00      	nop
 8001de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001de2:	bc08      	pop	{r3}
 8001de4:	469e      	mov	lr, r3
 8001de6:	4770      	bx	lr
