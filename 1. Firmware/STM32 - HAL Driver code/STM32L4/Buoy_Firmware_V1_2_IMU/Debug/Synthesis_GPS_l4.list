
Synthesis_GPS_l4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010810  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000928  080109a0  080109a0  000209a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080112c8  080112c8  000212c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080112d0  080112d0  000212d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080112d4  080112d4  000212d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000006c8  20000000  080112d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram2         00000000  10000000  10000000  000306c8  2**0
                  CONTENTS
  8 .bss          00001b38  200006c8  200006c8  000306c8  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  20002200  20002200  000306c8  2**0
                  ALLOC
 10 .ARM.attributes 0000002a  00000000  00000000  000306c8  2**0
                  CONTENTS, READONLY
 11 .debug_info   00019707  00000000  00000000  000306f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002c6e  00000000  00000000  00049df9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001370  00000000  00000000  0004ca68  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001218  00000000  00000000  0004ddd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000917b  00000000  00000000  0004eff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00006327  00000000  00000000  0005816b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005e492  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006c8c  00000000  00000000  0005e510  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         00000024  00000000  00000000  0006519c  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      0000004e  00000000  00000000  000651c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200006c8 	.word	0x200006c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010988 	.word	0x08010988

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200006cc 	.word	0x200006cc
 80001cc:	08010988 	.word	0x08010988

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f092 0f00 	teq	r2, #0
 800058a:	bf14      	ite	ne
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a0:	e720      	b.n	80003e4 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_ul2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	e00a      	b.n	80005ca <__aeabi_l2d+0x16>

080005b4 <__aeabi_l2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c2:	d502      	bpl.n	80005ca <__aeabi_l2d+0x16>
 80005c4:	4240      	negs	r0, r0
 80005c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d6:	f43f aedc 	beq.w	8000392 <__adddf3+0xe6>
 80005da:	f04f 0203 	mov.w	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f2:	f1c2 0320 	rsb	r3, r2, #32
 80005f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000602:	ea40 000e 	orr.w	r0, r0, lr
 8000606:	fa21 f102 	lsr.w	r1, r1, r2
 800060a:	4414      	add	r4, r2
 800060c:	e6c1      	b.n	8000392 <__adddf3+0xe6>
 800060e:	bf00      	nop

08000610 <__aeabi_dmul>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000616:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061e:	bf1d      	ittte	ne
 8000620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000624:	ea94 0f0c 	teqne	r4, ip
 8000628:	ea95 0f0c 	teqne	r5, ip
 800062c:	f000 f8de 	bleq	80007ec <__aeabi_dmul+0x1dc>
 8000630:	442c      	add	r4, r5
 8000632:	ea81 0603 	eor.w	r6, r1, r3
 8000636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000642:	bf18      	it	ne
 8000644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000650:	d038      	beq.n	80006c4 <__aeabi_dmul+0xb4>
 8000652:	fba0 ce02 	umull	ip, lr, r0, r2
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000662:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000666:	f04f 0600 	mov.w	r6, #0
 800066a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066e:	f09c 0f00 	teq	ip, #0
 8000672:	bf18      	it	ne
 8000674:	f04e 0e01 	orrne.w	lr, lr, #1
 8000678:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800067c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000680:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000684:	d204      	bcs.n	8000690 <__aeabi_dmul+0x80>
 8000686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068a:	416d      	adcs	r5, r5
 800068c:	eb46 0606 	adc.w	r6, r6, r6
 8000690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800069c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a8:	bf88      	it	hi
 80006aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ae:	d81e      	bhi.n	80006ee <__aeabi_dmul+0xde>
 80006b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b4:	bf08      	it	eq
 80006b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ba:	f150 0000 	adcs.w	r0, r0, #0
 80006be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c8:	ea46 0101 	orr.w	r1, r6, r1
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d8:	bfc2      	ittt	gt
 80006da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	popgt	{r4, r5, r6, pc}
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e8:	f04f 0e00 	mov.w	lr, #0
 80006ec:	3c01      	subs	r4, #1
 80006ee:	f300 80ab 	bgt.w	8000848 <__aeabi_dmul+0x238>
 80006f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f6:	bfde      	ittt	le
 80006f8:	2000      	movle	r0, #0
 80006fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd70      	pople	{r4, r5, r6, pc}
 8000700:	f1c4 0400 	rsb	r4, r4, #0
 8000704:	3c20      	subs	r4, #32
 8000706:	da35      	bge.n	8000774 <__aeabi_dmul+0x164>
 8000708:	340c      	adds	r4, #12
 800070a:	dc1b      	bgt.n	8000744 <__aeabi_dmul+0x134>
 800070c:	f104 0414 	add.w	r4, r4, #20
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f305 	lsl.w	r3, r0, r5
 8000718:	fa20 f004 	lsr.w	r0, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	fa21 f604 	lsr.w	r6, r1, r4
 8000734:	eb42 0106 	adc.w	r1, r2, r6
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 040c 	rsb	r4, r4, #12
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f304 	lsl.w	r3, r0, r4
 8000750:	fa20 f005 	lsr.w	r0, r0, r5
 8000754:	fa01 f204 	lsl.w	r2, r1, r4
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f205 	lsl.w	r2, r0, r5
 800077c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000780:	fa20 f304 	lsr.w	r3, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea43 0302 	orr.w	r3, r3, r2
 800078c:	fa21 f004 	lsr.w	r0, r1, r4
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	fa21 f204 	lsr.w	r2, r1, r4
 8000798:	ea20 0002 	bic.w	r0, r0, r2
 800079c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f094 0f00 	teq	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__aeabi_dmul+0x1c2>
 80007b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b6:	0040      	lsls	r0, r0, #1
 80007b8:	eb41 0101 	adc.w	r1, r1, r1
 80007bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3c01      	subeq	r4, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1a6>
 80007c6:	ea41 0106 	orr.w	r1, r1, r6
 80007ca:	f095 0f00 	teq	r5, #0
 80007ce:	bf18      	it	ne
 80007d0:	4770      	bxne	lr
 80007d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	eb43 0303 	adc.w	r3, r3, r3
 80007dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3d01      	subeq	r5, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1c6>
 80007e6:	ea43 0306 	orr.w	r3, r3, r6
 80007ea:	4770      	bx	lr
 80007ec:	ea94 0f0c 	teq	r4, ip
 80007f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f4:	bf18      	it	ne
 80007f6:	ea95 0f0c 	teqne	r5, ip
 80007fa:	d00c      	beq.n	8000816 <__aeabi_dmul+0x206>
 80007fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000806:	d1d1      	bne.n	80007ac <__aeabi_dmul+0x19c>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081a:	bf06      	itte	eq
 800081c:	4610      	moveq	r0, r2
 800081e:	4619      	moveq	r1, r3
 8000820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000824:	d019      	beq.n	800085a <__aeabi_dmul+0x24a>
 8000826:	ea94 0f0c 	teq	r4, ip
 800082a:	d102      	bne.n	8000832 <__aeabi_dmul+0x222>
 800082c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000830:	d113      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000832:	ea95 0f0c 	teq	r5, ip
 8000836:	d105      	bne.n	8000844 <__aeabi_dmul+0x234>
 8000838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800083c:	bf1c      	itt	ne
 800083e:	4610      	movne	r0, r2
 8000840:	4619      	movne	r1, r3
 8000842:	d10a      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000850:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <__aeabi_ddiv>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000872:	bf1d      	ittte	ne
 8000874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000878:	ea94 0f0c 	teqne	r4, ip
 800087c:	ea95 0f0c 	teqne	r5, ip
 8000880:	f000 f8a7 	bleq	80009d2 <__aeabi_ddiv+0x16e>
 8000884:	eba4 0405 	sub.w	r4, r4, r5
 8000888:	ea81 0e03 	eor.w	lr, r1, r3
 800088c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f000 8088 	beq.w	80009a8 <__aeabi_ddiv+0x144>
 8000898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800089c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008bc:	429d      	cmp	r5, r3
 80008be:	bf08      	it	eq
 80008c0:	4296      	cmpeq	r6, r2
 80008c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ca:	d202      	bcs.n	80008d2 <__aeabi_ddiv+0x6e>
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	eb65 0503 	sbc.w	r5, r5, r3
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000940:	ea55 0e06 	orrs.w	lr, r5, r6
 8000944:	d018      	beq.n	8000978 <__aeabi_ddiv+0x114>
 8000946:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000962:	d1c0      	bne.n	80008e6 <__aeabi_ddiv+0x82>
 8000964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000968:	d10b      	bne.n	8000982 <__aeabi_ddiv+0x11e>
 800096a:	ea41 0100 	orr.w	r1, r1, r0
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000976:	e7b6      	b.n	80008e6 <__aeabi_ddiv+0x82>
 8000978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800097c:	bf04      	itt	eq
 800097e:	4301      	orreq	r1, r0
 8000980:	2000      	moveq	r0, #0
 8000982:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000986:	bf88      	it	hi
 8000988:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800098c:	f63f aeaf 	bhi.w	80006ee <__aeabi_dmul+0xde>
 8000990:	ebb5 0c03 	subs.w	ip, r5, r3
 8000994:	bf04      	itt	eq
 8000996:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099e:	f150 0000 	adcs.w	r0, r0, #0
 80009a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b4:	bfc2      	ittt	gt
 80009b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009be:	bd70      	popgt	{r4, r5, r6, pc}
 80009c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c4:	f04f 0e00 	mov.w	lr, #0
 80009c8:	3c01      	subs	r4, #1
 80009ca:	e690      	b.n	80006ee <__aeabi_dmul+0xde>
 80009cc:	ea45 0e06 	orr.w	lr, r5, r6
 80009d0:	e68d      	b.n	80006ee <__aeabi_dmul+0xde>
 80009d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d6:	ea94 0f0c 	teq	r4, ip
 80009da:	bf08      	it	eq
 80009dc:	ea95 0f0c 	teqeq	r5, ip
 80009e0:	f43f af3b 	beq.w	800085a <__aeabi_dmul+0x24a>
 80009e4:	ea94 0f0c 	teq	r4, ip
 80009e8:	d10a      	bne.n	8000a00 <__aeabi_ddiv+0x19c>
 80009ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ee:	f47f af34 	bne.w	800085a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	f47f af25 	bne.w	8000844 <__aeabi_dmul+0x234>
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	e72c      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a00:	ea95 0f0c 	teq	r5, ip
 8000a04:	d106      	bne.n	8000a14 <__aeabi_ddiv+0x1b0>
 8000a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0a:	f43f aefd 	beq.w	8000808 <__aeabi_dmul+0x1f8>
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	e722      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	f47f aec5 	bne.w	80007ac <__aeabi_dmul+0x19c>
 8000a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a26:	f47f af0d 	bne.w	8000844 <__aeabi_dmul+0x234>
 8000a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2e:	f47f aeeb 	bne.w	8000808 <__aeabi_dmul+0x1f8>
 8000a32:	e712      	b.n	800085a <__aeabi_dmul+0x24a>

08000a34 <__gedf2>:
 8000a34:	f04f 3cff 	mov.w	ip, #4294967295
 8000a38:	e006      	b.n	8000a48 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__ledf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	e002      	b.n	8000a48 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__cmpdf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5e:	d01b      	beq.n	8000a98 <__cmpdf2+0x54>
 8000a60:	b001      	add	sp, #4
 8000a62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a66:	bf0c      	ite	eq
 8000a68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a6c:	ea91 0f03 	teqne	r1, r3
 8000a70:	bf02      	ittt	eq
 8000a72:	ea90 0f02 	teqeq	r0, r2
 8000a76:	2000      	moveq	r0, #0
 8000a78:	4770      	bxeq	lr
 8000a7a:	f110 0f00 	cmn.w	r0, #0
 8000a7e:	ea91 0f03 	teq	r1, r3
 8000a82:	bf58      	it	pl
 8000a84:	4299      	cmppl	r1, r3
 8000a86:	bf08      	it	eq
 8000a88:	4290      	cmpeq	r0, r2
 8000a8a:	bf2c      	ite	cs
 8000a8c:	17d8      	asrcs	r0, r3, #31
 8000a8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a92:	f040 0001 	orr.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__cmpdf2+0x64>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d107      	bne.n	8000ab8 <__cmpdf2+0x74>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d1d6      	bne.n	8000a60 <__cmpdf2+0x1c>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d0d3      	beq.n	8000a60 <__cmpdf2+0x1c>
 8000ab8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdrcmple>:
 8000ac0:	4684      	mov	ip, r0
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4662      	mov	r2, ip
 8000ac6:	468c      	mov	ip, r1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4663      	mov	r3, ip
 8000acc:	e000      	b.n	8000ad0 <__aeabi_cdcmpeq>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdcmpeq>:
 8000ad0:	b501      	push	{r0, lr}
 8000ad2:	f7ff ffb7 	bl	8000a44 <__cmpdf2>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	bf48      	it	mi
 8000ada:	f110 0f00 	cmnmi.w	r0, #0
 8000ade:	bd01      	pop	{r0, pc}

08000ae0 <__aeabi_dcmpeq>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff fff4 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000ae8:	bf0c      	ite	eq
 8000aea:	2001      	moveq	r0, #1
 8000aec:	2000      	movne	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmplt>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffea 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000afc:	bf34      	ite	cc
 8000afe:	2001      	movcc	r0, #1
 8000b00:	2000      	movcs	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmple>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffe0 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000b10:	bf94      	ite	ls
 8000b12:	2001      	movls	r0, #1
 8000b14:	2000      	movhi	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpge>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffce 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b24:	bf94      	ite	ls
 8000b26:	2001      	movls	r0, #1
 8000b28:	2000      	movhi	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmpgt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffc4 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpun>:
 8000b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x10>
 8000b4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b52:	d10a      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x20>
 8000b5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0001 	mov.w	r0, #1
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2iz>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b78:	d215      	bcs.n	8000ba6 <__aeabi_d2iz+0x36>
 8000b7a:	d511      	bpl.n	8000ba0 <__aeabi_d2iz+0x30>
 8000b7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b84:	d912      	bls.n	8000bac <__aeabi_d2iz+0x3c>
 8000b86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b96:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d105      	bne.n	8000bb8 <__aeabi_d2iz+0x48>
 8000bac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	bf08      	it	eq
 8000bb2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_d2uiz>:
 8000bc0:	004a      	lsls	r2, r1, #1
 8000bc2:	d211      	bcs.n	8000be8 <__aeabi_d2uiz+0x28>
 8000bc4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc8:	d211      	bcs.n	8000bee <__aeabi_d2uiz+0x2e>
 8000bca:	d50d      	bpl.n	8000be8 <__aeabi_d2uiz+0x28>
 8000bcc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd4:	d40e      	bmi.n	8000bf4 <__aeabi_d2uiz+0x34>
 8000bd6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bde:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000be2:	fa23 f002 	lsr.w	r0, r3, r2
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d102      	bne.n	8000bfa <__aeabi_d2uiz+0x3a>
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf8:	4770      	bx	lr
 8000bfa:	f04f 0000 	mov.w	r0, #0
 8000bfe:	4770      	bx	lr

08000c00 <__aeabi_d2f>:
 8000c00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c08:	bf24      	itt	cs
 8000c0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c12:	d90d      	bls.n	8000c30 <__aeabi_d2f+0x30>
 8000c14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c28:	bf08      	it	eq
 8000c2a:	f020 0001 	biceq.w	r0, r0, #1
 8000c2e:	4770      	bx	lr
 8000c30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c34:	d121      	bne.n	8000c7a <__aeabi_d2f+0x7a>
 8000c36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c3a:	bfbc      	itt	lt
 8000c3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	4770      	bxlt	lr
 8000c42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c4a:	f1c2 0218 	rsb	r2, r2, #24
 8000c4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c56:	fa20 f002 	lsr.w	r0, r0, r2
 8000c5a:	bf18      	it	ne
 8000c5c:	f040 0001 	orrne.w	r0, r0, #1
 8000c60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c6c:	ea40 000c 	orr.w	r0, r0, ip
 8000c70:	fa23 f302 	lsr.w	r3, r3, r2
 8000c74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c78:	e7cc      	b.n	8000c14 <__aeabi_d2f+0x14>
 8000c7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7e:	d107      	bne.n	8000c90 <__aeabi_d2f+0x90>
 8000c80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c84:	bf1e      	ittt	ne
 8000c86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8e:	4770      	bxne	lr
 8000c90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_uldivmod>:
 8000ca0:	b953      	cbnz	r3, 8000cb8 <__aeabi_uldivmod+0x18>
 8000ca2:	b94a      	cbnz	r2, 8000cb8 <__aeabi_uldivmod+0x18>
 8000ca4:	2900      	cmp	r1, #0
 8000ca6:	bf08      	it	eq
 8000ca8:	2800      	cmpeq	r0, #0
 8000caa:	bf1c      	itt	ne
 8000cac:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb4:	f000 b97a 	b.w	8000fac <__aeabi_idiv0>
 8000cb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc0:	f000 f806 	bl	8000cd0 <__udivmoddi4>
 8000cc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ccc:	b004      	add	sp, #16
 8000cce:	4770      	bx	lr

08000cd0 <__udivmoddi4>:
 8000cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd4:	468c      	mov	ip, r1
 8000cd6:	460d      	mov	r5, r1
 8000cd8:	4604      	mov	r4, r0
 8000cda:	9e08      	ldr	r6, [sp, #32]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d151      	bne.n	8000d84 <__udivmoddi4+0xb4>
 8000ce0:	428a      	cmp	r2, r1
 8000ce2:	4617      	mov	r7, r2
 8000ce4:	d96d      	bls.n	8000dc2 <__udivmoddi4+0xf2>
 8000ce6:	fab2 fe82 	clz	lr, r2
 8000cea:	f1be 0f00 	cmp.w	lr, #0
 8000cee:	d00b      	beq.n	8000d08 <__udivmoddi4+0x38>
 8000cf0:	f1ce 0c20 	rsb	ip, lr, #32
 8000cf4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000cf8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cfc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000d00:	ea4c 0c05 	orr.w	ip, ip, r5
 8000d04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d08:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000d0c:	0c25      	lsrs	r5, r4, #16
 8000d0e:	fbbc f8fa 	udiv	r8, ip, sl
 8000d12:	fa1f f987 	uxth.w	r9, r7
 8000d16:	fb0a cc18 	mls	ip, sl, r8, ip
 8000d1a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d1e:	fb08 f309 	mul.w	r3, r8, r9
 8000d22:	42ab      	cmp	r3, r5
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x6c>
 8000d26:	19ed      	adds	r5, r5, r7
 8000d28:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d2c:	f080 8123 	bcs.w	8000f76 <__udivmoddi4+0x2a6>
 8000d30:	42ab      	cmp	r3, r5
 8000d32:	f240 8120 	bls.w	8000f76 <__udivmoddi4+0x2a6>
 8000d36:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3a:	443d      	add	r5, r7
 8000d3c:	1aed      	subs	r5, r5, r3
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d44:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d4c:	fb00 f909 	mul.w	r9, r0, r9
 8000d50:	45a1      	cmp	r9, r4
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x98>
 8000d54:	19e4      	adds	r4, r4, r7
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	f080 810a 	bcs.w	8000f72 <__udivmoddi4+0x2a2>
 8000d5e:	45a1      	cmp	r9, r4
 8000d60:	f240 8107 	bls.w	8000f72 <__udivmoddi4+0x2a2>
 8000d64:	3802      	subs	r0, #2
 8000d66:	443c      	add	r4, r7
 8000d68:	eba4 0409 	sub.w	r4, r4, r9
 8000d6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d70:	2100      	movs	r1, #0
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d061      	beq.n	8000e3a <__udivmoddi4+0x16a>
 8000d76:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	6034      	str	r4, [r6, #0]
 8000d7e:	6073      	str	r3, [r6, #4]
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	428b      	cmp	r3, r1
 8000d86:	d907      	bls.n	8000d98 <__udivmoddi4+0xc8>
 8000d88:	2e00      	cmp	r6, #0
 8000d8a:	d054      	beq.n	8000e36 <__udivmoddi4+0x166>
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d92:	4608      	mov	r0, r1
 8000d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d98:	fab3 f183 	clz	r1, r3
 8000d9c:	2900      	cmp	r1, #0
 8000d9e:	f040 808e 	bne.w	8000ebe <__udivmoddi4+0x1ee>
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	d302      	bcc.n	8000dac <__udivmoddi4+0xdc>
 8000da6:	4282      	cmp	r2, r0
 8000da8:	f200 80fa 	bhi.w	8000fa0 <__udivmoddi4+0x2d0>
 8000dac:	1a84      	subs	r4, r0, r2
 8000dae:	eb65 0503 	sbc.w	r5, r5, r3
 8000db2:	2001      	movs	r0, #1
 8000db4:	46ac      	mov	ip, r5
 8000db6:	2e00      	cmp	r6, #0
 8000db8:	d03f      	beq.n	8000e3a <__udivmoddi4+0x16a>
 8000dba:	e886 1010 	stmia.w	r6, {r4, ip}
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	b912      	cbnz	r2, 8000dca <__udivmoddi4+0xfa>
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000dca:	fab7 fe87 	clz	lr, r7
 8000dce:	f1be 0f00 	cmp.w	lr, #0
 8000dd2:	d134      	bne.n	8000e3e <__udivmoddi4+0x16e>
 8000dd4:	1beb      	subs	r3, r5, r7
 8000dd6:	0c3a      	lsrs	r2, r7, #16
 8000dd8:	fa1f fc87 	uxth.w	ip, r7
 8000ddc:	2101      	movs	r1, #1
 8000dde:	fbb3 f8f2 	udiv	r8, r3, r2
 8000de2:	0c25      	lsrs	r5, r4, #16
 8000de4:	fb02 3318 	mls	r3, r2, r8, r3
 8000de8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dec:	fb0c f308 	mul.w	r3, ip, r8
 8000df0:	42ab      	cmp	r3, r5
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x134>
 8000df4:	19ed      	adds	r5, r5, r7
 8000df6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x132>
 8000dfc:	42ab      	cmp	r3, r5
 8000dfe:	f200 80d1 	bhi.w	8000fa4 <__udivmoddi4+0x2d4>
 8000e02:	4680      	mov	r8, r0
 8000e04:	1aed      	subs	r5, r5, r3
 8000e06:	b2a3      	uxth	r3, r4
 8000e08:	fbb5 f0f2 	udiv	r0, r5, r2
 8000e0c:	fb02 5510 	mls	r5, r2, r0, r5
 8000e10:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000e14:	fb0c fc00 	mul.w	ip, ip, r0
 8000e18:	45a4      	cmp	ip, r4
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x15c>
 8000e1c:	19e4      	adds	r4, r4, r7
 8000e1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x15a>
 8000e24:	45a4      	cmp	ip, r4
 8000e26:	f200 80b8 	bhi.w	8000f9a <__udivmoddi4+0x2ca>
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	eba4 040c 	sub.w	r4, r4, ip
 8000e30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e34:	e79d      	b.n	8000d72 <__udivmoddi4+0xa2>
 8000e36:	4631      	mov	r1, r6
 8000e38:	4630      	mov	r0, r6
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	f1ce 0420 	rsb	r4, lr, #32
 8000e42:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e4a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e4e:	0c3a      	lsrs	r2, r7, #16
 8000e50:	fa25 f404 	lsr.w	r4, r5, r4
 8000e54:	ea48 0803 	orr.w	r8, r8, r3
 8000e58:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e5c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e60:	fb02 4411 	mls	r4, r2, r1, r4
 8000e64:	fa1f fc87 	uxth.w	ip, r7
 8000e68:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e6c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e70:	42ab      	cmp	r3, r5
 8000e72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e76:	d909      	bls.n	8000e8c <__udivmoddi4+0x1bc>
 8000e78:	19ed      	adds	r5, r5, r7
 8000e7a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e7e:	f080 808a 	bcs.w	8000f96 <__udivmoddi4+0x2c6>
 8000e82:	42ab      	cmp	r3, r5
 8000e84:	f240 8087 	bls.w	8000f96 <__udivmoddi4+0x2c6>
 8000e88:	3902      	subs	r1, #2
 8000e8a:	443d      	add	r5, r7
 8000e8c:	1aeb      	subs	r3, r5, r3
 8000e8e:	fa1f f588 	uxth.w	r5, r8
 8000e92:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e96:	fb02 3310 	mls	r3, r2, r0, r3
 8000e9a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e9e:	fb00 f30c 	mul.w	r3, r0, ip
 8000ea2:	42ab      	cmp	r3, r5
 8000ea4:	d907      	bls.n	8000eb6 <__udivmoddi4+0x1e6>
 8000ea6:	19ed      	adds	r5, r5, r7
 8000ea8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eac:	d26f      	bcs.n	8000f8e <__udivmoddi4+0x2be>
 8000eae:	42ab      	cmp	r3, r5
 8000eb0:	d96d      	bls.n	8000f8e <__udivmoddi4+0x2be>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	443d      	add	r5, r7
 8000eb6:	1aeb      	subs	r3, r5, r3
 8000eb8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ebc:	e78f      	b.n	8000dde <__udivmoddi4+0x10e>
 8000ebe:	f1c1 0720 	rsb	r7, r1, #32
 8000ec2:	fa22 f807 	lsr.w	r8, r2, r7
 8000ec6:	408b      	lsls	r3, r1
 8000ec8:	fa05 f401 	lsl.w	r4, r5, r1
 8000ecc:	ea48 0303 	orr.w	r3, r8, r3
 8000ed0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000ed4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	ea4e 0e04 	orr.w	lr, lr, r4
 8000ede:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ee2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000ee6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000eea:	fa1f f883 	uxth.w	r8, r3
 8000eee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ef2:	fb09 f408 	mul.w	r4, r9, r8
 8000ef6:	42ac      	cmp	r4, r5
 8000ef8:	fa02 f201 	lsl.w	r2, r2, r1
 8000efc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x244>
 8000f02:	18ed      	adds	r5, r5, r3
 8000f04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f08:	d243      	bcs.n	8000f92 <__udivmoddi4+0x2c2>
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	d941      	bls.n	8000f92 <__udivmoddi4+0x2c2>
 8000f0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f12:	441d      	add	r5, r3
 8000f14:	1b2d      	subs	r5, r5, r4
 8000f16:	fa1f fe8e 	uxth.w	lr, lr
 8000f1a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000f1e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f22:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f26:	fb00 f808 	mul.w	r8, r0, r8
 8000f2a:	45a0      	cmp	r8, r4
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x26e>
 8000f2e:	18e4      	adds	r4, r4, r3
 8000f30:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f34:	d229      	bcs.n	8000f8a <__udivmoddi4+0x2ba>
 8000f36:	45a0      	cmp	r8, r4
 8000f38:	d927      	bls.n	8000f8a <__udivmoddi4+0x2ba>
 8000f3a:	3802      	subs	r0, #2
 8000f3c:	441c      	add	r4, r3
 8000f3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f42:	eba4 0408 	sub.w	r4, r4, r8
 8000f46:	fba0 8902 	umull	r8, r9, r0, r2
 8000f4a:	454c      	cmp	r4, r9
 8000f4c:	46c6      	mov	lr, r8
 8000f4e:	464d      	mov	r5, r9
 8000f50:	d315      	bcc.n	8000f7e <__udivmoddi4+0x2ae>
 8000f52:	d012      	beq.n	8000f7a <__udivmoddi4+0x2aa>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x29c>
 8000f56:	ebba 030e 	subs.w	r3, sl, lr
 8000f5a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40cb      	lsrs	r3, r1
 8000f64:	431f      	orrs	r7, r3
 8000f66:	40cc      	lsrs	r4, r1
 8000f68:	6037      	str	r7, [r6, #0]
 8000f6a:	6074      	str	r4, [r6, #4]
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f72:	4618      	mov	r0, r3
 8000f74:	e6f8      	b.n	8000d68 <__udivmoddi4+0x98>
 8000f76:	4690      	mov	r8, r2
 8000f78:	e6e0      	b.n	8000d3c <__udivmoddi4+0x6c>
 8000f7a:	45c2      	cmp	sl, r8
 8000f7c:	d2ea      	bcs.n	8000f54 <__udivmoddi4+0x284>
 8000f7e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f82:	eb69 0503 	sbc.w	r5, r9, r3
 8000f86:	3801      	subs	r0, #1
 8000f88:	e7e4      	b.n	8000f54 <__udivmoddi4+0x284>
 8000f8a:	4628      	mov	r0, r5
 8000f8c:	e7d7      	b.n	8000f3e <__udivmoddi4+0x26e>
 8000f8e:	4640      	mov	r0, r8
 8000f90:	e791      	b.n	8000eb6 <__udivmoddi4+0x1e6>
 8000f92:	4681      	mov	r9, r0
 8000f94:	e7be      	b.n	8000f14 <__udivmoddi4+0x244>
 8000f96:	4601      	mov	r1, r0
 8000f98:	e778      	b.n	8000e8c <__udivmoddi4+0x1bc>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	443c      	add	r4, r7
 8000f9e:	e745      	b.n	8000e2c <__udivmoddi4+0x15c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e708      	b.n	8000db6 <__udivmoddi4+0xe6>
 8000fa4:	f1a8 0802 	sub.w	r8, r8, #2
 8000fa8:	443d      	add	r5, r7
 8000faa:	e72b      	b.n	8000e04 <__udivmoddi4+0x134>

08000fac <__aeabi_idiv0>:
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop

08000fb0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fba:	4a0c      	ldr	r2, [pc, #48]	; (8000fec <HAL_Init+0x3c>)
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <HAL_Init+0x3c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc6:	2003      	movs	r0, #3
 8000fc8:	f000 f9b4 	bl	8001334 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f000 f80f 	bl	8000ff0 <HAL_InitTick>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d002      	beq.n	8000fde <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	71fb      	strb	r3, [r7, #7]
 8000fdc:	e001      	b.n	8000fe2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fde:	f008 f9c3 	bl	8009368 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40022000 	.word	0x40022000

08000ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <HAL_InitTick+0x68>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d022      	beq.n	800104a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <HAL_InitTick+0x6c>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b13      	ldr	r3, [pc, #76]	; (8001058 <HAL_InitTick+0x68>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001010:	fbb1 f3f3 	udiv	r3, r1, r3
 8001014:	fbb2 f3f3 	udiv	r3, r2, r3
 8001018:	4618      	mov	r0, r3
 800101a:	f000 f9d4 	bl	80013c6 <HAL_SYSTICK_Config>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d10f      	bne.n	8001044 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b0f      	cmp	r3, #15
 8001028:	d809      	bhi.n	800103e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800102a:	2200      	movs	r2, #0
 800102c:	6879      	ldr	r1, [r7, #4]
 800102e:	f04f 30ff 	mov.w	r0, #4294967295
 8001032:	f000 f98a 	bl	800134a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001036:	4a0a      	ldr	r2, [pc, #40]	; (8001060 <HAL_InitTick+0x70>)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	e007      	b.n	800104e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	73fb      	strb	r3, [r7, #15]
 8001042:	e004      	b.n	800104e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	73fb      	strb	r3, [r7, #15]
 8001048:	e001      	b.n	800104e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800104e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000004 	.word	0x20000004
 800105c:	2000000c 	.word	0x2000000c
 8001060:	20000000 	.word	0x20000000

08001064 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <HAL_IncTick+0x1c>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <HAL_IncTick+0x20>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4413      	add	r3, r2
 8001072:	4a03      	ldr	r2, [pc, #12]	; (8001080 <HAL_IncTick+0x1c>)
 8001074:	6013      	str	r3, [r2, #0]
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20000748 	.word	0x20000748
 8001084:	20000004 	.word	0x20000004

08001088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return uwTick;
 800108c:	4b02      	ldr	r3, [pc, #8]	; (8001098 <HAL_GetTick+0x10>)
 800108e:	681b      	ldr	r3, [r3, #0]
}
 8001090:	4618      	mov	r0, r3
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr
 8001098:	20000748 	.word	0x20000748

0800109c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a4:	f7ff fff0 	bl	8001088 <HAL_GetTick>
 80010a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b4:	d004      	beq.n	80010c0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <HAL_Delay+0x40>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	4413      	add	r3, r2
 80010be:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010c0:	bf00      	nop
 80010c2:	f7ff ffe1 	bl	8001088 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	1ad2      	subs	r2, r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d3f7      	bcc.n	80010c2 <HAL_Delay+0x26>
  {
  }
}
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000004 	.word	0x20000004

080010e0 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP0/STOP1/STOP2 modes.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80010e4:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 80010e6:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f043 0302 	orr.w	r3, r3, #2
 80010ee:	6053      	str	r3, [r2, #4]
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr
 80010f8:	e0042000 	.word	0xe0042000

080010fc <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8001100:	4a04      	ldr	r2, [pc, #16]	; (8001114 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8001102:	4b04      	ldr	r3, [pc, #16]	; (8001114 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f043 0304 	orr.w	r3, r3, #4
 800110a:	6053      	str	r3, [r2, #4]
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr
 8001114:	e0042000 	.word	0xe0042000

08001118 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <NVIC_SetPriorityGrouping+0x44>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001134:	4013      	ands	r3, r2
 8001136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001140:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114a:	4a04      	ldr	r2, [pc, #16]	; (800115c <NVIC_SetPriorityGrouping+0x44>)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	60d3      	str	r3, [r2, #12]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <NVIC_GetPriorityGrouping+0x18>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	f003 0307 	and.w	r3, r3, #7
}
 800116e:	4618      	mov	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001186:	4908      	ldr	r1, [pc, #32]	; (80011a8 <NVIC_EnableIRQ+0x2c>)
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	095b      	lsrs	r3, r3, #5
 800118e:	79fa      	ldrb	r2, [r7, #7]
 8001190:	f002 021f 	and.w	r2, r2, #31
 8001194:	2001      	movs	r0, #1
 8001196:	fa00 f202 	lsl.w	r2, r0, r2
 800119a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr
 80011a8:	e000e100 	.word	0xe000e100

080011ac <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80011b6:	4909      	ldr	r1, [pc, #36]	; (80011dc <NVIC_DisableIRQ+0x30>)
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	095b      	lsrs	r3, r3, #5
 80011be:	79fa      	ldrb	r2, [r7, #7]
 80011c0:	f002 021f 	and.w	r2, r2, #31
 80011c4:	2001      	movs	r0, #1
 80011c6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ca:	3320      	adds	r3, #32
 80011cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000e100 	.word	0xe000e100

080011e0 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80011ea:	4909      	ldr	r1, [pc, #36]	; (8001210 <NVIC_ClearPendingIRQ+0x30>)
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	095b      	lsrs	r3, r3, #5
 80011f2:	79fa      	ldrb	r2, [r7, #7]
 80011f4:	f002 021f 	and.w	r2, r2, #31
 80011f8:	2001      	movs	r0, #1
 80011fa:	fa00 f202 	lsl.w	r2, r0, r2
 80011fe:	3360      	adds	r3, #96	; 0x60
 8001200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000e100 	.word	0xe000e100

08001214 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	6039      	str	r1, [r7, #0]
 800121e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001224:	2b00      	cmp	r3, #0
 8001226:	da0b      	bge.n	8001240 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001228:	490d      	ldr	r1, [pc, #52]	; (8001260 <NVIC_SetPriority+0x4c>)
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	f003 030f 	and.w	r3, r3, #15
 8001230:	3b04      	subs	r3, #4
 8001232:	683a      	ldr	r2, [r7, #0]
 8001234:	b2d2      	uxtb	r2, r2
 8001236:	0112      	lsls	r2, r2, #4
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	440b      	add	r3, r1
 800123c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800123e:	e009      	b.n	8001254 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001240:	4908      	ldr	r1, [pc, #32]	; (8001264 <NVIC_SetPriority+0x50>)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	0112      	lsls	r2, r2, #4
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	440b      	add	r3, r1
 8001250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000ed00 	.word	0xe000ed00
 8001264:	e000e100 	.word	0xe000e100

08001268 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001268:	b480      	push	{r7}
 800126a:	b089      	sub	sp, #36	; 0x24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f1c3 0307 	rsb	r3, r3, #7
 8001282:	2b04      	cmp	r3, #4
 8001284:	bf28      	it	cs
 8001286:	2304      	movcs	r3, #4
 8001288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3304      	adds	r3, #4
 800128e:	2b06      	cmp	r3, #6
 8001290:	d902      	bls.n	8001298 <NVIC_EncodePriority+0x30>
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3b03      	subs	r3, #3
 8001296:	e000      	b.n	800129a <NVIC_EncodePriority+0x32>
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800129c:	2201      	movs	r2, #1
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	1e5a      	subs	r2, r3, #1
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	401a      	ands	r2, r3
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ae:	2101      	movs	r1, #1
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	fa01 f303 	lsl.w	r3, r1, r3
 80012b6:	1e59      	subs	r1, r3, #1
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	4313      	orrs	r3, r2
         );
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3724      	adds	r7, #36	; 0x24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012cc:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80012d0:	4905      	ldr	r1, [pc, #20]	; (80012e8 <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80012d2:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <NVIC_SystemReset+0x20>)
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80012da:	4b04      	ldr	r3, [pc, #16]	; (80012ec <NVIC_SystemReset+0x24>)
 80012dc:	4313      	orrs	r3, r2
 80012de:	60cb      	str	r3, [r1, #12]
 80012e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80012e4:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80012e6:	e7fd      	b.n	80012e4 <NVIC_SystemReset+0x1c>
 80012e8:	e000ed00 	.word	0xe000ed00
 80012ec:	05fa0004 	.word	0x05fa0004

080012f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001300:	d301      	bcc.n	8001306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001302:	2301      	movs	r3, #1
 8001304:	e00f      	b.n	8001326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001306:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <SysTick_Config+0x40>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130e:	210f      	movs	r1, #15
 8001310:	f04f 30ff 	mov.w	r0, #4294967295
 8001314:	f7ff ff7e 	bl	8001214 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <SysTick_Config+0x40>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <SysTick_Config+0x40>)
 8001320:	2207      	movs	r2, #7
 8001322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	e000e010 	.word	0xe000e010

08001334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff feeb 	bl	8001118 <NVIC_SetPriorityGrouping>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af00      	add	r7, sp, #0
 8001350:	4603      	mov	r3, r0
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800135c:	f7ff ff00 	bl	8001160 <NVIC_GetPriorityGrouping>
 8001360:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	68b9      	ldr	r1, [r7, #8]
 8001366:	6978      	ldr	r0, [r7, #20]
 8001368:	f7ff ff7e 	bl	8001268 <NVIC_EncodePriority>
 800136c:	4602      	mov	r2, r0
 800136e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff4d 	bl	8001214 <NVIC_SetPriority>
}
 800137a:	bf00      	nop
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	4603      	mov	r3, r0
 800138a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800138c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fef3 	bl	800117c <NVIC_EnableIRQ>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	4603      	mov	r3, r0
 80013a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80013a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fefd 	bl	80011ac <NVIC_DisableIRQ>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80013be:	f7ff ff83 	bl	80012c8 <NVIC_SystemReset>
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff ff8e 	bl	80012f0 <SysTick_Config>
 80013d4:	4603      	mov	r3, r0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	4603      	mov	r3, r0
 80013e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80013e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fef7 	bl	80011e0 <NVIC_ClearPendingIRQ>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e098      	b.n	8001540 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	461a      	mov	r2, r3
 8001414:	4b4d      	ldr	r3, [pc, #308]	; (800154c <HAL_DMA_Init+0x150>)
 8001416:	429a      	cmp	r2, r3
 8001418:	d80f      	bhi.n	800143a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	461a      	mov	r2, r3
 8001420:	4b4b      	ldr	r3, [pc, #300]	; (8001550 <HAL_DMA_Init+0x154>)
 8001422:	4413      	add	r3, r2
 8001424:	4a4b      	ldr	r2, [pc, #300]	; (8001554 <HAL_DMA_Init+0x158>)
 8001426:	fba2 2303 	umull	r2, r3, r2, r3
 800142a:	091b      	lsrs	r3, r3, #4
 800142c:	009a      	lsls	r2, r3, #2
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a48      	ldr	r2, [pc, #288]	; (8001558 <HAL_DMA_Init+0x15c>)
 8001436:	641a      	str	r2, [r3, #64]	; 0x40
 8001438:	e00e      	b.n	8001458 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	461a      	mov	r2, r3
 8001440:	4b46      	ldr	r3, [pc, #280]	; (800155c <HAL_DMA_Init+0x160>)
 8001442:	4413      	add	r3, r2
 8001444:	4a43      	ldr	r2, [pc, #268]	; (8001554 <HAL_DMA_Init+0x158>)
 8001446:	fba2 2303 	umull	r2, r3, r2, r3
 800144a:	091b      	lsrs	r3, r3, #4
 800144c:	009a      	lsls	r2, r3, #2
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a42      	ldr	r2, [pc, #264]	; (8001560 <HAL_DMA_Init+0x164>)
 8001456:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2202      	movs	r2, #2
 800145c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800146e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001472:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800147c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001488:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001494:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800149c:	68fa      	ldr	r2, [r7, #12]
 800149e:	4313      	orrs	r3, r2
 80014a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014b2:	d039      	beq.n	8001528 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	4a27      	ldr	r2, [pc, #156]	; (8001558 <HAL_DMA_Init+0x15c>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d11a      	bne.n	80014f4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80014be:	4929      	ldr	r1, [pc, #164]	; (8001564 <HAL_DMA_Init+0x168>)
 80014c0:	4b28      	ldr	r3, [pc, #160]	; (8001564 <HAL_DMA_Init+0x168>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c8:	f003 031c 	and.w	r3, r3, #28
 80014cc:	200f      	movs	r0, #15
 80014ce:	fa00 f303 	lsl.w	r3, r0, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	4013      	ands	r3, r2
 80014d6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80014d8:	4822      	ldr	r0, [pc, #136]	; (8001564 <HAL_DMA_Init+0x168>)
 80014da:	4b22      	ldr	r3, [pc, #136]	; (8001564 <HAL_DMA_Init+0x168>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6859      	ldr	r1, [r3, #4]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	f003 031c 	and.w	r3, r3, #28
 80014ea:	fa01 f303 	lsl.w	r3, r1, r3
 80014ee:	4313      	orrs	r3, r2
 80014f0:	6003      	str	r3, [r0, #0]
 80014f2:	e019      	b.n	8001528 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80014f4:	491c      	ldr	r1, [pc, #112]	; (8001568 <HAL_DMA_Init+0x16c>)
 80014f6:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <HAL_DMA_Init+0x16c>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	f003 031c 	and.w	r3, r3, #28
 8001502:	200f      	movs	r0, #15
 8001504:	fa00 f303 	lsl.w	r3, r0, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	4013      	ands	r3, r2
 800150c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800150e:	4816      	ldr	r0, [pc, #88]	; (8001568 <HAL_DMA_Init+0x16c>)
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <HAL_DMA_Init+0x16c>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6859      	ldr	r1, [r3, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151c:	f003 031c 	and.w	r3, r3, #28
 8001520:	fa01 f303 	lsl.w	r3, r1, r3
 8001524:	4313      	orrs	r3, r2
 8001526:	6003      	str	r3, [r0, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40020407 	.word	0x40020407
 8001550:	bffdfff8 	.word	0xbffdfff8
 8001554:	cccccccd 	.word	0xcccccccd
 8001558:	40020000 	.word	0x40020000
 800155c:	bffdfbf8 	.word	0xbffdfbf8
 8001560:	40020400 	.word	0x40020400
 8001564:	400200a8 	.word	0x400200a8
 8001568:	400204a8 	.word	0x400204a8

0800156c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e072      	b.n	8001664 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	6812      	ldr	r2, [r2, #0]
 8001586:	6812      	ldr	r2, [r2, #0]
 8001588:	f022 0201 	bic.w	r2, r2, #1
 800158c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	4b36      	ldr	r3, [pc, #216]	; (8001670 <HAL_DMA_DeInit+0x104>)
 8001596:	429a      	cmp	r2, r3
 8001598:	d80f      	bhi.n	80015ba <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	461a      	mov	r2, r3
 80015a0:	4b34      	ldr	r3, [pc, #208]	; (8001674 <HAL_DMA_DeInit+0x108>)
 80015a2:	4413      	add	r3, r2
 80015a4:	4a34      	ldr	r2, [pc, #208]	; (8001678 <HAL_DMA_DeInit+0x10c>)
 80015a6:	fba2 2303 	umull	r2, r3, r2, r3
 80015aa:	091b      	lsrs	r3, r3, #4
 80015ac:	009a      	lsls	r2, r3, #2
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a31      	ldr	r2, [pc, #196]	; (800167c <HAL_DMA_DeInit+0x110>)
 80015b6:	641a      	str	r2, [r3, #64]	; 0x40
 80015b8:	e00e      	b.n	80015d8 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	461a      	mov	r2, r3
 80015c0:	4b2f      	ldr	r3, [pc, #188]	; (8001680 <HAL_DMA_DeInit+0x114>)
 80015c2:	4413      	add	r3, r2
 80015c4:	4a2c      	ldr	r2, [pc, #176]	; (8001678 <HAL_DMA_DeInit+0x10c>)
 80015c6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ca:	091b      	lsrs	r3, r3, #4
 80015cc:	009a      	lsls	r2, r3, #2
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a2b      	ldr	r2, [pc, #172]	; (8001684 <HAL_DMA_DeInit+0x118>)
 80015d6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80015e8:	f002 021c 	and.w	r2, r2, #28
 80015ec:	2101      	movs	r1, #1
 80015ee:	fa01 f202 	lsl.w	r2, r1, r2
 80015f2:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	4a20      	ldr	r2, [pc, #128]	; (800167c <HAL_DMA_DeInit+0x110>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d10d      	bne.n	800161a <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80015fe:	4922      	ldr	r1, [pc, #136]	; (8001688 <HAL_DMA_DeInit+0x11c>)
 8001600:	4b21      	ldr	r3, [pc, #132]	; (8001688 <HAL_DMA_DeInit+0x11c>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001608:	f003 031c 	and.w	r3, r3, #28
 800160c:	200f      	movs	r0, #15
 800160e:	fa00 f303 	lsl.w	r3, r0, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	4013      	ands	r3, r2
 8001616:	600b      	str	r3, [r1, #0]
 8001618:	e00c      	b.n	8001634 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800161a:	491c      	ldr	r1, [pc, #112]	; (800168c <HAL_DMA_DeInit+0x120>)
 800161c:	4b1b      	ldr	r3, [pc, #108]	; (800168c <HAL_DMA_DeInit+0x120>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001624:	f003 031c 	and.w	r3, r3, #28
 8001628:	200f      	movs	r0, #15
 800162a:	fa00 f303 	lsl.w	r3, r0, r3
 800162e:	43db      	mvns	r3, r3
 8001630:	4013      	ands	r3, r2
 8001632:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40020407 	.word	0x40020407
 8001674:	bffdfff8 	.word	0xbffdfff8
 8001678:	cccccccd 	.word	0xcccccccd
 800167c:	40020000 	.word	0x40020000
 8001680:	bffdfbf8 	.word	0xbffdfbf8
 8001684:	40020400 	.word	0x40020400
 8001688:	400200a8 	.word	0x400200a8
 800168c:	400204a8 	.word	0x400204a8

08001690 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
 800169c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d101      	bne.n	80016b0 <HAL_DMA_Start+0x20>
 80016ac:	2302      	movs	r3, #2
 80016ae:	e02e      	b.n	800170e <HAL_DMA_Start+0x7e>
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d11d      	bne.n	8001700 <HAL_DMA_Start+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2202      	movs	r2, #2
 80016c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2200      	movs	r2, #0
 80016d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	6812      	ldr	r2, [r2, #0]
 80016da:	6812      	ldr	r2, [r2, #0]
 80016dc:	f022 0201 	bic.w	r2, r2, #1
 80016e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	68b9      	ldr	r1, [r7, #8]
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f000 f9ac 	bl	8001a46 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	6812      	ldr	r2, [r2, #0]
 80016f6:	6812      	ldr	r2, [r2, #0]
 80016f8:	f042 0201 	orr.w	r2, r2, #1
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	e005      	b.n	800170c <HAL_DMA_Start+0x7c>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    status = HAL_BUSY;
 8001708:	2302      	movs	r3, #2
 800170a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800170c:	7dfb      	ldrb	r3, [r7, #23]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b086      	sub	sp, #24
 800171a:	af00      	add	r7, sp, #0
 800171c:	60f8      	str	r0, [r7, #12]
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	607a      	str	r2, [r7, #4]
 8001722:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001724:	2300      	movs	r3, #0
 8001726:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800172e:	2b01      	cmp	r3, #1
 8001730:	d101      	bne.n	8001736 <HAL_DMA_Start_IT+0x20>
 8001732:	2302      	movs	r3, #2
 8001734:	e04b      	b.n	80017ce <HAL_DMA_Start_IT+0xb8>
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b01      	cmp	r3, #1
 8001748:	d13a      	bne.n	80017c0 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2202      	movs	r2, #2
 800174e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2200      	movs	r2, #0
 8001756:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	6812      	ldr	r2, [r2, #0]
 8001760:	6812      	ldr	r2, [r2, #0]
 8001762:	f022 0201 	bic.w	r2, r2, #1
 8001766:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	68b9      	ldr	r1, [r7, #8]
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f000 f969 	bl	8001a46 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001778:	2b00      	cmp	r3, #0
 800177a:	d008      	beq.n	800178e <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	6812      	ldr	r2, [r2, #0]
 8001784:	6812      	ldr	r2, [r2, #0]
 8001786:	f042 020e 	orr.w	r2, r2, #14
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	e00f      	b.n	80017ae <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	6812      	ldr	r2, [r2, #0]
 8001796:	6812      	ldr	r2, [r2, #0]
 8001798:	f022 0204 	bic.w	r2, r2, #4
 800179c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	6812      	ldr	r2, [r2, #0]
 80017a6:	6812      	ldr	r2, [r2, #0]
 80017a8:	f042 020a 	orr.w	r2, r2, #10
 80017ac:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	6812      	ldr	r2, [r2, #0]
 80017b6:	6812      	ldr	r2, [r2, #0]
 80017b8:	f042 0201 	orr.w	r2, r2, #1
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	e005      	b.n	80017cc <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80017c8:	2302      	movs	r3, #2
 80017ca:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80017cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b085      	sub	sp, #20
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017de:	2300      	movs	r3, #0
 80017e0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d008      	beq.n	8001800 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2204      	movs	r2, #4
 80017f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e022      	b.n	8001846 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6812      	ldr	r2, [r2, #0]
 8001808:	6812      	ldr	r2, [r2, #0]
 800180a:	f022 020e 	bic.w	r2, r2, #14
 800180e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	6812      	ldr	r2, [r2, #0]
 800181a:	f022 0201 	bic.w	r2, r2, #1
 800181e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001828:	f002 021c 	and.w	r2, r2, #28
 800182c:	2101      	movs	r1, #1
 800182e:	fa01 f202 	lsl.w	r2, r1, r2
 8001832:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001844:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001846:	4618      	mov	r0, r3
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001858:	2300      	movs	r3, #0
 800185a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d005      	beq.n	8001874 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2204      	movs	r2, #4
 800186c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	73fb      	strb	r3, [r7, #15]
 8001872:	e029      	b.n	80018c8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6812      	ldr	r2, [r2, #0]
 800187c:	6812      	ldr	r2, [r2, #0]
 800187e:	f022 020e 	bic.w	r2, r2, #14
 8001882:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6812      	ldr	r2, [r2, #0]
 800188c:	6812      	ldr	r2, [r2, #0]
 800188e:	f022 0201 	bic.w	r2, r2, #1
 8001892:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800189c:	f002 021c 	and.w	r2, r2, #28
 80018a0:	2101      	movs	r1, #1
 80018a2:	fa01 f202 	lsl.w	r2, r1, r2
 80018a6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	4798      	blx	r3
    }
  }
  return status;
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b084      	sub	sp, #16
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	f003 031c 	and.w	r3, r3, #28
 80018f2:	2204      	movs	r2, #4
 80018f4:	409a      	lsls	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4013      	ands	r3, r2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d026      	beq.n	800194c <HAL_DMA_IRQHandler+0x7a>
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	d021      	beq.n	800194c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0320 	and.w	r3, r3, #32
 8001912:	2b00      	cmp	r3, #0
 8001914:	d107      	bne.n	8001926 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6812      	ldr	r2, [r2, #0]
 800191e:	6812      	ldr	r2, [r2, #0]
 8001920:	f022 0204 	bic.w	r2, r2, #4
 8001924:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800192e:	f002 021c 	and.w	r2, r2, #28
 8001932:	2104      	movs	r1, #4
 8001934:	fa01 f202 	lsl.w	r2, r1, r2
 8001938:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	2b00      	cmp	r3, #0
 8001940:	d071      	beq.n	8001a26 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800194a:	e06c      	b.n	8001a26 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001950:	f003 031c 	and.w	r3, r3, #28
 8001954:	2202      	movs	r2, #2
 8001956:	409a      	lsls	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4013      	ands	r3, r2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d02e      	beq.n	80019be <HAL_DMA_IRQHandler+0xec>
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d029      	beq.n	80019be <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0320 	and.w	r3, r3, #32
 8001974:	2b00      	cmp	r3, #0
 8001976:	d10b      	bne.n	8001990 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6812      	ldr	r2, [r2, #0]
 8001980:	6812      	ldr	r2, [r2, #0]
 8001982:	f022 020a 	bic.w	r2, r2, #10
 8001986:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001998:	f002 021c 	and.w	r2, r2, #28
 800199c:	2102      	movs	r1, #2
 800199e:	fa01 f202 	lsl.w	r2, r1, r2
 80019a2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d038      	beq.n	8001a26 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80019bc:	e033      	b.n	8001a26 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	f003 031c 	and.w	r3, r3, #28
 80019c6:	2208      	movs	r2, #8
 80019c8:	409a      	lsls	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4013      	ands	r3, r2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d02a      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x156>
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	f003 0308 	and.w	r3, r3, #8
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d025      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	f022 020e 	bic.w	r2, r2, #14
 80019ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80019f4:	f002 021c 	and.w	r2, r2, #28
 80019f8:	2101      	movs	r1, #1
 80019fa:	fa01 f202 	lsl.w	r2, r1, r2
 80019fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d004      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001a26:	bf00      	nop
 8001a28:	bf00      	nop
}
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bc80      	pop	{r7}
 8001a44:	4770      	bx	lr

08001a46 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b085      	sub	sp, #20
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	60f8      	str	r0, [r7, #12]
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a5c:	f002 021c 	and.w	r2, r2, #28
 8001a60:	2101      	movs	r1, #1
 8001a62:	fa01 f202 	lsl.w	r2, r1, r2
 8001a66:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2b10      	cmp	r3, #16
 8001a76:	d108      	bne.n	8001a8a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68ba      	ldr	r2, [r7, #8]
 8001a86:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a88:	e007      	b.n	8001a9a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	60da      	str	r2, [r3, #12]
}
 8001a9a:	bf00      	nop
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b087      	sub	sp, #28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab2:	e17f      	b.n	8001db4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	2101      	movs	r1, #1
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 8171 	beq.w	8001dae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d00b      	beq.n	8001aec <HAL_GPIO_Init+0x48>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d007      	beq.n	8001aec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ae0:	2b11      	cmp	r3, #17
 8001ae2:	d003      	beq.n	8001aec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b12      	cmp	r3, #18
 8001aea:	d130      	bne.n	8001b4e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	2203      	movs	r2, #3
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	68da      	ldr	r2, [r3, #12]
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b22:	2201      	movs	r2, #1
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	091b      	lsrs	r3, r3, #4
 8001b38:	f003 0201 	and.w	r2, r3, #1
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	d118      	bne.n	8001b8c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b60:	2201      	movs	r2, #1
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	08db      	lsrs	r3, r3, #3
 8001b76:	f003 0201 	and.w	r2, r3, #1
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	2203      	movs	r2, #3
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d003      	beq.n	8001bcc <HAL_GPIO_Init+0x128>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b12      	cmp	r3, #18
 8001bca:	d123      	bne.n	8001c14 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	08da      	lsrs	r2, r3, #3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3208      	adds	r2, #8
 8001bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	220f      	movs	r2, #15
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	691a      	ldr	r2, [r3, #16]
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	08da      	lsrs	r2, r3, #3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	3208      	adds	r2, #8
 8001c0e:	6939      	ldr	r1, [r7, #16]
 8001c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	2203      	movs	r2, #3
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 0203 	and.w	r2, r3, #3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 80ac 	beq.w	8001dae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c56:	4a5e      	ldr	r2, [pc, #376]	; (8001dd0 <HAL_GPIO_Init+0x32c>)
 8001c58:	4b5d      	ldr	r3, [pc, #372]	; (8001dd0 <HAL_GPIO_Init+0x32c>)
 8001c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6613      	str	r3, [r2, #96]	; 0x60
 8001c62:	4b5b      	ldr	r3, [pc, #364]	; (8001dd0 <HAL_GPIO_Init+0x32c>)
 8001c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c6e:	4a59      	ldr	r2, [pc, #356]	; (8001dd4 <HAL_GPIO_Init+0x330>)
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	089b      	lsrs	r3, r3, #2
 8001c74:	3302      	adds	r3, #2
 8001c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	220f      	movs	r2, #15
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c98:	d025      	beq.n	8001ce6 <HAL_GPIO_Init+0x242>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a4e      	ldr	r2, [pc, #312]	; (8001dd8 <HAL_GPIO_Init+0x334>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d01f      	beq.n	8001ce2 <HAL_GPIO_Init+0x23e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a4d      	ldr	r2, [pc, #308]	; (8001ddc <HAL_GPIO_Init+0x338>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d019      	beq.n	8001cde <HAL_GPIO_Init+0x23a>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a4c      	ldr	r2, [pc, #304]	; (8001de0 <HAL_GPIO_Init+0x33c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d013      	beq.n	8001cda <HAL_GPIO_Init+0x236>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a4b      	ldr	r2, [pc, #300]	; (8001de4 <HAL_GPIO_Init+0x340>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d00d      	beq.n	8001cd6 <HAL_GPIO_Init+0x232>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a4a      	ldr	r2, [pc, #296]	; (8001de8 <HAL_GPIO_Init+0x344>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d007      	beq.n	8001cd2 <HAL_GPIO_Init+0x22e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a49      	ldr	r2, [pc, #292]	; (8001dec <HAL_GPIO_Init+0x348>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d101      	bne.n	8001cce <HAL_GPIO_Init+0x22a>
 8001cca:	2306      	movs	r3, #6
 8001ccc:	e00c      	b.n	8001ce8 <HAL_GPIO_Init+0x244>
 8001cce:	2307      	movs	r3, #7
 8001cd0:	e00a      	b.n	8001ce8 <HAL_GPIO_Init+0x244>
 8001cd2:	2305      	movs	r3, #5
 8001cd4:	e008      	b.n	8001ce8 <HAL_GPIO_Init+0x244>
 8001cd6:	2304      	movs	r3, #4
 8001cd8:	e006      	b.n	8001ce8 <HAL_GPIO_Init+0x244>
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e004      	b.n	8001ce8 <HAL_GPIO_Init+0x244>
 8001cde:	2302      	movs	r3, #2
 8001ce0:	e002      	b.n	8001ce8 <HAL_GPIO_Init+0x244>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <HAL_GPIO_Init+0x244>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	f002 0203 	and.w	r2, r2, #3
 8001cee:	0092      	lsls	r2, r2, #2
 8001cf0:	4093      	lsls	r3, r2
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cf8:	4936      	ldr	r1, [pc, #216]	; (8001dd4 <HAL_GPIO_Init+0x330>)
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	089b      	lsrs	r3, r3, #2
 8001cfe:	3302      	adds	r3, #2
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d06:	4b3a      	ldr	r3, [pc, #232]	; (8001df0 <HAL_GPIO_Init+0x34c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	4013      	ands	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d2a:	4a31      	ldr	r2, [pc, #196]	; (8001df0 <HAL_GPIO_Init+0x34c>)
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001d30:	4b2f      	ldr	r3, [pc, #188]	; (8001df0 <HAL_GPIO_Init+0x34c>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d54:	4a26      	ldr	r2, [pc, #152]	; (8001df0 <HAL_GPIO_Init+0x34c>)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d5a:	4b25      	ldr	r3, [pc, #148]	; (8001df0 <HAL_GPIO_Init+0x34c>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	43db      	mvns	r3, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4013      	ands	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d7e:	4a1c      	ldr	r2, [pc, #112]	; (8001df0 <HAL_GPIO_Init+0x34c>)
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d84:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <HAL_GPIO_Init+0x34c>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4013      	ands	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001da8:	4a11      	ldr	r2, [pc, #68]	; (8001df0 <HAL_GPIO_Init+0x34c>)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	3301      	adds	r3, #1
 8001db2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f47f ae78 	bne.w	8001ab4 <HAL_GPIO_Init+0x10>
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	371c      	adds	r7, #28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40010000 	.word	0x40010000
 8001dd8:	48000400 	.word	0x48000400
 8001ddc:	48000800 	.word	0x48000800
 8001de0:	48000c00 	.word	0x48000c00
 8001de4:	48001000 	.word	0x48001000
 8001de8:	48001400 	.word	0x48001400
 8001dec:	48001800 	.word	0x48001800
 8001df0:	40010400 	.word	0x40010400

08001df4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b087      	sub	sp, #28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001e02:	e0cd      	b.n	8001fa0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001e04:	2201      	movs	r2, #1
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	409a      	lsls	r2, r3
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 80c1 	beq.w	8001f9a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001e18:	4a67      	ldr	r2, [pc, #412]	; (8001fb8 <HAL_GPIO_DeInit+0x1c4>)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	089b      	lsrs	r3, r3, #2
 8001e1e:	3302      	adds	r3, #2
 8001e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e24:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	220f      	movs	r2, #15
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	4013      	ands	r3, r2
 8001e38:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e40:	d025      	beq.n	8001e8e <HAL_GPIO_DeInit+0x9a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a5d      	ldr	r2, [pc, #372]	; (8001fbc <HAL_GPIO_DeInit+0x1c8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d01f      	beq.n	8001e8a <HAL_GPIO_DeInit+0x96>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a5c      	ldr	r2, [pc, #368]	; (8001fc0 <HAL_GPIO_DeInit+0x1cc>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d019      	beq.n	8001e86 <HAL_GPIO_DeInit+0x92>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a5b      	ldr	r2, [pc, #364]	; (8001fc4 <HAL_GPIO_DeInit+0x1d0>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d013      	beq.n	8001e82 <HAL_GPIO_DeInit+0x8e>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a5a      	ldr	r2, [pc, #360]	; (8001fc8 <HAL_GPIO_DeInit+0x1d4>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d00d      	beq.n	8001e7e <HAL_GPIO_DeInit+0x8a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a59      	ldr	r2, [pc, #356]	; (8001fcc <HAL_GPIO_DeInit+0x1d8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d007      	beq.n	8001e7a <HAL_GPIO_DeInit+0x86>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a58      	ldr	r2, [pc, #352]	; (8001fd0 <HAL_GPIO_DeInit+0x1dc>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d101      	bne.n	8001e76 <HAL_GPIO_DeInit+0x82>
 8001e72:	2306      	movs	r3, #6
 8001e74:	e00c      	b.n	8001e90 <HAL_GPIO_DeInit+0x9c>
 8001e76:	2307      	movs	r3, #7
 8001e78:	e00a      	b.n	8001e90 <HAL_GPIO_DeInit+0x9c>
 8001e7a:	2305      	movs	r3, #5
 8001e7c:	e008      	b.n	8001e90 <HAL_GPIO_DeInit+0x9c>
 8001e7e:	2304      	movs	r3, #4
 8001e80:	e006      	b.n	8001e90 <HAL_GPIO_DeInit+0x9c>
 8001e82:	2303      	movs	r3, #3
 8001e84:	e004      	b.n	8001e90 <HAL_GPIO_DeInit+0x9c>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e002      	b.n	8001e90 <HAL_GPIO_DeInit+0x9c>
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <HAL_GPIO_DeInit+0x9c>
 8001e8e:	2300      	movs	r3, #0
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	f002 0203 	and.w	r2, r2, #3
 8001e96:	0092      	lsls	r2, r2, #2
 8001e98:	fa03 f202 	lsl.w	r2, r3, r2
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d132      	bne.n	8001f08 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001ea2:	494c      	ldr	r1, [pc, #304]	; (8001fd4 <HAL_GPIO_DeInit+0x1e0>)
 8001ea4:	4b4b      	ldr	r3, [pc, #300]	; (8001fd4 <HAL_GPIO_DeInit+0x1e0>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	4013      	ands	r3, r2
 8001eae:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001eb0:	4948      	ldr	r1, [pc, #288]	; (8001fd4 <HAL_GPIO_DeInit+0x1e0>)
 8001eb2:	4b48      	ldr	r3, [pc, #288]	; (8001fd4 <HAL_GPIO_DeInit+0x1e0>)
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	4013      	ands	r3, r2
 8001ebc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001ebe:	4945      	ldr	r1, [pc, #276]	; (8001fd4 <HAL_GPIO_DeInit+0x1e0>)
 8001ec0:	4b44      	ldr	r3, [pc, #272]	; (8001fd4 <HAL_GPIO_DeInit+0x1e0>)
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	4013      	ands	r3, r2
 8001eca:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001ecc:	4941      	ldr	r1, [pc, #260]	; (8001fd4 <HAL_GPIO_DeInit+0x1e0>)
 8001ece:	4b41      	ldr	r3, [pc, #260]	; (8001fd4 <HAL_GPIO_DeInit+0x1e0>)
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	220f      	movs	r2, #15
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001eea:	4833      	ldr	r0, [pc, #204]	; (8001fb8 <HAL_GPIO_DeInit+0x1c4>)
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	089b      	lsrs	r3, r3, #2
 8001ef0:	4931      	ldr	r1, [pc, #196]	; (8001fb8 <HAL_GPIO_DeInit+0x1c4>)
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	0892      	lsrs	r2, r2, #2
 8001ef6:	3202      	adds	r2, #2
 8001ef8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	43d2      	mvns	r2, r2
 8001f00:	400a      	ands	r2, r1
 8001f02:	3302      	adds	r3, #2
 8001f04:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	2103      	movs	r1, #3
 8001f12:	fa01 f303 	lsl.w	r3, r1, r3
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	08da      	lsrs	r2, r3, #3
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	08d9      	lsrs	r1, r3, #3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3108      	adds	r1, #8
 8001f28:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	200f      	movs	r0, #15
 8001f36:	fa00 f303 	lsl.w	r3, r0, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	4019      	ands	r1, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3208      	adds	r2, #8
 8001f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	2103      	movs	r1, #3
 8001f50:	fa01 f303 	lsl.w	r3, r1, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	401a      	ands	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	2101      	movs	r1, #1
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	fa01 f303 	lsl.w	r3, r1, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68da      	ldr	r2, [r3, #12]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	2103      	movs	r1, #3
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	401a      	ands	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	401a      	ands	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f47f af2b 	bne.w	8001e04 <HAL_GPIO_DeInit+0x10>
  }
}
 8001fae:	bf00      	nop
 8001fb0:	371c      	adds	r7, #28
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr
 8001fb8:	40010000 	.word	0x40010000
 8001fbc:	48000400 	.word	0x48000400
 8001fc0:	48000800 	.word	0x48000800
 8001fc4:	48000c00 	.word	0x48000c00
 8001fc8:	48001000 	.word	0x48001000
 8001fcc:	48001400 	.word	0x48001400
 8001fd0:	48001800 	.word	0x48001800
 8001fd4:	40010400 	.word	0x40010400

08001fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	807b      	strh	r3, [r7, #2]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fe8:	787b      	ldrb	r3, [r7, #1]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fee:	887a      	ldrh	r2, [r7, #2]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ff4:	e002      	b.n	8001ffc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ff6:	887a      	ldrh	r2, [r7, #2]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr

08002006 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	460b      	mov	r3, r1
 8002010:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695a      	ldr	r2, [r3, #20]
 8002016:	887b      	ldrh	r3, [r7, #2]
 8002018:	4013      	ands	r3, r2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800201e:	887a      	ldrh	r2, [r7, #2]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002024:	e002      	b.n	800202c <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002026:	887a      	ldrh	r2, [r7, #2]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	619a      	str	r2, [r3, #24]
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr
	...

08002038 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800203c:	4a04      	ldr	r2, [pc, #16]	; (8002050 <HAL_PWR_EnableBkUpAccess+0x18>)
 800203e:	4b04      	ldr	r3, [pc, #16]	; (8002050 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002046:	6013      	str	r3, [r2, #0]
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr
 8002050:	40007000 	.word	0x40007000

08002054 <HAL_PWR_DisableBkUpAccess>:
  * @brief Disable access to the backup domain
  *        (RTC registers, RTC backup data registers).
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8002058:	4a04      	ldr	r2, [pc, #16]	; (800206c <HAL_PWR_DisableBkUpAccess+0x18>)
 800205a:	4b04      	ldr	r3, [pc, #16]	; (800206c <HAL_PWR_DisableBkUpAccess+0x18>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002062:	6013      	str	r3, [r2, #0]
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	40007000 	.word	0x40007000

08002070 <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8002078:	490c      	ldr	r1, [pc, #48]	; (80020ac <HAL_PWR_EnableWakeUpPin+0x3c>)
 800207a:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <HAL_PWR_EnableWakeUpPin+0x3c>)
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f003 031f 	and.w	r3, r3, #31
 8002084:	43db      	mvns	r3, r3
 8002086:	401a      	ands	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	095b      	lsrs	r3, r3, #5
 800208c:	4313      	orrs	r3, r2
 800208e:	60cb      	str	r3, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 8002090:	4906      	ldr	r1, [pc, #24]	; (80020ac <HAL_PWR_EnableWakeUpPin+0x3c>)
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_PWR_EnableWakeUpPin+0x3c>)
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f003 031f 	and.w	r3, r3, #31
 800209c:	4313      	orrs	r3, r2
 800209e:	608b      	str	r3, [r1, #8]


}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40007000 	.word	0x40007000

080020b0 <HAL_PWR_DisableWakeUpPin>:
  *         This parameter can be one of the following values:
  *           @arg @ref PWR_WAKEUP_PIN1, PWR_WAKEUP_PIN2, PWR_WAKEUP_PIN3, PWR_WAKEUP_PIN4, PWR_WAKEUP_PIN5
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 80020b8:	4906      	ldr	r1, [pc, #24]	; (80020d4 <HAL_PWR_DisableWakeUpPin+0x24>)
 80020ba:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <HAL_PWR_DisableWakeUpPin+0x24>)
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f003 031f 	and.w	r3, r3, #31
 80020c4:	43db      	mvns	r3, r3
 80020c6:	4013      	ands	r3, r2
 80020c8:	608b      	str	r3, [r1, #8]
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr
 80020d4:	40007000 	.word	0x40007000

080020d8 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 80020dc:	4a09      	ldr	r2, [pc, #36]	; (8002104 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80020de:	4b09      	ldr	r3, [pc, #36]	; (8002104 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 0307 	bic.w	r3, r3, #7
 80020e6:	f043 0303 	orr.w	r3, r3, #3
 80020ea:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80020ec:	4a06      	ldr	r2, [pc, #24]	; (8002108 <HAL_PWR_EnterSTANDBYMode+0x30>)
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_PWR_EnterSTANDBYMode+0x30>)
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	f043 0304 	orr.w	r3, r3, #4
 80020f6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfi");
 80020f8:	bf30      	wfi
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 80020fa:	bf00      	nop
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40007000 	.word	0x40007000
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <HAL_PWREx_GetVoltageRange+0x14>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr
 8002120:	40007000 	.word	0x40007000

08002124 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002132:	d130      	bne.n	8002196 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002134:	4b22      	ldr	r3, [pc, #136]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800213c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002140:	d038      	beq.n	80021b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002142:	4a1f      	ldr	r2, [pc, #124]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8002144:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800214c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002150:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002152:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2232      	movs	r2, #50	; 0x32
 8002158:	fb02 f303 	mul.w	r3, r2, r3
 800215c:	4a1a      	ldr	r2, [pc, #104]	; (80021c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800215e:	fba2 2303 	umull	r2, r3, r2, r3
 8002162:	0c9b      	lsrs	r3, r3, #18
 8002164:	3301      	adds	r3, #1
 8002166:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002168:	e002      	b.n	8002170 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	3b01      	subs	r3, #1
 800216e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002170:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800217c:	d102      	bne.n	8002184 <HAL_PWREx_ControlVoltageScaling+0x60>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1f2      	bne.n	800216a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002184:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002190:	d110      	bne.n	80021b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e00f      	b.n	80021b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002196:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800219e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021a2:	d007      	beq.n	80021b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021a4:	4a06      	ldr	r2, [pc, #24]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc80      	pop	{r7}
 80021be:	4770      	bx	lr
 80021c0:	40007000 	.word	0x40007000
 80021c4:	2000000c 	.word	0x2000000c
 80021c8:	431bde83 	.word	0x431bde83

080021cc <HAL_PWREx_EnableInternalWakeUpLine>:
/**
  * @brief Enable Internal Wake-up Line.
  * @retval None
  */
void HAL_PWREx_EnableInternalWakeUpLine(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_EIWF);
 80021d0:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <HAL_PWREx_EnableInternalWakeUpLine+0x18>)
 80021d2:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <HAL_PWREx_EnableInternalWakeUpLine+0x18>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021da:	6093      	str	r3, [r2, #8]
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr
 80021e4:	40007000 	.word	0x40007000

080021e8 <HAL_PWREx_DisableInternalWakeUpLine>:
/**
  * @brief Disable Internal Wake-up Line.
  * @retval None
  */
void HAL_PWREx_DisableInternalWakeUpLine(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_EIWF);
 80021ec:	4a04      	ldr	r2, [pc, #16]	; (8002200 <HAL_PWREx_DisableInternalWakeUpLine+0x18>)
 80021ee:	4b04      	ldr	r3, [pc, #16]	; (8002200 <HAL_PWREx_DisableInternalWakeUpLine+0x18>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80021f6:	6093      	str	r3, [r2, #8]
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr
 8002200:	40007000 	.word	0x40007000

08002204 <HAL_PWREx_EnterSHUTDOWNMode>:
  *        The BOR is not available.
  * @note  The I/Os can be configured either with a pull-up or pull-down or can be kept in analog state.
  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0

  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_SHUTDOWN);
 8002208:	4a09      	ldr	r2, [pc, #36]	; (8002230 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 800220a:	4b09      	ldr	r3, [pc, #36]	; (8002230 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f023 0307 	bic.w	r3, r3, #7
 8002212:	f043 0304 	orr.w	r3, r3, #4
 8002216:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002218:	4a06      	ldr	r2, [pc, #24]	; (8002234 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 800221a:	4b06      	ldr	r3, [pc, #24]	; (8002234 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	f043 0304 	orr.w	r3, r3, #4
 8002222:	6113      	str	r3, [r2, #16]
 8002224:	bf30      	wfi
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 8002226:	bf00      	nop
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40007000 	.word	0x40007000
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b088      	sub	sp, #32
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e3d4      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800224a:	4ba1      	ldr	r3, [pc, #644]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 030c 	and.w	r3, r3, #12
 8002252:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002254:	4b9e      	ldr	r3, [pc, #632]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0310 	and.w	r3, r3, #16
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 80e4 	beq.w	8002434 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d007      	beq.n	8002282 <HAL_RCC_OscConfig+0x4a>
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	2b0c      	cmp	r3, #12
 8002276:	f040 808b 	bne.w	8002390 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2b01      	cmp	r3, #1
 800227e:	f040 8087 	bne.w	8002390 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002282:	4b93      	ldr	r3, [pc, #588]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d005      	beq.n	800229a <HAL_RCC_OscConfig+0x62>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e3ac      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1a      	ldr	r2, [r3, #32]
 800229e:	4b8c      	ldr	r3, [pc, #560]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d004      	beq.n	80022b4 <HAL_RCC_OscConfig+0x7c>
 80022aa:	4b89      	ldr	r3, [pc, #548]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022b2:	e005      	b.n	80022c0 <HAL_RCC_OscConfig+0x88>
 80022b4:	4b86      	ldr	r3, [pc, #536]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80022b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ba:	091b      	lsrs	r3, r3, #4
 80022bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d923      	bls.n	800230c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f000 fd71 	bl	8002db0 <RCC_SetFlashLatencyFromMSIRange>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e38d      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022d8:	4a7d      	ldr	r2, [pc, #500]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80022da:	4b7d      	ldr	r3, [pc, #500]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f043 0308 	orr.w	r3, r3, #8
 80022e2:	6013      	str	r3, [r2, #0]
 80022e4:	497a      	ldr	r1, [pc, #488]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80022e6:	4b7a      	ldr	r3, [pc, #488]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022f6:	4976      	ldr	r1, [pc, #472]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80022f8:	4b75      	ldr	r3, [pc, #468]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	021b      	lsls	r3, r3, #8
 8002306:	4313      	orrs	r3, r2
 8002308:	604b      	str	r3, [r1, #4]
 800230a:	e025      	b.n	8002358 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800230c:	4a70      	ldr	r2, [pc, #448]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 800230e:	4b70      	ldr	r3, [pc, #448]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f043 0308 	orr.w	r3, r3, #8
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	496d      	ldr	r1, [pc, #436]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 800231a:	4b6d      	ldr	r3, [pc, #436]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	4313      	orrs	r3, r2
 8002328:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800232a:	4969      	ldr	r1, [pc, #420]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 800232c:	4b68      	ldr	r3, [pc, #416]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	021b      	lsls	r3, r3, #8
 800233a:	4313      	orrs	r3, r2
 800233c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d109      	bne.n	8002358 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	4618      	mov	r0, r3
 800234a:	f000 fd31 	bl	8002db0 <RCC_SetFlashLatencyFromMSIRange>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e34d      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002358:	f000 fc6a 	bl	8002c30 <HAL_RCC_GetSysClockFreq>
 800235c:	4601      	mov	r1, r0
 800235e:	4b5c      	ldr	r3, [pc, #368]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	091b      	lsrs	r3, r3, #4
 8002364:	f003 030f 	and.w	r3, r3, #15
 8002368:	4a5a      	ldr	r2, [pc, #360]	; (80024d4 <HAL_RCC_OscConfig+0x29c>)
 800236a:	5cd3      	ldrb	r3, [r2, r3]
 800236c:	f003 031f 	and.w	r3, r3, #31
 8002370:	fa21 f303 	lsr.w	r3, r1, r3
 8002374:	4a58      	ldr	r2, [pc, #352]	; (80024d8 <HAL_RCC_OscConfig+0x2a0>)
 8002376:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002378:	4b58      	ldr	r3, [pc, #352]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe fe37 	bl	8000ff0 <HAL_InitTick>
 8002382:	4603      	mov	r3, r0
 8002384:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002386:	7bfb      	ldrb	r3, [r7, #15]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d052      	beq.n	8002432 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	e331      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d032      	beq.n	80023fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002398:	4a4d      	ldr	r2, [pc, #308]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 800239a:	4b4d      	ldr	r3, [pc, #308]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023a4:	f7fe fe70 	bl	8001088 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023ac:	f7fe fe6c 	bl	8001088 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e31a      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023be:	4b44      	ldr	r3, [pc, #272]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0f0      	beq.n	80023ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023ca:	4a41      	ldr	r2, [pc, #260]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80023cc:	4b40      	ldr	r3, [pc, #256]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f043 0308 	orr.w	r3, r3, #8
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	493e      	ldr	r1, [pc, #248]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80023d8:	4b3d      	ldr	r3, [pc, #244]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023e8:	4939      	ldr	r1, [pc, #228]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80023ea:	4b39      	ldr	r3, [pc, #228]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	021b      	lsls	r3, r3, #8
 80023f8:	4313      	orrs	r3, r2
 80023fa:	604b      	str	r3, [r1, #4]
 80023fc:	e01a      	b.n	8002434 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023fe:	4a34      	ldr	r2, [pc, #208]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 8002400:	4b33      	ldr	r3, [pc, #204]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f023 0301 	bic.w	r3, r3, #1
 8002408:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800240a:	f7fe fe3d 	bl	8001088 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002412:	f7fe fe39 	bl	8001088 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e2e7      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002424:	4b2a      	ldr	r3, [pc, #168]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1f0      	bne.n	8002412 <HAL_RCC_OscConfig+0x1da>
 8002430:	e000      	b.n	8002434 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002432:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b00      	cmp	r3, #0
 800243e:	d074      	beq.n	800252a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	2b08      	cmp	r3, #8
 8002444:	d005      	beq.n	8002452 <HAL_RCC_OscConfig+0x21a>
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	2b0c      	cmp	r3, #12
 800244a:	d10e      	bne.n	800246a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	2b03      	cmp	r3, #3
 8002450:	d10b      	bne.n	800246a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002452:	4b1f      	ldr	r3, [pc, #124]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d064      	beq.n	8002528 <HAL_RCC_OscConfig+0x2f0>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d160      	bne.n	8002528 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e2c4      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002472:	d106      	bne.n	8002482 <HAL_RCC_OscConfig+0x24a>
 8002474:	4a16      	ldr	r2, [pc, #88]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 8002476:	4b16      	ldr	r3, [pc, #88]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	e01d      	b.n	80024be <HAL_RCC_OscConfig+0x286>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800248a:	d10c      	bne.n	80024a6 <HAL_RCC_OscConfig+0x26e>
 800248c:	4a10      	ldr	r2, [pc, #64]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 800248e:	4b10      	ldr	r3, [pc, #64]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	4a0d      	ldr	r2, [pc, #52]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 800249a:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a2:	6013      	str	r3, [r2, #0]
 80024a4:	e00b      	b.n	80024be <HAL_RCC_OscConfig+0x286>
 80024a6:	4a0a      	ldr	r2, [pc, #40]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80024a8:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	4a07      	ldr	r2, [pc, #28]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024bc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d01c      	beq.n	8002500 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c6:	f7fe fddf 	bl	8001088 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024cc:	e011      	b.n	80024f2 <HAL_RCC_OscConfig+0x2ba>
 80024ce:	bf00      	nop
 80024d0:	40021000 	.word	0x40021000
 80024d4:	08010e34 	.word	0x08010e34
 80024d8:	2000000c 	.word	0x2000000c
 80024dc:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e0:	f7fe fdd2 	bl	8001088 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b64      	cmp	r3, #100	; 0x64
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e280      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024f2:	4baf      	ldr	r3, [pc, #700]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0x2a8>
 80024fe:	e014      	b.n	800252a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002500:	f7fe fdc2 	bl	8001088 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002508:	f7fe fdbe 	bl	8001088 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b64      	cmp	r3, #100	; 0x64
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e26c      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800251a:	4ba5      	ldr	r3, [pc, #660]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f0      	bne.n	8002508 <HAL_RCC_OscConfig+0x2d0>
 8002526:	e000      	b.n	800252a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d060      	beq.n	80025f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	2b04      	cmp	r3, #4
 800253a:	d005      	beq.n	8002548 <HAL_RCC_OscConfig+0x310>
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	2b0c      	cmp	r3, #12
 8002540:	d119      	bne.n	8002576 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2b02      	cmp	r3, #2
 8002546:	d116      	bne.n	8002576 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002548:	4b99      	ldr	r3, [pc, #612]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002550:	2b00      	cmp	r3, #0
 8002552:	d005      	beq.n	8002560 <HAL_RCC_OscConfig+0x328>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e249      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002560:	4993      	ldr	r1, [pc, #588]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 8002562:	4b93      	ldr	r3, [pc, #588]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	061b      	lsls	r3, r3, #24
 8002570:	4313      	orrs	r3, r2
 8002572:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002574:	e040      	b.n	80025f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d023      	beq.n	80025c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800257e:	4a8c      	ldr	r2, [pc, #560]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 8002580:	4b8b      	ldr	r3, [pc, #556]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002588:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258a:	f7fe fd7d 	bl	8001088 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002592:	f7fe fd79 	bl	8001088 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e227      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025a4:	4b82      	ldr	r3, [pc, #520]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b0:	497f      	ldr	r1, [pc, #508]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 80025b2:	4b7f      	ldr	r3, [pc, #508]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	061b      	lsls	r3, r3, #24
 80025c0:	4313      	orrs	r3, r2
 80025c2:	604b      	str	r3, [r1, #4]
 80025c4:	e018      	b.n	80025f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025c6:	4a7a      	ldr	r2, [pc, #488]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 80025c8:	4b79      	ldr	r3, [pc, #484]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d2:	f7fe fd59 	bl	8001088 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025da:	f7fe fd55 	bl	8001088 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e203      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025ec:	4b70      	ldr	r3, [pc, #448]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1f0      	bne.n	80025da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0308 	and.w	r3, r3, #8
 8002600:	2b00      	cmp	r3, #0
 8002602:	d03c      	beq.n	800267e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d01c      	beq.n	8002646 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800260c:	4a68      	ldr	r2, [pc, #416]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 800260e:	4b68      	ldr	r3, [pc, #416]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 8002610:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261c:	f7fe fd34 	bl	8001088 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002624:	f7fe fd30 	bl	8001088 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e1de      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002636:	4b5e      	ldr	r3, [pc, #376]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 8002638:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0ef      	beq.n	8002624 <HAL_RCC_OscConfig+0x3ec>
 8002644:	e01b      	b.n	800267e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002646:	4a5a      	ldr	r2, [pc, #360]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 8002648:	4b59      	ldr	r3, [pc, #356]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 800264a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800264e:	f023 0301 	bic.w	r3, r3, #1
 8002652:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002656:	f7fe fd17 	bl	8001088 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800265e:	f7fe fd13 	bl	8001088 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e1c1      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002670:	4b4f      	ldr	r3, [pc, #316]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 8002672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1ef      	bne.n	800265e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0304 	and.w	r3, r3, #4
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 80a6 	beq.w	80027d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800268c:	2300      	movs	r3, #0
 800268e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002690:	4b47      	ldr	r3, [pc, #284]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 8002692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10d      	bne.n	80026b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800269c:	4a44      	ldr	r2, [pc, #272]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 800269e:	4b44      	ldr	r3, [pc, #272]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 80026a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a6:	6593      	str	r3, [r2, #88]	; 0x58
 80026a8:	4b41      	ldr	r3, [pc, #260]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 80026aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b0:	60bb      	str	r3, [r7, #8]
 80026b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026b4:	2301      	movs	r3, #1
 80026b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026b8:	4b3e      	ldr	r3, [pc, #248]	; (80027b4 <HAL_RCC_OscConfig+0x57c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d118      	bne.n	80026f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026c4:	4a3b      	ldr	r2, [pc, #236]	; (80027b4 <HAL_RCC_OscConfig+0x57c>)
 80026c6:	4b3b      	ldr	r3, [pc, #236]	; (80027b4 <HAL_RCC_OscConfig+0x57c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d0:	f7fe fcda 	bl	8001088 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d8:	f7fe fcd6 	bl	8001088 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e184      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ea:	4b32      	ldr	r3, [pc, #200]	; (80027b4 <HAL_RCC_OscConfig+0x57c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d108      	bne.n	8002710 <HAL_RCC_OscConfig+0x4d8>
 80026fe:	4a2c      	ldr	r2, [pc, #176]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 8002700:	4b2b      	ldr	r3, [pc, #172]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 8002702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800270e:	e024      	b.n	800275a <HAL_RCC_OscConfig+0x522>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2b05      	cmp	r3, #5
 8002716:	d110      	bne.n	800273a <HAL_RCC_OscConfig+0x502>
 8002718:	4a25      	ldr	r2, [pc, #148]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 800271a:	4b25      	ldr	r3, [pc, #148]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 800271c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002720:	f043 0304 	orr.w	r3, r3, #4
 8002724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002728:	4a21      	ldr	r2, [pc, #132]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 800272a:	4b21      	ldr	r3, [pc, #132]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 800272c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002738:	e00f      	b.n	800275a <HAL_RCC_OscConfig+0x522>
 800273a:	4a1d      	ldr	r2, [pc, #116]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 800273c:	4b1c      	ldr	r3, [pc, #112]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 800273e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002742:	f023 0301 	bic.w	r3, r3, #1
 8002746:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800274a:	4a19      	ldr	r2, [pc, #100]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 800274c:	4b18      	ldr	r3, [pc, #96]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 800274e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002752:	f023 0304 	bic.w	r3, r3, #4
 8002756:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d016      	beq.n	8002790 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002762:	f7fe fc91 	bl	8001088 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002768:	e00a      	b.n	8002780 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276a:	f7fe fc8d 	bl	8001088 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	f241 3288 	movw	r2, #5000	; 0x1388
 8002778:	4293      	cmp	r3, r2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e139      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002780:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 8002782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0ed      	beq.n	800276a <HAL_RCC_OscConfig+0x532>
 800278e:	e01a      	b.n	80027c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002790:	f7fe fc7a 	bl	8001088 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002796:	e00f      	b.n	80027b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002798:	f7fe fc76 	bl	8001088 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d906      	bls.n	80027b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e122      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
 80027ae:	bf00      	nop
 80027b0:	40021000 	.word	0x40021000
 80027b4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027b8:	4b90      	ldr	r3, [pc, #576]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 80027ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1e8      	bne.n	8002798 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027c6:	7ffb      	ldrb	r3, [r7, #31]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d105      	bne.n	80027d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027cc:	4a8b      	ldr	r2, [pc, #556]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 80027ce:	4b8b      	ldr	r3, [pc, #556]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 80027d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027d6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 8108 	beq.w	80029f2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	f040 80d0 	bne.w	800298c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027ec:	4b83      	ldr	r3, [pc, #524]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	f003 0203 	and.w	r2, r3, #3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d130      	bne.n	8002862 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	3b01      	subs	r3, #1
 800280c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800280e:	429a      	cmp	r2, r3
 8002810:	d127      	bne.n	8002862 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800281c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800281e:	429a      	cmp	r2, r3
 8002820:	d11f      	bne.n	8002862 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800282c:	2a07      	cmp	r2, #7
 800282e:	bf14      	ite	ne
 8002830:	2201      	movne	r2, #1
 8002832:	2200      	moveq	r2, #0
 8002834:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002836:	4293      	cmp	r3, r2
 8002838:	d113      	bne.n	8002862 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002844:	085b      	lsrs	r3, r3, #1
 8002846:	3b01      	subs	r3, #1
 8002848:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800284a:	429a      	cmp	r2, r3
 800284c:	d109      	bne.n	8002862 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002858:	085b      	lsrs	r3, r3, #1
 800285a:	3b01      	subs	r3, #1
 800285c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800285e:	429a      	cmp	r2, r3
 8002860:	d06e      	beq.n	8002940 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	2b0c      	cmp	r3, #12
 8002866:	d069      	beq.n	800293c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002868:	4b64      	ldr	r3, [pc, #400]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d105      	bne.n	8002880 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002874:	4b61      	ldr	r3, [pc, #388]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e0b7      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002884:	4a5d      	ldr	r2, [pc, #372]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 8002886:	4b5d      	ldr	r3, [pc, #372]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800288e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002890:	f7fe fbfa 	bl	8001088 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002898:	f7fe fbf6 	bl	8001088 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e0a4      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028aa:	4b54      	ldr	r3, [pc, #336]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f0      	bne.n	8002898 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028b6:	4851      	ldr	r0, [pc, #324]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 80028b8:	4b50      	ldr	r3, [pc, #320]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	4b50      	ldr	r3, [pc, #320]	; (8002a00 <HAL_RCC_OscConfig+0x7c8>)
 80028be:	4013      	ands	r3, r2
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028c8:	3a01      	subs	r2, #1
 80028ca:	0112      	lsls	r2, r2, #4
 80028cc:	4311      	orrs	r1, r2
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028d2:	0212      	lsls	r2, r2, #8
 80028d4:	4311      	orrs	r1, r2
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028da:	0852      	lsrs	r2, r2, #1
 80028dc:	3a01      	subs	r2, #1
 80028de:	0552      	lsls	r2, r2, #21
 80028e0:	4311      	orrs	r1, r2
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028e6:	0852      	lsrs	r2, r2, #1
 80028e8:	3a01      	subs	r2, #1
 80028ea:	0652      	lsls	r2, r2, #25
 80028ec:	4311      	orrs	r1, r2
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028f2:	0912      	lsrs	r2, r2, #4
 80028f4:	0452      	lsls	r2, r2, #17
 80028f6:	430a      	orrs	r2, r1
 80028f8:	4313      	orrs	r3, r2
 80028fa:	60c3      	str	r3, [r0, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028fc:	4a3f      	ldr	r2, [pc, #252]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 80028fe:	4b3f      	ldr	r3, [pc, #252]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002906:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002908:	4a3c      	ldr	r2, [pc, #240]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 800290a:	4b3c      	ldr	r3, [pc, #240]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002912:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002914:	f7fe fbb8 	bl	8001088 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800291c:	f7fe fbb4 	bl	8001088 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e062      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800292e:	4b33      	ldr	r3, [pc, #204]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800293a:	e05a      	b.n	80029f2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e059      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002940:	4b2e      	ldr	r3, [pc, #184]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d152      	bne.n	80029f2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800294c:	4a2b      	ldr	r2, [pc, #172]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 800294e:	4b2b      	ldr	r3, [pc, #172]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002956:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002958:	4a28      	ldr	r2, [pc, #160]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 800295a:	4b28      	ldr	r3, [pc, #160]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002962:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002964:	f7fe fb90 	bl	8001088 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800296c:	f7fe fb8c 	bl	8001088 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e03a      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800297e:	4b1f      	ldr	r3, [pc, #124]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0f0      	beq.n	800296c <HAL_RCC_OscConfig+0x734>
 800298a:	e032      	b.n	80029f2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	2b0c      	cmp	r3, #12
 8002990:	d02d      	beq.n	80029ee <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002992:	4a1a      	ldr	r2, [pc, #104]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 8002994:	4b19      	ldr	r3, [pc, #100]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800299c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800299e:	4b17      	ldr	r3, [pc, #92]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d105      	bne.n	80029b6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80029aa:	4a14      	ldr	r2, [pc, #80]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 80029ac:	4b13      	ldr	r3, [pc, #76]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f023 0303 	bic.w	r3, r3, #3
 80029b4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029b6:	4a11      	ldr	r2, [pc, #68]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 80029b8:	4b10      	ldr	r3, [pc, #64]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80029c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c6:	f7fe fb5f 	bl	8001088 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ce:	f7fe fb5b 	bl	8001088 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e009      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029e0:	4b06      	ldr	r3, [pc, #24]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1f0      	bne.n	80029ce <HAL_RCC_OscConfig+0x796>
 80029ec:	e001      	b.n	80029f2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e000      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3720      	adds	r7, #32
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40021000 	.word	0x40021000
 8002a00:	f99d808c 	.word	0xf99d808c

08002a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e0c8      	b.n	8002baa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a18:	4b66      	ldr	r3, [pc, #408]	; (8002bb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0207 	and.w	r2, r3, #7
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d210      	bcs.n	8002a48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a26:	4963      	ldr	r1, [pc, #396]	; (8002bb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002a28:	4b62      	ldr	r3, [pc, #392]	; (8002bb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f023 0207 	bic.w	r2, r3, #7
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a36:	4b5f      	ldr	r3, [pc, #380]	; (8002bb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0207 	and.w	r2, r3, #7
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e0b0      	b.n	8002baa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d04c      	beq.n	8002aee <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	d107      	bne.n	8002a6c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a5c:	4b56      	ldr	r3, [pc, #344]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d121      	bne.n	8002aac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e09e      	b.n	8002baa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d107      	bne.n	8002a84 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a74:	4b50      	ldr	r3, [pc, #320]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d115      	bne.n	8002aac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e092      	b.n	8002baa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d107      	bne.n	8002a9c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a8c:	4b4a      	ldr	r3, [pc, #296]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d109      	bne.n	8002aac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e086      	b.n	8002baa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a9c:	4b46      	ldr	r3, [pc, #280]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e07e      	b.n	8002baa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002aac:	4942      	ldr	r1, [pc, #264]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002aae:	4b42      	ldr	r3, [pc, #264]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f023 0203 	bic.w	r2, r3, #3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002abe:	f7fe fae3 	bl	8001088 <HAL_GetTick>
 8002ac2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac4:	e00a      	b.n	8002adc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac6:	f7fe fadf 	bl	8001088 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e066      	b.n	8002baa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002adc:	4b36      	ldr	r3, [pc, #216]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 020c 	and.w	r2, r3, #12
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d1eb      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d008      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002afa:	492f      	ldr	r1, [pc, #188]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002afc:	4b2e      	ldr	r3, [pc, #184]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b0c:	4b29      	ldr	r3, [pc, #164]	; (8002bb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0207 	and.w	r2, r3, #7
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d910      	bls.n	8002b3c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1a:	4926      	ldr	r1, [pc, #152]	; (8002bb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002b1c:	4b25      	ldr	r3, [pc, #148]	; (8002bb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f023 0207 	bic.w	r2, r3, #7
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2a:	4b22      	ldr	r3, [pc, #136]	; (8002bb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0207 	and.w	r2, r3, #7
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e036      	b.n	8002baa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d008      	beq.n	8002b5a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b48:	491b      	ldr	r1, [pc, #108]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002b4a:	4b1b      	ldr	r3, [pc, #108]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d009      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b66:	4914      	ldr	r1, [pc, #80]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002b68:	4b13      	ldr	r3, [pc, #76]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4313      	orrs	r3, r2
 8002b78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b7a:	f000 f859 	bl	8002c30 <HAL_RCC_GetSysClockFreq>
 8002b7e:	4601      	mov	r1, r0
 8002b80:	4b0d      	ldr	r3, [pc, #52]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	091b      	lsrs	r3, r3, #4
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	4a0c      	ldr	r2, [pc, #48]	; (8002bbc <HAL_RCC_ClockConfig+0x1b8>)
 8002b8c:	5cd3      	ldrb	r3, [r2, r3]
 8002b8e:	f003 031f 	and.w	r3, r3, #31
 8002b92:	fa21 f303 	lsr.w	r3, r1, r3
 8002b96:	4a0a      	ldr	r2, [pc, #40]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b9a:	4b0a      	ldr	r3, [pc, #40]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fe fa26 	bl	8000ff0 <HAL_InitTick>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ba8:	7afb      	ldrb	r3, [r7, #11]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40022000 	.word	0x40022000
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	08010e34 	.word	0x08010e34
 8002bc0:	2000000c 	.word	0x2000000c
 8002bc4:	20000000 	.word	0x20000000

08002bc8 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08a      	sub	sp, #40	; 0x28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8002bd4:	4a15      	ldr	r2, [pc, #84]	; (8002c2c <HAL_RCC_MCOConfig+0x64>)
 8002bd6:	4b15      	ldr	r3, [pc, #84]	; (8002c2c <HAL_RCC_MCOConfig+0x64>)
 8002bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bda:	f043 0301 	orr.w	r3, r3, #1
 8002bde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002be0:	4b12      	ldr	r3, [pc, #72]	; (8002c2c <HAL_RCC_MCOConfig+0x64>)
 8002be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	613b      	str	r3, [r7, #16]
 8002bea:	693b      	ldr	r3, [r7, #16]

  /* Configue the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8002bec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002c02:	f107 0314 	add.w	r3, r7, #20
 8002c06:	4619      	mov	r1, r3
 8002c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c0c:	f7fe ff4a 	bl	8001aa4 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8002c10:	4806      	ldr	r0, [pc, #24]	; (8002c2c <HAL_RCC_MCOConfig+0x64>)
 8002c12:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <HAL_RCC_MCOConfig+0x64>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 8002c1a:	68b9      	ldr	r1, [r7, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	430b      	orrs	r3, r1
 8002c20:	4313      	orrs	r3, r2
 8002c22:	6083      	str	r3, [r0, #8]
}
 8002c24:	bf00      	nop
 8002c26:	3728      	adds	r7, #40	; 0x28
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40021000 	.word	0x40021000

08002c30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b089      	sub	sp, #36	; 0x24
 8002c34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	61fb      	str	r3, [r7, #28]
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c3e:	4b3d      	ldr	r3, [pc, #244]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 030c 	and.w	r3, r3, #12
 8002c46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c48:	4b3a      	ldr	r3, [pc, #232]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <HAL_RCC_GetSysClockFreq+0x34>
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	2b0c      	cmp	r3, #12
 8002c5c:	d121      	bne.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d11e      	bne.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c64:	4b33      	ldr	r3, [pc, #204]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0308 	and.w	r3, r3, #8
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d107      	bne.n	8002c80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c70:	4b30      	ldr	r3, [pc, #192]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c76:	0a1b      	lsrs	r3, r3, #8
 8002c78:	f003 030f 	and.w	r3, r3, #15
 8002c7c:	61fb      	str	r3, [r7, #28]
 8002c7e:	e005      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c80:	4b2c      	ldr	r3, [pc, #176]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	091b      	lsrs	r3, r3, #4
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c8c:	4a2a      	ldr	r2, [pc, #168]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10d      	bne.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ca0:	e00a      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d102      	bne.n	8002cae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ca8:	4b24      	ldr	r3, [pc, #144]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002caa:	61bb      	str	r3, [r7, #24]
 8002cac:	e004      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d101      	bne.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cb4:	4b22      	ldr	r3, [pc, #136]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cb6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	2b0c      	cmp	r3, #12
 8002cbc:	d133      	bne.n	8002d26 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cbe:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d002      	beq.n	8002cd4 <HAL_RCC_GetSysClockFreq+0xa4>
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	d003      	beq.n	8002cda <HAL_RCC_GetSysClockFreq+0xaa>
 8002cd2:	e005      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cd4:	4b19      	ldr	r3, [pc, #100]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002cd6:	617b      	str	r3, [r7, #20]
      break;
 8002cd8:	e005      	b.n	8002ce6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002cda:	4b19      	ldr	r3, [pc, #100]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cdc:	617b      	str	r3, [r7, #20]
      break;
 8002cde:	e002      	b.n	8002ce6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	617b      	str	r3, [r7, #20]
      break;
 8002ce4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ce6:	4b13      	ldr	r3, [pc, #76]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	091b      	lsrs	r3, r3, #4
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cf4:	4b0f      	ldr	r3, [pc, #60]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	0a1b      	lsrs	r3, r3, #8
 8002cfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	fb02 f203 	mul.w	r2, r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d0c:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	0e5b      	lsrs	r3, r3, #25
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	3301      	adds	r3, #1
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d24:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d26:	69bb      	ldr	r3, [r7, #24]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3724      	adds	r7, #36	; 0x24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc80      	pop	{r7}
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	40021000 	.word	0x40021000
 8002d38:	08010e4c 	.word	0x08010e4c
 8002d3c:	00f42400 	.word	0x00f42400
 8002d40:	007a1200 	.word	0x007a1200

08002d44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d48:	4b02      	ldr	r3, [pc, #8]	; (8002d54 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr
 8002d54:	2000000c 	.word	0x2000000c

08002d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d5c:	f7ff fff2 	bl	8002d44 <HAL_RCC_GetHCLKFreq>
 8002d60:	4601      	mov	r1, r0
 8002d62:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	0a1b      	lsrs	r3, r3, #8
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	4a04      	ldr	r2, [pc, #16]	; (8002d80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d6e:	5cd3      	ldrb	r3, [r2, r3]
 8002d70:	f003 031f 	and.w	r3, r3, #31
 8002d74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	08010e44 	.word	0x08010e44

08002d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d88:	f7ff ffdc 	bl	8002d44 <HAL_RCC_GetHCLKFreq>
 8002d8c:	4601      	mov	r1, r0
 8002d8e:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	0adb      	lsrs	r3, r3, #11
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	4a04      	ldr	r2, [pc, #16]	; (8002dac <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d9a:	5cd3      	ldrb	r3, [r2, r3]
 8002d9c:	f003 031f 	and.w	r3, r3, #31
 8002da0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40021000 	.word	0x40021000
 8002dac:	08010e44 	.word	0x08010e44

08002db0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002db8:	2300      	movs	r3, #0
 8002dba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002dbc:	4b2a      	ldr	r3, [pc, #168]	; (8002e68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002dc8:	f7ff f9a0 	bl	800210c <HAL_PWREx_GetVoltageRange>
 8002dcc:	6178      	str	r0, [r7, #20]
 8002dce:	e014      	b.n	8002dfa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dd0:	4a25      	ldr	r2, [pc, #148]	; (8002e68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dd2:	4b25      	ldr	r3, [pc, #148]	; (8002e68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dda:	6593      	str	r3, [r2, #88]	; 0x58
 8002ddc:	4b22      	ldr	r3, [pc, #136]	; (8002e68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002de8:	f7ff f990 	bl	800210c <HAL_PWREx_GetVoltageRange>
 8002dec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002dee:	4a1e      	ldr	r2, [pc, #120]	; (8002e68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002df0:	4b1d      	ldr	r3, [pc, #116]	; (8002e68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002df8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e00:	d10b      	bne.n	8002e1a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b80      	cmp	r3, #128	; 0x80
 8002e06:	d919      	bls.n	8002e3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2ba0      	cmp	r3, #160	; 0xa0
 8002e0c:	d902      	bls.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e0e:	2302      	movs	r3, #2
 8002e10:	613b      	str	r3, [r7, #16]
 8002e12:	e013      	b.n	8002e3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e14:	2301      	movs	r3, #1
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	e010      	b.n	8002e3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b80      	cmp	r3, #128	; 0x80
 8002e1e:	d902      	bls.n	8002e26 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e20:	2303      	movs	r3, #3
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	e00a      	b.n	8002e3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b80      	cmp	r3, #128	; 0x80
 8002e2a:	d102      	bne.n	8002e32 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	613b      	str	r3, [r7, #16]
 8002e30:	e004      	b.n	8002e3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b70      	cmp	r3, #112	; 0x70
 8002e36:	d101      	bne.n	8002e3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e38:	2301      	movs	r3, #1
 8002e3a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e3c:	490b      	ldr	r1, [pc, #44]	; (8002e6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e3e:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f023 0207 	bic.w	r2, r3, #7
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e4c:	4b07      	ldr	r3, [pc, #28]	; (8002e6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0207 	and.w	r2, r3, #7
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d001      	beq.n	8002e5e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	40022000 	.word	0x40022000

08002e70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e78:	2300      	movs	r3, #0
 8002e7a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d03f      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e94:	d01c      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002e96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e9a:	d802      	bhi.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00e      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002ea0:	e01f      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002ea2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ea6:	d003      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002ea8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002eac:	d01c      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002eae:	e018      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002eb0:	4a85      	ldr	r2, [pc, #532]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002eb2:	4b85      	ldr	r3, [pc, #532]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ebc:	e015      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f000 fac7 	bl	8003458 <RCCEx_PLLSAI1_Config>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ece:	e00c      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3320      	adds	r3, #32
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 fbae 	bl	8003638 <RCCEx_PLLSAI2_Config>
 8002edc:	4603      	mov	r3, r0
 8002ede:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ee0:	e003      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	74fb      	strb	r3, [r7, #19]
      break;
 8002ee6:	e000      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002ee8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002eea:	7cfb      	ldrb	r3, [r7, #19]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10b      	bne.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ef0:	4975      	ldr	r1, [pc, #468]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ef2:	4b75      	ldr	r3, [pc, #468]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f06:	e001      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f08:	7cfb      	ldrb	r3, [r7, #19]
 8002f0a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d03f      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f20:	d01c      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002f22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f26:	d802      	bhi.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00e      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002f2c:	e01f      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002f2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f32:	d003      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002f34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f38:	d01c      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002f3a:	e018      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f3c:	4a62      	ldr	r2, [pc, #392]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f3e:	4b62      	ldr	r3, [pc, #392]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f46:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f48:	e015      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	2100      	movs	r1, #0
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 fa81 	bl	8003458 <RCCEx_PLLSAI1_Config>
 8002f56:	4603      	mov	r3, r0
 8002f58:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f5a:	e00c      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3320      	adds	r3, #32
 8002f60:	2100      	movs	r1, #0
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 fb68 	bl	8003638 <RCCEx_PLLSAI2_Config>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f6c:	e003      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	74fb      	strb	r3, [r7, #19]
      break;
 8002f72:	e000      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002f74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f76:	7cfb      	ldrb	r3, [r7, #19]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10b      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f7c:	4952      	ldr	r1, [pc, #328]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f7e:	4b52      	ldr	r3, [pc, #328]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f84:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f92:	e001      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f94:	7cfb      	ldrb	r3, [r7, #19]
 8002f96:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 80a0 	beq.w	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002faa:	4b47      	ldr	r3, [pc, #284]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00d      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fc0:	4a41      	ldr	r2, [pc, #260]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fc2:	4b41      	ldr	r3, [pc, #260]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fca:	6593      	str	r3, [r2, #88]	; 0x58
 8002fcc:	4b3e      	ldr	r3, [pc, #248]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fdc:	4a3b      	ldr	r2, [pc, #236]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002fde:	4b3b      	ldr	r3, [pc, #236]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fe8:	f7fe f84e 	bl	8001088 <HAL_GetTick>
 8002fec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fee:	e009      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff0:	f7fe f84a 	bl	8001088 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d902      	bls.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	74fb      	strb	r3, [r7, #19]
        break;
 8003002:	e005      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003004:	4b31      	ldr	r3, [pc, #196]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0ef      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003010:	7cfb      	ldrb	r3, [r7, #19]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d15c      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003016:	4b2c      	ldr	r3, [pc, #176]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003020:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d01f      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	429a      	cmp	r2, r3
 8003032:	d019      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003034:	4b24      	ldr	r3, [pc, #144]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800303e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003040:	4a21      	ldr	r2, [pc, #132]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003042:	4b21      	ldr	r3, [pc, #132]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800304c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003050:	4a1d      	ldr	r2, [pc, #116]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003052:	4b1d      	ldr	r3, [pc, #116]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800305c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003060:	4a19      	ldr	r2, [pc, #100]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d016      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003072:	f7fe f809 	bl	8001088 <HAL_GetTick>
 8003076:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003078:	e00b      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307a:	f7fe f805 	bl	8001088 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	f241 3288 	movw	r2, #5000	; 0x1388
 8003088:	4293      	cmp	r3, r2
 800308a:	d902      	bls.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	74fb      	strb	r3, [r7, #19]
            break;
 8003090:	e006      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003092:	4b0d      	ldr	r3, [pc, #52]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0ec      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80030a0:	7cfb      	ldrb	r3, [r7, #19]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10c      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030a6:	4908      	ldr	r1, [pc, #32]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030a8:	4b07      	ldr	r3, [pc, #28]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030b8:	4313      	orrs	r3, r2
 80030ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030be:	e009      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030c0:	7cfb      	ldrb	r3, [r7, #19]
 80030c2:	74bb      	strb	r3, [r7, #18]
 80030c4:	e006      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80030c6:	bf00      	nop
 80030c8:	40021000 	.word	0x40021000
 80030cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d0:	7cfb      	ldrb	r3, [r7, #19]
 80030d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030d4:	7c7b      	ldrb	r3, [r7, #17]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d105      	bne.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030da:	4a9e      	ldr	r2, [pc, #632]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030dc:	4b9d      	ldr	r3, [pc, #628]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030f2:	4998      	ldr	r1, [pc, #608]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030f4:	4b97      	ldr	r3, [pc, #604]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fa:	f023 0203 	bic.w	r2, r3, #3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003102:	4313      	orrs	r3, r2
 8003104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00a      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003114:	498f      	ldr	r1, [pc, #572]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003116:	4b8f      	ldr	r3, [pc, #572]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311c:	f023 020c 	bic.w	r2, r3, #12
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003124:	4313      	orrs	r3, r2
 8003126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0304 	and.w	r3, r3, #4
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00a      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003136:	4987      	ldr	r1, [pc, #540]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003138:	4b86      	ldr	r3, [pc, #536]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800313a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00a      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003158:	497e      	ldr	r1, [pc, #504]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800315a:	4b7e      	ldr	r3, [pc, #504]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800315c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003160:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00a      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800317a:	4976      	ldr	r1, [pc, #472]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800317c:	4b75      	ldr	r3, [pc, #468]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800317e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003182:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00a      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800319c:	496d      	ldr	r1, [pc, #436]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800319e:	4b6d      	ldr	r3, [pc, #436]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ac:	4313      	orrs	r3, r2
 80031ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031be:	4965      	ldr	r1, [pc, #404]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031c0:	4b64      	ldr	r3, [pc, #400]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ce:	4313      	orrs	r3, r2
 80031d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00a      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031e0:	495c      	ldr	r1, [pc, #368]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031e2:	4b5c      	ldr	r3, [pc, #368]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003202:	4954      	ldr	r1, [pc, #336]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003204:	4b53      	ldr	r3, [pc, #332]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003212:	4313      	orrs	r3, r2
 8003214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00a      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003224:	494b      	ldr	r1, [pc, #300]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003226:	4b4b      	ldr	r3, [pc, #300]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003234:	4313      	orrs	r3, r2
 8003236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00a      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003246:	4943      	ldr	r1, [pc, #268]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003248:	4b42      	ldr	r3, [pc, #264]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800324a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003256:	4313      	orrs	r3, r2
 8003258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d028      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003268:	493a      	ldr	r1, [pc, #232]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800326a:	4b3a      	ldr	r3, [pc, #232]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800326c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003270:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003278:	4313      	orrs	r3, r2
 800327a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003282:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003286:	d106      	bne.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003288:	4a32      	ldr	r2, [pc, #200]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800328a:	4b32      	ldr	r3, [pc, #200]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003292:	60d3      	str	r3, [r2, #12]
 8003294:	e011      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800329a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800329e:	d10c      	bne.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3304      	adds	r3, #4
 80032a4:	2101      	movs	r1, #1
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 f8d6 	bl	8003458 <RCCEx_PLLSAI1_Config>
 80032ac:	4603      	mov	r3, r0
 80032ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032b0:	7cfb      	ldrb	r3, [r7, #19]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80032b6:	7cfb      	ldrb	r3, [r7, #19]
 80032b8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d028      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032c6:	4923      	ldr	r1, [pc, #140]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032c8:	4b22      	ldr	r3, [pc, #136]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032e4:	d106      	bne.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032e6:	4a1b      	ldr	r2, [pc, #108]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032e8:	4b1a      	ldr	r3, [pc, #104]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032f0:	60d3      	str	r3, [r2, #12]
 80032f2:	e011      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032fc:	d10c      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	3304      	adds	r3, #4
 8003302:	2101      	movs	r1, #1
 8003304:	4618      	mov	r0, r3
 8003306:	f000 f8a7 	bl	8003458 <RCCEx_PLLSAI1_Config>
 800330a:	4603      	mov	r3, r0
 800330c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800330e:	7cfb      	ldrb	r3, [r7, #19]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003314:	7cfb      	ldrb	r3, [r7, #19]
 8003316:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d02b      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003324:	490b      	ldr	r1, [pc, #44]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003326:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003334:	4313      	orrs	r3, r2
 8003336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800333e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003342:	d109      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003344:	4a03      	ldr	r2, [pc, #12]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003346:	4b03      	ldr	r3, [pc, #12]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800334e:	60d3      	str	r3, [r2, #12]
 8003350:	e014      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003352:	bf00      	nop
 8003354:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800335c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003360:	d10c      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3304      	adds	r3, #4
 8003366:	2101      	movs	r1, #1
 8003368:	4618      	mov	r0, r3
 800336a:	f000 f875 	bl	8003458 <RCCEx_PLLSAI1_Config>
 800336e:	4603      	mov	r3, r0
 8003370:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003372:	7cfb      	ldrb	r3, [r7, #19]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003378:	7cfb      	ldrb	r3, [r7, #19]
 800337a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d02f      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003388:	492b      	ldr	r1, [pc, #172]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800338a:	4b2b      	ldr	r3, [pc, #172]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800338c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003390:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003398:	4313      	orrs	r3, r2
 800339a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033a6:	d10d      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3304      	adds	r3, #4
 80033ac:	2102      	movs	r1, #2
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 f852 	bl	8003458 <RCCEx_PLLSAI1_Config>
 80033b4:	4603      	mov	r3, r0
 80033b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033b8:	7cfb      	ldrb	r3, [r7, #19]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d014      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80033be:	7cfb      	ldrb	r3, [r7, #19]
 80033c0:	74bb      	strb	r3, [r7, #18]
 80033c2:	e011      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3320      	adds	r3, #32
 80033d2:	2102      	movs	r1, #2
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 f92f 	bl	8003638 <RCCEx_PLLSAI2_Config>
 80033da:	4603      	mov	r3, r0
 80033dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033de:	7cfb      	ldrb	r3, [r7, #19]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80033e4:	7cfb      	ldrb	r3, [r7, #19]
 80033e6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033f4:	4910      	ldr	r1, [pc, #64]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033f6:	4b10      	ldr	r3, [pc, #64]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00b      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003416:	4908      	ldr	r1, [pc, #32]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003418:	4b07      	ldr	r3, [pc, #28]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800341a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003428:	4313      	orrs	r3, r2
 800342a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800342e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003430:	4618      	mov	r0, r3
 8003432:	3718      	adds	r7, #24
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40021000 	.word	0x40021000

0800343c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003440:	4a04      	ldr	r2, [pc, #16]	; (8003454 <HAL_RCCEx_EnableMSIPLLMode+0x18>)
 8003442:	4b04      	ldr	r3, [pc, #16]	; (8003454 <HAL_RCCEx_EnableMSIPLLMode+0x18>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f043 0304 	orr.w	r3, r3, #4
 800344a:	6013      	str	r3, [r2, #0]
}
 800344c:	bf00      	nop
 800344e:	46bd      	mov	sp, r7
 8003450:	bc80      	pop	{r7}
 8003452:	4770      	bx	lr
 8003454:	40021000 	.word	0x40021000

08003458 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003462:	2300      	movs	r3, #0
 8003464:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003466:	4b73      	ldr	r3, [pc, #460]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f003 0303 	and.w	r3, r3, #3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d018      	beq.n	80034a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003472:	4b70      	ldr	r3, [pc, #448]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f003 0203 	and.w	r2, r3, #3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d10d      	bne.n	800349e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
       ||
 8003486:	2b00      	cmp	r3, #0
 8003488:	d009      	beq.n	800349e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800348a:	4b6a      	ldr	r3, [pc, #424]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	091b      	lsrs	r3, r3, #4
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
       ||
 800349a:	429a      	cmp	r2, r3
 800349c:	d044      	beq.n	8003528 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	73fb      	strb	r3, [r7, #15]
 80034a2:	e041      	b.n	8003528 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d00c      	beq.n	80034c6 <RCCEx_PLLSAI1_Config+0x6e>
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d013      	beq.n	80034d8 <RCCEx_PLLSAI1_Config+0x80>
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d120      	bne.n	80034f6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034b4:	4b5f      	ldr	r3, [pc, #380]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d11d      	bne.n	80034fc <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034c4:	e01a      	b.n	80034fc <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034c6:	4b5b      	ldr	r3, [pc, #364]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d116      	bne.n	8003500 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034d6:	e013      	b.n	8003500 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034d8:	4b56      	ldr	r3, [pc, #344]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10f      	bne.n	8003504 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034e4:	4b53      	ldr	r3, [pc, #332]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d109      	bne.n	8003504 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034f4:	e006      	b.n	8003504 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	73fb      	strb	r3, [r7, #15]
      break;
 80034fa:	e004      	b.n	8003506 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80034fc:	bf00      	nop
 80034fe:	e002      	b.n	8003506 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003500:	bf00      	nop
 8003502:	e000      	b.n	8003506 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003504:	bf00      	nop
    }

    if(status == HAL_OK)
 8003506:	7bfb      	ldrb	r3, [r7, #15]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10d      	bne.n	8003528 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800350c:	4849      	ldr	r0, [pc, #292]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 800350e:	4b49      	ldr	r3, [pc, #292]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6819      	ldr	r1, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	3b01      	subs	r3, #1
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	430b      	orrs	r3, r1
 8003524:	4313      	orrs	r3, r2
 8003526:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003528:	7bfb      	ldrb	r3, [r7, #15]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d17d      	bne.n	800362a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800352e:	4a41      	ldr	r2, [pc, #260]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003530:	4b40      	ldr	r3, [pc, #256]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003538:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800353a:	f7fd fda5 	bl	8001088 <HAL_GetTick>
 800353e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003540:	e009      	b.n	8003556 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003542:	f7fd fda1 	bl	8001088 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d902      	bls.n	8003556 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	73fb      	strb	r3, [r7, #15]
        break;
 8003554:	e005      	b.n	8003562 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003556:	4b37      	ldr	r3, [pc, #220]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1ef      	bne.n	8003542 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003562:	7bfb      	ldrb	r3, [r7, #15]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d160      	bne.n	800362a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d111      	bne.n	8003592 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800356e:	4831      	ldr	r0, [pc, #196]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003570:	4b30      	ldr	r3, [pc, #192]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	6892      	ldr	r2, [r2, #8]
 8003580:	0211      	lsls	r1, r2, #8
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	68d2      	ldr	r2, [r2, #12]
 8003586:	0912      	lsrs	r2, r2, #4
 8003588:	0452      	lsls	r2, r2, #17
 800358a:	430a      	orrs	r2, r1
 800358c:	4313      	orrs	r3, r2
 800358e:	6103      	str	r3, [r0, #16]
 8003590:	e027      	b.n	80035e2 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d112      	bne.n	80035be <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003598:	4826      	ldr	r0, [pc, #152]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 800359a:	4b26      	ldr	r3, [pc, #152]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80035a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6892      	ldr	r2, [r2, #8]
 80035aa:	0211      	lsls	r1, r2, #8
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6912      	ldr	r2, [r2, #16]
 80035b0:	0852      	lsrs	r2, r2, #1
 80035b2:	3a01      	subs	r2, #1
 80035b4:	0552      	lsls	r2, r2, #21
 80035b6:	430a      	orrs	r2, r1
 80035b8:	4313      	orrs	r3, r2
 80035ba:	6103      	str	r3, [r0, #16]
 80035bc:	e011      	b.n	80035e2 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035be:	481d      	ldr	r0, [pc, #116]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035c0:	4b1c      	ldr	r3, [pc, #112]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6892      	ldr	r2, [r2, #8]
 80035d0:	0211      	lsls	r1, r2, #8
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	6952      	ldr	r2, [r2, #20]
 80035d6:	0852      	lsrs	r2, r2, #1
 80035d8:	3a01      	subs	r2, #1
 80035da:	0652      	lsls	r2, r2, #25
 80035dc:	430a      	orrs	r2, r1
 80035de:	4313      	orrs	r3, r2
 80035e0:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80035e2:	4a14      	ldr	r2, [pc, #80]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035e4:	4b13      	ldr	r3, [pc, #76]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035ec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ee:	f7fd fd4b 	bl	8001088 <HAL_GetTick>
 80035f2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035f4:	e009      	b.n	800360a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035f6:	f7fd fd47 	bl	8001088 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d902      	bls.n	800360a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	73fb      	strb	r3, [r7, #15]
          break;
 8003608:	e005      	b.n	8003616 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800360a:	4b0a      	ldr	r3, [pc, #40]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0ef      	beq.n	80035f6 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003616:	7bfb      	ldrb	r3, [r7, #15]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d106      	bne.n	800362a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800361c:	4905      	ldr	r1, [pc, #20]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 800361e:	4b05      	ldr	r3, [pc, #20]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003620:	691a      	ldr	r2, [r3, #16]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	4313      	orrs	r3, r2
 8003628:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800362a:	7bfb      	ldrb	r3, [r7, #15]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40021000 	.word	0x40021000

08003638 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003646:	4b68      	ldr	r3, [pc, #416]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f003 0303 	and.w	r3, r3, #3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d018      	beq.n	8003684 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003652:	4b65      	ldr	r3, [pc, #404]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f003 0203 	and.w	r2, r3, #3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d10d      	bne.n	800367e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
       ||
 8003666:	2b00      	cmp	r3, #0
 8003668:	d009      	beq.n	800367e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800366a:	4b5f      	ldr	r3, [pc, #380]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	091b      	lsrs	r3, r3, #4
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
       ||
 800367a:	429a      	cmp	r2, r3
 800367c:	d044      	beq.n	8003708 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	73fb      	strb	r3, [r7, #15]
 8003682:	e041      	b.n	8003708 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b02      	cmp	r3, #2
 800368a:	d00c      	beq.n	80036a6 <RCCEx_PLLSAI2_Config+0x6e>
 800368c:	2b03      	cmp	r3, #3
 800368e:	d013      	beq.n	80036b8 <RCCEx_PLLSAI2_Config+0x80>
 8003690:	2b01      	cmp	r3, #1
 8003692:	d120      	bne.n	80036d6 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003694:	4b54      	ldr	r3, [pc, #336]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d11d      	bne.n	80036dc <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a4:	e01a      	b.n	80036dc <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036a6:	4b50      	ldr	r3, [pc, #320]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d116      	bne.n	80036e0 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036b6:	e013      	b.n	80036e0 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036b8:	4b4b      	ldr	r3, [pc, #300]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10f      	bne.n	80036e4 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036c4:	4b48      	ldr	r3, [pc, #288]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d109      	bne.n	80036e4 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036d4:	e006      	b.n	80036e4 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	73fb      	strb	r3, [r7, #15]
      break;
 80036da:	e004      	b.n	80036e6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80036dc:	bf00      	nop
 80036de:	e002      	b.n	80036e6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80036e0:	bf00      	nop
 80036e2:	e000      	b.n	80036e6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80036e4:	bf00      	nop
    }

    if(status == HAL_OK)
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10d      	bne.n	8003708 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036ec:	483e      	ldr	r0, [pc, #248]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036ee:	4b3e      	ldr	r3, [pc, #248]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6819      	ldr	r1, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	3b01      	subs	r3, #1
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	430b      	orrs	r3, r1
 8003704:	4313      	orrs	r3, r2
 8003706:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003708:	7bfb      	ldrb	r3, [r7, #15]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d167      	bne.n	80037de <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800370e:	4a36      	ldr	r2, [pc, #216]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003710:	4b35      	ldr	r3, [pc, #212]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003718:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800371a:	f7fd fcb5 	bl	8001088 <HAL_GetTick>
 800371e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003720:	e009      	b.n	8003736 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003722:	f7fd fcb1 	bl	8001088 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d902      	bls.n	8003736 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	73fb      	strb	r3, [r7, #15]
        break;
 8003734:	e005      	b.n	8003742 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003736:	4b2c      	ldr	r3, [pc, #176]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1ef      	bne.n	8003722 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003742:	7bfb      	ldrb	r3, [r7, #15]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d14a      	bne.n	80037de <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d111      	bne.n	8003772 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800374e:	4826      	ldr	r0, [pc, #152]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003750:	4b25      	ldr	r3, [pc, #148]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6892      	ldr	r2, [r2, #8]
 8003760:	0211      	lsls	r1, r2, #8
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	68d2      	ldr	r2, [r2, #12]
 8003766:	0912      	lsrs	r2, r2, #4
 8003768:	0452      	lsls	r2, r2, #17
 800376a:	430a      	orrs	r2, r1
 800376c:	4313      	orrs	r3, r2
 800376e:	6143      	str	r3, [r0, #20]
 8003770:	e011      	b.n	8003796 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003772:	481d      	ldr	r0, [pc, #116]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003774:	4b1c      	ldr	r3, [pc, #112]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800377c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6892      	ldr	r2, [r2, #8]
 8003784:	0211      	lsls	r1, r2, #8
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6912      	ldr	r2, [r2, #16]
 800378a:	0852      	lsrs	r2, r2, #1
 800378c:	3a01      	subs	r2, #1
 800378e:	0652      	lsls	r2, r2, #25
 8003790:	430a      	orrs	r2, r1
 8003792:	4313      	orrs	r3, r2
 8003794:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003796:	4a14      	ldr	r2, [pc, #80]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003798:	4b13      	ldr	r3, [pc, #76]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a2:	f7fd fc71 	bl	8001088 <HAL_GetTick>
 80037a6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037a8:	e009      	b.n	80037be <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037aa:	f7fd fc6d 	bl	8001088 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d902      	bls.n	80037be <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	73fb      	strb	r3, [r7, #15]
          break;
 80037bc:	e005      	b.n	80037ca <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037be:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0ef      	beq.n	80037aa <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80037ca:	7bfb      	ldrb	r3, [r7, #15]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d106      	bne.n	80037de <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80037d0:	4905      	ldr	r1, [pc, #20]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037d2:	4b05      	ldr	r3, [pc, #20]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037d4:	695a      	ldr	r2, [r3, #20]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	4313      	orrs	r3, r2
 80037dc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80037de:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40021000 	.word	0x40021000

080037ec <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d06c      	beq.n	80038d8 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d106      	bne.n	8003818 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f005 fdca 	bl	80093ac <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2202      	movs	r2, #2
 800381c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	22ca      	movs	r2, #202	; 0xca
 8003826:	625a      	str	r2, [r3, #36]	; 0x24
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2253      	movs	r2, #83	; 0x53
 800382e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f9a0 	bl	8003b76 <RTC_EnterInitMode>
 8003836:	4603      	mov	r3, r0
 8003838:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800383a:	7bfb      	ldrb	r3, [r7, #15]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d14b      	bne.n	80038d8 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800384e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003852:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6812      	ldr	r2, [r2, #0]
 800385c:	6891      	ldr	r1, [r2, #8]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6850      	ldr	r0, [r2, #4]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6912      	ldr	r2, [r2, #16]
 8003866:	4310      	orrs	r0, r2
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6992      	ldr	r2, [r2, #24]
 800386c:	4302      	orrs	r2, r0
 800386e:	430a      	orrs	r2, r1
 8003870:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	68d2      	ldr	r2, [r2, #12]
 800387a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6812      	ldr	r2, [r2, #0]
 8003884:	6911      	ldr	r1, [r2, #16]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6892      	ldr	r2, [r2, #8]
 800388a:	0412      	lsls	r2, r2, #16
 800388c:	430a      	orrs	r2, r1
 800388e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 f9a3 	bl	8003bdc <RTC_ExitInitMode>
 8003896:	4603      	mov	r3, r0
 8003898:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800389a:	7bfb      	ldrb	r3, [r7, #15]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d11b      	bne.n	80038d8 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6812      	ldr	r2, [r2, #0]
 80038a8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80038aa:	f022 0203 	bic.w	r2, r2, #3
 80038ae:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6812      	ldr	r2, [r2, #0]
 80038b8:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	69d0      	ldr	r0, [r2, #28]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6952      	ldr	r2, [r2, #20]
 80038c2:	4302      	orrs	r2, r0
 80038c4:	430a      	orrs	r2, r1
 80038c6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	22ff      	movs	r2, #255	; 0xff
 80038ce:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80038e2:	b590      	push	{r4, r7, lr}
 80038e4:	b087      	sub	sp, #28
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	60f8      	str	r0, [r7, #12]
 80038ea:	60b9      	str	r1, [r7, #8]
 80038ec:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_RTC_SetTime+0x1a>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e08b      	b.n	8003a14 <HAL_RTC_SetTime+0x132>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	22ca      	movs	r2, #202	; 0xca
 8003912:	625a      	str	r2, [r3, #36]	; 0x24
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2253      	movs	r2, #83	; 0x53
 800391a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 f92a 	bl	8003b76 <RTC_EnterInitMode>
 8003922:	4603      	mov	r3, r0
 8003924:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003926:	7cfb      	ldrb	r3, [r7, #19]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d163      	bne.n	80039f4 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d126      	bne.n	8003980 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393c:	2b00      	cmp	r3, #0
 800393e:	d102      	bne.n	8003946 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	2200      	movs	r2, #0
 8003944:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f000 f984 	bl	8003c58 <RTC_ByteToBcd2>
 8003950:	4603      	mov	r3, r0
 8003952:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	785b      	ldrb	r3, [r3, #1]
 8003958:	4618      	mov	r0, r3
 800395a:	f000 f97d 	bl	8003c58 <RTC_ByteToBcd2>
 800395e:	4603      	mov	r3, r0
 8003960:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003962:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	789b      	ldrb	r3, [r3, #2]
 8003968:	4618      	mov	r0, r3
 800396a:	f000 f975 	bl	8003c58 <RTC_ByteToBcd2>
 800396e:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003970:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	78db      	ldrb	r3, [r3, #3]
 8003978:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800397a:	4313      	orrs	r3, r2
 800397c:	617b      	str	r3, [r7, #20]
 800397e:	e018      	b.n	80039b2 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398a:	2b00      	cmp	r3, #0
 800398c:	d102      	bne.n	8003994 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2200      	movs	r2, #0
 8003992:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	785b      	ldrb	r3, [r3, #1]
 800399e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80039a0:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80039a6:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	78db      	ldrb	r3, [r3, #3]
 80039ac:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80039ae:	4313      	orrs	r3, r2
 80039b0:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80039bc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80039c0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	6812      	ldr	r2, [r2, #0]
 80039ca:	6892      	ldr	r2, [r2, #8]
 80039cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039d0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	6812      	ldr	r2, [r2, #0]
 80039da:	6891      	ldr	r1, [r2, #8]
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	68d0      	ldr	r0, [r2, #12]
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	6912      	ldr	r2, [r2, #16]
 80039e4:	4302      	orrs	r2, r0
 80039e6:	430a      	orrs	r2, r1
 80039e8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 f8f6 	bl	8003bdc <RTC_ExitInitMode>
 80039f0:	4603      	mov	r3, r0
 80039f2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	22ff      	movs	r2, #255	; 0xff
 80039fa:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80039fc:	7cfb      	ldrb	r3, [r7, #19]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d103      	bne.n	8003a0a <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003a12:	7cfb      	ldrb	r3, [r7, #19]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	371c      	adds	r7, #28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd90      	pop	{r4, r7, pc}

08003a1c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003a1c:	b590      	push	{r4, r7, lr}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d101      	bne.n	8003a36 <HAL_RTC_SetDate+0x1a>
 8003a32:	2302      	movs	r3, #2
 8003a34:	e075      	b.n	8003b22 <HAL_RTC_SetDate+0x106>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2202      	movs	r2, #2
 8003a42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10e      	bne.n	8003a6a <HAL_RTC_SetDate+0x4e>
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	785b      	ldrb	r3, [r3, #1]
 8003a50:	f003 0310 	and.w	r3, r3, #16
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d008      	beq.n	8003a6a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	785b      	ldrb	r3, [r3, #1]
 8003a5c:	f023 0310 	bic.w	r3, r3, #16
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	330a      	adds	r3, #10
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d11c      	bne.n	8003aaa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	78db      	ldrb	r3, [r3, #3]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 f8ef 	bl	8003c58 <RTC_ByteToBcd2>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	785b      	ldrb	r3, [r3, #1]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 f8e8 	bl	8003c58 <RTC_ByteToBcd2>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003a8c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	789b      	ldrb	r3, [r3, #2]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 f8e0 	bl	8003c58 <RTC_ByteToBcd2>
 8003a98:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003a9a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	e00e      	b.n	8003ac8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	78db      	ldrb	r3, [r3, #3]
 8003aae:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	785b      	ldrb	r3, [r3, #1]
 8003ab4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003ab6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003abc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	22ca      	movs	r2, #202	; 0xca
 8003ace:	625a      	str	r2, [r3, #36]	; 0x24
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2253      	movs	r2, #83	; 0x53
 8003ad6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 f84c 	bl	8003b76 <RTC_EnterInitMode>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003ae2:	7cfb      	ldrb	r3, [r7, #19]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10c      	bne.n	8003b02 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003af2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003af6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 f86f 	bl	8003bdc <RTC_ExitInitMode>
 8003afe:	4603      	mov	r3, r0
 8003b00:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	22ff      	movs	r2, #255	; 0xff
 8003b08:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003b0a:	7cfb      	ldrb	r3, [r7, #19]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d103      	bne.n	8003b18 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003b20:	7cfb      	ldrb	r3, [r7, #19]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	371c      	adds	r7, #28
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd90      	pop	{r4, r7, pc}

08003b2a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b084      	sub	sp, #16
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6812      	ldr	r2, [r2, #0]
 8003b3a:	68d2      	ldr	r2, [r2, #12]
 8003b3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b40:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003b42:	f7fd faa1 	bl	8001088 <HAL_GetTick>
 8003b46:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003b48:	e009      	b.n	8003b5e <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b4a:	f7fd fa9d 	bl	8001088 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b58:	d901      	bls.n	8003b5e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e007      	b.n	8003b6e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	f003 0320 	and.w	r3, r3, #32
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0ee      	beq.n	8003b4a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b084      	sub	sp, #16
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d120      	bne.n	8003bd2 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f04f 32ff 	mov.w	r2, #4294967295
 8003b98:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003b9a:	f7fd fa75 	bl	8001088 <HAL_GetTick>
 8003b9e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003ba0:	e00d      	b.n	8003bbe <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003ba2:	f7fd fa71 	bl	8001088 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bb0:	d905      	bls.n	8003bbe <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2203      	movs	r2, #3
 8003bba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d102      	bne.n	8003bd2 <RTC_EnterInitMode+0x5c>
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
 8003bce:	2b03      	cmp	r3, #3
 8003bd0:	d1e7      	bne.n	8003ba2 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003be4:	2300      	movs	r3, #0
 8003be6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003be8:	4a1a      	ldr	r2, [pc, #104]	; (8003c54 <RTC_ExitInitMode+0x78>)
 8003bea:	4b1a      	ldr	r3, [pc, #104]	; (8003c54 <RTC_ExitInitMode+0x78>)
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bf2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003bf4:	4b17      	ldr	r3, [pc, #92]	; (8003c54 <RTC_ExitInitMode+0x78>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10c      	bne.n	8003c1a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7ff ff92 	bl	8003b2a <HAL_RTC_WaitForSynchro>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d01e      	beq.n	8003c4a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2203      	movs	r2, #3
 8003c10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	73fb      	strb	r3, [r7, #15]
 8003c18:	e017      	b.n	8003c4a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003c1a:	4a0e      	ldr	r2, [pc, #56]	; (8003c54 <RTC_ExitInitMode+0x78>)
 8003c1c:	4b0d      	ldr	r3, [pc, #52]	; (8003c54 <RTC_ExitInitMode+0x78>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f023 0320 	bic.w	r3, r3, #32
 8003c24:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7ff ff7f 	bl	8003b2a <HAL_RTC_WaitForSynchro>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d005      	beq.n	8003c3e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2203      	movs	r2, #3
 8003c36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003c3e:	4a05      	ldr	r2, [pc, #20]	; (8003c54 <RTC_ExitInitMode+0x78>)
 8003c40:	4b04      	ldr	r3, [pc, #16]	; (8003c54 <RTC_ExitInitMode+0x78>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f043 0320 	orr.w	r3, r3, #32
 8003c48:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40002800 	.word	0x40002800

08003c58 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	4603      	mov	r3, r0
 8003c60:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8003c66:	79fb      	ldrb	r3, [r7, #7]
 8003c68:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8003c6a:	e005      	b.n	8003c78 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8003c72:	7afb      	ldrb	r3, [r7, #11]
 8003c74:	3b0a      	subs	r3, #10
 8003c76:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8003c78:	7afb      	ldrb	r3, [r7, #11]
 8003c7a:	2b09      	cmp	r3, #9
 8003c7c:	d8f6      	bhi.n	8003c6c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	7afb      	ldrb	r3, [r7, #11]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	b2db      	uxtb	r3, r3
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bc80      	pop	{r7}
 8003c94:	4770      	bx	lr
	...

08003c98 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d101      	bne.n	8003cb2 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	e07f      	b.n	8003db2 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	22ca      	movs	r2, #202	; 0xca
 8003cc8:	625a      	str	r2, [r3, #36]	; 0x24
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2253      	movs	r2, #83	; 0x53
 8003cd0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	6812      	ldr	r2, [r2, #0]
 8003cda:	6892      	ldr	r2, [r2, #8]
 8003cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ce0:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	6812      	ldr	r2, [r2, #0]
 8003cea:	68d2      	ldr	r2, [r2, #12]
 8003cec:	b2d2      	uxtb	r2, r2
 8003cee:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003cf2:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d120      	bne.n	8003d44 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8003d02:	f7fd f9c1 	bl	8001088 <HAL_GetTick>
 8003d06:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8003d08:	e015      	b.n	8003d36 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d0a:	f7fd f9bd 	bl	8001088 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d18:	d90d      	bls.n	8003d36 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	22ff      	movs	r2, #255	; 0xff
 8003d20:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2203      	movs	r2, #3
 8003d26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e03d      	b.n	8003db2 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0e2      	beq.n	8003d0a <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	6812      	ldr	r2, [r2, #0]
 8003d54:	6892      	ldr	r2, [r2, #8]
 8003d56:	f022 0107 	bic.w	r1, r2, #7
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003d60:	4a16      	ldr	r2, [pc, #88]	; (8003dbc <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8003d62:	4b16      	ldr	r3, [pc, #88]	; (8003dbc <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d6a:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003d6c:	4a13      	ldr	r2, [pc, #76]	; (8003dbc <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8003d6e:	4b13      	ldr	r3, [pc, #76]	; (8003dbc <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d76:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	6812      	ldr	r2, [r2, #0]
 8003d80:	6892      	ldr	r2, [r2, #8]
 8003d82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d86:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	6812      	ldr	r2, [r2, #0]
 8003d90:	6892      	ldr	r2, [r2, #8]
 8003d92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d96:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	22ff      	movs	r2, #255	; 0xff
 8003d9e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3718      	adds	r7, #24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	40010400 	.word	0x40010400

08003dc0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003dc8:	4b0f      	ldr	r3, [pc, #60]	; (8003e08 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8003dca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003dce:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00b      	beq.n	8003df6 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	6812      	ldr	r2, [r2, #0]
 8003de6:	68d2      	ldr	r2, [r2, #12]
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003dee:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 f80b 	bl	8003e0c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8003dfe:	bf00      	nop
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	40010400 	.word	0x40010400

08003e0c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bc80      	pop	{r7}
 8003e1c:	4770      	bx	lr

08003e1e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b082      	sub	sp, #8
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e01d      	b.n	8003e6c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d106      	bne.n	8003e4a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f005 fbfd 	bl	8009644 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	3304      	adds	r3, #4
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4610      	mov	r0, r2
 8003e5e:	f000 fdcf 	bl	8004a00 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6a1a      	ldr	r2, [r3, #32]
 8003e8a:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e8e:	4013      	ands	r3, r2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10f      	bne.n	8003eb4 <HAL_TIM_Base_DeInit+0x40>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6a1a      	ldr	r2, [r3, #32]
 8003e9a:	f240 4344 	movw	r3, #1092	; 0x444
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d107      	bne.n	8003eb4 <HAL_TIM_Base_DeInit+0x40>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6812      	ldr	r2, [r2, #0]
 8003eac:	6812      	ldr	r2, [r2, #0]
 8003eae:	f022 0201 	bic.w	r2, r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f005 fc0d 	bl	80096d4 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6a1a      	ldr	r2, [r3, #32]
 8003eea:	f241 1311 	movw	r3, #4369	; 0x1111
 8003eee:	4013      	ands	r3, r2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10f      	bne.n	8003f14 <HAL_TIM_Base_Stop+0x40>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6a1a      	ldr	r2, [r3, #32]
 8003efa:	f240 4344 	movw	r3, #1092	; 0x444
 8003efe:	4013      	ands	r3, r2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d107      	bne.n	8003f14 <HAL_TIM_Base_Stop+0x40>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6812      	ldr	r2, [r2, #0]
 8003f0c:	6812      	ldr	r2, [r2, #0]
 8003f0e:	f022 0201 	bic.w	r2, r2, #1
 8003f12:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bc80      	pop	{r7}
 8003f26:	4770      	bx	lr

08003f28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6812      	ldr	r2, [r2, #0]
 8003f38:	68d2      	ldr	r2, [r2, #12]
 8003f3a:	f042 0201 	orr.w	r2, r2, #1
 8003f3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689a      	ldr	r2, [r3, #8]
 8003f46:	4b0c      	ldr	r3, [pc, #48]	; (8003f78 <HAL_TIM_Base_Start_IT+0x50>)
 8003f48:	4013      	ands	r3, r2
 8003f4a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2b06      	cmp	r3, #6
 8003f50:	d00b      	beq.n	8003f6a <HAL_TIM_Base_Start_IT+0x42>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f58:	d007      	beq.n	8003f6a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6812      	ldr	r2, [r2, #0]
 8003f62:	6812      	ldr	r2, [r2, #0]
 8003f64:	f042 0201 	orr.w	r2, r2, #1
 8003f68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3714      	adds	r7, #20
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bc80      	pop	{r7}
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	00010007 	.word	0x00010007

08003f7c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6812      	ldr	r2, [r2, #0]
 8003f8c:	68d2      	ldr	r2, [r2, #12]
 8003f8e:	f022 0201 	bic.w	r2, r2, #1
 8003f92:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6a1a      	ldr	r2, [r3, #32]
 8003f9a:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10f      	bne.n	8003fc4 <HAL_TIM_Base_Stop_IT+0x48>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6a1a      	ldr	r2, [r3, #32]
 8003faa:	f240 4344 	movw	r3, #1092	; 0x444
 8003fae:	4013      	ands	r3, r2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d107      	bne.n	8003fc4 <HAL_TIM_Base_Stop_IT+0x48>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6812      	ldr	r2, [r2, #0]
 8003fbc:	6812      	ldr	r2, [r2, #0]
 8003fbe:	f022 0201 	bic.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr

08003fd0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e01d      	b.n	800401e <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d106      	bne.n	8003ffc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f815 	bl	8004026 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3304      	adds	r3, #4
 800400c:	4619      	mov	r1, r3
 800400e:	4610      	mov	r0, r2
 8004010:	f000 fcf6 	bl	8004a00 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	4770      	bx	lr

08004038 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	2b0c      	cmp	r3, #12
 8004046:	d841      	bhi.n	80040cc <HAL_TIM_OC_Start_IT+0x94>
 8004048:	a201      	add	r2, pc, #4	; (adr r2, 8004050 <HAL_TIM_OC_Start_IT+0x18>)
 800404a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404e:	bf00      	nop
 8004050:	08004085 	.word	0x08004085
 8004054:	080040cd 	.word	0x080040cd
 8004058:	080040cd 	.word	0x080040cd
 800405c:	080040cd 	.word	0x080040cd
 8004060:	08004097 	.word	0x08004097
 8004064:	080040cd 	.word	0x080040cd
 8004068:	080040cd 	.word	0x080040cd
 800406c:	080040cd 	.word	0x080040cd
 8004070:	080040a9 	.word	0x080040a9
 8004074:	080040cd 	.word	0x080040cd
 8004078:	080040cd 	.word	0x080040cd
 800407c:	080040cd 	.word	0x080040cd
 8004080:	080040bb 	.word	0x080040bb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6812      	ldr	r2, [r2, #0]
 800408c:	68d2      	ldr	r2, [r2, #12]
 800408e:	f042 0202 	orr.w	r2, r2, #2
 8004092:	60da      	str	r2, [r3, #12]
      break;
 8004094:	e01b      	b.n	80040ce <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6812      	ldr	r2, [r2, #0]
 800409e:	68d2      	ldr	r2, [r2, #12]
 80040a0:	f042 0204 	orr.w	r2, r2, #4
 80040a4:	60da      	str	r2, [r3, #12]
      break;
 80040a6:	e012      	b.n	80040ce <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6812      	ldr	r2, [r2, #0]
 80040b0:	68d2      	ldr	r2, [r2, #12]
 80040b2:	f042 0208 	orr.w	r2, r2, #8
 80040b6:	60da      	str	r2, [r3, #12]
      break;
 80040b8:	e009      	b.n	80040ce <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	6812      	ldr	r2, [r2, #0]
 80040c2:	68d2      	ldr	r2, [r2, #12]
 80040c4:	f042 0210 	orr.w	r2, r2, #16
 80040c8:	60da      	str	r2, [r3, #12]
      break;
 80040ca:	e000      	b.n	80040ce <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 80040cc:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2201      	movs	r2, #1
 80040d4:	6839      	ldr	r1, [r7, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f001 fa37 	bl	800554a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a1e      	ldr	r2, [pc, #120]	; (800415c <HAL_TIM_OC_Start_IT+0x124>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d013      	beq.n	800410e <HAL_TIM_OC_Start_IT+0xd6>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a1d      	ldr	r2, [pc, #116]	; (8004160 <HAL_TIM_OC_Start_IT+0x128>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d00e      	beq.n	800410e <HAL_TIM_OC_Start_IT+0xd6>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a1b      	ldr	r2, [pc, #108]	; (8004164 <HAL_TIM_OC_Start_IT+0x12c>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d009      	beq.n	800410e <HAL_TIM_OC_Start_IT+0xd6>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a1a      	ldr	r2, [pc, #104]	; (8004168 <HAL_TIM_OC_Start_IT+0x130>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d004      	beq.n	800410e <HAL_TIM_OC_Start_IT+0xd6>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a18      	ldr	r2, [pc, #96]	; (800416c <HAL_TIM_OC_Start_IT+0x134>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d101      	bne.n	8004112 <HAL_TIM_OC_Start_IT+0xda>
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <HAL_TIM_OC_Start_IT+0xdc>
 8004112:	2300      	movs	r3, #0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d007      	beq.n	8004128 <HAL_TIM_OC_Start_IT+0xf0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6812      	ldr	r2, [r2, #0]
 8004120:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004122:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004126:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	4b10      	ldr	r3, [pc, #64]	; (8004170 <HAL_TIM_OC_Start_IT+0x138>)
 8004130:	4013      	ands	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2b06      	cmp	r3, #6
 8004138:	d00b      	beq.n	8004152 <HAL_TIM_OC_Start_IT+0x11a>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004140:	d007      	beq.n	8004152 <HAL_TIM_OC_Start_IT+0x11a>
  {
    __HAL_TIM_ENABLE(htim);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	6812      	ldr	r2, [r2, #0]
 800414a:	6812      	ldr	r2, [r2, #0]
 800414c:	f042 0201 	orr.w	r2, r2, #1
 8004150:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	40012c00 	.word	0x40012c00
 8004160:	40013400 	.word	0x40013400
 8004164:	40014000 	.word	0x40014000
 8004168:	40014400 	.word	0x40014400
 800416c:	40014800 	.word	0x40014800
 8004170:	00010007 	.word	0x00010007

08004174 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b0c      	cmp	r3, #12
 8004182:	d841      	bhi.n	8004208 <HAL_TIM_OC_Stop_IT+0x94>
 8004184:	a201      	add	r2, pc, #4	; (adr r2, 800418c <HAL_TIM_OC_Stop_IT+0x18>)
 8004186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418a:	bf00      	nop
 800418c:	080041c1 	.word	0x080041c1
 8004190:	08004209 	.word	0x08004209
 8004194:	08004209 	.word	0x08004209
 8004198:	08004209 	.word	0x08004209
 800419c:	080041d3 	.word	0x080041d3
 80041a0:	08004209 	.word	0x08004209
 80041a4:	08004209 	.word	0x08004209
 80041a8:	08004209 	.word	0x08004209
 80041ac:	080041e5 	.word	0x080041e5
 80041b0:	08004209 	.word	0x08004209
 80041b4:	08004209 	.word	0x08004209
 80041b8:	08004209 	.word	0x08004209
 80041bc:	080041f7 	.word	0x080041f7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6812      	ldr	r2, [r2, #0]
 80041c8:	68d2      	ldr	r2, [r2, #12]
 80041ca:	f022 0202 	bic.w	r2, r2, #2
 80041ce:	60da      	str	r2, [r3, #12]
      break;
 80041d0:	e01b      	b.n	800420a <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	6812      	ldr	r2, [r2, #0]
 80041da:	68d2      	ldr	r2, [r2, #12]
 80041dc:	f022 0204 	bic.w	r2, r2, #4
 80041e0:	60da      	str	r2, [r3, #12]
      break;
 80041e2:	e012      	b.n	800420a <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6812      	ldr	r2, [r2, #0]
 80041ec:	68d2      	ldr	r2, [r2, #12]
 80041ee:	f022 0208 	bic.w	r2, r2, #8
 80041f2:	60da      	str	r2, [r3, #12]
      break;
 80041f4:	e009      	b.n	800420a <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6812      	ldr	r2, [r2, #0]
 80041fe:	68d2      	ldr	r2, [r2, #12]
 8004200:	f022 0210 	bic.w	r2, r2, #16
 8004204:	60da      	str	r2, [r3, #12]
      break;
 8004206:	e000      	b.n	800420a <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 8004208:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2200      	movs	r2, #0
 8004210:	6839      	ldr	r1, [r7, #0]
 8004212:	4618      	mov	r0, r3
 8004214:	f001 f999 	bl	800554a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a28      	ldr	r2, [pc, #160]	; (80042c0 <HAL_TIM_OC_Stop_IT+0x14c>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d013      	beq.n	800424a <HAL_TIM_OC_Stop_IT+0xd6>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a27      	ldr	r2, [pc, #156]	; (80042c4 <HAL_TIM_OC_Stop_IT+0x150>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00e      	beq.n	800424a <HAL_TIM_OC_Stop_IT+0xd6>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a25      	ldr	r2, [pc, #148]	; (80042c8 <HAL_TIM_OC_Stop_IT+0x154>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d009      	beq.n	800424a <HAL_TIM_OC_Stop_IT+0xd6>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a24      	ldr	r2, [pc, #144]	; (80042cc <HAL_TIM_OC_Stop_IT+0x158>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d004      	beq.n	800424a <HAL_TIM_OC_Stop_IT+0xd6>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a22      	ldr	r2, [pc, #136]	; (80042d0 <HAL_TIM_OC_Stop_IT+0x15c>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d101      	bne.n	800424e <HAL_TIM_OC_Stop_IT+0xda>
 800424a:	2301      	movs	r3, #1
 800424c:	e000      	b.n	8004250 <HAL_TIM_OC_Stop_IT+0xdc>
 800424e:	2300      	movs	r3, #0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d017      	beq.n	8004284 <HAL_TIM_OC_Stop_IT+0x110>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6a1a      	ldr	r2, [r3, #32]
 800425a:	f241 1311 	movw	r3, #4369	; 0x1111
 800425e:	4013      	ands	r3, r2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10f      	bne.n	8004284 <HAL_TIM_OC_Stop_IT+0x110>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6a1a      	ldr	r2, [r3, #32]
 800426a:	f240 4344 	movw	r3, #1092	; 0x444
 800426e:	4013      	ands	r3, r2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d107      	bne.n	8004284 <HAL_TIM_OC_Stop_IT+0x110>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6812      	ldr	r2, [r2, #0]
 800427c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800427e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004282:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6a1a      	ldr	r2, [r3, #32]
 800428a:	f241 1311 	movw	r3, #4369	; 0x1111
 800428e:	4013      	ands	r3, r2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10f      	bne.n	80042b4 <HAL_TIM_OC_Stop_IT+0x140>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6a1a      	ldr	r2, [r3, #32]
 800429a:	f240 4344 	movw	r3, #1092	; 0x444
 800429e:	4013      	ands	r3, r2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d107      	bne.n	80042b4 <HAL_TIM_OC_Stop_IT+0x140>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6812      	ldr	r2, [r2, #0]
 80042ac:	6812      	ldr	r2, [r2, #0]
 80042ae:	f022 0201 	bic.w	r2, r2, #1
 80042b2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	40012c00 	.word	0x40012c00
 80042c4:	40013400 	.word	0x40013400
 80042c8:	40014000 	.word	0x40014000
 80042cc:	40014400 	.word	0x40014400
 80042d0:	40014800 	.word	0x40014800

080042d4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e01d      	b.n	8004322 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d106      	bne.n	8004300 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f815 	bl	800432a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3304      	adds	r3, #4
 8004310:	4619      	mov	r1, r3
 8004312:	4610      	mov	r0, r2
 8004314:	f000 fb74 	bl	8004a00 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	bc80      	pop	{r7}
 800433a:	4770      	bx	lr

0800433c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b02      	cmp	r3, #2
 8004350:	d122      	bne.n	8004398 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b02      	cmp	r3, #2
 800435e:	d11b      	bne.n	8004398 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f06f 0202 	mvn.w	r2, #2
 8004368:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 fb23 	bl	80049ca <HAL_TIM_IC_CaptureCallback>
 8004384:	e005      	b.n	8004392 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 fb16 	bl	80049b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fb25 	bl	80049dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	f003 0304 	and.w	r3, r3, #4
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d122      	bne.n	80043ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b04      	cmp	r3, #4
 80043b2:	d11b      	bne.n	80043ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f06f 0204 	mvn.w	r2, #4
 80043bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2202      	movs	r2, #2
 80043c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 faf9 	bl	80049ca <HAL_TIM_IC_CaptureCallback>
 80043d8:	e005      	b.n	80043e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 faec 	bl	80049b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 fafb 	bl	80049dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f003 0308 	and.w	r3, r3, #8
 80043f6:	2b08      	cmp	r3, #8
 80043f8:	d122      	bne.n	8004440 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f003 0308 	and.w	r3, r3, #8
 8004404:	2b08      	cmp	r3, #8
 8004406:	d11b      	bne.n	8004440 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f06f 0208 	mvn.w	r2, #8
 8004410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2204      	movs	r2, #4
 8004416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 facf 	bl	80049ca <HAL_TIM_IC_CaptureCallback>
 800442c:	e005      	b.n	800443a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 fac2 	bl	80049b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 fad1 	bl	80049dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	f003 0310 	and.w	r3, r3, #16
 800444a:	2b10      	cmp	r3, #16
 800444c:	d122      	bne.n	8004494 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f003 0310 	and.w	r3, r3, #16
 8004458:	2b10      	cmp	r3, #16
 800445a:	d11b      	bne.n	8004494 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f06f 0210 	mvn.w	r2, #16
 8004464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2208      	movs	r2, #8
 800446a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	69db      	ldr	r3, [r3, #28]
 8004472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 faa5 	bl	80049ca <HAL_TIM_IC_CaptureCallback>
 8004480:	e005      	b.n	800448e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 fa98 	bl	80049b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 faa7 	bl	80049dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d10e      	bne.n	80044c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d107      	bne.n	80044c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f06f 0201 	mvn.w	r2, #1
 80044b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fa73 	bl	80049a6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ca:	2b80      	cmp	r3, #128	; 0x80
 80044cc:	d10e      	bne.n	80044ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d8:	2b80      	cmp	r3, #128	; 0x80
 80044da:	d107      	bne.n	80044ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f001 f8e3 	bl	80056b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044fa:	d10e      	bne.n	800451a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004506:	2b80      	cmp	r3, #128	; 0x80
 8004508:	d107      	bne.n	800451a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f001 f8d5 	bl	80056c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004524:	2b40      	cmp	r3, #64	; 0x40
 8004526:	d10e      	bne.n	8004546 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004532:	2b40      	cmp	r3, #64	; 0x40
 8004534:	d107      	bne.n	8004546 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800453e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 fa54 	bl	80049ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	f003 0320 	and.w	r3, r3, #32
 8004550:	2b20      	cmp	r3, #32
 8004552:	d10e      	bne.n	8004572 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	f003 0320 	and.w	r3, r3, #32
 800455e:	2b20      	cmp	r3, #32
 8004560:	d107      	bne.n	8004572 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f06f 0220 	mvn.w	r2, #32
 800456a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f001 f897 	bl	80056a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004572:	bf00      	nop
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
	...

0800457c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800458e:	2b01      	cmp	r3, #1
 8004590:	d101      	bne.n	8004596 <HAL_TIM_OC_ConfigChannel+0x1a>
 8004592:	2302      	movs	r3, #2
 8004594:	e06c      	b.n	8004670 <HAL_TIM_OC_ConfigChannel+0xf4>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2202      	movs	r2, #2
 80045a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b14      	cmp	r3, #20
 80045aa:	d857      	bhi.n	800465c <HAL_TIM_OC_ConfigChannel+0xe0>
 80045ac:	a201      	add	r2, pc, #4	; (adr r2, 80045b4 <HAL_TIM_OC_ConfigChannel+0x38>)
 80045ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b2:	bf00      	nop
 80045b4:	08004609 	.word	0x08004609
 80045b8:	0800465d 	.word	0x0800465d
 80045bc:	0800465d 	.word	0x0800465d
 80045c0:	0800465d 	.word	0x0800465d
 80045c4:	08004617 	.word	0x08004617
 80045c8:	0800465d 	.word	0x0800465d
 80045cc:	0800465d 	.word	0x0800465d
 80045d0:	0800465d 	.word	0x0800465d
 80045d4:	08004625 	.word	0x08004625
 80045d8:	0800465d 	.word	0x0800465d
 80045dc:	0800465d 	.word	0x0800465d
 80045e0:	0800465d 	.word	0x0800465d
 80045e4:	08004633 	.word	0x08004633
 80045e8:	0800465d 	.word	0x0800465d
 80045ec:	0800465d 	.word	0x0800465d
 80045f0:	0800465d 	.word	0x0800465d
 80045f4:	08004641 	.word	0x08004641
 80045f8:	0800465d 	.word	0x0800465d
 80045fc:	0800465d 	.word	0x0800465d
 8004600:	0800465d 	.word	0x0800465d
 8004604:	0800464f 	.word	0x0800464f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68b9      	ldr	r1, [r7, #8]
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fa8e 	bl	8004b30 <TIM_OC1_SetConfig>
      break;
 8004614:	e023      	b.n	800465e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68b9      	ldr	r1, [r7, #8]
 800461c:	4618      	mov	r0, r3
 800461e:	f000 fb17 	bl	8004c50 <TIM_OC2_SetConfig>
      break;
 8004622:	e01c      	b.n	800465e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68b9      	ldr	r1, [r7, #8]
 800462a:	4618      	mov	r0, r3
 800462c:	f000 fb98 	bl	8004d60 <TIM_OC3_SetConfig>
      break;
 8004630:	e015      	b.n	800465e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68b9      	ldr	r1, [r7, #8]
 8004638:	4618      	mov	r0, r3
 800463a:	f000 fc19 	bl	8004e70 <TIM_OC4_SetConfig>
      break;
 800463e:	e00e      	b.n	800465e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68b9      	ldr	r1, [r7, #8]
 8004646:	4618      	mov	r0, r3
 8004648:	f000 fc7a 	bl	8004f40 <TIM_OC5_SetConfig>
      break;
 800464c:	e007      	b.n	800465e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68b9      	ldr	r1, [r7, #8]
 8004654:	4618      	mov	r0, r3
 8004656:	f000 fcd7 	bl	8005008 <TIM_OC6_SetConfig>
      break;
 800465a:	e000      	b.n	800465e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      break;
 800465c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800468a:	2b01      	cmp	r3, #1
 800468c:	d101      	bne.n	8004692 <HAL_TIM_IC_ConfigChannel+0x1a>
 800468e:	2302      	movs	r3, #2
 8004690:	e08a      	b.n	80047a8 <HAL_TIM_IC_ConfigChannel+0x130>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2202      	movs	r2, #2
 800469e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d11b      	bne.n	80046e0 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6818      	ldr	r0, [r3, #0]
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	6819      	ldr	r1, [r3, #0]
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f000 fd92 	bl	80051e0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	6812      	ldr	r2, [r2, #0]
 80046c4:	6992      	ldr	r2, [r2, #24]
 80046c6:	f022 020c 	bic.w	r2, r2, #12
 80046ca:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	6812      	ldr	r2, [r2, #0]
 80046d4:	6991      	ldr	r1, [r2, #24]
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	6892      	ldr	r2, [r2, #8]
 80046da:	430a      	orrs	r2, r1
 80046dc:	619a      	str	r2, [r3, #24]
 80046de:	e05a      	b.n	8004796 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	d11c      	bne.n	8004720 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6818      	ldr	r0, [r3, #0]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	6819      	ldr	r1, [r3, #0]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f000 fe0d 	bl	8005314 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	6812      	ldr	r2, [r2, #0]
 8004702:	6992      	ldr	r2, [r2, #24]
 8004704:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004708:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	6812      	ldr	r2, [r2, #0]
 8004712:	6991      	ldr	r1, [r2, #24]
 8004714:	68ba      	ldr	r2, [r7, #8]
 8004716:	6892      	ldr	r2, [r2, #8]
 8004718:	0212      	lsls	r2, r2, #8
 800471a:	430a      	orrs	r2, r1
 800471c:	619a      	str	r2, [r3, #24]
 800471e:	e03a      	b.n	8004796 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b08      	cmp	r3, #8
 8004724:	d11b      	bne.n	800475e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6818      	ldr	r0, [r3, #0]
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	6819      	ldr	r1, [r3, #0]
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f000 fe58 	bl	80053ea <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	6812      	ldr	r2, [r2, #0]
 8004742:	69d2      	ldr	r2, [r2, #28]
 8004744:	f022 020c 	bic.w	r2, r2, #12
 8004748:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	6812      	ldr	r2, [r2, #0]
 8004752:	69d1      	ldr	r1, [r2, #28]
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	6892      	ldr	r2, [r2, #8]
 8004758:	430a      	orrs	r2, r1
 800475a:	61da      	str	r2, [r3, #28]
 800475c:	e01b      	b.n	8004796 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6818      	ldr	r0, [r3, #0]
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	6819      	ldr	r1, [r3, #0]
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f000 fe77 	bl	8005460 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	6812      	ldr	r2, [r2, #0]
 800477a:	69d2      	ldr	r2, [r2, #28]
 800477c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004780:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	6812      	ldr	r2, [r2, #0]
 800478a:	69d1      	ldr	r1, [r2, #28]
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	6892      	ldr	r2, [r2, #8]
 8004790:	0212      	lsls	r2, r2, #8
 8004792:	430a      	orrs	r2, r1
 8004794:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d101      	bne.n	80047c8 <HAL_TIM_ConfigClockSource+0x18>
 80047c4:	2302      	movs	r3, #2
 80047c6:	e0a8      	b.n	800491a <HAL_TIM_ConfigClockSource+0x16a>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2202      	movs	r2, #2
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b40      	cmp	r3, #64	; 0x40
 8004802:	d067      	beq.n	80048d4 <HAL_TIM_ConfigClockSource+0x124>
 8004804:	2b40      	cmp	r3, #64	; 0x40
 8004806:	d80b      	bhi.n	8004820 <HAL_TIM_ConfigClockSource+0x70>
 8004808:	2b10      	cmp	r3, #16
 800480a:	d073      	beq.n	80048f4 <HAL_TIM_ConfigClockSource+0x144>
 800480c:	2b10      	cmp	r3, #16
 800480e:	d802      	bhi.n	8004816 <HAL_TIM_ConfigClockSource+0x66>
 8004810:	2b00      	cmp	r3, #0
 8004812:	d06f      	beq.n	80048f4 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004814:	e078      	b.n	8004908 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004816:	2b20      	cmp	r3, #32
 8004818:	d06c      	beq.n	80048f4 <HAL_TIM_ConfigClockSource+0x144>
 800481a:	2b30      	cmp	r3, #48	; 0x30
 800481c:	d06a      	beq.n	80048f4 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800481e:	e073      	b.n	8004908 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004820:	2b70      	cmp	r3, #112	; 0x70
 8004822:	d00d      	beq.n	8004840 <HAL_TIM_ConfigClockSource+0x90>
 8004824:	2b70      	cmp	r3, #112	; 0x70
 8004826:	d804      	bhi.n	8004832 <HAL_TIM_ConfigClockSource+0x82>
 8004828:	2b50      	cmp	r3, #80	; 0x50
 800482a:	d033      	beq.n	8004894 <HAL_TIM_ConfigClockSource+0xe4>
 800482c:	2b60      	cmp	r3, #96	; 0x60
 800482e:	d041      	beq.n	80048b4 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004830:	e06a      	b.n	8004908 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004836:	d066      	beq.n	8004906 <HAL_TIM_ConfigClockSource+0x156>
 8004838:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800483c:	d017      	beq.n	800486e <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800483e:	e063      	b.n	8004908 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6818      	ldr	r0, [r3, #0]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	6899      	ldr	r1, [r3, #8]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f000 fe5c 	bl	800550c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004862:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	609a      	str	r2, [r3, #8]
      break;
 800486c:	e04c      	b.n	8004908 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6818      	ldr	r0, [r3, #0]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	6899      	ldr	r1, [r3, #8]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685a      	ldr	r2, [r3, #4]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f000 fe45 	bl	800550c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6812      	ldr	r2, [r2, #0]
 800488a:	6892      	ldr	r2, [r2, #8]
 800488c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004890:	609a      	str	r2, [r3, #8]
      break;
 8004892:	e039      	b.n	8004908 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6818      	ldr	r0, [r3, #0]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	6859      	ldr	r1, [r3, #4]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	461a      	mov	r2, r3
 80048a2:	f000 fd09 	bl	80052b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2150      	movs	r1, #80	; 0x50
 80048ac:	4618      	mov	r0, r3
 80048ae:	f000 fe13 	bl	80054d8 <TIM_ITRx_SetConfig>
      break;
 80048b2:	e029      	b.n	8004908 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6818      	ldr	r0, [r3, #0]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	6859      	ldr	r1, [r3, #4]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	461a      	mov	r2, r3
 80048c2:	f000 fd63 	bl	800538c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2160      	movs	r1, #96	; 0x60
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 fe03 	bl	80054d8 <TIM_ITRx_SetConfig>
      break;
 80048d2:	e019      	b.n	8004908 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6818      	ldr	r0, [r3, #0]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	6859      	ldr	r1, [r3, #4]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	461a      	mov	r2, r3
 80048e2:	f000 fce9 	bl	80052b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2140      	movs	r1, #64	; 0x40
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 fdf3 	bl	80054d8 <TIM_ITRx_SetConfig>
      break;
 80048f2:	e009      	b.n	8004908 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4619      	mov	r1, r3
 80048fe:	4610      	mov	r0, r2
 8004900:	f000 fdea 	bl	80054d8 <TIM_ITRx_SetConfig>
      break;
 8004904:	e000      	b.n	8004908 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004906:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b082      	sub	sp, #8
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
 800492a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004932:	2b01      	cmp	r3, #1
 8004934:	d101      	bne.n	800493a <HAL_TIM_SlaveConfigSynchro+0x18>
 8004936:	2302      	movs	r3, #2
 8004938:	e031      	b.n	800499e <HAL_TIM_SlaveConfigSynchro+0x7c>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2202      	movs	r2, #2
 8004946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800494a:	6839      	ldr	r1, [r7, #0]
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 fbbf 	bl	80050d0 <TIM_SlaveTimer_SetConfig>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d009      	beq.n	800496c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e018      	b.n	800499e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6812      	ldr	r2, [r2, #0]
 8004974:	68d2      	ldr	r2, [r2, #12]
 8004976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800497a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	6812      	ldr	r2, [r2, #0]
 8004984:	68d2      	ldr	r2, [r2, #12]
 8004986:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800498a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80049ae:	bf00      	nop
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bc80      	pop	{r7}
 80049b6:	4770      	bx	lr

080049b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bc80      	pop	{r7}
 80049c8:	4770      	bx	lr

080049ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b083      	sub	sp, #12
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049d2:	bf00      	nop
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bc80      	pop	{r7}
 80049da:	4770      	bx	lr

080049dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bc80      	pop	{r7}
 80049ec:	4770      	bx	lr

080049ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bc80      	pop	{r7}
 80049fe:	4770      	bx	lr

08004a00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a3f      	ldr	r2, [pc, #252]	; (8004b10 <TIM_Base_SetConfig+0x110>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d013      	beq.n	8004a40 <TIM_Base_SetConfig+0x40>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a1e:	d00f      	beq.n	8004a40 <TIM_Base_SetConfig+0x40>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a3c      	ldr	r2, [pc, #240]	; (8004b14 <TIM_Base_SetConfig+0x114>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d00b      	beq.n	8004a40 <TIM_Base_SetConfig+0x40>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a3b      	ldr	r2, [pc, #236]	; (8004b18 <TIM_Base_SetConfig+0x118>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d007      	beq.n	8004a40 <TIM_Base_SetConfig+0x40>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a3a      	ldr	r2, [pc, #232]	; (8004b1c <TIM_Base_SetConfig+0x11c>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d003      	beq.n	8004a40 <TIM_Base_SetConfig+0x40>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a39      	ldr	r2, [pc, #228]	; (8004b20 <TIM_Base_SetConfig+0x120>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d108      	bne.n	8004a52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a2e      	ldr	r2, [pc, #184]	; (8004b10 <TIM_Base_SetConfig+0x110>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d01f      	beq.n	8004a9a <TIM_Base_SetConfig+0x9a>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a60:	d01b      	beq.n	8004a9a <TIM_Base_SetConfig+0x9a>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a2b      	ldr	r2, [pc, #172]	; (8004b14 <TIM_Base_SetConfig+0x114>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d017      	beq.n	8004a9a <TIM_Base_SetConfig+0x9a>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a2a      	ldr	r2, [pc, #168]	; (8004b18 <TIM_Base_SetConfig+0x118>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d013      	beq.n	8004a9a <TIM_Base_SetConfig+0x9a>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a29      	ldr	r2, [pc, #164]	; (8004b1c <TIM_Base_SetConfig+0x11c>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d00f      	beq.n	8004a9a <TIM_Base_SetConfig+0x9a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a28      	ldr	r2, [pc, #160]	; (8004b20 <TIM_Base_SetConfig+0x120>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d00b      	beq.n	8004a9a <TIM_Base_SetConfig+0x9a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a27      	ldr	r2, [pc, #156]	; (8004b24 <TIM_Base_SetConfig+0x124>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d007      	beq.n	8004a9a <TIM_Base_SetConfig+0x9a>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a26      	ldr	r2, [pc, #152]	; (8004b28 <TIM_Base_SetConfig+0x128>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d003      	beq.n	8004a9a <TIM_Base_SetConfig+0x9a>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a25      	ldr	r2, [pc, #148]	; (8004b2c <TIM_Base_SetConfig+0x12c>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d108      	bne.n	8004aac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a0f      	ldr	r2, [pc, #60]	; (8004b10 <TIM_Base_SetConfig+0x110>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d00f      	beq.n	8004af8 <TIM_Base_SetConfig+0xf8>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a11      	ldr	r2, [pc, #68]	; (8004b20 <TIM_Base_SetConfig+0x120>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d00b      	beq.n	8004af8 <TIM_Base_SetConfig+0xf8>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a10      	ldr	r2, [pc, #64]	; (8004b24 <TIM_Base_SetConfig+0x124>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d007      	beq.n	8004af8 <TIM_Base_SetConfig+0xf8>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a0f      	ldr	r2, [pc, #60]	; (8004b28 <TIM_Base_SetConfig+0x128>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d003      	beq.n	8004af8 <TIM_Base_SetConfig+0xf8>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a0e      	ldr	r2, [pc, #56]	; (8004b2c <TIM_Base_SetConfig+0x12c>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d103      	bne.n	8004b00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	691a      	ldr	r2, [r3, #16]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	615a      	str	r2, [r3, #20]
}
 8004b06:	bf00      	nop
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bc80      	pop	{r7}
 8004b0e:	4770      	bx	lr
 8004b10:	40012c00 	.word	0x40012c00
 8004b14:	40000400 	.word	0x40000400
 8004b18:	40000800 	.word	0x40000800
 8004b1c:	40000c00 	.word	0x40000c00
 8004b20:	40013400 	.word	0x40013400
 8004b24:	40014000 	.word	0x40014000
 8004b28:	40014400 	.word	0x40014400
 8004b2c:	40014800 	.word	0x40014800

08004b30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b087      	sub	sp, #28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	f023 0201 	bic.w	r2, r3, #1
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f023 0303 	bic.w	r3, r3, #3
 8004b6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f023 0302 	bic.w	r3, r3, #2
 8004b7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a2c      	ldr	r2, [pc, #176]	; (8004c3c <TIM_OC1_SetConfig+0x10c>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d00f      	beq.n	8004bb0 <TIM_OC1_SetConfig+0x80>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a2b      	ldr	r2, [pc, #172]	; (8004c40 <TIM_OC1_SetConfig+0x110>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d00b      	beq.n	8004bb0 <TIM_OC1_SetConfig+0x80>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a2a      	ldr	r2, [pc, #168]	; (8004c44 <TIM_OC1_SetConfig+0x114>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d007      	beq.n	8004bb0 <TIM_OC1_SetConfig+0x80>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a29      	ldr	r2, [pc, #164]	; (8004c48 <TIM_OC1_SetConfig+0x118>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d003      	beq.n	8004bb0 <TIM_OC1_SetConfig+0x80>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a28      	ldr	r2, [pc, #160]	; (8004c4c <TIM_OC1_SetConfig+0x11c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d10c      	bne.n	8004bca <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f023 0308 	bic.w	r3, r3, #8
 8004bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f023 0304 	bic.w	r3, r3, #4
 8004bc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a1b      	ldr	r2, [pc, #108]	; (8004c3c <TIM_OC1_SetConfig+0x10c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d00f      	beq.n	8004bf2 <TIM_OC1_SetConfig+0xc2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a1a      	ldr	r2, [pc, #104]	; (8004c40 <TIM_OC1_SetConfig+0x110>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00b      	beq.n	8004bf2 <TIM_OC1_SetConfig+0xc2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a19      	ldr	r2, [pc, #100]	; (8004c44 <TIM_OC1_SetConfig+0x114>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d007      	beq.n	8004bf2 <TIM_OC1_SetConfig+0xc2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a18      	ldr	r2, [pc, #96]	; (8004c48 <TIM_OC1_SetConfig+0x118>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d003      	beq.n	8004bf2 <TIM_OC1_SetConfig+0xc2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a17      	ldr	r2, [pc, #92]	; (8004c4c <TIM_OC1_SetConfig+0x11c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d111      	bne.n	8004c16 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	621a      	str	r2, [r3, #32]
}
 8004c30:	bf00      	nop
 8004c32:	371c      	adds	r7, #28
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bc80      	pop	{r7}
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	40012c00 	.word	0x40012c00
 8004c40:	40013400 	.word	0x40013400
 8004c44:	40014000 	.word	0x40014000
 8004c48:	40014400 	.word	0x40014400
 8004c4c:	40014800 	.word	0x40014800

08004c50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b087      	sub	sp, #28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	f023 0210 	bic.w	r2, r3, #16
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	021b      	lsls	r3, r3, #8
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f023 0320 	bic.w	r3, r3, #32
 8004c9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	011b      	lsls	r3, r3, #4
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a27      	ldr	r2, [pc, #156]	; (8004d4c <TIM_OC2_SetConfig+0xfc>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d003      	beq.n	8004cbc <TIM_OC2_SetConfig+0x6c>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a26      	ldr	r2, [pc, #152]	; (8004d50 <TIM_OC2_SetConfig+0x100>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d10d      	bne.n	8004cd8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	011b      	lsls	r3, r3, #4
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cd6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a1c      	ldr	r2, [pc, #112]	; (8004d4c <TIM_OC2_SetConfig+0xfc>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d00f      	beq.n	8004d00 <TIM_OC2_SetConfig+0xb0>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a1b      	ldr	r2, [pc, #108]	; (8004d50 <TIM_OC2_SetConfig+0x100>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d00b      	beq.n	8004d00 <TIM_OC2_SetConfig+0xb0>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a1a      	ldr	r2, [pc, #104]	; (8004d54 <TIM_OC2_SetConfig+0x104>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d007      	beq.n	8004d00 <TIM_OC2_SetConfig+0xb0>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a19      	ldr	r2, [pc, #100]	; (8004d58 <TIM_OC2_SetConfig+0x108>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d003      	beq.n	8004d00 <TIM_OC2_SetConfig+0xb0>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a18      	ldr	r2, [pc, #96]	; (8004d5c <TIM_OC2_SetConfig+0x10c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d113      	bne.n	8004d28 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685a      	ldr	r2, [r3, #4]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	621a      	str	r2, [r3, #32]
}
 8004d42:	bf00      	nop
 8004d44:	371c      	adds	r7, #28
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bc80      	pop	{r7}
 8004d4a:	4770      	bx	lr
 8004d4c:	40012c00 	.word	0x40012c00
 8004d50:	40013400 	.word	0x40013400
 8004d54:	40014000 	.word	0x40014000
 8004d58:	40014400 	.word	0x40014400
 8004d5c:	40014800 	.word	0x40014800

08004d60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f023 0303 	bic.w	r3, r3, #3
 8004d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	021b      	lsls	r3, r3, #8
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a27      	ldr	r2, [pc, #156]	; (8004e5c <TIM_OC3_SetConfig+0xfc>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d003      	beq.n	8004dca <TIM_OC3_SetConfig+0x6a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a26      	ldr	r2, [pc, #152]	; (8004e60 <TIM_OC3_SetConfig+0x100>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d10d      	bne.n	8004de6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	021b      	lsls	r3, r3, #8
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004de4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a1c      	ldr	r2, [pc, #112]	; (8004e5c <TIM_OC3_SetConfig+0xfc>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d00f      	beq.n	8004e0e <TIM_OC3_SetConfig+0xae>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a1b      	ldr	r2, [pc, #108]	; (8004e60 <TIM_OC3_SetConfig+0x100>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d00b      	beq.n	8004e0e <TIM_OC3_SetConfig+0xae>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a1a      	ldr	r2, [pc, #104]	; (8004e64 <TIM_OC3_SetConfig+0x104>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d007      	beq.n	8004e0e <TIM_OC3_SetConfig+0xae>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a19      	ldr	r2, [pc, #100]	; (8004e68 <TIM_OC3_SetConfig+0x108>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d003      	beq.n	8004e0e <TIM_OC3_SetConfig+0xae>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a18      	ldr	r2, [pc, #96]	; (8004e6c <TIM_OC3_SetConfig+0x10c>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d113      	bne.n	8004e36 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	011b      	lsls	r3, r3, #4
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	011b      	lsls	r3, r3, #4
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	621a      	str	r2, [r3, #32]
}
 8004e50:	bf00      	nop
 8004e52:	371c      	adds	r7, #28
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bc80      	pop	{r7}
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	40012c00 	.word	0x40012c00
 8004e60:	40013400 	.word	0x40013400
 8004e64:	40014000 	.word	0x40014000
 8004e68:	40014400 	.word	0x40014400
 8004e6c:	40014800 	.word	0x40014800

08004e70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b087      	sub	sp, #28
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	021b      	lsls	r3, r3, #8
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ebe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	031b      	lsls	r3, r3, #12
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a17      	ldr	r2, [pc, #92]	; (8004f2c <TIM_OC4_SetConfig+0xbc>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d00f      	beq.n	8004ef4 <TIM_OC4_SetConfig+0x84>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a16      	ldr	r2, [pc, #88]	; (8004f30 <TIM_OC4_SetConfig+0xc0>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d00b      	beq.n	8004ef4 <TIM_OC4_SetConfig+0x84>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a15      	ldr	r2, [pc, #84]	; (8004f34 <TIM_OC4_SetConfig+0xc4>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d007      	beq.n	8004ef4 <TIM_OC4_SetConfig+0x84>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a14      	ldr	r2, [pc, #80]	; (8004f38 <TIM_OC4_SetConfig+0xc8>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d003      	beq.n	8004ef4 <TIM_OC4_SetConfig+0x84>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a13      	ldr	r2, [pc, #76]	; (8004f3c <TIM_OC4_SetConfig+0xcc>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d109      	bne.n	8004f08 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004efa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	695b      	ldr	r3, [r3, #20]
 8004f00:	019b      	lsls	r3, r3, #6
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685a      	ldr	r2, [r3, #4]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	621a      	str	r2, [r3, #32]
}
 8004f22:	bf00      	nop
 8004f24:	371c      	adds	r7, #28
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bc80      	pop	{r7}
 8004f2a:	4770      	bx	lr
 8004f2c:	40012c00 	.word	0x40012c00
 8004f30:	40013400 	.word	0x40013400
 8004f34:	40014000 	.word	0x40014000
 8004f38:	40014400 	.word	0x40014400
 8004f3c:	40014800 	.word	0x40014800

08004f40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b087      	sub	sp, #28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004f84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	041b      	lsls	r3, r3, #16
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a17      	ldr	r2, [pc, #92]	; (8004ff4 <TIM_OC5_SetConfig+0xb4>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d00f      	beq.n	8004fba <TIM_OC5_SetConfig+0x7a>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a16      	ldr	r2, [pc, #88]	; (8004ff8 <TIM_OC5_SetConfig+0xb8>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d00b      	beq.n	8004fba <TIM_OC5_SetConfig+0x7a>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a15      	ldr	r2, [pc, #84]	; (8004ffc <TIM_OC5_SetConfig+0xbc>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d007      	beq.n	8004fba <TIM_OC5_SetConfig+0x7a>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a14      	ldr	r2, [pc, #80]	; (8005000 <TIM_OC5_SetConfig+0xc0>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d003      	beq.n	8004fba <TIM_OC5_SetConfig+0x7a>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a13      	ldr	r2, [pc, #76]	; (8005004 <TIM_OC5_SetConfig+0xc4>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d109      	bne.n	8004fce <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fc0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	021b      	lsls	r3, r3, #8
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	621a      	str	r2, [r3, #32]
}
 8004fe8:	bf00      	nop
 8004fea:	371c      	adds	r7, #28
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bc80      	pop	{r7}
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	40012c00 	.word	0x40012c00
 8004ff8:	40013400 	.word	0x40013400
 8004ffc:	40014000 	.word	0x40014000
 8005000:	40014400 	.word	0x40014400
 8005004:	40014800 	.word	0x40014800

08005008 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005008:	b480      	push	{r7}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800502e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800503a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	021b      	lsls	r3, r3, #8
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	4313      	orrs	r3, r2
 8005046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800504e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	051b      	lsls	r3, r3, #20
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	4313      	orrs	r3, r2
 800505a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a17      	ldr	r2, [pc, #92]	; (80050bc <TIM_OC6_SetConfig+0xb4>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d00f      	beq.n	8005084 <TIM_OC6_SetConfig+0x7c>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a16      	ldr	r2, [pc, #88]	; (80050c0 <TIM_OC6_SetConfig+0xb8>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d00b      	beq.n	8005084 <TIM_OC6_SetConfig+0x7c>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a15      	ldr	r2, [pc, #84]	; (80050c4 <TIM_OC6_SetConfig+0xbc>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d007      	beq.n	8005084 <TIM_OC6_SetConfig+0x7c>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a14      	ldr	r2, [pc, #80]	; (80050c8 <TIM_OC6_SetConfig+0xc0>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d003      	beq.n	8005084 <TIM_OC6_SetConfig+0x7c>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a13      	ldr	r2, [pc, #76]	; (80050cc <TIM_OC6_SetConfig+0xc4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d109      	bne.n	8005098 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800508a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	029b      	lsls	r3, r3, #10
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	4313      	orrs	r3, r2
 8005096:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	621a      	str	r2, [r3, #32]
}
 80050b2:	bf00      	nop
 80050b4:	371c      	adds	r7, #28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bc80      	pop	{r7}
 80050ba:	4770      	bx	lr
 80050bc:	40012c00 	.word	0x40012c00
 80050c0:	40013400 	.word	0x40013400
 80050c4:	40014000 	.word	0x40014000
 80050c8:	40014400 	.word	0x40014400
 80050cc:	40014800 	.word	0x40014800

080050d0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050fa:	f023 0307 	bic.w	r3, r3, #7
 80050fe:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	4313      	orrs	r3, r2
 8005108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	2b30      	cmp	r3, #48	; 0x30
 8005118:	d05c      	beq.n	80051d4 <TIM_SlaveTimer_SetConfig+0x104>
 800511a:	2b30      	cmp	r3, #48	; 0x30
 800511c:	d806      	bhi.n	800512c <TIM_SlaveTimer_SetConfig+0x5c>
 800511e:	2b10      	cmp	r3, #16
 8005120:	d058      	beq.n	80051d4 <TIM_SlaveTimer_SetConfig+0x104>
 8005122:	2b20      	cmp	r3, #32
 8005124:	d056      	beq.n	80051d4 <TIM_SlaveTimer_SetConfig+0x104>
 8005126:	2b00      	cmp	r3, #0
 8005128:	d054      	beq.n	80051d4 <TIM_SlaveTimer_SetConfig+0x104>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800512a:	e054      	b.n	80051d6 <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 800512c:	2b50      	cmp	r3, #80	; 0x50
 800512e:	d03d      	beq.n	80051ac <TIM_SlaveTimer_SetConfig+0xdc>
 8005130:	2b50      	cmp	r3, #80	; 0x50
 8005132:	d802      	bhi.n	800513a <TIM_SlaveTimer_SetConfig+0x6a>
 8005134:	2b40      	cmp	r3, #64	; 0x40
 8005136:	d010      	beq.n	800515a <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 8005138:	e04d      	b.n	80051d6 <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 800513a:	2b60      	cmp	r3, #96	; 0x60
 800513c:	d040      	beq.n	80051c0 <TIM_SlaveTimer_SetConfig+0xf0>
 800513e:	2b70      	cmp	r3, #112	; 0x70
 8005140:	d000      	beq.n	8005144 <TIM_SlaveTimer_SetConfig+0x74>
      break;
 8005142:	e048      	b.n	80051d6 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6818      	ldr	r0, [r3, #0]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	68d9      	ldr	r1, [r3, #12]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	f000 f9da 	bl	800550c <TIM_ETR_SetConfig>
      break;
 8005158:	e03d      	b.n	80051d6 <TIM_SlaveTimer_SetConfig+0x106>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2b05      	cmp	r3, #5
 8005160:	d101      	bne.n	8005166 <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e038      	b.n	80051d8 <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	6812      	ldr	r2, [r2, #0]
 8005176:	6a12      	ldr	r2, [r2, #32]
 8005178:	f022 0201 	bic.w	r2, r2, #1
 800517c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800518c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	011b      	lsls	r3, r3, #4
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	621a      	str	r2, [r3, #32]
      break;
 80051aa:	e014      	b.n	80051d6 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6818      	ldr	r0, [r3, #0]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	6899      	ldr	r1, [r3, #8]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	461a      	mov	r2, r3
 80051ba:	f000 f87d 	bl	80052b8 <TIM_TI1_ConfigInputStage>
      break;
 80051be:	e00a      	b.n	80051d6 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6818      	ldr	r0, [r3, #0]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	6899      	ldr	r1, [r3, #8]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	461a      	mov	r2, r3
 80051ce:	f000 f8dd 	bl	800538c <TIM_TI2_ConfigInputStage>
      break;
 80051d2:	e000      	b.n	80051d6 <TIM_SlaveTimer_SetConfig+0x106>
      break;
 80051d4:	bf00      	nop
  }
  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3718      	adds	r7, #24
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b087      	sub	sp, #28
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
 80051ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	f023 0201 	bic.w	r2, r3, #1
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	4a25      	ldr	r2, [pc, #148]	; (80052a0 <TIM_TI1_SetConfig+0xc0>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d017      	beq.n	800523e <TIM_TI1_SetConfig+0x5e>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005214:	d013      	beq.n	800523e <TIM_TI1_SetConfig+0x5e>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	4a22      	ldr	r2, [pc, #136]	; (80052a4 <TIM_TI1_SetConfig+0xc4>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d00f      	beq.n	800523e <TIM_TI1_SetConfig+0x5e>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	4a21      	ldr	r2, [pc, #132]	; (80052a8 <TIM_TI1_SetConfig+0xc8>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d00b      	beq.n	800523e <TIM_TI1_SetConfig+0x5e>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	4a20      	ldr	r2, [pc, #128]	; (80052ac <TIM_TI1_SetConfig+0xcc>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d007      	beq.n	800523e <TIM_TI1_SetConfig+0x5e>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	4a1f      	ldr	r2, [pc, #124]	; (80052b0 <TIM_TI1_SetConfig+0xd0>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d003      	beq.n	800523e <TIM_TI1_SetConfig+0x5e>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	4a1e      	ldr	r2, [pc, #120]	; (80052b4 <TIM_TI1_SetConfig+0xd4>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d101      	bne.n	8005242 <TIM_TI1_SetConfig+0x62>
 800523e:	2301      	movs	r3, #1
 8005240:	e000      	b.n	8005244 <TIM_TI1_SetConfig+0x64>
 8005242:	2300      	movs	r3, #0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d008      	beq.n	800525a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f023 0303 	bic.w	r3, r3, #3
 800524e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4313      	orrs	r3, r2
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	e003      	b.n	8005262 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f043 0301 	orr.w	r3, r3, #1
 8005260:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005268:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	011b      	lsls	r3, r3, #4
 800526e:	b2db      	uxtb	r3, r3
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	4313      	orrs	r3, r2
 8005274:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	f023 030a 	bic.w	r3, r3, #10
 800527c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	f003 030a 	and.w	r3, r3, #10
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	4313      	orrs	r3, r2
 8005288:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	621a      	str	r2, [r3, #32]
}
 8005296:	bf00      	nop
 8005298:	371c      	adds	r7, #28
 800529a:	46bd      	mov	sp, r7
 800529c:	bc80      	pop	{r7}
 800529e:	4770      	bx	lr
 80052a0:	40012c00 	.word	0x40012c00
 80052a4:	40000400 	.word	0x40000400
 80052a8:	40000800 	.word	0x40000800
 80052ac:	40000c00 	.word	0x40000c00
 80052b0:	40013400 	.word	0x40013400
 80052b4:	40014000 	.word	0x40014000

080052b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b087      	sub	sp, #28
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	f023 0201 	bic.w	r2, r3, #1
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	011b      	lsls	r3, r3, #4
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	f023 030a 	bic.w	r3, r3, #10
 80052f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	621a      	str	r2, [r3, #32]
}
 800530a:	bf00      	nop
 800530c:	371c      	adds	r7, #28
 800530e:	46bd      	mov	sp, r7
 8005310:	bc80      	pop	{r7}
 8005312:	4770      	bx	lr

08005314 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005314:	b480      	push	{r7}
 8005316:	b087      	sub	sp, #28
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
 8005320:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	f023 0210 	bic.w	r2, r3, #16
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005340:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	021b      	lsls	r3, r3, #8
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	4313      	orrs	r3, r2
 800534a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005352:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	031b      	lsls	r3, r3, #12
 8005358:	b29b      	uxth	r3, r3
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	4313      	orrs	r3, r2
 800535e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005366:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	011b      	lsls	r3, r3, #4
 800536c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	4313      	orrs	r3, r2
 8005374:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	621a      	str	r2, [r3, #32]
}
 8005382:	bf00      	nop
 8005384:	371c      	adds	r7, #28
 8005386:	46bd      	mov	sp, r7
 8005388:	bc80      	pop	{r7}
 800538a:	4770      	bx	lr

0800538c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	f023 0210 	bic.w	r2, r3, #16
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	031b      	lsls	r3, r3, #12
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	4313      	orrs	r3, r2
 80053c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	011b      	lsls	r3, r3, #4
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	621a      	str	r2, [r3, #32]
}
 80053e0:	bf00      	nop
 80053e2:	371c      	adds	r7, #28
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bc80      	pop	{r7}
 80053e8:	4770      	bx	lr

080053ea <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b087      	sub	sp, #28
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	60f8      	str	r0, [r7, #12]
 80053f2:	60b9      	str	r1, [r7, #8]
 80053f4:	607a      	str	r2, [r7, #4]
 80053f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	69db      	ldr	r3, [r3, #28]
 8005408:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	f023 0303 	bic.w	r3, r3, #3
 8005416:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4313      	orrs	r3, r2
 800541e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005426:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	011b      	lsls	r3, r3, #4
 800542c:	b2db      	uxtb	r3, r3
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	4313      	orrs	r3, r2
 8005432:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800543a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	021b      	lsls	r3, r3, #8
 8005440:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	4313      	orrs	r3, r2
 8005448:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	621a      	str	r2, [r3, #32]
}
 8005456:	bf00      	nop
 8005458:	371c      	adds	r7, #28
 800545a:	46bd      	mov	sp, r7
 800545c:	bc80      	pop	{r7}
 800545e:	4770      	bx	lr

08005460 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
 800546c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800548c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	021b      	lsls	r3, r3, #8
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	4313      	orrs	r3, r2
 8005496:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800549e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	031b      	lsls	r3, r3, #12
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80054b2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	031b      	lsls	r3, r3, #12
 80054b8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	4313      	orrs	r3, r2
 80054c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	621a      	str	r2, [r3, #32]
}
 80054ce:	bf00      	nop
 80054d0:	371c      	adds	r7, #28
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bc80      	pop	{r7}
 80054d6:	4770      	bx	lr

080054d8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	f043 0307 	orr.w	r3, r3, #7
 80054fa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	609a      	str	r2, [r3, #8]
}
 8005502:	bf00      	nop
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	bc80      	pop	{r7}
 800550a:	4770      	bx	lr

0800550c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
 8005518:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005526:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	021a      	lsls	r2, r3, #8
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	431a      	orrs	r2, r3
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	4313      	orrs	r3, r2
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	4313      	orrs	r3, r2
 8005538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	609a      	str	r2, [r3, #8]
}
 8005540:	bf00      	nop
 8005542:	371c      	adds	r7, #28
 8005544:	46bd      	mov	sp, r7
 8005546:	bc80      	pop	{r7}
 8005548:	4770      	bx	lr

0800554a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800554a:	b480      	push	{r7}
 800554c:	b087      	sub	sp, #28
 800554e:	af00      	add	r7, sp, #0
 8005550:	60f8      	str	r0, [r7, #12]
 8005552:	60b9      	str	r1, [r7, #8]
 8005554:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f003 031f 	and.w	r3, r3, #31
 800555c:	2201      	movs	r2, #1
 800555e:	fa02 f303 	lsl.w	r3, r2, r3
 8005562:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6a1a      	ldr	r2, [r3, #32]
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	43db      	mvns	r3, r3
 800556c:	401a      	ands	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6a1a      	ldr	r2, [r3, #32]
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	f003 031f 	and.w	r3, r3, #31
 800557c:	6879      	ldr	r1, [r7, #4]
 800557e:	fa01 f303 	lsl.w	r3, r1, r3
 8005582:	431a      	orrs	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	621a      	str	r2, [r3, #32]
}
 8005588:	bf00      	nop
 800558a:	371c      	adds	r7, #28
 800558c:	46bd      	mov	sp, r7
 800558e:	bc80      	pop	{r7}
 8005590:	4770      	bx	lr
	...

08005594 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d101      	bne.n	80055ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055a8:	2302      	movs	r3, #2
 80055aa:	e068      	b.n	800567e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a2d      	ldr	r2, [pc, #180]	; (8005688 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d004      	beq.n	80055e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a2c      	ldr	r2, [pc, #176]	; (800568c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d108      	bne.n	80055f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80055e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	4313      	orrs	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a1d      	ldr	r2, [pc, #116]	; (8005688 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d01d      	beq.n	8005652 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800561e:	d018      	beq.n	8005652 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a1a      	ldr	r2, [pc, #104]	; (8005690 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d013      	beq.n	8005652 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a19      	ldr	r2, [pc, #100]	; (8005694 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d00e      	beq.n	8005652 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a17      	ldr	r2, [pc, #92]	; (8005698 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d009      	beq.n	8005652 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a12      	ldr	r2, [pc, #72]	; (800568c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d004      	beq.n	8005652 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a13      	ldr	r2, [pc, #76]	; (800569c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d10c      	bne.n	800566c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005658:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	4313      	orrs	r3, r2
 8005662:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	bc80      	pop	{r7}
 8005686:	4770      	bx	lr
 8005688:	40012c00 	.word	0x40012c00
 800568c:	40013400 	.word	0x40013400
 8005690:	40000400 	.word	0x40000400
 8005694:	40000800 	.word	0x40000800
 8005698:	40000c00 	.word	0x40000c00
 800569c:	40014000 	.word	0x40014000

080056a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bc80      	pop	{r7}
 80056b0:	4770      	bx	lr

080056b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b083      	sub	sp, #12
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056ba:	bf00      	nop
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	bc80      	pop	{r7}
 80056c2:	4770      	bx	lr

080056c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bc80      	pop	{r7}
 80056d4:	4770      	bx	lr

080056d6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b082      	sub	sp, #8
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d101      	bne.n	80056e8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e040      	b.n	800576a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d106      	bne.n	80056fe <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f003 fe79 	bl	80093f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2224      	movs	r2, #36	; 0x24
 8005702:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	6812      	ldr	r2, [r2, #0]
 800570c:	6812      	ldr	r2, [r2, #0]
 800570e:	f022 0201 	bic.w	r2, r2, #1
 8005712:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 fd97 	bl	8006248 <UART_SetConfig>
 800571a:	4603      	mov	r3, r0
 800571c:	2b01      	cmp	r3, #1
 800571e:	d101      	bne.n	8005724 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e022      	b.n	800576a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	2b00      	cmp	r3, #0
 800572a:	d002      	beq.n	8005732 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f001 f8ef 	bl	8006910 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	6812      	ldr	r2, [r2, #0]
 800573a:	6852      	ldr	r2, [r2, #4]
 800573c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005740:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	6812      	ldr	r2, [r2, #0]
 800574a:	6892      	ldr	r2, [r2, #8]
 800574c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005750:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	6812      	ldr	r2, [r2, #0]
 800575a:	6812      	ldr	r2, [r2, #0]
 800575c:	f042 0201 	orr.w	r2, r2, #1
 8005760:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f001 f975 	bl	8006a52 <UART_CheckIdleState>
 8005768:	4603      	mov	r3, r0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3708      	adds	r7, #8
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b082      	sub	sp, #8
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d101      	bne.n	8005784 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e027      	b.n	80057d4 <HAL_UART_DeInit+0x62>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2224      	movs	r2, #36	; 0x24
 8005788:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	6812      	ldr	r2, [r2, #0]
 8005792:	6812      	ldr	r2, [r2, #0]
 8005794:	f022 0201 	bic.w	r2, r2, #1
 8005798:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2200      	movs	r2, #0
 80057a0:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2200      	movs	r2, #0
 80057a8:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2200      	movs	r2, #0
 80057b0:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f003 ff06 	bl	80095c4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08a      	sub	sp, #40	; 0x28
 80057e0:	af02      	add	r7, sp, #8
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	603b      	str	r3, [r7, #0]
 80057e8:	4613      	mov	r3, r2
 80057ea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057f0:	2b20      	cmp	r3, #32
 80057f2:	f040 8081 	bne.w	80058f8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d002      	beq.n	8005802 <HAL_UART_Transmit+0x26>
 80057fc:	88fb      	ldrh	r3, [r7, #6]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e079      	b.n	80058fa <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800580c:	2b01      	cmp	r3, #1
 800580e:	d101      	bne.n	8005814 <HAL_UART_Transmit+0x38>
 8005810:	2302      	movs	r3, #2
 8005812:	e072      	b.n	80058fa <HAL_UART_Transmit+0x11e>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2221      	movs	r2, #33	; 0x21
 8005826:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005828:	f7fb fc2e 	bl	8001088 <HAL_GetTick>
 800582c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	88fa      	ldrh	r2, [r7, #6]
 8005832:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	88fa      	ldrh	r2, [r7, #6]
 800583a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005846:	d108      	bne.n	800585a <HAL_UART_Transmit+0x7e>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d104      	bne.n	800585a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8005850:	2300      	movs	r3, #0
 8005852:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	61bb      	str	r3, [r7, #24]
 8005858:	e003      	b.n	8005862 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800585e:	2300      	movs	r3, #0
 8005860:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800586a:	e02d      	b.n	80058c8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	2200      	movs	r2, #0
 8005874:	2180      	movs	r1, #128	; 0x80
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f001 f930 	bl	8006adc <UART_WaitOnFlagUntilTimeout>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e039      	b.n	80058fa <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10b      	bne.n	80058a4 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	8812      	ldrh	r2, [r2, #0]
 8005894:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005898:	b292      	uxth	r2, r2
 800589a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	3302      	adds	r3, #2
 80058a0:	61bb      	str	r3, [r7, #24]
 80058a2:	e008      	b.n	80058b6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	69fa      	ldr	r2, [r7, #28]
 80058aa:	7812      	ldrb	r2, [r2, #0]
 80058ac:	b292      	uxth	r2, r2
 80058ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	3301      	adds	r3, #1
 80058b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80058bc:	b29b      	uxth	r3, r3
 80058be:	3b01      	subs	r3, #1
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1cb      	bne.n	800586c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	9300      	str	r3, [sp, #0]
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	2200      	movs	r2, #0
 80058dc:	2140      	movs	r1, #64	; 0x40
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f001 f8fc 	bl	8006adc <UART_WaitOnFlagUntilTimeout>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e005      	b.n	80058fa <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2220      	movs	r2, #32
 80058f2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80058f4:	2300      	movs	r3, #0
 80058f6:	e000      	b.n	80058fa <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80058f8:	2302      	movs	r3, #2
  }
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3720      	adds	r7, #32
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b08a      	sub	sp, #40	; 0x28
 8005906:	af02      	add	r7, sp, #8
 8005908:	60f8      	str	r0, [r7, #12]
 800590a:	60b9      	str	r1, [r7, #8]
 800590c:	603b      	str	r3, [r7, #0]
 800590e:	4613      	mov	r3, r2
 8005910:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005916:	2b20      	cmp	r3, #32
 8005918:	f040 80bb 	bne.w	8005a92 <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d002      	beq.n	8005928 <HAL_UART_Receive+0x26>
 8005922:	88fb      	ldrh	r3, [r7, #6]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d101      	bne.n	800592c <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e0b3      	b.n	8005a94 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005932:	2b01      	cmp	r3, #1
 8005934:	d101      	bne.n	800593a <HAL_UART_Receive+0x38>
 8005936:	2302      	movs	r3, #2
 8005938:	e0ac      	b.n	8005a94 <HAL_UART_Receive+0x192>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2222      	movs	r2, #34	; 0x22
 800594c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800594e:	f7fb fb9b 	bl	8001088 <HAL_GetTick>
 8005952:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	88fa      	ldrh	r2, [r7, #6]
 8005958:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	88fa      	ldrh	r2, [r7, #6]
 8005960:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800596c:	d10e      	bne.n	800598c <HAL_UART_Receive+0x8a>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d105      	bne.n	8005982 <HAL_UART_Receive+0x80>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f240 12ff 	movw	r2, #511	; 0x1ff
 800597c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005980:	e02d      	b.n	80059de <HAL_UART_Receive+0xdc>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	22ff      	movs	r2, #255	; 0xff
 8005986:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800598a:	e028      	b.n	80059de <HAL_UART_Receive+0xdc>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10d      	bne.n	80059b0 <HAL_UART_Receive+0xae>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d104      	bne.n	80059a6 <HAL_UART_Receive+0xa4>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	22ff      	movs	r2, #255	; 0xff
 80059a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80059a4:	e01b      	b.n	80059de <HAL_UART_Receive+0xdc>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	227f      	movs	r2, #127	; 0x7f
 80059aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80059ae:	e016      	b.n	80059de <HAL_UART_Receive+0xdc>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059b8:	d10d      	bne.n	80059d6 <HAL_UART_Receive+0xd4>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d104      	bne.n	80059cc <HAL_UART_Receive+0xca>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	227f      	movs	r2, #127	; 0x7f
 80059c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80059ca:	e008      	b.n	80059de <HAL_UART_Receive+0xdc>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	223f      	movs	r2, #63	; 0x3f
 80059d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80059d4:	e003      	b.n	80059de <HAL_UART_Receive+0xdc>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80059e4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ee:	d108      	bne.n	8005a02 <HAL_UART_Receive+0x100>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d104      	bne.n	8005a02 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 80059f8:	2300      	movs	r3, #0
 80059fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	61bb      	str	r3, [r7, #24]
 8005a00:	e003      	b.n	8005a0a <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a06:	2300      	movs	r3, #0
 8005a08:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005a12:	e033      	b.n	8005a7c <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	2120      	movs	r1, #32
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f001 f85c 	bl	8006adc <UART_WaitOnFlagUntilTimeout>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e032      	b.n	8005a94 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10c      	bne.n	8005a4e <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	8a7b      	ldrh	r3, [r7, #18]
 8005a3e:	4013      	ands	r3, r2
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	3302      	adds	r3, #2
 8005a4a:	61bb      	str	r3, [r7, #24]
 8005a4c:	e00d      	b.n	8005a6a <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	8a7b      	ldrh	r3, [r7, #18]
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	b2da      	uxtb	r2, r3
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	3301      	adds	r3, #1
 8005a68:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	3b01      	subs	r3, #1
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1c5      	bne.n	8005a14 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	e000      	b.n	8005a94 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8005a92:	2302      	movs	r3, #2
  }
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3720      	adds	r7, #32
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aae:	2b20      	cmp	r3, #32
 8005ab0:	d164      	bne.n	8005b7c <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d002      	beq.n	8005abe <HAL_UART_Transmit_DMA+0x22>
 8005ab8:	88fb      	ldrh	r3, [r7, #6]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e05d      	b.n	8005b7e <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d101      	bne.n	8005ad0 <HAL_UART_Transmit_DMA+0x34>
 8005acc:	2302      	movs	r3, #2
 8005ace:	e056      	b.n	8005b7e <HAL_UART_Transmit_DMA+0xe2>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	88fa      	ldrh	r2, [r7, #6]
 8005ae2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	88fa      	ldrh	r2, [r7, #6]
 8005aea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2221      	movs	r2, #33	; 0x21
 8005af8:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d02a      	beq.n	8005b58 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b06:	4a20      	ldr	r2, [pc, #128]	; (8005b88 <HAL_UART_Transmit_DMA+0xec>)
 8005b08:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b0e:	4a1f      	ldr	r2, [pc, #124]	; (8005b8c <HAL_UART_Transmit_DMA+0xf0>)
 8005b10:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b16:	4a1e      	ldr	r2, [pc, #120]	; (8005b90 <HAL_UART_Transmit_DMA+0xf4>)
 8005b18:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b1e:	2200      	movs	r2, #0
 8005b20:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	3328      	adds	r3, #40	; 0x28
 8005b32:	461a      	mov	r2, r3
 8005b34:	88fb      	ldrh	r3, [r7, #6]
 8005b36:	f7fb fdee 	bl	8001716 <HAL_DMA_Start_IT>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00b      	beq.n	8005b58 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2210      	movs	r2, #16
 8005b44:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2220      	movs	r2, #32
 8005b52:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e012      	b.n	8005b7e <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2240      	movs	r2, #64	; 0x40
 8005b5e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	6812      	ldr	r2, [r2, #0]
 8005b70:	6892      	ldr	r2, [r2, #8]
 8005b72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b76:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	e000      	b.n	8005b7e <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8005b7c:	2302      	movs	r3, #2
  }
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	08006c39 	.word	0x08006c39
 8005b8c:	08006c8d 	.word	0x08006c8d
 8005b90:	08006d2d 	.word	0x08006d2d

08005b94 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ba6:	2b20      	cmp	r3, #32
 8005ba8:	d16c      	bne.n	8005c84 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d002      	beq.n	8005bb6 <HAL_UART_Receive_DMA+0x22>
 8005bb0:	88fb      	ldrh	r3, [r7, #6]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e065      	b.n	8005c86 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d101      	bne.n	8005bc8 <HAL_UART_Receive_DMA+0x34>
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	e05e      	b.n	8005c86 <HAL_UART_Receive_DMA+0xf2>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	88fa      	ldrh	r2, [r7, #6]
 8005bda:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2222      	movs	r2, #34	; 0x22
 8005be8:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d02a      	beq.n	8005c48 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bf6:	4a26      	ldr	r2, [pc, #152]	; (8005c90 <HAL_UART_Receive_DMA+0xfc>)
 8005bf8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bfe:	4a25      	ldr	r2, [pc, #148]	; (8005c94 <HAL_UART_Receive_DMA+0x100>)
 8005c00:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c06:	4a24      	ldr	r2, [pc, #144]	; (8005c98 <HAL_UART_Receive_DMA+0x104>)
 8005c08:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c0e:	2200      	movs	r2, #0
 8005c10:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	3324      	adds	r3, #36	; 0x24
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c22:	461a      	mov	r2, r3
 8005c24:	88fb      	ldrh	r3, [r7, #6]
 8005c26:	f7fb fd76 	bl	8001716 <HAL_DMA_Start_IT>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00b      	beq.n	8005c48 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2210      	movs	r2, #16
 8005c34:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2220      	movs	r2, #32
 8005c42:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e01e      	b.n	8005c86 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	6812      	ldr	r2, [r2, #0]
 8005c58:	6812      	ldr	r2, [r2, #0]
 8005c5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c5e:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	6812      	ldr	r2, [r2, #0]
 8005c68:	6892      	ldr	r2, [r2, #8]
 8005c6a:	f042 0201 	orr.w	r2, r2, #1
 8005c6e:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	6812      	ldr	r2, [r2, #0]
 8005c78:	6892      	ldr	r2, [r2, #8]
 8005c7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c7e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005c80:	2300      	movs	r3, #0
 8005c82:	e000      	b.n	8005c86 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8005c84:	2302      	movs	r3, #2
  }
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	08006ca9 	.word	0x08006ca9
 8005c94:	08006d11 	.word	0x08006d11
 8005c98:	08006d2d 	.word	0x08006d2d

08005c9c <HAL_UART_DMAPause>:
  * @brief Pause the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ca8:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cae:	60bb      	str	r3, [r7, #8]

  __HAL_LOCK(huart);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d101      	bne.n	8005cbe <HAL_UART_DMAPause+0x22>
 8005cba:	2302      	movs	r3, #2
 8005cbc:	e03c      	b.n	8005d38 <HAL_UART_DMAPause+0x9c>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd0:	2b80      	cmp	r3, #128	; 0x80
 8005cd2:	d10a      	bne.n	8005cea <HAL_UART_DMAPause+0x4e>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2b21      	cmp	r3, #33	; 0x21
 8005cd8:	d107      	bne.n	8005cea <HAL_UART_DMAPause+0x4e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    /* Disable the UART DMA Tx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	6812      	ldr	r2, [r2, #0]
 8005ce2:	6892      	ldr	r2, [r2, #8]
 8005ce4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ce8:	609a      	str	r2, [r3, #8]
  }
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf4:	2b40      	cmp	r3, #64	; 0x40
 8005cf6:	d11a      	bne.n	8005d2e <HAL_UART_DMAPause+0x92>
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	2b22      	cmp	r3, #34	; 0x22
 8005cfc:	d117      	bne.n	8005d2e <HAL_UART_DMAPause+0x92>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	6812      	ldr	r2, [r2, #0]
 8005d06:	6812      	ldr	r2, [r2, #0]
 8005d08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d0c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	6812      	ldr	r2, [r2, #0]
 8005d16:	6892      	ldr	r2, [r2, #8]
 8005d18:	f022 0201 	bic.w	r2, r2, #1
 8005d1c:	609a      	str	r2, [r3, #8]

    /* Disable the UART DMA Rx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	6812      	ldr	r2, [r2, #0]
 8005d26:	6892      	ldr	r2, [r2, #8]
 8005d28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d2c:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bc80      	pop	{r7}
 8005d40:	4770      	bx	lr

08005d42 <HAL_UART_DMAResume>:
  * @brief Resume the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b083      	sub	sp, #12
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d101      	bne.n	8005d58 <HAL_UART_DMAResume+0x16>
 8005d54:	2302      	movs	r3, #2
 8005d56:	e034      	b.n	8005dc2 <HAL_UART_DMAResume+0x80>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d64:	2b21      	cmp	r3, #33	; 0x21
 8005d66:	d107      	bne.n	8005d78 <HAL_UART_DMAResume+0x36>
  {
    /* Enable the UART DMA Tx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	6812      	ldr	r2, [r2, #0]
 8005d70:	6892      	ldr	r2, [r2, #8]
 8005d72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d76:	609a      	str	r2, [r3, #8]
  }
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d7c:	2b22      	cmp	r3, #34	; 0x22
 8005d7e:	d11b      	bne.n	8005db8 <HAL_UART_DMAResume+0x76>
  {
    /* Clear the Overrun flag before resuming the Rx transfer */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2208      	movs	r2, #8
 8005d86:	621a      	str	r2, [r3, #32]

    /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	6812      	ldr	r2, [r2, #0]
 8005d90:	6812      	ldr	r2, [r2, #0]
 8005d92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d96:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	6812      	ldr	r2, [r2, #0]
 8005da0:	6892      	ldr	r2, [r2, #8]
 8005da2:	f042 0201 	orr.w	r2, r2, #1
 8005da6:	609a      	str	r2, [r3, #8]

    /* Enable the UART DMA Rx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	6812      	ldr	r2, [r2, #0]
 8005db0:	6892      	ldr	r2, [r2, #8]
 8005db2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005db6:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bc80      	pop	{r7}
 8005dca:	4770      	bx	lr

08005dcc <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dd8:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dde:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dea:	2b80      	cmp	r3, #128	; 0x80
 8005dec:	d126      	bne.n	8005e3c <HAL_UART_DMAStop+0x70>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2b21      	cmp	r3, #33	; 0x21
 8005df2:	d123      	bne.n	8005e3c <HAL_UART_DMAStop+0x70>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	6812      	ldr	r2, [r2, #0]
 8005dfc:	6892      	ldr	r2, [r2, #8]
 8005dfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e02:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d014      	beq.n	8005e36 <HAL_UART_DMAStop+0x6a>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7fb fce0 	bl	80017d6 <HAL_DMA_Abort>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00c      	beq.n	8005e36 <HAL_UART_DMAStop+0x6a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7fb fe05 	bl	8001a30 <HAL_DMA_GetError>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b20      	cmp	r3, #32
 8005e2a:	d104      	bne.n	8005e36 <HAL_UART_DMAStop+0x6a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2210      	movs	r2, #16
 8005e30:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e031      	b.n	8005e9a <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 fecb 	bl	8006bd2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e46:	2b40      	cmp	r3, #64	; 0x40
 8005e48:	d126      	bne.n	8005e98 <HAL_UART_DMAStop+0xcc>
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	2b22      	cmp	r3, #34	; 0x22
 8005e4e:	d123      	bne.n	8005e98 <HAL_UART_DMAStop+0xcc>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	6812      	ldr	r2, [r2, #0]
 8005e58:	6892      	ldr	r2, [r2, #8]
 8005e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e5e:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d014      	beq.n	8005e92 <HAL_UART_DMAStop+0xc6>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7fb fcb2 	bl	80017d6 <HAL_DMA_Abort>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00c      	beq.n	8005e92 <HAL_UART_DMAStop+0xc6>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7fb fdd7 	bl	8001a30 <HAL_DMA_GetError>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b20      	cmp	r3, #32
 8005e86:	d104      	bne.n	8005e92 <HAL_UART_DMAStop+0xc6>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2210      	movs	r2, #16
 8005e8c:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e003      	b.n	8005e9a <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 feb1 	bl	8006bfa <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
	...

08005ea4 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* Disable interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	6812      	ldr	r2, [r2, #0]
 8005eb4:	6812      	ldr	r2, [r2, #0]
 8005eb6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005eba:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ec6:	2b80      	cmp	r3, #128	; 0x80
 8005ec8:	d12d      	bne.n	8005f26 <HAL_UART_AbortTransmit_IT+0x82>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	6812      	ldr	r2, [r2, #0]
 8005ed2:	6892      	ldr	r2, [r2, #8]
 8005ed4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ed8:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d013      	beq.n	8005f0a <HAL_UART_AbortTransmit_IT+0x66>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ee6:	4a19      	ldr	r2, [pc, #100]	; (8005f4c <HAL_UART_AbortTransmit_IT+0xa8>)
 8005ee8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7fb fcae 	bl	8001850 <HAL_DMA_Abort_IT>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d022      	beq.n	8005f40 <HAL_UART_AbortTransmit_IT+0x9c>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005f04:	4610      	mov	r0, r2
 8005f06:	4798      	blx	r3
 8005f08:	e01a      	b.n	8005f40 <HAL_UART_AbortTransmit_IT+0x9c>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0U;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      /* Clear TxISR function pointers */
      huart->TxISR = NULL;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	665a      	str	r2, [r3, #100]	; 0x64

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f989 	bl	8006236 <HAL_UART_AbortTransmitCpltCallback>
 8005f24:	e00c      	b.n	8005f40 <HAL_UART_AbortTransmit_IT+0x9c>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0U;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Clear TxISR function pointers */
    huart->TxISR = NULL;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	665a      	str	r2, [r3, #100]	; 0x64
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2220      	movs	r2, #32
 8005f38:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f97b 	bl	8006236 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	08006dd1 	.word	0x08006dd1

08005f50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b088      	sub	sp, #32
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005f70:	69fa      	ldr	r2, [r7, #28]
 8005f72:	f640 030f 	movw	r3, #2063	; 0x80f
 8005f76:	4013      	ands	r3, r2
 8005f78:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d113      	bne.n	8005fa8 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	f003 0320 	and.w	r3, r3, #32
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00e      	beq.n	8005fa8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	f003 0320 	and.w	r3, r3, #32
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d009      	beq.n	8005fa8 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f000 8114 	beq.w	80061c6 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	4798      	blx	r3
      }
      return;
 8005fa6:	e10e      	b.n	80061c6 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f000 80d6 	beq.w	800615c <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d105      	bne.n	8005fc6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 80cb 	beq.w	800615c <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	f003 0301 	and.w	r3, r3, #1
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00e      	beq.n	8005fee <HAL_UART_IRQHandler+0x9e>
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d009      	beq.n	8005fee <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fe6:	f043 0201 	orr.w	r2, r3, #1
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	f003 0302 	and.w	r3, r3, #2
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00e      	beq.n	8006016 <HAL_UART_IRQHandler+0xc6>
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d009      	beq.n	8006016 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2202      	movs	r2, #2
 8006008:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800600e:	f043 0204 	orr.w	r2, r3, #4
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	f003 0304 	and.w	r3, r3, #4
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00e      	beq.n	800603e <HAL_UART_IRQHandler+0xee>
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	f003 0301 	and.w	r3, r3, #1
 8006026:	2b00      	cmp	r3, #0
 8006028:	d009      	beq.n	800603e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2204      	movs	r2, #4
 8006030:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006036:	f043 0202 	orr.w	r2, r3, #2
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	f003 0308 	and.w	r3, r3, #8
 8006044:	2b00      	cmp	r3, #0
 8006046:	d013      	beq.n	8006070 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	f003 0320 	and.w	r3, r3, #32
 800604e:	2b00      	cmp	r3, #0
 8006050:	d104      	bne.n	800605c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006058:	2b00      	cmp	r3, #0
 800605a:	d009      	beq.n	8006070 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2208      	movs	r2, #8
 8006062:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006068:	f043 0208 	orr.w	r2, r3, #8
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00f      	beq.n	800609a <HAL_UART_IRQHandler+0x14a>
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00a      	beq.n	800609a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800608c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006092:	f043 0220 	orr.w	r2, r3, #32
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f000 8093 	beq.w	80061ca <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	f003 0320 	and.w	r3, r3, #32
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00c      	beq.n	80060c8 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	f003 0320 	and.w	r3, r3, #32
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d007      	beq.n	80060c8 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d003      	beq.n	80060c8 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060cc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d8:	2b40      	cmp	r3, #64	; 0x40
 80060da:	d004      	beq.n	80060e6 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d031      	beq.n	800614a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fd87 	bl	8006bfa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f6:	2b40      	cmp	r3, #64	; 0x40
 80060f8:	d123      	bne.n	8006142 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	6812      	ldr	r2, [r2, #0]
 8006102:	6892      	ldr	r2, [r2, #8]
 8006104:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006108:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800610e:	2b00      	cmp	r3, #0
 8006110:	d013      	beq.n	800613a <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006116:	4a30      	ldr	r2, [pc, #192]	; (80061d8 <HAL_UART_IRQHandler+0x288>)
 8006118:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800611e:	4618      	mov	r0, r3
 8006120:	f7fb fb96 	bl	8001850 <HAL_DMA_Abort_IT>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d016      	beq.n	8006158 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800612e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006134:	4610      	mov	r0, r2
 8006136:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006138:	e00e      	b.n	8006158 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f872 	bl	8006224 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006140:	e00a      	b.n	8006158 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 f86e 	bl	8006224 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006148:	e006      	b.n	8006158 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f86a 	bl	8006224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006156:	e038      	b.n	80061ca <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006158:	bf00      	nop
    return;
 800615a:	e036      	b.n	80061ca <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00d      	beq.n	8006182 <HAL_UART_IRQHandler+0x232>
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d008      	beq.n	8006182 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006178:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 fe56 	bl	8006e2c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006180:	e026      	b.n	80061d0 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00d      	beq.n	80061a8 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006192:	2b00      	cmp	r3, #0
 8006194:	d008      	beq.n	80061a8 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800619a:	2b00      	cmp	r3, #0
 800619c:	d017      	beq.n	80061ce <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	4798      	blx	r3
    }
    return;
 80061a6:	e012      	b.n	80061ce <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00e      	beq.n	80061d0 <HAL_UART_IRQHandler+0x280>
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d009      	beq.n	80061d0 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 fe1c 	bl	8006dfa <UART_EndTransmit_IT>
    return;
 80061c2:	bf00      	nop
 80061c4:	e004      	b.n	80061d0 <HAL_UART_IRQHandler+0x280>
      return;
 80061c6:	bf00      	nop
 80061c8:	e002      	b.n	80061d0 <HAL_UART_IRQHandler+0x280>
    return;
 80061ca:	bf00      	nop
 80061cc:	e000      	b.n	80061d0 <HAL_UART_IRQHandler+0x280>
    return;
 80061ce:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80061d0:	3720      	adds	r7, #32
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	08006da5 	.word	0x08006da5

080061dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bc80      	pop	{r7}
 80061ec:	4770      	bx	lr

080061ee <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b083      	sub	sp, #12
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80061f6:	bf00      	nop
 80061f8:	370c      	adds	r7, #12
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bc80      	pop	{r7}
 80061fe:	4770      	bx	lr

08006200 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	bc80      	pop	{r7}
 8006210:	4770      	bx	lr

08006212 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006212:	b480      	push	{r7}
 8006214:	b083      	sub	sp, #12
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800621a:	bf00      	nop
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	bc80      	pop	{r7}
 8006222:	4770      	bx	lr

08006224 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	bc80      	pop	{r7}
 8006234:	4770      	bx	lr

08006236 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8006236:	b480      	push	{r7}
 8006238:	b083      	sub	sp, #12
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800623e:	bf00      	nop
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	bc80      	pop	{r7}
 8006246:	4770      	bx	lr

08006248 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006248:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800624c:	b08a      	sub	sp, #40	; 0x28
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006252:	2300      	movs	r3, #0
 8006254:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006256:	2300      	movs	r3, #0
 8006258:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800625a:	2300      	movs	r3, #0
 800625c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	689a      	ldr	r2, [r3, #8]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	431a      	orrs	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	431a      	orrs	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	4313      	orrs	r3, r2
 8006274:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6819      	ldr	r1, [r3, #0]
 8006280:	4bb7      	ldr	r3, [pc, #732]	; (8006560 <UART_SetConfig+0x318>)
 8006282:	400b      	ands	r3, r1
 8006284:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006286:	430b      	orrs	r3, r1
 8006288:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	6812      	ldr	r2, [r2, #0]
 8006292:	6852      	ldr	r2, [r2, #4]
 8006294:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	68d2      	ldr	r2, [r2, #12]
 800629c:	430a      	orrs	r2, r1
 800629e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4aae      	ldr	r2, [pc, #696]	; (8006564 <UART_SetConfig+0x31c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d004      	beq.n	80062ba <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a1b      	ldr	r3, [r3, #32]
 80062b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062b6:	4313      	orrs	r3, r2
 80062b8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	6812      	ldr	r2, [r2, #0]
 80062c2:	6892      	ldr	r2, [r2, #8]
 80062c4:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 80062c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ca:	430a      	orrs	r2, r1
 80062cc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4aa5      	ldr	r2, [pc, #660]	; (8006568 <UART_SetConfig+0x320>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d126      	bne.n	8006326 <UART_SetConfig+0xde>
 80062d8:	4ba4      	ldr	r3, [pc, #656]	; (800656c <UART_SetConfig+0x324>)
 80062da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062de:	f003 0303 	and.w	r3, r3, #3
 80062e2:	2b03      	cmp	r3, #3
 80062e4:	d81a      	bhi.n	800631c <UART_SetConfig+0xd4>
 80062e6:	a201      	add	r2, pc, #4	; (adr r2, 80062ec <UART_SetConfig+0xa4>)
 80062e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ec:	080062fd 	.word	0x080062fd
 80062f0:	0800630d 	.word	0x0800630d
 80062f4:	08006305 	.word	0x08006305
 80062f8:	08006315 	.word	0x08006315
 80062fc:	2301      	movs	r3, #1
 80062fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006302:	e105      	b.n	8006510 <UART_SetConfig+0x2c8>
 8006304:	2302      	movs	r3, #2
 8006306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800630a:	e101      	b.n	8006510 <UART_SetConfig+0x2c8>
 800630c:	2304      	movs	r3, #4
 800630e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006312:	e0fd      	b.n	8006510 <UART_SetConfig+0x2c8>
 8006314:	2308      	movs	r3, #8
 8006316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800631a:	e0f9      	b.n	8006510 <UART_SetConfig+0x2c8>
 800631c:	2310      	movs	r3, #16
 800631e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006322:	bf00      	nop
 8006324:	e0f4      	b.n	8006510 <UART_SetConfig+0x2c8>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a91      	ldr	r2, [pc, #580]	; (8006570 <UART_SetConfig+0x328>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d138      	bne.n	80063a2 <UART_SetConfig+0x15a>
 8006330:	4b8e      	ldr	r3, [pc, #568]	; (800656c <UART_SetConfig+0x324>)
 8006332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006336:	f003 030c 	and.w	r3, r3, #12
 800633a:	2b0c      	cmp	r3, #12
 800633c:	d82c      	bhi.n	8006398 <UART_SetConfig+0x150>
 800633e:	a201      	add	r2, pc, #4	; (adr r2, 8006344 <UART_SetConfig+0xfc>)
 8006340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006344:	08006379 	.word	0x08006379
 8006348:	08006399 	.word	0x08006399
 800634c:	08006399 	.word	0x08006399
 8006350:	08006399 	.word	0x08006399
 8006354:	08006389 	.word	0x08006389
 8006358:	08006399 	.word	0x08006399
 800635c:	08006399 	.word	0x08006399
 8006360:	08006399 	.word	0x08006399
 8006364:	08006381 	.word	0x08006381
 8006368:	08006399 	.word	0x08006399
 800636c:	08006399 	.word	0x08006399
 8006370:	08006399 	.word	0x08006399
 8006374:	08006391 	.word	0x08006391
 8006378:	2300      	movs	r3, #0
 800637a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800637e:	e0c7      	b.n	8006510 <UART_SetConfig+0x2c8>
 8006380:	2302      	movs	r3, #2
 8006382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006386:	e0c3      	b.n	8006510 <UART_SetConfig+0x2c8>
 8006388:	2304      	movs	r3, #4
 800638a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800638e:	e0bf      	b.n	8006510 <UART_SetConfig+0x2c8>
 8006390:	2308      	movs	r3, #8
 8006392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006396:	e0bb      	b.n	8006510 <UART_SetConfig+0x2c8>
 8006398:	2310      	movs	r3, #16
 800639a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800639e:	bf00      	nop
 80063a0:	e0b6      	b.n	8006510 <UART_SetConfig+0x2c8>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a73      	ldr	r2, [pc, #460]	; (8006574 <UART_SetConfig+0x32c>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d125      	bne.n	80063f8 <UART_SetConfig+0x1b0>
 80063ac:	4b6f      	ldr	r3, [pc, #444]	; (800656c <UART_SetConfig+0x324>)
 80063ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80063b6:	2b10      	cmp	r3, #16
 80063b8:	d011      	beq.n	80063de <UART_SetConfig+0x196>
 80063ba:	2b10      	cmp	r3, #16
 80063bc:	d802      	bhi.n	80063c4 <UART_SetConfig+0x17c>
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d005      	beq.n	80063ce <UART_SetConfig+0x186>
 80063c2:	e014      	b.n	80063ee <UART_SetConfig+0x1a6>
 80063c4:	2b20      	cmp	r3, #32
 80063c6:	d006      	beq.n	80063d6 <UART_SetConfig+0x18e>
 80063c8:	2b30      	cmp	r3, #48	; 0x30
 80063ca:	d00c      	beq.n	80063e6 <UART_SetConfig+0x19e>
 80063cc:	e00f      	b.n	80063ee <UART_SetConfig+0x1a6>
 80063ce:	2300      	movs	r3, #0
 80063d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063d4:	e09c      	b.n	8006510 <UART_SetConfig+0x2c8>
 80063d6:	2302      	movs	r3, #2
 80063d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063dc:	e098      	b.n	8006510 <UART_SetConfig+0x2c8>
 80063de:	2304      	movs	r3, #4
 80063e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063e4:	e094      	b.n	8006510 <UART_SetConfig+0x2c8>
 80063e6:	2308      	movs	r3, #8
 80063e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063ec:	e090      	b.n	8006510 <UART_SetConfig+0x2c8>
 80063ee:	2310      	movs	r3, #16
 80063f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063f4:	bf00      	nop
 80063f6:	e08b      	b.n	8006510 <UART_SetConfig+0x2c8>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a5e      	ldr	r2, [pc, #376]	; (8006578 <UART_SetConfig+0x330>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d125      	bne.n	800644e <UART_SetConfig+0x206>
 8006402:	4b5a      	ldr	r3, [pc, #360]	; (800656c <UART_SetConfig+0x324>)
 8006404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006408:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800640c:	2b40      	cmp	r3, #64	; 0x40
 800640e:	d011      	beq.n	8006434 <UART_SetConfig+0x1ec>
 8006410:	2b40      	cmp	r3, #64	; 0x40
 8006412:	d802      	bhi.n	800641a <UART_SetConfig+0x1d2>
 8006414:	2b00      	cmp	r3, #0
 8006416:	d005      	beq.n	8006424 <UART_SetConfig+0x1dc>
 8006418:	e014      	b.n	8006444 <UART_SetConfig+0x1fc>
 800641a:	2b80      	cmp	r3, #128	; 0x80
 800641c:	d006      	beq.n	800642c <UART_SetConfig+0x1e4>
 800641e:	2bc0      	cmp	r3, #192	; 0xc0
 8006420:	d00c      	beq.n	800643c <UART_SetConfig+0x1f4>
 8006422:	e00f      	b.n	8006444 <UART_SetConfig+0x1fc>
 8006424:	2300      	movs	r3, #0
 8006426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800642a:	e071      	b.n	8006510 <UART_SetConfig+0x2c8>
 800642c:	2302      	movs	r3, #2
 800642e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006432:	e06d      	b.n	8006510 <UART_SetConfig+0x2c8>
 8006434:	2304      	movs	r3, #4
 8006436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800643a:	e069      	b.n	8006510 <UART_SetConfig+0x2c8>
 800643c:	2308      	movs	r3, #8
 800643e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006442:	e065      	b.n	8006510 <UART_SetConfig+0x2c8>
 8006444:	2310      	movs	r3, #16
 8006446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800644a:	bf00      	nop
 800644c:	e060      	b.n	8006510 <UART_SetConfig+0x2c8>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a4a      	ldr	r2, [pc, #296]	; (800657c <UART_SetConfig+0x334>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d129      	bne.n	80064ac <UART_SetConfig+0x264>
 8006458:	4b44      	ldr	r3, [pc, #272]	; (800656c <UART_SetConfig+0x324>)
 800645a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800645e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006466:	d014      	beq.n	8006492 <UART_SetConfig+0x24a>
 8006468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800646c:	d802      	bhi.n	8006474 <UART_SetConfig+0x22c>
 800646e:	2b00      	cmp	r3, #0
 8006470:	d007      	beq.n	8006482 <UART_SetConfig+0x23a>
 8006472:	e016      	b.n	80064a2 <UART_SetConfig+0x25a>
 8006474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006478:	d007      	beq.n	800648a <UART_SetConfig+0x242>
 800647a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800647e:	d00c      	beq.n	800649a <UART_SetConfig+0x252>
 8006480:	e00f      	b.n	80064a2 <UART_SetConfig+0x25a>
 8006482:	2300      	movs	r3, #0
 8006484:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006488:	e042      	b.n	8006510 <UART_SetConfig+0x2c8>
 800648a:	2302      	movs	r3, #2
 800648c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006490:	e03e      	b.n	8006510 <UART_SetConfig+0x2c8>
 8006492:	2304      	movs	r3, #4
 8006494:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006498:	e03a      	b.n	8006510 <UART_SetConfig+0x2c8>
 800649a:	2308      	movs	r3, #8
 800649c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064a0:	e036      	b.n	8006510 <UART_SetConfig+0x2c8>
 80064a2:	2310      	movs	r3, #16
 80064a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064a8:	bf00      	nop
 80064aa:	e031      	b.n	8006510 <UART_SetConfig+0x2c8>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a2c      	ldr	r2, [pc, #176]	; (8006564 <UART_SetConfig+0x31c>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d129      	bne.n	800650a <UART_SetConfig+0x2c2>
 80064b6:	4b2d      	ldr	r3, [pc, #180]	; (800656c <UART_SetConfig+0x324>)
 80064b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80064c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064c4:	d014      	beq.n	80064f0 <UART_SetConfig+0x2a8>
 80064c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064ca:	d802      	bhi.n	80064d2 <UART_SetConfig+0x28a>
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d007      	beq.n	80064e0 <UART_SetConfig+0x298>
 80064d0:	e016      	b.n	8006500 <UART_SetConfig+0x2b8>
 80064d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064d6:	d007      	beq.n	80064e8 <UART_SetConfig+0x2a0>
 80064d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064dc:	d00c      	beq.n	80064f8 <UART_SetConfig+0x2b0>
 80064de:	e00f      	b.n	8006500 <UART_SetConfig+0x2b8>
 80064e0:	2300      	movs	r3, #0
 80064e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064e6:	e013      	b.n	8006510 <UART_SetConfig+0x2c8>
 80064e8:	2302      	movs	r3, #2
 80064ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064ee:	e00f      	b.n	8006510 <UART_SetConfig+0x2c8>
 80064f0:	2304      	movs	r3, #4
 80064f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064f6:	e00b      	b.n	8006510 <UART_SetConfig+0x2c8>
 80064f8:	2308      	movs	r3, #8
 80064fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064fe:	e007      	b.n	8006510 <UART_SetConfig+0x2c8>
 8006500:	2310      	movs	r3, #16
 8006502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006506:	bf00      	nop
 8006508:	e002      	b.n	8006510 <UART_SetConfig+0x2c8>
 800650a:	2310      	movs	r3, #16
 800650c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a13      	ldr	r2, [pc, #76]	; (8006564 <UART_SetConfig+0x31c>)
 8006516:	4293      	cmp	r3, r2
 8006518:	f040 80f1 	bne.w	80066fe <UART_SetConfig+0x4b6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800651c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006520:	2b08      	cmp	r3, #8
 8006522:	d837      	bhi.n	8006594 <UART_SetConfig+0x34c>
 8006524:	a201      	add	r2, pc, #4	; (adr r2, 800652c <UART_SetConfig+0x2e4>)
 8006526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800652a:	bf00      	nop
 800652c:	08006551 	.word	0x08006551
 8006530:	08006595 	.word	0x08006595
 8006534:	08006559 	.word	0x08006559
 8006538:	08006595 	.word	0x08006595
 800653c:	08006585 	.word	0x08006585
 8006540:	08006595 	.word	0x08006595
 8006544:	08006595 	.word	0x08006595
 8006548:	08006595 	.word	0x08006595
 800654c:	0800658d 	.word	0x0800658d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8006550:	f7fc fc02 	bl	8002d58 <HAL_RCC_GetPCLK1Freq>
 8006554:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006556:	e020      	b.n	800659a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006558:	4b09      	ldr	r3, [pc, #36]	; (8006580 <UART_SetConfig+0x338>)
 800655a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800655c:	e01d      	b.n	800659a <UART_SetConfig+0x352>
 800655e:	bf00      	nop
 8006560:	efff69f3 	.word	0xefff69f3
 8006564:	40008000 	.word	0x40008000
 8006568:	40013800 	.word	0x40013800
 800656c:	40021000 	.word	0x40021000
 8006570:	40004400 	.word	0x40004400
 8006574:	40004800 	.word	0x40004800
 8006578:	40004c00 	.word	0x40004c00
 800657c:	40005000 	.word	0x40005000
 8006580:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8006584:	f7fc fb54 	bl	8002c30 <HAL_RCC_GetSysClockFreq>
 8006588:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800658a:	e006      	b.n	800659a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800658c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006590:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006592:	e002      	b.n	800659a <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	76fb      	strb	r3, [r7, #27]
        break;
 8006598:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 81ab 	beq.w	80068f8 <UART_SetConfig+0x6b0>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	4613      	mov	r3, r2
 80065a8:	005b      	lsls	r3, r3, #1
 80065aa:	441a      	add	r2, r3
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d805      	bhi.n	80065be <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d202      	bcs.n	80065c4 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	76fb      	strb	r3, [r7, #27]
 80065c2:	e199      	b.n	80068f8 <UART_SetConfig+0x6b0>
      }
      else
      {
        switch (clocksource)
 80065c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065c8:	2b08      	cmp	r3, #8
 80065ca:	f200 8085 	bhi.w	80066d8 <UART_SetConfig+0x490>
 80065ce:	a201      	add	r2, pc, #4	; (adr r2, 80065d4 <UART_SetConfig+0x38c>)
 80065d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d4:	080065f9 	.word	0x080065f9
 80065d8:	080066d9 	.word	0x080066d9
 80065dc:	0800663b 	.word	0x0800663b
 80065e0:	080066d9 	.word	0x080066d9
 80065e4:	0800666f 	.word	0x0800666f
 80065e8:	080066d9 	.word	0x080066d9
 80065ec:	080066d9 	.word	0x080066d9
 80065f0:	080066d9 	.word	0x080066d9
 80065f4:	080066af 	.word	0x080066af
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80065f8:	f7fc fbae 	bl	8002d58 <HAL_RCC_GetPCLK1Freq>
 80065fc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	f04f 0400 	mov.w	r4, #0
 8006604:	ea4f 2904 	mov.w	r9, r4, lsl #8
 8006608:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 800660c:	ea4f 2803 	mov.w	r8, r3, lsl #8
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	085b      	lsrs	r3, r3, #1
 8006616:	f04f 0400 	mov.w	r4, #0
 800661a:	eb18 0003 	adds.w	r0, r8, r3
 800661e:	eb49 0104 	adc.w	r1, r9, r4
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f04f 0400 	mov.w	r4, #0
 800662a:	461a      	mov	r2, r3
 800662c:	4623      	mov	r3, r4
 800662e:	f7fa fb37 	bl	8000ca0 <__aeabi_uldivmod>
 8006632:	4603      	mov	r3, r0
 8006634:	460c      	mov	r4, r1
 8006636:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006638:	e051      	b.n	80066de <UART_SetConfig+0x496>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	085b      	lsrs	r3, r3, #1
 8006640:	f04f 0400 	mov.w	r4, #0
 8006644:	49aa      	ldr	r1, [pc, #680]	; (80068f0 <UART_SetConfig+0x6a8>)
 8006646:	f04f 0200 	mov.w	r2, #0
 800664a:	eb13 0801 	adds.w	r8, r3, r1
 800664e:	eb44 0902 	adc.w	r9, r4, r2
 8006652:	4640      	mov	r0, r8
 8006654:	4649      	mov	r1, r9
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	f04f 0400 	mov.w	r4, #0
 800665e:	461a      	mov	r2, r3
 8006660:	4623      	mov	r3, r4
 8006662:	f7fa fb1d 	bl	8000ca0 <__aeabi_uldivmod>
 8006666:	4603      	mov	r3, r0
 8006668:	460c      	mov	r4, r1
 800666a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800666c:	e037      	b.n	80066de <UART_SetConfig+0x496>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800666e:	f7fc fadf 	bl	8002c30 <HAL_RCC_GetSysClockFreq>
 8006672:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	461a      	mov	r2, r3
 8006678:	f04f 0300 	mov.w	r3, #0
 800667c:	021d      	lsls	r5, r3, #8
 800667e:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 8006682:	0214      	lsls	r4, r2, #8
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	085b      	lsrs	r3, r3, #1
 800668a:	461a      	mov	r2, r3
 800668c:	f04f 0300 	mov.w	r3, #0
 8006690:	18a0      	adds	r0, r4, r2
 8006692:	eb45 0103 	adc.w	r1, r5, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	f04f 0400 	mov.w	r4, #0
 800669e:	461a      	mov	r2, r3
 80066a0:	4623      	mov	r3, r4
 80066a2:	f7fa fafd 	bl	8000ca0 <__aeabi_uldivmod>
 80066a6:	4603      	mov	r3, r0
 80066a8:	460c      	mov	r4, r1
 80066aa:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80066ac:	e017      	b.n	80066de <UART_SetConfig+0x496>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	085b      	lsrs	r3, r3, #1
 80066b4:	f04f 0400 	mov.w	r4, #0
 80066b8:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80066bc:	f144 0100 	adc.w	r1, r4, #0
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	f04f 0400 	mov.w	r4, #0
 80066c8:	461a      	mov	r2, r3
 80066ca:	4623      	mov	r3, r4
 80066cc:	f7fa fae8 	bl	8000ca0 <__aeabi_uldivmod>
 80066d0:	4603      	mov	r3, r0
 80066d2:	460c      	mov	r4, r1
 80066d4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80066d6:	e002      	b.n	80066de <UART_SetConfig+0x496>
          default:
            ret = HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	76fb      	strb	r3, [r7, #27]
            break;
 80066dc:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066e4:	d308      	bcc.n	80066f8 <UART_SetConfig+0x4b0>
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066ec:	d204      	bcs.n	80066f8 <UART_SetConfig+0x4b0>
        {
          huart->Instance->BRR = usartdiv;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	69fa      	ldr	r2, [r7, #28]
 80066f4:	60da      	str	r2, [r3, #12]
 80066f6:	e0ff      	b.n	80068f8 <UART_SetConfig+0x6b0>
        }
        else
        {
          ret = HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	76fb      	strb	r3, [r7, #27]
 80066fc:	e0fc      	b.n	80068f8 <UART_SetConfig+0x6b0>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006706:	f040 8083 	bne.w	8006810 <UART_SetConfig+0x5c8>
  {
    switch (clocksource)
 800670a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800670e:	2b08      	cmp	r3, #8
 8006710:	d85e      	bhi.n	80067d0 <UART_SetConfig+0x588>
 8006712:	a201      	add	r2, pc, #4	; (adr r2, 8006718 <UART_SetConfig+0x4d0>)
 8006714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006718:	0800673d 	.word	0x0800673d
 800671c:	0800675d 	.word	0x0800675d
 8006720:	0800677d 	.word	0x0800677d
 8006724:	080067d1 	.word	0x080067d1
 8006728:	08006799 	.word	0x08006799
 800672c:	080067d1 	.word	0x080067d1
 8006730:	080067d1 	.word	0x080067d1
 8006734:	080067d1 	.word	0x080067d1
 8006738:	080067b9 	.word	0x080067b9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800673c:	f7fc fb0c 	bl	8002d58 <HAL_RCC_GetPCLK1Freq>
 8006740:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	005a      	lsls	r2, r3, #1
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	085b      	lsrs	r3, r3, #1
 800674c:	441a      	add	r2, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	fbb2 f3f3 	udiv	r3, r2, r3
 8006756:	b29b      	uxth	r3, r3
 8006758:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800675a:	e03c      	b.n	80067d6 <UART_SetConfig+0x58e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800675c:	f7fc fb12 	bl	8002d84 <HAL_RCC_GetPCLK2Freq>
 8006760:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	005a      	lsls	r2, r3, #1
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	085b      	lsrs	r3, r3, #1
 800676c:	441a      	add	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	fbb2 f3f3 	udiv	r3, r2, r3
 8006776:	b29b      	uxth	r3, r3
 8006778:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800677a:	e02c      	b.n	80067d6 <UART_SetConfig+0x58e>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	085b      	lsrs	r3, r3, #1
 8006782:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8006786:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	6852      	ldr	r2, [r2, #4]
 800678e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006792:	b29b      	uxth	r3, r3
 8006794:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006796:	e01e      	b.n	80067d6 <UART_SetConfig+0x58e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006798:	f7fc fa4a 	bl	8002c30 <HAL_RCC_GetSysClockFreq>
 800679c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	005a      	lsls	r2, r3, #1
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	085b      	lsrs	r3, r3, #1
 80067a8:	441a      	add	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80067b6:	e00e      	b.n	80067d6 <UART_SetConfig+0x58e>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	085b      	lsrs	r3, r3, #1
 80067be:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80067ce:	e002      	b.n	80067d6 <UART_SetConfig+0x58e>
      default:
        ret = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	76fb      	strb	r3, [r7, #27]
        break;
 80067d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	2b0f      	cmp	r3, #15
 80067da:	d916      	bls.n	800680a <UART_SetConfig+0x5c2>
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067e2:	d212      	bcs.n	800680a <UART_SetConfig+0x5c2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	f023 030f 	bic.w	r3, r3, #15
 80067ec:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	085b      	lsrs	r3, r3, #1
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	f003 0307 	and.w	r3, r3, #7
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	89fb      	ldrh	r3, [r7, #14]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	89fa      	ldrh	r2, [r7, #14]
 8006806:	60da      	str	r2, [r3, #12]
 8006808:	e076      	b.n	80068f8 <UART_SetConfig+0x6b0>
    }
    else
    {
      ret = HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	76fb      	strb	r3, [r7, #27]
 800680e:	e073      	b.n	80068f8 <UART_SetConfig+0x6b0>
    }
  }
  else
  {
    switch (clocksource)
 8006810:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006814:	2b08      	cmp	r3, #8
 8006816:	d85c      	bhi.n	80068d2 <UART_SetConfig+0x68a>
 8006818:	a201      	add	r2, pc, #4	; (adr r2, 8006820 <UART_SetConfig+0x5d8>)
 800681a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681e:	bf00      	nop
 8006820:	08006845 	.word	0x08006845
 8006824:	08006863 	.word	0x08006863
 8006828:	08006881 	.word	0x08006881
 800682c:	080068d3 	.word	0x080068d3
 8006830:	0800689d 	.word	0x0800689d
 8006834:	080068d3 	.word	0x080068d3
 8006838:	080068d3 	.word	0x080068d3
 800683c:	080068d3 	.word	0x080068d3
 8006840:	080068bb 	.word	0x080068bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006844:	f7fc fa88 	bl	8002d58 <HAL_RCC_GetPCLK1Freq>
 8006848:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	085a      	lsrs	r2, r3, #1
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	441a      	add	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	fbb2 f3f3 	udiv	r3, r2, r3
 800685c:	b29b      	uxth	r3, r3
 800685e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006860:	e03a      	b.n	80068d8 <UART_SetConfig+0x690>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006862:	f7fc fa8f 	bl	8002d84 <HAL_RCC_GetPCLK2Freq>
 8006866:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	085a      	lsrs	r2, r3, #1
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	441a      	add	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	fbb2 f3f3 	udiv	r3, r2, r3
 800687a:	b29b      	uxth	r3, r3
 800687c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800687e:	e02b      	b.n	80068d8 <UART_SetConfig+0x690>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	085b      	lsrs	r3, r3, #1
 8006886:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800688a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	6852      	ldr	r2, [r2, #4]
 8006892:	fbb3 f3f2 	udiv	r3, r3, r2
 8006896:	b29b      	uxth	r3, r3
 8006898:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800689a:	e01d      	b.n	80068d8 <UART_SetConfig+0x690>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800689c:	f7fc f9c8 	bl	8002c30 <HAL_RCC_GetSysClockFreq>
 80068a0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	085a      	lsrs	r2, r3, #1
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	441a      	add	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80068b8:	e00e      	b.n	80068d8 <UART_SetConfig+0x690>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	085b      	lsrs	r3, r3, #1
 80068c0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80068d0:	e002      	b.n	80068d8 <UART_SetConfig+0x690>
      default:
        ret = HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	76fb      	strb	r3, [r7, #27]
        break;
 80068d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	2b0f      	cmp	r3, #15
 80068dc:	d90a      	bls.n	80068f4 <UART_SetConfig+0x6ac>
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068e4:	d206      	bcs.n	80068f4 <UART_SetConfig+0x6ac>
    {
      huart->Instance->BRR = usartdiv;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	69fa      	ldr	r2, [r7, #28]
 80068ec:	60da      	str	r2, [r3, #12]
 80068ee:	e003      	b.n	80068f8 <UART_SetConfig+0x6b0>
 80068f0:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006904:	7efb      	ldrb	r3, [r7, #27]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3728      	adds	r7, #40	; 0x28
 800690a:	46bd      	mov	sp, r7
 800690c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08006910 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00a      	beq.n	800693a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	6812      	ldr	r2, [r2, #0]
 800692c:	6852      	ldr	r2, [r2, #4]
 800692e:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006936:	430a      	orrs	r2, r1
 8006938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693e:	f003 0302 	and.w	r3, r3, #2
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00a      	beq.n	800695c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	6812      	ldr	r2, [r2, #0]
 800694e:	6852      	ldr	r2, [r2, #4]
 8006950:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006958:	430a      	orrs	r2, r1
 800695a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006960:	f003 0304 	and.w	r3, r3, #4
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00a      	beq.n	800697e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	6812      	ldr	r2, [r2, #0]
 8006970:	6852      	ldr	r2, [r2, #4]
 8006972:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800697a:	430a      	orrs	r2, r1
 800697c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006982:	f003 0308 	and.w	r3, r3, #8
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00a      	beq.n	80069a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	6812      	ldr	r2, [r2, #0]
 8006992:	6852      	ldr	r2, [r2, #4]
 8006994:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800699c:	430a      	orrs	r2, r1
 800699e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a4:	f003 0310 	and.w	r3, r3, #16
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00a      	beq.n	80069c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	6812      	ldr	r2, [r2, #0]
 80069b4:	6892      	ldr	r2, [r2, #8]
 80069b6:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069be:	430a      	orrs	r2, r1
 80069c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c6:	f003 0320 	and.w	r3, r3, #32
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00a      	beq.n	80069e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	6812      	ldr	r2, [r2, #0]
 80069d6:	6892      	ldr	r2, [r2, #8]
 80069d8:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80069e0:	430a      	orrs	r2, r1
 80069e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d01a      	beq.n	8006a26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	6812      	ldr	r2, [r2, #0]
 80069f8:	6852      	ldr	r2, [r2, #4]
 80069fa:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006a02:	430a      	orrs	r2, r1
 8006a04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a0e:	d10a      	bne.n	8006a26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	6812      	ldr	r2, [r2, #0]
 8006a18:	6852      	ldr	r2, [r2, #4]
 8006a1a:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006a22:	430a      	orrs	r2, r1
 8006a24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00a      	beq.n	8006a48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	6812      	ldr	r2, [r2, #0]
 8006a3a:	6852      	ldr	r2, [r2, #4]
 8006a3c:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006a44:	430a      	orrs	r2, r1
 8006a46:	605a      	str	r2, [r3, #4]
  }
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bc80      	pop	{r7}
 8006a50:	4770      	bx	lr

08006a52 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b086      	sub	sp, #24
 8006a56:	af02      	add	r7, sp, #8
 8006a58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006a60:	f7fa fb12 	bl	8001088 <HAL_GetTick>
 8006a64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0308 	and.w	r3, r3, #8
 8006a70:	2b08      	cmp	r3, #8
 8006a72:	d10e      	bne.n	8006a92 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f82a 	bl	8006adc <UART_WaitOnFlagUntilTimeout>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d001      	beq.n	8006a92 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e020      	b.n	8006ad4 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0304 	and.w	r3, r3, #4
 8006a9c:	2b04      	cmp	r3, #4
 8006a9e:	d10e      	bne.n	8006abe <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006aa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f814 	bl	8006adc <UART_WaitOnFlagUntilTimeout>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d001      	beq.n	8006abe <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e00a      	b.n	8006ad4 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2220      	movs	r2, #32
 8006ac2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2220      	movs	r2, #32
 8006ac8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	603b      	str	r3, [r7, #0]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aec:	e05d      	b.n	8006baa <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af4:	d059      	beq.n	8006baa <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006af6:	f7fa fac7 	bl	8001088 <HAL_GetTick>
 8006afa:	4602      	mov	r2, r0
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	1ad2      	subs	r2, r2, r3
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d802      	bhi.n	8006b0c <UART_WaitOnFlagUntilTimeout+0x30>
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d11b      	bne.n	8006b44 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	6812      	ldr	r2, [r2, #0]
 8006b14:	6812      	ldr	r2, [r2, #0]
 8006b16:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b1a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	6812      	ldr	r2, [r2, #0]
 8006b24:	6892      	ldr	r2, [r2, #8]
 8006b26:	f022 0201 	bic.w	r2, r2, #1
 8006b2a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2220      	movs	r2, #32
 8006b30:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2220      	movs	r2, #32
 8006b36:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006b40:	2303      	movs	r3, #3
 8006b42:	e042      	b.n	8006bca <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0304 	and.w	r3, r3, #4
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d02b      	beq.n	8006baa <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	69db      	ldr	r3, [r3, #28]
 8006b58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b60:	d123      	bne.n	8006baa <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b6a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	6812      	ldr	r2, [r2, #0]
 8006b74:	6812      	ldr	r2, [r2, #0]
 8006b76:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b7a:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	6812      	ldr	r2, [r2, #0]
 8006b84:	6892      	ldr	r2, [r2, #8]
 8006b86:	f022 0201 	bic.w	r2, r2, #1
 8006b8a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2220      	movs	r2, #32
 8006b90:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2220      	movs	r2, #32
 8006b96:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2220      	movs	r2, #32
 8006b9c:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e00f      	b.n	8006bca <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	69da      	ldr	r2, [r3, #28]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	401a      	ands	r2, r3
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	bf0c      	ite	eq
 8006bba:	2301      	moveq	r3, #1
 8006bbc:	2300      	movne	r3, #0
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	79fb      	ldrb	r3, [r7, #7]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d092      	beq.n	8006aee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006bd2:	b480      	push	{r7}
 8006bd4:	b083      	sub	sp, #12
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	6812      	ldr	r2, [r2, #0]
 8006be2:	6812      	ldr	r2, [r2, #0]
 8006be4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006be8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2220      	movs	r2, #32
 8006bee:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bc80      	pop	{r7}
 8006bf8:	4770      	bx	lr

08006bfa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b083      	sub	sp, #12
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	6812      	ldr	r2, [r2, #0]
 8006c0a:	6812      	ldr	r2, [r2, #0]
 8006c0c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006c10:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	6812      	ldr	r2, [r2, #0]
 8006c1a:	6892      	ldr	r2, [r2, #8]
 8006c1c:	f022 0201 	bic.w	r2, r2, #1
 8006c20:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2220      	movs	r2, #32
 8006c26:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006c2e:	bf00      	nop
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bc80      	pop	{r7}
 8006c36:	4770      	bx	lr

08006c38 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c44:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 0320 	and.w	r3, r3, #32
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d114      	bne.n	8006c7e <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	6812      	ldr	r2, [r2, #0]
 8006c64:	6892      	ldr	r2, [r2, #8]
 8006c66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c6a:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	6812      	ldr	r2, [r2, #0]
 8006c74:	6812      	ldr	r2, [r2, #0]
 8006c76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c7a:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c7c:	e002      	b.n	8006c84 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f7ff faac 	bl	80061dc <HAL_UART_TxCpltCallback>
}
 8006c84:	bf00      	nop
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c98:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f7ff faa7 	bl	80061ee <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ca0:	bf00      	nop
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0320 	and.w	r3, r3, #32
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d11e      	bne.n	8006d02 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	6812      	ldr	r2, [r2, #0]
 8006cd4:	6812      	ldr	r2, [r2, #0]
 8006cd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006cda:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	6812      	ldr	r2, [r2, #0]
 8006ce4:	6892      	ldr	r2, [r2, #8]
 8006ce6:	f022 0201 	bic.w	r2, r2, #1
 8006cea:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	6812      	ldr	r2, [r2, #0]
 8006cf4:	6892      	ldr	r2, [r2, #8]
 8006cf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cfa:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f7ff fa7c 	bl	8006200 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d08:	bf00      	nop
 8006d0a:	3710      	adds	r7, #16
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8006d1e:	68f8      	ldr	r0, [r7, #12]
 8006d20:	f7ff fa77 	bl	8006212 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d24:	bf00      	nop
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b086      	sub	sp, #24
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d38:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d3e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d44:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d50:	2b80      	cmp	r3, #128	; 0x80
 8006d52:	d109      	bne.n	8006d68 <UART_DMAError+0x3c>
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	2b21      	cmp	r3, #33	; 0x21
 8006d58:	d106      	bne.n	8006d68 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006d62:	6978      	ldr	r0, [r7, #20]
 8006d64:	f7ff ff35 	bl	8006bd2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d72:	2b40      	cmp	r3, #64	; 0x40
 8006d74:	d109      	bne.n	8006d8a <UART_DMAError+0x5e>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2b22      	cmp	r3, #34	; 0x22
 8006d7a:	d106      	bne.n	8006d8a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006d84:	6978      	ldr	r0, [r7, #20]
 8006d86:	f7ff ff38 	bl	8006bfa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d8e:	f043 0210 	orr.w	r2, r3, #16
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d96:	6978      	ldr	r0, [r7, #20]
 8006d98:	f7ff fa44 	bl	8006224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d9c:	bf00      	nop
 8006d9e:	3718      	adds	r7, #24
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f7ff fa2e 	bl	8006224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dc8:	bf00      	nop
 8006dca:	3710      	adds	r7, #16
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <UART_DMATxOnlyAbortCallback>:
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ddc:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0U;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2220      	movs	r2, #32
 8006dea:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f7ff fa22 	bl	8006236 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006df2:	bf00      	nop
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b082      	sub	sp, #8
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	6812      	ldr	r2, [r2, #0]
 8006e0a:	6812      	ldr	r2, [r2, #0]
 8006e0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e10:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2220      	movs	r2, #32
 8006e16:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f7ff f9dc 	bl	80061dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e24:	bf00      	nop
 8006e26:	3708      	adds	r7, #8
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bc80      	pop	{r7}
 8006e3c:	4770      	bx	lr
	...

08006e40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef MX_TIM2_Init(void)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b098      	sub	sp, #96	; 0x60
 8006e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006e46:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	601a      	str	r2, [r3, #0]
 8006e4e:	605a      	str	r2, [r3, #4]
 8006e50:	609a      	str	r2, [r3, #8]
 8006e52:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8006e54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006e58:	2200      	movs	r2, #0
 8006e5a:	601a      	str	r2, [r3, #0]
 8006e5c:	605a      	str	r2, [r3, #4]
 8006e5e:	609a      	str	r2, [r3, #8]
 8006e60:	60da      	str	r2, [r3, #12]
 8006e62:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006e64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006e68:	2200      	movs	r2, #0
 8006e6a:	601a      	str	r2, [r3, #0]
 8006e6c:	605a      	str	r2, [r3, #4]
 8006e6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006e70:	f107 0314 	add.w	r3, r7, #20
 8006e74:	2200      	movs	r2, #0
 8006e76:	601a      	str	r2, [r3, #0]
 8006e78:	605a      	str	r2, [r3, #4]
 8006e7a:	609a      	str	r2, [r3, #8]
 8006e7c:	60da      	str	r2, [r3, #12]
 8006e7e:	611a      	str	r2, [r3, #16]
 8006e80:	615a      	str	r2, [r3, #20]
 8006e82:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8006e84:	1d3b      	adds	r3, r7, #4
 8006e86:	2200      	movs	r2, #0
 8006e88:	601a      	str	r2, [r3, #0]
 8006e8a:	605a      	str	r2, [r3, #4]
 8006e8c:	609a      	str	r2, [r3, #8]
 8006e8e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006e90:	4b46      	ldr	r3, [pc, #280]	; (8006fac <MX_TIM2_Init+0x16c>)
 8006e92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006e96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8006e98:	4b44      	ldr	r3, [pc, #272]	; (8006fac <MX_TIM2_Init+0x16c>)
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006e9e:	4b43      	ldr	r3, [pc, #268]	; (8006fac <MX_TIM2_Init+0x16c>)
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536;
 8006ea4:	4b41      	ldr	r3, [pc, #260]	; (8006fac <MX_TIM2_Init+0x16c>)
 8006ea6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006eaa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006eac:	4b3f      	ldr	r3, [pc, #252]	; (8006fac <MX_TIM2_Init+0x16c>)
 8006eae:	2200      	movs	r2, #0
 8006eb0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006eb2:	4b3e      	ldr	r3, [pc, #248]	; (8006fac <MX_TIM2_Init+0x16c>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006eb8:	483c      	ldr	r0, [pc, #240]	; (8006fac <MX_TIM2_Init+0x16c>)
 8006eba:	f7fc ffb0 	bl	8003e1e <HAL_TIM_Base_Init>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d001      	beq.n	8006ec8 <MX_TIM2_Init+0x88>
  {
	  return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e06d      	b.n	8006fa4 <MX_TIM2_Init+0x164>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006ec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ecc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006ece:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	4835      	ldr	r0, [pc, #212]	; (8006fac <MX_TIM2_Init+0x16c>)
 8006ed6:	f7fd fc6b 	bl	80047b0 <HAL_TIM_ConfigClockSource>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d001      	beq.n	8006ee4 <MX_TIM2_Init+0xa4>
  {
   return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e05f      	b.n	8006fa4 <MX_TIM2_Init+0x164>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8006ee4:	4831      	ldr	r0, [pc, #196]	; (8006fac <MX_TIM2_Init+0x16c>)
 8006ee6:	f7fd f873 	bl	8003fd0 <HAL_TIM_OC_Init>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d001      	beq.n	8006ef4 <MX_TIM2_Init+0xb4>
  {
   return HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e057      	b.n	8006fa4 <MX_TIM2_Init+0x164>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8006ef4:	482d      	ldr	r0, [pc, #180]	; (8006fac <MX_TIM2_Init+0x16c>)
 8006ef6:	f7fd f9ed 	bl	80042d4 <HAL_TIM_IC_Init>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d001      	beq.n	8006f04 <MX_TIM2_Init+0xc4>
  {
   return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e04f      	b.n	8006fa4 <MX_TIM2_Init+0x164>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8006f04:	2304      	movs	r3, #4
 8006f06:	63fb      	str	r3, [r7, #60]	; 0x3c
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8006f08:	2360      	movs	r3, #96	; 0x60
 8006f0a:	643b      	str	r3, [r7, #64]	; 0x40
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.TriggerFilter = 0;
 8006f10:	2300      	movs	r3, #0
 8006f12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig) != HAL_OK)
 8006f14:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006f18:	4619      	mov	r1, r3
 8006f1a:	4824      	ldr	r0, [pc, #144]	; (8006fac <MX_TIM2_Init+0x16c>)
 8006f1c:	f7fd fd01 	bl	8004922 <HAL_TIM_SlaveConfigSynchro>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d001      	beq.n	8006f2a <MX_TIM2_Init+0xea>
  {
   return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e03c      	b.n	8006fa4 <MX_TIM2_Init+0x164>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006f32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006f36:	4619      	mov	r1, r3
 8006f38:	481c      	ldr	r0, [pc, #112]	; (8006fac <MX_TIM2_Init+0x16c>)
 8006f3a:	f7fe fb2b 	bl	8005594 <HAL_TIMEx_MasterConfigSynchronization>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d001      	beq.n	8006f48 <MX_TIM2_Init+0x108>
  {
   return HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e02d      	b.n	8006fa4 <MX_TIM2_Init+0x164>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = CCR1_VAL;
 8006f4c:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8006f50:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8006f52:	2302      	movs	r3, #2
 8006f54:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006f56:	2300      	movs	r3, #0
 8006f58:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006f5a:	f107 0314 	add.w	r3, r7, #20
 8006f5e:	2200      	movs	r2, #0
 8006f60:	4619      	mov	r1, r3
 8006f62:	4812      	ldr	r0, [pc, #72]	; (8006fac <MX_TIM2_Init+0x16c>)
 8006f64:	f7fd fb0a 	bl	800457c <HAL_TIM_OC_ConfigChannel>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d001      	beq.n	8006f72 <MX_TIM2_Init+0x132>
  {
   return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e018      	b.n	8006fa4 <MX_TIM2_Init+0x164>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8006f72:	2300      	movs	r3, #0
 8006f74:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8006f76:	2301      	movs	r3, #1
 8006f78:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8006f82:	1d3b      	adds	r3, r7, #4
 8006f84:	2204      	movs	r2, #4
 8006f86:	4619      	mov	r1, r3
 8006f88:	4808      	ldr	r0, [pc, #32]	; (8006fac <MX_TIM2_Init+0x16c>)
 8006f8a:	f7fd fb75 	bl	8004678 <HAL_TIM_IC_ConfigChannel>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d001      	beq.n	8006f98 <MX_TIM2_Init+0x158>
  {
   return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e005      	b.n	8006fa4 <MX_TIM2_Init+0x164>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  __HAL_TIM_CLEAR_IT(&htim2,TIM_IT_UPDATE);
 8006f98:	4b04      	ldr	r3, [pc, #16]	; (8006fac <MX_TIM2_Init+0x16c>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f06f 0201 	mvn.w	r2, #1
 8006fa0:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM2_Init 2 */
  return HAL_OK;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3760      	adds	r7, #96	; 0x60
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	2000109c 	.word	0x2000109c

08006fb0 <MX_UART4_Init>:
  * @param None
  * @retval HAL_StatusTypeDef
  */

HAL_StatusTypeDef MX_UART4_Init(void)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8006fb4:	4b14      	ldr	r3, [pc, #80]	; (8007008 <MX_UART4_Init+0x58>)
 8006fb6:	4a15      	ldr	r2, [pc, #84]	; (800700c <MX_UART4_Init+0x5c>)
 8006fb8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8006fba:	4b13      	ldr	r3, [pc, #76]	; (8007008 <MX_UART4_Init+0x58>)
 8006fbc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006fc0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8006fc2:	4b11      	ldr	r3, [pc, #68]	; (8007008 <MX_UART4_Init+0x58>)
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8006fc8:	4b0f      	ldr	r3, [pc, #60]	; (8007008 <MX_UART4_Init+0x58>)
 8006fca:	2200      	movs	r2, #0
 8006fcc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8006fce:	4b0e      	ldr	r3, [pc, #56]	; (8007008 <MX_UART4_Init+0x58>)
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8006fd4:	4b0c      	ldr	r3, [pc, #48]	; (8007008 <MX_UART4_Init+0x58>)
 8006fd6:	220c      	movs	r2, #12
 8006fd8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006fda:	4b0b      	ldr	r3, [pc, #44]	; (8007008 <MX_UART4_Init+0x58>)
 8006fdc:	2200      	movs	r2, #0
 8006fde:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8006fe0:	4b09      	ldr	r3, [pc, #36]	; (8007008 <MX_UART4_Init+0x58>)
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006fe6:	4b08      	ldr	r3, [pc, #32]	; (8007008 <MX_UART4_Init+0x58>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	621a      	str	r2, [r3, #32]

  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006fec:	4b06      	ldr	r3, [pc, #24]	; (8007008 <MX_UART4_Init+0x58>)
 8006fee:	2200      	movs	r2, #0
 8006ff0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8006ff2:	4805      	ldr	r0, [pc, #20]	; (8007008 <MX_UART4_Init+0x58>)
 8006ff4:	f7fe fb6f 	bl	80056d6 <HAL_UART_Init>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <MX_UART4_Init+0x52>
  {
   return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e000      	b.n	8007004 <MX_UART4_Init+0x54>
  }

  return HAL_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	bd80      	pop	{r7, pc}
 8007008:	2000101c 	.word	0x2000101c
 800700c:	40004c00 	.word	0x40004c00

08007010 <MX_DMA_Init>:
  *@pram None
  *@retval HAL_StatusTypeDef
  */

static HAL_StatusTypeDef MX_DMA_Init(void)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
	 * This piece of code is designed to completely reset the peripheral registers
	 * if an unwanted reset causes the DMA to keep the previous register settings and
	 * state. This causes unwanted interrupts in the program that are a nightmare to clear
	 */
	//for DMA RX channel
	if(DMA2_Channel5->CCR != 0)
 8007016:	4b44      	ldr	r3, [pc, #272]	; (8007128 <MX_DMA_Init+0x118>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00d      	beq.n	800703a <MX_DMA_Init+0x2a>
 	{
 		  //clear channel to reset state
 		  hdma_uart4_rx.Instance = DMA2_Channel5;
 800701e:	4b43      	ldr	r3, [pc, #268]	; (800712c <MX_DMA_Init+0x11c>)
 8007020:	4a41      	ldr	r2, [pc, #260]	; (8007128 <MX_DMA_Init+0x118>)
 8007022:	601a      	str	r2, [r3, #0]
 		  hdma_uart4_rx.DmaBaseAddress->ISR = DMA2->ISR;
 8007024:	4b41      	ldr	r3, [pc, #260]	; (800712c <MX_DMA_Init+0x11c>)
 8007026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007028:	4a41      	ldr	r2, [pc, #260]	; (8007130 <MX_DMA_Init+0x120>)
 800702a:	6812      	ldr	r2, [r2, #0]
 800702c:	601a      	str	r2, [r3, #0]
 		  hdma_uart4_rx.ChannelIndex = 5;
 800702e:	4b3f      	ldr	r3, [pc, #252]	; (800712c <MX_DMA_Init+0x11c>)
 8007030:	2205      	movs	r2, #5
 8007032:	645a      	str	r2, [r3, #68]	; 0x44
 		  HAL_DMA_DeInit(&hdma_uart4_rx);
 8007034:	483d      	ldr	r0, [pc, #244]	; (800712c <MX_DMA_Init+0x11c>)
 8007036:	f7fa fa99 	bl	800156c <HAL_DMA_DeInit>
 	  }
	//for DMA TX channel
	if(DMA2_Channel3->CCR != 0)
 800703a:	4b3e      	ldr	r3, [pc, #248]	; (8007134 <MX_DMA_Init+0x124>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00d      	beq.n	800705e <MX_DMA_Init+0x4e>
	{
		hdma_uart4_tx.Instance = DMA2_Channel3;
 8007042:	4b3d      	ldr	r3, [pc, #244]	; (8007138 <MX_DMA_Init+0x128>)
 8007044:	4a3b      	ldr	r2, [pc, #236]	; (8007134 <MX_DMA_Init+0x124>)
 8007046:	601a      	str	r2, [r3, #0]
		hdma_uart4_tx.DmaBaseAddress->ISR = DMA2->ISR;
 8007048:	4b3b      	ldr	r3, [pc, #236]	; (8007138 <MX_DMA_Init+0x128>)
 800704a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704c:	4a38      	ldr	r2, [pc, #224]	; (8007130 <MX_DMA_Init+0x120>)
 800704e:	6812      	ldr	r2, [r2, #0]
 8007050:	601a      	str	r2, [r3, #0]
		hdma_uart4_tx.ChannelIndex = 3;
 8007052:	4b39      	ldr	r3, [pc, #228]	; (8007138 <MX_DMA_Init+0x128>)
 8007054:	2203      	movs	r2, #3
 8007056:	645a      	str	r2, [r3, #68]	; 0x44
		HAL_DMA_DeInit(&hdma_uart4_tx);
 8007058:	4837      	ldr	r0, [pc, #220]	; (8007138 <MX_DMA_Init+0x128>)
 800705a:	f7fa fa87 	bl	800156c <HAL_DMA_DeInit>
	}
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800705e:	4a37      	ldr	r2, [pc, #220]	; (800713c <MX_DMA_Init+0x12c>)
 8007060:	4b36      	ldr	r3, [pc, #216]	; (800713c <MX_DMA_Init+0x12c>)
 8007062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007064:	f043 0302 	orr.w	r3, r3, #2
 8007068:	6493      	str	r3, [r2, #72]	; 0x48
 800706a:	4b34      	ldr	r3, [pc, #208]	; (800713c <MX_DMA_Init+0x12c>)
 800706c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800706e:	f003 0302 	and.w	r3, r3, #2
 8007072:	607b      	str	r3, [r7, #4]
 8007074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007076:	4a31      	ldr	r2, [pc, #196]	; (800713c <MX_DMA_Init+0x12c>)
 8007078:	4b30      	ldr	r3, [pc, #192]	; (800713c <MX_DMA_Init+0x12c>)
 800707a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800707c:	f043 0301 	orr.w	r3, r3, #1
 8007080:	6493      	str	r3, [r2, #72]	; 0x48
 8007082:	4b2e      	ldr	r3, [pc, #184]	; (800713c <MX_DMA_Init+0x12c>)
 8007084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	603b      	str	r3, [r7, #0]
 800708c:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 800708e:	4b2c      	ldr	r3, [pc, #176]	; (8007140 <MX_DMA_Init+0x130>)
 8007090:	4a2c      	ldr	r2, [pc, #176]	; (8007144 <MX_DMA_Init+0x134>)
 8007092:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel1.Init.Request = DMA_REQUEST_0;
 8007094:	4b2a      	ldr	r3, [pc, #168]	; (8007140 <MX_DMA_Init+0x130>)
 8007096:	2200      	movs	r2, #0
 8007098:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800709a:	4b29      	ldr	r3, [pc, #164]	; (8007140 <MX_DMA_Init+0x130>)
 800709c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80070a0:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 80070a2:	4b27      	ldr	r3, [pc, #156]	; (8007140 <MX_DMA_Init+0x130>)
 80070a4:	2240      	movs	r2, #64	; 0x40
 80070a6:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 80070a8:	4b25      	ldr	r3, [pc, #148]	; (8007140 <MX_DMA_Init+0x130>)
 80070aa:	2280      	movs	r2, #128	; 0x80
 80070ac:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80070ae:	4b24      	ldr	r3, [pc, #144]	; (8007140 <MX_DMA_Init+0x130>)
 80070b0:	2200      	movs	r2, #0
 80070b2:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80070b4:	4b22      	ldr	r3, [pc, #136]	; (8007140 <MX_DMA_Init+0x130>)
 80070b6:	2200      	movs	r2, #0
 80070b8:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 80070ba:	4b21      	ldr	r3, [pc, #132]	; (8007140 <MX_DMA_Init+0x130>)
 80070bc:	2200      	movs	r2, #0
 80070be:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 80070c0:	4b1f      	ldr	r3, [pc, #124]	; (8007140 <MX_DMA_Init+0x130>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 80070c6:	481e      	ldr	r0, [pc, #120]	; (8007140 <MX_DMA_Init+0x130>)
 80070c8:	f7fa f998 	bl	80013fc <HAL_DMA_Init>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d001      	beq.n	80070d6 <MX_DMA_Init+0xc6>
  {
    return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e024      	b.n	8007120 <MX_DMA_Init+0x110>
  }

  /* DMA interrupt init */
  CLEAR_REG(hdma_uart4_rx.DmaBaseAddress->ISR);
 80070d6:	4b15      	ldr	r3, [pc, #84]	; (800712c <MX_DMA_Init+0x11c>)
 80070d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070da:	2200      	movs	r2, #0
 80070dc:	601a      	str	r2, [r3, #0]
  CLEAR_REG(hdma_uart4_tx.DmaBaseAddress->ISR);
 80070de:	4b16      	ldr	r3, [pc, #88]	; (8007138 <MX_DMA_Init+0x128>)
 80070e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e2:	2200      	movs	r2, #0
 80070e4:	601a      	str	r2, [r3, #0]
  CLEAR_REG(hdma_memtomem_dma1_channel1.DmaBaseAddress->ISR);
 80070e6:	4b16      	ldr	r3, [pc, #88]	; (8007140 <MX_DMA_Init+0x130>)
 80070e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ea:	2200      	movs	r2, #0
 80070ec:	601a      	str	r2, [r3, #0]

  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80070ee:	2200      	movs	r2, #0
 80070f0:	2100      	movs	r1, #0
 80070f2:	200b      	movs	r0, #11
 80070f4:	f7fa f929 	bl	800134a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80070f8:	200b      	movs	r0, #11
 80070fa:	f7fa f942 	bl	8001382 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80070fe:	2200      	movs	r2, #0
 8007100:	2100      	movs	r1, #0
 8007102:	203a      	movs	r0, #58	; 0x3a
 8007104:	f7fa f921 	bl	800134a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8007108:	203a      	movs	r0, #58	; 0x3a
 800710a:	f7fa f93a 	bl	8001382 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 800710e:	2200      	movs	r2, #0
 8007110:	2100      	movs	r1, #0
 8007112:	203c      	movs	r0, #60	; 0x3c
 8007114:	f7fa f919 	bl	800134a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8007118:	203c      	movs	r0, #60	; 0x3c
 800711a:	f7fa f932 	bl	8001382 <HAL_NVIC_EnableIRQ>
  return HAL_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3708      	adds	r7, #8
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	40020458 	.word	0x40020458
 800712c:	2000074c 	.word	0x2000074c
 8007130:	40020400 	.word	0x40020400
 8007134:	40020430 	.word	0x40020430
 8007138:	200018e0 	.word	0x200018e0
 800713c:	40021000 	.word	0x40021000
 8007140:	200007d0 	.word	0x200007d0
 8007144:	40020008 	.word	0x40020008

08007148 <GPS_Log_Begin>:
//}

//======================= 5. Utility Function Definitions ===============================

void GPS_Log_Begin(GPS_Handle_Typedef* hgps)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
		log_gps = SET;
 8007150:	4b25      	ldr	r3, [pc, #148]	; (80071e8 <GPS_Log_Begin+0xa0>)
 8007152:	2201      	movs	r2, #1
 8007154:	701a      	strb	r2, [r3, #0]
	  __HAL_UART_ENABLE_IT(hgps->gps_huart,UART_IT_IDLE);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	6812      	ldr	r2, [r2, #0]
 8007160:	6812      	ldr	r2, [r2, #0]
 8007162:	6812      	ldr	r2, [r2, #0]
 8007164:	f042 0210 	orr.w	r2, r2, #16
 8007168:	601a      	str	r2, [r3, #0]
	  __HAL_DMA_ENABLE_IT(hgps->gps_huart->hdmarx, DMA_IT_TC);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	6812      	ldr	r2, [r2, #0]
 8007176:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007178:	6812      	ldr	r2, [r2, #0]
 800717a:	6812      	ldr	r2, [r2, #0]
 800717c:	f042 0202 	orr.w	r2, r2, #2
 8007180:	601a      	str	r2, [r3, #0]
	  if(__HAL_TIM_GET_FLAG(hgps->gps_htim,TIM_FLAG_CC1) == SET)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	f003 0302 	and.w	r3, r3, #2
 800718e:	2b02      	cmp	r3, #2
 8007190:	d105      	bne.n	800719e <GPS_Log_Begin+0x56>
	  {
	   __HAL_TIM_CLEAR_FLAG(hgps->gps_htim,TIM_FLAG_CC1);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f06f 0202 	mvn.w	r2, #2
 800719c:	611a      	str	r2, [r3, #16]
	  }
	  M2M_Txfer_Cplt = 0;
 800719e:	4b13      	ldr	r3, [pc, #76]	; (80071ec <GPS_Log_Begin+0xa4>)
 80071a0:	2200      	movs	r2, #0
 80071a2:	701a      	strb	r2, [r3, #0]
	  __HAL_TIM_ENABLE_IT(hgps->gps_htim,TIM_IT_CC1);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	6892      	ldr	r2, [r2, #8]
 80071ae:	6812      	ldr	r2, [r2, #0]
 80071b0:	68d2      	ldr	r2, [r2, #12]
 80071b2:	f042 0202 	orr.w	r2, r2, #2
 80071b6:	60da      	str	r2, [r3, #12]
	  HAL_TIM_OC_Start_IT(hgps->gps_htim, TIM_CHANNEL_1);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	2100      	movs	r1, #0
 80071be:	4618      	mov	r0, r3
 80071c0:	f7fc ff3a 	bl	8004038 <HAL_TIM_OC_Start_IT>
	  HAL_TIM_Base_Start_IT(hgps->gps_htim);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7fc fead 	bl	8003f28 <HAL_TIM_Base_Start_IT>
	  HAL_UART_Receive_DMA(hgps->gps_huart,DMA_RX_Buffer,DMA_RX_BUFFER_SIZE);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071d6:	4906      	ldr	r1, [pc, #24]	; (80071f0 <GPS_Log_Begin+0xa8>)
 80071d8:	4618      	mov	r0, r3
 80071da:	f7fe fcdb 	bl	8005b94 <HAL_UART_Receive_DMA>

}
 80071de:	bf00      	nop
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	20002128 	.word	0x20002128
 80071ec:	20000818 	.word	0x20000818
 80071f0:	2000081c 	.word	0x2000081c

080071f4 <GPS_Log_Stop>:

void GPS_Log_Stop(GPS_Handle_Typedef* hgps)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
	  log_gps = RESET;
 80071fc:	4b21      	ldr	r3, [pc, #132]	; (8007284 <GPS_Log_Stop+0x90>)
 80071fe:	2200      	movs	r2, #0
 8007200:	701a      	strb	r2, [r3, #0]
	  packet_full = 0;
 8007202:	4b21      	ldr	r3, [pc, #132]	; (8007288 <GPS_Log_Stop+0x94>)
 8007204:	2200      	movs	r2, #0
 8007206:	701a      	strb	r2, [r3, #0]

	  HAL_UART_DMAStop(hgps->gps_huart);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4618      	mov	r0, r3
 800720e:	f7fe fddd 	bl	8005dcc <HAL_UART_DMAStop>
	  __HAL_UART_DISABLE_IT(hgps->gps_huart,UART_IT_IDLE);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	6812      	ldr	r2, [r2, #0]
 800721c:	6812      	ldr	r2, [r2, #0]
 800721e:	6812      	ldr	r2, [r2, #0]
 8007220:	f022 0210 	bic.w	r2, r2, #16
 8007224:	601a      	str	r2, [r3, #0]
	  __HAL_DMA_DISABLE_IT(hgps->gps_huart->hdmarx, DMA_IT_TC);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	6812      	ldr	r2, [r2, #0]
 8007232:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007234:	6812      	ldr	r2, [r2, #0]
 8007236:	6812      	ldr	r2, [r2, #0]
 8007238:	f022 0202 	bic.w	r2, r2, #2
 800723c:	601a      	str	r2, [r3, #0]

	  HAL_TIM_Base_Stop_IT(hgps->gps_htim);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	4618      	mov	r0, r3
 8007244:	f7fc fe9a 	bl	8003f7c <HAL_TIM_Base_Stop_IT>
	  HAL_TIM_OC_Stop_IT(hgps->gps_htim, TIM_CHANNEL_1);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	2100      	movs	r1, #0
 800724e:	4618      	mov	r0, r3
 8007250:	f7fc ff90 	bl	8004174 <HAL_TIM_OC_Stop_IT>
	  if(__HAL_TIM_GET_FLAG(hgps->gps_htim,TIM_FLAG_CC1) == SET)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	f003 0302 	and.w	r3, r3, #2
 8007260:	2b02      	cmp	r3, #2
 8007262:	d105      	bne.n	8007270 <GPS_Log_Stop+0x7c>
	  {
	   __HAL_TIM_CLEAR_FLAG(hgps->gps_htim,TIM_FLAG_CC1);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f06f 0202 	mvn.w	r2, #2
 800726e:	611a      	str	r2, [r3, #16]

	  }
	  hgps->gps_htim->Instance->CNT = 0;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2200      	movs	r2, #0
 8007278:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("nop");
 800727a:	bf00      	nop
	  __NOP();
}
 800727c:	bf00      	nop
 800727e:	3708      	adds	r7, #8
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	20002128 	.word	0x20002128
 8007288:	200007c4 	.word	0x200007c4

0800728c <Clear_Buffer>:

void  Clear_Buffer(uint8_t *buffer,uint32_t size)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
	memset(buffer,0,size);
 8007296:	683a      	ldr	r2, [r7, #0]
 8007298:	2100      	movs	r1, #0
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f002 fec1 	bl	800a022 <memset>
}
 80072a0:	bf00      	nop
 80072a2:	3708      	adds	r7, #8
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <is_valid>:

uint8_t is_valid(char* nmeamsg)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b088      	sub	sp, #32
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
	uint8_t flag = 0;
 80072b0:	2300      	movs	r3, #0
 80072b2:	77fb      	strb	r3, [r7, #31]

	char msg[4] = {0};
 80072b4:	2300      	movs	r3, #0
 80072b6:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 80072b8:	2300      	movs	r3, #0
 80072ba:	61bb      	str	r3, [r7, #24]
 80072bc:	e00d      	b.n	80072da <is_valid+0x32>
	{
		msg[i] = *(nmeamsg+2+i);
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	3302      	adds	r3, #2
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	4413      	add	r3, r2
 80072c6:	7819      	ldrb	r1, [r3, #0]
 80072c8:	f107 020c 	add.w	r2, r7, #12
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	4413      	add	r3, r2
 80072d0:	460a      	mov	r2, r1
 80072d2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; ++i)
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	3301      	adds	r3, #1
 80072d8:	61bb      	str	r3, [r7, #24]
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	2b02      	cmp	r3, #2
 80072de:	ddee      	ble.n	80072be <is_valid+0x16>
	}
	if((strcmp((char*)msg,"GLL") != 0))
 80072e0:	f107 030c 	add.w	r3, r7, #12
 80072e4:	492c      	ldr	r1, [pc, #176]	; (8007398 <is_valid+0xf0>)
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7f8 ff72 	bl	80001d0 <strcmp>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d019      	beq.n	8007326 <is_valid+0x7e>
	{

		if (strcmp((char*)msg,"ZDA") != 0)
 80072f2:	f107 030c 	add.w	r3, r7, #12
 80072f6:	4929      	ldr	r1, [pc, #164]	; (800739c <is_valid+0xf4>)
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7f8 ff69 	bl	80001d0 <strcmp>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00d      	beq.n	8007320 <is_valid+0x78>
		{
			if(strcmp((char*)msg,"GSA") != 0)
 8007304:	f107 030c 	add.w	r3, r7, #12
 8007308:	4925      	ldr	r1, [pc, #148]	; (80073a0 <is_valid+0xf8>)
 800730a:	4618      	mov	r0, r3
 800730c:	f7f8 ff60 	bl	80001d0 <strcmp>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d001      	beq.n	800731a <is_valid+0x72>
			{
				return -1;
 8007316:	23ff      	movs	r3, #255	; 0xff
 8007318:	e039      	b.n	800738e <is_valid+0xe6>
			}
			else
			{
				flag = 2;
 800731a:	2302      	movs	r3, #2
 800731c:	77fb      	strb	r3, [r7, #31]
 800731e:	e004      	b.n	800732a <is_valid+0x82>
			}
		}else
		{
			flag = 3;
 8007320:	2303      	movs	r3, #3
 8007322:	77fb      	strb	r3, [r7, #31]
 8007324:	e001      	b.n	800732a <is_valid+0x82>
		}

	}
	else
	{
		flag = 1;
 8007326:	2301      	movs	r3, #1
 8007328:	77fb      	strb	r3, [r7, #31]
	}
	/* check sum */
	uint16_t checksum = 0;
 800732a:	2300      	movs	r3, #0
 800732c:	82fb      	strh	r3, [r7, #22]
	while(*nmeamsg != '*')
 800732e:	e008      	b.n	8007342 <is_valid+0x9a>
	{
		checksum^= *nmeamsg;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	b29a      	uxth	r2, r3
 8007336:	8afb      	ldrh	r3, [r7, #22]
 8007338:	4053      	eors	r3, r2
 800733a:	82fb      	strh	r3, [r7, #22]
		nmeamsg++;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	3301      	adds	r3, #1
 8007340:	607b      	str	r3, [r7, #4]
	while(*nmeamsg != '*')
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	2b2a      	cmp	r3, #42	; 0x2a
 8007348:	d1f2      	bne.n	8007330 <is_valid+0x88>
	}
	uint8_t h = char_to_hex(*(++nmeamsg))*16;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	3301      	adds	r3, #1
 800734e:	607b      	str	r3, [r7, #4]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	4618      	mov	r0, r3
 8007356:	f000 f825 	bl	80073a4 <char_to_hex>
 800735a:	4603      	mov	r3, r0
 800735c:	011b      	lsls	r3, r3, #4
 800735e:	757b      	strb	r3, [r7, #21]
	uint8_t l = char_to_hex(*(++nmeamsg));
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	3301      	adds	r3, #1
 8007364:	607b      	str	r3, [r7, #4]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	4618      	mov	r0, r3
 800736c:	f000 f81a 	bl	80073a4 <char_to_hex>
 8007370:	4603      	mov	r3, r0
 8007372:	753b      	strb	r3, [r7, #20]
	uint16_t checkbyte= h+l;
 8007374:	7d7b      	ldrb	r3, [r7, #21]
 8007376:	b29a      	uxth	r2, r3
 8007378:	7d3b      	ldrb	r3, [r7, #20]
 800737a:	b29b      	uxth	r3, r3
 800737c:	4413      	add	r3, r2
 800737e:	827b      	strh	r3, [r7, #18]

	if(!(checksum == checkbyte))
 8007380:	8afa      	ldrh	r2, [r7, #22]
 8007382:	8a7b      	ldrh	r3, [r7, #18]
 8007384:	429a      	cmp	r2, r3
 8007386:	d001      	beq.n	800738c <is_valid+0xe4>
	{
		return -1;
 8007388:	23ff      	movs	r3, #255	; 0xff
 800738a:	e000      	b.n	800738e <is_valid+0xe6>
	}

	return flag;
 800738c:	7ffb      	ldrb	r3, [r7, #31]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3720      	adds	r7, #32
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	080109a0 	.word	0x080109a0
 800739c:	080109a4 	.word	0x080109a4
 80073a0:	080109a8 	.word	0x080109a8

080073a4 <char_to_hex>:
/*
 * Flag keeps track of successful coordinate retrievals
 */

uint8_t char_to_hex(char c)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	4603      	mov	r3, r0
 80073ac:	71fb      	strb	r3, [r7, #7]
	if(c == '\0')
 80073ae:	79fb      	ldrb	r3, [r7, #7]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d101      	bne.n	80073b8 <char_to_hex+0x14>
	{
		return 0;
 80073b4:	2300      	movs	r3, #0
 80073b6:	e01e      	b.n	80073f6 <char_to_hex+0x52>
	}
	if ((c >='0') &&(c <='9'))
 80073b8:	79fb      	ldrb	r3, [r7, #7]
 80073ba:	2b2f      	cmp	r3, #47	; 0x2f
 80073bc:	d906      	bls.n	80073cc <char_to_hex+0x28>
 80073be:	79fb      	ldrb	r3, [r7, #7]
 80073c0:	2b39      	cmp	r3, #57	; 0x39
 80073c2:	d803      	bhi.n	80073cc <char_to_hex+0x28>
	{
		return (uint8_t)c - 48;
 80073c4:	79fb      	ldrb	r3, [r7, #7]
 80073c6:	3b30      	subs	r3, #48	; 0x30
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	e014      	b.n	80073f6 <char_to_hex+0x52>
	}
	if((c >='a') &&(c <='f'))
 80073cc:	79fb      	ldrb	r3, [r7, #7]
 80073ce:	2b60      	cmp	r3, #96	; 0x60
 80073d0:	d906      	bls.n	80073e0 <char_to_hex+0x3c>
 80073d2:	79fb      	ldrb	r3, [r7, #7]
 80073d4:	2b66      	cmp	r3, #102	; 0x66
 80073d6:	d803      	bhi.n	80073e0 <char_to_hex+0x3c>
	{
		return (uint8_t)c - 87;
 80073d8:	79fb      	ldrb	r3, [r7, #7]
 80073da:	3b57      	subs	r3, #87	; 0x57
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	e00a      	b.n	80073f6 <char_to_hex+0x52>
	}
	if((c >='A') &&(c <='F'))
 80073e0:	79fb      	ldrb	r3, [r7, #7]
 80073e2:	2b40      	cmp	r3, #64	; 0x40
 80073e4:	d906      	bls.n	80073f4 <char_to_hex+0x50>
 80073e6:	79fb      	ldrb	r3, [r7, #7]
 80073e8:	2b46      	cmp	r3, #70	; 0x46
 80073ea:	d803      	bhi.n	80073f4 <char_to_hex+0x50>
	{
		return (uint8_t)c - 55;
 80073ec:	79fb      	ldrb	r3, [r7, #7]
 80073ee:	3b37      	subs	r3, #55	; 0x37
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	e000      	b.n	80073f6 <char_to_hex+0x52>
	}
	return -1; //invalid charachter
 80073f4:	23ff      	movs	r3, #255	; 0xff
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bc80      	pop	{r7}
 80073fe:	4770      	bx	lr

08007400 <parse_ZDA>:
 * Parser Functions:
 * Extract key data from NMEA message strings.
 */

uint8_t parse_ZDA(char* ZDAstring)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b088      	sub	sp, #32
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
	time_t t;
	struct tm *timepointer;

	t = time(NULL);
 8007408:	2000      	movs	r0, #0
 800740a:	f004 f86d 	bl	800b4e8 <time>
 800740e:	4603      	mov	r3, r0
 8007410:	60fb      	str	r3, [r7, #12]
	timepointer = localtime(&t);
 8007412:	f107 030c 	add.w	r3, r7, #12
 8007416:	4618      	mov	r0, r3
 8007418:	f002 fae4 	bl	80099e4 <localtime>
 800741c:	61b8      	str	r0, [r7, #24]
	/* Get UTC time*/
	while(*ZDAstring++ != ',');
 800741e:	bf00      	nop
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	1c5a      	adds	r2, r3, #1
 8007424:	607a      	str	r2, [r7, #4]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	2b2c      	cmp	r3, #44	; 0x2c
 800742a:	d1f9      	bne.n	8007420 <parse_ZDA+0x20>
	char* temp = ZDAstring++;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	1c5a      	adds	r2, r3, #1
 8007430:	607a      	str	r2, [r7, #4]
 8007432:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < strlen(ZDAstring); ++i)
 8007434:	2300      	movs	r3, #0
 8007436:	61fb      	str	r3, [r7, #28]
 8007438:	e011      	b.n	800745e <parse_ZDA+0x5e>
	{
		if ((ZDAstring[i]==',')&&(ZDAstring[i+1] == ','))
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	4413      	add	r3, r2
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	2b2c      	cmp	r3, #44	; 0x2c
 8007444:	d108      	bne.n	8007458 <parse_ZDA+0x58>
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	3301      	adds	r3, #1
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	4413      	add	r3, r2
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	2b2c      	cmp	r3, #44	; 0x2c
 8007452:	d101      	bne.n	8007458 <parse_ZDA+0x58>
		{
			/* Data is invalid*/
			return -1;
 8007454:	23ff      	movs	r3, #255	; 0xff
 8007456:	e094      	b.n	8007582 <parse_ZDA+0x182>
	for (int i = 0; i < strlen(ZDAstring); ++i)
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	3301      	adds	r3, #1
 800745c:	61fb      	str	r3, [r7, #28]
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f7f8 fec0 	bl	80001e4 <strlen>
 8007464:	4602      	mov	r2, r0
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	429a      	cmp	r2, r3
 800746a:	d8e6      	bhi.n	800743a <parse_ZDA+0x3a>
		}
	}
	timepointer->tm_hour = (temp[0]-48)*10+ (temp[1]-48)+2;
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007474:	4613      	mov	r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4413      	add	r3, r2
 800747a:	005b      	lsls	r3, r3, #1
 800747c:	461a      	mov	r2, r3
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	3301      	adds	r3, #1
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	3b30      	subs	r3, #48	; 0x30
 8007486:	4413      	add	r3, r2
 8007488:	1c9a      	adds	r2, r3, #2
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	609a      	str	r2, [r3, #8]
	timepointer->tm_min = (temp[2]-48)*10+ (temp[3]-48)-1;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	3302      	adds	r3, #2
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007498:	4613      	mov	r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	4413      	add	r3, r2
 800749e:	005b      	lsls	r3, r3, #1
 80074a0:	461a      	mov	r2, r3
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	3303      	adds	r3, #3
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	3b30      	subs	r3, #48	; 0x30
 80074aa:	4413      	add	r3, r2
 80074ac:	1e5a      	subs	r2, r3, #1
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	605a      	str	r2, [r3, #4]
	timepointer->tm_sec = (temp[4]-48)*10+ (temp[5]-48) -1 ;
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	3304      	adds	r3, #4
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80074bc:	4613      	mov	r3, r2
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	005b      	lsls	r3, r3, #1
 80074c4:	461a      	mov	r2, r3
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	3305      	adds	r3, #5
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	3b30      	subs	r3, #48	; 0x30
 80074ce:	4413      	add	r3, r2
 80074d0:	1e5a      	subs	r2, r3, #1
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	601a      	str	r2, [r3, #0]
	while(*ZDAstring++ != ',');
 80074d6:	bf00      	nop
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	1c5a      	adds	r2, r3, #1
 80074dc:	607a      	str	r2, [r7, #4]
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	2b2c      	cmp	r3, #44	; 0x2c
 80074e2:	d1f9      	bne.n	80074d8 <parse_ZDA+0xd8>
	temp = ZDAstring;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	617b      	str	r3, [r7, #20]
	timepointer->tm_mday = (temp[0]-48)*10+ (temp[1]-48);
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80074f0:	4613      	mov	r3, r2
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4413      	add	r3, r2
 80074f6:	005b      	lsls	r3, r3, #1
 80074f8:	461a      	mov	r2, r3
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	3301      	adds	r3, #1
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	3b30      	subs	r3, #48	; 0x30
 8007502:	441a      	add	r2, r3
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	60da      	str	r2, [r3, #12]
	timepointer->tm_mon = (temp[3]-48)*10+ (temp[4]-48)-1;
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	3303      	adds	r3, #3
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007512:	4613      	mov	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4413      	add	r3, r2
 8007518:	005b      	lsls	r3, r3, #1
 800751a:	461a      	mov	r2, r3
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	3304      	adds	r3, #4
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	3b30      	subs	r3, #48	; 0x30
 8007524:	4413      	add	r3, r2
 8007526:	1e5a      	subs	r2, r3, #1
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	611a      	str	r2, [r3, #16]
	timepointer->tm_year = (temp[6]-48)*1000 +(temp[7]-48)*100 + (temp[8]-48)*10 +(temp[9]-48)-1900;
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	3306      	adds	r3, #6
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	3b30      	subs	r3, #48	; 0x30
 8007534:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007538:	fb02 f203 	mul.w	r2, r2, r3
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	3307      	adds	r3, #7
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	3b30      	subs	r3, #48	; 0x30
 8007544:	2164      	movs	r1, #100	; 0x64
 8007546:	fb01 f303 	mul.w	r3, r1, r3
 800754a:	18d1      	adds	r1, r2, r3
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	3308      	adds	r3, #8
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007556:	4613      	mov	r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4413      	add	r3, r2
 800755c:	005b      	lsls	r3, r3, #1
 800755e:	18ca      	adds	r2, r1, r3
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	3309      	adds	r3, #9
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	3b30      	subs	r3, #48	; 0x30
 8007568:	4413      	add	r3, r2
 800756a:	f2a3 726c 	subw	r2, r3, #1900	; 0x76c
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	615a      	str	r2, [r3, #20]
	time_t result;

	 result = mktime(timepointer);
 8007572:	69b8      	ldr	r0, [r7, #24]
 8007574:	f002 fe3e 	bl	800a1f4 <mktime>
 8007578:	6138      	str	r0, [r7, #16]
	 eTime =  result;
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	4a03      	ldr	r2, [pc, #12]	; (800758c <parse_ZDA+0x18c>)
 800757e:	6013      	str	r3, [r2, #0]
	return 0;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	3720      	adds	r7, #32
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	200007c0 	.word	0x200007c0

08007590 <Parse_GLL>:

uint8_t Parse_GLL(char* GLLstring)
{
 8007590:	b5b0      	push	{r4, r5, r7, lr}
 8007592:	b086      	sub	sp, #24
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
	/* Extract latitude*/
	uint8_t flag = 0;
 8007598:	2300      	movs	r3, #0
 800759a:	75fb      	strb	r3, [r7, #23]
	GLLstring+= 6;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	3306      	adds	r3, #6
 80075a0:	607b      	str	r3, [r7, #4]
	char* temp = GLLstring;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	613b      	str	r3, [r7, #16]
	uint8_t count = 0;
 80075a6:	2300      	movs	r3, #0
 80075a8:	75bb      	strb	r3, [r7, #22]
	while(*GLLstring++ != ',')
 80075aa:	e002      	b.n	80075b2 <Parse_GLL+0x22>
	{
		count++;
 80075ac:	7dbb      	ldrb	r3, [r7, #22]
 80075ae:	3301      	adds	r3, #1
 80075b0:	75bb      	strb	r3, [r7, #22]
	while(*GLLstring++ != ',')
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	1c5a      	adds	r2, r3, #1
 80075b6:	607a      	str	r2, [r7, #4]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	2b2c      	cmp	r3, #44	; 0x2c
 80075bc:	d1f6      	bne.n	80075ac <Parse_GLL+0x1c>
	}
	if((count > 0))
 80075be:	7dbb      	ldrb	r3, [r7, #22]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d02e      	beq.n	8007622 <Parse_GLL+0x92>
	{
		temp[count] = '\0';
 80075c4:	7dbb      	ldrb	r3, [r7, #22]
 80075c6:	693a      	ldr	r2, [r7, #16]
 80075c8:	4413      	add	r3, r2
 80075ca:	2200      	movs	r2, #0
 80075cc:	701a      	strb	r2, [r3, #0]
		int8_t sign = 1 -2*( temp[++count] =='S');
 80075ce:	7dbb      	ldrb	r3, [r7, #22]
 80075d0:	3301      	adds	r3, #1
 80075d2:	75bb      	strb	r3, [r7, #22]
 80075d4:	7dbb      	ldrb	r3, [r7, #22]
 80075d6:	693a      	ldr	r2, [r7, #16]
 80075d8:	4413      	add	r3, r2
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	2b53      	cmp	r3, #83	; 0x53
 80075de:	d102      	bne.n	80075e6 <Parse_GLL+0x56>
 80075e0:	f04f 33ff 	mov.w	r3, #4294967295
 80075e4:	e000      	b.n	80075e8 <Parse_GLL+0x58>
 80075e6:	2301      	movs	r3, #1
 80075e8:	73fb      	strb	r3, [r7, #15]
		GPS_coord.lat = sign*atof(temp);
 80075ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7f8 ffa8 	bl	8000544 <__aeabi_i2d>
 80075f4:	4604      	mov	r4, r0
 80075f6:	460d      	mov	r5, r1
 80075f8:	6938      	ldr	r0, [r7, #16]
 80075fa:	f002 f9c5 	bl	8009988 <atof>
 80075fe:	4602      	mov	r2, r0
 8007600:	460b      	mov	r3, r1
 8007602:	4620      	mov	r0, r4
 8007604:	4629      	mov	r1, r5
 8007606:	f7f9 f803 	bl	8000610 <__aeabi_dmul>
 800760a:	4603      	mov	r3, r0
 800760c:	460c      	mov	r4, r1
 800760e:	4618      	mov	r0, r3
 8007610:	4621      	mov	r1, r4
 8007612:	f7f9 faf5 	bl	8000c00 <__aeabi_d2f>
 8007616:	4602      	mov	r2, r0
 8007618:	4b28      	ldr	r3, [pc, #160]	; (80076bc <Parse_GLL+0x12c>)
 800761a:	601a      	str	r2, [r3, #0]
		flag++;
 800761c:	7dfb      	ldrb	r3, [r7, #23]
 800761e:	3301      	adds	r3, #1
 8007620:	75fb      	strb	r3, [r7, #23]
	}

	/* Extract longitude */
	while(*GLLstring++ !=',');
 8007622:	bf00      	nop
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	1c5a      	adds	r2, r3, #1
 8007628:	607a      	str	r2, [r7, #4]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	2b2c      	cmp	r3, #44	; 0x2c
 800762e:	d1f9      	bne.n	8007624 <Parse_GLL+0x94>
	temp = GLLstring;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	613b      	str	r3, [r7, #16]
	count = 0;
 8007634:	2300      	movs	r3, #0
 8007636:	75bb      	strb	r3, [r7, #22]
	while(*GLLstring++ != ',')
 8007638:	e002      	b.n	8007640 <Parse_GLL+0xb0>
	{
			count++;
 800763a:	7dbb      	ldrb	r3, [r7, #22]
 800763c:	3301      	adds	r3, #1
 800763e:	75bb      	strb	r3, [r7, #22]
	while(*GLLstring++ != ',')
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	1c5a      	adds	r2, r3, #1
 8007644:	607a      	str	r2, [r7, #4]
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	2b2c      	cmp	r3, #44	; 0x2c
 800764a:	d1f6      	bne.n	800763a <Parse_GLL+0xaa>
	}
	if((count > 0))
 800764c:	7dbb      	ldrb	r3, [r7, #22]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d02e      	beq.n	80076b0 <Parse_GLL+0x120>
	{
			temp[count] = '\0';
 8007652:	7dbb      	ldrb	r3, [r7, #22]
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	4413      	add	r3, r2
 8007658:	2200      	movs	r2, #0
 800765a:	701a      	strb	r2, [r3, #0]
			int8_t sign = 1 -2*( temp[++count] =='W');
 800765c:	7dbb      	ldrb	r3, [r7, #22]
 800765e:	3301      	adds	r3, #1
 8007660:	75bb      	strb	r3, [r7, #22]
 8007662:	7dbb      	ldrb	r3, [r7, #22]
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	4413      	add	r3, r2
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	2b57      	cmp	r3, #87	; 0x57
 800766c:	d102      	bne.n	8007674 <Parse_GLL+0xe4>
 800766e:	f04f 33ff 	mov.w	r3, #4294967295
 8007672:	e000      	b.n	8007676 <Parse_GLL+0xe6>
 8007674:	2301      	movs	r3, #1
 8007676:	73bb      	strb	r3, [r7, #14]
			GPS_coord.longi = sign*atof(temp);
 8007678:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800767c:	4618      	mov	r0, r3
 800767e:	f7f8 ff61 	bl	8000544 <__aeabi_i2d>
 8007682:	4604      	mov	r4, r0
 8007684:	460d      	mov	r5, r1
 8007686:	6938      	ldr	r0, [r7, #16]
 8007688:	f002 f97e 	bl	8009988 <atof>
 800768c:	4602      	mov	r2, r0
 800768e:	460b      	mov	r3, r1
 8007690:	4620      	mov	r0, r4
 8007692:	4629      	mov	r1, r5
 8007694:	f7f8 ffbc 	bl	8000610 <__aeabi_dmul>
 8007698:	4603      	mov	r3, r0
 800769a:	460c      	mov	r4, r1
 800769c:	4618      	mov	r0, r3
 800769e:	4621      	mov	r1, r4
 80076a0:	f7f9 faae 	bl	8000c00 <__aeabi_d2f>
 80076a4:	4602      	mov	r2, r0
 80076a6:	4b05      	ldr	r3, [pc, #20]	; (80076bc <Parse_GLL+0x12c>)
 80076a8:	605a      	str	r2, [r3, #4]
			flag++;
 80076aa:	7dfb      	ldrb	r3, [r7, #23]
 80076ac:	3301      	adds	r3, #1
 80076ae:	75fb      	strb	r3, [r7, #23]

	}

return flag;
 80076b0:	7dfb      	ldrb	r3, [r7, #23]

}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3718      	adds	r7, #24
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bdb0      	pop	{r4, r5, r7, pc}
 80076ba:	bf00      	nop
 80076bc:	200007c8 	.word	0x200007c8

080076c0 <parse_GSA>:

uint8_t parse_GSA(char* GSA_string)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b089      	sub	sp, #36	; 0x24
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
	/* Isolate Dilation of Precisions*/
	uint8_t count = 0;
 80076c8:	2300      	movs	r3, #0
 80076ca:	77fb      	strb	r3, [r7, #31]
	char* t = GSA_string;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	61bb      	str	r3, [r7, #24]
	while(count < 2)
 80076d0:	e008      	b.n	80076e4 <parse_GSA+0x24>
	{
		if(*t++==',')count++;
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	1c5a      	adds	r2, r3, #1
 80076d6:	61ba      	str	r2, [r7, #24]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	2b2c      	cmp	r3, #44	; 0x2c
 80076dc:	d102      	bne.n	80076e4 <parse_GSA+0x24>
 80076de:	7ffb      	ldrb	r3, [r7, #31]
 80076e0:	3301      	adds	r3, #1
 80076e2:	77fb      	strb	r3, [r7, #31]
	while(count < 2)
 80076e4:	7ffb      	ldrb	r3, [r7, #31]
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d9f3      	bls.n	80076d2 <parse_GSA+0x12>
	}
	diag.fix_type = (*t++-48);
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	1c5a      	adds	r2, r3, #1
 80076ee:	61ba      	str	r2, [r7, #24]
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	3b30      	subs	r3, #48	; 0x30
 80076f4:	b2da      	uxtb	r2, r3
 80076f6:	4b45      	ldr	r3, [pc, #276]	; (800780c <parse_GSA+0x14c>)
 80076f8:	71da      	strb	r2, [r3, #7]

	//field 3 - 15 indicate satelites
	uint8_t numsats = 0;
 80076fa:	2300      	movs	r3, #0
 80076fc:	75fb      	strb	r3, [r7, #23]
	uint8_t numfields = 0;
 80076fe:	2300      	movs	r3, #0
 8007700:	75bb      	strb	r3, [r7, #22]
	while(numfields < 12)
 8007702:	e015      	b.n	8007730 <parse_GSA+0x70>
	{
		uint8_t count = 0;
 8007704:	2300      	movs	r3, #0
 8007706:	757b      	strb	r3, [r7, #21]
		while(*++t !=',')count++;
 8007708:	e002      	b.n	8007710 <parse_GSA+0x50>
 800770a:	7d7b      	ldrb	r3, [r7, #21]
 800770c:	3301      	adds	r3, #1
 800770e:	757b      	strb	r3, [r7, #21]
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	3301      	adds	r3, #1
 8007714:	61bb      	str	r3, [r7, #24]
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	2b2c      	cmp	r3, #44	; 0x2c
 800771c:	d1f5      	bne.n	800770a <parse_GSA+0x4a>
		if(count > 0)
 800771e:	7d7b      	ldrb	r3, [r7, #21]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d002      	beq.n	800772a <parse_GSA+0x6a>
		{
			numsats++;
 8007724:	7dfb      	ldrb	r3, [r7, #23]
 8007726:	3301      	adds	r3, #1
 8007728:	75fb      	strb	r3, [r7, #23]
		}
		numfields++;
 800772a:	7dbb      	ldrb	r3, [r7, #22]
 800772c:	3301      	adds	r3, #1
 800772e:	75bb      	strb	r3, [r7, #22]
	while(numfields < 12)
 8007730:	7dbb      	ldrb	r3, [r7, #22]
 8007732:	2b0b      	cmp	r3, #11
 8007734:	d9e6      	bls.n	8007704 <parse_GSA+0x44>

	}
	diag.num_sats = numsats;
 8007736:	4a35      	ldr	r2, [pc, #212]	; (800780c <parse_GSA+0x14c>)
 8007738:	7dfb      	ldrb	r3, [r7, #23]
 800773a:	7193      	strb	r3, [r2, #6]
	DOP_t dop[3] = {0};
 800773c:	f107 0308 	add.w	r3, r7, #8
 8007740:	2200      	movs	r2, #0
 8007742:	601a      	str	r2, [r3, #0]
 8007744:	809a      	strh	r2, [r3, #4]
	for (int i = 0; i < 3; ++i)
 8007746:	2300      	movs	r3, #0
 8007748:	613b      	str	r3, [r7, #16]
 800774a:	e043      	b.n	80077d4 <parse_GSA+0x114>
	{
		//get digit
		while(*++t != '.')
		{
			dop[i].digit = dop[i].digit*10 +(*t-48);
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	005b      	lsls	r3, r3, #1
 8007750:	f107 0220 	add.w	r2, r7, #32
 8007754:	4413      	add	r3, r2
 8007756:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800775a:	461a      	mov	r2, r3
 800775c:	0092      	lsls	r2, r2, #2
 800775e:	4413      	add	r3, r2
 8007760:	005b      	lsls	r3, r3, #1
 8007762:	b2da      	uxtb	r2, r3
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	4413      	add	r3, r2
 800776a:	b2db      	uxtb	r3, r3
 800776c:	3b30      	subs	r3, #48	; 0x30
 800776e:	b2da      	uxtb	r2, r3
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	005b      	lsls	r3, r3, #1
 8007774:	f107 0120 	add.w	r1, r7, #32
 8007778:	440b      	add	r3, r1
 800777a:	f803 2c18 	strb.w	r2, [r3, #-24]
		while(*++t != '.')
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	3301      	adds	r3, #1
 8007782:	61bb      	str	r3, [r7, #24]
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	2b2e      	cmp	r3, #46	; 0x2e
 800778a:	d1df      	bne.n	800774c <parse_GSA+0x8c>
		}
		while(*++t != ',')
 800778c:	e018      	b.n	80077c0 <parse_GSA+0x100>
		{
			dop[i].precision = dop[i].precision*10+(*t-48);
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	005b      	lsls	r3, r3, #1
 8007792:	f107 0220 	add.w	r2, r7, #32
 8007796:	4413      	add	r3, r2
 8007798:	f813 3c17 	ldrb.w	r3, [r3, #-23]
 800779c:	461a      	mov	r2, r3
 800779e:	0092      	lsls	r2, r2, #2
 80077a0:	4413      	add	r3, r2
 80077a2:	005b      	lsls	r3, r3, #1
 80077a4:	b2da      	uxtb	r2, r3
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	4413      	add	r3, r2
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	3b30      	subs	r3, #48	; 0x30
 80077b0:	b2da      	uxtb	r2, r3
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	005b      	lsls	r3, r3, #1
 80077b6:	f107 0120 	add.w	r1, r7, #32
 80077ba:	440b      	add	r3, r1
 80077bc:	f803 2c17 	strb.w	r2, [r3, #-23]
		while(*++t != ',')
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	3301      	adds	r3, #1
 80077c4:	61bb      	str	r3, [r7, #24]
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	2b2c      	cmp	r3, #44	; 0x2c
 80077cc:	d1df      	bne.n	800778e <parse_GSA+0xce>
	for (int i = 0; i < 3; ++i)
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	3301      	adds	r3, #1
 80077d2:	613b      	str	r3, [r7, #16]
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	ddd1      	ble.n	800777e <parse_GSA+0xbe>
	}
	/*
	 * If successful, add to diagnostic struct
	 *
	 */
diag.HDOP = dop[0];
 80077da:	4b0c      	ldr	r3, [pc, #48]	; (800780c <parse_GSA+0x14c>)
 80077dc:	3302      	adds	r3, #2
 80077de:	f107 0208 	add.w	r2, r7, #8
 80077e2:	8812      	ldrh	r2, [r2, #0]
 80077e4:	801a      	strh	r2, [r3, #0]
diag.PDOP = dop[1];
 80077e6:	4b09      	ldr	r3, [pc, #36]	; (800780c <parse_GSA+0x14c>)
 80077e8:	461a      	mov	r2, r3
 80077ea:	f107 030a 	add.w	r3, r7, #10
 80077ee:	881b      	ldrh	r3, [r3, #0]
 80077f0:	8013      	strh	r3, [r2, #0]
diag.VDOP = dop[2];
 80077f2:	4b06      	ldr	r3, [pc, #24]	; (800780c <parse_GSA+0x14c>)
 80077f4:	3304      	adds	r3, #4
 80077f6:	f107 020c 	add.w	r2, r7, #12
 80077fa:	8812      	ldrh	r2, [r2, #0]
 80077fc:	801a      	strh	r2, [r3, #0]
	return 0;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3724      	adds	r7, #36	; 0x24
 8007804:	46bd      	mov	sp, r7
 8007806:	bc80      	pop	{r7}
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	200007b4 	.word	0x200007b4

08007810 <init_GPS>:

//================== 5. Peripheral Function Definitions ===============================

GPS_Init_msg_t init_GPS(GPS_Handle_Typedef *hgps)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]

	if(MX_DMA_Init() != HAL_OK)  return GPS_Init_Periph_Config_Error;
 8007818:	f7ff fbfa 	bl	8007010 <MX_DMA_Init>
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d001      	beq.n	8007826 <init_GPS+0x16>
 8007822:	2306      	movs	r3, #6
 8007824:	e074      	b.n	8007910 <init_GPS+0x100>
	if(MX_UART4_Init() != HAL_OK) return GPS_Init_Periph_Config_Error;
 8007826:	f7ff fbc3 	bl	8006fb0 <MX_UART4_Init>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d001      	beq.n	8007834 <init_GPS+0x24>
 8007830:	2306      	movs	r3, #6
 8007832:	e06d      	b.n	8007910 <init_GPS+0x100>
	if(MX_TIM2_Init() != HAL_OK) return GPS_Init_Periph_Config_Error;
 8007834:	f7ff fb04 	bl	8006e40 <MX_TIM2_Init>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d001      	beq.n	8007842 <init_GPS+0x32>
 800783e:	2306      	movs	r3, #6
 8007840:	e066      	b.n	8007910 <init_GPS+0x100>

	/* attach handlers to gps instances*/
	hgps->gps_huart = &huart4;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a34      	ldr	r2, [pc, #208]	; (8007918 <init_GPS+0x108>)
 8007846:	601a      	str	r2, [r3, #0]
	hgps->gps_htim  = &htim2;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a34      	ldr	r2, [pc, #208]	; (800791c <init_GPS+0x10c>)
 800784c:	609a      	str	r2, [r3, #8]
	hgps->gps_hdmamem = &hdma_memtomem_dma1_channel1;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a33      	ldr	r2, [pc, #204]	; (8007920 <init_GPS+0x110>)
 8007852:	605a      	str	r2, [r3, #4]

	/* Attach pointers to data buffer */
	hgps->GPS_Tx_Buffer = DMA_TX_Buffer;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a33      	ldr	r2, [pc, #204]	; (8007924 <init_GPS+0x114>)
 8007858:	611a      	str	r2, [r3, #16]
	hgps->GPS_Rx_Buffer = DMA_RX_Buffer;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a32      	ldr	r2, [pc, #200]	; (8007928 <init_GPS+0x118>)
 800785e:	60da      	str	r2, [r3, #12]
	hgps->GPS_Mem_Buffer = GNSS_Buffer;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	4a32      	ldr	r2, [pc, #200]	; (800792c <init_GPS+0x11c>)
 8007864:	615a      	str	r2, [r3, #20]

	//poll a byte to see if reciever online
	uint8_t test_byte;
	if(HAL_UART_Receive(hgps->gps_huart,&test_byte,1,250) != HAL_OK)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6818      	ldr	r0, [r3, #0]
 800786a:	f107 010e 	add.w	r1, r7, #14
 800786e:	23fa      	movs	r3, #250	; 0xfa
 8007870:	2201      	movs	r2, #1
 8007872:	f7fe f846 	bl	8005902 <HAL_UART_Receive>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d001      	beq.n	8007880 <init_GPS+0x70>
	{
		return GPS_Init_Offline_Error;
 800787c:	2307      	movs	r3, #7
 800787e:	e047      	b.n	8007910 <init_GPS+0x100>
	}
	UBX_MSG_t GPS_Acknowledgement_State = UBX_Send_Ack(hgps);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 f93d 	bl	8007b00 <UBX_Send_Ack>
 8007886:	4603      	mov	r3, r0
 8007888:	73fb      	strb	r3, [r7, #15]
	if(GPS_Acknowledgement_State == UBX_ACK_ACK)
 800788a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800788e:	2b01      	cmp	r3, #1
 8007890:	d115      	bne.n	80078be <init_GPS+0xae>
	{
		Clear_Buffer(hgps->GPS_Tx_Buffer,DMA_TX_BUFFER_SIZE);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800789a:	4618      	mov	r0, r3
 800789c:	f7ff fcf6 	bl	800728c <Clear_Buffer>
		Clear_Buffer(hgps->GPS_Mem_Buffer,GNSS_BUFFER_SIZE);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	695b      	ldr	r3, [r3, #20]
 80078a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7ff fcef 	bl	800728c <Clear_Buffer>
		if( UBX_Configure_Baudrate(hgps) != UBX_ACK_ACK)
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fa56 	bl	8007d60 <UBX_Configure_Baudrate>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d021      	beq.n	80078fe <init_GPS+0xee>
		{
			return GPS_Init_Baud_Config_Error;
 80078ba:	2303      	movs	r3, #3
 80078bc:	e028      	b.n	8007910 <init_GPS+0x100>
		}

	}else if(GPS_Acknowledgement_State == UBX_TIMEOUT_Rx)
 80078be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078c2:	f113 0f03 	cmn.w	r3, #3
 80078c6:	d113      	bne.n	80078f0 <init_GPS+0xe0>
		/*
		 * If Not recieving Ack-Ack on 115200, it could be possible that the device is
		 * already configured. change baud rate and try again
		 */
		//configure baud rate to 115200 and try again
		if(USART_Set_Baudrate(hgps,115200) == HAL_OK)
 80078c8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f89d 	bl	8007a0c <USART_Set_Baudrate>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d104      	bne.n	80078e2 <init_GPS+0xd2>
		{
			GPS_Acknowledgement_State = UBX_Send_Ack(hgps);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f911 	bl	8007b00 <UBX_Send_Ack>
 80078de:	4603      	mov	r3, r0
 80078e0:	73fb      	strb	r3, [r7, #15]
		}
		if(GPS_Acknowledgement_State == UBX_TIMEOUT_Rx)
 80078e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078e6:	f113 0f03 	cmn.w	r3, #3
 80078ea:	d108      	bne.n	80078fe <init_GPS+0xee>
		{
			return GPS_Init_Ack_Error;
 80078ec:	2302      	movs	r3, #2
 80078ee:	e00f      	b.n	8007910 <init_GPS+0x100>
		}


	}else if(GPS_Acknowledgement_State == UBX_TIMEOUT_Tx)
 80078f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078f4:	f113 0f02 	cmn.w	r3, #2
 80078f8:	d101      	bne.n	80078fe <init_GPS+0xee>
	{
		return GPS_Init_Ack_Tx_Error;
 80078fa:	2305      	movs	r3, #5
 80078fc:	e008      	b.n	8007910 <init_GPS+0x100>
	}
	//configure message buffer
	if( UBX_Configure_Messages(hgps) != UBX_OK )
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fa78 	bl	8007df4 <UBX_Configure_Messages>
 8007904:	4603      	mov	r3, r0
 8007906:	2b02      	cmp	r3, #2
 8007908:	d001      	beq.n	800790e <init_GPS+0xfe>
	{
		return GPS_Init_MSG_Config_Error;
 800790a:	2304      	movs	r3, #4
 800790c:	e000      	b.n	8007910 <init_GPS+0x100>
	}
	return GPS_Init_OK;
 800790e:	2301      	movs	r3, #1
}
 8007910:	4618      	mov	r0, r3
 8007912:	3710      	adds	r7, #16
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	2000101c 	.word	0x2000101c
 800791c:	2000109c 	.word	0x2000109c
 8007920:	200007d0 	.word	0x200007d0
 8007924:	20001928 	.word	0x20001928
 8007928:	2000081c 	.word	0x2000081c
 800792c:	200010dc 	.word	0x200010dc

08007930 <deinit_GPS>:

GPS_Init_msg_t deinit_GPS(GPS_Handle_Typedef* hgps)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
	/* Deinit Timer */
	if(hgps->gps_htim->Instance != GPS_TIM_PORT)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007942:	d004      	beq.n	800794e <deinit_GPS+0x1e>
	{
		hgps->gps_htim->Instance = GPS_TIM_PORT;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800794c:	601a      	str	r2, [r3, #0]
	}
	//Disable Timer
	HAL_TIM_Base_Stop_IT(hgps->gps_htim);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	4618      	mov	r0, r3
 8007954:	f7fc fb12 	bl	8003f7c <HAL_TIM_Base_Stop_IT>
	if(HAL_TIM_Base_DeInit(hgps->gps_htim) != HAL_OK)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	4618      	mov	r0, r3
 800795e:	f7fc fa89 	bl	8003e74 <HAL_TIM_Base_DeInit>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d001      	beq.n	800796c <deinit_GPS+0x3c>
	{
		return GPS_Init_Periph_Config_Error;
 8007968:	2306      	movs	r3, #6
 800796a:	e046      	b.n	80079fa <deinit_GPS+0xca>
	}
	//detach instance
	hgps->gps_htim = NULL;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	609a      	str	r2, [r3, #8]
	/* De init UART*/
	if(hgps->gps_huart->Instance != GPS_UART_PORT)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a22      	ldr	r2, [pc, #136]	; (8007a04 <deinit_GPS+0xd4>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d003      	beq.n	8007986 <deinit_GPS+0x56>
	{
		hgps->gps_huart->Instance = GPS_UART_PORT;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a20      	ldr	r2, [pc, #128]	; (8007a04 <deinit_GPS+0xd4>)
 8007984:	601a      	str	r2, [r3, #0]
	}
	if(HAL_UART_DeInit(hgps->gps_huart) != HAL_OK)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4618      	mov	r0, r3
 800798c:	f7fd fef1 	bl	8005772 <HAL_UART_DeInit>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d001      	beq.n	800799a <deinit_GPS+0x6a>
	{
		return GPS_Init_Periph_Config_Error;
 8007996:	2306      	movs	r3, #6
 8007998:	e02f      	b.n	80079fa <deinit_GPS+0xca>
	}
	hgps->gps_huart = NULL;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	601a      	str	r2, [r3, #0]
	/* De init DMA Memory Stream*/
	if(hgps->gps_hdmamem->Instance != DMA1_Channel1)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a18      	ldr	r2, [pc, #96]	; (8007a08 <deinit_GPS+0xd8>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d003      	beq.n	80079b4 <deinit_GPS+0x84>
	{
		hgps->gps_hdmamem->Instance = DMA1_Channel1;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	4a15      	ldr	r2, [pc, #84]	; (8007a08 <deinit_GPS+0xd8>)
 80079b2:	601a      	str	r2, [r3, #0]
	}
	if(HAL_DMA_DeInit(hgps->gps_hdmamem) != HAL_OK)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7f9 fdd7 	bl	800156c <HAL_DMA_DeInit>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d001      	beq.n	80079c8 <deinit_GPS+0x98>
	{
		return GPS_Init_Periph_Config_Error;
 80079c4:	2306      	movs	r3, #6
 80079c6:	e018      	b.n	80079fa <deinit_GPS+0xca>
	}
	hgps->gps_hdmamem = NULL;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	605a      	str	r2, [r3, #4]

	/* Clear memory buffers*/
	Clear_Buffer(hgps->GPS_Rx_Buffer,DMA_RX_BUFFER_SIZE);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7ff fc58 	bl	800728c <Clear_Buffer>
	Clear_Buffer(hgps->GPS_Tx_Buffer,DMA_TX_BUFFER_SIZE);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7ff fc51 	bl	800728c <Clear_Buffer>
	Clear_Buffer(hgps->GPS_Mem_Buffer,GNSS_BUFFER_SIZE);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	695b      	ldr	r3, [r3, #20]
 80079ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7ff fc4a 	bl	800728c <Clear_Buffer>


	return GPS_Init_OK;
 80079f8:	2301      	movs	r3, #1
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3708      	adds	r7, #8
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	40004c00 	.word	0x40004c00
 8007a08:	40020008 	.word	0x40020008

08007a0c <USART_Set_Baudrate>:

HAL_StatusTypeDef USART_Set_Baudrate(GPS_Handle_Typedef* hgps,uint32_t baud)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
	//disable UART peripheral and change baud rate
 	 hgps->gps_huart->Instance->CR1 &= ~USART_CR1_UE;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	6812      	ldr	r2, [r2, #0]
 8007a20:	6812      	ldr	r2, [r2, #0]
 8007a22:	6812      	ldr	r2, [r2, #0]
 8007a24:	f022 0201 	bic.w	r2, r2, #1
 8007a28:	601a      	str	r2, [r3, #0]
 	 hgps->gps_huart->Init.BaudRate = baud;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	683a      	ldr	r2, [r7, #0]
 8007a30:	605a      	str	r2, [r3, #4]
	 if(HAL_UART_Init(hgps->gps_huart) != HAL_OK)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7fd fe4d 	bl	80056d6 <HAL_UART_Init>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d001      	beq.n	8007a46 <USART_Set_Baudrate+0x3a>
	 {
		return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e056      	b.n	8007af4 <USART_Set_Baudrate+0xe8>
	 }
	 hgps->gps_huart->Instance->CR1 |= USART_CR1_UE;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	6812      	ldr	r2, [r2, #0]
 8007a50:	6812      	ldr	r2, [r2, #0]
 8007a52:	6812      	ldr	r2, [r2, #0]
 8007a54:	f042 0201 	orr.w	r2, r2, #1
 8007a58:	601a      	str	r2, [r3, #0]
	 //clear all errors
	 //clear framing error
	 if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_FE) == SET)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	69db      	ldr	r3, [r3, #28]
 8007a62:	f003 0302 	and.w	r3, r3, #2
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d104      	bne.n	8007a74 <USART_Set_Baudrate+0x68>
	 {
	 	__HAL_UART_CLEAR_FEFLAG(hgps->gps_huart);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2202      	movs	r2, #2
 8007a72:	621a      	str	r2, [r3, #32]
	 }
	 //clear noise error
	 if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_NE) == SET)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	69db      	ldr	r3, [r3, #28]
 8007a7c:	f003 0304 	and.w	r3, r3, #4
 8007a80:	2b04      	cmp	r3, #4
 8007a82:	d104      	bne.n	8007a8e <USART_Set_Baudrate+0x82>
	 {
	 	__HAL_UART_CLEAR_NEFLAG(hgps->gps_huart);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2204      	movs	r2, #4
 8007a8c:	621a      	str	r2, [r3, #32]
	 }
	 //clear overun error
	 if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_ORE) == SET)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	69db      	ldr	r3, [r3, #28]
 8007a96:	f003 0308 	and.w	r3, r3, #8
 8007a9a:	2b08      	cmp	r3, #8
 8007a9c:	d10a      	bne.n	8007ab4 <USART_Set_Baudrate+0xa8>
	 {
	 	uint8_t temp = hgps->gps_huart->Instance->RDR;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	73fb      	strb	r3, [r7, #15]
	 	(void)temp;
	 	__HAL_UART_CLEAR_OREFLAG(hgps->gps_huart);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2208      	movs	r2, #8
 8007ab2:	621a      	str	r2, [r3, #32]
	 }
	 //clear parity errors
	 if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_PE) == SET)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	69db      	ldr	r3, [r3, #28]
 8007abc:	f003 0301 	and.w	r3, r3, #1
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d104      	bne.n	8007ace <USART_Set_Baudrate+0xc2>
	 {
	 	__HAL_UART_CLEAR_PEFLAG(hgps->gps_huart);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2201      	movs	r2, #1
 8007acc:	621a      	str	r2, [r3, #32]
	 }
	 //clear hanging idle flag
	 if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_IDLE) == SET)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	69db      	ldr	r3, [r3, #28]
 8007ad6:	f003 0310 	and.w	r3, r3, #16
 8007ada:	2b10      	cmp	r3, #16
 8007adc:	d104      	bne.n	8007ae8 <USART_Set_Baudrate+0xdc>
	 {
	  	__HAL_UART_CLEAR_IDLEFLAG(hgps->gps_huart);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2210      	movs	r2, #16
 8007ae6:	621a      	str	r2, [r3, #32]
     }
	 //increase Timeout value to allow for longer waits
	 __HAL_TIM_SET_COMPARE(hgps->gps_htim,TIM_CHANNEL_1,1152000);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a03      	ldr	r2, [pc, #12]	; (8007afc <USART_Set_Baudrate+0xf0>)
 8007af0:	635a      	str	r2, [r3, #52]	; 0x34
	 return HAL_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3710      	adds	r7, #16
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	00119400 	.word	0x00119400

08007b00 <UBX_Send_Ack>:

//======================= 6. UBX Function Definitions =================================

UBX_MSG_t UBX_Send_Ack(GPS_Handle_Typedef *hgps)
{
 8007b00:	b5b0      	push	{r4, r5, r7, lr}
 8007b02:	b092      	sub	sp, #72	; 0x48
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]

	 uint8_t ubx_ack_string[] = {0xB5 ,0x62 ,0x06 ,0x09 ,0x0D ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0xFF ,0xFF ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x17 ,0x31 ,0xBF };
 8007b08:	4b90      	ldr	r3, [pc, #576]	; (8007d4c <UBX_Send_Ack+0x24c>)
 8007b0a:	f107 0418 	add.w	r4, r7, #24
 8007b0e:	461d      	mov	r5, r3
 8007b10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b14:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007b18:	6020      	str	r0, [r4, #0]
 8007b1a:	3404      	adds	r4, #4
 8007b1c:	7021      	strb	r1, [r4, #0]
	 int size = (sizeof(ubx_ack_string)/sizeof(*ubx_ack_string));
 8007b1e:	2315      	movs	r3, #21
 8007b20:	63bb      	str	r3, [r7, #56]	; 0x38
	 for (int i = 0; i < size ; ++i)
 8007b22:	2300      	movs	r3, #0
 8007b24:	647b      	str	r3, [r7, #68]	; 0x44
 8007b26:	e00c      	b.n	8007b42 <UBX_Send_Ack+0x42>
	 {
	  	hgps->GPS_Tx_Buffer[i] = ubx_ack_string[i];
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	691a      	ldr	r2, [r3, #16]
 8007b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b2e:	4413      	add	r3, r2
 8007b30:	f107 0118 	add.w	r1, r7, #24
 8007b34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b36:	440a      	add	r2, r1
 8007b38:	7812      	ldrb	r2, [r2, #0]
 8007b3a:	701a      	strb	r2, [r3, #0]
	 for (int i = 0; i < size ; ++i)
 8007b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b3e:	3301      	adds	r3, #1
 8007b40:	647b      	str	r3, [r7, #68]	; 0x44
 8007b42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b46:	429a      	cmp	r2, r3
 8007b48:	dbee      	blt.n	8007b28 <UBX_Send_Ack+0x28>
	 }
	 TX_Cplt = 0;
 8007b4a:	4b81      	ldr	r3, [pc, #516]	; (8007d50 <UBX_Send_Ack+0x250>)
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	701a      	strb	r2, [r3, #0]
	 if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_TC))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	69db      	ldr	r3, [r3, #28]
 8007b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b5c:	2b40      	cmp	r3, #64	; 0x40
 8007b5e:	d104      	bne.n	8007b6a <UBX_Send_Ack+0x6a>
	 {
		 __HAL_UART_CLEAR_FLAG(hgps->gps_huart,UART_FLAG_TC);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2240      	movs	r2, #64	; 0x40
 8007b68:	621a      	str	r2, [r3, #32]
	 }
	 __HAL_UART_ENABLE_IT(hgps->gps_huart,UART_IT_TC);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	6812      	ldr	r2, [r2, #0]
 8007b74:	6812      	ldr	r2, [r2, #0]
 8007b76:	6812      	ldr	r2, [r2, #0]
 8007b78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b7c:	601a      	str	r2, [r3, #0]
	 if( HAL_UART_Transmit_DMA(hgps->gps_huart,hgps->GPS_Tx_Buffer, size) == HAL_OK)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6818      	ldr	r0, [r3, #0]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b88:	b292      	uxth	r2, r2
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	f7fd ff86 	bl	8005a9c <HAL_UART_Transmit_DMA>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d15a      	bne.n	8007c4c <UBX_Send_Ack+0x14c>
	 {
	  //begin DMA Reception
	 while(TX_Cplt != SET);
 8007b96:	bf00      	nop
 8007b98:	4b6d      	ldr	r3, [pc, #436]	; (8007d50 <UBX_Send_Ack+0x250>)
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d1fb      	bne.n	8007b98 <UBX_Send_Ack+0x98>
	 TX_Cplt = 0; //clear flag
 8007ba0:	4b6b      	ldr	r3, [pc, #428]	; (8007d50 <UBX_Send_Ack+0x250>)
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	701a      	strb	r2, [r3, #0]
	 __HAL_UART_ENABLE_IT(hgps->gps_huart,UART_IT_IDLE);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	6812      	ldr	r2, [r2, #0]
 8007bb0:	6812      	ldr	r2, [r2, #0]
 8007bb2:	6812      	ldr	r2, [r2, #0]
 8007bb4:	f042 0210 	orr.w	r2, r2, #16
 8007bb8:	601a      	str	r2, [r3, #0]
	 __HAL_DMA_ENABLE_IT(hgps->gps_huart->hdmarx, DMA_IT_TC);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	6812      	ldr	r2, [r2, #0]
 8007bc6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007bc8:	6812      	ldr	r2, [r2, #0]
 8007bca:	6812      	ldr	r2, [r2, #0]
 8007bcc:	f042 0202 	orr.w	r2, r2, #2
 8007bd0:	601a      	str	r2, [r3, #0]
	 if(__HAL_TIM_GET_FLAG(hgps->gps_htim,TIM_FLAG_CC1) == SET)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	f003 0302 	and.w	r3, r3, #2
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d105      	bne.n	8007bee <UBX_Send_Ack+0xee>
	 {
		 __HAL_TIM_CLEAR_FLAG(hgps->gps_htim,TIM_FLAG_CC1);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f06f 0202 	mvn.w	r2, #2
 8007bec:	611a      	str	r2, [r3, #16]
	 }
	 M2M_Txfer_Cplt = 0;
 8007bee:	4b59      	ldr	r3, [pc, #356]	; (8007d54 <UBX_Send_Ack+0x254>)
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	701a      	strb	r2, [r3, #0]
	 HAL_UART_Receive_DMA(hgps->gps_huart,hgps->GPS_Rx_Buffer, DMA_RX_BUFFER_SIZE);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6818      	ldr	r0, [r3, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c00:	4619      	mov	r1, r3
 8007c02:	f7fd ffc7 	bl	8005b94 <HAL_UART_Receive_DMA>

	 __HAL_TIM_ENABLE_IT(hgps->gps_htim,TIM_IT_CC1);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	6892      	ldr	r2, [r2, #8]
 8007c10:	6812      	ldr	r2, [r2, #0]
 8007c12:	68d2      	ldr	r2, [r2, #12]
 8007c14:	f042 0202 	orr.w	r2, r2, #2
 8007c18:	60da      	str	r2, [r3, #12]
	 HAL_TIM_OC_Start_IT(hgps->gps_htim, TIM_CHANNEL_1);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	2100      	movs	r1, #0
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7fc fa09 	bl	8004038 <HAL_TIM_OC_Start_IT>
	 HAL_TIM_Base_Start_IT(hgps->gps_htim);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7fc f97c 	bl	8003f28 <HAL_TIM_Base_Start_IT>
	 }
	  while(M2M_Txfer_Cplt != SET)
 8007c30:	e00c      	b.n	8007c4c <UBX_Send_Ack+0x14c>
	  {
		  //TODO: SET DEVICE TO LOW POWER MODE WHILE DMA TRASNFER OCCURS
		  //Check for either receiver time out or peripheral timeout event
		  if(M2M_Txfer_Cplt == HAL_TIMEOUT)
 8007c32:	4b48      	ldr	r3, [pc, #288]	; (8007d54 <UBX_Send_Ack+0x254>)
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	2b03      	cmp	r3, #3
 8007c38:	d108      	bne.n	8007c4c <UBX_Send_Ack+0x14c>
		  {
			  TIM_IDLE_Timeout = RESET;
 8007c3a:	4b47      	ldr	r3, [pc, #284]	; (8007d58 <UBX_Send_Ack+0x258>)
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	701a      	strb	r2, [r3, #0]
			  M2M_Txfer_Cplt = RESET;
 8007c40:	4b44      	ldr	r3, [pc, #272]	; (8007d54 <UBX_Send_Ack+0x254>)
 8007c42:	2200      	movs	r2, #0
 8007c44:	701a      	strb	r2, [r3, #0]
			  return UBX_TIMEOUT_Rx;
 8007c46:	f06f 0302 	mvn.w	r3, #2
 8007c4a:	e07a      	b.n	8007d42 <UBX_Send_Ack+0x242>
	  while(M2M_Txfer_Cplt != SET)
 8007c4c:	4b41      	ldr	r3, [pc, #260]	; (8007d54 <UBX_Send_Ack+0x254>)
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d1ee      	bne.n	8007c32 <UBX_Send_Ack+0x132>
		  }
	  }
	  M2M_Txfer_Cplt = RESET;
 8007c54:	4b3f      	ldr	r3, [pc, #252]	; (8007d54 <UBX_Send_Ack+0x254>)
 8007c56:	2200      	movs	r2, #0
 8007c58:	701a      	strb	r2, [r3, #0]
	  char val = (char) 0xB5;
 8007c5a:	23b5      	movs	r3, #181	; 0xb5
 8007c5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  int index = (int)(strchr((char*)GNSS_Buffer,val))-(int)GNSS_Buffer;
 8007c60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c64:	4619      	mov	r1, r3
 8007c66:	483d      	ldr	r0, [pc, #244]	; (8007d5c <UBX_Send_Ack+0x25c>)
 8007c68:	f002 fdb0 	bl	800a7cc <strchr>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	461a      	mov	r2, r3
 8007c70:	4b3a      	ldr	r3, [pc, #232]	; (8007d5c <UBX_Send_Ack+0x25c>)
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	633b      	str	r3, [r7, #48]	; 0x30
	  UBX_MSG_t GPS_Acknowledgement_State;
	  if((index < 0) || (index >GNSS_BUFFER_SIZE))
 8007c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	db60      	blt.n	8007d3e <UBX_Send_Ack+0x23e>
 8007c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c82:	dc5c      	bgt.n	8007d3e <UBX_Send_Ack+0x23e>
	  {

	  }else{
	  uint8_t msg[10] = {0};
 8007c84:	f107 030c 	add.w	r3, r7, #12
 8007c88:	2200      	movs	r2, #0
 8007c8a:	601a      	str	r2, [r3, #0]
 8007c8c:	605a      	str	r2, [r3, #4]
 8007c8e:	811a      	strh	r2, [r3, #8]
	  memcpy(msg,&hgps->GPS_Mem_Buffer[index],10);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	695a      	ldr	r2, [r3, #20]
 8007c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c96:	441a      	add	r2, r3
 8007c98:	f107 030c 	add.w	r3, r7, #12
 8007c9c:	6810      	ldr	r0, [r2, #0]
 8007c9e:	6851      	ldr	r1, [r2, #4]
 8007ca0:	c303      	stmia	r3!, {r0, r1}
 8007ca2:	8912      	ldrh	r2, [r2, #8]
 8007ca4:	801a      	strh	r2, [r3, #0]

	  uint16_t header = ((uint16_t)msg[0]<<8) | ((uint16_t)msg[1]);
 8007ca6:	7b3b      	ldrb	r3, [r7, #12]
 8007ca8:	021b      	lsls	r3, r3, #8
 8007caa:	b21a      	sxth	r2, r3
 8007cac:	7b7b      	ldrb	r3, [r7, #13]
 8007cae:	b21b      	sxth	r3, r3
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	b21b      	sxth	r3, r3
 8007cb4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	  if(header == 0xb562)
 8007cb6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007cb8:	f24b 5262 	movw	r2, #46434	; 0xb562
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d13e      	bne.n	8007d3e <UBX_Send_Ack+0x23e>
	  {
	 	 uint8_t ck_A =0, ck_B =0;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	 	 for (int i = 2; i < 8; ++i)
 8007ccc:	2302      	movs	r3, #2
 8007cce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cd0:	e013      	b.n	8007cfa <UBX_Send_Ack+0x1fa>
	 	 {
	 	 	ck_A += (uint8_t)msg[i];
 8007cd2:	f107 020c 	add.w	r2, r7, #12
 8007cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cd8:	4413      	add	r3, r2
 8007cda:	781a      	ldrb	r2, [r3, #0]
 8007cdc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8007ce0:	4413      	add	r3, r2
 8007ce2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	 	 	ck_B += ck_A;
 8007ce6:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8007cea:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8007cee:	4413      	add	r3, r2
 8007cf0:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	 	 for (int i = 2; i < 8; ++i)
 8007cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cfc:	2b07      	cmp	r3, #7
 8007cfe:	dde8      	ble.n	8007cd2 <UBX_Send_Ack+0x1d2>
	 	 }
	 	 if((ck_A == msg[8])&& (ck_B == msg[9]))
 8007d00:	7d3b      	ldrb	r3, [r7, #20]
 8007d02:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d116      	bne.n	8007d38 <UBX_Send_Ack+0x238>
 8007d0a:	7d7b      	ldrb	r3, [r7, #21]
 8007d0c:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d111      	bne.n	8007d38 <UBX_Send_Ack+0x238>
	 	 {
	 	 	//acknowledgement
	 	 	if(msg[2] == 0x05)
 8007d14:	7bbb      	ldrb	r3, [r7, #14]
 8007d16:	2b05      	cmp	r3, #5
 8007d18:	d111      	bne.n	8007d3e <UBX_Send_Ack+0x23e>
	 	 	{
	 		 	switch (msg[3])
 8007d1a:	7bfb      	ldrb	r3, [r7, #15]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d002      	beq.n	8007d26 <UBX_Send_Ack+0x226>
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d004      	beq.n	8007d2e <UBX_Send_Ack+0x22e>
	 	 	if(msg[2] == 0x05)
 8007d24:	e00b      	b.n	8007d3e <UBX_Send_Ack+0x23e>
	 		 	{
	 		 		case 0:
	 		 			GPS_Acknowledgement_State = UBX_ACK_NACK;
 8007d26:	2300      	movs	r3, #0
 8007d28:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	 		 			break;
 8007d2c:	e003      	b.n	8007d36 <UBX_Send_Ack+0x236>
	 		 		case 1:
	 		 			GPS_Acknowledgement_State = UBX_ACK_ACK;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	 		 			break;
 8007d34:	bf00      	nop
	 	 	if(msg[2] == 0x05)
 8007d36:	e002      	b.n	8007d3e <UBX_Send_Ack+0x23e>
	 		 		}
	 		 	}
	 		 }
	 		 else
	 		 {
	 		 	GPS_Acknowledgement_State = UBX_ERROR;
 8007d38:	23ff      	movs	r3, #255	; 0xff
 8007d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	 		 }
	 	 }
	  }
	  return GPS_Acknowledgement_State;
 8007d3e:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3748      	adds	r7, #72	; 0x48
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bdb0      	pop	{r4, r5, r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	080109ac 	.word	0x080109ac
 8007d50:	200018dc 	.word	0x200018dc
 8007d54:	20000818 	.word	0x20000818
 8007d58:	200007bc 	.word	0x200007bc
 8007d5c:	200010dc 	.word	0x200010dc

08007d60 <UBX_Configure_Baudrate>:

UBX_MSG_t UBX_Configure_Baudrate(GPS_Handle_Typedef* hgps)
{
 8007d60:	b5b0      	push	{r4, r5, r7, lr}
 8007d62:	b08a      	sub	sp, #40	; 0x28
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]

	//GPS is configured for 9600, change baud to 115200
	uint8_t ubx_baude_rate_config[] = {0xB5,0x62,0x06,0x00,0x14,0x00,0x01,0x00,0x00,0x00,0xD0,0x08,0x00,0x00,0x00,0xC2,0x01,0x00,0x07,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0xC0,0x7E};
 8007d68:	4b20      	ldr	r3, [pc, #128]	; (8007dec <UBX_Configure_Baudrate+0x8c>)
 8007d6a:	f107 0408 	add.w	r4, r7, #8
 8007d6e:	461d      	mov	r5, r3
 8007d70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007d78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint32_t size =  sizeof(ubx_baude_rate_config)/sizeof(ubx_baude_rate_config[0]);
 8007d7c:	231c      	movs	r3, #28
 8007d7e:	627b      	str	r3, [r7, #36]	; 0x24
	memcpy(hgps->GPS_Tx_Buffer,ubx_baude_rate_config,size);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	f107 0108 	add.w	r1, r7, #8
 8007d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f002 f93e 	bl	800a00c <memcpy>
	if(HAL_UART_Transmit_DMA(hgps->gps_huart,hgps->GPS_Tx_Buffer,size) == HAL_OK)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6818      	ldr	r0, [r3, #0]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	691b      	ldr	r3, [r3, #16]
 8007d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d9a:	b292      	uxth	r2, r2
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	f7fd fe7d 	bl	8005a9c <HAL_UART_Transmit_DMA>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d11b      	bne.n	8007de0 <UBX_Configure_Baudrate+0x80>
	{
		 while(TX_Cplt != SET);
 8007da8:	bf00      	nop
 8007daa:	4b11      	ldr	r3, [pc, #68]	; (8007df0 <UBX_Configure_Baudrate+0x90>)
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d1fb      	bne.n	8007daa <UBX_Configure_Baudrate+0x4a>
		 Clear_Buffer(hgps->GPS_Tx_Buffer,DMA_TX_BUFFER_SIZE);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7ff fa66 	bl	800728c <Clear_Buffer>
		 if(USART_Set_Baudrate(hgps,115200) != HAL_OK)
 8007dc0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f7ff fe21 	bl	8007a0c <USART_Set_Baudrate>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d002      	beq.n	8007dd6 <UBX_Configure_Baudrate+0x76>
		 {
			 return UBX_ERROR;
 8007dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8007dd4:	e006      	b.n	8007de4 <UBX_Configure_Baudrate+0x84>
		 }
		 return UBX_Send_Ack(hgps);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f7ff fe92 	bl	8007b00 <UBX_Send_Ack>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	e001      	b.n	8007de4 <UBX_Configure_Baudrate+0x84>
	}
	return UBX_TIMEOUT_Tx;
 8007de0:	f06f 0301 	mvn.w	r3, #1
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3728      	adds	r7, #40	; 0x28
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bdb0      	pop	{r4, r5, r7, pc}
 8007dec:	080109c4 	.word	0x080109c4
 8007df0:	200018dc 	.word	0x200018dc

08007df4 <UBX_Configure_Messages>:

UBX_MSG_t UBX_Configure_Messages(GPS_Handle_Typedef *hgps)
{
 8007df4:	b5b0      	push	{r4, r5, r7, lr}
 8007df6:	b0a8      	sub	sp, #160	; 0xa0
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
	//clear all active/useless messages
	uint8_t NMEA_Clear_buffer[] = {0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x0A, 0x00, 0x04, 0x23, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x09, 0x00, 0x03, 0x21, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x00, 0x00, 0xFA, 0x0F, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x0D, 0x00, 0x07, 0x29, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x06, 0x00, 0x00, 0x1B, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x07, 0x00, 0x01, 0x1D, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x03, 0x00, 0xFD, 0x15, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x04, 0x00, 0xFE, 0x17, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x0F, 0x00, 0x09, 0x2D, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x05, 0x00, 0xFF, 0x19} ;
 8007dfc:	4a3d      	ldr	r2, [pc, #244]	; (8007ef4 <UBX_Configure_Messages+0x100>)
 8007dfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007e02:	4611      	mov	r1, r2
 8007e04:	226e      	movs	r2, #110	; 0x6e
 8007e06:	4618      	mov	r0, r3
 8007e08:	f002 f900 	bl	800a00c <memcpy>
	uint32_t size = sizeof(NMEA_Clear_buffer)/sizeof(NMEA_Clear_buffer[0]);
 8007e0c:	236e      	movs	r3, #110	; 0x6e
 8007e0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	 if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_TC))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	69db      	ldr	r3, [r3, #28]
 8007e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e1e:	2b40      	cmp	r3, #64	; 0x40
 8007e20:	d104      	bne.n	8007e2c <UBX_Configure_Messages+0x38>
	 {
		__HAL_UART_CLEAR_FLAG(hgps->gps_huart,UART_FLAG_TC);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2240      	movs	r2, #64	; 0x40
 8007e2a:	621a      	str	r2, [r3, #32]
	 }
	__HAL_UART_ENABLE_IT(hgps->gps_huart,UART_IT_TC);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	6812      	ldr	r2, [r2, #0]
 8007e36:	6812      	ldr	r2, [r2, #0]
 8007e38:	6812      	ldr	r2, [r2, #0]
 8007e3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e3e:	601a      	str	r2, [r3, #0]
	if(HAL_UART_Transmit_DMA(hgps->gps_huart,NMEA_Clear_buffer,size) != HAL_OK)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8007e48:	b292      	uxth	r2, r2
 8007e4a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f7fd fe24 	bl	8005a9c <HAL_UART_Transmit_DMA>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d002      	beq.n	8007e60 <UBX_Configure_Messages+0x6c>
	{
		return UBX_ERROR;
 8007e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e5e:	e044      	b.n	8007eea <UBX_Configure_Messages+0xf6>
	}
	while(TX_Cplt != SET);
 8007e60:	bf00      	nop
 8007e62:	4b25      	ldr	r3, [pc, #148]	; (8007ef8 <UBX_Configure_Messages+0x104>)
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d1fb      	bne.n	8007e62 <UBX_Configure_Messages+0x6e>
	TX_Cplt = 0;
 8007e6a:	4b23      	ldr	r3, [pc, #140]	; (8007ef8 <UBX_Configure_Messages+0x104>)
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	701a      	strb	r2, [r3, #0]
	(void)NMEA_Clear_buffer;
	//enable messages GLL ZDA GSA
	uint8_t NMEA_msgs[] = {0xB5,0x62,0x06,0x01,0x03,0x00,0xF0,0x01,0x01,0xFC,0x12,0xB5,0x62,0x06,0x01,0x03,0x00,0xF0,0x02,0x01,0xFD,0x14,0xB5,0x62,0x06,0x01,0x03,0x00,0xF0,0x08,0x01,0x03,0x20};
 8007e70:	4b22      	ldr	r3, [pc, #136]	; (8007efc <UBX_Configure_Messages+0x108>)
 8007e72:	f107 0408 	add.w	r4, r7, #8
 8007e76:	461d      	mov	r5, r3
 8007e78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e80:	682b      	ldr	r3, [r5, #0]
 8007e82:	7023      	strb	r3, [r4, #0]
	size = sizeof(NMEA_msgs)/sizeof(NMEA_msgs[0]);
 8007e84:	2321      	movs	r3, #33	; 0x21
 8007e86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	 if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_TC))
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	69db      	ldr	r3, [r3, #28]
 8007e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e96:	2b40      	cmp	r3, #64	; 0x40
 8007e98:	d104      	bne.n	8007ea4 <UBX_Configure_Messages+0xb0>
	 {
		 __HAL_UART_CLEAR_FLAG(hgps->gps_huart,UART_FLAG_TC);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2240      	movs	r2, #64	; 0x40
 8007ea2:	621a      	str	r2, [r3, #32]
	 }
	 __HAL_UART_ENABLE_IT(hgps->gps_huart,UART_IT_TC);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	6812      	ldr	r2, [r2, #0]
 8007eae:	6812      	ldr	r2, [r2, #0]
 8007eb0:	6812      	ldr	r2, [r2, #0]
 8007eb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007eb6:	601a      	str	r2, [r3, #0]
	if(HAL_UART_Transmit_DMA(hgps->gps_huart,NMEA_msgs,size) == HAL_OK)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8007ec0:	b292      	uxth	r2, r2
 8007ec2:	f107 0108 	add.w	r1, r7, #8
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7fd fde8 	bl	8005a9c <HAL_UART_Transmit_DMA>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d109      	bne.n	8007ee6 <UBX_Configure_Messages+0xf2>
	{
		while(TX_Cplt != SET);
 8007ed2:	bf00      	nop
 8007ed4:	4b08      	ldr	r3, [pc, #32]	; (8007ef8 <UBX_Configure_Messages+0x104>)
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d1fb      	bne.n	8007ed4 <UBX_Configure_Messages+0xe0>
		TX_Cplt = 0;
 8007edc:	4b06      	ldr	r3, [pc, #24]	; (8007ef8 <UBX_Configure_Messages+0x104>)
 8007ede:	2200      	movs	r2, #0
 8007ee0:	701a      	strb	r2, [r3, #0]
		return UBX_OK;
 8007ee2:	2302      	movs	r3, #2
 8007ee4:	e001      	b.n	8007eea <UBX_Configure_Messages+0xf6>
	}

	return UBX_ERROR;
 8007ee6:	f04f 33ff 	mov.w	r3, #4294967295

}
 8007eea:	4618      	mov	r0, r3
 8007eec:	37a0      	adds	r7, #160	; 0xa0
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bdb0      	pop	{r4, r5, r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	080109e0 	.word	0x080109e0
 8007ef8:	200018dc 	.word	0x200018dc
 8007efc:	08010a50 	.word	0x08010a50

08007f00 <USART_TIM_RTO_Handler>:

//================ 7. IRQ Handlers Functions Prototypes ===============================

void USART_TIM_RTO_Handler(TIM_HandleTypeDef *htim)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
	if(__HAL_TIM_GET_IT_SOURCE(htim,TIM_IT_CC1))
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	f003 0302 	and.w	r3, r3, #2
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d10f      	bne.n	8007f36 <USART_TIM_RTO_Handler+0x36>
	{

		//clear interrupt
		__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f06f 0202 	mvn.w	r2, #2
 8007f1e:	611a      	str	r2, [r3, #16]
		__HAL_TIM_CLEAR_IT(htim,TIM_IT_UPDATE);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f06f 0201 	mvn.w	r2, #1
 8007f28:	611a      	str	r2, [r3, #16]
		//set reciever timeout flag
		TIM_IDLE_Timeout = 1;
 8007f2a:	4b05      	ldr	r3, [pc, #20]	; (8007f40 <USART_TIM_RTO_Handler+0x40>)
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	701a      	strb	r2, [r3, #0]
		//disable timer
		HAL_TIM_Base_Stop_IT(htim);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f7fc f823 	bl	8003f7c <HAL_TIM_Base_Stop_IT>

	}
}
 8007f36:	bf00      	nop
 8007f38:	3708      	adds	r7, #8
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	200007bc 	.word	0x200007bc

08007f44 <DMA_GNSS_MEM_IRQHandler>:

void DMA_GNSS_MEM_IRQHandler(GPS_Handle_Typedef *hgps)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]

		M2M_Txfer_Cplt = SET;
 8007f4c:	4b64      	ldr	r3, [pc, #400]	; (80080e0 <DMA_GNSS_MEM_IRQHandler+0x19c>)
 8007f4e:	2201      	movs	r2, #1
 8007f50:	701a      	strb	r2, [r3, #0]
		if(log_gps)
 8007f52:	4b64      	ldr	r3, [pc, #400]	; (80080e4 <DMA_GNSS_MEM_IRQHandler+0x1a0>)
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	f000 80be 	beq.w	80080d8 <DMA_GNSS_MEM_IRQHandler+0x194>
		{
			Clear_Buffer(hgps->GPS_Rx_Buffer,DMA_RX_BUFFER_SIZE);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007f64:	4618      	mov	r0, r3
 8007f66:	f7ff f991 	bl	800728c <Clear_Buffer>
			//reset pointer
			char* msg = strtok((char*)GNSS_Buffer, "$");
 8007f6a:	495f      	ldr	r1, [pc, #380]	; (80080e8 <DMA_GNSS_MEM_IRQHandler+0x1a4>)
 8007f6c:	485f      	ldr	r0, [pc, #380]	; (80080ec <DMA_GNSS_MEM_IRQHandler+0x1a8>)
 8007f6e:	f003 fa65 	bl	800b43c <strtok>
 8007f72:	60f8      	str	r0, [r7, #12]
				while(msg != NULL)
 8007f74:	e042      	b.n	8007ffc <DMA_GNSS_MEM_IRQHandler+0xb8>
				{
					switch(is_valid(msg))
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	f7ff f996 	bl	80072a8 <is_valid>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d012      	beq.n	8007fa8 <DMA_GNSS_MEM_IRQHandler+0x64>
 8007f82:	2b03      	cmp	r3, #3
 8007f84:	d01e      	beq.n	8007fc4 <DMA_GNSS_MEM_IRQHandler+0x80>
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d000      	beq.n	8007f8c <DMA_GNSS_MEM_IRQHandler+0x48>
				    		packet_full |= 0b100;
				    	}
				    	break;
					  default:
						// invalid case
						break;
 8007f8a:	e02e      	b.n	8007fea <DMA_GNSS_MEM_IRQHandler+0xa6>
						if(Parse_GLL(msg) == 2)
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	f7ff faff 	bl	8007590 <Parse_GLL>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d123      	bne.n	8007fe0 <DMA_GNSS_MEM_IRQHandler+0x9c>
							packet_full |= 0b1;
 8007f98:	4b55      	ldr	r3, [pc, #340]	; (80080f0 <DMA_GNSS_MEM_IRQHandler+0x1ac>)
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	f043 0301 	orr.w	r3, r3, #1
 8007fa0:	b2da      	uxtb	r2, r3
 8007fa2:	4b53      	ldr	r3, [pc, #332]	; (80080f0 <DMA_GNSS_MEM_IRQHandler+0x1ac>)
 8007fa4:	701a      	strb	r2, [r3, #0]
						break;
 8007fa6:	e01b      	b.n	8007fe0 <DMA_GNSS_MEM_IRQHandler+0x9c>
						if(parse_GSA(msg) == 0)
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f7ff fb89 	bl	80076c0 <parse_GSA>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d117      	bne.n	8007fe4 <DMA_GNSS_MEM_IRQHandler+0xa0>
							packet_full |= 0b10;
 8007fb4:	4b4e      	ldr	r3, [pc, #312]	; (80080f0 <DMA_GNSS_MEM_IRQHandler+0x1ac>)
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	f043 0302 	orr.w	r3, r3, #2
 8007fbc:	b2da      	uxtb	r2, r3
 8007fbe:	4b4c      	ldr	r3, [pc, #304]	; (80080f0 <DMA_GNSS_MEM_IRQHandler+0x1ac>)
 8007fc0:	701a      	strb	r2, [r3, #0]
						break;
 8007fc2:	e00f      	b.n	8007fe4 <DMA_GNSS_MEM_IRQHandler+0xa0>
				    	if(parse_ZDA(msg) == 0)
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f7ff fa1b 	bl	8007400 <parse_ZDA>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d10b      	bne.n	8007fe8 <DMA_GNSS_MEM_IRQHandler+0xa4>
				    		packet_full |= 0b100;
 8007fd0:	4b47      	ldr	r3, [pc, #284]	; (80080f0 <DMA_GNSS_MEM_IRQHandler+0x1ac>)
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	f043 0304 	orr.w	r3, r3, #4
 8007fd8:	b2da      	uxtb	r2, r3
 8007fda:	4b45      	ldr	r3, [pc, #276]	; (80080f0 <DMA_GNSS_MEM_IRQHandler+0x1ac>)
 8007fdc:	701a      	strb	r2, [r3, #0]
				    	break;
 8007fde:	e003      	b.n	8007fe8 <DMA_GNSS_MEM_IRQHandler+0xa4>
						break;
 8007fe0:	bf00      	nop
 8007fe2:	e002      	b.n	8007fea <DMA_GNSS_MEM_IRQHandler+0xa6>
						break;
 8007fe4:	bf00      	nop
 8007fe6:	e000      	b.n	8007fea <DMA_GNSS_MEM_IRQHandler+0xa6>
				    	break;
 8007fe8:	bf00      	nop
					}
					if(packet_full == 7)
 8007fea:	4b41      	ldr	r3, [pc, #260]	; (80080f0 <DMA_GNSS_MEM_IRQHandler+0x1ac>)
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	2b07      	cmp	r3, #7
 8007ff0:	d008      	beq.n	8008004 <DMA_GNSS_MEM_IRQHandler+0xc0>
					{
						break;
					}
					msg = strtok(NULL,"$");
 8007ff2:	493d      	ldr	r1, [pc, #244]	; (80080e8 <DMA_GNSS_MEM_IRQHandler+0x1a4>)
 8007ff4:	2000      	movs	r0, #0
 8007ff6:	f003 fa21 	bl	800b43c <strtok>
 8007ffa:	60f8      	str	r0, [r7, #12]
				while(msg != NULL)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1b9      	bne.n	8007f76 <DMA_GNSS_MEM_IRQHandler+0x32>
 8008002:	e000      	b.n	8008006 <DMA_GNSS_MEM_IRQHandler+0xc2>
						break;
 8008004:	bf00      	nop
				}
			if(__HAL_TIM_GET_IT_SOURCE(hgps->gps_htim,TIM_IT_CC1))
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	f003 0302 	and.w	r3, r3, #2
 8008012:	2b02      	cmp	r3, #2
 8008014:	d10a      	bne.n	800802c <DMA_GNSS_MEM_IRQHandler+0xe8>
			{
				__HAL_TIM_CLEAR_FLAG(hgps->gps_htim,TIM_FLAG_CC1);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f06f 0202 	mvn.w	r2, #2
 8008020:	611a      	str	r2, [r3, #16]
				hgps->gps_htim->Instance->CNT = 0;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2200      	movs	r2, #0
 800802a:	625a      	str	r2, [r3, #36]	; 0x24
			}
			hgps->gps_huart->hdmarx->DmaBaseAddress->IFCR = 0x3FU << hgps->gps_huart->hdmarx->ChannelIndex; // clear all interrupts
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	6812      	ldr	r2, [r2, #0]
 8008038:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800803a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800803c:	213f      	movs	r1, #63	; 0x3f
 800803e:	fa01 f202 	lsl.w	r2, r1, r2
 8008042:	605a      	str	r2, [r3, #4]
			hgps->gps_huart->hdmarx->Instance->CMAR = (uint32_t)hgps->GPS_Rx_Buffer; //reset the pointer
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	68d2      	ldr	r2, [r2, #12]
 8008050:	60da      	str	r2, [r3, #12]
			hgps->gps_huart->hdmarx->Instance->CNDTR = DMA_RX_BUFFER_SIZE; //set the number of bytes to expect
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800805e:	605a      	str	r2, [r3, #4]
			__HAL_UART_CLEAR_IDLEFLAG(hgps->gps_huart);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2210      	movs	r2, #16
 8008068:	621a      	str	r2, [r3, #32]
			__HAL_UART_ENABLE_IT(hgps->gps_huart, UART_IT_IDLE);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	6812      	ldr	r2, [r2, #0]
 8008074:	6812      	ldr	r2, [r2, #0]
 8008076:	6812      	ldr	r2, [r2, #0]
 8008078:	f042 0210 	orr.w	r2, r2, #16
 800807c:	601a      	str	r2, [r3, #0]
			if(packet_full != 7)
 800807e:	4b1c      	ldr	r3, [pc, #112]	; (80080f0 <DMA_GNSS_MEM_IRQHandler+0x1ac>)
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	2b07      	cmp	r3, #7
 8008084:	d028      	beq.n	80080d8 <DMA_GNSS_MEM_IRQHandler+0x194>
			{

				__HAL_TIM_ENABLE_IT(hgps->gps_htim,TIM_IT_CC1);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	6892      	ldr	r2, [r2, #8]
 8008090:	6812      	ldr	r2, [r2, #0]
 8008092:	68d2      	ldr	r2, [r2, #12]
 8008094:	f042 0202 	orr.w	r2, r2, #2
 8008098:	60da      	str	r2, [r3, #12]
				HAL_TIM_OC_Start_IT(hgps->gps_htim, TIM_CHANNEL_1);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	2100      	movs	r1, #0
 80080a0:	4618      	mov	r0, r3
 80080a2:	f7fb ffc9 	bl	8004038 <HAL_TIM_OC_Start_IT>
				HAL_TIM_Base_Start_IT(hgps->gps_htim);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7fb ff3c 	bl	8003f28 <HAL_TIM_Base_Start_IT>
				__HAL_DMA_ENABLE(hgps->gps_huart->hdmarx);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	6812      	ldr	r2, [r2, #0]
 80080bc:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80080be:	6812      	ldr	r2, [r2, #0]
 80080c0:	6812      	ldr	r2, [r2, #0]
 80080c2:	f042 0201 	orr.w	r2, r2, #1
 80080c6:	601a      	str	r2, [r3, #0]
				HAL_UART_DMAResume(hgps->gps_huart);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7fd fe38 	bl	8005d42 <HAL_UART_DMAResume>
				log_gps = SET;
 80080d2:	4b04      	ldr	r3, [pc, #16]	; (80080e4 <DMA_GNSS_MEM_IRQHandler+0x1a0>)
 80080d4:	2201      	movs	r2, #1
 80080d6:	701a      	strb	r2, [r3, #0]
			}
		}

}
 80080d8:	bf00      	nop
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	20000818 	.word	0x20000818
 80080e4:	20002128 	.word	0x20002128
 80080e8:	08010a74 	.word	0x08010a74
 80080ec:	200010dc 	.word	0x200010dc
 80080f0:	200007c4 	.word	0x200007c4

080080f4 <DMA_GNSS_Periph_IRQHandler>:

void DMA_GNSS_Periph_IRQHandler(GPS_Handle_Typedef *hgps)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
	if(__HAL_DMA_GET_IT_SOURCE(hgps->gps_huart->hdmarx,DMA_IT_TC))
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f003 0302 	and.w	r3, r3, #2
 800810a:	2b00      	cmp	r3, #0
 800810c:	d046      	beq.n	800819c <DMA_GNSS_Periph_IRQHandler+0xa8>
	{
		__HAL_DMA_CLEAR_FLAG(hgps->gps_huart->hdmarx,DMA_FLAG_TC5);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	461a      	mov	r2, r3
 8008118:	4b42      	ldr	r3, [pc, #264]	; (8008224 <DMA_GNSS_Periph_IRQHandler+0x130>)
 800811a:	429a      	cmp	r2, r3
 800811c:	d904      	bls.n	8008128 <DMA_GNSS_Periph_IRQHandler+0x34>
 800811e:	4b42      	ldr	r3, [pc, #264]	; (8008228 <DMA_GNSS_Periph_IRQHandler+0x134>)
 8008120:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008124:	605a      	str	r2, [r3, #4]
 8008126:	e003      	b.n	8008130 <DMA_GNSS_Periph_IRQHandler+0x3c>
 8008128:	4b40      	ldr	r3, [pc, #256]	; (800822c <DMA_GNSS_Periph_IRQHandler+0x138>)
 800812a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800812e:	605a      	str	r2, [r3, #4]
		//stop timer and reset flag
		HAL_TIM_Base_Stop(hgps->gps_htim);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	4618      	mov	r0, r3
 8008136:	f7fb fecd 	bl	8003ed4 <HAL_TIM_Base_Stop>
		__HAL_TIM_DISABLE_IT(hgps->gps_htim,TIM_IT_CC1);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	6892      	ldr	r2, [r2, #8]
 8008144:	6812      	ldr	r2, [r2, #0]
 8008146:	68d2      	ldr	r2, [r2, #12]
 8008148:	f022 0202 	bic.w	r2, r2, #2
 800814c:	60da      	str	r2, [r3, #12]
		if(__HAL_TIM_GET_FLAG(hgps->gps_htim,TIM_FLAG_CC1))
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	f003 0302 	and.w	r3, r3, #2
 800815a:	2b02      	cmp	r3, #2
 800815c:	d105      	bne.n	800816a <DMA_GNSS_Periph_IRQHandler+0x76>
		{
			__HAL_TIM_CLEAR_FLAG(hgps->gps_htim,TIM_FLAG_CC1);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f06f 0202 	mvn.w	r2, #2
 8008168:	611a      	str	r2, [r3, #16]
		}
		TIM_IDLE_Timeout = RESET;
 800816a:	4b31      	ldr	r3, [pc, #196]	; (8008230 <DMA_GNSS_Periph_IRQHandler+0x13c>)
 800816c:	2200      	movs	r2, #0
 800816e:	701a      	strb	r2, [r3, #0]

		//begin a Memory to Memory PEripheral transfer
		__HAL_DMA_ENABLE_IT(hgps->gps_hdmamem,DMA_IT_TC);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	6852      	ldr	r2, [r2, #4]
 800817a:	6812      	ldr	r2, [r2, #0]
 800817c:	6812      	ldr	r2, [r2, #0]
 800817e:	f042 0202 	orr.w	r2, r2, #2
 8008182:	601a      	str	r2, [r3, #0]
		HAL_DMA_Start(hgps->gps_hdmamem,(uint32_t)hgps->GPS_Rx_Buffer,(uint32_t)hgps->GPS_Mem_Buffer,DMA_RX_BUFFER_SIZE);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6858      	ldr	r0, [r3, #4]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	4619      	mov	r1, r3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	695b      	ldr	r3, [r3, #20]
 8008192:	461a      	mov	r2, r3
 8008194:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008198:	f7f9 fa7a 	bl	8001690 <HAL_DMA_Start>
	}
		//in errata sheet Upon a data transfer error in a DMA channel x, both the specific TEIFx and the global GIFx
		//	flags are raised and the channel x is normally automatically disabled. However, if in the
		//	same clock cycle the software clears the GIFx flag (by setting the CGIFx bit of the
		//	DMA_IFCR register), the automatic channel disable fails and the TEIFx flag is not raised.
	if(__HAL_DMA_GET_IT_SOURCE(hgps->gps_hdmamem,DMA_IT_HT))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f003 0304 	and.w	r3, r3, #4
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d017      	beq.n	80081dc <DMA_GNSS_Periph_IRQHandler+0xe8>
	{
		__HAL_DMA_CLEAR_FLAG(hgps->gps_hdmamem,DMA_IT_HT);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	461a      	mov	r2, r3
 80081b4:	4b1b      	ldr	r3, [pc, #108]	; (8008224 <DMA_GNSS_Periph_IRQHandler+0x130>)
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d903      	bls.n	80081c2 <DMA_GNSS_Periph_IRQHandler+0xce>
 80081ba:	4b1b      	ldr	r3, [pc, #108]	; (8008228 <DMA_GNSS_Periph_IRQHandler+0x134>)
 80081bc:	2204      	movs	r2, #4
 80081be:	605a      	str	r2, [r3, #4]
 80081c0:	e002      	b.n	80081c8 <DMA_GNSS_Periph_IRQHandler+0xd4>
 80081c2:	4b1a      	ldr	r3, [pc, #104]	; (800822c <DMA_GNSS_Periph_IRQHandler+0x138>)
 80081c4:	2204      	movs	r2, #4
 80081c6:	605a      	str	r2, [r3, #4]
		__HAL_DMA_DISABLE_IT(hgps->gps_hdmamem,DMA_IT_HT);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	6852      	ldr	r2, [r2, #4]
 80081d2:	6812      	ldr	r2, [r2, #0]
 80081d4:	6812      	ldr	r2, [r2, #0]
 80081d6:	f022 0204 	bic.w	r2, r2, #4
 80081da:	601a      	str	r2, [r3, #0]
	}
	if(__HAL_DMA_GET_IT_SOURCE(hgps->gps_hdmamem,DMA_IT_TE))
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 0308 	and.w	r3, r3, #8
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d017      	beq.n	800821c <DMA_GNSS_Periph_IRQHandler+0x128>
	{
		__HAL_DMA_CLEAR_FLAG(hgps->gps_hdmamem,DMA_IT_TE);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	461a      	mov	r2, r3
 80081f4:	4b0b      	ldr	r3, [pc, #44]	; (8008224 <DMA_GNSS_Periph_IRQHandler+0x130>)
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d903      	bls.n	8008202 <DMA_GNSS_Periph_IRQHandler+0x10e>
 80081fa:	4b0b      	ldr	r3, [pc, #44]	; (8008228 <DMA_GNSS_Periph_IRQHandler+0x134>)
 80081fc:	2208      	movs	r2, #8
 80081fe:	605a      	str	r2, [r3, #4]
 8008200:	e002      	b.n	8008208 <DMA_GNSS_Periph_IRQHandler+0x114>
 8008202:	4b0a      	ldr	r3, [pc, #40]	; (800822c <DMA_GNSS_Periph_IRQHandler+0x138>)
 8008204:	2208      	movs	r2, #8
 8008206:	605a      	str	r2, [r3, #4]
		__HAL_DMA_DISABLE_IT(hgps->gps_hdmamem,DMA_IT_TE);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	6852      	ldr	r2, [r2, #4]
 8008212:	6812      	ldr	r2, [r2, #0]
 8008214:	6812      	ldr	r2, [r2, #0]
 8008216:	f022 0208 	bic.w	r2, r2, #8
 800821a:	601a      	str	r2, [r3, #0]
	}
}
 800821c:	bf00      	nop
 800821e:	3708      	adds	r7, #8
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	40020080 	.word	0x40020080
 8008228:	40020400 	.word	0x40020400
 800822c:	40020000 	.word	0x40020000
 8008230:	200007bc 	.word	0x200007bc

08008234 <USART_GPS_IRQHandler>:

void USART_GPS_IRQHandler(GPS_Handle_Typedef *hgps)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
	if(__HAL_UART_GET_IT_SOURCE(hgps->gps_huart,UART_IT_IDLE))
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 0310 	and.w	r3, r3, #16
 8008248:	2b00      	cmp	r3, #0
 800824a:	d07a      	beq.n	8008342 <USART_GPS_IRQHandler+0x10e>
	{
		uint32_t temp = hgps->gps_huart->Instance->ISR;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	69db      	ldr	r3, [r3, #28]
 8008254:	60fb      	str	r3, [r7, #12]
		temp = hgps->gps_huart->Instance->RDR;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800825e:	b29b      	uxth	r3, r3
 8008260:	60fb      	str	r3, [r7, #12]
		 * 		   disable Periph-Mem stream and
		 * 		   begin Mem - Mem transfer of known data
		 *
		 */
		//check flag in TIM2
		if(TIM_IDLE_Timeout == SET)
 8008262:	4b6a      	ldr	r3, [pc, #424]	; (800840c <USART_GPS_IRQHandler+0x1d8>)
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d166      	bne.n	8008338 <USART_GPS_IRQHandler+0x104>
		{
			gnss_length = DMA_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(hgps->gps_huart->hdmarx);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8008278:	461a      	mov	r2, r3
 800827a:	4b65      	ldr	r3, [pc, #404]	; (8008410 <USART_GPS_IRQHandler+0x1dc>)
 800827c:	601a      	str	r2, [r3, #0]
			//Disable DMA and unlink from UART
			if(log_gps)
 800827e:	4b65      	ldr	r3, [pc, #404]	; (8008414 <USART_GPS_IRQHandler+0x1e0>)
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d012      	beq.n	80082ac <USART_GPS_IRQHandler+0x78>
			{
				HAL_UART_DMAPause(hgps->gps_huart);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4618      	mov	r0, r3
 800828c:	f7fd fd06 	bl	8005c9c <HAL_UART_DMAPause>
				hgps->gps_huart->hdmarx->Instance->CCR &= ~DMA_CCR_EN;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	6812      	ldr	r2, [r2, #0]
 800829c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800829e:	6812      	ldr	r2, [r2, #0]
 80082a0:	6812      	ldr	r2, [r2, #0]
 80082a2:	f022 0201 	bic.w	r2, r2, #1
 80082a6:	601a      	str	r2, [r3, #0]
 80082a8:	bf00      	nop
 80082aa:	e004      	b.n	80082b6 <USART_GPS_IRQHandler+0x82>
				__NOP();

			}else
			{
				HAL_UART_DMAStop(hgps->gps_huart);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7fd fd8b 	bl	8005dcc <HAL_UART_DMAStop>
			}
			//Timeout case: USART has recieved no data, Reciever timeout

			if(gnss_length > 0)
 80082b6:	4b56      	ldr	r3, [pc, #344]	; (8008410 <USART_GPS_IRQHandler+0x1dc>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	dd16      	ble.n	80082ec <USART_GPS_IRQHandler+0xb8>
			{
				//begin transfer from mem to mem
				__HAL_DMA_ENABLE_IT(hgps->gps_hdmamem,DMA_IT_TC);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	6852      	ldr	r2, [r2, #4]
 80082c8:	6812      	ldr	r2, [r2, #0]
 80082ca:	6812      	ldr	r2, [r2, #0]
 80082cc:	f042 0202 	orr.w	r2, r2, #2
 80082d0:	601a      	str	r2, [r3, #0]
				HAL_DMA_Start(hgps->gps_hdmamem,(uint32_t)hgps->GPS_Rx_Buffer,(uint32_t)hgps->GPS_Mem_Buffer,gnss_length);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6858      	ldr	r0, [r3, #4]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	4619      	mov	r1, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	695b      	ldr	r3, [r3, #20]
 80082e0:	461a      	mov	r2, r3
 80082e2:	4b4b      	ldr	r3, [pc, #300]	; (8008410 <USART_GPS_IRQHandler+0x1dc>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f7f9 f9d3 	bl	8001690 <HAL_DMA_Start>
 80082ea:	e018      	b.n	800831e <USART_GPS_IRQHandler+0xea>

			}else
			{
				if(log_gps)
 80082ec:	4b49      	ldr	r3, [pc, #292]	; (8008414 <USART_GPS_IRQHandler+0x1e0>)
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d011      	beq.n	8008318 <USART_GPS_IRQHandler+0xe4>
				{
					HAL_UART_DMAResume(hgps->gps_huart);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7fd fd22 	bl	8005d42 <HAL_UART_DMAResume>
					hgps->gps_huart->hdmarx->Instance->CCR |= DMA_CCR_EN;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	6812      	ldr	r2, [r2, #0]
 800830a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800830c:	6812      	ldr	r2, [r2, #0]
 800830e:	6812      	ldr	r2, [r2, #0]
 8008310:	f042 0201 	orr.w	r2, r2, #1
 8008314:	601a      	str	r2, [r3, #0]
 8008316:	bf00      	nop
			/*
			 * Case 2: gnss_length == 0;
			 *
			 * Reciever has recieved no data and has thus timed out.
			 */
				M2M_Txfer_Cplt = HAL_TIMEOUT;
 8008318:	4b3f      	ldr	r3, [pc, #252]	; (8008418 <USART_GPS_IRQHandler+0x1e4>)
 800831a:	2203      	movs	r2, #3
 800831c:	701a      	strb	r2, [r3, #0]
			}
			//clear tim flag
			TIM_IDLE_Timeout = 0;
 800831e:	4b3b      	ldr	r3, [pc, #236]	; (800840c <USART_GPS_IRQHandler+0x1d8>)
 8008320:	2200      	movs	r2, #0
 8008322:	701a      	strb	r2, [r3, #0]
			__HAL_UART_DISABLE_IT(hgps->gps_huart,UART_IT_IDLE);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	6812      	ldr	r2, [r2, #0]
 800832e:	6812      	ldr	r2, [r2, #0]
 8008330:	6812      	ldr	r2, [r2, #0]
 8008332:	f022 0210 	bic.w	r2, r2, #16
 8008336:	601a      	str	r2, [r3, #0]
		}

		__HAL_UART_CLEAR_FLAG(hgps->gps_huart,UART_FLAG_IDLE);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2210      	movs	r2, #16
 8008340:	621a      	str	r2, [r3, #32]
	} if(__HAL_UART_GET_IT_SOURCE(hgps->gps_huart,UART_IT_TC))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800834e:	2b00      	cmp	r3, #0
 8008350:	d016      	beq.n	8008380 <USART_GPS_IRQHandler+0x14c>
	{

		HAL_UART_AbortTransmit_IT(hgps->gps_huart);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4618      	mov	r0, r3
 8008358:	f7fd fda4 	bl	8005ea4 <HAL_UART_AbortTransmit_IT>
		__HAL_UART_CLEAR_FLAG(hgps->gps_huart,UART_FLAG_IDLE);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2210      	movs	r2, #16
 8008364:	621a      	str	r2, [r3, #32]
		__HAL_UART_DISABLE_IT(hgps->gps_huart,UART_IT_IDLE);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	6812      	ldr	r2, [r2, #0]
 8008370:	6812      	ldr	r2, [r2, #0]
 8008372:	6812      	ldr	r2, [r2, #0]
 8008374:	f022 0210 	bic.w	r2, r2, #16
 8008378:	601a      	str	r2, [r3, #0]
		TX_Cplt = 1;
 800837a:	4b28      	ldr	r3, [pc, #160]	; (800841c <USART_GPS_IRQHandler+0x1e8>)
 800837c:	2201      	movs	r2, #1
 800837e:	701a      	strb	r2, [r3, #0]

	}
	// additional error handling
	if(__HAL_UART_GET_IT_SOURCE(hgps->gps_huart,UART_IT_ERR))
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	f003 0301 	and.w	r3, r3, #1
 800838c:	2b00      	cmp	r3, #0
 800838e:	d039      	beq.n	8008404 <USART_GPS_IRQHandler+0x1d0>
	{
		//clear framing error
		if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_FE) == SET)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	69db      	ldr	r3, [r3, #28]
 8008398:	f003 0302 	and.w	r3, r3, #2
 800839c:	2b02      	cmp	r3, #2
 800839e:	d104      	bne.n	80083aa <USART_GPS_IRQHandler+0x176>
		{
			__HAL_UART_CLEAR_FEFLAG(hgps->gps_huart);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2202      	movs	r2, #2
 80083a8:	621a      	str	r2, [r3, #32]
		}
		//clear noise error
		if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_NE) == SET)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	69db      	ldr	r3, [r3, #28]
 80083b2:	f003 0304 	and.w	r3, r3, #4
 80083b6:	2b04      	cmp	r3, #4
 80083b8:	d104      	bne.n	80083c4 <USART_GPS_IRQHandler+0x190>
		{
			__HAL_UART_CLEAR_NEFLAG(hgps->gps_huart);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2204      	movs	r2, #4
 80083c2:	621a      	str	r2, [r3, #32]
		}
		//clear overun error
		if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_ORE) == SET)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	69db      	ldr	r3, [r3, #28]
 80083cc:	f003 0308 	and.w	r3, r3, #8
 80083d0:	2b08      	cmp	r3, #8
 80083d2:	d10a      	bne.n	80083ea <USART_GPS_IRQHandler+0x1b6>
		{
			uint8_t temp = hgps->gps_huart->Instance->RDR;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80083dc:	b29b      	uxth	r3, r3
 80083de:	72fb      	strb	r3, [r7, #11]
			(void)temp;
			__HAL_UART_CLEAR_OREFLAG(hgps->gps_huart);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2208      	movs	r2, #8
 80083e8:	621a      	str	r2, [r3, #32]
		}
		//clear parity errors
		if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_PE) == SET)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	69db      	ldr	r3, [r3, #28]
 80083f2:	f003 0301 	and.w	r3, r3, #1
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d104      	bne.n	8008404 <USART_GPS_IRQHandler+0x1d0>
		{
			__HAL_UART_CLEAR_PEFLAG(hgps->gps_huart);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2201      	movs	r2, #1
 8008402:	621a      	str	r2, [r3, #32]
		}
	}
}
 8008404:	bf00      	nop
 8008406:	3710      	adds	r7, #16
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}
 800840c:	200007bc 	.word	0x200007bc
 8008410:	20000794 	.word	0x20000794
 8008414:	20002128 	.word	0x20002128
 8008418:	20000818 	.word	0x20000818
 800841c:	200018dc 	.word	0x200018dc

08008420 <Init_Debug>:

#include "Sharc_Frame.h"


HAL_StatusTypeDef Init_Debug(void)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b086      	sub	sp, #24
 8008424:	af00      	add	r7, sp, #0
	// set up clock output on GPIO Pin A8 for testing
#ifdef DEBUG_HSE_OUTPUT_ENABLE
	//configure pin
	/*Configure GPIO pin : PA8 */
	 GPIO_InitTypeDef GPIO_InitStruct;
	 GPIO_InitStruct.Pin = GPIO_PIN_8;
 8008426:	f44f 7380 	mov.w	r3, #256	; 0x100
 800842a:	607b      	str	r3, [r7, #4]
	 GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800842c:	2302      	movs	r3, #2
 800842e:	60bb      	str	r3, [r7, #8]
	 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008430:	2300      	movs	r3, #0
 8008432:	60fb      	str	r3, [r7, #12]
	 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008434:	2300      	movs	r3, #0
 8008436:	613b      	str	r3, [r7, #16]
	 GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008438:	2300      	movs	r3, #0
 800843a:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800843c:	1d3b      	adds	r3, r7, #4
 800843e:	4619      	mov	r1, r3
 8008440:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008444:	f7f9 fb2e 	bl	8001aa4 <HAL_GPIO_Init>
	 //map clock output to PIN PA8
	 HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8008448:	2200      	movs	r2, #0
 800844a:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800844e:	2000      	movs	r0, #0
 8008450:	f7fa fbba 	bl	8002bc8 <HAL_RCC_MCOConfig>
#endif
	//initialise USART 2 for USB comms
#ifdef DEBUG_USART_ENABLE
	  huart2.Instance = USART2;
 8008454:	4b26      	ldr	r3, [pc, #152]	; (80084f0 <Init_Debug+0xd0>)
 8008456:	4a27      	ldr	r2, [pc, #156]	; (80084f4 <Init_Debug+0xd4>)
 8008458:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 800845a:	4b25      	ldr	r3, [pc, #148]	; (80084f0 <Init_Debug+0xd0>)
 800845c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008460:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008462:	4b23      	ldr	r3, [pc, #140]	; (80084f0 <Init_Debug+0xd0>)
 8008464:	2200      	movs	r2, #0
 8008466:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8008468:	4b21      	ldr	r3, [pc, #132]	; (80084f0 <Init_Debug+0xd0>)
 800846a:	2200      	movs	r2, #0
 800846c:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 800846e:	4b20      	ldr	r3, [pc, #128]	; (80084f0 <Init_Debug+0xd0>)
 8008470:	2200      	movs	r2, #0
 8008472:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8008474:	4b1e      	ldr	r3, [pc, #120]	; (80084f0 <Init_Debug+0xd0>)
 8008476:	220c      	movs	r2, #12
 8008478:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800847a:	4b1d      	ldr	r3, [pc, #116]	; (80084f0 <Init_Debug+0xd0>)
 800847c:	2200      	movs	r2, #0
 800847e:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008480:	4b1b      	ldr	r3, [pc, #108]	; (80084f0 <Init_Debug+0xd0>)
 8008482:	2200      	movs	r2, #0
 8008484:	61da      	str	r2, [r3, #28]
	  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008486:	4b1a      	ldr	r3, [pc, #104]	; (80084f0 <Init_Debug+0xd0>)
 8008488:	2200      	movs	r2, #0
 800848a:	621a      	str	r2, [r3, #32]
	  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800848c:	4b18      	ldr	r3, [pc, #96]	; (80084f0 <Init_Debug+0xd0>)
 800848e:	2200      	movs	r2, #0
 8008490:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008492:	4817      	ldr	r0, [pc, #92]	; (80084f0 <Init_Debug+0xd0>)
 8008494:	f7fd f91f 	bl	80056d6 <HAL_UART_Init>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d001      	beq.n	80084a2 <Init_Debug+0x82>
	  {
	    return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e022      	b.n	80084e8 <Init_Debug+0xc8>
	  }
	  setbuf(stdout, NULL);
 80084a2:	4b15      	ldr	r3, [pc, #84]	; (80084f8 <Init_Debug+0xd8>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	2100      	movs	r1, #0
 80084aa:	4618      	mov	r0, r3
 80084ac:	f002 f8ba 	bl	800a624 <setbuf>
#endif

#ifdef DEBUG_LED1_ENABLE
	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80084b0:	2200      	movs	r2, #0
 80084b2:	2120      	movs	r1, #32
 80084b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80084b8:	f7f9 fd8e 	bl	8001fd8 <HAL_GPIO_WritePin>
	  /*Configure GPIO pin : PD2 */
	  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80084bc:	2304      	movs	r3, #4
 80084be:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80084c0:	2303      	movs	r3, #3
 80084c2:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084c4:	2300      	movs	r3, #0
 80084c6:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80084c8:	1d3b      	adds	r3, r7, #4
 80084ca:	4619      	mov	r1, r3
 80084cc:	480b      	ldr	r0, [pc, #44]	; (80084fc <Init_Debug+0xdc>)
 80084ce:	f7f9 fae9 	bl	8001aa4 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,SET);
 80084d2:	2201      	movs	r2, #1
 80084d4:	2120      	movs	r1, #32
 80084d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80084da:	f7f9 fd7d 	bl	8001fd8 <HAL_GPIO_WritePin>
#endif

#ifdef DEBUG_LP_ENABLE
	  HAL_DBGMCU_EnableDBGStandbyMode();	//enable for shutdown mode
 80084de:	f7f8 fe0d 	bl	80010fc <HAL_DBGMCU_EnableDBGStandbyMode>
	  HAL_DBGMCU_EnableDBGStopMode();
 80084e2:	f7f8 fdfd 	bl	80010e0 <HAL_DBGMCU_EnableDBGStopMode>

#endif

	  return HAL_OK;
 80084e6:	2300      	movs	r3, #0
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3718      	adds	r7, #24
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	20002148 	.word	0x20002148
 80084f4:	40004400 	.word	0x40004400
 80084f8:	20000010 	.word	0x20000010
 80084fc:	48000c00 	.word	0x48000c00

08008500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
HAL_StatusTypeDef SystemClock_Config(void)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b0b8      	sub	sp, #224	; 0xe0
 8008504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008506:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800850a:	2244      	movs	r2, #68	; 0x44
 800850c:	2100      	movs	r1, #0
 800850e:	4618      	mov	r0, r3
 8008510:	f001 fd87 	bl	800a022 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008514:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008518:	2200      	movs	r2, #0
 800851a:	601a      	str	r2, [r3, #0]
 800851c:	605a      	str	r2, [r3, #4]
 800851e:	609a      	str	r2, [r3, #8]
 8008520:	60da      	str	r2, [r3, #12]
 8008522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008524:	463b      	mov	r3, r7
 8008526:	2288      	movs	r2, #136	; 0x88
 8008528:	2100      	movs	r1, #0
 800852a:	4618      	mov	r0, r3
 800852c:	f001 fd79 	bl	800a022 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8008530:	f7f9 fd82 	bl	8002038 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8008534:	4a3c      	ldr	r2, [pc, #240]	; (8008628 <SystemClock_Config+0x128>)
 8008536:	4b3c      	ldr	r3, [pc, #240]	; (8008628 <SystemClock_Config+0x128>)
 8008538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800853c:	f023 0318 	bic.w	r3, r3, #24
 8008540:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8008544:	2316      	movs	r3, #22
 8008546:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800854a:	2301      	movs	r3, #1
 800854c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008550:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008554:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008558:	2310      	movs	r3, #16
 800855a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800855e:	2301      	movs	r3, #1
 8008560:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8008564:	2300      	movs	r3, #0
 8008566:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800856a:	2360      	movs	r3, #96	; 0x60
 800856c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008570:	2302      	movs	r3, #2
 8008572:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8008576:	2301      	movs	r3, #1
 8008578:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800857c:	2301      	movs	r3, #1
 800857e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 26;
 8008582:	231a      	movs	r3, #26
 8008584:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8008588:	2307      	movs	r3, #7
 800858a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800858e:	2302      	movs	r3, #2
 8008590:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8008594:	2302      	movs	r3, #2
 8008596:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800859a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800859e:	4618      	mov	r0, r3
 80085a0:	f7f9 fe4a 	bl	8002238 <HAL_RCC_OscConfig>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <SystemClock_Config+0xae>
  {
    return HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e037      	b.n	800861e <SystemClock_Config+0x11e>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80085ae:	230f      	movs	r3, #15
 80085b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80085b4:	2303      	movs	r3, #3
 80085b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80085ba:	2380      	movs	r3, #128	; 0x80
 80085bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80085c0:	2300      	movs	r3, #0
 80085c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80085c6:	2300      	movs	r3, #0
 80085c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80085cc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80085d0:	2101      	movs	r1, #1
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7fa fa16 	bl	8002a04 <HAL_RCC_ClockConfig>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <SystemClock_Config+0xe2>
  {
    return HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	e01d      	b.n	800861e <SystemClock_Config+0x11e>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2;
 80085e2:	f04f 1302 	mov.w	r3, #131074	; 0x20002
 80085e6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 80085e8:	2308      	movs	r3, #8
 80085ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80085ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80085f4:	463b      	mov	r3, r7
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7fa fc3a 	bl	8002e70 <HAL_RCCEx_PeriphCLKConfig>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d001      	beq.n	8008606 <SystemClock_Config+0x106>
  {
    return HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	e00b      	b.n	800861e <SystemClock_Config+0x11e>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8008606:	f44f 7000 	mov.w	r0, #512	; 0x200
 800860a:	f7f9 fd8b 	bl	8002124 <HAL_PWREx_ControlVoltageScaling>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d001      	beq.n	8008618 <SystemClock_Config+0x118>
  {
    return HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	e002      	b.n	800861e <SystemClock_Config+0x11e>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8008618:	f7fa ff10 	bl	800343c <HAL_RCCEx_EnableMSIPLLMode>
  return HAL_OK;
 800861c:	2300      	movs	r3, #0
}
 800861e:	4618      	mov	r0, r3
 8008620:	37e0      	adds	r7, #224	; 0xe0
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	40021000 	.word	0x40021000

0800862c <Go_To_Sleep>:

HAL_StatusTypeDef Go_To_Sleep(PWR_MODE_t mode, uint32_t seconds)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	4603      	mov	r3, r0
 8008634:	6039      	str	r1, [r7, #0]
 8008636:	71fb      	strb	r3, [r7, #7]
	//reset wake up pin interrupt
	__HAL_RCC_PWR_CLK_ENABLE();
 8008638:	4a16      	ldr	r2, [pc, #88]	; (8008694 <Go_To_Sleep+0x68>)
 800863a:	4b16      	ldr	r3, [pc, #88]	; (8008694 <Go_To_Sleep+0x68>)
 800863c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800863e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008642:	6593      	str	r3, [r2, #88]	; 0x58
 8008644:	4b13      	ldr	r3, [pc, #76]	; (8008694 <Go_To_Sleep+0x68>)
 8008646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800864c:	60fb      	str	r3, [r7, #12]
 800864e:	68fb      	ldr	r3, [r7, #12]
	/* Enable Wake Up timer in interrupt mode */
	//set alarm
	if(seconds > 0)
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00b      	beq.n	800866e <Go_To_Sleep+0x42>
	{
	 if(HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,(seconds-1),RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	3b01      	subs	r3, #1
 800865a:	2204      	movs	r2, #4
 800865c:	4619      	mov	r1, r3
 800865e:	480e      	ldr	r0, [pc, #56]	; (8008698 <Go_To_Sleep+0x6c>)
 8008660:	f7fb fb1a 	bl	8003c98 <HAL_RTCEx_SetWakeUpTimer_IT>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d001      	beq.n	800866e <Go_To_Sleep+0x42>
	  {
		 return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e00d      	b.n	800868a <Go_To_Sleep+0x5e>
	  }
	}
	 HAL_PWREx_EnableInternalWakeUpLine();
 800866e:	f7f9 fdad 	bl	80021cc <HAL_PWREx_EnableInternalWakeUpLine>
	 //if shutdown mode enabled
	 if(mode == SHUTDOWN)
 8008672:	79fb      	ldrb	r3, [r7, #7]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d102      	bne.n	800867e <Go_To_Sleep+0x52>
	 {
		 HAL_PWREx_EnterSHUTDOWNMode();
 8008678:	f7f9 fdc4 	bl	8002204 <HAL_PWREx_EnterSHUTDOWNMode>
 800867c:	e004      	b.n	8008688 <Go_To_Sleep+0x5c>
	 }
	 else if(mode == STDBY)
 800867e:	79fb      	ldrb	r3, [r7, #7]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d101      	bne.n	8008688 <Go_To_Sleep+0x5c>
	 {
		 HAL_PWR_EnterSTANDBYMode();
 8008684:	f7f9 fd28 	bl	80020d8 <HAL_PWR_EnterSTANDBYMode>
	 }
	 return HAL_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	3710      	adds	r7, #16
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	40021000 	.word	0x40021000
 8008698:	200021cc 	.word	0x200021cc

0800869c <set_WUP_Pin>:
	HAL_PWREx_EnterSTOP1Mode(PWR_STOPENTRY_WFI);
	return HAL_OK;
}

void set_WUP_Pin(uint32_t Pin, PinMode_typedef mode)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b090      	sub	sp, #64	; 0x40
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	460b      	mov	r3, r1
 80086a6:	70fb      	strb	r3, [r7, #3]

	GPIO_TypeDef *Pin_Port;
	IRQn_Type WUP_IRQn;
	GPIO_InitTypeDef GPIO_InitStruct;
	switch (Pin) {
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	3b01      	subs	r3, #1
 80086ac:	2b0f      	cmp	r3, #15
 80086ae:	f200 808a 	bhi.w	80087c6 <set_WUP_Pin+0x12a>
 80086b2:	a201      	add	r2, pc, #4	; (adr r2, 80086b8 <set_WUP_Pin+0x1c>)
 80086b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b8:	080086f9 	.word	0x080086f9
 80086bc:	08008723 	.word	0x08008723
 80086c0:	080087c7 	.word	0x080087c7
 80086c4:	0800874d 	.word	0x0800874d
 80086c8:	080087c7 	.word	0x080087c7
 80086cc:	080087c7 	.word	0x080087c7
 80086d0:	080087c7 	.word	0x080087c7
 80086d4:	08008775 	.word	0x08008775
 80086d8:	080087c7 	.word	0x080087c7
 80086dc:	080087c7 	.word	0x080087c7
 80086e0:	080087c7 	.word	0x080087c7
 80086e4:	080087c7 	.word	0x080087c7
 80086e8:	080087c7 	.word	0x080087c7
 80086ec:	080087c7 	.word	0x080087c7
 80086f0:	080087c7 	.word	0x080087c7
 80086f4:	0800879f 	.word	0x0800879f
		case PWR_WAKEUP_PIN1:
			__HAL_RCC_GPIOA_CLK_ENABLE();
 80086f8:	4a69      	ldr	r2, [pc, #420]	; (80088a0 <set_WUP_Pin+0x204>)
 80086fa:	4b69      	ldr	r3, [pc, #420]	; (80088a0 <set_WUP_Pin+0x204>)
 80086fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086fe:	f043 0301 	orr.w	r3, r3, #1
 8008702:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008704:	4b66      	ldr	r3, [pc, #408]	; (80088a0 <set_WUP_Pin+0x204>)
 8008706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008708:	f003 0301 	and.w	r3, r3, #1
 800870c:	623b      	str	r3, [r7, #32]
 800870e:	6a3b      	ldr	r3, [r7, #32]
			Pin_Port = GPIOA;
 8008710:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008714:	63fb      	str	r3, [r7, #60]	; 0x3c
			GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008716:	2301      	movs	r3, #1
 8008718:	627b      	str	r3, [r7, #36]	; 0x24
			WUP_IRQn = EXTI0_IRQn;
 800871a:	2306      	movs	r3, #6
 800871c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			break;
 8008720:	e052      	b.n	80087c8 <set_WUP_Pin+0x12c>
		case PWR_WAKEUP_PIN2:
			__HAL_RCC_GPIOC_CLK_ENABLE();
 8008722:	4a5f      	ldr	r2, [pc, #380]	; (80088a0 <set_WUP_Pin+0x204>)
 8008724:	4b5e      	ldr	r3, [pc, #376]	; (80088a0 <set_WUP_Pin+0x204>)
 8008726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008728:	f043 0304 	orr.w	r3, r3, #4
 800872c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800872e:	4b5c      	ldr	r3, [pc, #368]	; (80088a0 <set_WUP_Pin+0x204>)
 8008730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008732:	f003 0304 	and.w	r3, r3, #4
 8008736:	61fb      	str	r3, [r7, #28]
 8008738:	69fb      	ldr	r3, [r7, #28]
			Pin_Port = GPIOC;
 800873a:	4b5a      	ldr	r3, [pc, #360]	; (80088a4 <set_WUP_Pin+0x208>)
 800873c:	63fb      	str	r3, [r7, #60]	; 0x3c
			GPIO_InitStruct.Pin = GPIO_PIN_13;
 800873e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008742:	627b      	str	r3, [r7, #36]	; 0x24
			WUP_IRQn = EXTI15_10_IRQn;
 8008744:	2328      	movs	r3, #40	; 0x28
 8008746:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			break;
 800874a:	e03d      	b.n	80087c8 <set_WUP_Pin+0x12c>
		case PWR_WAKEUP_PIN3:
			__HAL_RCC_GPIOE_CLK_ENABLE();
 800874c:	4a54      	ldr	r2, [pc, #336]	; (80088a0 <set_WUP_Pin+0x204>)
 800874e:	4b54      	ldr	r3, [pc, #336]	; (80088a0 <set_WUP_Pin+0x204>)
 8008750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008752:	f043 0310 	orr.w	r3, r3, #16
 8008756:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008758:	4b51      	ldr	r3, [pc, #324]	; (80088a0 <set_WUP_Pin+0x204>)
 800875a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800875c:	f003 0310 	and.w	r3, r3, #16
 8008760:	61bb      	str	r3, [r7, #24]
 8008762:	69bb      	ldr	r3, [r7, #24]
			Pin_Port = GPIOE;
 8008764:	4b50      	ldr	r3, [pc, #320]	; (80088a8 <set_WUP_Pin+0x20c>)
 8008766:	63fb      	str	r3, [r7, #60]	; 0x3c
			GPIO_InitStruct.Pin = GPIO_PIN_6;
 8008768:	2340      	movs	r3, #64	; 0x40
 800876a:	627b      	str	r3, [r7, #36]	; 0x24
			WUP_IRQn = EXTI9_5_IRQn;
 800876c:	2317      	movs	r3, #23
 800876e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			break;
 8008772:	e029      	b.n	80087c8 <set_WUP_Pin+0x12c>
		case PWR_WAKEUP_PIN4:
			__HAL_RCC_GPIOA_CLK_ENABLE();
 8008774:	4a4a      	ldr	r2, [pc, #296]	; (80088a0 <set_WUP_Pin+0x204>)
 8008776:	4b4a      	ldr	r3, [pc, #296]	; (80088a0 <set_WUP_Pin+0x204>)
 8008778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800877a:	f043 0301 	orr.w	r3, r3, #1
 800877e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008780:	4b47      	ldr	r3, [pc, #284]	; (80088a0 <set_WUP_Pin+0x204>)
 8008782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008784:	f003 0301 	and.w	r3, r3, #1
 8008788:	617b      	str	r3, [r7, #20]
 800878a:	697b      	ldr	r3, [r7, #20]
			GPIO_InitStruct.Pin = GPIO_PIN_2;
 800878c:	2304      	movs	r3, #4
 800878e:	627b      	str	r3, [r7, #36]	; 0x24
			Pin_Port = GPIOA;
 8008790:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008794:	63fb      	str	r3, [r7, #60]	; 0x3c
			WUP_IRQn = EXTI2_IRQn;
 8008796:	2308      	movs	r3, #8
 8008798:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			break;
 800879c:	e014      	b.n	80087c8 <set_WUP_Pin+0x12c>
		case PWR_WAKEUP_PIN5:
			__HAL_RCC_GPIOC_CLK_ENABLE();
 800879e:	4a40      	ldr	r2, [pc, #256]	; (80088a0 <set_WUP_Pin+0x204>)
 80087a0:	4b3f      	ldr	r3, [pc, #252]	; (80088a0 <set_WUP_Pin+0x204>)
 80087a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087a4:	f043 0304 	orr.w	r3, r3, #4
 80087a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80087aa:	4b3d      	ldr	r3, [pc, #244]	; (80088a0 <set_WUP_Pin+0x204>)
 80087ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087ae:	f003 0304 	and.w	r3, r3, #4
 80087b2:	613b      	str	r3, [r7, #16]
 80087b4:	693b      	ldr	r3, [r7, #16]
			Pin_Port = GPIOC;
 80087b6:	4b3b      	ldr	r3, [pc, #236]	; (80088a4 <set_WUP_Pin+0x208>)
 80087b8:	63fb      	str	r3, [r7, #60]	; 0x3c
			GPIO_InitStruct.Pin = GPIO_PIN_5;
 80087ba:	2320      	movs	r3, #32
 80087bc:	627b      	str	r3, [r7, #36]	; 0x24
			WUP_IRQn = EXTI9_5_IRQn;
 80087be:	2317      	movs	r3, #23
 80087c0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			break;
 80087c4:	e000      	b.n	80087c8 <set_WUP_Pin+0x12c>
		default:
			break;
 80087c6:	bf00      	nop
	}
	//configure pin for exti map


	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80087c8:	4b38      	ldr	r3, [pc, #224]	; (80088ac <set_WUP_Pin+0x210>)
 80087ca:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087cc:	2300      	movs	r3, #0
 80087ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80087d0:	2302      	movs	r3, #2
 80087d2:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(Pin_Port,&GPIO_InitStruct);
 80087d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087d8:	4619      	mov	r1, r3
 80087da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80087dc:	f7f9 f962 	bl	8001aa4 <HAL_GPIO_Init>
	//set NVIC interrupt
    HAL_NVIC_SetPriority(WUP_IRQn, 0x0F, 0);
 80087e0:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80087e4:	2200      	movs	r2, #0
 80087e6:	210f      	movs	r1, #15
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7f8 fdae 	bl	800134a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(WUP_IRQn);
 80087ee:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7f8 fdc5 	bl	8001382 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_ClearPendingIRQ(WUP_IRQn);
 80087f8:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7f8 fdee 	bl	80013de <HAL_NVIC_ClearPendingIRQ>
    //enable wup in PWR register
    __HAL_RCC_PWR_CLK_ENABLE();
 8008802:	4a27      	ldr	r2, [pc, #156]	; (80088a0 <set_WUP_Pin+0x204>)
 8008804:	4b26      	ldr	r3, [pc, #152]	; (80088a0 <set_WUP_Pin+0x204>)
 8008806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800880c:	6593      	str	r3, [r2, #88]	; 0x58
 800880e:	4b24      	ldr	r3, [pc, #144]	; (80088a0 <set_WUP_Pin+0x204>)
 8008810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008816:	60fb      	str	r3, [r7, #12]
 8008818:	68fb      	ldr	r3, [r7, #12]
    if(mode == MODE_WUP)
 800881a:	78fb      	ldrb	r3, [r7, #3]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d10f      	bne.n	8008840 <set_WUP_Pin+0x1a4>
    {
    	__HAL_RCC_PWR_CLK_ENABLE();
 8008820:	4a1f      	ldr	r2, [pc, #124]	; (80088a0 <set_WUP_Pin+0x204>)
 8008822:	4b1f      	ldr	r3, [pc, #124]	; (80088a0 <set_WUP_Pin+0x204>)
 8008824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800882a:	6593      	str	r3, [r2, #88]	; 0x58
 800882c:	4b1c      	ldr	r3, [pc, #112]	; (80088a0 <set_WUP_Pin+0x204>)
 800882e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008834:	60bb      	str	r3, [r7, #8]
 8008836:	68bb      	ldr	r3, [r7, #8]
    	HAL_PWR_EnableWakeUpPin(Pin);
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f7f9 fc19 	bl	8002070 <HAL_PWR_EnableWakeUpPin>
 800883e:	e005      	b.n	800884c <set_WUP_Pin+0x1b0>
    	//clear unwanted interrupts

    }else if (mode == MODE_EXTI)
 8008840:	78fb      	ldrb	r3, [r7, #3]
 8008842:	2b01      	cmp	r3, #1
 8008844:	d102      	bne.n	800884c <set_WUP_Pin+0x1b0>
    {
    	HAL_PWR_DisableWakeUpPin(Pin);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f7f9 fc32 	bl	80020b0 <HAL_PWR_DisableWakeUpPin>
    }
   	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF1);
 800884c:	4b18      	ldr	r3, [pc, #96]	; (80088b0 <set_WUP_Pin+0x214>)
 800884e:	2201      	movs	r2, #1
 8008850:	619a      	str	r2, [r3, #24]
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF2);
 8008852:	4b17      	ldr	r3, [pc, #92]	; (80088b0 <set_WUP_Pin+0x214>)
 8008854:	2202      	movs	r2, #2
 8008856:	619a      	str	r2, [r3, #24]
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF3);
 8008858:	4b15      	ldr	r3, [pc, #84]	; (80088b0 <set_WUP_Pin+0x214>)
 800885a:	2204      	movs	r2, #4
 800885c:	619a      	str	r2, [r3, #24]
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF4);
 800885e:	4b14      	ldr	r3, [pc, #80]	; (80088b0 <set_WUP_Pin+0x214>)
 8008860:	2208      	movs	r2, #8
 8008862:	619a      	str	r2, [r3, #24]
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF5);
 8008864:	4b12      	ldr	r3, [pc, #72]	; (80088b0 <set_WUP_Pin+0x214>)
 8008866:	2210      	movs	r2, #16
 8008868:	619a      	str	r2, [r3, #24]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI_LINE_5);
 800886a:	4b12      	ldr	r3, [pc, #72]	; (80088b4 <set_WUP_Pin+0x218>)
 800886c:	4a12      	ldr	r2, [pc, #72]	; (80088b8 <set_WUP_Pin+0x21c>)
 800886e:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI_LINE_13);
 8008870:	4b10      	ldr	r3, [pc, #64]	; (80088b4 <set_WUP_Pin+0x218>)
 8008872:	4a12      	ldr	r2, [pc, #72]	; (80088bc <set_WUP_Pin+0x220>)
 8008874:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI_LINE_0);
 8008876:	4b0f      	ldr	r3, [pc, #60]	; (80088b4 <set_WUP_Pin+0x218>)
 8008878:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 800887c:	615a      	str	r2, [r3, #20]
   	__HAL_GPIO_EXTI_CLEAR_IT(EXTI_LINE_2);
 800887e:	4b0d      	ldr	r3, [pc, #52]	; (80088b4 <set_WUP_Pin+0x218>)
 8008880:	4a0f      	ldr	r2, [pc, #60]	; (80088c0 <set_WUP_Pin+0x224>)
 8008882:	615a      	str	r2, [r3, #20]
   	__HAL_GPIO_EXTI_CLEAR_IT(EXTI_LINE_6);
 8008884:	4b0b      	ldr	r3, [pc, #44]	; (80088b4 <set_WUP_Pin+0x218>)
 8008886:	4a0f      	ldr	r2, [pc, #60]	; (80088c4 <set_WUP_Pin+0x228>)
 8008888:	615a      	str	r2, [r3, #20]
	__HAL_RCC_PWR_CLK_DISABLE();
 800888a:	4a05      	ldr	r2, [pc, #20]	; (80088a0 <set_WUP_Pin+0x204>)
 800888c:	4b04      	ldr	r3, [pc, #16]	; (80088a0 <set_WUP_Pin+0x204>)
 800888e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008894:	6593      	str	r3, [r2, #88]	; 0x58
}
 8008896:	bf00      	nop
 8008898:	3740      	adds	r7, #64	; 0x40
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	40021000 	.word	0x40021000
 80088a4:	48000800 	.word	0x48000800
 80088a8:	48001000 	.word	0x48001000
 80088ac:	10110000 	.word	0x10110000
 80088b0:	40007000 	.word	0x40007000
 80088b4:	40010400 	.word	0x40010400
 80088b8:	16000005 	.word	0x16000005
 80088bc:	1600000d 	.word	0x1600000d
 80088c0:	16000002 	.word	0x16000002
 80088c4:	16000006 	.word	0x16000006

080088c8 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*) &ch,1,0xFFFF);
 80088d0:	1d39      	adds	r1, r7, #4
 80088d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80088d6:	2201      	movs	r2, #1
 80088d8:	4803      	ldr	r0, [pc, #12]	; (80088e8 <__io_putchar+0x20>)
 80088da:	f7fc ff7f 	bl	80057dc <HAL_UART_Transmit>
	return ch;
 80088de:	687b      	ldr	r3, [r7, #4]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3708      	adds	r7, #8
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	20002148 	.word	0x20002148

080088ec <GPIO_Set_Pin_LP>:

void GPIO_Set_Pin_LP(void)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b08a      	sub	sp, #40	; 0x28
 80088f0:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088f2:	f107 0314 	add.w	r3, r7, #20
 80088f6:	2200      	movs	r2, #0
 80088f8:	601a      	str	r2, [r3, #0]
 80088fa:	605a      	str	r2, [r3, #4]
 80088fc:	609a      	str	r2, [r3, #8]
 80088fe:	60da      	str	r2, [r3, #12]
 8008900:	611a      	str	r2, [r3, #16]
	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008902:	4a3e      	ldr	r2, [pc, #248]	; (80089fc <GPIO_Set_Pin_LP+0x110>)
 8008904:	4b3d      	ldr	r3, [pc, #244]	; (80089fc <GPIO_Set_Pin_LP+0x110>)
 8008906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008908:	f043 0304 	orr.w	r3, r3, #4
 800890c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800890e:	4b3b      	ldr	r3, [pc, #236]	; (80089fc <GPIO_Set_Pin_LP+0x110>)
 8008910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008912:	f003 0304 	and.w	r3, r3, #4
 8008916:	613b      	str	r3, [r7, #16]
 8008918:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 800891a:	4a38      	ldr	r2, [pc, #224]	; (80089fc <GPIO_Set_Pin_LP+0x110>)
 800891c:	4b37      	ldr	r3, [pc, #220]	; (80089fc <GPIO_Set_Pin_LP+0x110>)
 800891e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008926:	4b35      	ldr	r3, [pc, #212]	; (80089fc <GPIO_Set_Pin_LP+0x110>)
 8008928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800892a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800892e:	60fb      	str	r3, [r7, #12]
 8008930:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008932:	4a32      	ldr	r2, [pc, #200]	; (80089fc <GPIO_Set_Pin_LP+0x110>)
 8008934:	4b31      	ldr	r3, [pc, #196]	; (80089fc <GPIO_Set_Pin_LP+0x110>)
 8008936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008938:	f043 0301 	orr.w	r3, r3, #1
 800893c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800893e:	4b2f      	ldr	r3, [pc, #188]	; (80089fc <GPIO_Set_Pin_LP+0x110>)
 8008940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008942:	f003 0301 	and.w	r3, r3, #1
 8008946:	60bb      	str	r3, [r7, #8]
 8008948:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800894a:	4a2c      	ldr	r2, [pc, #176]	; (80089fc <GPIO_Set_Pin_LP+0x110>)
 800894c:	4b2b      	ldr	r3, [pc, #172]	; (80089fc <GPIO_Set_Pin_LP+0x110>)
 800894e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008950:	f043 0302 	orr.w	r3, r3, #2
 8008954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008956:	4b29      	ldr	r3, [pc, #164]	; (80089fc <GPIO_Set_Pin_LP+0x110>)
 8008958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800895a:	f003 0302 	and.w	r3, r3, #2
 800895e:	607b      	str	r3, [r7, #4]
 8008960:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008962:	4a26      	ldr	r2, [pc, #152]	; (80089fc <GPIO_Set_Pin_LP+0x110>)
 8008964:	4b25      	ldr	r3, [pc, #148]	; (80089fc <GPIO_Set_Pin_LP+0x110>)
 8008966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008968:	f043 0308 	orr.w	r3, r3, #8
 800896c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800896e:	4b23      	ldr	r3, [pc, #140]	; (80089fc <GPIO_Set_Pin_LP+0x110>)
 8008970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008972:	f003 0308 	and.w	r3, r3, #8
 8008976:	603b      	str	r3, [r7, #0]
 8008978:	683b      	ldr	r3, [r7, #0]
	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800897a:	2200      	movs	r2, #0
 800897c:	2120      	movs	r1, #32
 800897e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008982:	f7f9 fb29 	bl	8001fd8 <HAL_GPIO_WritePin>
	  /*Configure GPIO pins : PC13 PC0 PC1 PC2
	                           PC3 PC4 PC5 PC6
	                           PC7 PC8 PC9 PC10
	                           PC11 PC12 */
	  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8008986:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800898a:	617b      	str	r3, [r7, #20]
	                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
	                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
	                          |GPIO_PIN_11|GPIO_PIN_12;
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800898c:	2303      	movs	r3, #3
 800898e:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008990:	2300      	movs	r3, #0
 8008992:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008994:	f107 0314 	add.w	r3, r7, #20
 8008998:	4619      	mov	r1, r3
 800899a:	4819      	ldr	r0, [pc, #100]	; (8008a00 <GPIO_Set_Pin_LP+0x114>)
 800899c:	f7f9 f882 	bl	8001aa4 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PA0 PA1 PA4 PA6
	                           PA7 PA9 PA10 PA11
	                           PA12 PA15 */
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 80089a0:	f649 63d3 	movw	r3, #40659	; 0x9ed3
 80089a4:	617b      	str	r3, [r7, #20]
	                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
	                          |GPIO_PIN_12|GPIO_PIN_15;
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80089a6:	2303      	movs	r3, #3
 80089a8:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089aa:	2300      	movs	r3, #0
 80089ac:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089ae:	f107 0314 	add.w	r3, r7, #20
 80089b2:	4619      	mov	r1, r3
 80089b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80089b8:	f7f9 f874 	bl	8001aa4 <HAL_GPIO_Init>

	  /*Configure GPIO pin : LD2_Pin */
	  GPIO_InitStruct.Pin = LD2_Pin;
 80089bc:	2320      	movs	r3, #32
 80089be:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80089c0:	2301      	movs	r3, #1
 80089c2:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089c4:	2300      	movs	r3, #0
 80089c6:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089c8:	2300      	movs	r3, #0
 80089ca:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80089cc:	f107 0314 	add.w	r3, r7, #20
 80089d0:	4619      	mov	r1, r3
 80089d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80089d6:	f7f9 f865 	bl	8001aa4 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PB0 PB1 PB2 PB10
	                           PB11 PB12 PB13 PB14
	                           PB15 PB3 PB4 PB5
	                           PB6 PB7 PB8 PB9 */
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80089da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80089de:	617b      	str	r3, [r7, #20]
	                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
	                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
	                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80089e0:	2303      	movs	r3, #3
 80089e2:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089e4:	2300      	movs	r3, #0
 80089e6:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80089e8:	f107 0314 	add.w	r3, r7, #20
 80089ec:	4619      	mov	r1, r3
 80089ee:	4805      	ldr	r0, [pc, #20]	; (8008a04 <GPIO_Set_Pin_LP+0x118>)
 80089f0:	f7f9 f858 	bl	8001aa4 <HAL_GPIO_Init>

}
 80089f4:	bf00      	nop
 80089f6:	3728      	adds	r7, #40	; 0x28
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}
 80089fc:	40021000 	.word	0x40021000
 8008a00:	48000800 	.word	0x48000800
 8008a04:	48000400 	.word	0x48000400

08008a08 <EXTI15_10_IRQHandler>:
/*
 * @brief: EXTI IRQ Handler for Wake Up Pin 2 (PC13)
 */

void EXTI15_10_IRQHandler(void)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
	if(__HAL_GPIO_EXTI_GET_FLAG(EXTI_IRIDIUM_RING_WAKE_PIN))
 8008a0e:	4b13      	ldr	r3, [pc, #76]	; (8008a5c <EXTI15_10_IRQHandler+0x54>)
 8008a10:	695b      	ldr	r3, [r3, #20]
 8008a12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d01b      	beq.n	8008a52 <EXTI15_10_IRQHandler+0x4a>
	{
		__HAL_GPIO_EXTI_CLEAR_FLAG(EXTI_IRIDIUM_RING_WAKE_PIN);
 8008a1a:	4b10      	ldr	r3, [pc, #64]	; (8008a5c <EXTI15_10_IRQHandler+0x54>)
 8008a1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008a20:	615a      	str	r2, [r3, #20]
		//interrupt source from PWR WAKE PIN 2 == IRIDIUM Recieve Event

		//ROUTINE START
		printf("Incoming Message from Satellite detected while awake: Receiving...");
 8008a22:	480f      	ldr	r0, [pc, #60]	; (8008a60 <EXTI15_10_IRQHandler+0x58>)
 8008a24:	f001 fd6e 	bl	800a504 <printf>
		for (int i = 0; i < 10; ++i)
 8008a28:	2300      	movs	r3, #0
 8008a2a:	607b      	str	r3, [r7, #4]
 8008a2c:	e00b      	b.n	8008a46 <EXTI15_10_IRQHandler+0x3e>
		{
			HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8008a2e:	2120      	movs	r1, #32
 8008a30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008a34:	f7f9 fae7 	bl	8002006 <HAL_GPIO_TogglePin>
			HAL_Delay(500);
 8008a38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008a3c:	f7f8 fb2e 	bl	800109c <HAL_Delay>
		for (int i = 0; i < 10; ++i)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	3301      	adds	r3, #1
 8008a44:	607b      	str	r3, [r7, #4]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2b09      	cmp	r3, #9
 8008a4a:	ddf0      	ble.n	8008a2e <EXTI15_10_IRQHandler+0x26>
		}
		printf("Message Recieved!\r\n");
 8008a4c:	4805      	ldr	r0, [pc, #20]	; (8008a64 <EXTI15_10_IRQHandler+0x5c>)
 8008a4e:	f001 fdd1 	bl	800a5f4 <puts>
		//ROUTINE END

	}
}
 8008a52:	bf00      	nop
 8008a54:	3708      	adds	r7, #8
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	40010400 	.word	0x40010400
 8008a60:	08010a8c 	.word	0x08010a8c
 8008a64:	08010ad0 	.word	0x08010ad0

08008a68 <EXTI9_5_IRQHandler>:

/*
 * @brief: EXTI IRQ Handler for Wake Up Pin 5 (PC5)
 */
void EXTI9_5_IRQHandler(void)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
	if(__HAL_GPIO_EXTI_GET_FLAG(EXTI_IMU_EVENT_WAKE_PIN))
 8008a6e:	4b12      	ldr	r3, [pc, #72]	; (8008ab8 <EXTI9_5_IRQHandler+0x50>)
 8008a70:	695b      	ldr	r3, [r3, #20]
 8008a72:	f003 0320 	and.w	r3, r3, #32
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d019      	beq.n	8008aae <EXTI9_5_IRQHandler+0x46>
	{
		__HAL_GPIO_EXTI_CLEAR_FLAG(EXTI_IMU_EVENT_WAKE_PIN);
 8008a7a:	4b0f      	ldr	r3, [pc, #60]	; (8008ab8 <EXTI9_5_IRQHandler+0x50>)
 8008a7c:	2220      	movs	r2, #32
 8008a7e:	615a      	str	r2, [r3, #20]

		//ROUTINE START

		 printf("IMU Event Detected while awake: Sampling...");
 8008a80:	480e      	ldr	r0, [pc, #56]	; (8008abc <EXTI9_5_IRQHandler+0x54>)
 8008a82:	f001 fd3f 	bl	800a504 <printf>
		for (int i = 0; i < 50; ++i)
 8008a86:	2300      	movs	r3, #0
 8008a88:	607b      	str	r3, [r7, #4]
 8008a8a:	e00a      	b.n	8008aa2 <EXTI9_5_IRQHandler+0x3a>
		{
			HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8008a8c:	2120      	movs	r1, #32
 8008a8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008a92:	f7f9 fab8 	bl	8002006 <HAL_GPIO_TogglePin>
		 	HAL_Delay(100);
 8008a96:	2064      	movs	r0, #100	; 0x64
 8008a98:	f7f8 fb00 	bl	800109c <HAL_Delay>
		for (int i = 0; i < 50; ++i)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	607b      	str	r3, [r7, #4]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2b31      	cmp	r3, #49	; 0x31
 8008aa6:	ddf1      	ble.n	8008a8c <EXTI9_5_IRQHandler+0x24>
		}
		printf("Done\r\n");
 8008aa8:	4805      	ldr	r0, [pc, #20]	; (8008ac0 <EXTI9_5_IRQHandler+0x58>)
 8008aaa:	f001 fda3 	bl	800a5f4 <puts>
		//ROUTINE END

	}
}
 8008aae:	bf00      	nop
 8008ab0:	3708      	adds	r7, #8
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	40010400 	.word	0x40010400
 8008abc:	08010ae4 	.word	0x08010ae4
 8008ac0:	08010b10 	.word	0x08010b10

08008ac4 <POR_Handler>:
/*
 * @brief: Power On Reset Handler for BUOY (CASE: NRST Line Pulled low)
 */
void POR_Handler(void)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	af00      	add	r7, sp, #0
	  //clear flags
	  __HAL_RCC_CLEAR_RESET_FLAGS();
 8008ac8:	4a14      	ldr	r2, [pc, #80]	; (8008b1c <POR_Handler+0x58>)
 8008aca:	4b14      	ldr	r3, [pc, #80]	; (8008b1c <POR_Handler+0x58>)
 8008acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ad0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008ad4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	  //clear the back up registers
	  HAL_PWR_EnableBkUpAccess();
 8008ad8:	f7f9 faae 	bl	8002038 <HAL_PWR_EnableBkUpAccess>
	  __HAL_RCC_BACKUPRESET_FORCE();
 8008adc:	4a0f      	ldr	r2, [pc, #60]	; (8008b1c <POR_Handler+0x58>)
 8008ade:	4b0f      	ldr	r3, [pc, #60]	; (8008b1c <POR_Handler+0x58>)
 8008ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	  __HAL_RCC_BACKUPRESET_RELEASE();
 8008aec:	4a0b      	ldr	r2, [pc, #44]	; (8008b1c <POR_Handler+0x58>)
 8008aee:	4b0b      	ldr	r3, [pc, #44]	; (8008b1c <POR_Handler+0x58>)
 8008af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008af8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	  HAL_PWR_DisableBkUpAccess();
 8008afc:	f7f9 faaa 	bl	8002054 <HAL_PWR_DisableBkUpAccess>
	  SystemClock_Config();
 8008b00:	f7ff fcfe 	bl	8008500 <SystemClock_Config>
	  //deactivate and disable wake up timers
	  HAL_PWREx_DisableInternalWakeUpLine();
 8008b04:	f7f9 fb70 	bl	80021e8 <HAL_PWREx_DisableInternalWakeUpLine>
	  /* Clear PWR wake up Flag */
	 __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8008b08:	4b05      	ldr	r3, [pc, #20]	; (8008b20 <POR_Handler+0x5c>)
 8008b0a:	221f      	movs	r2, #31
 8008b0c:	619a      	str	r2, [r3, #24]
	 __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8008b0e:	4b04      	ldr	r3, [pc, #16]	; (8008b20 <POR_Handler+0x5c>)
 8008b10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b14:	619a      	str	r2, [r3, #24]
	  //reinitialise the clock
}
 8008b16:	bf00      	nop
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	40021000 	.word	0x40021000
 8008b20:	40007000 	.word	0x40007000

08008b24 <BOR_Handler>:
/*
 * @brief: Brown Out Reset Handler for BUOY (case Vbat < Vbrownoutthreshold)
 */
void BOR_Handler(void)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
	  //clear flags
	  __HAL_RCC_CLEAR_RESET_FLAGS();
 8008b2a:	4a11      	ldr	r2, [pc, #68]	; (8008b70 <BOR_Handler+0x4c>)
 8008b2c:	4b10      	ldr	r3, [pc, #64]	; (8008b70 <BOR_Handler+0x4c>)
 8008b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008b36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	  // transmit log to PC

	  char* msg= "Warning! Device encountered a Brown Out. Exiting Program...\r\n";
 8008b3a:	4b0e      	ldr	r3, [pc, #56]	; (8008b74 <BOR_Handler+0x50>)
 8008b3c:	607b      	str	r3, [r7, #4]
	  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),100);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f7f7 fb50 	bl	80001e4 <strlen>
 8008b44:	4603      	mov	r3, r0
 8008b46:	b29a      	uxth	r2, r3
 8008b48:	2364      	movs	r3, #100	; 0x64
 8008b4a:	6879      	ldr	r1, [r7, #4]
 8008b4c:	480a      	ldr	r0, [pc, #40]	; (8008b78 <BOR_Handler+0x54>)
 8008b4e:	f7fc fe45 	bl	80057dc <HAL_UART_Transmit>
	  //perform system reset
	  POR_Handler();
 8008b52:	f7ff ffb7 	bl	8008ac4 <POR_Handler>
	  HAL_NVIC_SystemReset();
 8008b56:	f7f8 fc30 	bl	80013ba <HAL_NVIC_SystemReset>
	  /*
	   * Failure to perform system reset causes device to enter an infinite loop
	   */
	  while(1)
	  {
		  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8008b5a:	2120      	movs	r1, #32
 8008b5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008b60:	f7f9 fa51 	bl	8002006 <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 8008b64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008b68:	f7f8 fa98 	bl	800109c <HAL_Delay>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8008b6c:	e7f5      	b.n	8008b5a <BOR_Handler+0x36>
 8008b6e:	bf00      	nop
 8008b70:	40021000 	.word	0x40021000
 8008b74:	08010b18 	.word	0x08010b18
 8008b78:	20002148 	.word	0x20002148

08008b7c <main>:
 **
 **===========================================================================
 **/

int main(void)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
//======================== 1. SYSTEM INIT & CLOCK CONFIG ========================//

	HAL_Init();				//Init Flash prefetch, systick timer, NVIC and LL functions
 8008b82:	f7f8 fa15 	bl	8000fb0 <HAL_Init>
	SystemClock_Config();	//configure clock
 8008b86:	f7ff fcbb 	bl	8008500 <SystemClock_Config>
	GPIO_Set_Pin_LP();		//Configure all unused GPIO pins to low Power mode
 8008b8a:	f7ff feaf 	bl	80088ec <GPIO_Set_Pin_LP>
	Init_Debug();			// initialize debug peripherals
 8008b8e:	f7ff fc47 	bl	8008420 <Init_Debug>

/*
 * When system powers on, check for any asynchronous resets that
 * may have occured. Use this area to add in any reset handling
 */
	if(__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == SET)
 8008b92:	4b9b      	ldr	r3, [pc, #620]	; (8008e00 <main+0x284>)
 8008b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d001      	beq.n	8008ba4 <main+0x28>
	{
	  BOR_Handler();
 8008ba0:	f7ff ffc0 	bl	8008b24 <BOR_Handler>
	}
	uint8_t flag = __HAL_RCC_GET_PORRST_FLAG();
 8008ba4:	4b96      	ldr	r3, [pc, #600]	; (8008e00 <main+0x284>)
 8008ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008baa:	0e9b      	lsrs	r3, r3, #26
 8008bac:	f003 0305 	and.w	r3, r3, #5
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d001      	beq.n	8008bb8 <main+0x3c>
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	e000      	b.n	8008bba <main+0x3e>
 8008bb8:	2300      	movs	r3, #0
 8008bba:	73fb      	strb	r3, [r7, #15]
	if(flag  == SET)
 8008bbc:	7bfb      	ldrb	r3, [r7, #15]
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d104      	bne.n	8008bcc <main+0x50>
	{
	  printf("Software Reset Detected. Initializing main program...\r\n");
 8008bc2:	4890      	ldr	r0, [pc, #576]	; (8008e04 <main+0x288>)
 8008bc4:	f001 fd16 	bl	800a5f4 <puts>
	  POR_Handler();
 8008bc8:	f7ff ff7c 	bl	8008ac4 <POR_Handler>
	   * If an interrupt occurred while the device was sleeping, check the
	   * flags to determine if this occurred
	   */

	  //check for interrupts on wake up pins during deep sleep
	  __HAL_RCC_PWR_CLK_ENABLE();
 8008bcc:	4a8c      	ldr	r2, [pc, #560]	; (8008e00 <main+0x284>)
 8008bce:	4b8c      	ldr	r3, [pc, #560]	; (8008e00 <main+0x284>)
 8008bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bd6:	6593      	str	r3, [r2, #88]	; 0x58
 8008bd8:	4b89      	ldr	r3, [pc, #548]	; (8008e00 <main+0x284>)
 8008bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008be0:	60bb      	str	r3, [r7, #8]
 8008be2:	68bb      	ldr	r3, [r7, #8]
	  if(__HAL_PWR_GET_FLAG(IMU_EVENT_WAKE_FLAG)|| __HAL_PWR_GET_FLAG(IRIDIUM_RING_WAKE_FLAG))
 8008be4:	4b88      	ldr	r3, [pc, #544]	; (8008e08 <main+0x28c>)
 8008be6:	691b      	ldr	r3, [r3, #16]
 8008be8:	f003 0310 	and.w	r3, r3, #16
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d105      	bne.n	8008bfc <main+0x80>
 8008bf0:	4b85      	ldr	r3, [pc, #532]	; (8008e08 <main+0x28c>)
 8008bf2:	691b      	ldr	r3, [r3, #16]
 8008bf4:	f003 0302 	and.w	r3, r3, #2
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d039      	beq.n	8008c70 <main+0xf4>
	  {
		  Current_State = __GET_PREV_STATE();			//get previous state from back up reg
 8008bfc:	4b83      	ldr	r3, [pc, #524]	; (8008e0c <main+0x290>)
 8008bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c00:	b2da      	uxtb	r2, r3
 8008c02:	4b83      	ldr	r3, [pc, #524]	; (8008e10 <main+0x294>)
 8008c04:	701a      	strb	r2, [r3, #0]
		  if(__HAL_PWR_GET_FLAG(IMU_EVENT_WAKE_FLAG))
 8008c06:	4b80      	ldr	r3, [pc, #512]	; (8008e08 <main+0x28c>)
 8008c08:	691b      	ldr	r3, [r3, #16]
 8008c0a:	f003 0310 	and.w	r3, r3, #16
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d004      	beq.n	8008c1c <main+0xa0>
		  {
			  __HAL_PWR_CLEAR_FLAG(IMU_EVENT_WAKE_FLAG);	//clear  flag in PWR SR
 8008c12:	4b7d      	ldr	r3, [pc, #500]	; (8008e08 <main+0x28c>)
 8008c14:	2210      	movs	r2, #16
 8008c16:	619a      	str	r2, [r3, #24]
			  Routine_ASYNC_IMU_EVENT();				//Perform IMU Event Detection Routine
 8008c18:	f000 f976 	bl	8008f08 <Routine_ASYNC_IMU_EVENT>
		  }
		  if(__HAL_PWR_GET_FLAG(IRIDIUM_RING_WAKE_FLAG))	//clear  flag in PWR SR
 8008c1c:	4b7a      	ldr	r3, [pc, #488]	; (8008e08 <main+0x28c>)
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	f003 0302 	and.w	r3, r3, #2
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d004      	beq.n	8008c32 <main+0xb6>
		  {
			__HAL_PWR_CLEAR_FLAG(IRIDIUM_RING_WAKE_FLAG);
 8008c28:	4b77      	ldr	r3, [pc, #476]	; (8008e08 <main+0x28c>)
 8008c2a:	2202      	movs	r2, #2
 8008c2c:	619a      	str	r2, [r3, #24]
			Routine_ASYNC_IRIDIUM_RX();
 8008c2e:	f000 f98d 	bl	8008f4c <Routine_ASYNC_IRIDIUM_RX>

		  }
		  if(Current_State == STATE_SLEEP)				//return to sleep if Interrupt event handled before wake up
 8008c32:	4b77      	ldr	r3, [pc, #476]	; (8008e10 <main+0x294>)
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	2b03      	cmp	r3, #3
 8008c38:	d10f      	bne.n	8008c5a <main+0xde>
		  {

			  printf("System Going Back To Sleep\r\n"); 	//check how long device was asleep for
 8008c3a:	4876      	ldr	r0, [pc, #472]	; (8008e14 <main+0x298>)
 8008c3c:	f001 fcda 	bl	800a5f4 <puts>
			  set_WUP_Pin(IMU_EVENT_WAKE_PIN, MODE_WUP);	//reenable wake up pins
 8008c40:	2100      	movs	r1, #0
 8008c42:	2010      	movs	r0, #16
 8008c44:	f7ff fd2a 	bl	800869c <set_WUP_Pin>
			  set_WUP_Pin(IRIDIUM_RING_WAKE_PIN, MODE_WUP);
 8008c48:	2100      	movs	r1, #0
 8008c4a:	2002      	movs	r0, #2
 8008c4c:	f7ff fd26 	bl	800869c <set_WUP_Pin>
			  Go_To_Sleep(STDBY,10);						//return to sleep
 8008c50:	210a      	movs	r1, #10
 8008c52:	2001      	movs	r0, #1
 8008c54:	f7ff fcea 	bl	800862c <Go_To_Sleep>
 8008c58:	e00a      	b.n	8008c70 <main+0xf4>
		  }
		  	 else
		  {

		  	  printf("Going Back to Main Loop:\r\n");		//if come from wake mode
 8008c5a:	486f      	ldr	r0, [pc, #444]	; (8008e18 <main+0x29c>)
 8008c5c:	f001 fcca 	bl	800a5f4 <puts>
			  __SET_CURRENT_STATE(STATE_ASYNCINT);
 8008c60:	4a6a      	ldr	r2, [pc, #424]	; (8008e0c <main+0x290>)
 8008c62:	4b6a      	ldr	r3, [pc, #424]	; (8008e0c <main+0x290>)
 8008c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c66:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008c6a:	f043 0307 	orr.w	r3, r3, #7
 8008c6e:	6513      	str	r3, [r2, #80]	; 0x50
	   * states are defined in the enum Buoy_State_typedef. The state check block performs the following routine
	   *
	   */

	  //enable access to back up registers
	  switch(__GET_PREV_STATE())
 8008c70:	4b66      	ldr	r3, [pc, #408]	; (8008e0c <main+0x290>)
 8008c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	3b01      	subs	r3, #1
 8008c78:	2b06      	cmp	r3, #6
 8008c7a:	d867      	bhi.n	8008d4c <main+0x1d0>
 8008c7c:	a201      	add	r2, pc, #4	; (adr r2, 8008c84 <main+0x108>)
 8008c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c82:	bf00      	nop
 8008c84:	08008ca1 	.word	0x08008ca1
 8008c88:	08008ca9 	.word	0x08008ca9
 8008c8c:	08008d03 	.word	0x08008d03
 8008c90:	08008d4d 	.word	0x08008d4d
 8008c94:	08008d4d 	.word	0x08008d4d
 8008c98:	08008d33 	.word	0x08008d33
 8008c9c:	08008ca1 	.word	0x08008ca1
	  {
	  	 case STATE_ASYNCINT:
	  	 case STATE_RESET:
	  	 //system encountered a power on reset, put peripherals here
	  	 Current_State = STATE_SAMPLE;
 8008ca0:	4b5b      	ldr	r3, [pc, #364]	; (8008e10 <main+0x294>)
 8008ca2:	2202      	movs	r2, #2
 8008ca4:	701a      	strb	r2, [r3, #0]
	  	 break;
 8008ca6:	e054      	b.n	8008d52 <main+0x1d6>

	  	 case STATE_SAMPLE:
	  	 //check how many samples have been recorded by the Buoy
	  	 sample_count = __GET_SAMPLE_COUNT();
 8008ca8:	4b58      	ldr	r3, [pc, #352]	; (8008e0c <main+0x290>)
 8008caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cac:	0a1b      	lsrs	r3, r3, #8
 8008cae:	b2da      	uxtb	r2, r3
 8008cb0:	4b5a      	ldr	r3, [pc, #360]	; (8008e1c <main+0x2a0>)
 8008cb2:	701a      	strb	r2, [r3, #0]
	  	 if(sample_count > 3)
 8008cb4:	4b59      	ldr	r3, [pc, #356]	; (8008e1c <main+0x2a0>)
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	2b03      	cmp	r3, #3
 8008cba:	d903      	bls.n	8008cc4 <main+0x148>
	  	 {
	  		 //set next Buoy State to Transmit
	  		 Current_State = STATE_TRANSMIT;
 8008cbc:	4b54      	ldr	r3, [pc, #336]	; (8008e10 <main+0x294>)
 8008cbe:	2206      	movs	r2, #6
 8008cc0:	701a      	strb	r2, [r3, #0]
	  		 Current_State = STATE_SLEEP;
	  		 __HAL_RCC_PWR_CLK_ENABLE();
	  		 __SET_CURRENT_STATE(Current_State);
	  		 __HAL_RCC_PWR_CLK_DISABLE();
	  	 }
	  	 break;
 8008cc2:	e046      	b.n	8008d52 <main+0x1d6>
	  		 Current_State = STATE_SLEEP;
 8008cc4:	4b52      	ldr	r3, [pc, #328]	; (8008e10 <main+0x294>)
 8008cc6:	2203      	movs	r2, #3
 8008cc8:	701a      	strb	r2, [r3, #0]
	  		 __HAL_RCC_PWR_CLK_ENABLE();
 8008cca:	4a4d      	ldr	r2, [pc, #308]	; (8008e00 <main+0x284>)
 8008ccc:	4b4c      	ldr	r3, [pc, #304]	; (8008e00 <main+0x284>)
 8008cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cd4:	6593      	str	r3, [r2, #88]	; 0x58
 8008cd6:	4b4a      	ldr	r3, [pc, #296]	; (8008e00 <main+0x284>)
 8008cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cde:	607b      	str	r3, [r7, #4]
 8008ce0:	687b      	ldr	r3, [r7, #4]
	  		 __SET_CURRENT_STATE(Current_State);
 8008ce2:	4a4a      	ldr	r2, [pc, #296]	; (8008e0c <main+0x290>)
 8008ce4:	4b49      	ldr	r3, [pc, #292]	; (8008e0c <main+0x290>)
 8008ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ce8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008cec:	4948      	ldr	r1, [pc, #288]	; (8008e10 <main+0x294>)
 8008cee:	7809      	ldrb	r1, [r1, #0]
 8008cf0:	430b      	orrs	r3, r1
 8008cf2:	6513      	str	r3, [r2, #80]	; 0x50
	  		 __HAL_RCC_PWR_CLK_DISABLE();
 8008cf4:	4a42      	ldr	r2, [pc, #264]	; (8008e00 <main+0x284>)
 8008cf6:	4b42      	ldr	r3, [pc, #264]	; (8008e00 <main+0x284>)
 8008cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cfe:	6593      	str	r3, [r2, #88]	; 0x58
	  	 break;
 8008d00:	e027      	b.n	8008d52 <main+0x1d6>

	  	 case STATE_SLEEP:
	  	hrtc.Instance = RTC;					 //attach RTC instance to handler
 8008d02:	4b47      	ldr	r3, [pc, #284]	; (8008e20 <main+0x2a4>)
 8008d04:	4a41      	ldr	r2, [pc, #260]	; (8008e0c <main+0x290>)
 8008d06:	601a      	str	r2, [r3, #0]
	  	HAL_PWREx_DisableInternalWakeUpLine();	 //clear wake up pending interrupt from internal wake up
 8008d08:	f7f9 fa6e 	bl	80021e8 <HAL_PWREx_DisableInternalWakeUpLine>
	  	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);		 //clear pending interrupt from ext wake up pins
 8008d0c:	4b3e      	ldr	r3, [pc, #248]	; (8008e08 <main+0x28c>)
 8008d0e:	221f      	movs	r2, #31
 8008d10:	619a      	str	r2, [r3, #24]
	  	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8008d12:	4b3d      	ldr	r3, [pc, #244]	; (8008e08 <main+0x28c>)
 8008d14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008d18:	619a      	str	r2, [r3, #24]
		set_WUP_Pin(IMU_EVENT_WAKE_PIN,MODE_EXTI); 	  	//reconfigure wake up pins
 8008d1a:	2101      	movs	r1, #1
 8008d1c:	2010      	movs	r0, #16
 8008d1e:	f7ff fcbd 	bl	800869c <set_WUP_Pin>
		set_WUP_Pin(IRIDIUM_RING_WAKE_PIN,MODE_EXTI);  	  	//set Current State to Sample
 8008d22:	2101      	movs	r1, #1
 8008d24:	2002      	movs	r0, #2
 8008d26:	f7ff fcb9 	bl	800869c <set_WUP_Pin>
	  	Current_State = STATE_SAMPLE;
 8008d2a:	4b39      	ldr	r3, [pc, #228]	; (8008e10 <main+0x294>)
 8008d2c:	2202      	movs	r2, #2
 8008d2e:	701a      	strb	r2, [r3, #0]
	  	 break;
 8008d30:	e00f      	b.n	8008d52 <main+0x1d6>

	  	 case STATE_TRANSMIT:
	  	 Current_State = STATE_SLEEP;
 8008d32:	4b37      	ldr	r3, [pc, #220]	; (8008e10 <main+0x294>)
 8008d34:	2203      	movs	r2, #3
 8008d36:	701a      	strb	r2, [r3, #0]
  		 __SET_CURRENT_STATE(Current_State);
 8008d38:	4a34      	ldr	r2, [pc, #208]	; (8008e0c <main+0x290>)
 8008d3a:	4b34      	ldr	r3, [pc, #208]	; (8008e0c <main+0x290>)
 8008d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d3e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008d42:	4933      	ldr	r1, [pc, #204]	; (8008e10 <main+0x294>)
 8008d44:	7809      	ldrb	r1, [r1, #0]
 8008d46:	430b      	orrs	r3, r1
 8008d48:	6513      	str	r3, [r2, #80]	; 0x50
	  	 break;
 8008d4a:	e002      	b.n	8008d52 <main+0x1d6>

	  	 //default case: reset state
	  	 default:
	  	 Current_State = STATE_RESET;
 8008d4c:	4b30      	ldr	r3, [pc, #192]	; (8008e10 <main+0x294>)
 8008d4e:	2201      	movs	r2, #1
 8008d50:	701a      	strb	r2, [r3, #0]
	  }
	  __HAL_RCC_PWR_CLK_DISABLE();
 8008d52:	4a2b      	ldr	r2, [pc, #172]	; (8008e00 <main+0x284>)
 8008d54:	4b2a      	ldr	r3, [pc, #168]	; (8008e00 <main+0x284>)
 8008d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d5c:	6593      	str	r3, [r2, #88]	; 0x58

	  /*
	   * Place Routine code Here
	   */
	  // SLEEP STATE
	  if(Current_State == STATE_SLEEP)
 8008d5e:	4b2c      	ldr	r3, [pc, #176]	; (8008e10 <main+0x294>)
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	2b03      	cmp	r3, #3
 8008d64:	d102      	bne.n	8008d6c <main+0x1f0>
	  {
		  Routine_STATE_SLEEP();
 8008d66:	f000 f933 	bl	8008fd0 <Routine_STATE_SLEEP>
 8008d6a:	e013      	b.n	8008d94 <main+0x218>
	  }
	  //RESET STATE
	  else if(Current_State == STATE_RESET)
 8008d6c:	4b28      	ldr	r3, [pc, #160]	; (8008e10 <main+0x294>)
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d102      	bne.n	8008d7a <main+0x1fe>
	  {
		  Routine_STATE_RESET();
 8008d74:	f000 f90e 	bl	8008f94 <Routine_STATE_RESET>
 8008d78:	e00c      	b.n	8008d94 <main+0x218>
	  }
	  //SAMPLE STATE
	  else if(Current_State == STATE_SAMPLE)
 8008d7a:	4b25      	ldr	r3, [pc, #148]	; (8008e10 <main+0x294>)
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	2b02      	cmp	r3, #2
 8008d80:	d102      	bne.n	8008d88 <main+0x20c>
	  {
		  Routine_STATE_SAMPLE();
 8008d82:	f000 f93f 	bl	8009004 <Routine_STATE_SAMPLE>
 8008d86:	e005      	b.n	8008d94 <main+0x218>
	  }
	  //TRANSMIT STATE
	  else if(Current_State == STATE_TRANSMIT)
 8008d88:	4b21      	ldr	r3, [pc, #132]	; (8008e10 <main+0x294>)
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	2b06      	cmp	r3, #6
 8008d8e:	d101      	bne.n	8008d94 <main+0x218>
	  {
		  Routine_STATE_TRANSMIT();
 8008d90:	f000 fa86 	bl	80092a0 <Routine_STATE_TRANSMIT>

//========================= 6. END OF ROUTINE FUNCTION ==========================//
	  /*
	   * After each routine has run, save state to the back up registers
	   */
	  __HAL_RCC_PWR_CLK_ENABLE();
 8008d94:	4a1a      	ldr	r2, [pc, #104]	; (8008e00 <main+0x284>)
 8008d96:	4b1a      	ldr	r3, [pc, #104]	; (8008e00 <main+0x284>)
 8008d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d9e:	6593      	str	r3, [r2, #88]	; 0x58
 8008da0:	4b17      	ldr	r3, [pc, #92]	; (8008e00 <main+0x284>)
 8008da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008da8:	603b      	str	r3, [r7, #0]
 8008daa:	683b      	ldr	r3, [r7, #0]
	  if(Current_State == STATE_SAMPLE)			//increment sample counter after each sampe
 8008dac:	4b18      	ldr	r3, [pc, #96]	; (8008e10 <main+0x294>)
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	2b02      	cmp	r3, #2
 8008db2:	d114      	bne.n	8008dde <main+0x262>
	  {
		  sample_count = __GET_SAMPLE_COUNT();
 8008db4:	4b15      	ldr	r3, [pc, #84]	; (8008e0c <main+0x290>)
 8008db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008db8:	0a1b      	lsrs	r3, r3, #8
 8008dba:	b2da      	uxtb	r2, r3
 8008dbc:	4b17      	ldr	r3, [pc, #92]	; (8008e1c <main+0x2a0>)
 8008dbe:	701a      	strb	r2, [r3, #0]
		  __SET_SAMPLE_COUNT(++sample_count);
 8008dc0:	4912      	ldr	r1, [pc, #72]	; (8008e0c <main+0x290>)
 8008dc2:	4b12      	ldr	r3, [pc, #72]	; (8008e0c <main+0x290>)
 8008dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	4a14      	ldr	r2, [pc, #80]	; (8008e1c <main+0x2a0>)
 8008dca:	7812      	ldrb	r2, [r2, #0]
 8008dcc:	3201      	adds	r2, #1
 8008dce:	b2d0      	uxtb	r0, r2
 8008dd0:	4a12      	ldr	r2, [pc, #72]	; (8008e1c <main+0x2a0>)
 8008dd2:	7010      	strb	r0, [r2, #0]
 8008dd4:	4a11      	ldr	r2, [pc, #68]	; (8008e1c <main+0x2a0>)
 8008dd6:	7812      	ldrb	r2, [r2, #0]
 8008dd8:	0212      	lsls	r2, r2, #8
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	650b      	str	r3, [r1, #80]	; 0x50
	  }
	  __SET_CURRENT_STATE(Current_State);	    //write value to back up register
 8008dde:	4a0b      	ldr	r2, [pc, #44]	; (8008e0c <main+0x290>)
 8008de0:	4b0a      	ldr	r3, [pc, #40]	; (8008e0c <main+0x290>)
 8008de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008de4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008de8:	4909      	ldr	r1, [pc, #36]	; (8008e10 <main+0x294>)
 8008dea:	7809      	ldrb	r1, [r1, #0]
 8008dec:	430b      	orrs	r3, r1
 8008dee:	6513      	str	r3, [r2, #80]	; 0x50
	  __HAL_RCC_PWR_CLK_DISABLE();
 8008df0:	4a03      	ldr	r2, [pc, #12]	; (8008e00 <main+0x284>)
 8008df2:	4b03      	ldr	r3, [pc, #12]	; (8008e00 <main+0x284>)
 8008df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008df6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008dfa:	6593      	str	r3, [r2, #88]	; 0x58
	  __HAL_RCC_PWR_CLK_ENABLE();
 8008dfc:	e6e6      	b.n	8008bcc <main+0x50>
 8008dfe:	bf00      	nop
 8008e00:	40021000 	.word	0x40021000
 8008e04:	08010b58 	.word	0x08010b58
 8008e08:	40007000 	.word	0x40007000
 8008e0c:	40002800 	.word	0x40002800
 8008e10:	200021c8 	.word	0x200021c8
 8008e14:	08010b90 	.word	0x08010b90
 8008e18:	08010bac 	.word	0x08010bac
 8008e1c:	20002141 	.word	0x20002141
 8008e20:	200021cc 	.word	0x200021cc

08008e24 <MX_RTC_Init>:
//==================== 7. Configuration & Initialization Functions ====================//

/* Private functions */

static void MX_RTC_Init(void)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b086      	sub	sp, #24
 8008e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8008e2a:	1d3b      	adds	r3, r7, #4
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	601a      	str	r2, [r3, #0]
 8008e30:	605a      	str	r2, [r3, #4]
 8008e32:	609a      	str	r2, [r3, #8]
 8008e34:	60da      	str	r2, [r3, #12]
 8008e36:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8008e38:	2300      	movs	r3, #0
 8008e3a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8008e3c:	4b2d      	ldr	r3, [pc, #180]	; (8008ef4 <MX_RTC_Init+0xd0>)
 8008e3e:	4a2e      	ldr	r2, [pc, #184]	; (8008ef8 <MX_RTC_Init+0xd4>)
 8008e40:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8008e42:	4b2c      	ldr	r3, [pc, #176]	; (8008ef4 <MX_RTC_Init+0xd0>)
 8008e44:	2200      	movs	r2, #0
 8008e46:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8008e48:	4b2a      	ldr	r3, [pc, #168]	; (8008ef4 <MX_RTC_Init+0xd0>)
 8008e4a:	227f      	movs	r2, #127	; 0x7f
 8008e4c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8008e4e:	4b29      	ldr	r3, [pc, #164]	; (8008ef4 <MX_RTC_Init+0xd0>)
 8008e50:	22ff      	movs	r2, #255	; 0xff
 8008e52:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008e54:	4b27      	ldr	r3, [pc, #156]	; (8008ef4 <MX_RTC_Init+0xd0>)
 8008e56:	2200      	movs	r2, #0
 8008e58:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008e5a:	4b26      	ldr	r3, [pc, #152]	; (8008ef4 <MX_RTC_Init+0xd0>)
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008e60:	4b24      	ldr	r3, [pc, #144]	; (8008ef4 <MX_RTC_Init+0xd0>)
 8008e62:	2200      	movs	r2, #0
 8008e64:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008e66:	4b23      	ldr	r3, [pc, #140]	; (8008ef4 <MX_RTC_Init+0xd0>)
 8008e68:	2200      	movs	r2, #0
 8008e6a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008e6c:	4821      	ldr	r0, [pc, #132]	; (8008ef4 <MX_RTC_Init+0xd0>)
 8008e6e:	f7fa fcbd 	bl	80037ec <HAL_RTC_Init>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d001      	beq.n	8008e7c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8008e78:	f000 f840 	bl	8008efc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 12;
 8008e7c:	230c      	movs	r3, #12
 8008e7e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 57;
 8008e80:	2339      	movs	r3, #57	; 0x39
 8008e82:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8008e84:	2300      	movs	r3, #0
 8008e86:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8008e90:	1d3b      	adds	r3, r7, #4
 8008e92:	2200      	movs	r2, #0
 8008e94:	4619      	mov	r1, r3
 8008e96:	4817      	ldr	r0, [pc, #92]	; (8008ef4 <MX_RTC_Init+0xd0>)
 8008e98:	f7fa fd23 	bl	80038e2 <HAL_RTC_SetTime>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d001      	beq.n	8008ea6 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8008ea2:	f000 f82b 	bl	8008efc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8008ea6:	2305      	movs	r3, #5
 8008ea8:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8008eaa:	2305      	movs	r3, #5
 8008eac:	707b      	strb	r3, [r7, #1]
  sDate.Date = 8;
 8008eae:	2308      	movs	r3, #8
 8008eb0:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8008eb6:	463b      	mov	r3, r7
 8008eb8:	2200      	movs	r2, #0
 8008eba:	4619      	mov	r1, r3
 8008ebc:	480d      	ldr	r0, [pc, #52]	; (8008ef4 <MX_RTC_Init+0xd0>)
 8008ebe:	f7fa fdad 	bl	8003a1c <HAL_RTC_SetDate>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d001      	beq.n	8008ecc <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8008ec8:	f000 f818 	bl	8008efc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  //Configure RTC_Wake up time for range 250ms - 36 Hours
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc,RTC_FLAG_WUTF))
 8008ecc:	4b09      	ldr	r3, [pc, #36]	; (8008ef4 <MX_RTC_Init+0xd0>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d008      	beq.n	8008eec <MX_RTC_Init+0xc8>
  {
	  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc,RTC_FLAG_WUTF);
 8008eda:	4b06      	ldr	r3, [pc, #24]	; (8008ef4 <MX_RTC_Init+0xd0>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a05      	ldr	r2, [pc, #20]	; (8008ef4 <MX_RTC_Init+0xd0>)
 8008ee0:	6812      	ldr	r2, [r2, #0]
 8008ee2:	68d2      	ldr	r2, [r2, #12]
 8008ee4:	b2d2      	uxtb	r2, r2
 8008ee6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8008eea:	60da      	str	r2, [r3, #12]
  }

  /* USER CODE END RTC_Init 2 */

}
 8008eec:	bf00      	nop
 8008eee:	3718      	adds	r7, #24
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}
 8008ef4:	200021cc 	.word	0x200021cc
 8008ef8:	40002800 	.word	0x40002800

08008efc <Error_Handler>:
//====================================== 7. END ======================================//

//==================================== 8. Handlers ===================================//

void Error_Handler(void)
{
 8008efc:	b480      	push	{r7}
 8008efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008f00:	bf00      	nop
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bc80      	pop	{r7}
 8008f06:	4770      	bx	lr

08008f08 <Routine_ASYNC_IMU_EVENT>:
//===================================== 8. END ======================================//

//=============================== 9. Routines =======================================//

static void Routine_ASYNC_IMU_EVENT(void)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
	 printf("IMU Event Detected: Sampling...");
 8008f0e:	480d      	ldr	r0, [pc, #52]	; (8008f44 <Routine_ASYNC_IMU_EVENT+0x3c>)
 8008f10:	f001 faf8 	bl	800a504 <printf>
	 for (int i = 0; i < 50; ++i)
 8008f14:	2300      	movs	r3, #0
 8008f16:	607b      	str	r3, [r7, #4]
 8008f18:	e00a      	b.n	8008f30 <Routine_ASYNC_IMU_EVENT+0x28>
	 {
	 	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8008f1a:	2120      	movs	r1, #32
 8008f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008f20:	f7f9 f871 	bl	8002006 <HAL_GPIO_TogglePin>
	 	HAL_Delay(100);
 8008f24:	2064      	movs	r0, #100	; 0x64
 8008f26:	f7f8 f8b9 	bl	800109c <HAL_Delay>
	 for (int i = 0; i < 50; ++i)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	607b      	str	r3, [r7, #4]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2b31      	cmp	r3, #49	; 0x31
 8008f34:	ddf1      	ble.n	8008f1a <Routine_ASYNC_IMU_EVENT+0x12>
	 }
	 printf("Done\r\n");
 8008f36:	4804      	ldr	r0, [pc, #16]	; (8008f48 <Routine_ASYNC_IMU_EVENT+0x40>)
 8008f38:	f001 fb5c 	bl	800a5f4 <puts>
}
 8008f3c:	bf00      	nop
 8008f3e:	3708      	adds	r7, #8
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	08010bc8 	.word	0x08010bc8
 8008f48:	08010be8 	.word	0x08010be8

08008f4c <Routine_ASYNC_IRIDIUM_RX>:

static void Routine_ASYNC_IRIDIUM_RX(void)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
	printf("Incoming Message from Satellite: Receiving...");
 8008f52:	480e      	ldr	r0, [pc, #56]	; (8008f8c <Routine_ASYNC_IRIDIUM_RX+0x40>)
 8008f54:	f001 fad6 	bl	800a504 <printf>
	for (int i = 0; i < 10; ++i)
 8008f58:	2300      	movs	r3, #0
 8008f5a:	607b      	str	r3, [r7, #4]
 8008f5c:	e00b      	b.n	8008f76 <Routine_ASYNC_IRIDIUM_RX+0x2a>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8008f5e:	2120      	movs	r1, #32
 8008f60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008f64:	f7f9 f84f 	bl	8002006 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8008f68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008f6c:	f7f8 f896 	bl	800109c <HAL_Delay>
	for (int i = 0; i < 10; ++i)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	3301      	adds	r3, #1
 8008f74:	607b      	str	r3, [r7, #4]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2b09      	cmp	r3, #9
 8008f7a:	ddf0      	ble.n	8008f5e <Routine_ASYNC_IRIDIUM_RX+0x12>
	}
	printf("Message Received!\r\n");
 8008f7c:	4804      	ldr	r0, [pc, #16]	; (8008f90 <Routine_ASYNC_IRIDIUM_RX+0x44>)
 8008f7e:	f001 fb39 	bl	800a5f4 <puts>
}
 8008f82:	bf00      	nop
 8008f84:	3708      	adds	r7, #8
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	08010bf0 	.word	0x08010bf0
 8008f90:	08010c20 	.word	0x08010c20

08008f94 <Routine_STATE_RESET>:

static void Routine_STATE_RESET(void)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	af00      	add	r7, sp, #0
	 //initialise RTC
	 MX_RTC_Init();
 8008f98:	f7ff ff44 	bl	8008e24 <MX_RTC_Init>
	 //Enable Interrupt pins as EXTI Outputs
	 set_WUP_Pin(IRIDIUM_RING_WAKE_PIN,MODE_EXTI);
 8008f9c:	2101      	movs	r1, #1
 8008f9e:	2002      	movs	r0, #2
 8008fa0:	f7ff fb7c 	bl	800869c <set_WUP_Pin>
	 set_WUP_Pin(IMU_EVENT_WAKE_PIN,MODE_EXTI);
 8008fa4:	2101      	movs	r1, #1
 8008fa6:	2010      	movs	r0, #16
 8008fa8:	f7ff fb78 	bl	800869c <set_WUP_Pin>
	 printf("All Systems Online!\r\n");
 8008fac:	4806      	ldr	r0, [pc, #24]	; (8008fc8 <Routine_STATE_RESET+0x34>)
 8008fae:	f001 fb21 	bl	800a5f4 <puts>
	 printf("Current State: RESET \t Next State: SAMPLE\r\n");
 8008fb2:	4806      	ldr	r0, [pc, #24]	; (8008fcc <Routine_STATE_RESET+0x38>)
 8008fb4:	f001 fb1e 	bl	800a5f4 <puts>
	 HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,SET);
 8008fb8:	2201      	movs	r2, #1
 8008fba:	2120      	movs	r1, #32
 8008fbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008fc0:	f7f9 f80a 	bl	8001fd8 <HAL_GPIO_WritePin>


}
 8008fc4:	bf00      	nop
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	08010c34 	.word	0x08010c34
 8008fcc:	08010c4c 	.word	0x08010c4c

08008fd0 <Routine_STATE_SLEEP>:

static void Routine_STATE_SLEEP(void)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	af00      	add	r7, sp, #0
	  printf("Current State: SLEEP \t Next State: SAMPLE\r\n");
 8008fd4:	4809      	ldr	r0, [pc, #36]	; (8008ffc <Routine_STATE_SLEEP+0x2c>)
 8008fd6:	f001 fb0d 	bl	800a5f4 <puts>
	  printf("Good Night! \r\n");
 8008fda:	4809      	ldr	r0, [pc, #36]	; (8009000 <Routine_STATE_SLEEP+0x30>)
 8008fdc:	f001 fb0a 	bl	800a5f4 <puts>
	  set_WUP_Pin(IRIDIUM_RING_WAKE_PIN,MODE_WUP);
 8008fe0:	2100      	movs	r1, #0
 8008fe2:	2002      	movs	r0, #2
 8008fe4:	f7ff fb5a 	bl	800869c <set_WUP_Pin>
	  set_WUP_Pin(IMU_EVENT_WAKE_PIN,MODE_WUP);
 8008fe8:	2100      	movs	r1, #0
 8008fea:	2010      	movs	r0, #16
 8008fec:	f7ff fb56 	bl	800869c <set_WUP_Pin>
	  Go_To_Sleep(STDBY,10);
 8008ff0:	210a      	movs	r1, #10
 8008ff2:	2001      	movs	r0, #1
 8008ff4:	f7ff fb1a 	bl	800862c <Go_To_Sleep>
}
 8008ff8:	bf00      	nop
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	08010c78 	.word	0x08010c78
 8009000:	08010ca4 	.word	0x08010ca4

08009004 <Routine_STATE_SAMPLE>:

static void Routine_STATE_SAMPLE(void)
{
 8009004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009008:	b09f      	sub	sp, #124	; 0x7c
 800900a:	af04      	add	r7, sp, #16
	  //GPS  Init Routine

	  sample_count = __GET_SAMPLE_COUNT();
 800900c:	4b94      	ldr	r3, [pc, #592]	; (8009260 <Routine_STATE_SAMPLE+0x25c>)
 800900e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009010:	0a1b      	lsrs	r3, r3, #8
 8009012:	b2da      	uxtb	r2, r3
 8009014:	4b93      	ldr	r3, [pc, #588]	; (8009264 <Routine_STATE_SAMPLE+0x260>)
 8009016:	701a      	strb	r2, [r3, #0]
	  if(sample_count < 3)
 8009018:	4b92      	ldr	r3, [pc, #584]	; (8009264 <Routine_STATE_SAMPLE+0x260>)
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	2b02      	cmp	r3, #2
 800901e:	d803      	bhi.n	8009028 <Routine_STATE_SAMPLE+0x24>
	  {
		  printf("Current State: SAMPLE \t Next State: SLEEP\r\n");
 8009020:	4891      	ldr	r0, [pc, #580]	; (8009268 <Routine_STATE_SAMPLE+0x264>)
 8009022:	f001 fae7 	bl	800a5f4 <puts>
 8009026:	e002      	b.n	800902e <Routine_STATE_SAMPLE+0x2a>
	  } else
	  {
		  printf("Current State: SAMPLE \t Next State: TRANS\r\n");
 8009028:	4890      	ldr	r0, [pc, #576]	; (800926c <Routine_STATE_SAMPLE+0x268>)
 800902a:	f001 fae3 	bl	800a5f4 <puts>
	  }
	  //TODO: SAMPLE SENSORS:
	  /* Attempt to initialize sensor within a number of retries */
	  uint8_t retries = 0;
 800902e:	2300      	movs	r3, #0
 8009030:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	  do
	  {
		  //initialise gps peripherals and begin comms on sensor instance
		  if(init_GPS(&hgps)== GPS_Init_OK)
 8009034:	488e      	ldr	r0, [pc, #568]	; (8009270 <Routine_STATE_SAMPLE+0x26c>)
 8009036:	f7fe fbeb 	bl	8007810 <init_GPS>
 800903a:	4603      	mov	r3, r0
 800903c:	2b01      	cmp	r3, #1
 800903e:	d106      	bne.n	800904e <Routine_STATE_SAMPLE+0x4a>
		  {
			 printf("GPS Online! Acquiring Signal...\r\n");
 8009040:	488c      	ldr	r0, [pc, #560]	; (8009274 <Routine_STATE_SAMPLE+0x270>)
 8009042:	f001 fad7 	bl	800a5f4 <puts>
			 GPS_On = 1;
 8009046:	4b8c      	ldr	r3, [pc, #560]	; (8009278 <Routine_STATE_SAMPLE+0x274>)
 8009048:	2201      	movs	r2, #1
 800904a:	701a      	strb	r2, [r3, #0]
			 break;
 800904c:	e00b      	b.n	8009066 <Routine_STATE_SAMPLE+0x62>
		  }
		deinit_GPS(&hgps);
 800904e:	4888      	ldr	r0, [pc, #544]	; (8009270 <Routine_STATE_SAMPLE+0x26c>)
 8009050:	f7fe fc6e 	bl	8007930 <deinit_GPS>
		retries++;
 8009054:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009058:	3301      	adds	r3, #1
 800905a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	  }
	  while (retries < GPS_INIT_RETRIES);
 800905e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009062:	2b63      	cmp	r3, #99	; 0x63
 8009064:	d9e6      	bls.n	8009034 <Routine_STATE_SAMPLE+0x30>

	  // Sample Routine

	  if(GPS_On)
 8009066:	4b84      	ldr	r3, [pc, #528]	; (8009278 <Routine_STATE_SAMPLE+0x274>)
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	2b00      	cmp	r3, #0
 800906c:	f000 80ec 	beq.w	8009248 <Routine_STATE_SAMPLE+0x244>
	  {
		  GPS_Data_t Gdata[5];
		  for (uint8_t i = 0; i < 5; ++i)
 8009070:	2300      	movs	r3, #0
 8009072:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8009076:	e0e1      	b.n	800923c <Routine_STATE_SAMPLE+0x238>
		  {

			  while(packet_full != 7)
			  {
				  GPS_Log_Begin(&hgps);
 8009078:	487d      	ldr	r0, [pc, #500]	; (8009270 <Routine_STATE_SAMPLE+0x26c>)
 800907a:	f7fe f865 	bl	8007148 <GPS_Log_Begin>
			  while(packet_full != 7)
 800907e:	4b7f      	ldr	r3, [pc, #508]	; (800927c <Routine_STATE_SAMPLE+0x278>)
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	2b07      	cmp	r3, #7
 8009084:	d1f8      	bne.n	8009078 <Routine_STATE_SAMPLE+0x74>
			  }
			  GPS_Log_Stop(&hgps);
 8009086:	487a      	ldr	r0, [pc, #488]	; (8009270 <Routine_STATE_SAMPLE+0x26c>)
 8009088:	f7fe f8b4 	bl	80071f4 <GPS_Log_Stop>
			  printf("Logging Data...\r\n");
 800908c:	487c      	ldr	r0, [pc, #496]	; (8009280 <Routine_STATE_SAMPLE+0x27c>)
 800908e:	f001 fab1 	bl	800a5f4 <puts>
			  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,SET);
 8009092:	2201      	movs	r2, #1
 8009094:	2120      	movs	r1, #32
 8009096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800909a:	f7f8 ff9d 	bl	8001fd8 <HAL_GPIO_WritePin>
			  Gdata[i].coordinates = GPS_coord;
 800909e:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 80090a2:	4613      	mov	r3, r2
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	4413      	add	r3, r2
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80090ae:	4413      	add	r3, r2
 80090b0:	3b68      	subs	r3, #104	; 0x68
 80090b2:	4a74      	ldr	r2, [pc, #464]	; (8009284 <Routine_STATE_SAMPLE+0x280>)
 80090b4:	3304      	adds	r3, #4
 80090b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80090ba:	e883 0003 	stmia.w	r3, {r0, r1}
			  Gdata[i].Etime = eTime;
 80090be:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 80090c2:	4b71      	ldr	r3, [pc, #452]	; (8009288 <Routine_STATE_SAMPLE+0x284>)
 80090c4:	6819      	ldr	r1, [r3, #0]
 80090c6:	4613      	mov	r3, r2
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	4413      	add	r3, r2
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80090d2:	4413      	add	r3, r2
 80090d4:	3b68      	subs	r3, #104	; 0x68
 80090d6:	6019      	str	r1, [r3, #0]
			  Gdata[i].diag = diag;
 80090d8:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 80090dc:	4613      	mov	r3, r2
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	4413      	add	r3, r2
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80090e8:	4413      	add	r3, r2
 80090ea:	3b60      	subs	r3, #96	; 0x60
 80090ec:	4a67      	ldr	r2, [pc, #412]	; (800928c <Routine_STATE_SAMPLE+0x288>)
 80090ee:	3304      	adds	r3, #4
 80090f0:	6810      	ldr	r0, [r2, #0]
 80090f2:	6851      	ldr	r1, [r2, #4]
 80090f4:	c303      	stmia	r3!, {r0, r1}
			  printf("local time: %lu, position: %f Lat, %f long\r\n", Gdata[i].Etime, Gdata[i].coordinates.lat, Gdata[i].coordinates.longi);
 80090f6:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 80090fa:	4613      	mov	r3, r2
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	4413      	add	r3, r2
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8009106:	4413      	add	r3, r2
 8009108:	3b68      	subs	r3, #104	; 0x68
 800910a:	681d      	ldr	r5, [r3, #0]
 800910c:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8009110:	4613      	mov	r3, r2
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	4413      	add	r3, r2
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800911c:	4413      	add	r3, r2
 800911e:	3b64      	subs	r3, #100	; 0x64
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4618      	mov	r0, r3
 8009124:	f7f7 fa20 	bl	8000568 <__aeabi_f2d>
 8009128:	4680      	mov	r8, r0
 800912a:	4689      	mov	r9, r1
 800912c:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8009130:	4613      	mov	r3, r2
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	4413      	add	r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800913c:	4413      	add	r3, r2
 800913e:	3b60      	subs	r3, #96	; 0x60
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4618      	mov	r0, r3
 8009144:	f7f7 fa10 	bl	8000568 <__aeabi_f2d>
 8009148:	4603      	mov	r3, r0
 800914a:	460c      	mov	r4, r1
 800914c:	e88d 0018 	stmia.w	sp, {r3, r4}
 8009150:	4642      	mov	r2, r8
 8009152:	464b      	mov	r3, r9
 8009154:	4629      	mov	r1, r5
 8009156:	484e      	ldr	r0, [pc, #312]	; (8009290 <Routine_STATE_SAMPLE+0x28c>)
 8009158:	f001 f9d4 	bl	800a504 <printf>
			  printf("HDOP = %d.%d, \t PDOP = %d.%d, VDOP = %d.%d\r\n",  Gdata[i].diag.HDOP.digit, Gdata[i].diag.HDOP.precision,  Gdata[i].diag.PDOP.digit, Gdata[i].diag.PDOP.precision,  Gdata[i].diag.VDOP.digit, Gdata[i].diag.VDOP.precision);
 800915c:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8009160:	4613      	mov	r3, r2
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	4413      	add	r3, r2
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800916c:	4413      	add	r3, r2
 800916e:	3b5a      	subs	r3, #90	; 0x5a
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	461c      	mov	r4, r3
 8009174:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8009178:	4613      	mov	r3, r2
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	4413      	add	r3, r2
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8009184:	4413      	add	r3, r2
 8009186:	3b59      	subs	r3, #89	; 0x59
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	461d      	mov	r5, r3
 800918c:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8009190:	4613      	mov	r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	4413      	add	r3, r2
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800919c:	4413      	add	r3, r2
 800919e:	3b5c      	subs	r3, #92	; 0x5c
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	461e      	mov	r6, r3
 80091a4:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 80091a8:	4613      	mov	r3, r2
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	4413      	add	r3, r2
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80091b4:	4413      	add	r3, r2
 80091b6:	3b5b      	subs	r3, #91	; 0x5b
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	4619      	mov	r1, r3
 80091bc:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 80091c0:	4613      	mov	r3, r2
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	4413      	add	r3, r2
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80091cc:	4413      	add	r3, r2
 80091ce:	3b58      	subs	r3, #88	; 0x58
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	4618      	mov	r0, r3
 80091d4:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 80091d8:	4613      	mov	r3, r2
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	4413      	add	r3, r2
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80091e4:	4413      	add	r3, r2
 80091e6:	3b57      	subs	r3, #87	; 0x57
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	9302      	str	r3, [sp, #8]
 80091ec:	9001      	str	r0, [sp, #4]
 80091ee:	9100      	str	r1, [sp, #0]
 80091f0:	4633      	mov	r3, r6
 80091f2:	462a      	mov	r2, r5
 80091f4:	4621      	mov	r1, r4
 80091f6:	4827      	ldr	r0, [pc, #156]	; (8009294 <Routine_STATE_SAMPLE+0x290>)
 80091f8:	f001 f984 	bl	800a504 <printf>
			  printf("Number of Satellites %d, Fix Type = %d\r\n", Gdata[i].diag.num_sats, Gdata[i].diag.fix_type);
 80091fc:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8009200:	4613      	mov	r3, r2
 8009202:	009b      	lsls	r3, r3, #2
 8009204:	4413      	add	r3, r2
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800920c:	4413      	add	r3, r2
 800920e:	3b56      	subs	r3, #86	; 0x56
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	4619      	mov	r1, r3
 8009214:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8009218:	4613      	mov	r3, r2
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	4413      	add	r3, r2
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8009224:	4413      	add	r3, r2
 8009226:	3b55      	subs	r3, #85	; 0x55
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	461a      	mov	r2, r3
 800922c:	481a      	ldr	r0, [pc, #104]	; (8009298 <Routine_STATE_SAMPLE+0x294>)
 800922e:	f001 f969 	bl	800a504 <printf>
		  for (uint8_t i = 0; i < 5; ++i)
 8009232:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8009236:	3301      	adds	r3, #1
 8009238:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800923c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8009240:	2b04      	cmp	r3, #4
 8009242:	f67f af1c 	bls.w	800907e <Routine_STATE_SAMPLE+0x7a>
 8009246:	e002      	b.n	800924e <Routine_STATE_SAMPLE+0x24a>
		  }
	  }else
	  {
		  printf("Error GPS Not Found!\r\n");
 8009248:	4814      	ldr	r0, [pc, #80]	; (800929c <Routine_STATE_SAMPLE+0x298>)
 800924a:	f001 f9d3 	bl	800a5f4 <puts>
	  }
	  //de-init GPS
	  deinit_GPS(&hgps);
 800924e:	4808      	ldr	r0, [pc, #32]	; (8009270 <Routine_STATE_SAMPLE+0x26c>)
 8009250:	f7fe fb6e 	bl	8007930 <deinit_GPS>
}
 8009254:	bf00      	nop
 8009256:	376c      	adds	r7, #108	; 0x6c
 8009258:	46bd      	mov	sp, r7
 800925a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800925e:	bf00      	nop
 8009260:	40002800 	.word	0x40002800
 8009264:	20002141 	.word	0x20002141
 8009268:	08010cb4 	.word	0x08010cb4
 800926c:	08010ce0 	.word	0x08010ce0
 8009270:	20000798 	.word	0x20000798
 8009274:	08010d0c 	.word	0x08010d0c
 8009278:	200006e4 	.word	0x200006e4
 800927c:	200007c4 	.word	0x200007c4
 8009280:	08010d30 	.word	0x08010d30
 8009284:	200007c8 	.word	0x200007c8
 8009288:	200007c0 	.word	0x200007c0
 800928c:	200007b4 	.word	0x200007b4
 8009290:	08010d44 	.word	0x08010d44
 8009294:	08010d74 	.word	0x08010d74
 8009298:	08010da4 	.word	0x08010da4
 800929c:	08010dd0 	.word	0x08010dd0

080092a0 <Routine_STATE_TRANSMIT>:

static void Routine_STATE_TRANSMIT(void)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
	  printf("Current State: TRANS \t Next State: SLEEP\r\n");
 80092a6:	4817      	ldr	r0, [pc, #92]	; (8009304 <Routine_STATE_TRANSMIT+0x64>)
 80092a8:	f001 f9a4 	bl	800a5f4 <puts>
	  printf("Transmitting Package...");
 80092ac:	4816      	ldr	r0, [pc, #88]	; (8009308 <Routine_STATE_TRANSMIT+0x68>)
 80092ae:	f001 f929 	bl	800a504 <printf>
	  for (int var = 0; var < 6; ++var)
 80092b2:	2300      	movs	r3, #0
 80092b4:	607b      	str	r3, [r7, #4]
 80092b6:	e015      	b.n	80092e4 <Routine_STATE_TRANSMIT+0x44>
	  {
		  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,SET);
 80092b8:	2201      	movs	r2, #1
 80092ba:	2120      	movs	r1, #32
 80092bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80092c0:	f7f8 fe8a 	bl	8001fd8 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 80092c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80092c8:	f7f7 fee8 	bl	800109c <HAL_Delay>
		  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,RESET);
 80092cc:	2200      	movs	r2, #0
 80092ce:	2120      	movs	r1, #32
 80092d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80092d4:	f7f8 fe80 	bl	8001fd8 <HAL_GPIO_WritePin>
		  HAL_Delay(250);
 80092d8:	20fa      	movs	r0, #250	; 0xfa
 80092da:	f7f7 fedf 	bl	800109c <HAL_Delay>
	  for (int var = 0; var < 6; ++var)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	3301      	adds	r3, #1
 80092e2:	607b      	str	r3, [r7, #4]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2b05      	cmp	r3, #5
 80092e8:	dde6      	ble.n	80092b8 <Routine_STATE_TRANSMIT+0x18>
	  }
	  printf("Done!\r\n");
 80092ea:	4808      	ldr	r0, [pc, #32]	; (800930c <Routine_STATE_TRANSMIT+0x6c>)
 80092ec:	f001 f982 	bl	800a5f4 <puts>
	  //reset sample count
	  __SET_SAMPLE_COUNT(0);
 80092f0:	4a07      	ldr	r2, [pc, #28]	; (8009310 <Routine_STATE_TRANSMIT+0x70>)
 80092f2:	4b07      	ldr	r3, [pc, #28]	; (8009310 <Routine_STATE_TRANSMIT+0x70>)
 80092f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	6513      	str	r3, [r2, #80]	; 0x50
}
 80092fa:	bf00      	nop
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	08010de8 	.word	0x08010de8
 8009308:	08010e14 	.word	0x08010e14
 800930c:	08010e2c 	.word	0x08010e2c
 8009310:	40002800 	.word	0x40002800

08009314 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8009314:	f8df d034 	ldr.w	sp, [pc, #52]	; 800934c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8009318:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800931a:	e003      	b.n	8009324 <LoopCopyDataInit>

0800931c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800931c:	4b0c      	ldr	r3, [pc, #48]	; (8009350 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800931e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8009320:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8009322:	3104      	adds	r1, #4

08009324 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8009324:	480b      	ldr	r0, [pc, #44]	; (8009354 <LoopForever+0xa>)
	ldr	r3, =_edata
 8009326:	4b0c      	ldr	r3, [pc, #48]	; (8009358 <LoopForever+0xe>)
	adds	r2, r0, r1
 8009328:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800932a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800932c:	d3f6      	bcc.n	800931c <CopyDataInit>
	ldr	r2, =_sbss
 800932e:	4a0b      	ldr	r2, [pc, #44]	; (800935c <LoopForever+0x12>)
	b	LoopFillZerobss
 8009330:	e002      	b.n	8009338 <LoopFillZerobss>

08009332 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8009332:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8009334:	f842 3b04 	str.w	r3, [r2], #4

08009338 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8009338:	4b09      	ldr	r3, [pc, #36]	; (8009360 <LoopForever+0x16>)
	cmp	r2, r3
 800933a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800933c:	d3f9      	bcc.n	8009332 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800933e:	f000 faf7 	bl	8009930 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009342:	f000 fb2b 	bl	800999c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8009346:	f7ff fc19 	bl	8008b7c <main>

0800934a <LoopForever>:

LoopForever:
    b LoopForever
 800934a:	e7fe      	b.n	800934a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800934c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8009350:	080112d8 	.word	0x080112d8
	ldr	r0, =_sdata
 8009354:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8009358:	200006c8 	.word	0x200006c8
	ldr	r2, =_sbss
 800935c:	200006c8 	.word	0x200006c8
	ldr	r3, = _ebss
 8009360:	20002200 	.word	0x20002200

08009364 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009364:	e7fe      	b.n	8009364 <ADC1_2_IRQHandler>
	...

08009368 <HAL_MspInit>:
  * @brief  Initialize the Global MSP.
  * @param  None
  * @retval None
  */
void HAL_MspInit(void)
{
 8009368:	b480      	push	{r7}
 800936a:	b083      	sub	sp, #12
 800936c:	af00      	add	r7, sp, #0
  /* NOTE : This function is generated automatically by STM32CubeMX and eventually  
            modified by the user
   */ 
	  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800936e:	4a0e      	ldr	r2, [pc, #56]	; (80093a8 <HAL_MspInit+0x40>)
 8009370:	4b0d      	ldr	r3, [pc, #52]	; (80093a8 <HAL_MspInit+0x40>)
 8009372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009374:	f043 0301 	orr.w	r3, r3, #1
 8009378:	6613      	str	r3, [r2, #96]	; 0x60
 800937a:	4b0b      	ldr	r3, [pc, #44]	; (80093a8 <HAL_MspInit+0x40>)
 800937c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800937e:	f003 0301 	and.w	r3, r3, #1
 8009382:	607b      	str	r3, [r7, #4]
 8009384:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_PWR_CLK_ENABLE();
 8009386:	4a08      	ldr	r2, [pc, #32]	; (80093a8 <HAL_MspInit+0x40>)
 8009388:	4b07      	ldr	r3, [pc, #28]	; (80093a8 <HAL_MspInit+0x40>)
 800938a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800938c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009390:	6593      	str	r3, [r2, #88]	; 0x58
 8009392:	4b05      	ldr	r3, [pc, #20]	; (80093a8 <HAL_MspInit+0x40>)
 8009394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800939a:	603b      	str	r3, [r7, #0]
 800939c:	683b      	ldr	r3, [r7, #0]
}
 800939e:	bf00      	nop
 80093a0:	370c      	adds	r7, #12
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bc80      	pop	{r7}
 80093a6:	4770      	bx	lr
 80093a8:	40021000 	.word	0x40021000

080093ac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a0b      	ldr	r2, [pc, #44]	; (80093e8 <HAL_RTC_MspInit+0x3c>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d10f      	bne.n	80093de <HAL_RTC_MspInit+0x32>
  {
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80093be:	4a0b      	ldr	r2, [pc, #44]	; (80093ec <HAL_RTC_MspInit+0x40>)
 80093c0:	4b0a      	ldr	r3, [pc, #40]	; (80093ec <HAL_RTC_MspInit+0x40>)
 80093c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80093ce:	2200      	movs	r2, #0
 80093d0:	2100      	movs	r1, #0
 80093d2:	2003      	movs	r0, #3
 80093d4:	f7f7 ffb9 	bl	800134a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80093d8:	2003      	movs	r0, #3
 80093da:	f7f7 ffd2 	bl	8001382 <HAL_NVIC_EnableIRQ>

  }

}
 80093de:	bf00      	nop
 80093e0:	3708      	adds	r7, #8
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	40002800 	.word	0x40002800
 80093ec:	40021000 	.word	0x40021000

080093f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b08c      	sub	sp, #48	; 0x30
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093f8:	f107 031c 	add.w	r3, r7, #28
 80093fc:	2200      	movs	r2, #0
 80093fe:	601a      	str	r2, [r3, #0]
 8009400:	605a      	str	r2, [r3, #4]
 8009402:	609a      	str	r2, [r3, #8]
 8009404:	60da      	str	r2, [r3, #12]
 8009406:	611a      	str	r2, [r3, #16]
  // Debug USART Peripheral
  if(huart->Instance==USART2)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a65      	ldr	r2, [pc, #404]	; (80095a4 <HAL_UART_MspInit+0x1b4>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d130      	bne.n	8009474 <HAL_UART_MspInit+0x84>
  {

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8009412:	4a65      	ldr	r2, [pc, #404]	; (80095a8 <HAL_UART_MspInit+0x1b8>)
 8009414:	4b64      	ldr	r3, [pc, #400]	; (80095a8 <HAL_UART_MspInit+0x1b8>)
 8009416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800941c:	6593      	str	r3, [r2, #88]	; 0x58
 800941e:	4b62      	ldr	r3, [pc, #392]	; (80095a8 <HAL_UART_MspInit+0x1b8>)
 8009420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009426:	61bb      	str	r3, [r7, #24]
 8009428:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800942a:	4a5f      	ldr	r2, [pc, #380]	; (80095a8 <HAL_UART_MspInit+0x1b8>)
 800942c:	4b5e      	ldr	r3, [pc, #376]	; (80095a8 <HAL_UART_MspInit+0x1b8>)
 800942e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009430:	f043 0301 	orr.w	r3, r3, #1
 8009434:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009436:	4b5c      	ldr	r3, [pc, #368]	; (80095a8 <HAL_UART_MspInit+0x1b8>)
 8009438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800943a:	f003 0301 	and.w	r3, r3, #1
 800943e:	617b      	str	r3, [r7, #20]
 8009440:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009442:	230c      	movs	r3, #12
 8009444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009446:	2302      	movs	r3, #2
 8009448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800944a:	2300      	movs	r3, #0
 800944c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800944e:	2303      	movs	r3, #3
 8009450:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009452:	2307      	movs	r3, #7
 8009454:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009456:	f107 031c 	add.w	r3, r7, #28
 800945a:	4619      	mov	r1, r3
 800945c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009460:	f7f8 fb20 	bl	8001aa4 <HAL_GPIO_Init>
    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8009464:	2200      	movs	r2, #0
 8009466:	2100      	movs	r1, #0
 8009468:	2026      	movs	r0, #38	; 0x26
 800946a:	f7f7 ff6e 	bl	800134a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800946e:	2026      	movs	r0, #38	; 0x26
 8009470:	f7f7 ff87 	bl	8001382 <HAL_NVIC_EnableIRQ>
  }

  //GPS UART Init
  if(huart->Instance==UART4)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a4c      	ldr	r2, [pc, #304]	; (80095ac <HAL_UART_MspInit+0x1bc>)
 800947a:	4293      	cmp	r3, r2
 800947c:	f040 808d 	bne.w	800959a <HAL_UART_MspInit+0x1aa>
  {

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8009480:	4a49      	ldr	r2, [pc, #292]	; (80095a8 <HAL_UART_MspInit+0x1b8>)
 8009482:	4b49      	ldr	r3, [pc, #292]	; (80095a8 <HAL_UART_MspInit+0x1b8>)
 8009484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009486:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800948a:	6593      	str	r3, [r2, #88]	; 0x58
 800948c:	4b46      	ldr	r3, [pc, #280]	; (80095a8 <HAL_UART_MspInit+0x1b8>)
 800948e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009490:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009494:	613b      	str	r3, [r7, #16]
 8009496:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009498:	4a43      	ldr	r2, [pc, #268]	; (80095a8 <HAL_UART_MspInit+0x1b8>)
 800949a:	4b43      	ldr	r3, [pc, #268]	; (80095a8 <HAL_UART_MspInit+0x1b8>)
 800949c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800949e:	f043 0304 	orr.w	r3, r3, #4
 80094a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80094a4:	4b40      	ldr	r3, [pc, #256]	; (80095a8 <HAL_UART_MspInit+0x1b8>)
 80094a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094a8:	f003 0304 	and.w	r3, r3, #4
 80094ac:	60fb      	str	r3, [r7, #12]
 80094ae:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 80094b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80094b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094b6:	2302      	movs	r3, #2
 80094b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094ba:	2300      	movs	r3, #0
 80094bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094be:	2303      	movs	r3, #3
 80094c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80094c2:	2308      	movs	r3, #8
 80094c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80094c6:	f107 031c 	add.w	r3, r7, #28
 80094ca:	4619      	mov	r1, r3
 80094cc:	4838      	ldr	r0, [pc, #224]	; (80095b0 <HAL_UART_MspInit+0x1c0>)
 80094ce:	f7f8 fae9 	bl	8001aa4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 80094d2:	4b38      	ldr	r3, [pc, #224]	; (80095b4 <HAL_UART_MspInit+0x1c4>)
 80094d4:	4a38      	ldr	r2, [pc, #224]	; (80095b8 <HAL_UART_MspInit+0x1c8>)
 80094d6:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 80094d8:	4b36      	ldr	r3, [pc, #216]	; (80095b4 <HAL_UART_MspInit+0x1c4>)
 80094da:	2202      	movs	r2, #2
 80094dc:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80094de:	4b35      	ldr	r3, [pc, #212]	; (80095b4 <HAL_UART_MspInit+0x1c4>)
 80094e0:	2200      	movs	r2, #0
 80094e2:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80094e4:	4b33      	ldr	r3, [pc, #204]	; (80095b4 <HAL_UART_MspInit+0x1c4>)
 80094e6:	2200      	movs	r2, #0
 80094e8:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80094ea:	4b32      	ldr	r3, [pc, #200]	; (80095b4 <HAL_UART_MspInit+0x1c4>)
 80094ec:	2280      	movs	r2, #128	; 0x80
 80094ee:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80094f0:	4b30      	ldr	r3, [pc, #192]	; (80095b4 <HAL_UART_MspInit+0x1c4>)
 80094f2:	2200      	movs	r2, #0
 80094f4:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80094f6:	4b2f      	ldr	r3, [pc, #188]	; (80095b4 <HAL_UART_MspInit+0x1c4>)
 80094f8:	2200      	movs	r2, #0
 80094fa:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80094fc:	4b2d      	ldr	r3, [pc, #180]	; (80095b4 <HAL_UART_MspInit+0x1c4>)
 80094fe:	2200      	movs	r2, #0
 8009500:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009502:	4b2c      	ldr	r3, [pc, #176]	; (80095b4 <HAL_UART_MspInit+0x1c4>)
 8009504:	2200      	movs	r2, #0
 8009506:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8009508:	482a      	ldr	r0, [pc, #168]	; (80095b4 <HAL_UART_MspInit+0x1c4>)
 800950a:	f7f7 ff77 	bl	80013fc <HAL_DMA_Init>
 800950e:	4603      	mov	r3, r0
 8009510:	2b00      	cmp	r3, #0
 8009512:	d000      	beq.n	8009516 <HAL_UART_MspInit+0x126>
 8009514:	bf00      	nop
    {
      __NOP();
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	4a26      	ldr	r2, [pc, #152]	; (80095b4 <HAL_UART_MspInit+0x1c4>)
 800951a:	66da      	str	r2, [r3, #108]	; 0x6c
 800951c:	4a25      	ldr	r2, [pc, #148]	; (80095b4 <HAL_UART_MspInit+0x1c4>)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel3;
 8009522:	4b26      	ldr	r3, [pc, #152]	; (80095bc <HAL_UART_MspInit+0x1cc>)
 8009524:	4a26      	ldr	r2, [pc, #152]	; (80095c0 <HAL_UART_MspInit+0x1d0>)
 8009526:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_2;
 8009528:	4b24      	ldr	r3, [pc, #144]	; (80095bc <HAL_UART_MspInit+0x1cc>)
 800952a:	2202      	movs	r2, #2
 800952c:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800952e:	4b23      	ldr	r3, [pc, #140]	; (80095bc <HAL_UART_MspInit+0x1cc>)
 8009530:	2210      	movs	r2, #16
 8009532:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009534:	4b21      	ldr	r3, [pc, #132]	; (80095bc <HAL_UART_MspInit+0x1cc>)
 8009536:	2200      	movs	r2, #0
 8009538:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800953a:	4b20      	ldr	r3, [pc, #128]	; (80095bc <HAL_UART_MspInit+0x1cc>)
 800953c:	2280      	movs	r2, #128	; 0x80
 800953e:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009540:	4b1e      	ldr	r3, [pc, #120]	; (80095bc <HAL_UART_MspInit+0x1cc>)
 8009542:	2200      	movs	r2, #0
 8009544:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009546:	4b1d      	ldr	r3, [pc, #116]	; (80095bc <HAL_UART_MspInit+0x1cc>)
 8009548:	2200      	movs	r2, #0
 800954a:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800954c:	4b1b      	ldr	r3, [pc, #108]	; (80095bc <HAL_UART_MspInit+0x1cc>)
 800954e:	2200      	movs	r2, #0
 8009550:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009552:	4b1a      	ldr	r3, [pc, #104]	; (80095bc <HAL_UART_MspInit+0x1cc>)
 8009554:	2200      	movs	r2, #0
 8009556:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8009558:	4818      	ldr	r0, [pc, #96]	; (80095bc <HAL_UART_MspInit+0x1cc>)
 800955a:	f7f7 ff4f 	bl	80013fc <HAL_DMA_Init>
 800955e:	4603      	mov	r3, r0
 8009560:	2b00      	cmp	r3, #0
 8009562:	d000      	beq.n	8009566 <HAL_UART_MspInit+0x176>
 8009564:	bf00      	nop
    {
      __NOP();
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	4a14      	ldr	r2, [pc, #80]	; (80095bc <HAL_UART_MspInit+0x1cc>)
 800956a:	669a      	str	r2, [r3, #104]	; 0x68
 800956c:	4a13      	ldr	r2, [pc, #76]	; (80095bc <HAL_UART_MspInit+0x1cc>)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4 interrupt Init */

	CLEAR_REG(huart->Instance->CR1);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	2200      	movs	r2, #0
 8009578:	601a      	str	r2, [r3, #0]
	CLEAR_REG(huart->Instance->CR2);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2200      	movs	r2, #0
 8009580:	605a      	str	r2, [r3, #4]
	CLEAR_REG(huart->Instance->CR3);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	2200      	movs	r2, #0
 8009588:	609a      	str	r2, [r3, #8]

    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800958a:	2200      	movs	r2, #0
 800958c:	2100      	movs	r1, #0
 800958e:	2034      	movs	r0, #52	; 0x34
 8009590:	f7f7 fedb 	bl	800134a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8009594:	2034      	movs	r0, #52	; 0x34
 8009596:	f7f7 fef4 	bl	8001382 <HAL_NVIC_EnableIRQ>
  }
}
 800959a:	bf00      	nop
 800959c:	3730      	adds	r7, #48	; 0x30
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	40004400 	.word	0x40004400
 80095a8:	40021000 	.word	0x40021000
 80095ac:	40004c00 	.word	0x40004c00
 80095b0:	48000800 	.word	0x48000800
 80095b4:	2000074c 	.word	0x2000074c
 80095b8:	40020458 	.word	0x40020458
 80095bc:	200018e0 	.word	0x200018e0
 80095c0:	40020430 	.word	0x40020430

080095c4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  //Serial Output UART Deinit
  if(huart->Instance==USART2)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a18      	ldr	r2, [pc, #96]	; (8009634 <HAL_UART_MspDeInit+0x70>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d10d      	bne.n	80095f2 <HAL_UART_MspDeInit+0x2e>
  {

    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 80095d6:	4a18      	ldr	r2, [pc, #96]	; (8009638 <HAL_UART_MspDeInit+0x74>)
 80095d8:	4b17      	ldr	r3, [pc, #92]	; (8009638 <HAL_UART_MspDeInit+0x74>)
 80095da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80095e0:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80095e2:	210c      	movs	r1, #12
 80095e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80095e8:	f7f8 fc04 	bl	8001df4 <HAL_GPIO_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80095ec:	2026      	movs	r0, #38	; 0x26
 80095ee:	f7f7 fed6 	bl	800139e <HAL_NVIC_DisableIRQ>

  }
  //GPS UART Deinit
  if(huart->Instance==UART4)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a11      	ldr	r2, [pc, #68]	; (800963c <HAL_UART_MspDeInit+0x78>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d117      	bne.n	800962c <HAL_UART_MspDeInit+0x68>
  {

    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 80095fc:	4a0e      	ldr	r2, [pc, #56]	; (8009638 <HAL_UART_MspDeInit+0x74>)
 80095fe:	4b0e      	ldr	r3, [pc, #56]	; (8009638 <HAL_UART_MspDeInit+0x74>)
 8009600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009602:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8009606:	6593      	str	r3, [r2, #88]	; 0x58

    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPS_TX_Pin|GPS_RX_Pin);
 8009608:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800960c:	480c      	ldr	r0, [pc, #48]	; (8009640 <HAL_UART_MspDeInit+0x7c>)
 800960e:	f7f8 fbf1 	bl	8001df4 <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009616:	4618      	mov	r0, r3
 8009618:	f7f7 ffa8 	bl	800156c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009620:	4618      	mov	r0, r3
 8009622:	f7f7 ffa3 	bl	800156c <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8009626:	2034      	movs	r0, #52	; 0x34
 8009628:	f7f7 feb9 	bl	800139e <HAL_NVIC_DisableIRQ>

  }

}
 800962c:	bf00      	nop
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}
 8009634:	40004400 	.word	0x40004400
 8009638:	40021000 	.word	0x40021000
 800963c:	40004c00 	.word	0x40004c00
 8009640:	48000800 	.word	0x48000800

08009644 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b08a      	sub	sp, #40	; 0x28
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800964c:	f107 0314 	add.w	r3, r7, #20
 8009650:	2200      	movs	r2, #0
 8009652:	601a      	str	r2, [r3, #0]
 8009654:	605a      	str	r2, [r3, #4]
 8009656:	609a      	str	r2, [r3, #8]
 8009658:	60da      	str	r2, [r3, #12]
 800965a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009664:	d130      	bne.n	80096c8 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009666:	4a1a      	ldr	r2, [pc, #104]	; (80096d0 <HAL_TIM_Base_MspInit+0x8c>)
 8009668:	4b19      	ldr	r3, [pc, #100]	; (80096d0 <HAL_TIM_Base_MspInit+0x8c>)
 800966a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800966c:	f043 0301 	orr.w	r3, r3, #1
 8009670:	6593      	str	r3, [r2, #88]	; 0x58
 8009672:	4b17      	ldr	r3, [pc, #92]	; (80096d0 <HAL_TIM_Base_MspInit+0x8c>)
 8009674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009676:	f003 0301 	and.w	r3, r3, #1
 800967a:	613b      	str	r3, [r7, #16]
 800967c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800967e:	4a14      	ldr	r2, [pc, #80]	; (80096d0 <HAL_TIM_Base_MspInit+0x8c>)
 8009680:	4b13      	ldr	r3, [pc, #76]	; (80096d0 <HAL_TIM_Base_MspInit+0x8c>)
 8009682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009684:	f043 0301 	orr.w	r3, r3, #1
 8009688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800968a:	4b11      	ldr	r3, [pc, #68]	; (80096d0 <HAL_TIM_Base_MspInit+0x8c>)
 800968c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800968e:	f003 0301 	and.w	r3, r3, #1
 8009692:	60fb      	str	r3, [r7, #12]
 8009694:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8009696:	2302      	movs	r3, #2
 8009698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800969a:	2302      	movs	r3, #2
 800969c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800969e:	2300      	movs	r3, #0
 80096a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096a2:	2300      	movs	r3, #0
 80096a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80096a6:	2301      	movs	r3, #1
 80096a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096aa:	f107 0314 	add.w	r3, r7, #20
 80096ae:	4619      	mov	r1, r3
 80096b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80096b4:	f7f8 f9f6 	bl	8001aa4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80096b8:	2200      	movs	r2, #0
 80096ba:	2100      	movs	r1, #0
 80096bc:	201c      	movs	r0, #28
 80096be:	f7f7 fe44 	bl	800134a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80096c2:	201c      	movs	r0, #28
 80096c4:	f7f7 fe5d 	bl	8001382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80096c8:	bf00      	nop
 80096ca:	3728      	adds	r7, #40	; 0x28
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}
 80096d0:	40021000 	.word	0x40021000

080096d4 <HAL_TIM_Base_MspDeInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096e4:	d10d      	bne.n	8009702 <HAL_TIM_Base_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspDeInit 0 */

  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 80096e6:	4a09      	ldr	r2, [pc, #36]	; (800970c <HAL_TIM_Base_MspDeInit+0x38>)
 80096e8:	4b08      	ldr	r3, [pc, #32]	; (800970c <HAL_TIM_Base_MspDeInit+0x38>)
 80096ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096ec:	f023 0301 	bic.w	r3, r3, #1
 80096f0:	6593      	str	r3, [r2, #88]	; 0x58

    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1);
 80096f2:	2102      	movs	r1, #2
 80096f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80096f8:	f7f8 fb7c 	bl	8001df4 <HAL_GPIO_DeInit>

    /* TIM2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 80096fc:	201c      	movs	r0, #28
 80096fe:	f7f7 fe4e 	bl	800139e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM2_MspDeInit 1 */

  /* USER CODE END TIM2_MspDeInit 1 */
  }

}
 8009702:	bf00      	nop
 8009704:	3708      	adds	r7, #8
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	40021000 	.word	0x40021000

08009710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009710:	b480      	push	{r7}
 8009712:	af00      	add	r7, sp, #0
  /* USER CODE NonMaskableInt_IRQn 0 */


}
 8009714:	bf00      	nop
 8009716:	46bd      	mov	sp, r7
 8009718:	bc80      	pop	{r7}
 800971a:	4770      	bx	lr

0800971c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800971c:	b480      	push	{r7}
 800971e:	af00      	add	r7, sp, #0
  /* USER CODE HardFault_IRQn 0 */


  while (1)
 8009720:	e7fe      	b.n	8009720 <HardFault_Handler+0x4>

08009722 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009722:	b480      	push	{r7}
 8009724:	af00      	add	r7, sp, #0
  /* USER CODE MemoryManagement_IRQn 0 */


  while (1)
 8009726:	e7fe      	b.n	8009726 <MemManage_Handler+0x4>

08009728 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009728:	b480      	push	{r7}
 800972a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */


  while (1)
 800972c:	e7fe      	b.n	800972c <BusFault_Handler+0x4>

0800972e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800972e:	b480      	push	{r7}
 8009730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */


  while (1)
 8009732:	e7fe      	b.n	8009732 <UsageFault_Handler+0x4>

08009734 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009734:	b480      	push	{r7}
 8009736:	af00      	add	r7, sp, #0
  /* USER CODE SVCall_IRQn 0 */


}
 8009738:	bf00      	nop
 800973a:	46bd      	mov	sp, r7
 800973c:	bc80      	pop	{r7}
 800973e:	4770      	bx	lr

08009740 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009740:	b480      	push	{r7}
 8009742:	af00      	add	r7, sp, #0
  /* USER CODE DebugMonitor_IRQn 0 */


}
 8009744:	bf00      	nop
 8009746:	46bd      	mov	sp, r7
 8009748:	bc80      	pop	{r7}
 800974a:	4770      	bx	lr

0800974c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800974c:	b480      	push	{r7}
 800974e:	af00      	add	r7, sp, #0
  /* USER CODE PendSV_IRQn 0 */


}
 8009750:	bf00      	nop
 8009752:	46bd      	mov	sp, r7
 8009754:	bc80      	pop	{r7}
 8009756:	4770      	bx	lr

08009758 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  HAL_IncTick();
 800975c:	f7f7 fc82 	bl	8001064 <HAL_IncTick>

}
 8009760:	bf00      	nop
 8009762:	bd80      	pop	{r7, pc}

08009764 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	af00      	add	r7, sp, #0
  /* USER CODE RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8009768:	4802      	ldr	r0, [pc, #8]	; (8009774 <RTC_WKUP_IRQHandler+0x10>)
 800976a:	f7fa fb29 	bl	8003dc0 <HAL_RTCEx_WakeUpTimerIRQHandler>

}
 800976e:	bf00      	nop
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	200021cc 	.word	0x200021cc

08009778 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	af00      	add	r7, sp, #0
  /* USER CODE USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800977c:	4802      	ldr	r0, [pc, #8]	; (8009788 <USART2_IRQHandler+0x10>)
 800977e:	f7fc fbe7 	bl	8005f50 <HAL_UART_IRQHandler>

}
 8009782:	bf00      	nop
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	20002148 	.word	0x20002148

0800978c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	af00      	add	r7, sp, #0
  /* USER CODE TIM2_IRQn 0 */
  USART_TIM_RTO_Handler(hgps.gps_htim); //custom call back function
 8009790:	4b05      	ldr	r3, [pc, #20]	; (80097a8 <TIM2_IRQHandler+0x1c>)
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	4618      	mov	r0, r3
 8009796:	f7fe fbb3 	bl	8007f00 <USART_TIM_RTO_Handler>

  HAL_TIM_IRQHandler(hgps.gps_htim);	 //HAL default handler
 800979a:	4b03      	ldr	r3, [pc, #12]	; (80097a8 <TIM2_IRQHandler+0x1c>)
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	4618      	mov	r0, r3
 80097a0:	f7fa fdcc 	bl	800433c <HAL_TIM_IRQHandler>

}
 80097a4:	bf00      	nop
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	20000798 	.word	0x20000798

080097ac <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	af00      	add	r7, sp, #0
  /* USER CODE UART4_IRQn 0 */
	USART_GPS_IRQHandler(&hgps); //custom user Call Back function
 80097b0:	4802      	ldr	r0, [pc, #8]	; (80097bc <UART4_IRQHandler+0x10>)
 80097b2:	f7fe fd3f 	bl	8008234 <USART_GPS_IRQHandler>

}
 80097b6:	bf00      	nop
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	bf00      	nop
 80097bc:	20000798 	.word	0x20000798

080097c0 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80097c4:	4802      	ldr	r0, [pc, #8]	; (80097d0 <DMA2_Channel3_IRQHandler+0x10>)
 80097c6:	f7f8 f884 	bl	80018d2 <HAL_DMA_IRQHandler>

}
 80097ca:	bf00      	nop
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	200018e0 	.word	0x200018e0

080097d4 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	af00      	add	r7, sp, #0
  /* USER CODE DMA2_Channel5_IRQn 0 */
  DMA_GNSS_Periph_IRQHandler(&hgps);
 80097d8:	4802      	ldr	r0, [pc, #8]	; (80097e4 <DMA2_Channel5_IRQHandler+0x10>)
 80097da:	f7fe fc8b 	bl	80080f4 <DMA_GNSS_Periph_IRQHandler>

}
 80097de:	bf00      	nop
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	20000798 	.word	0x20000798

080097e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	af00      	add	r7, sp, #0
  /* USER CODE DMA1_Channel1_IRQn 0 */

  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel1);
 80097ec:	4803      	ldr	r0, [pc, #12]	; (80097fc <DMA1_Channel1_IRQHandler+0x14>)
 80097ee:	f7f8 f870 	bl	80018d2 <HAL_DMA_IRQHandler>
  DMA_GNSS_MEM_IRQHandler(&hgps);
 80097f2:	4803      	ldr	r0, [pc, #12]	; (8009800 <DMA1_Channel1_IRQHandler+0x18>)
 80097f4:	f7fe fba6 	bl	8007f44 <DMA_GNSS_MEM_IRQHandler>

}
 80097f8:	bf00      	nop
 80097fa:	bd80      	pop	{r7, pc}
 80097fc:	200007d0 	.word	0x200007d0
 8009800:	20000798 	.word	0x20000798

08009804 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009804:	b590      	push	{r4, r7, lr}
 8009806:	b087      	sub	sp, #28
 8009808:	af00      	add	r7, sp, #0
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009810:	2300      	movs	r3, #0
 8009812:	617b      	str	r3, [r7, #20]
 8009814:	e00a      	b.n	800982c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8009816:	68bc      	ldr	r4, [r7, #8]
 8009818:	1c63      	adds	r3, r4, #1
 800981a:	60bb      	str	r3, [r7, #8]
 800981c:	f3af 8000 	nop.w
 8009820:	4603      	mov	r3, r0
 8009822:	b2db      	uxtb	r3, r3
 8009824:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	3301      	adds	r3, #1
 800982a:	617b      	str	r3, [r7, #20]
 800982c:	697a      	ldr	r2, [r7, #20]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	429a      	cmp	r2, r3
 8009832:	dbf0      	blt.n	8009816 <_read+0x12>
	}

return len;
 8009834:	687b      	ldr	r3, [r7, #4]
}
 8009836:	4618      	mov	r0, r3
 8009838:	371c      	adds	r7, #28
 800983a:	46bd      	mov	sp, r7
 800983c:	bd90      	pop	{r4, r7, pc}

0800983e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800983e:	b580      	push	{r7, lr}
 8009840:	b086      	sub	sp, #24
 8009842:	af00      	add	r7, sp, #0
 8009844:	60f8      	str	r0, [r7, #12]
 8009846:	60b9      	str	r1, [r7, #8]
 8009848:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800984a:	2300      	movs	r3, #0
 800984c:	617b      	str	r3, [r7, #20]
 800984e:	e009      	b.n	8009864 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	1c5a      	adds	r2, r3, #1
 8009854:	60ba      	str	r2, [r7, #8]
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	4618      	mov	r0, r3
 800985a:	f7ff f835 	bl	80088c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	3301      	adds	r3, #1
 8009862:	617b      	str	r3, [r7, #20]
 8009864:	697a      	ldr	r2, [r7, #20]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	429a      	cmp	r2, r3
 800986a:	dbf1      	blt.n	8009850 <_write+0x12>
	}
	return len;
 800986c:	687b      	ldr	r3, [r7, #4]
}
 800986e:	4618      	mov	r0, r3
 8009870:	3718      	adds	r7, #24
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
	...

08009878 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009880:	4b11      	ldr	r3, [pc, #68]	; (80098c8 <_sbrk+0x50>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d102      	bne.n	800988e <_sbrk+0x16>
		heap_end = &end;
 8009888:	4b0f      	ldr	r3, [pc, #60]	; (80098c8 <_sbrk+0x50>)
 800988a:	4a10      	ldr	r2, [pc, #64]	; (80098cc <_sbrk+0x54>)
 800988c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800988e:	4b0e      	ldr	r3, [pc, #56]	; (80098c8 <_sbrk+0x50>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8009894:	4b0c      	ldr	r3, [pc, #48]	; (80098c8 <_sbrk+0x50>)
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4413      	add	r3, r2
 800989c:	466a      	mov	r2, sp
 800989e:	4293      	cmp	r3, r2
 80098a0:	d907      	bls.n	80098b2 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80098a2:	f000 f875 	bl	8009990 <__errno>
 80098a6:	4602      	mov	r2, r0
 80098a8:	230c      	movs	r3, #12
 80098aa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80098ac:	f04f 33ff 	mov.w	r3, #4294967295
 80098b0:	e006      	b.n	80098c0 <_sbrk+0x48>
	}

	heap_end += incr;
 80098b2:	4b05      	ldr	r3, [pc, #20]	; (80098c8 <_sbrk+0x50>)
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	4413      	add	r3, r2
 80098ba:	4a03      	ldr	r2, [pc, #12]	; (80098c8 <_sbrk+0x50>)
 80098bc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80098be:	68fb      	ldr	r3, [r7, #12]
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3710      	adds	r7, #16
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	200006ec 	.word	0x200006ec
 80098cc:	20002200 	.word	0x20002200

080098d0 <_close>:

int _close(int file)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b083      	sub	sp, #12
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
	return -1;
 80098d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80098dc:	4618      	mov	r0, r3
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bc80      	pop	{r7}
 80098e4:	4770      	bx	lr

080098e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80098e6:	b480      	push	{r7}
 80098e8:	b083      	sub	sp, #12
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
 80098ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80098f6:	605a      	str	r2, [r3, #4]
	return 0;
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	370c      	adds	r7, #12
 80098fe:	46bd      	mov	sp, r7
 8009900:	bc80      	pop	{r7}
 8009902:	4770      	bx	lr

08009904 <_isatty>:

int _isatty(int file)
{
 8009904:	b480      	push	{r7}
 8009906:	b083      	sub	sp, #12
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
	return 1;
 800990c:	2301      	movs	r3, #1
}
 800990e:	4618      	mov	r0, r3
 8009910:	370c      	adds	r7, #12
 8009912:	46bd      	mov	sp, r7
 8009914:	bc80      	pop	{r7}
 8009916:	4770      	bx	lr

08009918 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
 800991e:	60f8      	str	r0, [r7, #12]
 8009920:	60b9      	str	r1, [r7, #8]
 8009922:	607a      	str	r2, [r7, #4]
	return 0;
 8009924:	2300      	movs	r3, #0
}
 8009926:	4618      	mov	r0, r3
 8009928:	3714      	adds	r7, #20
 800992a:	46bd      	mov	sp, r7
 800992c:	bc80      	pop	{r7}
 800992e:	4770      	bx	lr

08009930 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8009930:	b480      	push	{r7}
 8009932:	af00      	add	r7, sp, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8009934:	4a12      	ldr	r2, [pc, #72]	; (8009980 <SystemInit+0x50>)
 8009936:	4b12      	ldr	r3, [pc, #72]	; (8009980 <SystemInit+0x50>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f043 0301 	orr.w	r3, r3, #1
 800993e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8009940:	4b0f      	ldr	r3, [pc, #60]	; (8009980 <SystemInit+0x50>)
 8009942:	2200      	movs	r2, #0
 8009944:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8009946:	4a0e      	ldr	r2, [pc, #56]	; (8009980 <SystemInit+0x50>)
 8009948:	4b0d      	ldr	r3, [pc, #52]	; (8009980 <SystemInit+0x50>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8009950:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8009954:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8009956:	4b0a      	ldr	r3, [pc, #40]	; (8009980 <SystemInit+0x50>)
 8009958:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800995c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800995e:	4a08      	ldr	r2, [pc, #32]	; (8009980 <SystemInit+0x50>)
 8009960:	4b07      	ldr	r3, [pc, #28]	; (8009980 <SystemInit+0x50>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009968:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800996a:	4b05      	ldr	r3, [pc, #20]	; (8009980 <SystemInit+0x50>)
 800996c:	2200      	movs	r2, #0
 800996e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009970:	4b04      	ldr	r3, [pc, #16]	; (8009984 <SystemInit+0x54>)
 8009972:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009976:	609a      	str	r2, [r3, #8]
#endif
}
 8009978:	bf00      	nop
 800997a:	46bd      	mov	sp, r7
 800997c:	bc80      	pop	{r7}
 800997e:	4770      	bx	lr
 8009980:	40021000 	.word	0x40021000
 8009984:	e000ed00 	.word	0xe000ed00

08009988 <atof>:
 8009988:	2100      	movs	r1, #0
 800998a:	f001 bd45 	b.w	800b418 <strtod>
	...

08009990 <__errno>:
 8009990:	4b01      	ldr	r3, [pc, #4]	; (8009998 <__errno+0x8>)
 8009992:	6818      	ldr	r0, [r3, #0]
 8009994:	4770      	bx	lr
 8009996:	bf00      	nop
 8009998:	20000010 	.word	0x20000010

0800999c <__libc_init_array>:
 800999c:	b570      	push	{r4, r5, r6, lr}
 800999e:	4e0d      	ldr	r6, [pc, #52]	; (80099d4 <__libc_init_array+0x38>)
 80099a0:	4c0d      	ldr	r4, [pc, #52]	; (80099d8 <__libc_init_array+0x3c>)
 80099a2:	1ba4      	subs	r4, r4, r6
 80099a4:	10a4      	asrs	r4, r4, #2
 80099a6:	2500      	movs	r5, #0
 80099a8:	42a5      	cmp	r5, r4
 80099aa:	d109      	bne.n	80099c0 <__libc_init_array+0x24>
 80099ac:	4e0b      	ldr	r6, [pc, #44]	; (80099dc <__libc_init_array+0x40>)
 80099ae:	4c0c      	ldr	r4, [pc, #48]	; (80099e0 <__libc_init_array+0x44>)
 80099b0:	f006 ffea 	bl	8010988 <_init>
 80099b4:	1ba4      	subs	r4, r4, r6
 80099b6:	10a4      	asrs	r4, r4, #2
 80099b8:	2500      	movs	r5, #0
 80099ba:	42a5      	cmp	r5, r4
 80099bc:	d105      	bne.n	80099ca <__libc_init_array+0x2e>
 80099be:	bd70      	pop	{r4, r5, r6, pc}
 80099c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80099c4:	4798      	blx	r3
 80099c6:	3501      	adds	r5, #1
 80099c8:	e7ee      	b.n	80099a8 <__libc_init_array+0xc>
 80099ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80099ce:	4798      	blx	r3
 80099d0:	3501      	adds	r5, #1
 80099d2:	e7f2      	b.n	80099ba <__libc_init_array+0x1e>
 80099d4:	080112d0 	.word	0x080112d0
 80099d8:	080112d0 	.word	0x080112d0
 80099dc:	080112d0 	.word	0x080112d0
 80099e0:	080112d4 	.word	0x080112d4

080099e4 <localtime>:
 80099e4:	b538      	push	{r3, r4, r5, lr}
 80099e6:	4b07      	ldr	r3, [pc, #28]	; (8009a04 <localtime+0x20>)
 80099e8:	681c      	ldr	r4, [r3, #0]
 80099ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80099ec:	4605      	mov	r5, r0
 80099ee:	b91b      	cbnz	r3, 80099f8 <localtime+0x14>
 80099f0:	2024      	movs	r0, #36	; 0x24
 80099f2:	f000 f8ed 	bl	8009bd0 <malloc>
 80099f6:	63e0      	str	r0, [r4, #60]	; 0x3c
 80099f8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80099fa:	4628      	mov	r0, r5
 80099fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a00:	f000 b802 	b.w	8009a08 <localtime_r>
 8009a04:	20000010 	.word	0x20000010

08009a08 <localtime_r>:
 8009a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a0c:	460c      	mov	r4, r1
 8009a0e:	4680      	mov	r8, r0
 8009a10:	f004 feb0 	bl	800e774 <__gettzinfo>
 8009a14:	4621      	mov	r1, r4
 8009a16:	4607      	mov	r7, r0
 8009a18:	4640      	mov	r0, r8
 8009a1a:	f004 feaf 	bl	800e77c <gmtime_r>
 8009a1e:	6946      	ldr	r6, [r0, #20]
 8009a20:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8009a24:	07b3      	lsls	r3, r6, #30
 8009a26:	4604      	mov	r4, r0
 8009a28:	d105      	bne.n	8009a36 <localtime_r+0x2e>
 8009a2a:	2264      	movs	r2, #100	; 0x64
 8009a2c:	fb96 f3f2 	sdiv	r3, r6, r2
 8009a30:	fb02 6313 	mls	r3, r2, r3, r6
 8009a34:	b9fb      	cbnz	r3, 8009a76 <localtime_r+0x6e>
 8009a36:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009a3a:	fb96 f5f3 	sdiv	r5, r6, r3
 8009a3e:	fb03 6515 	mls	r5, r3, r5, r6
 8009a42:	fab5 f585 	clz	r5, r5
 8009a46:	096d      	lsrs	r5, r5, #5
 8009a48:	4b5f      	ldr	r3, [pc, #380]	; (8009bc8 <localtime_r+0x1c0>)
 8009a4a:	2230      	movs	r2, #48	; 0x30
 8009a4c:	fb02 3505 	mla	r5, r2, r5, r3
 8009a50:	f001 fe06 	bl	800b660 <__tz_lock>
 8009a54:	f001 fe10 	bl	800b678 <_tzset_unlocked>
 8009a58:	4b5c      	ldr	r3, [pc, #368]	; (8009bcc <localtime_r+0x1c4>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	b1e3      	cbz	r3, 8009a98 <localtime_r+0x90>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	429e      	cmp	r6, r3
 8009a62:	d10a      	bne.n	8009a7a <localtime_r+0x72>
 8009a64:	6839      	ldr	r1, [r7, #0]
 8009a66:	f8d8 3000 	ldr.w	r3, [r8]
 8009a6a:	69fa      	ldr	r2, [r7, #28]
 8009a6c:	b969      	cbnz	r1, 8009a8a <localtime_r+0x82>
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	db0d      	blt.n	8009a8e <localtime_r+0x86>
 8009a72:	2301      	movs	r3, #1
 8009a74:	e010      	b.n	8009a98 <localtime_r+0x90>
 8009a76:	2501      	movs	r5, #1
 8009a78:	e7e6      	b.n	8009a48 <localtime_r+0x40>
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	f001 fd48 	bl	800b510 <__tzcalc_limits>
 8009a80:	2800      	cmp	r0, #0
 8009a82:	d1ef      	bne.n	8009a64 <localtime_r+0x5c>
 8009a84:	f04f 33ff 	mov.w	r3, #4294967295
 8009a88:	e006      	b.n	8009a98 <localtime_r+0x90>
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	db55      	blt.n	8009b3a <localtime_r+0x132>
 8009a8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a90:	4293      	cmp	r3, r2
 8009a92:	bfac      	ite	ge
 8009a94:	2300      	movge	r3, #0
 8009a96:	2301      	movlt	r3, #1
 8009a98:	6223      	str	r3, [r4, #32]
 8009a9a:	6a23      	ldr	r3, [r4, #32]
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	bf0c      	ite	eq
 8009aa0:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 8009aa2:	6a39      	ldrne	r1, [r7, #32]
 8009aa4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8009aa8:	203c      	movs	r0, #60	; 0x3c
 8009aaa:	fb91 f6f3 	sdiv	r6, r1, r3
 8009aae:	fb03 1316 	mls	r3, r3, r6, r1
 8009ab2:	6861      	ldr	r1, [r4, #4]
 8009ab4:	fb93 f2f0 	sdiv	r2, r3, r0
 8009ab8:	fb00 3012 	mls	r0, r0, r2, r3
 8009abc:	6823      	ldr	r3, [r4, #0]
 8009abe:	1a89      	subs	r1, r1, r2
 8009ac0:	68a2      	ldr	r2, [r4, #8]
 8009ac2:	6061      	str	r1, [r4, #4]
 8009ac4:	1a1b      	subs	r3, r3, r0
 8009ac6:	1b92      	subs	r2, r2, r6
 8009ac8:	2b3b      	cmp	r3, #59	; 0x3b
 8009aca:	6023      	str	r3, [r4, #0]
 8009acc:	60a2      	str	r2, [r4, #8]
 8009ace:	dd36      	ble.n	8009b3e <localtime_r+0x136>
 8009ad0:	3101      	adds	r1, #1
 8009ad2:	6061      	str	r1, [r4, #4]
 8009ad4:	3b3c      	subs	r3, #60	; 0x3c
 8009ad6:	6023      	str	r3, [r4, #0]
 8009ad8:	6863      	ldr	r3, [r4, #4]
 8009ada:	2b3b      	cmp	r3, #59	; 0x3b
 8009adc:	dd35      	ble.n	8009b4a <localtime_r+0x142>
 8009ade:	3201      	adds	r2, #1
 8009ae0:	60a2      	str	r2, [r4, #8]
 8009ae2:	3b3c      	subs	r3, #60	; 0x3c
 8009ae4:	6063      	str	r3, [r4, #4]
 8009ae6:	68a3      	ldr	r3, [r4, #8]
 8009ae8:	2b17      	cmp	r3, #23
 8009aea:	dd34      	ble.n	8009b56 <localtime_r+0x14e>
 8009aec:	69e2      	ldr	r2, [r4, #28]
 8009aee:	3201      	adds	r2, #1
 8009af0:	61e2      	str	r2, [r4, #28]
 8009af2:	69a2      	ldr	r2, [r4, #24]
 8009af4:	3201      	adds	r2, #1
 8009af6:	2a06      	cmp	r2, #6
 8009af8:	bfc8      	it	gt
 8009afa:	2200      	movgt	r2, #0
 8009afc:	61a2      	str	r2, [r4, #24]
 8009afe:	68e2      	ldr	r2, [r4, #12]
 8009b00:	3b18      	subs	r3, #24
 8009b02:	3201      	adds	r2, #1
 8009b04:	60a3      	str	r3, [r4, #8]
 8009b06:	6923      	ldr	r3, [r4, #16]
 8009b08:	60e2      	str	r2, [r4, #12]
 8009b0a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8009b0e:	428a      	cmp	r2, r1
 8009b10:	dd0e      	ble.n	8009b30 <localtime_r+0x128>
 8009b12:	3301      	adds	r3, #1
 8009b14:	2b0c      	cmp	r3, #12
 8009b16:	bf0c      	ite	eq
 8009b18:	6963      	ldreq	r3, [r4, #20]
 8009b1a:	6123      	strne	r3, [r4, #16]
 8009b1c:	eba2 0201 	sub.w	r2, r2, r1
 8009b20:	60e2      	str	r2, [r4, #12]
 8009b22:	bf01      	itttt	eq
 8009b24:	3301      	addeq	r3, #1
 8009b26:	2200      	moveq	r2, #0
 8009b28:	6122      	streq	r2, [r4, #16]
 8009b2a:	6163      	streq	r3, [r4, #20]
 8009b2c:	bf08      	it	eq
 8009b2e:	61e2      	streq	r2, [r4, #28]
 8009b30:	f001 fd9c 	bl	800b66c <__tz_unlock>
 8009b34:	4620      	mov	r0, r4
 8009b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	e7ac      	b.n	8009a98 <localtime_r+0x90>
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	daca      	bge.n	8009ad8 <localtime_r+0xd0>
 8009b42:	3901      	subs	r1, #1
 8009b44:	6061      	str	r1, [r4, #4]
 8009b46:	333c      	adds	r3, #60	; 0x3c
 8009b48:	e7c5      	b.n	8009ad6 <localtime_r+0xce>
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	dacb      	bge.n	8009ae6 <localtime_r+0xde>
 8009b4e:	3a01      	subs	r2, #1
 8009b50:	60a2      	str	r2, [r4, #8]
 8009b52:	333c      	adds	r3, #60	; 0x3c
 8009b54:	e7c6      	b.n	8009ae4 <localtime_r+0xdc>
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	daea      	bge.n	8009b30 <localtime_r+0x128>
 8009b5a:	69e2      	ldr	r2, [r4, #28]
 8009b5c:	3a01      	subs	r2, #1
 8009b5e:	61e2      	str	r2, [r4, #28]
 8009b60:	69a2      	ldr	r2, [r4, #24]
 8009b62:	3a01      	subs	r2, #1
 8009b64:	bf48      	it	mi
 8009b66:	2206      	movmi	r2, #6
 8009b68:	61a2      	str	r2, [r4, #24]
 8009b6a:	68e2      	ldr	r2, [r4, #12]
 8009b6c:	3318      	adds	r3, #24
 8009b6e:	3a01      	subs	r2, #1
 8009b70:	60e2      	str	r2, [r4, #12]
 8009b72:	60a3      	str	r3, [r4, #8]
 8009b74:	2a00      	cmp	r2, #0
 8009b76:	d1db      	bne.n	8009b30 <localtime_r+0x128>
 8009b78:	6923      	ldr	r3, [r4, #16]
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	d405      	bmi.n	8009b8a <localtime_r+0x182>
 8009b7e:	6123      	str	r3, [r4, #16]
 8009b80:	6923      	ldr	r3, [r4, #16]
 8009b82:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8009b86:	60e3      	str	r3, [r4, #12]
 8009b88:	e7d2      	b.n	8009b30 <localtime_r+0x128>
 8009b8a:	230b      	movs	r3, #11
 8009b8c:	6123      	str	r3, [r4, #16]
 8009b8e:	6963      	ldr	r3, [r4, #20]
 8009b90:	1e5a      	subs	r2, r3, #1
 8009b92:	f012 0f03 	tst.w	r2, #3
 8009b96:	6162      	str	r2, [r4, #20]
 8009b98:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 8009b9c:	d105      	bne.n	8009baa <localtime_r+0x1a2>
 8009b9e:	2164      	movs	r1, #100	; 0x64
 8009ba0:	fb92 f3f1 	sdiv	r3, r2, r1
 8009ba4:	fb01 2313 	mls	r3, r1, r3, r2
 8009ba8:	b963      	cbnz	r3, 8009bc4 <localtime_r+0x1bc>
 8009baa:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009bae:	fb92 f3f1 	sdiv	r3, r2, r1
 8009bb2:	fb01 2313 	mls	r3, r1, r3, r2
 8009bb6:	fab3 f383 	clz	r3, r3
 8009bba:	095b      	lsrs	r3, r3, #5
 8009bbc:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8009bc0:	61e3      	str	r3, [r4, #28]
 8009bc2:	e7dd      	b.n	8009b80 <localtime_r+0x178>
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	e7f9      	b.n	8009bbc <localtime_r+0x1b4>
 8009bc8:	08010ee0 	.word	0x08010ee0
 8009bcc:	20000740 	.word	0x20000740

08009bd0 <malloc>:
 8009bd0:	4b02      	ldr	r3, [pc, #8]	; (8009bdc <malloc+0xc>)
 8009bd2:	4601      	mov	r1, r0
 8009bd4:	6818      	ldr	r0, [r3, #0]
 8009bd6:	f000 b80b 	b.w	8009bf0 <_malloc_r>
 8009bda:	bf00      	nop
 8009bdc:	20000010 	.word	0x20000010

08009be0 <free>:
 8009be0:	4b02      	ldr	r3, [pc, #8]	; (8009bec <free+0xc>)
 8009be2:	4601      	mov	r1, r0
 8009be4:	6818      	ldr	r0, [r3, #0]
 8009be6:	f004 b825 	b.w	800dc34 <_free_r>
 8009bea:	bf00      	nop
 8009bec:	20000010 	.word	0x20000010

08009bf0 <_malloc_r>:
 8009bf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf4:	f101 040b 	add.w	r4, r1, #11
 8009bf8:	2c16      	cmp	r4, #22
 8009bfa:	4681      	mov	r9, r0
 8009bfc:	d907      	bls.n	8009c0e <_malloc_r+0x1e>
 8009bfe:	f034 0407 	bics.w	r4, r4, #7
 8009c02:	d505      	bpl.n	8009c10 <_malloc_r+0x20>
 8009c04:	230c      	movs	r3, #12
 8009c06:	f8c9 3000 	str.w	r3, [r9]
 8009c0a:	2600      	movs	r6, #0
 8009c0c:	e131      	b.n	8009e72 <_malloc_r+0x282>
 8009c0e:	2410      	movs	r4, #16
 8009c10:	428c      	cmp	r4, r1
 8009c12:	d3f7      	bcc.n	8009c04 <_malloc_r+0x14>
 8009c14:	4648      	mov	r0, r9
 8009c16:	f000 fc69 	bl	800a4ec <__malloc_lock>
 8009c1a:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8009c1e:	4d9c      	ldr	r5, [pc, #624]	; (8009e90 <_malloc_r+0x2a0>)
 8009c20:	d236      	bcs.n	8009c90 <_malloc_r+0xa0>
 8009c22:	f104 0208 	add.w	r2, r4, #8
 8009c26:	442a      	add	r2, r5
 8009c28:	f1a2 0108 	sub.w	r1, r2, #8
 8009c2c:	6856      	ldr	r6, [r2, #4]
 8009c2e:	428e      	cmp	r6, r1
 8009c30:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8009c34:	d102      	bne.n	8009c3c <_malloc_r+0x4c>
 8009c36:	68d6      	ldr	r6, [r2, #12]
 8009c38:	42b2      	cmp	r2, r6
 8009c3a:	d010      	beq.n	8009c5e <_malloc_r+0x6e>
 8009c3c:	6873      	ldr	r3, [r6, #4]
 8009c3e:	68f2      	ldr	r2, [r6, #12]
 8009c40:	68b1      	ldr	r1, [r6, #8]
 8009c42:	f023 0303 	bic.w	r3, r3, #3
 8009c46:	60ca      	str	r2, [r1, #12]
 8009c48:	4433      	add	r3, r6
 8009c4a:	6091      	str	r1, [r2, #8]
 8009c4c:	685a      	ldr	r2, [r3, #4]
 8009c4e:	f042 0201 	orr.w	r2, r2, #1
 8009c52:	605a      	str	r2, [r3, #4]
 8009c54:	4648      	mov	r0, r9
 8009c56:	f000 fc4f 	bl	800a4f8 <__malloc_unlock>
 8009c5a:	3608      	adds	r6, #8
 8009c5c:	e109      	b.n	8009e72 <_malloc_r+0x282>
 8009c5e:	3302      	adds	r3, #2
 8009c60:	4a8c      	ldr	r2, [pc, #560]	; (8009e94 <_malloc_r+0x2a4>)
 8009c62:	692e      	ldr	r6, [r5, #16]
 8009c64:	4296      	cmp	r6, r2
 8009c66:	4611      	mov	r1, r2
 8009c68:	d06d      	beq.n	8009d46 <_malloc_r+0x156>
 8009c6a:	6870      	ldr	r0, [r6, #4]
 8009c6c:	f020 0003 	bic.w	r0, r0, #3
 8009c70:	1b07      	subs	r7, r0, r4
 8009c72:	2f0f      	cmp	r7, #15
 8009c74:	dd47      	ble.n	8009d06 <_malloc_r+0x116>
 8009c76:	1933      	adds	r3, r6, r4
 8009c78:	f044 0401 	orr.w	r4, r4, #1
 8009c7c:	6074      	str	r4, [r6, #4]
 8009c7e:	616b      	str	r3, [r5, #20]
 8009c80:	612b      	str	r3, [r5, #16]
 8009c82:	60da      	str	r2, [r3, #12]
 8009c84:	609a      	str	r2, [r3, #8]
 8009c86:	f047 0201 	orr.w	r2, r7, #1
 8009c8a:	605a      	str	r2, [r3, #4]
 8009c8c:	5037      	str	r7, [r6, r0]
 8009c8e:	e7e1      	b.n	8009c54 <_malloc_r+0x64>
 8009c90:	0a63      	lsrs	r3, r4, #9
 8009c92:	d02a      	beq.n	8009cea <_malloc_r+0xfa>
 8009c94:	2b04      	cmp	r3, #4
 8009c96:	d812      	bhi.n	8009cbe <_malloc_r+0xce>
 8009c98:	09a3      	lsrs	r3, r4, #6
 8009c9a:	3338      	adds	r3, #56	; 0x38
 8009c9c:	1c5a      	adds	r2, r3, #1
 8009c9e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8009ca2:	f1a2 0008 	sub.w	r0, r2, #8
 8009ca6:	6856      	ldr	r6, [r2, #4]
 8009ca8:	4286      	cmp	r6, r0
 8009caa:	d006      	beq.n	8009cba <_malloc_r+0xca>
 8009cac:	6872      	ldr	r2, [r6, #4]
 8009cae:	f022 0203 	bic.w	r2, r2, #3
 8009cb2:	1b11      	subs	r1, r2, r4
 8009cb4:	290f      	cmp	r1, #15
 8009cb6:	dd1c      	ble.n	8009cf2 <_malloc_r+0x102>
 8009cb8:	3b01      	subs	r3, #1
 8009cba:	3301      	adds	r3, #1
 8009cbc:	e7d0      	b.n	8009c60 <_malloc_r+0x70>
 8009cbe:	2b14      	cmp	r3, #20
 8009cc0:	d801      	bhi.n	8009cc6 <_malloc_r+0xd6>
 8009cc2:	335b      	adds	r3, #91	; 0x5b
 8009cc4:	e7ea      	b.n	8009c9c <_malloc_r+0xac>
 8009cc6:	2b54      	cmp	r3, #84	; 0x54
 8009cc8:	d802      	bhi.n	8009cd0 <_malloc_r+0xe0>
 8009cca:	0b23      	lsrs	r3, r4, #12
 8009ccc:	336e      	adds	r3, #110	; 0x6e
 8009cce:	e7e5      	b.n	8009c9c <_malloc_r+0xac>
 8009cd0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8009cd4:	d802      	bhi.n	8009cdc <_malloc_r+0xec>
 8009cd6:	0be3      	lsrs	r3, r4, #15
 8009cd8:	3377      	adds	r3, #119	; 0x77
 8009cda:	e7df      	b.n	8009c9c <_malloc_r+0xac>
 8009cdc:	f240 5254 	movw	r2, #1364	; 0x554
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d804      	bhi.n	8009cee <_malloc_r+0xfe>
 8009ce4:	0ca3      	lsrs	r3, r4, #18
 8009ce6:	337c      	adds	r3, #124	; 0x7c
 8009ce8:	e7d8      	b.n	8009c9c <_malloc_r+0xac>
 8009cea:	233f      	movs	r3, #63	; 0x3f
 8009cec:	e7d6      	b.n	8009c9c <_malloc_r+0xac>
 8009cee:	237e      	movs	r3, #126	; 0x7e
 8009cf0:	e7d4      	b.n	8009c9c <_malloc_r+0xac>
 8009cf2:	2900      	cmp	r1, #0
 8009cf4:	68f1      	ldr	r1, [r6, #12]
 8009cf6:	db04      	blt.n	8009d02 <_malloc_r+0x112>
 8009cf8:	68b3      	ldr	r3, [r6, #8]
 8009cfa:	60d9      	str	r1, [r3, #12]
 8009cfc:	608b      	str	r3, [r1, #8]
 8009cfe:	18b3      	adds	r3, r6, r2
 8009d00:	e7a4      	b.n	8009c4c <_malloc_r+0x5c>
 8009d02:	460e      	mov	r6, r1
 8009d04:	e7d0      	b.n	8009ca8 <_malloc_r+0xb8>
 8009d06:	2f00      	cmp	r7, #0
 8009d08:	616a      	str	r2, [r5, #20]
 8009d0a:	612a      	str	r2, [r5, #16]
 8009d0c:	db05      	blt.n	8009d1a <_malloc_r+0x12a>
 8009d0e:	4430      	add	r0, r6
 8009d10:	6843      	ldr	r3, [r0, #4]
 8009d12:	f043 0301 	orr.w	r3, r3, #1
 8009d16:	6043      	str	r3, [r0, #4]
 8009d18:	e79c      	b.n	8009c54 <_malloc_r+0x64>
 8009d1a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009d1e:	d244      	bcs.n	8009daa <_malloc_r+0x1ba>
 8009d20:	08c0      	lsrs	r0, r0, #3
 8009d22:	1087      	asrs	r7, r0, #2
 8009d24:	2201      	movs	r2, #1
 8009d26:	fa02 f707 	lsl.w	r7, r2, r7
 8009d2a:	686a      	ldr	r2, [r5, #4]
 8009d2c:	3001      	adds	r0, #1
 8009d2e:	433a      	orrs	r2, r7
 8009d30:	606a      	str	r2, [r5, #4]
 8009d32:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8009d36:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8009d3a:	60b7      	str	r7, [r6, #8]
 8009d3c:	3a08      	subs	r2, #8
 8009d3e:	60f2      	str	r2, [r6, #12]
 8009d40:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8009d44:	60fe      	str	r6, [r7, #12]
 8009d46:	2001      	movs	r0, #1
 8009d48:	109a      	asrs	r2, r3, #2
 8009d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8009d4e:	6868      	ldr	r0, [r5, #4]
 8009d50:	4282      	cmp	r2, r0
 8009d52:	f200 80a1 	bhi.w	8009e98 <_malloc_r+0x2a8>
 8009d56:	4202      	tst	r2, r0
 8009d58:	d106      	bne.n	8009d68 <_malloc_r+0x178>
 8009d5a:	f023 0303 	bic.w	r3, r3, #3
 8009d5e:	0052      	lsls	r2, r2, #1
 8009d60:	4202      	tst	r2, r0
 8009d62:	f103 0304 	add.w	r3, r3, #4
 8009d66:	d0fa      	beq.n	8009d5e <_malloc_r+0x16e>
 8009d68:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8009d6c:	46e0      	mov	r8, ip
 8009d6e:	469e      	mov	lr, r3
 8009d70:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8009d74:	4546      	cmp	r6, r8
 8009d76:	d153      	bne.n	8009e20 <_malloc_r+0x230>
 8009d78:	f10e 0e01 	add.w	lr, lr, #1
 8009d7c:	f01e 0f03 	tst.w	lr, #3
 8009d80:	f108 0808 	add.w	r8, r8, #8
 8009d84:	d1f4      	bne.n	8009d70 <_malloc_r+0x180>
 8009d86:	0798      	lsls	r0, r3, #30
 8009d88:	d179      	bne.n	8009e7e <_malloc_r+0x28e>
 8009d8a:	686b      	ldr	r3, [r5, #4]
 8009d8c:	ea23 0302 	bic.w	r3, r3, r2
 8009d90:	606b      	str	r3, [r5, #4]
 8009d92:	6868      	ldr	r0, [r5, #4]
 8009d94:	0052      	lsls	r2, r2, #1
 8009d96:	4282      	cmp	r2, r0
 8009d98:	d87e      	bhi.n	8009e98 <_malloc_r+0x2a8>
 8009d9a:	2a00      	cmp	r2, #0
 8009d9c:	d07c      	beq.n	8009e98 <_malloc_r+0x2a8>
 8009d9e:	4673      	mov	r3, lr
 8009da0:	4202      	tst	r2, r0
 8009da2:	d1e1      	bne.n	8009d68 <_malloc_r+0x178>
 8009da4:	3304      	adds	r3, #4
 8009da6:	0052      	lsls	r2, r2, #1
 8009da8:	e7fa      	b.n	8009da0 <_malloc_r+0x1b0>
 8009daa:	0a42      	lsrs	r2, r0, #9
 8009dac:	2a04      	cmp	r2, #4
 8009dae:	d815      	bhi.n	8009ddc <_malloc_r+0x1ec>
 8009db0:	0982      	lsrs	r2, r0, #6
 8009db2:	3238      	adds	r2, #56	; 0x38
 8009db4:	1c57      	adds	r7, r2, #1
 8009db6:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8009dba:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8009dbe:	45be      	cmp	lr, r7
 8009dc0:	d126      	bne.n	8009e10 <_malloc_r+0x220>
 8009dc2:	2001      	movs	r0, #1
 8009dc4:	1092      	asrs	r2, r2, #2
 8009dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8009dca:	6868      	ldr	r0, [r5, #4]
 8009dcc:	4310      	orrs	r0, r2
 8009dce:	6068      	str	r0, [r5, #4]
 8009dd0:	f8c6 e00c 	str.w	lr, [r6, #12]
 8009dd4:	60b7      	str	r7, [r6, #8]
 8009dd6:	f8ce 6008 	str.w	r6, [lr, #8]
 8009dda:	e7b3      	b.n	8009d44 <_malloc_r+0x154>
 8009ddc:	2a14      	cmp	r2, #20
 8009dde:	d801      	bhi.n	8009de4 <_malloc_r+0x1f4>
 8009de0:	325b      	adds	r2, #91	; 0x5b
 8009de2:	e7e7      	b.n	8009db4 <_malloc_r+0x1c4>
 8009de4:	2a54      	cmp	r2, #84	; 0x54
 8009de6:	d802      	bhi.n	8009dee <_malloc_r+0x1fe>
 8009de8:	0b02      	lsrs	r2, r0, #12
 8009dea:	326e      	adds	r2, #110	; 0x6e
 8009dec:	e7e2      	b.n	8009db4 <_malloc_r+0x1c4>
 8009dee:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8009df2:	d802      	bhi.n	8009dfa <_malloc_r+0x20a>
 8009df4:	0bc2      	lsrs	r2, r0, #15
 8009df6:	3277      	adds	r2, #119	; 0x77
 8009df8:	e7dc      	b.n	8009db4 <_malloc_r+0x1c4>
 8009dfa:	f240 5754 	movw	r7, #1364	; 0x554
 8009dfe:	42ba      	cmp	r2, r7
 8009e00:	bf9a      	itte	ls
 8009e02:	0c82      	lsrls	r2, r0, #18
 8009e04:	327c      	addls	r2, #124	; 0x7c
 8009e06:	227e      	movhi	r2, #126	; 0x7e
 8009e08:	e7d4      	b.n	8009db4 <_malloc_r+0x1c4>
 8009e0a:	68bf      	ldr	r7, [r7, #8]
 8009e0c:	45be      	cmp	lr, r7
 8009e0e:	d004      	beq.n	8009e1a <_malloc_r+0x22a>
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	f022 0203 	bic.w	r2, r2, #3
 8009e16:	4290      	cmp	r0, r2
 8009e18:	d3f7      	bcc.n	8009e0a <_malloc_r+0x21a>
 8009e1a:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8009e1e:	e7d7      	b.n	8009dd0 <_malloc_r+0x1e0>
 8009e20:	6870      	ldr	r0, [r6, #4]
 8009e22:	68f7      	ldr	r7, [r6, #12]
 8009e24:	f020 0003 	bic.w	r0, r0, #3
 8009e28:	eba0 0a04 	sub.w	sl, r0, r4
 8009e2c:	f1ba 0f0f 	cmp.w	sl, #15
 8009e30:	dd10      	ble.n	8009e54 <_malloc_r+0x264>
 8009e32:	68b2      	ldr	r2, [r6, #8]
 8009e34:	1933      	adds	r3, r6, r4
 8009e36:	f044 0401 	orr.w	r4, r4, #1
 8009e3a:	6074      	str	r4, [r6, #4]
 8009e3c:	60d7      	str	r7, [r2, #12]
 8009e3e:	60ba      	str	r2, [r7, #8]
 8009e40:	f04a 0201 	orr.w	r2, sl, #1
 8009e44:	616b      	str	r3, [r5, #20]
 8009e46:	612b      	str	r3, [r5, #16]
 8009e48:	60d9      	str	r1, [r3, #12]
 8009e4a:	6099      	str	r1, [r3, #8]
 8009e4c:	605a      	str	r2, [r3, #4]
 8009e4e:	f846 a000 	str.w	sl, [r6, r0]
 8009e52:	e6ff      	b.n	8009c54 <_malloc_r+0x64>
 8009e54:	f1ba 0f00 	cmp.w	sl, #0
 8009e58:	db0f      	blt.n	8009e7a <_malloc_r+0x28a>
 8009e5a:	4430      	add	r0, r6
 8009e5c:	6843      	ldr	r3, [r0, #4]
 8009e5e:	f043 0301 	orr.w	r3, r3, #1
 8009e62:	6043      	str	r3, [r0, #4]
 8009e64:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8009e68:	4648      	mov	r0, r9
 8009e6a:	60df      	str	r7, [r3, #12]
 8009e6c:	60bb      	str	r3, [r7, #8]
 8009e6e:	f000 fb43 	bl	800a4f8 <__malloc_unlock>
 8009e72:	4630      	mov	r0, r6
 8009e74:	b003      	add	sp, #12
 8009e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e7a:	463e      	mov	r6, r7
 8009e7c:	e77a      	b.n	8009d74 <_malloc_r+0x184>
 8009e7e:	f85c 0908 	ldr.w	r0, [ip], #-8
 8009e82:	4584      	cmp	ip, r0
 8009e84:	f103 33ff 	add.w	r3, r3, #4294967295
 8009e88:	f43f af7d 	beq.w	8009d86 <_malloc_r+0x196>
 8009e8c:	e781      	b.n	8009d92 <_malloc_r+0x1a2>
 8009e8e:	bf00      	nop
 8009e90:	20000104 	.word	0x20000104
 8009e94:	2000010c 	.word	0x2000010c
 8009e98:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8009e9c:	f8db 6004 	ldr.w	r6, [fp, #4]
 8009ea0:	f026 0603 	bic.w	r6, r6, #3
 8009ea4:	42b4      	cmp	r4, r6
 8009ea6:	d803      	bhi.n	8009eb0 <_malloc_r+0x2c0>
 8009ea8:	1b33      	subs	r3, r6, r4
 8009eaa:	2b0f      	cmp	r3, #15
 8009eac:	f300 8096 	bgt.w	8009fdc <_malloc_r+0x3ec>
 8009eb0:	4a4f      	ldr	r2, [pc, #316]	; (8009ff0 <_malloc_r+0x400>)
 8009eb2:	6817      	ldr	r7, [r2, #0]
 8009eb4:	4a4f      	ldr	r2, [pc, #316]	; (8009ff4 <_malloc_r+0x404>)
 8009eb6:	6811      	ldr	r1, [r2, #0]
 8009eb8:	3710      	adds	r7, #16
 8009eba:	3101      	adds	r1, #1
 8009ebc:	eb0b 0306 	add.w	r3, fp, r6
 8009ec0:	4427      	add	r7, r4
 8009ec2:	d005      	beq.n	8009ed0 <_malloc_r+0x2e0>
 8009ec4:	494c      	ldr	r1, [pc, #304]	; (8009ff8 <_malloc_r+0x408>)
 8009ec6:	3901      	subs	r1, #1
 8009ec8:	440f      	add	r7, r1
 8009eca:	3101      	adds	r1, #1
 8009ecc:	4249      	negs	r1, r1
 8009ece:	400f      	ands	r7, r1
 8009ed0:	4639      	mov	r1, r7
 8009ed2:	4648      	mov	r0, r9
 8009ed4:	9201      	str	r2, [sp, #4]
 8009ed6:	9300      	str	r3, [sp, #0]
 8009ed8:	f000 fb94 	bl	800a604 <_sbrk_r>
 8009edc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009ee0:	4680      	mov	r8, r0
 8009ee2:	d056      	beq.n	8009f92 <_malloc_r+0x3a2>
 8009ee4:	9b00      	ldr	r3, [sp, #0]
 8009ee6:	9a01      	ldr	r2, [sp, #4]
 8009ee8:	4283      	cmp	r3, r0
 8009eea:	d901      	bls.n	8009ef0 <_malloc_r+0x300>
 8009eec:	45ab      	cmp	fp, r5
 8009eee:	d150      	bne.n	8009f92 <_malloc_r+0x3a2>
 8009ef0:	4842      	ldr	r0, [pc, #264]	; (8009ffc <_malloc_r+0x40c>)
 8009ef2:	6801      	ldr	r1, [r0, #0]
 8009ef4:	4543      	cmp	r3, r8
 8009ef6:	eb07 0e01 	add.w	lr, r7, r1
 8009efa:	f8c0 e000 	str.w	lr, [r0]
 8009efe:	4940      	ldr	r1, [pc, #256]	; (800a000 <_malloc_r+0x410>)
 8009f00:	4682      	mov	sl, r0
 8009f02:	d113      	bne.n	8009f2c <_malloc_r+0x33c>
 8009f04:	420b      	tst	r3, r1
 8009f06:	d111      	bne.n	8009f2c <_malloc_r+0x33c>
 8009f08:	68ab      	ldr	r3, [r5, #8]
 8009f0a:	443e      	add	r6, r7
 8009f0c:	f046 0601 	orr.w	r6, r6, #1
 8009f10:	605e      	str	r6, [r3, #4]
 8009f12:	4a3c      	ldr	r2, [pc, #240]	; (800a004 <_malloc_r+0x414>)
 8009f14:	f8da 3000 	ldr.w	r3, [sl]
 8009f18:	6811      	ldr	r1, [r2, #0]
 8009f1a:	428b      	cmp	r3, r1
 8009f1c:	bf88      	it	hi
 8009f1e:	6013      	strhi	r3, [r2, #0]
 8009f20:	4a39      	ldr	r2, [pc, #228]	; (800a008 <_malloc_r+0x418>)
 8009f22:	6811      	ldr	r1, [r2, #0]
 8009f24:	428b      	cmp	r3, r1
 8009f26:	bf88      	it	hi
 8009f28:	6013      	strhi	r3, [r2, #0]
 8009f2a:	e032      	b.n	8009f92 <_malloc_r+0x3a2>
 8009f2c:	6810      	ldr	r0, [r2, #0]
 8009f2e:	3001      	adds	r0, #1
 8009f30:	bf1b      	ittet	ne
 8009f32:	eba8 0303 	subne.w	r3, r8, r3
 8009f36:	4473      	addne	r3, lr
 8009f38:	f8c2 8000 	streq.w	r8, [r2]
 8009f3c:	f8ca 3000 	strne.w	r3, [sl]
 8009f40:	f018 0007 	ands.w	r0, r8, #7
 8009f44:	bf1c      	itt	ne
 8009f46:	f1c0 0008 	rsbne	r0, r0, #8
 8009f4a:	4480      	addne	r8, r0
 8009f4c:	4b2a      	ldr	r3, [pc, #168]	; (8009ff8 <_malloc_r+0x408>)
 8009f4e:	4447      	add	r7, r8
 8009f50:	4418      	add	r0, r3
 8009f52:	400f      	ands	r7, r1
 8009f54:	1bc7      	subs	r7, r0, r7
 8009f56:	4639      	mov	r1, r7
 8009f58:	4648      	mov	r0, r9
 8009f5a:	f000 fb53 	bl	800a604 <_sbrk_r>
 8009f5e:	1c43      	adds	r3, r0, #1
 8009f60:	bf08      	it	eq
 8009f62:	4640      	moveq	r0, r8
 8009f64:	f8da 3000 	ldr.w	r3, [sl]
 8009f68:	f8c5 8008 	str.w	r8, [r5, #8]
 8009f6c:	bf08      	it	eq
 8009f6e:	2700      	moveq	r7, #0
 8009f70:	eba0 0008 	sub.w	r0, r0, r8
 8009f74:	443b      	add	r3, r7
 8009f76:	4407      	add	r7, r0
 8009f78:	f047 0701 	orr.w	r7, r7, #1
 8009f7c:	45ab      	cmp	fp, r5
 8009f7e:	f8ca 3000 	str.w	r3, [sl]
 8009f82:	f8c8 7004 	str.w	r7, [r8, #4]
 8009f86:	d0c4      	beq.n	8009f12 <_malloc_r+0x322>
 8009f88:	2e0f      	cmp	r6, #15
 8009f8a:	d810      	bhi.n	8009fae <_malloc_r+0x3be>
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	f8c8 3004 	str.w	r3, [r8, #4]
 8009f92:	68ab      	ldr	r3, [r5, #8]
 8009f94:	685a      	ldr	r2, [r3, #4]
 8009f96:	f022 0203 	bic.w	r2, r2, #3
 8009f9a:	4294      	cmp	r4, r2
 8009f9c:	eba2 0304 	sub.w	r3, r2, r4
 8009fa0:	d801      	bhi.n	8009fa6 <_malloc_r+0x3b6>
 8009fa2:	2b0f      	cmp	r3, #15
 8009fa4:	dc1a      	bgt.n	8009fdc <_malloc_r+0x3ec>
 8009fa6:	4648      	mov	r0, r9
 8009fa8:	f000 faa6 	bl	800a4f8 <__malloc_unlock>
 8009fac:	e62d      	b.n	8009c0a <_malloc_r+0x1a>
 8009fae:	f8db 3004 	ldr.w	r3, [fp, #4]
 8009fb2:	3e0c      	subs	r6, #12
 8009fb4:	f026 0607 	bic.w	r6, r6, #7
 8009fb8:	f003 0301 	and.w	r3, r3, #1
 8009fbc:	4333      	orrs	r3, r6
 8009fbe:	f8cb 3004 	str.w	r3, [fp, #4]
 8009fc2:	eb0b 0306 	add.w	r3, fp, r6
 8009fc6:	2205      	movs	r2, #5
 8009fc8:	2e0f      	cmp	r6, #15
 8009fca:	605a      	str	r2, [r3, #4]
 8009fcc:	609a      	str	r2, [r3, #8]
 8009fce:	d9a0      	bls.n	8009f12 <_malloc_r+0x322>
 8009fd0:	f10b 0108 	add.w	r1, fp, #8
 8009fd4:	4648      	mov	r0, r9
 8009fd6:	f003 fe2d 	bl	800dc34 <_free_r>
 8009fda:	e79a      	b.n	8009f12 <_malloc_r+0x322>
 8009fdc:	68ae      	ldr	r6, [r5, #8]
 8009fde:	f044 0201 	orr.w	r2, r4, #1
 8009fe2:	4434      	add	r4, r6
 8009fe4:	f043 0301 	orr.w	r3, r3, #1
 8009fe8:	6072      	str	r2, [r6, #4]
 8009fea:	60ac      	str	r4, [r5, #8]
 8009fec:	6063      	str	r3, [r4, #4]
 8009fee:	e631      	b.n	8009c54 <_malloc_r+0x64>
 8009ff0:	20000720 	.word	0x20000720
 8009ff4:	2000050c 	.word	0x2000050c
 8009ff8:	00000080 	.word	0x00000080
 8009ffc:	200006f0 	.word	0x200006f0
 800a000:	0000007f 	.word	0x0000007f
 800a004:	20000718 	.word	0x20000718
 800a008:	2000071c 	.word	0x2000071c

0800a00c <memcpy>:
 800a00c:	b510      	push	{r4, lr}
 800a00e:	1e43      	subs	r3, r0, #1
 800a010:	440a      	add	r2, r1
 800a012:	4291      	cmp	r1, r2
 800a014:	d100      	bne.n	800a018 <memcpy+0xc>
 800a016:	bd10      	pop	{r4, pc}
 800a018:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a01c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a020:	e7f7      	b.n	800a012 <memcpy+0x6>

0800a022 <memset>:
 800a022:	4402      	add	r2, r0
 800a024:	4603      	mov	r3, r0
 800a026:	4293      	cmp	r3, r2
 800a028:	d100      	bne.n	800a02c <memset+0xa>
 800a02a:	4770      	bx	lr
 800a02c:	f803 1b01 	strb.w	r1, [r3], #1
 800a030:	e7f9      	b.n	800a026 <memset+0x4>
	...

0800a034 <validate_structure>:
 800a034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a036:	6801      	ldr	r1, [r0, #0]
 800a038:	293b      	cmp	r1, #59	; 0x3b
 800a03a:	4604      	mov	r4, r0
 800a03c:	d911      	bls.n	800a062 <validate_structure+0x2e>
 800a03e:	223c      	movs	r2, #60	; 0x3c
 800a040:	4668      	mov	r0, sp
 800a042:	f002 fd87 	bl	800cb54 <div>
 800a046:	9a01      	ldr	r2, [sp, #4]
 800a048:	6863      	ldr	r3, [r4, #4]
 800a04a:	9900      	ldr	r1, [sp, #0]
 800a04c:	2a00      	cmp	r2, #0
 800a04e:	440b      	add	r3, r1
 800a050:	6063      	str	r3, [r4, #4]
 800a052:	bfbb      	ittet	lt
 800a054:	323c      	addlt	r2, #60	; 0x3c
 800a056:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800a05a:	6022      	strge	r2, [r4, #0]
 800a05c:	6022      	strlt	r2, [r4, #0]
 800a05e:	bfb8      	it	lt
 800a060:	6063      	strlt	r3, [r4, #4]
 800a062:	6861      	ldr	r1, [r4, #4]
 800a064:	293b      	cmp	r1, #59	; 0x3b
 800a066:	d911      	bls.n	800a08c <validate_structure+0x58>
 800a068:	223c      	movs	r2, #60	; 0x3c
 800a06a:	4668      	mov	r0, sp
 800a06c:	f002 fd72 	bl	800cb54 <div>
 800a070:	9a01      	ldr	r2, [sp, #4]
 800a072:	68a3      	ldr	r3, [r4, #8]
 800a074:	9900      	ldr	r1, [sp, #0]
 800a076:	2a00      	cmp	r2, #0
 800a078:	440b      	add	r3, r1
 800a07a:	60a3      	str	r3, [r4, #8]
 800a07c:	bfbb      	ittet	lt
 800a07e:	323c      	addlt	r2, #60	; 0x3c
 800a080:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800a084:	6062      	strge	r2, [r4, #4]
 800a086:	6062      	strlt	r2, [r4, #4]
 800a088:	bfb8      	it	lt
 800a08a:	60a3      	strlt	r3, [r4, #8]
 800a08c:	68a1      	ldr	r1, [r4, #8]
 800a08e:	2917      	cmp	r1, #23
 800a090:	d911      	bls.n	800a0b6 <validate_structure+0x82>
 800a092:	2218      	movs	r2, #24
 800a094:	4668      	mov	r0, sp
 800a096:	f002 fd5d 	bl	800cb54 <div>
 800a09a:	9a01      	ldr	r2, [sp, #4]
 800a09c:	68e3      	ldr	r3, [r4, #12]
 800a09e:	9900      	ldr	r1, [sp, #0]
 800a0a0:	2a00      	cmp	r2, #0
 800a0a2:	440b      	add	r3, r1
 800a0a4:	60e3      	str	r3, [r4, #12]
 800a0a6:	bfbb      	ittet	lt
 800a0a8:	3218      	addlt	r2, #24
 800a0aa:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800a0ae:	60a2      	strge	r2, [r4, #8]
 800a0b0:	60a2      	strlt	r2, [r4, #8]
 800a0b2:	bfb8      	it	lt
 800a0b4:	60e3      	strlt	r3, [r4, #12]
 800a0b6:	6921      	ldr	r1, [r4, #16]
 800a0b8:	290b      	cmp	r1, #11
 800a0ba:	d911      	bls.n	800a0e0 <validate_structure+0xac>
 800a0bc:	220c      	movs	r2, #12
 800a0be:	4668      	mov	r0, sp
 800a0c0:	f002 fd48 	bl	800cb54 <div>
 800a0c4:	9a01      	ldr	r2, [sp, #4]
 800a0c6:	6963      	ldr	r3, [r4, #20]
 800a0c8:	9900      	ldr	r1, [sp, #0]
 800a0ca:	2a00      	cmp	r2, #0
 800a0cc:	440b      	add	r3, r1
 800a0ce:	6163      	str	r3, [r4, #20]
 800a0d0:	bfbb      	ittet	lt
 800a0d2:	320c      	addlt	r2, #12
 800a0d4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800a0d8:	6122      	strge	r2, [r4, #16]
 800a0da:	6122      	strlt	r2, [r4, #16]
 800a0dc:	bfb8      	it	lt
 800a0de:	6163      	strlt	r3, [r4, #20]
 800a0e0:	6963      	ldr	r3, [r4, #20]
 800a0e2:	0799      	lsls	r1, r3, #30
 800a0e4:	d143      	bne.n	800a16e <validate_structure+0x13a>
 800a0e6:	2164      	movs	r1, #100	; 0x64
 800a0e8:	fb93 f2f1 	sdiv	r2, r3, r1
 800a0ec:	fb01 3212 	mls	r2, r1, r2, r3
 800a0f0:	2a00      	cmp	r2, #0
 800a0f2:	d13e      	bne.n	800a172 <validate_structure+0x13e>
 800a0f4:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800a0f8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800a0fc:	fb93 f2f1 	sdiv	r2, r3, r1
 800a100:	fb01 3312 	mls	r3, r1, r2, r3
 800a104:	2b00      	cmp	r3, #0
 800a106:	bf14      	ite	ne
 800a108:	231c      	movne	r3, #28
 800a10a:	231d      	moveq	r3, #29
 800a10c:	68e2      	ldr	r2, [r4, #12]
 800a10e:	2a00      	cmp	r2, #0
 800a110:	dd31      	ble.n	800a176 <validate_structure+0x142>
 800a112:	4f37      	ldr	r7, [pc, #220]	; (800a1f0 <validate_structure+0x1bc>)
 800a114:	2602      	movs	r6, #2
 800a116:	f04f 0e00 	mov.w	lr, #0
 800a11a:	2064      	movs	r0, #100	; 0x64
 800a11c:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800a120:	6921      	ldr	r1, [r4, #16]
 800a122:	68e2      	ldr	r2, [r4, #12]
 800a124:	2901      	cmp	r1, #1
 800a126:	d05d      	beq.n	800a1e4 <validate_structure+0x1b0>
 800a128:	f857 c021 	ldr.w	ip, [r7, r1, lsl #2]
 800a12c:	4562      	cmp	r2, ip
 800a12e:	dd2c      	ble.n	800a18a <validate_structure+0x156>
 800a130:	3101      	adds	r1, #1
 800a132:	eba2 020c 	sub.w	r2, r2, ip
 800a136:	290c      	cmp	r1, #12
 800a138:	60e2      	str	r2, [r4, #12]
 800a13a:	6121      	str	r1, [r4, #16]
 800a13c:	d1f0      	bne.n	800a120 <validate_structure+0xec>
 800a13e:	6963      	ldr	r3, [r4, #20]
 800a140:	f8c4 e010 	str.w	lr, [r4, #16]
 800a144:	1c5a      	adds	r2, r3, #1
 800a146:	0791      	lsls	r1, r2, #30
 800a148:	6162      	str	r2, [r4, #20]
 800a14a:	d147      	bne.n	800a1dc <validate_structure+0x1a8>
 800a14c:	fb92 f1f0 	sdiv	r1, r2, r0
 800a150:	fb00 2211 	mls	r2, r0, r1, r2
 800a154:	2a00      	cmp	r2, #0
 800a156:	d143      	bne.n	800a1e0 <validate_structure+0x1ac>
 800a158:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 800a15c:	fb93 f2f5 	sdiv	r2, r3, r5
 800a160:	fb05 3312 	mls	r3, r5, r2, r3
 800a164:	2b00      	cmp	r3, #0
 800a166:	bf14      	ite	ne
 800a168:	231c      	movne	r3, #28
 800a16a:	231d      	moveq	r3, #29
 800a16c:	e7d8      	b.n	800a120 <validate_structure+0xec>
 800a16e:	231c      	movs	r3, #28
 800a170:	e7cc      	b.n	800a10c <validate_structure+0xd8>
 800a172:	231d      	movs	r3, #29
 800a174:	e7ca      	b.n	800a10c <validate_structure+0xd8>
 800a176:	4f1e      	ldr	r7, [pc, #120]	; (800a1f0 <validate_structure+0x1bc>)
 800a178:	260b      	movs	r6, #11
 800a17a:	2064      	movs	r0, #100	; 0x64
 800a17c:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800a180:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800a184:	f1be 0f00 	cmp.w	lr, #0
 800a188:	dd01      	ble.n	800a18e <validate_structure+0x15a>
 800a18a:	b003      	add	sp, #12
 800a18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a18e:	6921      	ldr	r1, [r4, #16]
 800a190:	3901      	subs	r1, #1
 800a192:	6121      	str	r1, [r4, #16]
 800a194:	3101      	adds	r1, #1
 800a196:	d114      	bne.n	800a1c2 <validate_structure+0x18e>
 800a198:	6963      	ldr	r3, [r4, #20]
 800a19a:	6126      	str	r6, [r4, #16]
 800a19c:	1e59      	subs	r1, r3, #1
 800a19e:	078a      	lsls	r2, r1, #30
 800a1a0:	6161      	str	r1, [r4, #20]
 800a1a2:	d117      	bne.n	800a1d4 <validate_structure+0x1a0>
 800a1a4:	fb91 f2f0 	sdiv	r2, r1, r0
 800a1a8:	fb00 1112 	mls	r1, r0, r2, r1
 800a1ac:	b9a1      	cbnz	r1, 800a1d8 <validate_structure+0x1a4>
 800a1ae:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800a1b2:	fb93 f2f5 	sdiv	r2, r3, r5
 800a1b6:	fb05 3312 	mls	r3, r5, r2, r3
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	bf14      	ite	ne
 800a1be:	231c      	movne	r3, #28
 800a1c0:	231d      	moveq	r3, #29
 800a1c2:	6922      	ldr	r2, [r4, #16]
 800a1c4:	2a01      	cmp	r2, #1
 800a1c6:	bf14      	ite	ne
 800a1c8:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 800a1cc:	461a      	moveq	r2, r3
 800a1ce:	4472      	add	r2, lr
 800a1d0:	60e2      	str	r2, [r4, #12]
 800a1d2:	e7d5      	b.n	800a180 <validate_structure+0x14c>
 800a1d4:	231c      	movs	r3, #28
 800a1d6:	e7f4      	b.n	800a1c2 <validate_structure+0x18e>
 800a1d8:	231d      	movs	r3, #29
 800a1da:	e7f2      	b.n	800a1c2 <validate_structure+0x18e>
 800a1dc:	231c      	movs	r3, #28
 800a1de:	e79f      	b.n	800a120 <validate_structure+0xec>
 800a1e0:	231d      	movs	r3, #29
 800a1e2:	e79d      	b.n	800a120 <validate_structure+0xec>
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	dad0      	bge.n	800a18a <validate_structure+0x156>
 800a1e8:	1ad2      	subs	r2, r2, r3
 800a1ea:	60e2      	str	r2, [r4, #12]
 800a1ec:	6126      	str	r6, [r4, #16]
 800a1ee:	e797      	b.n	800a120 <validate_structure+0xec>
 800a1f0:	08010e80 	.word	0x08010e80

0800a1f4 <mktime>:
 800a1f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1f8:	4681      	mov	r9, r0
 800a1fa:	f004 fabb 	bl	800e774 <__gettzinfo>
 800a1fe:	4680      	mov	r8, r0
 800a200:	4648      	mov	r0, r9
 800a202:	f7ff ff17 	bl	800a034 <validate_structure>
 800a206:	e899 0081 	ldmia.w	r9, {r0, r7}
 800a20a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a20e:	4ab4      	ldr	r2, [pc, #720]	; (800a4e0 <mktime+0x2ec>)
 800a210:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800a214:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a218:	253c      	movs	r5, #60	; 0x3c
 800a21a:	fb05 0707 	mla	r7, r5, r7, r0
 800a21e:	f8d9 0008 	ldr.w	r0, [r9, #8]
 800a222:	f44f 6561 	mov.w	r5, #3600	; 0xe10
 800a226:	3c01      	subs	r4, #1
 800a228:	2b01      	cmp	r3, #1
 800a22a:	fb05 7000 	mla	r0, r5, r0, r7
 800a22e:	4414      	add	r4, r2
 800a230:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800a234:	dd11      	ble.n	800a25a <mktime+0x66>
 800a236:	0799      	lsls	r1, r3, #30
 800a238:	d10f      	bne.n	800a25a <mktime+0x66>
 800a23a:	2164      	movs	r1, #100	; 0x64
 800a23c:	fb93 f2f1 	sdiv	r2, r3, r1
 800a240:	fb01 3212 	mls	r2, r1, r2, r3
 800a244:	b942      	cbnz	r2, 800a258 <mktime+0x64>
 800a246:	f203 756c 	addw	r5, r3, #1900	; 0x76c
 800a24a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800a24e:	fb95 f2f1 	sdiv	r2, r5, r1
 800a252:	fb01 5212 	mls	r2, r1, r2, r5
 800a256:	b902      	cbnz	r2, 800a25a <mktime+0x66>
 800a258:	3401      	adds	r4, #1
 800a25a:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
 800a25e:	3210      	adds	r2, #16
 800a260:	f644 6120 	movw	r1, #20000	; 0x4e20
 800a264:	428a      	cmp	r2, r1
 800a266:	f8c9 401c 	str.w	r4, [r9, #28]
 800a26a:	f200 812d 	bhi.w	800a4c8 <mktime+0x2d4>
 800a26e:	2b46      	cmp	r3, #70	; 0x46
 800a270:	dd70      	ble.n	800a354 <mktime+0x160>
 800a272:	2546      	movs	r5, #70	; 0x46
 800a274:	f240 176d 	movw	r7, #365	; 0x16d
 800a278:	2164      	movs	r1, #100	; 0x64
 800a27a:	f44f 76c8 	mov.w	r6, #400	; 0x190
 800a27e:	07aa      	lsls	r2, r5, #30
 800a280:	d162      	bne.n	800a348 <mktime+0x154>
 800a282:	fb95 f2f1 	sdiv	r2, r5, r1
 800a286:	fb01 5212 	mls	r2, r1, r2, r5
 800a28a:	2a00      	cmp	r2, #0
 800a28c:	d15f      	bne.n	800a34e <mktime+0x15a>
 800a28e:	f205 7e6c 	addw	lr, r5, #1900	; 0x76c
 800a292:	fb9e f2f6 	sdiv	r2, lr, r6
 800a296:	fb06 e212 	mls	r2, r6, r2, lr
 800a29a:	2a00      	cmp	r2, #0
 800a29c:	bf14      	ite	ne
 800a29e:	463a      	movne	r2, r7
 800a2a0:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800a2a4:	3501      	adds	r5, #1
 800a2a6:	42ab      	cmp	r3, r5
 800a2a8:	4414      	add	r4, r2
 800a2aa:	d1e8      	bne.n	800a27e <mktime+0x8a>
 800a2ac:	4f8d      	ldr	r7, [pc, #564]	; (800a4e4 <mktime+0x2f0>)
 800a2ae:	fb07 0704 	mla	r7, r7, r4, r0
 800a2b2:	f001 f9d5 	bl	800b660 <__tz_lock>
 800a2b6:	f001 f9df 	bl	800b678 <_tzset_unlocked>
 800a2ba:	4b8b      	ldr	r3, [pc, #556]	; (800a4e8 <mktime+0x2f4>)
 800a2bc:	681e      	ldr	r6, [r3, #0]
 800a2be:	2e00      	cmp	r6, #0
 800a2c0:	f000 810a 	beq.w	800a4d8 <mktime+0x2e4>
 800a2c4:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800a2c8:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	bfa8      	it	ge
 800a2d0:	2301      	movge	r3, #1
 800a2d2:	469a      	mov	sl, r3
 800a2d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a2d8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800a2dc:	4298      	cmp	r0, r3
 800a2de:	d17c      	bne.n	800a3da <mktime+0x1e6>
 800a2e0:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 800a2e4:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800a2e8:	f8d8 003c 	ldr.w	r0, [r8, #60]	; 0x3c
 800a2ec:	f8d8 101c 	ldr.w	r1, [r8, #28]
 800a2f0:	1ad6      	subs	r6, r2, r3
 800a2f2:	42b7      	cmp	r7, r6
 800a2f4:	eba1 0100 	sub.w	r1, r1, r0
 800a2f8:	da76      	bge.n	800a3e8 <mktime+0x1f4>
 800a2fa:	f8d8 2000 	ldr.w	r2, [r8]
 800a2fe:	2a00      	cmp	r2, #0
 800a300:	d076      	beq.n	800a3f0 <mktime+0x1fc>
 800a302:	428f      	cmp	r7, r1
 800a304:	f2c0 80e3 	blt.w	800a4ce <mktime+0x2da>
 800a308:	42b7      	cmp	r7, r6
 800a30a:	bfac      	ite	ge
 800a30c:	2600      	movge	r6, #0
 800a30e:	2601      	movlt	r6, #1
 800a310:	f1ba 0f00 	cmp.w	sl, #0
 800a314:	da72      	bge.n	800a3fc <mktime+0x208>
 800a316:	2e01      	cmp	r6, #1
 800a318:	f040 80de 	bne.w	800a4d8 <mktime+0x2e4>
 800a31c:	f8d8 503c 	ldr.w	r5, [r8, #60]	; 0x3c
 800a320:	2601      	movs	r6, #1
 800a322:	443d      	add	r5, r7
 800a324:	f001 f9a2 	bl	800b66c <__tz_unlock>
 800a328:	3404      	adds	r4, #4
 800a32a:	2307      	movs	r3, #7
 800a32c:	fb94 f3f3 	sdiv	r3, r4, r3
 800a330:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800a334:	1ae4      	subs	r4, r4, r3
 800a336:	bf48      	it	mi
 800a338:	3407      	addmi	r4, #7
 800a33a:	f8c9 6020 	str.w	r6, [r9, #32]
 800a33e:	f8c9 4018 	str.w	r4, [r9, #24]
 800a342:	4628      	mov	r0, r5
 800a344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a348:	f240 126d 	movw	r2, #365	; 0x16d
 800a34c:	e7aa      	b.n	800a2a4 <mktime+0xb0>
 800a34e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800a352:	e7a7      	b.n	800a2a4 <mktime+0xb0>
 800a354:	d01e      	beq.n	800a394 <mktime+0x1a0>
 800a356:	2245      	movs	r2, #69	; 0x45
 800a358:	f240 176d 	movw	r7, #365	; 0x16d
 800a35c:	2564      	movs	r5, #100	; 0x64
 800a35e:	f44f 76c8 	mov.w	r6, #400	; 0x190
 800a362:	429a      	cmp	r2, r3
 800a364:	dc18      	bgt.n	800a398 <mktime+0x1a4>
 800a366:	079d      	lsls	r5, r3, #30
 800a368:	d131      	bne.n	800a3ce <mktime+0x1da>
 800a36a:	2164      	movs	r1, #100	; 0x64
 800a36c:	fb93 f2f1 	sdiv	r2, r3, r1
 800a370:	fb01 3212 	mls	r2, r1, r2, r3
 800a374:	bb72      	cbnz	r2, 800a3d4 <mktime+0x1e0>
 800a376:	f203 756c 	addw	r5, r3, #1900	; 0x76c
 800a37a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800a37e:	fb95 f2f1 	sdiv	r2, r5, r1
 800a382:	fb01 5212 	mls	r2, r1, r2, r5
 800a386:	2a00      	cmp	r2, #0
 800a388:	f240 126d 	movw	r2, #365	; 0x16d
 800a38c:	bf08      	it	eq
 800a38e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800a392:	1aa4      	subs	r4, r4, r2
 800a394:	461d      	mov	r5, r3
 800a396:	e789      	b.n	800a2ac <mktime+0xb8>
 800a398:	0791      	lsls	r1, r2, #30
 800a39a:	d112      	bne.n	800a3c2 <mktime+0x1ce>
 800a39c:	fb92 f1f5 	sdiv	r1, r2, r5
 800a3a0:	fb05 2111 	mls	r1, r5, r1, r2
 800a3a4:	b981      	cbnz	r1, 800a3c8 <mktime+0x1d4>
 800a3a6:	f202 7e6c 	addw	lr, r2, #1900	; 0x76c
 800a3aa:	fb9e f1f6 	sdiv	r1, lr, r6
 800a3ae:	fb06 e111 	mls	r1, r6, r1, lr
 800a3b2:	2900      	cmp	r1, #0
 800a3b4:	bf14      	ite	ne
 800a3b6:	4639      	movne	r1, r7
 800a3b8:	f44f 71b7 	moveq.w	r1, #366	; 0x16e
 800a3bc:	1a64      	subs	r4, r4, r1
 800a3be:	3a01      	subs	r2, #1
 800a3c0:	e7cf      	b.n	800a362 <mktime+0x16e>
 800a3c2:	f240 116d 	movw	r1, #365	; 0x16d
 800a3c6:	e7f9      	b.n	800a3bc <mktime+0x1c8>
 800a3c8:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 800a3cc:	e7f6      	b.n	800a3bc <mktime+0x1c8>
 800a3ce:	f240 126d 	movw	r2, #365	; 0x16d
 800a3d2:	e7de      	b.n	800a392 <mktime+0x19e>
 800a3d4:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800a3d8:	e7db      	b.n	800a392 <mktime+0x19e>
 800a3da:	f001 f899 	bl	800b510 <__tzcalc_limits>
 800a3de:	2800      	cmp	r0, #0
 800a3e0:	f47f af7e 	bne.w	800a2e0 <mktime+0xec>
 800a3e4:	4656      	mov	r6, sl
 800a3e6:	e796      	b.n	800a316 <mktime+0x122>
 800a3e8:	1a12      	subs	r2, r2, r0
 800a3ea:	4297      	cmp	r7, r2
 800a3ec:	dbfa      	blt.n	800a3e4 <mktime+0x1f0>
 800a3ee:	e784      	b.n	800a2fa <mktime+0x106>
 800a3f0:	428f      	cmp	r7, r1
 800a3f2:	db89      	blt.n	800a308 <mktime+0x114>
 800a3f4:	f1ba 0f00 	cmp.w	sl, #0
 800a3f8:	db90      	blt.n	800a31c <mktime+0x128>
 800a3fa:	2601      	movs	r6, #1
 800a3fc:	ea8a 0a06 	eor.w	sl, sl, r6
 800a400:	f1ba 0f01 	cmp.w	sl, #1
 800a404:	d187      	bne.n	800a316 <mktime+0x122>
 800a406:	1a1b      	subs	r3, r3, r0
 800a408:	b906      	cbnz	r6, 800a40c <mktime+0x218>
 800a40a:	425b      	negs	r3, r3
 800a40c:	f8d9 2000 	ldr.w	r2, [r9]
 800a410:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 800a414:	441a      	add	r2, r3
 800a416:	f8c9 2000 	str.w	r2, [r9]
 800a41a:	4648      	mov	r0, r9
 800a41c:	441f      	add	r7, r3
 800a41e:	f7ff fe09 	bl	800a034 <validate_structure>
 800a422:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800a426:	ebb3 030a 	subs.w	r3, r3, sl
 800a42a:	f43f af74 	beq.w	800a316 <mktime+0x122>
 800a42e:	2b01      	cmp	r3, #1
 800a430:	dc21      	bgt.n	800a476 <mktime+0x282>
 800a432:	1c98      	adds	r0, r3, #2
 800a434:	bfd8      	it	le
 800a436:	2301      	movle	r3, #1
 800a438:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800a43c:	441c      	add	r4, r3
 800a43e:	189b      	adds	r3, r3, r2
 800a440:	d522      	bpl.n	800a488 <mktime+0x294>
 800a442:	1e6a      	subs	r2, r5, #1
 800a444:	0791      	lsls	r1, r2, #30
 800a446:	d119      	bne.n	800a47c <mktime+0x288>
 800a448:	2164      	movs	r1, #100	; 0x64
 800a44a:	fb92 f3f1 	sdiv	r3, r2, r1
 800a44e:	fb01 2313 	mls	r3, r1, r3, r2
 800a452:	b9b3      	cbnz	r3, 800a482 <mktime+0x28e>
 800a454:	f205 756b 	addw	r5, r5, #1899	; 0x76b
 800a458:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a45c:	fb95 f3f2 	sdiv	r3, r5, r2
 800a460:	fb02 5513 	mls	r5, r2, r3, r5
 800a464:	2d00      	cmp	r5, #0
 800a466:	f240 136d 	movw	r3, #365	; 0x16d
 800a46a:	bf18      	it	ne
 800a46c:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800a470:	f8c9 301c 	str.w	r3, [r9, #28]
 800a474:	e74f      	b.n	800a316 <mktime+0x122>
 800a476:	f04f 33ff 	mov.w	r3, #4294967295
 800a47a:	e7dd      	b.n	800a438 <mktime+0x244>
 800a47c:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800a480:	e7f6      	b.n	800a470 <mktime+0x27c>
 800a482:	f240 136d 	movw	r3, #365	; 0x16d
 800a486:	e7f3      	b.n	800a470 <mktime+0x27c>
 800a488:	07aa      	lsls	r2, r5, #30
 800a48a:	d117      	bne.n	800a4bc <mktime+0x2c8>
 800a48c:	2164      	movs	r1, #100	; 0x64
 800a48e:	fb95 f2f1 	sdiv	r2, r5, r1
 800a492:	fb01 5212 	mls	r2, r1, r2, r5
 800a496:	b9a2      	cbnz	r2, 800a4c2 <mktime+0x2ce>
 800a498:	f205 756c 	addw	r5, r5, #1900	; 0x76c
 800a49c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800a4a0:	fb95 f2f1 	sdiv	r2, r5, r1
 800a4a4:	fb01 5512 	mls	r5, r1, r2, r5
 800a4a8:	2d00      	cmp	r5, #0
 800a4aa:	f240 126d 	movw	r2, #365	; 0x16d
 800a4ae:	bf08      	it	eq
 800a4b0:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	bfd8      	it	le
 800a4b8:	1a9b      	suble	r3, r3, r2
 800a4ba:	e7d9      	b.n	800a470 <mktime+0x27c>
 800a4bc:	f240 126d 	movw	r2, #365	; 0x16d
 800a4c0:	e7f8      	b.n	800a4b4 <mktime+0x2c0>
 800a4c2:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800a4c6:	e7f5      	b.n	800a4b4 <mktime+0x2c0>
 800a4c8:	f04f 35ff 	mov.w	r5, #4294967295
 800a4cc:	e739      	b.n	800a342 <mktime+0x14e>
 800a4ce:	f1ba 0f00 	cmp.w	sl, #0
 800a4d2:	f04f 0600 	mov.w	r6, #0
 800a4d6:	da91      	bge.n	800a3fc <mktime+0x208>
 800a4d8:	f8d8 5020 	ldr.w	r5, [r8, #32]
 800a4dc:	443d      	add	r5, r7
 800a4de:	e721      	b.n	800a324 <mktime+0x130>
 800a4e0:	08010eb0 	.word	0x08010eb0
 800a4e4:	00015180 	.word	0x00015180
 800a4e8:	20000740 	.word	0x20000740

0800a4ec <__malloc_lock>:
 800a4ec:	4801      	ldr	r0, [pc, #4]	; (800a4f4 <__malloc_lock+0x8>)
 800a4ee:	f004 ba12 	b.w	800e916 <__retarget_lock_acquire_recursive>
 800a4f2:	bf00      	nop
 800a4f4:	200021f4 	.word	0x200021f4

0800a4f8 <__malloc_unlock>:
 800a4f8:	4801      	ldr	r0, [pc, #4]	; (800a500 <__malloc_unlock+0x8>)
 800a4fa:	f004 ba0e 	b.w	800e91a <__retarget_lock_release_recursive>
 800a4fe:	bf00      	nop
 800a500:	200021f4 	.word	0x200021f4

0800a504 <printf>:
 800a504:	b40f      	push	{r0, r1, r2, r3}
 800a506:	4b0a      	ldr	r3, [pc, #40]	; (800a530 <printf+0x2c>)
 800a508:	b513      	push	{r0, r1, r4, lr}
 800a50a:	681c      	ldr	r4, [r3, #0]
 800a50c:	b124      	cbz	r4, 800a518 <printf+0x14>
 800a50e:	69a3      	ldr	r3, [r4, #24]
 800a510:	b913      	cbnz	r3, 800a518 <printf+0x14>
 800a512:	4620      	mov	r0, r4
 800a514:	f003 fab8 	bl	800da88 <__sinit>
 800a518:	ab05      	add	r3, sp, #20
 800a51a:	9a04      	ldr	r2, [sp, #16]
 800a51c:	68a1      	ldr	r1, [r4, #8]
 800a51e:	9301      	str	r3, [sp, #4]
 800a520:	4620      	mov	r0, r4
 800a522:	f001 fa31 	bl	800b988 <_vfprintf_r>
 800a526:	b002      	add	sp, #8
 800a528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a52c:	b004      	add	sp, #16
 800a52e:	4770      	bx	lr
 800a530:	20000010 	.word	0x20000010

0800a534 <_puts_r>:
 800a534:	b530      	push	{r4, r5, lr}
 800a536:	4605      	mov	r5, r0
 800a538:	b089      	sub	sp, #36	; 0x24
 800a53a:	4608      	mov	r0, r1
 800a53c:	460c      	mov	r4, r1
 800a53e:	f7f5 fe51 	bl	80001e4 <strlen>
 800a542:	4b28      	ldr	r3, [pc, #160]	; (800a5e4 <_puts_r+0xb0>)
 800a544:	9306      	str	r3, [sp, #24]
 800a546:	2301      	movs	r3, #1
 800a548:	9005      	str	r0, [sp, #20]
 800a54a:	9307      	str	r3, [sp, #28]
 800a54c:	4418      	add	r0, r3
 800a54e:	ab04      	add	r3, sp, #16
 800a550:	9301      	str	r3, [sp, #4]
 800a552:	2302      	movs	r3, #2
 800a554:	9404      	str	r4, [sp, #16]
 800a556:	9003      	str	r0, [sp, #12]
 800a558:	9302      	str	r3, [sp, #8]
 800a55a:	b125      	cbz	r5, 800a566 <_puts_r+0x32>
 800a55c:	69ab      	ldr	r3, [r5, #24]
 800a55e:	b913      	cbnz	r3, 800a566 <_puts_r+0x32>
 800a560:	4628      	mov	r0, r5
 800a562:	f003 fa91 	bl	800da88 <__sinit>
 800a566:	69ab      	ldr	r3, [r5, #24]
 800a568:	68ac      	ldr	r4, [r5, #8]
 800a56a:	b913      	cbnz	r3, 800a572 <_puts_r+0x3e>
 800a56c:	4628      	mov	r0, r5
 800a56e:	f003 fa8b 	bl	800da88 <__sinit>
 800a572:	4b1d      	ldr	r3, [pc, #116]	; (800a5e8 <_puts_r+0xb4>)
 800a574:	429c      	cmp	r4, r3
 800a576:	d12a      	bne.n	800a5ce <_puts_r+0x9a>
 800a578:	686c      	ldr	r4, [r5, #4]
 800a57a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a57c:	07db      	lsls	r3, r3, #31
 800a57e:	d405      	bmi.n	800a58c <_puts_r+0x58>
 800a580:	89a3      	ldrh	r3, [r4, #12]
 800a582:	0598      	lsls	r0, r3, #22
 800a584:	d402      	bmi.n	800a58c <_puts_r+0x58>
 800a586:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a588:	f004 f9c5 	bl	800e916 <__retarget_lock_acquire_recursive>
 800a58c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a590:	0499      	lsls	r1, r3, #18
 800a592:	d406      	bmi.n	800a5a2 <_puts_r+0x6e>
 800a594:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a598:	81a3      	strh	r3, [r4, #12]
 800a59a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a59c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a5a0:	6663      	str	r3, [r4, #100]	; 0x64
 800a5a2:	4628      	mov	r0, r5
 800a5a4:	aa01      	add	r2, sp, #4
 800a5a6:	4621      	mov	r1, r4
 800a5a8:	f003 fc00 	bl	800ddac <__sfvwrite_r>
 800a5ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5ae:	2800      	cmp	r0, #0
 800a5b0:	bf14      	ite	ne
 800a5b2:	f04f 35ff 	movne.w	r5, #4294967295
 800a5b6:	250a      	moveq	r5, #10
 800a5b8:	07da      	lsls	r2, r3, #31
 800a5ba:	d405      	bmi.n	800a5c8 <_puts_r+0x94>
 800a5bc:	89a3      	ldrh	r3, [r4, #12]
 800a5be:	059b      	lsls	r3, r3, #22
 800a5c0:	d402      	bmi.n	800a5c8 <_puts_r+0x94>
 800a5c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5c4:	f004 f9a9 	bl	800e91a <__retarget_lock_release_recursive>
 800a5c8:	4628      	mov	r0, r5
 800a5ca:	b009      	add	sp, #36	; 0x24
 800a5cc:	bd30      	pop	{r4, r5, pc}
 800a5ce:	4b07      	ldr	r3, [pc, #28]	; (800a5ec <_puts_r+0xb8>)
 800a5d0:	429c      	cmp	r4, r3
 800a5d2:	d101      	bne.n	800a5d8 <_puts_r+0xa4>
 800a5d4:	68ac      	ldr	r4, [r5, #8]
 800a5d6:	e7d0      	b.n	800a57a <_puts_r+0x46>
 800a5d8:	4b05      	ldr	r3, [pc, #20]	; (800a5f0 <_puts_r+0xbc>)
 800a5da:	429c      	cmp	r4, r3
 800a5dc:	bf08      	it	eq
 800a5de:	68ec      	ldreq	r4, [r5, #12]
 800a5e0:	e7cb      	b.n	800a57a <_puts_r+0x46>
 800a5e2:	bf00      	nop
 800a5e4:	08010f40 	.word	0x08010f40
 800a5e8:	08011058 	.word	0x08011058
 800a5ec:	08011078 	.word	0x08011078
 800a5f0:	08011038 	.word	0x08011038

0800a5f4 <puts>:
 800a5f4:	4b02      	ldr	r3, [pc, #8]	; (800a600 <puts+0xc>)
 800a5f6:	4601      	mov	r1, r0
 800a5f8:	6818      	ldr	r0, [r3, #0]
 800a5fa:	f7ff bf9b 	b.w	800a534 <_puts_r>
 800a5fe:	bf00      	nop
 800a600:	20000010 	.word	0x20000010

0800a604 <_sbrk_r>:
 800a604:	b538      	push	{r3, r4, r5, lr}
 800a606:	4c06      	ldr	r4, [pc, #24]	; (800a620 <_sbrk_r+0x1c>)
 800a608:	2300      	movs	r3, #0
 800a60a:	4605      	mov	r5, r0
 800a60c:	4608      	mov	r0, r1
 800a60e:	6023      	str	r3, [r4, #0]
 800a610:	f7ff f932 	bl	8009878 <_sbrk>
 800a614:	1c43      	adds	r3, r0, #1
 800a616:	d102      	bne.n	800a61e <_sbrk_r+0x1a>
 800a618:	6823      	ldr	r3, [r4, #0]
 800a61a:	b103      	cbz	r3, 800a61e <_sbrk_r+0x1a>
 800a61c:	602b      	str	r3, [r5, #0]
 800a61e:	bd38      	pop	{r3, r4, r5, pc}
 800a620:	200021fc 	.word	0x200021fc

0800a624 <setbuf>:
 800a624:	2900      	cmp	r1, #0
 800a626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a62a:	bf0c      	ite	eq
 800a62c:	2202      	moveq	r2, #2
 800a62e:	2200      	movne	r2, #0
 800a630:	f000 b800 	b.w	800a634 <setvbuf>

0800a634 <setvbuf>:
 800a634:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a638:	461d      	mov	r5, r3
 800a63a:	4b60      	ldr	r3, [pc, #384]	; (800a7bc <setvbuf+0x188>)
 800a63c:	681e      	ldr	r6, [r3, #0]
 800a63e:	4604      	mov	r4, r0
 800a640:	460f      	mov	r7, r1
 800a642:	4690      	mov	r8, r2
 800a644:	b126      	cbz	r6, 800a650 <setvbuf+0x1c>
 800a646:	69b3      	ldr	r3, [r6, #24]
 800a648:	b913      	cbnz	r3, 800a650 <setvbuf+0x1c>
 800a64a:	4630      	mov	r0, r6
 800a64c:	f003 fa1c 	bl	800da88 <__sinit>
 800a650:	4b5b      	ldr	r3, [pc, #364]	; (800a7c0 <setvbuf+0x18c>)
 800a652:	429c      	cmp	r4, r3
 800a654:	d166      	bne.n	800a724 <setvbuf+0xf0>
 800a656:	6874      	ldr	r4, [r6, #4]
 800a658:	f1b8 0f02 	cmp.w	r8, #2
 800a65c:	d006      	beq.n	800a66c <setvbuf+0x38>
 800a65e:	f1b8 0f01 	cmp.w	r8, #1
 800a662:	f200 80a7 	bhi.w	800a7b4 <setvbuf+0x180>
 800a666:	2d00      	cmp	r5, #0
 800a668:	f2c0 80a4 	blt.w	800a7b4 <setvbuf+0x180>
 800a66c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a66e:	07da      	lsls	r2, r3, #31
 800a670:	d405      	bmi.n	800a67e <setvbuf+0x4a>
 800a672:	89a3      	ldrh	r3, [r4, #12]
 800a674:	059b      	lsls	r3, r3, #22
 800a676:	d402      	bmi.n	800a67e <setvbuf+0x4a>
 800a678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a67a:	f004 f94c 	bl	800e916 <__retarget_lock_acquire_recursive>
 800a67e:	4621      	mov	r1, r4
 800a680:	4630      	mov	r0, r6
 800a682:	f003 f96d 	bl	800d960 <_fflush_r>
 800a686:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a688:	b141      	cbz	r1, 800a69c <setvbuf+0x68>
 800a68a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a68e:	4299      	cmp	r1, r3
 800a690:	d002      	beq.n	800a698 <setvbuf+0x64>
 800a692:	4630      	mov	r0, r6
 800a694:	f003 face 	bl	800dc34 <_free_r>
 800a698:	2300      	movs	r3, #0
 800a69a:	6363      	str	r3, [r4, #52]	; 0x34
 800a69c:	2300      	movs	r3, #0
 800a69e:	61a3      	str	r3, [r4, #24]
 800a6a0:	6063      	str	r3, [r4, #4]
 800a6a2:	89a3      	ldrh	r3, [r4, #12]
 800a6a4:	0618      	lsls	r0, r3, #24
 800a6a6:	d503      	bpl.n	800a6b0 <setvbuf+0x7c>
 800a6a8:	6921      	ldr	r1, [r4, #16]
 800a6aa:	4630      	mov	r0, r6
 800a6ac:	f003 fac2 	bl	800dc34 <_free_r>
 800a6b0:	89a3      	ldrh	r3, [r4, #12]
 800a6b2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800a6b6:	f023 0303 	bic.w	r3, r3, #3
 800a6ba:	f1b8 0f02 	cmp.w	r8, #2
 800a6be:	81a3      	strh	r3, [r4, #12]
 800a6c0:	d072      	beq.n	800a7a8 <setvbuf+0x174>
 800a6c2:	ab01      	add	r3, sp, #4
 800a6c4:	466a      	mov	r2, sp
 800a6c6:	4621      	mov	r1, r4
 800a6c8:	4630      	mov	r0, r6
 800a6ca:	f004 f927 	bl	800e91c <__swhatbuf_r>
 800a6ce:	89a3      	ldrh	r3, [r4, #12]
 800a6d0:	4318      	orrs	r0, r3
 800a6d2:	81a0      	strh	r0, [r4, #12]
 800a6d4:	2d00      	cmp	r5, #0
 800a6d6:	d12f      	bne.n	800a738 <setvbuf+0x104>
 800a6d8:	9d00      	ldr	r5, [sp, #0]
 800a6da:	4628      	mov	r0, r5
 800a6dc:	f7ff fa78 	bl	8009bd0 <malloc>
 800a6e0:	4607      	mov	r7, r0
 800a6e2:	2800      	cmp	r0, #0
 800a6e4:	d162      	bne.n	800a7ac <setvbuf+0x178>
 800a6e6:	f8dd 9000 	ldr.w	r9, [sp]
 800a6ea:	45a9      	cmp	r9, r5
 800a6ec:	d150      	bne.n	800a790 <setvbuf+0x15c>
 800a6ee:	f04f 35ff 	mov.w	r5, #4294967295
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	60a2      	str	r2, [r4, #8]
 800a6f6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800a6fa:	6022      	str	r2, [r4, #0]
 800a6fc:	6122      	str	r2, [r4, #16]
 800a6fe:	2201      	movs	r2, #1
 800a700:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a704:	6162      	str	r2, [r4, #20]
 800a706:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a708:	f043 0302 	orr.w	r3, r3, #2
 800a70c:	07d1      	lsls	r1, r2, #31
 800a70e:	81a3      	strh	r3, [r4, #12]
 800a710:	d404      	bmi.n	800a71c <setvbuf+0xe8>
 800a712:	059b      	lsls	r3, r3, #22
 800a714:	d402      	bmi.n	800a71c <setvbuf+0xe8>
 800a716:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a718:	f004 f8ff 	bl	800e91a <__retarget_lock_release_recursive>
 800a71c:	4628      	mov	r0, r5
 800a71e:	b003      	add	sp, #12
 800a720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a724:	4b27      	ldr	r3, [pc, #156]	; (800a7c4 <setvbuf+0x190>)
 800a726:	429c      	cmp	r4, r3
 800a728:	d101      	bne.n	800a72e <setvbuf+0xfa>
 800a72a:	68b4      	ldr	r4, [r6, #8]
 800a72c:	e794      	b.n	800a658 <setvbuf+0x24>
 800a72e:	4b26      	ldr	r3, [pc, #152]	; (800a7c8 <setvbuf+0x194>)
 800a730:	429c      	cmp	r4, r3
 800a732:	bf08      	it	eq
 800a734:	68f4      	ldreq	r4, [r6, #12]
 800a736:	e78f      	b.n	800a658 <setvbuf+0x24>
 800a738:	2f00      	cmp	r7, #0
 800a73a:	d0ce      	beq.n	800a6da <setvbuf+0xa6>
 800a73c:	69b3      	ldr	r3, [r6, #24]
 800a73e:	b913      	cbnz	r3, 800a746 <setvbuf+0x112>
 800a740:	4630      	mov	r0, r6
 800a742:	f003 f9a1 	bl	800da88 <__sinit>
 800a746:	9b00      	ldr	r3, [sp, #0]
 800a748:	6127      	str	r7, [r4, #16]
 800a74a:	429d      	cmp	r5, r3
 800a74c:	bf18      	it	ne
 800a74e:	89a3      	ldrhne	r3, [r4, #12]
 800a750:	6027      	str	r7, [r4, #0]
 800a752:	bf1c      	itt	ne
 800a754:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
 800a758:	81a3      	strhne	r3, [r4, #12]
 800a75a:	f1b8 0f01 	cmp.w	r8, #1
 800a75e:	bf08      	it	eq
 800a760:	89a3      	ldrheq	r3, [r4, #12]
 800a762:	6165      	str	r5, [r4, #20]
 800a764:	bf04      	itt	eq
 800a766:	f043 0301 	orreq.w	r3, r3, #1
 800a76a:	81a3      	strheq	r3, [r4, #12]
 800a76c:	89a3      	ldrh	r3, [r4, #12]
 800a76e:	f013 0208 	ands.w	r2, r3, #8
 800a772:	d01d      	beq.n	800a7b0 <setvbuf+0x17c>
 800a774:	07da      	lsls	r2, r3, #31
 800a776:	bf41      	itttt	mi
 800a778:	2200      	movmi	r2, #0
 800a77a:	426d      	negmi	r5, r5
 800a77c:	60a2      	strmi	r2, [r4, #8]
 800a77e:	61a5      	strmi	r5, [r4, #24]
 800a780:	bf58      	it	pl
 800a782:	60a5      	strpl	r5, [r4, #8]
 800a784:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800a786:	f015 0501 	ands.w	r5, r5, #1
 800a78a:	d0c2      	beq.n	800a712 <setvbuf+0xde>
 800a78c:	2500      	movs	r5, #0
 800a78e:	e7c5      	b.n	800a71c <setvbuf+0xe8>
 800a790:	4648      	mov	r0, r9
 800a792:	f7ff fa1d 	bl	8009bd0 <malloc>
 800a796:	4607      	mov	r7, r0
 800a798:	2800      	cmp	r0, #0
 800a79a:	d0a8      	beq.n	800a6ee <setvbuf+0xba>
 800a79c:	89a3      	ldrh	r3, [r4, #12]
 800a79e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7a2:	81a3      	strh	r3, [r4, #12]
 800a7a4:	464d      	mov	r5, r9
 800a7a6:	e7c9      	b.n	800a73c <setvbuf+0x108>
 800a7a8:	2500      	movs	r5, #0
 800a7aa:	e7a2      	b.n	800a6f2 <setvbuf+0xbe>
 800a7ac:	46a9      	mov	r9, r5
 800a7ae:	e7f5      	b.n	800a79c <setvbuf+0x168>
 800a7b0:	60a2      	str	r2, [r4, #8]
 800a7b2:	e7e7      	b.n	800a784 <setvbuf+0x150>
 800a7b4:	f04f 35ff 	mov.w	r5, #4294967295
 800a7b8:	e7b0      	b.n	800a71c <setvbuf+0xe8>
 800a7ba:	bf00      	nop
 800a7bc:	20000010 	.word	0x20000010
 800a7c0:	08011058 	.word	0x08011058
 800a7c4:	08011078 	.word	0x08011078
 800a7c8:	08011038 	.word	0x08011038

0800a7cc <strchr>:
 800a7cc:	b2c9      	uxtb	r1, r1
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7d4:	b11a      	cbz	r2, 800a7de <strchr+0x12>
 800a7d6:	4291      	cmp	r1, r2
 800a7d8:	d1f9      	bne.n	800a7ce <strchr+0x2>
 800a7da:	4618      	mov	r0, r3
 800a7dc:	4770      	bx	lr
 800a7de:	2900      	cmp	r1, #0
 800a7e0:	bf0c      	ite	eq
 800a7e2:	4618      	moveq	r0, r3
 800a7e4:	2000      	movne	r0, #0
 800a7e6:	4770      	bx	lr

0800a7e8 <sulp>:
 800a7e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ec:	460f      	mov	r7, r1
 800a7ee:	4690      	mov	r8, r2
 800a7f0:	f004 fbec 	bl	800efcc <__ulp>
 800a7f4:	4604      	mov	r4, r0
 800a7f6:	460d      	mov	r5, r1
 800a7f8:	f1b8 0f00 	cmp.w	r8, #0
 800a7fc:	d011      	beq.n	800a822 <sulp+0x3a>
 800a7fe:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a802:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a806:	2b00      	cmp	r3, #0
 800a808:	dd0b      	ble.n	800a822 <sulp+0x3a>
 800a80a:	051b      	lsls	r3, r3, #20
 800a80c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a810:	2400      	movs	r4, #0
 800a812:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a816:	4622      	mov	r2, r4
 800a818:	462b      	mov	r3, r5
 800a81a:	f7f5 fef9 	bl	8000610 <__aeabi_dmul>
 800a81e:	4604      	mov	r4, r0
 800a820:	460d      	mov	r5, r1
 800a822:	4620      	mov	r0, r4
 800a824:	4629      	mov	r1, r5
 800a826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a82a:	0000      	movs	r0, r0
 800a82c:	0000      	movs	r0, r0
	...

0800a830 <_strtod_l>:
 800a830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a834:	4699      	mov	r9, r3
 800a836:	b09f      	sub	sp, #124	; 0x7c
 800a838:	2300      	movs	r3, #0
 800a83a:	4680      	mov	r8, r0
 800a83c:	4648      	mov	r0, r9
 800a83e:	460c      	mov	r4, r1
 800a840:	9215      	str	r2, [sp, #84]	; 0x54
 800a842:	931a      	str	r3, [sp, #104]	; 0x68
 800a844:	f004 f854 	bl	800e8f0 <__localeconv_l>
 800a848:	4607      	mov	r7, r0
 800a84a:	6800      	ldr	r0, [r0, #0]
 800a84c:	f7f5 fcca 	bl	80001e4 <strlen>
 800a850:	f04f 0a00 	mov.w	sl, #0
 800a854:	4605      	mov	r5, r0
 800a856:	f04f 0b00 	mov.w	fp, #0
 800a85a:	9419      	str	r4, [sp, #100]	; 0x64
 800a85c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a85e:	781a      	ldrb	r2, [r3, #0]
 800a860:	2a0d      	cmp	r2, #13
 800a862:	d833      	bhi.n	800a8cc <_strtod_l+0x9c>
 800a864:	2a09      	cmp	r2, #9
 800a866:	d237      	bcs.n	800a8d8 <_strtod_l+0xa8>
 800a868:	2a00      	cmp	r2, #0
 800a86a:	d03f      	beq.n	800a8ec <_strtod_l+0xbc>
 800a86c:	2300      	movs	r3, #0
 800a86e:	9309      	str	r3, [sp, #36]	; 0x24
 800a870:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800a872:	7833      	ldrb	r3, [r6, #0]
 800a874:	2b30      	cmp	r3, #48	; 0x30
 800a876:	f040 8101 	bne.w	800aa7c <_strtod_l+0x24c>
 800a87a:	7873      	ldrb	r3, [r6, #1]
 800a87c:	2b58      	cmp	r3, #88	; 0x58
 800a87e:	d001      	beq.n	800a884 <_strtod_l+0x54>
 800a880:	2b78      	cmp	r3, #120	; 0x78
 800a882:	d16b      	bne.n	800a95c <_strtod_l+0x12c>
 800a884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a886:	9301      	str	r3, [sp, #4]
 800a888:	ab1a      	add	r3, sp, #104	; 0x68
 800a88a:	9300      	str	r3, [sp, #0]
 800a88c:	f8cd 9008 	str.w	r9, [sp, #8]
 800a890:	ab1b      	add	r3, sp, #108	; 0x6c
 800a892:	4aaa      	ldr	r2, [pc, #680]	; (800ab3c <_strtod_l+0x30c>)
 800a894:	a919      	add	r1, sp, #100	; 0x64
 800a896:	4640      	mov	r0, r8
 800a898:	f003 fc3e 	bl	800e118 <__gethex>
 800a89c:	f010 0407 	ands.w	r4, r0, #7
 800a8a0:	4605      	mov	r5, r0
 800a8a2:	d005      	beq.n	800a8b0 <_strtod_l+0x80>
 800a8a4:	2c06      	cmp	r4, #6
 800a8a6:	d12b      	bne.n	800a900 <_strtod_l+0xd0>
 800a8a8:	3601      	adds	r6, #1
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	9619      	str	r6, [sp, #100]	; 0x64
 800a8ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a8b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	f040 8599 	bne.w	800b3ea <_strtod_l+0xbba>
 800a8b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ba:	b1e3      	cbz	r3, 800a8f6 <_strtod_l+0xc6>
 800a8bc:	4652      	mov	r2, sl
 800a8be:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a8c2:	4610      	mov	r0, r2
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	b01f      	add	sp, #124	; 0x7c
 800a8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8cc:	2a2b      	cmp	r2, #43	; 0x2b
 800a8ce:	d006      	beq.n	800a8de <_strtod_l+0xae>
 800a8d0:	2a2d      	cmp	r2, #45	; 0x2d
 800a8d2:	d013      	beq.n	800a8fc <_strtod_l+0xcc>
 800a8d4:	2a20      	cmp	r2, #32
 800a8d6:	d1c9      	bne.n	800a86c <_strtod_l+0x3c>
 800a8d8:	3301      	adds	r3, #1
 800a8da:	9319      	str	r3, [sp, #100]	; 0x64
 800a8dc:	e7be      	b.n	800a85c <_strtod_l+0x2c>
 800a8de:	2200      	movs	r2, #0
 800a8e0:	9209      	str	r2, [sp, #36]	; 0x24
 800a8e2:	1c5a      	adds	r2, r3, #1
 800a8e4:	9219      	str	r2, [sp, #100]	; 0x64
 800a8e6:	785b      	ldrb	r3, [r3, #1]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d1c1      	bne.n	800a870 <_strtod_l+0x40>
 800a8ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8ee:	9419      	str	r4, [sp, #100]	; 0x64
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	f040 8578 	bne.w	800b3e6 <_strtod_l+0xbb6>
 800a8f6:	4652      	mov	r2, sl
 800a8f8:	465b      	mov	r3, fp
 800a8fa:	e7e2      	b.n	800a8c2 <_strtod_l+0x92>
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	e7ef      	b.n	800a8e0 <_strtod_l+0xb0>
 800a900:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a902:	b13a      	cbz	r2, 800a914 <_strtod_l+0xe4>
 800a904:	2135      	movs	r1, #53	; 0x35
 800a906:	a81c      	add	r0, sp, #112	; 0x70
 800a908:	f004 fc4d 	bl	800f1a6 <__copybits>
 800a90c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a90e:	4640      	mov	r0, r8
 800a910:	f004 f8d0 	bl	800eab4 <_Bfree>
 800a914:	3c01      	subs	r4, #1
 800a916:	2c04      	cmp	r4, #4
 800a918:	d808      	bhi.n	800a92c <_strtod_l+0xfc>
 800a91a:	e8df f004 	tbb	[pc, r4]
 800a91e:	030c      	.short	0x030c
 800a920:	1a17      	.short	0x1a17
 800a922:	0c          	.byte	0x0c
 800a923:	00          	.byte	0x00
 800a924:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 800a928:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 800a92c:	0729      	lsls	r1, r5, #28
 800a92e:	d5bf      	bpl.n	800a8b0 <_strtod_l+0x80>
 800a930:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a934:	e7bc      	b.n	800a8b0 <_strtod_l+0x80>
 800a936:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a938:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a93a:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 800a93e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a942:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a946:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a94a:	e7ef      	b.n	800a92c <_strtod_l+0xfc>
 800a94c:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 800ab48 <_strtod_l+0x318>
 800a950:	e7ec      	b.n	800a92c <_strtod_l+0xfc>
 800a952:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a956:	f04f 3aff 	mov.w	sl, #4294967295
 800a95a:	e7e7      	b.n	800a92c <_strtod_l+0xfc>
 800a95c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a95e:	1c5a      	adds	r2, r3, #1
 800a960:	9219      	str	r2, [sp, #100]	; 0x64
 800a962:	785b      	ldrb	r3, [r3, #1]
 800a964:	2b30      	cmp	r3, #48	; 0x30
 800a966:	d0f9      	beq.n	800a95c <_strtod_l+0x12c>
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d0a1      	beq.n	800a8b0 <_strtod_l+0x80>
 800a96c:	2301      	movs	r3, #1
 800a96e:	9308      	str	r3, [sp, #32]
 800a970:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a972:	930a      	str	r3, [sp, #40]	; 0x28
 800a974:	2300      	movs	r3, #0
 800a976:	9305      	str	r3, [sp, #20]
 800a978:	9306      	str	r3, [sp, #24]
 800a97a:	9304      	str	r3, [sp, #16]
 800a97c:	220a      	movs	r2, #10
 800a97e:	9819      	ldr	r0, [sp, #100]	; 0x64
 800a980:	7806      	ldrb	r6, [r0, #0]
 800a982:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a986:	b2d9      	uxtb	r1, r3
 800a988:	2909      	cmp	r1, #9
 800a98a:	d979      	bls.n	800aa80 <_strtod_l+0x250>
 800a98c:	462a      	mov	r2, r5
 800a98e:	6839      	ldr	r1, [r7, #0]
 800a990:	f004 fe3b 	bl	800f60a <strncmp>
 800a994:	2800      	cmp	r0, #0
 800a996:	f000 8085 	beq.w	800aaa4 <_strtod_l+0x274>
 800a99a:	2000      	movs	r0, #0
 800a99c:	9d04      	ldr	r5, [sp, #16]
 800a99e:	4633      	mov	r3, r6
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	4601      	mov	r1, r0
 800a9a4:	2b65      	cmp	r3, #101	; 0x65
 800a9a6:	d002      	beq.n	800a9ae <_strtod_l+0x17e>
 800a9a8:	2b45      	cmp	r3, #69	; 0x45
 800a9aa:	f040 80ef 	bne.w	800ab8c <_strtod_l+0x35c>
 800a9ae:	b925      	cbnz	r5, 800a9ba <_strtod_l+0x18a>
 800a9b0:	b910      	cbnz	r0, 800a9b8 <_strtod_l+0x188>
 800a9b2:	9b08      	ldr	r3, [sp, #32]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d099      	beq.n	800a8ec <_strtod_l+0xbc>
 800a9b8:	2500      	movs	r5, #0
 800a9ba:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800a9bc:	1c63      	adds	r3, r4, #1
 800a9be:	9319      	str	r3, [sp, #100]	; 0x64
 800a9c0:	7863      	ldrb	r3, [r4, #1]
 800a9c2:	2b2b      	cmp	r3, #43	; 0x2b
 800a9c4:	f000 80cf 	beq.w	800ab66 <_strtod_l+0x336>
 800a9c8:	2b2d      	cmp	r3, #45	; 0x2d
 800a9ca:	f000 80d2 	beq.w	800ab72 <_strtod_l+0x342>
 800a9ce:	2600      	movs	r6, #0
 800a9d0:	9607      	str	r6, [sp, #28]
 800a9d2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800a9d6:	2e09      	cmp	r6, #9
 800a9d8:	f200 80d7 	bhi.w	800ab8a <_strtod_l+0x35a>
 800a9dc:	2b30      	cmp	r3, #48	; 0x30
 800a9de:	f000 80ca 	beq.w	800ab76 <_strtod_l+0x346>
 800a9e2:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 800a9e6:	2e08      	cmp	r6, #8
 800a9e8:	f200 80d0 	bhi.w	800ab8c <_strtod_l+0x35c>
 800a9ec:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a9f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a9f2:	f04f 0c0a 	mov.w	ip, #10
 800a9f6:	461f      	mov	r7, r3
 800a9f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a9fa:	1c5e      	adds	r6, r3, #1
 800a9fc:	9619      	str	r6, [sp, #100]	; 0x64
 800a9fe:	785b      	ldrb	r3, [r3, #1]
 800aa00:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
 800aa04:	f1b9 0f09 	cmp.w	r9, #9
 800aa08:	f240 80ba 	bls.w	800ab80 <_strtod_l+0x350>
 800aa0c:	1bf6      	subs	r6, r6, r7
 800aa0e:	2e08      	cmp	r6, #8
 800aa10:	f644 691f 	movw	r9, #19999	; 0x4e1f
 800aa14:	dc02      	bgt.n	800aa1c <_strtod_l+0x1ec>
 800aa16:	45f1      	cmp	r9, lr
 800aa18:	bfa8      	it	ge
 800aa1a:	46f1      	movge	r9, lr
 800aa1c:	9e07      	ldr	r6, [sp, #28]
 800aa1e:	b10e      	cbz	r6, 800aa24 <_strtod_l+0x1f4>
 800aa20:	f1c9 0900 	rsb	r9, r9, #0
 800aa24:	2d00      	cmp	r5, #0
 800aa26:	f040 80d7 	bne.w	800abd8 <_strtod_l+0x3a8>
 800aa2a:	2800      	cmp	r0, #0
 800aa2c:	f47f af40 	bne.w	800a8b0 <_strtod_l+0x80>
 800aa30:	9a08      	ldr	r2, [sp, #32]
 800aa32:	2a00      	cmp	r2, #0
 800aa34:	f47f af3c 	bne.w	800a8b0 <_strtod_l+0x80>
 800aa38:	2900      	cmp	r1, #0
 800aa3a:	f47f af57 	bne.w	800a8ec <_strtod_l+0xbc>
 800aa3e:	2b4e      	cmp	r3, #78	; 0x4e
 800aa40:	f000 80ad 	beq.w	800ab9e <_strtod_l+0x36e>
 800aa44:	f300 80a5 	bgt.w	800ab92 <_strtod_l+0x362>
 800aa48:	2b49      	cmp	r3, #73	; 0x49
 800aa4a:	f47f af4f 	bne.w	800a8ec <_strtod_l+0xbc>
 800aa4e:	493c      	ldr	r1, [pc, #240]	; (800ab40 <_strtod_l+0x310>)
 800aa50:	a819      	add	r0, sp, #100	; 0x64
 800aa52:	f003 fd91 	bl	800e578 <__match>
 800aa56:	2800      	cmp	r0, #0
 800aa58:	f43f af48 	beq.w	800a8ec <_strtod_l+0xbc>
 800aa5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aa5e:	4939      	ldr	r1, [pc, #228]	; (800ab44 <_strtod_l+0x314>)
 800aa60:	3b01      	subs	r3, #1
 800aa62:	a819      	add	r0, sp, #100	; 0x64
 800aa64:	9319      	str	r3, [sp, #100]	; 0x64
 800aa66:	f003 fd87 	bl	800e578 <__match>
 800aa6a:	b910      	cbnz	r0, 800aa72 <_strtod_l+0x242>
 800aa6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aa6e:	3301      	adds	r3, #1
 800aa70:	9319      	str	r3, [sp, #100]	; 0x64
 800aa72:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 800ab48 <_strtod_l+0x318>
 800aa76:	f04f 0a00 	mov.w	sl, #0
 800aa7a:	e719      	b.n	800a8b0 <_strtod_l+0x80>
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	e776      	b.n	800a96e <_strtod_l+0x13e>
 800aa80:	9904      	ldr	r1, [sp, #16]
 800aa82:	2908      	cmp	r1, #8
 800aa84:	bfd5      	itete	le
 800aa86:	9906      	ldrle	r1, [sp, #24]
 800aa88:	9905      	ldrgt	r1, [sp, #20]
 800aa8a:	fb02 3301 	mlale	r3, r2, r1, r3
 800aa8e:	fb02 3301 	mlagt	r3, r2, r1, r3
 800aa92:	bfd4      	ite	le
 800aa94:	9306      	strle	r3, [sp, #24]
 800aa96:	9305      	strgt	r3, [sp, #20]
 800aa98:	9b04      	ldr	r3, [sp, #16]
 800aa9a:	3001      	adds	r0, #1
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	9304      	str	r3, [sp, #16]
 800aaa0:	9019      	str	r0, [sp, #100]	; 0x64
 800aaa2:	e76c      	b.n	800a97e <_strtod_l+0x14e>
 800aaa4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aaa6:	195a      	adds	r2, r3, r5
 800aaa8:	9219      	str	r2, [sp, #100]	; 0x64
 800aaaa:	9a04      	ldr	r2, [sp, #16]
 800aaac:	5d5b      	ldrb	r3, [r3, r5]
 800aaae:	2a00      	cmp	r2, #0
 800aab0:	d154      	bne.n	800ab5c <_strtod_l+0x32c>
 800aab2:	4610      	mov	r0, r2
 800aab4:	2b30      	cmp	r3, #48	; 0x30
 800aab6:	d02a      	beq.n	800ab0e <_strtod_l+0x2de>
 800aab8:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800aabc:	2a08      	cmp	r2, #8
 800aabe:	f200 8499 	bhi.w	800b3f4 <_strtod_l+0xbc4>
 800aac2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800aac4:	920a      	str	r2, [sp, #40]	; 0x28
 800aac6:	4602      	mov	r2, r0
 800aac8:	2000      	movs	r0, #0
 800aaca:	4605      	mov	r5, r0
 800aacc:	3b30      	subs	r3, #48	; 0x30
 800aace:	f100 0101 	add.w	r1, r0, #1
 800aad2:	d011      	beq.n	800aaf8 <_strtod_l+0x2c8>
 800aad4:	440a      	add	r2, r1
 800aad6:	eb00 0c05 	add.w	ip, r0, r5
 800aada:	4629      	mov	r1, r5
 800aadc:	260a      	movs	r6, #10
 800aade:	4561      	cmp	r1, ip
 800aae0:	d11b      	bne.n	800ab1a <_strtod_l+0x2ea>
 800aae2:	4428      	add	r0, r5
 800aae4:	2808      	cmp	r0, #8
 800aae6:	f100 0501 	add.w	r5, r0, #1
 800aaea:	dc2f      	bgt.n	800ab4c <_strtod_l+0x31c>
 800aaec:	9806      	ldr	r0, [sp, #24]
 800aaee:	210a      	movs	r1, #10
 800aaf0:	fb01 3300 	mla	r3, r1, r0, r3
 800aaf4:	9306      	str	r3, [sp, #24]
 800aaf6:	2100      	movs	r1, #0
 800aaf8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aafa:	1c58      	adds	r0, r3, #1
 800aafc:	9019      	str	r0, [sp, #100]	; 0x64
 800aafe:	785b      	ldrb	r3, [r3, #1]
 800ab00:	4608      	mov	r0, r1
 800ab02:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ab06:	2909      	cmp	r1, #9
 800ab08:	d9e0      	bls.n	800aacc <_strtod_l+0x29c>
 800ab0a:	2101      	movs	r1, #1
 800ab0c:	e74a      	b.n	800a9a4 <_strtod_l+0x174>
 800ab0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ab10:	1c5a      	adds	r2, r3, #1
 800ab12:	9219      	str	r2, [sp, #100]	; 0x64
 800ab14:	3001      	adds	r0, #1
 800ab16:	785b      	ldrb	r3, [r3, #1]
 800ab18:	e7cc      	b.n	800aab4 <_strtod_l+0x284>
 800ab1a:	3101      	adds	r1, #1
 800ab1c:	f101 3eff 	add.w	lr, r1, #4294967295
 800ab20:	f1be 0f08 	cmp.w	lr, #8
 800ab24:	dc03      	bgt.n	800ab2e <_strtod_l+0x2fe>
 800ab26:	9f06      	ldr	r7, [sp, #24]
 800ab28:	4377      	muls	r7, r6
 800ab2a:	9706      	str	r7, [sp, #24]
 800ab2c:	e7d7      	b.n	800aade <_strtod_l+0x2ae>
 800ab2e:	2910      	cmp	r1, #16
 800ab30:	bfde      	ittt	le
 800ab32:	9f05      	ldrle	r7, [sp, #20]
 800ab34:	4377      	mulle	r7, r6
 800ab36:	9705      	strle	r7, [sp, #20]
 800ab38:	e7d1      	b.n	800aade <_strtod_l+0x2ae>
 800ab3a:	bf00      	nop
 800ab3c:	08010f44 	.word	0x08010f44
 800ab40:	08010fd9 	.word	0x08010fd9
 800ab44:	0801102b 	.word	0x0801102b
 800ab48:	7ff00000 	.word	0x7ff00000
 800ab4c:	2d10      	cmp	r5, #16
 800ab4e:	bfdf      	itttt	le
 800ab50:	9805      	ldrle	r0, [sp, #20]
 800ab52:	210a      	movle	r1, #10
 800ab54:	fb01 3300 	mlale	r3, r1, r0, r3
 800ab58:	9305      	strle	r3, [sp, #20]
 800ab5a:	e7cc      	b.n	800aaf6 <_strtod_l+0x2c6>
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	9d04      	ldr	r5, [sp, #16]
 800ab60:	e7cf      	b.n	800ab02 <_strtod_l+0x2d2>
 800ab62:	2101      	movs	r1, #1
 800ab64:	e724      	b.n	800a9b0 <_strtod_l+0x180>
 800ab66:	2300      	movs	r3, #0
 800ab68:	9307      	str	r3, [sp, #28]
 800ab6a:	1ca3      	adds	r3, r4, #2
 800ab6c:	9319      	str	r3, [sp, #100]	; 0x64
 800ab6e:	78a3      	ldrb	r3, [r4, #2]
 800ab70:	e72f      	b.n	800a9d2 <_strtod_l+0x1a2>
 800ab72:	2301      	movs	r3, #1
 800ab74:	e7f8      	b.n	800ab68 <_strtod_l+0x338>
 800ab76:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ab78:	1c5e      	adds	r6, r3, #1
 800ab7a:	9619      	str	r6, [sp, #100]	; 0x64
 800ab7c:	785b      	ldrb	r3, [r3, #1]
 800ab7e:	e72d      	b.n	800a9dc <_strtod_l+0x1ac>
 800ab80:	fb0c 3e0e 	mla	lr, ip, lr, r3
 800ab84:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ab88:	e736      	b.n	800a9f8 <_strtod_l+0x1c8>
 800ab8a:	9419      	str	r4, [sp, #100]	; 0x64
 800ab8c:	f04f 0900 	mov.w	r9, #0
 800ab90:	e748      	b.n	800aa24 <_strtod_l+0x1f4>
 800ab92:	2b69      	cmp	r3, #105	; 0x69
 800ab94:	f43f af5b 	beq.w	800aa4e <_strtod_l+0x21e>
 800ab98:	2b6e      	cmp	r3, #110	; 0x6e
 800ab9a:	f47f aea7 	bne.w	800a8ec <_strtod_l+0xbc>
 800ab9e:	498c      	ldr	r1, [pc, #560]	; (800add0 <_strtod_l+0x5a0>)
 800aba0:	a819      	add	r0, sp, #100	; 0x64
 800aba2:	f003 fce9 	bl	800e578 <__match>
 800aba6:	2800      	cmp	r0, #0
 800aba8:	f43f aea0 	beq.w	800a8ec <_strtod_l+0xbc>
 800abac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	2b28      	cmp	r3, #40	; 0x28
 800abb2:	d10e      	bne.n	800abd2 <_strtod_l+0x3a2>
 800abb4:	aa1c      	add	r2, sp, #112	; 0x70
 800abb6:	4987      	ldr	r1, [pc, #540]	; (800add4 <_strtod_l+0x5a4>)
 800abb8:	a819      	add	r0, sp, #100	; 0x64
 800abba:	f003 fcf0 	bl	800e59e <__hexnan>
 800abbe:	2805      	cmp	r0, #5
 800abc0:	d107      	bne.n	800abd2 <_strtod_l+0x3a2>
 800abc2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800abc4:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 800abc8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800abcc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800abd0:	e66e      	b.n	800a8b0 <_strtod_l+0x80>
 800abd2:	f8df b210 	ldr.w	fp, [pc, #528]	; 800ade4 <_strtod_l+0x5b4>
 800abd6:	e74e      	b.n	800aa76 <_strtod_l+0x246>
 800abd8:	9b04      	ldr	r3, [sp, #16]
 800abda:	9806      	ldr	r0, [sp, #24]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	bf08      	it	eq
 800abe0:	462b      	moveq	r3, r5
 800abe2:	2d10      	cmp	r5, #16
 800abe4:	462c      	mov	r4, r5
 800abe6:	eba9 0902 	sub.w	r9, r9, r2
 800abea:	bfa8      	it	ge
 800abec:	2410      	movge	r4, #16
 800abee:	9304      	str	r3, [sp, #16]
 800abf0:	f7f5 fc98 	bl	8000524 <__aeabi_ui2d>
 800abf4:	2c09      	cmp	r4, #9
 800abf6:	4682      	mov	sl, r0
 800abf8:	468b      	mov	fp, r1
 800abfa:	dd13      	ble.n	800ac24 <_strtod_l+0x3f4>
 800abfc:	4b76      	ldr	r3, [pc, #472]	; (800add8 <_strtod_l+0x5a8>)
 800abfe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac02:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ac06:	f7f5 fd03 	bl	8000610 <__aeabi_dmul>
 800ac0a:	4606      	mov	r6, r0
 800ac0c:	9805      	ldr	r0, [sp, #20]
 800ac0e:	460f      	mov	r7, r1
 800ac10:	f7f5 fc88 	bl	8000524 <__aeabi_ui2d>
 800ac14:	4602      	mov	r2, r0
 800ac16:	460b      	mov	r3, r1
 800ac18:	4630      	mov	r0, r6
 800ac1a:	4639      	mov	r1, r7
 800ac1c:	f7f5 fb46 	bl	80002ac <__adddf3>
 800ac20:	4682      	mov	sl, r0
 800ac22:	468b      	mov	fp, r1
 800ac24:	2d0f      	cmp	r5, #15
 800ac26:	dc36      	bgt.n	800ac96 <_strtod_l+0x466>
 800ac28:	f1b9 0f00 	cmp.w	r9, #0
 800ac2c:	f43f ae40 	beq.w	800a8b0 <_strtod_l+0x80>
 800ac30:	dd24      	ble.n	800ac7c <_strtod_l+0x44c>
 800ac32:	f1b9 0f16 	cmp.w	r9, #22
 800ac36:	dc0b      	bgt.n	800ac50 <_strtod_l+0x420>
 800ac38:	4d67      	ldr	r5, [pc, #412]	; (800add8 <_strtod_l+0x5a8>)
 800ac3a:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 800ac3e:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ac42:	4652      	mov	r2, sl
 800ac44:	465b      	mov	r3, fp
 800ac46:	f7f5 fce3 	bl	8000610 <__aeabi_dmul>
 800ac4a:	4682      	mov	sl, r0
 800ac4c:	468b      	mov	fp, r1
 800ac4e:	e62f      	b.n	800a8b0 <_strtod_l+0x80>
 800ac50:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ac54:	4599      	cmp	r9, r3
 800ac56:	dc1e      	bgt.n	800ac96 <_strtod_l+0x466>
 800ac58:	4c5f      	ldr	r4, [pc, #380]	; (800add8 <_strtod_l+0x5a8>)
 800ac5a:	f1c5 050f 	rsb	r5, r5, #15
 800ac5e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ac62:	eba9 0505 	sub.w	r5, r9, r5
 800ac66:	4652      	mov	r2, sl
 800ac68:	465b      	mov	r3, fp
 800ac6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac6e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ac72:	f7f5 fccd 	bl	8000610 <__aeabi_dmul>
 800ac76:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ac7a:	e7e4      	b.n	800ac46 <_strtod_l+0x416>
 800ac7c:	f119 0f16 	cmn.w	r9, #22
 800ac80:	db09      	blt.n	800ac96 <_strtod_l+0x466>
 800ac82:	4d55      	ldr	r5, [pc, #340]	; (800add8 <_strtod_l+0x5a8>)
 800ac84:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
 800ac88:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ac8c:	4650      	mov	r0, sl
 800ac8e:	4659      	mov	r1, fp
 800ac90:	f7f5 fde8 	bl	8000864 <__aeabi_ddiv>
 800ac94:	e7d9      	b.n	800ac4a <_strtod_l+0x41a>
 800ac96:	1b2c      	subs	r4, r5, r4
 800ac98:	444c      	add	r4, r9
 800ac9a:	2c00      	cmp	r4, #0
 800ac9c:	dd73      	ble.n	800ad86 <_strtod_l+0x556>
 800ac9e:	f014 030f 	ands.w	r3, r4, #15
 800aca2:	d00a      	beq.n	800acba <_strtod_l+0x48a>
 800aca4:	494c      	ldr	r1, [pc, #304]	; (800add8 <_strtod_l+0x5a8>)
 800aca6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800acaa:	4652      	mov	r2, sl
 800acac:	465b      	mov	r3, fp
 800acae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acb2:	f7f5 fcad 	bl	8000610 <__aeabi_dmul>
 800acb6:	4682      	mov	sl, r0
 800acb8:	468b      	mov	fp, r1
 800acba:	f034 040f 	bics.w	r4, r4, #15
 800acbe:	d054      	beq.n	800ad6a <_strtod_l+0x53a>
 800acc0:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 800acc4:	dd27      	ble.n	800ad16 <_strtod_l+0x4e6>
 800acc6:	f04f 0900 	mov.w	r9, #0
 800acca:	f8cd 9010 	str.w	r9, [sp, #16]
 800acce:	f8cd 901c 	str.w	r9, [sp, #28]
 800acd2:	f8cd 9018 	str.w	r9, [sp, #24]
 800acd6:	2322      	movs	r3, #34	; 0x22
 800acd8:	f8df b10c 	ldr.w	fp, [pc, #268]	; 800ade8 <_strtod_l+0x5b8>
 800acdc:	f8c8 3000 	str.w	r3, [r8]
 800ace0:	f04f 0a00 	mov.w	sl, #0
 800ace4:	9b07      	ldr	r3, [sp, #28]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	f43f ade2 	beq.w	800a8b0 <_strtod_l+0x80>
 800acec:	991a      	ldr	r1, [sp, #104]	; 0x68
 800acee:	4640      	mov	r0, r8
 800acf0:	f003 fee0 	bl	800eab4 <_Bfree>
 800acf4:	9906      	ldr	r1, [sp, #24]
 800acf6:	4640      	mov	r0, r8
 800acf8:	f003 fedc 	bl	800eab4 <_Bfree>
 800acfc:	9904      	ldr	r1, [sp, #16]
 800acfe:	4640      	mov	r0, r8
 800ad00:	f003 fed8 	bl	800eab4 <_Bfree>
 800ad04:	9907      	ldr	r1, [sp, #28]
 800ad06:	4640      	mov	r0, r8
 800ad08:	f003 fed4 	bl	800eab4 <_Bfree>
 800ad0c:	4649      	mov	r1, r9
 800ad0e:	4640      	mov	r0, r8
 800ad10:	f003 fed0 	bl	800eab4 <_Bfree>
 800ad14:	e5cc      	b.n	800a8b0 <_strtod_l+0x80>
 800ad16:	2300      	movs	r3, #0
 800ad18:	4e30      	ldr	r6, [pc, #192]	; (800addc <_strtod_l+0x5ac>)
 800ad1a:	1124      	asrs	r4, r4, #4
 800ad1c:	4650      	mov	r0, sl
 800ad1e:	4659      	mov	r1, fp
 800ad20:	461f      	mov	r7, r3
 800ad22:	2c01      	cmp	r4, #1
 800ad24:	dc24      	bgt.n	800ad70 <_strtod_l+0x540>
 800ad26:	b10b      	cbz	r3, 800ad2c <_strtod_l+0x4fc>
 800ad28:	4682      	mov	sl, r0
 800ad2a:	468b      	mov	fp, r1
 800ad2c:	4b2b      	ldr	r3, [pc, #172]	; (800addc <_strtod_l+0x5ac>)
 800ad2e:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ad32:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ad36:	4652      	mov	r2, sl
 800ad38:	465b      	mov	r3, fp
 800ad3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ad3e:	f7f5 fc67 	bl	8000610 <__aeabi_dmul>
 800ad42:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ad46:	468b      	mov	fp, r1
 800ad48:	460a      	mov	r2, r1
 800ad4a:	0d1b      	lsrs	r3, r3, #20
 800ad4c:	4924      	ldr	r1, [pc, #144]	; (800ade0 <_strtod_l+0x5b0>)
 800ad4e:	051b      	lsls	r3, r3, #20
 800ad50:	428b      	cmp	r3, r1
 800ad52:	4682      	mov	sl, r0
 800ad54:	d8b7      	bhi.n	800acc6 <_strtod_l+0x496>
 800ad56:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ad5a:	428b      	cmp	r3, r1
 800ad5c:	bf86      	itte	hi
 800ad5e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	; 800adec <_strtod_l+0x5bc>
 800ad62:	f04f 3aff 	movhi.w	sl, #4294967295
 800ad66:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	9305      	str	r3, [sp, #20]
 800ad6e:	e070      	b.n	800ae52 <_strtod_l+0x622>
 800ad70:	07e2      	lsls	r2, r4, #31
 800ad72:	d504      	bpl.n	800ad7e <_strtod_l+0x54e>
 800ad74:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ad78:	f7f5 fc4a 	bl	8000610 <__aeabi_dmul>
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	3701      	adds	r7, #1
 800ad80:	1064      	asrs	r4, r4, #1
 800ad82:	3608      	adds	r6, #8
 800ad84:	e7cd      	b.n	800ad22 <_strtod_l+0x4f2>
 800ad86:	d0f0      	beq.n	800ad6a <_strtod_l+0x53a>
 800ad88:	4264      	negs	r4, r4
 800ad8a:	f014 020f 	ands.w	r2, r4, #15
 800ad8e:	d00a      	beq.n	800ada6 <_strtod_l+0x576>
 800ad90:	4b11      	ldr	r3, [pc, #68]	; (800add8 <_strtod_l+0x5a8>)
 800ad92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad96:	4650      	mov	r0, sl
 800ad98:	4659      	mov	r1, fp
 800ad9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9e:	f7f5 fd61 	bl	8000864 <__aeabi_ddiv>
 800ada2:	4682      	mov	sl, r0
 800ada4:	468b      	mov	fp, r1
 800ada6:	1124      	asrs	r4, r4, #4
 800ada8:	d0df      	beq.n	800ad6a <_strtod_l+0x53a>
 800adaa:	2c1f      	cmp	r4, #31
 800adac:	dd20      	ble.n	800adf0 <_strtod_l+0x5c0>
 800adae:	f04f 0900 	mov.w	r9, #0
 800adb2:	f8cd 9010 	str.w	r9, [sp, #16]
 800adb6:	f8cd 901c 	str.w	r9, [sp, #28]
 800adba:	f8cd 9018 	str.w	r9, [sp, #24]
 800adbe:	2322      	movs	r3, #34	; 0x22
 800adc0:	f04f 0a00 	mov.w	sl, #0
 800adc4:	f04f 0b00 	mov.w	fp, #0
 800adc8:	f8c8 3000 	str.w	r3, [r8]
 800adcc:	e78a      	b.n	800ace4 <_strtod_l+0x4b4>
 800adce:	bf00      	nop
 800add0:	08010fe1 	.word	0x08010fe1
 800add4:	08010f58 	.word	0x08010f58
 800add8:	080110d0 	.word	0x080110d0
 800addc:	080110a8 	.word	0x080110a8
 800ade0:	7ca00000 	.word	0x7ca00000
 800ade4:	fff80000 	.word	0xfff80000
 800ade8:	7ff00000 	.word	0x7ff00000
 800adec:	7fefffff 	.word	0x7fefffff
 800adf0:	f014 0310 	ands.w	r3, r4, #16
 800adf4:	bf18      	it	ne
 800adf6:	236a      	movne	r3, #106	; 0x6a
 800adf8:	4e9f      	ldr	r6, [pc, #636]	; (800b078 <_strtod_l+0x848>)
 800adfa:	9305      	str	r3, [sp, #20]
 800adfc:	4650      	mov	r0, sl
 800adfe:	4659      	mov	r1, fp
 800ae00:	2300      	movs	r3, #0
 800ae02:	2c00      	cmp	r4, #0
 800ae04:	f300 8106 	bgt.w	800b014 <_strtod_l+0x7e4>
 800ae08:	b10b      	cbz	r3, 800ae0e <_strtod_l+0x5de>
 800ae0a:	4682      	mov	sl, r0
 800ae0c:	468b      	mov	fp, r1
 800ae0e:	9b05      	ldr	r3, [sp, #20]
 800ae10:	b1bb      	cbz	r3, 800ae42 <_strtod_l+0x612>
 800ae12:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800ae16:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	4659      	mov	r1, fp
 800ae1e:	dd10      	ble.n	800ae42 <_strtod_l+0x612>
 800ae20:	2b1f      	cmp	r3, #31
 800ae22:	f340 8101 	ble.w	800b028 <_strtod_l+0x7f8>
 800ae26:	2b34      	cmp	r3, #52	; 0x34
 800ae28:	bfde      	ittt	le
 800ae2a:	3b20      	suble	r3, #32
 800ae2c:	f04f 32ff 	movle.w	r2, #4294967295
 800ae30:	fa02 f303 	lslle.w	r3, r2, r3
 800ae34:	f04f 0a00 	mov.w	sl, #0
 800ae38:	bfcc      	ite	gt
 800ae3a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ae3e:	ea03 0b01 	andle.w	fp, r3, r1
 800ae42:	2200      	movs	r2, #0
 800ae44:	2300      	movs	r3, #0
 800ae46:	4650      	mov	r0, sl
 800ae48:	4659      	mov	r1, fp
 800ae4a:	f7f5 fe49 	bl	8000ae0 <__aeabi_dcmpeq>
 800ae4e:	2800      	cmp	r0, #0
 800ae50:	d1ad      	bne.n	800adae <_strtod_l+0x57e>
 800ae52:	9b06      	ldr	r3, [sp, #24]
 800ae54:	9300      	str	r3, [sp, #0]
 800ae56:	9a04      	ldr	r2, [sp, #16]
 800ae58:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ae5a:	462b      	mov	r3, r5
 800ae5c:	4640      	mov	r0, r8
 800ae5e:	f003 fe7b 	bl	800eb58 <__s2b>
 800ae62:	9007      	str	r0, [sp, #28]
 800ae64:	2800      	cmp	r0, #0
 800ae66:	f43f af2e 	beq.w	800acc6 <_strtod_l+0x496>
 800ae6a:	f1b9 0f00 	cmp.w	r9, #0
 800ae6e:	f1c9 0300 	rsb	r3, r9, #0
 800ae72:	bfa8      	it	ge
 800ae74:	2300      	movge	r3, #0
 800ae76:	930e      	str	r3, [sp, #56]	; 0x38
 800ae78:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
 800ae7c:	f04f 0900 	mov.w	r9, #0
 800ae80:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae82:	f8cd 9010 	str.w	r9, [sp, #16]
 800ae86:	9b07      	ldr	r3, [sp, #28]
 800ae88:	4640      	mov	r0, r8
 800ae8a:	6859      	ldr	r1, [r3, #4]
 800ae8c:	f003 fdde 	bl	800ea4c <_Balloc>
 800ae90:	9006      	str	r0, [sp, #24]
 800ae92:	2800      	cmp	r0, #0
 800ae94:	f43f af1f 	beq.w	800acd6 <_strtod_l+0x4a6>
 800ae98:	9b07      	ldr	r3, [sp, #28]
 800ae9a:	691a      	ldr	r2, [r3, #16]
 800ae9c:	3202      	adds	r2, #2
 800ae9e:	f103 010c 	add.w	r1, r3, #12
 800aea2:	0092      	lsls	r2, r2, #2
 800aea4:	300c      	adds	r0, #12
 800aea6:	f7ff f8b1 	bl	800a00c <memcpy>
 800aeaa:	ab1c      	add	r3, sp, #112	; 0x70
 800aeac:	9301      	str	r3, [sp, #4]
 800aeae:	ab1b      	add	r3, sp, #108	; 0x6c
 800aeb0:	9300      	str	r3, [sp, #0]
 800aeb2:	4652      	mov	r2, sl
 800aeb4:	465b      	mov	r3, fp
 800aeb6:	4640      	mov	r0, r8
 800aeb8:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800aebc:	f004 f8fc 	bl	800f0b8 <__d2b>
 800aec0:	901a      	str	r0, [sp, #104]	; 0x68
 800aec2:	2800      	cmp	r0, #0
 800aec4:	f43f af07 	beq.w	800acd6 <_strtod_l+0x4a6>
 800aec8:	2101      	movs	r1, #1
 800aeca:	4640      	mov	r0, r8
 800aecc:	f003 fed0 	bl	800ec70 <__i2b>
 800aed0:	9004      	str	r0, [sp, #16]
 800aed2:	4603      	mov	r3, r0
 800aed4:	2800      	cmp	r0, #0
 800aed6:	f43f aefe 	beq.w	800acd6 <_strtod_l+0x4a6>
 800aeda:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800aedc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800aede:	2d00      	cmp	r5, #0
 800aee0:	bfab      	itete	ge
 800aee2:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800aee4:	9b0f      	ldrlt	r3, [sp, #60]	; 0x3c
 800aee6:	9c0f      	ldrge	r4, [sp, #60]	; 0x3c
 800aee8:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800aeea:	bfac      	ite	ge
 800aeec:	195e      	addge	r6, r3, r5
 800aeee:	1b5c      	sublt	r4, r3, r5
 800aef0:	9b05      	ldr	r3, [sp, #20]
 800aef2:	1aed      	subs	r5, r5, r3
 800aef4:	4415      	add	r5, r2
 800aef6:	4b61      	ldr	r3, [pc, #388]	; (800b07c <_strtod_l+0x84c>)
 800aef8:	3d01      	subs	r5, #1
 800aefa:	429d      	cmp	r5, r3
 800aefc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800af00:	f280 80a4 	bge.w	800b04c <_strtod_l+0x81c>
 800af04:	1b5b      	subs	r3, r3, r5
 800af06:	2b1f      	cmp	r3, #31
 800af08:	eba2 0203 	sub.w	r2, r2, r3
 800af0c:	f04f 0701 	mov.w	r7, #1
 800af10:	f300 8091 	bgt.w	800b036 <_strtod_l+0x806>
 800af14:	fa07 f303 	lsl.w	r3, r7, r3
 800af18:	9314      	str	r3, [sp, #80]	; 0x50
 800af1a:	2500      	movs	r5, #0
 800af1c:	18b7      	adds	r7, r6, r2
 800af1e:	9b05      	ldr	r3, [sp, #20]
 800af20:	42be      	cmp	r6, r7
 800af22:	4414      	add	r4, r2
 800af24:	441c      	add	r4, r3
 800af26:	4633      	mov	r3, r6
 800af28:	bfa8      	it	ge
 800af2a:	463b      	movge	r3, r7
 800af2c:	42a3      	cmp	r3, r4
 800af2e:	bfa8      	it	ge
 800af30:	4623      	movge	r3, r4
 800af32:	2b00      	cmp	r3, #0
 800af34:	bfc2      	ittt	gt
 800af36:	1aff      	subgt	r7, r7, r3
 800af38:	1ae4      	subgt	r4, r4, r3
 800af3a:	1af6      	subgt	r6, r6, r3
 800af3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af3e:	b1bb      	cbz	r3, 800af70 <_strtod_l+0x740>
 800af40:	461a      	mov	r2, r3
 800af42:	9904      	ldr	r1, [sp, #16]
 800af44:	4640      	mov	r0, r8
 800af46:	f003 ff29 	bl	800ed9c <__pow5mult>
 800af4a:	9004      	str	r0, [sp, #16]
 800af4c:	2800      	cmp	r0, #0
 800af4e:	f43f aec2 	beq.w	800acd6 <_strtod_l+0x4a6>
 800af52:	4601      	mov	r1, r0
 800af54:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800af56:	4640      	mov	r0, r8
 800af58:	f003 fe93 	bl	800ec82 <__multiply>
 800af5c:	9008      	str	r0, [sp, #32]
 800af5e:	2800      	cmp	r0, #0
 800af60:	f43f aeb9 	beq.w	800acd6 <_strtod_l+0x4a6>
 800af64:	991a      	ldr	r1, [sp, #104]	; 0x68
 800af66:	4640      	mov	r0, r8
 800af68:	f003 fda4 	bl	800eab4 <_Bfree>
 800af6c:	9b08      	ldr	r3, [sp, #32]
 800af6e:	931a      	str	r3, [sp, #104]	; 0x68
 800af70:	2f00      	cmp	r7, #0
 800af72:	dc6f      	bgt.n	800b054 <_strtod_l+0x824>
 800af74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af76:	2b00      	cmp	r3, #0
 800af78:	d175      	bne.n	800b066 <_strtod_l+0x836>
 800af7a:	2c00      	cmp	r4, #0
 800af7c:	dd08      	ble.n	800af90 <_strtod_l+0x760>
 800af7e:	4622      	mov	r2, r4
 800af80:	9906      	ldr	r1, [sp, #24]
 800af82:	4640      	mov	r0, r8
 800af84:	f003 ff58 	bl	800ee38 <__lshift>
 800af88:	9006      	str	r0, [sp, #24]
 800af8a:	2800      	cmp	r0, #0
 800af8c:	f43f aea3 	beq.w	800acd6 <_strtod_l+0x4a6>
 800af90:	2e00      	cmp	r6, #0
 800af92:	dd08      	ble.n	800afa6 <_strtod_l+0x776>
 800af94:	4632      	mov	r2, r6
 800af96:	9904      	ldr	r1, [sp, #16]
 800af98:	4640      	mov	r0, r8
 800af9a:	f003 ff4d 	bl	800ee38 <__lshift>
 800af9e:	9004      	str	r0, [sp, #16]
 800afa0:	2800      	cmp	r0, #0
 800afa2:	f43f ae98 	beq.w	800acd6 <_strtod_l+0x4a6>
 800afa6:	9a06      	ldr	r2, [sp, #24]
 800afa8:	991a      	ldr	r1, [sp, #104]	; 0x68
 800afaa:	4640      	mov	r0, r8
 800afac:	f003 ffaf 	bl	800ef0e <__mdiff>
 800afb0:	4681      	mov	r9, r0
 800afb2:	2800      	cmp	r0, #0
 800afb4:	f43f ae8f 	beq.w	800acd6 <_strtod_l+0x4a6>
 800afb8:	2400      	movs	r4, #0
 800afba:	68c3      	ldr	r3, [r0, #12]
 800afbc:	9904      	ldr	r1, [sp, #16]
 800afbe:	60c4      	str	r4, [r0, #12]
 800afc0:	9308      	str	r3, [sp, #32]
 800afc2:	f003 ff8a 	bl	800eeda <__mcmp>
 800afc6:	42a0      	cmp	r0, r4
 800afc8:	da5a      	bge.n	800b080 <_strtod_l+0x850>
 800afca:	9b08      	ldr	r3, [sp, #32]
 800afcc:	b9f3      	cbnz	r3, 800b00c <_strtod_l+0x7dc>
 800afce:	f1ba 0f00 	cmp.w	sl, #0
 800afd2:	d11b      	bne.n	800b00c <_strtod_l+0x7dc>
 800afd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800afd8:	b9c3      	cbnz	r3, 800b00c <_strtod_l+0x7dc>
 800afda:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800afde:	0d1b      	lsrs	r3, r3, #20
 800afe0:	051b      	lsls	r3, r3, #20
 800afe2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800afe6:	d911      	bls.n	800b00c <_strtod_l+0x7dc>
 800afe8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800afec:	b91b      	cbnz	r3, 800aff6 <_strtod_l+0x7c6>
 800afee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aff2:	2b01      	cmp	r3, #1
 800aff4:	dd0a      	ble.n	800b00c <_strtod_l+0x7dc>
 800aff6:	4649      	mov	r1, r9
 800aff8:	2201      	movs	r2, #1
 800affa:	4640      	mov	r0, r8
 800affc:	f003 ff1c 	bl	800ee38 <__lshift>
 800b000:	9904      	ldr	r1, [sp, #16]
 800b002:	4681      	mov	r9, r0
 800b004:	f003 ff69 	bl	800eeda <__mcmp>
 800b008:	2800      	cmp	r0, #0
 800b00a:	dc6a      	bgt.n	800b0e2 <_strtod_l+0x8b2>
 800b00c:	9b05      	ldr	r3, [sp, #20]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d174      	bne.n	800b0fc <_strtod_l+0x8cc>
 800b012:	e66b      	b.n	800acec <_strtod_l+0x4bc>
 800b014:	07e2      	lsls	r2, r4, #31
 800b016:	d504      	bpl.n	800b022 <_strtod_l+0x7f2>
 800b018:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b01c:	f7f5 faf8 	bl	8000610 <__aeabi_dmul>
 800b020:	2301      	movs	r3, #1
 800b022:	1064      	asrs	r4, r4, #1
 800b024:	3608      	adds	r6, #8
 800b026:	e6ec      	b.n	800ae02 <_strtod_l+0x5d2>
 800b028:	f04f 32ff 	mov.w	r2, #4294967295
 800b02c:	fa02 f303 	lsl.w	r3, r2, r3
 800b030:	ea03 0a0a 	and.w	sl, r3, sl
 800b034:	e705      	b.n	800ae42 <_strtod_l+0x612>
 800b036:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800b03a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800b03e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800b042:	35e2      	adds	r5, #226	; 0xe2
 800b044:	fa07 f505 	lsl.w	r5, r7, r5
 800b048:	9714      	str	r7, [sp, #80]	; 0x50
 800b04a:	e767      	b.n	800af1c <_strtod_l+0x6ec>
 800b04c:	2301      	movs	r3, #1
 800b04e:	2500      	movs	r5, #0
 800b050:	9314      	str	r3, [sp, #80]	; 0x50
 800b052:	e763      	b.n	800af1c <_strtod_l+0x6ec>
 800b054:	463a      	mov	r2, r7
 800b056:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b058:	4640      	mov	r0, r8
 800b05a:	f003 feed 	bl	800ee38 <__lshift>
 800b05e:	901a      	str	r0, [sp, #104]	; 0x68
 800b060:	2800      	cmp	r0, #0
 800b062:	d187      	bne.n	800af74 <_strtod_l+0x744>
 800b064:	e637      	b.n	800acd6 <_strtod_l+0x4a6>
 800b066:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b068:	9906      	ldr	r1, [sp, #24]
 800b06a:	4640      	mov	r0, r8
 800b06c:	f003 fe96 	bl	800ed9c <__pow5mult>
 800b070:	9006      	str	r0, [sp, #24]
 800b072:	2800      	cmp	r0, #0
 800b074:	d181      	bne.n	800af7a <_strtod_l+0x74a>
 800b076:	e62e      	b.n	800acd6 <_strtod_l+0x4a6>
 800b078:	08010f70 	.word	0x08010f70
 800b07c:	fffffc02 	.word	0xfffffc02
 800b080:	f040 8086 	bne.w	800b190 <_strtod_l+0x960>
 800b084:	9a08      	ldr	r2, [sp, #32]
 800b086:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b08a:	b332      	cbz	r2, 800b0da <_strtod_l+0x8aa>
 800b08c:	4aac      	ldr	r2, [pc, #688]	; (800b340 <_strtod_l+0xb10>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	4659      	mov	r1, fp
 800b092:	d152      	bne.n	800b13a <_strtod_l+0x90a>
 800b094:	9b05      	ldr	r3, [sp, #20]
 800b096:	4650      	mov	r0, sl
 800b098:	b1d3      	cbz	r3, 800b0d0 <_strtod_l+0x8a0>
 800b09a:	4aaa      	ldr	r2, [pc, #680]	; (800b344 <_strtod_l+0xb14>)
 800b09c:	400a      	ands	r2, r1
 800b09e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b0a2:	f04f 34ff 	mov.w	r4, #4294967295
 800b0a6:	d816      	bhi.n	800b0d6 <_strtod_l+0x8a6>
 800b0a8:	0d12      	lsrs	r2, r2, #20
 800b0aa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b0ae:	fa04 f303 	lsl.w	r3, r4, r3
 800b0b2:	4283      	cmp	r3, r0
 800b0b4:	d141      	bne.n	800b13a <_strtod_l+0x90a>
 800b0b6:	4aa4      	ldr	r2, [pc, #656]	; (800b348 <_strtod_l+0xb18>)
 800b0b8:	4291      	cmp	r1, r2
 800b0ba:	d102      	bne.n	800b0c2 <_strtod_l+0x892>
 800b0bc:	3301      	adds	r3, #1
 800b0be:	f43f ae0a 	beq.w	800acd6 <_strtod_l+0x4a6>
 800b0c2:	4ba0      	ldr	r3, [pc, #640]	; (800b344 <_strtod_l+0xb14>)
 800b0c4:	400b      	ands	r3, r1
 800b0c6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b0ca:	f04f 0a00 	mov.w	sl, #0
 800b0ce:	e79d      	b.n	800b00c <_strtod_l+0x7dc>
 800b0d0:	f04f 33ff 	mov.w	r3, #4294967295
 800b0d4:	e7ed      	b.n	800b0b2 <_strtod_l+0x882>
 800b0d6:	4623      	mov	r3, r4
 800b0d8:	e7eb      	b.n	800b0b2 <_strtod_l+0x882>
 800b0da:	bb73      	cbnz	r3, 800b13a <_strtod_l+0x90a>
 800b0dc:	f1ba 0f00 	cmp.w	sl, #0
 800b0e0:	d12b      	bne.n	800b13a <_strtod_l+0x90a>
 800b0e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b0e6:	9a05      	ldr	r2, [sp, #20]
 800b0e8:	0d1b      	lsrs	r3, r3, #20
 800b0ea:	051b      	lsls	r3, r3, #20
 800b0ec:	b1e2      	cbz	r2, 800b128 <_strtod_l+0x8f8>
 800b0ee:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b0f2:	dc19      	bgt.n	800b128 <_strtod_l+0x8f8>
 800b0f4:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 800b0f8:	f77f ae61 	ble.w	800adbe <_strtod_l+0x58e>
 800b0fc:	4b93      	ldr	r3, [pc, #588]	; (800b34c <_strtod_l+0xb1c>)
 800b0fe:	930d      	str	r3, [sp, #52]	; 0x34
 800b100:	2300      	movs	r3, #0
 800b102:	930c      	str	r3, [sp, #48]	; 0x30
 800b104:	4650      	mov	r0, sl
 800b106:	4659      	mov	r1, fp
 800b108:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b10c:	f7f5 fa80 	bl	8000610 <__aeabi_dmul>
 800b110:	4682      	mov	sl, r0
 800b112:	468b      	mov	fp, r1
 800b114:	2900      	cmp	r1, #0
 800b116:	f47f ade9 	bne.w	800acec <_strtod_l+0x4bc>
 800b11a:	2800      	cmp	r0, #0
 800b11c:	f47f ade6 	bne.w	800acec <_strtod_l+0x4bc>
 800b120:	2322      	movs	r3, #34	; 0x22
 800b122:	f8c8 3000 	str.w	r3, [r8]
 800b126:	e5e1      	b.n	800acec <_strtod_l+0x4bc>
 800b128:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b12c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b130:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b134:	f04f 3aff 	mov.w	sl, #4294967295
 800b138:	e768      	b.n	800b00c <_strtod_l+0x7dc>
 800b13a:	b19d      	cbz	r5, 800b164 <_strtod_l+0x934>
 800b13c:	ea15 0f0b 	tst.w	r5, fp
 800b140:	f43f af64 	beq.w	800b00c <_strtod_l+0x7dc>
 800b144:	9b08      	ldr	r3, [sp, #32]
 800b146:	9a05      	ldr	r2, [sp, #20]
 800b148:	4650      	mov	r0, sl
 800b14a:	4659      	mov	r1, fp
 800b14c:	b173      	cbz	r3, 800b16c <_strtod_l+0x93c>
 800b14e:	f7ff fb4b 	bl	800a7e8 <sulp>
 800b152:	4602      	mov	r2, r0
 800b154:	460b      	mov	r3, r1
 800b156:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b15a:	f7f5 f8a7 	bl	80002ac <__adddf3>
 800b15e:	4682      	mov	sl, r0
 800b160:	468b      	mov	fp, r1
 800b162:	e753      	b.n	800b00c <_strtod_l+0x7dc>
 800b164:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b166:	ea13 0f0a 	tst.w	r3, sl
 800b16a:	e7e9      	b.n	800b140 <_strtod_l+0x910>
 800b16c:	f7ff fb3c 	bl	800a7e8 <sulp>
 800b170:	4602      	mov	r2, r0
 800b172:	460b      	mov	r3, r1
 800b174:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b178:	f7f5 f896 	bl	80002a8 <__aeabi_dsub>
 800b17c:	2200      	movs	r2, #0
 800b17e:	2300      	movs	r3, #0
 800b180:	4682      	mov	sl, r0
 800b182:	468b      	mov	fp, r1
 800b184:	f7f5 fcac 	bl	8000ae0 <__aeabi_dcmpeq>
 800b188:	2800      	cmp	r0, #0
 800b18a:	f47f ae18 	bne.w	800adbe <_strtod_l+0x58e>
 800b18e:	e73d      	b.n	800b00c <_strtod_l+0x7dc>
 800b190:	9904      	ldr	r1, [sp, #16]
 800b192:	4648      	mov	r0, r9
 800b194:	f003 ffdf 	bl	800f156 <__ratio>
 800b198:	2200      	movs	r2, #0
 800b19a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b19e:	4606      	mov	r6, r0
 800b1a0:	460f      	mov	r7, r1
 800b1a2:	f7f5 fcb1 	bl	8000b08 <__aeabi_dcmple>
 800b1a6:	2800      	cmp	r0, #0
 800b1a8:	d070      	beq.n	800b28c <_strtod_l+0xa5c>
 800b1aa:	9b08      	ldr	r3, [sp, #32]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d043      	beq.n	800b238 <_strtod_l+0xa08>
 800b1b0:	4f67      	ldr	r7, [pc, #412]	; (800b350 <_strtod_l+0xb20>)
 800b1b2:	2600      	movs	r6, #0
 800b1b4:	4d66      	ldr	r5, [pc, #408]	; (800b350 <_strtod_l+0xb20>)
 800b1b6:	4b63      	ldr	r3, [pc, #396]	; (800b344 <_strtod_l+0xb14>)
 800b1b8:	ea0b 0303 	and.w	r3, fp, r3
 800b1bc:	9314      	str	r3, [sp, #80]	; 0x50
 800b1be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b1c0:	4b64      	ldr	r3, [pc, #400]	; (800b354 <_strtod_l+0xb24>)
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	f040 80ce 	bne.w	800b364 <_strtod_l+0xb34>
 800b1c8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b1cc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b1d0:	4650      	mov	r0, sl
 800b1d2:	4659      	mov	r1, fp
 800b1d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b1d8:	f003 fef8 	bl	800efcc <__ulp>
 800b1dc:	4602      	mov	r2, r0
 800b1de:	460b      	mov	r3, r1
 800b1e0:	4630      	mov	r0, r6
 800b1e2:	4639      	mov	r1, r7
 800b1e4:	f7f5 fa14 	bl	8000610 <__aeabi_dmul>
 800b1e8:	4652      	mov	r2, sl
 800b1ea:	465b      	mov	r3, fp
 800b1ec:	f7f5 f85e 	bl	80002ac <__adddf3>
 800b1f0:	4a54      	ldr	r2, [pc, #336]	; (800b344 <_strtod_l+0xb14>)
 800b1f2:	4b59      	ldr	r3, [pc, #356]	; (800b358 <_strtod_l+0xb28>)
 800b1f4:	400a      	ands	r2, r1
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	4682      	mov	sl, r0
 800b1fa:	d95d      	bls.n	800b2b8 <_strtod_l+0xa88>
 800b1fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b1fe:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
 800b202:	429a      	cmp	r2, r3
 800b204:	d103      	bne.n	800b20e <_strtod_l+0x9de>
 800b206:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b208:	3301      	adds	r3, #1
 800b20a:	f43f ad64 	beq.w	800acd6 <_strtod_l+0x4a6>
 800b20e:	f8df b138 	ldr.w	fp, [pc, #312]	; 800b348 <_strtod_l+0xb18>
 800b212:	f04f 3aff 	mov.w	sl, #4294967295
 800b216:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b218:	4640      	mov	r0, r8
 800b21a:	f003 fc4b 	bl	800eab4 <_Bfree>
 800b21e:	9906      	ldr	r1, [sp, #24]
 800b220:	4640      	mov	r0, r8
 800b222:	f003 fc47 	bl	800eab4 <_Bfree>
 800b226:	9904      	ldr	r1, [sp, #16]
 800b228:	4640      	mov	r0, r8
 800b22a:	f003 fc43 	bl	800eab4 <_Bfree>
 800b22e:	4649      	mov	r1, r9
 800b230:	4640      	mov	r0, r8
 800b232:	f003 fc3f 	bl	800eab4 <_Bfree>
 800b236:	e626      	b.n	800ae86 <_strtod_l+0x656>
 800b238:	f1ba 0f00 	cmp.w	sl, #0
 800b23c:	d118      	bne.n	800b270 <_strtod_l+0xa40>
 800b23e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b242:	b9e3      	cbnz	r3, 800b27e <_strtod_l+0xa4e>
 800b244:	2200      	movs	r2, #0
 800b246:	4b42      	ldr	r3, [pc, #264]	; (800b350 <_strtod_l+0xb20>)
 800b248:	4630      	mov	r0, r6
 800b24a:	4639      	mov	r1, r7
 800b24c:	f7f5 fc52 	bl	8000af4 <__aeabi_dcmplt>
 800b250:	b9c8      	cbnz	r0, 800b286 <_strtod_l+0xa56>
 800b252:	2200      	movs	r2, #0
 800b254:	4b41      	ldr	r3, [pc, #260]	; (800b35c <_strtod_l+0xb2c>)
 800b256:	4630      	mov	r0, r6
 800b258:	4639      	mov	r1, r7
 800b25a:	f7f5 f9d9 	bl	8000610 <__aeabi_dmul>
 800b25e:	4604      	mov	r4, r0
 800b260:	460d      	mov	r5, r1
 800b262:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b266:	9416      	str	r4, [sp, #88]	; 0x58
 800b268:	9317      	str	r3, [sp, #92]	; 0x5c
 800b26a:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800b26e:	e7a2      	b.n	800b1b6 <_strtod_l+0x986>
 800b270:	f1ba 0f01 	cmp.w	sl, #1
 800b274:	d103      	bne.n	800b27e <_strtod_l+0xa4e>
 800b276:	f1bb 0f00 	cmp.w	fp, #0
 800b27a:	f43f ada0 	beq.w	800adbe <_strtod_l+0x58e>
 800b27e:	2600      	movs	r6, #0
 800b280:	4f37      	ldr	r7, [pc, #220]	; (800b360 <_strtod_l+0xb30>)
 800b282:	2400      	movs	r4, #0
 800b284:	e796      	b.n	800b1b4 <_strtod_l+0x984>
 800b286:	9c08      	ldr	r4, [sp, #32]
 800b288:	4d34      	ldr	r5, [pc, #208]	; (800b35c <_strtod_l+0xb2c>)
 800b28a:	e7ea      	b.n	800b262 <_strtod_l+0xa32>
 800b28c:	4b33      	ldr	r3, [pc, #204]	; (800b35c <_strtod_l+0xb2c>)
 800b28e:	2200      	movs	r2, #0
 800b290:	4630      	mov	r0, r6
 800b292:	4639      	mov	r1, r7
 800b294:	f7f5 f9bc 	bl	8000610 <__aeabi_dmul>
 800b298:	9b08      	ldr	r3, [sp, #32]
 800b29a:	4604      	mov	r4, r0
 800b29c:	460d      	mov	r5, r1
 800b29e:	b933      	cbnz	r3, 800b2ae <_strtod_l+0xa7e>
 800b2a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b2a4:	9010      	str	r0, [sp, #64]	; 0x40
 800b2a6:	9311      	str	r3, [sp, #68]	; 0x44
 800b2a8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b2ac:	e783      	b.n	800b1b6 <_strtod_l+0x986>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b2b6:	e7f7      	b.n	800b2a8 <_strtod_l+0xa78>
 800b2b8:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
 800b2bc:	9b05      	ldr	r3, [sp, #20]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d1a9      	bne.n	800b216 <_strtod_l+0x9e6>
 800b2c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b2c6:	0d1b      	lsrs	r3, r3, #20
 800b2c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b2ca:	051b      	lsls	r3, r3, #20
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	465e      	mov	r6, fp
 800b2d0:	d1a1      	bne.n	800b216 <_strtod_l+0x9e6>
 800b2d2:	4629      	mov	r1, r5
 800b2d4:	4620      	mov	r0, r4
 800b2d6:	f7f5 fc4b 	bl	8000b70 <__aeabi_d2iz>
 800b2da:	f7f5 f933 	bl	8000544 <__aeabi_i2d>
 800b2de:	460b      	mov	r3, r1
 800b2e0:	4602      	mov	r2, r0
 800b2e2:	4629      	mov	r1, r5
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	f7f4 ffdf 	bl	80002a8 <__aeabi_dsub>
 800b2ea:	9b08      	ldr	r3, [sp, #32]
 800b2ec:	4604      	mov	r4, r0
 800b2ee:	460d      	mov	r5, r1
 800b2f0:	b933      	cbnz	r3, 800b300 <_strtod_l+0xad0>
 800b2f2:	f1ba 0f00 	cmp.w	sl, #0
 800b2f6:	d103      	bne.n	800b300 <_strtod_l+0xad0>
 800b2f8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b2fc:	2e00      	cmp	r6, #0
 800b2fe:	d06c      	beq.n	800b3da <_strtod_l+0xbaa>
 800b300:	a30b      	add	r3, pc, #44	; (adr r3, 800b330 <_strtod_l+0xb00>)
 800b302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b306:	4620      	mov	r0, r4
 800b308:	4629      	mov	r1, r5
 800b30a:	f7f5 fbf3 	bl	8000af4 <__aeabi_dcmplt>
 800b30e:	2800      	cmp	r0, #0
 800b310:	f47f acec 	bne.w	800acec <_strtod_l+0x4bc>
 800b314:	a308      	add	r3, pc, #32	; (adr r3, 800b338 <_strtod_l+0xb08>)
 800b316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31a:	4620      	mov	r0, r4
 800b31c:	4629      	mov	r1, r5
 800b31e:	f7f5 fc07 	bl	8000b30 <__aeabi_dcmpgt>
 800b322:	2800      	cmp	r0, #0
 800b324:	f43f af77 	beq.w	800b216 <_strtod_l+0x9e6>
 800b328:	e4e0      	b.n	800acec <_strtod_l+0x4bc>
 800b32a:	bf00      	nop
 800b32c:	f3af 8000 	nop.w
 800b330:	94a03595 	.word	0x94a03595
 800b334:	3fdfffff 	.word	0x3fdfffff
 800b338:	35afe535 	.word	0x35afe535
 800b33c:	3fe00000 	.word	0x3fe00000
 800b340:	000fffff 	.word	0x000fffff
 800b344:	7ff00000 	.word	0x7ff00000
 800b348:	7fefffff 	.word	0x7fefffff
 800b34c:	39500000 	.word	0x39500000
 800b350:	3ff00000 	.word	0x3ff00000
 800b354:	7fe00000 	.word	0x7fe00000
 800b358:	7c9fffff 	.word	0x7c9fffff
 800b35c:	3fe00000 	.word	0x3fe00000
 800b360:	bff00000 	.word	0xbff00000
 800b364:	9b05      	ldr	r3, [sp, #20]
 800b366:	b313      	cbz	r3, 800b3ae <_strtod_l+0xb7e>
 800b368:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b36a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b36e:	d81e      	bhi.n	800b3ae <_strtod_l+0xb7e>
 800b370:	a325      	add	r3, pc, #148	; (adr r3, 800b408 <_strtod_l+0xbd8>)
 800b372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b376:	4620      	mov	r0, r4
 800b378:	4629      	mov	r1, r5
 800b37a:	f7f5 fbc5 	bl	8000b08 <__aeabi_dcmple>
 800b37e:	b190      	cbz	r0, 800b3a6 <_strtod_l+0xb76>
 800b380:	4629      	mov	r1, r5
 800b382:	4620      	mov	r0, r4
 800b384:	f7f5 fc1c 	bl	8000bc0 <__aeabi_d2uiz>
 800b388:	2800      	cmp	r0, #0
 800b38a:	bf08      	it	eq
 800b38c:	2001      	moveq	r0, #1
 800b38e:	f7f5 f8c9 	bl	8000524 <__aeabi_ui2d>
 800b392:	9b08      	ldr	r3, [sp, #32]
 800b394:	4604      	mov	r4, r0
 800b396:	460d      	mov	r5, r1
 800b398:	b9d3      	cbnz	r3, 800b3d0 <_strtod_l+0xba0>
 800b39a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b39e:	9012      	str	r0, [sp, #72]	; 0x48
 800b3a0:	9313      	str	r3, [sp, #76]	; 0x4c
 800b3a2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800b3a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b3a8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800b3ac:	1a9f      	subs	r7, r3, r2
 800b3ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b3b2:	f003 fe0b 	bl	800efcc <__ulp>
 800b3b6:	4602      	mov	r2, r0
 800b3b8:	460b      	mov	r3, r1
 800b3ba:	4630      	mov	r0, r6
 800b3bc:	4639      	mov	r1, r7
 800b3be:	f7f5 f927 	bl	8000610 <__aeabi_dmul>
 800b3c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b3c6:	f7f4 ff71 	bl	80002ac <__adddf3>
 800b3ca:	4682      	mov	sl, r0
 800b3cc:	468b      	mov	fp, r1
 800b3ce:	e775      	b.n	800b2bc <_strtod_l+0xa8c>
 800b3d0:	4602      	mov	r2, r0
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800b3d8:	e7e3      	b.n	800b3a2 <_strtod_l+0xb72>
 800b3da:	a30d      	add	r3, pc, #52	; (adr r3, 800b410 <_strtod_l+0xbe0>)
 800b3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e0:	f7f5 fb88 	bl	8000af4 <__aeabi_dcmplt>
 800b3e4:	e79d      	b.n	800b322 <_strtod_l+0xaf2>
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	9309      	str	r3, [sp, #36]	; 0x24
 800b3ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b3ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b3ee:	6013      	str	r3, [r2, #0]
 800b3f0:	f7ff ba62 	b.w	800a8b8 <_strtod_l+0x88>
 800b3f4:	2b65      	cmp	r3, #101	; 0x65
 800b3f6:	f04f 0200 	mov.w	r2, #0
 800b3fa:	f43f abb2 	beq.w	800ab62 <_strtod_l+0x332>
 800b3fe:	4615      	mov	r5, r2
 800b400:	2101      	movs	r1, #1
 800b402:	f7ff bad1 	b.w	800a9a8 <_strtod_l+0x178>
 800b406:	bf00      	nop
 800b408:	ffc00000 	.word	0xffc00000
 800b40c:	41dfffff 	.word	0x41dfffff
 800b410:	94a03595 	.word	0x94a03595
 800b414:	3fcfffff 	.word	0x3fcfffff

0800b418 <strtod>:
 800b418:	4b06      	ldr	r3, [pc, #24]	; (800b434 <strtod+0x1c>)
 800b41a:	4a07      	ldr	r2, [pc, #28]	; (800b438 <strtod+0x20>)
 800b41c:	b410      	push	{r4}
 800b41e:	681c      	ldr	r4, [r3, #0]
 800b420:	6a23      	ldr	r3, [r4, #32]
 800b422:	2b00      	cmp	r3, #0
 800b424:	bf08      	it	eq
 800b426:	4613      	moveq	r3, r2
 800b428:	460a      	mov	r2, r1
 800b42a:	4601      	mov	r1, r0
 800b42c:	4620      	mov	r0, r4
 800b42e:	bc10      	pop	{r4}
 800b430:	f7ff b9fe 	b.w	800a830 <_strtod_l>
 800b434:	20000010 	.word	0x20000010
 800b438:	2000055c 	.word	0x2000055c

0800b43c <strtok>:
 800b43c:	4b14      	ldr	r3, [pc, #80]	; (800b490 <strtok+0x54>)
 800b43e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b442:	681d      	ldr	r5, [r3, #0]
 800b444:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
 800b448:	4606      	mov	r6, r0
 800b44a:	460f      	mov	r7, r1
 800b44c:	b9bc      	cbnz	r4, 800b47e <strtok+0x42>
 800b44e:	2050      	movs	r0, #80	; 0x50
 800b450:	f7fe fbbe 	bl	8009bd0 <malloc>
 800b454:	f8c5 00e8 	str.w	r0, [r5, #232]	; 0xe8
 800b458:	6004      	str	r4, [r0, #0]
 800b45a:	6044      	str	r4, [r0, #4]
 800b45c:	6084      	str	r4, [r0, #8]
 800b45e:	60c4      	str	r4, [r0, #12]
 800b460:	6104      	str	r4, [r0, #16]
 800b462:	6144      	str	r4, [r0, #20]
 800b464:	6184      	str	r4, [r0, #24]
 800b466:	6284      	str	r4, [r0, #40]	; 0x28
 800b468:	62c4      	str	r4, [r0, #44]	; 0x2c
 800b46a:	6304      	str	r4, [r0, #48]	; 0x30
 800b46c:	6344      	str	r4, [r0, #52]	; 0x34
 800b46e:	6384      	str	r4, [r0, #56]	; 0x38
 800b470:	63c4      	str	r4, [r0, #60]	; 0x3c
 800b472:	6404      	str	r4, [r0, #64]	; 0x40
 800b474:	6444      	str	r4, [r0, #68]	; 0x44
 800b476:	6484      	str	r4, [r0, #72]	; 0x48
 800b478:	64c4      	str	r4, [r0, #76]	; 0x4c
 800b47a:	7704      	strb	r4, [r0, #28]
 800b47c:	6244      	str	r4, [r0, #36]	; 0x24
 800b47e:	f8d5 20e8 	ldr.w	r2, [r5, #232]	; 0xe8
 800b482:	4639      	mov	r1, r7
 800b484:	4630      	mov	r0, r6
 800b486:	2301      	movs	r3, #1
 800b488:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b48c:	f000 b802 	b.w	800b494 <__strtok_r>
 800b490:	20000010 	.word	0x20000010

0800b494 <__strtok_r>:
 800b494:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b496:	b918      	cbnz	r0, 800b4a0 <__strtok_r+0xc>
 800b498:	6810      	ldr	r0, [r2, #0]
 800b49a:	b908      	cbnz	r0, 800b4a0 <__strtok_r+0xc>
 800b49c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b49e:	4620      	mov	r0, r4
 800b4a0:	4604      	mov	r4, r0
 800b4a2:	460f      	mov	r7, r1
 800b4a4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b4a8:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b4ac:	b91e      	cbnz	r6, 800b4b6 <__strtok_r+0x22>
 800b4ae:	b965      	cbnz	r5, 800b4ca <__strtok_r+0x36>
 800b4b0:	6015      	str	r5, [r2, #0]
 800b4b2:	4628      	mov	r0, r5
 800b4b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4b6:	42b5      	cmp	r5, r6
 800b4b8:	d1f6      	bne.n	800b4a8 <__strtok_r+0x14>
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d1ef      	bne.n	800b49e <__strtok_r+0xa>
 800b4be:	6014      	str	r4, [r2, #0]
 800b4c0:	7003      	strb	r3, [r0, #0]
 800b4c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4c4:	461c      	mov	r4, r3
 800b4c6:	e00c      	b.n	800b4e2 <__strtok_r+0x4e>
 800b4c8:	b915      	cbnz	r5, 800b4d0 <__strtok_r+0x3c>
 800b4ca:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b4ce:	460e      	mov	r6, r1
 800b4d0:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b4d4:	42ab      	cmp	r3, r5
 800b4d6:	d1f7      	bne.n	800b4c8 <__strtok_r+0x34>
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d0f3      	beq.n	800b4c4 <__strtok_r+0x30>
 800b4dc:	2300      	movs	r3, #0
 800b4de:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b4e2:	6014      	str	r4, [r2, #0]
 800b4e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800b4e8 <time>:
 800b4e8:	b513      	push	{r0, r1, r4, lr}
 800b4ea:	4b08      	ldr	r3, [pc, #32]	; (800b50c <time+0x24>)
 800b4ec:	4604      	mov	r4, r0
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	6818      	ldr	r0, [r3, #0]
 800b4f2:	4669      	mov	r1, sp
 800b4f4:	f003 f92c 	bl	800e750 <_gettimeofday_r>
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	bfbc      	itt	lt
 800b4fc:	f04f 33ff 	movlt.w	r3, #4294967295
 800b500:	9300      	strlt	r3, [sp, #0]
 800b502:	9800      	ldr	r0, [sp, #0]
 800b504:	b104      	cbz	r4, 800b508 <time+0x20>
 800b506:	6020      	str	r0, [r4, #0]
 800b508:	b002      	add	sp, #8
 800b50a:	bd10      	pop	{r4, pc}
 800b50c:	20000010 	.word	0x20000010

0800b510 <__tzcalc_limits>:
 800b510:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b514:	4604      	mov	r4, r0
 800b516:	f003 f92d 	bl	800e774 <__gettzinfo>
 800b51a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800b51e:	429c      	cmp	r4, r3
 800b520:	f340 8098 	ble.w	800b654 <__tzcalc_limits+0x144>
 800b524:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 800b528:	18e3      	adds	r3, r4, r3
 800b52a:	109b      	asrs	r3, r3, #2
 800b52c:	f240 126d 	movw	r2, #365	; 0x16d
 800b530:	f2a4 75b2 	subw	r5, r4, #1970	; 0x7b2
 800b534:	fb02 3505 	mla	r5, r2, r5, r3
 800b538:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800b53c:	f2a4 736d 	subw	r3, r4, #1901	; 0x76d
 800b540:	fb93 f3f2 	sdiv	r3, r3, r2
 800b544:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 800b548:	441d      	add	r5, r3
 800b54a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800b54e:	18a2      	adds	r2, r4, r2
 800b550:	fb94 f7f3 	sdiv	r7, r4, r3
 800b554:	fb92 f2f3 	sdiv	r2, r2, r3
 800b558:	fb03 4717 	mls	r7, r3, r7, r4
 800b55c:	f100 0338 	add.w	r3, r0, #56	; 0x38
 800b560:	4415      	add	r5, r2
 800b562:	fab7 fe87 	clz	lr, r7
 800b566:	2264      	movs	r2, #100	; 0x64
 800b568:	9301      	str	r3, [sp, #4]
 800b56a:	f004 0303 	and.w	r3, r4, #3
 800b56e:	fb94 f6f2 	sdiv	r6, r4, r2
 800b572:	6044      	str	r4, [r0, #4]
 800b574:	fb02 4616 	mls	r6, r2, r6, r4
 800b578:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 800b57c:	4601      	mov	r1, r0
 800b57e:	9300      	str	r3, [sp, #0]
 800b580:	f06f 4c40 	mvn.w	ip, #3221225472	; 0xc0000000
 800b584:	7a0b      	ldrb	r3, [r1, #8]
 800b586:	2b4a      	cmp	r3, #74	; 0x4a
 800b588:	d123      	bne.n	800b5d2 <__tzcalc_limits+0xc2>
 800b58a:	694c      	ldr	r4, [r1, #20]
 800b58c:	9a00      	ldr	r2, [sp, #0]
 800b58e:	192b      	adds	r3, r5, r4
 800b590:	b902      	cbnz	r2, 800b594 <__tzcalc_limits+0x84>
 800b592:	b906      	cbnz	r6, 800b596 <__tzcalc_limits+0x86>
 800b594:	b9df      	cbnz	r7, 800b5ce <__tzcalc_limits+0xbe>
 800b596:	2c3b      	cmp	r4, #59	; 0x3b
 800b598:	bfd4      	ite	le
 800b59a:	2400      	movle	r4, #0
 800b59c:	2401      	movgt	r4, #1
 800b59e:	441c      	add	r4, r3
 800b5a0:	3c01      	subs	r4, #1
 800b5a2:	4b2d      	ldr	r3, [pc, #180]	; (800b658 <__tzcalc_limits+0x148>)
 800b5a4:	698a      	ldr	r2, [r1, #24]
 800b5a6:	fb03 2404 	mla	r4, r3, r4, r2
 800b5aa:	6a0b      	ldr	r3, [r1, #32]
 800b5ac:	441c      	add	r4, r3
 800b5ae:	f841 4f1c 	str.w	r4, [r1, #28]!
 800b5b2:	9b01      	ldr	r3, [sp, #4]
 800b5b4:	428b      	cmp	r3, r1
 800b5b6:	d1e5      	bne.n	800b584 <__tzcalc_limits+0x74>
 800b5b8:	69c3      	ldr	r3, [r0, #28]
 800b5ba:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	bfac      	ite	ge
 800b5c0:	2300      	movge	r3, #0
 800b5c2:	2301      	movlt	r3, #1
 800b5c4:	6003      	str	r3, [r0, #0]
 800b5c6:	2001      	movs	r0, #1
 800b5c8:	b003      	add	sp, #12
 800b5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ce:	2400      	movs	r4, #0
 800b5d0:	e7e5      	b.n	800b59e <__tzcalc_limits+0x8e>
 800b5d2:	2b44      	cmp	r3, #68	; 0x44
 800b5d4:	d102      	bne.n	800b5dc <__tzcalc_limits+0xcc>
 800b5d6:	694b      	ldr	r3, [r1, #20]
 800b5d8:	18ec      	adds	r4, r5, r3
 800b5da:	e7e2      	b.n	800b5a2 <__tzcalc_limits+0x92>
 800b5dc:	9b00      	ldr	r3, [sp, #0]
 800b5de:	bb7b      	cbnz	r3, 800b640 <__tzcalc_limits+0x130>
 800b5e0:	2e00      	cmp	r6, #0
 800b5e2:	bf0c      	ite	eq
 800b5e4:	46f0      	moveq	r8, lr
 800b5e6:	f04f 0801 	movne.w	r8, #1
 800b5ea:	4b1c      	ldr	r3, [pc, #112]	; (800b65c <__tzcalc_limits+0x14c>)
 800b5ec:	68cc      	ldr	r4, [r1, #12]
 800b5ee:	2230      	movs	r2, #48	; 0x30
 800b5f0:	fb02 3808 	mla	r8, r2, r8, r3
 800b5f4:	f1a8 0a04 	sub.w	sl, r8, #4
 800b5f8:	462b      	mov	r3, r5
 800b5fa:	f04f 0901 	mov.w	r9, #1
 800b5fe:	45a1      	cmp	r9, r4
 800b600:	db20      	blt.n	800b644 <__tzcalc_limits+0x134>
 800b602:	2c01      	cmp	r4, #1
 800b604:	bfb8      	it	lt
 800b606:	2401      	movlt	r4, #1
 800b608:	46a1      	mov	r9, r4
 800b60a:	f103 0b04 	add.w	fp, r3, #4
 800b60e:	2207      	movs	r2, #7
 800b610:	694c      	ldr	r4, [r1, #20]
 800b612:	fb9b faf2 	sdiv	sl, fp, r2
 800b616:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 800b61a:	ebab 0a0a 	sub.w	sl, fp, sl
 800b61e:	ebb4 0a0a 	subs.w	sl, r4, sl
 800b622:	690c      	ldr	r4, [r1, #16]
 800b624:	44e1      	add	r9, ip
 800b626:	f104 34ff 	add.w	r4, r4, #4294967295
 800b62a:	bf48      	it	mi
 800b62c:	4492      	addmi	sl, r2
 800b62e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800b632:	f858 8029 	ldr.w	r8, [r8, r9, lsl #2]
 800b636:	4454      	add	r4, sl
 800b638:	4544      	cmp	r4, r8
 800b63a:	da09      	bge.n	800b650 <__tzcalc_limits+0x140>
 800b63c:	441c      	add	r4, r3
 800b63e:	e7b0      	b.n	800b5a2 <__tzcalc_limits+0x92>
 800b640:	46f0      	mov	r8, lr
 800b642:	e7d2      	b.n	800b5ea <__tzcalc_limits+0xda>
 800b644:	f85a bf04 	ldr.w	fp, [sl, #4]!
 800b648:	f109 0901 	add.w	r9, r9, #1
 800b64c:	445b      	add	r3, fp
 800b64e:	e7d6      	b.n	800b5fe <__tzcalc_limits+0xee>
 800b650:	3c07      	subs	r4, #7
 800b652:	e7f1      	b.n	800b638 <__tzcalc_limits+0x128>
 800b654:	2000      	movs	r0, #0
 800b656:	e7b7      	b.n	800b5c8 <__tzcalc_limits+0xb8>
 800b658:	00015180 	.word	0x00015180
 800b65c:	08010ee0 	.word	0x08010ee0

0800b660 <__tz_lock>:
 800b660:	4801      	ldr	r0, [pc, #4]	; (800b668 <__tz_lock+0x8>)
 800b662:	f003 b957 	b.w	800e914 <__retarget_lock_acquire>
 800b666:	bf00      	nop
 800b668:	200021f7 	.word	0x200021f7

0800b66c <__tz_unlock>:
 800b66c:	4801      	ldr	r0, [pc, #4]	; (800b674 <__tz_unlock+0x8>)
 800b66e:	f003 b953 	b.w	800e918 <__retarget_lock_release>
 800b672:	bf00      	nop
 800b674:	200021f7 	.word	0x200021f7

0800b678 <_tzset_unlocked>:
 800b678:	4b01      	ldr	r3, [pc, #4]	; (800b680 <_tzset_unlocked+0x8>)
 800b67a:	6818      	ldr	r0, [r3, #0]
 800b67c:	f000 b802 	b.w	800b684 <_tzset_unlocked_r>
 800b680:	20000010 	.word	0x20000010

0800b684 <_tzset_unlocked_r>:
 800b684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b688:	b08d      	sub	sp, #52	; 0x34
 800b68a:	4607      	mov	r7, r0
 800b68c:	f003 f872 	bl	800e774 <__gettzinfo>
 800b690:	49b1      	ldr	r1, [pc, #708]	; (800b958 <_tzset_unlocked_r+0x2d4>)
 800b692:	4eb2      	ldr	r6, [pc, #712]	; (800b95c <_tzset_unlocked_r+0x2d8>)
 800b694:	4605      	mov	r5, r0
 800b696:	4638      	mov	r0, r7
 800b698:	f003 f852 	bl	800e740 <_getenv_r>
 800b69c:	4604      	mov	r4, r0
 800b69e:	b970      	cbnz	r0, 800b6be <_tzset_unlocked_r+0x3a>
 800b6a0:	4baf      	ldr	r3, [pc, #700]	; (800b960 <_tzset_unlocked_r+0x2dc>)
 800b6a2:	4ab0      	ldr	r2, [pc, #704]	; (800b964 <_tzset_unlocked_r+0x2e0>)
 800b6a4:	6018      	str	r0, [r3, #0]
 800b6a6:	4bb0      	ldr	r3, [pc, #704]	; (800b968 <_tzset_unlocked_r+0x2e4>)
 800b6a8:	6018      	str	r0, [r3, #0]
 800b6aa:	4bb0      	ldr	r3, [pc, #704]	; (800b96c <_tzset_unlocked_r+0x2e8>)
 800b6ac:	6830      	ldr	r0, [r6, #0]
 800b6ae:	601a      	str	r2, [r3, #0]
 800b6b0:	605a      	str	r2, [r3, #4]
 800b6b2:	f7fe fa95 	bl	8009be0 <free>
 800b6b6:	6034      	str	r4, [r6, #0]
 800b6b8:	b00d      	add	sp, #52	; 0x34
 800b6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6be:	6831      	ldr	r1, [r6, #0]
 800b6c0:	2900      	cmp	r1, #0
 800b6c2:	d160      	bne.n	800b786 <_tzset_unlocked_r+0x102>
 800b6c4:	6830      	ldr	r0, [r6, #0]
 800b6c6:	f7fe fa8b 	bl	8009be0 <free>
 800b6ca:	4620      	mov	r0, r4
 800b6cc:	f7f4 fd8a 	bl	80001e4 <strlen>
 800b6d0:	1c41      	adds	r1, r0, #1
 800b6d2:	4638      	mov	r0, r7
 800b6d4:	f7fe fa8c 	bl	8009bf0 <_malloc_r>
 800b6d8:	6030      	str	r0, [r6, #0]
 800b6da:	2800      	cmp	r0, #0
 800b6dc:	d158      	bne.n	800b790 <_tzset_unlocked_r+0x10c>
 800b6de:	7823      	ldrb	r3, [r4, #0]
 800b6e0:	4aa3      	ldr	r2, [pc, #652]	; (800b970 <_tzset_unlocked_r+0x2ec>)
 800b6e2:	49a4      	ldr	r1, [pc, #656]	; (800b974 <_tzset_unlocked_r+0x2f0>)
 800b6e4:	2b3a      	cmp	r3, #58	; 0x3a
 800b6e6:	bf08      	it	eq
 800b6e8:	3401      	addeq	r4, #1
 800b6ea:	ae0a      	add	r6, sp, #40	; 0x28
 800b6ec:	4633      	mov	r3, r6
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	f003 ff14 	bl	800f51c <siscanf>
 800b6f4:	2800      	cmp	r0, #0
 800b6f6:	dddf      	ble.n	800b6b8 <_tzset_unlocked_r+0x34>
 800b6f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6fa:	18e7      	adds	r7, r4, r3
 800b6fc:	5ce3      	ldrb	r3, [r4, r3]
 800b6fe:	2b2d      	cmp	r3, #45	; 0x2d
 800b700:	d14a      	bne.n	800b798 <_tzset_unlocked_r+0x114>
 800b702:	3701      	adds	r7, #1
 800b704:	f04f 34ff 	mov.w	r4, #4294967295
 800b708:	f10d 0a20 	add.w	sl, sp, #32
 800b70c:	f10d 0b1e 	add.w	fp, sp, #30
 800b710:	f04f 0800 	mov.w	r8, #0
 800b714:	9603      	str	r6, [sp, #12]
 800b716:	f8cd a008 	str.w	sl, [sp, #8]
 800b71a:	9601      	str	r6, [sp, #4]
 800b71c:	f8cd b000 	str.w	fp, [sp]
 800b720:	4633      	mov	r3, r6
 800b722:	aa07      	add	r2, sp, #28
 800b724:	4994      	ldr	r1, [pc, #592]	; (800b978 <_tzset_unlocked_r+0x2f4>)
 800b726:	f8ad 801e 	strh.w	r8, [sp, #30]
 800b72a:	4638      	mov	r0, r7
 800b72c:	f8ad 8020 	strh.w	r8, [sp, #32]
 800b730:	f003 fef4 	bl	800f51c <siscanf>
 800b734:	4540      	cmp	r0, r8
 800b736:	ddbf      	ble.n	800b6b8 <_tzset_unlocked_r+0x34>
 800b738:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800b73c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800b740:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800b984 <_tzset_unlocked_r+0x300>
 800b744:	213c      	movs	r1, #60	; 0x3c
 800b746:	fb01 2203 	mla	r2, r1, r3, r2
 800b74a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800b74e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800b752:	fb01 2303 	mla	r3, r1, r3, r2
 800b756:	435c      	muls	r4, r3
 800b758:	622c      	str	r4, [r5, #32]
 800b75a:	4c84      	ldr	r4, [pc, #528]	; (800b96c <_tzset_unlocked_r+0x2e8>)
 800b75c:	4b84      	ldr	r3, [pc, #528]	; (800b970 <_tzset_unlocked_r+0x2ec>)
 800b75e:	6023      	str	r3, [r4, #0]
 800b760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b762:	4984      	ldr	r1, [pc, #528]	; (800b974 <_tzset_unlocked_r+0x2f0>)
 800b764:	441f      	add	r7, r3
 800b766:	464a      	mov	r2, r9
 800b768:	4633      	mov	r3, r6
 800b76a:	4638      	mov	r0, r7
 800b76c:	f003 fed6 	bl	800f51c <siscanf>
 800b770:	4540      	cmp	r0, r8
 800b772:	dc16      	bgt.n	800b7a2 <_tzset_unlocked_r+0x11e>
 800b774:	6823      	ldr	r3, [r4, #0]
 800b776:	6063      	str	r3, [r4, #4]
 800b778:	4b79      	ldr	r3, [pc, #484]	; (800b960 <_tzset_unlocked_r+0x2dc>)
 800b77a:	6a2a      	ldr	r2, [r5, #32]
 800b77c:	601a      	str	r2, [r3, #0]
 800b77e:	4b7a      	ldr	r3, [pc, #488]	; (800b968 <_tzset_unlocked_r+0x2e4>)
 800b780:	f8c3 8000 	str.w	r8, [r3]
 800b784:	e798      	b.n	800b6b8 <_tzset_unlocked_r+0x34>
 800b786:	f7f4 fd23 	bl	80001d0 <strcmp>
 800b78a:	2800      	cmp	r0, #0
 800b78c:	d094      	beq.n	800b6b8 <_tzset_unlocked_r+0x34>
 800b78e:	e799      	b.n	800b6c4 <_tzset_unlocked_r+0x40>
 800b790:	4621      	mov	r1, r4
 800b792:	f003 ff32 	bl	800f5fa <strcpy>
 800b796:	e7a2      	b.n	800b6de <_tzset_unlocked_r+0x5a>
 800b798:	2b2b      	cmp	r3, #43	; 0x2b
 800b79a:	bf08      	it	eq
 800b79c:	3701      	addeq	r7, #1
 800b79e:	2401      	movs	r4, #1
 800b7a0:	e7b2      	b.n	800b708 <_tzset_unlocked_r+0x84>
 800b7a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7a4:	f8c4 9004 	str.w	r9, [r4, #4]
 800b7a8:	18fc      	adds	r4, r7, r3
 800b7aa:	5cfb      	ldrb	r3, [r7, r3]
 800b7ac:	2b2d      	cmp	r3, #45	; 0x2d
 800b7ae:	f040 8092 	bne.w	800b8d6 <_tzset_unlocked_r+0x252>
 800b7b2:	3401      	adds	r4, #1
 800b7b4:	f04f 37ff 	mov.w	r7, #4294967295
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b7be:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b7c2:	f8ad 3020 	strh.w	r3, [sp, #32]
 800b7c6:	930a      	str	r3, [sp, #40]	; 0x28
 800b7c8:	9603      	str	r6, [sp, #12]
 800b7ca:	f8cd a008 	str.w	sl, [sp, #8]
 800b7ce:	9601      	str	r6, [sp, #4]
 800b7d0:	f8cd b000 	str.w	fp, [sp]
 800b7d4:	4633      	mov	r3, r6
 800b7d6:	aa07      	add	r2, sp, #28
 800b7d8:	4967      	ldr	r1, [pc, #412]	; (800b978 <_tzset_unlocked_r+0x2f4>)
 800b7da:	4620      	mov	r0, r4
 800b7dc:	f003 fe9e 	bl	800f51c <siscanf>
 800b7e0:	2800      	cmp	r0, #0
 800b7e2:	dc7d      	bgt.n	800b8e0 <_tzset_unlocked_r+0x25c>
 800b7e4:	6a2b      	ldr	r3, [r5, #32]
 800b7e6:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800b7ea:	63eb      	str	r3, [r5, #60]	; 0x3c
 800b7ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7ee:	462f      	mov	r7, r5
 800b7f0:	441c      	add	r4, r3
 800b7f2:	f04f 0900 	mov.w	r9, #0
 800b7f6:	7823      	ldrb	r3, [r4, #0]
 800b7f8:	2b2c      	cmp	r3, #44	; 0x2c
 800b7fa:	bf08      	it	eq
 800b7fc:	3401      	addeq	r4, #1
 800b7fe:	f894 8000 	ldrb.w	r8, [r4]
 800b802:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800b806:	d17b      	bne.n	800b900 <_tzset_unlocked_r+0x27c>
 800b808:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800b80c:	9302      	str	r3, [sp, #8]
 800b80e:	ab09      	add	r3, sp, #36	; 0x24
 800b810:	9300      	str	r3, [sp, #0]
 800b812:	9603      	str	r6, [sp, #12]
 800b814:	9601      	str	r6, [sp, #4]
 800b816:	4633      	mov	r3, r6
 800b818:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800b81c:	4957      	ldr	r1, [pc, #348]	; (800b97c <_tzset_unlocked_r+0x2f8>)
 800b81e:	4620      	mov	r0, r4
 800b820:	f003 fe7c 	bl	800f51c <siscanf>
 800b824:	2803      	cmp	r0, #3
 800b826:	f47f af47 	bne.w	800b6b8 <_tzset_unlocked_r+0x34>
 800b82a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800b82e:	1e4b      	subs	r3, r1, #1
 800b830:	2b0b      	cmp	r3, #11
 800b832:	f63f af41 	bhi.w	800b6b8 <_tzset_unlocked_r+0x34>
 800b836:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800b83a:	1e53      	subs	r3, r2, #1
 800b83c:	2b04      	cmp	r3, #4
 800b83e:	f63f af3b 	bhi.w	800b6b8 <_tzset_unlocked_r+0x34>
 800b842:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800b846:	2b06      	cmp	r3, #6
 800b848:	f63f af36 	bhi.w	800b6b8 <_tzset_unlocked_r+0x34>
 800b84c:	f887 8008 	strb.w	r8, [r7, #8]
 800b850:	60f9      	str	r1, [r7, #12]
 800b852:	613a      	str	r2, [r7, #16]
 800b854:	617b      	str	r3, [r7, #20]
 800b856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b858:	eb04 0803 	add.w	r8, r4, r3
 800b85c:	2302      	movs	r3, #2
 800b85e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b862:	2300      	movs	r3, #0
 800b864:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b868:	f8ad 3020 	strh.w	r3, [sp, #32]
 800b86c:	930a      	str	r3, [sp, #40]	; 0x28
 800b86e:	f898 3000 	ldrb.w	r3, [r8]
 800b872:	2b2f      	cmp	r3, #47	; 0x2f
 800b874:	d10b      	bne.n	800b88e <_tzset_unlocked_r+0x20a>
 800b876:	9603      	str	r6, [sp, #12]
 800b878:	f8cd a008 	str.w	sl, [sp, #8]
 800b87c:	9601      	str	r6, [sp, #4]
 800b87e:	f8cd b000 	str.w	fp, [sp]
 800b882:	4633      	mov	r3, r6
 800b884:	aa07      	add	r2, sp, #28
 800b886:	493e      	ldr	r1, [pc, #248]	; (800b980 <_tzset_unlocked_r+0x2fc>)
 800b888:	4640      	mov	r0, r8
 800b88a:	f003 fe47 	bl	800f51c <siscanf>
 800b88e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800b892:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800b896:	213c      	movs	r1, #60	; 0x3c
 800b898:	fb01 2203 	mla	r2, r1, r3, r2
 800b89c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800b8a0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800b8a4:	fb01 2303 	mla	r3, r1, r3, r2
 800b8a8:	61bb      	str	r3, [r7, #24]
 800b8aa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b8ac:	f109 0901 	add.w	r9, r9, #1
 800b8b0:	f1b9 0f02 	cmp.w	r9, #2
 800b8b4:	4444      	add	r4, r8
 800b8b6:	f107 071c 	add.w	r7, r7, #28
 800b8ba:	d19c      	bne.n	800b7f6 <_tzset_unlocked_r+0x172>
 800b8bc:	6868      	ldr	r0, [r5, #4]
 800b8be:	f7ff fe27 	bl	800b510 <__tzcalc_limits>
 800b8c2:	4b27      	ldr	r3, [pc, #156]	; (800b960 <_tzset_unlocked_r+0x2dc>)
 800b8c4:	6a2a      	ldr	r2, [r5, #32]
 800b8c6:	601a      	str	r2, [r3, #0]
 800b8c8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800b8ca:	1a9b      	subs	r3, r3, r2
 800b8cc:	4a26      	ldr	r2, [pc, #152]	; (800b968 <_tzset_unlocked_r+0x2e4>)
 800b8ce:	bf18      	it	ne
 800b8d0:	2301      	movne	r3, #1
 800b8d2:	6013      	str	r3, [r2, #0]
 800b8d4:	e6f0      	b.n	800b6b8 <_tzset_unlocked_r+0x34>
 800b8d6:	2b2b      	cmp	r3, #43	; 0x2b
 800b8d8:	bf08      	it	eq
 800b8da:	3401      	addeq	r4, #1
 800b8dc:	2701      	movs	r7, #1
 800b8de:	e76b      	b.n	800b7b8 <_tzset_unlocked_r+0x134>
 800b8e0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800b8e4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800b8e8:	213c      	movs	r1, #60	; 0x3c
 800b8ea:	fb01 2203 	mla	r2, r1, r3, r2
 800b8ee:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800b8f2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800b8f6:	fb01 2303 	mla	r3, r1, r3, r2
 800b8fa:	435f      	muls	r7, r3
 800b8fc:	63ef      	str	r7, [r5, #60]	; 0x3c
 800b8fe:	e775      	b.n	800b7ec <_tzset_unlocked_r+0x168>
 800b900:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800b904:	bf06      	itte	eq
 800b906:	3401      	addeq	r4, #1
 800b908:	4643      	moveq	r3, r8
 800b90a:	2344      	movne	r3, #68	; 0x44
 800b90c:	220a      	movs	r2, #10
 800b90e:	a90b      	add	r1, sp, #44	; 0x2c
 800b910:	4620      	mov	r0, r4
 800b912:	9305      	str	r3, [sp, #20]
 800b914:	f003 ff1a 	bl	800f74c <strtoul>
 800b918:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800b91c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800b920:	4544      	cmp	r4, r8
 800b922:	9b05      	ldr	r3, [sp, #20]
 800b924:	d114      	bne.n	800b950 <_tzset_unlocked_r+0x2cc>
 800b926:	234d      	movs	r3, #77	; 0x4d
 800b928:	f1b9 0f00 	cmp.w	r9, #0
 800b92c:	d107      	bne.n	800b93e <_tzset_unlocked_r+0x2ba>
 800b92e:	722b      	strb	r3, [r5, #8]
 800b930:	2303      	movs	r3, #3
 800b932:	60eb      	str	r3, [r5, #12]
 800b934:	2302      	movs	r3, #2
 800b936:	612b      	str	r3, [r5, #16]
 800b938:	f8c5 9014 	str.w	r9, [r5, #20]
 800b93c:	e78e      	b.n	800b85c <_tzset_unlocked_r+0x1d8>
 800b93e:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 800b942:	230b      	movs	r3, #11
 800b944:	62ab      	str	r3, [r5, #40]	; 0x28
 800b946:	2301      	movs	r3, #1
 800b948:	62eb      	str	r3, [r5, #44]	; 0x2c
 800b94a:	2300      	movs	r3, #0
 800b94c:	632b      	str	r3, [r5, #48]	; 0x30
 800b94e:	e785      	b.n	800b85c <_tzset_unlocked_r+0x1d8>
 800b950:	b280      	uxth	r0, r0
 800b952:	723b      	strb	r3, [r7, #8]
 800b954:	6178      	str	r0, [r7, #20]
 800b956:	e781      	b.n	800b85c <_tzset_unlocked_r+0x1d8>
 800b958:	08010f98 	.word	0x08010f98
 800b95c:	2000073c 	.word	0x2000073c
 800b960:	20000744 	.word	0x20000744
 800b964:	08010f9b 	.word	0x08010f9b
 800b968:	20000740 	.word	0x20000740
 800b96c:	20000514 	.word	0x20000514
 800b970:	2000072f 	.word	0x2000072f
 800b974:	08010f9f 	.word	0x08010f9f
 800b978:	08010fc2 	.word	0x08010fc2
 800b97c:	08010fae 	.word	0x08010fae
 800b980:	08010fc1 	.word	0x08010fc1
 800b984:	20000724 	.word	0x20000724

0800b988 <_vfprintf_r>:
 800b988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b98c:	b0bf      	sub	sp, #252	; 0xfc
 800b98e:	460d      	mov	r5, r1
 800b990:	4616      	mov	r6, r2
 800b992:	461c      	mov	r4, r3
 800b994:	461f      	mov	r7, r3
 800b996:	4681      	mov	r9, r0
 800b998:	f002 ffac 	bl	800e8f4 <_localeconv_r>
 800b99c:	6803      	ldr	r3, [r0, #0]
 800b99e:	9311      	str	r3, [sp, #68]	; 0x44
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7f4 fc1f 	bl	80001e4 <strlen>
 800b9a6:	900b      	str	r0, [sp, #44]	; 0x2c
 800b9a8:	f1b9 0f00 	cmp.w	r9, #0
 800b9ac:	d005      	beq.n	800b9ba <_vfprintf_r+0x32>
 800b9ae:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800b9b2:	b913      	cbnz	r3, 800b9ba <_vfprintf_r+0x32>
 800b9b4:	4648      	mov	r0, r9
 800b9b6:	f002 f867 	bl	800da88 <__sinit>
 800b9ba:	4b90      	ldr	r3, [pc, #576]	; (800bbfc <_vfprintf_r+0x274>)
 800b9bc:	429d      	cmp	r5, r3
 800b9be:	d12c      	bne.n	800ba1a <_vfprintf_r+0x92>
 800b9c0:	f8d9 5004 	ldr.w	r5, [r9, #4]
 800b9c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9c6:	07d8      	lsls	r0, r3, #31
 800b9c8:	d405      	bmi.n	800b9d6 <_vfprintf_r+0x4e>
 800b9ca:	89ab      	ldrh	r3, [r5, #12]
 800b9cc:	0599      	lsls	r1, r3, #22
 800b9ce:	d402      	bmi.n	800b9d6 <_vfprintf_r+0x4e>
 800b9d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9d2:	f002 ffa0 	bl	800e916 <__retarget_lock_acquire_recursive>
 800b9d6:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 800b9da:	049a      	lsls	r2, r3, #18
 800b9dc:	d406      	bmi.n	800b9ec <_vfprintf_r+0x64>
 800b9de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b9e2:	81ab      	strh	r3, [r5, #12]
 800b9e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b9ea:	666b      	str	r3, [r5, #100]	; 0x64
 800b9ec:	89ab      	ldrh	r3, [r5, #12]
 800b9ee:	071b      	lsls	r3, r3, #28
 800b9f0:	d501      	bpl.n	800b9f6 <_vfprintf_r+0x6e>
 800b9f2:	692b      	ldr	r3, [r5, #16]
 800b9f4:	b9eb      	cbnz	r3, 800ba32 <_vfprintf_r+0xaa>
 800b9f6:	4629      	mov	r1, r5
 800b9f8:	4648      	mov	r0, r9
 800b9fa:	f001 f83d 	bl	800ca78 <__swsetup_r>
 800b9fe:	b1c0      	cbz	r0, 800ba32 <_vfprintf_r+0xaa>
 800ba00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba02:	07d8      	lsls	r0, r3, #31
 800ba04:	d405      	bmi.n	800ba12 <_vfprintf_r+0x8a>
 800ba06:	89ab      	ldrh	r3, [r5, #12]
 800ba08:	0599      	lsls	r1, r3, #22
 800ba0a:	d402      	bmi.n	800ba12 <_vfprintf_r+0x8a>
 800ba0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba0e:	f002 ff84 	bl	800e91a <__retarget_lock_release_recursive>
 800ba12:	f04f 33ff 	mov.w	r3, #4294967295
 800ba16:	930c      	str	r3, [sp, #48]	; 0x30
 800ba18:	e023      	b.n	800ba62 <_vfprintf_r+0xda>
 800ba1a:	4b79      	ldr	r3, [pc, #484]	; (800bc00 <_vfprintf_r+0x278>)
 800ba1c:	429d      	cmp	r5, r3
 800ba1e:	d102      	bne.n	800ba26 <_vfprintf_r+0x9e>
 800ba20:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800ba24:	e7ce      	b.n	800b9c4 <_vfprintf_r+0x3c>
 800ba26:	4b77      	ldr	r3, [pc, #476]	; (800bc04 <_vfprintf_r+0x27c>)
 800ba28:	429d      	cmp	r5, r3
 800ba2a:	bf08      	it	eq
 800ba2c:	f8d9 500c 	ldreq.w	r5, [r9, #12]
 800ba30:	e7c8      	b.n	800b9c4 <_vfprintf_r+0x3c>
 800ba32:	89ab      	ldrh	r3, [r5, #12]
 800ba34:	f003 021a 	and.w	r2, r3, #26
 800ba38:	2a0a      	cmp	r2, #10
 800ba3a:	d116      	bne.n	800ba6a <_vfprintf_r+0xe2>
 800ba3c:	f9b5 200e 	ldrsh.w	r2, [r5, #14]
 800ba40:	2a00      	cmp	r2, #0
 800ba42:	db12      	blt.n	800ba6a <_vfprintf_r+0xe2>
 800ba44:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 800ba46:	07d2      	lsls	r2, r2, #31
 800ba48:	d404      	bmi.n	800ba54 <_vfprintf_r+0xcc>
 800ba4a:	059f      	lsls	r7, r3, #22
 800ba4c:	d402      	bmi.n	800ba54 <_vfprintf_r+0xcc>
 800ba4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba50:	f002 ff63 	bl	800e91a <__retarget_lock_release_recursive>
 800ba54:	4623      	mov	r3, r4
 800ba56:	4632      	mov	r2, r6
 800ba58:	4629      	mov	r1, r5
 800ba5a:	4648      	mov	r0, r9
 800ba5c:	f000 ffcc 	bl	800c9f8 <__sbprintf>
 800ba60:	900c      	str	r0, [sp, #48]	; 0x30
 800ba62:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ba64:	b03f      	add	sp, #252	; 0xfc
 800ba66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	ac2e      	add	r4, sp, #184	; 0xb8
 800ba6e:	9421      	str	r4, [sp, #132]	; 0x84
 800ba70:	9323      	str	r3, [sp, #140]	; 0x8c
 800ba72:	9322      	str	r3, [sp, #136]	; 0x88
 800ba74:	9609      	str	r6, [sp, #36]	; 0x24
 800ba76:	9307      	str	r3, [sp, #28]
 800ba78:	930e      	str	r3, [sp, #56]	; 0x38
 800ba7a:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba7c:	9315      	str	r3, [sp, #84]	; 0x54
 800ba7e:	9314      	str	r3, [sp, #80]	; 0x50
 800ba80:	930c      	str	r3, [sp, #48]	; 0x30
 800ba82:	9312      	str	r3, [sp, #72]	; 0x48
 800ba84:	9313      	str	r3, [sp, #76]	; 0x4c
 800ba86:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ba88:	4633      	mov	r3, r6
 800ba8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba8e:	b112      	cbz	r2, 800ba96 <_vfprintf_r+0x10e>
 800ba90:	2a25      	cmp	r2, #37	; 0x25
 800ba92:	f040 8084 	bne.w	800bb9e <_vfprintf_r+0x216>
 800ba96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba98:	ebb6 0803 	subs.w	r8, r6, r3
 800ba9c:	d00d      	beq.n	800baba <_vfprintf_r+0x132>
 800ba9e:	e884 0108 	stmia.w	r4, {r3, r8}
 800baa2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800baa4:	4443      	add	r3, r8
 800baa6:	9323      	str	r3, [sp, #140]	; 0x8c
 800baa8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800baaa:	3301      	adds	r3, #1
 800baac:	2b07      	cmp	r3, #7
 800baae:	9322      	str	r3, [sp, #136]	; 0x88
 800bab0:	dc77      	bgt.n	800bba2 <_vfprintf_r+0x21a>
 800bab2:	3408      	adds	r4, #8
 800bab4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bab6:	4443      	add	r3, r8
 800bab8:	930c      	str	r3, [sp, #48]	; 0x30
 800baba:	7833      	ldrb	r3, [r6, #0]
 800babc:	2b00      	cmp	r3, #0
 800babe:	f000 8741 	beq.w	800c944 <_vfprintf_r+0xfbc>
 800bac2:	2300      	movs	r3, #0
 800bac4:	3601      	adds	r6, #1
 800bac6:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800baca:	461a      	mov	r2, r3
 800bacc:	f04f 3bff 	mov.w	fp, #4294967295
 800bad0:	930d      	str	r3, [sp, #52]	; 0x34
 800bad2:	469a      	mov	sl, r3
 800bad4:	200a      	movs	r0, #10
 800bad6:	1c71      	adds	r1, r6, #1
 800bad8:	9109      	str	r1, [sp, #36]	; 0x24
 800bada:	7831      	ldrb	r1, [r6, #0]
 800badc:	9106      	str	r1, [sp, #24]
 800bade:	9906      	ldr	r1, [sp, #24]
 800bae0:	3920      	subs	r1, #32
 800bae2:	2958      	cmp	r1, #88	; 0x58
 800bae4:	f200 8426 	bhi.w	800c334 <_vfprintf_r+0x9ac>
 800bae8:	e8df f011 	tbh	[pc, r1, lsl #1]
 800baec:	042400b0 	.word	0x042400b0
 800baf0:	00b50424 	.word	0x00b50424
 800baf4:	04240424 	.word	0x04240424
 800baf8:	04240424 	.word	0x04240424
 800bafc:	04240424 	.word	0x04240424
 800bb00:	006500b8 	.word	0x006500b8
 800bb04:	00c10424 	.word	0x00c10424
 800bb08:	042400c4 	.word	0x042400c4
 800bb0c:	00e400e1 	.word	0x00e400e1
 800bb10:	00e400e4 	.word	0x00e400e4
 800bb14:	00e400e4 	.word	0x00e400e4
 800bb18:	00e400e4 	.word	0x00e400e4
 800bb1c:	00e400e4 	.word	0x00e400e4
 800bb20:	04240424 	.word	0x04240424
 800bb24:	04240424 	.word	0x04240424
 800bb28:	04240424 	.word	0x04240424
 800bb2c:	04240424 	.word	0x04240424
 800bb30:	04240424 	.word	0x04240424
 800bb34:	012e0118 	.word	0x012e0118
 800bb38:	012e0424 	.word	0x012e0424
 800bb3c:	04240424 	.word	0x04240424
 800bb40:	04240424 	.word	0x04240424
 800bb44:	042400f7 	.word	0x042400f7
 800bb48:	034b0424 	.word	0x034b0424
 800bb4c:	04240424 	.word	0x04240424
 800bb50:	04240424 	.word	0x04240424
 800bb54:	03b20424 	.word	0x03b20424
 800bb58:	04240424 	.word	0x04240424
 800bb5c:	0424008e 	.word	0x0424008e
 800bb60:	04240424 	.word	0x04240424
 800bb64:	04240424 	.word	0x04240424
 800bb68:	04240424 	.word	0x04240424
 800bb6c:	04240424 	.word	0x04240424
 800bb70:	010a0424 	.word	0x010a0424
 800bb74:	012e006b 	.word	0x012e006b
 800bb78:	012e012e 	.word	0x012e012e
 800bb7c:	006b00fa 	.word	0x006b00fa
 800bb80:	04240424 	.word	0x04240424
 800bb84:	042400fd 	.word	0x042400fd
 800bb88:	034d032b 	.word	0x034d032b
 800bb8c:	01040381 	.word	0x01040381
 800bb90:	03920424 	.word	0x03920424
 800bb94:	03b40424 	.word	0x03b40424
 800bb98:	04240424 	.word	0x04240424
 800bb9c:	03ce      	.short	0x03ce
 800bb9e:	461e      	mov	r6, r3
 800bba0:	e772      	b.n	800ba88 <_vfprintf_r+0x100>
 800bba2:	aa21      	add	r2, sp, #132	; 0x84
 800bba4:	4629      	mov	r1, r5
 800bba6:	4648      	mov	r0, r9
 800bba8:	f004 fa41 	bl	801002e <__sprint_r>
 800bbac:	2800      	cmp	r0, #0
 800bbae:	f040 86a5 	bne.w	800c8fc <_vfprintf_r+0xf74>
 800bbb2:	ac2e      	add	r4, sp, #184	; 0xb8
 800bbb4:	e77e      	b.n	800bab4 <_vfprintf_r+0x12c>
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	222b      	movs	r2, #43	; 0x2b
 800bbba:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800bbbc:	e78b      	b.n	800bad6 <_vfprintf_r+0x14e>
 800bbbe:	460f      	mov	r7, r1
 800bbc0:	e7fb      	b.n	800bbba <_vfprintf_r+0x232>
 800bbc2:	b10b      	cbz	r3, 800bbc8 <_vfprintf_r+0x240>
 800bbc4:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800bbc8:	f01a 0f20 	tst.w	sl, #32
 800bbcc:	f000 80ac 	beq.w	800bd28 <_vfprintf_r+0x3a0>
 800bbd0:	3707      	adds	r7, #7
 800bbd2:	f027 0707 	bic.w	r7, r7, #7
 800bbd6:	f107 0308 	add.w	r3, r7, #8
 800bbda:	e9d7 6700 	ldrd	r6, r7, [r7]
 800bbde:	9308      	str	r3, [sp, #32]
 800bbe0:	2e00      	cmp	r6, #0
 800bbe2:	f177 0300 	sbcs.w	r3, r7, #0
 800bbe6:	da06      	bge.n	800bbf6 <_vfprintf_r+0x26e>
 800bbe8:	4276      	negs	r6, r6
 800bbea:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800bbee:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800bbf2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	e2d4      	b.n	800c1a4 <_vfprintf_r+0x81c>
 800bbfa:	bf00      	nop
 800bbfc:	08011058 	.word	0x08011058
 800bc00:	08011078 	.word	0x08011078
 800bc04:	08011038 	.word	0x08011038
 800bc08:	b10b      	cbz	r3, 800bc0e <_vfprintf_r+0x286>
 800bc0a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800bc0e:	4ba3      	ldr	r3, [pc, #652]	; (800be9c <_vfprintf_r+0x514>)
 800bc10:	9315      	str	r3, [sp, #84]	; 0x54
 800bc12:	f01a 0f20 	tst.w	sl, #32
 800bc16:	f000 833c 	beq.w	800c292 <_vfprintf_r+0x90a>
 800bc1a:	3707      	adds	r7, #7
 800bc1c:	f027 0707 	bic.w	r7, r7, #7
 800bc20:	f107 0308 	add.w	r3, r7, #8
 800bc24:	e9d7 6700 	ldrd	r6, r7, [r7]
 800bc28:	9308      	str	r3, [sp, #32]
 800bc2a:	f01a 0f01 	tst.w	sl, #1
 800bc2e:	d00b      	beq.n	800bc48 <_vfprintf_r+0x2c0>
 800bc30:	ea56 0307 	orrs.w	r3, r6, r7
 800bc34:	d008      	beq.n	800bc48 <_vfprintf_r+0x2c0>
 800bc36:	2330      	movs	r3, #48	; 0x30
 800bc38:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 800bc3c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800bc40:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
 800bc44:	f04a 0a02 	orr.w	sl, sl, #2
 800bc48:	2302      	movs	r3, #2
 800bc4a:	e2a8      	b.n	800c19e <_vfprintf_r+0x816>
 800bc4c:	2a00      	cmp	r2, #0
 800bc4e:	d1b4      	bne.n	800bbba <_vfprintf_r+0x232>
 800bc50:	2301      	movs	r3, #1
 800bc52:	2220      	movs	r2, #32
 800bc54:	e7b1      	b.n	800bbba <_vfprintf_r+0x232>
 800bc56:	f04a 0a01 	orr.w	sl, sl, #1
 800bc5a:	e7ae      	b.n	800bbba <_vfprintf_r+0x232>
 800bc5c:	683e      	ldr	r6, [r7, #0]
 800bc5e:	960d      	str	r6, [sp, #52]	; 0x34
 800bc60:	2e00      	cmp	r6, #0
 800bc62:	f107 0104 	add.w	r1, r7, #4
 800bc66:	daaa      	bge.n	800bbbe <_vfprintf_r+0x236>
 800bc68:	4276      	negs	r6, r6
 800bc6a:	960d      	str	r6, [sp, #52]	; 0x34
 800bc6c:	460f      	mov	r7, r1
 800bc6e:	f04a 0a04 	orr.w	sl, sl, #4
 800bc72:	e7a2      	b.n	800bbba <_vfprintf_r+0x232>
 800bc74:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc76:	1c4e      	adds	r6, r1, #1
 800bc78:	7809      	ldrb	r1, [r1, #0]
 800bc7a:	9106      	str	r1, [sp, #24]
 800bc7c:	292a      	cmp	r1, #42	; 0x2a
 800bc7e:	d010      	beq.n	800bca2 <_vfprintf_r+0x31a>
 800bc80:	f04f 0b00 	mov.w	fp, #0
 800bc84:	9609      	str	r6, [sp, #36]	; 0x24
 800bc86:	9906      	ldr	r1, [sp, #24]
 800bc88:	3930      	subs	r1, #48	; 0x30
 800bc8a:	2909      	cmp	r1, #9
 800bc8c:	f63f af27 	bhi.w	800bade <_vfprintf_r+0x156>
 800bc90:	fb00 1b0b 	mla	fp, r0, fp, r1
 800bc94:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc96:	460e      	mov	r6, r1
 800bc98:	f816 1b01 	ldrb.w	r1, [r6], #1
 800bc9c:	9106      	str	r1, [sp, #24]
 800bc9e:	9609      	str	r6, [sp, #36]	; 0x24
 800bca0:	e7f1      	b.n	800bc86 <_vfprintf_r+0x2fe>
 800bca2:	6839      	ldr	r1, [r7, #0]
 800bca4:	9609      	str	r6, [sp, #36]	; 0x24
 800bca6:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
 800bcaa:	3704      	adds	r7, #4
 800bcac:	e785      	b.n	800bbba <_vfprintf_r+0x232>
 800bcae:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800bcb2:	e782      	b.n	800bbba <_vfprintf_r+0x232>
 800bcb4:	2100      	movs	r1, #0
 800bcb6:	910d      	str	r1, [sp, #52]	; 0x34
 800bcb8:	9906      	ldr	r1, [sp, #24]
 800bcba:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800bcbc:	3930      	subs	r1, #48	; 0x30
 800bcbe:	fb00 1106 	mla	r1, r0, r6, r1
 800bcc2:	910d      	str	r1, [sp, #52]	; 0x34
 800bcc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bcc6:	460e      	mov	r6, r1
 800bcc8:	f816 1b01 	ldrb.w	r1, [r6], #1
 800bccc:	9106      	str	r1, [sp, #24]
 800bcce:	9906      	ldr	r1, [sp, #24]
 800bcd0:	9609      	str	r6, [sp, #36]	; 0x24
 800bcd2:	3930      	subs	r1, #48	; 0x30
 800bcd4:	2909      	cmp	r1, #9
 800bcd6:	d9ef      	bls.n	800bcb8 <_vfprintf_r+0x330>
 800bcd8:	e701      	b.n	800bade <_vfprintf_r+0x156>
 800bcda:	f04a 0a08 	orr.w	sl, sl, #8
 800bcde:	e76c      	b.n	800bbba <_vfprintf_r+0x232>
 800bce0:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
 800bce4:	e769      	b.n	800bbba <_vfprintf_r+0x232>
 800bce6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bce8:	7809      	ldrb	r1, [r1, #0]
 800bcea:	296c      	cmp	r1, #108	; 0x6c
 800bcec:	d105      	bne.n	800bcfa <_vfprintf_r+0x372>
 800bcee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bcf0:	3101      	adds	r1, #1
 800bcf2:	9109      	str	r1, [sp, #36]	; 0x24
 800bcf4:	f04a 0a20 	orr.w	sl, sl, #32
 800bcf8:	e75f      	b.n	800bbba <_vfprintf_r+0x232>
 800bcfa:	f04a 0a10 	orr.w	sl, sl, #16
 800bcfe:	e75c      	b.n	800bbba <_vfprintf_r+0x232>
 800bd00:	1d3b      	adds	r3, r7, #4
 800bd02:	9308      	str	r3, [sp, #32]
 800bd04:	2600      	movs	r6, #0
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 800bd0c:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 800bd10:	f04f 0b01 	mov.w	fp, #1
 800bd14:	960a      	str	r6, [sp, #40]	; 0x28
 800bd16:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 800bd1a:	e11f      	b.n	800bf5c <_vfprintf_r+0x5d4>
 800bd1c:	b10b      	cbz	r3, 800bd22 <_vfprintf_r+0x39a>
 800bd1e:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800bd22:	f04a 0a10 	orr.w	sl, sl, #16
 800bd26:	e74f      	b.n	800bbc8 <_vfprintf_r+0x240>
 800bd28:	f01a 0f10 	tst.w	sl, #16
 800bd2c:	f107 0304 	add.w	r3, r7, #4
 800bd30:	d003      	beq.n	800bd3a <_vfprintf_r+0x3b2>
 800bd32:	683e      	ldr	r6, [r7, #0]
 800bd34:	9308      	str	r3, [sp, #32]
 800bd36:	17f7      	asrs	r7, r6, #31
 800bd38:	e752      	b.n	800bbe0 <_vfprintf_r+0x258>
 800bd3a:	683e      	ldr	r6, [r7, #0]
 800bd3c:	9308      	str	r3, [sp, #32]
 800bd3e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800bd42:	bf18      	it	ne
 800bd44:	b236      	sxthne	r6, r6
 800bd46:	e7f6      	b.n	800bd36 <_vfprintf_r+0x3ae>
 800bd48:	b10b      	cbz	r3, 800bd4e <_vfprintf_r+0x3c6>
 800bd4a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800bd4e:	3707      	adds	r7, #7
 800bd50:	f027 0707 	bic.w	r7, r7, #7
 800bd54:	f107 0308 	add.w	r3, r7, #8
 800bd58:	9308      	str	r3, [sp, #32]
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	930e      	str	r3, [sp, #56]	; 0x38
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd64:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800bd66:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 800bd6a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd6e:	4b4c      	ldr	r3, [pc, #304]	; (800bea0 <_vfprintf_r+0x518>)
 800bd70:	4638      	mov	r0, r7
 800bd72:	4631      	mov	r1, r6
 800bd74:	f7f4 fee6 	bl	8000b44 <__aeabi_dcmpun>
 800bd78:	2800      	cmp	r0, #0
 800bd7a:	f040 85f0 	bne.w	800c95e <_vfprintf_r+0xfd6>
 800bd7e:	f04f 32ff 	mov.w	r2, #4294967295
 800bd82:	4b47      	ldr	r3, [pc, #284]	; (800bea0 <_vfprintf_r+0x518>)
 800bd84:	4638      	mov	r0, r7
 800bd86:	4631      	mov	r1, r6
 800bd88:	f7f4 febe 	bl	8000b08 <__aeabi_dcmple>
 800bd8c:	2800      	cmp	r0, #0
 800bd8e:	f040 85e6 	bne.w	800c95e <_vfprintf_r+0xfd6>
 800bd92:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bd94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bd96:	980e      	ldr	r0, [sp, #56]	; 0x38
 800bd98:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bd9a:	f7f4 feab 	bl	8000af4 <__aeabi_dcmplt>
 800bd9e:	b110      	cbz	r0, 800bda6 <_vfprintf_r+0x41e>
 800bda0:	232d      	movs	r3, #45	; 0x2d
 800bda2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800bda6:	4b3f      	ldr	r3, [pc, #252]	; (800bea4 <_vfprintf_r+0x51c>)
 800bda8:	4a3f      	ldr	r2, [pc, #252]	; (800bea8 <_vfprintf_r+0x520>)
 800bdaa:	9906      	ldr	r1, [sp, #24]
 800bdac:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 800bdb0:	2947      	cmp	r1, #71	; 0x47
 800bdb2:	bfcc      	ite	gt
 800bdb4:	4690      	movgt	r8, r2
 800bdb6:	4698      	movle	r8, r3
 800bdb8:	f04f 0b03 	mov.w	fp, #3
 800bdbc:	2600      	movs	r6, #0
 800bdbe:	960a      	str	r6, [sp, #40]	; 0x28
 800bdc0:	e0cc      	b.n	800bf5c <_vfprintf_r+0x5d4>
 800bdc2:	f1bb 3fff 	cmp.w	fp, #4294967295
 800bdc6:	d026      	beq.n	800be16 <_vfprintf_r+0x48e>
 800bdc8:	9b06      	ldr	r3, [sp, #24]
 800bdca:	f023 0320 	bic.w	r3, r3, #32
 800bdce:	2b47      	cmp	r3, #71	; 0x47
 800bdd0:	d104      	bne.n	800bddc <_vfprintf_r+0x454>
 800bdd2:	f1bb 0f00 	cmp.w	fp, #0
 800bdd6:	bf08      	it	eq
 800bdd8:	f04f 0b01 	moveq.w	fp, #1
 800bddc:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 800bde0:	9317      	str	r3, [sp, #92]	; 0x5c
 800bde2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bde4:	1e1f      	subs	r7, r3, #0
 800bde6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bde8:	930a      	str	r3, [sp, #40]	; 0x28
 800bdea:	bfbd      	ittte	lt
 800bdec:	463b      	movlt	r3, r7
 800bdee:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800bdf2:	9310      	strlt	r3, [sp, #64]	; 0x40
 800bdf4:	2300      	movge	r3, #0
 800bdf6:	bfb8      	it	lt
 800bdf8:	232d      	movlt	r3, #45	; 0x2d
 800bdfa:	9316      	str	r3, [sp, #88]	; 0x58
 800bdfc:	9b06      	ldr	r3, [sp, #24]
 800bdfe:	bfa8      	it	ge
 800be00:	9710      	strge	r7, [sp, #64]	; 0x40
 800be02:	f023 0720 	bic.w	r7, r3, #32
 800be06:	2f46      	cmp	r7, #70	; 0x46
 800be08:	d008      	beq.n	800be1c <_vfprintf_r+0x494>
 800be0a:	2f45      	cmp	r7, #69	; 0x45
 800be0c:	d143      	bne.n	800be96 <_vfprintf_r+0x50e>
 800be0e:	f10b 0601 	add.w	r6, fp, #1
 800be12:	2302      	movs	r3, #2
 800be14:	e004      	b.n	800be20 <_vfprintf_r+0x498>
 800be16:	f04f 0b06 	mov.w	fp, #6
 800be1a:	e7df      	b.n	800bddc <_vfprintf_r+0x454>
 800be1c:	465e      	mov	r6, fp
 800be1e:	2303      	movs	r3, #3
 800be20:	aa1f      	add	r2, sp, #124	; 0x7c
 800be22:	9204      	str	r2, [sp, #16]
 800be24:	aa1c      	add	r2, sp, #112	; 0x70
 800be26:	9203      	str	r2, [sp, #12]
 800be28:	aa1b      	add	r2, sp, #108	; 0x6c
 800be2a:	9202      	str	r2, [sp, #8]
 800be2c:	e88d 0048 	stmia.w	sp, {r3, r6}
 800be30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be34:	4648      	mov	r0, r9
 800be36:	f000 ff2f 	bl	800cc98 <_dtoa_r>
 800be3a:	2f47      	cmp	r7, #71	; 0x47
 800be3c:	4680      	mov	r8, r0
 800be3e:	d103      	bne.n	800be48 <_vfprintf_r+0x4c0>
 800be40:	f01a 0f01 	tst.w	sl, #1
 800be44:	f000 8598 	beq.w	800c978 <_vfprintf_r+0xff0>
 800be48:	eb08 0306 	add.w	r3, r8, r6
 800be4c:	2f46      	cmp	r7, #70	; 0x46
 800be4e:	9307      	str	r3, [sp, #28]
 800be50:	d111      	bne.n	800be76 <_vfprintf_r+0x4ee>
 800be52:	f898 3000 	ldrb.w	r3, [r8]
 800be56:	2b30      	cmp	r3, #48	; 0x30
 800be58:	d109      	bne.n	800be6e <_vfprintf_r+0x4e6>
 800be5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800be5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800be5e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800be60:	9910      	ldr	r1, [sp, #64]	; 0x40
 800be62:	f7f4 fe3d 	bl	8000ae0 <__aeabi_dcmpeq>
 800be66:	b910      	cbnz	r0, 800be6e <_vfprintf_r+0x4e6>
 800be68:	f1c6 0601 	rsb	r6, r6, #1
 800be6c:	961b      	str	r6, [sp, #108]	; 0x6c
 800be6e:	9a07      	ldr	r2, [sp, #28]
 800be70:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800be72:	441a      	add	r2, r3
 800be74:	9207      	str	r2, [sp, #28]
 800be76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800be78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800be7a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800be7c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800be7e:	f7f4 fe2f 	bl	8000ae0 <__aeabi_dcmpeq>
 800be82:	b998      	cbnz	r0, 800beac <_vfprintf_r+0x524>
 800be84:	2230      	movs	r2, #48	; 0x30
 800be86:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800be88:	9907      	ldr	r1, [sp, #28]
 800be8a:	4299      	cmp	r1, r3
 800be8c:	d910      	bls.n	800beb0 <_vfprintf_r+0x528>
 800be8e:	1c59      	adds	r1, r3, #1
 800be90:	911f      	str	r1, [sp, #124]	; 0x7c
 800be92:	701a      	strb	r2, [r3, #0]
 800be94:	e7f7      	b.n	800be86 <_vfprintf_r+0x4fe>
 800be96:	465e      	mov	r6, fp
 800be98:	e7bb      	b.n	800be12 <_vfprintf_r+0x48a>
 800be9a:	bf00      	nop
 800be9c:	08010fe4 	.word	0x08010fe4
 800bea0:	7fefffff 	.word	0x7fefffff
 800bea4:	08010fd4 	.word	0x08010fd4
 800bea8:	08010fd8 	.word	0x08010fd8
 800beac:	9b07      	ldr	r3, [sp, #28]
 800beae:	931f      	str	r3, [sp, #124]	; 0x7c
 800beb0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800beb2:	2f47      	cmp	r7, #71	; 0x47
 800beb4:	eba3 0308 	sub.w	r3, r3, r8
 800beb8:	9307      	str	r3, [sp, #28]
 800beba:	f040 80fb 	bne.w	800c0b4 <_vfprintf_r+0x72c>
 800bebe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bec0:	1cde      	adds	r6, r3, #3
 800bec2:	db02      	blt.n	800beca <_vfprintf_r+0x542>
 800bec4:	459b      	cmp	fp, r3
 800bec6:	f280 8124 	bge.w	800c112 <_vfprintf_r+0x78a>
 800beca:	9b06      	ldr	r3, [sp, #24]
 800becc:	3b02      	subs	r3, #2
 800bece:	9306      	str	r3, [sp, #24]
 800bed0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800bed2:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800bed6:	f88d 1074 	strb.w	r1, [sp, #116]	; 0x74
 800beda:	1e53      	subs	r3, r2, #1
 800bedc:	2b00      	cmp	r3, #0
 800bede:	931b      	str	r3, [sp, #108]	; 0x6c
 800bee0:	bfb6      	itet	lt
 800bee2:	f1c2 0301 	rsblt	r3, r2, #1
 800bee6:	222b      	movge	r2, #43	; 0x2b
 800bee8:	222d      	movlt	r2, #45	; 0x2d
 800beea:	2b09      	cmp	r3, #9
 800beec:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 800bef0:	f340 80fe 	ble.w	800c0f0 <_vfprintf_r+0x768>
 800bef4:	f10d 0283 	add.w	r2, sp, #131	; 0x83
 800bef8:	260a      	movs	r6, #10
 800befa:	fb93 f0f6 	sdiv	r0, r3, r6
 800befe:	fb06 3310 	mls	r3, r6, r0, r3
 800bf02:	3330      	adds	r3, #48	; 0x30
 800bf04:	2809      	cmp	r0, #9
 800bf06:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bf0a:	f102 31ff 	add.w	r1, r2, #4294967295
 800bf0e:	4603      	mov	r3, r0
 800bf10:	f300 80e7 	bgt.w	800c0e2 <_vfprintf_r+0x75a>
 800bf14:	3330      	adds	r3, #48	; 0x30
 800bf16:	f801 3c01 	strb.w	r3, [r1, #-1]
 800bf1a:	3a02      	subs	r2, #2
 800bf1c:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 800bf20:	f10d 0083 	add.w	r0, sp, #131	; 0x83
 800bf24:	4282      	cmp	r2, r0
 800bf26:	4619      	mov	r1, r3
 800bf28:	f0c0 80dd 	bcc.w	800c0e6 <_vfprintf_r+0x75e>
 800bf2c:	9a07      	ldr	r2, [sp, #28]
 800bf2e:	ab1d      	add	r3, sp, #116	; 0x74
 800bf30:	1acb      	subs	r3, r1, r3
 800bf32:	2a01      	cmp	r2, #1
 800bf34:	9314      	str	r3, [sp, #80]	; 0x50
 800bf36:	eb03 0b02 	add.w	fp, r3, r2
 800bf3a:	dc03      	bgt.n	800bf44 <_vfprintf_r+0x5bc>
 800bf3c:	f01a 0301 	ands.w	r3, sl, #1
 800bf40:	930a      	str	r3, [sp, #40]	; 0x28
 800bf42:	d003      	beq.n	800bf4c <_vfprintf_r+0x5c4>
 800bf44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf46:	449b      	add	fp, r3
 800bf48:	2300      	movs	r3, #0
 800bf4a:	930a      	str	r3, [sp, #40]	; 0x28
 800bf4c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bf4e:	b113      	cbz	r3, 800bf56 <_vfprintf_r+0x5ce>
 800bf50:	232d      	movs	r3, #45	; 0x2d
 800bf52:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800bf56:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 800bf5a:	2600      	movs	r6, #0
 800bf5c:	455e      	cmp	r6, fp
 800bf5e:	4633      	mov	r3, r6
 800bf60:	bfb8      	it	lt
 800bf62:	465b      	movlt	r3, fp
 800bf64:	9310      	str	r3, [sp, #64]	; 0x40
 800bf66:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 800bf6a:	b113      	cbz	r3, 800bf72 <_vfprintf_r+0x5ea>
 800bf6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf6e:	3301      	adds	r3, #1
 800bf70:	9310      	str	r3, [sp, #64]	; 0x40
 800bf72:	f01a 0302 	ands.w	r3, sl, #2
 800bf76:	9316      	str	r3, [sp, #88]	; 0x58
 800bf78:	bf1e      	ittt	ne
 800bf7a:	9b10      	ldrne	r3, [sp, #64]	; 0x40
 800bf7c:	3302      	addne	r3, #2
 800bf7e:	9310      	strne	r3, [sp, #64]	; 0x40
 800bf80:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800bf84:	9317      	str	r3, [sp, #92]	; 0x5c
 800bf86:	d114      	bne.n	800bfb2 <_vfprintf_r+0x62a>
 800bf88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf8a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bf8c:	1a9f      	subs	r7, r3, r2
 800bf8e:	2f00      	cmp	r7, #0
 800bf90:	dd0f      	ble.n	800bfb2 <_vfprintf_r+0x62a>
 800bf92:	4bac      	ldr	r3, [pc, #688]	; (800c244 <_vfprintf_r+0x8bc>)
 800bf94:	6023      	str	r3, [r4, #0]
 800bf96:	2f10      	cmp	r7, #16
 800bf98:	f300 81de 	bgt.w	800c358 <_vfprintf_r+0x9d0>
 800bf9c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bf9e:	6067      	str	r7, [r4, #4]
 800bfa0:	441f      	add	r7, r3
 800bfa2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bfa4:	9723      	str	r7, [sp, #140]	; 0x8c
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	2b07      	cmp	r3, #7
 800bfaa:	9322      	str	r3, [sp, #136]	; 0x88
 800bfac:	f300 81eb 	bgt.w	800c386 <_vfprintf_r+0x9fe>
 800bfb0:	3408      	adds	r4, #8
 800bfb2:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 800bfb6:	b173      	cbz	r3, 800bfd6 <_vfprintf_r+0x64e>
 800bfb8:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 800bfbc:	6023      	str	r3, [r4, #0]
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	6063      	str	r3, [r4, #4]
 800bfc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bfc4:	3301      	adds	r3, #1
 800bfc6:	9323      	str	r3, [sp, #140]	; 0x8c
 800bfc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bfca:	3301      	adds	r3, #1
 800bfcc:	2b07      	cmp	r3, #7
 800bfce:	9322      	str	r3, [sp, #136]	; 0x88
 800bfd0:	f300 81e3 	bgt.w	800c39a <_vfprintf_r+0xa12>
 800bfd4:	3408      	adds	r4, #8
 800bfd6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bfd8:	b16b      	cbz	r3, 800bff6 <_vfprintf_r+0x66e>
 800bfda:	ab1a      	add	r3, sp, #104	; 0x68
 800bfdc:	6023      	str	r3, [r4, #0]
 800bfde:	2302      	movs	r3, #2
 800bfe0:	6063      	str	r3, [r4, #4]
 800bfe2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bfe4:	3302      	adds	r3, #2
 800bfe6:	9323      	str	r3, [sp, #140]	; 0x8c
 800bfe8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bfea:	3301      	adds	r3, #1
 800bfec:	2b07      	cmp	r3, #7
 800bfee:	9322      	str	r3, [sp, #136]	; 0x88
 800bff0:	f300 81dd 	bgt.w	800c3ae <_vfprintf_r+0xa26>
 800bff4:	3408      	adds	r4, #8
 800bff6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bff8:	2b80      	cmp	r3, #128	; 0x80
 800bffa:	d114      	bne.n	800c026 <_vfprintf_r+0x69e>
 800bffc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bffe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c000:	1a9f      	subs	r7, r3, r2
 800c002:	2f00      	cmp	r7, #0
 800c004:	dd0f      	ble.n	800c026 <_vfprintf_r+0x69e>
 800c006:	4b90      	ldr	r3, [pc, #576]	; (800c248 <_vfprintf_r+0x8c0>)
 800c008:	6023      	str	r3, [r4, #0]
 800c00a:	2f10      	cmp	r7, #16
 800c00c:	f300 81d9 	bgt.w	800c3c2 <_vfprintf_r+0xa3a>
 800c010:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c012:	6067      	str	r7, [r4, #4]
 800c014:	441f      	add	r7, r3
 800c016:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c018:	9723      	str	r7, [sp, #140]	; 0x8c
 800c01a:	3301      	adds	r3, #1
 800c01c:	2b07      	cmp	r3, #7
 800c01e:	9322      	str	r3, [sp, #136]	; 0x88
 800c020:	f300 81e6 	bgt.w	800c3f0 <_vfprintf_r+0xa68>
 800c024:	3408      	adds	r4, #8
 800c026:	eba6 060b 	sub.w	r6, r6, fp
 800c02a:	2e00      	cmp	r6, #0
 800c02c:	dd0f      	ble.n	800c04e <_vfprintf_r+0x6c6>
 800c02e:	4f86      	ldr	r7, [pc, #536]	; (800c248 <_vfprintf_r+0x8c0>)
 800c030:	6027      	str	r7, [r4, #0]
 800c032:	2e10      	cmp	r6, #16
 800c034:	f300 81e6 	bgt.w	800c404 <_vfprintf_r+0xa7c>
 800c038:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c03a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800c03c:	6066      	str	r6, [r4, #4]
 800c03e:	3301      	adds	r3, #1
 800c040:	4406      	add	r6, r0
 800c042:	2b07      	cmp	r3, #7
 800c044:	9623      	str	r6, [sp, #140]	; 0x8c
 800c046:	9322      	str	r3, [sp, #136]	; 0x88
 800c048:	f300 81f3 	bgt.w	800c432 <_vfprintf_r+0xaaa>
 800c04c:	3408      	adds	r4, #8
 800c04e:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c052:	f040 81f8 	bne.w	800c446 <_vfprintf_r+0xabe>
 800c056:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c058:	e884 0900 	stmia.w	r4, {r8, fp}
 800c05c:	445b      	add	r3, fp
 800c05e:	9323      	str	r3, [sp, #140]	; 0x8c
 800c060:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c062:	3301      	adds	r3, #1
 800c064:	2b07      	cmp	r3, #7
 800c066:	9322      	str	r3, [sp, #136]	; 0x88
 800c068:	f340 8428 	ble.w	800c8bc <_vfprintf_r+0xf34>
 800c06c:	aa21      	add	r2, sp, #132	; 0x84
 800c06e:	4629      	mov	r1, r5
 800c070:	4648      	mov	r0, r9
 800c072:	f003 ffdc 	bl	801002e <__sprint_r>
 800c076:	2800      	cmp	r0, #0
 800c078:	f040 8440 	bne.w	800c8fc <_vfprintf_r+0xf74>
 800c07c:	ac2e      	add	r4, sp, #184	; 0xb8
 800c07e:	f01a 0f04 	tst.w	sl, #4
 800c082:	f040 841e 	bne.w	800c8c2 <_vfprintf_r+0xf3a>
 800c086:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c088:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c08a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c08c:	428a      	cmp	r2, r1
 800c08e:	bfac      	ite	ge
 800c090:	189b      	addge	r3, r3, r2
 800c092:	185b      	addlt	r3, r3, r1
 800c094:	930c      	str	r3, [sp, #48]	; 0x30
 800c096:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c098:	b13b      	cbz	r3, 800c0aa <_vfprintf_r+0x722>
 800c09a:	aa21      	add	r2, sp, #132	; 0x84
 800c09c:	4629      	mov	r1, r5
 800c09e:	4648      	mov	r0, r9
 800c0a0:	f003 ffc5 	bl	801002e <__sprint_r>
 800c0a4:	2800      	cmp	r0, #0
 800c0a6:	f040 8429 	bne.w	800c8fc <_vfprintf_r+0xf74>
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	9322      	str	r3, [sp, #136]	; 0x88
 800c0ae:	9f08      	ldr	r7, [sp, #32]
 800c0b0:	ac2e      	add	r4, sp, #184	; 0xb8
 800c0b2:	e4e8      	b.n	800ba86 <_vfprintf_r+0xfe>
 800c0b4:	9b06      	ldr	r3, [sp, #24]
 800c0b6:	2b65      	cmp	r3, #101	; 0x65
 800c0b8:	f77f af0a 	ble.w	800bed0 <_vfprintf_r+0x548>
 800c0bc:	9b06      	ldr	r3, [sp, #24]
 800c0be:	2b66      	cmp	r3, #102	; 0x66
 800c0c0:	d127      	bne.n	800c112 <_vfprintf_r+0x78a>
 800c0c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	dd1b      	ble.n	800c100 <_vfprintf_r+0x778>
 800c0c8:	f1bb 0f00 	cmp.w	fp, #0
 800c0cc:	d102      	bne.n	800c0d4 <_vfprintf_r+0x74c>
 800c0ce:	f01a 0f01 	tst.w	sl, #1
 800c0d2:	d002      	beq.n	800c0da <_vfprintf_r+0x752>
 800c0d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c0d6:	4413      	add	r3, r2
 800c0d8:	445b      	add	r3, fp
 800c0da:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c0dc:	920a      	str	r2, [sp, #40]	; 0x28
 800c0de:	469b      	mov	fp, r3
 800c0e0:	e734      	b.n	800bf4c <_vfprintf_r+0x5c4>
 800c0e2:	460a      	mov	r2, r1
 800c0e4:	e709      	b.n	800befa <_vfprintf_r+0x572>
 800c0e6:	f812 1b01 	ldrb.w	r1, [r2], #1
 800c0ea:	f803 1b01 	strb.w	r1, [r3], #1
 800c0ee:	e719      	b.n	800bf24 <_vfprintf_r+0x59c>
 800c0f0:	2230      	movs	r2, #48	; 0x30
 800c0f2:	4413      	add	r3, r2
 800c0f4:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 800c0f8:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 800c0fc:	a91e      	add	r1, sp, #120	; 0x78
 800c0fe:	e715      	b.n	800bf2c <_vfprintf_r+0x5a4>
 800c100:	f1bb 0f00 	cmp.w	fp, #0
 800c104:	d102      	bne.n	800c10c <_vfprintf_r+0x784>
 800c106:	f01a 0f01 	tst.w	sl, #1
 800c10a:	d016      	beq.n	800c13a <_vfprintf_r+0x7b2>
 800c10c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c10e:	3301      	adds	r3, #1
 800c110:	e7e2      	b.n	800c0d8 <_vfprintf_r+0x750>
 800c112:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c114:	9b07      	ldr	r3, [sp, #28]
 800c116:	429a      	cmp	r2, r3
 800c118:	db07      	blt.n	800c12a <_vfprintf_r+0x7a2>
 800c11a:	f01a 0f01 	tst.w	sl, #1
 800c11e:	d00e      	beq.n	800c13e <_vfprintf_r+0x7b6>
 800c120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c122:	4413      	add	r3, r2
 800c124:	2267      	movs	r2, #103	; 0x67
 800c126:	9206      	str	r2, [sp, #24]
 800c128:	e7d7      	b.n	800c0da <_vfprintf_r+0x752>
 800c12a:	9b07      	ldr	r3, [sp, #28]
 800c12c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c12e:	2a00      	cmp	r2, #0
 800c130:	440b      	add	r3, r1
 800c132:	dcf7      	bgt.n	800c124 <_vfprintf_r+0x79c>
 800c134:	f1c2 0201 	rsb	r2, r2, #1
 800c138:	e7f3      	b.n	800c122 <_vfprintf_r+0x79a>
 800c13a:	2301      	movs	r3, #1
 800c13c:	e7cd      	b.n	800c0da <_vfprintf_r+0x752>
 800c13e:	4613      	mov	r3, r2
 800c140:	e7f0      	b.n	800c124 <_vfprintf_r+0x79c>
 800c142:	b10b      	cbz	r3, 800c148 <_vfprintf_r+0x7c0>
 800c144:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800c148:	f01a 0f20 	tst.w	sl, #32
 800c14c:	f107 0304 	add.w	r3, r7, #4
 800c150:	d008      	beq.n	800c164 <_vfprintf_r+0x7dc>
 800c152:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c154:	683a      	ldr	r2, [r7, #0]
 800c156:	17cf      	asrs	r7, r1, #31
 800c158:	4608      	mov	r0, r1
 800c15a:	4639      	mov	r1, r7
 800c15c:	e9c2 0100 	strd	r0, r1, [r2]
 800c160:	461f      	mov	r7, r3
 800c162:	e490      	b.n	800ba86 <_vfprintf_r+0xfe>
 800c164:	f01a 0f10 	tst.w	sl, #16
 800c168:	d003      	beq.n	800c172 <_vfprintf_r+0x7ea>
 800c16a:	683a      	ldr	r2, [r7, #0]
 800c16c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c16e:	6011      	str	r1, [r2, #0]
 800c170:	e7f6      	b.n	800c160 <_vfprintf_r+0x7d8>
 800c172:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800c176:	d0f8      	beq.n	800c16a <_vfprintf_r+0x7e2>
 800c178:	683a      	ldr	r2, [r7, #0]
 800c17a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 800c17e:	8011      	strh	r1, [r2, #0]
 800c180:	e7ee      	b.n	800c160 <_vfprintf_r+0x7d8>
 800c182:	f04a 0a10 	orr.w	sl, sl, #16
 800c186:	f01a 0320 	ands.w	r3, sl, #32
 800c18a:	d022      	beq.n	800c1d2 <_vfprintf_r+0x84a>
 800c18c:	3707      	adds	r7, #7
 800c18e:	f027 0707 	bic.w	r7, r7, #7
 800c192:	f107 0308 	add.w	r3, r7, #8
 800c196:	e9d7 6700 	ldrd	r6, r7, [r7]
 800c19a:	9308      	str	r3, [sp, #32]
 800c19c:	2300      	movs	r3, #0
 800c19e:	2200      	movs	r2, #0
 800c1a0:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800c1a4:	f1bb 3fff 	cmp.w	fp, #4294967295
 800c1a8:	f000 83eb 	beq.w	800c982 <_vfprintf_r+0xffa>
 800c1ac:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800c1b0:	920a      	str	r2, [sp, #40]	; 0x28
 800c1b2:	ea56 0207 	orrs.w	r2, r6, r7
 800c1b6:	f040 83ea 	bne.w	800c98e <_vfprintf_r+0x1006>
 800c1ba:	f1bb 0f00 	cmp.w	fp, #0
 800c1be:	f000 80ac 	beq.w	800c31a <_vfprintf_r+0x992>
 800c1c2:	2b01      	cmp	r3, #1
 800c1c4:	d078      	beq.n	800c2b8 <_vfprintf_r+0x930>
 800c1c6:	2b02      	cmp	r3, #2
 800c1c8:	f000 8093 	beq.w	800c2f2 <_vfprintf_r+0x96a>
 800c1cc:	2600      	movs	r6, #0
 800c1ce:	2700      	movs	r7, #0
 800c1d0:	e3e3      	b.n	800c99a <_vfprintf_r+0x1012>
 800c1d2:	1d3a      	adds	r2, r7, #4
 800c1d4:	f01a 0110 	ands.w	r1, sl, #16
 800c1d8:	9208      	str	r2, [sp, #32]
 800c1da:	d002      	beq.n	800c1e2 <_vfprintf_r+0x85a>
 800c1dc:	683e      	ldr	r6, [r7, #0]
 800c1de:	2700      	movs	r7, #0
 800c1e0:	e7dd      	b.n	800c19e <_vfprintf_r+0x816>
 800c1e2:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800c1e6:	d0f9      	beq.n	800c1dc <_vfprintf_r+0x854>
 800c1e8:	883e      	ldrh	r6, [r7, #0]
 800c1ea:	2700      	movs	r7, #0
 800c1ec:	e7d6      	b.n	800c19c <_vfprintf_r+0x814>
 800c1ee:	1d3b      	adds	r3, r7, #4
 800c1f0:	9308      	str	r3, [sp, #32]
 800c1f2:	2330      	movs	r3, #48	; 0x30
 800c1f4:	2278      	movs	r2, #120	; 0x78
 800c1f6:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 800c1fa:	4b14      	ldr	r3, [pc, #80]	; (800c24c <_vfprintf_r+0x8c4>)
 800c1fc:	683e      	ldr	r6, [r7, #0]
 800c1fe:	9315      	str	r3, [sp, #84]	; 0x54
 800c200:	2700      	movs	r7, #0
 800c202:	f04a 0a02 	orr.w	sl, sl, #2
 800c206:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 800c20a:	2302      	movs	r3, #2
 800c20c:	9206      	str	r2, [sp, #24]
 800c20e:	e7c6      	b.n	800c19e <_vfprintf_r+0x816>
 800c210:	1d3b      	adds	r3, r7, #4
 800c212:	2600      	movs	r6, #0
 800c214:	f1bb 3fff 	cmp.w	fp, #4294967295
 800c218:	9308      	str	r3, [sp, #32]
 800c21a:	f8d7 8000 	ldr.w	r8, [r7]
 800c21e:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 800c222:	d00a      	beq.n	800c23a <_vfprintf_r+0x8b2>
 800c224:	465a      	mov	r2, fp
 800c226:	4631      	mov	r1, r6
 800c228:	4640      	mov	r0, r8
 800c22a:	f7f3 ffe9 	bl	8000200 <memchr>
 800c22e:	2800      	cmp	r0, #0
 800c230:	f000 8090 	beq.w	800c354 <_vfprintf_r+0x9cc>
 800c234:	eba0 0b08 	sub.w	fp, r0, r8
 800c238:	e5c1      	b.n	800bdbe <_vfprintf_r+0x436>
 800c23a:	4640      	mov	r0, r8
 800c23c:	f7f3 ffd2 	bl	80001e4 <strlen>
 800c240:	4683      	mov	fp, r0
 800c242:	e5bc      	b.n	800bdbe <_vfprintf_r+0x436>
 800c244:	08011008 	.word	0x08011008
 800c248:	08011018 	.word	0x08011018
 800c24c:	08010ff5 	.word	0x08010ff5
 800c250:	f04a 0a10 	orr.w	sl, sl, #16
 800c254:	f01a 0f20 	tst.w	sl, #32
 800c258:	d009      	beq.n	800c26e <_vfprintf_r+0x8e6>
 800c25a:	3707      	adds	r7, #7
 800c25c:	f027 0707 	bic.w	r7, r7, #7
 800c260:	f107 0308 	add.w	r3, r7, #8
 800c264:	e9d7 6700 	ldrd	r6, r7, [r7]
 800c268:	9308      	str	r3, [sp, #32]
 800c26a:	2301      	movs	r3, #1
 800c26c:	e797      	b.n	800c19e <_vfprintf_r+0x816>
 800c26e:	1d3b      	adds	r3, r7, #4
 800c270:	f01a 0f10 	tst.w	sl, #16
 800c274:	9308      	str	r3, [sp, #32]
 800c276:	d001      	beq.n	800c27c <_vfprintf_r+0x8f4>
 800c278:	683e      	ldr	r6, [r7, #0]
 800c27a:	e003      	b.n	800c284 <_vfprintf_r+0x8fc>
 800c27c:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800c280:	d0fa      	beq.n	800c278 <_vfprintf_r+0x8f0>
 800c282:	883e      	ldrh	r6, [r7, #0]
 800c284:	2700      	movs	r7, #0
 800c286:	e7f0      	b.n	800c26a <_vfprintf_r+0x8e2>
 800c288:	b10b      	cbz	r3, 800c28e <_vfprintf_r+0x906>
 800c28a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800c28e:	4ba3      	ldr	r3, [pc, #652]	; (800c51c <_vfprintf_r+0xb94>)
 800c290:	e4be      	b.n	800bc10 <_vfprintf_r+0x288>
 800c292:	1d3b      	adds	r3, r7, #4
 800c294:	f01a 0f10 	tst.w	sl, #16
 800c298:	9308      	str	r3, [sp, #32]
 800c29a:	d001      	beq.n	800c2a0 <_vfprintf_r+0x918>
 800c29c:	683e      	ldr	r6, [r7, #0]
 800c29e:	e003      	b.n	800c2a8 <_vfprintf_r+0x920>
 800c2a0:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800c2a4:	d0fa      	beq.n	800c29c <_vfprintf_r+0x914>
 800c2a6:	883e      	ldrh	r6, [r7, #0]
 800c2a8:	2700      	movs	r7, #0
 800c2aa:	e4be      	b.n	800bc2a <_vfprintf_r+0x2a2>
 800c2ac:	4643      	mov	r3, r8
 800c2ae:	e375      	b.n	800c99c <_vfprintf_r+0x1014>
 800c2b0:	2f00      	cmp	r7, #0
 800c2b2:	bf08      	it	eq
 800c2b4:	2e0a      	cmpeq	r6, #10
 800c2b6:	d205      	bcs.n	800c2c4 <_vfprintf_r+0x93c>
 800c2b8:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 800c2bc:	3630      	adds	r6, #48	; 0x30
 800c2be:	f808 6d41 	strb.w	r6, [r8, #-65]!
 800c2c2:	e386      	b.n	800c9d2 <_vfprintf_r+0x104a>
 800c2c4:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 800c2c8:	4630      	mov	r0, r6
 800c2ca:	4639      	mov	r1, r7
 800c2cc:	220a      	movs	r2, #10
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	f7f4 fce6 	bl	8000ca0 <__aeabi_uldivmod>
 800c2d4:	3230      	adds	r2, #48	; 0x30
 800c2d6:	f808 2d01 	strb.w	r2, [r8, #-1]!
 800c2da:	2300      	movs	r3, #0
 800c2dc:	4630      	mov	r0, r6
 800c2de:	4639      	mov	r1, r7
 800c2e0:	220a      	movs	r2, #10
 800c2e2:	f7f4 fcdd 	bl	8000ca0 <__aeabi_uldivmod>
 800c2e6:	4606      	mov	r6, r0
 800c2e8:	460f      	mov	r7, r1
 800c2ea:	ea56 0307 	orrs.w	r3, r6, r7
 800c2ee:	d1eb      	bne.n	800c2c8 <_vfprintf_r+0x940>
 800c2f0:	e36f      	b.n	800c9d2 <_vfprintf_r+0x104a>
 800c2f2:	2600      	movs	r6, #0
 800c2f4:	2700      	movs	r7, #0
 800c2f6:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 800c2fa:	f006 030f 	and.w	r3, r6, #15
 800c2fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c300:	5cd3      	ldrb	r3, [r2, r3]
 800c302:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800c306:	0933      	lsrs	r3, r6, #4
 800c308:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800c30c:	093a      	lsrs	r2, r7, #4
 800c30e:	461e      	mov	r6, r3
 800c310:	4617      	mov	r7, r2
 800c312:	ea56 0307 	orrs.w	r3, r6, r7
 800c316:	d1f0      	bne.n	800c2fa <_vfprintf_r+0x972>
 800c318:	e35b      	b.n	800c9d2 <_vfprintf_r+0x104a>
 800c31a:	b943      	cbnz	r3, 800c32e <_vfprintf_r+0x9a6>
 800c31c:	f01a 0f01 	tst.w	sl, #1
 800c320:	d005      	beq.n	800c32e <_vfprintf_r+0x9a6>
 800c322:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 800c326:	2330      	movs	r3, #48	; 0x30
 800c328:	f808 3d41 	strb.w	r3, [r8, #-65]!
 800c32c:	e351      	b.n	800c9d2 <_vfprintf_r+0x104a>
 800c32e:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 800c332:	e34e      	b.n	800c9d2 <_vfprintf_r+0x104a>
 800c334:	b10b      	cbz	r3, 800c33a <_vfprintf_r+0x9b2>
 800c336:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800c33a:	9b06      	ldr	r3, [sp, #24]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	f000 8301 	beq.w	800c944 <_vfprintf_r+0xfbc>
 800c342:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800c346:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 800c34a:	2600      	movs	r6, #0
 800c34c:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 800c350:	9708      	str	r7, [sp, #32]
 800c352:	e4dd      	b.n	800bd10 <_vfprintf_r+0x388>
 800c354:	4606      	mov	r6, r0
 800c356:	e532      	b.n	800bdbe <_vfprintf_r+0x436>
 800c358:	2310      	movs	r3, #16
 800c35a:	6063      	str	r3, [r4, #4]
 800c35c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c35e:	3310      	adds	r3, #16
 800c360:	9323      	str	r3, [sp, #140]	; 0x8c
 800c362:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c364:	3301      	adds	r3, #1
 800c366:	2b07      	cmp	r3, #7
 800c368:	9322      	str	r3, [sp, #136]	; 0x88
 800c36a:	dc02      	bgt.n	800c372 <_vfprintf_r+0x9ea>
 800c36c:	3408      	adds	r4, #8
 800c36e:	3f10      	subs	r7, #16
 800c370:	e60f      	b.n	800bf92 <_vfprintf_r+0x60a>
 800c372:	aa21      	add	r2, sp, #132	; 0x84
 800c374:	4629      	mov	r1, r5
 800c376:	4648      	mov	r0, r9
 800c378:	f003 fe59 	bl	801002e <__sprint_r>
 800c37c:	2800      	cmp	r0, #0
 800c37e:	f040 82bd 	bne.w	800c8fc <_vfprintf_r+0xf74>
 800c382:	ac2e      	add	r4, sp, #184	; 0xb8
 800c384:	e7f3      	b.n	800c36e <_vfprintf_r+0x9e6>
 800c386:	aa21      	add	r2, sp, #132	; 0x84
 800c388:	4629      	mov	r1, r5
 800c38a:	4648      	mov	r0, r9
 800c38c:	f003 fe4f 	bl	801002e <__sprint_r>
 800c390:	2800      	cmp	r0, #0
 800c392:	f040 82b3 	bne.w	800c8fc <_vfprintf_r+0xf74>
 800c396:	ac2e      	add	r4, sp, #184	; 0xb8
 800c398:	e60b      	b.n	800bfb2 <_vfprintf_r+0x62a>
 800c39a:	aa21      	add	r2, sp, #132	; 0x84
 800c39c:	4629      	mov	r1, r5
 800c39e:	4648      	mov	r0, r9
 800c3a0:	f003 fe45 	bl	801002e <__sprint_r>
 800c3a4:	2800      	cmp	r0, #0
 800c3a6:	f040 82a9 	bne.w	800c8fc <_vfprintf_r+0xf74>
 800c3aa:	ac2e      	add	r4, sp, #184	; 0xb8
 800c3ac:	e613      	b.n	800bfd6 <_vfprintf_r+0x64e>
 800c3ae:	aa21      	add	r2, sp, #132	; 0x84
 800c3b0:	4629      	mov	r1, r5
 800c3b2:	4648      	mov	r0, r9
 800c3b4:	f003 fe3b 	bl	801002e <__sprint_r>
 800c3b8:	2800      	cmp	r0, #0
 800c3ba:	f040 829f 	bne.w	800c8fc <_vfprintf_r+0xf74>
 800c3be:	ac2e      	add	r4, sp, #184	; 0xb8
 800c3c0:	e619      	b.n	800bff6 <_vfprintf_r+0x66e>
 800c3c2:	2310      	movs	r3, #16
 800c3c4:	6063      	str	r3, [r4, #4]
 800c3c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c3c8:	3310      	adds	r3, #16
 800c3ca:	9323      	str	r3, [sp, #140]	; 0x8c
 800c3cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	2b07      	cmp	r3, #7
 800c3d2:	9322      	str	r3, [sp, #136]	; 0x88
 800c3d4:	dc02      	bgt.n	800c3dc <_vfprintf_r+0xa54>
 800c3d6:	3408      	adds	r4, #8
 800c3d8:	3f10      	subs	r7, #16
 800c3da:	e614      	b.n	800c006 <_vfprintf_r+0x67e>
 800c3dc:	aa21      	add	r2, sp, #132	; 0x84
 800c3de:	4629      	mov	r1, r5
 800c3e0:	4648      	mov	r0, r9
 800c3e2:	f003 fe24 	bl	801002e <__sprint_r>
 800c3e6:	2800      	cmp	r0, #0
 800c3e8:	f040 8288 	bne.w	800c8fc <_vfprintf_r+0xf74>
 800c3ec:	ac2e      	add	r4, sp, #184	; 0xb8
 800c3ee:	e7f3      	b.n	800c3d8 <_vfprintf_r+0xa50>
 800c3f0:	aa21      	add	r2, sp, #132	; 0x84
 800c3f2:	4629      	mov	r1, r5
 800c3f4:	4648      	mov	r0, r9
 800c3f6:	f003 fe1a 	bl	801002e <__sprint_r>
 800c3fa:	2800      	cmp	r0, #0
 800c3fc:	f040 827e 	bne.w	800c8fc <_vfprintf_r+0xf74>
 800c400:	ac2e      	add	r4, sp, #184	; 0xb8
 800c402:	e610      	b.n	800c026 <_vfprintf_r+0x69e>
 800c404:	2310      	movs	r3, #16
 800c406:	6063      	str	r3, [r4, #4]
 800c408:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c40a:	3310      	adds	r3, #16
 800c40c:	9323      	str	r3, [sp, #140]	; 0x8c
 800c40e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c410:	3301      	adds	r3, #1
 800c412:	2b07      	cmp	r3, #7
 800c414:	9322      	str	r3, [sp, #136]	; 0x88
 800c416:	dc02      	bgt.n	800c41e <_vfprintf_r+0xa96>
 800c418:	3408      	adds	r4, #8
 800c41a:	3e10      	subs	r6, #16
 800c41c:	e608      	b.n	800c030 <_vfprintf_r+0x6a8>
 800c41e:	aa21      	add	r2, sp, #132	; 0x84
 800c420:	4629      	mov	r1, r5
 800c422:	4648      	mov	r0, r9
 800c424:	f003 fe03 	bl	801002e <__sprint_r>
 800c428:	2800      	cmp	r0, #0
 800c42a:	f040 8267 	bne.w	800c8fc <_vfprintf_r+0xf74>
 800c42e:	ac2e      	add	r4, sp, #184	; 0xb8
 800c430:	e7f3      	b.n	800c41a <_vfprintf_r+0xa92>
 800c432:	aa21      	add	r2, sp, #132	; 0x84
 800c434:	4629      	mov	r1, r5
 800c436:	4648      	mov	r0, r9
 800c438:	f003 fdf9 	bl	801002e <__sprint_r>
 800c43c:	2800      	cmp	r0, #0
 800c43e:	f040 825d 	bne.w	800c8fc <_vfprintf_r+0xf74>
 800c442:	ac2e      	add	r4, sp, #184	; 0xb8
 800c444:	e603      	b.n	800c04e <_vfprintf_r+0x6c6>
 800c446:	9b06      	ldr	r3, [sp, #24]
 800c448:	2b65      	cmp	r3, #101	; 0x65
 800c44a:	f340 81b1 	ble.w	800c7b0 <_vfprintf_r+0xe28>
 800c44e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c450:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c452:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c454:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c456:	f7f4 fb43 	bl	8000ae0 <__aeabi_dcmpeq>
 800c45a:	2800      	cmp	r0, #0
 800c45c:	d064      	beq.n	800c528 <_vfprintf_r+0xba0>
 800c45e:	4b30      	ldr	r3, [pc, #192]	; (800c520 <_vfprintf_r+0xb98>)
 800c460:	6023      	str	r3, [r4, #0]
 800c462:	2301      	movs	r3, #1
 800c464:	6063      	str	r3, [r4, #4]
 800c466:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c468:	3301      	adds	r3, #1
 800c46a:	9323      	str	r3, [sp, #140]	; 0x8c
 800c46c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c46e:	3301      	adds	r3, #1
 800c470:	2b07      	cmp	r3, #7
 800c472:	9322      	str	r3, [sp, #136]	; 0x88
 800c474:	dc26      	bgt.n	800c4c4 <_vfprintf_r+0xb3c>
 800c476:	3408      	adds	r4, #8
 800c478:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c47a:	9a07      	ldr	r2, [sp, #28]
 800c47c:	4293      	cmp	r3, r2
 800c47e:	db03      	blt.n	800c488 <_vfprintf_r+0xb00>
 800c480:	f01a 0f01 	tst.w	sl, #1
 800c484:	f43f adfb 	beq.w	800c07e <_vfprintf_r+0x6f6>
 800c488:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c48a:	6023      	str	r3, [r4, #0]
 800c48c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c48e:	6063      	str	r3, [r4, #4]
 800c490:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c492:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c494:	4413      	add	r3, r2
 800c496:	9323      	str	r3, [sp, #140]	; 0x8c
 800c498:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c49a:	3301      	adds	r3, #1
 800c49c:	2b07      	cmp	r3, #7
 800c49e:	9322      	str	r3, [sp, #136]	; 0x88
 800c4a0:	dc1a      	bgt.n	800c4d8 <_vfprintf_r+0xb50>
 800c4a2:	3408      	adds	r4, #8
 800c4a4:	9b07      	ldr	r3, [sp, #28]
 800c4a6:	1e5e      	subs	r6, r3, #1
 800c4a8:	2e00      	cmp	r6, #0
 800c4aa:	f77f ade8 	ble.w	800c07e <_vfprintf_r+0x6f6>
 800c4ae:	4f1d      	ldr	r7, [pc, #116]	; (800c524 <_vfprintf_r+0xb9c>)
 800c4b0:	f04f 0810 	mov.w	r8, #16
 800c4b4:	2e10      	cmp	r6, #16
 800c4b6:	6027      	str	r7, [r4, #0]
 800c4b8:	dc18      	bgt.n	800c4ec <_vfprintf_r+0xb64>
 800c4ba:	6066      	str	r6, [r4, #4]
 800c4bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c4be:	441e      	add	r6, r3
 800c4c0:	9623      	str	r6, [sp, #140]	; 0x8c
 800c4c2:	e5cd      	b.n	800c060 <_vfprintf_r+0x6d8>
 800c4c4:	aa21      	add	r2, sp, #132	; 0x84
 800c4c6:	4629      	mov	r1, r5
 800c4c8:	4648      	mov	r0, r9
 800c4ca:	f003 fdb0 	bl	801002e <__sprint_r>
 800c4ce:	2800      	cmp	r0, #0
 800c4d0:	f040 8214 	bne.w	800c8fc <_vfprintf_r+0xf74>
 800c4d4:	ac2e      	add	r4, sp, #184	; 0xb8
 800c4d6:	e7cf      	b.n	800c478 <_vfprintf_r+0xaf0>
 800c4d8:	aa21      	add	r2, sp, #132	; 0x84
 800c4da:	4629      	mov	r1, r5
 800c4dc:	4648      	mov	r0, r9
 800c4de:	f003 fda6 	bl	801002e <__sprint_r>
 800c4e2:	2800      	cmp	r0, #0
 800c4e4:	f040 820a 	bne.w	800c8fc <_vfprintf_r+0xf74>
 800c4e8:	ac2e      	add	r4, sp, #184	; 0xb8
 800c4ea:	e7db      	b.n	800c4a4 <_vfprintf_r+0xb1c>
 800c4ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c4ee:	f8c4 8004 	str.w	r8, [r4, #4]
 800c4f2:	3310      	adds	r3, #16
 800c4f4:	9323      	str	r3, [sp, #140]	; 0x8c
 800c4f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c4f8:	3301      	adds	r3, #1
 800c4fa:	2b07      	cmp	r3, #7
 800c4fc:	9322      	str	r3, [sp, #136]	; 0x88
 800c4fe:	dc02      	bgt.n	800c506 <_vfprintf_r+0xb7e>
 800c500:	3408      	adds	r4, #8
 800c502:	3e10      	subs	r6, #16
 800c504:	e7d6      	b.n	800c4b4 <_vfprintf_r+0xb2c>
 800c506:	aa21      	add	r2, sp, #132	; 0x84
 800c508:	4629      	mov	r1, r5
 800c50a:	4648      	mov	r0, r9
 800c50c:	f003 fd8f 	bl	801002e <__sprint_r>
 800c510:	2800      	cmp	r0, #0
 800c512:	f040 81f3 	bne.w	800c8fc <_vfprintf_r+0xf74>
 800c516:	ac2e      	add	r4, sp, #184	; 0xb8
 800c518:	e7f3      	b.n	800c502 <_vfprintf_r+0xb7a>
 800c51a:	bf00      	nop
 800c51c:	08010ff5 	.word	0x08010ff5
 800c520:	08011006 	.word	0x08011006
 800c524:	08011018 	.word	0x08011018
 800c528:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	dc7b      	bgt.n	800c626 <_vfprintf_r+0xc9e>
 800c52e:	4b9e      	ldr	r3, [pc, #632]	; (800c7a8 <_vfprintf_r+0xe20>)
 800c530:	6023      	str	r3, [r4, #0]
 800c532:	2301      	movs	r3, #1
 800c534:	6063      	str	r3, [r4, #4]
 800c536:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c538:	3301      	adds	r3, #1
 800c53a:	9323      	str	r3, [sp, #140]	; 0x8c
 800c53c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c53e:	3301      	adds	r3, #1
 800c540:	2b07      	cmp	r3, #7
 800c542:	9322      	str	r3, [sp, #136]	; 0x88
 800c544:	dc45      	bgt.n	800c5d2 <_vfprintf_r+0xc4a>
 800c546:	3408      	adds	r4, #8
 800c548:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c54a:	b92b      	cbnz	r3, 800c558 <_vfprintf_r+0xbd0>
 800c54c:	9b07      	ldr	r3, [sp, #28]
 800c54e:	b91b      	cbnz	r3, 800c558 <_vfprintf_r+0xbd0>
 800c550:	f01a 0f01 	tst.w	sl, #1
 800c554:	f43f ad93 	beq.w	800c07e <_vfprintf_r+0x6f6>
 800c558:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c55a:	6023      	str	r3, [r4, #0]
 800c55c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c55e:	6063      	str	r3, [r4, #4]
 800c560:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c562:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c564:	4413      	add	r3, r2
 800c566:	9323      	str	r3, [sp, #140]	; 0x8c
 800c568:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c56a:	3301      	adds	r3, #1
 800c56c:	2b07      	cmp	r3, #7
 800c56e:	9322      	str	r3, [sp, #136]	; 0x88
 800c570:	dc39      	bgt.n	800c5e6 <_vfprintf_r+0xc5e>
 800c572:	f104 0308 	add.w	r3, r4, #8
 800c576:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800c578:	2e00      	cmp	r6, #0
 800c57a:	da19      	bge.n	800c5b0 <_vfprintf_r+0xc28>
 800c57c:	4f8b      	ldr	r7, [pc, #556]	; (800c7ac <_vfprintf_r+0xe24>)
 800c57e:	4276      	negs	r6, r6
 800c580:	2410      	movs	r4, #16
 800c582:	2e10      	cmp	r6, #16
 800c584:	601f      	str	r7, [r3, #0]
 800c586:	dc38      	bgt.n	800c5fa <_vfprintf_r+0xc72>
 800c588:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800c58a:	605e      	str	r6, [r3, #4]
 800c58c:	4416      	add	r6, r2
 800c58e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c590:	9623      	str	r6, [sp, #140]	; 0x8c
 800c592:	3201      	adds	r2, #1
 800c594:	2a07      	cmp	r2, #7
 800c596:	f103 0308 	add.w	r3, r3, #8
 800c59a:	9222      	str	r2, [sp, #136]	; 0x88
 800c59c:	dd08      	ble.n	800c5b0 <_vfprintf_r+0xc28>
 800c59e:	aa21      	add	r2, sp, #132	; 0x84
 800c5a0:	4629      	mov	r1, r5
 800c5a2:	4648      	mov	r0, r9
 800c5a4:	f003 fd43 	bl	801002e <__sprint_r>
 800c5a8:	2800      	cmp	r0, #0
 800c5aa:	f040 81a7 	bne.w	800c8fc <_vfprintf_r+0xf74>
 800c5ae:	ab2e      	add	r3, sp, #184	; 0xb8
 800c5b0:	9a07      	ldr	r2, [sp, #28]
 800c5b2:	605a      	str	r2, [r3, #4]
 800c5b4:	9907      	ldr	r1, [sp, #28]
 800c5b6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800c5b8:	f8c3 8000 	str.w	r8, [r3]
 800c5bc:	440a      	add	r2, r1
 800c5be:	9223      	str	r2, [sp, #140]	; 0x8c
 800c5c0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c5c2:	3201      	adds	r2, #1
 800c5c4:	2a07      	cmp	r2, #7
 800c5c6:	9222      	str	r2, [sp, #136]	; 0x88
 800c5c8:	f73f ad50 	bgt.w	800c06c <_vfprintf_r+0x6e4>
 800c5cc:	f103 0408 	add.w	r4, r3, #8
 800c5d0:	e555      	b.n	800c07e <_vfprintf_r+0x6f6>
 800c5d2:	aa21      	add	r2, sp, #132	; 0x84
 800c5d4:	4629      	mov	r1, r5
 800c5d6:	4648      	mov	r0, r9
 800c5d8:	f003 fd29 	bl	801002e <__sprint_r>
 800c5dc:	2800      	cmp	r0, #0
 800c5de:	f040 818d 	bne.w	800c8fc <_vfprintf_r+0xf74>
 800c5e2:	ac2e      	add	r4, sp, #184	; 0xb8
 800c5e4:	e7b0      	b.n	800c548 <_vfprintf_r+0xbc0>
 800c5e6:	aa21      	add	r2, sp, #132	; 0x84
 800c5e8:	4629      	mov	r1, r5
 800c5ea:	4648      	mov	r0, r9
 800c5ec:	f003 fd1f 	bl	801002e <__sprint_r>
 800c5f0:	2800      	cmp	r0, #0
 800c5f2:	f040 8183 	bne.w	800c8fc <_vfprintf_r+0xf74>
 800c5f6:	ab2e      	add	r3, sp, #184	; 0xb8
 800c5f8:	e7bd      	b.n	800c576 <_vfprintf_r+0xbee>
 800c5fa:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800c5fc:	605c      	str	r4, [r3, #4]
 800c5fe:	3210      	adds	r2, #16
 800c600:	9223      	str	r2, [sp, #140]	; 0x8c
 800c602:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c604:	3201      	adds	r2, #1
 800c606:	2a07      	cmp	r2, #7
 800c608:	9222      	str	r2, [sp, #136]	; 0x88
 800c60a:	dc02      	bgt.n	800c612 <_vfprintf_r+0xc8a>
 800c60c:	3308      	adds	r3, #8
 800c60e:	3e10      	subs	r6, #16
 800c610:	e7b7      	b.n	800c582 <_vfprintf_r+0xbfa>
 800c612:	aa21      	add	r2, sp, #132	; 0x84
 800c614:	4629      	mov	r1, r5
 800c616:	4648      	mov	r0, r9
 800c618:	f003 fd09 	bl	801002e <__sprint_r>
 800c61c:	2800      	cmp	r0, #0
 800c61e:	f040 816d 	bne.w	800c8fc <_vfprintf_r+0xf74>
 800c622:	ab2e      	add	r3, sp, #184	; 0xb8
 800c624:	e7f3      	b.n	800c60e <_vfprintf_r+0xc86>
 800c626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c628:	9a07      	ldr	r2, [sp, #28]
 800c62a:	4293      	cmp	r3, r2
 800c62c:	bfa8      	it	ge
 800c62e:	4613      	movge	r3, r2
 800c630:	2b00      	cmp	r3, #0
 800c632:	461e      	mov	r6, r3
 800c634:	dd0b      	ble.n	800c64e <_vfprintf_r+0xcc6>
 800c636:	6063      	str	r3, [r4, #4]
 800c638:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c63a:	f8c4 8000 	str.w	r8, [r4]
 800c63e:	4433      	add	r3, r6
 800c640:	9323      	str	r3, [sp, #140]	; 0x8c
 800c642:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c644:	3301      	adds	r3, #1
 800c646:	2b07      	cmp	r3, #7
 800c648:	9322      	str	r3, [sp, #136]	; 0x88
 800c64a:	dc63      	bgt.n	800c714 <_vfprintf_r+0xd8c>
 800c64c:	3408      	adds	r4, #8
 800c64e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c650:	2e00      	cmp	r6, #0
 800c652:	bfa8      	it	ge
 800c654:	1b9b      	subge	r3, r3, r6
 800c656:	2b00      	cmp	r3, #0
 800c658:	461e      	mov	r6, r3
 800c65a:	dd0f      	ble.n	800c67c <_vfprintf_r+0xcf4>
 800c65c:	4f53      	ldr	r7, [pc, #332]	; (800c7ac <_vfprintf_r+0xe24>)
 800c65e:	f04f 0b10 	mov.w	fp, #16
 800c662:	2e10      	cmp	r6, #16
 800c664:	6027      	str	r7, [r4, #0]
 800c666:	dc5f      	bgt.n	800c728 <_vfprintf_r+0xda0>
 800c668:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c66a:	6066      	str	r6, [r4, #4]
 800c66c:	441e      	add	r6, r3
 800c66e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c670:	9623      	str	r6, [sp, #140]	; 0x8c
 800c672:	3301      	adds	r3, #1
 800c674:	2b07      	cmp	r3, #7
 800c676:	9322      	str	r3, [sp, #136]	; 0x88
 800c678:	dc6d      	bgt.n	800c756 <_vfprintf_r+0xdce>
 800c67a:	3408      	adds	r4, #8
 800c67c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c67e:	9a07      	ldr	r2, [sp, #28]
 800c680:	4293      	cmp	r3, r2
 800c682:	db02      	blt.n	800c68a <_vfprintf_r+0xd02>
 800c684:	f01a 0f01 	tst.w	sl, #1
 800c688:	d00d      	beq.n	800c6a6 <_vfprintf_r+0xd1e>
 800c68a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c68c:	6023      	str	r3, [r4, #0]
 800c68e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c690:	6063      	str	r3, [r4, #4]
 800c692:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c694:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c696:	4413      	add	r3, r2
 800c698:	9323      	str	r3, [sp, #140]	; 0x8c
 800c69a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c69c:	3301      	adds	r3, #1
 800c69e:	2b07      	cmp	r3, #7
 800c6a0:	9322      	str	r3, [sp, #136]	; 0x88
 800c6a2:	dc62      	bgt.n	800c76a <_vfprintf_r+0xde2>
 800c6a4:	3408      	adds	r4, #8
 800c6a6:	9b07      	ldr	r3, [sp, #28]
 800c6a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c6aa:	1a9e      	subs	r6, r3, r2
 800c6ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c6ae:	9a07      	ldr	r2, [sp, #28]
 800c6b0:	1ad3      	subs	r3, r2, r3
 800c6b2:	429e      	cmp	r6, r3
 800c6b4:	bfa8      	it	ge
 800c6b6:	461e      	movge	r6, r3
 800c6b8:	2e00      	cmp	r6, #0
 800c6ba:	dd0c      	ble.n	800c6d6 <_vfprintf_r+0xd4e>
 800c6bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6be:	4443      	add	r3, r8
 800c6c0:	e884 0048 	stmia.w	r4, {r3, r6}
 800c6c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c6c6:	4433      	add	r3, r6
 800c6c8:	9323      	str	r3, [sp, #140]	; 0x8c
 800c6ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c6cc:	3301      	adds	r3, #1
 800c6ce:	2b07      	cmp	r3, #7
 800c6d0:	9322      	str	r3, [sp, #136]	; 0x88
 800c6d2:	dc54      	bgt.n	800c77e <_vfprintf_r+0xdf6>
 800c6d4:	3408      	adds	r4, #8
 800c6d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c6d8:	9a07      	ldr	r2, [sp, #28]
 800c6da:	2e00      	cmp	r6, #0
 800c6dc:	eba2 0303 	sub.w	r3, r2, r3
 800c6e0:	bfac      	ite	ge
 800c6e2:	1b9e      	subge	r6, r3, r6
 800c6e4:	461e      	movlt	r6, r3
 800c6e6:	2e00      	cmp	r6, #0
 800c6e8:	f77f acc9 	ble.w	800c07e <_vfprintf_r+0x6f6>
 800c6ec:	4f2f      	ldr	r7, [pc, #188]	; (800c7ac <_vfprintf_r+0xe24>)
 800c6ee:	f04f 0810 	mov.w	r8, #16
 800c6f2:	2e10      	cmp	r6, #16
 800c6f4:	6027      	str	r7, [r4, #0]
 800c6f6:	f77f aee0 	ble.w	800c4ba <_vfprintf_r+0xb32>
 800c6fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c6fc:	f8c4 8004 	str.w	r8, [r4, #4]
 800c700:	3310      	adds	r3, #16
 800c702:	9323      	str	r3, [sp, #140]	; 0x8c
 800c704:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c706:	3301      	adds	r3, #1
 800c708:	2b07      	cmp	r3, #7
 800c70a:	9322      	str	r3, [sp, #136]	; 0x88
 800c70c:	dc41      	bgt.n	800c792 <_vfprintf_r+0xe0a>
 800c70e:	3408      	adds	r4, #8
 800c710:	3e10      	subs	r6, #16
 800c712:	e7ee      	b.n	800c6f2 <_vfprintf_r+0xd6a>
 800c714:	aa21      	add	r2, sp, #132	; 0x84
 800c716:	4629      	mov	r1, r5
 800c718:	4648      	mov	r0, r9
 800c71a:	f003 fc88 	bl	801002e <__sprint_r>
 800c71e:	2800      	cmp	r0, #0
 800c720:	f040 80ec 	bne.w	800c8fc <_vfprintf_r+0xf74>
 800c724:	ac2e      	add	r4, sp, #184	; 0xb8
 800c726:	e792      	b.n	800c64e <_vfprintf_r+0xcc6>
 800c728:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c72a:	f8c4 b004 	str.w	fp, [r4, #4]
 800c72e:	3310      	adds	r3, #16
 800c730:	9323      	str	r3, [sp, #140]	; 0x8c
 800c732:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c734:	3301      	adds	r3, #1
 800c736:	2b07      	cmp	r3, #7
 800c738:	9322      	str	r3, [sp, #136]	; 0x88
 800c73a:	dc02      	bgt.n	800c742 <_vfprintf_r+0xdba>
 800c73c:	3408      	adds	r4, #8
 800c73e:	3e10      	subs	r6, #16
 800c740:	e78f      	b.n	800c662 <_vfprintf_r+0xcda>
 800c742:	aa21      	add	r2, sp, #132	; 0x84
 800c744:	4629      	mov	r1, r5
 800c746:	4648      	mov	r0, r9
 800c748:	f003 fc71 	bl	801002e <__sprint_r>
 800c74c:	2800      	cmp	r0, #0
 800c74e:	f040 80d5 	bne.w	800c8fc <_vfprintf_r+0xf74>
 800c752:	ac2e      	add	r4, sp, #184	; 0xb8
 800c754:	e7f3      	b.n	800c73e <_vfprintf_r+0xdb6>
 800c756:	aa21      	add	r2, sp, #132	; 0x84
 800c758:	4629      	mov	r1, r5
 800c75a:	4648      	mov	r0, r9
 800c75c:	f003 fc67 	bl	801002e <__sprint_r>
 800c760:	2800      	cmp	r0, #0
 800c762:	f040 80cb 	bne.w	800c8fc <_vfprintf_r+0xf74>
 800c766:	ac2e      	add	r4, sp, #184	; 0xb8
 800c768:	e788      	b.n	800c67c <_vfprintf_r+0xcf4>
 800c76a:	aa21      	add	r2, sp, #132	; 0x84
 800c76c:	4629      	mov	r1, r5
 800c76e:	4648      	mov	r0, r9
 800c770:	f003 fc5d 	bl	801002e <__sprint_r>
 800c774:	2800      	cmp	r0, #0
 800c776:	f040 80c1 	bne.w	800c8fc <_vfprintf_r+0xf74>
 800c77a:	ac2e      	add	r4, sp, #184	; 0xb8
 800c77c:	e793      	b.n	800c6a6 <_vfprintf_r+0xd1e>
 800c77e:	aa21      	add	r2, sp, #132	; 0x84
 800c780:	4629      	mov	r1, r5
 800c782:	4648      	mov	r0, r9
 800c784:	f003 fc53 	bl	801002e <__sprint_r>
 800c788:	2800      	cmp	r0, #0
 800c78a:	f040 80b7 	bne.w	800c8fc <_vfprintf_r+0xf74>
 800c78e:	ac2e      	add	r4, sp, #184	; 0xb8
 800c790:	e7a1      	b.n	800c6d6 <_vfprintf_r+0xd4e>
 800c792:	aa21      	add	r2, sp, #132	; 0x84
 800c794:	4629      	mov	r1, r5
 800c796:	4648      	mov	r0, r9
 800c798:	f003 fc49 	bl	801002e <__sprint_r>
 800c79c:	2800      	cmp	r0, #0
 800c79e:	f040 80ad 	bne.w	800c8fc <_vfprintf_r+0xf74>
 800c7a2:	ac2e      	add	r4, sp, #184	; 0xb8
 800c7a4:	e7b4      	b.n	800c710 <_vfprintf_r+0xd88>
 800c7a6:	bf00      	nop
 800c7a8:	08011006 	.word	0x08011006
 800c7ac:	08011018 	.word	0x08011018
 800c7b0:	9b07      	ldr	r3, [sp, #28]
 800c7b2:	2b01      	cmp	r3, #1
 800c7b4:	dc02      	bgt.n	800c7bc <_vfprintf_r+0xe34>
 800c7b6:	f01a 0f01 	tst.w	sl, #1
 800c7ba:	d076      	beq.n	800c8aa <_vfprintf_r+0xf22>
 800c7bc:	2301      	movs	r3, #1
 800c7be:	6063      	str	r3, [r4, #4]
 800c7c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c7c2:	f8c4 8000 	str.w	r8, [r4]
 800c7c6:	3301      	adds	r3, #1
 800c7c8:	9323      	str	r3, [sp, #140]	; 0x8c
 800c7ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c7cc:	3301      	adds	r3, #1
 800c7ce:	2b07      	cmp	r3, #7
 800c7d0:	9322      	str	r3, [sp, #136]	; 0x88
 800c7d2:	dc36      	bgt.n	800c842 <_vfprintf_r+0xeba>
 800c7d4:	3408      	adds	r4, #8
 800c7d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c7d8:	6023      	str	r3, [r4, #0]
 800c7da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7dc:	6063      	str	r3, [r4, #4]
 800c7de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c7e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c7e2:	4413      	add	r3, r2
 800c7e4:	9323      	str	r3, [sp, #140]	; 0x8c
 800c7e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c7e8:	3301      	adds	r3, #1
 800c7ea:	2b07      	cmp	r3, #7
 800c7ec:	9322      	str	r3, [sp, #136]	; 0x88
 800c7ee:	dc31      	bgt.n	800c854 <_vfprintf_r+0xecc>
 800c7f0:	3408      	adds	r4, #8
 800c7f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c7f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c7f6:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c7f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c7fa:	f7f4 f971 	bl	8000ae0 <__aeabi_dcmpeq>
 800c7fe:	9b07      	ldr	r3, [sp, #28]
 800c800:	1e5e      	subs	r6, r3, #1
 800c802:	2800      	cmp	r0, #0
 800c804:	d12f      	bne.n	800c866 <_vfprintf_r+0xede>
 800c806:	f108 0301 	add.w	r3, r8, #1
 800c80a:	e884 0048 	stmia.w	r4, {r3, r6}
 800c80e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c810:	9a07      	ldr	r2, [sp, #28]
 800c812:	3b01      	subs	r3, #1
 800c814:	4413      	add	r3, r2
 800c816:	9323      	str	r3, [sp, #140]	; 0x8c
 800c818:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c81a:	3301      	adds	r3, #1
 800c81c:	2b07      	cmp	r3, #7
 800c81e:	9322      	str	r3, [sp, #136]	; 0x88
 800c820:	dd4a      	ble.n	800c8b8 <_vfprintf_r+0xf30>
 800c822:	aa21      	add	r2, sp, #132	; 0x84
 800c824:	4629      	mov	r1, r5
 800c826:	4648      	mov	r0, r9
 800c828:	f003 fc01 	bl	801002e <__sprint_r>
 800c82c:	2800      	cmp	r0, #0
 800c82e:	d165      	bne.n	800c8fc <_vfprintf_r+0xf74>
 800c830:	ac2e      	add	r4, sp, #184	; 0xb8
 800c832:	ab1d      	add	r3, sp, #116	; 0x74
 800c834:	6023      	str	r3, [r4, #0]
 800c836:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c838:	6063      	str	r3, [r4, #4]
 800c83a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c83c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c83e:	4413      	add	r3, r2
 800c840:	e40d      	b.n	800c05e <_vfprintf_r+0x6d6>
 800c842:	aa21      	add	r2, sp, #132	; 0x84
 800c844:	4629      	mov	r1, r5
 800c846:	4648      	mov	r0, r9
 800c848:	f003 fbf1 	bl	801002e <__sprint_r>
 800c84c:	2800      	cmp	r0, #0
 800c84e:	d155      	bne.n	800c8fc <_vfprintf_r+0xf74>
 800c850:	ac2e      	add	r4, sp, #184	; 0xb8
 800c852:	e7c0      	b.n	800c7d6 <_vfprintf_r+0xe4e>
 800c854:	aa21      	add	r2, sp, #132	; 0x84
 800c856:	4629      	mov	r1, r5
 800c858:	4648      	mov	r0, r9
 800c85a:	f003 fbe8 	bl	801002e <__sprint_r>
 800c85e:	2800      	cmp	r0, #0
 800c860:	d14c      	bne.n	800c8fc <_vfprintf_r+0xf74>
 800c862:	ac2e      	add	r4, sp, #184	; 0xb8
 800c864:	e7c5      	b.n	800c7f2 <_vfprintf_r+0xe6a>
 800c866:	2e00      	cmp	r6, #0
 800c868:	dde3      	ble.n	800c832 <_vfprintf_r+0xeaa>
 800c86a:	4f5f      	ldr	r7, [pc, #380]	; (800c9e8 <_vfprintf_r+0x1060>)
 800c86c:	f04f 0810 	mov.w	r8, #16
 800c870:	2e10      	cmp	r6, #16
 800c872:	6027      	str	r7, [r4, #0]
 800c874:	dc04      	bgt.n	800c880 <_vfprintf_r+0xef8>
 800c876:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c878:	6066      	str	r6, [r4, #4]
 800c87a:	441e      	add	r6, r3
 800c87c:	9623      	str	r6, [sp, #140]	; 0x8c
 800c87e:	e7cb      	b.n	800c818 <_vfprintf_r+0xe90>
 800c880:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c882:	f8c4 8004 	str.w	r8, [r4, #4]
 800c886:	3310      	adds	r3, #16
 800c888:	9323      	str	r3, [sp, #140]	; 0x8c
 800c88a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c88c:	3301      	adds	r3, #1
 800c88e:	2b07      	cmp	r3, #7
 800c890:	9322      	str	r3, [sp, #136]	; 0x88
 800c892:	dc02      	bgt.n	800c89a <_vfprintf_r+0xf12>
 800c894:	3408      	adds	r4, #8
 800c896:	3e10      	subs	r6, #16
 800c898:	e7ea      	b.n	800c870 <_vfprintf_r+0xee8>
 800c89a:	aa21      	add	r2, sp, #132	; 0x84
 800c89c:	4629      	mov	r1, r5
 800c89e:	4648      	mov	r0, r9
 800c8a0:	f003 fbc5 	bl	801002e <__sprint_r>
 800c8a4:	bb50      	cbnz	r0, 800c8fc <_vfprintf_r+0xf74>
 800c8a6:	ac2e      	add	r4, sp, #184	; 0xb8
 800c8a8:	e7f5      	b.n	800c896 <_vfprintf_r+0xf0e>
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	6063      	str	r3, [r4, #4]
 800c8ae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c8b0:	f8c4 8000 	str.w	r8, [r4]
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	e7ae      	b.n	800c816 <_vfprintf_r+0xe8e>
 800c8b8:	3408      	adds	r4, #8
 800c8ba:	e7ba      	b.n	800c832 <_vfprintf_r+0xeaa>
 800c8bc:	3408      	adds	r4, #8
 800c8be:	f7ff bbde 	b.w	800c07e <_vfprintf_r+0x6f6>
 800c8c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c8c6:	1a9e      	subs	r6, r3, r2
 800c8c8:	2e00      	cmp	r6, #0
 800c8ca:	f77f abdc 	ble.w	800c086 <_vfprintf_r+0x6fe>
 800c8ce:	2710      	movs	r7, #16
 800c8d0:	4b46      	ldr	r3, [pc, #280]	; (800c9ec <_vfprintf_r+0x1064>)
 800c8d2:	6023      	str	r3, [r4, #0]
 800c8d4:	2e10      	cmp	r6, #16
 800c8d6:	dc20      	bgt.n	800c91a <_vfprintf_r+0xf92>
 800c8d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c8da:	6066      	str	r6, [r4, #4]
 800c8dc:	441e      	add	r6, r3
 800c8de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c8e0:	9623      	str	r6, [sp, #140]	; 0x8c
 800c8e2:	3301      	adds	r3, #1
 800c8e4:	2b07      	cmp	r3, #7
 800c8e6:	9322      	str	r3, [sp, #136]	; 0x88
 800c8e8:	f77f abcd 	ble.w	800c086 <_vfprintf_r+0x6fe>
 800c8ec:	aa21      	add	r2, sp, #132	; 0x84
 800c8ee:	4629      	mov	r1, r5
 800c8f0:	4648      	mov	r0, r9
 800c8f2:	f003 fb9c 	bl	801002e <__sprint_r>
 800c8f6:	2800      	cmp	r0, #0
 800c8f8:	f43f abc5 	beq.w	800c086 <_vfprintf_r+0x6fe>
 800c8fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8fe:	07d9      	lsls	r1, r3, #31
 800c900:	d405      	bmi.n	800c90e <_vfprintf_r+0xf86>
 800c902:	89ab      	ldrh	r3, [r5, #12]
 800c904:	059a      	lsls	r2, r3, #22
 800c906:	d402      	bmi.n	800c90e <_vfprintf_r+0xf86>
 800c908:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c90a:	f002 f806 	bl	800e91a <__retarget_lock_release_recursive>
 800c90e:	89ab      	ldrh	r3, [r5, #12]
 800c910:	065b      	lsls	r3, r3, #25
 800c912:	f57f a8a6 	bpl.w	800ba62 <_vfprintf_r+0xda>
 800c916:	f7ff b87c 	b.w	800ba12 <_vfprintf_r+0x8a>
 800c91a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c91c:	6067      	str	r7, [r4, #4]
 800c91e:	3310      	adds	r3, #16
 800c920:	9323      	str	r3, [sp, #140]	; 0x8c
 800c922:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c924:	3301      	adds	r3, #1
 800c926:	2b07      	cmp	r3, #7
 800c928:	9322      	str	r3, [sp, #136]	; 0x88
 800c92a:	dc02      	bgt.n	800c932 <_vfprintf_r+0xfaa>
 800c92c:	3408      	adds	r4, #8
 800c92e:	3e10      	subs	r6, #16
 800c930:	e7ce      	b.n	800c8d0 <_vfprintf_r+0xf48>
 800c932:	aa21      	add	r2, sp, #132	; 0x84
 800c934:	4629      	mov	r1, r5
 800c936:	4648      	mov	r0, r9
 800c938:	f003 fb79 	bl	801002e <__sprint_r>
 800c93c:	2800      	cmp	r0, #0
 800c93e:	d1dd      	bne.n	800c8fc <_vfprintf_r+0xf74>
 800c940:	ac2e      	add	r4, sp, #184	; 0xb8
 800c942:	e7f4      	b.n	800c92e <_vfprintf_r+0xfa6>
 800c944:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c946:	b913      	cbnz	r3, 800c94e <_vfprintf_r+0xfc6>
 800c948:	2300      	movs	r3, #0
 800c94a:	9322      	str	r3, [sp, #136]	; 0x88
 800c94c:	e7d6      	b.n	800c8fc <_vfprintf_r+0xf74>
 800c94e:	aa21      	add	r2, sp, #132	; 0x84
 800c950:	4629      	mov	r1, r5
 800c952:	4648      	mov	r0, r9
 800c954:	f003 fb6b 	bl	801002e <__sprint_r>
 800c958:	2800      	cmp	r0, #0
 800c95a:	d0f5      	beq.n	800c948 <_vfprintf_r+0xfc0>
 800c95c:	e7ce      	b.n	800c8fc <_vfprintf_r+0xf74>
 800c95e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c960:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c962:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c964:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c966:	f7f4 f8ed 	bl	8000b44 <__aeabi_dcmpun>
 800c96a:	2800      	cmp	r0, #0
 800c96c:	f43f aa29 	beq.w	800bdc2 <_vfprintf_r+0x43a>
 800c970:	4b1f      	ldr	r3, [pc, #124]	; (800c9f0 <_vfprintf_r+0x1068>)
 800c972:	4a20      	ldr	r2, [pc, #128]	; (800c9f4 <_vfprintf_r+0x106c>)
 800c974:	f7ff ba19 	b.w	800bdaa <_vfprintf_r+0x422>
 800c978:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c97a:	1a1b      	subs	r3, r3, r0
 800c97c:	9307      	str	r3, [sp, #28]
 800c97e:	f7ff ba9e 	b.w	800bebe <_vfprintf_r+0x536>
 800c982:	ea56 0207 	orrs.w	r2, r6, r7
 800c986:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800c98a:	f43f ac1a 	beq.w	800c1c2 <_vfprintf_r+0x83a>
 800c98e:	2b01      	cmp	r3, #1
 800c990:	f43f ac8e 	beq.w	800c2b0 <_vfprintf_r+0x928>
 800c994:	2b02      	cmp	r3, #2
 800c996:	f43f acae 	beq.w	800c2f6 <_vfprintf_r+0x96e>
 800c99a:	ab2e      	add	r3, sp, #184	; 0xb8
 800c99c:	08f1      	lsrs	r1, r6, #3
 800c99e:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800c9a2:	08f8      	lsrs	r0, r7, #3
 800c9a4:	f006 0207 	and.w	r2, r6, #7
 800c9a8:	4607      	mov	r7, r0
 800c9aa:	460e      	mov	r6, r1
 800c9ac:	3230      	adds	r2, #48	; 0x30
 800c9ae:	ea56 0107 	orrs.w	r1, r6, r7
 800c9b2:	f103 38ff 	add.w	r8, r3, #4294967295
 800c9b6:	f803 2c01 	strb.w	r2, [r3, #-1]
 800c9ba:	f47f ac77 	bne.w	800c2ac <_vfprintf_r+0x924>
 800c9be:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c9c0:	07c8      	lsls	r0, r1, #31
 800c9c2:	d506      	bpl.n	800c9d2 <_vfprintf_r+0x104a>
 800c9c4:	2a30      	cmp	r2, #48	; 0x30
 800c9c6:	d004      	beq.n	800c9d2 <_vfprintf_r+0x104a>
 800c9c8:	2230      	movs	r2, #48	; 0x30
 800c9ca:	f808 2c01 	strb.w	r2, [r8, #-1]
 800c9ce:	f1a3 0802 	sub.w	r8, r3, #2
 800c9d2:	ab2e      	add	r3, sp, #184	; 0xb8
 800c9d4:	465e      	mov	r6, fp
 800c9d6:	eba3 0b08 	sub.w	fp, r3, r8
 800c9da:	2300      	movs	r3, #0
 800c9dc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c9e0:	930a      	str	r3, [sp, #40]	; 0x28
 800c9e2:	f7ff babb 	b.w	800bf5c <_vfprintf_r+0x5d4>
 800c9e6:	bf00      	nop
 800c9e8:	08011018 	.word	0x08011018
 800c9ec:	08011008 	.word	0x08011008
 800c9f0:	08010fdc 	.word	0x08010fdc
 800c9f4:	08010fe0 	.word	0x08010fe0

0800c9f8 <__sbprintf>:
 800c9f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9fa:	460c      	mov	r4, r1
 800c9fc:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 800ca00:	461f      	mov	r7, r3
 800ca02:	8989      	ldrh	r1, [r1, #12]
 800ca04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca06:	9319      	str	r3, [sp, #100]	; 0x64
 800ca08:	89e3      	ldrh	r3, [r4, #14]
 800ca0a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ca0e:	f021 0102 	bic.w	r1, r1, #2
 800ca12:	6a23      	ldr	r3, [r4, #32]
 800ca14:	f8ad 100c 	strh.w	r1, [sp, #12]
 800ca18:	9308      	str	r3, [sp, #32]
 800ca1a:	a91a      	add	r1, sp, #104	; 0x68
 800ca1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ca1e:	930a      	str	r3, [sp, #40]	; 0x28
 800ca20:	4615      	mov	r5, r2
 800ca22:	2300      	movs	r3, #0
 800ca24:	4606      	mov	r6, r0
 800ca26:	9100      	str	r1, [sp, #0]
 800ca28:	9104      	str	r1, [sp, #16]
 800ca2a:	a816      	add	r0, sp, #88	; 0x58
 800ca2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ca30:	9102      	str	r1, [sp, #8]
 800ca32:	9105      	str	r1, [sp, #20]
 800ca34:	9306      	str	r3, [sp, #24]
 800ca36:	f001 ff6b 	bl	800e910 <__retarget_lock_init_recursive>
 800ca3a:	462a      	mov	r2, r5
 800ca3c:	463b      	mov	r3, r7
 800ca3e:	4669      	mov	r1, sp
 800ca40:	4630      	mov	r0, r6
 800ca42:	f7fe ffa1 	bl	800b988 <_vfprintf_r>
 800ca46:	1e05      	subs	r5, r0, #0
 800ca48:	db07      	blt.n	800ca5a <__sbprintf+0x62>
 800ca4a:	4669      	mov	r1, sp
 800ca4c:	4630      	mov	r0, r6
 800ca4e:	f000 ff87 	bl	800d960 <_fflush_r>
 800ca52:	2800      	cmp	r0, #0
 800ca54:	bf18      	it	ne
 800ca56:	f04f 35ff 	movne.w	r5, #4294967295
 800ca5a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800ca5e:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ca60:	065b      	lsls	r3, r3, #25
 800ca62:	bf42      	ittt	mi
 800ca64:	89a3      	ldrhmi	r3, [r4, #12]
 800ca66:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800ca6a:	81a3      	strhmi	r3, [r4, #12]
 800ca6c:	f001 ff51 	bl	800e912 <__retarget_lock_close_recursive>
 800ca70:	4628      	mov	r0, r5
 800ca72:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 800ca76:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ca78 <__swsetup_r>:
 800ca78:	4b32      	ldr	r3, [pc, #200]	; (800cb44 <__swsetup_r+0xcc>)
 800ca7a:	b570      	push	{r4, r5, r6, lr}
 800ca7c:	681d      	ldr	r5, [r3, #0]
 800ca7e:	4606      	mov	r6, r0
 800ca80:	460c      	mov	r4, r1
 800ca82:	b125      	cbz	r5, 800ca8e <__swsetup_r+0x16>
 800ca84:	69ab      	ldr	r3, [r5, #24]
 800ca86:	b913      	cbnz	r3, 800ca8e <__swsetup_r+0x16>
 800ca88:	4628      	mov	r0, r5
 800ca8a:	f000 fffd 	bl	800da88 <__sinit>
 800ca8e:	4b2e      	ldr	r3, [pc, #184]	; (800cb48 <__swsetup_r+0xd0>)
 800ca90:	429c      	cmp	r4, r3
 800ca92:	d10f      	bne.n	800cab4 <__swsetup_r+0x3c>
 800ca94:	686c      	ldr	r4, [r5, #4]
 800ca96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca9a:	b29a      	uxth	r2, r3
 800ca9c:	0715      	lsls	r5, r2, #28
 800ca9e:	d42c      	bmi.n	800cafa <__swsetup_r+0x82>
 800caa0:	06d0      	lsls	r0, r2, #27
 800caa2:	d411      	bmi.n	800cac8 <__swsetup_r+0x50>
 800caa4:	2209      	movs	r2, #9
 800caa6:	6032      	str	r2, [r6, #0]
 800caa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800caac:	81a3      	strh	r3, [r4, #12]
 800caae:	f04f 30ff 	mov.w	r0, #4294967295
 800cab2:	bd70      	pop	{r4, r5, r6, pc}
 800cab4:	4b25      	ldr	r3, [pc, #148]	; (800cb4c <__swsetup_r+0xd4>)
 800cab6:	429c      	cmp	r4, r3
 800cab8:	d101      	bne.n	800cabe <__swsetup_r+0x46>
 800caba:	68ac      	ldr	r4, [r5, #8]
 800cabc:	e7eb      	b.n	800ca96 <__swsetup_r+0x1e>
 800cabe:	4b24      	ldr	r3, [pc, #144]	; (800cb50 <__swsetup_r+0xd8>)
 800cac0:	429c      	cmp	r4, r3
 800cac2:	bf08      	it	eq
 800cac4:	68ec      	ldreq	r4, [r5, #12]
 800cac6:	e7e6      	b.n	800ca96 <__swsetup_r+0x1e>
 800cac8:	0751      	lsls	r1, r2, #29
 800caca:	d512      	bpl.n	800caf2 <__swsetup_r+0x7a>
 800cacc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cace:	b141      	cbz	r1, 800cae2 <__swsetup_r+0x6a>
 800cad0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cad4:	4299      	cmp	r1, r3
 800cad6:	d002      	beq.n	800cade <__swsetup_r+0x66>
 800cad8:	4630      	mov	r0, r6
 800cada:	f001 f8ab 	bl	800dc34 <_free_r>
 800cade:	2300      	movs	r3, #0
 800cae0:	6363      	str	r3, [r4, #52]	; 0x34
 800cae2:	89a3      	ldrh	r3, [r4, #12]
 800cae4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cae8:	81a3      	strh	r3, [r4, #12]
 800caea:	2300      	movs	r3, #0
 800caec:	6063      	str	r3, [r4, #4]
 800caee:	6923      	ldr	r3, [r4, #16]
 800caf0:	6023      	str	r3, [r4, #0]
 800caf2:	89a3      	ldrh	r3, [r4, #12]
 800caf4:	f043 0308 	orr.w	r3, r3, #8
 800caf8:	81a3      	strh	r3, [r4, #12]
 800cafa:	6923      	ldr	r3, [r4, #16]
 800cafc:	b94b      	cbnz	r3, 800cb12 <__swsetup_r+0x9a>
 800cafe:	89a3      	ldrh	r3, [r4, #12]
 800cb00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cb04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb08:	d003      	beq.n	800cb12 <__swsetup_r+0x9a>
 800cb0a:	4621      	mov	r1, r4
 800cb0c:	4630      	mov	r0, r6
 800cb0e:	f001 ff31 	bl	800e974 <__smakebuf_r>
 800cb12:	89a2      	ldrh	r2, [r4, #12]
 800cb14:	f012 0301 	ands.w	r3, r2, #1
 800cb18:	d00c      	beq.n	800cb34 <__swsetup_r+0xbc>
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	60a3      	str	r3, [r4, #8]
 800cb1e:	6963      	ldr	r3, [r4, #20]
 800cb20:	425b      	negs	r3, r3
 800cb22:	61a3      	str	r3, [r4, #24]
 800cb24:	6923      	ldr	r3, [r4, #16]
 800cb26:	b953      	cbnz	r3, 800cb3e <__swsetup_r+0xc6>
 800cb28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb2c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800cb30:	d1ba      	bne.n	800caa8 <__swsetup_r+0x30>
 800cb32:	bd70      	pop	{r4, r5, r6, pc}
 800cb34:	0792      	lsls	r2, r2, #30
 800cb36:	bf58      	it	pl
 800cb38:	6963      	ldrpl	r3, [r4, #20]
 800cb3a:	60a3      	str	r3, [r4, #8]
 800cb3c:	e7f2      	b.n	800cb24 <__swsetup_r+0xac>
 800cb3e:	2000      	movs	r0, #0
 800cb40:	e7f7      	b.n	800cb32 <__swsetup_r+0xba>
 800cb42:	bf00      	nop
 800cb44:	20000010 	.word	0x20000010
 800cb48:	08011058 	.word	0x08011058
 800cb4c:	08011078 	.word	0x08011078
 800cb50:	08011038 	.word	0x08011038

0800cb54 <div>:
 800cb54:	2900      	cmp	r1, #0
 800cb56:	b510      	push	{r4, lr}
 800cb58:	fb91 f4f2 	sdiv	r4, r1, r2
 800cb5c:	fb02 1314 	mls	r3, r2, r4, r1
 800cb60:	db06      	blt.n	800cb70 <div+0x1c>
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	da01      	bge.n	800cb6a <div+0x16>
 800cb66:	3401      	adds	r4, #1
 800cb68:	1a9b      	subs	r3, r3, r2
 800cb6a:	6004      	str	r4, [r0, #0]
 800cb6c:	6043      	str	r3, [r0, #4]
 800cb6e:	bd10      	pop	{r4, pc}
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	bfc4      	itt	gt
 800cb74:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800cb78:	189b      	addgt	r3, r3, r2
 800cb7a:	e7f6      	b.n	800cb6a <div+0x16>

0800cb7c <quorem>:
 800cb7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb80:	6903      	ldr	r3, [r0, #16]
 800cb82:	690c      	ldr	r4, [r1, #16]
 800cb84:	429c      	cmp	r4, r3
 800cb86:	4680      	mov	r8, r0
 800cb88:	f300 8082 	bgt.w	800cc90 <quorem+0x114>
 800cb8c:	3c01      	subs	r4, #1
 800cb8e:	f101 0714 	add.w	r7, r1, #20
 800cb92:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800cb96:	f100 0614 	add.w	r6, r0, #20
 800cb9a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800cb9e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800cba2:	eb06 030e 	add.w	r3, r6, lr
 800cba6:	3501      	adds	r5, #1
 800cba8:	eb07 090e 	add.w	r9, r7, lr
 800cbac:	9301      	str	r3, [sp, #4]
 800cbae:	fbb0 f5f5 	udiv	r5, r0, r5
 800cbb2:	b395      	cbz	r5, 800cc1a <quorem+0x9e>
 800cbb4:	f04f 0a00 	mov.w	sl, #0
 800cbb8:	4638      	mov	r0, r7
 800cbba:	46b4      	mov	ip, r6
 800cbbc:	46d3      	mov	fp, sl
 800cbbe:	f850 2b04 	ldr.w	r2, [r0], #4
 800cbc2:	b293      	uxth	r3, r2
 800cbc4:	fb05 a303 	mla	r3, r5, r3, sl
 800cbc8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cbcc:	b29b      	uxth	r3, r3
 800cbce:	ebab 0303 	sub.w	r3, fp, r3
 800cbd2:	0c12      	lsrs	r2, r2, #16
 800cbd4:	f8bc b000 	ldrh.w	fp, [ip]
 800cbd8:	fb05 a202 	mla	r2, r5, r2, sl
 800cbdc:	fa13 f38b 	uxtah	r3, r3, fp
 800cbe0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800cbe4:	fa1f fb82 	uxth.w	fp, r2
 800cbe8:	f8dc 2000 	ldr.w	r2, [ip]
 800cbec:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800cbf0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cbf4:	b29b      	uxth	r3, r3
 800cbf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cbfa:	4581      	cmp	r9, r0
 800cbfc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800cc00:	f84c 3b04 	str.w	r3, [ip], #4
 800cc04:	d2db      	bcs.n	800cbbe <quorem+0x42>
 800cc06:	f856 300e 	ldr.w	r3, [r6, lr]
 800cc0a:	b933      	cbnz	r3, 800cc1a <quorem+0x9e>
 800cc0c:	9b01      	ldr	r3, [sp, #4]
 800cc0e:	3b04      	subs	r3, #4
 800cc10:	429e      	cmp	r6, r3
 800cc12:	461a      	mov	r2, r3
 800cc14:	d330      	bcc.n	800cc78 <quorem+0xfc>
 800cc16:	f8c8 4010 	str.w	r4, [r8, #16]
 800cc1a:	4640      	mov	r0, r8
 800cc1c:	f002 f95d 	bl	800eeda <__mcmp>
 800cc20:	2800      	cmp	r0, #0
 800cc22:	db25      	blt.n	800cc70 <quorem+0xf4>
 800cc24:	3501      	adds	r5, #1
 800cc26:	4630      	mov	r0, r6
 800cc28:	f04f 0e00 	mov.w	lr, #0
 800cc2c:	f857 2b04 	ldr.w	r2, [r7], #4
 800cc30:	f8d0 c000 	ldr.w	ip, [r0]
 800cc34:	b293      	uxth	r3, r2
 800cc36:	ebae 0303 	sub.w	r3, lr, r3
 800cc3a:	0c12      	lsrs	r2, r2, #16
 800cc3c:	fa13 f38c 	uxtah	r3, r3, ip
 800cc40:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800cc44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cc48:	b29b      	uxth	r3, r3
 800cc4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc4e:	45b9      	cmp	r9, r7
 800cc50:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800cc54:	f840 3b04 	str.w	r3, [r0], #4
 800cc58:	d2e8      	bcs.n	800cc2c <quorem+0xb0>
 800cc5a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800cc5e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800cc62:	b92a      	cbnz	r2, 800cc70 <quorem+0xf4>
 800cc64:	3b04      	subs	r3, #4
 800cc66:	429e      	cmp	r6, r3
 800cc68:	461a      	mov	r2, r3
 800cc6a:	d30b      	bcc.n	800cc84 <quorem+0x108>
 800cc6c:	f8c8 4010 	str.w	r4, [r8, #16]
 800cc70:	4628      	mov	r0, r5
 800cc72:	b003      	add	sp, #12
 800cc74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc78:	6812      	ldr	r2, [r2, #0]
 800cc7a:	3b04      	subs	r3, #4
 800cc7c:	2a00      	cmp	r2, #0
 800cc7e:	d1ca      	bne.n	800cc16 <quorem+0x9a>
 800cc80:	3c01      	subs	r4, #1
 800cc82:	e7c5      	b.n	800cc10 <quorem+0x94>
 800cc84:	6812      	ldr	r2, [r2, #0]
 800cc86:	3b04      	subs	r3, #4
 800cc88:	2a00      	cmp	r2, #0
 800cc8a:	d1ef      	bne.n	800cc6c <quorem+0xf0>
 800cc8c:	3c01      	subs	r4, #1
 800cc8e:	e7ea      	b.n	800cc66 <quorem+0xea>
 800cc90:	2000      	movs	r0, #0
 800cc92:	e7ee      	b.n	800cc72 <quorem+0xf6>
 800cc94:	0000      	movs	r0, r0
	...

0800cc98 <_dtoa_r>:
 800cc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc9c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cc9e:	b095      	sub	sp, #84	; 0x54
 800cca0:	4604      	mov	r4, r0
 800cca2:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800cca4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cca8:	b93e      	cbnz	r6, 800ccba <_dtoa_r+0x22>
 800ccaa:	2010      	movs	r0, #16
 800ccac:	f7fc ff90 	bl	8009bd0 <malloc>
 800ccb0:	6260      	str	r0, [r4, #36]	; 0x24
 800ccb2:	6046      	str	r6, [r0, #4]
 800ccb4:	6086      	str	r6, [r0, #8]
 800ccb6:	6006      	str	r6, [r0, #0]
 800ccb8:	60c6      	str	r6, [r0, #12]
 800ccba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ccbc:	6819      	ldr	r1, [r3, #0]
 800ccbe:	b151      	cbz	r1, 800ccd6 <_dtoa_r+0x3e>
 800ccc0:	685a      	ldr	r2, [r3, #4]
 800ccc2:	604a      	str	r2, [r1, #4]
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	4093      	lsls	r3, r2
 800ccc8:	608b      	str	r3, [r1, #8]
 800ccca:	4620      	mov	r0, r4
 800cccc:	f001 fef2 	bl	800eab4 <_Bfree>
 800ccd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	601a      	str	r2, [r3, #0]
 800ccd6:	9b03      	ldr	r3, [sp, #12]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	bfbf      	itttt	lt
 800ccdc:	2301      	movlt	r3, #1
 800ccde:	602b      	strlt	r3, [r5, #0]
 800cce0:	9b03      	ldrlt	r3, [sp, #12]
 800cce2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cce6:	bfb2      	itee	lt
 800cce8:	9303      	strlt	r3, [sp, #12]
 800ccea:	2300      	movge	r3, #0
 800ccec:	602b      	strge	r3, [r5, #0]
 800ccee:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ccf2:	4ba9      	ldr	r3, [pc, #676]	; (800cf98 <_dtoa_r+0x300>)
 800ccf4:	ea33 0309 	bics.w	r3, r3, r9
 800ccf8:	d11b      	bne.n	800cd32 <_dtoa_r+0x9a>
 800ccfa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ccfc:	f242 730f 	movw	r3, #9999	; 0x270f
 800cd00:	6013      	str	r3, [r2, #0]
 800cd02:	9b02      	ldr	r3, [sp, #8]
 800cd04:	b923      	cbnz	r3, 800cd10 <_dtoa_r+0x78>
 800cd06:	f3c9 0013 	ubfx	r0, r9, #0, #20
 800cd0a:	2800      	cmp	r0, #0
 800cd0c:	f000 8581 	beq.w	800d812 <_dtoa_r+0xb7a>
 800cd10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cd12:	b953      	cbnz	r3, 800cd2a <_dtoa_r+0x92>
 800cd14:	4ba1      	ldr	r3, [pc, #644]	; (800cf9c <_dtoa_r+0x304>)
 800cd16:	e021      	b.n	800cd5c <_dtoa_r+0xc4>
 800cd18:	4ba1      	ldr	r3, [pc, #644]	; (800cfa0 <_dtoa_r+0x308>)
 800cd1a:	9306      	str	r3, [sp, #24]
 800cd1c:	3308      	adds	r3, #8
 800cd1e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800cd20:	6013      	str	r3, [r2, #0]
 800cd22:	9806      	ldr	r0, [sp, #24]
 800cd24:	b015      	add	sp, #84	; 0x54
 800cd26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd2a:	4b9c      	ldr	r3, [pc, #624]	; (800cf9c <_dtoa_r+0x304>)
 800cd2c:	9306      	str	r3, [sp, #24]
 800cd2e:	3303      	adds	r3, #3
 800cd30:	e7f5      	b.n	800cd1e <_dtoa_r+0x86>
 800cd32:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cd36:	2200      	movs	r2, #0
 800cd38:	2300      	movs	r3, #0
 800cd3a:	4630      	mov	r0, r6
 800cd3c:	4639      	mov	r1, r7
 800cd3e:	f7f3 fecf 	bl	8000ae0 <__aeabi_dcmpeq>
 800cd42:	4680      	mov	r8, r0
 800cd44:	b160      	cbz	r0, 800cd60 <_dtoa_r+0xc8>
 800cd46:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cd48:	2301      	movs	r3, #1
 800cd4a:	6013      	str	r3, [r2, #0]
 800cd4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	f000 855c 	beq.w	800d80c <_dtoa_r+0xb74>
 800cd54:	4b93      	ldr	r3, [pc, #588]	; (800cfa4 <_dtoa_r+0x30c>)
 800cd56:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800cd58:	6013      	str	r3, [r2, #0]
 800cd5a:	3b01      	subs	r3, #1
 800cd5c:	9306      	str	r3, [sp, #24]
 800cd5e:	e7e0      	b.n	800cd22 <_dtoa_r+0x8a>
 800cd60:	ab12      	add	r3, sp, #72	; 0x48
 800cd62:	9301      	str	r3, [sp, #4]
 800cd64:	ab13      	add	r3, sp, #76	; 0x4c
 800cd66:	9300      	str	r3, [sp, #0]
 800cd68:	4632      	mov	r2, r6
 800cd6a:	463b      	mov	r3, r7
 800cd6c:	4620      	mov	r0, r4
 800cd6e:	f002 f9a3 	bl	800f0b8 <__d2b>
 800cd72:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cd76:	4682      	mov	sl, r0
 800cd78:	2d00      	cmp	r5, #0
 800cd7a:	d07c      	beq.n	800ce76 <_dtoa_r+0x1de>
 800cd7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cd80:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800cd84:	4630      	mov	r0, r6
 800cd86:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800cd8a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cd8e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800cd92:	2200      	movs	r2, #0
 800cd94:	4b84      	ldr	r3, [pc, #528]	; (800cfa8 <_dtoa_r+0x310>)
 800cd96:	f7f3 fa87 	bl	80002a8 <__aeabi_dsub>
 800cd9a:	a379      	add	r3, pc, #484	; (adr r3, 800cf80 <_dtoa_r+0x2e8>)
 800cd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda0:	f7f3 fc36 	bl	8000610 <__aeabi_dmul>
 800cda4:	a378      	add	r3, pc, #480	; (adr r3, 800cf88 <_dtoa_r+0x2f0>)
 800cda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdaa:	f7f3 fa7f 	bl	80002ac <__adddf3>
 800cdae:	4606      	mov	r6, r0
 800cdb0:	4628      	mov	r0, r5
 800cdb2:	460f      	mov	r7, r1
 800cdb4:	f7f3 fbc6 	bl	8000544 <__aeabi_i2d>
 800cdb8:	a375      	add	r3, pc, #468	; (adr r3, 800cf90 <_dtoa_r+0x2f8>)
 800cdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdbe:	f7f3 fc27 	bl	8000610 <__aeabi_dmul>
 800cdc2:	4602      	mov	r2, r0
 800cdc4:	460b      	mov	r3, r1
 800cdc6:	4630      	mov	r0, r6
 800cdc8:	4639      	mov	r1, r7
 800cdca:	f7f3 fa6f 	bl	80002ac <__adddf3>
 800cdce:	4606      	mov	r6, r0
 800cdd0:	460f      	mov	r7, r1
 800cdd2:	f7f3 fecd 	bl	8000b70 <__aeabi_d2iz>
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	4683      	mov	fp, r0
 800cdda:	2300      	movs	r3, #0
 800cddc:	4630      	mov	r0, r6
 800cdde:	4639      	mov	r1, r7
 800cde0:	f7f3 fe88 	bl	8000af4 <__aeabi_dcmplt>
 800cde4:	b158      	cbz	r0, 800cdfe <_dtoa_r+0x166>
 800cde6:	4658      	mov	r0, fp
 800cde8:	f7f3 fbac 	bl	8000544 <__aeabi_i2d>
 800cdec:	4602      	mov	r2, r0
 800cdee:	460b      	mov	r3, r1
 800cdf0:	4630      	mov	r0, r6
 800cdf2:	4639      	mov	r1, r7
 800cdf4:	f7f3 fe74 	bl	8000ae0 <__aeabi_dcmpeq>
 800cdf8:	b908      	cbnz	r0, 800cdfe <_dtoa_r+0x166>
 800cdfa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cdfe:	f1bb 0f16 	cmp.w	fp, #22
 800ce02:	d857      	bhi.n	800ceb4 <_dtoa_r+0x21c>
 800ce04:	4969      	ldr	r1, [pc, #420]	; (800cfac <_dtoa_r+0x314>)
 800ce06:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800ce0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ce0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce12:	f7f3 fe8d 	bl	8000b30 <__aeabi_dcmpgt>
 800ce16:	2800      	cmp	r0, #0
 800ce18:	d04e      	beq.n	800ceb8 <_dtoa_r+0x220>
 800ce1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ce1e:	2300      	movs	r3, #0
 800ce20:	930d      	str	r3, [sp, #52]	; 0x34
 800ce22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ce24:	1b5d      	subs	r5, r3, r5
 800ce26:	1e6b      	subs	r3, r5, #1
 800ce28:	9307      	str	r3, [sp, #28]
 800ce2a:	bf43      	ittte	mi
 800ce2c:	2300      	movmi	r3, #0
 800ce2e:	f1c5 0801 	rsbmi	r8, r5, #1
 800ce32:	9307      	strmi	r3, [sp, #28]
 800ce34:	f04f 0800 	movpl.w	r8, #0
 800ce38:	f1bb 0f00 	cmp.w	fp, #0
 800ce3c:	db3e      	blt.n	800cebc <_dtoa_r+0x224>
 800ce3e:	9b07      	ldr	r3, [sp, #28]
 800ce40:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800ce44:	445b      	add	r3, fp
 800ce46:	9307      	str	r3, [sp, #28]
 800ce48:	2300      	movs	r3, #0
 800ce4a:	9308      	str	r3, [sp, #32]
 800ce4c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ce4e:	2b09      	cmp	r3, #9
 800ce50:	f200 80b0 	bhi.w	800cfb4 <_dtoa_r+0x31c>
 800ce54:	2b05      	cmp	r3, #5
 800ce56:	bfc4      	itt	gt
 800ce58:	3b04      	subgt	r3, #4
 800ce5a:	931e      	strgt	r3, [sp, #120]	; 0x78
 800ce5c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ce5e:	f1a3 0302 	sub.w	r3, r3, #2
 800ce62:	bfcc      	ite	gt
 800ce64:	2600      	movgt	r6, #0
 800ce66:	2601      	movle	r6, #1
 800ce68:	2b03      	cmp	r3, #3
 800ce6a:	f200 80af 	bhi.w	800cfcc <_dtoa_r+0x334>
 800ce6e:	e8df f003 	tbb	[pc, r3]
 800ce72:	8583      	.short	0x8583
 800ce74:	772d      	.short	0x772d
 800ce76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ce78:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800ce7a:	441d      	add	r5, r3
 800ce7c:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ce80:	2b20      	cmp	r3, #32
 800ce82:	dd11      	ble.n	800cea8 <_dtoa_r+0x210>
 800ce84:	9a02      	ldr	r2, [sp, #8]
 800ce86:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800ce8a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800ce8e:	fa22 f000 	lsr.w	r0, r2, r0
 800ce92:	fa09 f303 	lsl.w	r3, r9, r3
 800ce96:	4318      	orrs	r0, r3
 800ce98:	f7f3 fb44 	bl	8000524 <__aeabi_ui2d>
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800cea2:	3d01      	subs	r5, #1
 800cea4:	9310      	str	r3, [sp, #64]	; 0x40
 800cea6:	e774      	b.n	800cd92 <_dtoa_r+0xfa>
 800cea8:	f1c3 0020 	rsb	r0, r3, #32
 800ceac:	9b02      	ldr	r3, [sp, #8]
 800ceae:	fa03 f000 	lsl.w	r0, r3, r0
 800ceb2:	e7f1      	b.n	800ce98 <_dtoa_r+0x200>
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	e7b3      	b.n	800ce20 <_dtoa_r+0x188>
 800ceb8:	900d      	str	r0, [sp, #52]	; 0x34
 800ceba:	e7b2      	b.n	800ce22 <_dtoa_r+0x18a>
 800cebc:	f1cb 0300 	rsb	r3, fp, #0
 800cec0:	9308      	str	r3, [sp, #32]
 800cec2:	2300      	movs	r3, #0
 800cec4:	eba8 080b 	sub.w	r8, r8, fp
 800cec8:	930c      	str	r3, [sp, #48]	; 0x30
 800ceca:	e7bf      	b.n	800ce4c <_dtoa_r+0x1b4>
 800cecc:	2301      	movs	r3, #1
 800cece:	9309      	str	r3, [sp, #36]	; 0x24
 800ced0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	dd7d      	ble.n	800cfd2 <_dtoa_r+0x33a>
 800ced6:	9304      	str	r3, [sp, #16]
 800ced8:	4699      	mov	r9, r3
 800ceda:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800cedc:	2200      	movs	r2, #0
 800cede:	606a      	str	r2, [r5, #4]
 800cee0:	2104      	movs	r1, #4
 800cee2:	f101 0214 	add.w	r2, r1, #20
 800cee6:	429a      	cmp	r2, r3
 800cee8:	d978      	bls.n	800cfdc <_dtoa_r+0x344>
 800ceea:	6869      	ldr	r1, [r5, #4]
 800ceec:	4620      	mov	r0, r4
 800ceee:	f001 fdad 	bl	800ea4c <_Balloc>
 800cef2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cef4:	6028      	str	r0, [r5, #0]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	9306      	str	r3, [sp, #24]
 800cefa:	f1b9 0f0e 	cmp.w	r9, #14
 800cefe:	f200 80ee 	bhi.w	800d0de <_dtoa_r+0x446>
 800cf02:	2e00      	cmp	r6, #0
 800cf04:	f000 80eb 	beq.w	800d0de <_dtoa_r+0x446>
 800cf08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf0c:	f1bb 0f00 	cmp.w	fp, #0
 800cf10:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800cf14:	dd77      	ble.n	800d006 <_dtoa_r+0x36e>
 800cf16:	4a25      	ldr	r2, [pc, #148]	; (800cfac <_dtoa_r+0x314>)
 800cf18:	f00b 030f 	and.w	r3, fp, #15
 800cf1c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cf20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf24:	ea4f 162b 	mov.w	r6, fp, asr #4
 800cf28:	06f0      	lsls	r0, r6, #27
 800cf2a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800cf2e:	d55a      	bpl.n	800cfe6 <_dtoa_r+0x34e>
 800cf30:	4b1f      	ldr	r3, [pc, #124]	; (800cfb0 <_dtoa_r+0x318>)
 800cf32:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800cf36:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cf3a:	f7f3 fc93 	bl	8000864 <__aeabi_ddiv>
 800cf3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf42:	f006 060f 	and.w	r6, r6, #15
 800cf46:	2503      	movs	r5, #3
 800cf48:	4f19      	ldr	r7, [pc, #100]	; (800cfb0 <_dtoa_r+0x318>)
 800cf4a:	2e00      	cmp	r6, #0
 800cf4c:	d14d      	bne.n	800cfea <_dtoa_r+0x352>
 800cf4e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cf52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf56:	f7f3 fc85 	bl	8000864 <__aeabi_ddiv>
 800cf5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf5e:	e06c      	b.n	800d03a <_dtoa_r+0x3a2>
 800cf60:	2301      	movs	r3, #1
 800cf62:	9309      	str	r3, [sp, #36]	; 0x24
 800cf64:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cf66:	445b      	add	r3, fp
 800cf68:	f103 0901 	add.w	r9, r3, #1
 800cf6c:	9304      	str	r3, [sp, #16]
 800cf6e:	464b      	mov	r3, r9
 800cf70:	2b01      	cmp	r3, #1
 800cf72:	bfb8      	it	lt
 800cf74:	2301      	movlt	r3, #1
 800cf76:	e7b0      	b.n	800ceda <_dtoa_r+0x242>
 800cf78:	2300      	movs	r3, #0
 800cf7a:	e7a8      	b.n	800cece <_dtoa_r+0x236>
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	e7f0      	b.n	800cf62 <_dtoa_r+0x2ca>
 800cf80:	636f4361 	.word	0x636f4361
 800cf84:	3fd287a7 	.word	0x3fd287a7
 800cf88:	8b60c8b3 	.word	0x8b60c8b3
 800cf8c:	3fc68a28 	.word	0x3fc68a28
 800cf90:	509f79fb 	.word	0x509f79fb
 800cf94:	3fd34413 	.word	0x3fd34413
 800cf98:	7ff00000 	.word	0x7ff00000
 800cf9c:	08011031 	.word	0x08011031
 800cfa0:	08011028 	.word	0x08011028
 800cfa4:	08011007 	.word	0x08011007
 800cfa8:	3ff80000 	.word	0x3ff80000
 800cfac:	080110d0 	.word	0x080110d0
 800cfb0:	080110a8 	.word	0x080110a8
 800cfb4:	2601      	movs	r6, #1
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	931e      	str	r3, [sp, #120]	; 0x78
 800cfba:	9609      	str	r6, [sp, #36]	; 0x24
 800cfbc:	f04f 33ff 	mov.w	r3, #4294967295
 800cfc0:	9304      	str	r3, [sp, #16]
 800cfc2:	4699      	mov	r9, r3
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	2312      	movs	r3, #18
 800cfc8:	921f      	str	r2, [sp, #124]	; 0x7c
 800cfca:	e786      	b.n	800ceda <_dtoa_r+0x242>
 800cfcc:	2301      	movs	r3, #1
 800cfce:	9309      	str	r3, [sp, #36]	; 0x24
 800cfd0:	e7f4      	b.n	800cfbc <_dtoa_r+0x324>
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	9304      	str	r3, [sp, #16]
 800cfd6:	4699      	mov	r9, r3
 800cfd8:	461a      	mov	r2, r3
 800cfda:	e7f5      	b.n	800cfc8 <_dtoa_r+0x330>
 800cfdc:	686a      	ldr	r2, [r5, #4]
 800cfde:	3201      	adds	r2, #1
 800cfe0:	606a      	str	r2, [r5, #4]
 800cfe2:	0049      	lsls	r1, r1, #1
 800cfe4:	e77d      	b.n	800cee2 <_dtoa_r+0x24a>
 800cfe6:	2502      	movs	r5, #2
 800cfe8:	e7ae      	b.n	800cf48 <_dtoa_r+0x2b0>
 800cfea:	07f1      	lsls	r1, r6, #31
 800cfec:	d508      	bpl.n	800d000 <_dtoa_r+0x368>
 800cfee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cff2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cff6:	f7f3 fb0b 	bl	8000610 <__aeabi_dmul>
 800cffa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800cffe:	3501      	adds	r5, #1
 800d000:	1076      	asrs	r6, r6, #1
 800d002:	3708      	adds	r7, #8
 800d004:	e7a1      	b.n	800cf4a <_dtoa_r+0x2b2>
 800d006:	f000 80a5 	beq.w	800d154 <_dtoa_r+0x4bc>
 800d00a:	f1cb 0600 	rsb	r6, fp, #0
 800d00e:	4ba3      	ldr	r3, [pc, #652]	; (800d29c <_dtoa_r+0x604>)
 800d010:	4fa3      	ldr	r7, [pc, #652]	; (800d2a0 <_dtoa_r+0x608>)
 800d012:	f006 020f 	and.w	r2, r6, #15
 800d016:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d01e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d022:	f7f3 faf5 	bl	8000610 <__aeabi_dmul>
 800d026:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d02a:	1136      	asrs	r6, r6, #4
 800d02c:	2300      	movs	r3, #0
 800d02e:	2502      	movs	r5, #2
 800d030:	2e00      	cmp	r6, #0
 800d032:	f040 8084 	bne.w	800d13e <_dtoa_r+0x4a6>
 800d036:	2b00      	cmp	r3, #0
 800d038:	d18f      	bne.n	800cf5a <_dtoa_r+0x2c2>
 800d03a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	f000 808b 	beq.w	800d158 <_dtoa_r+0x4c0>
 800d042:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d046:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d04a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d04e:	2200      	movs	r2, #0
 800d050:	4b94      	ldr	r3, [pc, #592]	; (800d2a4 <_dtoa_r+0x60c>)
 800d052:	f7f3 fd4f 	bl	8000af4 <__aeabi_dcmplt>
 800d056:	2800      	cmp	r0, #0
 800d058:	d07e      	beq.n	800d158 <_dtoa_r+0x4c0>
 800d05a:	f1b9 0f00 	cmp.w	r9, #0
 800d05e:	d07b      	beq.n	800d158 <_dtoa_r+0x4c0>
 800d060:	9b04      	ldr	r3, [sp, #16]
 800d062:	2b00      	cmp	r3, #0
 800d064:	dd37      	ble.n	800d0d6 <_dtoa_r+0x43e>
 800d066:	2200      	movs	r2, #0
 800d068:	4b8f      	ldr	r3, [pc, #572]	; (800d2a8 <_dtoa_r+0x610>)
 800d06a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d06e:	f7f3 facf 	bl	8000610 <__aeabi_dmul>
 800d072:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d076:	9e04      	ldr	r6, [sp, #16]
 800d078:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d07c:	3501      	adds	r5, #1
 800d07e:	4628      	mov	r0, r5
 800d080:	f7f3 fa60 	bl	8000544 <__aeabi_i2d>
 800d084:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d088:	f7f3 fac2 	bl	8000610 <__aeabi_dmul>
 800d08c:	4b87      	ldr	r3, [pc, #540]	; (800d2ac <_dtoa_r+0x614>)
 800d08e:	2200      	movs	r2, #0
 800d090:	f7f3 f90c 	bl	80002ac <__adddf3>
 800d094:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d09a:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 800d09e:	950b      	str	r5, [sp, #44]	; 0x2c
 800d0a0:	2e00      	cmp	r6, #0
 800d0a2:	d15c      	bne.n	800d15e <_dtoa_r+0x4c6>
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	4b82      	ldr	r3, [pc, #520]	; (800d2b0 <_dtoa_r+0x618>)
 800d0a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0ac:	f7f3 f8fc 	bl	80002a8 <__aeabi_dsub>
 800d0b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d0b2:	462b      	mov	r3, r5
 800d0b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0b8:	f7f3 fd3a 	bl	8000b30 <__aeabi_dcmpgt>
 800d0bc:	2800      	cmp	r0, #0
 800d0be:	f040 82f7 	bne.w	800d6b0 <_dtoa_r+0xa18>
 800d0c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d0c4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800d0c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0cc:	f7f3 fd12 	bl	8000af4 <__aeabi_dcmplt>
 800d0d0:	2800      	cmp	r0, #0
 800d0d2:	f040 82eb 	bne.w	800d6ac <_dtoa_r+0xa14>
 800d0d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d0da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d0de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	f2c0 8151 	blt.w	800d388 <_dtoa_r+0x6f0>
 800d0e6:	f1bb 0f0e 	cmp.w	fp, #14
 800d0ea:	f300 814d 	bgt.w	800d388 <_dtoa_r+0x6f0>
 800d0ee:	4b6b      	ldr	r3, [pc, #428]	; (800d29c <_dtoa_r+0x604>)
 800d0f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d0fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	f280 80da 	bge.w	800d2b8 <_dtoa_r+0x620>
 800d104:	f1b9 0f00 	cmp.w	r9, #0
 800d108:	f300 80d6 	bgt.w	800d2b8 <_dtoa_r+0x620>
 800d10c:	f040 82cd 	bne.w	800d6aa <_dtoa_r+0xa12>
 800d110:	2200      	movs	r2, #0
 800d112:	4b67      	ldr	r3, [pc, #412]	; (800d2b0 <_dtoa_r+0x618>)
 800d114:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d118:	f7f3 fa7a 	bl	8000610 <__aeabi_dmul>
 800d11c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d120:	f7f3 fcfc 	bl	8000b1c <__aeabi_dcmpge>
 800d124:	464e      	mov	r6, r9
 800d126:	464f      	mov	r7, r9
 800d128:	2800      	cmp	r0, #0
 800d12a:	f040 82a4 	bne.w	800d676 <_dtoa_r+0x9de>
 800d12e:	9b06      	ldr	r3, [sp, #24]
 800d130:	9a06      	ldr	r2, [sp, #24]
 800d132:	1c5d      	adds	r5, r3, #1
 800d134:	2331      	movs	r3, #49	; 0x31
 800d136:	7013      	strb	r3, [r2, #0]
 800d138:	f10b 0b01 	add.w	fp, fp, #1
 800d13c:	e29f      	b.n	800d67e <_dtoa_r+0x9e6>
 800d13e:	07f2      	lsls	r2, r6, #31
 800d140:	d505      	bpl.n	800d14e <_dtoa_r+0x4b6>
 800d142:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d146:	f7f3 fa63 	bl	8000610 <__aeabi_dmul>
 800d14a:	3501      	adds	r5, #1
 800d14c:	2301      	movs	r3, #1
 800d14e:	1076      	asrs	r6, r6, #1
 800d150:	3708      	adds	r7, #8
 800d152:	e76d      	b.n	800d030 <_dtoa_r+0x398>
 800d154:	2502      	movs	r5, #2
 800d156:	e770      	b.n	800d03a <_dtoa_r+0x3a2>
 800d158:	465f      	mov	r7, fp
 800d15a:	464e      	mov	r6, r9
 800d15c:	e78f      	b.n	800d07e <_dtoa_r+0x3e6>
 800d15e:	9a06      	ldr	r2, [sp, #24]
 800d160:	4b4e      	ldr	r3, [pc, #312]	; (800d29c <_dtoa_r+0x604>)
 800d162:	4432      	add	r2, r6
 800d164:	9211      	str	r2, [sp, #68]	; 0x44
 800d166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d168:	1e71      	subs	r1, r6, #1
 800d16a:	2a00      	cmp	r2, #0
 800d16c:	d048      	beq.n	800d200 <_dtoa_r+0x568>
 800d16e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800d172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d176:	2000      	movs	r0, #0
 800d178:	494e      	ldr	r1, [pc, #312]	; (800d2b4 <_dtoa_r+0x61c>)
 800d17a:	f7f3 fb73 	bl	8000864 <__aeabi_ddiv>
 800d17e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d182:	f7f3 f891 	bl	80002a8 <__aeabi_dsub>
 800d186:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d18a:	9d06      	ldr	r5, [sp, #24]
 800d18c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d190:	f7f3 fcee 	bl	8000b70 <__aeabi_d2iz>
 800d194:	4606      	mov	r6, r0
 800d196:	f7f3 f9d5 	bl	8000544 <__aeabi_i2d>
 800d19a:	4602      	mov	r2, r0
 800d19c:	460b      	mov	r3, r1
 800d19e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1a2:	f7f3 f881 	bl	80002a8 <__aeabi_dsub>
 800d1a6:	3630      	adds	r6, #48	; 0x30
 800d1a8:	f805 6b01 	strb.w	r6, [r5], #1
 800d1ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d1b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d1b4:	f7f3 fc9e 	bl	8000af4 <__aeabi_dcmplt>
 800d1b8:	2800      	cmp	r0, #0
 800d1ba:	d165      	bne.n	800d288 <_dtoa_r+0x5f0>
 800d1bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d1c0:	2000      	movs	r0, #0
 800d1c2:	4938      	ldr	r1, [pc, #224]	; (800d2a4 <_dtoa_r+0x60c>)
 800d1c4:	f7f3 f870 	bl	80002a8 <__aeabi_dsub>
 800d1c8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d1cc:	f7f3 fc92 	bl	8000af4 <__aeabi_dcmplt>
 800d1d0:	2800      	cmp	r0, #0
 800d1d2:	f040 80b9 	bne.w	800d348 <_dtoa_r+0x6b0>
 800d1d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d1d8:	429d      	cmp	r5, r3
 800d1da:	f43f af7c 	beq.w	800d0d6 <_dtoa_r+0x43e>
 800d1de:	2200      	movs	r2, #0
 800d1e0:	4b31      	ldr	r3, [pc, #196]	; (800d2a8 <_dtoa_r+0x610>)
 800d1e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d1e6:	f7f3 fa13 	bl	8000610 <__aeabi_dmul>
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d1f0:	4b2d      	ldr	r3, [pc, #180]	; (800d2a8 <_dtoa_r+0x610>)
 800d1f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1f6:	f7f3 fa0b 	bl	8000610 <__aeabi_dmul>
 800d1fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d1fe:	e7c5      	b.n	800d18c <_dtoa_r+0x4f4>
 800d200:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d204:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d208:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d20c:	f7f3 fa00 	bl	8000610 <__aeabi_dmul>
 800d210:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d214:	9d06      	ldr	r5, [sp, #24]
 800d216:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d21a:	f7f3 fca9 	bl	8000b70 <__aeabi_d2iz>
 800d21e:	4606      	mov	r6, r0
 800d220:	f7f3 f990 	bl	8000544 <__aeabi_i2d>
 800d224:	3630      	adds	r6, #48	; 0x30
 800d226:	4602      	mov	r2, r0
 800d228:	460b      	mov	r3, r1
 800d22a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d22e:	f7f3 f83b 	bl	80002a8 <__aeabi_dsub>
 800d232:	f805 6b01 	strb.w	r6, [r5], #1
 800d236:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d238:	42ab      	cmp	r3, r5
 800d23a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d23e:	f04f 0200 	mov.w	r2, #0
 800d242:	d125      	bne.n	800d290 <_dtoa_r+0x5f8>
 800d244:	4b1b      	ldr	r3, [pc, #108]	; (800d2b4 <_dtoa_r+0x61c>)
 800d246:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d24a:	f7f3 f82f 	bl	80002ac <__adddf3>
 800d24e:	4602      	mov	r2, r0
 800d250:	460b      	mov	r3, r1
 800d252:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d256:	f7f3 fc6b 	bl	8000b30 <__aeabi_dcmpgt>
 800d25a:	2800      	cmp	r0, #0
 800d25c:	d174      	bne.n	800d348 <_dtoa_r+0x6b0>
 800d25e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d262:	2000      	movs	r0, #0
 800d264:	4913      	ldr	r1, [pc, #76]	; (800d2b4 <_dtoa_r+0x61c>)
 800d266:	f7f3 f81f 	bl	80002a8 <__aeabi_dsub>
 800d26a:	4602      	mov	r2, r0
 800d26c:	460b      	mov	r3, r1
 800d26e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d272:	f7f3 fc3f 	bl	8000af4 <__aeabi_dcmplt>
 800d276:	2800      	cmp	r0, #0
 800d278:	f43f af2d 	beq.w	800d0d6 <_dtoa_r+0x43e>
 800d27c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d280:	2b30      	cmp	r3, #48	; 0x30
 800d282:	f105 32ff 	add.w	r2, r5, #4294967295
 800d286:	d001      	beq.n	800d28c <_dtoa_r+0x5f4>
 800d288:	46bb      	mov	fp, r7
 800d28a:	e04c      	b.n	800d326 <_dtoa_r+0x68e>
 800d28c:	4615      	mov	r5, r2
 800d28e:	e7f5      	b.n	800d27c <_dtoa_r+0x5e4>
 800d290:	4b05      	ldr	r3, [pc, #20]	; (800d2a8 <_dtoa_r+0x610>)
 800d292:	f7f3 f9bd 	bl	8000610 <__aeabi_dmul>
 800d296:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d29a:	e7bc      	b.n	800d216 <_dtoa_r+0x57e>
 800d29c:	080110d0 	.word	0x080110d0
 800d2a0:	080110a8 	.word	0x080110a8
 800d2a4:	3ff00000 	.word	0x3ff00000
 800d2a8:	40240000 	.word	0x40240000
 800d2ac:	401c0000 	.word	0x401c0000
 800d2b0:	40140000 	.word	0x40140000
 800d2b4:	3fe00000 	.word	0x3fe00000
 800d2b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d2bc:	9d06      	ldr	r5, [sp, #24]
 800d2be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d2c2:	4630      	mov	r0, r6
 800d2c4:	4639      	mov	r1, r7
 800d2c6:	f7f3 facd 	bl	8000864 <__aeabi_ddiv>
 800d2ca:	f7f3 fc51 	bl	8000b70 <__aeabi_d2iz>
 800d2ce:	4680      	mov	r8, r0
 800d2d0:	f7f3 f938 	bl	8000544 <__aeabi_i2d>
 800d2d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d2d8:	f7f3 f99a 	bl	8000610 <__aeabi_dmul>
 800d2dc:	4602      	mov	r2, r0
 800d2de:	460b      	mov	r3, r1
 800d2e0:	4630      	mov	r0, r6
 800d2e2:	4639      	mov	r1, r7
 800d2e4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800d2e8:	f7f2 ffde 	bl	80002a8 <__aeabi_dsub>
 800d2ec:	f805 6b01 	strb.w	r6, [r5], #1
 800d2f0:	9e06      	ldr	r6, [sp, #24]
 800d2f2:	1bae      	subs	r6, r5, r6
 800d2f4:	45b1      	cmp	r9, r6
 800d2f6:	4602      	mov	r2, r0
 800d2f8:	460b      	mov	r3, r1
 800d2fa:	d138      	bne.n	800d36e <_dtoa_r+0x6d6>
 800d2fc:	f7f2 ffd6 	bl	80002ac <__adddf3>
 800d300:	4606      	mov	r6, r0
 800d302:	460f      	mov	r7, r1
 800d304:	4602      	mov	r2, r0
 800d306:	460b      	mov	r3, r1
 800d308:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d30c:	f7f3 fbf2 	bl	8000af4 <__aeabi_dcmplt>
 800d310:	b9c8      	cbnz	r0, 800d346 <_dtoa_r+0x6ae>
 800d312:	4632      	mov	r2, r6
 800d314:	463b      	mov	r3, r7
 800d316:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d31a:	f7f3 fbe1 	bl	8000ae0 <__aeabi_dcmpeq>
 800d31e:	b110      	cbz	r0, 800d326 <_dtoa_r+0x68e>
 800d320:	f018 0f01 	tst.w	r8, #1
 800d324:	d10f      	bne.n	800d346 <_dtoa_r+0x6ae>
 800d326:	4651      	mov	r1, sl
 800d328:	4620      	mov	r0, r4
 800d32a:	f001 fbc3 	bl	800eab4 <_Bfree>
 800d32e:	2300      	movs	r3, #0
 800d330:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d332:	702b      	strb	r3, [r5, #0]
 800d334:	f10b 0301 	add.w	r3, fp, #1
 800d338:	6013      	str	r3, [r2, #0]
 800d33a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	f43f acf0 	beq.w	800cd22 <_dtoa_r+0x8a>
 800d342:	601d      	str	r5, [r3, #0]
 800d344:	e4ed      	b.n	800cd22 <_dtoa_r+0x8a>
 800d346:	465f      	mov	r7, fp
 800d348:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d34c:	2a39      	cmp	r2, #57	; 0x39
 800d34e:	f105 33ff 	add.w	r3, r5, #4294967295
 800d352:	d106      	bne.n	800d362 <_dtoa_r+0x6ca>
 800d354:	9a06      	ldr	r2, [sp, #24]
 800d356:	429a      	cmp	r2, r3
 800d358:	d107      	bne.n	800d36a <_dtoa_r+0x6d2>
 800d35a:	2330      	movs	r3, #48	; 0x30
 800d35c:	7013      	strb	r3, [r2, #0]
 800d35e:	3701      	adds	r7, #1
 800d360:	4613      	mov	r3, r2
 800d362:	781a      	ldrb	r2, [r3, #0]
 800d364:	3201      	adds	r2, #1
 800d366:	701a      	strb	r2, [r3, #0]
 800d368:	e78e      	b.n	800d288 <_dtoa_r+0x5f0>
 800d36a:	461d      	mov	r5, r3
 800d36c:	e7ec      	b.n	800d348 <_dtoa_r+0x6b0>
 800d36e:	2200      	movs	r2, #0
 800d370:	4bb4      	ldr	r3, [pc, #720]	; (800d644 <_dtoa_r+0x9ac>)
 800d372:	f7f3 f94d 	bl	8000610 <__aeabi_dmul>
 800d376:	2200      	movs	r2, #0
 800d378:	2300      	movs	r3, #0
 800d37a:	4606      	mov	r6, r0
 800d37c:	460f      	mov	r7, r1
 800d37e:	f7f3 fbaf 	bl	8000ae0 <__aeabi_dcmpeq>
 800d382:	2800      	cmp	r0, #0
 800d384:	d09b      	beq.n	800d2be <_dtoa_r+0x626>
 800d386:	e7ce      	b.n	800d326 <_dtoa_r+0x68e>
 800d388:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d38a:	2a00      	cmp	r2, #0
 800d38c:	f000 8129 	beq.w	800d5e2 <_dtoa_r+0x94a>
 800d390:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d392:	2a01      	cmp	r2, #1
 800d394:	f300 810e 	bgt.w	800d5b4 <_dtoa_r+0x91c>
 800d398:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d39a:	2a00      	cmp	r2, #0
 800d39c:	f000 8106 	beq.w	800d5ac <_dtoa_r+0x914>
 800d3a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d3a4:	9e08      	ldr	r6, [sp, #32]
 800d3a6:	4645      	mov	r5, r8
 800d3a8:	9a07      	ldr	r2, [sp, #28]
 800d3aa:	2101      	movs	r1, #1
 800d3ac:	441a      	add	r2, r3
 800d3ae:	4620      	mov	r0, r4
 800d3b0:	4498      	add	r8, r3
 800d3b2:	9207      	str	r2, [sp, #28]
 800d3b4:	f001 fc5c 	bl	800ec70 <__i2b>
 800d3b8:	4607      	mov	r7, r0
 800d3ba:	2d00      	cmp	r5, #0
 800d3bc:	dd0b      	ble.n	800d3d6 <_dtoa_r+0x73e>
 800d3be:	9b07      	ldr	r3, [sp, #28]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	dd08      	ble.n	800d3d6 <_dtoa_r+0x73e>
 800d3c4:	42ab      	cmp	r3, r5
 800d3c6:	9a07      	ldr	r2, [sp, #28]
 800d3c8:	bfa8      	it	ge
 800d3ca:	462b      	movge	r3, r5
 800d3cc:	eba8 0803 	sub.w	r8, r8, r3
 800d3d0:	1aed      	subs	r5, r5, r3
 800d3d2:	1ad3      	subs	r3, r2, r3
 800d3d4:	9307      	str	r3, [sp, #28]
 800d3d6:	9b08      	ldr	r3, [sp, #32]
 800d3d8:	b1fb      	cbz	r3, 800d41a <_dtoa_r+0x782>
 800d3da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	f000 8104 	beq.w	800d5ea <_dtoa_r+0x952>
 800d3e2:	2e00      	cmp	r6, #0
 800d3e4:	dd11      	ble.n	800d40a <_dtoa_r+0x772>
 800d3e6:	4639      	mov	r1, r7
 800d3e8:	4632      	mov	r2, r6
 800d3ea:	4620      	mov	r0, r4
 800d3ec:	f001 fcd6 	bl	800ed9c <__pow5mult>
 800d3f0:	4652      	mov	r2, sl
 800d3f2:	4601      	mov	r1, r0
 800d3f4:	4607      	mov	r7, r0
 800d3f6:	4620      	mov	r0, r4
 800d3f8:	f001 fc43 	bl	800ec82 <__multiply>
 800d3fc:	4651      	mov	r1, sl
 800d3fe:	900a      	str	r0, [sp, #40]	; 0x28
 800d400:	4620      	mov	r0, r4
 800d402:	f001 fb57 	bl	800eab4 <_Bfree>
 800d406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d408:	469a      	mov	sl, r3
 800d40a:	9b08      	ldr	r3, [sp, #32]
 800d40c:	1b9a      	subs	r2, r3, r6
 800d40e:	d004      	beq.n	800d41a <_dtoa_r+0x782>
 800d410:	4651      	mov	r1, sl
 800d412:	4620      	mov	r0, r4
 800d414:	f001 fcc2 	bl	800ed9c <__pow5mult>
 800d418:	4682      	mov	sl, r0
 800d41a:	2101      	movs	r1, #1
 800d41c:	4620      	mov	r0, r4
 800d41e:	f001 fc27 	bl	800ec70 <__i2b>
 800d422:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d424:	2b00      	cmp	r3, #0
 800d426:	4606      	mov	r6, r0
 800d428:	f340 80e1 	ble.w	800d5ee <_dtoa_r+0x956>
 800d42c:	461a      	mov	r2, r3
 800d42e:	4601      	mov	r1, r0
 800d430:	4620      	mov	r0, r4
 800d432:	f001 fcb3 	bl	800ed9c <__pow5mult>
 800d436:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d438:	2b01      	cmp	r3, #1
 800d43a:	4606      	mov	r6, r0
 800d43c:	f340 80da 	ble.w	800d5f4 <_dtoa_r+0x95c>
 800d440:	2300      	movs	r3, #0
 800d442:	9308      	str	r3, [sp, #32]
 800d444:	6933      	ldr	r3, [r6, #16]
 800d446:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d44a:	6918      	ldr	r0, [r3, #16]
 800d44c:	f001 fbc2 	bl	800ebd4 <__hi0bits>
 800d450:	f1c0 0020 	rsb	r0, r0, #32
 800d454:	9b07      	ldr	r3, [sp, #28]
 800d456:	4418      	add	r0, r3
 800d458:	f010 001f 	ands.w	r0, r0, #31
 800d45c:	f000 80f0 	beq.w	800d640 <_dtoa_r+0x9a8>
 800d460:	f1c0 0320 	rsb	r3, r0, #32
 800d464:	2b04      	cmp	r3, #4
 800d466:	f340 80e2 	ble.w	800d62e <_dtoa_r+0x996>
 800d46a:	9b07      	ldr	r3, [sp, #28]
 800d46c:	f1c0 001c 	rsb	r0, r0, #28
 800d470:	4480      	add	r8, r0
 800d472:	4405      	add	r5, r0
 800d474:	4403      	add	r3, r0
 800d476:	9307      	str	r3, [sp, #28]
 800d478:	f1b8 0f00 	cmp.w	r8, #0
 800d47c:	dd05      	ble.n	800d48a <_dtoa_r+0x7f2>
 800d47e:	4651      	mov	r1, sl
 800d480:	4642      	mov	r2, r8
 800d482:	4620      	mov	r0, r4
 800d484:	f001 fcd8 	bl	800ee38 <__lshift>
 800d488:	4682      	mov	sl, r0
 800d48a:	9b07      	ldr	r3, [sp, #28]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	dd05      	ble.n	800d49c <_dtoa_r+0x804>
 800d490:	4631      	mov	r1, r6
 800d492:	461a      	mov	r2, r3
 800d494:	4620      	mov	r0, r4
 800d496:	f001 fccf 	bl	800ee38 <__lshift>
 800d49a:	4606      	mov	r6, r0
 800d49c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	f000 80d2 	beq.w	800d648 <_dtoa_r+0x9b0>
 800d4a4:	4631      	mov	r1, r6
 800d4a6:	4650      	mov	r0, sl
 800d4a8:	f001 fd17 	bl	800eeda <__mcmp>
 800d4ac:	2800      	cmp	r0, #0
 800d4ae:	f280 80cb 	bge.w	800d648 <_dtoa_r+0x9b0>
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	4651      	mov	r1, sl
 800d4b6:	220a      	movs	r2, #10
 800d4b8:	4620      	mov	r0, r4
 800d4ba:	f001 fb12 	bl	800eae2 <__multadd>
 800d4be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d4c4:	4682      	mov	sl, r0
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	f000 81aa 	beq.w	800d820 <_dtoa_r+0xb88>
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	4639      	mov	r1, r7
 800d4d0:	220a      	movs	r2, #10
 800d4d2:	4620      	mov	r0, r4
 800d4d4:	f001 fb05 	bl	800eae2 <__multadd>
 800d4d8:	9b04      	ldr	r3, [sp, #16]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	4607      	mov	r7, r0
 800d4de:	dc03      	bgt.n	800d4e8 <_dtoa_r+0x850>
 800d4e0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d4e2:	2b02      	cmp	r3, #2
 800d4e4:	f300 80b8 	bgt.w	800d658 <_dtoa_r+0x9c0>
 800d4e8:	2d00      	cmp	r5, #0
 800d4ea:	dd05      	ble.n	800d4f8 <_dtoa_r+0x860>
 800d4ec:	4639      	mov	r1, r7
 800d4ee:	462a      	mov	r2, r5
 800d4f0:	4620      	mov	r0, r4
 800d4f2:	f001 fca1 	bl	800ee38 <__lshift>
 800d4f6:	4607      	mov	r7, r0
 800d4f8:	9b08      	ldr	r3, [sp, #32]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	f000 8110 	beq.w	800d720 <_dtoa_r+0xa88>
 800d500:	6879      	ldr	r1, [r7, #4]
 800d502:	4620      	mov	r0, r4
 800d504:	f001 faa2 	bl	800ea4c <_Balloc>
 800d508:	693a      	ldr	r2, [r7, #16]
 800d50a:	3202      	adds	r2, #2
 800d50c:	4605      	mov	r5, r0
 800d50e:	0092      	lsls	r2, r2, #2
 800d510:	f107 010c 	add.w	r1, r7, #12
 800d514:	300c      	adds	r0, #12
 800d516:	f7fc fd79 	bl	800a00c <memcpy>
 800d51a:	2201      	movs	r2, #1
 800d51c:	4629      	mov	r1, r5
 800d51e:	4620      	mov	r0, r4
 800d520:	f001 fc8a 	bl	800ee38 <__lshift>
 800d524:	9b02      	ldr	r3, [sp, #8]
 800d526:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800d52a:	9707      	str	r7, [sp, #28]
 800d52c:	f003 0301 	and.w	r3, r3, #1
 800d530:	4607      	mov	r7, r0
 800d532:	9308      	str	r3, [sp, #32]
 800d534:	4631      	mov	r1, r6
 800d536:	4650      	mov	r0, sl
 800d538:	f7ff fb20 	bl	800cb7c <quorem>
 800d53c:	9907      	ldr	r1, [sp, #28]
 800d53e:	4605      	mov	r5, r0
 800d540:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d544:	4650      	mov	r0, sl
 800d546:	f001 fcc8 	bl	800eeda <__mcmp>
 800d54a:	463a      	mov	r2, r7
 800d54c:	9002      	str	r0, [sp, #8]
 800d54e:	4631      	mov	r1, r6
 800d550:	4620      	mov	r0, r4
 800d552:	f001 fcdc 	bl	800ef0e <__mdiff>
 800d556:	68c3      	ldr	r3, [r0, #12]
 800d558:	4602      	mov	r2, r0
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	f040 80e2 	bne.w	800d724 <_dtoa_r+0xa8c>
 800d560:	4601      	mov	r1, r0
 800d562:	9009      	str	r0, [sp, #36]	; 0x24
 800d564:	4650      	mov	r0, sl
 800d566:	f001 fcb8 	bl	800eeda <__mcmp>
 800d56a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d56c:	4603      	mov	r3, r0
 800d56e:	4611      	mov	r1, r2
 800d570:	4620      	mov	r0, r4
 800d572:	9309      	str	r3, [sp, #36]	; 0x24
 800d574:	f001 fa9e 	bl	800eab4 <_Bfree>
 800d578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	f040 80d4 	bne.w	800d728 <_dtoa_r+0xa90>
 800d580:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d582:	2a00      	cmp	r2, #0
 800d584:	f040 80d0 	bne.w	800d728 <_dtoa_r+0xa90>
 800d588:	9a08      	ldr	r2, [sp, #32]
 800d58a:	2a00      	cmp	r2, #0
 800d58c:	f040 80cc 	bne.w	800d728 <_dtoa_r+0xa90>
 800d590:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d594:	f000 80e8 	beq.w	800d768 <_dtoa_r+0xad0>
 800d598:	9b02      	ldr	r3, [sp, #8]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	dd01      	ble.n	800d5a2 <_dtoa_r+0x90a>
 800d59e:	f105 0931 	add.w	r9, r5, #49	; 0x31
 800d5a2:	f108 0501 	add.w	r5, r8, #1
 800d5a6:	f888 9000 	strb.w	r9, [r8]
 800d5aa:	e06a      	b.n	800d682 <_dtoa_r+0x9ea>
 800d5ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d5ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d5b2:	e6f7      	b.n	800d3a4 <_dtoa_r+0x70c>
 800d5b4:	9b08      	ldr	r3, [sp, #32]
 800d5b6:	f109 36ff 	add.w	r6, r9, #4294967295
 800d5ba:	42b3      	cmp	r3, r6
 800d5bc:	bfbf      	itttt	lt
 800d5be:	9b08      	ldrlt	r3, [sp, #32]
 800d5c0:	9608      	strlt	r6, [sp, #32]
 800d5c2:	1af2      	sublt	r2, r6, r3
 800d5c4:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800d5c6:	bfb7      	itett	lt
 800d5c8:	189b      	addlt	r3, r3, r2
 800d5ca:	1b9e      	subge	r6, r3, r6
 800d5cc:	930c      	strlt	r3, [sp, #48]	; 0x30
 800d5ce:	2600      	movlt	r6, #0
 800d5d0:	f1b9 0f00 	cmp.w	r9, #0
 800d5d4:	bfb9      	ittee	lt
 800d5d6:	eba8 0509 	sublt.w	r5, r8, r9
 800d5da:	2300      	movlt	r3, #0
 800d5dc:	4645      	movge	r5, r8
 800d5de:	464b      	movge	r3, r9
 800d5e0:	e6e2      	b.n	800d3a8 <_dtoa_r+0x710>
 800d5e2:	9e08      	ldr	r6, [sp, #32]
 800d5e4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d5e6:	4645      	mov	r5, r8
 800d5e8:	e6e7      	b.n	800d3ba <_dtoa_r+0x722>
 800d5ea:	9a08      	ldr	r2, [sp, #32]
 800d5ec:	e710      	b.n	800d410 <_dtoa_r+0x778>
 800d5ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d5f0:	2b01      	cmp	r3, #1
 800d5f2:	dc18      	bgt.n	800d626 <_dtoa_r+0x98e>
 800d5f4:	9b02      	ldr	r3, [sp, #8]
 800d5f6:	b9b3      	cbnz	r3, 800d626 <_dtoa_r+0x98e>
 800d5f8:	9b03      	ldr	r3, [sp, #12]
 800d5fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d5fe:	b9a3      	cbnz	r3, 800d62a <_dtoa_r+0x992>
 800d600:	9b03      	ldr	r3, [sp, #12]
 800d602:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d606:	0d1b      	lsrs	r3, r3, #20
 800d608:	051b      	lsls	r3, r3, #20
 800d60a:	b12b      	cbz	r3, 800d618 <_dtoa_r+0x980>
 800d60c:	9b07      	ldr	r3, [sp, #28]
 800d60e:	3301      	adds	r3, #1
 800d610:	9307      	str	r3, [sp, #28]
 800d612:	f108 0801 	add.w	r8, r8, #1
 800d616:	2301      	movs	r3, #1
 800d618:	9308      	str	r3, [sp, #32]
 800d61a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	f47f af11 	bne.w	800d444 <_dtoa_r+0x7ac>
 800d622:	2001      	movs	r0, #1
 800d624:	e716      	b.n	800d454 <_dtoa_r+0x7bc>
 800d626:	2300      	movs	r3, #0
 800d628:	e7f6      	b.n	800d618 <_dtoa_r+0x980>
 800d62a:	9b02      	ldr	r3, [sp, #8]
 800d62c:	e7f4      	b.n	800d618 <_dtoa_r+0x980>
 800d62e:	f43f af23 	beq.w	800d478 <_dtoa_r+0x7e0>
 800d632:	9a07      	ldr	r2, [sp, #28]
 800d634:	331c      	adds	r3, #28
 800d636:	441a      	add	r2, r3
 800d638:	4498      	add	r8, r3
 800d63a:	441d      	add	r5, r3
 800d63c:	4613      	mov	r3, r2
 800d63e:	e71a      	b.n	800d476 <_dtoa_r+0x7de>
 800d640:	4603      	mov	r3, r0
 800d642:	e7f6      	b.n	800d632 <_dtoa_r+0x99a>
 800d644:	40240000 	.word	0x40240000
 800d648:	f1b9 0f00 	cmp.w	r9, #0
 800d64c:	dc33      	bgt.n	800d6b6 <_dtoa_r+0xa1e>
 800d64e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d650:	2b02      	cmp	r3, #2
 800d652:	dd30      	ble.n	800d6b6 <_dtoa_r+0xa1e>
 800d654:	f8cd 9010 	str.w	r9, [sp, #16]
 800d658:	9b04      	ldr	r3, [sp, #16]
 800d65a:	b963      	cbnz	r3, 800d676 <_dtoa_r+0x9de>
 800d65c:	4631      	mov	r1, r6
 800d65e:	2205      	movs	r2, #5
 800d660:	4620      	mov	r0, r4
 800d662:	f001 fa3e 	bl	800eae2 <__multadd>
 800d666:	4601      	mov	r1, r0
 800d668:	4606      	mov	r6, r0
 800d66a:	4650      	mov	r0, sl
 800d66c:	f001 fc35 	bl	800eeda <__mcmp>
 800d670:	2800      	cmp	r0, #0
 800d672:	f73f ad5c 	bgt.w	800d12e <_dtoa_r+0x496>
 800d676:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d678:	9d06      	ldr	r5, [sp, #24]
 800d67a:	ea6f 0b03 	mvn.w	fp, r3
 800d67e:	2300      	movs	r3, #0
 800d680:	9307      	str	r3, [sp, #28]
 800d682:	4631      	mov	r1, r6
 800d684:	4620      	mov	r0, r4
 800d686:	f001 fa15 	bl	800eab4 <_Bfree>
 800d68a:	2f00      	cmp	r7, #0
 800d68c:	f43f ae4b 	beq.w	800d326 <_dtoa_r+0x68e>
 800d690:	9b07      	ldr	r3, [sp, #28]
 800d692:	b12b      	cbz	r3, 800d6a0 <_dtoa_r+0xa08>
 800d694:	42bb      	cmp	r3, r7
 800d696:	d003      	beq.n	800d6a0 <_dtoa_r+0xa08>
 800d698:	4619      	mov	r1, r3
 800d69a:	4620      	mov	r0, r4
 800d69c:	f001 fa0a 	bl	800eab4 <_Bfree>
 800d6a0:	4639      	mov	r1, r7
 800d6a2:	4620      	mov	r0, r4
 800d6a4:	f001 fa06 	bl	800eab4 <_Bfree>
 800d6a8:	e63d      	b.n	800d326 <_dtoa_r+0x68e>
 800d6aa:	2600      	movs	r6, #0
 800d6ac:	4637      	mov	r7, r6
 800d6ae:	e7e2      	b.n	800d676 <_dtoa_r+0x9de>
 800d6b0:	46bb      	mov	fp, r7
 800d6b2:	4637      	mov	r7, r6
 800d6b4:	e53b      	b.n	800d12e <_dtoa_r+0x496>
 800d6b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6b8:	f8cd 9010 	str.w	r9, [sp, #16]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	f47f af13 	bne.w	800d4e8 <_dtoa_r+0x850>
 800d6c2:	9d06      	ldr	r5, [sp, #24]
 800d6c4:	4631      	mov	r1, r6
 800d6c6:	4650      	mov	r0, sl
 800d6c8:	f7ff fa58 	bl	800cb7c <quorem>
 800d6cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d6d0:	f805 9b01 	strb.w	r9, [r5], #1
 800d6d4:	9b06      	ldr	r3, [sp, #24]
 800d6d6:	9a04      	ldr	r2, [sp, #16]
 800d6d8:	1aeb      	subs	r3, r5, r3
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	f300 8083 	bgt.w	800d7e6 <_dtoa_r+0xb4e>
 800d6e0:	9b06      	ldr	r3, [sp, #24]
 800d6e2:	2a01      	cmp	r2, #1
 800d6e4:	bfac      	ite	ge
 800d6e6:	189b      	addge	r3, r3, r2
 800d6e8:	3301      	addlt	r3, #1
 800d6ea:	4698      	mov	r8, r3
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	9307      	str	r3, [sp, #28]
 800d6f0:	4651      	mov	r1, sl
 800d6f2:	2201      	movs	r2, #1
 800d6f4:	4620      	mov	r0, r4
 800d6f6:	f001 fb9f 	bl	800ee38 <__lshift>
 800d6fa:	4631      	mov	r1, r6
 800d6fc:	4682      	mov	sl, r0
 800d6fe:	f001 fbec 	bl	800eeda <__mcmp>
 800d702:	2800      	cmp	r0, #0
 800d704:	dc35      	bgt.n	800d772 <_dtoa_r+0xada>
 800d706:	d102      	bne.n	800d70e <_dtoa_r+0xa76>
 800d708:	f019 0f01 	tst.w	r9, #1
 800d70c:	d131      	bne.n	800d772 <_dtoa_r+0xada>
 800d70e:	4645      	mov	r5, r8
 800d710:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d714:	2b30      	cmp	r3, #48	; 0x30
 800d716:	f105 32ff 	add.w	r2, r5, #4294967295
 800d71a:	d1b2      	bne.n	800d682 <_dtoa_r+0x9ea>
 800d71c:	4615      	mov	r5, r2
 800d71e:	e7f7      	b.n	800d710 <_dtoa_r+0xa78>
 800d720:	4638      	mov	r0, r7
 800d722:	e6ff      	b.n	800d524 <_dtoa_r+0x88c>
 800d724:	2301      	movs	r3, #1
 800d726:	e722      	b.n	800d56e <_dtoa_r+0x8d6>
 800d728:	9a02      	ldr	r2, [sp, #8]
 800d72a:	2a00      	cmp	r2, #0
 800d72c:	db04      	blt.n	800d738 <_dtoa_r+0xaa0>
 800d72e:	d129      	bne.n	800d784 <_dtoa_r+0xaec>
 800d730:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d732:	bb3a      	cbnz	r2, 800d784 <_dtoa_r+0xaec>
 800d734:	9a08      	ldr	r2, [sp, #32]
 800d736:	bb2a      	cbnz	r2, 800d784 <_dtoa_r+0xaec>
 800d738:	2b00      	cmp	r3, #0
 800d73a:	f77f af32 	ble.w	800d5a2 <_dtoa_r+0x90a>
 800d73e:	4651      	mov	r1, sl
 800d740:	2201      	movs	r2, #1
 800d742:	4620      	mov	r0, r4
 800d744:	f001 fb78 	bl	800ee38 <__lshift>
 800d748:	4631      	mov	r1, r6
 800d74a:	4682      	mov	sl, r0
 800d74c:	f001 fbc5 	bl	800eeda <__mcmp>
 800d750:	2800      	cmp	r0, #0
 800d752:	dc05      	bgt.n	800d760 <_dtoa_r+0xac8>
 800d754:	f47f af25 	bne.w	800d5a2 <_dtoa_r+0x90a>
 800d758:	f019 0f01 	tst.w	r9, #1
 800d75c:	f43f af21 	beq.w	800d5a2 <_dtoa_r+0x90a>
 800d760:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d764:	f47f af1b 	bne.w	800d59e <_dtoa_r+0x906>
 800d768:	2339      	movs	r3, #57	; 0x39
 800d76a:	f888 3000 	strb.w	r3, [r8]
 800d76e:	f108 0801 	add.w	r8, r8, #1
 800d772:	4645      	mov	r5, r8
 800d774:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d778:	2b39      	cmp	r3, #57	; 0x39
 800d77a:	f105 32ff 	add.w	r2, r5, #4294967295
 800d77e:	d03a      	beq.n	800d7f6 <_dtoa_r+0xb5e>
 800d780:	3301      	adds	r3, #1
 800d782:	e03f      	b.n	800d804 <_dtoa_r+0xb6c>
 800d784:	2b00      	cmp	r3, #0
 800d786:	f108 0501 	add.w	r5, r8, #1
 800d78a:	dd05      	ble.n	800d798 <_dtoa_r+0xb00>
 800d78c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d790:	d0ea      	beq.n	800d768 <_dtoa_r+0xad0>
 800d792:	f109 0901 	add.w	r9, r9, #1
 800d796:	e706      	b.n	800d5a6 <_dtoa_r+0x90e>
 800d798:	9b06      	ldr	r3, [sp, #24]
 800d79a:	9a04      	ldr	r2, [sp, #16]
 800d79c:	f805 9c01 	strb.w	r9, [r5, #-1]
 800d7a0:	1aeb      	subs	r3, r5, r3
 800d7a2:	4293      	cmp	r3, r2
 800d7a4:	46a8      	mov	r8, r5
 800d7a6:	d0a3      	beq.n	800d6f0 <_dtoa_r+0xa58>
 800d7a8:	4651      	mov	r1, sl
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	220a      	movs	r2, #10
 800d7ae:	4620      	mov	r0, r4
 800d7b0:	f001 f997 	bl	800eae2 <__multadd>
 800d7b4:	9b07      	ldr	r3, [sp, #28]
 800d7b6:	9907      	ldr	r1, [sp, #28]
 800d7b8:	42bb      	cmp	r3, r7
 800d7ba:	4682      	mov	sl, r0
 800d7bc:	f04f 0300 	mov.w	r3, #0
 800d7c0:	f04f 020a 	mov.w	r2, #10
 800d7c4:	4620      	mov	r0, r4
 800d7c6:	d104      	bne.n	800d7d2 <_dtoa_r+0xb3a>
 800d7c8:	f001 f98b 	bl	800eae2 <__multadd>
 800d7cc:	9007      	str	r0, [sp, #28]
 800d7ce:	4607      	mov	r7, r0
 800d7d0:	e6b0      	b.n	800d534 <_dtoa_r+0x89c>
 800d7d2:	f001 f986 	bl	800eae2 <__multadd>
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	9007      	str	r0, [sp, #28]
 800d7da:	220a      	movs	r2, #10
 800d7dc:	4639      	mov	r1, r7
 800d7de:	4620      	mov	r0, r4
 800d7e0:	f001 f97f 	bl	800eae2 <__multadd>
 800d7e4:	e7f3      	b.n	800d7ce <_dtoa_r+0xb36>
 800d7e6:	4651      	mov	r1, sl
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	220a      	movs	r2, #10
 800d7ec:	4620      	mov	r0, r4
 800d7ee:	f001 f978 	bl	800eae2 <__multadd>
 800d7f2:	4682      	mov	sl, r0
 800d7f4:	e766      	b.n	800d6c4 <_dtoa_r+0xa2c>
 800d7f6:	9b06      	ldr	r3, [sp, #24]
 800d7f8:	4293      	cmp	r3, r2
 800d7fa:	d105      	bne.n	800d808 <_dtoa_r+0xb70>
 800d7fc:	9a06      	ldr	r2, [sp, #24]
 800d7fe:	f10b 0b01 	add.w	fp, fp, #1
 800d802:	2331      	movs	r3, #49	; 0x31
 800d804:	7013      	strb	r3, [r2, #0]
 800d806:	e73c      	b.n	800d682 <_dtoa_r+0x9ea>
 800d808:	4615      	mov	r5, r2
 800d80a:	e7b3      	b.n	800d774 <_dtoa_r+0xadc>
 800d80c:	4b09      	ldr	r3, [pc, #36]	; (800d834 <_dtoa_r+0xb9c>)
 800d80e:	f7ff baa5 	b.w	800cd5c <_dtoa_r+0xc4>
 800d812:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d814:	2b00      	cmp	r3, #0
 800d816:	f47f aa7f 	bne.w	800cd18 <_dtoa_r+0x80>
 800d81a:	4b07      	ldr	r3, [pc, #28]	; (800d838 <_dtoa_r+0xba0>)
 800d81c:	f7ff ba9e 	b.w	800cd5c <_dtoa_r+0xc4>
 800d820:	9b04      	ldr	r3, [sp, #16]
 800d822:	2b00      	cmp	r3, #0
 800d824:	f73f af4d 	bgt.w	800d6c2 <_dtoa_r+0xa2a>
 800d828:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d82a:	2b02      	cmp	r3, #2
 800d82c:	f77f af49 	ble.w	800d6c2 <_dtoa_r+0xa2a>
 800d830:	e712      	b.n	800d658 <_dtoa_r+0x9c0>
 800d832:	bf00      	nop
 800d834:	08011006 	.word	0x08011006
 800d838:	08011028 	.word	0x08011028

0800d83c <__sflush_r>:
 800d83c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d840:	b293      	uxth	r3, r2
 800d842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d846:	4605      	mov	r5, r0
 800d848:	0718      	lsls	r0, r3, #28
 800d84a:	460c      	mov	r4, r1
 800d84c:	d461      	bmi.n	800d912 <__sflush_r+0xd6>
 800d84e:	684b      	ldr	r3, [r1, #4]
 800d850:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d854:	2b00      	cmp	r3, #0
 800d856:	818a      	strh	r2, [r1, #12]
 800d858:	dc05      	bgt.n	800d866 <__sflush_r+0x2a>
 800d85a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	dc02      	bgt.n	800d866 <__sflush_r+0x2a>
 800d860:	2000      	movs	r0, #0
 800d862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d866:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d868:	2e00      	cmp	r6, #0
 800d86a:	d0f9      	beq.n	800d860 <__sflush_r+0x24>
 800d86c:	2300      	movs	r3, #0
 800d86e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d872:	682f      	ldr	r7, [r5, #0]
 800d874:	602b      	str	r3, [r5, #0]
 800d876:	d037      	beq.n	800d8e8 <__sflush_r+0xac>
 800d878:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d87a:	89a3      	ldrh	r3, [r4, #12]
 800d87c:	075a      	lsls	r2, r3, #29
 800d87e:	d505      	bpl.n	800d88c <__sflush_r+0x50>
 800d880:	6863      	ldr	r3, [r4, #4]
 800d882:	1ac0      	subs	r0, r0, r3
 800d884:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d886:	b10b      	cbz	r3, 800d88c <__sflush_r+0x50>
 800d888:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d88a:	1ac0      	subs	r0, r0, r3
 800d88c:	2300      	movs	r3, #0
 800d88e:	4602      	mov	r2, r0
 800d890:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d892:	6a21      	ldr	r1, [r4, #32]
 800d894:	4628      	mov	r0, r5
 800d896:	47b0      	blx	r6
 800d898:	1c43      	adds	r3, r0, #1
 800d89a:	89a3      	ldrh	r3, [r4, #12]
 800d89c:	d106      	bne.n	800d8ac <__sflush_r+0x70>
 800d89e:	6829      	ldr	r1, [r5, #0]
 800d8a0:	291d      	cmp	r1, #29
 800d8a2:	d84f      	bhi.n	800d944 <__sflush_r+0x108>
 800d8a4:	4a2d      	ldr	r2, [pc, #180]	; (800d95c <__sflush_r+0x120>)
 800d8a6:	40ca      	lsrs	r2, r1
 800d8a8:	07d6      	lsls	r6, r2, #31
 800d8aa:	d54b      	bpl.n	800d944 <__sflush_r+0x108>
 800d8ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d8b0:	b21b      	sxth	r3, r3
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	6062      	str	r2, [r4, #4]
 800d8b6:	04d9      	lsls	r1, r3, #19
 800d8b8:	6922      	ldr	r2, [r4, #16]
 800d8ba:	81a3      	strh	r3, [r4, #12]
 800d8bc:	6022      	str	r2, [r4, #0]
 800d8be:	d504      	bpl.n	800d8ca <__sflush_r+0x8e>
 800d8c0:	1c42      	adds	r2, r0, #1
 800d8c2:	d101      	bne.n	800d8c8 <__sflush_r+0x8c>
 800d8c4:	682b      	ldr	r3, [r5, #0]
 800d8c6:	b903      	cbnz	r3, 800d8ca <__sflush_r+0x8e>
 800d8c8:	6560      	str	r0, [r4, #84]	; 0x54
 800d8ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d8cc:	602f      	str	r7, [r5, #0]
 800d8ce:	2900      	cmp	r1, #0
 800d8d0:	d0c6      	beq.n	800d860 <__sflush_r+0x24>
 800d8d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d8d6:	4299      	cmp	r1, r3
 800d8d8:	d002      	beq.n	800d8e0 <__sflush_r+0xa4>
 800d8da:	4628      	mov	r0, r5
 800d8dc:	f000 f9aa 	bl	800dc34 <_free_r>
 800d8e0:	2000      	movs	r0, #0
 800d8e2:	6360      	str	r0, [r4, #52]	; 0x34
 800d8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8e8:	6a21      	ldr	r1, [r4, #32]
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	4628      	mov	r0, r5
 800d8ee:	47b0      	blx	r6
 800d8f0:	1c41      	adds	r1, r0, #1
 800d8f2:	d1c2      	bne.n	800d87a <__sflush_r+0x3e>
 800d8f4:	682b      	ldr	r3, [r5, #0]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d0bf      	beq.n	800d87a <__sflush_r+0x3e>
 800d8fa:	2b1d      	cmp	r3, #29
 800d8fc:	d001      	beq.n	800d902 <__sflush_r+0xc6>
 800d8fe:	2b16      	cmp	r3, #22
 800d900:	d101      	bne.n	800d906 <__sflush_r+0xca>
 800d902:	602f      	str	r7, [r5, #0]
 800d904:	e7ac      	b.n	800d860 <__sflush_r+0x24>
 800d906:	89a3      	ldrh	r3, [r4, #12]
 800d908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d90c:	81a3      	strh	r3, [r4, #12]
 800d90e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d912:	690f      	ldr	r7, [r1, #16]
 800d914:	2f00      	cmp	r7, #0
 800d916:	d0a3      	beq.n	800d860 <__sflush_r+0x24>
 800d918:	079b      	lsls	r3, r3, #30
 800d91a:	680e      	ldr	r6, [r1, #0]
 800d91c:	bf08      	it	eq
 800d91e:	694b      	ldreq	r3, [r1, #20]
 800d920:	600f      	str	r7, [r1, #0]
 800d922:	bf18      	it	ne
 800d924:	2300      	movne	r3, #0
 800d926:	eba6 0807 	sub.w	r8, r6, r7
 800d92a:	608b      	str	r3, [r1, #8]
 800d92c:	f1b8 0f00 	cmp.w	r8, #0
 800d930:	dd96      	ble.n	800d860 <__sflush_r+0x24>
 800d932:	4643      	mov	r3, r8
 800d934:	463a      	mov	r2, r7
 800d936:	6a21      	ldr	r1, [r4, #32]
 800d938:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d93a:	4628      	mov	r0, r5
 800d93c:	47b0      	blx	r6
 800d93e:	2800      	cmp	r0, #0
 800d940:	dc07      	bgt.n	800d952 <__sflush_r+0x116>
 800d942:	89a3      	ldrh	r3, [r4, #12]
 800d944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d948:	81a3      	strh	r3, [r4, #12]
 800d94a:	f04f 30ff 	mov.w	r0, #4294967295
 800d94e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d952:	4407      	add	r7, r0
 800d954:	eba8 0800 	sub.w	r8, r8, r0
 800d958:	e7e8      	b.n	800d92c <__sflush_r+0xf0>
 800d95a:	bf00      	nop
 800d95c:	20400001 	.word	0x20400001

0800d960 <_fflush_r>:
 800d960:	b538      	push	{r3, r4, r5, lr}
 800d962:	690b      	ldr	r3, [r1, #16]
 800d964:	4605      	mov	r5, r0
 800d966:	460c      	mov	r4, r1
 800d968:	b913      	cbnz	r3, 800d970 <_fflush_r+0x10>
 800d96a:	2500      	movs	r5, #0
 800d96c:	4628      	mov	r0, r5
 800d96e:	bd38      	pop	{r3, r4, r5, pc}
 800d970:	b118      	cbz	r0, 800d97a <_fflush_r+0x1a>
 800d972:	6983      	ldr	r3, [r0, #24]
 800d974:	b90b      	cbnz	r3, 800d97a <_fflush_r+0x1a>
 800d976:	f000 f887 	bl	800da88 <__sinit>
 800d97a:	4b14      	ldr	r3, [pc, #80]	; (800d9cc <_fflush_r+0x6c>)
 800d97c:	429c      	cmp	r4, r3
 800d97e:	d11b      	bne.n	800d9b8 <_fflush_r+0x58>
 800d980:	686c      	ldr	r4, [r5, #4]
 800d982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d0ef      	beq.n	800d96a <_fflush_r+0xa>
 800d98a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d98c:	07d0      	lsls	r0, r2, #31
 800d98e:	d404      	bmi.n	800d99a <_fflush_r+0x3a>
 800d990:	0599      	lsls	r1, r3, #22
 800d992:	d402      	bmi.n	800d99a <_fflush_r+0x3a>
 800d994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d996:	f000 ffbe 	bl	800e916 <__retarget_lock_acquire_recursive>
 800d99a:	4628      	mov	r0, r5
 800d99c:	4621      	mov	r1, r4
 800d99e:	f7ff ff4d 	bl	800d83c <__sflush_r>
 800d9a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d9a4:	07da      	lsls	r2, r3, #31
 800d9a6:	4605      	mov	r5, r0
 800d9a8:	d4e0      	bmi.n	800d96c <_fflush_r+0xc>
 800d9aa:	89a3      	ldrh	r3, [r4, #12]
 800d9ac:	059b      	lsls	r3, r3, #22
 800d9ae:	d4dd      	bmi.n	800d96c <_fflush_r+0xc>
 800d9b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d9b2:	f000 ffb2 	bl	800e91a <__retarget_lock_release_recursive>
 800d9b6:	e7d9      	b.n	800d96c <_fflush_r+0xc>
 800d9b8:	4b05      	ldr	r3, [pc, #20]	; (800d9d0 <_fflush_r+0x70>)
 800d9ba:	429c      	cmp	r4, r3
 800d9bc:	d101      	bne.n	800d9c2 <_fflush_r+0x62>
 800d9be:	68ac      	ldr	r4, [r5, #8]
 800d9c0:	e7df      	b.n	800d982 <_fflush_r+0x22>
 800d9c2:	4b04      	ldr	r3, [pc, #16]	; (800d9d4 <_fflush_r+0x74>)
 800d9c4:	429c      	cmp	r4, r3
 800d9c6:	bf08      	it	eq
 800d9c8:	68ec      	ldreq	r4, [r5, #12]
 800d9ca:	e7da      	b.n	800d982 <_fflush_r+0x22>
 800d9cc:	08011058 	.word	0x08011058
 800d9d0:	08011078 	.word	0x08011078
 800d9d4:	08011038 	.word	0x08011038

0800d9d8 <_cleanup_r>:
 800d9d8:	4901      	ldr	r1, [pc, #4]	; (800d9e0 <_cleanup_r+0x8>)
 800d9da:	f000 bb35 	b.w	800e048 <_fwalk_reent>
 800d9de:	bf00      	nop
 800d9e0:	0801016d 	.word	0x0801016d

0800d9e4 <std.isra.0>:
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	b510      	push	{r4, lr}
 800d9e8:	4604      	mov	r4, r0
 800d9ea:	6003      	str	r3, [r0, #0]
 800d9ec:	6043      	str	r3, [r0, #4]
 800d9ee:	6083      	str	r3, [r0, #8]
 800d9f0:	8181      	strh	r1, [r0, #12]
 800d9f2:	6643      	str	r3, [r0, #100]	; 0x64
 800d9f4:	81c2      	strh	r2, [r0, #14]
 800d9f6:	6103      	str	r3, [r0, #16]
 800d9f8:	6143      	str	r3, [r0, #20]
 800d9fa:	6183      	str	r3, [r0, #24]
 800d9fc:	4619      	mov	r1, r3
 800d9fe:	2208      	movs	r2, #8
 800da00:	305c      	adds	r0, #92	; 0x5c
 800da02:	f7fc fb0e 	bl	800a022 <memset>
 800da06:	4b05      	ldr	r3, [pc, #20]	; (800da1c <std.isra.0+0x38>)
 800da08:	6263      	str	r3, [r4, #36]	; 0x24
 800da0a:	4b05      	ldr	r3, [pc, #20]	; (800da20 <std.isra.0+0x3c>)
 800da0c:	62a3      	str	r3, [r4, #40]	; 0x28
 800da0e:	4b05      	ldr	r3, [pc, #20]	; (800da24 <std.isra.0+0x40>)
 800da10:	62e3      	str	r3, [r4, #44]	; 0x2c
 800da12:	4b05      	ldr	r3, [pc, #20]	; (800da28 <std.isra.0+0x44>)
 800da14:	6224      	str	r4, [r4, #32]
 800da16:	6323      	str	r3, [r4, #48]	; 0x30
 800da18:	bd10      	pop	{r4, pc}
 800da1a:	bf00      	nop
 800da1c:	0800f571 	.word	0x0800f571
 800da20:	0800f597 	.word	0x0800f597
 800da24:	0800f5cf 	.word	0x0800f5cf
 800da28:	0800f5f3 	.word	0x0800f5f3

0800da2c <__sfmoreglue>:
 800da2c:	b570      	push	{r4, r5, r6, lr}
 800da2e:	1e4a      	subs	r2, r1, #1
 800da30:	2568      	movs	r5, #104	; 0x68
 800da32:	4355      	muls	r5, r2
 800da34:	460e      	mov	r6, r1
 800da36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800da3a:	f7fc f8d9 	bl	8009bf0 <_malloc_r>
 800da3e:	4604      	mov	r4, r0
 800da40:	b140      	cbz	r0, 800da54 <__sfmoreglue+0x28>
 800da42:	2100      	movs	r1, #0
 800da44:	e880 0042 	stmia.w	r0, {r1, r6}
 800da48:	300c      	adds	r0, #12
 800da4a:	60a0      	str	r0, [r4, #8]
 800da4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800da50:	f7fc fae7 	bl	800a022 <memset>
 800da54:	4620      	mov	r0, r4
 800da56:	bd70      	pop	{r4, r5, r6, pc}

0800da58 <__sfp_lock_acquire>:
 800da58:	4801      	ldr	r0, [pc, #4]	; (800da60 <__sfp_lock_acquire+0x8>)
 800da5a:	f000 bf5c 	b.w	800e916 <__retarget_lock_acquire_recursive>
 800da5e:	bf00      	nop
 800da60:	200021f8 	.word	0x200021f8

0800da64 <__sfp_lock_release>:
 800da64:	4801      	ldr	r0, [pc, #4]	; (800da6c <__sfp_lock_release+0x8>)
 800da66:	f000 bf58 	b.w	800e91a <__retarget_lock_release_recursive>
 800da6a:	bf00      	nop
 800da6c:	200021f8 	.word	0x200021f8

0800da70 <__sinit_lock_acquire>:
 800da70:	4801      	ldr	r0, [pc, #4]	; (800da78 <__sinit_lock_acquire+0x8>)
 800da72:	f000 bf50 	b.w	800e916 <__retarget_lock_acquire_recursive>
 800da76:	bf00      	nop
 800da78:	200021f3 	.word	0x200021f3

0800da7c <__sinit_lock_release>:
 800da7c:	4801      	ldr	r0, [pc, #4]	; (800da84 <__sinit_lock_release+0x8>)
 800da7e:	f000 bf4c 	b.w	800e91a <__retarget_lock_release_recursive>
 800da82:	bf00      	nop
 800da84:	200021f3 	.word	0x200021f3

0800da88 <__sinit>:
 800da88:	b510      	push	{r4, lr}
 800da8a:	4604      	mov	r4, r0
 800da8c:	f7ff fff0 	bl	800da70 <__sinit_lock_acquire>
 800da90:	69a3      	ldr	r3, [r4, #24]
 800da92:	b11b      	cbz	r3, 800da9c <__sinit+0x14>
 800da94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da98:	f7ff bff0 	b.w	800da7c <__sinit_lock_release>
 800da9c:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 800daa0:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 800daa4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800daa8:	4b12      	ldr	r3, [pc, #72]	; (800daf4 <__sinit+0x6c>)
 800daaa:	4a13      	ldr	r2, [pc, #76]	; (800daf8 <__sinit+0x70>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	62a2      	str	r2, [r4, #40]	; 0x28
 800dab0:	429c      	cmp	r4, r3
 800dab2:	bf04      	itt	eq
 800dab4:	2301      	moveq	r3, #1
 800dab6:	61a3      	streq	r3, [r4, #24]
 800dab8:	4620      	mov	r0, r4
 800daba:	f000 f81f 	bl	800dafc <__sfp>
 800dabe:	6060      	str	r0, [r4, #4]
 800dac0:	4620      	mov	r0, r4
 800dac2:	f000 f81b 	bl	800dafc <__sfp>
 800dac6:	60a0      	str	r0, [r4, #8]
 800dac8:	4620      	mov	r0, r4
 800daca:	f000 f817 	bl	800dafc <__sfp>
 800dace:	2200      	movs	r2, #0
 800dad0:	60e0      	str	r0, [r4, #12]
 800dad2:	2104      	movs	r1, #4
 800dad4:	6860      	ldr	r0, [r4, #4]
 800dad6:	f7ff ff85 	bl	800d9e4 <std.isra.0>
 800dada:	2201      	movs	r2, #1
 800dadc:	2109      	movs	r1, #9
 800dade:	68a0      	ldr	r0, [r4, #8]
 800dae0:	f7ff ff80 	bl	800d9e4 <std.isra.0>
 800dae4:	2202      	movs	r2, #2
 800dae6:	2112      	movs	r1, #18
 800dae8:	68e0      	ldr	r0, [r4, #12]
 800daea:	f7ff ff7b 	bl	800d9e4 <std.isra.0>
 800daee:	2301      	movs	r3, #1
 800daf0:	61a3      	str	r3, [r4, #24]
 800daf2:	e7cf      	b.n	800da94 <__sinit+0xc>
 800daf4:	08010e7c 	.word	0x08010e7c
 800daf8:	0800d9d9 	.word	0x0800d9d9

0800dafc <__sfp>:
 800dafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dafe:	4607      	mov	r7, r0
 800db00:	f7ff ffaa 	bl	800da58 <__sfp_lock_acquire>
 800db04:	4b1f      	ldr	r3, [pc, #124]	; (800db84 <__sfp+0x88>)
 800db06:	681e      	ldr	r6, [r3, #0]
 800db08:	69b3      	ldr	r3, [r6, #24]
 800db0a:	b913      	cbnz	r3, 800db12 <__sfp+0x16>
 800db0c:	4630      	mov	r0, r6
 800db0e:	f7ff ffbb 	bl	800da88 <__sinit>
 800db12:	36d8      	adds	r6, #216	; 0xd8
 800db14:	68b4      	ldr	r4, [r6, #8]
 800db16:	6873      	ldr	r3, [r6, #4]
 800db18:	3b01      	subs	r3, #1
 800db1a:	d503      	bpl.n	800db24 <__sfp+0x28>
 800db1c:	6833      	ldr	r3, [r6, #0]
 800db1e:	b133      	cbz	r3, 800db2e <__sfp+0x32>
 800db20:	6836      	ldr	r6, [r6, #0]
 800db22:	e7f7      	b.n	800db14 <__sfp+0x18>
 800db24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800db28:	b17d      	cbz	r5, 800db4a <__sfp+0x4e>
 800db2a:	3468      	adds	r4, #104	; 0x68
 800db2c:	e7f4      	b.n	800db18 <__sfp+0x1c>
 800db2e:	2104      	movs	r1, #4
 800db30:	4638      	mov	r0, r7
 800db32:	f7ff ff7b 	bl	800da2c <__sfmoreglue>
 800db36:	4604      	mov	r4, r0
 800db38:	6030      	str	r0, [r6, #0]
 800db3a:	2800      	cmp	r0, #0
 800db3c:	d1f0      	bne.n	800db20 <__sfp+0x24>
 800db3e:	f7ff ff91 	bl	800da64 <__sfp_lock_release>
 800db42:	230c      	movs	r3, #12
 800db44:	603b      	str	r3, [r7, #0]
 800db46:	4620      	mov	r0, r4
 800db48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800db4e:	81e3      	strh	r3, [r4, #14]
 800db50:	2301      	movs	r3, #1
 800db52:	81a3      	strh	r3, [r4, #12]
 800db54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800db58:	6665      	str	r5, [r4, #100]	; 0x64
 800db5a:	f000 fed9 	bl	800e910 <__retarget_lock_init_recursive>
 800db5e:	f7ff ff81 	bl	800da64 <__sfp_lock_release>
 800db62:	6025      	str	r5, [r4, #0]
 800db64:	60a5      	str	r5, [r4, #8]
 800db66:	6065      	str	r5, [r4, #4]
 800db68:	6125      	str	r5, [r4, #16]
 800db6a:	6165      	str	r5, [r4, #20]
 800db6c:	61a5      	str	r5, [r4, #24]
 800db6e:	2208      	movs	r2, #8
 800db70:	4629      	mov	r1, r5
 800db72:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800db76:	f7fc fa54 	bl	800a022 <memset>
 800db7a:	6365      	str	r5, [r4, #52]	; 0x34
 800db7c:	63a5      	str	r5, [r4, #56]	; 0x38
 800db7e:	64a5      	str	r5, [r4, #72]	; 0x48
 800db80:	64e5      	str	r5, [r4, #76]	; 0x4c
 800db82:	e7e0      	b.n	800db46 <__sfp+0x4a>
 800db84:	08010e7c 	.word	0x08010e7c

0800db88 <_malloc_trim_r>:
 800db88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db8c:	4f25      	ldr	r7, [pc, #148]	; (800dc24 <_malloc_trim_r+0x9c>)
 800db8e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800dc30 <_malloc_trim_r+0xa8>
 800db92:	4689      	mov	r9, r1
 800db94:	4606      	mov	r6, r0
 800db96:	f7fc fca9 	bl	800a4ec <__malloc_lock>
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	685d      	ldr	r5, [r3, #4]
 800db9e:	f1a8 0411 	sub.w	r4, r8, #17
 800dba2:	f025 0503 	bic.w	r5, r5, #3
 800dba6:	eba4 0409 	sub.w	r4, r4, r9
 800dbaa:	442c      	add	r4, r5
 800dbac:	fbb4 f4f8 	udiv	r4, r4, r8
 800dbb0:	3c01      	subs	r4, #1
 800dbb2:	fb08 f404 	mul.w	r4, r8, r4
 800dbb6:	4544      	cmp	r4, r8
 800dbb8:	da05      	bge.n	800dbc6 <_malloc_trim_r+0x3e>
 800dbba:	4630      	mov	r0, r6
 800dbbc:	f7fc fc9c 	bl	800a4f8 <__malloc_unlock>
 800dbc0:	2000      	movs	r0, #0
 800dbc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbc6:	2100      	movs	r1, #0
 800dbc8:	4630      	mov	r0, r6
 800dbca:	f7fc fd1b 	bl	800a604 <_sbrk_r>
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	442b      	add	r3, r5
 800dbd2:	4298      	cmp	r0, r3
 800dbd4:	d1f1      	bne.n	800dbba <_malloc_trim_r+0x32>
 800dbd6:	4261      	negs	r1, r4
 800dbd8:	4630      	mov	r0, r6
 800dbda:	f7fc fd13 	bl	800a604 <_sbrk_r>
 800dbde:	3001      	adds	r0, #1
 800dbe0:	d110      	bne.n	800dc04 <_malloc_trim_r+0x7c>
 800dbe2:	2100      	movs	r1, #0
 800dbe4:	4630      	mov	r0, r6
 800dbe6:	f7fc fd0d 	bl	800a604 <_sbrk_r>
 800dbea:	68ba      	ldr	r2, [r7, #8]
 800dbec:	1a83      	subs	r3, r0, r2
 800dbee:	2b0f      	cmp	r3, #15
 800dbf0:	dde3      	ble.n	800dbba <_malloc_trim_r+0x32>
 800dbf2:	490d      	ldr	r1, [pc, #52]	; (800dc28 <_malloc_trim_r+0xa0>)
 800dbf4:	6809      	ldr	r1, [r1, #0]
 800dbf6:	1a40      	subs	r0, r0, r1
 800dbf8:	490c      	ldr	r1, [pc, #48]	; (800dc2c <_malloc_trim_r+0xa4>)
 800dbfa:	f043 0301 	orr.w	r3, r3, #1
 800dbfe:	6008      	str	r0, [r1, #0]
 800dc00:	6053      	str	r3, [r2, #4]
 800dc02:	e7da      	b.n	800dbba <_malloc_trim_r+0x32>
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	4a09      	ldr	r2, [pc, #36]	; (800dc2c <_malloc_trim_r+0xa4>)
 800dc08:	1b2d      	subs	r5, r5, r4
 800dc0a:	f045 0501 	orr.w	r5, r5, #1
 800dc0e:	605d      	str	r5, [r3, #4]
 800dc10:	6813      	ldr	r3, [r2, #0]
 800dc12:	4630      	mov	r0, r6
 800dc14:	1b1c      	subs	r4, r3, r4
 800dc16:	6014      	str	r4, [r2, #0]
 800dc18:	f7fc fc6e 	bl	800a4f8 <__malloc_unlock>
 800dc1c:	2001      	movs	r0, #1
 800dc1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc22:	bf00      	nop
 800dc24:	20000104 	.word	0x20000104
 800dc28:	2000050c 	.word	0x2000050c
 800dc2c:	200006f0 	.word	0x200006f0
 800dc30:	00000080 	.word	0x00000080

0800dc34 <_free_r>:
 800dc34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc38:	4604      	mov	r4, r0
 800dc3a:	4688      	mov	r8, r1
 800dc3c:	2900      	cmp	r1, #0
 800dc3e:	f000 80ab 	beq.w	800dd98 <_free_r+0x164>
 800dc42:	f7fc fc53 	bl	800a4ec <__malloc_lock>
 800dc46:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800dc4a:	4d54      	ldr	r5, [pc, #336]	; (800dd9c <_free_r+0x168>)
 800dc4c:	f022 0001 	bic.w	r0, r2, #1
 800dc50:	f1a8 0308 	sub.w	r3, r8, #8
 800dc54:	181f      	adds	r7, r3, r0
 800dc56:	68a9      	ldr	r1, [r5, #8]
 800dc58:	687e      	ldr	r6, [r7, #4]
 800dc5a:	428f      	cmp	r7, r1
 800dc5c:	f026 0603 	bic.w	r6, r6, #3
 800dc60:	f002 0201 	and.w	r2, r2, #1
 800dc64:	d11b      	bne.n	800dc9e <_free_r+0x6a>
 800dc66:	4430      	add	r0, r6
 800dc68:	b93a      	cbnz	r2, 800dc7a <_free_r+0x46>
 800dc6a:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800dc6e:	1a9b      	subs	r3, r3, r2
 800dc70:	4410      	add	r0, r2
 800dc72:	6899      	ldr	r1, [r3, #8]
 800dc74:	68da      	ldr	r2, [r3, #12]
 800dc76:	60ca      	str	r2, [r1, #12]
 800dc78:	6091      	str	r1, [r2, #8]
 800dc7a:	f040 0201 	orr.w	r2, r0, #1
 800dc7e:	605a      	str	r2, [r3, #4]
 800dc80:	60ab      	str	r3, [r5, #8]
 800dc82:	4b47      	ldr	r3, [pc, #284]	; (800dda0 <_free_r+0x16c>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	4298      	cmp	r0, r3
 800dc88:	d304      	bcc.n	800dc94 <_free_r+0x60>
 800dc8a:	4b46      	ldr	r3, [pc, #280]	; (800dda4 <_free_r+0x170>)
 800dc8c:	4620      	mov	r0, r4
 800dc8e:	6819      	ldr	r1, [r3, #0]
 800dc90:	f7ff ff7a 	bl	800db88 <_malloc_trim_r>
 800dc94:	4620      	mov	r0, r4
 800dc96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc9a:	f7fc bc2d 	b.w	800a4f8 <__malloc_unlock>
 800dc9e:	607e      	str	r6, [r7, #4]
 800dca0:	2a00      	cmp	r2, #0
 800dca2:	d139      	bne.n	800dd18 <_free_r+0xe4>
 800dca4:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800dca8:	1a5b      	subs	r3, r3, r1
 800dcaa:	4408      	add	r0, r1
 800dcac:	6899      	ldr	r1, [r3, #8]
 800dcae:	f105 0e08 	add.w	lr, r5, #8
 800dcb2:	4571      	cmp	r1, lr
 800dcb4:	d032      	beq.n	800dd1c <_free_r+0xe8>
 800dcb6:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800dcba:	f8c1 e00c 	str.w	lr, [r1, #12]
 800dcbe:	f8ce 1008 	str.w	r1, [lr, #8]
 800dcc2:	19b9      	adds	r1, r7, r6
 800dcc4:	6849      	ldr	r1, [r1, #4]
 800dcc6:	07c9      	lsls	r1, r1, #31
 800dcc8:	d40a      	bmi.n	800dce0 <_free_r+0xac>
 800dcca:	4430      	add	r0, r6
 800dccc:	68b9      	ldr	r1, [r7, #8]
 800dcce:	bb3a      	cbnz	r2, 800dd20 <_free_r+0xec>
 800dcd0:	4e35      	ldr	r6, [pc, #212]	; (800dda8 <_free_r+0x174>)
 800dcd2:	42b1      	cmp	r1, r6
 800dcd4:	d124      	bne.n	800dd20 <_free_r+0xec>
 800dcd6:	616b      	str	r3, [r5, #20]
 800dcd8:	612b      	str	r3, [r5, #16]
 800dcda:	2201      	movs	r2, #1
 800dcdc:	60d9      	str	r1, [r3, #12]
 800dcde:	6099      	str	r1, [r3, #8]
 800dce0:	f040 0101 	orr.w	r1, r0, #1
 800dce4:	6059      	str	r1, [r3, #4]
 800dce6:	5018      	str	r0, [r3, r0]
 800dce8:	2a00      	cmp	r2, #0
 800dcea:	d1d3      	bne.n	800dc94 <_free_r+0x60>
 800dcec:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800dcf0:	d21a      	bcs.n	800dd28 <_free_r+0xf4>
 800dcf2:	08c0      	lsrs	r0, r0, #3
 800dcf4:	1081      	asrs	r1, r0, #2
 800dcf6:	2201      	movs	r2, #1
 800dcf8:	408a      	lsls	r2, r1
 800dcfa:	6869      	ldr	r1, [r5, #4]
 800dcfc:	3001      	adds	r0, #1
 800dcfe:	430a      	orrs	r2, r1
 800dd00:	606a      	str	r2, [r5, #4]
 800dd02:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800dd06:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800dd0a:	6099      	str	r1, [r3, #8]
 800dd0c:	3a08      	subs	r2, #8
 800dd0e:	60da      	str	r2, [r3, #12]
 800dd10:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800dd14:	60cb      	str	r3, [r1, #12]
 800dd16:	e7bd      	b.n	800dc94 <_free_r+0x60>
 800dd18:	2200      	movs	r2, #0
 800dd1a:	e7d2      	b.n	800dcc2 <_free_r+0x8e>
 800dd1c:	2201      	movs	r2, #1
 800dd1e:	e7d0      	b.n	800dcc2 <_free_r+0x8e>
 800dd20:	68fe      	ldr	r6, [r7, #12]
 800dd22:	60ce      	str	r6, [r1, #12]
 800dd24:	60b1      	str	r1, [r6, #8]
 800dd26:	e7db      	b.n	800dce0 <_free_r+0xac>
 800dd28:	0a42      	lsrs	r2, r0, #9
 800dd2a:	2a04      	cmp	r2, #4
 800dd2c:	d813      	bhi.n	800dd56 <_free_r+0x122>
 800dd2e:	0982      	lsrs	r2, r0, #6
 800dd30:	3238      	adds	r2, #56	; 0x38
 800dd32:	1c51      	adds	r1, r2, #1
 800dd34:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800dd38:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800dd3c:	428e      	cmp	r6, r1
 800dd3e:	d124      	bne.n	800dd8a <_free_r+0x156>
 800dd40:	2001      	movs	r0, #1
 800dd42:	1092      	asrs	r2, r2, #2
 800dd44:	fa00 f202 	lsl.w	r2, r0, r2
 800dd48:	6868      	ldr	r0, [r5, #4]
 800dd4a:	4302      	orrs	r2, r0
 800dd4c:	606a      	str	r2, [r5, #4]
 800dd4e:	60de      	str	r6, [r3, #12]
 800dd50:	6099      	str	r1, [r3, #8]
 800dd52:	60b3      	str	r3, [r6, #8]
 800dd54:	e7de      	b.n	800dd14 <_free_r+0xe0>
 800dd56:	2a14      	cmp	r2, #20
 800dd58:	d801      	bhi.n	800dd5e <_free_r+0x12a>
 800dd5a:	325b      	adds	r2, #91	; 0x5b
 800dd5c:	e7e9      	b.n	800dd32 <_free_r+0xfe>
 800dd5e:	2a54      	cmp	r2, #84	; 0x54
 800dd60:	d802      	bhi.n	800dd68 <_free_r+0x134>
 800dd62:	0b02      	lsrs	r2, r0, #12
 800dd64:	326e      	adds	r2, #110	; 0x6e
 800dd66:	e7e4      	b.n	800dd32 <_free_r+0xfe>
 800dd68:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800dd6c:	d802      	bhi.n	800dd74 <_free_r+0x140>
 800dd6e:	0bc2      	lsrs	r2, r0, #15
 800dd70:	3277      	adds	r2, #119	; 0x77
 800dd72:	e7de      	b.n	800dd32 <_free_r+0xfe>
 800dd74:	f240 5154 	movw	r1, #1364	; 0x554
 800dd78:	428a      	cmp	r2, r1
 800dd7a:	bf9a      	itte	ls
 800dd7c:	0c82      	lsrls	r2, r0, #18
 800dd7e:	327c      	addls	r2, #124	; 0x7c
 800dd80:	227e      	movhi	r2, #126	; 0x7e
 800dd82:	e7d6      	b.n	800dd32 <_free_r+0xfe>
 800dd84:	6889      	ldr	r1, [r1, #8]
 800dd86:	428e      	cmp	r6, r1
 800dd88:	d004      	beq.n	800dd94 <_free_r+0x160>
 800dd8a:	684a      	ldr	r2, [r1, #4]
 800dd8c:	f022 0203 	bic.w	r2, r2, #3
 800dd90:	4290      	cmp	r0, r2
 800dd92:	d3f7      	bcc.n	800dd84 <_free_r+0x150>
 800dd94:	68ce      	ldr	r6, [r1, #12]
 800dd96:	e7da      	b.n	800dd4e <_free_r+0x11a>
 800dd98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd9c:	20000104 	.word	0x20000104
 800dda0:	20000510 	.word	0x20000510
 800dda4:	20000720 	.word	0x20000720
 800dda8:	2000010c 	.word	0x2000010c

0800ddac <__sfvwrite_r>:
 800ddac:	6893      	ldr	r3, [r2, #8]
 800ddae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddb2:	4607      	mov	r7, r0
 800ddb4:	460c      	mov	r4, r1
 800ddb6:	4690      	mov	r8, r2
 800ddb8:	b91b      	cbnz	r3, 800ddc2 <__sfvwrite_r+0x16>
 800ddba:	2000      	movs	r0, #0
 800ddbc:	b003      	add	sp, #12
 800ddbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddc2:	898b      	ldrh	r3, [r1, #12]
 800ddc4:	0718      	lsls	r0, r3, #28
 800ddc6:	d526      	bpl.n	800de16 <__sfvwrite_r+0x6a>
 800ddc8:	690b      	ldr	r3, [r1, #16]
 800ddca:	b323      	cbz	r3, 800de16 <__sfvwrite_r+0x6a>
 800ddcc:	89a3      	ldrh	r3, [r4, #12]
 800ddce:	f8d8 6000 	ldr.w	r6, [r8]
 800ddd2:	f013 0902 	ands.w	r9, r3, #2
 800ddd6:	d02d      	beq.n	800de34 <__sfvwrite_r+0x88>
 800ddd8:	f04f 0a00 	mov.w	sl, #0
 800dddc:	f8df b264 	ldr.w	fp, [pc, #612]	; 800e044 <__sfvwrite_r+0x298>
 800dde0:	46d1      	mov	r9, sl
 800dde2:	f1b9 0f00 	cmp.w	r9, #0
 800dde6:	d01f      	beq.n	800de28 <__sfvwrite_r+0x7c>
 800dde8:	45d9      	cmp	r9, fp
 800ddea:	464b      	mov	r3, r9
 800ddec:	4652      	mov	r2, sl
 800ddee:	bf28      	it	cs
 800ddf0:	465b      	movcs	r3, fp
 800ddf2:	6a21      	ldr	r1, [r4, #32]
 800ddf4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800ddf6:	4638      	mov	r0, r7
 800ddf8:	47a8      	blx	r5
 800ddfa:	2800      	cmp	r0, #0
 800ddfc:	f340 8089 	ble.w	800df12 <__sfvwrite_r+0x166>
 800de00:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800de04:	4482      	add	sl, r0
 800de06:	eba9 0900 	sub.w	r9, r9, r0
 800de0a:	1a18      	subs	r0, r3, r0
 800de0c:	f8c8 0008 	str.w	r0, [r8, #8]
 800de10:	2800      	cmp	r0, #0
 800de12:	d1e6      	bne.n	800dde2 <__sfvwrite_r+0x36>
 800de14:	e7d1      	b.n	800ddba <__sfvwrite_r+0xe>
 800de16:	4621      	mov	r1, r4
 800de18:	4638      	mov	r0, r7
 800de1a:	f7fe fe2d 	bl	800ca78 <__swsetup_r>
 800de1e:	2800      	cmp	r0, #0
 800de20:	d0d4      	beq.n	800ddcc <__sfvwrite_r+0x20>
 800de22:	f04f 30ff 	mov.w	r0, #4294967295
 800de26:	e7c9      	b.n	800ddbc <__sfvwrite_r+0x10>
 800de28:	f8d6 a000 	ldr.w	sl, [r6]
 800de2c:	f8d6 9004 	ldr.w	r9, [r6, #4]
 800de30:	3608      	adds	r6, #8
 800de32:	e7d6      	b.n	800dde2 <__sfvwrite_r+0x36>
 800de34:	f013 0301 	ands.w	r3, r3, #1
 800de38:	d043      	beq.n	800dec2 <__sfvwrite_r+0x116>
 800de3a:	4648      	mov	r0, r9
 800de3c:	46ca      	mov	sl, r9
 800de3e:	46cb      	mov	fp, r9
 800de40:	f1bb 0f00 	cmp.w	fp, #0
 800de44:	f000 80d9 	beq.w	800dffa <__sfvwrite_r+0x24e>
 800de48:	b950      	cbnz	r0, 800de60 <__sfvwrite_r+0xb4>
 800de4a:	465a      	mov	r2, fp
 800de4c:	210a      	movs	r1, #10
 800de4e:	4650      	mov	r0, sl
 800de50:	f7f2 f9d6 	bl	8000200 <memchr>
 800de54:	2800      	cmp	r0, #0
 800de56:	f000 80d5 	beq.w	800e004 <__sfvwrite_r+0x258>
 800de5a:	3001      	adds	r0, #1
 800de5c:	eba0 090a 	sub.w	r9, r0, sl
 800de60:	6820      	ldr	r0, [r4, #0]
 800de62:	6921      	ldr	r1, [r4, #16]
 800de64:	6962      	ldr	r2, [r4, #20]
 800de66:	45d9      	cmp	r9, fp
 800de68:	464b      	mov	r3, r9
 800de6a:	bf28      	it	cs
 800de6c:	465b      	movcs	r3, fp
 800de6e:	4288      	cmp	r0, r1
 800de70:	f240 80cb 	bls.w	800e00a <__sfvwrite_r+0x25e>
 800de74:	68a5      	ldr	r5, [r4, #8]
 800de76:	4415      	add	r5, r2
 800de78:	42ab      	cmp	r3, r5
 800de7a:	f340 80c6 	ble.w	800e00a <__sfvwrite_r+0x25e>
 800de7e:	4651      	mov	r1, sl
 800de80:	462a      	mov	r2, r5
 800de82:	f000 fdc9 	bl	800ea18 <memmove>
 800de86:	6823      	ldr	r3, [r4, #0]
 800de88:	442b      	add	r3, r5
 800de8a:	6023      	str	r3, [r4, #0]
 800de8c:	4621      	mov	r1, r4
 800de8e:	4638      	mov	r0, r7
 800de90:	f7ff fd66 	bl	800d960 <_fflush_r>
 800de94:	2800      	cmp	r0, #0
 800de96:	d13c      	bne.n	800df12 <__sfvwrite_r+0x166>
 800de98:	ebb9 0905 	subs.w	r9, r9, r5
 800de9c:	f040 80cf 	bne.w	800e03e <__sfvwrite_r+0x292>
 800dea0:	4621      	mov	r1, r4
 800dea2:	4638      	mov	r0, r7
 800dea4:	f7ff fd5c 	bl	800d960 <_fflush_r>
 800dea8:	2800      	cmp	r0, #0
 800deaa:	d132      	bne.n	800df12 <__sfvwrite_r+0x166>
 800deac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800deb0:	44aa      	add	sl, r5
 800deb2:	ebab 0b05 	sub.w	fp, fp, r5
 800deb6:	1b5d      	subs	r5, r3, r5
 800deb8:	f8c8 5008 	str.w	r5, [r8, #8]
 800debc:	2d00      	cmp	r5, #0
 800debe:	d1bf      	bne.n	800de40 <__sfvwrite_r+0x94>
 800dec0:	e77b      	b.n	800ddba <__sfvwrite_r+0xe>
 800dec2:	4699      	mov	r9, r3
 800dec4:	469a      	mov	sl, r3
 800dec6:	f1ba 0f00 	cmp.w	sl, #0
 800deca:	d027      	beq.n	800df1c <__sfvwrite_r+0x170>
 800decc:	89a2      	ldrh	r2, [r4, #12]
 800dece:	68a5      	ldr	r5, [r4, #8]
 800ded0:	0591      	lsls	r1, r2, #22
 800ded2:	d565      	bpl.n	800dfa0 <__sfvwrite_r+0x1f4>
 800ded4:	45aa      	cmp	sl, r5
 800ded6:	d33b      	bcc.n	800df50 <__sfvwrite_r+0x1a4>
 800ded8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dedc:	d036      	beq.n	800df4c <__sfvwrite_r+0x1a0>
 800dede:	6921      	ldr	r1, [r4, #16]
 800dee0:	6823      	ldr	r3, [r4, #0]
 800dee2:	1a5b      	subs	r3, r3, r1
 800dee4:	9301      	str	r3, [sp, #4]
 800dee6:	6963      	ldr	r3, [r4, #20]
 800dee8:	2002      	movs	r0, #2
 800deea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800deee:	fb93 fbf0 	sdiv	fp, r3, r0
 800def2:	9b01      	ldr	r3, [sp, #4]
 800def4:	1c58      	adds	r0, r3, #1
 800def6:	4450      	add	r0, sl
 800def8:	4583      	cmp	fp, r0
 800defa:	bf38      	it	cc
 800defc:	4683      	movcc	fp, r0
 800defe:	0553      	lsls	r3, r2, #21
 800df00:	d53e      	bpl.n	800df80 <__sfvwrite_r+0x1d4>
 800df02:	4659      	mov	r1, fp
 800df04:	4638      	mov	r0, r7
 800df06:	f7fb fe73 	bl	8009bf0 <_malloc_r>
 800df0a:	4605      	mov	r5, r0
 800df0c:	b950      	cbnz	r0, 800df24 <__sfvwrite_r+0x178>
 800df0e:	230c      	movs	r3, #12
 800df10:	603b      	str	r3, [r7, #0]
 800df12:	89a3      	ldrh	r3, [r4, #12]
 800df14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df18:	81a3      	strh	r3, [r4, #12]
 800df1a:	e782      	b.n	800de22 <__sfvwrite_r+0x76>
 800df1c:	e896 0600 	ldmia.w	r6, {r9, sl}
 800df20:	3608      	adds	r6, #8
 800df22:	e7d0      	b.n	800dec6 <__sfvwrite_r+0x11a>
 800df24:	9a01      	ldr	r2, [sp, #4]
 800df26:	6921      	ldr	r1, [r4, #16]
 800df28:	f7fc f870 	bl	800a00c <memcpy>
 800df2c:	89a2      	ldrh	r2, [r4, #12]
 800df2e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800df32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800df36:	81a2      	strh	r2, [r4, #12]
 800df38:	9b01      	ldr	r3, [sp, #4]
 800df3a:	6125      	str	r5, [r4, #16]
 800df3c:	441d      	add	r5, r3
 800df3e:	ebab 0303 	sub.w	r3, fp, r3
 800df42:	6025      	str	r5, [r4, #0]
 800df44:	f8c4 b014 	str.w	fp, [r4, #20]
 800df48:	4655      	mov	r5, sl
 800df4a:	60a3      	str	r3, [r4, #8]
 800df4c:	45aa      	cmp	sl, r5
 800df4e:	d200      	bcs.n	800df52 <__sfvwrite_r+0x1a6>
 800df50:	4655      	mov	r5, sl
 800df52:	462a      	mov	r2, r5
 800df54:	4649      	mov	r1, r9
 800df56:	6820      	ldr	r0, [r4, #0]
 800df58:	f000 fd5e 	bl	800ea18 <memmove>
 800df5c:	68a3      	ldr	r3, [r4, #8]
 800df5e:	1b5b      	subs	r3, r3, r5
 800df60:	60a3      	str	r3, [r4, #8]
 800df62:	6823      	ldr	r3, [r4, #0]
 800df64:	441d      	add	r5, r3
 800df66:	6025      	str	r5, [r4, #0]
 800df68:	4655      	mov	r5, sl
 800df6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800df6e:	44a9      	add	r9, r5
 800df70:	ebaa 0a05 	sub.w	sl, sl, r5
 800df74:	1b5d      	subs	r5, r3, r5
 800df76:	f8c8 5008 	str.w	r5, [r8, #8]
 800df7a:	2d00      	cmp	r5, #0
 800df7c:	d1a3      	bne.n	800dec6 <__sfvwrite_r+0x11a>
 800df7e:	e71c      	b.n	800ddba <__sfvwrite_r+0xe>
 800df80:	465a      	mov	r2, fp
 800df82:	4638      	mov	r0, r7
 800df84:	f001 f94a 	bl	800f21c <_realloc_r>
 800df88:	4605      	mov	r5, r0
 800df8a:	2800      	cmp	r0, #0
 800df8c:	d1d4      	bne.n	800df38 <__sfvwrite_r+0x18c>
 800df8e:	6921      	ldr	r1, [r4, #16]
 800df90:	4638      	mov	r0, r7
 800df92:	f7ff fe4f 	bl	800dc34 <_free_r>
 800df96:	89a3      	ldrh	r3, [r4, #12]
 800df98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df9c:	81a3      	strh	r3, [r4, #12]
 800df9e:	e7b6      	b.n	800df0e <__sfvwrite_r+0x162>
 800dfa0:	6820      	ldr	r0, [r4, #0]
 800dfa2:	6923      	ldr	r3, [r4, #16]
 800dfa4:	4298      	cmp	r0, r3
 800dfa6:	d802      	bhi.n	800dfae <__sfvwrite_r+0x202>
 800dfa8:	6962      	ldr	r2, [r4, #20]
 800dfaa:	4592      	cmp	sl, r2
 800dfac:	d215      	bcs.n	800dfda <__sfvwrite_r+0x22e>
 800dfae:	4555      	cmp	r5, sl
 800dfb0:	bf28      	it	cs
 800dfb2:	4655      	movcs	r5, sl
 800dfb4:	462a      	mov	r2, r5
 800dfb6:	4649      	mov	r1, r9
 800dfb8:	f000 fd2e 	bl	800ea18 <memmove>
 800dfbc:	68a3      	ldr	r3, [r4, #8]
 800dfbe:	6822      	ldr	r2, [r4, #0]
 800dfc0:	1b5b      	subs	r3, r3, r5
 800dfc2:	442a      	add	r2, r5
 800dfc4:	60a3      	str	r3, [r4, #8]
 800dfc6:	6022      	str	r2, [r4, #0]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d1ce      	bne.n	800df6a <__sfvwrite_r+0x1be>
 800dfcc:	4621      	mov	r1, r4
 800dfce:	4638      	mov	r0, r7
 800dfd0:	f7ff fcc6 	bl	800d960 <_fflush_r>
 800dfd4:	2800      	cmp	r0, #0
 800dfd6:	d0c8      	beq.n	800df6a <__sfvwrite_r+0x1be>
 800dfd8:	e79b      	b.n	800df12 <__sfvwrite_r+0x166>
 800dfda:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800dfde:	4553      	cmp	r3, sl
 800dfe0:	bf28      	it	cs
 800dfe2:	4653      	movcs	r3, sl
 800dfe4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800dfe6:	fb93 f3f2 	sdiv	r3, r3, r2
 800dfea:	6a21      	ldr	r1, [r4, #32]
 800dfec:	4353      	muls	r3, r2
 800dfee:	4638      	mov	r0, r7
 800dff0:	464a      	mov	r2, r9
 800dff2:	47a8      	blx	r5
 800dff4:	1e05      	subs	r5, r0, #0
 800dff6:	dcb8      	bgt.n	800df6a <__sfvwrite_r+0x1be>
 800dff8:	e78b      	b.n	800df12 <__sfvwrite_r+0x166>
 800dffa:	e896 0c00 	ldmia.w	r6, {sl, fp}
 800dffe:	2000      	movs	r0, #0
 800e000:	3608      	adds	r6, #8
 800e002:	e71d      	b.n	800de40 <__sfvwrite_r+0x94>
 800e004:	f10b 0901 	add.w	r9, fp, #1
 800e008:	e72a      	b.n	800de60 <__sfvwrite_r+0xb4>
 800e00a:	4293      	cmp	r3, r2
 800e00c:	db09      	blt.n	800e022 <__sfvwrite_r+0x276>
 800e00e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800e010:	6a21      	ldr	r1, [r4, #32]
 800e012:	4613      	mov	r3, r2
 800e014:	4638      	mov	r0, r7
 800e016:	4652      	mov	r2, sl
 800e018:	47a8      	blx	r5
 800e01a:	1e05      	subs	r5, r0, #0
 800e01c:	f73f af3c 	bgt.w	800de98 <__sfvwrite_r+0xec>
 800e020:	e777      	b.n	800df12 <__sfvwrite_r+0x166>
 800e022:	461a      	mov	r2, r3
 800e024:	4651      	mov	r1, sl
 800e026:	9301      	str	r3, [sp, #4]
 800e028:	f000 fcf6 	bl	800ea18 <memmove>
 800e02c:	9b01      	ldr	r3, [sp, #4]
 800e02e:	68a2      	ldr	r2, [r4, #8]
 800e030:	1ad2      	subs	r2, r2, r3
 800e032:	60a2      	str	r2, [r4, #8]
 800e034:	6822      	ldr	r2, [r4, #0]
 800e036:	441a      	add	r2, r3
 800e038:	6022      	str	r2, [r4, #0]
 800e03a:	461d      	mov	r5, r3
 800e03c:	e72c      	b.n	800de98 <__sfvwrite_r+0xec>
 800e03e:	2001      	movs	r0, #1
 800e040:	e734      	b.n	800deac <__sfvwrite_r+0x100>
 800e042:	bf00      	nop
 800e044:	7ffffc00 	.word	0x7ffffc00

0800e048 <_fwalk_reent>:
 800e048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e04c:	4680      	mov	r8, r0
 800e04e:	4689      	mov	r9, r1
 800e050:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 800e054:	2600      	movs	r6, #0
 800e056:	b914      	cbnz	r4, 800e05e <_fwalk_reent+0x16>
 800e058:	4630      	mov	r0, r6
 800e05a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e05e:	68a5      	ldr	r5, [r4, #8]
 800e060:	6867      	ldr	r7, [r4, #4]
 800e062:	3f01      	subs	r7, #1
 800e064:	d501      	bpl.n	800e06a <_fwalk_reent+0x22>
 800e066:	6824      	ldr	r4, [r4, #0]
 800e068:	e7f5      	b.n	800e056 <_fwalk_reent+0xe>
 800e06a:	89ab      	ldrh	r3, [r5, #12]
 800e06c:	2b01      	cmp	r3, #1
 800e06e:	d907      	bls.n	800e080 <_fwalk_reent+0x38>
 800e070:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e074:	3301      	adds	r3, #1
 800e076:	d003      	beq.n	800e080 <_fwalk_reent+0x38>
 800e078:	4629      	mov	r1, r5
 800e07a:	4640      	mov	r0, r8
 800e07c:	47c8      	blx	r9
 800e07e:	4306      	orrs	r6, r0
 800e080:	3568      	adds	r5, #104	; 0x68
 800e082:	e7ee      	b.n	800e062 <_fwalk_reent+0x1a>

0800e084 <rshift>:
 800e084:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e086:	6906      	ldr	r6, [r0, #16]
 800e088:	114b      	asrs	r3, r1, #5
 800e08a:	42b3      	cmp	r3, r6
 800e08c:	f100 0514 	add.w	r5, r0, #20
 800e090:	da2b      	bge.n	800e0ea <rshift+0x66>
 800e092:	f011 011f 	ands.w	r1, r1, #31
 800e096:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 800e09a:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 800e09e:	d108      	bne.n	800e0b2 <rshift+0x2e>
 800e0a0:	4629      	mov	r1, r5
 800e0a2:	42b2      	cmp	r2, r6
 800e0a4:	460b      	mov	r3, r1
 800e0a6:	d210      	bcs.n	800e0ca <rshift+0x46>
 800e0a8:	f852 3b04 	ldr.w	r3, [r2], #4
 800e0ac:	f841 3b04 	str.w	r3, [r1], #4
 800e0b0:	e7f7      	b.n	800e0a2 <rshift+0x1e>
 800e0b2:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800e0b6:	f1c1 0e20 	rsb	lr, r1, #32
 800e0ba:	3204      	adds	r2, #4
 800e0bc:	40cc      	lsrs	r4, r1
 800e0be:	462b      	mov	r3, r5
 800e0c0:	42b2      	cmp	r2, r6
 800e0c2:	d308      	bcc.n	800e0d6 <rshift+0x52>
 800e0c4:	601c      	str	r4, [r3, #0]
 800e0c6:	b104      	cbz	r4, 800e0ca <rshift+0x46>
 800e0c8:	3304      	adds	r3, #4
 800e0ca:	1b5b      	subs	r3, r3, r5
 800e0cc:	109b      	asrs	r3, r3, #2
 800e0ce:	6103      	str	r3, [r0, #16]
 800e0d0:	b903      	cbnz	r3, 800e0d4 <rshift+0x50>
 800e0d2:	6143      	str	r3, [r0, #20]
 800e0d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0d6:	6817      	ldr	r7, [r2, #0]
 800e0d8:	fa07 f70e 	lsl.w	r7, r7, lr
 800e0dc:	433c      	orrs	r4, r7
 800e0de:	f843 4b04 	str.w	r4, [r3], #4
 800e0e2:	f852 4b04 	ldr.w	r4, [r2], #4
 800e0e6:	40cc      	lsrs	r4, r1
 800e0e8:	e7ea      	b.n	800e0c0 <rshift+0x3c>
 800e0ea:	462b      	mov	r3, r5
 800e0ec:	e7ed      	b.n	800e0ca <rshift+0x46>

0800e0ee <__hexdig_fun>:
 800e0ee:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e0f2:	2b09      	cmp	r3, #9
 800e0f4:	d802      	bhi.n	800e0fc <__hexdig_fun+0xe>
 800e0f6:	3820      	subs	r0, #32
 800e0f8:	b2c0      	uxtb	r0, r0
 800e0fa:	4770      	bx	lr
 800e0fc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e100:	2b05      	cmp	r3, #5
 800e102:	d801      	bhi.n	800e108 <__hexdig_fun+0x1a>
 800e104:	3847      	subs	r0, #71	; 0x47
 800e106:	e7f7      	b.n	800e0f8 <__hexdig_fun+0xa>
 800e108:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e10c:	2b05      	cmp	r3, #5
 800e10e:	d801      	bhi.n	800e114 <__hexdig_fun+0x26>
 800e110:	3827      	subs	r0, #39	; 0x27
 800e112:	e7f1      	b.n	800e0f8 <__hexdig_fun+0xa>
 800e114:	2000      	movs	r0, #0
 800e116:	4770      	bx	lr

0800e118 <__gethex>:
 800e118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e11c:	b08b      	sub	sp, #44	; 0x2c
 800e11e:	468a      	mov	sl, r1
 800e120:	9002      	str	r0, [sp, #8]
 800e122:	9816      	ldr	r0, [sp, #88]	; 0x58
 800e124:	9306      	str	r3, [sp, #24]
 800e126:	4690      	mov	r8, r2
 800e128:	f000 fbe2 	bl	800e8f0 <__localeconv_l>
 800e12c:	6803      	ldr	r3, [r0, #0]
 800e12e:	9303      	str	r3, [sp, #12]
 800e130:	4618      	mov	r0, r3
 800e132:	f7f2 f857 	bl	80001e4 <strlen>
 800e136:	9b03      	ldr	r3, [sp, #12]
 800e138:	9001      	str	r0, [sp, #4]
 800e13a:	4403      	add	r3, r0
 800e13c:	f04f 0b00 	mov.w	fp, #0
 800e140:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e144:	9307      	str	r3, [sp, #28]
 800e146:	f8da 3000 	ldr.w	r3, [sl]
 800e14a:	3302      	adds	r3, #2
 800e14c:	461f      	mov	r7, r3
 800e14e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e152:	2830      	cmp	r0, #48	; 0x30
 800e154:	d06c      	beq.n	800e230 <__gethex+0x118>
 800e156:	f7ff ffca 	bl	800e0ee <__hexdig_fun>
 800e15a:	4604      	mov	r4, r0
 800e15c:	2800      	cmp	r0, #0
 800e15e:	d16a      	bne.n	800e236 <__gethex+0x11e>
 800e160:	9a01      	ldr	r2, [sp, #4]
 800e162:	9903      	ldr	r1, [sp, #12]
 800e164:	4638      	mov	r0, r7
 800e166:	f001 fa50 	bl	800f60a <strncmp>
 800e16a:	2800      	cmp	r0, #0
 800e16c:	d166      	bne.n	800e23c <__gethex+0x124>
 800e16e:	9b01      	ldr	r3, [sp, #4]
 800e170:	5cf8      	ldrb	r0, [r7, r3]
 800e172:	18fe      	adds	r6, r7, r3
 800e174:	f7ff ffbb 	bl	800e0ee <__hexdig_fun>
 800e178:	2800      	cmp	r0, #0
 800e17a:	d062      	beq.n	800e242 <__gethex+0x12a>
 800e17c:	4633      	mov	r3, r6
 800e17e:	7818      	ldrb	r0, [r3, #0]
 800e180:	2830      	cmp	r0, #48	; 0x30
 800e182:	461f      	mov	r7, r3
 800e184:	f103 0301 	add.w	r3, r3, #1
 800e188:	d0f9      	beq.n	800e17e <__gethex+0x66>
 800e18a:	f7ff ffb0 	bl	800e0ee <__hexdig_fun>
 800e18e:	fab0 f580 	clz	r5, r0
 800e192:	096d      	lsrs	r5, r5, #5
 800e194:	4634      	mov	r4, r6
 800e196:	f04f 0b01 	mov.w	fp, #1
 800e19a:	463a      	mov	r2, r7
 800e19c:	4616      	mov	r6, r2
 800e19e:	3201      	adds	r2, #1
 800e1a0:	7830      	ldrb	r0, [r6, #0]
 800e1a2:	f7ff ffa4 	bl	800e0ee <__hexdig_fun>
 800e1a6:	2800      	cmp	r0, #0
 800e1a8:	d1f8      	bne.n	800e19c <__gethex+0x84>
 800e1aa:	9a01      	ldr	r2, [sp, #4]
 800e1ac:	9903      	ldr	r1, [sp, #12]
 800e1ae:	4630      	mov	r0, r6
 800e1b0:	f001 fa2b 	bl	800f60a <strncmp>
 800e1b4:	b950      	cbnz	r0, 800e1cc <__gethex+0xb4>
 800e1b6:	b954      	cbnz	r4, 800e1ce <__gethex+0xb6>
 800e1b8:	9b01      	ldr	r3, [sp, #4]
 800e1ba:	18f4      	adds	r4, r6, r3
 800e1bc:	4622      	mov	r2, r4
 800e1be:	4616      	mov	r6, r2
 800e1c0:	3201      	adds	r2, #1
 800e1c2:	7830      	ldrb	r0, [r6, #0]
 800e1c4:	f7ff ff93 	bl	800e0ee <__hexdig_fun>
 800e1c8:	2800      	cmp	r0, #0
 800e1ca:	d1f8      	bne.n	800e1be <__gethex+0xa6>
 800e1cc:	b10c      	cbz	r4, 800e1d2 <__gethex+0xba>
 800e1ce:	1ba4      	subs	r4, r4, r6
 800e1d0:	00a4      	lsls	r4, r4, #2
 800e1d2:	7833      	ldrb	r3, [r6, #0]
 800e1d4:	2b50      	cmp	r3, #80	; 0x50
 800e1d6:	d001      	beq.n	800e1dc <__gethex+0xc4>
 800e1d8:	2b70      	cmp	r3, #112	; 0x70
 800e1da:	d140      	bne.n	800e25e <__gethex+0x146>
 800e1dc:	7873      	ldrb	r3, [r6, #1]
 800e1de:	2b2b      	cmp	r3, #43	; 0x2b
 800e1e0:	d035      	beq.n	800e24e <__gethex+0x136>
 800e1e2:	2b2d      	cmp	r3, #45	; 0x2d
 800e1e4:	d02f      	beq.n	800e246 <__gethex+0x12e>
 800e1e6:	1c71      	adds	r1, r6, #1
 800e1e8:	f04f 0900 	mov.w	r9, #0
 800e1ec:	7808      	ldrb	r0, [r1, #0]
 800e1ee:	f7ff ff7e 	bl	800e0ee <__hexdig_fun>
 800e1f2:	1e43      	subs	r3, r0, #1
 800e1f4:	b2db      	uxtb	r3, r3
 800e1f6:	2b18      	cmp	r3, #24
 800e1f8:	d831      	bhi.n	800e25e <__gethex+0x146>
 800e1fa:	f1a0 0210 	sub.w	r2, r0, #16
 800e1fe:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e202:	f7ff ff74 	bl	800e0ee <__hexdig_fun>
 800e206:	1e43      	subs	r3, r0, #1
 800e208:	b2db      	uxtb	r3, r3
 800e20a:	2b18      	cmp	r3, #24
 800e20c:	d922      	bls.n	800e254 <__gethex+0x13c>
 800e20e:	f1b9 0f00 	cmp.w	r9, #0
 800e212:	d000      	beq.n	800e216 <__gethex+0xfe>
 800e214:	4252      	negs	r2, r2
 800e216:	4414      	add	r4, r2
 800e218:	f8ca 1000 	str.w	r1, [sl]
 800e21c:	b30d      	cbz	r5, 800e262 <__gethex+0x14a>
 800e21e:	f1bb 0f00 	cmp.w	fp, #0
 800e222:	bf14      	ite	ne
 800e224:	2700      	movne	r7, #0
 800e226:	2706      	moveq	r7, #6
 800e228:	4638      	mov	r0, r7
 800e22a:	b00b      	add	sp, #44	; 0x2c
 800e22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e230:	f10b 0b01 	add.w	fp, fp, #1
 800e234:	e78a      	b.n	800e14c <__gethex+0x34>
 800e236:	2500      	movs	r5, #0
 800e238:	462c      	mov	r4, r5
 800e23a:	e7ae      	b.n	800e19a <__gethex+0x82>
 800e23c:	463e      	mov	r6, r7
 800e23e:	2501      	movs	r5, #1
 800e240:	e7c7      	b.n	800e1d2 <__gethex+0xba>
 800e242:	4604      	mov	r4, r0
 800e244:	e7fb      	b.n	800e23e <__gethex+0x126>
 800e246:	f04f 0901 	mov.w	r9, #1
 800e24a:	1cb1      	adds	r1, r6, #2
 800e24c:	e7ce      	b.n	800e1ec <__gethex+0xd4>
 800e24e:	f04f 0900 	mov.w	r9, #0
 800e252:	e7fa      	b.n	800e24a <__gethex+0x132>
 800e254:	230a      	movs	r3, #10
 800e256:	fb03 0202 	mla	r2, r3, r2, r0
 800e25a:	3a10      	subs	r2, #16
 800e25c:	e7cf      	b.n	800e1fe <__gethex+0xe6>
 800e25e:	4631      	mov	r1, r6
 800e260:	e7da      	b.n	800e218 <__gethex+0x100>
 800e262:	1bf3      	subs	r3, r6, r7
 800e264:	3b01      	subs	r3, #1
 800e266:	4629      	mov	r1, r5
 800e268:	2b07      	cmp	r3, #7
 800e26a:	dc49      	bgt.n	800e300 <__gethex+0x1e8>
 800e26c:	9802      	ldr	r0, [sp, #8]
 800e26e:	f000 fbed 	bl	800ea4c <_Balloc>
 800e272:	9b01      	ldr	r3, [sp, #4]
 800e274:	f100 0914 	add.w	r9, r0, #20
 800e278:	f04f 0b00 	mov.w	fp, #0
 800e27c:	f1c3 0301 	rsb	r3, r3, #1
 800e280:	4605      	mov	r5, r0
 800e282:	f8cd 9010 	str.w	r9, [sp, #16]
 800e286:	46da      	mov	sl, fp
 800e288:	9308      	str	r3, [sp, #32]
 800e28a:	42b7      	cmp	r7, r6
 800e28c:	d33b      	bcc.n	800e306 <__gethex+0x1ee>
 800e28e:	9804      	ldr	r0, [sp, #16]
 800e290:	f840 ab04 	str.w	sl, [r0], #4
 800e294:	eba0 0009 	sub.w	r0, r0, r9
 800e298:	1080      	asrs	r0, r0, #2
 800e29a:	6128      	str	r0, [r5, #16]
 800e29c:	0147      	lsls	r7, r0, #5
 800e29e:	4650      	mov	r0, sl
 800e2a0:	f000 fc98 	bl	800ebd4 <__hi0bits>
 800e2a4:	f8d8 6000 	ldr.w	r6, [r8]
 800e2a8:	1a3f      	subs	r7, r7, r0
 800e2aa:	42b7      	cmp	r7, r6
 800e2ac:	dd64      	ble.n	800e378 <__gethex+0x260>
 800e2ae:	1bbf      	subs	r7, r7, r6
 800e2b0:	4639      	mov	r1, r7
 800e2b2:	4628      	mov	r0, r5
 800e2b4:	f000 ff91 	bl	800f1da <__any_on>
 800e2b8:	4682      	mov	sl, r0
 800e2ba:	b178      	cbz	r0, 800e2dc <__gethex+0x1c4>
 800e2bc:	1e7b      	subs	r3, r7, #1
 800e2be:	1159      	asrs	r1, r3, #5
 800e2c0:	f003 021f 	and.w	r2, r3, #31
 800e2c4:	f04f 0a01 	mov.w	sl, #1
 800e2c8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e2cc:	fa0a f202 	lsl.w	r2, sl, r2
 800e2d0:	420a      	tst	r2, r1
 800e2d2:	d003      	beq.n	800e2dc <__gethex+0x1c4>
 800e2d4:	4553      	cmp	r3, sl
 800e2d6:	dc46      	bgt.n	800e366 <__gethex+0x24e>
 800e2d8:	f04f 0a02 	mov.w	sl, #2
 800e2dc:	4639      	mov	r1, r7
 800e2de:	4628      	mov	r0, r5
 800e2e0:	f7ff fed0 	bl	800e084 <rshift>
 800e2e4:	443c      	add	r4, r7
 800e2e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e2ea:	429c      	cmp	r4, r3
 800e2ec:	dd52      	ble.n	800e394 <__gethex+0x27c>
 800e2ee:	4629      	mov	r1, r5
 800e2f0:	9802      	ldr	r0, [sp, #8]
 800e2f2:	f000 fbdf 	bl	800eab4 <_Bfree>
 800e2f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	6013      	str	r3, [r2, #0]
 800e2fc:	27a3      	movs	r7, #163	; 0xa3
 800e2fe:	e793      	b.n	800e228 <__gethex+0x110>
 800e300:	3101      	adds	r1, #1
 800e302:	105b      	asrs	r3, r3, #1
 800e304:	e7b0      	b.n	800e268 <__gethex+0x150>
 800e306:	1e73      	subs	r3, r6, #1
 800e308:	9305      	str	r3, [sp, #20]
 800e30a:	9a07      	ldr	r2, [sp, #28]
 800e30c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e310:	4293      	cmp	r3, r2
 800e312:	d018      	beq.n	800e346 <__gethex+0x22e>
 800e314:	f1bb 0f20 	cmp.w	fp, #32
 800e318:	d107      	bne.n	800e32a <__gethex+0x212>
 800e31a:	9b04      	ldr	r3, [sp, #16]
 800e31c:	f8c3 a000 	str.w	sl, [r3]
 800e320:	3304      	adds	r3, #4
 800e322:	f04f 0a00 	mov.w	sl, #0
 800e326:	9304      	str	r3, [sp, #16]
 800e328:	46d3      	mov	fp, sl
 800e32a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e32e:	f7ff fede 	bl	800e0ee <__hexdig_fun>
 800e332:	f000 000f 	and.w	r0, r0, #15
 800e336:	fa00 f00b 	lsl.w	r0, r0, fp
 800e33a:	ea4a 0a00 	orr.w	sl, sl, r0
 800e33e:	f10b 0b04 	add.w	fp, fp, #4
 800e342:	9b05      	ldr	r3, [sp, #20]
 800e344:	e00d      	b.n	800e362 <__gethex+0x24a>
 800e346:	9b05      	ldr	r3, [sp, #20]
 800e348:	9a08      	ldr	r2, [sp, #32]
 800e34a:	4413      	add	r3, r2
 800e34c:	429f      	cmp	r7, r3
 800e34e:	d8e1      	bhi.n	800e314 <__gethex+0x1fc>
 800e350:	4618      	mov	r0, r3
 800e352:	9a01      	ldr	r2, [sp, #4]
 800e354:	9903      	ldr	r1, [sp, #12]
 800e356:	9309      	str	r3, [sp, #36]	; 0x24
 800e358:	f001 f957 	bl	800f60a <strncmp>
 800e35c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e35e:	2800      	cmp	r0, #0
 800e360:	d1d8      	bne.n	800e314 <__gethex+0x1fc>
 800e362:	461e      	mov	r6, r3
 800e364:	e791      	b.n	800e28a <__gethex+0x172>
 800e366:	1eb9      	subs	r1, r7, #2
 800e368:	4628      	mov	r0, r5
 800e36a:	f000 ff36 	bl	800f1da <__any_on>
 800e36e:	2800      	cmp	r0, #0
 800e370:	d0b2      	beq.n	800e2d8 <__gethex+0x1c0>
 800e372:	f04f 0a03 	mov.w	sl, #3
 800e376:	e7b1      	b.n	800e2dc <__gethex+0x1c4>
 800e378:	da09      	bge.n	800e38e <__gethex+0x276>
 800e37a:	1bf7      	subs	r7, r6, r7
 800e37c:	4629      	mov	r1, r5
 800e37e:	463a      	mov	r2, r7
 800e380:	9802      	ldr	r0, [sp, #8]
 800e382:	f000 fd59 	bl	800ee38 <__lshift>
 800e386:	1be4      	subs	r4, r4, r7
 800e388:	4605      	mov	r5, r0
 800e38a:	f100 0914 	add.w	r9, r0, #20
 800e38e:	f04f 0a00 	mov.w	sl, #0
 800e392:	e7a8      	b.n	800e2e6 <__gethex+0x1ce>
 800e394:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e398:	4284      	cmp	r4, r0
 800e39a:	da6a      	bge.n	800e472 <__gethex+0x35a>
 800e39c:	1b04      	subs	r4, r0, r4
 800e39e:	42a6      	cmp	r6, r4
 800e3a0:	dc2e      	bgt.n	800e400 <__gethex+0x2e8>
 800e3a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e3a6:	2b02      	cmp	r3, #2
 800e3a8:	d022      	beq.n	800e3f0 <__gethex+0x2d8>
 800e3aa:	2b03      	cmp	r3, #3
 800e3ac:	d024      	beq.n	800e3f8 <__gethex+0x2e0>
 800e3ae:	2b01      	cmp	r3, #1
 800e3b0:	d115      	bne.n	800e3de <__gethex+0x2c6>
 800e3b2:	42a6      	cmp	r6, r4
 800e3b4:	d113      	bne.n	800e3de <__gethex+0x2c6>
 800e3b6:	2e01      	cmp	r6, #1
 800e3b8:	dc0b      	bgt.n	800e3d2 <__gethex+0x2ba>
 800e3ba:	9a06      	ldr	r2, [sp, #24]
 800e3bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e3c0:	6013      	str	r3, [r2, #0]
 800e3c2:	2301      	movs	r3, #1
 800e3c4:	612b      	str	r3, [r5, #16]
 800e3c6:	f8c9 3000 	str.w	r3, [r9]
 800e3ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e3cc:	2762      	movs	r7, #98	; 0x62
 800e3ce:	601d      	str	r5, [r3, #0]
 800e3d0:	e72a      	b.n	800e228 <__gethex+0x110>
 800e3d2:	1e71      	subs	r1, r6, #1
 800e3d4:	4628      	mov	r0, r5
 800e3d6:	f000 ff00 	bl	800f1da <__any_on>
 800e3da:	2800      	cmp	r0, #0
 800e3dc:	d1ed      	bne.n	800e3ba <__gethex+0x2a2>
 800e3de:	4629      	mov	r1, r5
 800e3e0:	9802      	ldr	r0, [sp, #8]
 800e3e2:	f000 fb67 	bl	800eab4 <_Bfree>
 800e3e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	6013      	str	r3, [r2, #0]
 800e3ec:	2750      	movs	r7, #80	; 0x50
 800e3ee:	e71b      	b.n	800e228 <__gethex+0x110>
 800e3f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d0e1      	beq.n	800e3ba <__gethex+0x2a2>
 800e3f6:	e7f2      	b.n	800e3de <__gethex+0x2c6>
 800e3f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d1dd      	bne.n	800e3ba <__gethex+0x2a2>
 800e3fe:	e7ee      	b.n	800e3de <__gethex+0x2c6>
 800e400:	1e67      	subs	r7, r4, #1
 800e402:	f1ba 0f00 	cmp.w	sl, #0
 800e406:	d131      	bne.n	800e46c <__gethex+0x354>
 800e408:	b127      	cbz	r7, 800e414 <__gethex+0x2fc>
 800e40a:	4639      	mov	r1, r7
 800e40c:	4628      	mov	r0, r5
 800e40e:	f000 fee4 	bl	800f1da <__any_on>
 800e412:	4682      	mov	sl, r0
 800e414:	117a      	asrs	r2, r7, #5
 800e416:	2301      	movs	r3, #1
 800e418:	f007 071f 	and.w	r7, r7, #31
 800e41c:	fa03 f707 	lsl.w	r7, r3, r7
 800e420:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800e424:	4621      	mov	r1, r4
 800e426:	421f      	tst	r7, r3
 800e428:	4628      	mov	r0, r5
 800e42a:	bf18      	it	ne
 800e42c:	f04a 0a02 	orrne.w	sl, sl, #2
 800e430:	1b36      	subs	r6, r6, r4
 800e432:	f7ff fe27 	bl	800e084 <rshift>
 800e436:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800e43a:	2702      	movs	r7, #2
 800e43c:	f1ba 0f00 	cmp.w	sl, #0
 800e440:	d045      	beq.n	800e4ce <__gethex+0x3b6>
 800e442:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e446:	2b02      	cmp	r3, #2
 800e448:	d015      	beq.n	800e476 <__gethex+0x35e>
 800e44a:	2b03      	cmp	r3, #3
 800e44c:	d017      	beq.n	800e47e <__gethex+0x366>
 800e44e:	2b01      	cmp	r3, #1
 800e450:	d109      	bne.n	800e466 <__gethex+0x34e>
 800e452:	f01a 0f02 	tst.w	sl, #2
 800e456:	d006      	beq.n	800e466 <__gethex+0x34e>
 800e458:	f8d9 3000 	ldr.w	r3, [r9]
 800e45c:	ea4a 0a03 	orr.w	sl, sl, r3
 800e460:	f01a 0f01 	tst.w	sl, #1
 800e464:	d10e      	bne.n	800e484 <__gethex+0x36c>
 800e466:	f047 0710 	orr.w	r7, r7, #16
 800e46a:	e030      	b.n	800e4ce <__gethex+0x3b6>
 800e46c:	f04f 0a01 	mov.w	sl, #1
 800e470:	e7d0      	b.n	800e414 <__gethex+0x2fc>
 800e472:	2701      	movs	r7, #1
 800e474:	e7e2      	b.n	800e43c <__gethex+0x324>
 800e476:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e478:	f1c3 0301 	rsb	r3, r3, #1
 800e47c:	9315      	str	r3, [sp, #84]	; 0x54
 800e47e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e480:	2b00      	cmp	r3, #0
 800e482:	d0f0      	beq.n	800e466 <__gethex+0x34e>
 800e484:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800e488:	f105 0314 	add.w	r3, r5, #20
 800e48c:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800e490:	eb03 010a 	add.w	r1, r3, sl
 800e494:	2000      	movs	r0, #0
 800e496:	681a      	ldr	r2, [r3, #0]
 800e498:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e49c:	d01c      	beq.n	800e4d8 <__gethex+0x3c0>
 800e49e:	3201      	adds	r2, #1
 800e4a0:	601a      	str	r2, [r3, #0]
 800e4a2:	2f02      	cmp	r7, #2
 800e4a4:	f105 0314 	add.w	r3, r5, #20
 800e4a8:	d138      	bne.n	800e51c <__gethex+0x404>
 800e4aa:	f8d8 2000 	ldr.w	r2, [r8]
 800e4ae:	3a01      	subs	r2, #1
 800e4b0:	4296      	cmp	r6, r2
 800e4b2:	d10a      	bne.n	800e4ca <__gethex+0x3b2>
 800e4b4:	1171      	asrs	r1, r6, #5
 800e4b6:	2201      	movs	r2, #1
 800e4b8:	f006 061f 	and.w	r6, r6, #31
 800e4bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e4c0:	fa02 f606 	lsl.w	r6, r2, r6
 800e4c4:	421e      	tst	r6, r3
 800e4c6:	bf18      	it	ne
 800e4c8:	4617      	movne	r7, r2
 800e4ca:	f047 0720 	orr.w	r7, r7, #32
 800e4ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e4d0:	601d      	str	r5, [r3, #0]
 800e4d2:	9b06      	ldr	r3, [sp, #24]
 800e4d4:	601c      	str	r4, [r3, #0]
 800e4d6:	e6a7      	b.n	800e228 <__gethex+0x110>
 800e4d8:	f843 0b04 	str.w	r0, [r3], #4
 800e4dc:	4299      	cmp	r1, r3
 800e4de:	d8da      	bhi.n	800e496 <__gethex+0x37e>
 800e4e0:	68ab      	ldr	r3, [r5, #8]
 800e4e2:	4599      	cmp	r9, r3
 800e4e4:	db12      	blt.n	800e50c <__gethex+0x3f4>
 800e4e6:	6869      	ldr	r1, [r5, #4]
 800e4e8:	9802      	ldr	r0, [sp, #8]
 800e4ea:	3101      	adds	r1, #1
 800e4ec:	f000 faae 	bl	800ea4c <_Balloc>
 800e4f0:	692a      	ldr	r2, [r5, #16]
 800e4f2:	3202      	adds	r2, #2
 800e4f4:	f105 010c 	add.w	r1, r5, #12
 800e4f8:	4683      	mov	fp, r0
 800e4fa:	0092      	lsls	r2, r2, #2
 800e4fc:	300c      	adds	r0, #12
 800e4fe:	f7fb fd85 	bl	800a00c <memcpy>
 800e502:	4629      	mov	r1, r5
 800e504:	9802      	ldr	r0, [sp, #8]
 800e506:	f000 fad5 	bl	800eab4 <_Bfree>
 800e50a:	465d      	mov	r5, fp
 800e50c:	692b      	ldr	r3, [r5, #16]
 800e50e:	1c5a      	adds	r2, r3, #1
 800e510:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e514:	612a      	str	r2, [r5, #16]
 800e516:	2201      	movs	r2, #1
 800e518:	615a      	str	r2, [r3, #20]
 800e51a:	e7c2      	b.n	800e4a2 <__gethex+0x38a>
 800e51c:	692a      	ldr	r2, [r5, #16]
 800e51e:	4591      	cmp	r9, r2
 800e520:	da0b      	bge.n	800e53a <__gethex+0x422>
 800e522:	2101      	movs	r1, #1
 800e524:	4628      	mov	r0, r5
 800e526:	f7ff fdad 	bl	800e084 <rshift>
 800e52a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e52e:	3401      	adds	r4, #1
 800e530:	429c      	cmp	r4, r3
 800e532:	f73f aedc 	bgt.w	800e2ee <__gethex+0x1d6>
 800e536:	2701      	movs	r7, #1
 800e538:	e7c7      	b.n	800e4ca <__gethex+0x3b2>
 800e53a:	f016 061f 	ands.w	r6, r6, #31
 800e53e:	d0fa      	beq.n	800e536 <__gethex+0x41e>
 800e540:	449a      	add	sl, r3
 800e542:	f1c6 0620 	rsb	r6, r6, #32
 800e546:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800e54a:	f000 fb43 	bl	800ebd4 <__hi0bits>
 800e54e:	42b0      	cmp	r0, r6
 800e550:	dbe7      	blt.n	800e522 <__gethex+0x40a>
 800e552:	e7f0      	b.n	800e536 <__gethex+0x41e>

0800e554 <L_shift>:
 800e554:	f1c2 0208 	rsb	r2, r2, #8
 800e558:	0092      	lsls	r2, r2, #2
 800e55a:	b570      	push	{r4, r5, r6, lr}
 800e55c:	f1c2 0620 	rsb	r6, r2, #32
 800e560:	6843      	ldr	r3, [r0, #4]
 800e562:	6804      	ldr	r4, [r0, #0]
 800e564:	fa03 f506 	lsl.w	r5, r3, r6
 800e568:	432c      	orrs	r4, r5
 800e56a:	40d3      	lsrs	r3, r2
 800e56c:	6004      	str	r4, [r0, #0]
 800e56e:	f840 3f04 	str.w	r3, [r0, #4]!
 800e572:	4288      	cmp	r0, r1
 800e574:	d3f4      	bcc.n	800e560 <L_shift+0xc>
 800e576:	bd70      	pop	{r4, r5, r6, pc}

0800e578 <__match>:
 800e578:	b530      	push	{r4, r5, lr}
 800e57a:	6803      	ldr	r3, [r0, #0]
 800e57c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e580:	3301      	adds	r3, #1
 800e582:	b914      	cbnz	r4, 800e58a <__match+0x12>
 800e584:	6003      	str	r3, [r0, #0]
 800e586:	2001      	movs	r0, #1
 800e588:	bd30      	pop	{r4, r5, pc}
 800e58a:	781a      	ldrb	r2, [r3, #0]
 800e58c:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e590:	2d19      	cmp	r5, #25
 800e592:	bf98      	it	ls
 800e594:	3220      	addls	r2, #32
 800e596:	42a2      	cmp	r2, r4
 800e598:	d0f0      	beq.n	800e57c <__match+0x4>
 800e59a:	2000      	movs	r0, #0
 800e59c:	bd30      	pop	{r4, r5, pc}

0800e59e <__hexnan>:
 800e59e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5a2:	680b      	ldr	r3, [r1, #0]
 800e5a4:	6801      	ldr	r1, [r0, #0]
 800e5a6:	115f      	asrs	r7, r3, #5
 800e5a8:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800e5ac:	f013 031f 	ands.w	r3, r3, #31
 800e5b0:	b087      	sub	sp, #28
 800e5b2:	bf18      	it	ne
 800e5b4:	3704      	addne	r7, #4
 800e5b6:	2500      	movs	r5, #0
 800e5b8:	1f3e      	subs	r6, r7, #4
 800e5ba:	4682      	mov	sl, r0
 800e5bc:	4690      	mov	r8, r2
 800e5be:	9302      	str	r3, [sp, #8]
 800e5c0:	f847 5c04 	str.w	r5, [r7, #-4]
 800e5c4:	46b1      	mov	r9, r6
 800e5c6:	4634      	mov	r4, r6
 800e5c8:	9501      	str	r5, [sp, #4]
 800e5ca:	46ab      	mov	fp, r5
 800e5cc:	784a      	ldrb	r2, [r1, #1]
 800e5ce:	1c4b      	adds	r3, r1, #1
 800e5d0:	9303      	str	r3, [sp, #12]
 800e5d2:	b342      	cbz	r2, 800e626 <__hexnan+0x88>
 800e5d4:	4610      	mov	r0, r2
 800e5d6:	9105      	str	r1, [sp, #20]
 800e5d8:	9204      	str	r2, [sp, #16]
 800e5da:	f7ff fd88 	bl	800e0ee <__hexdig_fun>
 800e5de:	2800      	cmp	r0, #0
 800e5e0:	d143      	bne.n	800e66a <__hexnan+0xcc>
 800e5e2:	9a04      	ldr	r2, [sp, #16]
 800e5e4:	9905      	ldr	r1, [sp, #20]
 800e5e6:	2a20      	cmp	r2, #32
 800e5e8:	d818      	bhi.n	800e61c <__hexnan+0x7e>
 800e5ea:	9b01      	ldr	r3, [sp, #4]
 800e5ec:	459b      	cmp	fp, r3
 800e5ee:	dd13      	ble.n	800e618 <__hexnan+0x7a>
 800e5f0:	454c      	cmp	r4, r9
 800e5f2:	d206      	bcs.n	800e602 <__hexnan+0x64>
 800e5f4:	2d07      	cmp	r5, #7
 800e5f6:	dc04      	bgt.n	800e602 <__hexnan+0x64>
 800e5f8:	462a      	mov	r2, r5
 800e5fa:	4649      	mov	r1, r9
 800e5fc:	4620      	mov	r0, r4
 800e5fe:	f7ff ffa9 	bl	800e554 <L_shift>
 800e602:	4544      	cmp	r4, r8
 800e604:	d944      	bls.n	800e690 <__hexnan+0xf2>
 800e606:	2300      	movs	r3, #0
 800e608:	f1a4 0904 	sub.w	r9, r4, #4
 800e60c:	f844 3c04 	str.w	r3, [r4, #-4]
 800e610:	f8cd b004 	str.w	fp, [sp, #4]
 800e614:	464c      	mov	r4, r9
 800e616:	461d      	mov	r5, r3
 800e618:	9903      	ldr	r1, [sp, #12]
 800e61a:	e7d7      	b.n	800e5cc <__hexnan+0x2e>
 800e61c:	2a29      	cmp	r2, #41	; 0x29
 800e61e:	d14a      	bne.n	800e6b6 <__hexnan+0x118>
 800e620:	3102      	adds	r1, #2
 800e622:	f8ca 1000 	str.w	r1, [sl]
 800e626:	f1bb 0f00 	cmp.w	fp, #0
 800e62a:	d044      	beq.n	800e6b6 <__hexnan+0x118>
 800e62c:	454c      	cmp	r4, r9
 800e62e:	d206      	bcs.n	800e63e <__hexnan+0xa0>
 800e630:	2d07      	cmp	r5, #7
 800e632:	dc04      	bgt.n	800e63e <__hexnan+0xa0>
 800e634:	462a      	mov	r2, r5
 800e636:	4649      	mov	r1, r9
 800e638:	4620      	mov	r0, r4
 800e63a:	f7ff ff8b 	bl	800e554 <L_shift>
 800e63e:	4544      	cmp	r4, r8
 800e640:	d928      	bls.n	800e694 <__hexnan+0xf6>
 800e642:	4643      	mov	r3, r8
 800e644:	f854 2b04 	ldr.w	r2, [r4], #4
 800e648:	f843 2b04 	str.w	r2, [r3], #4
 800e64c:	42a6      	cmp	r6, r4
 800e64e:	d2f9      	bcs.n	800e644 <__hexnan+0xa6>
 800e650:	2200      	movs	r2, #0
 800e652:	f843 2b04 	str.w	r2, [r3], #4
 800e656:	429e      	cmp	r6, r3
 800e658:	d2fb      	bcs.n	800e652 <__hexnan+0xb4>
 800e65a:	6833      	ldr	r3, [r6, #0]
 800e65c:	b91b      	cbnz	r3, 800e666 <__hexnan+0xc8>
 800e65e:	4546      	cmp	r6, r8
 800e660:	d127      	bne.n	800e6b2 <__hexnan+0x114>
 800e662:	2301      	movs	r3, #1
 800e664:	6033      	str	r3, [r6, #0]
 800e666:	2005      	movs	r0, #5
 800e668:	e026      	b.n	800e6b8 <__hexnan+0x11a>
 800e66a:	3501      	adds	r5, #1
 800e66c:	2d08      	cmp	r5, #8
 800e66e:	f10b 0b01 	add.w	fp, fp, #1
 800e672:	dd06      	ble.n	800e682 <__hexnan+0xe4>
 800e674:	4544      	cmp	r4, r8
 800e676:	d9cf      	bls.n	800e618 <__hexnan+0x7a>
 800e678:	2300      	movs	r3, #0
 800e67a:	f844 3c04 	str.w	r3, [r4, #-4]
 800e67e:	2501      	movs	r5, #1
 800e680:	3c04      	subs	r4, #4
 800e682:	6822      	ldr	r2, [r4, #0]
 800e684:	f000 000f 	and.w	r0, r0, #15
 800e688:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e68c:	6020      	str	r0, [r4, #0]
 800e68e:	e7c3      	b.n	800e618 <__hexnan+0x7a>
 800e690:	2508      	movs	r5, #8
 800e692:	e7c1      	b.n	800e618 <__hexnan+0x7a>
 800e694:	9b02      	ldr	r3, [sp, #8]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d0df      	beq.n	800e65a <__hexnan+0xbc>
 800e69a:	f04f 32ff 	mov.w	r2, #4294967295
 800e69e:	f1c3 0320 	rsb	r3, r3, #32
 800e6a2:	fa22 f303 	lsr.w	r3, r2, r3
 800e6a6:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800e6aa:	401a      	ands	r2, r3
 800e6ac:	f847 2c04 	str.w	r2, [r7, #-4]
 800e6b0:	e7d3      	b.n	800e65a <__hexnan+0xbc>
 800e6b2:	3e04      	subs	r6, #4
 800e6b4:	e7d1      	b.n	800e65a <__hexnan+0xbc>
 800e6b6:	2004      	movs	r0, #4
 800e6b8:	b007      	add	sp, #28
 800e6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800e6c0 <_findenv_r>:
 800e6c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6c4:	4606      	mov	r6, r0
 800e6c6:	468a      	mov	sl, r1
 800e6c8:	4617      	mov	r7, r2
 800e6ca:	f001 fd43 	bl	8010154 <__env_lock>
 800e6ce:	4b1b      	ldr	r3, [pc, #108]	; (800e73c <_findenv_r+0x7c>)
 800e6d0:	f8d3 8000 	ldr.w	r8, [r3]
 800e6d4:	4699      	mov	r9, r3
 800e6d6:	f1b8 0f00 	cmp.w	r8, #0
 800e6da:	d007      	beq.n	800e6ec <_findenv_r+0x2c>
 800e6dc:	4654      	mov	r4, sl
 800e6de:	4623      	mov	r3, r4
 800e6e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6e4:	b332      	cbz	r2, 800e734 <_findenv_r+0x74>
 800e6e6:	2a3d      	cmp	r2, #61	; 0x3d
 800e6e8:	461c      	mov	r4, r3
 800e6ea:	d1f8      	bne.n	800e6de <_findenv_r+0x1e>
 800e6ec:	4630      	mov	r0, r6
 800e6ee:	f001 fd37 	bl	8010160 <__env_unlock>
 800e6f2:	2000      	movs	r0, #0
 800e6f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6f8:	f108 0804 	add.w	r8, r8, #4
 800e6fc:	f8d8 0000 	ldr.w	r0, [r8]
 800e700:	2800      	cmp	r0, #0
 800e702:	d0f3      	beq.n	800e6ec <_findenv_r+0x2c>
 800e704:	4622      	mov	r2, r4
 800e706:	4651      	mov	r1, sl
 800e708:	f000 ff7f 	bl	800f60a <strncmp>
 800e70c:	2800      	cmp	r0, #0
 800e70e:	d1f3      	bne.n	800e6f8 <_findenv_r+0x38>
 800e710:	f8d8 3000 	ldr.w	r3, [r8]
 800e714:	191d      	adds	r5, r3, r4
 800e716:	5d1b      	ldrb	r3, [r3, r4]
 800e718:	2b3d      	cmp	r3, #61	; 0x3d
 800e71a:	d1ed      	bne.n	800e6f8 <_findenv_r+0x38>
 800e71c:	f8d9 3000 	ldr.w	r3, [r9]
 800e720:	eba8 0303 	sub.w	r3, r8, r3
 800e724:	109b      	asrs	r3, r3, #2
 800e726:	4630      	mov	r0, r6
 800e728:	603b      	str	r3, [r7, #0]
 800e72a:	f001 fd19 	bl	8010160 <__env_unlock>
 800e72e:	1c68      	adds	r0, r5, #1
 800e730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e734:	eba4 040a 	sub.w	r4, r4, sl
 800e738:	e7e0      	b.n	800e6fc <_findenv_r+0x3c>
 800e73a:	bf00      	nop
 800e73c:	20000008 	.word	0x20000008

0800e740 <_getenv_r>:
 800e740:	b507      	push	{r0, r1, r2, lr}
 800e742:	aa01      	add	r2, sp, #4
 800e744:	f7ff ffbc 	bl	800e6c0 <_findenv_r>
 800e748:	b003      	add	sp, #12
 800e74a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800e750 <_gettimeofday_r>:
 800e750:	b538      	push	{r3, r4, r5, lr}
 800e752:	4c07      	ldr	r4, [pc, #28]	; (800e770 <_gettimeofday_r+0x20>)
 800e754:	2300      	movs	r3, #0
 800e756:	4605      	mov	r5, r0
 800e758:	4608      	mov	r0, r1
 800e75a:	4611      	mov	r1, r2
 800e75c:	6023      	str	r3, [r4, #0]
 800e75e:	f002 f90b 	bl	8010978 <_gettimeofday>
 800e762:	1c43      	adds	r3, r0, #1
 800e764:	d102      	bne.n	800e76c <_gettimeofday_r+0x1c>
 800e766:	6823      	ldr	r3, [r4, #0]
 800e768:	b103      	cbz	r3, 800e76c <_gettimeofday_r+0x1c>
 800e76a:	602b      	str	r3, [r5, #0]
 800e76c:	bd38      	pop	{r3, r4, r5, pc}
 800e76e:	bf00      	nop
 800e770:	200021fc 	.word	0x200021fc

0800e774 <__gettzinfo>:
 800e774:	4800      	ldr	r0, [pc, #0]	; (800e778 <__gettzinfo+0x4>)
 800e776:	4770      	bx	lr
 800e778:	2000051c 	.word	0x2000051c

0800e77c <gmtime_r>:
 800e77c:	6802      	ldr	r2, [r0, #0]
 800e77e:	4848      	ldr	r0, [pc, #288]	; (800e8a0 <gmtime_r+0x124>)
 800e780:	fb92 f3f0 	sdiv	r3, r2, r0
 800e784:	fb00 2013 	mls	r0, r0, r3, r2
 800e788:	2800      	cmp	r0, #0
 800e78a:	bfb8      	it	lt
 800e78c:	f500 30a8 	addlt.w	r0, r0, #86016	; 0x15000
 800e790:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e792:	bfb8      	it	lt
 800e794:	f500 70c0 	addlt.w	r0, r0, #384	; 0x180
 800e798:	f44f 6461 	mov.w	r4, #3600	; 0xe10
 800e79c:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 800e7a0:	fb90 f2f4 	sdiv	r2, r0, r4
 800e7a4:	fb04 0012 	mls	r0, r4, r2, r0
 800e7a8:	f04f 043c 	mov.w	r4, #60	; 0x3c
 800e7ac:	bfac      	ite	ge
 800e7ae:	f603 236c 	addwge	r3, r3, #2668	; 0xa6c
 800e7b2:	f603 236b 	addwlt	r3, r3, #2667	; 0xa6b
 800e7b6:	608a      	str	r2, [r1, #8]
 800e7b8:	fb90 f2f4 	sdiv	r2, r0, r4
 800e7bc:	fb04 0012 	mls	r0, r4, r2, r0
 800e7c0:	604a      	str	r2, [r1, #4]
 800e7c2:	6008      	str	r0, [r1, #0]
 800e7c4:	2207      	movs	r2, #7
 800e7c6:	1cd8      	adds	r0, r3, #3
 800e7c8:	fb90 f2f2 	sdiv	r2, r0, r2
 800e7cc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800e7d0:	1a82      	subs	r2, r0, r2
 800e7d2:	618a      	str	r2, [r1, #24]
 800e7d4:	4a33      	ldr	r2, [pc, #204]	; (800e8a4 <gmtime_r+0x128>)
 800e7d6:	4c34      	ldr	r4, [pc, #208]	; (800e8a8 <gmtime_r+0x12c>)
 800e7d8:	fb93 f4f4 	sdiv	r4, r3, r4
 800e7dc:	fb02 3304 	mla	r3, r2, r4, r3
 800e7e0:	f648 60ac 	movw	r0, #36524	; 0x8eac
 800e7e4:	fbb3 f0f0 	udiv	r0, r3, r0
 800e7e8:	4418      	add	r0, r3
 800e7ea:	f240 57b4 	movw	r7, #1460	; 0x5b4
 800e7ee:	fbb3 f2f7 	udiv	r2, r3, r7
 800e7f2:	1a80      	subs	r0, r0, r2
 800e7f4:	4a2d      	ldr	r2, [pc, #180]	; (800e8ac <gmtime_r+0x130>)
 800e7f6:	fbb3 f2f2 	udiv	r2, r3, r2
 800e7fa:	1a82      	subs	r2, r0, r2
 800e7fc:	f648 6094 	movw	r0, #36500	; 0x8e94
 800e800:	fbb2 f0f0 	udiv	r0, r2, r0
 800e804:	4403      	add	r3, r0
 800e806:	f240 166d 	movw	r6, #365	; 0x16d
 800e80a:	fbb2 f5f6 	udiv	r5, r2, r6
 800e80e:	fbb2 f2f7 	udiv	r2, r2, r7
 800e812:	1a9a      	subs	r2, r3, r2
 800e814:	fb06 2315 	mls	r3, r6, r5, r2
 800e818:	2099      	movs	r0, #153	; 0x99
 800e81a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800e81e:	1c5e      	adds	r6, r3, #1
 800e820:	3202      	adds	r2, #2
 800e822:	fbb2 f2f0 	udiv	r2, r2, r0
 800e826:	2a0a      	cmp	r2, #10
 800e828:	fb00 f002 	mul.w	r0, r0, r2
 800e82c:	f100 0002 	add.w	r0, r0, #2
 800e830:	f04f 0705 	mov.w	r7, #5
 800e834:	fbb0 f0f7 	udiv	r0, r0, r7
 800e838:	eba6 0000 	sub.w	r0, r6, r0
 800e83c:	bf34      	ite	cc
 800e83e:	2602      	movcc	r6, #2
 800e840:	f06f 0609 	mvncs.w	r6, #9
 800e844:	4416      	add	r6, r2
 800e846:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800e84a:	fb02 5404 	mla	r4, r2, r4, r5
 800e84e:	2e01      	cmp	r6, #1
 800e850:	bf98      	it	ls
 800e852:	3401      	addls	r4, #1
 800e854:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800e858:	d30b      	bcc.n	800e872 <gmtime_r+0xf6>
 800e85a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800e85e:	61cb      	str	r3, [r1, #28]
 800e860:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
 800e864:	2300      	movs	r3, #0
 800e866:	60c8      	str	r0, [r1, #12]
 800e868:	614c      	str	r4, [r1, #20]
 800e86a:	610e      	str	r6, [r1, #16]
 800e86c:	620b      	str	r3, [r1, #32]
 800e86e:	4608      	mov	r0, r1
 800e870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e872:	07aa      	lsls	r2, r5, #30
 800e874:	d105      	bne.n	800e882 <gmtime_r+0x106>
 800e876:	2764      	movs	r7, #100	; 0x64
 800e878:	fbb5 f2f7 	udiv	r2, r5, r7
 800e87c:	fb07 5212 	mls	r2, r7, r2, r5
 800e880:	b95a      	cbnz	r2, 800e89a <gmtime_r+0x11e>
 800e882:	f44f 77c8 	mov.w	r7, #400	; 0x190
 800e886:	fbb5 f2f7 	udiv	r2, r5, r7
 800e88a:	fb07 5212 	mls	r2, r7, r2, r5
 800e88e:	fab2 f282 	clz	r2, r2
 800e892:	0952      	lsrs	r2, r2, #5
 800e894:	333b      	adds	r3, #59	; 0x3b
 800e896:	4413      	add	r3, r2
 800e898:	e7e1      	b.n	800e85e <gmtime_r+0xe2>
 800e89a:	2201      	movs	r2, #1
 800e89c:	e7fa      	b.n	800e894 <gmtime_r+0x118>
 800e89e:	bf00      	nop
 800e8a0:	00015180 	.word	0x00015180
 800e8a4:	fffdc54f 	.word	0xfffdc54f
 800e8a8:	00023ab1 	.word	0x00023ab1
 800e8ac:	00023ab0 	.word	0x00023ab0

0800e8b0 <__locale_mb_cur_max>:
 800e8b0:	4b04      	ldr	r3, [pc, #16]	; (800e8c4 <__locale_mb_cur_max+0x14>)
 800e8b2:	4a05      	ldr	r2, [pc, #20]	; (800e8c8 <__locale_mb_cur_max+0x18>)
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	6a1b      	ldr	r3, [r3, #32]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	bf08      	it	eq
 800e8bc:	4613      	moveq	r3, r2
 800e8be:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800e8c2:	4770      	bx	lr
 800e8c4:	20000010 	.word	0x20000010
 800e8c8:	2000055c 	.word	0x2000055c

0800e8cc <__locale_ctype_ptr_l>:
 800e8cc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800e8d0:	4770      	bx	lr
	...

0800e8d4 <__locale_ctype_ptr>:
 800e8d4:	4b04      	ldr	r3, [pc, #16]	; (800e8e8 <__locale_ctype_ptr+0x14>)
 800e8d6:	4a05      	ldr	r2, [pc, #20]	; (800e8ec <__locale_ctype_ptr+0x18>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	6a1b      	ldr	r3, [r3, #32]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	bf08      	it	eq
 800e8e0:	4613      	moveq	r3, r2
 800e8e2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800e8e6:	4770      	bx	lr
 800e8e8:	20000010 	.word	0x20000010
 800e8ec:	2000055c 	.word	0x2000055c

0800e8f0 <__localeconv_l>:
 800e8f0:	30f0      	adds	r0, #240	; 0xf0
 800e8f2:	4770      	bx	lr

0800e8f4 <_localeconv_r>:
 800e8f4:	4b04      	ldr	r3, [pc, #16]	; (800e908 <_localeconv_r+0x14>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	6a18      	ldr	r0, [r3, #32]
 800e8fa:	4b04      	ldr	r3, [pc, #16]	; (800e90c <_localeconv_r+0x18>)
 800e8fc:	2800      	cmp	r0, #0
 800e8fe:	bf08      	it	eq
 800e900:	4618      	moveq	r0, r3
 800e902:	30f0      	adds	r0, #240	; 0xf0
 800e904:	4770      	bx	lr
 800e906:	bf00      	nop
 800e908:	20000010 	.word	0x20000010
 800e90c:	2000055c 	.word	0x2000055c

0800e910 <__retarget_lock_init_recursive>:
 800e910:	4770      	bx	lr

0800e912 <__retarget_lock_close_recursive>:
 800e912:	4770      	bx	lr

0800e914 <__retarget_lock_acquire>:
 800e914:	4770      	bx	lr

0800e916 <__retarget_lock_acquire_recursive>:
 800e916:	4770      	bx	lr

0800e918 <__retarget_lock_release>:
 800e918:	4770      	bx	lr

0800e91a <__retarget_lock_release_recursive>:
 800e91a:	4770      	bx	lr

0800e91c <__swhatbuf_r>:
 800e91c:	b570      	push	{r4, r5, r6, lr}
 800e91e:	460e      	mov	r6, r1
 800e920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e924:	2900      	cmp	r1, #0
 800e926:	b090      	sub	sp, #64	; 0x40
 800e928:	4614      	mov	r4, r2
 800e92a:	461d      	mov	r5, r3
 800e92c:	da09      	bge.n	800e942 <__swhatbuf_r+0x26>
 800e92e:	89b3      	ldrh	r3, [r6, #12]
 800e930:	2200      	movs	r2, #0
 800e932:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800e936:	602a      	str	r2, [r5, #0]
 800e938:	d116      	bne.n	800e968 <__swhatbuf_r+0x4c>
 800e93a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e93e:	6023      	str	r3, [r4, #0]
 800e940:	e015      	b.n	800e96e <__swhatbuf_r+0x52>
 800e942:	aa01      	add	r2, sp, #4
 800e944:	f001 fce8 	bl	8010318 <_fstat_r>
 800e948:	2800      	cmp	r0, #0
 800e94a:	dbf0      	blt.n	800e92e <__swhatbuf_r+0x12>
 800e94c:	9a02      	ldr	r2, [sp, #8]
 800e94e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e952:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e956:	425a      	negs	r2, r3
 800e958:	415a      	adcs	r2, r3
 800e95a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e95e:	602a      	str	r2, [r5, #0]
 800e960:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800e964:	6023      	str	r3, [r4, #0]
 800e966:	e002      	b.n	800e96e <__swhatbuf_r+0x52>
 800e968:	2340      	movs	r3, #64	; 0x40
 800e96a:	6023      	str	r3, [r4, #0]
 800e96c:	4610      	mov	r0, r2
 800e96e:	b010      	add	sp, #64	; 0x40
 800e970:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e974 <__smakebuf_r>:
 800e974:	898b      	ldrh	r3, [r1, #12]
 800e976:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e978:	079d      	lsls	r5, r3, #30
 800e97a:	4606      	mov	r6, r0
 800e97c:	460c      	mov	r4, r1
 800e97e:	d507      	bpl.n	800e990 <__smakebuf_r+0x1c>
 800e980:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e984:	6023      	str	r3, [r4, #0]
 800e986:	6123      	str	r3, [r4, #16]
 800e988:	2301      	movs	r3, #1
 800e98a:	6163      	str	r3, [r4, #20]
 800e98c:	b002      	add	sp, #8
 800e98e:	bd70      	pop	{r4, r5, r6, pc}
 800e990:	ab01      	add	r3, sp, #4
 800e992:	466a      	mov	r2, sp
 800e994:	f7ff ffc2 	bl	800e91c <__swhatbuf_r>
 800e998:	9900      	ldr	r1, [sp, #0]
 800e99a:	4605      	mov	r5, r0
 800e99c:	4630      	mov	r0, r6
 800e99e:	f7fb f927 	bl	8009bf0 <_malloc_r>
 800e9a2:	b948      	cbnz	r0, 800e9b8 <__smakebuf_r+0x44>
 800e9a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9a8:	059a      	lsls	r2, r3, #22
 800e9aa:	d4ef      	bmi.n	800e98c <__smakebuf_r+0x18>
 800e9ac:	f023 0303 	bic.w	r3, r3, #3
 800e9b0:	f043 0302 	orr.w	r3, r3, #2
 800e9b4:	81a3      	strh	r3, [r4, #12]
 800e9b6:	e7e3      	b.n	800e980 <__smakebuf_r+0xc>
 800e9b8:	4b0d      	ldr	r3, [pc, #52]	; (800e9f0 <__smakebuf_r+0x7c>)
 800e9ba:	62b3      	str	r3, [r6, #40]	; 0x28
 800e9bc:	89a3      	ldrh	r3, [r4, #12]
 800e9be:	6020      	str	r0, [r4, #0]
 800e9c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9c4:	81a3      	strh	r3, [r4, #12]
 800e9c6:	9b00      	ldr	r3, [sp, #0]
 800e9c8:	6163      	str	r3, [r4, #20]
 800e9ca:	9b01      	ldr	r3, [sp, #4]
 800e9cc:	6120      	str	r0, [r4, #16]
 800e9ce:	b15b      	cbz	r3, 800e9e8 <__smakebuf_r+0x74>
 800e9d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e9d4:	4630      	mov	r0, r6
 800e9d6:	f001 fcb1 	bl	801033c <_isatty_r>
 800e9da:	b128      	cbz	r0, 800e9e8 <__smakebuf_r+0x74>
 800e9dc:	89a3      	ldrh	r3, [r4, #12]
 800e9de:	f023 0303 	bic.w	r3, r3, #3
 800e9e2:	f043 0301 	orr.w	r3, r3, #1
 800e9e6:	81a3      	strh	r3, [r4, #12]
 800e9e8:	89a3      	ldrh	r3, [r4, #12]
 800e9ea:	431d      	orrs	r5, r3
 800e9ec:	81a5      	strh	r5, [r4, #12]
 800e9ee:	e7cd      	b.n	800e98c <__smakebuf_r+0x18>
 800e9f0:	0800d9d9 	.word	0x0800d9d9

0800e9f4 <__ascii_mbtowc>:
 800e9f4:	b082      	sub	sp, #8
 800e9f6:	b901      	cbnz	r1, 800e9fa <__ascii_mbtowc+0x6>
 800e9f8:	a901      	add	r1, sp, #4
 800e9fa:	b142      	cbz	r2, 800ea0e <__ascii_mbtowc+0x1a>
 800e9fc:	b14b      	cbz	r3, 800ea12 <__ascii_mbtowc+0x1e>
 800e9fe:	7813      	ldrb	r3, [r2, #0]
 800ea00:	600b      	str	r3, [r1, #0]
 800ea02:	7812      	ldrb	r2, [r2, #0]
 800ea04:	1c10      	adds	r0, r2, #0
 800ea06:	bf18      	it	ne
 800ea08:	2001      	movne	r0, #1
 800ea0a:	b002      	add	sp, #8
 800ea0c:	4770      	bx	lr
 800ea0e:	4610      	mov	r0, r2
 800ea10:	e7fb      	b.n	800ea0a <__ascii_mbtowc+0x16>
 800ea12:	f06f 0001 	mvn.w	r0, #1
 800ea16:	e7f8      	b.n	800ea0a <__ascii_mbtowc+0x16>

0800ea18 <memmove>:
 800ea18:	4288      	cmp	r0, r1
 800ea1a:	b510      	push	{r4, lr}
 800ea1c:	eb01 0302 	add.w	r3, r1, r2
 800ea20:	d803      	bhi.n	800ea2a <memmove+0x12>
 800ea22:	1e42      	subs	r2, r0, #1
 800ea24:	4299      	cmp	r1, r3
 800ea26:	d10c      	bne.n	800ea42 <memmove+0x2a>
 800ea28:	bd10      	pop	{r4, pc}
 800ea2a:	4298      	cmp	r0, r3
 800ea2c:	d2f9      	bcs.n	800ea22 <memmove+0xa>
 800ea2e:	1881      	adds	r1, r0, r2
 800ea30:	1ad2      	subs	r2, r2, r3
 800ea32:	42d3      	cmn	r3, r2
 800ea34:	d100      	bne.n	800ea38 <memmove+0x20>
 800ea36:	bd10      	pop	{r4, pc}
 800ea38:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ea3c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ea40:	e7f7      	b.n	800ea32 <memmove+0x1a>
 800ea42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea46:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ea4a:	e7eb      	b.n	800ea24 <memmove+0xc>

0800ea4c <_Balloc>:
 800ea4c:	b570      	push	{r4, r5, r6, lr}
 800ea4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ea50:	4604      	mov	r4, r0
 800ea52:	460e      	mov	r6, r1
 800ea54:	b93d      	cbnz	r5, 800ea66 <_Balloc+0x1a>
 800ea56:	2010      	movs	r0, #16
 800ea58:	f7fb f8ba 	bl	8009bd0 <malloc>
 800ea5c:	6260      	str	r0, [r4, #36]	; 0x24
 800ea5e:	6045      	str	r5, [r0, #4]
 800ea60:	6085      	str	r5, [r0, #8]
 800ea62:	6005      	str	r5, [r0, #0]
 800ea64:	60c5      	str	r5, [r0, #12]
 800ea66:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ea68:	68eb      	ldr	r3, [r5, #12]
 800ea6a:	b183      	cbz	r3, 800ea8e <_Balloc+0x42>
 800ea6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea6e:	68db      	ldr	r3, [r3, #12]
 800ea70:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ea74:	b9b8      	cbnz	r0, 800eaa6 <_Balloc+0x5a>
 800ea76:	2101      	movs	r1, #1
 800ea78:	fa01 f506 	lsl.w	r5, r1, r6
 800ea7c:	1d6a      	adds	r2, r5, #5
 800ea7e:	0092      	lsls	r2, r2, #2
 800ea80:	4620      	mov	r0, r4
 800ea82:	f001 fb29 	bl	80100d8 <_calloc_r>
 800ea86:	b160      	cbz	r0, 800eaa2 <_Balloc+0x56>
 800ea88:	6046      	str	r6, [r0, #4]
 800ea8a:	6085      	str	r5, [r0, #8]
 800ea8c:	e00e      	b.n	800eaac <_Balloc+0x60>
 800ea8e:	2221      	movs	r2, #33	; 0x21
 800ea90:	2104      	movs	r1, #4
 800ea92:	4620      	mov	r0, r4
 800ea94:	f001 fb20 	bl	80100d8 <_calloc_r>
 800ea98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea9a:	60e8      	str	r0, [r5, #12]
 800ea9c:	68db      	ldr	r3, [r3, #12]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d1e4      	bne.n	800ea6c <_Balloc+0x20>
 800eaa2:	2000      	movs	r0, #0
 800eaa4:	bd70      	pop	{r4, r5, r6, pc}
 800eaa6:	6802      	ldr	r2, [r0, #0]
 800eaa8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800eaac:	2300      	movs	r3, #0
 800eaae:	6103      	str	r3, [r0, #16]
 800eab0:	60c3      	str	r3, [r0, #12]
 800eab2:	bd70      	pop	{r4, r5, r6, pc}

0800eab4 <_Bfree>:
 800eab4:	b570      	push	{r4, r5, r6, lr}
 800eab6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800eab8:	4606      	mov	r6, r0
 800eaba:	460d      	mov	r5, r1
 800eabc:	b93c      	cbnz	r4, 800eace <_Bfree+0x1a>
 800eabe:	2010      	movs	r0, #16
 800eac0:	f7fb f886 	bl	8009bd0 <malloc>
 800eac4:	6270      	str	r0, [r6, #36]	; 0x24
 800eac6:	6044      	str	r4, [r0, #4]
 800eac8:	6084      	str	r4, [r0, #8]
 800eaca:	6004      	str	r4, [r0, #0]
 800eacc:	60c4      	str	r4, [r0, #12]
 800eace:	b13d      	cbz	r5, 800eae0 <_Bfree+0x2c>
 800ead0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ead2:	686a      	ldr	r2, [r5, #4]
 800ead4:	68db      	ldr	r3, [r3, #12]
 800ead6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eada:	6029      	str	r1, [r5, #0]
 800eadc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800eae0:	bd70      	pop	{r4, r5, r6, pc}

0800eae2 <__multadd>:
 800eae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eae6:	690d      	ldr	r5, [r1, #16]
 800eae8:	461f      	mov	r7, r3
 800eaea:	4606      	mov	r6, r0
 800eaec:	460c      	mov	r4, r1
 800eaee:	f101 0e14 	add.w	lr, r1, #20
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	f8de 0000 	ldr.w	r0, [lr]
 800eaf8:	b281      	uxth	r1, r0
 800eafa:	fb02 7101 	mla	r1, r2, r1, r7
 800eafe:	0c0f      	lsrs	r7, r1, #16
 800eb00:	0c00      	lsrs	r0, r0, #16
 800eb02:	fb02 7000 	mla	r0, r2, r0, r7
 800eb06:	b289      	uxth	r1, r1
 800eb08:	3301      	adds	r3, #1
 800eb0a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800eb0e:	429d      	cmp	r5, r3
 800eb10:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800eb14:	f84e 1b04 	str.w	r1, [lr], #4
 800eb18:	dcec      	bgt.n	800eaf4 <__multadd+0x12>
 800eb1a:	b1d7      	cbz	r7, 800eb52 <__multadd+0x70>
 800eb1c:	68a3      	ldr	r3, [r4, #8]
 800eb1e:	429d      	cmp	r5, r3
 800eb20:	db12      	blt.n	800eb48 <__multadd+0x66>
 800eb22:	6861      	ldr	r1, [r4, #4]
 800eb24:	4630      	mov	r0, r6
 800eb26:	3101      	adds	r1, #1
 800eb28:	f7ff ff90 	bl	800ea4c <_Balloc>
 800eb2c:	6922      	ldr	r2, [r4, #16]
 800eb2e:	3202      	adds	r2, #2
 800eb30:	f104 010c 	add.w	r1, r4, #12
 800eb34:	4680      	mov	r8, r0
 800eb36:	0092      	lsls	r2, r2, #2
 800eb38:	300c      	adds	r0, #12
 800eb3a:	f7fb fa67 	bl	800a00c <memcpy>
 800eb3e:	4621      	mov	r1, r4
 800eb40:	4630      	mov	r0, r6
 800eb42:	f7ff ffb7 	bl	800eab4 <_Bfree>
 800eb46:	4644      	mov	r4, r8
 800eb48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eb4c:	3501      	adds	r5, #1
 800eb4e:	615f      	str	r7, [r3, #20]
 800eb50:	6125      	str	r5, [r4, #16]
 800eb52:	4620      	mov	r0, r4
 800eb54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eb58 <__s2b>:
 800eb58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb5c:	460c      	mov	r4, r1
 800eb5e:	4615      	mov	r5, r2
 800eb60:	461f      	mov	r7, r3
 800eb62:	2209      	movs	r2, #9
 800eb64:	3308      	adds	r3, #8
 800eb66:	4606      	mov	r6, r0
 800eb68:	fb93 f3f2 	sdiv	r3, r3, r2
 800eb6c:	2100      	movs	r1, #0
 800eb6e:	2201      	movs	r2, #1
 800eb70:	429a      	cmp	r2, r3
 800eb72:	db20      	blt.n	800ebb6 <__s2b+0x5e>
 800eb74:	4630      	mov	r0, r6
 800eb76:	f7ff ff69 	bl	800ea4c <_Balloc>
 800eb7a:	9b08      	ldr	r3, [sp, #32]
 800eb7c:	6143      	str	r3, [r0, #20]
 800eb7e:	2d09      	cmp	r5, #9
 800eb80:	f04f 0301 	mov.w	r3, #1
 800eb84:	6103      	str	r3, [r0, #16]
 800eb86:	dd19      	ble.n	800ebbc <__s2b+0x64>
 800eb88:	f104 0909 	add.w	r9, r4, #9
 800eb8c:	46c8      	mov	r8, r9
 800eb8e:	442c      	add	r4, r5
 800eb90:	f818 3b01 	ldrb.w	r3, [r8], #1
 800eb94:	4601      	mov	r1, r0
 800eb96:	3b30      	subs	r3, #48	; 0x30
 800eb98:	220a      	movs	r2, #10
 800eb9a:	4630      	mov	r0, r6
 800eb9c:	f7ff ffa1 	bl	800eae2 <__multadd>
 800eba0:	45a0      	cmp	r8, r4
 800eba2:	d1f5      	bne.n	800eb90 <__s2b+0x38>
 800eba4:	f1a5 0408 	sub.w	r4, r5, #8
 800eba8:	444c      	add	r4, r9
 800ebaa:	1b2d      	subs	r5, r5, r4
 800ebac:	1963      	adds	r3, r4, r5
 800ebae:	42bb      	cmp	r3, r7
 800ebb0:	db07      	blt.n	800ebc2 <__s2b+0x6a>
 800ebb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebb6:	0052      	lsls	r2, r2, #1
 800ebb8:	3101      	adds	r1, #1
 800ebba:	e7d9      	b.n	800eb70 <__s2b+0x18>
 800ebbc:	340a      	adds	r4, #10
 800ebbe:	2509      	movs	r5, #9
 800ebc0:	e7f3      	b.n	800ebaa <__s2b+0x52>
 800ebc2:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ebc6:	4601      	mov	r1, r0
 800ebc8:	3b30      	subs	r3, #48	; 0x30
 800ebca:	220a      	movs	r2, #10
 800ebcc:	4630      	mov	r0, r6
 800ebce:	f7ff ff88 	bl	800eae2 <__multadd>
 800ebd2:	e7eb      	b.n	800ebac <__s2b+0x54>

0800ebd4 <__hi0bits>:
 800ebd4:	0c02      	lsrs	r2, r0, #16
 800ebd6:	0412      	lsls	r2, r2, #16
 800ebd8:	4603      	mov	r3, r0
 800ebda:	b9b2      	cbnz	r2, 800ec0a <__hi0bits+0x36>
 800ebdc:	0403      	lsls	r3, r0, #16
 800ebde:	2010      	movs	r0, #16
 800ebe0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ebe4:	bf04      	itt	eq
 800ebe6:	021b      	lsleq	r3, r3, #8
 800ebe8:	3008      	addeq	r0, #8
 800ebea:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ebee:	bf04      	itt	eq
 800ebf0:	011b      	lsleq	r3, r3, #4
 800ebf2:	3004      	addeq	r0, #4
 800ebf4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ebf8:	bf04      	itt	eq
 800ebfa:	009b      	lsleq	r3, r3, #2
 800ebfc:	3002      	addeq	r0, #2
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	db06      	blt.n	800ec10 <__hi0bits+0x3c>
 800ec02:	005b      	lsls	r3, r3, #1
 800ec04:	d503      	bpl.n	800ec0e <__hi0bits+0x3a>
 800ec06:	3001      	adds	r0, #1
 800ec08:	4770      	bx	lr
 800ec0a:	2000      	movs	r0, #0
 800ec0c:	e7e8      	b.n	800ebe0 <__hi0bits+0xc>
 800ec0e:	2020      	movs	r0, #32
 800ec10:	4770      	bx	lr

0800ec12 <__lo0bits>:
 800ec12:	6803      	ldr	r3, [r0, #0]
 800ec14:	f013 0207 	ands.w	r2, r3, #7
 800ec18:	4601      	mov	r1, r0
 800ec1a:	d00b      	beq.n	800ec34 <__lo0bits+0x22>
 800ec1c:	07da      	lsls	r2, r3, #31
 800ec1e:	d423      	bmi.n	800ec68 <__lo0bits+0x56>
 800ec20:	0798      	lsls	r0, r3, #30
 800ec22:	bf49      	itett	mi
 800ec24:	085b      	lsrmi	r3, r3, #1
 800ec26:	089b      	lsrpl	r3, r3, #2
 800ec28:	2001      	movmi	r0, #1
 800ec2a:	600b      	strmi	r3, [r1, #0]
 800ec2c:	bf5c      	itt	pl
 800ec2e:	600b      	strpl	r3, [r1, #0]
 800ec30:	2002      	movpl	r0, #2
 800ec32:	4770      	bx	lr
 800ec34:	b298      	uxth	r0, r3
 800ec36:	b9a8      	cbnz	r0, 800ec64 <__lo0bits+0x52>
 800ec38:	0c1b      	lsrs	r3, r3, #16
 800ec3a:	2010      	movs	r0, #16
 800ec3c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ec40:	bf04      	itt	eq
 800ec42:	0a1b      	lsreq	r3, r3, #8
 800ec44:	3008      	addeq	r0, #8
 800ec46:	071a      	lsls	r2, r3, #28
 800ec48:	bf04      	itt	eq
 800ec4a:	091b      	lsreq	r3, r3, #4
 800ec4c:	3004      	addeq	r0, #4
 800ec4e:	079a      	lsls	r2, r3, #30
 800ec50:	bf04      	itt	eq
 800ec52:	089b      	lsreq	r3, r3, #2
 800ec54:	3002      	addeq	r0, #2
 800ec56:	07da      	lsls	r2, r3, #31
 800ec58:	d402      	bmi.n	800ec60 <__lo0bits+0x4e>
 800ec5a:	085b      	lsrs	r3, r3, #1
 800ec5c:	d006      	beq.n	800ec6c <__lo0bits+0x5a>
 800ec5e:	3001      	adds	r0, #1
 800ec60:	600b      	str	r3, [r1, #0]
 800ec62:	4770      	bx	lr
 800ec64:	4610      	mov	r0, r2
 800ec66:	e7e9      	b.n	800ec3c <__lo0bits+0x2a>
 800ec68:	2000      	movs	r0, #0
 800ec6a:	4770      	bx	lr
 800ec6c:	2020      	movs	r0, #32
 800ec6e:	4770      	bx	lr

0800ec70 <__i2b>:
 800ec70:	b510      	push	{r4, lr}
 800ec72:	460c      	mov	r4, r1
 800ec74:	2101      	movs	r1, #1
 800ec76:	f7ff fee9 	bl	800ea4c <_Balloc>
 800ec7a:	2201      	movs	r2, #1
 800ec7c:	6144      	str	r4, [r0, #20]
 800ec7e:	6102      	str	r2, [r0, #16]
 800ec80:	bd10      	pop	{r4, pc}

0800ec82 <__multiply>:
 800ec82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec86:	4614      	mov	r4, r2
 800ec88:	690a      	ldr	r2, [r1, #16]
 800ec8a:	6923      	ldr	r3, [r4, #16]
 800ec8c:	429a      	cmp	r2, r3
 800ec8e:	bfb8      	it	lt
 800ec90:	460b      	movlt	r3, r1
 800ec92:	4689      	mov	r9, r1
 800ec94:	bfbc      	itt	lt
 800ec96:	46a1      	movlt	r9, r4
 800ec98:	461c      	movlt	r4, r3
 800ec9a:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ec9e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800eca2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800eca6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ecaa:	eb07 060a 	add.w	r6, r7, sl
 800ecae:	429e      	cmp	r6, r3
 800ecb0:	bfc8      	it	gt
 800ecb2:	3101      	addgt	r1, #1
 800ecb4:	f7ff feca 	bl	800ea4c <_Balloc>
 800ecb8:	f100 0514 	add.w	r5, r0, #20
 800ecbc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ecc0:	462b      	mov	r3, r5
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	4543      	cmp	r3, r8
 800ecc6:	d316      	bcc.n	800ecf6 <__multiply+0x74>
 800ecc8:	f104 0214 	add.w	r2, r4, #20
 800eccc:	f109 0114 	add.w	r1, r9, #20
 800ecd0:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800ecd4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ecd8:	9301      	str	r3, [sp, #4]
 800ecda:	9c01      	ldr	r4, [sp, #4]
 800ecdc:	4294      	cmp	r4, r2
 800ecde:	4613      	mov	r3, r2
 800ece0:	d80c      	bhi.n	800ecfc <__multiply+0x7a>
 800ece2:	2e00      	cmp	r6, #0
 800ece4:	dd03      	ble.n	800ecee <__multiply+0x6c>
 800ece6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d054      	beq.n	800ed98 <__multiply+0x116>
 800ecee:	6106      	str	r6, [r0, #16]
 800ecf0:	b003      	add	sp, #12
 800ecf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecf6:	f843 2b04 	str.w	r2, [r3], #4
 800ecfa:	e7e3      	b.n	800ecc4 <__multiply+0x42>
 800ecfc:	f8b3 a000 	ldrh.w	sl, [r3]
 800ed00:	3204      	adds	r2, #4
 800ed02:	f1ba 0f00 	cmp.w	sl, #0
 800ed06:	d020      	beq.n	800ed4a <__multiply+0xc8>
 800ed08:	46ae      	mov	lr, r5
 800ed0a:	4689      	mov	r9, r1
 800ed0c:	f04f 0c00 	mov.w	ip, #0
 800ed10:	f859 4b04 	ldr.w	r4, [r9], #4
 800ed14:	f8be b000 	ldrh.w	fp, [lr]
 800ed18:	b2a3      	uxth	r3, r4
 800ed1a:	fb0a b303 	mla	r3, sl, r3, fp
 800ed1e:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 800ed22:	f8de 4000 	ldr.w	r4, [lr]
 800ed26:	4463      	add	r3, ip
 800ed28:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800ed2c:	fb0a c40b 	mla	r4, sl, fp, ip
 800ed30:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ed34:	b29b      	uxth	r3, r3
 800ed36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ed3a:	454f      	cmp	r7, r9
 800ed3c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800ed40:	f84e 3b04 	str.w	r3, [lr], #4
 800ed44:	d8e4      	bhi.n	800ed10 <__multiply+0x8e>
 800ed46:	f8ce c000 	str.w	ip, [lr]
 800ed4a:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800ed4e:	f1b9 0f00 	cmp.w	r9, #0
 800ed52:	d01f      	beq.n	800ed94 <__multiply+0x112>
 800ed54:	682b      	ldr	r3, [r5, #0]
 800ed56:	46ae      	mov	lr, r5
 800ed58:	468c      	mov	ip, r1
 800ed5a:	f04f 0a00 	mov.w	sl, #0
 800ed5e:	f8bc 4000 	ldrh.w	r4, [ip]
 800ed62:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ed66:	fb09 b404 	mla	r4, r9, r4, fp
 800ed6a:	44a2      	add	sl, r4
 800ed6c:	b29b      	uxth	r3, r3
 800ed6e:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800ed72:	f84e 3b04 	str.w	r3, [lr], #4
 800ed76:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ed7a:	f8be 4000 	ldrh.w	r4, [lr]
 800ed7e:	0c1b      	lsrs	r3, r3, #16
 800ed80:	fb09 4303 	mla	r3, r9, r3, r4
 800ed84:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 800ed88:	4567      	cmp	r7, ip
 800ed8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ed8e:	d8e6      	bhi.n	800ed5e <__multiply+0xdc>
 800ed90:	f8ce 3000 	str.w	r3, [lr]
 800ed94:	3504      	adds	r5, #4
 800ed96:	e7a0      	b.n	800ecda <__multiply+0x58>
 800ed98:	3e01      	subs	r6, #1
 800ed9a:	e7a2      	b.n	800ece2 <__multiply+0x60>

0800ed9c <__pow5mult>:
 800ed9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eda0:	4615      	mov	r5, r2
 800eda2:	f012 0203 	ands.w	r2, r2, #3
 800eda6:	4606      	mov	r6, r0
 800eda8:	460f      	mov	r7, r1
 800edaa:	d007      	beq.n	800edbc <__pow5mult+0x20>
 800edac:	3a01      	subs	r2, #1
 800edae:	4c21      	ldr	r4, [pc, #132]	; (800ee34 <__pow5mult+0x98>)
 800edb0:	2300      	movs	r3, #0
 800edb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800edb6:	f7ff fe94 	bl	800eae2 <__multadd>
 800edba:	4607      	mov	r7, r0
 800edbc:	10ad      	asrs	r5, r5, #2
 800edbe:	d035      	beq.n	800ee2c <__pow5mult+0x90>
 800edc0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800edc2:	b93c      	cbnz	r4, 800edd4 <__pow5mult+0x38>
 800edc4:	2010      	movs	r0, #16
 800edc6:	f7fa ff03 	bl	8009bd0 <malloc>
 800edca:	6270      	str	r0, [r6, #36]	; 0x24
 800edcc:	6044      	str	r4, [r0, #4]
 800edce:	6084      	str	r4, [r0, #8]
 800edd0:	6004      	str	r4, [r0, #0]
 800edd2:	60c4      	str	r4, [r0, #12]
 800edd4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800edd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800eddc:	b94c      	cbnz	r4, 800edf2 <__pow5mult+0x56>
 800edde:	f240 2171 	movw	r1, #625	; 0x271
 800ede2:	4630      	mov	r0, r6
 800ede4:	f7ff ff44 	bl	800ec70 <__i2b>
 800ede8:	2300      	movs	r3, #0
 800edea:	f8c8 0008 	str.w	r0, [r8, #8]
 800edee:	4604      	mov	r4, r0
 800edf0:	6003      	str	r3, [r0, #0]
 800edf2:	f04f 0800 	mov.w	r8, #0
 800edf6:	07eb      	lsls	r3, r5, #31
 800edf8:	d50a      	bpl.n	800ee10 <__pow5mult+0x74>
 800edfa:	4639      	mov	r1, r7
 800edfc:	4622      	mov	r2, r4
 800edfe:	4630      	mov	r0, r6
 800ee00:	f7ff ff3f 	bl	800ec82 <__multiply>
 800ee04:	4639      	mov	r1, r7
 800ee06:	4681      	mov	r9, r0
 800ee08:	4630      	mov	r0, r6
 800ee0a:	f7ff fe53 	bl	800eab4 <_Bfree>
 800ee0e:	464f      	mov	r7, r9
 800ee10:	106d      	asrs	r5, r5, #1
 800ee12:	d00b      	beq.n	800ee2c <__pow5mult+0x90>
 800ee14:	6820      	ldr	r0, [r4, #0]
 800ee16:	b938      	cbnz	r0, 800ee28 <__pow5mult+0x8c>
 800ee18:	4622      	mov	r2, r4
 800ee1a:	4621      	mov	r1, r4
 800ee1c:	4630      	mov	r0, r6
 800ee1e:	f7ff ff30 	bl	800ec82 <__multiply>
 800ee22:	6020      	str	r0, [r4, #0]
 800ee24:	f8c0 8000 	str.w	r8, [r0]
 800ee28:	4604      	mov	r4, r0
 800ee2a:	e7e4      	b.n	800edf6 <__pow5mult+0x5a>
 800ee2c:	4638      	mov	r0, r7
 800ee2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee32:	bf00      	nop
 800ee34:	08011198 	.word	0x08011198

0800ee38 <__lshift>:
 800ee38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee3c:	460c      	mov	r4, r1
 800ee3e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ee42:	6923      	ldr	r3, [r4, #16]
 800ee44:	6849      	ldr	r1, [r1, #4]
 800ee46:	eb0a 0903 	add.w	r9, sl, r3
 800ee4a:	68a3      	ldr	r3, [r4, #8]
 800ee4c:	4607      	mov	r7, r0
 800ee4e:	4616      	mov	r6, r2
 800ee50:	f109 0501 	add.w	r5, r9, #1
 800ee54:	42ab      	cmp	r3, r5
 800ee56:	db31      	blt.n	800eebc <__lshift+0x84>
 800ee58:	4638      	mov	r0, r7
 800ee5a:	f7ff fdf7 	bl	800ea4c <_Balloc>
 800ee5e:	2200      	movs	r2, #0
 800ee60:	4680      	mov	r8, r0
 800ee62:	f100 0314 	add.w	r3, r0, #20
 800ee66:	4611      	mov	r1, r2
 800ee68:	4552      	cmp	r2, sl
 800ee6a:	db2a      	blt.n	800eec2 <__lshift+0x8a>
 800ee6c:	6920      	ldr	r0, [r4, #16]
 800ee6e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ee72:	f104 0114 	add.w	r1, r4, #20
 800ee76:	f016 021f 	ands.w	r2, r6, #31
 800ee7a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800ee7e:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800ee82:	d022      	beq.n	800eeca <__lshift+0x92>
 800ee84:	f1c2 0c20 	rsb	ip, r2, #32
 800ee88:	2000      	movs	r0, #0
 800ee8a:	680e      	ldr	r6, [r1, #0]
 800ee8c:	4096      	lsls	r6, r2
 800ee8e:	4330      	orrs	r0, r6
 800ee90:	f843 0b04 	str.w	r0, [r3], #4
 800ee94:	f851 0b04 	ldr.w	r0, [r1], #4
 800ee98:	458e      	cmp	lr, r1
 800ee9a:	fa20 f00c 	lsr.w	r0, r0, ip
 800ee9e:	d8f4      	bhi.n	800ee8a <__lshift+0x52>
 800eea0:	6018      	str	r0, [r3, #0]
 800eea2:	b108      	cbz	r0, 800eea8 <__lshift+0x70>
 800eea4:	f109 0502 	add.w	r5, r9, #2
 800eea8:	3d01      	subs	r5, #1
 800eeaa:	4638      	mov	r0, r7
 800eeac:	f8c8 5010 	str.w	r5, [r8, #16]
 800eeb0:	4621      	mov	r1, r4
 800eeb2:	f7ff fdff 	bl	800eab4 <_Bfree>
 800eeb6:	4640      	mov	r0, r8
 800eeb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eebc:	3101      	adds	r1, #1
 800eebe:	005b      	lsls	r3, r3, #1
 800eec0:	e7c8      	b.n	800ee54 <__lshift+0x1c>
 800eec2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800eec6:	3201      	adds	r2, #1
 800eec8:	e7ce      	b.n	800ee68 <__lshift+0x30>
 800eeca:	3b04      	subs	r3, #4
 800eecc:	f851 2b04 	ldr.w	r2, [r1], #4
 800eed0:	f843 2f04 	str.w	r2, [r3, #4]!
 800eed4:	458e      	cmp	lr, r1
 800eed6:	d8f9      	bhi.n	800eecc <__lshift+0x94>
 800eed8:	e7e6      	b.n	800eea8 <__lshift+0x70>

0800eeda <__mcmp>:
 800eeda:	6903      	ldr	r3, [r0, #16]
 800eedc:	690a      	ldr	r2, [r1, #16]
 800eede:	1a9b      	subs	r3, r3, r2
 800eee0:	b530      	push	{r4, r5, lr}
 800eee2:	d10c      	bne.n	800eefe <__mcmp+0x24>
 800eee4:	0092      	lsls	r2, r2, #2
 800eee6:	3014      	adds	r0, #20
 800eee8:	3114      	adds	r1, #20
 800eeea:	1884      	adds	r4, r0, r2
 800eeec:	4411      	add	r1, r2
 800eeee:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800eef2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800eef6:	4295      	cmp	r5, r2
 800eef8:	d003      	beq.n	800ef02 <__mcmp+0x28>
 800eefa:	d305      	bcc.n	800ef08 <__mcmp+0x2e>
 800eefc:	2301      	movs	r3, #1
 800eefe:	4618      	mov	r0, r3
 800ef00:	bd30      	pop	{r4, r5, pc}
 800ef02:	42a0      	cmp	r0, r4
 800ef04:	d3f3      	bcc.n	800eeee <__mcmp+0x14>
 800ef06:	e7fa      	b.n	800eefe <__mcmp+0x24>
 800ef08:	f04f 33ff 	mov.w	r3, #4294967295
 800ef0c:	e7f7      	b.n	800eefe <__mcmp+0x24>

0800ef0e <__mdiff>:
 800ef0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef12:	460d      	mov	r5, r1
 800ef14:	4607      	mov	r7, r0
 800ef16:	4611      	mov	r1, r2
 800ef18:	4628      	mov	r0, r5
 800ef1a:	4614      	mov	r4, r2
 800ef1c:	f7ff ffdd 	bl	800eeda <__mcmp>
 800ef20:	1e06      	subs	r6, r0, #0
 800ef22:	d108      	bne.n	800ef36 <__mdiff+0x28>
 800ef24:	4631      	mov	r1, r6
 800ef26:	4638      	mov	r0, r7
 800ef28:	f7ff fd90 	bl	800ea4c <_Balloc>
 800ef2c:	2301      	movs	r3, #1
 800ef2e:	6103      	str	r3, [r0, #16]
 800ef30:	6146      	str	r6, [r0, #20]
 800ef32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef36:	bfa4      	itt	ge
 800ef38:	4623      	movge	r3, r4
 800ef3a:	462c      	movge	r4, r5
 800ef3c:	4638      	mov	r0, r7
 800ef3e:	6861      	ldr	r1, [r4, #4]
 800ef40:	bfa6      	itte	ge
 800ef42:	461d      	movge	r5, r3
 800ef44:	2600      	movge	r6, #0
 800ef46:	2601      	movlt	r6, #1
 800ef48:	f7ff fd80 	bl	800ea4c <_Balloc>
 800ef4c:	692b      	ldr	r3, [r5, #16]
 800ef4e:	60c6      	str	r6, [r0, #12]
 800ef50:	6926      	ldr	r6, [r4, #16]
 800ef52:	f105 0914 	add.w	r9, r5, #20
 800ef56:	f104 0214 	add.w	r2, r4, #20
 800ef5a:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ef5e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ef62:	f100 0514 	add.w	r5, r0, #20
 800ef66:	f04f 0c00 	mov.w	ip, #0
 800ef6a:	f852 ab04 	ldr.w	sl, [r2], #4
 800ef6e:	f859 4b04 	ldr.w	r4, [r9], #4
 800ef72:	fa1c f18a 	uxtah	r1, ip, sl
 800ef76:	b2a3      	uxth	r3, r4
 800ef78:	1ac9      	subs	r1, r1, r3
 800ef7a:	0c23      	lsrs	r3, r4, #16
 800ef7c:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ef80:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ef84:	b289      	uxth	r1, r1
 800ef86:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800ef8a:	45c8      	cmp	r8, r9
 800ef8c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ef90:	4696      	mov	lr, r2
 800ef92:	f845 3b04 	str.w	r3, [r5], #4
 800ef96:	d8e8      	bhi.n	800ef6a <__mdiff+0x5c>
 800ef98:	45be      	cmp	lr, r7
 800ef9a:	d305      	bcc.n	800efa8 <__mdiff+0x9a>
 800ef9c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800efa0:	b18b      	cbz	r3, 800efc6 <__mdiff+0xb8>
 800efa2:	6106      	str	r6, [r0, #16]
 800efa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efa8:	f85e 1b04 	ldr.w	r1, [lr], #4
 800efac:	fa1c f381 	uxtah	r3, ip, r1
 800efb0:	141a      	asrs	r2, r3, #16
 800efb2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800efb6:	b29b      	uxth	r3, r3
 800efb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800efbc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800efc0:	f845 3b04 	str.w	r3, [r5], #4
 800efc4:	e7e8      	b.n	800ef98 <__mdiff+0x8a>
 800efc6:	3e01      	subs	r6, #1
 800efc8:	e7e8      	b.n	800ef9c <__mdiff+0x8e>
	...

0800efcc <__ulp>:
 800efcc:	4b10      	ldr	r3, [pc, #64]	; (800f010 <__ulp+0x44>)
 800efce:	400b      	ands	r3, r1
 800efd0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	dd02      	ble.n	800efde <__ulp+0x12>
 800efd8:	2000      	movs	r0, #0
 800efda:	4619      	mov	r1, r3
 800efdc:	4770      	bx	lr
 800efde:	425b      	negs	r3, r3
 800efe0:	151b      	asrs	r3, r3, #20
 800efe2:	2b13      	cmp	r3, #19
 800efe4:	f04f 0000 	mov.w	r0, #0
 800efe8:	f04f 0100 	mov.w	r1, #0
 800efec:	dc04      	bgt.n	800eff8 <__ulp+0x2c>
 800efee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800eff2:	fa42 f103 	asr.w	r1, r2, r3
 800eff6:	4770      	bx	lr
 800eff8:	3b14      	subs	r3, #20
 800effa:	2b1e      	cmp	r3, #30
 800effc:	f04f 0201 	mov.w	r2, #1
 800f000:	bfda      	itte	le
 800f002:	f1c3 031f 	rsble	r3, r3, #31
 800f006:	fa02 f303 	lslle.w	r3, r2, r3
 800f00a:	4613      	movgt	r3, r2
 800f00c:	4618      	mov	r0, r3
 800f00e:	4770      	bx	lr
 800f010:	7ff00000 	.word	0x7ff00000

0800f014 <__b2d>:
 800f014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f018:	6907      	ldr	r7, [r0, #16]
 800f01a:	f100 0914 	add.w	r9, r0, #20
 800f01e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800f022:	f1a7 0804 	sub.w	r8, r7, #4
 800f026:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800f02a:	4630      	mov	r0, r6
 800f02c:	f7ff fdd2 	bl	800ebd4 <__hi0bits>
 800f030:	f1c0 0320 	rsb	r3, r0, #32
 800f034:	280a      	cmp	r0, #10
 800f036:	600b      	str	r3, [r1, #0]
 800f038:	491e      	ldr	r1, [pc, #120]	; (800f0b4 <__b2d+0xa0>)
 800f03a:	dc17      	bgt.n	800f06c <__b2d+0x58>
 800f03c:	f1c0 0e0b 	rsb	lr, r0, #11
 800f040:	45c1      	cmp	r9, r8
 800f042:	fa26 f30e 	lsr.w	r3, r6, lr
 800f046:	bf38      	it	cc
 800f048:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800f04c:	ea43 0501 	orr.w	r5, r3, r1
 800f050:	bf28      	it	cs
 800f052:	2200      	movcs	r2, #0
 800f054:	f100 0315 	add.w	r3, r0, #21
 800f058:	fa06 f303 	lsl.w	r3, r6, r3
 800f05c:	fa22 f20e 	lsr.w	r2, r2, lr
 800f060:	ea43 0402 	orr.w	r4, r3, r2
 800f064:	4620      	mov	r0, r4
 800f066:	4629      	mov	r1, r5
 800f068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f06c:	45c1      	cmp	r9, r8
 800f06e:	bf3a      	itte	cc
 800f070:	f1a7 0808 	subcc.w	r8, r7, #8
 800f074:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800f078:	2200      	movcs	r2, #0
 800f07a:	f1b0 030b 	subs.w	r3, r0, #11
 800f07e:	d015      	beq.n	800f0ac <__b2d+0x98>
 800f080:	409e      	lsls	r6, r3
 800f082:	f1c3 0720 	rsb	r7, r3, #32
 800f086:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800f08a:	fa22 f107 	lsr.w	r1, r2, r7
 800f08e:	45c8      	cmp	r8, r9
 800f090:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800f094:	ea46 0501 	orr.w	r5, r6, r1
 800f098:	bf8c      	ite	hi
 800f09a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800f09e:	2100      	movls	r1, #0
 800f0a0:	fa02 f003 	lsl.w	r0, r2, r3
 800f0a4:	40f9      	lsrs	r1, r7
 800f0a6:	ea40 0401 	orr.w	r4, r0, r1
 800f0aa:	e7db      	b.n	800f064 <__b2d+0x50>
 800f0ac:	ea46 0501 	orr.w	r5, r6, r1
 800f0b0:	4614      	mov	r4, r2
 800f0b2:	e7d7      	b.n	800f064 <__b2d+0x50>
 800f0b4:	3ff00000 	.word	0x3ff00000

0800f0b8 <__d2b>:
 800f0b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f0bc:	2101      	movs	r1, #1
 800f0be:	461c      	mov	r4, r3
 800f0c0:	4690      	mov	r8, r2
 800f0c2:	9e08      	ldr	r6, [sp, #32]
 800f0c4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f0c6:	f7ff fcc1 	bl	800ea4c <_Balloc>
 800f0ca:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800f0ce:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800f0d2:	4607      	mov	r7, r0
 800f0d4:	bb34      	cbnz	r4, 800f124 <__d2b+0x6c>
 800f0d6:	9201      	str	r2, [sp, #4]
 800f0d8:	f1b8 0f00 	cmp.w	r8, #0
 800f0dc:	d027      	beq.n	800f12e <__d2b+0x76>
 800f0de:	a802      	add	r0, sp, #8
 800f0e0:	f840 8d08 	str.w	r8, [r0, #-8]!
 800f0e4:	f7ff fd95 	bl	800ec12 <__lo0bits>
 800f0e8:	9900      	ldr	r1, [sp, #0]
 800f0ea:	b1f0      	cbz	r0, 800f12a <__d2b+0x72>
 800f0ec:	9a01      	ldr	r2, [sp, #4]
 800f0ee:	f1c0 0320 	rsb	r3, r0, #32
 800f0f2:	fa02 f303 	lsl.w	r3, r2, r3
 800f0f6:	430b      	orrs	r3, r1
 800f0f8:	40c2      	lsrs	r2, r0
 800f0fa:	617b      	str	r3, [r7, #20]
 800f0fc:	9201      	str	r2, [sp, #4]
 800f0fe:	9b01      	ldr	r3, [sp, #4]
 800f100:	61bb      	str	r3, [r7, #24]
 800f102:	2b00      	cmp	r3, #0
 800f104:	bf14      	ite	ne
 800f106:	2102      	movne	r1, #2
 800f108:	2101      	moveq	r1, #1
 800f10a:	6139      	str	r1, [r7, #16]
 800f10c:	b1c4      	cbz	r4, 800f140 <__d2b+0x88>
 800f10e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800f112:	4404      	add	r4, r0
 800f114:	6034      	str	r4, [r6, #0]
 800f116:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f11a:	6028      	str	r0, [r5, #0]
 800f11c:	4638      	mov	r0, r7
 800f11e:	b002      	add	sp, #8
 800f120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f124:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800f128:	e7d5      	b.n	800f0d6 <__d2b+0x1e>
 800f12a:	6179      	str	r1, [r7, #20]
 800f12c:	e7e7      	b.n	800f0fe <__d2b+0x46>
 800f12e:	a801      	add	r0, sp, #4
 800f130:	f7ff fd6f 	bl	800ec12 <__lo0bits>
 800f134:	9b01      	ldr	r3, [sp, #4]
 800f136:	617b      	str	r3, [r7, #20]
 800f138:	2101      	movs	r1, #1
 800f13a:	6139      	str	r1, [r7, #16]
 800f13c:	3020      	adds	r0, #32
 800f13e:	e7e5      	b.n	800f10c <__d2b+0x54>
 800f140:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800f144:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f148:	6030      	str	r0, [r6, #0]
 800f14a:	6918      	ldr	r0, [r3, #16]
 800f14c:	f7ff fd42 	bl	800ebd4 <__hi0bits>
 800f150:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800f154:	e7e1      	b.n	800f11a <__d2b+0x62>

0800f156 <__ratio>:
 800f156:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800f15a:	4688      	mov	r8, r1
 800f15c:	4669      	mov	r1, sp
 800f15e:	4681      	mov	r9, r0
 800f160:	f7ff ff58 	bl	800f014 <__b2d>
 800f164:	460d      	mov	r5, r1
 800f166:	4604      	mov	r4, r0
 800f168:	a901      	add	r1, sp, #4
 800f16a:	4640      	mov	r0, r8
 800f16c:	f7ff ff52 	bl	800f014 <__b2d>
 800f170:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f174:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f178:	9e00      	ldr	r6, [sp, #0]
 800f17a:	1a9a      	subs	r2, r3, r2
 800f17c:	9b01      	ldr	r3, [sp, #4]
 800f17e:	1af3      	subs	r3, r6, r3
 800f180:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800f184:	2b00      	cmp	r3, #0
 800f186:	bfd6      	itet	le
 800f188:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f18c:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 800f190:	eb01 5103 	addle.w	r1, r1, r3, lsl #20
 800f194:	4602      	mov	r2, r0
 800f196:	460b      	mov	r3, r1
 800f198:	4620      	mov	r0, r4
 800f19a:	4629      	mov	r1, r5
 800f19c:	f7f1 fb62 	bl	8000864 <__aeabi_ddiv>
 800f1a0:	b002      	add	sp, #8
 800f1a2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

0800f1a6 <__copybits>:
 800f1a6:	3901      	subs	r1, #1
 800f1a8:	b510      	push	{r4, lr}
 800f1aa:	1149      	asrs	r1, r1, #5
 800f1ac:	6914      	ldr	r4, [r2, #16]
 800f1ae:	3101      	adds	r1, #1
 800f1b0:	f102 0314 	add.w	r3, r2, #20
 800f1b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f1b8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f1bc:	42a3      	cmp	r3, r4
 800f1be:	4602      	mov	r2, r0
 800f1c0:	d303      	bcc.n	800f1ca <__copybits+0x24>
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	428a      	cmp	r2, r1
 800f1c6:	d305      	bcc.n	800f1d4 <__copybits+0x2e>
 800f1c8:	bd10      	pop	{r4, pc}
 800f1ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1ce:	f840 2b04 	str.w	r2, [r0], #4
 800f1d2:	e7f3      	b.n	800f1bc <__copybits+0x16>
 800f1d4:	f842 3b04 	str.w	r3, [r2], #4
 800f1d8:	e7f4      	b.n	800f1c4 <__copybits+0x1e>

0800f1da <__any_on>:
 800f1da:	f100 0214 	add.w	r2, r0, #20
 800f1de:	6900      	ldr	r0, [r0, #16]
 800f1e0:	114b      	asrs	r3, r1, #5
 800f1e2:	4298      	cmp	r0, r3
 800f1e4:	b510      	push	{r4, lr}
 800f1e6:	db11      	blt.n	800f20c <__any_on+0x32>
 800f1e8:	dd0a      	ble.n	800f200 <__any_on+0x26>
 800f1ea:	f011 011f 	ands.w	r1, r1, #31
 800f1ee:	d007      	beq.n	800f200 <__any_on+0x26>
 800f1f0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f1f4:	fa24 f001 	lsr.w	r0, r4, r1
 800f1f8:	fa00 f101 	lsl.w	r1, r0, r1
 800f1fc:	428c      	cmp	r4, r1
 800f1fe:	d10b      	bne.n	800f218 <__any_on+0x3e>
 800f200:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f204:	4293      	cmp	r3, r2
 800f206:	d803      	bhi.n	800f210 <__any_on+0x36>
 800f208:	2000      	movs	r0, #0
 800f20a:	bd10      	pop	{r4, pc}
 800f20c:	4603      	mov	r3, r0
 800f20e:	e7f7      	b.n	800f200 <__any_on+0x26>
 800f210:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f214:	2900      	cmp	r1, #0
 800f216:	d0f5      	beq.n	800f204 <__any_on+0x2a>
 800f218:	2001      	movs	r0, #1
 800f21a:	bd10      	pop	{r4, pc}

0800f21c <_realloc_r>:
 800f21c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f220:	4682      	mov	sl, r0
 800f222:	460c      	mov	r4, r1
 800f224:	b929      	cbnz	r1, 800f232 <_realloc_r+0x16>
 800f226:	4611      	mov	r1, r2
 800f228:	b003      	add	sp, #12
 800f22a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f22e:	f7fa bcdf 	b.w	8009bf0 <_malloc_r>
 800f232:	9201      	str	r2, [sp, #4]
 800f234:	f7fb f95a 	bl	800a4ec <__malloc_lock>
 800f238:	9a01      	ldr	r2, [sp, #4]
 800f23a:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800f23e:	f102 080b 	add.w	r8, r2, #11
 800f242:	f1b8 0f16 	cmp.w	r8, #22
 800f246:	f1a4 0908 	sub.w	r9, r4, #8
 800f24a:	f025 0603 	bic.w	r6, r5, #3
 800f24e:	d90a      	bls.n	800f266 <_realloc_r+0x4a>
 800f250:	f038 0807 	bics.w	r8, r8, #7
 800f254:	d509      	bpl.n	800f26a <_realloc_r+0x4e>
 800f256:	230c      	movs	r3, #12
 800f258:	f8ca 3000 	str.w	r3, [sl]
 800f25c:	2700      	movs	r7, #0
 800f25e:	4638      	mov	r0, r7
 800f260:	b003      	add	sp, #12
 800f262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f266:	f04f 0810 	mov.w	r8, #16
 800f26a:	4590      	cmp	r8, r2
 800f26c:	d3f3      	bcc.n	800f256 <_realloc_r+0x3a>
 800f26e:	45b0      	cmp	r8, r6
 800f270:	f340 8145 	ble.w	800f4fe <_realloc_r+0x2e2>
 800f274:	4ba8      	ldr	r3, [pc, #672]	; (800f518 <_realloc_r+0x2fc>)
 800f276:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800f27a:	eb09 0106 	add.w	r1, r9, r6
 800f27e:	4571      	cmp	r1, lr
 800f280:	469b      	mov	fp, r3
 800f282:	684b      	ldr	r3, [r1, #4]
 800f284:	d005      	beq.n	800f292 <_realloc_r+0x76>
 800f286:	f023 0001 	bic.w	r0, r3, #1
 800f28a:	4408      	add	r0, r1
 800f28c:	6840      	ldr	r0, [r0, #4]
 800f28e:	07c7      	lsls	r7, r0, #31
 800f290:	d447      	bmi.n	800f322 <_realloc_r+0x106>
 800f292:	f023 0303 	bic.w	r3, r3, #3
 800f296:	4571      	cmp	r1, lr
 800f298:	eb06 0703 	add.w	r7, r6, r3
 800f29c:	d119      	bne.n	800f2d2 <_realloc_r+0xb6>
 800f29e:	f108 0010 	add.w	r0, r8, #16
 800f2a2:	4287      	cmp	r7, r0
 800f2a4:	db3f      	blt.n	800f326 <_realloc_r+0x10a>
 800f2a6:	eb09 0308 	add.w	r3, r9, r8
 800f2aa:	eba7 0708 	sub.w	r7, r7, r8
 800f2ae:	f047 0701 	orr.w	r7, r7, #1
 800f2b2:	f8cb 3008 	str.w	r3, [fp, #8]
 800f2b6:	605f      	str	r7, [r3, #4]
 800f2b8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f2bc:	f003 0301 	and.w	r3, r3, #1
 800f2c0:	ea43 0308 	orr.w	r3, r3, r8
 800f2c4:	f844 3c04 	str.w	r3, [r4, #-4]
 800f2c8:	4650      	mov	r0, sl
 800f2ca:	f7fb f915 	bl	800a4f8 <__malloc_unlock>
 800f2ce:	4627      	mov	r7, r4
 800f2d0:	e7c5      	b.n	800f25e <_realloc_r+0x42>
 800f2d2:	45b8      	cmp	r8, r7
 800f2d4:	dc27      	bgt.n	800f326 <_realloc_r+0x10a>
 800f2d6:	68cb      	ldr	r3, [r1, #12]
 800f2d8:	688a      	ldr	r2, [r1, #8]
 800f2da:	60d3      	str	r3, [r2, #12]
 800f2dc:	609a      	str	r2, [r3, #8]
 800f2de:	eba7 0008 	sub.w	r0, r7, r8
 800f2e2:	280f      	cmp	r0, #15
 800f2e4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f2e8:	eb09 0207 	add.w	r2, r9, r7
 800f2ec:	f240 8109 	bls.w	800f502 <_realloc_r+0x2e6>
 800f2f0:	eb09 0108 	add.w	r1, r9, r8
 800f2f4:	f003 0301 	and.w	r3, r3, #1
 800f2f8:	ea43 0308 	orr.w	r3, r3, r8
 800f2fc:	f040 0001 	orr.w	r0, r0, #1
 800f300:	f8c9 3004 	str.w	r3, [r9, #4]
 800f304:	6048      	str	r0, [r1, #4]
 800f306:	6853      	ldr	r3, [r2, #4]
 800f308:	f043 0301 	orr.w	r3, r3, #1
 800f30c:	6053      	str	r3, [r2, #4]
 800f30e:	3108      	adds	r1, #8
 800f310:	4650      	mov	r0, sl
 800f312:	f7fe fc8f 	bl	800dc34 <_free_r>
 800f316:	4650      	mov	r0, sl
 800f318:	f7fb f8ee 	bl	800a4f8 <__malloc_unlock>
 800f31c:	f109 0708 	add.w	r7, r9, #8
 800f320:	e79d      	b.n	800f25e <_realloc_r+0x42>
 800f322:	2300      	movs	r3, #0
 800f324:	4619      	mov	r1, r3
 800f326:	07e8      	lsls	r0, r5, #31
 800f328:	f100 8084 	bmi.w	800f434 <_realloc_r+0x218>
 800f32c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800f330:	eba9 0505 	sub.w	r5, r9, r5
 800f334:	6868      	ldr	r0, [r5, #4]
 800f336:	f020 0003 	bic.w	r0, r0, #3
 800f33a:	4430      	add	r0, r6
 800f33c:	2900      	cmp	r1, #0
 800f33e:	d076      	beq.n	800f42e <_realloc_r+0x212>
 800f340:	4571      	cmp	r1, lr
 800f342:	d150      	bne.n	800f3e6 <_realloc_r+0x1ca>
 800f344:	4403      	add	r3, r0
 800f346:	f108 0110 	add.w	r1, r8, #16
 800f34a:	428b      	cmp	r3, r1
 800f34c:	db6f      	blt.n	800f42e <_realloc_r+0x212>
 800f34e:	462f      	mov	r7, r5
 800f350:	68ea      	ldr	r2, [r5, #12]
 800f352:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800f356:	60ca      	str	r2, [r1, #12]
 800f358:	6091      	str	r1, [r2, #8]
 800f35a:	1f32      	subs	r2, r6, #4
 800f35c:	2a24      	cmp	r2, #36	; 0x24
 800f35e:	d83b      	bhi.n	800f3d8 <_realloc_r+0x1bc>
 800f360:	2a13      	cmp	r2, #19
 800f362:	d936      	bls.n	800f3d2 <_realloc_r+0x1b6>
 800f364:	6821      	ldr	r1, [r4, #0]
 800f366:	60a9      	str	r1, [r5, #8]
 800f368:	6861      	ldr	r1, [r4, #4]
 800f36a:	60e9      	str	r1, [r5, #12]
 800f36c:	2a1b      	cmp	r2, #27
 800f36e:	d81c      	bhi.n	800f3aa <_realloc_r+0x18e>
 800f370:	f105 0210 	add.w	r2, r5, #16
 800f374:	f104 0108 	add.w	r1, r4, #8
 800f378:	6808      	ldr	r0, [r1, #0]
 800f37a:	6010      	str	r0, [r2, #0]
 800f37c:	6848      	ldr	r0, [r1, #4]
 800f37e:	6050      	str	r0, [r2, #4]
 800f380:	6889      	ldr	r1, [r1, #8]
 800f382:	6091      	str	r1, [r2, #8]
 800f384:	eb05 0208 	add.w	r2, r5, r8
 800f388:	eba3 0308 	sub.w	r3, r3, r8
 800f38c:	f043 0301 	orr.w	r3, r3, #1
 800f390:	f8cb 2008 	str.w	r2, [fp, #8]
 800f394:	6053      	str	r3, [r2, #4]
 800f396:	686b      	ldr	r3, [r5, #4]
 800f398:	f003 0301 	and.w	r3, r3, #1
 800f39c:	ea43 0308 	orr.w	r3, r3, r8
 800f3a0:	606b      	str	r3, [r5, #4]
 800f3a2:	4650      	mov	r0, sl
 800f3a4:	f7fb f8a8 	bl	800a4f8 <__malloc_unlock>
 800f3a8:	e759      	b.n	800f25e <_realloc_r+0x42>
 800f3aa:	68a1      	ldr	r1, [r4, #8]
 800f3ac:	6129      	str	r1, [r5, #16]
 800f3ae:	68e1      	ldr	r1, [r4, #12]
 800f3b0:	6169      	str	r1, [r5, #20]
 800f3b2:	2a24      	cmp	r2, #36	; 0x24
 800f3b4:	bf01      	itttt	eq
 800f3b6:	6922      	ldreq	r2, [r4, #16]
 800f3b8:	61aa      	streq	r2, [r5, #24]
 800f3ba:	6960      	ldreq	r0, [r4, #20]
 800f3bc:	61e8      	streq	r0, [r5, #28]
 800f3be:	bf19      	ittee	ne
 800f3c0:	f105 0218 	addne.w	r2, r5, #24
 800f3c4:	f104 0110 	addne.w	r1, r4, #16
 800f3c8:	f105 0220 	addeq.w	r2, r5, #32
 800f3cc:	f104 0118 	addeq.w	r1, r4, #24
 800f3d0:	e7d2      	b.n	800f378 <_realloc_r+0x15c>
 800f3d2:	463a      	mov	r2, r7
 800f3d4:	4621      	mov	r1, r4
 800f3d6:	e7cf      	b.n	800f378 <_realloc_r+0x15c>
 800f3d8:	4621      	mov	r1, r4
 800f3da:	4638      	mov	r0, r7
 800f3dc:	9301      	str	r3, [sp, #4]
 800f3de:	f7ff fb1b 	bl	800ea18 <memmove>
 800f3e2:	9b01      	ldr	r3, [sp, #4]
 800f3e4:	e7ce      	b.n	800f384 <_realloc_r+0x168>
 800f3e6:	18c7      	adds	r7, r0, r3
 800f3e8:	45b8      	cmp	r8, r7
 800f3ea:	dc20      	bgt.n	800f42e <_realloc_r+0x212>
 800f3ec:	68cb      	ldr	r3, [r1, #12]
 800f3ee:	688a      	ldr	r2, [r1, #8]
 800f3f0:	60d3      	str	r3, [r2, #12]
 800f3f2:	609a      	str	r2, [r3, #8]
 800f3f4:	4628      	mov	r0, r5
 800f3f6:	68eb      	ldr	r3, [r5, #12]
 800f3f8:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800f3fc:	60d3      	str	r3, [r2, #12]
 800f3fe:	609a      	str	r2, [r3, #8]
 800f400:	1f32      	subs	r2, r6, #4
 800f402:	2a24      	cmp	r2, #36	; 0x24
 800f404:	d842      	bhi.n	800f48c <_realloc_r+0x270>
 800f406:	2a13      	cmp	r2, #19
 800f408:	d93e      	bls.n	800f488 <_realloc_r+0x26c>
 800f40a:	6823      	ldr	r3, [r4, #0]
 800f40c:	60ab      	str	r3, [r5, #8]
 800f40e:	6863      	ldr	r3, [r4, #4]
 800f410:	60eb      	str	r3, [r5, #12]
 800f412:	2a1b      	cmp	r2, #27
 800f414:	d824      	bhi.n	800f460 <_realloc_r+0x244>
 800f416:	f105 0010 	add.w	r0, r5, #16
 800f41a:	f104 0308 	add.w	r3, r4, #8
 800f41e:	681a      	ldr	r2, [r3, #0]
 800f420:	6002      	str	r2, [r0, #0]
 800f422:	685a      	ldr	r2, [r3, #4]
 800f424:	6042      	str	r2, [r0, #4]
 800f426:	689b      	ldr	r3, [r3, #8]
 800f428:	6083      	str	r3, [r0, #8]
 800f42a:	46a9      	mov	r9, r5
 800f42c:	e757      	b.n	800f2de <_realloc_r+0xc2>
 800f42e:	4580      	cmp	r8, r0
 800f430:	4607      	mov	r7, r0
 800f432:	dddf      	ble.n	800f3f4 <_realloc_r+0x1d8>
 800f434:	4611      	mov	r1, r2
 800f436:	4650      	mov	r0, sl
 800f438:	f7fa fbda 	bl	8009bf0 <_malloc_r>
 800f43c:	4607      	mov	r7, r0
 800f43e:	2800      	cmp	r0, #0
 800f440:	d0af      	beq.n	800f3a2 <_realloc_r+0x186>
 800f442:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f446:	f023 0301 	bic.w	r3, r3, #1
 800f44a:	f1a0 0208 	sub.w	r2, r0, #8
 800f44e:	444b      	add	r3, r9
 800f450:	429a      	cmp	r2, r3
 800f452:	d11f      	bne.n	800f494 <_realloc_r+0x278>
 800f454:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800f458:	f027 0703 	bic.w	r7, r7, #3
 800f45c:	4437      	add	r7, r6
 800f45e:	e73e      	b.n	800f2de <_realloc_r+0xc2>
 800f460:	68a3      	ldr	r3, [r4, #8]
 800f462:	612b      	str	r3, [r5, #16]
 800f464:	68e3      	ldr	r3, [r4, #12]
 800f466:	616b      	str	r3, [r5, #20]
 800f468:	2a24      	cmp	r2, #36	; 0x24
 800f46a:	bf01      	itttt	eq
 800f46c:	6923      	ldreq	r3, [r4, #16]
 800f46e:	61ab      	streq	r3, [r5, #24]
 800f470:	6962      	ldreq	r2, [r4, #20]
 800f472:	61ea      	streq	r2, [r5, #28]
 800f474:	bf19      	ittee	ne
 800f476:	f105 0018 	addne.w	r0, r5, #24
 800f47a:	f104 0310 	addne.w	r3, r4, #16
 800f47e:	f105 0020 	addeq.w	r0, r5, #32
 800f482:	f104 0318 	addeq.w	r3, r4, #24
 800f486:	e7ca      	b.n	800f41e <_realloc_r+0x202>
 800f488:	4623      	mov	r3, r4
 800f48a:	e7c8      	b.n	800f41e <_realloc_r+0x202>
 800f48c:	4621      	mov	r1, r4
 800f48e:	f7ff fac3 	bl	800ea18 <memmove>
 800f492:	e7ca      	b.n	800f42a <_realloc_r+0x20e>
 800f494:	1f32      	subs	r2, r6, #4
 800f496:	2a24      	cmp	r2, #36	; 0x24
 800f498:	d82d      	bhi.n	800f4f6 <_realloc_r+0x2da>
 800f49a:	2a13      	cmp	r2, #19
 800f49c:	d928      	bls.n	800f4f0 <_realloc_r+0x2d4>
 800f49e:	6823      	ldr	r3, [r4, #0]
 800f4a0:	6003      	str	r3, [r0, #0]
 800f4a2:	6863      	ldr	r3, [r4, #4]
 800f4a4:	6043      	str	r3, [r0, #4]
 800f4a6:	2a1b      	cmp	r2, #27
 800f4a8:	d80e      	bhi.n	800f4c8 <_realloc_r+0x2ac>
 800f4aa:	f100 0308 	add.w	r3, r0, #8
 800f4ae:	f104 0208 	add.w	r2, r4, #8
 800f4b2:	6811      	ldr	r1, [r2, #0]
 800f4b4:	6019      	str	r1, [r3, #0]
 800f4b6:	6851      	ldr	r1, [r2, #4]
 800f4b8:	6059      	str	r1, [r3, #4]
 800f4ba:	6892      	ldr	r2, [r2, #8]
 800f4bc:	609a      	str	r2, [r3, #8]
 800f4be:	4621      	mov	r1, r4
 800f4c0:	4650      	mov	r0, sl
 800f4c2:	f7fe fbb7 	bl	800dc34 <_free_r>
 800f4c6:	e76c      	b.n	800f3a2 <_realloc_r+0x186>
 800f4c8:	68a3      	ldr	r3, [r4, #8]
 800f4ca:	6083      	str	r3, [r0, #8]
 800f4cc:	68e3      	ldr	r3, [r4, #12]
 800f4ce:	60c3      	str	r3, [r0, #12]
 800f4d0:	2a24      	cmp	r2, #36	; 0x24
 800f4d2:	bf01      	itttt	eq
 800f4d4:	6923      	ldreq	r3, [r4, #16]
 800f4d6:	6103      	streq	r3, [r0, #16]
 800f4d8:	6961      	ldreq	r1, [r4, #20]
 800f4da:	6141      	streq	r1, [r0, #20]
 800f4dc:	bf19      	ittee	ne
 800f4de:	f100 0310 	addne.w	r3, r0, #16
 800f4e2:	f104 0210 	addne.w	r2, r4, #16
 800f4e6:	f100 0318 	addeq.w	r3, r0, #24
 800f4ea:	f104 0218 	addeq.w	r2, r4, #24
 800f4ee:	e7e0      	b.n	800f4b2 <_realloc_r+0x296>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	4622      	mov	r2, r4
 800f4f4:	e7dd      	b.n	800f4b2 <_realloc_r+0x296>
 800f4f6:	4621      	mov	r1, r4
 800f4f8:	f7ff fa8e 	bl	800ea18 <memmove>
 800f4fc:	e7df      	b.n	800f4be <_realloc_r+0x2a2>
 800f4fe:	4637      	mov	r7, r6
 800f500:	e6ed      	b.n	800f2de <_realloc_r+0xc2>
 800f502:	f003 0301 	and.w	r3, r3, #1
 800f506:	431f      	orrs	r7, r3
 800f508:	f8c9 7004 	str.w	r7, [r9, #4]
 800f50c:	6853      	ldr	r3, [r2, #4]
 800f50e:	f043 0301 	orr.w	r3, r3, #1
 800f512:	6053      	str	r3, [r2, #4]
 800f514:	e6ff      	b.n	800f316 <_realloc_r+0xfa>
 800f516:	bf00      	nop
 800f518:	20000104 	.word	0x20000104

0800f51c <siscanf>:
 800f51c:	b40e      	push	{r1, r2, r3}
 800f51e:	b530      	push	{r4, r5, lr}
 800f520:	b09c      	sub	sp, #112	; 0x70
 800f522:	ac1f      	add	r4, sp, #124	; 0x7c
 800f524:	f44f 7201 	mov.w	r2, #516	; 0x204
 800f528:	f854 5b04 	ldr.w	r5, [r4], #4
 800f52c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f530:	9002      	str	r0, [sp, #8]
 800f532:	9006      	str	r0, [sp, #24]
 800f534:	f7f0 fe56 	bl	80001e4 <strlen>
 800f538:	4b0b      	ldr	r3, [pc, #44]	; (800f568 <siscanf+0x4c>)
 800f53a:	9003      	str	r0, [sp, #12]
 800f53c:	9007      	str	r0, [sp, #28]
 800f53e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f540:	480a      	ldr	r0, [pc, #40]	; (800f56c <siscanf+0x50>)
 800f542:	9401      	str	r4, [sp, #4]
 800f544:	2300      	movs	r3, #0
 800f546:	930f      	str	r3, [sp, #60]	; 0x3c
 800f548:	9314      	str	r3, [sp, #80]	; 0x50
 800f54a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f54e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f552:	462a      	mov	r2, r5
 800f554:	4623      	mov	r3, r4
 800f556:	a902      	add	r1, sp, #8
 800f558:	6800      	ldr	r0, [r0, #0]
 800f55a:	f000 f99f 	bl	800f89c <__ssvfiscanf_r>
 800f55e:	b01c      	add	sp, #112	; 0x70
 800f560:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f564:	b003      	add	sp, #12
 800f566:	4770      	bx	lr
 800f568:	0800f593 	.word	0x0800f593
 800f56c:	20000010 	.word	0x20000010

0800f570 <__sread>:
 800f570:	b510      	push	{r4, lr}
 800f572:	460c      	mov	r4, r1
 800f574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f578:	f000 ff3c 	bl	80103f4 <_read_r>
 800f57c:	2800      	cmp	r0, #0
 800f57e:	bfab      	itete	ge
 800f580:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f582:	89a3      	ldrhlt	r3, [r4, #12]
 800f584:	181b      	addge	r3, r3, r0
 800f586:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f58a:	bfac      	ite	ge
 800f58c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f58e:	81a3      	strhlt	r3, [r4, #12]
 800f590:	bd10      	pop	{r4, pc}

0800f592 <__seofread>:
 800f592:	2000      	movs	r0, #0
 800f594:	4770      	bx	lr

0800f596 <__swrite>:
 800f596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f59a:	461f      	mov	r7, r3
 800f59c:	898b      	ldrh	r3, [r1, #12]
 800f59e:	05db      	lsls	r3, r3, #23
 800f5a0:	4605      	mov	r5, r0
 800f5a2:	460c      	mov	r4, r1
 800f5a4:	4616      	mov	r6, r2
 800f5a6:	d505      	bpl.n	800f5b4 <__swrite+0x1e>
 800f5a8:	2302      	movs	r3, #2
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5b0:	f000 fee2 	bl	8010378 <_lseek_r>
 800f5b4:	89a3      	ldrh	r3, [r4, #12]
 800f5b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f5ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f5be:	81a3      	strh	r3, [r4, #12]
 800f5c0:	4632      	mov	r2, r6
 800f5c2:	463b      	mov	r3, r7
 800f5c4:	4628      	mov	r0, r5
 800f5c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f5ca:	f000 bd73 	b.w	80100b4 <_write_r>

0800f5ce <__sseek>:
 800f5ce:	b510      	push	{r4, lr}
 800f5d0:	460c      	mov	r4, r1
 800f5d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5d6:	f000 fecf 	bl	8010378 <_lseek_r>
 800f5da:	1c43      	adds	r3, r0, #1
 800f5dc:	89a3      	ldrh	r3, [r4, #12]
 800f5de:	bf15      	itete	ne
 800f5e0:	6560      	strne	r0, [r4, #84]	; 0x54
 800f5e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f5e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f5ea:	81a3      	strheq	r3, [r4, #12]
 800f5ec:	bf18      	it	ne
 800f5ee:	81a3      	strhne	r3, [r4, #12]
 800f5f0:	bd10      	pop	{r4, pc}

0800f5f2 <__sclose>:
 800f5f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5f6:	f000 bd9d 	b.w	8010134 <_close_r>

0800f5fa <strcpy>:
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f600:	f803 2b01 	strb.w	r2, [r3], #1
 800f604:	2a00      	cmp	r2, #0
 800f606:	d1f9      	bne.n	800f5fc <strcpy+0x2>
 800f608:	4770      	bx	lr

0800f60a <strncmp>:
 800f60a:	b510      	push	{r4, lr}
 800f60c:	b16a      	cbz	r2, 800f62a <strncmp+0x20>
 800f60e:	3901      	subs	r1, #1
 800f610:	1884      	adds	r4, r0, r2
 800f612:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f616:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f61a:	4293      	cmp	r3, r2
 800f61c:	d103      	bne.n	800f626 <strncmp+0x1c>
 800f61e:	42a0      	cmp	r0, r4
 800f620:	d001      	beq.n	800f626 <strncmp+0x1c>
 800f622:	2b00      	cmp	r3, #0
 800f624:	d1f5      	bne.n	800f612 <strncmp+0x8>
 800f626:	1a98      	subs	r0, r3, r2
 800f628:	bd10      	pop	{r4, pc}
 800f62a:	4610      	mov	r0, r2
 800f62c:	bd10      	pop	{r4, pc}

0800f62e <_strtoul_l.isra.0>:
 800f62e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f632:	4680      	mov	r8, r0
 800f634:	4689      	mov	r9, r1
 800f636:	4692      	mov	sl, r2
 800f638:	461e      	mov	r6, r3
 800f63a:	460f      	mov	r7, r1
 800f63c:	463d      	mov	r5, r7
 800f63e:	9808      	ldr	r0, [sp, #32]
 800f640:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f644:	f7ff f942 	bl	800e8cc <__locale_ctype_ptr_l>
 800f648:	4420      	add	r0, r4
 800f64a:	7843      	ldrb	r3, [r0, #1]
 800f64c:	f013 0308 	ands.w	r3, r3, #8
 800f650:	d10a      	bne.n	800f668 <_strtoul_l.isra.0+0x3a>
 800f652:	2c2d      	cmp	r4, #45	; 0x2d
 800f654:	d10a      	bne.n	800f66c <_strtoul_l.isra.0+0x3e>
 800f656:	782c      	ldrb	r4, [r5, #0]
 800f658:	2301      	movs	r3, #1
 800f65a:	1cbd      	adds	r5, r7, #2
 800f65c:	b15e      	cbz	r6, 800f676 <_strtoul_l.isra.0+0x48>
 800f65e:	2e10      	cmp	r6, #16
 800f660:	d113      	bne.n	800f68a <_strtoul_l.isra.0+0x5c>
 800f662:	2c30      	cmp	r4, #48	; 0x30
 800f664:	d009      	beq.n	800f67a <_strtoul_l.isra.0+0x4c>
 800f666:	e010      	b.n	800f68a <_strtoul_l.isra.0+0x5c>
 800f668:	462f      	mov	r7, r5
 800f66a:	e7e7      	b.n	800f63c <_strtoul_l.isra.0+0xe>
 800f66c:	2c2b      	cmp	r4, #43	; 0x2b
 800f66e:	bf04      	itt	eq
 800f670:	782c      	ldrbeq	r4, [r5, #0]
 800f672:	1cbd      	addeq	r5, r7, #2
 800f674:	e7f2      	b.n	800f65c <_strtoul_l.isra.0+0x2e>
 800f676:	2c30      	cmp	r4, #48	; 0x30
 800f678:	d125      	bne.n	800f6c6 <_strtoul_l.isra.0+0x98>
 800f67a:	782a      	ldrb	r2, [r5, #0]
 800f67c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800f680:	2a58      	cmp	r2, #88	; 0x58
 800f682:	d14a      	bne.n	800f71a <_strtoul_l.isra.0+0xec>
 800f684:	786c      	ldrb	r4, [r5, #1]
 800f686:	2610      	movs	r6, #16
 800f688:	3502      	adds	r5, #2
 800f68a:	f04f 31ff 	mov.w	r1, #4294967295
 800f68e:	2700      	movs	r7, #0
 800f690:	fbb1 f1f6 	udiv	r1, r1, r6
 800f694:	fb06 fe01 	mul.w	lr, r6, r1
 800f698:	ea6f 0e0e 	mvn.w	lr, lr
 800f69c:	4638      	mov	r0, r7
 800f69e:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 800f6a2:	2a09      	cmp	r2, #9
 800f6a4:	d811      	bhi.n	800f6ca <_strtoul_l.isra.0+0x9c>
 800f6a6:	4614      	mov	r4, r2
 800f6a8:	42a6      	cmp	r6, r4
 800f6aa:	dd1d      	ble.n	800f6e8 <_strtoul_l.isra.0+0xba>
 800f6ac:	2f00      	cmp	r7, #0
 800f6ae:	db18      	blt.n	800f6e2 <_strtoul_l.isra.0+0xb4>
 800f6b0:	4281      	cmp	r1, r0
 800f6b2:	d316      	bcc.n	800f6e2 <_strtoul_l.isra.0+0xb4>
 800f6b4:	d101      	bne.n	800f6ba <_strtoul_l.isra.0+0x8c>
 800f6b6:	45a6      	cmp	lr, r4
 800f6b8:	db13      	blt.n	800f6e2 <_strtoul_l.isra.0+0xb4>
 800f6ba:	fb00 4006 	mla	r0, r0, r6, r4
 800f6be:	2701      	movs	r7, #1
 800f6c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f6c4:	e7eb      	b.n	800f69e <_strtoul_l.isra.0+0x70>
 800f6c6:	260a      	movs	r6, #10
 800f6c8:	e7df      	b.n	800f68a <_strtoul_l.isra.0+0x5c>
 800f6ca:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 800f6ce:	2a19      	cmp	r2, #25
 800f6d0:	d801      	bhi.n	800f6d6 <_strtoul_l.isra.0+0xa8>
 800f6d2:	3c37      	subs	r4, #55	; 0x37
 800f6d4:	e7e8      	b.n	800f6a8 <_strtoul_l.isra.0+0x7a>
 800f6d6:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 800f6da:	2a19      	cmp	r2, #25
 800f6dc:	d804      	bhi.n	800f6e8 <_strtoul_l.isra.0+0xba>
 800f6de:	3c57      	subs	r4, #87	; 0x57
 800f6e0:	e7e2      	b.n	800f6a8 <_strtoul_l.isra.0+0x7a>
 800f6e2:	f04f 37ff 	mov.w	r7, #4294967295
 800f6e6:	e7eb      	b.n	800f6c0 <_strtoul_l.isra.0+0x92>
 800f6e8:	2f00      	cmp	r7, #0
 800f6ea:	da09      	bge.n	800f700 <_strtoul_l.isra.0+0xd2>
 800f6ec:	2322      	movs	r3, #34	; 0x22
 800f6ee:	f8c8 3000 	str.w	r3, [r8]
 800f6f2:	f04f 30ff 	mov.w	r0, #4294967295
 800f6f6:	f1ba 0f00 	cmp.w	sl, #0
 800f6fa:	d107      	bne.n	800f70c <_strtoul_l.isra.0+0xde>
 800f6fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f700:	b103      	cbz	r3, 800f704 <_strtoul_l.isra.0+0xd6>
 800f702:	4240      	negs	r0, r0
 800f704:	f1ba 0f00 	cmp.w	sl, #0
 800f708:	d00c      	beq.n	800f724 <_strtoul_l.isra.0+0xf6>
 800f70a:	b127      	cbz	r7, 800f716 <_strtoul_l.isra.0+0xe8>
 800f70c:	3d01      	subs	r5, #1
 800f70e:	f8ca 5000 	str.w	r5, [sl]
 800f712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f716:	464d      	mov	r5, r9
 800f718:	e7f9      	b.n	800f70e <_strtoul_l.isra.0+0xe0>
 800f71a:	2430      	movs	r4, #48	; 0x30
 800f71c:	2e00      	cmp	r6, #0
 800f71e:	d1b4      	bne.n	800f68a <_strtoul_l.isra.0+0x5c>
 800f720:	2608      	movs	r6, #8
 800f722:	e7b2      	b.n	800f68a <_strtoul_l.isra.0+0x5c>
 800f724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f728 <_strtoul_r>:
 800f728:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f72a:	4c06      	ldr	r4, [pc, #24]	; (800f744 <_strtoul_r+0x1c>)
 800f72c:	4d06      	ldr	r5, [pc, #24]	; (800f748 <_strtoul_r+0x20>)
 800f72e:	6824      	ldr	r4, [r4, #0]
 800f730:	6a24      	ldr	r4, [r4, #32]
 800f732:	2c00      	cmp	r4, #0
 800f734:	bf08      	it	eq
 800f736:	462c      	moveq	r4, r5
 800f738:	9400      	str	r4, [sp, #0]
 800f73a:	f7ff ff78 	bl	800f62e <_strtoul_l.isra.0>
 800f73e:	b003      	add	sp, #12
 800f740:	bd30      	pop	{r4, r5, pc}
 800f742:	bf00      	nop
 800f744:	20000010 	.word	0x20000010
 800f748:	2000055c 	.word	0x2000055c

0800f74c <strtoul>:
 800f74c:	4b08      	ldr	r3, [pc, #32]	; (800f770 <strtoul+0x24>)
 800f74e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f750:	681c      	ldr	r4, [r3, #0]
 800f752:	4d08      	ldr	r5, [pc, #32]	; (800f774 <strtoul+0x28>)
 800f754:	6a23      	ldr	r3, [r4, #32]
 800f756:	2b00      	cmp	r3, #0
 800f758:	bf08      	it	eq
 800f75a:	462b      	moveq	r3, r5
 800f75c:	9300      	str	r3, [sp, #0]
 800f75e:	4613      	mov	r3, r2
 800f760:	460a      	mov	r2, r1
 800f762:	4601      	mov	r1, r0
 800f764:	4620      	mov	r0, r4
 800f766:	f7ff ff62 	bl	800f62e <_strtoul_l.isra.0>
 800f76a:	b003      	add	sp, #12
 800f76c:	bd30      	pop	{r4, r5, pc}
 800f76e:	bf00      	nop
 800f770:	20000010 	.word	0x20000010
 800f774:	2000055c 	.word	0x2000055c

0800f778 <_sungetc_r>:
 800f778:	b538      	push	{r3, r4, r5, lr}
 800f77a:	1c4b      	adds	r3, r1, #1
 800f77c:	4614      	mov	r4, r2
 800f77e:	d103      	bne.n	800f788 <_sungetc_r+0x10>
 800f780:	f04f 35ff 	mov.w	r5, #4294967295
 800f784:	4628      	mov	r0, r5
 800f786:	bd38      	pop	{r3, r4, r5, pc}
 800f788:	8993      	ldrh	r3, [r2, #12]
 800f78a:	f023 0320 	bic.w	r3, r3, #32
 800f78e:	8193      	strh	r3, [r2, #12]
 800f790:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800f792:	6852      	ldr	r2, [r2, #4]
 800f794:	b2cd      	uxtb	r5, r1
 800f796:	b18b      	cbz	r3, 800f7bc <_sungetc_r+0x44>
 800f798:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f79a:	429a      	cmp	r2, r3
 800f79c:	da08      	bge.n	800f7b0 <_sungetc_r+0x38>
 800f79e:	6823      	ldr	r3, [r4, #0]
 800f7a0:	1e5a      	subs	r2, r3, #1
 800f7a2:	6022      	str	r2, [r4, #0]
 800f7a4:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f7a8:	6863      	ldr	r3, [r4, #4]
 800f7aa:	3301      	adds	r3, #1
 800f7ac:	6063      	str	r3, [r4, #4]
 800f7ae:	e7e9      	b.n	800f784 <_sungetc_r+0xc>
 800f7b0:	4621      	mov	r1, r4
 800f7b2:	f000 fc01 	bl	800ffb8 <__submore>
 800f7b6:	2800      	cmp	r0, #0
 800f7b8:	d0f1      	beq.n	800f79e <_sungetc_r+0x26>
 800f7ba:	e7e1      	b.n	800f780 <_sungetc_r+0x8>
 800f7bc:	6921      	ldr	r1, [r4, #16]
 800f7be:	6823      	ldr	r3, [r4, #0]
 800f7c0:	b151      	cbz	r1, 800f7d8 <_sungetc_r+0x60>
 800f7c2:	4299      	cmp	r1, r3
 800f7c4:	d208      	bcs.n	800f7d8 <_sungetc_r+0x60>
 800f7c6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800f7ca:	428d      	cmp	r5, r1
 800f7cc:	d104      	bne.n	800f7d8 <_sungetc_r+0x60>
 800f7ce:	3b01      	subs	r3, #1
 800f7d0:	3201      	adds	r2, #1
 800f7d2:	6023      	str	r3, [r4, #0]
 800f7d4:	6062      	str	r2, [r4, #4]
 800f7d6:	e7d5      	b.n	800f784 <_sungetc_r+0xc>
 800f7d8:	63e3      	str	r3, [r4, #60]	; 0x3c
 800f7da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f7de:	6363      	str	r3, [r4, #52]	; 0x34
 800f7e0:	2303      	movs	r3, #3
 800f7e2:	63a3      	str	r3, [r4, #56]	; 0x38
 800f7e4:	4623      	mov	r3, r4
 800f7e6:	6422      	str	r2, [r4, #64]	; 0x40
 800f7e8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f7ec:	6023      	str	r3, [r4, #0]
 800f7ee:	2301      	movs	r3, #1
 800f7f0:	e7dc      	b.n	800f7ac <_sungetc_r+0x34>

0800f7f2 <__ssrefill_r>:
 800f7f2:	b510      	push	{r4, lr}
 800f7f4:	460c      	mov	r4, r1
 800f7f6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f7f8:	b169      	cbz	r1, 800f816 <__ssrefill_r+0x24>
 800f7fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f7fe:	4299      	cmp	r1, r3
 800f800:	d001      	beq.n	800f806 <__ssrefill_r+0x14>
 800f802:	f7fe fa17 	bl	800dc34 <_free_r>
 800f806:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f808:	6063      	str	r3, [r4, #4]
 800f80a:	2000      	movs	r0, #0
 800f80c:	6360      	str	r0, [r4, #52]	; 0x34
 800f80e:	b113      	cbz	r3, 800f816 <__ssrefill_r+0x24>
 800f810:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f812:	6023      	str	r3, [r4, #0]
 800f814:	bd10      	pop	{r4, pc}
 800f816:	6923      	ldr	r3, [r4, #16]
 800f818:	6023      	str	r3, [r4, #0]
 800f81a:	2300      	movs	r3, #0
 800f81c:	6063      	str	r3, [r4, #4]
 800f81e:	89a3      	ldrh	r3, [r4, #12]
 800f820:	f043 0320 	orr.w	r3, r3, #32
 800f824:	81a3      	strh	r3, [r4, #12]
 800f826:	f04f 30ff 	mov.w	r0, #4294967295
 800f82a:	bd10      	pop	{r4, pc}

0800f82c <_sfread_r>:
 800f82c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f830:	4615      	mov	r5, r2
 800f832:	435d      	muls	r5, r3
 800f834:	4682      	mov	sl, r0
 800f836:	4691      	mov	r9, r2
 800f838:	4698      	mov	r8, r3
 800f83a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800f83c:	d029      	beq.n	800f892 <_sfread_r+0x66>
 800f83e:	460f      	mov	r7, r1
 800f840:	462e      	mov	r6, r5
 800f842:	f04f 0b00 	mov.w	fp, #0
 800f846:	6863      	ldr	r3, [r4, #4]
 800f848:	429e      	cmp	r6, r3
 800f84a:	d80c      	bhi.n	800f866 <_sfread_r+0x3a>
 800f84c:	4632      	mov	r2, r6
 800f84e:	6821      	ldr	r1, [r4, #0]
 800f850:	4638      	mov	r0, r7
 800f852:	f7fa fbdb 	bl	800a00c <memcpy>
 800f856:	6863      	ldr	r3, [r4, #4]
 800f858:	6825      	ldr	r5, [r4, #0]
 800f85a:	1b9b      	subs	r3, r3, r6
 800f85c:	4435      	add	r5, r6
 800f85e:	6025      	str	r5, [r4, #0]
 800f860:	6063      	str	r3, [r4, #4]
 800f862:	4645      	mov	r5, r8
 800f864:	e015      	b.n	800f892 <_sfread_r+0x66>
 800f866:	461a      	mov	r2, r3
 800f868:	6821      	ldr	r1, [r4, #0]
 800f86a:	9301      	str	r3, [sp, #4]
 800f86c:	4638      	mov	r0, r7
 800f86e:	f7fa fbcd 	bl	800a00c <memcpy>
 800f872:	9b01      	ldr	r3, [sp, #4]
 800f874:	6822      	ldr	r2, [r4, #0]
 800f876:	441a      	add	r2, r3
 800f878:	e884 0804 	stmia.w	r4, {r2, fp}
 800f87c:	4621      	mov	r1, r4
 800f87e:	4650      	mov	r0, sl
 800f880:	441f      	add	r7, r3
 800f882:	1af6      	subs	r6, r6, r3
 800f884:	f7ff ffb5 	bl	800f7f2 <__ssrefill_r>
 800f888:	2800      	cmp	r0, #0
 800f88a:	d0dc      	beq.n	800f846 <_sfread_r+0x1a>
 800f88c:	1bad      	subs	r5, r5, r6
 800f88e:	fbb5 f5f9 	udiv	r5, r5, r9
 800f892:	4628      	mov	r0, r5
 800f894:	b003      	add	sp, #12
 800f896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800f89c <__ssvfiscanf_r>:
 800f89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8a0:	461e      	mov	r6, r3
 800f8a2:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800f8a6:	b0d7      	sub	sp, #348	; 0x15c
 800f8a8:	049c      	lsls	r4, r3, #18
 800f8aa:	9003      	str	r0, [sp, #12]
 800f8ac:	460d      	mov	r5, r1
 800f8ae:	d406      	bmi.n	800f8be <__ssvfiscanf_r+0x22>
 800f8b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f8b4:	818b      	strh	r3, [r1, #12]
 800f8b6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800f8b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f8bc:	664b      	str	r3, [r1, #100]	; 0x64
 800f8be:	2300      	movs	r3, #0
 800f8c0:	9206      	str	r2, [sp, #24]
 800f8c2:	9305      	str	r3, [sp, #20]
 800f8c4:	4699      	mov	r9, r3
 800f8c6:	4698      	mov	r8, r3
 800f8c8:	9304      	str	r3, [sp, #16]
 800f8ca:	9a06      	ldr	r2, [sp, #24]
 800f8cc:	f812 3b01 	ldrb.w	r3, [r2], #1
 800f8d0:	9206      	str	r2, [sp, #24]
 800f8d2:	9309      	str	r3, [sp, #36]	; 0x24
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	f000 8099 	beq.w	800fa0c <__ssvfiscanf_r+0x170>
 800f8da:	f7fe fffb 	bl	800e8d4 <__locale_ctype_ptr>
 800f8de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8e0:	4418      	add	r0, r3
 800f8e2:	7844      	ldrb	r4, [r0, #1]
 800f8e4:	f014 0408 	ands.w	r4, r4, #8
 800f8e8:	d019      	beq.n	800f91e <__ssvfiscanf_r+0x82>
 800f8ea:	686b      	ldr	r3, [r5, #4]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	dd0f      	ble.n	800f910 <__ssvfiscanf_r+0x74>
 800f8f0:	f7fe fff0 	bl	800e8d4 <__locale_ctype_ptr>
 800f8f4:	682b      	ldr	r3, [r5, #0]
 800f8f6:	781a      	ldrb	r2, [r3, #0]
 800f8f8:	4410      	add	r0, r2
 800f8fa:	7842      	ldrb	r2, [r0, #1]
 800f8fc:	0710      	lsls	r0, r2, #28
 800f8fe:	d5e4      	bpl.n	800f8ca <__ssvfiscanf_r+0x2e>
 800f900:	686a      	ldr	r2, [r5, #4]
 800f902:	3301      	adds	r3, #1
 800f904:	3a01      	subs	r2, #1
 800f906:	f108 0801 	add.w	r8, r8, #1
 800f90a:	606a      	str	r2, [r5, #4]
 800f90c:	602b      	str	r3, [r5, #0]
 800f90e:	e7ec      	b.n	800f8ea <__ssvfiscanf_r+0x4e>
 800f910:	4629      	mov	r1, r5
 800f912:	9803      	ldr	r0, [sp, #12]
 800f914:	f7ff ff6d 	bl	800f7f2 <__ssrefill_r>
 800f918:	2800      	cmp	r0, #0
 800f91a:	d0e9      	beq.n	800f8f0 <__ssvfiscanf_r+0x54>
 800f91c:	e7d5      	b.n	800f8ca <__ssvfiscanf_r+0x2e>
 800f91e:	2b25      	cmp	r3, #37	; 0x25
 800f920:	d16a      	bne.n	800f9f8 <__ssvfiscanf_r+0x15c>
 800f922:	9b06      	ldr	r3, [sp, #24]
 800f924:	46a2      	mov	sl, r4
 800f926:	4627      	mov	r7, r4
 800f928:	220a      	movs	r2, #10
 800f92a:	9906      	ldr	r1, [sp, #24]
 800f92c:	781c      	ldrb	r4, [r3, #0]
 800f92e:	3101      	adds	r1, #1
 800f930:	2c63      	cmp	r4, #99	; 0x63
 800f932:	9106      	str	r1, [sp, #24]
 800f934:	f000 80f8 	beq.w	800fb28 <__ssvfiscanf_r+0x28c>
 800f938:	d82c      	bhi.n	800f994 <__ssvfiscanf_r+0xf8>
 800f93a:	2c39      	cmp	r4, #57	; 0x39
 800f93c:	d80a      	bhi.n	800f954 <__ssvfiscanf_r+0xb8>
 800f93e:	2c30      	cmp	r4, #48	; 0x30
 800f940:	f080 808c 	bcs.w	800fa5c <__ssvfiscanf_r+0x1c0>
 800f944:	2c25      	cmp	r4, #37	; 0x25
 800f946:	d057      	beq.n	800f9f8 <__ssvfiscanf_r+0x15c>
 800f948:	2c2a      	cmp	r4, #42	; 0x2a
 800f94a:	d07d      	beq.n	800fa48 <__ssvfiscanf_r+0x1ac>
 800f94c:	b954      	cbnz	r4, 800f964 <__ssvfiscanf_r+0xc8>
 800f94e:	f04f 33ff 	mov.w	r3, #4294967295
 800f952:	e06f      	b.n	800fa34 <__ssvfiscanf_r+0x198>
 800f954:	2c4f      	cmp	r4, #79	; 0x4f
 800f956:	f000 8085 	beq.w	800fa64 <__ssvfiscanf_r+0x1c8>
 800f95a:	d80e      	bhi.n	800f97a <__ssvfiscanf_r+0xde>
 800f95c:	2c44      	cmp	r4, #68	; 0x44
 800f95e:	d009      	beq.n	800f974 <__ssvfiscanf_r+0xd8>
 800f960:	2c4c      	cmp	r4, #76	; 0x4c
 800f962:	d02b      	beq.n	800f9bc <__ssvfiscanf_r+0x120>
 800f964:	f7fe ffb6 	bl	800e8d4 <__locale_ctype_ptr>
 800f968:	4420      	add	r0, r4
 800f96a:	7843      	ldrb	r3, [r0, #1]
 800f96c:	f003 0303 	and.w	r3, r3, #3
 800f970:	2b01      	cmp	r3, #1
 800f972:	d118      	bne.n	800f9a6 <__ssvfiscanf_r+0x10a>
 800f974:	f04a 0a01 	orr.w	sl, sl, #1
 800f978:	e015      	b.n	800f9a6 <__ssvfiscanf_r+0x10a>
 800f97a:	2c58      	cmp	r4, #88	; 0x58
 800f97c:	d02f      	beq.n	800f9de <__ssvfiscanf_r+0x142>
 800f97e:	2c5b      	cmp	r4, #91	; 0x5b
 800f980:	d1f0      	bne.n	800f964 <__ssvfiscanf_r+0xc8>
 800f982:	9906      	ldr	r1, [sp, #24]
 800f984:	a816      	add	r0, sp, #88	; 0x58
 800f986:	f000 fd47 	bl	8010418 <__sccl>
 800f98a:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
 800f98e:	9006      	str	r0, [sp, #24]
 800f990:	2401      	movs	r4, #1
 800f992:	e074      	b.n	800fa7e <__ssvfiscanf_r+0x1e2>
 800f994:	2c6e      	cmp	r4, #110	; 0x6e
 800f996:	f000 80cb 	beq.w	800fb30 <__ssvfiscanf_r+0x294>
 800f99a:	d812      	bhi.n	800f9c2 <__ssvfiscanf_r+0x126>
 800f99c:	2c68      	cmp	r4, #104	; 0x68
 800f99e:	d05a      	beq.n	800fa56 <__ssvfiscanf_r+0x1ba>
 800f9a0:	d803      	bhi.n	800f9aa <__ssvfiscanf_r+0x10e>
 800f9a2:	2c64      	cmp	r4, #100	; 0x64
 800f9a4:	d1de      	bne.n	800f964 <__ssvfiscanf_r+0xc8>
 800f9a6:	4ba7      	ldr	r3, [pc, #668]	; (800fc44 <__ssvfiscanf_r+0x3a8>)
 800f9a8:	e064      	b.n	800fa74 <__ssvfiscanf_r+0x1d8>
 800f9aa:	2c69      	cmp	r4, #105	; 0x69
 800f9ac:	d01e      	beq.n	800f9ec <__ssvfiscanf_r+0x150>
 800f9ae:	2c6c      	cmp	r4, #108	; 0x6c
 800f9b0:	d1d8      	bne.n	800f964 <__ssvfiscanf_r+0xc8>
 800f9b2:	7859      	ldrb	r1, [r3, #1]
 800f9b4:	296c      	cmp	r1, #108	; 0x6c
 800f9b6:	d14b      	bne.n	800fa50 <__ssvfiscanf_r+0x1b4>
 800f9b8:	3302      	adds	r3, #2
 800f9ba:	9306      	str	r3, [sp, #24]
 800f9bc:	f04a 0a02 	orr.w	sl, sl, #2
 800f9c0:	e044      	b.n	800fa4c <__ssvfiscanf_r+0x1b0>
 800f9c2:	2c73      	cmp	r4, #115	; 0x73
 800f9c4:	d05a      	beq.n	800fa7c <__ssvfiscanf_r+0x1e0>
 800f9c6:	d806      	bhi.n	800f9d6 <__ssvfiscanf_r+0x13a>
 800f9c8:	2c6f      	cmp	r4, #111	; 0x6f
 800f9ca:	d04d      	beq.n	800fa68 <__ssvfiscanf_r+0x1cc>
 800f9cc:	2c70      	cmp	r4, #112	; 0x70
 800f9ce:	d1c9      	bne.n	800f964 <__ssvfiscanf_r+0xc8>
 800f9d0:	f44a 7a08 	orr.w	sl, sl, #544	; 0x220
 800f9d4:	e005      	b.n	800f9e2 <__ssvfiscanf_r+0x146>
 800f9d6:	2c75      	cmp	r4, #117	; 0x75
 800f9d8:	d04b      	beq.n	800fa72 <__ssvfiscanf_r+0x1d6>
 800f9da:	2c78      	cmp	r4, #120	; 0x78
 800f9dc:	d1c2      	bne.n	800f964 <__ssvfiscanf_r+0xc8>
 800f9de:	f44a 7a00 	orr.w	sl, sl, #512	; 0x200
 800f9e2:	4b99      	ldr	r3, [pc, #612]	; (800fc48 <__ssvfiscanf_r+0x3ac>)
 800f9e4:	9305      	str	r3, [sp, #20]
 800f9e6:	f04f 0910 	mov.w	r9, #16
 800f9ea:	e003      	b.n	800f9f4 <__ssvfiscanf_r+0x158>
 800f9ec:	4b95      	ldr	r3, [pc, #596]	; (800fc44 <__ssvfiscanf_r+0x3a8>)
 800f9ee:	9305      	str	r3, [sp, #20]
 800f9f0:	f04f 0900 	mov.w	r9, #0
 800f9f4:	2403      	movs	r4, #3
 800f9f6:	e042      	b.n	800fa7e <__ssvfiscanf_r+0x1e2>
 800f9f8:	686b      	ldr	r3, [r5, #4]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	dd0a      	ble.n	800fa14 <__ssvfiscanf_r+0x178>
 800f9fe:	682b      	ldr	r3, [r5, #0]
 800fa00:	9a06      	ldr	r2, [sp, #24]
 800fa02:	7819      	ldrb	r1, [r3, #0]
 800fa04:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800fa08:	4291      	cmp	r1, r2
 800fa0a:	d015      	beq.n	800fa38 <__ssvfiscanf_r+0x19c>
 800fa0c:	9804      	ldr	r0, [sp, #16]
 800fa0e:	b057      	add	sp, #348	; 0x15c
 800fa10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa14:	4629      	mov	r1, r5
 800fa16:	9803      	ldr	r0, [sp, #12]
 800fa18:	f7ff feeb 	bl	800f7f2 <__ssrefill_r>
 800fa1c:	2800      	cmp	r0, #0
 800fa1e:	d0ee      	beq.n	800f9fe <__ssvfiscanf_r+0x162>
 800fa20:	9b04      	ldr	r3, [sp, #16]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d093      	beq.n	800f94e <__ssvfiscanf_r+0xb2>
 800fa26:	89ab      	ldrh	r3, [r5, #12]
 800fa28:	f013 0f40 	tst.w	r3, #64	; 0x40
 800fa2c:	9b04      	ldr	r3, [sp, #16]
 800fa2e:	bf18      	it	ne
 800fa30:	f04f 33ff 	movne.w	r3, #4294967295
 800fa34:	9304      	str	r3, [sp, #16]
 800fa36:	e7e9      	b.n	800fa0c <__ssvfiscanf_r+0x170>
 800fa38:	686a      	ldr	r2, [r5, #4]
 800fa3a:	3301      	adds	r3, #1
 800fa3c:	3a01      	subs	r2, #1
 800fa3e:	606a      	str	r2, [r5, #4]
 800fa40:	602b      	str	r3, [r5, #0]
 800fa42:	f108 0801 	add.w	r8, r8, #1
 800fa46:	e740      	b.n	800f8ca <__ssvfiscanf_r+0x2e>
 800fa48:	f04a 0a10 	orr.w	sl, sl, #16
 800fa4c:	9b06      	ldr	r3, [sp, #24]
 800fa4e:	e76c      	b.n	800f92a <__ssvfiscanf_r+0x8e>
 800fa50:	f04a 0a01 	orr.w	sl, sl, #1
 800fa54:	e7fa      	b.n	800fa4c <__ssvfiscanf_r+0x1b0>
 800fa56:	f04a 0a04 	orr.w	sl, sl, #4
 800fa5a:	e7f7      	b.n	800fa4c <__ssvfiscanf_r+0x1b0>
 800fa5c:	fb02 4707 	mla	r7, r2, r7, r4
 800fa60:	3f30      	subs	r7, #48	; 0x30
 800fa62:	e7f3      	b.n	800fa4c <__ssvfiscanf_r+0x1b0>
 800fa64:	f04a 0a01 	orr.w	sl, sl, #1
 800fa68:	4b77      	ldr	r3, [pc, #476]	; (800fc48 <__ssvfiscanf_r+0x3ac>)
 800fa6a:	9305      	str	r3, [sp, #20]
 800fa6c:	f04f 0908 	mov.w	r9, #8
 800fa70:	e7c0      	b.n	800f9f4 <__ssvfiscanf_r+0x158>
 800fa72:	4b75      	ldr	r3, [pc, #468]	; (800fc48 <__ssvfiscanf_r+0x3ac>)
 800fa74:	9305      	str	r3, [sp, #20]
 800fa76:	f04f 090a 	mov.w	r9, #10
 800fa7a:	e7bb      	b.n	800f9f4 <__ssvfiscanf_r+0x158>
 800fa7c:	2402      	movs	r4, #2
 800fa7e:	686b      	ldr	r3, [r5, #4]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	dd71      	ble.n	800fb68 <__ssvfiscanf_r+0x2cc>
 800fa84:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800fa88:	d107      	bne.n	800fa9a <__ssvfiscanf_r+0x1fe>
 800fa8a:	f7fe ff23 	bl	800e8d4 <__locale_ctype_ptr>
 800fa8e:	682b      	ldr	r3, [r5, #0]
 800fa90:	781a      	ldrb	r2, [r3, #0]
 800fa92:	4410      	add	r0, r2
 800fa94:	7842      	ldrb	r2, [r0, #1]
 800fa96:	0711      	lsls	r1, r2, #28
 800fa98:	d46d      	bmi.n	800fb76 <__ssvfiscanf_r+0x2da>
 800fa9a:	2c02      	cmp	r4, #2
 800fa9c:	f000 8113 	beq.w	800fcc6 <__ssvfiscanf_r+0x42a>
 800faa0:	2c03      	cmp	r4, #3
 800faa2:	f000 81c7 	beq.w	800fe34 <__ssvfiscanf_r+0x598>
 800faa6:	2c01      	cmp	r4, #1
 800faa8:	f00a 0410 	and.w	r4, sl, #16
 800faac:	f000 80ba 	beq.w	800fc24 <__ssvfiscanf_r+0x388>
 800fab0:	2f00      	cmp	r7, #0
 800fab2:	bf08      	it	eq
 800fab4:	2701      	moveq	r7, #1
 800fab6:	f01a 0a01 	ands.w	sl, sl, #1
 800faba:	f000 8087 	beq.w	800fbcc <__ssvfiscanf_r+0x330>
 800fabe:	2208      	movs	r2, #8
 800fac0:	2100      	movs	r1, #0
 800fac2:	a80a      	add	r0, sp, #40	; 0x28
 800fac4:	f7fa faad 	bl	800a022 <memset>
 800fac8:	2c00      	cmp	r4, #0
 800faca:	d166      	bne.n	800fb9a <__ssvfiscanf_r+0x2fe>
 800facc:	f8d6 b000 	ldr.w	fp, [r6]
 800fad0:	3604      	adds	r6, #4
 800fad2:	2300      	movs	r3, #0
 800fad4:	2f00      	cmp	r7, #0
 800fad6:	d071      	beq.n	800fbbc <__ssvfiscanf_r+0x320>
 800fad8:	9307      	str	r3, [sp, #28]
 800fada:	f7fe fee9 	bl	800e8b0 <__locale_mb_cur_max>
 800fade:	9b07      	ldr	r3, [sp, #28]
 800fae0:	4283      	cmp	r3, r0
 800fae2:	d09d      	beq.n	800fa20 <__ssvfiscanf_r+0x184>
 800fae4:	682a      	ldr	r2, [r5, #0]
 800fae6:	a80c      	add	r0, sp, #48	; 0x30
 800fae8:	f812 1b01 	ldrb.w	r1, [r2], #1
 800faec:	54c1      	strb	r1, [r0, r3]
 800faee:	f103 0a01 	add.w	sl, r3, #1
 800faf2:	686b      	ldr	r3, [r5, #4]
 800faf4:	3b01      	subs	r3, #1
 800faf6:	e885 000c 	stmia.w	r5, {r2, r3}
 800fafa:	ab0a      	add	r3, sp, #40	; 0x28
 800fafc:	4602      	mov	r2, r0
 800fafe:	9300      	str	r3, [sp, #0]
 800fb00:	4659      	mov	r1, fp
 800fb02:	4653      	mov	r3, sl
 800fb04:	9803      	ldr	r0, [sp, #12]
 800fb06:	f000 fc49 	bl	801039c <_mbrtowc_r>
 800fb0a:	1c42      	adds	r2, r0, #1
 800fb0c:	d088      	beq.n	800fa20 <__ssvfiscanf_r+0x184>
 800fb0e:	2800      	cmp	r0, #0
 800fb10:	d146      	bne.n	800fba0 <__ssvfiscanf_r+0x304>
 800fb12:	b90c      	cbnz	r4, 800fb18 <__ssvfiscanf_r+0x27c>
 800fb14:	f8cb 4000 	str.w	r4, [fp]
 800fb18:	44d0      	add	r8, sl
 800fb1a:	3f01      	subs	r7, #1
 800fb1c:	b90c      	cbnz	r4, 800fb22 <__ssvfiscanf_r+0x286>
 800fb1e:	f10b 0b04 	add.w	fp, fp, #4
 800fb22:	f04f 0a00 	mov.w	sl, #0
 800fb26:	e03d      	b.n	800fba4 <__ssvfiscanf_r+0x308>
 800fb28:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
 800fb2c:	2400      	movs	r4, #0
 800fb2e:	e7a6      	b.n	800fa7e <__ssvfiscanf_r+0x1e2>
 800fb30:	f01a 0f10 	tst.w	sl, #16
 800fb34:	f47f aec9 	bne.w	800f8ca <__ssvfiscanf_r+0x2e>
 800fb38:	f01a 0f04 	tst.w	sl, #4
 800fb3c:	6832      	ldr	r2, [r6, #0]
 800fb3e:	f106 0304 	add.w	r3, r6, #4
 800fb42:	d003      	beq.n	800fb4c <__ssvfiscanf_r+0x2b0>
 800fb44:	f8a2 8000 	strh.w	r8, [r2]
 800fb48:	461e      	mov	r6, r3
 800fb4a:	e6be      	b.n	800f8ca <__ssvfiscanf_r+0x2e>
 800fb4c:	f01a 0f01 	tst.w	sl, #1
 800fb50:	d002      	beq.n	800fb58 <__ssvfiscanf_r+0x2bc>
 800fb52:	f8c2 8000 	str.w	r8, [r2]
 800fb56:	e7f7      	b.n	800fb48 <__ssvfiscanf_r+0x2ac>
 800fb58:	f01a 0f02 	tst.w	sl, #2
 800fb5c:	d0f9      	beq.n	800fb52 <__ssvfiscanf_r+0x2b6>
 800fb5e:	4640      	mov	r0, r8
 800fb60:	17c1      	asrs	r1, r0, #31
 800fb62:	e9c2 0100 	strd	r0, r1, [r2]
 800fb66:	e7ef      	b.n	800fb48 <__ssvfiscanf_r+0x2ac>
 800fb68:	4629      	mov	r1, r5
 800fb6a:	9803      	ldr	r0, [sp, #12]
 800fb6c:	f7ff fe41 	bl	800f7f2 <__ssrefill_r>
 800fb70:	2800      	cmp	r0, #0
 800fb72:	d087      	beq.n	800fa84 <__ssvfiscanf_r+0x1e8>
 800fb74:	e754      	b.n	800fa20 <__ssvfiscanf_r+0x184>
 800fb76:	686a      	ldr	r2, [r5, #4]
 800fb78:	3a01      	subs	r2, #1
 800fb7a:	2a00      	cmp	r2, #0
 800fb7c:	f108 0801 	add.w	r8, r8, #1
 800fb80:	606a      	str	r2, [r5, #4]
 800fb82:	dd02      	ble.n	800fb8a <__ssvfiscanf_r+0x2ee>
 800fb84:	3301      	adds	r3, #1
 800fb86:	602b      	str	r3, [r5, #0]
 800fb88:	e77f      	b.n	800fa8a <__ssvfiscanf_r+0x1ee>
 800fb8a:	4629      	mov	r1, r5
 800fb8c:	9803      	ldr	r0, [sp, #12]
 800fb8e:	f7ff fe30 	bl	800f7f2 <__ssrefill_r>
 800fb92:	2800      	cmp	r0, #0
 800fb94:	f43f af79 	beq.w	800fa8a <__ssvfiscanf_r+0x1ee>
 800fb98:	e742      	b.n	800fa20 <__ssvfiscanf_r+0x184>
 800fb9a:	f04f 0b00 	mov.w	fp, #0
 800fb9e:	e798      	b.n	800fad2 <__ssvfiscanf_r+0x236>
 800fba0:	3002      	adds	r0, #2
 800fba2:	d1b9      	bne.n	800fb18 <__ssvfiscanf_r+0x27c>
 800fba4:	686b      	ldr	r3, [r5, #4]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	dc0e      	bgt.n	800fbc8 <__ssvfiscanf_r+0x32c>
 800fbaa:	4629      	mov	r1, r5
 800fbac:	9803      	ldr	r0, [sp, #12]
 800fbae:	f7ff fe20 	bl	800f7f2 <__ssrefill_r>
 800fbb2:	b148      	cbz	r0, 800fbc8 <__ssvfiscanf_r+0x32c>
 800fbb4:	f1ba 0f00 	cmp.w	sl, #0
 800fbb8:	f47f af32 	bne.w	800fa20 <__ssvfiscanf_r+0x184>
 800fbbc:	2c00      	cmp	r4, #0
 800fbbe:	f47f ae84 	bne.w	800f8ca <__ssvfiscanf_r+0x2e>
 800fbc2:	9b04      	ldr	r3, [sp, #16]
 800fbc4:	3301      	adds	r3, #1
 800fbc6:	e67f      	b.n	800f8c8 <__ssvfiscanf_r+0x2c>
 800fbc8:	4653      	mov	r3, sl
 800fbca:	e783      	b.n	800fad4 <__ssvfiscanf_r+0x238>
 800fbcc:	b1cc      	cbz	r4, 800fc02 <__ssvfiscanf_r+0x366>
 800fbce:	4654      	mov	r4, sl
 800fbd0:	686b      	ldr	r3, [r5, #4]
 800fbd2:	682a      	ldr	r2, [r5, #0]
 800fbd4:	42bb      	cmp	r3, r7
 800fbd6:	da0e      	bge.n	800fbf6 <__ssvfiscanf_r+0x35a>
 800fbd8:	441c      	add	r4, r3
 800fbda:	1aff      	subs	r7, r7, r3
 800fbdc:	4413      	add	r3, r2
 800fbde:	602b      	str	r3, [r5, #0]
 800fbe0:	4629      	mov	r1, r5
 800fbe2:	9803      	ldr	r0, [sp, #12]
 800fbe4:	f7ff fe05 	bl	800f7f2 <__ssrefill_r>
 800fbe8:	2800      	cmp	r0, #0
 800fbea:	d0f1      	beq.n	800fbd0 <__ssvfiscanf_r+0x334>
 800fbec:	2c00      	cmp	r4, #0
 800fbee:	f43f af17 	beq.w	800fa20 <__ssvfiscanf_r+0x184>
 800fbf2:	44a0      	add	r8, r4
 800fbf4:	e669      	b.n	800f8ca <__ssvfiscanf_r+0x2e>
 800fbf6:	1bdb      	subs	r3, r3, r7
 800fbf8:	443c      	add	r4, r7
 800fbfa:	4417      	add	r7, r2
 800fbfc:	606b      	str	r3, [r5, #4]
 800fbfe:	602f      	str	r7, [r5, #0]
 800fc00:	e7f7      	b.n	800fbf2 <__ssvfiscanf_r+0x356>
 800fc02:	9500      	str	r5, [sp, #0]
 800fc04:	463b      	mov	r3, r7
 800fc06:	2201      	movs	r2, #1
 800fc08:	6831      	ldr	r1, [r6, #0]
 800fc0a:	9803      	ldr	r0, [sp, #12]
 800fc0c:	1d34      	adds	r4, r6, #4
 800fc0e:	f7ff fe0d 	bl	800f82c <_sfread_r>
 800fc12:	2800      	cmp	r0, #0
 800fc14:	f43f af04 	beq.w	800fa20 <__ssvfiscanf_r+0x184>
 800fc18:	4480      	add	r8, r0
 800fc1a:	9b04      	ldr	r3, [sp, #16]
 800fc1c:	3301      	adds	r3, #1
 800fc1e:	9304      	str	r3, [sp, #16]
 800fc20:	4626      	mov	r6, r4
 800fc22:	e652      	b.n	800f8ca <__ssvfiscanf_r+0x2e>
 800fc24:	2f00      	cmp	r7, #0
 800fc26:	bf08      	it	eq
 800fc28:	f04f 37ff 	moveq.w	r7, #4294967295
 800fc2c:	b1fc      	cbz	r4, 800fc6e <__ssvfiscanf_r+0x3d2>
 800fc2e:	2400      	movs	r4, #0
 800fc30:	f10d 0a58 	add.w	sl, sp, #88	; 0x58
 800fc34:	682b      	ldr	r3, [r5, #0]
 800fc36:	781a      	ldrb	r2, [r3, #0]
 800fc38:	f81a 2002 	ldrb.w	r2, [sl, r2]
 800fc3c:	b932      	cbnz	r2, 800fc4c <__ssvfiscanf_r+0x3b0>
 800fc3e:	2c00      	cmp	r4, #0
 800fc40:	d1d7      	bne.n	800fbf2 <__ssvfiscanf_r+0x356>
 800fc42:	e6e3      	b.n	800fa0c <__ssvfiscanf_r+0x170>
 800fc44:	08010579 	.word	0x08010579
 800fc48:	0800f729 	.word	0x0800f729
 800fc4c:	686a      	ldr	r2, [r5, #4]
 800fc4e:	3401      	adds	r4, #1
 800fc50:	3a01      	subs	r2, #1
 800fc52:	3301      	adds	r3, #1
 800fc54:	42a7      	cmp	r7, r4
 800fc56:	606a      	str	r2, [r5, #4]
 800fc58:	602b      	str	r3, [r5, #0]
 800fc5a:	d0ca      	beq.n	800fbf2 <__ssvfiscanf_r+0x356>
 800fc5c:	2a00      	cmp	r2, #0
 800fc5e:	dce9      	bgt.n	800fc34 <__ssvfiscanf_r+0x398>
 800fc60:	4629      	mov	r1, r5
 800fc62:	9803      	ldr	r0, [sp, #12]
 800fc64:	f7ff fdc5 	bl	800f7f2 <__ssrefill_r>
 800fc68:	2800      	cmp	r0, #0
 800fc6a:	d0e3      	beq.n	800fc34 <__ssvfiscanf_r+0x398>
 800fc6c:	e7c1      	b.n	800fbf2 <__ssvfiscanf_r+0x356>
 800fc6e:	6834      	ldr	r4, [r6, #0]
 800fc70:	f106 0a04 	add.w	sl, r6, #4
 800fc74:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
 800fc78:	4626      	mov	r6, r4
 800fc7a:	682b      	ldr	r3, [r5, #0]
 800fc7c:	781a      	ldrb	r2, [r3, #0]
 800fc7e:	f81b 2002 	ldrb.w	r2, [fp, r2]
 800fc82:	b1b2      	cbz	r2, 800fcb2 <__ssvfiscanf_r+0x416>
 800fc84:	686a      	ldr	r2, [r5, #4]
 800fc86:	3a01      	subs	r2, #1
 800fc88:	606a      	str	r2, [r5, #4]
 800fc8a:	1c5a      	adds	r2, r3, #1
 800fc8c:	602a      	str	r2, [r5, #0]
 800fc8e:	781b      	ldrb	r3, [r3, #0]
 800fc90:	f806 3b01 	strb.w	r3, [r6], #1
 800fc94:	1bbb      	subs	r3, r7, r6
 800fc96:	42dc      	cmn	r4, r3
 800fc98:	d00b      	beq.n	800fcb2 <__ssvfiscanf_r+0x416>
 800fc9a:	686b      	ldr	r3, [r5, #4]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	dcec      	bgt.n	800fc7a <__ssvfiscanf_r+0x3de>
 800fca0:	4629      	mov	r1, r5
 800fca2:	9803      	ldr	r0, [sp, #12]
 800fca4:	f7ff fda5 	bl	800f7f2 <__ssrefill_r>
 800fca8:	2800      	cmp	r0, #0
 800fcaa:	d0e6      	beq.n	800fc7a <__ssvfiscanf_r+0x3de>
 800fcac:	42b4      	cmp	r4, r6
 800fcae:	f43f aeb7 	beq.w	800fa20 <__ssvfiscanf_r+0x184>
 800fcb2:	1b34      	subs	r4, r6, r4
 800fcb4:	f43f aeaa 	beq.w	800fa0c <__ssvfiscanf_r+0x170>
 800fcb8:	2300      	movs	r3, #0
 800fcba:	7033      	strb	r3, [r6, #0]
 800fcbc:	9b04      	ldr	r3, [sp, #16]
 800fcbe:	3301      	adds	r3, #1
 800fcc0:	9304      	str	r3, [sp, #16]
 800fcc2:	4656      	mov	r6, sl
 800fcc4:	e795      	b.n	800fbf2 <__ssvfiscanf_r+0x356>
 800fcc6:	2f00      	cmp	r7, #0
 800fcc8:	bf08      	it	eq
 800fcca:	f04f 37ff 	moveq.w	r7, #4294967295
 800fcce:	f01a 0b01 	ands.w	fp, sl, #1
 800fcd2:	f00a 0410 	and.w	r4, sl, #16
 800fcd6:	d06a      	beq.n	800fdae <__ssvfiscanf_r+0x512>
 800fcd8:	2208      	movs	r2, #8
 800fcda:	2100      	movs	r1, #0
 800fcdc:	a80a      	add	r0, sp, #40	; 0x28
 800fcde:	f7fa f9a0 	bl	800a022 <memset>
 800fce2:	2c00      	cmp	r4, #0
 800fce4:	d13e      	bne.n	800fd64 <__ssvfiscanf_r+0x4c8>
 800fce6:	f8d6 a000 	ldr.w	sl, [r6]
 800fcea:	3604      	adds	r6, #4
 800fcec:	2300      	movs	r3, #0
 800fcee:	9307      	str	r3, [sp, #28]
 800fcf0:	f7fe fdf0 	bl	800e8d4 <__locale_ctype_ptr>
 800fcf4:	682a      	ldr	r2, [r5, #0]
 800fcf6:	7812      	ldrb	r2, [r2, #0]
 800fcf8:	4410      	add	r0, r2
 800fcfa:	7842      	ldrb	r2, [r0, #1]
 800fcfc:	0711      	lsls	r1, r2, #28
 800fcfe:	d42b      	bmi.n	800fd58 <__ssvfiscanf_r+0x4bc>
 800fd00:	9b07      	ldr	r3, [sp, #28]
 800fd02:	b34f      	cbz	r7, 800fd58 <__ssvfiscanf_r+0x4bc>
 800fd04:	9307      	str	r3, [sp, #28]
 800fd06:	f7fe fdd3 	bl	800e8b0 <__locale_mb_cur_max>
 800fd0a:	9b07      	ldr	r3, [sp, #28]
 800fd0c:	4283      	cmp	r3, r0
 800fd0e:	f43f ae87 	beq.w	800fa20 <__ssvfiscanf_r+0x184>
 800fd12:	682a      	ldr	r2, [r5, #0]
 800fd14:	a80c      	add	r0, sp, #48	; 0x30
 800fd16:	f812 1b01 	ldrb.w	r1, [r2], #1
 800fd1a:	54c1      	strb	r1, [r0, r3]
 800fd1c:	f103 0b01 	add.w	fp, r3, #1
 800fd20:	686b      	ldr	r3, [r5, #4]
 800fd22:	3b01      	subs	r3, #1
 800fd24:	e885 000c 	stmia.w	r5, {r2, r3}
 800fd28:	ab0a      	add	r3, sp, #40	; 0x28
 800fd2a:	9300      	str	r3, [sp, #0]
 800fd2c:	4602      	mov	r2, r0
 800fd2e:	465b      	mov	r3, fp
 800fd30:	4651      	mov	r1, sl
 800fd32:	9803      	ldr	r0, [sp, #12]
 800fd34:	f000 fb32 	bl	801039c <_mbrtowc_r>
 800fd38:	1c43      	adds	r3, r0, #1
 800fd3a:	f43f ae71 	beq.w	800fa20 <__ssvfiscanf_r+0x184>
 800fd3e:	b9a0      	cbnz	r0, 800fd6a <__ssvfiscanf_r+0x4ce>
 800fd40:	f8ca 0000 	str.w	r0, [sl]
 800fd44:	f8da 0000 	ldr.w	r0, [sl]
 800fd48:	f000 fb08 	bl	801035c <iswspace>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	b1c8      	cbz	r0, 800fd84 <__ssvfiscanf_r+0x4e8>
 800fd50:	af0c      	add	r7, sp, #48	; 0x30
 800fd52:	f1bb 0f00 	cmp.w	fp, #0
 800fd56:	d10c      	bne.n	800fd72 <__ssvfiscanf_r+0x4d6>
 800fd58:	2c00      	cmp	r4, #0
 800fd5a:	f47f adb6 	bne.w	800f8ca <__ssvfiscanf_r+0x2e>
 800fd5e:	f8ca 4000 	str.w	r4, [sl]
 800fd62:	e72e      	b.n	800fbc2 <__ssvfiscanf_r+0x326>
 800fd64:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
 800fd68:	e7c0      	b.n	800fcec <__ssvfiscanf_r+0x450>
 800fd6a:	3002      	adds	r0, #2
 800fd6c:	d1ea      	bne.n	800fd44 <__ssvfiscanf_r+0x4a8>
 800fd6e:	465b      	mov	r3, fp
 800fd70:	e00e      	b.n	800fd90 <__ssvfiscanf_r+0x4f4>
 800fd72:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fd76:	462a      	mov	r2, r5
 800fd78:	f817 100b 	ldrb.w	r1, [r7, fp]
 800fd7c:	9803      	ldr	r0, [sp, #12]
 800fd7e:	f7ff fcfb 	bl	800f778 <_sungetc_r>
 800fd82:	e7e6      	b.n	800fd52 <__ssvfiscanf_r+0x4b6>
 800fd84:	44d8      	add	r8, fp
 800fd86:	3f01      	subs	r7, #1
 800fd88:	b914      	cbnz	r4, 800fd90 <__ssvfiscanf_r+0x4f4>
 800fd8a:	f10a 0a04 	add.w	sl, sl, #4
 800fd8e:	4623      	mov	r3, r4
 800fd90:	686a      	ldr	r2, [r5, #4]
 800fd92:	2a00      	cmp	r2, #0
 800fd94:	dcab      	bgt.n	800fcee <__ssvfiscanf_r+0x452>
 800fd96:	4629      	mov	r1, r5
 800fd98:	9803      	ldr	r0, [sp, #12]
 800fd9a:	9307      	str	r3, [sp, #28]
 800fd9c:	f7ff fd29 	bl	800f7f2 <__ssrefill_r>
 800fda0:	9b07      	ldr	r3, [sp, #28]
 800fda2:	2800      	cmp	r0, #0
 800fda4:	d0a3      	beq.n	800fcee <__ssvfiscanf_r+0x452>
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	f47f ae3a 	bne.w	800fa20 <__ssvfiscanf_r+0x184>
 800fdac:	e7d4      	b.n	800fd58 <__ssvfiscanf_r+0x4bc>
 800fdae:	2c00      	cmp	r4, #0
 800fdb0:	d136      	bne.n	800fe20 <__ssvfiscanf_r+0x584>
 800fdb2:	f8d6 a000 	ldr.w	sl, [r6]
 800fdb6:	1d34      	adds	r4, r6, #4
 800fdb8:	4656      	mov	r6, sl
 800fdba:	f7fe fd8b 	bl	800e8d4 <__locale_ctype_ptr>
 800fdbe:	682a      	ldr	r2, [r5, #0]
 800fdc0:	7813      	ldrb	r3, [r2, #0]
 800fdc2:	4418      	add	r0, r3
 800fdc4:	7843      	ldrb	r3, [r0, #1]
 800fdc6:	071b      	lsls	r3, r3, #28
 800fdc8:	d414      	bmi.n	800fdf4 <__ssvfiscanf_r+0x558>
 800fdca:	686b      	ldr	r3, [r5, #4]
 800fdcc:	3b01      	subs	r3, #1
 800fdce:	606b      	str	r3, [r5, #4]
 800fdd0:	1c53      	adds	r3, r2, #1
 800fdd2:	602b      	str	r3, [r5, #0]
 800fdd4:	7813      	ldrb	r3, [r2, #0]
 800fdd6:	f806 3b01 	strb.w	r3, [r6], #1
 800fdda:	1bbb      	subs	r3, r7, r6
 800fddc:	eb1a 0f03 	cmn.w	sl, r3
 800fde0:	d008      	beq.n	800fdf4 <__ssvfiscanf_r+0x558>
 800fde2:	686b      	ldr	r3, [r5, #4]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	dce8      	bgt.n	800fdba <__ssvfiscanf_r+0x51e>
 800fde8:	4629      	mov	r1, r5
 800fdea:	9803      	ldr	r0, [sp, #12]
 800fdec:	f7ff fd01 	bl	800f7f2 <__ssrefill_r>
 800fdf0:	2800      	cmp	r0, #0
 800fdf2:	d0e2      	beq.n	800fdba <__ssvfiscanf_r+0x51e>
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	7033      	strb	r3, [r6, #0]
 800fdf8:	eba6 060a 	sub.w	r6, r6, sl
 800fdfc:	44b0      	add	r8, r6
 800fdfe:	e70c      	b.n	800fc1a <__ssvfiscanf_r+0x37e>
 800fe00:	686a      	ldr	r2, [r5, #4]
 800fe02:	f10b 0b01 	add.w	fp, fp, #1
 800fe06:	3a01      	subs	r2, #1
 800fe08:	3301      	adds	r3, #1
 800fe0a:	455f      	cmp	r7, fp
 800fe0c:	606a      	str	r2, [r5, #4]
 800fe0e:	602b      	str	r3, [r5, #0]
 800fe10:	d00e      	beq.n	800fe30 <__ssvfiscanf_r+0x594>
 800fe12:	2a00      	cmp	r2, #0
 800fe14:	dc04      	bgt.n	800fe20 <__ssvfiscanf_r+0x584>
 800fe16:	4629      	mov	r1, r5
 800fe18:	9803      	ldr	r0, [sp, #12]
 800fe1a:	f7ff fcea 	bl	800f7f2 <__ssrefill_r>
 800fe1e:	b938      	cbnz	r0, 800fe30 <__ssvfiscanf_r+0x594>
 800fe20:	f7fe fd58 	bl	800e8d4 <__locale_ctype_ptr>
 800fe24:	682b      	ldr	r3, [r5, #0]
 800fe26:	781a      	ldrb	r2, [r3, #0]
 800fe28:	4410      	add	r0, r2
 800fe2a:	7842      	ldrb	r2, [r0, #1]
 800fe2c:	0712      	lsls	r2, r2, #28
 800fe2e:	d5e7      	bpl.n	800fe00 <__ssvfiscanf_r+0x564>
 800fe30:	44d8      	add	r8, fp
 800fe32:	e54a      	b.n	800f8ca <__ssvfiscanf_r+0x2e>
 800fe34:	1e7b      	subs	r3, r7, #1
 800fe36:	2b26      	cmp	r3, #38	; 0x26
 800fe38:	bf88      	it	hi
 800fe3a:	f1a7 0327 	subhi.w	r3, r7, #39	; 0x27
 800fe3e:	f44a 6458 	orr.w	r4, sl, #3456	; 0xd80
 800fe42:	bf8c      	ite	hi
 800fe44:	2727      	movhi	r7, #39	; 0x27
 800fe46:	2300      	movls	r3, #0
 800fe48:	f04f 0b00 	mov.w	fp, #0
 800fe4c:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 800fe50:	6829      	ldr	r1, [r5, #0]
 800fe52:	780a      	ldrb	r2, [r1, #0]
 800fe54:	2a39      	cmp	r2, #57	; 0x39
 800fe56:	d82d      	bhi.n	800feb4 <__ssvfiscanf_r+0x618>
 800fe58:	2a38      	cmp	r2, #56	; 0x38
 800fe5a:	d270      	bcs.n	800ff3e <__ssvfiscanf_r+0x6a2>
 800fe5c:	2a30      	cmp	r2, #48	; 0x30
 800fe5e:	d045      	beq.n	800feec <__ssvfiscanf_r+0x650>
 800fe60:	d867      	bhi.n	800ff32 <__ssvfiscanf_r+0x696>
 800fe62:	2a2b      	cmp	r2, #43	; 0x2b
 800fe64:	d072      	beq.n	800ff4c <__ssvfiscanf_r+0x6b0>
 800fe66:	2a2d      	cmp	r2, #45	; 0x2d
 800fe68:	d070      	beq.n	800ff4c <__ssvfiscanf_r+0x6b0>
 800fe6a:	05e3      	lsls	r3, r4, #23
 800fe6c:	d50f      	bpl.n	800fe8e <__ssvfiscanf_r+0x5f2>
 800fe6e:	ab0c      	add	r3, sp, #48	; 0x30
 800fe70:	459a      	cmp	sl, r3
 800fe72:	d908      	bls.n	800fe86 <__ssvfiscanf_r+0x5ea>
 800fe74:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
 800fe78:	9803      	ldr	r0, [sp, #12]
 800fe7a:	462a      	mov	r2, r5
 800fe7c:	f7ff fc7c 	bl	800f778 <_sungetc_r>
 800fe80:	f10a 37ff 	add.w	r7, sl, #4294967295
 800fe84:	46ba      	mov	sl, r7
 800fe86:	ab0c      	add	r3, sp, #48	; 0x30
 800fe88:	459a      	cmp	sl, r3
 800fe8a:	f43f adbf 	beq.w	800fa0c <__ssvfiscanf_r+0x170>
 800fe8e:	f014 0210 	ands.w	r2, r4, #16
 800fe92:	f040 8085 	bne.w	800ffa0 <__ssvfiscanf_r+0x704>
 800fe96:	464b      	mov	r3, r9
 800fe98:	a90c      	add	r1, sp, #48	; 0x30
 800fe9a:	9803      	ldr	r0, [sp, #12]
 800fe9c:	9f05      	ldr	r7, [sp, #20]
 800fe9e:	f88a 2000 	strb.w	r2, [sl]
 800fea2:	47b8      	blx	r7
 800fea4:	f014 0f20 	tst.w	r4, #32
 800fea8:	f106 0304 	add.w	r3, r6, #4
 800feac:	d05c      	beq.n	800ff68 <__ssvfiscanf_r+0x6cc>
 800feae:	6832      	ldr	r2, [r6, #0]
 800feb0:	6010      	str	r0, [r2, #0]
 800feb2:	e05d      	b.n	800ff70 <__ssvfiscanf_r+0x6d4>
 800feb4:	2a58      	cmp	r2, #88	; 0x58
 800feb6:	d00d      	beq.n	800fed4 <__ssvfiscanf_r+0x638>
 800feb8:	d806      	bhi.n	800fec8 <__ssvfiscanf_r+0x62c>
 800feba:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
 800febe:	2805      	cmp	r0, #5
 800fec0:	d8d3      	bhi.n	800fe6a <__ssvfiscanf_r+0x5ce>
 800fec2:	f1b9 0f0a 	cmp.w	r9, #10
 800fec6:	e03f      	b.n	800ff48 <__ssvfiscanf_r+0x6ac>
 800fec8:	2a61      	cmp	r2, #97	; 0x61
 800feca:	d3ce      	bcc.n	800fe6a <__ssvfiscanf_r+0x5ce>
 800fecc:	2a66      	cmp	r2, #102	; 0x66
 800fece:	d9f8      	bls.n	800fec2 <__ssvfiscanf_r+0x626>
 800fed0:	2a78      	cmp	r2, #120	; 0x78
 800fed2:	d1ca      	bne.n	800fe6a <__ssvfiscanf_r+0x5ce>
 800fed4:	f404 60c0 	and.w	r0, r4, #1536	; 0x600
 800fed8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800fedc:	d1c5      	bne.n	800fe6a <__ssvfiscanf_r+0x5ce>
 800fede:	f424 7400 	bic.w	r4, r4, #512	; 0x200
 800fee2:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
 800fee6:	f04f 0910 	mov.w	r9, #16
 800feea:	e00c      	b.n	800ff06 <__ssvfiscanf_r+0x66a>
 800feec:	0520      	lsls	r0, r4, #20
 800feee:	d50a      	bpl.n	800ff06 <__ssvfiscanf_r+0x66a>
 800fef0:	f1b9 0f00 	cmp.w	r9, #0
 800fef4:	d103      	bne.n	800fefe <__ssvfiscanf_r+0x662>
 800fef6:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 800fefa:	f04f 0908 	mov.w	r9, #8
 800fefe:	0560      	lsls	r0, r4, #21
 800ff00:	d506      	bpl.n	800ff10 <__ssvfiscanf_r+0x674>
 800ff02:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
 800ff06:	f88a 2000 	strb.w	r2, [sl]
 800ff0a:	f10a 0a01 	add.w	sl, sl, #1
 800ff0e:	e006      	b.n	800ff1e <__ssvfiscanf_r+0x682>
 800ff10:	f424 7460 	bic.w	r4, r4, #896	; 0x380
 800ff14:	b10b      	cbz	r3, 800ff1a <__ssvfiscanf_r+0x67e>
 800ff16:	3b01      	subs	r3, #1
 800ff18:	3701      	adds	r7, #1
 800ff1a:	f10b 0b01 	add.w	fp, fp, #1
 800ff1e:	686a      	ldr	r2, [r5, #4]
 800ff20:	3a01      	subs	r2, #1
 800ff22:	2a00      	cmp	r2, #0
 800ff24:	606a      	str	r2, [r5, #4]
 800ff26:	dd16      	ble.n	800ff56 <__ssvfiscanf_r+0x6ba>
 800ff28:	3101      	adds	r1, #1
 800ff2a:	6029      	str	r1, [r5, #0]
 800ff2c:	3f01      	subs	r7, #1
 800ff2e:	d18f      	bne.n	800fe50 <__ssvfiscanf_r+0x5b4>
 800ff30:	e79b      	b.n	800fe6a <__ssvfiscanf_r+0x5ce>
 800ff32:	481f      	ldr	r0, [pc, #124]	; (800ffb0 <__ssvfiscanf_r+0x714>)
 800ff34:	f930 9019 	ldrsh.w	r9, [r0, r9, lsl #1]
 800ff38:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
 800ff3c:	e7e3      	b.n	800ff06 <__ssvfiscanf_r+0x66a>
 800ff3e:	481c      	ldr	r0, [pc, #112]	; (800ffb0 <__ssvfiscanf_r+0x714>)
 800ff40:	f930 9019 	ldrsh.w	r9, [r0, r9, lsl #1]
 800ff44:	f1b9 0f08 	cmp.w	r9, #8
 800ff48:	dcf6      	bgt.n	800ff38 <__ssvfiscanf_r+0x69c>
 800ff4a:	e78e      	b.n	800fe6a <__ssvfiscanf_r+0x5ce>
 800ff4c:	0620      	lsls	r0, r4, #24
 800ff4e:	d58c      	bpl.n	800fe6a <__ssvfiscanf_r+0x5ce>
 800ff50:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 800ff54:	e7d7      	b.n	800ff06 <__ssvfiscanf_r+0x66a>
 800ff56:	4629      	mov	r1, r5
 800ff58:	9803      	ldr	r0, [sp, #12]
 800ff5a:	9307      	str	r3, [sp, #28]
 800ff5c:	f7ff fc49 	bl	800f7f2 <__ssrefill_r>
 800ff60:	9b07      	ldr	r3, [sp, #28]
 800ff62:	2800      	cmp	r0, #0
 800ff64:	d0e2      	beq.n	800ff2c <__ssvfiscanf_r+0x690>
 800ff66:	e780      	b.n	800fe6a <__ssvfiscanf_r+0x5ce>
 800ff68:	0767      	lsls	r7, r4, #29
 800ff6a:	d503      	bpl.n	800ff74 <__ssvfiscanf_r+0x6d8>
 800ff6c:	6832      	ldr	r2, [r6, #0]
 800ff6e:	8010      	strh	r0, [r2, #0]
 800ff70:	461e      	mov	r6, r3
 800ff72:	e012      	b.n	800ff9a <__ssvfiscanf_r+0x6fe>
 800ff74:	f014 0201 	ands.w	r2, r4, #1
 800ff78:	d199      	bne.n	800feae <__ssvfiscanf_r+0x612>
 800ff7a:	07a1      	lsls	r1, r4, #30
 800ff7c:	d597      	bpl.n	800feae <__ssvfiscanf_r+0x612>
 800ff7e:	9b05      	ldr	r3, [sp, #20]
 800ff80:	9803      	ldr	r0, [sp, #12]
 800ff82:	4619      	mov	r1, r3
 800ff84:	4b0b      	ldr	r3, [pc, #44]	; (800ffb4 <__ssvfiscanf_r+0x718>)
 800ff86:	4299      	cmp	r1, r3
 800ff88:	464b      	mov	r3, r9
 800ff8a:	a90c      	add	r1, sp, #48	; 0x30
 800ff8c:	d10d      	bne.n	800ffaa <__ssvfiscanf_r+0x70e>
 800ff8e:	f000 fc5b 	bl	8010848 <_strtoull_r>
 800ff92:	6833      	ldr	r3, [r6, #0]
 800ff94:	e9c3 0100 	strd	r0, r1, [r3]
 800ff98:	3604      	adds	r6, #4
 800ff9a:	9b04      	ldr	r3, [sp, #16]
 800ff9c:	3301      	adds	r3, #1
 800ff9e:	9304      	str	r3, [sp, #16]
 800ffa0:	ab0c      	add	r3, sp, #48	; 0x30
 800ffa2:	ebaa 0a03 	sub.w	sl, sl, r3
 800ffa6:	44d3      	add	fp, sl
 800ffa8:	e742      	b.n	800fe30 <__ssvfiscanf_r+0x594>
 800ffaa:	f000 fb9b 	bl	80106e4 <_strtoll_r>
 800ffae:	e7f0      	b.n	800ff92 <__ssvfiscanf_r+0x6f6>
 800ffb0:	080111a4 	.word	0x080111a4
 800ffb4:	0800f729 	.word	0x0800f729

0800ffb8 <__submore>:
 800ffb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffbc:	460c      	mov	r4, r1
 800ffbe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ffc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ffc4:	4299      	cmp	r1, r3
 800ffc6:	d11e      	bne.n	8010006 <__submore+0x4e>
 800ffc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ffcc:	f7f9 fe10 	bl	8009bf0 <_malloc_r>
 800ffd0:	b918      	cbnz	r0, 800ffda <__submore+0x22>
 800ffd2:	f04f 30ff 	mov.w	r0, #4294967295
 800ffd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ffde:	63a3      	str	r3, [r4, #56]	; 0x38
 800ffe0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ffe4:	6360      	str	r0, [r4, #52]	; 0x34
 800ffe6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ffea:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ffee:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800fff2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800fff6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800fffa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800fffe:	6020      	str	r0, [r4, #0]
 8010000:	2000      	movs	r0, #0
 8010002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010006:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8010008:	0077      	lsls	r7, r6, #1
 801000a:	463a      	mov	r2, r7
 801000c:	f7ff f906 	bl	800f21c <_realloc_r>
 8010010:	4605      	mov	r5, r0
 8010012:	2800      	cmp	r0, #0
 8010014:	d0dd      	beq.n	800ffd2 <__submore+0x1a>
 8010016:	eb00 0806 	add.w	r8, r0, r6
 801001a:	4601      	mov	r1, r0
 801001c:	4632      	mov	r2, r6
 801001e:	4640      	mov	r0, r8
 8010020:	f7f9 fff4 	bl	800a00c <memcpy>
 8010024:	f8c4 8000 	str.w	r8, [r4]
 8010028:	6365      	str	r5, [r4, #52]	; 0x34
 801002a:	63a7      	str	r7, [r4, #56]	; 0x38
 801002c:	e7e8      	b.n	8010000 <__submore+0x48>

0801002e <__sprint_r>:
 801002e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010032:	6893      	ldr	r3, [r2, #8]
 8010034:	4680      	mov	r8, r0
 8010036:	460f      	mov	r7, r1
 8010038:	4614      	mov	r4, r2
 801003a:	b91b      	cbnz	r3, 8010044 <__sprint_r+0x16>
 801003c:	6053      	str	r3, [r2, #4]
 801003e:	4618      	mov	r0, r3
 8010040:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010044:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8010046:	049d      	lsls	r5, r3, #18
 8010048:	d523      	bpl.n	8010092 <__sprint_r+0x64>
 801004a:	6815      	ldr	r5, [r2, #0]
 801004c:	68a0      	ldr	r0, [r4, #8]
 801004e:	3508      	adds	r5, #8
 8010050:	b920      	cbnz	r0, 801005c <__sprint_r+0x2e>
 8010052:	2300      	movs	r3, #0
 8010054:	60a3      	str	r3, [r4, #8]
 8010056:	6063      	str	r3, [r4, #4]
 8010058:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801005c:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8010060:	f855 bc08 	ldr.w	fp, [r5, #-8]
 8010064:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8010068:	f04f 0900 	mov.w	r9, #0
 801006c:	45ca      	cmp	sl, r9
 801006e:	dc05      	bgt.n	801007c <__sprint_r+0x4e>
 8010070:	68a3      	ldr	r3, [r4, #8]
 8010072:	f026 0603 	bic.w	r6, r6, #3
 8010076:	1b9e      	subs	r6, r3, r6
 8010078:	60a6      	str	r6, [r4, #8]
 801007a:	e7e7      	b.n	801004c <__sprint_r+0x1e>
 801007c:	463a      	mov	r2, r7
 801007e:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8010082:	4640      	mov	r0, r8
 8010084:	f000 f91f 	bl	80102c6 <_fputwc_r>
 8010088:	1c43      	adds	r3, r0, #1
 801008a:	d0e2      	beq.n	8010052 <__sprint_r+0x24>
 801008c:	f109 0901 	add.w	r9, r9, #1
 8010090:	e7ec      	b.n	801006c <__sprint_r+0x3e>
 8010092:	f7fd fe8b 	bl	800ddac <__sfvwrite_r>
 8010096:	e7dc      	b.n	8010052 <__sprint_r+0x24>

08010098 <__ascii_wctomb>:
 8010098:	b149      	cbz	r1, 80100ae <__ascii_wctomb+0x16>
 801009a:	2aff      	cmp	r2, #255	; 0xff
 801009c:	bf85      	ittet	hi
 801009e:	238a      	movhi	r3, #138	; 0x8a
 80100a0:	6003      	strhi	r3, [r0, #0]
 80100a2:	700a      	strbls	r2, [r1, #0]
 80100a4:	f04f 30ff 	movhi.w	r0, #4294967295
 80100a8:	bf98      	it	ls
 80100aa:	2001      	movls	r0, #1
 80100ac:	4770      	bx	lr
 80100ae:	4608      	mov	r0, r1
 80100b0:	4770      	bx	lr
	...

080100b4 <_write_r>:
 80100b4:	b538      	push	{r3, r4, r5, lr}
 80100b6:	4c07      	ldr	r4, [pc, #28]	; (80100d4 <_write_r+0x20>)
 80100b8:	4605      	mov	r5, r0
 80100ba:	4608      	mov	r0, r1
 80100bc:	4611      	mov	r1, r2
 80100be:	2200      	movs	r2, #0
 80100c0:	6022      	str	r2, [r4, #0]
 80100c2:	461a      	mov	r2, r3
 80100c4:	f7f9 fbbb 	bl	800983e <_write>
 80100c8:	1c43      	adds	r3, r0, #1
 80100ca:	d102      	bne.n	80100d2 <_write_r+0x1e>
 80100cc:	6823      	ldr	r3, [r4, #0]
 80100ce:	b103      	cbz	r3, 80100d2 <_write_r+0x1e>
 80100d0:	602b      	str	r3, [r5, #0]
 80100d2:	bd38      	pop	{r3, r4, r5, pc}
 80100d4:	200021fc 	.word	0x200021fc

080100d8 <_calloc_r>:
 80100d8:	b510      	push	{r4, lr}
 80100da:	4351      	muls	r1, r2
 80100dc:	f7f9 fd88 	bl	8009bf0 <_malloc_r>
 80100e0:	4604      	mov	r4, r0
 80100e2:	b198      	cbz	r0, 801010c <_calloc_r+0x34>
 80100e4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80100e8:	f022 0203 	bic.w	r2, r2, #3
 80100ec:	3a04      	subs	r2, #4
 80100ee:	2a24      	cmp	r2, #36	; 0x24
 80100f0:	d81b      	bhi.n	801012a <_calloc_r+0x52>
 80100f2:	2a13      	cmp	r2, #19
 80100f4:	d917      	bls.n	8010126 <_calloc_r+0x4e>
 80100f6:	2100      	movs	r1, #0
 80100f8:	2a1b      	cmp	r2, #27
 80100fa:	6001      	str	r1, [r0, #0]
 80100fc:	6041      	str	r1, [r0, #4]
 80100fe:	d807      	bhi.n	8010110 <_calloc_r+0x38>
 8010100:	f100 0308 	add.w	r3, r0, #8
 8010104:	2200      	movs	r2, #0
 8010106:	601a      	str	r2, [r3, #0]
 8010108:	605a      	str	r2, [r3, #4]
 801010a:	609a      	str	r2, [r3, #8]
 801010c:	4620      	mov	r0, r4
 801010e:	bd10      	pop	{r4, pc}
 8010110:	2a24      	cmp	r2, #36	; 0x24
 8010112:	6081      	str	r1, [r0, #8]
 8010114:	60c1      	str	r1, [r0, #12]
 8010116:	bf11      	iteee	ne
 8010118:	f100 0310 	addne.w	r3, r0, #16
 801011c:	6101      	streq	r1, [r0, #16]
 801011e:	f100 0318 	addeq.w	r3, r0, #24
 8010122:	6141      	streq	r1, [r0, #20]
 8010124:	e7ee      	b.n	8010104 <_calloc_r+0x2c>
 8010126:	4603      	mov	r3, r0
 8010128:	e7ec      	b.n	8010104 <_calloc_r+0x2c>
 801012a:	2100      	movs	r1, #0
 801012c:	f7f9 ff79 	bl	800a022 <memset>
 8010130:	e7ec      	b.n	801010c <_calloc_r+0x34>
	...

08010134 <_close_r>:
 8010134:	b538      	push	{r3, r4, r5, lr}
 8010136:	4c06      	ldr	r4, [pc, #24]	; (8010150 <_close_r+0x1c>)
 8010138:	2300      	movs	r3, #0
 801013a:	4605      	mov	r5, r0
 801013c:	4608      	mov	r0, r1
 801013e:	6023      	str	r3, [r4, #0]
 8010140:	f7f9 fbc6 	bl	80098d0 <_close>
 8010144:	1c43      	adds	r3, r0, #1
 8010146:	d102      	bne.n	801014e <_close_r+0x1a>
 8010148:	6823      	ldr	r3, [r4, #0]
 801014a:	b103      	cbz	r3, 801014e <_close_r+0x1a>
 801014c:	602b      	str	r3, [r5, #0]
 801014e:	bd38      	pop	{r3, r4, r5, pc}
 8010150:	200021fc 	.word	0x200021fc

08010154 <__env_lock>:
 8010154:	4801      	ldr	r0, [pc, #4]	; (801015c <__env_lock+0x8>)
 8010156:	f7fe bbde 	b.w	800e916 <__retarget_lock_acquire_recursive>
 801015a:	bf00      	nop
 801015c:	200021f2 	.word	0x200021f2

08010160 <__env_unlock>:
 8010160:	4801      	ldr	r0, [pc, #4]	; (8010168 <__env_unlock+0x8>)
 8010162:	f7fe bbda 	b.w	800e91a <__retarget_lock_release_recursive>
 8010166:	bf00      	nop
 8010168:	200021f2 	.word	0x200021f2

0801016c <_fclose_r>:
 801016c:	b570      	push	{r4, r5, r6, lr}
 801016e:	4605      	mov	r5, r0
 8010170:	460c      	mov	r4, r1
 8010172:	b911      	cbnz	r1, 801017a <_fclose_r+0xe>
 8010174:	2600      	movs	r6, #0
 8010176:	4630      	mov	r0, r6
 8010178:	bd70      	pop	{r4, r5, r6, pc}
 801017a:	b118      	cbz	r0, 8010184 <_fclose_r+0x18>
 801017c:	6983      	ldr	r3, [r0, #24]
 801017e:	b90b      	cbnz	r3, 8010184 <_fclose_r+0x18>
 8010180:	f7fd fc82 	bl	800da88 <__sinit>
 8010184:	4b2c      	ldr	r3, [pc, #176]	; (8010238 <_fclose_r+0xcc>)
 8010186:	429c      	cmp	r4, r3
 8010188:	d114      	bne.n	80101b4 <_fclose_r+0x48>
 801018a:	686c      	ldr	r4, [r5, #4]
 801018c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801018e:	07d8      	lsls	r0, r3, #31
 8010190:	d405      	bmi.n	801019e <_fclose_r+0x32>
 8010192:	89a3      	ldrh	r3, [r4, #12]
 8010194:	0599      	lsls	r1, r3, #22
 8010196:	d402      	bmi.n	801019e <_fclose_r+0x32>
 8010198:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801019a:	f7fe fbbc 	bl	800e916 <__retarget_lock_acquire_recursive>
 801019e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80101a2:	b98b      	cbnz	r3, 80101c8 <_fclose_r+0x5c>
 80101a4:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80101a6:	f016 0601 	ands.w	r6, r6, #1
 80101aa:	d1e3      	bne.n	8010174 <_fclose_r+0x8>
 80101ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80101ae:	f7fe fbb4 	bl	800e91a <__retarget_lock_release_recursive>
 80101b2:	e7e0      	b.n	8010176 <_fclose_r+0xa>
 80101b4:	4b21      	ldr	r3, [pc, #132]	; (801023c <_fclose_r+0xd0>)
 80101b6:	429c      	cmp	r4, r3
 80101b8:	d101      	bne.n	80101be <_fclose_r+0x52>
 80101ba:	68ac      	ldr	r4, [r5, #8]
 80101bc:	e7e6      	b.n	801018c <_fclose_r+0x20>
 80101be:	4b20      	ldr	r3, [pc, #128]	; (8010240 <_fclose_r+0xd4>)
 80101c0:	429c      	cmp	r4, r3
 80101c2:	bf08      	it	eq
 80101c4:	68ec      	ldreq	r4, [r5, #12]
 80101c6:	e7e1      	b.n	801018c <_fclose_r+0x20>
 80101c8:	4621      	mov	r1, r4
 80101ca:	4628      	mov	r0, r5
 80101cc:	f7fd fb36 	bl	800d83c <__sflush_r>
 80101d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80101d2:	4606      	mov	r6, r0
 80101d4:	b133      	cbz	r3, 80101e4 <_fclose_r+0x78>
 80101d6:	6a21      	ldr	r1, [r4, #32]
 80101d8:	4628      	mov	r0, r5
 80101da:	4798      	blx	r3
 80101dc:	2800      	cmp	r0, #0
 80101de:	bfb8      	it	lt
 80101e0:	f04f 36ff 	movlt.w	r6, #4294967295
 80101e4:	89a3      	ldrh	r3, [r4, #12]
 80101e6:	061a      	lsls	r2, r3, #24
 80101e8:	d503      	bpl.n	80101f2 <_fclose_r+0x86>
 80101ea:	6921      	ldr	r1, [r4, #16]
 80101ec:	4628      	mov	r0, r5
 80101ee:	f7fd fd21 	bl	800dc34 <_free_r>
 80101f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80101f4:	b141      	cbz	r1, 8010208 <_fclose_r+0x9c>
 80101f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80101fa:	4299      	cmp	r1, r3
 80101fc:	d002      	beq.n	8010204 <_fclose_r+0x98>
 80101fe:	4628      	mov	r0, r5
 8010200:	f7fd fd18 	bl	800dc34 <_free_r>
 8010204:	2300      	movs	r3, #0
 8010206:	6363      	str	r3, [r4, #52]	; 0x34
 8010208:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801020a:	b121      	cbz	r1, 8010216 <_fclose_r+0xaa>
 801020c:	4628      	mov	r0, r5
 801020e:	f7fd fd11 	bl	800dc34 <_free_r>
 8010212:	2300      	movs	r3, #0
 8010214:	64a3      	str	r3, [r4, #72]	; 0x48
 8010216:	f7fd fc1f 	bl	800da58 <__sfp_lock_acquire>
 801021a:	2300      	movs	r3, #0
 801021c:	81a3      	strh	r3, [r4, #12]
 801021e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010220:	07db      	lsls	r3, r3, #31
 8010222:	d402      	bmi.n	801022a <_fclose_r+0xbe>
 8010224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010226:	f7fe fb78 	bl	800e91a <__retarget_lock_release_recursive>
 801022a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801022c:	f7fe fb71 	bl	800e912 <__retarget_lock_close_recursive>
 8010230:	f7fd fc18 	bl	800da64 <__sfp_lock_release>
 8010234:	e79f      	b.n	8010176 <_fclose_r+0xa>
 8010236:	bf00      	nop
 8010238:	08011058 	.word	0x08011058
 801023c:	08011078 	.word	0x08011078
 8010240:	08011038 	.word	0x08011038

08010244 <__fputwc>:
 8010244:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010248:	4680      	mov	r8, r0
 801024a:	460e      	mov	r6, r1
 801024c:	4614      	mov	r4, r2
 801024e:	f7fe fb2f 	bl	800e8b0 <__locale_mb_cur_max>
 8010252:	2801      	cmp	r0, #1
 8010254:	d11c      	bne.n	8010290 <__fputwc+0x4c>
 8010256:	1e73      	subs	r3, r6, #1
 8010258:	2bfe      	cmp	r3, #254	; 0xfe
 801025a:	d819      	bhi.n	8010290 <__fputwc+0x4c>
 801025c:	f88d 6004 	strb.w	r6, [sp, #4]
 8010260:	4605      	mov	r5, r0
 8010262:	2700      	movs	r7, #0
 8010264:	f10d 0904 	add.w	r9, sp, #4
 8010268:	42af      	cmp	r7, r5
 801026a:	d020      	beq.n	80102ae <__fputwc+0x6a>
 801026c:	68a3      	ldr	r3, [r4, #8]
 801026e:	f817 1009 	ldrb.w	r1, [r7, r9]
 8010272:	3b01      	subs	r3, #1
 8010274:	2b00      	cmp	r3, #0
 8010276:	60a3      	str	r3, [r4, #8]
 8010278:	da04      	bge.n	8010284 <__fputwc+0x40>
 801027a:	69a2      	ldr	r2, [r4, #24]
 801027c:	4293      	cmp	r3, r2
 801027e:	db1a      	blt.n	80102b6 <__fputwc+0x72>
 8010280:	290a      	cmp	r1, #10
 8010282:	d018      	beq.n	80102b6 <__fputwc+0x72>
 8010284:	6823      	ldr	r3, [r4, #0]
 8010286:	1c5a      	adds	r2, r3, #1
 8010288:	6022      	str	r2, [r4, #0]
 801028a:	7019      	strb	r1, [r3, #0]
 801028c:	3701      	adds	r7, #1
 801028e:	e7eb      	b.n	8010268 <__fputwc+0x24>
 8010290:	4632      	mov	r2, r6
 8010292:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8010296:	a901      	add	r1, sp, #4
 8010298:	4640      	mov	r0, r8
 801029a:	f000 fb45 	bl	8010928 <_wcrtomb_r>
 801029e:	1c42      	adds	r2, r0, #1
 80102a0:	4605      	mov	r5, r0
 80102a2:	d1de      	bne.n	8010262 <__fputwc+0x1e>
 80102a4:	89a3      	ldrh	r3, [r4, #12]
 80102a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102aa:	81a3      	strh	r3, [r4, #12]
 80102ac:	4606      	mov	r6, r0
 80102ae:	4630      	mov	r0, r6
 80102b0:	b003      	add	sp, #12
 80102b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102b6:	4622      	mov	r2, r4
 80102b8:	4640      	mov	r0, r8
 80102ba:	f000 fad7 	bl	801086c <__swbuf_r>
 80102be:	1c43      	adds	r3, r0, #1
 80102c0:	d1e4      	bne.n	801028c <__fputwc+0x48>
 80102c2:	4606      	mov	r6, r0
 80102c4:	e7f3      	b.n	80102ae <__fputwc+0x6a>

080102c6 <_fputwc_r>:
 80102c6:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80102c8:	07db      	lsls	r3, r3, #31
 80102ca:	b570      	push	{r4, r5, r6, lr}
 80102cc:	4605      	mov	r5, r0
 80102ce:	460e      	mov	r6, r1
 80102d0:	4614      	mov	r4, r2
 80102d2:	d405      	bmi.n	80102e0 <_fputwc_r+0x1a>
 80102d4:	8993      	ldrh	r3, [r2, #12]
 80102d6:	0598      	lsls	r0, r3, #22
 80102d8:	d402      	bmi.n	80102e0 <_fputwc_r+0x1a>
 80102da:	6d90      	ldr	r0, [r2, #88]	; 0x58
 80102dc:	f7fe fb1b 	bl	800e916 <__retarget_lock_acquire_recursive>
 80102e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102e4:	0499      	lsls	r1, r3, #18
 80102e6:	d406      	bmi.n	80102f6 <_fputwc_r+0x30>
 80102e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80102ec:	81a3      	strh	r3, [r4, #12]
 80102ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80102f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80102f4:	6663      	str	r3, [r4, #100]	; 0x64
 80102f6:	4622      	mov	r2, r4
 80102f8:	4628      	mov	r0, r5
 80102fa:	4631      	mov	r1, r6
 80102fc:	f7ff ffa2 	bl	8010244 <__fputwc>
 8010300:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010302:	07da      	lsls	r2, r3, #31
 8010304:	4605      	mov	r5, r0
 8010306:	d405      	bmi.n	8010314 <_fputwc_r+0x4e>
 8010308:	89a3      	ldrh	r3, [r4, #12]
 801030a:	059b      	lsls	r3, r3, #22
 801030c:	d402      	bmi.n	8010314 <_fputwc_r+0x4e>
 801030e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010310:	f7fe fb03 	bl	800e91a <__retarget_lock_release_recursive>
 8010314:	4628      	mov	r0, r5
 8010316:	bd70      	pop	{r4, r5, r6, pc}

08010318 <_fstat_r>:
 8010318:	b538      	push	{r3, r4, r5, lr}
 801031a:	4c07      	ldr	r4, [pc, #28]	; (8010338 <_fstat_r+0x20>)
 801031c:	2300      	movs	r3, #0
 801031e:	4605      	mov	r5, r0
 8010320:	4608      	mov	r0, r1
 8010322:	4611      	mov	r1, r2
 8010324:	6023      	str	r3, [r4, #0]
 8010326:	f7f9 fade 	bl	80098e6 <_fstat>
 801032a:	1c43      	adds	r3, r0, #1
 801032c:	d102      	bne.n	8010334 <_fstat_r+0x1c>
 801032e:	6823      	ldr	r3, [r4, #0]
 8010330:	b103      	cbz	r3, 8010334 <_fstat_r+0x1c>
 8010332:	602b      	str	r3, [r5, #0]
 8010334:	bd38      	pop	{r3, r4, r5, pc}
 8010336:	bf00      	nop
 8010338:	200021fc 	.word	0x200021fc

0801033c <_isatty_r>:
 801033c:	b538      	push	{r3, r4, r5, lr}
 801033e:	4c06      	ldr	r4, [pc, #24]	; (8010358 <_isatty_r+0x1c>)
 8010340:	2300      	movs	r3, #0
 8010342:	4605      	mov	r5, r0
 8010344:	4608      	mov	r0, r1
 8010346:	6023      	str	r3, [r4, #0]
 8010348:	f7f9 fadc 	bl	8009904 <_isatty>
 801034c:	1c43      	adds	r3, r0, #1
 801034e:	d102      	bne.n	8010356 <_isatty_r+0x1a>
 8010350:	6823      	ldr	r3, [r4, #0]
 8010352:	b103      	cbz	r3, 8010356 <_isatty_r+0x1a>
 8010354:	602b      	str	r3, [r5, #0]
 8010356:	bd38      	pop	{r3, r4, r5, pc}
 8010358:	200021fc 	.word	0x200021fc

0801035c <iswspace>:
 801035c:	28ff      	cmp	r0, #255	; 0xff
 801035e:	b510      	push	{r4, lr}
 8010360:	4604      	mov	r4, r0
 8010362:	d806      	bhi.n	8010372 <iswspace+0x16>
 8010364:	f7fe fab6 	bl	800e8d4 <__locale_ctype_ptr>
 8010368:	4420      	add	r0, r4
 801036a:	7840      	ldrb	r0, [r0, #1]
 801036c:	f000 0008 	and.w	r0, r0, #8
 8010370:	bd10      	pop	{r4, pc}
 8010372:	2000      	movs	r0, #0
 8010374:	bd10      	pop	{r4, pc}
	...

08010378 <_lseek_r>:
 8010378:	b538      	push	{r3, r4, r5, lr}
 801037a:	4c07      	ldr	r4, [pc, #28]	; (8010398 <_lseek_r+0x20>)
 801037c:	4605      	mov	r5, r0
 801037e:	4608      	mov	r0, r1
 8010380:	4611      	mov	r1, r2
 8010382:	2200      	movs	r2, #0
 8010384:	6022      	str	r2, [r4, #0]
 8010386:	461a      	mov	r2, r3
 8010388:	f7f9 fac6 	bl	8009918 <_lseek>
 801038c:	1c43      	adds	r3, r0, #1
 801038e:	d102      	bne.n	8010396 <_lseek_r+0x1e>
 8010390:	6823      	ldr	r3, [r4, #0]
 8010392:	b103      	cbz	r3, 8010396 <_lseek_r+0x1e>
 8010394:	602b      	str	r3, [r5, #0]
 8010396:	bd38      	pop	{r3, r4, r5, pc}
 8010398:	200021fc 	.word	0x200021fc

0801039c <_mbrtowc_r>:
 801039c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801039e:	9d08      	ldr	r5, [sp, #32]
 80103a0:	4c11      	ldr	r4, [pc, #68]	; (80103e8 <_mbrtowc_r+0x4c>)
 80103a2:	4606      	mov	r6, r0
 80103a4:	4617      	mov	r7, r2
 80103a6:	b9a2      	cbnz	r2, 80103d2 <_mbrtowc_r+0x36>
 80103a8:	6823      	ldr	r3, [r4, #0]
 80103aa:	4a10      	ldr	r2, [pc, #64]	; (80103ec <_mbrtowc_r+0x50>)
 80103ac:	6a1b      	ldr	r3, [r3, #32]
 80103ae:	9500      	str	r5, [sp, #0]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	bf08      	it	eq
 80103b4:	4613      	moveq	r3, r2
 80103b6:	4a0e      	ldr	r2, [pc, #56]	; (80103f0 <_mbrtowc_r+0x54>)
 80103b8:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
 80103bc:	4639      	mov	r1, r7
 80103be:	2301      	movs	r3, #1
 80103c0:	47a0      	blx	r4
 80103c2:	1c43      	adds	r3, r0, #1
 80103c4:	bf01      	itttt	eq
 80103c6:	2300      	moveq	r3, #0
 80103c8:	602b      	streq	r3, [r5, #0]
 80103ca:	238a      	moveq	r3, #138	; 0x8a
 80103cc:	6033      	streq	r3, [r6, #0]
 80103ce:	b003      	add	sp, #12
 80103d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103d2:	6824      	ldr	r4, [r4, #0]
 80103d4:	4f05      	ldr	r7, [pc, #20]	; (80103ec <_mbrtowc_r+0x50>)
 80103d6:	6a24      	ldr	r4, [r4, #32]
 80103d8:	9500      	str	r5, [sp, #0]
 80103da:	2c00      	cmp	r4, #0
 80103dc:	bf08      	it	eq
 80103de:	463c      	moveq	r4, r7
 80103e0:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 80103e4:	e7ec      	b.n	80103c0 <_mbrtowc_r+0x24>
 80103e6:	bf00      	nop
 80103e8:	20000010 	.word	0x20000010
 80103ec:	2000055c 	.word	0x2000055c
 80103f0:	08010f41 	.word	0x08010f41

080103f4 <_read_r>:
 80103f4:	b538      	push	{r3, r4, r5, lr}
 80103f6:	4c07      	ldr	r4, [pc, #28]	; (8010414 <_read_r+0x20>)
 80103f8:	4605      	mov	r5, r0
 80103fa:	4608      	mov	r0, r1
 80103fc:	4611      	mov	r1, r2
 80103fe:	2200      	movs	r2, #0
 8010400:	6022      	str	r2, [r4, #0]
 8010402:	461a      	mov	r2, r3
 8010404:	f7f9 f9fe 	bl	8009804 <_read>
 8010408:	1c43      	adds	r3, r0, #1
 801040a:	d102      	bne.n	8010412 <_read_r+0x1e>
 801040c:	6823      	ldr	r3, [r4, #0]
 801040e:	b103      	cbz	r3, 8010412 <_read_r+0x1e>
 8010410:	602b      	str	r3, [r5, #0]
 8010412:	bd38      	pop	{r3, r4, r5, pc}
 8010414:	200021fc 	.word	0x200021fc

08010418 <__sccl>:
 8010418:	b570      	push	{r4, r5, r6, lr}
 801041a:	780b      	ldrb	r3, [r1, #0]
 801041c:	2b5e      	cmp	r3, #94	; 0x5e
 801041e:	bf13      	iteet	ne
 8010420:	1c4a      	addne	r2, r1, #1
 8010422:	1c8a      	addeq	r2, r1, #2
 8010424:	784b      	ldrbeq	r3, [r1, #1]
 8010426:	2100      	movne	r1, #0
 8010428:	bf08      	it	eq
 801042a:	2101      	moveq	r1, #1
 801042c:	1e44      	subs	r4, r0, #1
 801042e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8010432:	f804 1f01 	strb.w	r1, [r4, #1]!
 8010436:	42a5      	cmp	r5, r4
 8010438:	d1fb      	bne.n	8010432 <__sccl+0x1a>
 801043a:	b913      	cbnz	r3, 8010442 <__sccl+0x2a>
 801043c:	3a01      	subs	r2, #1
 801043e:	4610      	mov	r0, r2
 8010440:	bd70      	pop	{r4, r5, r6, pc}
 8010442:	f081 0401 	eor.w	r4, r1, #1
 8010446:	54c4      	strb	r4, [r0, r3]
 8010448:	4611      	mov	r1, r2
 801044a:	780d      	ldrb	r5, [r1, #0]
 801044c:	2d2d      	cmp	r5, #45	; 0x2d
 801044e:	f101 0201 	add.w	r2, r1, #1
 8010452:	d006      	beq.n	8010462 <__sccl+0x4a>
 8010454:	2d5d      	cmp	r5, #93	; 0x5d
 8010456:	d0f2      	beq.n	801043e <__sccl+0x26>
 8010458:	b90d      	cbnz	r5, 801045e <__sccl+0x46>
 801045a:	460a      	mov	r2, r1
 801045c:	e7ef      	b.n	801043e <__sccl+0x26>
 801045e:	462b      	mov	r3, r5
 8010460:	e7f1      	b.n	8010446 <__sccl+0x2e>
 8010462:	784e      	ldrb	r6, [r1, #1]
 8010464:	2e5d      	cmp	r6, #93	; 0x5d
 8010466:	d0fa      	beq.n	801045e <__sccl+0x46>
 8010468:	42b3      	cmp	r3, r6
 801046a:	dcf8      	bgt.n	801045e <__sccl+0x46>
 801046c:	3102      	adds	r1, #2
 801046e:	3301      	adds	r3, #1
 8010470:	429e      	cmp	r6, r3
 8010472:	54c4      	strb	r4, [r0, r3]
 8010474:	dcfb      	bgt.n	801046e <__sccl+0x56>
 8010476:	e7e8      	b.n	801044a <__sccl+0x32>

08010478 <_strtol_l.isra.0>:
 8010478:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801047c:	4680      	mov	r8, r0
 801047e:	4689      	mov	r9, r1
 8010480:	4692      	mov	sl, r2
 8010482:	461f      	mov	r7, r3
 8010484:	468b      	mov	fp, r1
 8010486:	465d      	mov	r5, fp
 8010488:	980a      	ldr	r0, [sp, #40]	; 0x28
 801048a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801048e:	f7fe fa1d 	bl	800e8cc <__locale_ctype_ptr_l>
 8010492:	4420      	add	r0, r4
 8010494:	7846      	ldrb	r6, [r0, #1]
 8010496:	f016 0608 	ands.w	r6, r6, #8
 801049a:	d10b      	bne.n	80104b4 <_strtol_l.isra.0+0x3c>
 801049c:	2c2d      	cmp	r4, #45	; 0x2d
 801049e:	d10b      	bne.n	80104b8 <_strtol_l.isra.0+0x40>
 80104a0:	782c      	ldrb	r4, [r5, #0]
 80104a2:	2601      	movs	r6, #1
 80104a4:	f10b 0502 	add.w	r5, fp, #2
 80104a8:	b167      	cbz	r7, 80104c4 <_strtol_l.isra.0+0x4c>
 80104aa:	2f10      	cmp	r7, #16
 80104ac:	d114      	bne.n	80104d8 <_strtol_l.isra.0+0x60>
 80104ae:	2c30      	cmp	r4, #48	; 0x30
 80104b0:	d00a      	beq.n	80104c8 <_strtol_l.isra.0+0x50>
 80104b2:	e011      	b.n	80104d8 <_strtol_l.isra.0+0x60>
 80104b4:	46ab      	mov	fp, r5
 80104b6:	e7e6      	b.n	8010486 <_strtol_l.isra.0+0xe>
 80104b8:	2c2b      	cmp	r4, #43	; 0x2b
 80104ba:	bf04      	itt	eq
 80104bc:	782c      	ldrbeq	r4, [r5, #0]
 80104be:	f10b 0502 	addeq.w	r5, fp, #2
 80104c2:	e7f1      	b.n	80104a8 <_strtol_l.isra.0+0x30>
 80104c4:	2c30      	cmp	r4, #48	; 0x30
 80104c6:	d127      	bne.n	8010518 <_strtol_l.isra.0+0xa0>
 80104c8:	782b      	ldrb	r3, [r5, #0]
 80104ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80104ce:	2b58      	cmp	r3, #88	; 0x58
 80104d0:	d14b      	bne.n	801056a <_strtol_l.isra.0+0xf2>
 80104d2:	786c      	ldrb	r4, [r5, #1]
 80104d4:	2710      	movs	r7, #16
 80104d6:	3502      	adds	r5, #2
 80104d8:	2e00      	cmp	r6, #0
 80104da:	bf0c      	ite	eq
 80104dc:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80104e0:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80104e4:	2200      	movs	r2, #0
 80104e6:	fbb1 fef7 	udiv	lr, r1, r7
 80104ea:	4610      	mov	r0, r2
 80104ec:	fb07 1c1e 	mls	ip, r7, lr, r1
 80104f0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80104f4:	2b09      	cmp	r3, #9
 80104f6:	d811      	bhi.n	801051c <_strtol_l.isra.0+0xa4>
 80104f8:	461c      	mov	r4, r3
 80104fa:	42a7      	cmp	r7, r4
 80104fc:	dd1d      	ble.n	801053a <_strtol_l.isra.0+0xc2>
 80104fe:	1c53      	adds	r3, r2, #1
 8010500:	d007      	beq.n	8010512 <_strtol_l.isra.0+0x9a>
 8010502:	4586      	cmp	lr, r0
 8010504:	d316      	bcc.n	8010534 <_strtol_l.isra.0+0xbc>
 8010506:	d101      	bne.n	801050c <_strtol_l.isra.0+0x94>
 8010508:	45a4      	cmp	ip, r4
 801050a:	db13      	blt.n	8010534 <_strtol_l.isra.0+0xbc>
 801050c:	fb00 4007 	mla	r0, r0, r7, r4
 8010510:	2201      	movs	r2, #1
 8010512:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010516:	e7eb      	b.n	80104f0 <_strtol_l.isra.0+0x78>
 8010518:	270a      	movs	r7, #10
 801051a:	e7dd      	b.n	80104d8 <_strtol_l.isra.0+0x60>
 801051c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8010520:	2b19      	cmp	r3, #25
 8010522:	d801      	bhi.n	8010528 <_strtol_l.isra.0+0xb0>
 8010524:	3c37      	subs	r4, #55	; 0x37
 8010526:	e7e8      	b.n	80104fa <_strtol_l.isra.0+0x82>
 8010528:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801052c:	2b19      	cmp	r3, #25
 801052e:	d804      	bhi.n	801053a <_strtol_l.isra.0+0xc2>
 8010530:	3c57      	subs	r4, #87	; 0x57
 8010532:	e7e2      	b.n	80104fa <_strtol_l.isra.0+0x82>
 8010534:	f04f 32ff 	mov.w	r2, #4294967295
 8010538:	e7eb      	b.n	8010512 <_strtol_l.isra.0+0x9a>
 801053a:	1c53      	adds	r3, r2, #1
 801053c:	d108      	bne.n	8010550 <_strtol_l.isra.0+0xd8>
 801053e:	2322      	movs	r3, #34	; 0x22
 8010540:	f8c8 3000 	str.w	r3, [r8]
 8010544:	4608      	mov	r0, r1
 8010546:	f1ba 0f00 	cmp.w	sl, #0
 801054a:	d107      	bne.n	801055c <_strtol_l.isra.0+0xe4>
 801054c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010550:	b106      	cbz	r6, 8010554 <_strtol_l.isra.0+0xdc>
 8010552:	4240      	negs	r0, r0
 8010554:	f1ba 0f00 	cmp.w	sl, #0
 8010558:	d00c      	beq.n	8010574 <_strtol_l.isra.0+0xfc>
 801055a:	b122      	cbz	r2, 8010566 <_strtol_l.isra.0+0xee>
 801055c:	3d01      	subs	r5, #1
 801055e:	f8ca 5000 	str.w	r5, [sl]
 8010562:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010566:	464d      	mov	r5, r9
 8010568:	e7f9      	b.n	801055e <_strtol_l.isra.0+0xe6>
 801056a:	2430      	movs	r4, #48	; 0x30
 801056c:	2f00      	cmp	r7, #0
 801056e:	d1b3      	bne.n	80104d8 <_strtol_l.isra.0+0x60>
 8010570:	2708      	movs	r7, #8
 8010572:	e7b1      	b.n	80104d8 <_strtol_l.isra.0+0x60>
 8010574:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010578 <_strtol_r>:
 8010578:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801057a:	4c06      	ldr	r4, [pc, #24]	; (8010594 <_strtol_r+0x1c>)
 801057c:	4d06      	ldr	r5, [pc, #24]	; (8010598 <_strtol_r+0x20>)
 801057e:	6824      	ldr	r4, [r4, #0]
 8010580:	6a24      	ldr	r4, [r4, #32]
 8010582:	2c00      	cmp	r4, #0
 8010584:	bf08      	it	eq
 8010586:	462c      	moveq	r4, r5
 8010588:	9400      	str	r4, [sp, #0]
 801058a:	f7ff ff75 	bl	8010478 <_strtol_l.isra.0>
 801058e:	b003      	add	sp, #12
 8010590:	bd30      	pop	{r4, r5, pc}
 8010592:	bf00      	nop
 8010594:	20000010 	.word	0x20000010
 8010598:	2000055c 	.word	0x2000055c

0801059c <_strtoll_l.isra.0>:
 801059c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105a0:	b087      	sub	sp, #28
 80105a2:	4688      	mov	r8, r1
 80105a4:	9005      	str	r0, [sp, #20]
 80105a6:	4693      	mov	fp, r2
 80105a8:	461f      	mov	r7, r3
 80105aa:	4689      	mov	r9, r1
 80105ac:	464d      	mov	r5, r9
 80105ae:	9810      	ldr	r0, [sp, #64]	; 0x40
 80105b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80105b4:	f7fe f98a 	bl	800e8cc <__locale_ctype_ptr_l>
 80105b8:	4420      	add	r0, r4
 80105ba:	7846      	ldrb	r6, [r0, #1]
 80105bc:	f016 0608 	ands.w	r6, r6, #8
 80105c0:	d10b      	bne.n	80105da <_strtoll_l.isra.0+0x3e>
 80105c2:	2c2d      	cmp	r4, #45	; 0x2d
 80105c4:	d10b      	bne.n	80105de <_strtoll_l.isra.0+0x42>
 80105c6:	782c      	ldrb	r4, [r5, #0]
 80105c8:	2601      	movs	r6, #1
 80105ca:	f109 0502 	add.w	r5, r9, #2
 80105ce:	b167      	cbz	r7, 80105ea <_strtoll_l.isra.0+0x4e>
 80105d0:	2f10      	cmp	r7, #16
 80105d2:	d114      	bne.n	80105fe <_strtoll_l.isra.0+0x62>
 80105d4:	2c30      	cmp	r4, #48	; 0x30
 80105d6:	d00a      	beq.n	80105ee <_strtoll_l.isra.0+0x52>
 80105d8:	e011      	b.n	80105fe <_strtoll_l.isra.0+0x62>
 80105da:	46a9      	mov	r9, r5
 80105dc:	e7e6      	b.n	80105ac <_strtoll_l.isra.0+0x10>
 80105de:	2c2b      	cmp	r4, #43	; 0x2b
 80105e0:	bf04      	itt	eq
 80105e2:	782c      	ldrbeq	r4, [r5, #0]
 80105e4:	f109 0502 	addeq.w	r5, r9, #2
 80105e8:	e7f1      	b.n	80105ce <_strtoll_l.isra.0+0x32>
 80105ea:	2c30      	cmp	r4, #48	; 0x30
 80105ec:	d144      	bne.n	8010678 <_strtoll_l.isra.0+0xdc>
 80105ee:	782b      	ldrb	r3, [r5, #0]
 80105f0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80105f4:	2b58      	cmp	r3, #88	; 0x58
 80105f6:	d170      	bne.n	80106da <_strtoll_l.isra.0+0x13e>
 80105f8:	786c      	ldrb	r4, [r5, #1]
 80105fa:	2710      	movs	r7, #16
 80105fc:	3502      	adds	r5, #2
 80105fe:	2e00      	cmp	r6, #0
 8010600:	d03c      	beq.n	801067c <_strtoll_l.isra.0+0xe0>
 8010602:	f04f 0a00 	mov.w	sl, #0
 8010606:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 801060a:	463a      	mov	r2, r7
 801060c:	17fb      	asrs	r3, r7, #31
 801060e:	4650      	mov	r0, sl
 8010610:	4649      	mov	r1, r9
 8010612:	e9cd 2300 	strd	r2, r3, [sp]
 8010616:	f7f0 fb43 	bl	8000ca0 <__aeabi_uldivmod>
 801061a:	17fb      	asrs	r3, r7, #31
 801061c:	9204      	str	r2, [sp, #16]
 801061e:	4650      	mov	r0, sl
 8010620:	463a      	mov	r2, r7
 8010622:	4649      	mov	r1, r9
 8010624:	f7f0 fb3c 	bl	8000ca0 <__aeabi_uldivmod>
 8010628:	2300      	movs	r3, #0
 801062a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801062e:	2000      	movs	r0, #0
 8010630:	2100      	movs	r1, #0
 8010632:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8010636:	2a09      	cmp	r2, #9
 8010638:	d825      	bhi.n	8010686 <_strtoll_l.isra.0+0xea>
 801063a:	4614      	mov	r4, r2
 801063c:	42a7      	cmp	r7, r4
 801063e:	dd31      	ble.n	80106a4 <_strtoll_l.isra.0+0x108>
 8010640:	1c5a      	adds	r2, r3, #1
 8010642:	d016      	beq.n	8010672 <_strtoll_l.isra.0+0xd6>
 8010644:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010648:	428b      	cmp	r3, r1
 801064a:	bf08      	it	eq
 801064c:	4282      	cmpeq	r2, r0
 801064e:	d326      	bcc.n	801069e <_strtoll_l.isra.0+0x102>
 8010650:	d102      	bne.n	8010658 <_strtoll_l.isra.0+0xbc>
 8010652:	9b04      	ldr	r3, [sp, #16]
 8010654:	42a3      	cmp	r3, r4
 8010656:	db22      	blt.n	801069e <_strtoll_l.isra.0+0x102>
 8010658:	9b00      	ldr	r3, [sp, #0]
 801065a:	9a01      	ldr	r2, [sp, #4]
 801065c:	434b      	muls	r3, r1
 801065e:	fb00 3302 	mla	r3, r0, r2, r3
 8010662:	9a00      	ldr	r2, [sp, #0]
 8010664:	fba2 0100 	umull	r0, r1, r2, r0
 8010668:	4419      	add	r1, r3
 801066a:	1900      	adds	r0, r0, r4
 801066c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8010670:	2301      	movs	r3, #1
 8010672:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010676:	e7dc      	b.n	8010632 <_strtoll_l.isra.0+0x96>
 8010678:	270a      	movs	r7, #10
 801067a:	e7c0      	b.n	80105fe <_strtoll_l.isra.0+0x62>
 801067c:	f04f 3aff 	mov.w	sl, #4294967295
 8010680:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8010684:	e7c1      	b.n	801060a <_strtoll_l.isra.0+0x6e>
 8010686:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 801068a:	2a19      	cmp	r2, #25
 801068c:	d801      	bhi.n	8010692 <_strtoll_l.isra.0+0xf6>
 801068e:	3c37      	subs	r4, #55	; 0x37
 8010690:	e7d4      	b.n	801063c <_strtoll_l.isra.0+0xa0>
 8010692:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8010696:	2a19      	cmp	r2, #25
 8010698:	d804      	bhi.n	80106a4 <_strtoll_l.isra.0+0x108>
 801069a:	3c57      	subs	r4, #87	; 0x57
 801069c:	e7ce      	b.n	801063c <_strtoll_l.isra.0+0xa0>
 801069e:	f04f 33ff 	mov.w	r3, #4294967295
 80106a2:	e7e6      	b.n	8010672 <_strtoll_l.isra.0+0xd6>
 80106a4:	1c5a      	adds	r2, r3, #1
 80106a6:	d10a      	bne.n	80106be <_strtoll_l.isra.0+0x122>
 80106a8:	9a05      	ldr	r2, [sp, #20]
 80106aa:	2322      	movs	r3, #34	; 0x22
 80106ac:	6013      	str	r3, [r2, #0]
 80106ae:	4650      	mov	r0, sl
 80106b0:	4649      	mov	r1, r9
 80106b2:	f1bb 0f00 	cmp.w	fp, #0
 80106b6:	d10a      	bne.n	80106ce <_strtoll_l.isra.0+0x132>
 80106b8:	b007      	add	sp, #28
 80106ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106be:	b116      	cbz	r6, 80106c6 <_strtoll_l.isra.0+0x12a>
 80106c0:	4240      	negs	r0, r0
 80106c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80106c6:	f1bb 0f00 	cmp.w	fp, #0
 80106ca:	d0f5      	beq.n	80106b8 <_strtoll_l.isra.0+0x11c>
 80106cc:	b11b      	cbz	r3, 80106d6 <_strtoll_l.isra.0+0x13a>
 80106ce:	3d01      	subs	r5, #1
 80106d0:	f8cb 5000 	str.w	r5, [fp]
 80106d4:	e7f0      	b.n	80106b8 <_strtoll_l.isra.0+0x11c>
 80106d6:	4645      	mov	r5, r8
 80106d8:	e7fa      	b.n	80106d0 <_strtoll_l.isra.0+0x134>
 80106da:	2430      	movs	r4, #48	; 0x30
 80106dc:	2f00      	cmp	r7, #0
 80106de:	d18e      	bne.n	80105fe <_strtoll_l.isra.0+0x62>
 80106e0:	2708      	movs	r7, #8
 80106e2:	e78c      	b.n	80105fe <_strtoll_l.isra.0+0x62>

080106e4 <_strtoll_r>:
 80106e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80106e6:	4c06      	ldr	r4, [pc, #24]	; (8010700 <_strtoll_r+0x1c>)
 80106e8:	4d06      	ldr	r5, [pc, #24]	; (8010704 <_strtoll_r+0x20>)
 80106ea:	6824      	ldr	r4, [r4, #0]
 80106ec:	6a24      	ldr	r4, [r4, #32]
 80106ee:	2c00      	cmp	r4, #0
 80106f0:	bf08      	it	eq
 80106f2:	462c      	moveq	r4, r5
 80106f4:	9400      	str	r4, [sp, #0]
 80106f6:	f7ff ff51 	bl	801059c <_strtoll_l.isra.0>
 80106fa:	b003      	add	sp, #12
 80106fc:	bd30      	pop	{r4, r5, pc}
 80106fe:	bf00      	nop
 8010700:	20000010 	.word	0x20000010
 8010704:	2000055c 	.word	0x2000055c

08010708 <_strtoull_l.isra.0>:
 8010708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801070c:	b085      	sub	sp, #20
 801070e:	4688      	mov	r8, r1
 8010710:	9003      	str	r0, [sp, #12]
 8010712:	4691      	mov	r9, r2
 8010714:	461f      	mov	r7, r3
 8010716:	468b      	mov	fp, r1
 8010718:	465d      	mov	r5, fp
 801071a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801071c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010720:	f7fe f8d4 	bl	800e8cc <__locale_ctype_ptr_l>
 8010724:	4420      	add	r0, r4
 8010726:	7846      	ldrb	r6, [r0, #1]
 8010728:	f016 0608 	ands.w	r6, r6, #8
 801072c:	d10b      	bne.n	8010746 <_strtoull_l.isra.0+0x3e>
 801072e:	2c2d      	cmp	r4, #45	; 0x2d
 8010730:	d10b      	bne.n	801074a <_strtoull_l.isra.0+0x42>
 8010732:	782c      	ldrb	r4, [r5, #0]
 8010734:	2601      	movs	r6, #1
 8010736:	f10b 0502 	add.w	r5, fp, #2
 801073a:	b167      	cbz	r7, 8010756 <_strtoull_l.isra.0+0x4e>
 801073c:	2f10      	cmp	r7, #16
 801073e:	d114      	bne.n	801076a <_strtoull_l.isra.0+0x62>
 8010740:	2c30      	cmp	r4, #48	; 0x30
 8010742:	d00a      	beq.n	801075a <_strtoull_l.isra.0+0x52>
 8010744:	e011      	b.n	801076a <_strtoull_l.isra.0+0x62>
 8010746:	46ab      	mov	fp, r5
 8010748:	e7e6      	b.n	8010718 <_strtoull_l.isra.0+0x10>
 801074a:	2c2b      	cmp	r4, #43	; 0x2b
 801074c:	bf04      	itt	eq
 801074e:	782c      	ldrbeq	r4, [r5, #0]
 8010750:	f10b 0502 	addeq.w	r5, fp, #2
 8010754:	e7f1      	b.n	801073a <_strtoull_l.isra.0+0x32>
 8010756:	2c30      	cmp	r4, #48	; 0x30
 8010758:	d141      	bne.n	80107de <_strtoull_l.isra.0+0xd6>
 801075a:	782b      	ldrb	r3, [r5, #0]
 801075c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010760:	2b58      	cmp	r3, #88	; 0x58
 8010762:	d16c      	bne.n	801083e <_strtoull_l.isra.0+0x136>
 8010764:	786c      	ldrb	r4, [r5, #1]
 8010766:	2710      	movs	r7, #16
 8010768:	3502      	adds	r5, #2
 801076a:	ea4f 7be7 	mov.w	fp, r7, asr #31
 801076e:	463a      	mov	r2, r7
 8010770:	465b      	mov	r3, fp
 8010772:	f04f 30ff 	mov.w	r0, #4294967295
 8010776:	f04f 31ff 	mov.w	r1, #4294967295
 801077a:	f7f0 fa91 	bl	8000ca0 <__aeabi_uldivmod>
 801077e:	463a      	mov	r2, r7
 8010780:	e9cd 0100 	strd	r0, r1, [sp]
 8010784:	465b      	mov	r3, fp
 8010786:	f04f 30ff 	mov.w	r0, #4294967295
 801078a:	f04f 31ff 	mov.w	r1, #4294967295
 801078e:	f7f0 fa87 	bl	8000ca0 <__aeabi_uldivmod>
 8010792:	46ba      	mov	sl, r7
 8010794:	4694      	mov	ip, r2
 8010796:	2300      	movs	r3, #0
 8010798:	2000      	movs	r0, #0
 801079a:	2100      	movs	r1, #0
 801079c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80107a0:	f1be 0f09 	cmp.w	lr, #9
 80107a4:	d81d      	bhi.n	80107e2 <_strtoull_l.isra.0+0xda>
 80107a6:	4674      	mov	r4, lr
 80107a8:	42a7      	cmp	r7, r4
 80107aa:	dd2b      	ble.n	8010804 <_strtoull_l.isra.0+0xfc>
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	db26      	blt.n	80107fe <_strtoull_l.isra.0+0xf6>
 80107b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80107b4:	428b      	cmp	r3, r1
 80107b6:	bf08      	it	eq
 80107b8:	4282      	cmpeq	r2, r0
 80107ba:	d320      	bcc.n	80107fe <_strtoull_l.isra.0+0xf6>
 80107bc:	d101      	bne.n	80107c2 <_strtoull_l.isra.0+0xba>
 80107be:	45a4      	cmp	ip, r4
 80107c0:	db1d      	blt.n	80107fe <_strtoull_l.isra.0+0xf6>
 80107c2:	fb0a f301 	mul.w	r3, sl, r1
 80107c6:	fb00 330b 	mla	r3, r0, fp, r3
 80107ca:	fbaa 0100 	umull	r0, r1, sl, r0
 80107ce:	4419      	add	r1, r3
 80107d0:	1900      	adds	r0, r0, r4
 80107d2:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80107d6:	2301      	movs	r3, #1
 80107d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80107dc:	e7de      	b.n	801079c <_strtoull_l.isra.0+0x94>
 80107de:	270a      	movs	r7, #10
 80107e0:	e7c3      	b.n	801076a <_strtoull_l.isra.0+0x62>
 80107e2:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80107e6:	f1be 0f19 	cmp.w	lr, #25
 80107ea:	d801      	bhi.n	80107f0 <_strtoull_l.isra.0+0xe8>
 80107ec:	3c37      	subs	r4, #55	; 0x37
 80107ee:	e7db      	b.n	80107a8 <_strtoull_l.isra.0+0xa0>
 80107f0:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80107f4:	f1be 0f19 	cmp.w	lr, #25
 80107f8:	d804      	bhi.n	8010804 <_strtoull_l.isra.0+0xfc>
 80107fa:	3c57      	subs	r4, #87	; 0x57
 80107fc:	e7d4      	b.n	80107a8 <_strtoull_l.isra.0+0xa0>
 80107fe:	f04f 33ff 	mov.w	r3, #4294967295
 8010802:	e7e9      	b.n	80107d8 <_strtoull_l.isra.0+0xd0>
 8010804:	2b00      	cmp	r3, #0
 8010806:	da0c      	bge.n	8010822 <_strtoull_l.isra.0+0x11a>
 8010808:	9a03      	ldr	r2, [sp, #12]
 801080a:	2322      	movs	r3, #34	; 0x22
 801080c:	6013      	str	r3, [r2, #0]
 801080e:	f04f 30ff 	mov.w	r0, #4294967295
 8010812:	f04f 31ff 	mov.w	r1, #4294967295
 8010816:	f1b9 0f00 	cmp.w	r9, #0
 801081a:	d10a      	bne.n	8010832 <_strtoull_l.isra.0+0x12a>
 801081c:	b005      	add	sp, #20
 801081e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010822:	b116      	cbz	r6, 801082a <_strtoull_l.isra.0+0x122>
 8010824:	4240      	negs	r0, r0
 8010826:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801082a:	f1b9 0f00 	cmp.w	r9, #0
 801082e:	d0f5      	beq.n	801081c <_strtoull_l.isra.0+0x114>
 8010830:	b11b      	cbz	r3, 801083a <_strtoull_l.isra.0+0x132>
 8010832:	3d01      	subs	r5, #1
 8010834:	f8c9 5000 	str.w	r5, [r9]
 8010838:	e7f0      	b.n	801081c <_strtoull_l.isra.0+0x114>
 801083a:	4645      	mov	r5, r8
 801083c:	e7fa      	b.n	8010834 <_strtoull_l.isra.0+0x12c>
 801083e:	2430      	movs	r4, #48	; 0x30
 8010840:	2f00      	cmp	r7, #0
 8010842:	d192      	bne.n	801076a <_strtoull_l.isra.0+0x62>
 8010844:	2708      	movs	r7, #8
 8010846:	e790      	b.n	801076a <_strtoull_l.isra.0+0x62>

08010848 <_strtoull_r>:
 8010848:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801084a:	4c06      	ldr	r4, [pc, #24]	; (8010864 <_strtoull_r+0x1c>)
 801084c:	4d06      	ldr	r5, [pc, #24]	; (8010868 <_strtoull_r+0x20>)
 801084e:	6824      	ldr	r4, [r4, #0]
 8010850:	6a24      	ldr	r4, [r4, #32]
 8010852:	2c00      	cmp	r4, #0
 8010854:	bf08      	it	eq
 8010856:	462c      	moveq	r4, r5
 8010858:	9400      	str	r4, [sp, #0]
 801085a:	f7ff ff55 	bl	8010708 <_strtoull_l.isra.0>
 801085e:	b003      	add	sp, #12
 8010860:	bd30      	pop	{r4, r5, pc}
 8010862:	bf00      	nop
 8010864:	20000010 	.word	0x20000010
 8010868:	2000055c 	.word	0x2000055c

0801086c <__swbuf_r>:
 801086c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801086e:	460e      	mov	r6, r1
 8010870:	4614      	mov	r4, r2
 8010872:	4605      	mov	r5, r0
 8010874:	b118      	cbz	r0, 801087e <__swbuf_r+0x12>
 8010876:	6983      	ldr	r3, [r0, #24]
 8010878:	b90b      	cbnz	r3, 801087e <__swbuf_r+0x12>
 801087a:	f7fd f905 	bl	800da88 <__sinit>
 801087e:	4b27      	ldr	r3, [pc, #156]	; (801091c <__swbuf_r+0xb0>)
 8010880:	429c      	cmp	r4, r3
 8010882:	d12f      	bne.n	80108e4 <__swbuf_r+0x78>
 8010884:	686c      	ldr	r4, [r5, #4]
 8010886:	69a3      	ldr	r3, [r4, #24]
 8010888:	60a3      	str	r3, [r4, #8]
 801088a:	89a3      	ldrh	r3, [r4, #12]
 801088c:	0719      	lsls	r1, r3, #28
 801088e:	d533      	bpl.n	80108f8 <__swbuf_r+0x8c>
 8010890:	6923      	ldr	r3, [r4, #16]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d030      	beq.n	80108f8 <__swbuf_r+0x8c>
 8010896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801089a:	b2f6      	uxtb	r6, r6
 801089c:	049a      	lsls	r2, r3, #18
 801089e:	4637      	mov	r7, r6
 80108a0:	d534      	bpl.n	801090c <__swbuf_r+0xa0>
 80108a2:	6923      	ldr	r3, [r4, #16]
 80108a4:	6820      	ldr	r0, [r4, #0]
 80108a6:	1ac0      	subs	r0, r0, r3
 80108a8:	6963      	ldr	r3, [r4, #20]
 80108aa:	4298      	cmp	r0, r3
 80108ac:	db04      	blt.n	80108b8 <__swbuf_r+0x4c>
 80108ae:	4621      	mov	r1, r4
 80108b0:	4628      	mov	r0, r5
 80108b2:	f7fd f855 	bl	800d960 <_fflush_r>
 80108b6:	bb28      	cbnz	r0, 8010904 <__swbuf_r+0x98>
 80108b8:	68a3      	ldr	r3, [r4, #8]
 80108ba:	3b01      	subs	r3, #1
 80108bc:	60a3      	str	r3, [r4, #8]
 80108be:	6823      	ldr	r3, [r4, #0]
 80108c0:	1c5a      	adds	r2, r3, #1
 80108c2:	6022      	str	r2, [r4, #0]
 80108c4:	701e      	strb	r6, [r3, #0]
 80108c6:	6963      	ldr	r3, [r4, #20]
 80108c8:	3001      	adds	r0, #1
 80108ca:	4298      	cmp	r0, r3
 80108cc:	d004      	beq.n	80108d8 <__swbuf_r+0x6c>
 80108ce:	89a3      	ldrh	r3, [r4, #12]
 80108d0:	07db      	lsls	r3, r3, #31
 80108d2:	d519      	bpl.n	8010908 <__swbuf_r+0x9c>
 80108d4:	2e0a      	cmp	r6, #10
 80108d6:	d117      	bne.n	8010908 <__swbuf_r+0x9c>
 80108d8:	4621      	mov	r1, r4
 80108da:	4628      	mov	r0, r5
 80108dc:	f7fd f840 	bl	800d960 <_fflush_r>
 80108e0:	b190      	cbz	r0, 8010908 <__swbuf_r+0x9c>
 80108e2:	e00f      	b.n	8010904 <__swbuf_r+0x98>
 80108e4:	4b0e      	ldr	r3, [pc, #56]	; (8010920 <__swbuf_r+0xb4>)
 80108e6:	429c      	cmp	r4, r3
 80108e8:	d101      	bne.n	80108ee <__swbuf_r+0x82>
 80108ea:	68ac      	ldr	r4, [r5, #8]
 80108ec:	e7cb      	b.n	8010886 <__swbuf_r+0x1a>
 80108ee:	4b0d      	ldr	r3, [pc, #52]	; (8010924 <__swbuf_r+0xb8>)
 80108f0:	429c      	cmp	r4, r3
 80108f2:	bf08      	it	eq
 80108f4:	68ec      	ldreq	r4, [r5, #12]
 80108f6:	e7c6      	b.n	8010886 <__swbuf_r+0x1a>
 80108f8:	4621      	mov	r1, r4
 80108fa:	4628      	mov	r0, r5
 80108fc:	f7fc f8bc 	bl	800ca78 <__swsetup_r>
 8010900:	2800      	cmp	r0, #0
 8010902:	d0c8      	beq.n	8010896 <__swbuf_r+0x2a>
 8010904:	f04f 37ff 	mov.w	r7, #4294967295
 8010908:	4638      	mov	r0, r7
 801090a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801090c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010910:	81a3      	strh	r3, [r4, #12]
 8010912:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010914:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010918:	6663      	str	r3, [r4, #100]	; 0x64
 801091a:	e7c2      	b.n	80108a2 <__swbuf_r+0x36>
 801091c:	08011058 	.word	0x08011058
 8010920:	08011078 	.word	0x08011078
 8010924:	08011038 	.word	0x08011038

08010928 <_wcrtomb_r>:
 8010928:	b5f0      	push	{r4, r5, r6, r7, lr}
 801092a:	4605      	mov	r5, r0
 801092c:	b085      	sub	sp, #20
 801092e:	461e      	mov	r6, r3
 8010930:	460f      	mov	r7, r1
 8010932:	4c0f      	ldr	r4, [pc, #60]	; (8010970 <_wcrtomb_r+0x48>)
 8010934:	b991      	cbnz	r1, 801095c <_wcrtomb_r+0x34>
 8010936:	6822      	ldr	r2, [r4, #0]
 8010938:	490e      	ldr	r1, [pc, #56]	; (8010974 <_wcrtomb_r+0x4c>)
 801093a:	6a12      	ldr	r2, [r2, #32]
 801093c:	2a00      	cmp	r2, #0
 801093e:	bf08      	it	eq
 8010940:	460a      	moveq	r2, r1
 8010942:	a901      	add	r1, sp, #4
 8010944:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8010948:	463a      	mov	r2, r7
 801094a:	47a0      	blx	r4
 801094c:	1c43      	adds	r3, r0, #1
 801094e:	bf01      	itttt	eq
 8010950:	2300      	moveq	r3, #0
 8010952:	6033      	streq	r3, [r6, #0]
 8010954:	238a      	moveq	r3, #138	; 0x8a
 8010956:	602b      	streq	r3, [r5, #0]
 8010958:	b005      	add	sp, #20
 801095a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801095c:	6824      	ldr	r4, [r4, #0]
 801095e:	4f05      	ldr	r7, [pc, #20]	; (8010974 <_wcrtomb_r+0x4c>)
 8010960:	6a24      	ldr	r4, [r4, #32]
 8010962:	2c00      	cmp	r4, #0
 8010964:	bf08      	it	eq
 8010966:	463c      	moveq	r4, r7
 8010968:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 801096c:	e7ed      	b.n	801094a <_wcrtomb_r+0x22>
 801096e:	bf00      	nop
 8010970:	20000010 	.word	0x20000010
 8010974:	2000055c 	.word	0x2000055c

08010978 <_gettimeofday>:
 8010978:	4b02      	ldr	r3, [pc, #8]	; (8010984 <_gettimeofday+0xc>)
 801097a:	2258      	movs	r2, #88	; 0x58
 801097c:	601a      	str	r2, [r3, #0]
 801097e:	f04f 30ff 	mov.w	r0, #4294967295
 8010982:	4770      	bx	lr
 8010984:	200021fc 	.word	0x200021fc

08010988 <_init>:
 8010988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801098a:	bf00      	nop
 801098c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801098e:	bc08      	pop	{r3}
 8010990:	469e      	mov	lr, r3
 8010992:	4770      	bx	lr

08010994 <_fini>:
 8010994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010996:	bf00      	nop
 8010998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801099a:	bc08      	pop	{r3}
 801099c:	469e      	mov	lr, r3
 801099e:	4770      	bx	lr
