
Synthesis_GPSMEMIR_L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014c60  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aa8  08014df0  08014df0  00024df0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015898  08015898  00025898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080158a0  080158a0  000258a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080158a4  080158a4  000258a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000006cc  20000000  080158a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram2         00000000  10000000  10000000  000306cc  2**0
                  CONTENTS
  8 .bss          00003120  200006cc  200006cc  000306cc  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  200037ec  200037ec  000306cc  2**0
                  ALLOC
 10 .ARM.attributes 0000002a  00000000  00000000  000306cc  2**0
                  CONTENTS, READONLY
 11 .debug_info   00020662  00000000  00000000  000306f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000354a  00000000  00000000  00050d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000017e8  00000000  00000000  000542a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001678  00000000  00000000  00055a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000afcf  00000000  00000000  00057108  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00007684  00000000  00000000  000620d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0006975b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000811c  00000000  00000000  000697d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         00000024  00000000  00000000  000718f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      0000004e  00000000  00000000  00071918  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200006cc 	.word	0x200006cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014dd8 	.word	0x08014dd8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200006d0 	.word	0x200006d0
 80001cc:	08014dd8 	.word	0x08014dd8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f092 0f00 	teq	r2, #0
 800058a:	bf14      	ite	ne
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a0:	e720      	b.n	80003e4 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_ul2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	e00a      	b.n	80005ca <__aeabi_l2d+0x16>

080005b4 <__aeabi_l2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c2:	d502      	bpl.n	80005ca <__aeabi_l2d+0x16>
 80005c4:	4240      	negs	r0, r0
 80005c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d6:	f43f aedc 	beq.w	8000392 <__adddf3+0xe6>
 80005da:	f04f 0203 	mov.w	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f2:	f1c2 0320 	rsb	r3, r2, #32
 80005f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000602:	ea40 000e 	orr.w	r0, r0, lr
 8000606:	fa21 f102 	lsr.w	r1, r1, r2
 800060a:	4414      	add	r4, r2
 800060c:	e6c1      	b.n	8000392 <__adddf3+0xe6>
 800060e:	bf00      	nop

08000610 <__aeabi_dmul>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000616:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061e:	bf1d      	ittte	ne
 8000620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000624:	ea94 0f0c 	teqne	r4, ip
 8000628:	ea95 0f0c 	teqne	r5, ip
 800062c:	f000 f8de 	bleq	80007ec <__aeabi_dmul+0x1dc>
 8000630:	442c      	add	r4, r5
 8000632:	ea81 0603 	eor.w	r6, r1, r3
 8000636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000642:	bf18      	it	ne
 8000644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000650:	d038      	beq.n	80006c4 <__aeabi_dmul+0xb4>
 8000652:	fba0 ce02 	umull	ip, lr, r0, r2
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000662:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000666:	f04f 0600 	mov.w	r6, #0
 800066a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066e:	f09c 0f00 	teq	ip, #0
 8000672:	bf18      	it	ne
 8000674:	f04e 0e01 	orrne.w	lr, lr, #1
 8000678:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800067c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000680:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000684:	d204      	bcs.n	8000690 <__aeabi_dmul+0x80>
 8000686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068a:	416d      	adcs	r5, r5
 800068c:	eb46 0606 	adc.w	r6, r6, r6
 8000690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800069c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a8:	bf88      	it	hi
 80006aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ae:	d81e      	bhi.n	80006ee <__aeabi_dmul+0xde>
 80006b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b4:	bf08      	it	eq
 80006b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ba:	f150 0000 	adcs.w	r0, r0, #0
 80006be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c8:	ea46 0101 	orr.w	r1, r6, r1
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d8:	bfc2      	ittt	gt
 80006da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	popgt	{r4, r5, r6, pc}
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e8:	f04f 0e00 	mov.w	lr, #0
 80006ec:	3c01      	subs	r4, #1
 80006ee:	f300 80ab 	bgt.w	8000848 <__aeabi_dmul+0x238>
 80006f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f6:	bfde      	ittt	le
 80006f8:	2000      	movle	r0, #0
 80006fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd70      	pople	{r4, r5, r6, pc}
 8000700:	f1c4 0400 	rsb	r4, r4, #0
 8000704:	3c20      	subs	r4, #32
 8000706:	da35      	bge.n	8000774 <__aeabi_dmul+0x164>
 8000708:	340c      	adds	r4, #12
 800070a:	dc1b      	bgt.n	8000744 <__aeabi_dmul+0x134>
 800070c:	f104 0414 	add.w	r4, r4, #20
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f305 	lsl.w	r3, r0, r5
 8000718:	fa20 f004 	lsr.w	r0, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	fa21 f604 	lsr.w	r6, r1, r4
 8000734:	eb42 0106 	adc.w	r1, r2, r6
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 040c 	rsb	r4, r4, #12
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f304 	lsl.w	r3, r0, r4
 8000750:	fa20 f005 	lsr.w	r0, r0, r5
 8000754:	fa01 f204 	lsl.w	r2, r1, r4
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f205 	lsl.w	r2, r0, r5
 800077c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000780:	fa20 f304 	lsr.w	r3, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea43 0302 	orr.w	r3, r3, r2
 800078c:	fa21 f004 	lsr.w	r0, r1, r4
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	fa21 f204 	lsr.w	r2, r1, r4
 8000798:	ea20 0002 	bic.w	r0, r0, r2
 800079c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f094 0f00 	teq	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__aeabi_dmul+0x1c2>
 80007b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b6:	0040      	lsls	r0, r0, #1
 80007b8:	eb41 0101 	adc.w	r1, r1, r1
 80007bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3c01      	subeq	r4, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1a6>
 80007c6:	ea41 0106 	orr.w	r1, r1, r6
 80007ca:	f095 0f00 	teq	r5, #0
 80007ce:	bf18      	it	ne
 80007d0:	4770      	bxne	lr
 80007d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	eb43 0303 	adc.w	r3, r3, r3
 80007dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3d01      	subeq	r5, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1c6>
 80007e6:	ea43 0306 	orr.w	r3, r3, r6
 80007ea:	4770      	bx	lr
 80007ec:	ea94 0f0c 	teq	r4, ip
 80007f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f4:	bf18      	it	ne
 80007f6:	ea95 0f0c 	teqne	r5, ip
 80007fa:	d00c      	beq.n	8000816 <__aeabi_dmul+0x206>
 80007fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000806:	d1d1      	bne.n	80007ac <__aeabi_dmul+0x19c>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081a:	bf06      	itte	eq
 800081c:	4610      	moveq	r0, r2
 800081e:	4619      	moveq	r1, r3
 8000820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000824:	d019      	beq.n	800085a <__aeabi_dmul+0x24a>
 8000826:	ea94 0f0c 	teq	r4, ip
 800082a:	d102      	bne.n	8000832 <__aeabi_dmul+0x222>
 800082c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000830:	d113      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000832:	ea95 0f0c 	teq	r5, ip
 8000836:	d105      	bne.n	8000844 <__aeabi_dmul+0x234>
 8000838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800083c:	bf1c      	itt	ne
 800083e:	4610      	movne	r0, r2
 8000840:	4619      	movne	r1, r3
 8000842:	d10a      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000850:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <__aeabi_ddiv>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000872:	bf1d      	ittte	ne
 8000874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000878:	ea94 0f0c 	teqne	r4, ip
 800087c:	ea95 0f0c 	teqne	r5, ip
 8000880:	f000 f8a7 	bleq	80009d2 <__aeabi_ddiv+0x16e>
 8000884:	eba4 0405 	sub.w	r4, r4, r5
 8000888:	ea81 0e03 	eor.w	lr, r1, r3
 800088c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f000 8088 	beq.w	80009a8 <__aeabi_ddiv+0x144>
 8000898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800089c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008bc:	429d      	cmp	r5, r3
 80008be:	bf08      	it	eq
 80008c0:	4296      	cmpeq	r6, r2
 80008c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ca:	d202      	bcs.n	80008d2 <__aeabi_ddiv+0x6e>
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	eb65 0503 	sbc.w	r5, r5, r3
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000940:	ea55 0e06 	orrs.w	lr, r5, r6
 8000944:	d018      	beq.n	8000978 <__aeabi_ddiv+0x114>
 8000946:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000962:	d1c0      	bne.n	80008e6 <__aeabi_ddiv+0x82>
 8000964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000968:	d10b      	bne.n	8000982 <__aeabi_ddiv+0x11e>
 800096a:	ea41 0100 	orr.w	r1, r1, r0
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000976:	e7b6      	b.n	80008e6 <__aeabi_ddiv+0x82>
 8000978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800097c:	bf04      	itt	eq
 800097e:	4301      	orreq	r1, r0
 8000980:	2000      	moveq	r0, #0
 8000982:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000986:	bf88      	it	hi
 8000988:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800098c:	f63f aeaf 	bhi.w	80006ee <__aeabi_dmul+0xde>
 8000990:	ebb5 0c03 	subs.w	ip, r5, r3
 8000994:	bf04      	itt	eq
 8000996:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099e:	f150 0000 	adcs.w	r0, r0, #0
 80009a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b4:	bfc2      	ittt	gt
 80009b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009be:	bd70      	popgt	{r4, r5, r6, pc}
 80009c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c4:	f04f 0e00 	mov.w	lr, #0
 80009c8:	3c01      	subs	r4, #1
 80009ca:	e690      	b.n	80006ee <__aeabi_dmul+0xde>
 80009cc:	ea45 0e06 	orr.w	lr, r5, r6
 80009d0:	e68d      	b.n	80006ee <__aeabi_dmul+0xde>
 80009d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d6:	ea94 0f0c 	teq	r4, ip
 80009da:	bf08      	it	eq
 80009dc:	ea95 0f0c 	teqeq	r5, ip
 80009e0:	f43f af3b 	beq.w	800085a <__aeabi_dmul+0x24a>
 80009e4:	ea94 0f0c 	teq	r4, ip
 80009e8:	d10a      	bne.n	8000a00 <__aeabi_ddiv+0x19c>
 80009ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ee:	f47f af34 	bne.w	800085a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	f47f af25 	bne.w	8000844 <__aeabi_dmul+0x234>
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	e72c      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a00:	ea95 0f0c 	teq	r5, ip
 8000a04:	d106      	bne.n	8000a14 <__aeabi_ddiv+0x1b0>
 8000a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0a:	f43f aefd 	beq.w	8000808 <__aeabi_dmul+0x1f8>
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	e722      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	f47f aec5 	bne.w	80007ac <__aeabi_dmul+0x19c>
 8000a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a26:	f47f af0d 	bne.w	8000844 <__aeabi_dmul+0x234>
 8000a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2e:	f47f aeeb 	bne.w	8000808 <__aeabi_dmul+0x1f8>
 8000a32:	e712      	b.n	800085a <__aeabi_dmul+0x24a>

08000a34 <__gedf2>:
 8000a34:	f04f 3cff 	mov.w	ip, #4294967295
 8000a38:	e006      	b.n	8000a48 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__ledf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	e002      	b.n	8000a48 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__cmpdf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5e:	d01b      	beq.n	8000a98 <__cmpdf2+0x54>
 8000a60:	b001      	add	sp, #4
 8000a62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a66:	bf0c      	ite	eq
 8000a68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a6c:	ea91 0f03 	teqne	r1, r3
 8000a70:	bf02      	ittt	eq
 8000a72:	ea90 0f02 	teqeq	r0, r2
 8000a76:	2000      	moveq	r0, #0
 8000a78:	4770      	bxeq	lr
 8000a7a:	f110 0f00 	cmn.w	r0, #0
 8000a7e:	ea91 0f03 	teq	r1, r3
 8000a82:	bf58      	it	pl
 8000a84:	4299      	cmppl	r1, r3
 8000a86:	bf08      	it	eq
 8000a88:	4290      	cmpeq	r0, r2
 8000a8a:	bf2c      	ite	cs
 8000a8c:	17d8      	asrcs	r0, r3, #31
 8000a8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a92:	f040 0001 	orr.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__cmpdf2+0x64>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d107      	bne.n	8000ab8 <__cmpdf2+0x74>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d1d6      	bne.n	8000a60 <__cmpdf2+0x1c>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d0d3      	beq.n	8000a60 <__cmpdf2+0x1c>
 8000ab8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdrcmple>:
 8000ac0:	4684      	mov	ip, r0
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4662      	mov	r2, ip
 8000ac6:	468c      	mov	ip, r1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4663      	mov	r3, ip
 8000acc:	e000      	b.n	8000ad0 <__aeabi_cdcmpeq>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdcmpeq>:
 8000ad0:	b501      	push	{r0, lr}
 8000ad2:	f7ff ffb7 	bl	8000a44 <__cmpdf2>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	bf48      	it	mi
 8000ada:	f110 0f00 	cmnmi.w	r0, #0
 8000ade:	bd01      	pop	{r0, pc}

08000ae0 <__aeabi_dcmpeq>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff fff4 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000ae8:	bf0c      	ite	eq
 8000aea:	2001      	moveq	r0, #1
 8000aec:	2000      	movne	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmplt>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffea 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000afc:	bf34      	ite	cc
 8000afe:	2001      	movcc	r0, #1
 8000b00:	2000      	movcs	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmple>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffe0 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000b10:	bf94      	ite	ls
 8000b12:	2001      	movls	r0, #1
 8000b14:	2000      	movhi	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpge>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffce 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b24:	bf94      	ite	ls
 8000b26:	2001      	movls	r0, #1
 8000b28:	2000      	movhi	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmpgt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffc4 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpun>:
 8000b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x10>
 8000b4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b52:	d10a      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x20>
 8000b5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0001 	mov.w	r0, #1
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2iz>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b78:	d215      	bcs.n	8000ba6 <__aeabi_d2iz+0x36>
 8000b7a:	d511      	bpl.n	8000ba0 <__aeabi_d2iz+0x30>
 8000b7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b84:	d912      	bls.n	8000bac <__aeabi_d2iz+0x3c>
 8000b86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b96:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d105      	bne.n	8000bb8 <__aeabi_d2iz+0x48>
 8000bac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	bf08      	it	eq
 8000bb2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_d2uiz>:
 8000bc0:	004a      	lsls	r2, r1, #1
 8000bc2:	d211      	bcs.n	8000be8 <__aeabi_d2uiz+0x28>
 8000bc4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc8:	d211      	bcs.n	8000bee <__aeabi_d2uiz+0x2e>
 8000bca:	d50d      	bpl.n	8000be8 <__aeabi_d2uiz+0x28>
 8000bcc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd4:	d40e      	bmi.n	8000bf4 <__aeabi_d2uiz+0x34>
 8000bd6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bde:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000be2:	fa23 f002 	lsr.w	r0, r3, r2
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d102      	bne.n	8000bfa <__aeabi_d2uiz+0x3a>
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf8:	4770      	bx	lr
 8000bfa:	f04f 0000 	mov.w	r0, #0
 8000bfe:	4770      	bx	lr

08000c00 <__aeabi_d2f>:
 8000c00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c08:	bf24      	itt	cs
 8000c0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c12:	d90d      	bls.n	8000c30 <__aeabi_d2f+0x30>
 8000c14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c28:	bf08      	it	eq
 8000c2a:	f020 0001 	biceq.w	r0, r0, #1
 8000c2e:	4770      	bx	lr
 8000c30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c34:	d121      	bne.n	8000c7a <__aeabi_d2f+0x7a>
 8000c36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c3a:	bfbc      	itt	lt
 8000c3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	4770      	bxlt	lr
 8000c42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c4a:	f1c2 0218 	rsb	r2, r2, #24
 8000c4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c56:	fa20 f002 	lsr.w	r0, r0, r2
 8000c5a:	bf18      	it	ne
 8000c5c:	f040 0001 	orrne.w	r0, r0, #1
 8000c60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c6c:	ea40 000c 	orr.w	r0, r0, ip
 8000c70:	fa23 f302 	lsr.w	r3, r3, r2
 8000c74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c78:	e7cc      	b.n	8000c14 <__aeabi_d2f+0x14>
 8000c7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7e:	d107      	bne.n	8000c90 <__aeabi_d2f+0x90>
 8000c80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c84:	bf1e      	ittt	ne
 8000c86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8e:	4770      	bxne	lr
 8000c90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_uldivmod>:
 8000ca0:	b953      	cbnz	r3, 8000cb8 <__aeabi_uldivmod+0x18>
 8000ca2:	b94a      	cbnz	r2, 8000cb8 <__aeabi_uldivmod+0x18>
 8000ca4:	2900      	cmp	r1, #0
 8000ca6:	bf08      	it	eq
 8000ca8:	2800      	cmpeq	r0, #0
 8000caa:	bf1c      	itt	ne
 8000cac:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb4:	f000 b97a 	b.w	8000fac <__aeabi_idiv0>
 8000cb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc0:	f000 f806 	bl	8000cd0 <__udivmoddi4>
 8000cc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ccc:	b004      	add	sp, #16
 8000cce:	4770      	bx	lr

08000cd0 <__udivmoddi4>:
 8000cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd4:	468c      	mov	ip, r1
 8000cd6:	460d      	mov	r5, r1
 8000cd8:	4604      	mov	r4, r0
 8000cda:	9e08      	ldr	r6, [sp, #32]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d151      	bne.n	8000d84 <__udivmoddi4+0xb4>
 8000ce0:	428a      	cmp	r2, r1
 8000ce2:	4617      	mov	r7, r2
 8000ce4:	d96d      	bls.n	8000dc2 <__udivmoddi4+0xf2>
 8000ce6:	fab2 fe82 	clz	lr, r2
 8000cea:	f1be 0f00 	cmp.w	lr, #0
 8000cee:	d00b      	beq.n	8000d08 <__udivmoddi4+0x38>
 8000cf0:	f1ce 0c20 	rsb	ip, lr, #32
 8000cf4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000cf8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cfc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000d00:	ea4c 0c05 	orr.w	ip, ip, r5
 8000d04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d08:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000d0c:	0c25      	lsrs	r5, r4, #16
 8000d0e:	fbbc f8fa 	udiv	r8, ip, sl
 8000d12:	fa1f f987 	uxth.w	r9, r7
 8000d16:	fb0a cc18 	mls	ip, sl, r8, ip
 8000d1a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d1e:	fb08 f309 	mul.w	r3, r8, r9
 8000d22:	42ab      	cmp	r3, r5
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x6c>
 8000d26:	19ed      	adds	r5, r5, r7
 8000d28:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d2c:	f080 8123 	bcs.w	8000f76 <__udivmoddi4+0x2a6>
 8000d30:	42ab      	cmp	r3, r5
 8000d32:	f240 8120 	bls.w	8000f76 <__udivmoddi4+0x2a6>
 8000d36:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3a:	443d      	add	r5, r7
 8000d3c:	1aed      	subs	r5, r5, r3
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d44:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d4c:	fb00 f909 	mul.w	r9, r0, r9
 8000d50:	45a1      	cmp	r9, r4
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x98>
 8000d54:	19e4      	adds	r4, r4, r7
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	f080 810a 	bcs.w	8000f72 <__udivmoddi4+0x2a2>
 8000d5e:	45a1      	cmp	r9, r4
 8000d60:	f240 8107 	bls.w	8000f72 <__udivmoddi4+0x2a2>
 8000d64:	3802      	subs	r0, #2
 8000d66:	443c      	add	r4, r7
 8000d68:	eba4 0409 	sub.w	r4, r4, r9
 8000d6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d70:	2100      	movs	r1, #0
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d061      	beq.n	8000e3a <__udivmoddi4+0x16a>
 8000d76:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	6034      	str	r4, [r6, #0]
 8000d7e:	6073      	str	r3, [r6, #4]
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	428b      	cmp	r3, r1
 8000d86:	d907      	bls.n	8000d98 <__udivmoddi4+0xc8>
 8000d88:	2e00      	cmp	r6, #0
 8000d8a:	d054      	beq.n	8000e36 <__udivmoddi4+0x166>
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d92:	4608      	mov	r0, r1
 8000d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d98:	fab3 f183 	clz	r1, r3
 8000d9c:	2900      	cmp	r1, #0
 8000d9e:	f040 808e 	bne.w	8000ebe <__udivmoddi4+0x1ee>
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	d302      	bcc.n	8000dac <__udivmoddi4+0xdc>
 8000da6:	4282      	cmp	r2, r0
 8000da8:	f200 80fa 	bhi.w	8000fa0 <__udivmoddi4+0x2d0>
 8000dac:	1a84      	subs	r4, r0, r2
 8000dae:	eb65 0503 	sbc.w	r5, r5, r3
 8000db2:	2001      	movs	r0, #1
 8000db4:	46ac      	mov	ip, r5
 8000db6:	2e00      	cmp	r6, #0
 8000db8:	d03f      	beq.n	8000e3a <__udivmoddi4+0x16a>
 8000dba:	e886 1010 	stmia.w	r6, {r4, ip}
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	b912      	cbnz	r2, 8000dca <__udivmoddi4+0xfa>
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000dca:	fab7 fe87 	clz	lr, r7
 8000dce:	f1be 0f00 	cmp.w	lr, #0
 8000dd2:	d134      	bne.n	8000e3e <__udivmoddi4+0x16e>
 8000dd4:	1beb      	subs	r3, r5, r7
 8000dd6:	0c3a      	lsrs	r2, r7, #16
 8000dd8:	fa1f fc87 	uxth.w	ip, r7
 8000ddc:	2101      	movs	r1, #1
 8000dde:	fbb3 f8f2 	udiv	r8, r3, r2
 8000de2:	0c25      	lsrs	r5, r4, #16
 8000de4:	fb02 3318 	mls	r3, r2, r8, r3
 8000de8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dec:	fb0c f308 	mul.w	r3, ip, r8
 8000df0:	42ab      	cmp	r3, r5
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x134>
 8000df4:	19ed      	adds	r5, r5, r7
 8000df6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x132>
 8000dfc:	42ab      	cmp	r3, r5
 8000dfe:	f200 80d1 	bhi.w	8000fa4 <__udivmoddi4+0x2d4>
 8000e02:	4680      	mov	r8, r0
 8000e04:	1aed      	subs	r5, r5, r3
 8000e06:	b2a3      	uxth	r3, r4
 8000e08:	fbb5 f0f2 	udiv	r0, r5, r2
 8000e0c:	fb02 5510 	mls	r5, r2, r0, r5
 8000e10:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000e14:	fb0c fc00 	mul.w	ip, ip, r0
 8000e18:	45a4      	cmp	ip, r4
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x15c>
 8000e1c:	19e4      	adds	r4, r4, r7
 8000e1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x15a>
 8000e24:	45a4      	cmp	ip, r4
 8000e26:	f200 80b8 	bhi.w	8000f9a <__udivmoddi4+0x2ca>
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	eba4 040c 	sub.w	r4, r4, ip
 8000e30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e34:	e79d      	b.n	8000d72 <__udivmoddi4+0xa2>
 8000e36:	4631      	mov	r1, r6
 8000e38:	4630      	mov	r0, r6
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	f1ce 0420 	rsb	r4, lr, #32
 8000e42:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e4a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e4e:	0c3a      	lsrs	r2, r7, #16
 8000e50:	fa25 f404 	lsr.w	r4, r5, r4
 8000e54:	ea48 0803 	orr.w	r8, r8, r3
 8000e58:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e5c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e60:	fb02 4411 	mls	r4, r2, r1, r4
 8000e64:	fa1f fc87 	uxth.w	ip, r7
 8000e68:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e6c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e70:	42ab      	cmp	r3, r5
 8000e72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e76:	d909      	bls.n	8000e8c <__udivmoddi4+0x1bc>
 8000e78:	19ed      	adds	r5, r5, r7
 8000e7a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e7e:	f080 808a 	bcs.w	8000f96 <__udivmoddi4+0x2c6>
 8000e82:	42ab      	cmp	r3, r5
 8000e84:	f240 8087 	bls.w	8000f96 <__udivmoddi4+0x2c6>
 8000e88:	3902      	subs	r1, #2
 8000e8a:	443d      	add	r5, r7
 8000e8c:	1aeb      	subs	r3, r5, r3
 8000e8e:	fa1f f588 	uxth.w	r5, r8
 8000e92:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e96:	fb02 3310 	mls	r3, r2, r0, r3
 8000e9a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e9e:	fb00 f30c 	mul.w	r3, r0, ip
 8000ea2:	42ab      	cmp	r3, r5
 8000ea4:	d907      	bls.n	8000eb6 <__udivmoddi4+0x1e6>
 8000ea6:	19ed      	adds	r5, r5, r7
 8000ea8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eac:	d26f      	bcs.n	8000f8e <__udivmoddi4+0x2be>
 8000eae:	42ab      	cmp	r3, r5
 8000eb0:	d96d      	bls.n	8000f8e <__udivmoddi4+0x2be>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	443d      	add	r5, r7
 8000eb6:	1aeb      	subs	r3, r5, r3
 8000eb8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ebc:	e78f      	b.n	8000dde <__udivmoddi4+0x10e>
 8000ebe:	f1c1 0720 	rsb	r7, r1, #32
 8000ec2:	fa22 f807 	lsr.w	r8, r2, r7
 8000ec6:	408b      	lsls	r3, r1
 8000ec8:	fa05 f401 	lsl.w	r4, r5, r1
 8000ecc:	ea48 0303 	orr.w	r3, r8, r3
 8000ed0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000ed4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	ea4e 0e04 	orr.w	lr, lr, r4
 8000ede:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ee2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000ee6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000eea:	fa1f f883 	uxth.w	r8, r3
 8000eee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ef2:	fb09 f408 	mul.w	r4, r9, r8
 8000ef6:	42ac      	cmp	r4, r5
 8000ef8:	fa02 f201 	lsl.w	r2, r2, r1
 8000efc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x244>
 8000f02:	18ed      	adds	r5, r5, r3
 8000f04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f08:	d243      	bcs.n	8000f92 <__udivmoddi4+0x2c2>
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	d941      	bls.n	8000f92 <__udivmoddi4+0x2c2>
 8000f0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f12:	441d      	add	r5, r3
 8000f14:	1b2d      	subs	r5, r5, r4
 8000f16:	fa1f fe8e 	uxth.w	lr, lr
 8000f1a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000f1e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f22:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f26:	fb00 f808 	mul.w	r8, r0, r8
 8000f2a:	45a0      	cmp	r8, r4
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x26e>
 8000f2e:	18e4      	adds	r4, r4, r3
 8000f30:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f34:	d229      	bcs.n	8000f8a <__udivmoddi4+0x2ba>
 8000f36:	45a0      	cmp	r8, r4
 8000f38:	d927      	bls.n	8000f8a <__udivmoddi4+0x2ba>
 8000f3a:	3802      	subs	r0, #2
 8000f3c:	441c      	add	r4, r3
 8000f3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f42:	eba4 0408 	sub.w	r4, r4, r8
 8000f46:	fba0 8902 	umull	r8, r9, r0, r2
 8000f4a:	454c      	cmp	r4, r9
 8000f4c:	46c6      	mov	lr, r8
 8000f4e:	464d      	mov	r5, r9
 8000f50:	d315      	bcc.n	8000f7e <__udivmoddi4+0x2ae>
 8000f52:	d012      	beq.n	8000f7a <__udivmoddi4+0x2aa>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x29c>
 8000f56:	ebba 030e 	subs.w	r3, sl, lr
 8000f5a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40cb      	lsrs	r3, r1
 8000f64:	431f      	orrs	r7, r3
 8000f66:	40cc      	lsrs	r4, r1
 8000f68:	6037      	str	r7, [r6, #0]
 8000f6a:	6074      	str	r4, [r6, #4]
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f72:	4618      	mov	r0, r3
 8000f74:	e6f8      	b.n	8000d68 <__udivmoddi4+0x98>
 8000f76:	4690      	mov	r8, r2
 8000f78:	e6e0      	b.n	8000d3c <__udivmoddi4+0x6c>
 8000f7a:	45c2      	cmp	sl, r8
 8000f7c:	d2ea      	bcs.n	8000f54 <__udivmoddi4+0x284>
 8000f7e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f82:	eb69 0503 	sbc.w	r5, r9, r3
 8000f86:	3801      	subs	r0, #1
 8000f88:	e7e4      	b.n	8000f54 <__udivmoddi4+0x284>
 8000f8a:	4628      	mov	r0, r5
 8000f8c:	e7d7      	b.n	8000f3e <__udivmoddi4+0x26e>
 8000f8e:	4640      	mov	r0, r8
 8000f90:	e791      	b.n	8000eb6 <__udivmoddi4+0x1e6>
 8000f92:	4681      	mov	r9, r0
 8000f94:	e7be      	b.n	8000f14 <__udivmoddi4+0x244>
 8000f96:	4601      	mov	r1, r0
 8000f98:	e778      	b.n	8000e8c <__udivmoddi4+0x1bc>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	443c      	add	r4, r7
 8000f9e:	e745      	b.n	8000e2c <__udivmoddi4+0x15c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e708      	b.n	8000db6 <__udivmoddi4+0xe6>
 8000fa4:	f1a8 0802 	sub.w	r8, r8, #2
 8000fa8:	443d      	add	r5, r7
 8000faa:	e72b      	b.n	8000e04 <__udivmoddi4+0x134>

08000fac <__aeabi_idiv0>:
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop

08000fb0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fba:	4a0c      	ldr	r2, [pc, #48]	; (8000fec <HAL_Init+0x3c>)
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <HAL_Init+0x3c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc6:	2003      	movs	r0, #3
 8000fc8:	f000 f9b4 	bl	8001334 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f000 f80f 	bl	8000ff0 <HAL_InitTick>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d002      	beq.n	8000fde <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	71fb      	strb	r3, [r7, #7]
 8000fdc:	e001      	b.n	8000fe2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fde:	f00b f9fd 	bl	800c3dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40022000 	.word	0x40022000

08000ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <HAL_InitTick+0x68>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d022      	beq.n	800104a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <HAL_InitTick+0x6c>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b13      	ldr	r3, [pc, #76]	; (8001058 <HAL_InitTick+0x68>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001010:	fbb1 f3f3 	udiv	r3, r1, r3
 8001014:	fbb2 f3f3 	udiv	r3, r2, r3
 8001018:	4618      	mov	r0, r3
 800101a:	f000 f9d4 	bl	80013c6 <HAL_SYSTICK_Config>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d10f      	bne.n	8001044 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b0f      	cmp	r3, #15
 8001028:	d809      	bhi.n	800103e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800102a:	2200      	movs	r2, #0
 800102c:	6879      	ldr	r1, [r7, #4]
 800102e:	f04f 30ff 	mov.w	r0, #4294967295
 8001032:	f000 f98a 	bl	800134a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001036:	4a0a      	ldr	r2, [pc, #40]	; (8001060 <HAL_InitTick+0x70>)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	e007      	b.n	800104e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	73fb      	strb	r3, [r7, #15]
 8001042:	e004      	b.n	800104e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	73fb      	strb	r3, [r7, #15]
 8001048:	e001      	b.n	800104e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800104e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000004 	.word	0x20000004
 800105c:	20000010 	.word	0x20000010
 8001060:	20000000 	.word	0x20000000

08001064 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <HAL_IncTick+0x1c>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <HAL_IncTick+0x20>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4413      	add	r3, r2
 8001072:	4a03      	ldr	r2, [pc, #12]	; (8001080 <HAL_IncTick+0x1c>)
 8001074:	6013      	str	r3, [r2, #0]
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20000978 	.word	0x20000978
 8001084:	20000004 	.word	0x20000004

08001088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return uwTick;
 800108c:	4b02      	ldr	r3, [pc, #8]	; (8001098 <HAL_GetTick+0x10>)
 800108e:	681b      	ldr	r3, [r3, #0]
}
 8001090:	4618      	mov	r0, r3
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr
 8001098:	20000978 	.word	0x20000978

0800109c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a4:	f7ff fff0 	bl	8001088 <HAL_GetTick>
 80010a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b4:	d004      	beq.n	80010c0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <HAL_Delay+0x40>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	4413      	add	r3, r2
 80010be:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010c0:	bf00      	nop
 80010c2:	f7ff ffe1 	bl	8001088 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	1ad2      	subs	r2, r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d3f7      	bcc.n	80010c2 <HAL_Delay+0x26>
  {
  }
}
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000004 	.word	0x20000004

080010e0 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP0/STOP1/STOP2 modes.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80010e4:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 80010e6:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f043 0302 	orr.w	r3, r3, #2
 80010ee:	6053      	str	r3, [r2, #4]
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr
 80010f8:	e0042000 	.word	0xe0042000

080010fc <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8001100:	4a04      	ldr	r2, [pc, #16]	; (8001114 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8001102:	4b04      	ldr	r3, [pc, #16]	; (8001114 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f043 0304 	orr.w	r3, r3, #4
 800110a:	6053      	str	r3, [r2, #4]
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr
 8001114:	e0042000 	.word	0xe0042000

08001118 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <NVIC_SetPriorityGrouping+0x44>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001134:	4013      	ands	r3, r2
 8001136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001140:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114a:	4a04      	ldr	r2, [pc, #16]	; (800115c <NVIC_SetPriorityGrouping+0x44>)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	60d3      	str	r3, [r2, #12]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <NVIC_GetPriorityGrouping+0x18>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	f003 0307 	and.w	r3, r3, #7
}
 800116e:	4618      	mov	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001186:	4908      	ldr	r1, [pc, #32]	; (80011a8 <NVIC_EnableIRQ+0x2c>)
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	095b      	lsrs	r3, r3, #5
 800118e:	79fa      	ldrb	r2, [r7, #7]
 8001190:	f002 021f 	and.w	r2, r2, #31
 8001194:	2001      	movs	r0, #1
 8001196:	fa00 f202 	lsl.w	r2, r0, r2
 800119a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr
 80011a8:	e000e100 	.word	0xe000e100

080011ac <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80011b6:	4909      	ldr	r1, [pc, #36]	; (80011dc <NVIC_DisableIRQ+0x30>)
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	095b      	lsrs	r3, r3, #5
 80011be:	79fa      	ldrb	r2, [r7, #7]
 80011c0:	f002 021f 	and.w	r2, r2, #31
 80011c4:	2001      	movs	r0, #1
 80011c6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ca:	3320      	adds	r3, #32
 80011cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000e100 	.word	0xe000e100

080011e0 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80011ea:	4909      	ldr	r1, [pc, #36]	; (8001210 <NVIC_ClearPendingIRQ+0x30>)
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	095b      	lsrs	r3, r3, #5
 80011f2:	79fa      	ldrb	r2, [r7, #7]
 80011f4:	f002 021f 	and.w	r2, r2, #31
 80011f8:	2001      	movs	r0, #1
 80011fa:	fa00 f202 	lsl.w	r2, r0, r2
 80011fe:	3360      	adds	r3, #96	; 0x60
 8001200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000e100 	.word	0xe000e100

08001214 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	6039      	str	r1, [r7, #0]
 800121e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001224:	2b00      	cmp	r3, #0
 8001226:	da0b      	bge.n	8001240 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001228:	490d      	ldr	r1, [pc, #52]	; (8001260 <NVIC_SetPriority+0x4c>)
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	f003 030f 	and.w	r3, r3, #15
 8001230:	3b04      	subs	r3, #4
 8001232:	683a      	ldr	r2, [r7, #0]
 8001234:	b2d2      	uxtb	r2, r2
 8001236:	0112      	lsls	r2, r2, #4
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	440b      	add	r3, r1
 800123c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800123e:	e009      	b.n	8001254 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001240:	4908      	ldr	r1, [pc, #32]	; (8001264 <NVIC_SetPriority+0x50>)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	0112      	lsls	r2, r2, #4
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	440b      	add	r3, r1
 8001250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000ed00 	.word	0xe000ed00
 8001264:	e000e100 	.word	0xe000e100

08001268 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001268:	b480      	push	{r7}
 800126a:	b089      	sub	sp, #36	; 0x24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f1c3 0307 	rsb	r3, r3, #7
 8001282:	2b04      	cmp	r3, #4
 8001284:	bf28      	it	cs
 8001286:	2304      	movcs	r3, #4
 8001288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3304      	adds	r3, #4
 800128e:	2b06      	cmp	r3, #6
 8001290:	d902      	bls.n	8001298 <NVIC_EncodePriority+0x30>
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3b03      	subs	r3, #3
 8001296:	e000      	b.n	800129a <NVIC_EncodePriority+0x32>
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800129c:	2201      	movs	r2, #1
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	1e5a      	subs	r2, r3, #1
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	401a      	ands	r2, r3
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ae:	2101      	movs	r1, #1
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	fa01 f303 	lsl.w	r3, r1, r3
 80012b6:	1e59      	subs	r1, r3, #1
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	4313      	orrs	r3, r2
         );
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3724      	adds	r7, #36	; 0x24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012cc:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80012d0:	4905      	ldr	r1, [pc, #20]	; (80012e8 <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80012d2:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <NVIC_SystemReset+0x20>)
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80012da:	4b04      	ldr	r3, [pc, #16]	; (80012ec <NVIC_SystemReset+0x24>)
 80012dc:	4313      	orrs	r3, r2
 80012de:	60cb      	str	r3, [r1, #12]
 80012e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80012e4:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80012e6:	e7fd      	b.n	80012e4 <NVIC_SystemReset+0x1c>
 80012e8:	e000ed00 	.word	0xe000ed00
 80012ec:	05fa0004 	.word	0x05fa0004

080012f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001300:	d301      	bcc.n	8001306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001302:	2301      	movs	r3, #1
 8001304:	e00f      	b.n	8001326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001306:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <SysTick_Config+0x40>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130e:	210f      	movs	r1, #15
 8001310:	f04f 30ff 	mov.w	r0, #4294967295
 8001314:	f7ff ff7e 	bl	8001214 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <SysTick_Config+0x40>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <SysTick_Config+0x40>)
 8001320:	2207      	movs	r2, #7
 8001322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	e000e010 	.word	0xe000e010

08001334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff feeb 	bl	8001118 <NVIC_SetPriorityGrouping>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af00      	add	r7, sp, #0
 8001350:	4603      	mov	r3, r0
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800135c:	f7ff ff00 	bl	8001160 <NVIC_GetPriorityGrouping>
 8001360:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	68b9      	ldr	r1, [r7, #8]
 8001366:	6978      	ldr	r0, [r7, #20]
 8001368:	f7ff ff7e 	bl	8001268 <NVIC_EncodePriority>
 800136c:	4602      	mov	r2, r0
 800136e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff4d 	bl	8001214 <NVIC_SetPriority>
}
 800137a:	bf00      	nop
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	4603      	mov	r3, r0
 800138a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800138c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fef3 	bl	800117c <NVIC_EnableIRQ>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	4603      	mov	r3, r0
 80013a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80013a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fefd 	bl	80011ac <NVIC_DisableIRQ>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80013be:	f7ff ff83 	bl	80012c8 <NVIC_SystemReset>
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff ff8e 	bl	80012f0 <SysTick_Config>
 80013d4:	4603      	mov	r3, r0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	4603      	mov	r3, r0
 80013e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80013e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fef7 	bl	80011e0 <NVIC_ClearPendingIRQ>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e098      	b.n	8001540 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	461a      	mov	r2, r3
 8001414:	4b4d      	ldr	r3, [pc, #308]	; (800154c <HAL_DMA_Init+0x150>)
 8001416:	429a      	cmp	r2, r3
 8001418:	d80f      	bhi.n	800143a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	461a      	mov	r2, r3
 8001420:	4b4b      	ldr	r3, [pc, #300]	; (8001550 <HAL_DMA_Init+0x154>)
 8001422:	4413      	add	r3, r2
 8001424:	4a4b      	ldr	r2, [pc, #300]	; (8001554 <HAL_DMA_Init+0x158>)
 8001426:	fba2 2303 	umull	r2, r3, r2, r3
 800142a:	091b      	lsrs	r3, r3, #4
 800142c:	009a      	lsls	r2, r3, #2
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a48      	ldr	r2, [pc, #288]	; (8001558 <HAL_DMA_Init+0x15c>)
 8001436:	641a      	str	r2, [r3, #64]	; 0x40
 8001438:	e00e      	b.n	8001458 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	461a      	mov	r2, r3
 8001440:	4b46      	ldr	r3, [pc, #280]	; (800155c <HAL_DMA_Init+0x160>)
 8001442:	4413      	add	r3, r2
 8001444:	4a43      	ldr	r2, [pc, #268]	; (8001554 <HAL_DMA_Init+0x158>)
 8001446:	fba2 2303 	umull	r2, r3, r2, r3
 800144a:	091b      	lsrs	r3, r3, #4
 800144c:	009a      	lsls	r2, r3, #2
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a42      	ldr	r2, [pc, #264]	; (8001560 <HAL_DMA_Init+0x164>)
 8001456:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2202      	movs	r2, #2
 800145c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800146e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001472:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800147c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001488:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001494:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800149c:	68fa      	ldr	r2, [r7, #12]
 800149e:	4313      	orrs	r3, r2
 80014a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014b2:	d039      	beq.n	8001528 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	4a27      	ldr	r2, [pc, #156]	; (8001558 <HAL_DMA_Init+0x15c>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d11a      	bne.n	80014f4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80014be:	4929      	ldr	r1, [pc, #164]	; (8001564 <HAL_DMA_Init+0x168>)
 80014c0:	4b28      	ldr	r3, [pc, #160]	; (8001564 <HAL_DMA_Init+0x168>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c8:	f003 031c 	and.w	r3, r3, #28
 80014cc:	200f      	movs	r0, #15
 80014ce:	fa00 f303 	lsl.w	r3, r0, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	4013      	ands	r3, r2
 80014d6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80014d8:	4822      	ldr	r0, [pc, #136]	; (8001564 <HAL_DMA_Init+0x168>)
 80014da:	4b22      	ldr	r3, [pc, #136]	; (8001564 <HAL_DMA_Init+0x168>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6859      	ldr	r1, [r3, #4]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	f003 031c 	and.w	r3, r3, #28
 80014ea:	fa01 f303 	lsl.w	r3, r1, r3
 80014ee:	4313      	orrs	r3, r2
 80014f0:	6003      	str	r3, [r0, #0]
 80014f2:	e019      	b.n	8001528 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80014f4:	491c      	ldr	r1, [pc, #112]	; (8001568 <HAL_DMA_Init+0x16c>)
 80014f6:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <HAL_DMA_Init+0x16c>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	f003 031c 	and.w	r3, r3, #28
 8001502:	200f      	movs	r0, #15
 8001504:	fa00 f303 	lsl.w	r3, r0, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	4013      	ands	r3, r2
 800150c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800150e:	4816      	ldr	r0, [pc, #88]	; (8001568 <HAL_DMA_Init+0x16c>)
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <HAL_DMA_Init+0x16c>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6859      	ldr	r1, [r3, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151c:	f003 031c 	and.w	r3, r3, #28
 8001520:	fa01 f303 	lsl.w	r3, r1, r3
 8001524:	4313      	orrs	r3, r2
 8001526:	6003      	str	r3, [r0, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40020407 	.word	0x40020407
 8001550:	bffdfff8 	.word	0xbffdfff8
 8001554:	cccccccd 	.word	0xcccccccd
 8001558:	40020000 	.word	0x40020000
 800155c:	bffdfbf8 	.word	0xbffdfbf8
 8001560:	40020400 	.word	0x40020400
 8001564:	400200a8 	.word	0x400200a8
 8001568:	400204a8 	.word	0x400204a8

0800156c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e072      	b.n	8001664 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	6812      	ldr	r2, [r2, #0]
 8001586:	6812      	ldr	r2, [r2, #0]
 8001588:	f022 0201 	bic.w	r2, r2, #1
 800158c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	4b36      	ldr	r3, [pc, #216]	; (8001670 <HAL_DMA_DeInit+0x104>)
 8001596:	429a      	cmp	r2, r3
 8001598:	d80f      	bhi.n	80015ba <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	461a      	mov	r2, r3
 80015a0:	4b34      	ldr	r3, [pc, #208]	; (8001674 <HAL_DMA_DeInit+0x108>)
 80015a2:	4413      	add	r3, r2
 80015a4:	4a34      	ldr	r2, [pc, #208]	; (8001678 <HAL_DMA_DeInit+0x10c>)
 80015a6:	fba2 2303 	umull	r2, r3, r2, r3
 80015aa:	091b      	lsrs	r3, r3, #4
 80015ac:	009a      	lsls	r2, r3, #2
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a31      	ldr	r2, [pc, #196]	; (800167c <HAL_DMA_DeInit+0x110>)
 80015b6:	641a      	str	r2, [r3, #64]	; 0x40
 80015b8:	e00e      	b.n	80015d8 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	461a      	mov	r2, r3
 80015c0:	4b2f      	ldr	r3, [pc, #188]	; (8001680 <HAL_DMA_DeInit+0x114>)
 80015c2:	4413      	add	r3, r2
 80015c4:	4a2c      	ldr	r2, [pc, #176]	; (8001678 <HAL_DMA_DeInit+0x10c>)
 80015c6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ca:	091b      	lsrs	r3, r3, #4
 80015cc:	009a      	lsls	r2, r3, #2
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a2b      	ldr	r2, [pc, #172]	; (8001684 <HAL_DMA_DeInit+0x118>)
 80015d6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80015e8:	f002 021c 	and.w	r2, r2, #28
 80015ec:	2101      	movs	r1, #1
 80015ee:	fa01 f202 	lsl.w	r2, r1, r2
 80015f2:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	4a20      	ldr	r2, [pc, #128]	; (800167c <HAL_DMA_DeInit+0x110>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d10d      	bne.n	800161a <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80015fe:	4922      	ldr	r1, [pc, #136]	; (8001688 <HAL_DMA_DeInit+0x11c>)
 8001600:	4b21      	ldr	r3, [pc, #132]	; (8001688 <HAL_DMA_DeInit+0x11c>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001608:	f003 031c 	and.w	r3, r3, #28
 800160c:	200f      	movs	r0, #15
 800160e:	fa00 f303 	lsl.w	r3, r0, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	4013      	ands	r3, r2
 8001616:	600b      	str	r3, [r1, #0]
 8001618:	e00c      	b.n	8001634 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800161a:	491c      	ldr	r1, [pc, #112]	; (800168c <HAL_DMA_DeInit+0x120>)
 800161c:	4b1b      	ldr	r3, [pc, #108]	; (800168c <HAL_DMA_DeInit+0x120>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001624:	f003 031c 	and.w	r3, r3, #28
 8001628:	200f      	movs	r0, #15
 800162a:	fa00 f303 	lsl.w	r3, r0, r3
 800162e:	43db      	mvns	r3, r3
 8001630:	4013      	ands	r3, r2
 8001632:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40020407 	.word	0x40020407
 8001674:	bffdfff8 	.word	0xbffdfff8
 8001678:	cccccccd 	.word	0xcccccccd
 800167c:	40020000 	.word	0x40020000
 8001680:	bffdfbf8 	.word	0xbffdfbf8
 8001684:	40020400 	.word	0x40020400
 8001688:	400200a8 	.word	0x400200a8
 800168c:	400204a8 	.word	0x400204a8

08001690 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
 800169c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d101      	bne.n	80016b0 <HAL_DMA_Start+0x20>
 80016ac:	2302      	movs	r3, #2
 80016ae:	e02e      	b.n	800170e <HAL_DMA_Start+0x7e>
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d11d      	bne.n	8001700 <HAL_DMA_Start+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2202      	movs	r2, #2
 80016c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2200      	movs	r2, #0
 80016d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	6812      	ldr	r2, [r2, #0]
 80016da:	6812      	ldr	r2, [r2, #0]
 80016dc:	f022 0201 	bic.w	r2, r2, #1
 80016e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	68b9      	ldr	r1, [r7, #8]
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f000 f9ac 	bl	8001a46 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	6812      	ldr	r2, [r2, #0]
 80016f6:	6812      	ldr	r2, [r2, #0]
 80016f8:	f042 0201 	orr.w	r2, r2, #1
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	e005      	b.n	800170c <HAL_DMA_Start+0x7c>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    status = HAL_BUSY;
 8001708:	2302      	movs	r3, #2
 800170a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800170c:	7dfb      	ldrb	r3, [r7, #23]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b086      	sub	sp, #24
 800171a:	af00      	add	r7, sp, #0
 800171c:	60f8      	str	r0, [r7, #12]
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	607a      	str	r2, [r7, #4]
 8001722:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001724:	2300      	movs	r3, #0
 8001726:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800172e:	2b01      	cmp	r3, #1
 8001730:	d101      	bne.n	8001736 <HAL_DMA_Start_IT+0x20>
 8001732:	2302      	movs	r3, #2
 8001734:	e04b      	b.n	80017ce <HAL_DMA_Start_IT+0xb8>
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b01      	cmp	r3, #1
 8001748:	d13a      	bne.n	80017c0 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2202      	movs	r2, #2
 800174e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2200      	movs	r2, #0
 8001756:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	6812      	ldr	r2, [r2, #0]
 8001760:	6812      	ldr	r2, [r2, #0]
 8001762:	f022 0201 	bic.w	r2, r2, #1
 8001766:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	68b9      	ldr	r1, [r7, #8]
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f000 f969 	bl	8001a46 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001778:	2b00      	cmp	r3, #0
 800177a:	d008      	beq.n	800178e <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	6812      	ldr	r2, [r2, #0]
 8001784:	6812      	ldr	r2, [r2, #0]
 8001786:	f042 020e 	orr.w	r2, r2, #14
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	e00f      	b.n	80017ae <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	6812      	ldr	r2, [r2, #0]
 8001796:	6812      	ldr	r2, [r2, #0]
 8001798:	f022 0204 	bic.w	r2, r2, #4
 800179c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	6812      	ldr	r2, [r2, #0]
 80017a6:	6812      	ldr	r2, [r2, #0]
 80017a8:	f042 020a 	orr.w	r2, r2, #10
 80017ac:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	6812      	ldr	r2, [r2, #0]
 80017b6:	6812      	ldr	r2, [r2, #0]
 80017b8:	f042 0201 	orr.w	r2, r2, #1
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	e005      	b.n	80017cc <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80017c8:	2302      	movs	r3, #2
 80017ca:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80017cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b085      	sub	sp, #20
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017de:	2300      	movs	r3, #0
 80017e0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d008      	beq.n	8001800 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2204      	movs	r2, #4
 80017f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e022      	b.n	8001846 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6812      	ldr	r2, [r2, #0]
 8001808:	6812      	ldr	r2, [r2, #0]
 800180a:	f022 020e 	bic.w	r2, r2, #14
 800180e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	6812      	ldr	r2, [r2, #0]
 800181a:	f022 0201 	bic.w	r2, r2, #1
 800181e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001828:	f002 021c 	and.w	r2, r2, #28
 800182c:	2101      	movs	r1, #1
 800182e:	fa01 f202 	lsl.w	r2, r1, r2
 8001832:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001844:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001846:	4618      	mov	r0, r3
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001858:	2300      	movs	r3, #0
 800185a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d005      	beq.n	8001874 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2204      	movs	r2, #4
 800186c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	73fb      	strb	r3, [r7, #15]
 8001872:	e029      	b.n	80018c8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6812      	ldr	r2, [r2, #0]
 800187c:	6812      	ldr	r2, [r2, #0]
 800187e:	f022 020e 	bic.w	r2, r2, #14
 8001882:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6812      	ldr	r2, [r2, #0]
 800188c:	6812      	ldr	r2, [r2, #0]
 800188e:	f022 0201 	bic.w	r2, r2, #1
 8001892:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800189c:	f002 021c 	and.w	r2, r2, #28
 80018a0:	2101      	movs	r1, #1
 80018a2:	fa01 f202 	lsl.w	r2, r1, r2
 80018a6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	4798      	blx	r3
    }
  }
  return status;
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b084      	sub	sp, #16
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	f003 031c 	and.w	r3, r3, #28
 80018f2:	2204      	movs	r2, #4
 80018f4:	409a      	lsls	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4013      	ands	r3, r2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d026      	beq.n	800194c <HAL_DMA_IRQHandler+0x7a>
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	d021      	beq.n	800194c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0320 	and.w	r3, r3, #32
 8001912:	2b00      	cmp	r3, #0
 8001914:	d107      	bne.n	8001926 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6812      	ldr	r2, [r2, #0]
 800191e:	6812      	ldr	r2, [r2, #0]
 8001920:	f022 0204 	bic.w	r2, r2, #4
 8001924:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800192e:	f002 021c 	and.w	r2, r2, #28
 8001932:	2104      	movs	r1, #4
 8001934:	fa01 f202 	lsl.w	r2, r1, r2
 8001938:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	2b00      	cmp	r3, #0
 8001940:	d071      	beq.n	8001a26 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800194a:	e06c      	b.n	8001a26 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001950:	f003 031c 	and.w	r3, r3, #28
 8001954:	2202      	movs	r2, #2
 8001956:	409a      	lsls	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4013      	ands	r3, r2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d02e      	beq.n	80019be <HAL_DMA_IRQHandler+0xec>
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d029      	beq.n	80019be <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0320 	and.w	r3, r3, #32
 8001974:	2b00      	cmp	r3, #0
 8001976:	d10b      	bne.n	8001990 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6812      	ldr	r2, [r2, #0]
 8001980:	6812      	ldr	r2, [r2, #0]
 8001982:	f022 020a 	bic.w	r2, r2, #10
 8001986:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001998:	f002 021c 	and.w	r2, r2, #28
 800199c:	2102      	movs	r1, #2
 800199e:	fa01 f202 	lsl.w	r2, r1, r2
 80019a2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d038      	beq.n	8001a26 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80019bc:	e033      	b.n	8001a26 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	f003 031c 	and.w	r3, r3, #28
 80019c6:	2208      	movs	r2, #8
 80019c8:	409a      	lsls	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4013      	ands	r3, r2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d02a      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x156>
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	f003 0308 	and.w	r3, r3, #8
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d025      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	f022 020e 	bic.w	r2, r2, #14
 80019ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80019f4:	f002 021c 	and.w	r2, r2, #28
 80019f8:	2101      	movs	r1, #1
 80019fa:	fa01 f202 	lsl.w	r2, r1, r2
 80019fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d004      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001a26:	bf00      	nop
 8001a28:	bf00      	nop
}
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bc80      	pop	{r7}
 8001a44:	4770      	bx	lr

08001a46 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b085      	sub	sp, #20
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	60f8      	str	r0, [r7, #12]
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a5c:	f002 021c 	and.w	r2, r2, #28
 8001a60:	2101      	movs	r1, #1
 8001a62:	fa01 f202 	lsl.w	r2, r1, r2
 8001a66:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2b10      	cmp	r3, #16
 8001a76:	d108      	bne.n	8001a8a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68ba      	ldr	r2, [r7, #8]
 8001a86:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a88:	e007      	b.n	8001a9a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	60da      	str	r2, [r3, #12]
}
 8001a9a:	bf00      	nop
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b087      	sub	sp, #28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab2:	e17f      	b.n	8001db4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	2101      	movs	r1, #1
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 8171 	beq.w	8001dae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d00b      	beq.n	8001aec <HAL_GPIO_Init+0x48>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d007      	beq.n	8001aec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ae0:	2b11      	cmp	r3, #17
 8001ae2:	d003      	beq.n	8001aec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b12      	cmp	r3, #18
 8001aea:	d130      	bne.n	8001b4e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	2203      	movs	r2, #3
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	68da      	ldr	r2, [r3, #12]
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b22:	2201      	movs	r2, #1
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	091b      	lsrs	r3, r3, #4
 8001b38:	f003 0201 	and.w	r2, r3, #1
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	d118      	bne.n	8001b8c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b60:	2201      	movs	r2, #1
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	08db      	lsrs	r3, r3, #3
 8001b76:	f003 0201 	and.w	r2, r3, #1
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	2203      	movs	r2, #3
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d003      	beq.n	8001bcc <HAL_GPIO_Init+0x128>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b12      	cmp	r3, #18
 8001bca:	d123      	bne.n	8001c14 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	08da      	lsrs	r2, r3, #3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3208      	adds	r2, #8
 8001bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	220f      	movs	r2, #15
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	691a      	ldr	r2, [r3, #16]
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	08da      	lsrs	r2, r3, #3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	3208      	adds	r2, #8
 8001c0e:	6939      	ldr	r1, [r7, #16]
 8001c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	2203      	movs	r2, #3
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 0203 	and.w	r2, r3, #3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 80ac 	beq.w	8001dae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c56:	4a5e      	ldr	r2, [pc, #376]	; (8001dd0 <HAL_GPIO_Init+0x32c>)
 8001c58:	4b5d      	ldr	r3, [pc, #372]	; (8001dd0 <HAL_GPIO_Init+0x32c>)
 8001c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6613      	str	r3, [r2, #96]	; 0x60
 8001c62:	4b5b      	ldr	r3, [pc, #364]	; (8001dd0 <HAL_GPIO_Init+0x32c>)
 8001c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c6e:	4a59      	ldr	r2, [pc, #356]	; (8001dd4 <HAL_GPIO_Init+0x330>)
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	089b      	lsrs	r3, r3, #2
 8001c74:	3302      	adds	r3, #2
 8001c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	220f      	movs	r2, #15
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c98:	d025      	beq.n	8001ce6 <HAL_GPIO_Init+0x242>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a4e      	ldr	r2, [pc, #312]	; (8001dd8 <HAL_GPIO_Init+0x334>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d01f      	beq.n	8001ce2 <HAL_GPIO_Init+0x23e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a4d      	ldr	r2, [pc, #308]	; (8001ddc <HAL_GPIO_Init+0x338>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d019      	beq.n	8001cde <HAL_GPIO_Init+0x23a>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a4c      	ldr	r2, [pc, #304]	; (8001de0 <HAL_GPIO_Init+0x33c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d013      	beq.n	8001cda <HAL_GPIO_Init+0x236>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a4b      	ldr	r2, [pc, #300]	; (8001de4 <HAL_GPIO_Init+0x340>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d00d      	beq.n	8001cd6 <HAL_GPIO_Init+0x232>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a4a      	ldr	r2, [pc, #296]	; (8001de8 <HAL_GPIO_Init+0x344>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d007      	beq.n	8001cd2 <HAL_GPIO_Init+0x22e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a49      	ldr	r2, [pc, #292]	; (8001dec <HAL_GPIO_Init+0x348>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d101      	bne.n	8001cce <HAL_GPIO_Init+0x22a>
 8001cca:	2306      	movs	r3, #6
 8001ccc:	e00c      	b.n	8001ce8 <HAL_GPIO_Init+0x244>
 8001cce:	2307      	movs	r3, #7
 8001cd0:	e00a      	b.n	8001ce8 <HAL_GPIO_Init+0x244>
 8001cd2:	2305      	movs	r3, #5
 8001cd4:	e008      	b.n	8001ce8 <HAL_GPIO_Init+0x244>
 8001cd6:	2304      	movs	r3, #4
 8001cd8:	e006      	b.n	8001ce8 <HAL_GPIO_Init+0x244>
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e004      	b.n	8001ce8 <HAL_GPIO_Init+0x244>
 8001cde:	2302      	movs	r3, #2
 8001ce0:	e002      	b.n	8001ce8 <HAL_GPIO_Init+0x244>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <HAL_GPIO_Init+0x244>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	f002 0203 	and.w	r2, r2, #3
 8001cee:	0092      	lsls	r2, r2, #2
 8001cf0:	4093      	lsls	r3, r2
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cf8:	4936      	ldr	r1, [pc, #216]	; (8001dd4 <HAL_GPIO_Init+0x330>)
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	089b      	lsrs	r3, r3, #2
 8001cfe:	3302      	adds	r3, #2
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d06:	4b3a      	ldr	r3, [pc, #232]	; (8001df0 <HAL_GPIO_Init+0x34c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	4013      	ands	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d2a:	4a31      	ldr	r2, [pc, #196]	; (8001df0 <HAL_GPIO_Init+0x34c>)
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001d30:	4b2f      	ldr	r3, [pc, #188]	; (8001df0 <HAL_GPIO_Init+0x34c>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d54:	4a26      	ldr	r2, [pc, #152]	; (8001df0 <HAL_GPIO_Init+0x34c>)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d5a:	4b25      	ldr	r3, [pc, #148]	; (8001df0 <HAL_GPIO_Init+0x34c>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	43db      	mvns	r3, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4013      	ands	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d7e:	4a1c      	ldr	r2, [pc, #112]	; (8001df0 <HAL_GPIO_Init+0x34c>)
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d84:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <HAL_GPIO_Init+0x34c>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4013      	ands	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001da8:	4a11      	ldr	r2, [pc, #68]	; (8001df0 <HAL_GPIO_Init+0x34c>)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	3301      	adds	r3, #1
 8001db2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f47f ae78 	bne.w	8001ab4 <HAL_GPIO_Init+0x10>
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	371c      	adds	r7, #28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40010000 	.word	0x40010000
 8001dd8:	48000400 	.word	0x48000400
 8001ddc:	48000800 	.word	0x48000800
 8001de0:	48000c00 	.word	0x48000c00
 8001de4:	48001000 	.word	0x48001000
 8001de8:	48001400 	.word	0x48001400
 8001dec:	48001800 	.word	0x48001800
 8001df0:	40010400 	.word	0x40010400

08001df4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b087      	sub	sp, #28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001e02:	e0cd      	b.n	8001fa0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001e04:	2201      	movs	r2, #1
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	409a      	lsls	r2, r3
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 80c1 	beq.w	8001f9a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001e18:	4a67      	ldr	r2, [pc, #412]	; (8001fb8 <HAL_GPIO_DeInit+0x1c4>)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	089b      	lsrs	r3, r3, #2
 8001e1e:	3302      	adds	r3, #2
 8001e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e24:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	220f      	movs	r2, #15
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	4013      	ands	r3, r2
 8001e38:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e40:	d025      	beq.n	8001e8e <HAL_GPIO_DeInit+0x9a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a5d      	ldr	r2, [pc, #372]	; (8001fbc <HAL_GPIO_DeInit+0x1c8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d01f      	beq.n	8001e8a <HAL_GPIO_DeInit+0x96>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a5c      	ldr	r2, [pc, #368]	; (8001fc0 <HAL_GPIO_DeInit+0x1cc>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d019      	beq.n	8001e86 <HAL_GPIO_DeInit+0x92>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a5b      	ldr	r2, [pc, #364]	; (8001fc4 <HAL_GPIO_DeInit+0x1d0>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d013      	beq.n	8001e82 <HAL_GPIO_DeInit+0x8e>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a5a      	ldr	r2, [pc, #360]	; (8001fc8 <HAL_GPIO_DeInit+0x1d4>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d00d      	beq.n	8001e7e <HAL_GPIO_DeInit+0x8a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a59      	ldr	r2, [pc, #356]	; (8001fcc <HAL_GPIO_DeInit+0x1d8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d007      	beq.n	8001e7a <HAL_GPIO_DeInit+0x86>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a58      	ldr	r2, [pc, #352]	; (8001fd0 <HAL_GPIO_DeInit+0x1dc>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d101      	bne.n	8001e76 <HAL_GPIO_DeInit+0x82>
 8001e72:	2306      	movs	r3, #6
 8001e74:	e00c      	b.n	8001e90 <HAL_GPIO_DeInit+0x9c>
 8001e76:	2307      	movs	r3, #7
 8001e78:	e00a      	b.n	8001e90 <HAL_GPIO_DeInit+0x9c>
 8001e7a:	2305      	movs	r3, #5
 8001e7c:	e008      	b.n	8001e90 <HAL_GPIO_DeInit+0x9c>
 8001e7e:	2304      	movs	r3, #4
 8001e80:	e006      	b.n	8001e90 <HAL_GPIO_DeInit+0x9c>
 8001e82:	2303      	movs	r3, #3
 8001e84:	e004      	b.n	8001e90 <HAL_GPIO_DeInit+0x9c>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e002      	b.n	8001e90 <HAL_GPIO_DeInit+0x9c>
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <HAL_GPIO_DeInit+0x9c>
 8001e8e:	2300      	movs	r3, #0
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	f002 0203 	and.w	r2, r2, #3
 8001e96:	0092      	lsls	r2, r2, #2
 8001e98:	fa03 f202 	lsl.w	r2, r3, r2
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d132      	bne.n	8001f08 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001ea2:	494c      	ldr	r1, [pc, #304]	; (8001fd4 <HAL_GPIO_DeInit+0x1e0>)
 8001ea4:	4b4b      	ldr	r3, [pc, #300]	; (8001fd4 <HAL_GPIO_DeInit+0x1e0>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	4013      	ands	r3, r2
 8001eae:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001eb0:	4948      	ldr	r1, [pc, #288]	; (8001fd4 <HAL_GPIO_DeInit+0x1e0>)
 8001eb2:	4b48      	ldr	r3, [pc, #288]	; (8001fd4 <HAL_GPIO_DeInit+0x1e0>)
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	4013      	ands	r3, r2
 8001ebc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001ebe:	4945      	ldr	r1, [pc, #276]	; (8001fd4 <HAL_GPIO_DeInit+0x1e0>)
 8001ec0:	4b44      	ldr	r3, [pc, #272]	; (8001fd4 <HAL_GPIO_DeInit+0x1e0>)
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	4013      	ands	r3, r2
 8001eca:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001ecc:	4941      	ldr	r1, [pc, #260]	; (8001fd4 <HAL_GPIO_DeInit+0x1e0>)
 8001ece:	4b41      	ldr	r3, [pc, #260]	; (8001fd4 <HAL_GPIO_DeInit+0x1e0>)
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	220f      	movs	r2, #15
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001eea:	4833      	ldr	r0, [pc, #204]	; (8001fb8 <HAL_GPIO_DeInit+0x1c4>)
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	089b      	lsrs	r3, r3, #2
 8001ef0:	4931      	ldr	r1, [pc, #196]	; (8001fb8 <HAL_GPIO_DeInit+0x1c4>)
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	0892      	lsrs	r2, r2, #2
 8001ef6:	3202      	adds	r2, #2
 8001ef8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	43d2      	mvns	r2, r2
 8001f00:	400a      	ands	r2, r1
 8001f02:	3302      	adds	r3, #2
 8001f04:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	2103      	movs	r1, #3
 8001f12:	fa01 f303 	lsl.w	r3, r1, r3
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	08da      	lsrs	r2, r3, #3
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	08d9      	lsrs	r1, r3, #3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3108      	adds	r1, #8
 8001f28:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	200f      	movs	r0, #15
 8001f36:	fa00 f303 	lsl.w	r3, r0, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	4019      	ands	r1, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3208      	adds	r2, #8
 8001f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	2103      	movs	r1, #3
 8001f50:	fa01 f303 	lsl.w	r3, r1, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	401a      	ands	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	2101      	movs	r1, #1
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	fa01 f303 	lsl.w	r3, r1, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68da      	ldr	r2, [r3, #12]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	2103      	movs	r1, #3
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	401a      	ands	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	401a      	ands	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f47f af2b 	bne.w	8001e04 <HAL_GPIO_DeInit+0x10>
  }
}
 8001fae:	bf00      	nop
 8001fb0:	371c      	adds	r7, #28
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr
 8001fb8:	40010000 	.word	0x40010000
 8001fbc:	48000400 	.word	0x48000400
 8001fc0:	48000800 	.word	0x48000800
 8001fc4:	48000c00 	.word	0x48000c00
 8001fc8:	48001000 	.word	0x48001000
 8001fcc:	48001400 	.word	0x48001400
 8001fd0:	48001800 	.word	0x48001800
 8001fd4:	40010400 	.word	0x40010400

08001fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	807b      	strh	r3, [r7, #2]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fe8:	787b      	ldrb	r3, [r7, #1]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fee:	887a      	ldrh	r2, [r7, #2]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ff4:	e002      	b.n	8001ffc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ff6:	887a      	ldrh	r2, [r7, #2]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr

08002006 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	460b      	mov	r3, r1
 8002010:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695a      	ldr	r2, [r3, #20]
 8002016:	887b      	ldrh	r3, [r7, #2]
 8002018:	4013      	ands	r3, r2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800201e:	887a      	ldrh	r2, [r7, #2]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002024:	e002      	b.n	800202c <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002026:	887a      	ldrh	r2, [r7, #2]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	619a      	str	r2, [r3, #24]
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr
	...

08002038 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800203c:	4a04      	ldr	r2, [pc, #16]	; (8002050 <HAL_PWR_EnableBkUpAccess+0x18>)
 800203e:	4b04      	ldr	r3, [pc, #16]	; (8002050 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002046:	6013      	str	r3, [r2, #0]
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr
 8002050:	40007000 	.word	0x40007000

08002054 <HAL_PWR_DisableBkUpAccess>:
  * @brief Disable access to the backup domain
  *        (RTC registers, RTC backup data registers).
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8002058:	4a04      	ldr	r2, [pc, #16]	; (800206c <HAL_PWR_DisableBkUpAccess+0x18>)
 800205a:	4b04      	ldr	r3, [pc, #16]	; (800206c <HAL_PWR_DisableBkUpAccess+0x18>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002062:	6013      	str	r3, [r2, #0]
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	40007000 	.word	0x40007000

08002070 <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8002078:	490c      	ldr	r1, [pc, #48]	; (80020ac <HAL_PWR_EnableWakeUpPin+0x3c>)
 800207a:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <HAL_PWR_EnableWakeUpPin+0x3c>)
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f003 031f 	and.w	r3, r3, #31
 8002084:	43db      	mvns	r3, r3
 8002086:	401a      	ands	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	095b      	lsrs	r3, r3, #5
 800208c:	4313      	orrs	r3, r2
 800208e:	60cb      	str	r3, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 8002090:	4906      	ldr	r1, [pc, #24]	; (80020ac <HAL_PWR_EnableWakeUpPin+0x3c>)
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_PWR_EnableWakeUpPin+0x3c>)
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f003 031f 	and.w	r3, r3, #31
 800209c:	4313      	orrs	r3, r2
 800209e:	608b      	str	r3, [r1, #8]


}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40007000 	.word	0x40007000

080020b0 <HAL_PWR_DisableWakeUpPin>:
  *         This parameter can be one of the following values:
  *           @arg @ref PWR_WAKEUP_PIN1, PWR_WAKEUP_PIN2, PWR_WAKEUP_PIN3, PWR_WAKEUP_PIN4, PWR_WAKEUP_PIN5
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 80020b8:	4906      	ldr	r1, [pc, #24]	; (80020d4 <HAL_PWR_DisableWakeUpPin+0x24>)
 80020ba:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <HAL_PWR_DisableWakeUpPin+0x24>)
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f003 031f 	and.w	r3, r3, #31
 80020c4:	43db      	mvns	r3, r3
 80020c6:	4013      	ands	r3, r2
 80020c8:	608b      	str	r3, [r1, #8]
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr
 80020d4:	40007000 	.word	0x40007000

080020d8 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 80020dc:	4a09      	ldr	r2, [pc, #36]	; (8002104 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80020de:	4b09      	ldr	r3, [pc, #36]	; (8002104 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 0307 	bic.w	r3, r3, #7
 80020e6:	f043 0303 	orr.w	r3, r3, #3
 80020ea:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80020ec:	4a06      	ldr	r2, [pc, #24]	; (8002108 <HAL_PWR_EnterSTANDBYMode+0x30>)
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_PWR_EnterSTANDBYMode+0x30>)
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	f043 0304 	orr.w	r3, r3, #4
 80020f6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfi");
 80020f8:	bf30      	wfi
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 80020fa:	bf00      	nop
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40007000 	.word	0x40007000
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <HAL_PWREx_GetVoltageRange+0x14>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr
 8002120:	40007000 	.word	0x40007000

08002124 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002132:	d130      	bne.n	8002196 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002134:	4b22      	ldr	r3, [pc, #136]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800213c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002140:	d038      	beq.n	80021b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002142:	4a1f      	ldr	r2, [pc, #124]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8002144:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800214c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002150:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002152:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2232      	movs	r2, #50	; 0x32
 8002158:	fb02 f303 	mul.w	r3, r2, r3
 800215c:	4a1a      	ldr	r2, [pc, #104]	; (80021c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800215e:	fba2 2303 	umull	r2, r3, r2, r3
 8002162:	0c9b      	lsrs	r3, r3, #18
 8002164:	3301      	adds	r3, #1
 8002166:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002168:	e002      	b.n	8002170 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	3b01      	subs	r3, #1
 800216e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002170:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800217c:	d102      	bne.n	8002184 <HAL_PWREx_ControlVoltageScaling+0x60>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1f2      	bne.n	800216a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002184:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002190:	d110      	bne.n	80021b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e00f      	b.n	80021b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002196:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800219e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021a2:	d007      	beq.n	80021b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021a4:	4a06      	ldr	r2, [pc, #24]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc80      	pop	{r7}
 80021be:	4770      	bx	lr
 80021c0:	40007000 	.word	0x40007000
 80021c4:	20000010 	.word	0x20000010
 80021c8:	431bde83 	.word	0x431bde83

080021cc <HAL_PWREx_EnableInternalWakeUpLine>:
/**
  * @brief Enable Internal Wake-up Line.
  * @retval None
  */
void HAL_PWREx_EnableInternalWakeUpLine(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_EIWF);
 80021d0:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <HAL_PWREx_EnableInternalWakeUpLine+0x18>)
 80021d2:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <HAL_PWREx_EnableInternalWakeUpLine+0x18>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021da:	6093      	str	r3, [r2, #8]
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr
 80021e4:	40007000 	.word	0x40007000

080021e8 <HAL_PWREx_DisableInternalWakeUpLine>:
/**
  * @brief Disable Internal Wake-up Line.
  * @retval None
  */
void HAL_PWREx_DisableInternalWakeUpLine(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_EIWF);
 80021ec:	4a04      	ldr	r2, [pc, #16]	; (8002200 <HAL_PWREx_DisableInternalWakeUpLine+0x18>)
 80021ee:	4b04      	ldr	r3, [pc, #16]	; (8002200 <HAL_PWREx_DisableInternalWakeUpLine+0x18>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80021f6:	6093      	str	r3, [r2, #8]
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr
 8002200:	40007000 	.word	0x40007000

08002204 <HAL_PWREx_EnableGPIOPullDown>:
  *         I/O pins are available) or the logical OR of several of them to set
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800220e:	2300      	movs	r3, #0
 8002210:	73fb      	strb	r3, [r7, #15]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b07      	cmp	r3, #7
 8002216:	f200 808d 	bhi.w	8002334 <HAL_PWREx_EnableGPIOPullDown+0x130>
 800221a:	a201      	add	r2, pc, #4	; (adr r2, 8002220 <HAL_PWREx_EnableGPIOPullDown+0x1c>)
 800221c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002220:	08002241 	.word	0x08002241
 8002224:	08002265 	.word	0x08002265
 8002228:	08002285 	.word	0x08002285
 800222c:	080022a1 	.word	0x080022a1
 8002230:	080022bd 	.word	0x080022bd
 8002234:	080022d9 	.word	0x080022d9
 8002238:	080022f5 	.word	0x080022f5
 800223c:	08002311 	.word	0x08002311
  {
    case PWR_GPIO_A:
       SET_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
 8002240:	4941      	ldr	r1, [pc, #260]	; (8002348 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002242:	4b41      	ldr	r3, [pc, #260]	; (8002348 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002244:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800224c:	4313      	orrs	r3, r2
 800224e:	624b      	str	r3, [r1, #36]	; 0x24
       CLEAR_BIT(PWR->PUCRA, (GPIONumber & (~(PWR_GPIO_BIT_14))));
 8002250:	493d      	ldr	r1, [pc, #244]	; (8002348 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002252:	4b3d      	ldr	r3, [pc, #244]	; (8002348 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002254:	6a1a      	ldr	r2, [r3, #32]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800225c:	43db      	mvns	r3, r3
 800225e:	4013      	ands	r3, r2
 8002260:	620b      	str	r3, [r1, #32]
       break;
 8002262:	e06a      	b.n	800233a <HAL_PWREx_EnableGPIOPullDown+0x136>
    case PWR_GPIO_B:
       SET_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
 8002264:	4938      	ldr	r1, [pc, #224]	; (8002348 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002266:	4b38      	ldr	r3, [pc, #224]	; (8002348 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	f023 0310 	bic.w	r3, r3, #16
 8002270:	4313      	orrs	r3, r2
 8002272:	62cb      	str	r3, [r1, #44]	; 0x2c
       CLEAR_BIT(PWR->PUCRB, GPIONumber);
 8002274:	4934      	ldr	r1, [pc, #208]	; (8002348 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002276:	4b34      	ldr	r3, [pc, #208]	; (8002348 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002278:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	43db      	mvns	r3, r3
 800227e:	4013      	ands	r3, r2
 8002280:	628b      	str	r3, [r1, #40]	; 0x28
       break;
 8002282:	e05a      	b.n	800233a <HAL_PWREx_EnableGPIOPullDown+0x136>
    case PWR_GPIO_C:
       SET_BIT(PWR->PDCRC, GPIONumber);
 8002284:	4930      	ldr	r1, [pc, #192]	; (8002348 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002286:	4b30      	ldr	r3, [pc, #192]	; (8002348 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002288:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	4313      	orrs	r3, r2
 800228e:	634b      	str	r3, [r1, #52]	; 0x34
       CLEAR_BIT(PWR->PUCRC, GPIONumber);
 8002290:	492d      	ldr	r1, [pc, #180]	; (8002348 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002292:	4b2d      	ldr	r3, [pc, #180]	; (8002348 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	43db      	mvns	r3, r3
 800229a:	4013      	ands	r3, r2
 800229c:	630b      	str	r3, [r1, #48]	; 0x30
       break;
 800229e:	e04c      	b.n	800233a <HAL_PWREx_EnableGPIOPullDown+0x136>
#if defined(GPIOD)
    case PWR_GPIO_D:
       SET_BIT(PWR->PDCRD, GPIONumber);
 80022a0:	4929      	ldr	r1, [pc, #164]	; (8002348 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80022a2:	4b29      	ldr	r3, [pc, #164]	; (8002348 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80022a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	63cb      	str	r3, [r1, #60]	; 0x3c
       CLEAR_BIT(PWR->PUCRD, GPIONumber);
 80022ac:	4926      	ldr	r1, [pc, #152]	; (8002348 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80022ae:	4b26      	ldr	r3, [pc, #152]	; (8002348 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80022b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	43db      	mvns	r3, r3
 80022b6:	4013      	ands	r3, r2
 80022b8:	638b      	str	r3, [r1, #56]	; 0x38
       break;
 80022ba:	e03e      	b.n	800233a <HAL_PWREx_EnableGPIOPullDown+0x136>
#endif
#if defined(GPIOE)
    case PWR_GPIO_E:
       SET_BIT(PWR->PDCRE, GPIONumber);
 80022bc:	4922      	ldr	r1, [pc, #136]	; (8002348 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80022be:	4b22      	ldr	r3, [pc, #136]	; (8002348 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80022c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	644b      	str	r3, [r1, #68]	; 0x44
       CLEAR_BIT(PWR->PUCRE, GPIONumber);
 80022c8:	491f      	ldr	r1, [pc, #124]	; (8002348 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80022ca:	4b1f      	ldr	r3, [pc, #124]	; (8002348 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80022cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	43db      	mvns	r3, r3
 80022d2:	4013      	ands	r3, r2
 80022d4:	640b      	str	r3, [r1, #64]	; 0x40
       break;
 80022d6:	e030      	b.n	800233a <HAL_PWREx_EnableGPIOPullDown+0x136>
#endif
#if defined(GPIOF)
    case PWR_GPIO_F:
       SET_BIT(PWR->PDCRF, GPIONumber);
 80022d8:	491b      	ldr	r1, [pc, #108]	; (8002348 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80022da:	4b1b      	ldr	r3, [pc, #108]	; (8002348 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80022dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	64cb      	str	r3, [r1, #76]	; 0x4c
       CLEAR_BIT(PWR->PUCRF, GPIONumber);
 80022e4:	4918      	ldr	r1, [pc, #96]	; (8002348 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80022e6:	4b18      	ldr	r3, [pc, #96]	; (8002348 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80022e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	4013      	ands	r3, r2
 80022f0:	648b      	str	r3, [r1, #72]	; 0x48
       break;
 80022f2:	e022      	b.n	800233a <HAL_PWREx_EnableGPIOPullDown+0x136>
#endif
#if defined(GPIOG)
    case PWR_GPIO_G:
       SET_BIT(PWR->PDCRG, GPIONumber);
 80022f4:	4914      	ldr	r1, [pc, #80]	; (8002348 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80022f6:	4b14      	ldr	r3, [pc, #80]	; (8002348 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80022f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	654b      	str	r3, [r1, #84]	; 0x54
       CLEAR_BIT(PWR->PUCRG, GPIONumber);
 8002300:	4911      	ldr	r1, [pc, #68]	; (8002348 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002302:	4b11      	ldr	r3, [pc, #68]	; (8002348 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002304:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	43db      	mvns	r3, r3
 800230a:	4013      	ands	r3, r2
 800230c:	650b      	str	r3, [r1, #80]	; 0x50
       break;
 800230e:	e014      	b.n	800233a <HAL_PWREx_EnableGPIOPullDown+0x136>
#endif
    case PWR_GPIO_H:
#if defined (STM32L496xx) || defined (STM32L4A6xx)
       SET_BIT(PWR->PDCRH, ((GPIONumber & PWR_PORTH_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_3))));
#else
       SET_BIT(PWR->PDCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8002310:	490d      	ldr	r1, [pc, #52]	; (8002348 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002312:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002314:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	4313      	orrs	r3, r2
 800231e:	65cb      	str	r3, [r1, #92]	; 0x5c
#endif
       CLEAR_BIT(PWR->PUCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8002320:	4909      	ldr	r1, [pc, #36]	; (8002348 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002322:	4b09      	ldr	r3, [pc, #36]	; (8002348 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002324:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	f003 0303 	and.w	r3, r3, #3
 800232c:	43db      	mvns	r3, r3
 800232e:	4013      	ands	r3, r2
 8002330:	658b      	str	r3, [r1, #88]	; 0x58
       break;
 8002332:	e002      	b.n	800233a <HAL_PWREx_EnableGPIOPullDown+0x136>
       SET_BIT(PWR->PDCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       CLEAR_BIT(PWR->PUCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       break;
#endif
    default:
      status = HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
      break;
 8002338:	bf00      	nop
  }

  return status;
 800233a:	7bfb      	ldrb	r3, [r7, #15]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	40007000 	.word	0x40007000

0800234c <HAL_PWREx_DisableGPIOPullDown>:
  *         I/O pins are available) or the logical OR of several of them to reset
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	73fb      	strb	r3, [r7, #15]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b07      	cmp	r3, #7
 800235e:	d859      	bhi.n	8002414 <HAL_PWREx_DisableGPIOPullDown+0xc8>
 8002360:	a201      	add	r2, pc, #4	; (adr r2, 8002368 <HAL_PWREx_DisableGPIOPullDown+0x1c>)
 8002362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002366:	bf00      	nop
 8002368:	08002389 	.word	0x08002389
 800236c:	0800239d 	.word	0x0800239d
 8002370:	080023b1 	.word	0x080023b1
 8002374:	080023c1 	.word	0x080023c1
 8002378:	080023d1 	.word	0x080023d1
 800237c:	080023e1 	.word	0x080023e1
 8002380:	080023f1 	.word	0x080023f1
 8002384:	08002401 	.word	0x08002401
  {
    case PWR_GPIO_A:
       CLEAR_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
 8002388:	4927      	ldr	r1, [pc, #156]	; (8002428 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 800238a:	4b27      	ldr	r3, [pc, #156]	; (8002428 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 800238c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002394:	43db      	mvns	r3, r3
 8002396:	4013      	ands	r3, r2
 8002398:	624b      	str	r3, [r1, #36]	; 0x24
       break;
 800239a:	e03e      	b.n	800241a <HAL_PWREx_DisableGPIOPullDown+0xce>
    case PWR_GPIO_B:
       CLEAR_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
 800239c:	4922      	ldr	r1, [pc, #136]	; (8002428 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 800239e:	4b22      	ldr	r3, [pc, #136]	; (8002428 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 80023a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	f023 0310 	bic.w	r3, r3, #16
 80023a8:	43db      	mvns	r3, r3
 80023aa:	4013      	ands	r3, r2
 80023ac:	62cb      	str	r3, [r1, #44]	; 0x2c
       break;
 80023ae:	e034      	b.n	800241a <HAL_PWREx_DisableGPIOPullDown+0xce>
    case PWR_GPIO_C:
       CLEAR_BIT(PWR->PDCRC, GPIONumber);
 80023b0:	491d      	ldr	r1, [pc, #116]	; (8002428 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 80023b2:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 80023b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	43db      	mvns	r3, r3
 80023ba:	4013      	ands	r3, r2
 80023bc:	634b      	str	r3, [r1, #52]	; 0x34
       break;
 80023be:	e02c      	b.n	800241a <HAL_PWREx_DisableGPIOPullDown+0xce>
#if defined(GPIOD)
    case PWR_GPIO_D:
       CLEAR_BIT(PWR->PDCRD, GPIONumber);
 80023c0:	4919      	ldr	r1, [pc, #100]	; (8002428 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 80023c2:	4b19      	ldr	r3, [pc, #100]	; (8002428 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 80023c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	4013      	ands	r3, r2
 80023cc:	63cb      	str	r3, [r1, #60]	; 0x3c
       break;
 80023ce:	e024      	b.n	800241a <HAL_PWREx_DisableGPIOPullDown+0xce>
#endif
#if defined(GPIOE)
    case PWR_GPIO_E:
       CLEAR_BIT(PWR->PDCRE, GPIONumber);
 80023d0:	4915      	ldr	r1, [pc, #84]	; (8002428 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 80023d2:	4b15      	ldr	r3, [pc, #84]	; (8002428 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 80023d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	43db      	mvns	r3, r3
 80023da:	4013      	ands	r3, r2
 80023dc:	644b      	str	r3, [r1, #68]	; 0x44
       break;
 80023de:	e01c      	b.n	800241a <HAL_PWREx_DisableGPIOPullDown+0xce>
#endif
#if defined(GPIOF)
    case PWR_GPIO_F:
       CLEAR_BIT(PWR->PDCRF, GPIONumber);
 80023e0:	4911      	ldr	r1, [pc, #68]	; (8002428 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 80023e2:	4b11      	ldr	r3, [pc, #68]	; (8002428 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 80023e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	43db      	mvns	r3, r3
 80023ea:	4013      	ands	r3, r2
 80023ec:	64cb      	str	r3, [r1, #76]	; 0x4c
       break;
 80023ee:	e014      	b.n	800241a <HAL_PWREx_DisableGPIOPullDown+0xce>
#endif
#if defined(GPIOG)
    case PWR_GPIO_G:
       CLEAR_BIT(PWR->PDCRG, GPIONumber);
 80023f0:	490d      	ldr	r1, [pc, #52]	; (8002428 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 80023f2:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 80023f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	4013      	ands	r3, r2
 80023fc:	654b      	str	r3, [r1, #84]	; 0x54
       break;
 80023fe:	e00c      	b.n	800241a <HAL_PWREx_DisableGPIOPullDown+0xce>
#endif
    case PWR_GPIO_H:
#if defined (STM32L496xx) || defined (STM32L4A6xx)
       CLEAR_BIT(PWR->PDCRH, ((GPIONumber & PWR_PORTH_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_3))));
#else
       CLEAR_BIT(PWR->PDCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8002400:	4909      	ldr	r1, [pc, #36]	; (8002428 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 8002402:	4b09      	ldr	r3, [pc, #36]	; (8002428 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 8002404:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	43db      	mvns	r3, r3
 800240e:	4013      	ands	r3, r2
 8002410:	65cb      	str	r3, [r1, #92]	; 0x5c
#endif
       break;
 8002412:	e002      	b.n	800241a <HAL_PWREx_DisableGPIOPullDown+0xce>
    case PWR_GPIO_I:
       CLEAR_BIT(PWR->PDCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       break;
#endif
    default:
      status = HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	73fb      	strb	r3, [r7, #15]
      break;
 8002418:	bf00      	nop
  }

  return status;
 800241a:	7bfb      	ldrb	r3, [r7, #15]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	40007000 	.word	0x40007000

0800242c <HAL_PWREx_EnablePullUpPullDownConfig>:
  *        HAL_PWREx_EnableGPIOPullUp() and HAL_PWREx_EnableGPIOPullDown() API's ensure there
  *        is no conflict when setting PUy or PDy bit.
  * @retval None
  */
void HAL_PWREx_EnablePullUpPullDownConfig(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_APC);
 8002430:	4a04      	ldr	r2, [pc, #16]	; (8002444 <HAL_PWREx_EnablePullUpPullDownConfig+0x18>)
 8002432:	4b04      	ldr	r3, [pc, #16]	; (8002444 <HAL_PWREx_EnablePullUpPullDownConfig+0x18>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800243a:	6093      	str	r3, [r2, #8]
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr
 8002444:	40007000 	.word	0x40007000

08002448 <HAL_PWREx_DisablePullUpPullDownConfig>:
  * @note  When APC bit is cleared, the I/O pull-up and pull-down configurations defined in
  *        PWR_PUCRx and PWR_PDCRx registers are not applied in Standby and Shutdown modes.
  * @retval None
  */
void HAL_PWREx_DisablePullUpPullDownConfig(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_APC);
 800244c:	4a04      	ldr	r2, [pc, #16]	; (8002460 <HAL_PWREx_DisablePullUpPullDownConfig+0x18>)
 800244e:	4b04      	ldr	r3, [pc, #16]	; (8002460 <HAL_PWREx_DisablePullUpPullDownConfig+0x18>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002456:	6093      	str	r3, [r2, #8]
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr
 8002460:	40007000 	.word	0x40007000

08002464 <HAL_PWREx_EnterSHUTDOWNMode>:
  *        The BOR is not available.
  * @note  The I/Os can be configured either with a pull-up or pull-down or can be kept in analog state.
  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0

  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_SHUTDOWN);
 8002468:	4a09      	ldr	r2, [pc, #36]	; (8002490 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 800246a:	4b09      	ldr	r3, [pc, #36]	; (8002490 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f023 0307 	bic.w	r3, r3, #7
 8002472:	f043 0304 	orr.w	r3, r3, #4
 8002476:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002478:	4a06      	ldr	r2, [pc, #24]	; (8002494 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 800247a:	4b06      	ldr	r3, [pc, #24]	; (8002494 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	f043 0304 	orr.w	r3, r3, #4
 8002482:	6113      	str	r3, [r2, #16]
 8002484:	bf30      	wfi
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 8002486:	bf00      	nop
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40007000 	.word	0x40007000
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e3d4      	b.n	8002c54 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024aa:	4ba1      	ldr	r3, [pc, #644]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 030c 	and.w	r3, r3, #12
 80024b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024b4:	4b9e      	ldr	r3, [pc, #632]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0310 	and.w	r3, r3, #16
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 80e4 	beq.w	8002694 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d007      	beq.n	80024e2 <HAL_RCC_OscConfig+0x4a>
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	2b0c      	cmp	r3, #12
 80024d6:	f040 808b 	bne.w	80025f0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	f040 8087 	bne.w	80025f0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024e2:	4b93      	ldr	r3, [pc, #588]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d005      	beq.n	80024fa <HAL_RCC_OscConfig+0x62>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e3ac      	b.n	8002c54 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1a      	ldr	r2, [r3, #32]
 80024fe:	4b8c      	ldr	r3, [pc, #560]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d004      	beq.n	8002514 <HAL_RCC_OscConfig+0x7c>
 800250a:	4b89      	ldr	r3, [pc, #548]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002512:	e005      	b.n	8002520 <HAL_RCC_OscConfig+0x88>
 8002514:	4b86      	ldr	r3, [pc, #536]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 8002516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800251a:	091b      	lsrs	r3, r3, #4
 800251c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002520:	429a      	cmp	r2, r3
 8002522:	d923      	bls.n	800256c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	4618      	mov	r0, r3
 800252a:	f000 fd71 	bl	8003010 <RCC_SetFlashLatencyFromMSIRange>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e38d      	b.n	8002c54 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002538:	4a7d      	ldr	r2, [pc, #500]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 800253a:	4b7d      	ldr	r3, [pc, #500]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f043 0308 	orr.w	r3, r3, #8
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	497a      	ldr	r1, [pc, #488]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 8002546:	4b7a      	ldr	r3, [pc, #488]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002556:	4976      	ldr	r1, [pc, #472]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 8002558:	4b75      	ldr	r3, [pc, #468]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	021b      	lsls	r3, r3, #8
 8002566:	4313      	orrs	r3, r2
 8002568:	604b      	str	r3, [r1, #4]
 800256a:	e025      	b.n	80025b8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800256c:	4a70      	ldr	r2, [pc, #448]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 800256e:	4b70      	ldr	r3, [pc, #448]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f043 0308 	orr.w	r3, r3, #8
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	496d      	ldr	r1, [pc, #436]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 800257a:	4b6d      	ldr	r3, [pc, #436]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	4313      	orrs	r3, r2
 8002588:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800258a:	4969      	ldr	r1, [pc, #420]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 800258c:	4b68      	ldr	r3, [pc, #416]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	021b      	lsls	r3, r3, #8
 800259a:	4313      	orrs	r3, r2
 800259c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d109      	bne.n	80025b8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f000 fd31 	bl	8003010 <RCC_SetFlashLatencyFromMSIRange>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e34d      	b.n	8002c54 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025b8:	f000 fc6a 	bl	8002e90 <HAL_RCC_GetSysClockFreq>
 80025bc:	4601      	mov	r1, r0
 80025be:	4b5c      	ldr	r3, [pc, #368]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	091b      	lsrs	r3, r3, #4
 80025c4:	f003 030f 	and.w	r3, r3, #15
 80025c8:	4a5a      	ldr	r2, [pc, #360]	; (8002734 <HAL_RCC_OscConfig+0x29c>)
 80025ca:	5cd3      	ldrb	r3, [r2, r3]
 80025cc:	f003 031f 	and.w	r3, r3, #31
 80025d0:	fa21 f303 	lsr.w	r3, r1, r3
 80025d4:	4a58      	ldr	r2, [pc, #352]	; (8002738 <HAL_RCC_OscConfig+0x2a0>)
 80025d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025d8:	4b58      	ldr	r3, [pc, #352]	; (800273c <HAL_RCC_OscConfig+0x2a4>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7fe fd07 	bl	8000ff0 <HAL_InitTick>
 80025e2:	4603      	mov	r3, r0
 80025e4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d052      	beq.n	8002692 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	e331      	b.n	8002c54 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d032      	beq.n	800265e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025f8:	4a4d      	ldr	r2, [pc, #308]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 80025fa:	4b4d      	ldr	r3, [pc, #308]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f043 0301 	orr.w	r3, r3, #1
 8002602:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002604:	f7fe fd40 	bl	8001088 <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800260c:	f7fe fd3c 	bl	8001088 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e31a      	b.n	8002c54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800261e:	4b44      	ldr	r3, [pc, #272]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0f0      	beq.n	800260c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800262a:	4a41      	ldr	r2, [pc, #260]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 800262c:	4b40      	ldr	r3, [pc, #256]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f043 0308 	orr.w	r3, r3, #8
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	493e      	ldr	r1, [pc, #248]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 8002638:	4b3d      	ldr	r3, [pc, #244]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	4313      	orrs	r3, r2
 8002646:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002648:	4939      	ldr	r1, [pc, #228]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 800264a:	4b39      	ldr	r3, [pc, #228]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	021b      	lsls	r3, r3, #8
 8002658:	4313      	orrs	r3, r2
 800265a:	604b      	str	r3, [r1, #4]
 800265c:	e01a      	b.n	8002694 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800265e:	4a34      	ldr	r2, [pc, #208]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 8002660:	4b33      	ldr	r3, [pc, #204]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f023 0301 	bic.w	r3, r3, #1
 8002668:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800266a:	f7fe fd0d 	bl	8001088 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002672:	f7fe fd09 	bl	8001088 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e2e7      	b.n	8002c54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002684:	4b2a      	ldr	r3, [pc, #168]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1f0      	bne.n	8002672 <HAL_RCC_OscConfig+0x1da>
 8002690:	e000      	b.n	8002694 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002692:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d074      	beq.n	800278a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d005      	beq.n	80026b2 <HAL_RCC_OscConfig+0x21a>
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	2b0c      	cmp	r3, #12
 80026aa:	d10e      	bne.n	80026ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d10b      	bne.n	80026ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b2:	4b1f      	ldr	r3, [pc, #124]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d064      	beq.n	8002788 <HAL_RCC_OscConfig+0x2f0>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d160      	bne.n	8002788 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e2c4      	b.n	8002c54 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d2:	d106      	bne.n	80026e2 <HAL_RCC_OscConfig+0x24a>
 80026d4:	4a16      	ldr	r2, [pc, #88]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 80026d6:	4b16      	ldr	r3, [pc, #88]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	e01d      	b.n	800271e <HAL_RCC_OscConfig+0x286>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026ea:	d10c      	bne.n	8002706 <HAL_RCC_OscConfig+0x26e>
 80026ec:	4a10      	ldr	r2, [pc, #64]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 80026ee:	4b10      	ldr	r3, [pc, #64]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f6:	6013      	str	r3, [r2, #0]
 80026f8:	4a0d      	ldr	r2, [pc, #52]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 80026fa:	4b0d      	ldr	r3, [pc, #52]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002702:	6013      	str	r3, [r2, #0]
 8002704:	e00b      	b.n	800271e <HAL_RCC_OscConfig+0x286>
 8002706:	4a0a      	ldr	r2, [pc, #40]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 8002708:	4b09      	ldr	r3, [pc, #36]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	4a07      	ldr	r2, [pc, #28]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 8002714:	4b06      	ldr	r3, [pc, #24]	; (8002730 <HAL_RCC_OscConfig+0x298>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800271c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d01c      	beq.n	8002760 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002726:	f7fe fcaf 	bl	8001088 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800272c:	e011      	b.n	8002752 <HAL_RCC_OscConfig+0x2ba>
 800272e:	bf00      	nop
 8002730:	40021000 	.word	0x40021000
 8002734:	080153e4 	.word	0x080153e4
 8002738:	20000010 	.word	0x20000010
 800273c:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002740:	f7fe fca2 	bl	8001088 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b64      	cmp	r3, #100	; 0x64
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e280      	b.n	8002c54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002752:	4baf      	ldr	r3, [pc, #700]	; (8002a10 <HAL_RCC_OscConfig+0x578>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0x2a8>
 800275e:	e014      	b.n	800278a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002760:	f7fe fc92 	bl	8001088 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002768:	f7fe fc8e 	bl	8001088 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b64      	cmp	r3, #100	; 0x64
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e26c      	b.n	8002c54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800277a:	4ba5      	ldr	r3, [pc, #660]	; (8002a10 <HAL_RCC_OscConfig+0x578>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0x2d0>
 8002786:	e000      	b.n	800278a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d060      	beq.n	8002858 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	2b04      	cmp	r3, #4
 800279a:	d005      	beq.n	80027a8 <HAL_RCC_OscConfig+0x310>
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	2b0c      	cmp	r3, #12
 80027a0:	d119      	bne.n	80027d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d116      	bne.n	80027d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027a8:	4b99      	ldr	r3, [pc, #612]	; (8002a10 <HAL_RCC_OscConfig+0x578>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d005      	beq.n	80027c0 <HAL_RCC_OscConfig+0x328>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e249      	b.n	8002c54 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c0:	4993      	ldr	r1, [pc, #588]	; (8002a10 <HAL_RCC_OscConfig+0x578>)
 80027c2:	4b93      	ldr	r3, [pc, #588]	; (8002a10 <HAL_RCC_OscConfig+0x578>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	061b      	lsls	r3, r3, #24
 80027d0:	4313      	orrs	r3, r2
 80027d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027d4:	e040      	b.n	8002858 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d023      	beq.n	8002826 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027de:	4a8c      	ldr	r2, [pc, #560]	; (8002a10 <HAL_RCC_OscConfig+0x578>)
 80027e0:	4b8b      	ldr	r3, [pc, #556]	; (8002a10 <HAL_RCC_OscConfig+0x578>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ea:	f7fe fc4d 	bl	8001088 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027f2:	f7fe fc49 	bl	8001088 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e227      	b.n	8002c54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002804:	4b82      	ldr	r3, [pc, #520]	; (8002a10 <HAL_RCC_OscConfig+0x578>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0f0      	beq.n	80027f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002810:	497f      	ldr	r1, [pc, #508]	; (8002a10 <HAL_RCC_OscConfig+0x578>)
 8002812:	4b7f      	ldr	r3, [pc, #508]	; (8002a10 <HAL_RCC_OscConfig+0x578>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	061b      	lsls	r3, r3, #24
 8002820:	4313      	orrs	r3, r2
 8002822:	604b      	str	r3, [r1, #4]
 8002824:	e018      	b.n	8002858 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002826:	4a7a      	ldr	r2, [pc, #488]	; (8002a10 <HAL_RCC_OscConfig+0x578>)
 8002828:	4b79      	ldr	r3, [pc, #484]	; (8002a10 <HAL_RCC_OscConfig+0x578>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002832:	f7fe fc29 	bl	8001088 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800283a:	f7fe fc25 	bl	8001088 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e203      	b.n	8002c54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800284c:	4b70      	ldr	r3, [pc, #448]	; (8002a10 <HAL_RCC_OscConfig+0x578>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1f0      	bne.n	800283a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0308 	and.w	r3, r3, #8
 8002860:	2b00      	cmp	r3, #0
 8002862:	d03c      	beq.n	80028de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d01c      	beq.n	80028a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800286c:	4a68      	ldr	r2, [pc, #416]	; (8002a10 <HAL_RCC_OscConfig+0x578>)
 800286e:	4b68      	ldr	r3, [pc, #416]	; (8002a10 <HAL_RCC_OscConfig+0x578>)
 8002870:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287c:	f7fe fc04 	bl	8001088 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002884:	f7fe fc00 	bl	8001088 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e1de      	b.n	8002c54 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002896:	4b5e      	ldr	r3, [pc, #376]	; (8002a10 <HAL_RCC_OscConfig+0x578>)
 8002898:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0ef      	beq.n	8002884 <HAL_RCC_OscConfig+0x3ec>
 80028a4:	e01b      	b.n	80028de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a6:	4a5a      	ldr	r2, [pc, #360]	; (8002a10 <HAL_RCC_OscConfig+0x578>)
 80028a8:	4b59      	ldr	r3, [pc, #356]	; (8002a10 <HAL_RCC_OscConfig+0x578>)
 80028aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ae:	f023 0301 	bic.w	r3, r3, #1
 80028b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b6:	f7fe fbe7 	bl	8001088 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028be:	f7fe fbe3 	bl	8001088 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e1c1      	b.n	8002c54 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028d0:	4b4f      	ldr	r3, [pc, #316]	; (8002a10 <HAL_RCC_OscConfig+0x578>)
 80028d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1ef      	bne.n	80028be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 80a6 	beq.w	8002a38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ec:	2300      	movs	r3, #0
 80028ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80028f0:	4b47      	ldr	r3, [pc, #284]	; (8002a10 <HAL_RCC_OscConfig+0x578>)
 80028f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10d      	bne.n	8002918 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028fc:	4a44      	ldr	r2, [pc, #272]	; (8002a10 <HAL_RCC_OscConfig+0x578>)
 80028fe:	4b44      	ldr	r3, [pc, #272]	; (8002a10 <HAL_RCC_OscConfig+0x578>)
 8002900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002906:	6593      	str	r3, [r2, #88]	; 0x58
 8002908:	4b41      	ldr	r3, [pc, #260]	; (8002a10 <HAL_RCC_OscConfig+0x578>)
 800290a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002914:	2301      	movs	r3, #1
 8002916:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002918:	4b3e      	ldr	r3, [pc, #248]	; (8002a14 <HAL_RCC_OscConfig+0x57c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002920:	2b00      	cmp	r3, #0
 8002922:	d118      	bne.n	8002956 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002924:	4a3b      	ldr	r2, [pc, #236]	; (8002a14 <HAL_RCC_OscConfig+0x57c>)
 8002926:	4b3b      	ldr	r3, [pc, #236]	; (8002a14 <HAL_RCC_OscConfig+0x57c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002930:	f7fe fbaa 	bl	8001088 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002938:	f7fe fba6 	bl	8001088 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e184      	b.n	8002c54 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800294a:	4b32      	ldr	r3, [pc, #200]	; (8002a14 <HAL_RCC_OscConfig+0x57c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0f0      	beq.n	8002938 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d108      	bne.n	8002970 <HAL_RCC_OscConfig+0x4d8>
 800295e:	4a2c      	ldr	r2, [pc, #176]	; (8002a10 <HAL_RCC_OscConfig+0x578>)
 8002960:	4b2b      	ldr	r3, [pc, #172]	; (8002a10 <HAL_RCC_OscConfig+0x578>)
 8002962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800296e:	e024      	b.n	80029ba <HAL_RCC_OscConfig+0x522>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	2b05      	cmp	r3, #5
 8002976:	d110      	bne.n	800299a <HAL_RCC_OscConfig+0x502>
 8002978:	4a25      	ldr	r2, [pc, #148]	; (8002a10 <HAL_RCC_OscConfig+0x578>)
 800297a:	4b25      	ldr	r3, [pc, #148]	; (8002a10 <HAL_RCC_OscConfig+0x578>)
 800297c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002980:	f043 0304 	orr.w	r3, r3, #4
 8002984:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002988:	4a21      	ldr	r2, [pc, #132]	; (8002a10 <HAL_RCC_OscConfig+0x578>)
 800298a:	4b21      	ldr	r3, [pc, #132]	; (8002a10 <HAL_RCC_OscConfig+0x578>)
 800298c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002998:	e00f      	b.n	80029ba <HAL_RCC_OscConfig+0x522>
 800299a:	4a1d      	ldr	r2, [pc, #116]	; (8002a10 <HAL_RCC_OscConfig+0x578>)
 800299c:	4b1c      	ldr	r3, [pc, #112]	; (8002a10 <HAL_RCC_OscConfig+0x578>)
 800299e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a2:	f023 0301 	bic.w	r3, r3, #1
 80029a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029aa:	4a19      	ldr	r2, [pc, #100]	; (8002a10 <HAL_RCC_OscConfig+0x578>)
 80029ac:	4b18      	ldr	r3, [pc, #96]	; (8002a10 <HAL_RCC_OscConfig+0x578>)
 80029ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b2:	f023 0304 	bic.w	r3, r3, #4
 80029b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d016      	beq.n	80029f0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c2:	f7fe fb61 	bl	8001088 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029c8:	e00a      	b.n	80029e0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ca:	f7fe fb5d 	bl	8001088 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d8:	4293      	cmp	r3, r2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e139      	b.n	8002c54 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <HAL_RCC_OscConfig+0x578>)
 80029e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0ed      	beq.n	80029ca <HAL_RCC_OscConfig+0x532>
 80029ee:	e01a      	b.n	8002a26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f0:	f7fe fb4a 	bl	8001088 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029f6:	e00f      	b.n	8002a18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f8:	f7fe fb46 	bl	8001088 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d906      	bls.n	8002a18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e122      	b.n	8002c54 <HAL_RCC_OscConfig+0x7bc>
 8002a0e:	bf00      	nop
 8002a10:	40021000 	.word	0x40021000
 8002a14:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a18:	4b90      	ldr	r3, [pc, #576]	; (8002c5c <HAL_RCC_OscConfig+0x7c4>)
 8002a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1e8      	bne.n	80029f8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a26:	7ffb      	ldrb	r3, [r7, #31]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d105      	bne.n	8002a38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a2c:	4a8b      	ldr	r2, [pc, #556]	; (8002c5c <HAL_RCC_OscConfig+0x7c4>)
 8002a2e:	4b8b      	ldr	r3, [pc, #556]	; (8002c5c <HAL_RCC_OscConfig+0x7c4>)
 8002a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a36:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 8108 	beq.w	8002c52 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	f040 80d0 	bne.w	8002bec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a4c:	4b83      	ldr	r3, [pc, #524]	; (8002c5c <HAL_RCC_OscConfig+0x7c4>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f003 0203 	and.w	r2, r3, #3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d130      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d127      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d11f      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a8c:	2a07      	cmp	r2, #7
 8002a8e:	bf14      	ite	ne
 8002a90:	2201      	movne	r2, #1
 8002a92:	2200      	moveq	r2, #0
 8002a94:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d113      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa4:	085b      	lsrs	r3, r3, #1
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d109      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	085b      	lsrs	r3, r3, #1
 8002aba:	3b01      	subs	r3, #1
 8002abc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d06e      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	2b0c      	cmp	r3, #12
 8002ac6:	d069      	beq.n	8002b9c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ac8:	4b64      	ldr	r3, [pc, #400]	; (8002c5c <HAL_RCC_OscConfig+0x7c4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d105      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ad4:	4b61      	ldr	r3, [pc, #388]	; (8002c5c <HAL_RCC_OscConfig+0x7c4>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0b7      	b.n	8002c54 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ae4:	4a5d      	ldr	r2, [pc, #372]	; (8002c5c <HAL_RCC_OscConfig+0x7c4>)
 8002ae6:	4b5d      	ldr	r3, [pc, #372]	; (8002c5c <HAL_RCC_OscConfig+0x7c4>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002af0:	f7fe faca 	bl	8001088 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af8:	f7fe fac6 	bl	8001088 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e0a4      	b.n	8002c54 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b0a:	4b54      	ldr	r3, [pc, #336]	; (8002c5c <HAL_RCC_OscConfig+0x7c4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f0      	bne.n	8002af8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b16:	4851      	ldr	r0, [pc, #324]	; (8002c5c <HAL_RCC_OscConfig+0x7c4>)
 8002b18:	4b50      	ldr	r3, [pc, #320]	; (8002c5c <HAL_RCC_OscConfig+0x7c4>)
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	4b50      	ldr	r3, [pc, #320]	; (8002c60 <HAL_RCC_OscConfig+0x7c8>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b28:	3a01      	subs	r2, #1
 8002b2a:	0112      	lsls	r2, r2, #4
 8002b2c:	4311      	orrs	r1, r2
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b32:	0212      	lsls	r2, r2, #8
 8002b34:	4311      	orrs	r1, r2
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b3a:	0852      	lsrs	r2, r2, #1
 8002b3c:	3a01      	subs	r2, #1
 8002b3e:	0552      	lsls	r2, r2, #21
 8002b40:	4311      	orrs	r1, r2
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b46:	0852      	lsrs	r2, r2, #1
 8002b48:	3a01      	subs	r2, #1
 8002b4a:	0652      	lsls	r2, r2, #25
 8002b4c:	4311      	orrs	r1, r2
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b52:	0912      	lsrs	r2, r2, #4
 8002b54:	0452      	lsls	r2, r2, #17
 8002b56:	430a      	orrs	r2, r1
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	60c3      	str	r3, [r0, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b5c:	4a3f      	ldr	r2, [pc, #252]	; (8002c5c <HAL_RCC_OscConfig+0x7c4>)
 8002b5e:	4b3f      	ldr	r3, [pc, #252]	; (8002c5c <HAL_RCC_OscConfig+0x7c4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b68:	4a3c      	ldr	r2, [pc, #240]	; (8002c5c <HAL_RCC_OscConfig+0x7c4>)
 8002b6a:	4b3c      	ldr	r3, [pc, #240]	; (8002c5c <HAL_RCC_OscConfig+0x7c4>)
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b74:	f7fe fa88 	bl	8001088 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b7c:	f7fe fa84 	bl	8001088 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e062      	b.n	8002c54 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b8e:	4b33      	ldr	r3, [pc, #204]	; (8002c5c <HAL_RCC_OscConfig+0x7c4>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0f0      	beq.n	8002b7c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b9a:	e05a      	b.n	8002c52 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e059      	b.n	8002c54 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ba0:	4b2e      	ldr	r3, [pc, #184]	; (8002c5c <HAL_RCC_OscConfig+0x7c4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d152      	bne.n	8002c52 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002bac:	4a2b      	ldr	r2, [pc, #172]	; (8002c5c <HAL_RCC_OscConfig+0x7c4>)
 8002bae:	4b2b      	ldr	r3, [pc, #172]	; (8002c5c <HAL_RCC_OscConfig+0x7c4>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bb6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bb8:	4a28      	ldr	r2, [pc, #160]	; (8002c5c <HAL_RCC_OscConfig+0x7c4>)
 8002bba:	4b28      	ldr	r3, [pc, #160]	; (8002c5c <HAL_RCC_OscConfig+0x7c4>)
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bc2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bc4:	f7fe fa60 	bl	8001088 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bcc:	f7fe fa5c 	bl	8001088 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e03a      	b.n	8002c54 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bde:	4b1f      	ldr	r3, [pc, #124]	; (8002c5c <HAL_RCC_OscConfig+0x7c4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0x734>
 8002bea:	e032      	b.n	8002c52 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	2b0c      	cmp	r3, #12
 8002bf0:	d02d      	beq.n	8002c4e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf2:	4a1a      	ldr	r2, [pc, #104]	; (8002c5c <HAL_RCC_OscConfig+0x7c4>)
 8002bf4:	4b19      	ldr	r3, [pc, #100]	; (8002c5c <HAL_RCC_OscConfig+0x7c4>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bfc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002bfe:	4b17      	ldr	r3, [pc, #92]	; (8002c5c <HAL_RCC_OscConfig+0x7c4>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d105      	bne.n	8002c16 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002c0a:	4a14      	ldr	r2, [pc, #80]	; (8002c5c <HAL_RCC_OscConfig+0x7c4>)
 8002c0c:	4b13      	ldr	r3, [pc, #76]	; (8002c5c <HAL_RCC_OscConfig+0x7c4>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	f023 0303 	bic.w	r3, r3, #3
 8002c14:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c16:	4a11      	ldr	r2, [pc, #68]	; (8002c5c <HAL_RCC_OscConfig+0x7c4>)
 8002c18:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <HAL_RCC_OscConfig+0x7c4>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c24:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c26:	f7fe fa2f 	bl	8001088 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c2e:	f7fe fa2b 	bl	8001088 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e009      	b.n	8002c54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c40:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <HAL_RCC_OscConfig+0x7c4>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1f0      	bne.n	8002c2e <HAL_RCC_OscConfig+0x796>
 8002c4c:	e001      	b.n	8002c52 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3720      	adds	r7, #32
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	f99d808c 	.word	0xf99d808c

08002c64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0c8      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c78:	4b66      	ldr	r3, [pc, #408]	; (8002e14 <HAL_RCC_ClockConfig+0x1b0>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0207 	and.w	r2, r3, #7
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d210      	bcs.n	8002ca8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c86:	4963      	ldr	r1, [pc, #396]	; (8002e14 <HAL_RCC_ClockConfig+0x1b0>)
 8002c88:	4b62      	ldr	r3, [pc, #392]	; (8002e14 <HAL_RCC_ClockConfig+0x1b0>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f023 0207 	bic.w	r2, r3, #7
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c96:	4b5f      	ldr	r3, [pc, #380]	; (8002e14 <HAL_RCC_ClockConfig+0x1b0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0207 	and.w	r2, r3, #7
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d001      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0b0      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d04c      	beq.n	8002d4e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	d107      	bne.n	8002ccc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cbc:	4b56      	ldr	r3, [pc, #344]	; (8002e18 <HAL_RCC_ClockConfig+0x1b4>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d121      	bne.n	8002d0c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e09e      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d107      	bne.n	8002ce4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cd4:	4b50      	ldr	r3, [pc, #320]	; (8002e18 <HAL_RCC_ClockConfig+0x1b4>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d115      	bne.n	8002d0c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e092      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d107      	bne.n	8002cfc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cec:	4b4a      	ldr	r3, [pc, #296]	; (8002e18 <HAL_RCC_ClockConfig+0x1b4>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d109      	bne.n	8002d0c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e086      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cfc:	4b46      	ldr	r3, [pc, #280]	; (8002e18 <HAL_RCC_ClockConfig+0x1b4>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e07e      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d0c:	4942      	ldr	r1, [pc, #264]	; (8002e18 <HAL_RCC_ClockConfig+0x1b4>)
 8002d0e:	4b42      	ldr	r3, [pc, #264]	; (8002e18 <HAL_RCC_ClockConfig+0x1b4>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f023 0203 	bic.w	r2, r3, #3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d1e:	f7fe f9b3 	bl	8001088 <HAL_GetTick>
 8002d22:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d24:	e00a      	b.n	8002d3c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d26:	f7fe f9af 	bl	8001088 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e066      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3c:	4b36      	ldr	r3, [pc, #216]	; (8002e18 <HAL_RCC_ClockConfig+0x1b4>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 020c 	and.w	r2, r3, #12
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d1eb      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d008      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d5a:	492f      	ldr	r1, [pc, #188]	; (8002e18 <HAL_RCC_ClockConfig+0x1b4>)
 8002d5c:	4b2e      	ldr	r3, [pc, #184]	; (8002e18 <HAL_RCC_ClockConfig+0x1b4>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d6c:	4b29      	ldr	r3, [pc, #164]	; (8002e14 <HAL_RCC_ClockConfig+0x1b0>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0207 	and.w	r2, r3, #7
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d910      	bls.n	8002d9c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7a:	4926      	ldr	r1, [pc, #152]	; (8002e14 <HAL_RCC_ClockConfig+0x1b0>)
 8002d7c:	4b25      	ldr	r3, [pc, #148]	; (8002e14 <HAL_RCC_ClockConfig+0x1b0>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f023 0207 	bic.w	r2, r3, #7
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8a:	4b22      	ldr	r3, [pc, #136]	; (8002e14 <HAL_RCC_ClockConfig+0x1b0>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0207 	and.w	r2, r3, #7
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d001      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e036      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d008      	beq.n	8002dba <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002da8:	491b      	ldr	r1, [pc, #108]	; (8002e18 <HAL_RCC_ClockConfig+0x1b4>)
 8002daa:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <HAL_RCC_ClockConfig+0x1b4>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d009      	beq.n	8002dda <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dc6:	4914      	ldr	r1, [pc, #80]	; (8002e18 <HAL_RCC_ClockConfig+0x1b4>)
 8002dc8:	4b13      	ldr	r3, [pc, #76]	; (8002e18 <HAL_RCC_ClockConfig+0x1b4>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dda:	f000 f859 	bl	8002e90 <HAL_RCC_GetSysClockFreq>
 8002dde:	4601      	mov	r1, r0
 8002de0:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <HAL_RCC_ClockConfig+0x1b4>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	091b      	lsrs	r3, r3, #4
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	4a0c      	ldr	r2, [pc, #48]	; (8002e1c <HAL_RCC_ClockConfig+0x1b8>)
 8002dec:	5cd3      	ldrb	r3, [r2, r3]
 8002dee:	f003 031f 	and.w	r3, r3, #31
 8002df2:	fa21 f303 	lsr.w	r3, r1, r3
 8002df6:	4a0a      	ldr	r2, [pc, #40]	; (8002e20 <HAL_RCC_ClockConfig+0x1bc>)
 8002df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002dfa:	4b0a      	ldr	r3, [pc, #40]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fe f8f6 	bl	8000ff0 <HAL_InitTick>
 8002e04:	4603      	mov	r3, r0
 8002e06:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e08:	7afb      	ldrb	r3, [r7, #11]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40022000 	.word	0x40022000
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	080153e4 	.word	0x080153e4
 8002e20:	20000010 	.word	0x20000010
 8002e24:	20000000 	.word	0x20000000

08002e28 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08a      	sub	sp, #40	; 0x28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8002e34:	4a15      	ldr	r2, [pc, #84]	; (8002e8c <HAL_RCC_MCOConfig+0x64>)
 8002e36:	4b15      	ldr	r3, [pc, #84]	; (8002e8c <HAL_RCC_MCOConfig+0x64>)
 8002e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e40:	4b12      	ldr	r3, [pc, #72]	; (8002e8c <HAL_RCC_MCOConfig+0x64>)
 8002e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	693b      	ldr	r3, [r7, #16]

  /* Configue the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8002e4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e52:	2302      	movs	r3, #2
 8002e54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e56:	2302      	movs	r3, #2
 8002e58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002e62:	f107 0314 	add.w	r3, r7, #20
 8002e66:	4619      	mov	r1, r3
 8002e68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e6c:	f7fe fe1a 	bl	8001aa4 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8002e70:	4806      	ldr	r0, [pc, #24]	; (8002e8c <HAL_RCC_MCOConfig+0x64>)
 8002e72:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <HAL_RCC_MCOConfig+0x64>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 8002e7a:	68b9      	ldr	r1, [r7, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	430b      	orrs	r3, r1
 8002e80:	4313      	orrs	r3, r2
 8002e82:	6083      	str	r3, [r0, #8]
}
 8002e84:	bf00      	nop
 8002e86:	3728      	adds	r7, #40	; 0x28
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40021000 	.word	0x40021000

08002e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b089      	sub	sp, #36	; 0x24
 8002e94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e96:	2300      	movs	r3, #0
 8002e98:	61fb      	str	r3, [r7, #28]
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e9e:	4b3d      	ldr	r3, [pc, #244]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 030c 	and.w	r3, r3, #12
 8002ea6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ea8:	4b3a      	ldr	r3, [pc, #232]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x104>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f003 0303 	and.w	r3, r3, #3
 8002eb0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x34>
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	2b0c      	cmp	r3, #12
 8002ebc:	d121      	bne.n	8002f02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d11e      	bne.n	8002f02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ec4:	4b33      	ldr	r3, [pc, #204]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d107      	bne.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ed0:	4b30      	ldr	r3, [pc, #192]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ed6:	0a1b      	lsrs	r3, r3, #8
 8002ed8:	f003 030f 	and.w	r3, r3, #15
 8002edc:	61fb      	str	r3, [r7, #28]
 8002ede:	e005      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ee0:	4b2c      	ldr	r3, [pc, #176]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	091b      	lsrs	r3, r3, #4
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002eec:	4a2a      	ldr	r2, [pc, #168]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10d      	bne.n	8002f18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f00:	e00a      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d102      	bne.n	8002f0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f08:	4b24      	ldr	r3, [pc, #144]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f0a:	61bb      	str	r3, [r7, #24]
 8002f0c:	e004      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d101      	bne.n	8002f18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f14:	4b22      	ldr	r3, [pc, #136]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	2b0c      	cmp	r3, #12
 8002f1c:	d133      	bne.n	8002f86 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f1e:	4b1d      	ldr	r3, [pc, #116]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d002      	beq.n	8002f34 <HAL_RCC_GetSysClockFreq+0xa4>
 8002f2e:	2b03      	cmp	r3, #3
 8002f30:	d003      	beq.n	8002f3a <HAL_RCC_GetSysClockFreq+0xaa>
 8002f32:	e005      	b.n	8002f40 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f34:	4b19      	ldr	r3, [pc, #100]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f36:	617b      	str	r3, [r7, #20]
      break;
 8002f38:	e005      	b.n	8002f46 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f3a:	4b19      	ldr	r3, [pc, #100]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f3c:	617b      	str	r3, [r7, #20]
      break;
 8002f3e:	e002      	b.n	8002f46 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	617b      	str	r3, [r7, #20]
      break;
 8002f44:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f46:	4b13      	ldr	r3, [pc, #76]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	091b      	lsrs	r3, r3, #4
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	3301      	adds	r3, #1
 8002f52:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f54:	4b0f      	ldr	r3, [pc, #60]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	0a1b      	lsrs	r3, r3, #8
 8002f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	fb02 f203 	mul.w	r2, r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f6c:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	0e5b      	lsrs	r3, r3, #25
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	3301      	adds	r3, #1
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f84:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f86:	69bb      	ldr	r3, [r7, #24]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3724      	adds	r7, #36	; 0x24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	40021000 	.word	0x40021000
 8002f98:	080153fc 	.word	0x080153fc
 8002f9c:	00f42400 	.word	0x00f42400
 8002fa0:	007a1200 	.word	0x007a1200

08002fa4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fa8:	4b02      	ldr	r3, [pc, #8]	; (8002fb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002faa:	681b      	ldr	r3, [r3, #0]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr
 8002fb4:	20000010 	.word	0x20000010

08002fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002fbc:	f7ff fff2 	bl	8002fa4 <HAL_RCC_GetHCLKFreq>
 8002fc0:	4601      	mov	r1, r0
 8002fc2:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	0a1b      	lsrs	r3, r3, #8
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	4a04      	ldr	r2, [pc, #16]	; (8002fe0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fce:	5cd3      	ldrb	r3, [r2, r3]
 8002fd0:	f003 031f 	and.w	r3, r3, #31
 8002fd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	080153f4 	.word	0x080153f4

08002fe4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002fe8:	f7ff ffdc 	bl	8002fa4 <HAL_RCC_GetHCLKFreq>
 8002fec:	4601      	mov	r1, r0
 8002fee:	4b06      	ldr	r3, [pc, #24]	; (8003008 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	0adb      	lsrs	r3, r3, #11
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	4a04      	ldr	r2, [pc, #16]	; (800300c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ffa:	5cd3      	ldrb	r3, [r2, r3]
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003004:	4618      	mov	r0, r3
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40021000 	.word	0x40021000
 800300c:	080153f4 	.word	0x080153f4

08003010 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003018:	2300      	movs	r3, #0
 800301a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800301c:	4b2a      	ldr	r3, [pc, #168]	; (80030c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800301e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d003      	beq.n	8003030 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003028:	f7ff f870 	bl	800210c <HAL_PWREx_GetVoltageRange>
 800302c:	6178      	str	r0, [r7, #20]
 800302e:	e014      	b.n	800305a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003030:	4a25      	ldr	r2, [pc, #148]	; (80030c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003032:	4b25      	ldr	r3, [pc, #148]	; (80030c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800303a:	6593      	str	r3, [r2, #88]	; 0x58
 800303c:	4b22      	ldr	r3, [pc, #136]	; (80030c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800303e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003048:	f7ff f860 	bl	800210c <HAL_PWREx_GetVoltageRange>
 800304c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800304e:	4a1e      	ldr	r2, [pc, #120]	; (80030c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003050:	4b1d      	ldr	r3, [pc, #116]	; (80030c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003054:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003058:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003060:	d10b      	bne.n	800307a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b80      	cmp	r3, #128	; 0x80
 8003066:	d919      	bls.n	800309c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2ba0      	cmp	r3, #160	; 0xa0
 800306c:	d902      	bls.n	8003074 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800306e:	2302      	movs	r3, #2
 8003070:	613b      	str	r3, [r7, #16]
 8003072:	e013      	b.n	800309c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003074:	2301      	movs	r3, #1
 8003076:	613b      	str	r3, [r7, #16]
 8003078:	e010      	b.n	800309c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b80      	cmp	r3, #128	; 0x80
 800307e:	d902      	bls.n	8003086 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003080:	2303      	movs	r3, #3
 8003082:	613b      	str	r3, [r7, #16]
 8003084:	e00a      	b.n	800309c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b80      	cmp	r3, #128	; 0x80
 800308a:	d102      	bne.n	8003092 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800308c:	2302      	movs	r3, #2
 800308e:	613b      	str	r3, [r7, #16]
 8003090:	e004      	b.n	800309c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b70      	cmp	r3, #112	; 0x70
 8003096:	d101      	bne.n	800309c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003098:	2301      	movs	r3, #1
 800309a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800309c:	490b      	ldr	r1, [pc, #44]	; (80030cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800309e:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f023 0207 	bic.w	r2, r3, #7
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030ac:	4b07      	ldr	r3, [pc, #28]	; (80030cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0207 	and.w	r2, r3, #7
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d001      	beq.n	80030be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3718      	adds	r7, #24
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40021000 	.word	0x40021000
 80030cc:	40022000 	.word	0x40022000

080030d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030d8:	2300      	movs	r3, #0
 80030da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030dc:	2300      	movs	r3, #0
 80030de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d03f      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030f4:	d01c      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80030f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030fa:	d802      	bhi.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00e      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003100:	e01f      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003102:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003106:	d003      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003108:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800310c:	d01c      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800310e:	e018      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003110:	4a85      	ldr	r2, [pc, #532]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003112:	4b85      	ldr	r3, [pc, #532]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800311a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800311c:	e015      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3304      	adds	r3, #4
 8003122:	2100      	movs	r1, #0
 8003124:	4618      	mov	r0, r3
 8003126:	f000 fac7 	bl	80036b8 <RCCEx_PLLSAI1_Config>
 800312a:	4603      	mov	r3, r0
 800312c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800312e:	e00c      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3320      	adds	r3, #32
 8003134:	2100      	movs	r1, #0
 8003136:	4618      	mov	r0, r3
 8003138:	f000 fbae 	bl	8003898 <RCCEx_PLLSAI2_Config>
 800313c:	4603      	mov	r3, r0
 800313e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003140:	e003      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	74fb      	strb	r3, [r7, #19]
      break;
 8003146:	e000      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003148:	bf00      	nop
    }

    if(ret == HAL_OK)
 800314a:	7cfb      	ldrb	r3, [r7, #19]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10b      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003150:	4975      	ldr	r1, [pc, #468]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003152:	4b75      	ldr	r3, [pc, #468]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003158:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003160:	4313      	orrs	r3, r2
 8003162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003166:	e001      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003168:	7cfb      	ldrb	r3, [r7, #19]
 800316a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d03f      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800317c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003180:	d01c      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003182:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003186:	d802      	bhi.n	800318e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00e      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xda>
 800318c:	e01f      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800318e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003192:	d003      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003194:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003198:	d01c      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800319a:	e018      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800319c:	4a62      	ldr	r2, [pc, #392]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800319e:	4b62      	ldr	r3, [pc, #392]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031a8:	e015      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	3304      	adds	r3, #4
 80031ae:	2100      	movs	r1, #0
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 fa81 	bl	80036b8 <RCCEx_PLLSAI1_Config>
 80031b6:	4603      	mov	r3, r0
 80031b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031ba:	e00c      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3320      	adds	r3, #32
 80031c0:	2100      	movs	r1, #0
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 fb68 	bl	8003898 <RCCEx_PLLSAI2_Config>
 80031c8:	4603      	mov	r3, r0
 80031ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031cc:	e003      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	74fb      	strb	r3, [r7, #19]
      break;
 80031d2:	e000      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80031d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031d6:	7cfb      	ldrb	r3, [r7, #19]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10b      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031dc:	4952      	ldr	r1, [pc, #328]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031de:	4b52      	ldr	r3, [pc, #328]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031ec:	4313      	orrs	r3, r2
 80031ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031f2:	e001      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f4:	7cfb      	ldrb	r3, [r7, #19]
 80031f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 80a0 	beq.w	8003346 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003206:	2300      	movs	r3, #0
 8003208:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800320a:	4b47      	ldr	r3, [pc, #284]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800320c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003216:	2301      	movs	r3, #1
 8003218:	e000      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800321a:	2300      	movs	r3, #0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00d      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003220:	4a41      	ldr	r2, [pc, #260]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003222:	4b41      	ldr	r3, [pc, #260]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800322a:	6593      	str	r3, [r2, #88]	; 0x58
 800322c:	4b3e      	ldr	r3, [pc, #248]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800322e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003234:	60bb      	str	r3, [r7, #8]
 8003236:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003238:	2301      	movs	r3, #1
 800323a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800323c:	4a3b      	ldr	r2, [pc, #236]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800323e:	4b3b      	ldr	r3, [pc, #236]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003246:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003248:	f7fd ff1e 	bl	8001088 <HAL_GetTick>
 800324c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800324e:	e009      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003250:	f7fd ff1a 	bl	8001088 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d902      	bls.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	74fb      	strb	r3, [r7, #19]
        break;
 8003262:	e005      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003264:	4b31      	ldr	r3, [pc, #196]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0ef      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003270:	7cfb      	ldrb	r3, [r7, #19]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d15c      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003276:	4b2c      	ldr	r3, [pc, #176]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003280:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d01f      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	429a      	cmp	r2, r3
 8003292:	d019      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003294:	4b24      	ldr	r3, [pc, #144]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800329e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032a0:	4a21      	ldr	r2, [pc, #132]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032a2:	4b21      	ldr	r3, [pc, #132]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032b0:	4a1d      	ldr	r2, [pc, #116]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032b2:	4b1d      	ldr	r3, [pc, #116]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032c0:	4a19      	ldr	r2, [pc, #100]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d016      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d2:	f7fd fed9 	bl	8001088 <HAL_GetTick>
 80032d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032d8:	e00b      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032da:	f7fd fed5 	bl	8001088 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d902      	bls.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	74fb      	strb	r3, [r7, #19]
            break;
 80032f0:	e006      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032f2:	4b0d      	ldr	r3, [pc, #52]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0ec      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003300:	7cfb      	ldrb	r3, [r7, #19]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10c      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003306:	4908      	ldr	r1, [pc, #32]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003308:	4b07      	ldr	r3, [pc, #28]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800330a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003318:	4313      	orrs	r3, r2
 800331a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800331e:	e009      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003320:	7cfb      	ldrb	r3, [r7, #19]
 8003322:	74bb      	strb	r3, [r7, #18]
 8003324:	e006      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003326:	bf00      	nop
 8003328:	40021000 	.word	0x40021000
 800332c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003330:	7cfb      	ldrb	r3, [r7, #19]
 8003332:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003334:	7c7b      	ldrb	r3, [r7, #17]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d105      	bne.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800333a:	4a9e      	ldr	r2, [pc, #632]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800333c:	4b9d      	ldr	r3, [pc, #628]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800333e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003344:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003352:	4998      	ldr	r1, [pc, #608]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003354:	4b97      	ldr	r3, [pc, #604]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335a:	f023 0203 	bic.w	r2, r3, #3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003362:	4313      	orrs	r3, r2
 8003364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003374:	498f      	ldr	r1, [pc, #572]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003376:	4b8f      	ldr	r3, [pc, #572]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337c:	f023 020c 	bic.w	r2, r3, #12
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003384:	4313      	orrs	r3, r2
 8003386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003396:	4987      	ldr	r1, [pc, #540]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003398:	4b86      	ldr	r3, [pc, #536]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800339a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	4313      	orrs	r3, r2
 80033a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0308 	and.w	r3, r3, #8
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00a      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033b8:	497e      	ldr	r1, [pc, #504]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033ba:	4b7e      	ldr	r3, [pc, #504]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0310 	and.w	r3, r3, #16
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033da:	4976      	ldr	r1, [pc, #472]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033dc:	4b75      	ldr	r3, [pc, #468]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0320 	and.w	r3, r3, #32
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00a      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033fc:	496d      	ldr	r1, [pc, #436]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033fe:	4b6d      	ldr	r3, [pc, #436]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003404:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800340c:	4313      	orrs	r3, r2
 800340e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00a      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800341e:	4965      	ldr	r1, [pc, #404]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003420:	4b64      	ldr	r3, [pc, #400]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003426:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00a      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003440:	495c      	ldr	r1, [pc, #368]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003442:	4b5c      	ldr	r3, [pc, #368]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003448:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00a      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003462:	4954      	ldr	r1, [pc, #336]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003464:	4b53      	ldr	r3, [pc, #332]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003472:	4313      	orrs	r3, r2
 8003474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00a      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003484:	494b      	ldr	r1, [pc, #300]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003486:	4b4b      	ldr	r3, [pc, #300]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003494:	4313      	orrs	r3, r2
 8003496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034a6:	4943      	ldr	r1, [pc, #268]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034a8:	4b42      	ldr	r3, [pc, #264]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b6:	4313      	orrs	r3, r2
 80034b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d028      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034c8:	493a      	ldr	r1, [pc, #232]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034ca:	4b3a      	ldr	r3, [pc, #232]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034e6:	d106      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034e8:	4a32      	ldr	r2, [pc, #200]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034ea:	4b32      	ldr	r3, [pc, #200]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034f2:	60d3      	str	r3, [r2, #12]
 80034f4:	e011      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034fe:	d10c      	bne.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3304      	adds	r3, #4
 8003504:	2101      	movs	r1, #1
 8003506:	4618      	mov	r0, r3
 8003508:	f000 f8d6 	bl	80036b8 <RCCEx_PLLSAI1_Config>
 800350c:	4603      	mov	r3, r0
 800350e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003510:	7cfb      	ldrb	r3, [r7, #19]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003516:	7cfb      	ldrb	r3, [r7, #19]
 8003518:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d028      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003526:	4923      	ldr	r1, [pc, #140]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003528:	4b22      	ldr	r3, [pc, #136]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800352a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003540:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003544:	d106      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003546:	4a1b      	ldr	r2, [pc, #108]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003548:	4b1a      	ldr	r3, [pc, #104]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003550:	60d3      	str	r3, [r2, #12]
 8003552:	e011      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003558:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800355c:	d10c      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3304      	adds	r3, #4
 8003562:	2101      	movs	r1, #1
 8003564:	4618      	mov	r0, r3
 8003566:	f000 f8a7 	bl	80036b8 <RCCEx_PLLSAI1_Config>
 800356a:	4603      	mov	r3, r0
 800356c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800356e:	7cfb      	ldrb	r3, [r7, #19]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003574:	7cfb      	ldrb	r3, [r7, #19]
 8003576:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d02b      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003584:	490b      	ldr	r1, [pc, #44]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003586:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800359e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035a2:	d109      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035a4:	4a03      	ldr	r2, [pc, #12]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035a6:	4b03      	ldr	r3, [pc, #12]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035ae:	60d3      	str	r3, [r2, #12]
 80035b0:	e014      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80035b2:	bf00      	nop
 80035b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035c0:	d10c      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	3304      	adds	r3, #4
 80035c6:	2101      	movs	r1, #1
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 f875 	bl	80036b8 <RCCEx_PLLSAI1_Config>
 80035ce:	4603      	mov	r3, r0
 80035d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035d2:	7cfb      	ldrb	r3, [r7, #19]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80035d8:	7cfb      	ldrb	r3, [r7, #19]
 80035da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d02f      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035e8:	492b      	ldr	r1, [pc, #172]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035ea:	4b2b      	ldr	r3, [pc, #172]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003602:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003606:	d10d      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3304      	adds	r3, #4
 800360c:	2102      	movs	r1, #2
 800360e:	4618      	mov	r0, r3
 8003610:	f000 f852 	bl	80036b8 <RCCEx_PLLSAI1_Config>
 8003614:	4603      	mov	r3, r0
 8003616:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003618:	7cfb      	ldrb	r3, [r7, #19]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d014      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800361e:	7cfb      	ldrb	r3, [r7, #19]
 8003620:	74bb      	strb	r3, [r7, #18]
 8003622:	e011      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003628:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800362c:	d10c      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	3320      	adds	r3, #32
 8003632:	2102      	movs	r1, #2
 8003634:	4618      	mov	r0, r3
 8003636:	f000 f92f 	bl	8003898 <RCCEx_PLLSAI2_Config>
 800363a:	4603      	mov	r3, r0
 800363c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800363e:	7cfb      	ldrb	r3, [r7, #19]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003644:	7cfb      	ldrb	r3, [r7, #19]
 8003646:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00a      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003654:	4910      	ldr	r1, [pc, #64]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003656:	4b10      	ldr	r3, [pc, #64]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003664:	4313      	orrs	r3, r2
 8003666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00b      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003676:	4908      	ldr	r1, [pc, #32]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003678:	4b07      	ldr	r3, [pc, #28]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800367a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800368e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40021000 	.word	0x40021000

0800369c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80036a0:	4a04      	ldr	r2, [pc, #16]	; (80036b4 <HAL_RCCEx_EnableMSIPLLMode+0x18>)
 80036a2:	4b04      	ldr	r3, [pc, #16]	; (80036b4 <HAL_RCCEx_EnableMSIPLLMode+0x18>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f043 0304 	orr.w	r3, r3, #4
 80036aa:	6013      	str	r3, [r2, #0]
}
 80036ac:	bf00      	nop
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr
 80036b4:	40021000 	.word	0x40021000

080036b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036c2:	2300      	movs	r3, #0
 80036c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036c6:	4b73      	ldr	r3, [pc, #460]	; (8003894 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d018      	beq.n	8003704 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036d2:	4b70      	ldr	r3, [pc, #448]	; (8003894 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	f003 0203 	and.w	r2, r3, #3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d10d      	bne.n	80036fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
       ||
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d009      	beq.n	80036fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80036ea:	4b6a      	ldr	r3, [pc, #424]	; (8003894 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	091b      	lsrs	r3, r3, #4
 80036f0:	f003 0307 	and.w	r3, r3, #7
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
       ||
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d044      	beq.n	8003788 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	73fb      	strb	r3, [r7, #15]
 8003702:	e041      	b.n	8003788 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b02      	cmp	r3, #2
 800370a:	d00c      	beq.n	8003726 <RCCEx_PLLSAI1_Config+0x6e>
 800370c:	2b03      	cmp	r3, #3
 800370e:	d013      	beq.n	8003738 <RCCEx_PLLSAI1_Config+0x80>
 8003710:	2b01      	cmp	r3, #1
 8003712:	d120      	bne.n	8003756 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003714:	4b5f      	ldr	r3, [pc, #380]	; (8003894 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d11d      	bne.n	800375c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003724:	e01a      	b.n	800375c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003726:	4b5b      	ldr	r3, [pc, #364]	; (8003894 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800372e:	2b00      	cmp	r3, #0
 8003730:	d116      	bne.n	8003760 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003736:	e013      	b.n	8003760 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003738:	4b56      	ldr	r3, [pc, #344]	; (8003894 <RCCEx_PLLSAI1_Config+0x1dc>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10f      	bne.n	8003764 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003744:	4b53      	ldr	r3, [pc, #332]	; (8003894 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d109      	bne.n	8003764 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003754:	e006      	b.n	8003764 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	73fb      	strb	r3, [r7, #15]
      break;
 800375a:	e004      	b.n	8003766 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800375c:	bf00      	nop
 800375e:	e002      	b.n	8003766 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003760:	bf00      	nop
 8003762:	e000      	b.n	8003766 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003764:	bf00      	nop
    }

    if(status == HAL_OK)
 8003766:	7bfb      	ldrb	r3, [r7, #15]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10d      	bne.n	8003788 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800376c:	4849      	ldr	r0, [pc, #292]	; (8003894 <RCCEx_PLLSAI1_Config+0x1dc>)
 800376e:	4b49      	ldr	r3, [pc, #292]	; (8003894 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6819      	ldr	r1, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	3b01      	subs	r3, #1
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	430b      	orrs	r3, r1
 8003784:	4313      	orrs	r3, r2
 8003786:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003788:	7bfb      	ldrb	r3, [r7, #15]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d17d      	bne.n	800388a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800378e:	4a41      	ldr	r2, [pc, #260]	; (8003894 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003790:	4b40      	ldr	r3, [pc, #256]	; (8003894 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003798:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800379a:	f7fd fc75 	bl	8001088 <HAL_GetTick>
 800379e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037a0:	e009      	b.n	80037b6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037a2:	f7fd fc71 	bl	8001088 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d902      	bls.n	80037b6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	73fb      	strb	r3, [r7, #15]
        break;
 80037b4:	e005      	b.n	80037c2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037b6:	4b37      	ldr	r3, [pc, #220]	; (8003894 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1ef      	bne.n	80037a2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d160      	bne.n	800388a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d111      	bne.n	80037f2 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037ce:	4831      	ldr	r0, [pc, #196]	; (8003894 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037d0:	4b30      	ldr	r3, [pc, #192]	; (8003894 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80037d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6892      	ldr	r2, [r2, #8]
 80037e0:	0211      	lsls	r1, r2, #8
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	68d2      	ldr	r2, [r2, #12]
 80037e6:	0912      	lsrs	r2, r2, #4
 80037e8:	0452      	lsls	r2, r2, #17
 80037ea:	430a      	orrs	r2, r1
 80037ec:	4313      	orrs	r3, r2
 80037ee:	6103      	str	r3, [r0, #16]
 80037f0:	e027      	b.n	8003842 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d112      	bne.n	800381e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037f8:	4826      	ldr	r0, [pc, #152]	; (8003894 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037fa:	4b26      	ldr	r3, [pc, #152]	; (8003894 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003802:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6892      	ldr	r2, [r2, #8]
 800380a:	0211      	lsls	r1, r2, #8
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6912      	ldr	r2, [r2, #16]
 8003810:	0852      	lsrs	r2, r2, #1
 8003812:	3a01      	subs	r2, #1
 8003814:	0552      	lsls	r2, r2, #21
 8003816:	430a      	orrs	r2, r1
 8003818:	4313      	orrs	r3, r2
 800381a:	6103      	str	r3, [r0, #16]
 800381c:	e011      	b.n	8003842 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800381e:	481d      	ldr	r0, [pc, #116]	; (8003894 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003820:	4b1c      	ldr	r3, [pc, #112]	; (8003894 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003828:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6892      	ldr	r2, [r2, #8]
 8003830:	0211      	lsls	r1, r2, #8
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6952      	ldr	r2, [r2, #20]
 8003836:	0852      	lsrs	r2, r2, #1
 8003838:	3a01      	subs	r2, #1
 800383a:	0652      	lsls	r2, r2, #25
 800383c:	430a      	orrs	r2, r1
 800383e:	4313      	orrs	r3, r2
 8003840:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003842:	4a14      	ldr	r2, [pc, #80]	; (8003894 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003844:	4b13      	ldr	r3, [pc, #76]	; (8003894 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800384c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384e:	f7fd fc1b 	bl	8001088 <HAL_GetTick>
 8003852:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003854:	e009      	b.n	800386a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003856:	f7fd fc17 	bl	8001088 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d902      	bls.n	800386a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	73fb      	strb	r3, [r7, #15]
          break;
 8003868:	e005      	b.n	8003876 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800386a:	4b0a      	ldr	r3, [pc, #40]	; (8003894 <RCCEx_PLLSAI1_Config+0x1dc>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0ef      	beq.n	8003856 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003876:	7bfb      	ldrb	r3, [r7, #15]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d106      	bne.n	800388a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800387c:	4905      	ldr	r1, [pc, #20]	; (8003894 <RCCEx_PLLSAI1_Config+0x1dc>)
 800387e:	4b05      	ldr	r3, [pc, #20]	; (8003894 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003880:	691a      	ldr	r2, [r3, #16]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	4313      	orrs	r3, r2
 8003888:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800388a:	7bfb      	ldrb	r3, [r7, #15]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40021000 	.word	0x40021000

08003898 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038a6:	4b68      	ldr	r3, [pc, #416]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1b0>)
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d018      	beq.n	80038e4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80038b2:	4b65      	ldr	r3, [pc, #404]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1b0>)
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	f003 0203 	and.w	r2, r3, #3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d10d      	bne.n	80038de <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
       ||
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d009      	beq.n	80038de <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80038ca:	4b5f      	ldr	r3, [pc, #380]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1b0>)
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	091b      	lsrs	r3, r3, #4
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	1c5a      	adds	r2, r3, #1
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
       ||
 80038da:	429a      	cmp	r2, r3
 80038dc:	d044      	beq.n	8003968 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	73fb      	strb	r3, [r7, #15]
 80038e2:	e041      	b.n	8003968 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d00c      	beq.n	8003906 <RCCEx_PLLSAI2_Config+0x6e>
 80038ec:	2b03      	cmp	r3, #3
 80038ee:	d013      	beq.n	8003918 <RCCEx_PLLSAI2_Config+0x80>
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d120      	bne.n	8003936 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038f4:	4b54      	ldr	r3, [pc, #336]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1b0>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d11d      	bne.n	800393c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003904:	e01a      	b.n	800393c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003906:	4b50      	ldr	r3, [pc, #320]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800390e:	2b00      	cmp	r3, #0
 8003910:	d116      	bne.n	8003940 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003916:	e013      	b.n	8003940 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003918:	4b4b      	ldr	r3, [pc, #300]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1b0>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10f      	bne.n	8003944 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003924:	4b48      	ldr	r3, [pc, #288]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d109      	bne.n	8003944 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003934:	e006      	b.n	8003944 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	73fb      	strb	r3, [r7, #15]
      break;
 800393a:	e004      	b.n	8003946 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800393c:	bf00      	nop
 800393e:	e002      	b.n	8003946 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003940:	bf00      	nop
 8003942:	e000      	b.n	8003946 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003944:	bf00      	nop
    }

    if(status == HAL_OK)
 8003946:	7bfb      	ldrb	r3, [r7, #15]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10d      	bne.n	8003968 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800394c:	483e      	ldr	r0, [pc, #248]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1b0>)
 800394e:	4b3e      	ldr	r3, [pc, #248]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6819      	ldr	r1, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	3b01      	subs	r3, #1
 8003960:	011b      	lsls	r3, r3, #4
 8003962:	430b      	orrs	r3, r1
 8003964:	4313      	orrs	r3, r2
 8003966:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003968:	7bfb      	ldrb	r3, [r7, #15]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d167      	bne.n	8003a3e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800396e:	4a36      	ldr	r2, [pc, #216]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003970:	4b35      	ldr	r3, [pc, #212]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003978:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800397a:	f7fd fb85 	bl	8001088 <HAL_GetTick>
 800397e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003980:	e009      	b.n	8003996 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003982:	f7fd fb81 	bl	8001088 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d902      	bls.n	8003996 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	73fb      	strb	r3, [r7, #15]
        break;
 8003994:	e005      	b.n	80039a2 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003996:	4b2c      	ldr	r3, [pc, #176]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1ef      	bne.n	8003982 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d14a      	bne.n	8003a3e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d111      	bne.n	80039d2 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039ae:	4826      	ldr	r0, [pc, #152]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039b0:	4b25      	ldr	r3, [pc, #148]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80039b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6892      	ldr	r2, [r2, #8]
 80039c0:	0211      	lsls	r1, r2, #8
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	68d2      	ldr	r2, [r2, #12]
 80039c6:	0912      	lsrs	r2, r2, #4
 80039c8:	0452      	lsls	r2, r2, #17
 80039ca:	430a      	orrs	r2, r1
 80039cc:	4313      	orrs	r3, r2
 80039ce:	6143      	str	r3, [r0, #20]
 80039d0:	e011      	b.n	80039f6 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039d2:	481d      	ldr	r0, [pc, #116]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039d4:	4b1c      	ldr	r3, [pc, #112]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80039dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6892      	ldr	r2, [r2, #8]
 80039e4:	0211      	lsls	r1, r2, #8
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6912      	ldr	r2, [r2, #16]
 80039ea:	0852      	lsrs	r2, r2, #1
 80039ec:	3a01      	subs	r2, #1
 80039ee:	0652      	lsls	r2, r2, #25
 80039f0:	430a      	orrs	r2, r1
 80039f2:	4313      	orrs	r3, r2
 80039f4:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80039f6:	4a14      	ldr	r2, [pc, #80]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039f8:	4b13      	ldr	r3, [pc, #76]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a00:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a02:	f7fd fb41 	bl	8001088 <HAL_GetTick>
 8003a06:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a08:	e009      	b.n	8003a1e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a0a:	f7fd fb3d 	bl	8001088 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d902      	bls.n	8003a1e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	73fb      	strb	r3, [r7, #15]
          break;
 8003a1c:	e005      	b.n	8003a2a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a1e:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0ef      	beq.n	8003a0a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003a2a:	7bfb      	ldrb	r3, [r7, #15]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d106      	bne.n	8003a3e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a30:	4905      	ldr	r1, [pc, #20]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a32:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a34:	695a      	ldr	r2, [r3, #20]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40021000 	.word	0x40021000

08003a4c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d06c      	beq.n	8003b38 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d106      	bne.n	8003a78 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f008 fcd4 	bl	800c420 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	22ca      	movs	r2, #202	; 0xca
 8003a86:	625a      	str	r2, [r3, #36]	; 0x24
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2253      	movs	r2, #83	; 0x53
 8003a8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 f9a0 	bl	8003dd6 <RTC_EnterInitMode>
 8003a96:	4603      	mov	r3, r0
 8003a98:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003a9a:	7bfb      	ldrb	r3, [r7, #15]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d14b      	bne.n	8003b38 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003aae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ab2:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6812      	ldr	r2, [r2, #0]
 8003abc:	6891      	ldr	r1, [r2, #8]
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6850      	ldr	r0, [r2, #4]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6912      	ldr	r2, [r2, #16]
 8003ac6:	4310      	orrs	r0, r2
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6992      	ldr	r2, [r2, #24]
 8003acc:	4302      	orrs	r2, r0
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	68d2      	ldr	r2, [r2, #12]
 8003ada:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6812      	ldr	r2, [r2, #0]
 8003ae4:	6911      	ldr	r1, [r2, #16]
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6892      	ldr	r2, [r2, #8]
 8003aea:	0412      	lsls	r2, r2, #16
 8003aec:	430a      	orrs	r2, r1
 8003aee:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f9a3 	bl	8003e3c <RTC_ExitInitMode>
 8003af6:	4603      	mov	r3, r0
 8003af8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003afa:	7bfb      	ldrb	r3, [r7, #15]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d11b      	bne.n	8003b38 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6812      	ldr	r2, [r2, #0]
 8003b08:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003b0a:	f022 0203 	bic.w	r2, r2, #3
 8003b0e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6812      	ldr	r2, [r2, #0]
 8003b18:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	69d0      	ldr	r0, [r2, #28]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6952      	ldr	r2, [r2, #20]
 8003b22:	4302      	orrs	r2, r0
 8003b24:	430a      	orrs	r2, r1
 8003b26:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	22ff      	movs	r2, #255	; 0xff
 8003b2e:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003b42:	b590      	push	{r4, r7, lr}
 8003b44:	b087      	sub	sp, #28
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	60f8      	str	r0, [r7, #12]
 8003b4a:	60b9      	str	r1, [r7, #8]
 8003b4c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d101      	bne.n	8003b5c <HAL_RTC_SetTime+0x1a>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	e08b      	b.n	8003c74 <HAL_RTC_SetTime+0x132>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	22ca      	movs	r2, #202	; 0xca
 8003b72:	625a      	str	r2, [r3, #36]	; 0x24
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2253      	movs	r2, #83	; 0x53
 8003b7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 f92a 	bl	8003dd6 <RTC_EnterInitMode>
 8003b82:	4603      	mov	r3, r0
 8003b84:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003b86:	7cfb      	ldrb	r3, [r7, #19]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d163      	bne.n	8003c54 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d126      	bne.n	8003be0 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d102      	bne.n	8003ba6 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 f984 	bl	8003eb8 <RTC_ByteToBcd2>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	785b      	ldrb	r3, [r3, #1]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 f97d 	bl	8003eb8 <RTC_ByteToBcd2>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003bc2:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	789b      	ldrb	r3, [r3, #2]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 f975 	bl	8003eb8 <RTC_ByteToBcd2>
 8003bce:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003bd0:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	78db      	ldrb	r3, [r3, #3]
 8003bd8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	617b      	str	r3, [r7, #20]
 8003bde:	e018      	b.n	8003c12 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d102      	bne.n	8003bf4 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	785b      	ldrb	r3, [r3, #1]
 8003bfe:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003c00:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003c06:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	78db      	ldrb	r3, [r3, #3]
 8003c0c:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003c1c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003c20:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	6812      	ldr	r2, [r2, #0]
 8003c2a:	6892      	ldr	r2, [r2, #8]
 8003c2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c30:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	6812      	ldr	r2, [r2, #0]
 8003c3a:	6891      	ldr	r1, [r2, #8]
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	68d0      	ldr	r0, [r2, #12]
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	6912      	ldr	r2, [r2, #16]
 8003c44:	4302      	orrs	r2, r0
 8003c46:	430a      	orrs	r2, r1
 8003c48:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 f8f6 	bl	8003e3c <RTC_ExitInitMode>
 8003c50:	4603      	mov	r3, r0
 8003c52:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	22ff      	movs	r2, #255	; 0xff
 8003c5a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003c5c:	7cfb      	ldrb	r3, [r7, #19]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d103      	bne.n	8003c6a <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003c72:	7cfb      	ldrb	r3, [r7, #19]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	371c      	adds	r7, #28
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd90      	pop	{r4, r7, pc}

08003c7c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003c7c:	b590      	push	{r4, r7, lr}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d101      	bne.n	8003c96 <HAL_RTC_SetDate+0x1a>
 8003c92:	2302      	movs	r3, #2
 8003c94:	e075      	b.n	8003d82 <HAL_RTC_SetDate+0x106>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2202      	movs	r2, #2
 8003ca2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10e      	bne.n	8003cca <HAL_RTC_SetDate+0x4e>
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	785b      	ldrb	r3, [r3, #1]
 8003cb0:	f003 0310 	and.w	r3, r3, #16
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d008      	beq.n	8003cca <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	785b      	ldrb	r3, [r3, #1]
 8003cbc:	f023 0310 	bic.w	r3, r3, #16
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	330a      	adds	r3, #10
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d11c      	bne.n	8003d0a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	78db      	ldrb	r3, [r3, #3]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 f8ef 	bl	8003eb8 <RTC_ByteToBcd2>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	785b      	ldrb	r3, [r3, #1]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 f8e8 	bl	8003eb8 <RTC_ByteToBcd2>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003cec:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	789b      	ldrb	r3, [r3, #2]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 f8e0 	bl	8003eb8 <RTC_ByteToBcd2>
 8003cf8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003cfa:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003d04:	4313      	orrs	r3, r2
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	e00e      	b.n	8003d28 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	78db      	ldrb	r3, [r3, #3]
 8003d0e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	785b      	ldrb	r3, [r3, #1]
 8003d14:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003d16:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003d1c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003d24:	4313      	orrs	r3, r2
 8003d26:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	22ca      	movs	r2, #202	; 0xca
 8003d2e:	625a      	str	r2, [r3, #36]	; 0x24
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2253      	movs	r2, #83	; 0x53
 8003d36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f000 f84c 	bl	8003dd6 <RTC_EnterInitMode>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003d42:	7cfb      	ldrb	r3, [r7, #19]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10c      	bne.n	8003d62 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003d52:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003d56:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f000 f86f 	bl	8003e3c <RTC_ExitInitMode>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	22ff      	movs	r2, #255	; 0xff
 8003d68:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003d6a:	7cfb      	ldrb	r3, [r7, #19]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d103      	bne.n	8003d78 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003d80:	7cfb      	ldrb	r3, [r7, #19]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	371c      	adds	r7, #28
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd90      	pop	{r4, r7, pc}

08003d8a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b084      	sub	sp, #16
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6812      	ldr	r2, [r2, #0]
 8003d9a:	68d2      	ldr	r2, [r2, #12]
 8003d9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003da0:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003da2:	f7fd f971 	bl	8001088 <HAL_GetTick>
 8003da6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003da8:	e009      	b.n	8003dbe <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003daa:	f7fd f96d 	bl	8001088 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003db8:	d901      	bls.n	8003dbe <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e007      	b.n	8003dce <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f003 0320 	and.w	r3, r3, #32
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0ee      	beq.n	8003daa <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b084      	sub	sp, #16
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dde:	2300      	movs	r3, #0
 8003de0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d120      	bne.n	8003e32 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f04f 32ff 	mov.w	r2, #4294967295
 8003df8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003dfa:	f7fd f945 	bl	8001088 <HAL_GetTick>
 8003dfe:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003e00:	e00d      	b.n	8003e1e <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003e02:	f7fd f941 	bl	8001088 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e10:	d905      	bls.n	8003e1e <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2203      	movs	r2, #3
 8003e1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d102      	bne.n	8003e32 <RTC_EnterInitMode+0x5c>
 8003e2c:	7bfb      	ldrb	r3, [r7, #15]
 8003e2e:	2b03      	cmp	r3, #3
 8003e30:	d1e7      	bne.n	8003e02 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e44:	2300      	movs	r3, #0
 8003e46:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003e48:	4a1a      	ldr	r2, [pc, #104]	; (8003eb4 <RTC_ExitInitMode+0x78>)
 8003e4a:	4b1a      	ldr	r3, [pc, #104]	; (8003eb4 <RTC_ExitInitMode+0x78>)
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e52:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003e54:	4b17      	ldr	r3, [pc, #92]	; (8003eb4 <RTC_ExitInitMode+0x78>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 0320 	and.w	r3, r3, #32
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10c      	bne.n	8003e7a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7ff ff92 	bl	8003d8a <HAL_RTC_WaitForSynchro>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d01e      	beq.n	8003eaa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2203      	movs	r2, #3
 8003e70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	73fb      	strb	r3, [r7, #15]
 8003e78:	e017      	b.n	8003eaa <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003e7a:	4a0e      	ldr	r2, [pc, #56]	; (8003eb4 <RTC_ExitInitMode+0x78>)
 8003e7c:	4b0d      	ldr	r3, [pc, #52]	; (8003eb4 <RTC_ExitInitMode+0x78>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f023 0320 	bic.w	r3, r3, #32
 8003e84:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7ff ff7f 	bl	8003d8a <HAL_RTC_WaitForSynchro>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d005      	beq.n	8003e9e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2203      	movs	r2, #3
 8003e96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003e9e:	4a05      	ldr	r2, [pc, #20]	; (8003eb4 <RTC_ExitInitMode+0x78>)
 8003ea0:	4b04      	ldr	r3, [pc, #16]	; (8003eb4 <RTC_ExitInitMode+0x78>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f043 0320 	orr.w	r3, r3, #32
 8003ea8:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	40002800 	.word	0x40002800

08003eb8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8003ec6:	79fb      	ldrb	r3, [r7, #7]
 8003ec8:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8003eca:	e005      	b.n	8003ed8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8003ed2:	7afb      	ldrb	r3, [r7, #11]
 8003ed4:	3b0a      	subs	r3, #10
 8003ed6:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8003ed8:	7afb      	ldrb	r3, [r7, #11]
 8003eda:	2b09      	cmp	r3, #9
 8003edc:	d8f6      	bhi.n	8003ecc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	b2da      	uxtb	r2, r3
 8003ee6:	7afb      	ldrb	r3, [r7, #11]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	b2db      	uxtb	r3, r3
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bc80      	pop	{r7}
 8003ef4:	4770      	bx	lr
	...

08003ef8 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d101      	bne.n	8003f12 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8003f0e:	2302      	movs	r3, #2
 8003f10:	e07f      	b.n	8004012 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	22ca      	movs	r2, #202	; 0xca
 8003f28:	625a      	str	r2, [r3, #36]	; 0x24
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2253      	movs	r2, #83	; 0x53
 8003f30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	6812      	ldr	r2, [r2, #0]
 8003f3a:	6892      	ldr	r2, [r2, #8]
 8003f3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f40:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	6812      	ldr	r2, [r2, #0]
 8003f4a:	68d2      	ldr	r2, [r2, #12]
 8003f4c:	b2d2      	uxtb	r2, r2
 8003f4e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003f52:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d120      	bne.n	8003fa4 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8003f62:	f7fd f891 	bl	8001088 <HAL_GetTick>
 8003f66:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8003f68:	e015      	b.n	8003f96 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003f6a:	f7fd f88d 	bl	8001088 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f78:	d90d      	bls.n	8003f96 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	22ff      	movs	r2, #255	; 0xff
 8003f80:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2203      	movs	r2, #3
 8003f86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e03d      	b.n	8004012 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0e2      	beq.n	8003f6a <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	6812      	ldr	r2, [r2, #0]
 8003fb4:	6892      	ldr	r2, [r2, #8]
 8003fb6:	f022 0107 	bic.w	r1, r2, #7
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003fc0:	4a16      	ldr	r2, [pc, #88]	; (800401c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8003fc2:	4b16      	ldr	r3, [pc, #88]	; (800401c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fca:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003fcc:	4a13      	ldr	r2, [pc, #76]	; (800401c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8003fce:	4b13      	ldr	r3, [pc, #76]	; (800401c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fd6:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	6812      	ldr	r2, [r2, #0]
 8003fe0:	6892      	ldr	r2, [r2, #8]
 8003fe2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fe6:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	6812      	ldr	r2, [r2, #0]
 8003ff0:	6892      	ldr	r2, [r2, #8]
 8003ff2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ff6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	22ff      	movs	r2, #255	; 0xff
 8003ffe:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3718      	adds	r7, #24
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	40010400 	.word	0x40010400

08004020 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8004028:	4b0f      	ldr	r3, [pc, #60]	; (8004068 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 800402a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800402e:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00b      	beq.n	8004056 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6812      	ldr	r2, [r2, #0]
 8004046:	68d2      	ldr	r2, [r2, #12]
 8004048:	b2d2      	uxtb	r2, r2
 800404a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800404e:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f80b 	bl	800406c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800405e:	bf00      	nop
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	40010400 	.word	0x40010400

0800406c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	bc80      	pop	{r7}
 800407c:	4770      	bx	lr

0800407e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b084      	sub	sp, #16
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e07a      	b.n	8004186 <HAL_SPI_Init+0x108>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d106      	bne.n	80040b0 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f008 fc36 	bl	800c91c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6812      	ldr	r2, [r2, #0]
 80040c0:	6812      	ldr	r2, [r2, #0]
 80040c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040d0:	d902      	bls.n	80040d8 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80040d2:	2300      	movs	r3, #0
 80040d4:	60fb      	str	r3, [r7, #12]
 80040d6:	e002      	b.n	80040de <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80040d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80040e6:	d007      	beq.n	80040f8 <HAL_SPI_Init+0x7a>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040f0:	d002      	beq.n	80040f8 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10b      	bne.n	8004118 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004108:	d903      	bls.n	8004112 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2202      	movs	r2, #2
 800410e:	631a      	str	r2, [r3, #48]	; 0x30
 8004110:	e002      	b.n	8004118 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6851      	ldr	r1, [r2, #4]
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	6892      	ldr	r2, [r2, #8]
 8004124:	4311      	orrs	r1, r2
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	6912      	ldr	r2, [r2, #16]
 800412a:	4311      	orrs	r1, r2
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	6952      	ldr	r2, [r2, #20]
 8004130:	4311      	orrs	r1, r2
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6992      	ldr	r2, [r2, #24]
 8004136:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800413a:	4311      	orrs	r1, r2
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	69d2      	ldr	r2, [r2, #28]
 8004140:	4311      	orrs	r1, r2
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6a12      	ldr	r2, [r2, #32]
 8004146:	4311      	orrs	r1, r2
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800414c:	430a      	orrs	r2, r1
 800414e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6992      	ldr	r2, [r2, #24]
 8004158:	0c12      	lsrs	r2, r2, #16
 800415a:	f002 0104 	and.w	r1, r2, #4
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004162:	4311      	orrs	r1, r2
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004168:	4311      	orrs	r1, r2
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	68d2      	ldr	r2, [r2, #12]
 800416e:	4311      	orrs	r1, r2
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	430a      	orrs	r2, r1
 8004174:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b088      	sub	sp, #32
 8004192:	af00      	add	r7, sp, #0
 8004194:	60f8      	str	r0, [r7, #12]
 8004196:	60b9      	str	r1, [r7, #8]
 8004198:	603b      	str	r3, [r7, #0]
 800419a:	4613      	mov	r3, r2
 800419c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d101      	bne.n	80041b0 <HAL_SPI_Transmit+0x22>
 80041ac:	2302      	movs	r3, #2
 80041ae:	e14e      	b.n	800444e <HAL_SPI_Transmit+0x2c0>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041b8:	f7fc ff66 	bl	8001088 <HAL_GetTick>
 80041bc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80041be:	88fb      	ldrh	r3, [r7, #6]
 80041c0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d002      	beq.n	80041d4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80041ce:	2302      	movs	r3, #2
 80041d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041d2:	e133      	b.n	800443c <HAL_SPI_Transmit+0x2ae>
  }

  if ((pData == NULL) || (Size == 0U))
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <HAL_SPI_Transmit+0x52>
 80041da:	88fb      	ldrh	r3, [r7, #6]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d102      	bne.n	80041e6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041e4:	e12a      	b.n	800443c <HAL_SPI_Transmit+0x2ae>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2203      	movs	r2, #3
 80041ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	88fa      	ldrh	r2, [r7, #6]
 80041fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	88fa      	ldrh	r2, [r7, #6]
 8004204:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004230:	d107      	bne.n	8004242 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	6812      	ldr	r2, [r2, #0]
 800423a:	6812      	ldr	r2, [r2, #0]
 800423c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004240:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424c:	2b40      	cmp	r3, #64	; 0x40
 800424e:	d007      	beq.n	8004260 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	6812      	ldr	r2, [r2, #0]
 8004258:	6812      	ldr	r2, [r2, #0]
 800425a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800425e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004268:	d94b      	bls.n	8004302 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d002      	beq.n	8004278 <HAL_SPI_Transmit+0xea>
 8004272:	8afb      	ldrh	r3, [r7, #22]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d13e      	bne.n	80042f6 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004280:	8812      	ldrh	r2, [r2, #0]
 8004282:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004288:	1c9a      	adds	r2, r3, #2
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004292:	b29b      	uxth	r3, r3
 8004294:	3b01      	subs	r3, #1
 8004296:	b29a      	uxth	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800429c:	e02b      	b.n	80042f6 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d112      	bne.n	80042d2 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042b4:	8812      	ldrh	r2, [r2, #0]
 80042b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042bc:	1c9a      	adds	r2, r3, #2
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042d0:	e011      	b.n	80042f6 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042d2:	f7fc fed9 	bl	8001088 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	1ad2      	subs	r2, r2, r3
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d303      	bcc.n	80042ea <HAL_SPI_Transmit+0x15c>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e8:	d102      	bne.n	80042f0 <HAL_SPI_Transmit+0x162>
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d102      	bne.n	80042f6 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80042f4:	e0a2      	b.n	800443c <HAL_SPI_Transmit+0x2ae>
    while (hspi->TxXferCount > 0U)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1ce      	bne.n	800429e <HAL_SPI_Transmit+0x110>
 8004300:	e07c      	b.n	80043fc <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d002      	beq.n	8004310 <HAL_SPI_Transmit+0x182>
 800430a:	8afb      	ldrh	r3, [r7, #22]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d170      	bne.n	80043f2 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004314:	b29b      	uxth	r3, r3
 8004316:	2b01      	cmp	r3, #1
 8004318:	d912      	bls.n	8004340 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004322:	8812      	ldrh	r2, [r2, #0]
 8004324:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432a:	1c9a      	adds	r2, r3, #2
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004334:	b29b      	uxth	r3, r3
 8004336:	3b02      	subs	r3, #2
 8004338:	b29a      	uxth	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800433e:	e058      	b.n	80043f2 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	330c      	adds	r3, #12
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800434a:	7812      	ldrb	r2, [r2, #0]
 800434c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004352:	1c5a      	adds	r2, r3, #1
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800435c:	b29b      	uxth	r3, r3
 800435e:	3b01      	subs	r3, #1
 8004360:	b29a      	uxth	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004366:	e044      	b.n	80043f2 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b02      	cmp	r3, #2
 8004374:	d12b      	bne.n	80043ce <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800437a:	b29b      	uxth	r3, r3
 800437c:	2b01      	cmp	r3, #1
 800437e:	d912      	bls.n	80043a6 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004388:	8812      	ldrh	r2, [r2, #0]
 800438a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004390:	1c9a      	adds	r2, r3, #2
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800439a:	b29b      	uxth	r3, r3
 800439c:	3b02      	subs	r3, #2
 800439e:	b29a      	uxth	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043a4:	e025      	b.n	80043f2 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	330c      	adds	r3, #12
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043b0:	7812      	ldrb	r2, [r2, #0]
 80043b2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b8:	1c5a      	adds	r2, r3, #1
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043cc:	e011      	b.n	80043f2 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043ce:	f7fc fe5b 	bl	8001088 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	1ad2      	subs	r2, r2, r3
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d303      	bcc.n	80043e6 <HAL_SPI_Transmit+0x258>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e4:	d102      	bne.n	80043ec <HAL_SPI_Transmit+0x25e>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d102      	bne.n	80043f2 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80043f0:	e024      	b.n	800443c <HAL_SPI_Transmit+0x2ae>
    while (hspi->TxXferCount > 0U)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1b5      	bne.n	8004368 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	6839      	ldr	r1, [r7, #0]
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 fc8c 	bl	8004d1e <SPI_EndRxTxTransaction>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d002      	beq.n	8004412 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2220      	movs	r2, #32
 8004410:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10a      	bne.n	8004430 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800441a:	2300      	movs	r3, #0
 800441c:	613b      	str	r3, [r7, #16]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	613b      	str	r3, [r7, #16]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	613b      	str	r3, [r7, #16]
 800442e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <HAL_SPI_Transmit+0x2ae>
  {
    errorcode = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800444c:	7ffb      	ldrb	r3, [r7, #31]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3720      	adds	r7, #32
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b088      	sub	sp, #32
 800445a:	af02      	add	r7, sp, #8
 800445c:	60f8      	str	r0, [r7, #12]
 800445e:	60b9      	str	r1, [r7, #8]
 8004460:	603b      	str	r3, [r7, #0]
 8004462:	4613      	mov	r3, r2
 8004464:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004472:	d112      	bne.n	800449a <HAL_SPI_Receive+0x44>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10e      	bne.n	800449a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2204      	movs	r2, #4
 8004480:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004484:	88fa      	ldrh	r2, [r7, #6]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	4613      	mov	r3, r2
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	68b9      	ldr	r1, [r7, #8]
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 f905 	bl	80046a0 <HAL_SPI_TransmitReceive>
 8004496:	4603      	mov	r3, r0
 8004498:	e0fe      	b.n	8004698 <HAL_SPI_Receive+0x242>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d101      	bne.n	80044a8 <HAL_SPI_Receive+0x52>
 80044a4:	2302      	movs	r3, #2
 80044a6:	e0f7      	b.n	8004698 <HAL_SPI_Receive+0x242>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044b0:	f7fc fdea 	bl	8001088 <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d002      	beq.n	80044c8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80044c2:	2302      	movs	r3, #2
 80044c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80044c6:	e0de      	b.n	8004686 <HAL_SPI_Receive+0x230>
  }

  if ((pData == NULL) || (Size == 0U))
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <HAL_SPI_Receive+0x7e>
 80044ce:	88fb      	ldrh	r3, [r7, #6]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d102      	bne.n	80044da <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80044d8:	e0d5      	b.n	8004686 <HAL_SPI_Receive+0x230>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2204      	movs	r2, #4
 80044de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	88fa      	ldrh	r2, [r7, #6]
 80044f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	88fa      	ldrh	r2, [r7, #6]
 80044fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004524:	d908      	bls.n	8004538 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	6812      	ldr	r2, [r2, #0]
 800452e:	6852      	ldr	r2, [r2, #4]
 8004530:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004534:	605a      	str	r2, [r3, #4]
 8004536:	e007      	b.n	8004548 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	6812      	ldr	r2, [r2, #0]
 8004540:	6852      	ldr	r2, [r2, #4]
 8004542:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004546:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004550:	d107      	bne.n	8004562 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	6812      	ldr	r2, [r2, #0]
 800455a:	6812      	ldr	r2, [r2, #0]
 800455c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004560:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456c:	2b40      	cmp	r3, #64	; 0x40
 800456e:	d007      	beq.n	8004580 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	6812      	ldr	r2, [r2, #0]
 8004578:	6812      	ldr	r2, [r2, #0]
 800457a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800457e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004588:	d866      	bhi.n	8004658 <HAL_SPI_Receive+0x202>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800458a:	e02f      	b.n	80045ec <HAL_SPI_Receive+0x196>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b01      	cmp	r3, #1
 8004598:	d116      	bne.n	80045c8 <HAL_SPI_Receive+0x172>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	6812      	ldr	r2, [r2, #0]
 80045a2:	320c      	adds	r2, #12
 80045a4:	7812      	ldrb	r2, [r2, #0]
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80045c6:	e011      	b.n	80045ec <HAL_SPI_Receive+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045c8:	f7fc fd5e 	bl	8001088 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad2      	subs	r2, r2, r3
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d303      	bcc.n	80045e0 <HAL_SPI_Receive+0x18a>
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045de:	d102      	bne.n	80045e6 <HAL_SPI_Receive+0x190>
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d102      	bne.n	80045ec <HAL_SPI_Receive+0x196>
        {
          errorcode = HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80045ea:	e04c      	b.n	8004686 <HAL_SPI_Receive+0x230>
    while (hspi->RxXferCount > 0U)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1c9      	bne.n	800458c <HAL_SPI_Receive+0x136>
 80045f8:	e034      	b.n	8004664 <HAL_SPI_Receive+0x20e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b01      	cmp	r3, #1
 8004606:	d115      	bne.n	8004634 <HAL_SPI_Receive+0x1de>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	6812      	ldr	r2, [r2, #0]
 8004610:	68d2      	ldr	r2, [r2, #12]
 8004612:	b292      	uxth	r2, r2
 8004614:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	1c9a      	adds	r2, r3, #2
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004626:	b29b      	uxth	r3, r3
 8004628:	3b01      	subs	r3, #1
 800462a:	b29a      	uxth	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004632:	e011      	b.n	8004658 <HAL_SPI_Receive+0x202>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004634:	f7fc fd28 	bl	8001088 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad2      	subs	r2, r2, r3
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	429a      	cmp	r2, r3
 8004642:	d303      	bcc.n	800464c <HAL_SPI_Receive+0x1f6>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464a:	d102      	bne.n	8004652 <HAL_SPI_Receive+0x1fc>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d102      	bne.n	8004658 <HAL_SPI_Receive+0x202>
        {
          errorcode = HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004656:	e016      	b.n	8004686 <HAL_SPI_Receive+0x230>
    while (hspi->RxXferCount > 0U)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800465e:	b29b      	uxth	r3, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1ca      	bne.n	80045fa <HAL_SPI_Receive+0x1a4>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	6839      	ldr	r1, [r7, #0]
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 fb00 	bl	8004c6e <SPI_EndRxTransaction>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d002      	beq.n	800467a <HAL_SPI_Receive+0x224>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2220      	movs	r2, #32
 8004678:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <HAL_SPI_Receive+0x230>
  {
    errorcode = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	75fb      	strb	r3, [r7, #23]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004696:	7dfb      	ldrb	r3, [r7, #23]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3718      	adds	r7, #24
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b08a      	sub	sp, #40	; 0x28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
 80046ac:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80046ae:	2301      	movs	r3, #1
 80046b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d101      	bne.n	80046c6 <HAL_SPI_TransmitReceive+0x26>
 80046c2:	2302      	movs	r3, #2
 80046c4:	e1f8      	b.n	8004ab8 <HAL_SPI_TransmitReceive+0x418>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046ce:	f7fc fcdb 	bl	8001088 <HAL_GetTick>
 80046d2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80046da:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80046e2:	887b      	ldrh	r3, [r7, #2]
 80046e4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80046e6:	887b      	ldrh	r3, [r7, #2]
 80046e8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80046ea:	7efb      	ldrb	r3, [r7, #27]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d00e      	beq.n	800470e <HAL_SPI_TransmitReceive+0x6e>
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046f6:	d106      	bne.n	8004706 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d102      	bne.n	8004706 <HAL_SPI_TransmitReceive+0x66>
 8004700:	7efb      	ldrb	r3, [r7, #27]
 8004702:	2b04      	cmp	r3, #4
 8004704:	d003      	beq.n	800470e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004706:	2302      	movs	r3, #2
 8004708:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800470c:	e1ca      	b.n	8004aa4 <HAL_SPI_TransmitReceive+0x404>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d005      	beq.n	8004720 <HAL_SPI_TransmitReceive+0x80>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d002      	beq.n	8004720 <HAL_SPI_TransmitReceive+0x80>
 800471a:	887b      	ldrh	r3, [r7, #2]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d103      	bne.n	8004728 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004726:	e1bd      	b.n	8004aa4 <HAL_SPI_TransmitReceive+0x404>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b04      	cmp	r3, #4
 8004732:	d003      	beq.n	800473c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2205      	movs	r2, #5
 8004738:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	887a      	ldrh	r2, [r7, #2]
 800474c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	887a      	ldrh	r2, [r7, #2]
 8004754:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	887a      	ldrh	r2, [r7, #2]
 8004762:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	887a      	ldrh	r2, [r7, #2]
 8004768:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800477e:	d802      	bhi.n	8004786 <HAL_SPI_TransmitReceive+0xe6>
 8004780:	8a3b      	ldrh	r3, [r7, #16]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d908      	bls.n	8004798 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	6812      	ldr	r2, [r2, #0]
 800478e:	6852      	ldr	r2, [r2, #4]
 8004790:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004794:	605a      	str	r2, [r3, #4]
 8004796:	e007      	b.n	80047a8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	6812      	ldr	r2, [r2, #0]
 80047a0:	6852      	ldr	r2, [r2, #4]
 80047a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047a6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b2:	2b40      	cmp	r3, #64	; 0x40
 80047b4:	d007      	beq.n	80047c6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	6812      	ldr	r2, [r2, #0]
 80047be:	6812      	ldr	r2, [r2, #0]
 80047c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047ce:	d97c      	bls.n	80048ca <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d002      	beq.n	80047de <HAL_SPI_TransmitReceive+0x13e>
 80047d8:	8a7b      	ldrh	r3, [r7, #18]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d169      	bne.n	80048b2 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047e6:	8812      	ldrh	r2, [r2, #0]
 80047e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ee:	1c9a      	adds	r2, r3, #2
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	3b01      	subs	r3, #1
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004802:	e056      	b.n	80048b2 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b02      	cmp	r3, #2
 8004810:	d11b      	bne.n	800484a <HAL_SPI_TransmitReceive+0x1aa>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004816:	b29b      	uxth	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d016      	beq.n	800484a <HAL_SPI_TransmitReceive+0x1aa>
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	2b01      	cmp	r3, #1
 8004820:	d113      	bne.n	800484a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800482a:	8812      	ldrh	r2, [r2, #0]
 800482c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004832:	1c9a      	adds	r2, r3, #2
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800483c:	b29b      	uxth	r3, r3
 800483e:	3b01      	subs	r3, #1
 8004840:	b29a      	uxth	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004846:	2300      	movs	r3, #0
 8004848:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	2b01      	cmp	r3, #1
 8004856:	d11c      	bne.n	8004892 <HAL_SPI_TransmitReceive+0x1f2>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800485e:	b29b      	uxth	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	d016      	beq.n	8004892 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	6812      	ldr	r2, [r2, #0]
 800486c:	68d2      	ldr	r2, [r2, #12]
 800486e:	b292      	uxth	r2, r2
 8004870:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	1c9a      	adds	r2, r3, #2
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004882:	b29b      	uxth	r3, r3
 8004884:	3b01      	subs	r3, #1
 8004886:	b29a      	uxth	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800488e:	2301      	movs	r3, #1
 8004890:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004892:	f7fc fbf9 	bl	8001088 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	1ad2      	subs	r2, r2, r3
 800489c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489e:	429a      	cmp	r2, r3
 80048a0:	d307      	bcc.n	80048b2 <HAL_SPI_TransmitReceive+0x212>
 80048a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a8:	d003      	beq.n	80048b2 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80048b0:	e0f8      	b.n	8004aa4 <HAL_SPI_TransmitReceive+0x404>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1a3      	bne.n	8004804 <HAL_SPI_TransmitReceive+0x164>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d19d      	bne.n	8004804 <HAL_SPI_TransmitReceive+0x164>
 80048c8:	e0de      	b.n	8004a88 <HAL_SPI_TransmitReceive+0x3e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <HAL_SPI_TransmitReceive+0x23a>
 80048d2:	8a7b      	ldrh	r3, [r7, #18]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	f040 80ca 	bne.w	8004a6e <HAL_SPI_TransmitReceive+0x3ce>
    {
      if (hspi->TxXferCount > 1U)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048de:	b29b      	uxth	r3, r3
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d912      	bls.n	800490a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048ec:	8812      	ldrh	r2, [r2, #0]
 80048ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f4:	1c9a      	adds	r2, r3, #2
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048fe:	b29b      	uxth	r3, r3
 8004900:	3b02      	subs	r3, #2
 8004902:	b29a      	uxth	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004908:	e0b1      	b.n	8004a6e <HAL_SPI_TransmitReceive+0x3ce>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	330c      	adds	r3, #12
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004914:	7812      	ldrb	r2, [r2, #0]
 8004916:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004926:	b29b      	uxth	r3, r3
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004930:	e09d      	b.n	8004a6e <HAL_SPI_TransmitReceive+0x3ce>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b02      	cmp	r3, #2
 800493e:	d134      	bne.n	80049aa <HAL_SPI_TransmitReceive+0x30a>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004944:	b29b      	uxth	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d02f      	beq.n	80049aa <HAL_SPI_TransmitReceive+0x30a>
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	2b01      	cmp	r3, #1
 800494e:	d12c      	bne.n	80049aa <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004954:	b29b      	uxth	r3, r3
 8004956:	2b01      	cmp	r3, #1
 8004958:	d912      	bls.n	8004980 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004962:	8812      	ldrh	r2, [r2, #0]
 8004964:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496a:	1c9a      	adds	r2, r3, #2
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004974:	b29b      	uxth	r3, r3
 8004976:	3b02      	subs	r3, #2
 8004978:	b29a      	uxth	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800497e:	e012      	b.n	80049a6 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	330c      	adds	r3, #12
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800498a:	7812      	ldrb	r2, [r2, #0]
 800498c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800499c:	b29b      	uxth	r3, r3
 800499e:	3b01      	subs	r3, #1
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d147      	bne.n	8004a48 <HAL_SPI_TransmitReceive+0x3a8>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049be:	b29b      	uxth	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d041      	beq.n	8004a48 <HAL_SPI_TransmitReceive+0x3a8>
      {
        if (hspi->RxXferCount > 1U)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d923      	bls.n	8004a18 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	6812      	ldr	r2, [r2, #0]
 80049d8:	68d2      	ldr	r2, [r2, #12]
 80049da:	b292      	uxth	r2, r2
 80049dc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	1c9a      	adds	r2, r3, #2
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	3b02      	subs	r3, #2
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d81e      	bhi.n	8004a44 <HAL_SPI_TransmitReceive+0x3a4>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	6812      	ldr	r2, [r2, #0]
 8004a0e:	6852      	ldr	r2, [r2, #4]
 8004a10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a14:	605a      	str	r2, [r3, #4]
 8004a16:	e015      	b.n	8004a44 <HAL_SPI_TransmitReceive+0x3a4>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	6812      	ldr	r2, [r2, #0]
 8004a20:	320c      	adds	r2, #12
 8004a22:	7812      	ldrb	r2, [r2, #0]
 8004a24:	b2d2      	uxtb	r2, r2
 8004a26:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a44:	2301      	movs	r3, #1
 8004a46:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a48:	f7fc fb1e 	bl	8001088 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	1ad2      	subs	r2, r2, r3
 8004a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d303      	bcc.n	8004a60 <HAL_SPI_TransmitReceive+0x3c0>
 8004a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5e:	d102      	bne.n	8004a66 <HAL_SPI_TransmitReceive+0x3c6>
 8004a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d103      	bne.n	8004a6e <HAL_SPI_TransmitReceive+0x3ce>
      {
        errorcode = HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004a6c:	e01a      	b.n	8004aa4 <HAL_SPI_TransmitReceive+0x404>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f47f af5c 	bne.w	8004932 <HAL_SPI_TransmitReceive+0x292>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f47f af55 	bne.w	8004932 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a88:	69fa      	ldr	r2, [r7, #28]
 8004a8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 f946 	bl	8004d1e <SPI_EndRxTxTransaction>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d005      	beq.n	8004aa4 <HAL_SPI_TransmitReceive+0x404>
  {
    errorcode = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	661a      	str	r2, [r3, #96]	; 0x60
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004ab4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3728      	adds	r7, #40	; 0x28
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	603b      	str	r3, [r7, #0]
 8004acc:	4613      	mov	r3, r2
 8004ace:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ad0:	e04c      	b.n	8004b6c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad8:	d048      	beq.n	8004b6c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004ada:	f7fc fad5 	bl	8001088 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	1ad2      	subs	r2, r2, r3
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d202      	bcs.n	8004af0 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d13d      	bne.n	8004b6c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	6812      	ldr	r2, [r2, #0]
 8004af8:	6852      	ldr	r2, [r2, #4]
 8004afa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004afe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b08:	d111      	bne.n	8004b2e <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b12:	d004      	beq.n	8004b1e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b1c:	d107      	bne.n	8004b2e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	6812      	ldr	r2, [r2, #0]
 8004b26:	6812      	ldr	r2, [r2, #0]
 8004b28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b2c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b36:	d10f      	bne.n	8004b58 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	6812      	ldr	r2, [r2, #0]
 8004b40:	6812      	ldr	r2, [r2, #0]
 8004b42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	6812      	ldr	r2, [r2, #0]
 8004b50:	6812      	ldr	r2, [r2, #0]
 8004b52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b56:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e00f      	b.n	8004b8c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689a      	ldr	r2, [r3, #8]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	401a      	ands	r2, r3
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	bf0c      	ite	eq
 8004b7c:	2301      	moveq	r3, #1
 8004b7e:	2300      	movne	r3, #0
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	461a      	mov	r2, r3
 8004b84:	79fb      	ldrb	r3, [r7, #7]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d1a3      	bne.n	8004ad2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
 8004ba0:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004ba2:	e057      	b.n	8004c54 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004baa:	d106      	bne.n	8004bba <SPI_WaitFifoStateUntilTimeout+0x26>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d103      	bne.n	8004bba <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	330c      	adds	r3, #12
 8004bb8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc0:	d048      	beq.n	8004c54 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004bc2:	f7fc fa61 	bl	8001088 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	1ad2      	subs	r2, r2, r3
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d202      	bcs.n	8004bd8 <SPI_WaitFifoStateUntilTimeout+0x44>
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d13d      	bne.n	8004c54 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	6812      	ldr	r2, [r2, #0]
 8004be0:	6852      	ldr	r2, [r2, #4]
 8004be2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004be6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bf0:	d111      	bne.n	8004c16 <SPI_WaitFifoStateUntilTimeout+0x82>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bfa:	d004      	beq.n	8004c06 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c04:	d107      	bne.n	8004c16 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	6812      	ldr	r2, [r2, #0]
 8004c0e:	6812      	ldr	r2, [r2, #0]
 8004c10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c14:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c1e:	d10f      	bne.n	8004c40 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	6812      	ldr	r2, [r2, #0]
 8004c28:	6812      	ldr	r2, [r2, #0]
 8004c2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	6812      	ldr	r2, [r2, #0]
 8004c38:	6812      	ldr	r2, [r2, #0]
 8004c3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c3e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e008      	b.n	8004c66 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689a      	ldr	r2, [r3, #8]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	401a      	ands	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d19f      	bne.n	8004ba4 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b086      	sub	sp, #24
 8004c72:	af02      	add	r7, sp, #8
 8004c74:	60f8      	str	r0, [r7, #12]
 8004c76:	60b9      	str	r1, [r7, #8]
 8004c78:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c82:	d111      	bne.n	8004ca8 <SPI_EndRxTransaction+0x3a>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c8c:	d004      	beq.n	8004c98 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c96:	d107      	bne.n	8004ca8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	6812      	ldr	r2, [r2, #0]
 8004ca0:	6812      	ldr	r2, [r2, #0]
 8004ca2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ca6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	2180      	movs	r1, #128	; 0x80
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f7ff ff04 	bl	8004ac0 <SPI_WaitFlagStateUntilTimeout>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d007      	beq.n	8004cce <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cc2:	f043 0220 	orr.w	r2, r3, #32
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e023      	b.n	8004d16 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cd6:	d11d      	bne.n	8004d14 <SPI_EndRxTransaction+0xa6>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ce0:	d004      	beq.n	8004cec <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cea:	d113      	bne.n	8004d14 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f7ff ff4b 	bl	8004b94 <SPI_WaitFifoStateUntilTimeout>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d007      	beq.n	8004d14 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d08:	f043 0220 	orr.w	r2, r3, #32
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e000      	b.n	8004d16 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b086      	sub	sp, #24
 8004d22:	af02      	add	r7, sp, #8
 8004d24:	60f8      	str	r0, [r7, #12]
 8004d26:	60b9      	str	r1, [r7, #8]
 8004d28:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f7ff ff2c 	bl	8004b94 <SPI_WaitFifoStateUntilTimeout>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d007      	beq.n	8004d52 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d46:	f043 0220 	orr.w	r2, r3, #32
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e027      	b.n	8004da2 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	2180      	movs	r1, #128	; 0x80
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f7ff feaf 	bl	8004ac0 <SPI_WaitFlagStateUntilTimeout>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d007      	beq.n	8004d78 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d6c:	f043 0220 	orr.w	r2, r3, #32
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e014      	b.n	8004da2 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f7ff ff05 	bl	8004b94 <SPI_WaitFifoStateUntilTimeout>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d007      	beq.n	8004da0 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d94:	f043 0220 	orr.w	r2, r3, #32
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e000      	b.n	8004da2 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b082      	sub	sp, #8
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d101      	bne.n	8004dbc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e01d      	b.n	8004df8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d106      	bne.n	8004dd6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f007 fd0f 	bl	800c7f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2202      	movs	r2, #2
 8004dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	3304      	adds	r3, #4
 8004de6:	4619      	mov	r1, r3
 8004de8:	4610      	mov	r0, r2
 8004dea:	f000 fe3f 	bl	8005a6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6a1a      	ldr	r2, [r3, #32]
 8004e16:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10f      	bne.n	8004e40 <HAL_TIM_Base_DeInit+0x40>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6a1a      	ldr	r2, [r3, #32]
 8004e26:	f240 4344 	movw	r3, #1092	; 0x444
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d107      	bne.n	8004e40 <HAL_TIM_Base_DeInit+0x40>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6812      	ldr	r2, [r2, #0]
 8004e38:	6812      	ldr	r2, [r2, #0]
 8004e3a:	f022 0201 	bic.w	r2, r2, #1
 8004e3e:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f007 fd3b 	bl	800c8bc <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6a1a      	ldr	r2, [r3, #32]
 8004e76:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10f      	bne.n	8004ea0 <HAL_TIM_Base_Stop+0x40>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6a1a      	ldr	r2, [r3, #32]
 8004e86:	f240 4344 	movw	r3, #1092	; 0x444
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d107      	bne.n	8004ea0 <HAL_TIM_Base_Stop+0x40>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6812      	ldr	r2, [r2, #0]
 8004e98:	6812      	ldr	r2, [r2, #0]
 8004e9a:	f022 0201 	bic.w	r2, r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bc80      	pop	{r7}
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6812      	ldr	r2, [r2, #0]
 8004ec4:	68d2      	ldr	r2, [r2, #12]
 8004ec6:	f042 0201 	orr.w	r2, r2, #1
 8004eca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689a      	ldr	r2, [r3, #8]
 8004ed2:	4b0c      	ldr	r3, [pc, #48]	; (8004f04 <HAL_TIM_Base_Start_IT+0x50>)
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2b06      	cmp	r3, #6
 8004edc:	d00b      	beq.n	8004ef6 <HAL_TIM_Base_Start_IT+0x42>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee4:	d007      	beq.n	8004ef6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	6812      	ldr	r2, [r2, #0]
 8004eee:	6812      	ldr	r2, [r2, #0]
 8004ef0:	f042 0201 	orr.w	r2, r2, #1
 8004ef4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3714      	adds	r7, #20
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bc80      	pop	{r7}
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	00010007 	.word	0x00010007

08004f08 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	6812      	ldr	r2, [r2, #0]
 8004f18:	68d2      	ldr	r2, [r2, #12]
 8004f1a:	f022 0201 	bic.w	r2, r2, #1
 8004f1e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6a1a      	ldr	r2, [r3, #32]
 8004f26:	f241 1311 	movw	r3, #4369	; 0x1111
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10f      	bne.n	8004f50 <HAL_TIM_Base_Stop_IT+0x48>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6a1a      	ldr	r2, [r3, #32]
 8004f36:	f240 4344 	movw	r3, #1092	; 0x444
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d107      	bne.n	8004f50 <HAL_TIM_Base_Stop_IT+0x48>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6812      	ldr	r2, [r2, #0]
 8004f48:	6812      	ldr	r2, [r2, #0]
 8004f4a:	f022 0201 	bic.w	r2, r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bc80      	pop	{r7}
 8004f5a:	4770      	bx	lr

08004f5c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e01d      	b.n	8004faa <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d106      	bne.n	8004f88 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f815 	bl	8004fb2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3304      	adds	r3, #4
 8004f98:	4619      	mov	r1, r3
 8004f9a:	4610      	mov	r0, r2
 8004f9c:	f000 fd66 	bl	8005a6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b083      	sub	sp, #12
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bc80      	pop	{r7}
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	2b0c      	cmp	r3, #12
 8004fd2:	d841      	bhi.n	8005058 <HAL_TIM_OC_Start_IT+0x94>
 8004fd4:	a201      	add	r2, pc, #4	; (adr r2, 8004fdc <HAL_TIM_OC_Start_IT+0x18>)
 8004fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fda:	bf00      	nop
 8004fdc:	08005011 	.word	0x08005011
 8004fe0:	08005059 	.word	0x08005059
 8004fe4:	08005059 	.word	0x08005059
 8004fe8:	08005059 	.word	0x08005059
 8004fec:	08005023 	.word	0x08005023
 8004ff0:	08005059 	.word	0x08005059
 8004ff4:	08005059 	.word	0x08005059
 8004ff8:	08005059 	.word	0x08005059
 8004ffc:	08005035 	.word	0x08005035
 8005000:	08005059 	.word	0x08005059
 8005004:	08005059 	.word	0x08005059
 8005008:	08005059 	.word	0x08005059
 800500c:	08005047 	.word	0x08005047
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6812      	ldr	r2, [r2, #0]
 8005018:	68d2      	ldr	r2, [r2, #12]
 800501a:	f042 0202 	orr.w	r2, r2, #2
 800501e:	60da      	str	r2, [r3, #12]
      break;
 8005020:	e01b      	b.n	800505a <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	6812      	ldr	r2, [r2, #0]
 800502a:	68d2      	ldr	r2, [r2, #12]
 800502c:	f042 0204 	orr.w	r2, r2, #4
 8005030:	60da      	str	r2, [r3, #12]
      break;
 8005032:	e012      	b.n	800505a <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	6812      	ldr	r2, [r2, #0]
 800503c:	68d2      	ldr	r2, [r2, #12]
 800503e:	f042 0208 	orr.w	r2, r2, #8
 8005042:	60da      	str	r2, [r3, #12]
      break;
 8005044:	e009      	b.n	800505a <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	6812      	ldr	r2, [r2, #0]
 800504e:	68d2      	ldr	r2, [r2, #12]
 8005050:	f042 0210 	orr.w	r2, r2, #16
 8005054:	60da      	str	r2, [r3, #12]
      break;
 8005056:	e000      	b.n	800505a <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8005058:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2201      	movs	r2, #1
 8005060:	6839      	ldr	r1, [r7, #0]
 8005062:	4618      	mov	r0, r3
 8005064:	f001 faa7 	bl	80065b6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a1e      	ldr	r2, [pc, #120]	; (80050e8 <HAL_TIM_OC_Start_IT+0x124>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d013      	beq.n	800509a <HAL_TIM_OC_Start_IT+0xd6>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a1d      	ldr	r2, [pc, #116]	; (80050ec <HAL_TIM_OC_Start_IT+0x128>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d00e      	beq.n	800509a <HAL_TIM_OC_Start_IT+0xd6>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a1b      	ldr	r2, [pc, #108]	; (80050f0 <HAL_TIM_OC_Start_IT+0x12c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d009      	beq.n	800509a <HAL_TIM_OC_Start_IT+0xd6>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a1a      	ldr	r2, [pc, #104]	; (80050f4 <HAL_TIM_OC_Start_IT+0x130>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d004      	beq.n	800509a <HAL_TIM_OC_Start_IT+0xd6>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a18      	ldr	r2, [pc, #96]	; (80050f8 <HAL_TIM_OC_Start_IT+0x134>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d101      	bne.n	800509e <HAL_TIM_OC_Start_IT+0xda>
 800509a:	2301      	movs	r3, #1
 800509c:	e000      	b.n	80050a0 <HAL_TIM_OC_Start_IT+0xdc>
 800509e:	2300      	movs	r3, #0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d007      	beq.n	80050b4 <HAL_TIM_OC_Start_IT+0xf0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	6812      	ldr	r2, [r2, #0]
 80050ac:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80050ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050b2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689a      	ldr	r2, [r3, #8]
 80050ba:	4b10      	ldr	r3, [pc, #64]	; (80050fc <HAL_TIM_OC_Start_IT+0x138>)
 80050bc:	4013      	ands	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2b06      	cmp	r3, #6
 80050c4:	d00b      	beq.n	80050de <HAL_TIM_OC_Start_IT+0x11a>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050cc:	d007      	beq.n	80050de <HAL_TIM_OC_Start_IT+0x11a>
  {
    __HAL_TIM_ENABLE(htim);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	6812      	ldr	r2, [r2, #0]
 80050d6:	6812      	ldr	r2, [r2, #0]
 80050d8:	f042 0201 	orr.w	r2, r2, #1
 80050dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	40012c00 	.word	0x40012c00
 80050ec:	40013400 	.word	0x40013400
 80050f0:	40014000 	.word	0x40014000
 80050f4:	40014400 	.word	0x40014400
 80050f8:	40014800 	.word	0x40014800
 80050fc:	00010007 	.word	0x00010007

08005100 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2b0c      	cmp	r3, #12
 800510e:	d841      	bhi.n	8005194 <HAL_TIM_OC_Stop_IT+0x94>
 8005110:	a201      	add	r2, pc, #4	; (adr r2, 8005118 <HAL_TIM_OC_Stop_IT+0x18>)
 8005112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005116:	bf00      	nop
 8005118:	0800514d 	.word	0x0800514d
 800511c:	08005195 	.word	0x08005195
 8005120:	08005195 	.word	0x08005195
 8005124:	08005195 	.word	0x08005195
 8005128:	0800515f 	.word	0x0800515f
 800512c:	08005195 	.word	0x08005195
 8005130:	08005195 	.word	0x08005195
 8005134:	08005195 	.word	0x08005195
 8005138:	08005171 	.word	0x08005171
 800513c:	08005195 	.word	0x08005195
 8005140:	08005195 	.word	0x08005195
 8005144:	08005195 	.word	0x08005195
 8005148:	08005183 	.word	0x08005183
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	6812      	ldr	r2, [r2, #0]
 8005154:	68d2      	ldr	r2, [r2, #12]
 8005156:	f022 0202 	bic.w	r2, r2, #2
 800515a:	60da      	str	r2, [r3, #12]
      break;
 800515c:	e01b      	b.n	8005196 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6812      	ldr	r2, [r2, #0]
 8005166:	68d2      	ldr	r2, [r2, #12]
 8005168:	f022 0204 	bic.w	r2, r2, #4
 800516c:	60da      	str	r2, [r3, #12]
      break;
 800516e:	e012      	b.n	8005196 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	6812      	ldr	r2, [r2, #0]
 8005178:	68d2      	ldr	r2, [r2, #12]
 800517a:	f022 0208 	bic.w	r2, r2, #8
 800517e:	60da      	str	r2, [r3, #12]
      break;
 8005180:	e009      	b.n	8005196 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	6812      	ldr	r2, [r2, #0]
 800518a:	68d2      	ldr	r2, [r2, #12]
 800518c:	f022 0210 	bic.w	r2, r2, #16
 8005190:	60da      	str	r2, [r3, #12]
      break;
 8005192:	e000      	b.n	8005196 <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 8005194:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2200      	movs	r2, #0
 800519c:	6839      	ldr	r1, [r7, #0]
 800519e:	4618      	mov	r0, r3
 80051a0:	f001 fa09 	bl	80065b6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a28      	ldr	r2, [pc, #160]	; (800524c <HAL_TIM_OC_Stop_IT+0x14c>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d013      	beq.n	80051d6 <HAL_TIM_OC_Stop_IT+0xd6>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a27      	ldr	r2, [pc, #156]	; (8005250 <HAL_TIM_OC_Stop_IT+0x150>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d00e      	beq.n	80051d6 <HAL_TIM_OC_Stop_IT+0xd6>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a25      	ldr	r2, [pc, #148]	; (8005254 <HAL_TIM_OC_Stop_IT+0x154>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d009      	beq.n	80051d6 <HAL_TIM_OC_Stop_IT+0xd6>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a24      	ldr	r2, [pc, #144]	; (8005258 <HAL_TIM_OC_Stop_IT+0x158>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d004      	beq.n	80051d6 <HAL_TIM_OC_Stop_IT+0xd6>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a22      	ldr	r2, [pc, #136]	; (800525c <HAL_TIM_OC_Stop_IT+0x15c>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d101      	bne.n	80051da <HAL_TIM_OC_Stop_IT+0xda>
 80051d6:	2301      	movs	r3, #1
 80051d8:	e000      	b.n	80051dc <HAL_TIM_OC_Stop_IT+0xdc>
 80051da:	2300      	movs	r3, #0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d017      	beq.n	8005210 <HAL_TIM_OC_Stop_IT+0x110>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6a1a      	ldr	r2, [r3, #32]
 80051e6:	f241 1311 	movw	r3, #4369	; 0x1111
 80051ea:	4013      	ands	r3, r2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10f      	bne.n	8005210 <HAL_TIM_OC_Stop_IT+0x110>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6a1a      	ldr	r2, [r3, #32]
 80051f6:	f240 4344 	movw	r3, #1092	; 0x444
 80051fa:	4013      	ands	r3, r2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d107      	bne.n	8005210 <HAL_TIM_OC_Stop_IT+0x110>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	6812      	ldr	r2, [r2, #0]
 8005208:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800520a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800520e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6a1a      	ldr	r2, [r3, #32]
 8005216:	f241 1311 	movw	r3, #4369	; 0x1111
 800521a:	4013      	ands	r3, r2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10f      	bne.n	8005240 <HAL_TIM_OC_Stop_IT+0x140>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6a1a      	ldr	r2, [r3, #32]
 8005226:	f240 4344 	movw	r3, #1092	; 0x444
 800522a:	4013      	ands	r3, r2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d107      	bne.n	8005240 <HAL_TIM_OC_Stop_IT+0x140>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	6812      	ldr	r2, [r2, #0]
 8005238:	6812      	ldr	r2, [r2, #0]
 800523a:	f022 0201 	bic.w	r2, r2, #1
 800523e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	40012c00 	.word	0x40012c00
 8005250:	40013400 	.word	0x40013400
 8005254:	40014000 	.word	0x40014000
 8005258:	40014400 	.word	0x40014400
 800525c:	40014800 	.word	0x40014800

08005260 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e01d      	b.n	80052ae <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005278:	b2db      	uxtb	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d106      	bne.n	800528c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f815 	bl	80052b6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2202      	movs	r2, #2
 8005290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	3304      	adds	r3, #4
 800529c:	4619      	mov	r1, r3
 800529e:	4610      	mov	r0, r2
 80052a0:	f000 fbe4 	bl	8005a6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3708      	adds	r7, #8
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b083      	sub	sp, #12
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80052be:	bf00      	nop
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bc80      	pop	{r7}
 80052c6:	4770      	bx	lr

080052c8 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	2b0c      	cmp	r3, #12
 80052d6:	d841      	bhi.n	800535c <HAL_TIM_IC_Stop_IT+0x94>
 80052d8:	a201      	add	r2, pc, #4	; (adr r2, 80052e0 <HAL_TIM_IC_Stop_IT+0x18>)
 80052da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052de:	bf00      	nop
 80052e0:	08005315 	.word	0x08005315
 80052e4:	0800535d 	.word	0x0800535d
 80052e8:	0800535d 	.word	0x0800535d
 80052ec:	0800535d 	.word	0x0800535d
 80052f0:	08005327 	.word	0x08005327
 80052f4:	0800535d 	.word	0x0800535d
 80052f8:	0800535d 	.word	0x0800535d
 80052fc:	0800535d 	.word	0x0800535d
 8005300:	08005339 	.word	0x08005339
 8005304:	0800535d 	.word	0x0800535d
 8005308:	0800535d 	.word	0x0800535d
 800530c:	0800535d 	.word	0x0800535d
 8005310:	0800534b 	.word	0x0800534b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	6812      	ldr	r2, [r2, #0]
 800531c:	68d2      	ldr	r2, [r2, #12]
 800531e:	f022 0202 	bic.w	r2, r2, #2
 8005322:	60da      	str	r2, [r3, #12]
      break;
 8005324:	e01b      	b.n	800535e <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	6812      	ldr	r2, [r2, #0]
 800532e:	68d2      	ldr	r2, [r2, #12]
 8005330:	f022 0204 	bic.w	r2, r2, #4
 8005334:	60da      	str	r2, [r3, #12]
      break;
 8005336:	e012      	b.n	800535e <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	6812      	ldr	r2, [r2, #0]
 8005340:	68d2      	ldr	r2, [r2, #12]
 8005342:	f022 0208 	bic.w	r2, r2, #8
 8005346:	60da      	str	r2, [r3, #12]
      break;
 8005348:	e009      	b.n	800535e <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	6812      	ldr	r2, [r2, #0]
 8005352:	68d2      	ldr	r2, [r2, #12]
 8005354:	f022 0210 	bic.w	r2, r2, #16
 8005358:	60da      	str	r2, [r3, #12]
      break;
 800535a:	e000      	b.n	800535e <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 800535c:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2200      	movs	r2, #0
 8005364:	6839      	ldr	r1, [r7, #0]
 8005366:	4618      	mov	r0, r3
 8005368:	f001 f925 	bl	80065b6 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6a1a      	ldr	r2, [r3, #32]
 8005372:	f241 1311 	movw	r3, #4369	; 0x1111
 8005376:	4013      	ands	r3, r2
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10f      	bne.n	800539c <HAL_TIM_IC_Stop_IT+0xd4>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6a1a      	ldr	r2, [r3, #32]
 8005382:	f240 4344 	movw	r3, #1092	; 0x444
 8005386:	4013      	ands	r3, r2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d107      	bne.n	800539c <HAL_TIM_IC_Stop_IT+0xd4>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6812      	ldr	r2, [r2, #0]
 8005394:	6812      	ldr	r2, [r2, #0]
 8005396:	f022 0201 	bic.w	r2, r2, #1
 800539a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3708      	adds	r7, #8
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop

080053a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d122      	bne.n	8005404 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d11b      	bne.n	8005404 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f06f 0202 	mvn.w	r2, #2
 80053d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	f003 0303 	and.w	r3, r3, #3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fb23 	bl	8005a36 <HAL_TIM_IC_CaptureCallback>
 80053f0:	e005      	b.n	80053fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 fb16 	bl	8005a24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 fb25 	bl	8005a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	f003 0304 	and.w	r3, r3, #4
 800540e:	2b04      	cmp	r3, #4
 8005410:	d122      	bne.n	8005458 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	f003 0304 	and.w	r3, r3, #4
 800541c:	2b04      	cmp	r3, #4
 800541e:	d11b      	bne.n	8005458 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f06f 0204 	mvn.w	r2, #4
 8005428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2202      	movs	r2, #2
 800542e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 faf9 	bl	8005a36 <HAL_TIM_IC_CaptureCallback>
 8005444:	e005      	b.n	8005452 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 faec 	bl	8005a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 fafb 	bl	8005a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	f003 0308 	and.w	r3, r3, #8
 8005462:	2b08      	cmp	r3, #8
 8005464:	d122      	bne.n	80054ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	f003 0308 	and.w	r3, r3, #8
 8005470:	2b08      	cmp	r3, #8
 8005472:	d11b      	bne.n	80054ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f06f 0208 	mvn.w	r2, #8
 800547c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2204      	movs	r2, #4
 8005482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	f003 0303 	and.w	r3, r3, #3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d003      	beq.n	800549a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 facf 	bl	8005a36 <HAL_TIM_IC_CaptureCallback>
 8005498:	e005      	b.n	80054a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 fac2 	bl	8005a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 fad1 	bl	8005a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	f003 0310 	and.w	r3, r3, #16
 80054b6:	2b10      	cmp	r3, #16
 80054b8:	d122      	bne.n	8005500 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	f003 0310 	and.w	r3, r3, #16
 80054c4:	2b10      	cmp	r3, #16
 80054c6:	d11b      	bne.n	8005500 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f06f 0210 	mvn.w	r2, #16
 80054d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2208      	movs	r2, #8
 80054d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	69db      	ldr	r3, [r3, #28]
 80054de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d003      	beq.n	80054ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 faa5 	bl	8005a36 <HAL_TIM_IC_CaptureCallback>
 80054ec:	e005      	b.n	80054fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fa98 	bl	8005a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 faa7 	bl	8005a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	2b01      	cmp	r3, #1
 800550c:	d10e      	bne.n	800552c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	2b01      	cmp	r3, #1
 800551a:	d107      	bne.n	800552c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f06f 0201 	mvn.w	r2, #1
 8005524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 fa73 	bl	8005a12 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005536:	2b80      	cmp	r3, #128	; 0x80
 8005538:	d10e      	bne.n	8005558 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005544:	2b80      	cmp	r3, #128	; 0x80
 8005546:	d107      	bne.n	8005558 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f001 f937 	bl	80067c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005566:	d10e      	bne.n	8005586 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005572:	2b80      	cmp	r3, #128	; 0x80
 8005574:	d107      	bne.n	8005586 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800557e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f001 f929 	bl	80067d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005590:	2b40      	cmp	r3, #64	; 0x40
 8005592:	d10e      	bne.n	80055b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800559e:	2b40      	cmp	r3, #64	; 0x40
 80055a0:	d107      	bne.n	80055b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 fa54 	bl	8005a5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	f003 0320 	and.w	r3, r3, #32
 80055bc:	2b20      	cmp	r3, #32
 80055be:	d10e      	bne.n	80055de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	f003 0320 	and.w	r3, r3, #32
 80055ca:	2b20      	cmp	r3, #32
 80055cc:	d107      	bne.n	80055de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f06f 0220 	mvn.w	r2, #32
 80055d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f001 f8eb 	bl	80067b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055de:	bf00      	nop
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
	...

080055e8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d101      	bne.n	8005602 <HAL_TIM_OC_ConfigChannel+0x1a>
 80055fe:	2302      	movs	r3, #2
 8005600:	e06c      	b.n	80056dc <HAL_TIM_OC_ConfigChannel+0xf4>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2202      	movs	r2, #2
 800560e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b14      	cmp	r3, #20
 8005616:	d857      	bhi.n	80056c8 <HAL_TIM_OC_ConfigChannel+0xe0>
 8005618:	a201      	add	r2, pc, #4	; (adr r2, 8005620 <HAL_TIM_OC_ConfigChannel+0x38>)
 800561a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561e:	bf00      	nop
 8005620:	08005675 	.word	0x08005675
 8005624:	080056c9 	.word	0x080056c9
 8005628:	080056c9 	.word	0x080056c9
 800562c:	080056c9 	.word	0x080056c9
 8005630:	08005683 	.word	0x08005683
 8005634:	080056c9 	.word	0x080056c9
 8005638:	080056c9 	.word	0x080056c9
 800563c:	080056c9 	.word	0x080056c9
 8005640:	08005691 	.word	0x08005691
 8005644:	080056c9 	.word	0x080056c9
 8005648:	080056c9 	.word	0x080056c9
 800564c:	080056c9 	.word	0x080056c9
 8005650:	0800569f 	.word	0x0800569f
 8005654:	080056c9 	.word	0x080056c9
 8005658:	080056c9 	.word	0x080056c9
 800565c:	080056c9 	.word	0x080056c9
 8005660:	080056ad 	.word	0x080056ad
 8005664:	080056c9 	.word	0x080056c9
 8005668:	080056c9 	.word	0x080056c9
 800566c:	080056c9 	.word	0x080056c9
 8005670:	080056bb 	.word	0x080056bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68b9      	ldr	r1, [r7, #8]
 800567a:	4618      	mov	r0, r3
 800567c:	f000 fa8e 	bl	8005b9c <TIM_OC1_SetConfig>
      break;
 8005680:	e023      	b.n	80056ca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68b9      	ldr	r1, [r7, #8]
 8005688:	4618      	mov	r0, r3
 800568a:	f000 fb17 	bl	8005cbc <TIM_OC2_SetConfig>
      break;
 800568e:	e01c      	b.n	80056ca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68b9      	ldr	r1, [r7, #8]
 8005696:	4618      	mov	r0, r3
 8005698:	f000 fb98 	bl	8005dcc <TIM_OC3_SetConfig>
      break;
 800569c:	e015      	b.n	80056ca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68b9      	ldr	r1, [r7, #8]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f000 fc19 	bl	8005edc <TIM_OC4_SetConfig>
      break;
 80056aa:	e00e      	b.n	80056ca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68b9      	ldr	r1, [r7, #8]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 fc7a 	bl	8005fac <TIM_OC5_SetConfig>
      break;
 80056b8:	e007      	b.n	80056ca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68b9      	ldr	r1, [r7, #8]
 80056c0:	4618      	mov	r0, r3
 80056c2:	f000 fcd7 	bl	8006074 <TIM_OC6_SetConfig>
      break;
 80056c6:	e000      	b.n	80056ca <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      break;
 80056c8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d101      	bne.n	80056fe <HAL_TIM_IC_ConfigChannel+0x1a>
 80056fa:	2302      	movs	r3, #2
 80056fc:	e08a      	b.n	8005814 <HAL_TIM_IC_ConfigChannel+0x130>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2202      	movs	r2, #2
 800570a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d11b      	bne.n	800574c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6818      	ldr	r0, [r3, #0]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	6819      	ldr	r1, [r3, #0]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f000 fd92 	bl	800624c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	6812      	ldr	r2, [r2, #0]
 8005730:	6992      	ldr	r2, [r2, #24]
 8005732:	f022 020c 	bic.w	r2, r2, #12
 8005736:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	6812      	ldr	r2, [r2, #0]
 8005740:	6991      	ldr	r1, [r2, #24]
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	6892      	ldr	r2, [r2, #8]
 8005746:	430a      	orrs	r2, r1
 8005748:	619a      	str	r2, [r3, #24]
 800574a:	e05a      	b.n	8005802 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b04      	cmp	r3, #4
 8005750:	d11c      	bne.n	800578c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6818      	ldr	r0, [r3, #0]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	6819      	ldr	r1, [r3, #0]
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	f000 fe0d 	bl	8006380 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	6812      	ldr	r2, [r2, #0]
 800576e:	6992      	ldr	r2, [r2, #24]
 8005770:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005774:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	6812      	ldr	r2, [r2, #0]
 800577e:	6991      	ldr	r1, [r2, #24]
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	6892      	ldr	r2, [r2, #8]
 8005784:	0212      	lsls	r2, r2, #8
 8005786:	430a      	orrs	r2, r1
 8005788:	619a      	str	r2, [r3, #24]
 800578a:	e03a      	b.n	8005802 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b08      	cmp	r3, #8
 8005790:	d11b      	bne.n	80057ca <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6818      	ldr	r0, [r3, #0]
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	6819      	ldr	r1, [r3, #0]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	685a      	ldr	r2, [r3, #4]
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	f000 fe58 	bl	8006456 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	6812      	ldr	r2, [r2, #0]
 80057ae:	69d2      	ldr	r2, [r2, #28]
 80057b0:	f022 020c 	bic.w	r2, r2, #12
 80057b4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	6812      	ldr	r2, [r2, #0]
 80057be:	69d1      	ldr	r1, [r2, #28]
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	6892      	ldr	r2, [r2, #8]
 80057c4:	430a      	orrs	r2, r1
 80057c6:	61da      	str	r2, [r3, #28]
 80057c8:	e01b      	b.n	8005802 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6818      	ldr	r0, [r3, #0]
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	6819      	ldr	r1, [r3, #0]
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	f000 fe77 	bl	80064cc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	6812      	ldr	r2, [r2, #0]
 80057e6:	69d2      	ldr	r2, [r2, #28]
 80057e8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80057ec:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	6812      	ldr	r2, [r2, #0]
 80057f6:	69d1      	ldr	r1, [r2, #28]
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	6892      	ldr	r2, [r2, #8]
 80057fc:	0212      	lsls	r2, r2, #8
 80057fe:	430a      	orrs	r2, r1
 8005800:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800582c:	2b01      	cmp	r3, #1
 800582e:	d101      	bne.n	8005834 <HAL_TIM_ConfigClockSource+0x18>
 8005830:	2302      	movs	r3, #2
 8005832:	e0a8      	b.n	8005986 <HAL_TIM_ConfigClockSource+0x16a>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2202      	movs	r2, #2
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005852:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005856:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800585e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2b40      	cmp	r3, #64	; 0x40
 800586e:	d067      	beq.n	8005940 <HAL_TIM_ConfigClockSource+0x124>
 8005870:	2b40      	cmp	r3, #64	; 0x40
 8005872:	d80b      	bhi.n	800588c <HAL_TIM_ConfigClockSource+0x70>
 8005874:	2b10      	cmp	r3, #16
 8005876:	d073      	beq.n	8005960 <HAL_TIM_ConfigClockSource+0x144>
 8005878:	2b10      	cmp	r3, #16
 800587a:	d802      	bhi.n	8005882 <HAL_TIM_ConfigClockSource+0x66>
 800587c:	2b00      	cmp	r3, #0
 800587e:	d06f      	beq.n	8005960 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005880:	e078      	b.n	8005974 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005882:	2b20      	cmp	r3, #32
 8005884:	d06c      	beq.n	8005960 <HAL_TIM_ConfigClockSource+0x144>
 8005886:	2b30      	cmp	r3, #48	; 0x30
 8005888:	d06a      	beq.n	8005960 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800588a:	e073      	b.n	8005974 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800588c:	2b70      	cmp	r3, #112	; 0x70
 800588e:	d00d      	beq.n	80058ac <HAL_TIM_ConfigClockSource+0x90>
 8005890:	2b70      	cmp	r3, #112	; 0x70
 8005892:	d804      	bhi.n	800589e <HAL_TIM_ConfigClockSource+0x82>
 8005894:	2b50      	cmp	r3, #80	; 0x50
 8005896:	d033      	beq.n	8005900 <HAL_TIM_ConfigClockSource+0xe4>
 8005898:	2b60      	cmp	r3, #96	; 0x60
 800589a:	d041      	beq.n	8005920 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800589c:	e06a      	b.n	8005974 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800589e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a2:	d066      	beq.n	8005972 <HAL_TIM_ConfigClockSource+0x156>
 80058a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058a8:	d017      	beq.n	80058da <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80058aa:	e063      	b.n	8005974 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6818      	ldr	r0, [r3, #0]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	6899      	ldr	r1, [r3, #8]
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	f000 fe5c 	bl	8006578 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058ce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	609a      	str	r2, [r3, #8]
      break;
 80058d8:	e04c      	b.n	8005974 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6818      	ldr	r0, [r3, #0]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	6899      	ldr	r1, [r3, #8]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	f000 fe45 	bl	8006578 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	6812      	ldr	r2, [r2, #0]
 80058f6:	6892      	ldr	r2, [r2, #8]
 80058f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058fc:	609a      	str	r2, [r3, #8]
      break;
 80058fe:	e039      	b.n	8005974 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6818      	ldr	r0, [r3, #0]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	6859      	ldr	r1, [r3, #4]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	461a      	mov	r2, r3
 800590e:	f000 fd09 	bl	8006324 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2150      	movs	r1, #80	; 0x50
 8005918:	4618      	mov	r0, r3
 800591a:	f000 fe13 	bl	8006544 <TIM_ITRx_SetConfig>
      break;
 800591e:	e029      	b.n	8005974 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6818      	ldr	r0, [r3, #0]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	6859      	ldr	r1, [r3, #4]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	461a      	mov	r2, r3
 800592e:	f000 fd63 	bl	80063f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2160      	movs	r1, #96	; 0x60
 8005938:	4618      	mov	r0, r3
 800593a:	f000 fe03 	bl	8006544 <TIM_ITRx_SetConfig>
      break;
 800593e:	e019      	b.n	8005974 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6818      	ldr	r0, [r3, #0]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	6859      	ldr	r1, [r3, #4]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	461a      	mov	r2, r3
 800594e:	f000 fce9 	bl	8006324 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2140      	movs	r1, #64	; 0x40
 8005958:	4618      	mov	r0, r3
 800595a:	f000 fdf3 	bl	8006544 <TIM_ITRx_SetConfig>
      break;
 800595e:	e009      	b.n	8005974 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4619      	mov	r1, r3
 800596a:	4610      	mov	r0, r2
 800596c:	f000 fdea 	bl	8006544 <TIM_ITRx_SetConfig>
      break;
 8005970:	e000      	b.n	8005974 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8005972:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b082      	sub	sp, #8
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
 8005996:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d101      	bne.n	80059a6 <HAL_TIM_SlaveConfigSynchro+0x18>
 80059a2:	2302      	movs	r3, #2
 80059a4:	e031      	b.n	8005a0a <HAL_TIM_SlaveConfigSynchro+0x7c>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2202      	movs	r2, #2
 80059b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80059b6:	6839      	ldr	r1, [r7, #0]
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 fbbf 	bl	800613c <TIM_SlaveTimer_SetConfig>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d009      	beq.n	80059d8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e018      	b.n	8005a0a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	6812      	ldr	r2, [r2, #0]
 80059e0:	68d2      	ldr	r2, [r2, #12]
 80059e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059e6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	6812      	ldr	r2, [r2, #0]
 80059f0:	68d2      	ldr	r2, [r2, #12]
 80059f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80059f6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b083      	sub	sp, #12
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005a1a:	bf00      	nop
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bc80      	pop	{r7}
 8005a22:	4770      	bx	lr

08005a24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bc80      	pop	{r7}
 8005a34:	4770      	bx	lr

08005a36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b083      	sub	sp, #12
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a3e:	bf00      	nop
 8005a40:	370c      	adds	r7, #12
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bc80      	pop	{r7}
 8005a46:	4770      	bx	lr

08005a48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bc80      	pop	{r7}
 8005a58:	4770      	bx	lr

08005a5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a62:	bf00      	nop
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bc80      	pop	{r7}
 8005a6a:	4770      	bx	lr

08005a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a3f      	ldr	r2, [pc, #252]	; (8005b7c <TIM_Base_SetConfig+0x110>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d013      	beq.n	8005aac <TIM_Base_SetConfig+0x40>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a8a:	d00f      	beq.n	8005aac <TIM_Base_SetConfig+0x40>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a3c      	ldr	r2, [pc, #240]	; (8005b80 <TIM_Base_SetConfig+0x114>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d00b      	beq.n	8005aac <TIM_Base_SetConfig+0x40>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a3b      	ldr	r2, [pc, #236]	; (8005b84 <TIM_Base_SetConfig+0x118>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d007      	beq.n	8005aac <TIM_Base_SetConfig+0x40>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a3a      	ldr	r2, [pc, #232]	; (8005b88 <TIM_Base_SetConfig+0x11c>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d003      	beq.n	8005aac <TIM_Base_SetConfig+0x40>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a39      	ldr	r2, [pc, #228]	; (8005b8c <TIM_Base_SetConfig+0x120>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d108      	bne.n	8005abe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a2e      	ldr	r2, [pc, #184]	; (8005b7c <TIM_Base_SetConfig+0x110>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d01f      	beq.n	8005b06 <TIM_Base_SetConfig+0x9a>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005acc:	d01b      	beq.n	8005b06 <TIM_Base_SetConfig+0x9a>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a2b      	ldr	r2, [pc, #172]	; (8005b80 <TIM_Base_SetConfig+0x114>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d017      	beq.n	8005b06 <TIM_Base_SetConfig+0x9a>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a2a      	ldr	r2, [pc, #168]	; (8005b84 <TIM_Base_SetConfig+0x118>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d013      	beq.n	8005b06 <TIM_Base_SetConfig+0x9a>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a29      	ldr	r2, [pc, #164]	; (8005b88 <TIM_Base_SetConfig+0x11c>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d00f      	beq.n	8005b06 <TIM_Base_SetConfig+0x9a>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a28      	ldr	r2, [pc, #160]	; (8005b8c <TIM_Base_SetConfig+0x120>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d00b      	beq.n	8005b06 <TIM_Base_SetConfig+0x9a>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a27      	ldr	r2, [pc, #156]	; (8005b90 <TIM_Base_SetConfig+0x124>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d007      	beq.n	8005b06 <TIM_Base_SetConfig+0x9a>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a26      	ldr	r2, [pc, #152]	; (8005b94 <TIM_Base_SetConfig+0x128>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d003      	beq.n	8005b06 <TIM_Base_SetConfig+0x9a>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a25      	ldr	r2, [pc, #148]	; (8005b98 <TIM_Base_SetConfig+0x12c>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d108      	bne.n	8005b18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	689a      	ldr	r2, [r3, #8]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a0f      	ldr	r2, [pc, #60]	; (8005b7c <TIM_Base_SetConfig+0x110>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d00f      	beq.n	8005b64 <TIM_Base_SetConfig+0xf8>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a11      	ldr	r2, [pc, #68]	; (8005b8c <TIM_Base_SetConfig+0x120>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d00b      	beq.n	8005b64 <TIM_Base_SetConfig+0xf8>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a10      	ldr	r2, [pc, #64]	; (8005b90 <TIM_Base_SetConfig+0x124>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d007      	beq.n	8005b64 <TIM_Base_SetConfig+0xf8>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a0f      	ldr	r2, [pc, #60]	; (8005b94 <TIM_Base_SetConfig+0x128>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d003      	beq.n	8005b64 <TIM_Base_SetConfig+0xf8>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a0e      	ldr	r2, [pc, #56]	; (8005b98 <TIM_Base_SetConfig+0x12c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d103      	bne.n	8005b6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	691a      	ldr	r2, [r3, #16]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	615a      	str	r2, [r3, #20]
}
 8005b72:	bf00      	nop
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bc80      	pop	{r7}
 8005b7a:	4770      	bx	lr
 8005b7c:	40012c00 	.word	0x40012c00
 8005b80:	40000400 	.word	0x40000400
 8005b84:	40000800 	.word	0x40000800
 8005b88:	40000c00 	.word	0x40000c00
 8005b8c:	40013400 	.word	0x40013400
 8005b90:	40014000 	.word	0x40014000
 8005b94:	40014400 	.word	0x40014400
 8005b98:	40014800 	.word	0x40014800

08005b9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	f023 0201 	bic.w	r2, r3, #1
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f023 0303 	bic.w	r3, r3, #3
 8005bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f023 0302 	bic.w	r3, r3, #2
 8005be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a2c      	ldr	r2, [pc, #176]	; (8005ca8 <TIM_OC1_SetConfig+0x10c>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d00f      	beq.n	8005c1c <TIM_OC1_SetConfig+0x80>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a2b      	ldr	r2, [pc, #172]	; (8005cac <TIM_OC1_SetConfig+0x110>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d00b      	beq.n	8005c1c <TIM_OC1_SetConfig+0x80>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a2a      	ldr	r2, [pc, #168]	; (8005cb0 <TIM_OC1_SetConfig+0x114>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d007      	beq.n	8005c1c <TIM_OC1_SetConfig+0x80>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a29      	ldr	r2, [pc, #164]	; (8005cb4 <TIM_OC1_SetConfig+0x118>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d003      	beq.n	8005c1c <TIM_OC1_SetConfig+0x80>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a28      	ldr	r2, [pc, #160]	; (8005cb8 <TIM_OC1_SetConfig+0x11c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d10c      	bne.n	8005c36 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	f023 0308 	bic.w	r3, r3, #8
 8005c22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	f023 0304 	bic.w	r3, r3, #4
 8005c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a1b      	ldr	r2, [pc, #108]	; (8005ca8 <TIM_OC1_SetConfig+0x10c>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d00f      	beq.n	8005c5e <TIM_OC1_SetConfig+0xc2>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a1a      	ldr	r2, [pc, #104]	; (8005cac <TIM_OC1_SetConfig+0x110>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d00b      	beq.n	8005c5e <TIM_OC1_SetConfig+0xc2>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a19      	ldr	r2, [pc, #100]	; (8005cb0 <TIM_OC1_SetConfig+0x114>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d007      	beq.n	8005c5e <TIM_OC1_SetConfig+0xc2>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a18      	ldr	r2, [pc, #96]	; (8005cb4 <TIM_OC1_SetConfig+0x118>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d003      	beq.n	8005c5e <TIM_OC1_SetConfig+0xc2>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a17      	ldr	r2, [pc, #92]	; (8005cb8 <TIM_OC1_SetConfig+0x11c>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d111      	bne.n	8005c82 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	621a      	str	r2, [r3, #32]
}
 8005c9c:	bf00      	nop
 8005c9e:	371c      	adds	r7, #28
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bc80      	pop	{r7}
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	40012c00 	.word	0x40012c00
 8005cac:	40013400 	.word	0x40013400
 8005cb0:	40014000 	.word	0x40014000
 8005cb4:	40014400 	.word	0x40014400
 8005cb8:	40014800 	.word	0x40014800

08005cbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	f023 0210 	bic.w	r2, r3, #16
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	021b      	lsls	r3, r3, #8
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f023 0320 	bic.w	r3, r3, #32
 8005d0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	011b      	lsls	r3, r3, #4
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a27      	ldr	r2, [pc, #156]	; (8005db8 <TIM_OC2_SetConfig+0xfc>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d003      	beq.n	8005d28 <TIM_OC2_SetConfig+0x6c>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a26      	ldr	r2, [pc, #152]	; (8005dbc <TIM_OC2_SetConfig+0x100>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d10d      	bne.n	8005d44 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	011b      	lsls	r3, r3, #4
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a1c      	ldr	r2, [pc, #112]	; (8005db8 <TIM_OC2_SetConfig+0xfc>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d00f      	beq.n	8005d6c <TIM_OC2_SetConfig+0xb0>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a1b      	ldr	r2, [pc, #108]	; (8005dbc <TIM_OC2_SetConfig+0x100>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d00b      	beq.n	8005d6c <TIM_OC2_SetConfig+0xb0>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a1a      	ldr	r2, [pc, #104]	; (8005dc0 <TIM_OC2_SetConfig+0x104>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d007      	beq.n	8005d6c <TIM_OC2_SetConfig+0xb0>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a19      	ldr	r2, [pc, #100]	; (8005dc4 <TIM_OC2_SetConfig+0x108>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d003      	beq.n	8005d6c <TIM_OC2_SetConfig+0xb0>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a18      	ldr	r2, [pc, #96]	; (8005dc8 <TIM_OC2_SetConfig+0x10c>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d113      	bne.n	8005d94 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	621a      	str	r2, [r3, #32]
}
 8005dae:	bf00      	nop
 8005db0:	371c      	adds	r7, #28
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bc80      	pop	{r7}
 8005db6:	4770      	bx	lr
 8005db8:	40012c00 	.word	0x40012c00
 8005dbc:	40013400 	.word	0x40013400
 8005dc0:	40014000 	.word	0x40014000
 8005dc4:	40014400 	.word	0x40014400
 8005dc8:	40014800 	.word	0x40014800

08005dcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b087      	sub	sp, #28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f023 0303 	bic.w	r3, r3, #3
 8005e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	021b      	lsls	r3, r3, #8
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a27      	ldr	r2, [pc, #156]	; (8005ec8 <TIM_OC3_SetConfig+0xfc>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d003      	beq.n	8005e36 <TIM_OC3_SetConfig+0x6a>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a26      	ldr	r2, [pc, #152]	; (8005ecc <TIM_OC3_SetConfig+0x100>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d10d      	bne.n	8005e52 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	021b      	lsls	r3, r3, #8
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a1c      	ldr	r2, [pc, #112]	; (8005ec8 <TIM_OC3_SetConfig+0xfc>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d00f      	beq.n	8005e7a <TIM_OC3_SetConfig+0xae>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a1b      	ldr	r2, [pc, #108]	; (8005ecc <TIM_OC3_SetConfig+0x100>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d00b      	beq.n	8005e7a <TIM_OC3_SetConfig+0xae>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a1a      	ldr	r2, [pc, #104]	; (8005ed0 <TIM_OC3_SetConfig+0x104>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d007      	beq.n	8005e7a <TIM_OC3_SetConfig+0xae>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a19      	ldr	r2, [pc, #100]	; (8005ed4 <TIM_OC3_SetConfig+0x108>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d003      	beq.n	8005e7a <TIM_OC3_SetConfig+0xae>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a18      	ldr	r2, [pc, #96]	; (8005ed8 <TIM_OC3_SetConfig+0x10c>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d113      	bne.n	8005ea2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	011b      	lsls	r3, r3, #4
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	621a      	str	r2, [r3, #32]
}
 8005ebc:	bf00      	nop
 8005ebe:	371c      	adds	r7, #28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bc80      	pop	{r7}
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	40012c00 	.word	0x40012c00
 8005ecc:	40013400 	.word	0x40013400
 8005ed0:	40014000 	.word	0x40014000
 8005ed4:	40014400 	.word	0x40014400
 8005ed8:	40014800 	.word	0x40014800

08005edc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b087      	sub	sp, #28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	021b      	lsls	r3, r3, #8
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	031b      	lsls	r3, r3, #12
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a17      	ldr	r2, [pc, #92]	; (8005f98 <TIM_OC4_SetConfig+0xbc>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d00f      	beq.n	8005f60 <TIM_OC4_SetConfig+0x84>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a16      	ldr	r2, [pc, #88]	; (8005f9c <TIM_OC4_SetConfig+0xc0>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d00b      	beq.n	8005f60 <TIM_OC4_SetConfig+0x84>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a15      	ldr	r2, [pc, #84]	; (8005fa0 <TIM_OC4_SetConfig+0xc4>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d007      	beq.n	8005f60 <TIM_OC4_SetConfig+0x84>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a14      	ldr	r2, [pc, #80]	; (8005fa4 <TIM_OC4_SetConfig+0xc8>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d003      	beq.n	8005f60 <TIM_OC4_SetConfig+0x84>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a13      	ldr	r2, [pc, #76]	; (8005fa8 <TIM_OC4_SetConfig+0xcc>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d109      	bne.n	8005f74 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	019b      	lsls	r3, r3, #6
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	621a      	str	r2, [r3, #32]
}
 8005f8e:	bf00      	nop
 8005f90:	371c      	adds	r7, #28
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bc80      	pop	{r7}
 8005f96:	4770      	bx	lr
 8005f98:	40012c00 	.word	0x40012c00
 8005f9c:	40013400 	.word	0x40013400
 8005fa0:	40014000 	.word	0x40014000
 8005fa4:	40014400 	.word	0x40014400
 8005fa8:	40014800 	.word	0x40014800

08005fac <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ff0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	041b      	lsls	r3, r3, #16
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a17      	ldr	r2, [pc, #92]	; (8006060 <TIM_OC5_SetConfig+0xb4>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d00f      	beq.n	8006026 <TIM_OC5_SetConfig+0x7a>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a16      	ldr	r2, [pc, #88]	; (8006064 <TIM_OC5_SetConfig+0xb8>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d00b      	beq.n	8006026 <TIM_OC5_SetConfig+0x7a>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a15      	ldr	r2, [pc, #84]	; (8006068 <TIM_OC5_SetConfig+0xbc>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d007      	beq.n	8006026 <TIM_OC5_SetConfig+0x7a>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a14      	ldr	r2, [pc, #80]	; (800606c <TIM_OC5_SetConfig+0xc0>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d003      	beq.n	8006026 <TIM_OC5_SetConfig+0x7a>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a13      	ldr	r2, [pc, #76]	; (8006070 <TIM_OC5_SetConfig+0xc4>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d109      	bne.n	800603a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800602c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	021b      	lsls	r3, r3, #8
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	4313      	orrs	r3, r2
 8006038:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	697a      	ldr	r2, [r7, #20]
 800603e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	685a      	ldr	r2, [r3, #4]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	621a      	str	r2, [r3, #32]
}
 8006054:	bf00      	nop
 8006056:	371c      	adds	r7, #28
 8006058:	46bd      	mov	sp, r7
 800605a:	bc80      	pop	{r7}
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	40012c00 	.word	0x40012c00
 8006064:	40013400 	.word	0x40013400
 8006068:	40014000 	.word	0x40014000
 800606c:	40014400 	.word	0x40014400
 8006070:	40014800 	.word	0x40014800

08006074 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006074:	b480      	push	{r7}
 8006076:	b087      	sub	sp, #28
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800609a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	021b      	lsls	r3, r3, #8
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	051b      	lsls	r3, r3, #20
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a17      	ldr	r2, [pc, #92]	; (8006128 <TIM_OC6_SetConfig+0xb4>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d00f      	beq.n	80060f0 <TIM_OC6_SetConfig+0x7c>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a16      	ldr	r2, [pc, #88]	; (800612c <TIM_OC6_SetConfig+0xb8>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d00b      	beq.n	80060f0 <TIM_OC6_SetConfig+0x7c>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a15      	ldr	r2, [pc, #84]	; (8006130 <TIM_OC6_SetConfig+0xbc>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d007      	beq.n	80060f0 <TIM_OC6_SetConfig+0x7c>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a14      	ldr	r2, [pc, #80]	; (8006134 <TIM_OC6_SetConfig+0xc0>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d003      	beq.n	80060f0 <TIM_OC6_SetConfig+0x7c>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a13      	ldr	r2, [pc, #76]	; (8006138 <TIM_OC6_SetConfig+0xc4>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d109      	bne.n	8006104 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	695b      	ldr	r3, [r3, #20]
 80060fc:	029b      	lsls	r3, r3, #10
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	4313      	orrs	r3, r2
 8006102:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	621a      	str	r2, [r3, #32]
}
 800611e:	bf00      	nop
 8006120:	371c      	adds	r7, #28
 8006122:	46bd      	mov	sp, r7
 8006124:	bc80      	pop	{r7}
 8006126:	4770      	bx	lr
 8006128:	40012c00 	.word	0x40012c00
 800612c:	40013400 	.word	0x40013400
 8006130:	40014000 	.word	0x40014000
 8006134:	40014400 	.word	0x40014400
 8006138:	40014800 	.word	0x40014800

0800613c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006154:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	4313      	orrs	r3, r2
 800615e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006166:	f023 0307 	bic.w	r3, r3, #7
 800616a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	4313      	orrs	r3, r2
 8006174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	2b30      	cmp	r3, #48	; 0x30
 8006184:	d05c      	beq.n	8006240 <TIM_SlaveTimer_SetConfig+0x104>
 8006186:	2b30      	cmp	r3, #48	; 0x30
 8006188:	d806      	bhi.n	8006198 <TIM_SlaveTimer_SetConfig+0x5c>
 800618a:	2b10      	cmp	r3, #16
 800618c:	d058      	beq.n	8006240 <TIM_SlaveTimer_SetConfig+0x104>
 800618e:	2b20      	cmp	r3, #32
 8006190:	d056      	beq.n	8006240 <TIM_SlaveTimer_SetConfig+0x104>
 8006192:	2b00      	cmp	r3, #0
 8006194:	d054      	beq.n	8006240 <TIM_SlaveTimer_SetConfig+0x104>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8006196:	e054      	b.n	8006242 <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8006198:	2b50      	cmp	r3, #80	; 0x50
 800619a:	d03d      	beq.n	8006218 <TIM_SlaveTimer_SetConfig+0xdc>
 800619c:	2b50      	cmp	r3, #80	; 0x50
 800619e:	d802      	bhi.n	80061a6 <TIM_SlaveTimer_SetConfig+0x6a>
 80061a0:	2b40      	cmp	r3, #64	; 0x40
 80061a2:	d010      	beq.n	80061c6 <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 80061a4:	e04d      	b.n	8006242 <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 80061a6:	2b60      	cmp	r3, #96	; 0x60
 80061a8:	d040      	beq.n	800622c <TIM_SlaveTimer_SetConfig+0xf0>
 80061aa:	2b70      	cmp	r3, #112	; 0x70
 80061ac:	d000      	beq.n	80061b0 <TIM_SlaveTimer_SetConfig+0x74>
      break;
 80061ae:	e048      	b.n	8006242 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6818      	ldr	r0, [r3, #0]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	68d9      	ldr	r1, [r3, #12]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	689a      	ldr	r2, [r3, #8]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	f000 f9da 	bl	8006578 <TIM_ETR_SetConfig>
      break;
 80061c4:	e03d      	b.n	8006242 <TIM_SlaveTimer_SetConfig+0x106>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2b05      	cmp	r3, #5
 80061cc:	d101      	bne.n	80061d2 <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e038      	b.n	8006244 <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	6812      	ldr	r2, [r2, #0]
 80061e2:	6a12      	ldr	r2, [r2, #32]
 80061e4:	f022 0201 	bic.w	r2, r2, #1
 80061e8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061f8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	011b      	lsls	r3, r3, #4
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	4313      	orrs	r3, r2
 8006204:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	621a      	str	r2, [r3, #32]
      break;
 8006216:	e014      	b.n	8006242 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6818      	ldr	r0, [r3, #0]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	6899      	ldr	r1, [r3, #8]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	461a      	mov	r2, r3
 8006226:	f000 f87d 	bl	8006324 <TIM_TI1_ConfigInputStage>
      break;
 800622a:	e00a      	b.n	8006242 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6818      	ldr	r0, [r3, #0]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	6899      	ldr	r1, [r3, #8]
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	461a      	mov	r2, r3
 800623a:	f000 f8dd 	bl	80063f8 <TIM_TI2_ConfigInputStage>
      break;
 800623e:	e000      	b.n	8006242 <TIM_SlaveTimer_SetConfig+0x106>
      break;
 8006240:	bf00      	nop
  }
  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3718      	adds	r7, #24
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800624c:	b480      	push	{r7}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
 8006258:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	f023 0201 	bic.w	r2, r3, #1
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6a1b      	ldr	r3, [r3, #32]
 8006270:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	4a25      	ldr	r2, [pc, #148]	; (800630c <TIM_TI1_SetConfig+0xc0>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d017      	beq.n	80062aa <TIM_TI1_SetConfig+0x5e>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006280:	d013      	beq.n	80062aa <TIM_TI1_SetConfig+0x5e>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	4a22      	ldr	r2, [pc, #136]	; (8006310 <TIM_TI1_SetConfig+0xc4>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d00f      	beq.n	80062aa <TIM_TI1_SetConfig+0x5e>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	4a21      	ldr	r2, [pc, #132]	; (8006314 <TIM_TI1_SetConfig+0xc8>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d00b      	beq.n	80062aa <TIM_TI1_SetConfig+0x5e>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	4a20      	ldr	r2, [pc, #128]	; (8006318 <TIM_TI1_SetConfig+0xcc>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d007      	beq.n	80062aa <TIM_TI1_SetConfig+0x5e>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	4a1f      	ldr	r2, [pc, #124]	; (800631c <TIM_TI1_SetConfig+0xd0>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d003      	beq.n	80062aa <TIM_TI1_SetConfig+0x5e>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	4a1e      	ldr	r2, [pc, #120]	; (8006320 <TIM_TI1_SetConfig+0xd4>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d101      	bne.n	80062ae <TIM_TI1_SetConfig+0x62>
 80062aa:	2301      	movs	r3, #1
 80062ac:	e000      	b.n	80062b0 <TIM_TI1_SetConfig+0x64>
 80062ae:	2300      	movs	r3, #0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d008      	beq.n	80062c6 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f023 0303 	bic.w	r3, r3, #3
 80062ba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	617b      	str	r3, [r7, #20]
 80062c4:	e003      	b.n	80062ce <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f043 0301 	orr.w	r3, r3, #1
 80062cc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	011b      	lsls	r3, r3, #4
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	4313      	orrs	r3, r2
 80062e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	f023 030a 	bic.w	r3, r3, #10
 80062e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	f003 030a 	and.w	r3, r3, #10
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	621a      	str	r2, [r3, #32]
}
 8006302:	bf00      	nop
 8006304:	371c      	adds	r7, #28
 8006306:	46bd      	mov	sp, r7
 8006308:	bc80      	pop	{r7}
 800630a:	4770      	bx	lr
 800630c:	40012c00 	.word	0x40012c00
 8006310:	40000400 	.word	0x40000400
 8006314:	40000800 	.word	0x40000800
 8006318:	40000c00 	.word	0x40000c00
 800631c:	40013400 	.word	0x40013400
 8006320:	40014000 	.word	0x40014000

08006324 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006324:	b480      	push	{r7}
 8006326:	b087      	sub	sp, #28
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6a1b      	ldr	r3, [r3, #32]
 8006334:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	f023 0201 	bic.w	r2, r3, #1
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800634e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	011b      	lsls	r3, r3, #4
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	4313      	orrs	r3, r2
 8006358:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f023 030a 	bic.w	r3, r3, #10
 8006360:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	4313      	orrs	r3, r2
 8006368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	621a      	str	r2, [r3, #32]
}
 8006376:	bf00      	nop
 8006378:	371c      	adds	r7, #28
 800637a:	46bd      	mov	sp, r7
 800637c:	bc80      	pop	{r7}
 800637e:	4770      	bx	lr

08006380 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006380:	b480      	push	{r7}
 8006382:	b087      	sub	sp, #28
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
 800638c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	f023 0210 	bic.w	r2, r3, #16
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6a1b      	ldr	r3, [r3, #32]
 80063a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	021b      	lsls	r3, r3, #8
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	031b      	lsls	r3, r3, #12
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063d2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	011b      	lsls	r3, r3, #4
 80063d8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	4313      	orrs	r3, r2
 80063e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	697a      	ldr	r2, [r7, #20]
 80063e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	621a      	str	r2, [r3, #32]
}
 80063ee:	bf00      	nop
 80063f0:	371c      	adds	r7, #28
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bc80      	pop	{r7}
 80063f6:	4770      	bx	lr

080063f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b087      	sub	sp, #28
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6a1b      	ldr	r3, [r3, #32]
 8006408:	f023 0210 	bic.w	r2, r3, #16
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006422:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	031b      	lsls	r3, r3, #12
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	4313      	orrs	r3, r2
 800642c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006434:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	011b      	lsls	r3, r3, #4
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	4313      	orrs	r3, r2
 800643e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	621a      	str	r2, [r3, #32]
}
 800644c:	bf00      	nop
 800644e:	371c      	adds	r7, #28
 8006450:	46bd      	mov	sp, r7
 8006452:	bc80      	pop	{r7}
 8006454:	4770      	bx	lr

08006456 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006456:	b480      	push	{r7}
 8006458:	b087      	sub	sp, #28
 800645a:	af00      	add	r7, sp, #0
 800645c:	60f8      	str	r0, [r7, #12]
 800645e:	60b9      	str	r1, [r7, #8]
 8006460:	607a      	str	r2, [r7, #4]
 8006462:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6a1b      	ldr	r3, [r3, #32]
 8006468:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	69db      	ldr	r3, [r3, #28]
 8006474:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6a1b      	ldr	r3, [r3, #32]
 800647a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f023 0303 	bic.w	r3, r3, #3
 8006482:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006484:	697a      	ldr	r2, [r7, #20]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4313      	orrs	r3, r2
 800648a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006492:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	011b      	lsls	r3, r3, #4
 8006498:	b2db      	uxtb	r3, r3
 800649a:	697a      	ldr	r2, [r7, #20]
 800649c:	4313      	orrs	r3, r2
 800649e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80064a6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	021b      	lsls	r3, r3, #8
 80064ac:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	621a      	str	r2, [r3, #32]
}
 80064c2:	bf00      	nop
 80064c4:	371c      	adds	r7, #28
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bc80      	pop	{r7}
 80064ca:	4770      	bx	lr

080064cc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]
 80064d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	69db      	ldr	r3, [r3, #28]
 80064ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	021b      	lsls	r3, r3, #8
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	4313      	orrs	r3, r2
 8006502:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800650a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	031b      	lsls	r3, r3, #12
 8006510:	b29b      	uxth	r3, r3
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	4313      	orrs	r3, r2
 8006516:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800651e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	031b      	lsls	r3, r3, #12
 8006524:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	4313      	orrs	r3, r2
 800652c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	697a      	ldr	r2, [r7, #20]
 8006532:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	621a      	str	r2, [r3, #32]
}
 800653a:	bf00      	nop
 800653c:	371c      	adds	r7, #28
 800653e:	46bd      	mov	sp, r7
 8006540:	bc80      	pop	{r7}
 8006542:	4770      	bx	lr

08006544 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800655a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800655c:	683a      	ldr	r2, [r7, #0]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	4313      	orrs	r3, r2
 8006562:	f043 0307 	orr.w	r3, r3, #7
 8006566:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	609a      	str	r2, [r3, #8]
}
 800656e:	bf00      	nop
 8006570:	3714      	adds	r7, #20
 8006572:	46bd      	mov	sp, r7
 8006574:	bc80      	pop	{r7}
 8006576:	4770      	bx	lr

08006578 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006578:	b480      	push	{r7}
 800657a:	b087      	sub	sp, #28
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
 8006584:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006592:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	021a      	lsls	r2, r3, #8
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	431a      	orrs	r2, r3
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	4313      	orrs	r3, r2
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	697a      	ldr	r2, [r7, #20]
 80065aa:	609a      	str	r2, [r3, #8]
}
 80065ac:	bf00      	nop
 80065ae:	371c      	adds	r7, #28
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bc80      	pop	{r7}
 80065b4:	4770      	bx	lr

080065b6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b087      	sub	sp, #28
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	60f8      	str	r0, [r7, #12]
 80065be:	60b9      	str	r1, [r7, #8]
 80065c0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	f003 031f 	and.w	r3, r3, #31
 80065c8:	2201      	movs	r2, #1
 80065ca:	fa02 f303 	lsl.w	r3, r2, r3
 80065ce:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6a1a      	ldr	r2, [r3, #32]
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	43db      	mvns	r3, r3
 80065d8:	401a      	ands	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6a1a      	ldr	r2, [r3, #32]
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	f003 031f 	and.w	r3, r3, #31
 80065e8:	6879      	ldr	r1, [r7, #4]
 80065ea:	fa01 f303 	lsl.w	r3, r1, r3
 80065ee:	431a      	orrs	r2, r3
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	621a      	str	r2, [r3, #32]
}
 80065f4:	bf00      	nop
 80065f6:	371c      	adds	r7, #28
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bc80      	pop	{r7}
 80065fc:	4770      	bx	lr
	...

08006600 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006600:	b480      	push	{r7}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006610:	2b01      	cmp	r3, #1
 8006612:	d101      	bne.n	8006618 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006614:	2302      	movs	r3, #2
 8006616:	e068      	b.n	80066ea <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2202      	movs	r2, #2
 8006624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a2d      	ldr	r2, [pc, #180]	; (80066f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d004      	beq.n	800664c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a2c      	ldr	r2, [pc, #176]	; (80066f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d108      	bne.n	800665e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006652:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	4313      	orrs	r3, r2
 800665c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006664:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	4313      	orrs	r3, r2
 800666e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a1d      	ldr	r2, [pc, #116]	; (80066f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d01d      	beq.n	80066be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800668a:	d018      	beq.n	80066be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a1a      	ldr	r2, [pc, #104]	; (80066fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d013      	beq.n	80066be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a19      	ldr	r2, [pc, #100]	; (8006700 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d00e      	beq.n	80066be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a17      	ldr	r2, [pc, #92]	; (8006704 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d009      	beq.n	80066be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a12      	ldr	r2, [pc, #72]	; (80066f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d004      	beq.n	80066be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a13      	ldr	r2, [pc, #76]	; (8006708 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d10c      	bne.n	80066d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3714      	adds	r7, #20
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bc80      	pop	{r7}
 80066f2:	4770      	bx	lr
 80066f4:	40012c00 	.word	0x40012c00
 80066f8:	40013400 	.word	0x40013400
 80066fc:	40000400 	.word	0x40000400
 8006700:	40000800 	.word	0x40000800
 8006704:	40000c00 	.word	0x40000c00
 8006708:	40014000 	.word	0x40014000

0800670c <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  uint32_t tmpor1 = 0U;
 8006716:	2300      	movs	r3, #0
 8006718:	60fb      	str	r3, [r7, #12]
  uint32_t tmpor2 = 0U;
 800671a:	2300      	movs	r3, #0
 800671c:	60bb      	str	r3, [r7, #8]

  __HAL_LOCK(htim);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006724:	2b01      	cmp	r3, #1
 8006726:	d101      	bne.n	800672c <HAL_TIMEx_RemapConfig+0x20>
 8006728:	2302      	movs	r3, #2
 800672a:	e038      	b.n	800679e <HAL_TIMEx_RemapConfig+0x92>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Check parameters */
  assert_param(IS_TIM_REMAP_INSTANCE(htim->Instance));
  assert_param(IS_TIM_REMAP(Remap));

  /* Set ETR_SEL bit field (if required) */
  if (IS_TIM_ETRSEL_INSTANCE(htim->Instance))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a1b      	ldr	r2, [pc, #108]	; (80067a8 <HAL_TIMEx_RemapConfig+0x9c>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d00e      	beq.n	800675c <HAL_TIMEx_RemapConfig+0x50>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006746:	d009      	beq.n	800675c <HAL_TIMEx_RemapConfig+0x50>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a17      	ldr	r2, [pc, #92]	; (80067ac <HAL_TIMEx_RemapConfig+0xa0>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d004      	beq.n	800675c <HAL_TIMEx_RemapConfig+0x50>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a16      	ldr	r2, [pc, #88]	; (80067b0 <HAL_TIMEx_RemapConfig+0xa4>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d111      	bne.n	8006780 <HAL_TIMEx_RemapConfig+0x74>
  {
    tmpor2 = htim->Instance->OR2;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006762:	60bb      	str	r3, [r7, #8]
    tmpor2 &= ~TIM1_OR2_ETRSEL_Msk;
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	f423 33e0 	bic.w	r3, r3, #114688	; 0x1c000
 800676a:	60bb      	str	r3, [r7, #8]
    tmpor2 |= (Remap & TIM1_OR2_ETRSEL_Msk);
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	f403 33e0 	and.w	r3, r3, #114688	; 0x1c000
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	4313      	orrs	r3, r2
 8006776:	60bb      	str	r3, [r7, #8]

    /* Set TIMx_OR2 */
    htim->Instance->OR2 = tmpor2;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68ba      	ldr	r2, [r7, #8]
 800677e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Set other remapping capabilities */
  tmpor1 = Remap;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	60fb      	str	r3, [r7, #12]
  tmpor1 &= ~TIM1_OR2_ETRSEL_Msk;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f423 33e0 	bic.w	r3, r3, #114688	; 0x1c000
 800678a:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_OR1 */
  htim->Instance->OR1 = tmpor1;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bc80      	pop	{r7}
 80067a6:	4770      	bx	lr
 80067a8:	40012c00 	.word	0x40012c00
 80067ac:	40000400 	.word	0x40000400
 80067b0:	40013400 	.word	0x40013400

080067b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bc80      	pop	{r7}
 80067c4:	4770      	bx	lr

080067c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b083      	sub	sp, #12
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067ce:	bf00      	nop
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bc80      	pop	{r7}
 80067d6:	4770      	bx	lr

080067d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bc80      	pop	{r7}
 80067e8:	4770      	bx	lr

080067ea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b082      	sub	sp, #8
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d101      	bne.n	80067fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e040      	b.n	800687e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006800:	2b00      	cmp	r3, #0
 8006802:	d106      	bne.n	8006812 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f005 fe29 	bl	800c464 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2224      	movs	r2, #36	; 0x24
 8006816:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	6812      	ldr	r2, [r2, #0]
 8006820:	6812      	ldr	r2, [r2, #0]
 8006822:	f022 0201 	bic.w	r2, r2, #1
 8006826:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 fd97 	bl	800735c <UART_SetConfig>
 800682e:	4603      	mov	r3, r0
 8006830:	2b01      	cmp	r3, #1
 8006832:	d101      	bne.n	8006838 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e022      	b.n	800687e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683c:	2b00      	cmp	r3, #0
 800683e:	d002      	beq.n	8006846 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f001 f8ef 	bl	8007a24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	6812      	ldr	r2, [r2, #0]
 800684e:	6852      	ldr	r2, [r2, #4]
 8006850:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006854:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	6812      	ldr	r2, [r2, #0]
 800685e:	6892      	ldr	r2, [r2, #8]
 8006860:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006864:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	6812      	ldr	r2, [r2, #0]
 800686e:	6812      	ldr	r2, [r2, #0]
 8006870:	f042 0201 	orr.w	r2, r2, #1
 8006874:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f001 f975 	bl	8007b66 <UART_CheckIdleState>
 800687c:	4603      	mov	r3, r0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b082      	sub	sp, #8
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d101      	bne.n	8006898 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e027      	b.n	80068e8 <HAL_UART_DeInit+0x62>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2224      	movs	r2, #36	; 0x24
 800689c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	6812      	ldr	r2, [r2, #0]
 80068a6:	6812      	ldr	r2, [r2, #0]
 80068a8:	f022 0201 	bic.w	r2, r2, #1
 80068ac:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2200      	movs	r2, #0
 80068b4:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2200      	movs	r2, #0
 80068bc:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2200      	movs	r2, #0
 80068c4:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f005 ff34 	bl	800c734 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3708      	adds	r7, #8
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b08a      	sub	sp, #40	; 0x28
 80068f4:	af02      	add	r7, sp, #8
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	603b      	str	r3, [r7, #0]
 80068fc:	4613      	mov	r3, r2
 80068fe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006904:	2b20      	cmp	r3, #32
 8006906:	f040 8081 	bne.w	8006a0c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d002      	beq.n	8006916 <HAL_UART_Transmit+0x26>
 8006910:	88fb      	ldrh	r3, [r7, #6]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d101      	bne.n	800691a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e079      	b.n	8006a0e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006920:	2b01      	cmp	r3, #1
 8006922:	d101      	bne.n	8006928 <HAL_UART_Transmit+0x38>
 8006924:	2302      	movs	r3, #2
 8006926:	e072      	b.n	8006a0e <HAL_UART_Transmit+0x11e>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2200      	movs	r2, #0
 8006934:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2221      	movs	r2, #33	; 0x21
 800693a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800693c:	f7fa fba4 	bl	8001088 <HAL_GetTick>
 8006940:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	88fa      	ldrh	r2, [r7, #6]
 8006946:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	88fa      	ldrh	r2, [r7, #6]
 800694e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800695a:	d108      	bne.n	800696e <HAL_UART_Transmit+0x7e>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d104      	bne.n	800696e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8006964:	2300      	movs	r3, #0
 8006966:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	61bb      	str	r3, [r7, #24]
 800696c:	e003      	b.n	8006976 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006972:	2300      	movs	r3, #0
 8006974:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800697e:	e02d      	b.n	80069dc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	9300      	str	r3, [sp, #0]
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	2200      	movs	r2, #0
 8006988:	2180      	movs	r1, #128	; 0x80
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f001 f930 	bl	8007bf0 <UART_WaitOnFlagUntilTimeout>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d001      	beq.n	800699a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e039      	b.n	8006a0e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d10b      	bne.n	80069b8 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	69ba      	ldr	r2, [r7, #24]
 80069a6:	8812      	ldrh	r2, [r2, #0]
 80069a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069ac:	b292      	uxth	r2, r2
 80069ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	3302      	adds	r3, #2
 80069b4:	61bb      	str	r3, [r7, #24]
 80069b6:	e008      	b.n	80069ca <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	69fa      	ldr	r2, [r7, #28]
 80069be:	7812      	ldrb	r2, [r2, #0]
 80069c0:	b292      	uxth	r2, r2
 80069c2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	3301      	adds	r3, #1
 80069c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	3b01      	subs	r3, #1
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1cb      	bne.n	8006980 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	2200      	movs	r2, #0
 80069f0:	2140      	movs	r1, #64	; 0x40
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f001 f8fc 	bl	8007bf0 <UART_WaitOnFlagUntilTimeout>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d001      	beq.n	8006a02 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e005      	b.n	8006a0e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2220      	movs	r2, #32
 8006a06:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	e000      	b.n	8006a0e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006a0c:	2302      	movs	r3, #2
  }
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3720      	adds	r7, #32
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b08a      	sub	sp, #40	; 0x28
 8006a1a:	af02      	add	r7, sp, #8
 8006a1c:	60f8      	str	r0, [r7, #12]
 8006a1e:	60b9      	str	r1, [r7, #8]
 8006a20:	603b      	str	r3, [r7, #0]
 8006a22:	4613      	mov	r3, r2
 8006a24:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a2a:	2b20      	cmp	r3, #32
 8006a2c:	f040 80bb 	bne.w	8006ba6 <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d002      	beq.n	8006a3c <HAL_UART_Receive+0x26>
 8006a36:	88fb      	ldrh	r3, [r7, #6]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d101      	bne.n	8006a40 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e0b3      	b.n	8006ba8 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d101      	bne.n	8006a4e <HAL_UART_Receive+0x38>
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	e0ac      	b.n	8006ba8 <HAL_UART_Receive+0x192>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2222      	movs	r2, #34	; 0x22
 8006a60:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006a62:	f7fa fb11 	bl	8001088 <HAL_GetTick>
 8006a66:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	88fa      	ldrh	r2, [r7, #6]
 8006a6c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	88fa      	ldrh	r2, [r7, #6]
 8006a74:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a80:	d10e      	bne.n	8006aa0 <HAL_UART_Receive+0x8a>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d105      	bne.n	8006a96 <HAL_UART_Receive+0x80>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006a90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a94:	e02d      	b.n	8006af2 <HAL_UART_Receive+0xdc>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	22ff      	movs	r2, #255	; 0xff
 8006a9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a9e:	e028      	b.n	8006af2 <HAL_UART_Receive+0xdc>
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10d      	bne.n	8006ac4 <HAL_UART_Receive+0xae>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d104      	bne.n	8006aba <HAL_UART_Receive+0xa4>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	22ff      	movs	r2, #255	; 0xff
 8006ab4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ab8:	e01b      	b.n	8006af2 <HAL_UART_Receive+0xdc>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	227f      	movs	r2, #127	; 0x7f
 8006abe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ac2:	e016      	b.n	8006af2 <HAL_UART_Receive+0xdc>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006acc:	d10d      	bne.n	8006aea <HAL_UART_Receive+0xd4>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d104      	bne.n	8006ae0 <HAL_UART_Receive+0xca>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	227f      	movs	r2, #127	; 0x7f
 8006ada:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ade:	e008      	b.n	8006af2 <HAL_UART_Receive+0xdc>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	223f      	movs	r2, #63	; 0x3f
 8006ae4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ae8:	e003      	b.n	8006af2 <HAL_UART_Receive+0xdc>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006af8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b02:	d108      	bne.n	8006b16 <HAL_UART_Receive+0x100>
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d104      	bne.n	8006b16 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	61bb      	str	r3, [r7, #24]
 8006b14:	e003      	b.n	8006b1e <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006b26:	e033      	b.n	8006b90 <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	9300      	str	r3, [sp, #0]
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	2120      	movs	r1, #32
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f001 f85c 	bl	8007bf0 <UART_WaitOnFlagUntilTimeout>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d001      	beq.n	8006b42 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e032      	b.n	8006ba8 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d10c      	bne.n	8006b62 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	8a7b      	ldrh	r3, [r7, #18]
 8006b52:	4013      	ands	r3, r2
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	3302      	adds	r3, #2
 8006b5e:	61bb      	str	r3, [r7, #24]
 8006b60:	e00d      	b.n	8006b7e <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	b2da      	uxtb	r2, r3
 8006b6c:	8a7b      	ldrh	r3, [r7, #18]
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	4013      	ands	r3, r2
 8006b72:	b2da      	uxtb	r2, r3
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	3b01      	subs	r3, #1
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1c5      	bne.n	8006b28 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2220      	movs	r2, #32
 8006ba0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	e000      	b.n	8006ba8 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8006ba6:	2302      	movs	r3, #2
  }
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3720      	adds	r7, #32
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bc2:	2b20      	cmp	r3, #32
 8006bc4:	d164      	bne.n	8006c90 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d002      	beq.n	8006bd2 <HAL_UART_Transmit_DMA+0x22>
 8006bcc:	88fb      	ldrh	r3, [r7, #6]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d101      	bne.n	8006bd6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e05d      	b.n	8006c92 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d101      	bne.n	8006be4 <HAL_UART_Transmit_DMA+0x34>
 8006be0:	2302      	movs	r3, #2
 8006be2:	e056      	b.n	8006c92 <HAL_UART_Transmit_DMA+0xe2>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	88fa      	ldrh	r2, [r7, #6]
 8006bf6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	88fa      	ldrh	r2, [r7, #6]
 8006bfe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2221      	movs	r2, #33	; 0x21
 8006c0c:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d02a      	beq.n	8006c6c <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c1a:	4a20      	ldr	r2, [pc, #128]	; (8006c9c <HAL_UART_Transmit_DMA+0xec>)
 8006c1c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c22:	4a1f      	ldr	r2, [pc, #124]	; (8006ca0 <HAL_UART_Transmit_DMA+0xf0>)
 8006c24:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c2a:	4a1e      	ldr	r2, [pc, #120]	; (8006ca4 <HAL_UART_Transmit_DMA+0xf4>)
 8006c2c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c32:	2200      	movs	r2, #0
 8006c34:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c3e:	4619      	mov	r1, r3
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	3328      	adds	r3, #40	; 0x28
 8006c46:	461a      	mov	r2, r3
 8006c48:	88fb      	ldrh	r3, [r7, #6]
 8006c4a:	f7fa fd64 	bl	8001716 <HAL_DMA_Start_IT>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00b      	beq.n	8006c6c <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2210      	movs	r2, #16
 8006c58:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2220      	movs	r2, #32
 8006c66:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e012      	b.n	8006c92 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2240      	movs	r2, #64	; 0x40
 8006c72:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	6812      	ldr	r2, [r2, #0]
 8006c84:	6892      	ldr	r2, [r2, #8]
 8006c86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c8a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	e000      	b.n	8006c92 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8006c90:	2302      	movs	r3, #2
  }
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	08007d4d 	.word	0x08007d4d
 8006ca0:	08007da1 	.word	0x08007da1
 8006ca4:	08007e41 	.word	0x08007e41

08006ca8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cba:	2b20      	cmp	r3, #32
 8006cbc:	d16c      	bne.n	8006d98 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d002      	beq.n	8006cca <HAL_UART_Receive_DMA+0x22>
 8006cc4:	88fb      	ldrh	r3, [r7, #6]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d101      	bne.n	8006cce <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e065      	b.n	8006d9a <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d101      	bne.n	8006cdc <HAL_UART_Receive_DMA+0x34>
 8006cd8:	2302      	movs	r3, #2
 8006cda:	e05e      	b.n	8006d9a <HAL_UART_Receive_DMA+0xf2>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	88fa      	ldrh	r2, [r7, #6]
 8006cee:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2222      	movs	r2, #34	; 0x22
 8006cfc:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d02a      	beq.n	8006d5c <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d0a:	4a26      	ldr	r2, [pc, #152]	; (8006da4 <HAL_UART_Receive_DMA+0xfc>)
 8006d0c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d12:	4a25      	ldr	r2, [pc, #148]	; (8006da8 <HAL_UART_Receive_DMA+0x100>)
 8006d14:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d1a:	4a24      	ldr	r2, [pc, #144]	; (8006dac <HAL_UART_Receive_DMA+0x104>)
 8006d1c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d22:	2200      	movs	r2, #0
 8006d24:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	3324      	adds	r3, #36	; 0x24
 8006d30:	4619      	mov	r1, r3
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d36:	461a      	mov	r2, r3
 8006d38:	88fb      	ldrh	r3, [r7, #6]
 8006d3a:	f7fa fcec 	bl	8001716 <HAL_DMA_Start_IT>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00b      	beq.n	8006d5c <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2210      	movs	r2, #16
 8006d48:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2220      	movs	r2, #32
 8006d56:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e01e      	b.n	8006d9a <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	6812      	ldr	r2, [r2, #0]
 8006d6c:	6812      	ldr	r2, [r2, #0]
 8006d6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d72:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	6812      	ldr	r2, [r2, #0]
 8006d7c:	6892      	ldr	r2, [r2, #8]
 8006d7e:	f042 0201 	orr.w	r2, r2, #1
 8006d82:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	6812      	ldr	r2, [r2, #0]
 8006d8c:	6892      	ldr	r2, [r2, #8]
 8006d8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d92:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8006d94:	2300      	movs	r3, #0
 8006d96:	e000      	b.n	8006d9a <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8006d98:	2302      	movs	r3, #2
  }
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	08007dbd 	.word	0x08007dbd
 8006da8:	08007e25 	.word	0x08007e25
 8006dac:	08007e41 	.word	0x08007e41

08006db0 <HAL_UART_DMAPause>:
  * @brief Pause the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dbc:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dc2:	60bb      	str	r3, [r7, #8]

  __HAL_LOCK(huart);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d101      	bne.n	8006dd2 <HAL_UART_DMAPause+0x22>
 8006dce:	2302      	movs	r3, #2
 8006dd0:	e03c      	b.n	8006e4c <HAL_UART_DMAPause+0x9c>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006de4:	2b80      	cmp	r3, #128	; 0x80
 8006de6:	d10a      	bne.n	8006dfe <HAL_UART_DMAPause+0x4e>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2b21      	cmp	r3, #33	; 0x21
 8006dec:	d107      	bne.n	8006dfe <HAL_UART_DMAPause+0x4e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    /* Disable the UART DMA Tx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	6812      	ldr	r2, [r2, #0]
 8006df6:	6892      	ldr	r2, [r2, #8]
 8006df8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006dfc:	609a      	str	r2, [r3, #8]
  }
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e08:	2b40      	cmp	r3, #64	; 0x40
 8006e0a:	d11a      	bne.n	8006e42 <HAL_UART_DMAPause+0x92>
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	2b22      	cmp	r3, #34	; 0x22
 8006e10:	d117      	bne.n	8006e42 <HAL_UART_DMAPause+0x92>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	6812      	ldr	r2, [r2, #0]
 8006e1a:	6812      	ldr	r2, [r2, #0]
 8006e1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e20:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	6812      	ldr	r2, [r2, #0]
 8006e2a:	6892      	ldr	r2, [r2, #8]
 8006e2c:	f022 0201 	bic.w	r2, r2, #1
 8006e30:	609a      	str	r2, [r3, #8]

    /* Disable the UART DMA Rx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	6812      	ldr	r2, [r2, #0]
 8006e3a:	6892      	ldr	r2, [r2, #8]
 8006e3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e40:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3714      	adds	r7, #20
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bc80      	pop	{r7}
 8006e54:	4770      	bx	lr

08006e56 <HAL_UART_DMAResume>:
  * @brief Resume the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 8006e56:	b480      	push	{r7}
 8006e58:	b083      	sub	sp, #12
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d101      	bne.n	8006e6c <HAL_UART_DMAResume+0x16>
 8006e68:	2302      	movs	r3, #2
 8006e6a:	e034      	b.n	8006ed6 <HAL_UART_DMAResume+0x80>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e78:	2b21      	cmp	r3, #33	; 0x21
 8006e7a:	d107      	bne.n	8006e8c <HAL_UART_DMAResume+0x36>
  {
    /* Enable the UART DMA Tx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	6812      	ldr	r2, [r2, #0]
 8006e84:	6892      	ldr	r2, [r2, #8]
 8006e86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e8a:	609a      	str	r2, [r3, #8]
  }
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e90:	2b22      	cmp	r3, #34	; 0x22
 8006e92:	d11b      	bne.n	8006ecc <HAL_UART_DMAResume+0x76>
  {
    /* Clear the Overrun flag before resuming the Rx transfer */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2208      	movs	r2, #8
 8006e9a:	621a      	str	r2, [r3, #32]

    /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	6812      	ldr	r2, [r2, #0]
 8006ea4:	6812      	ldr	r2, [r2, #0]
 8006ea6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006eaa:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	6812      	ldr	r2, [r2, #0]
 8006eb4:	6892      	ldr	r2, [r2, #8]
 8006eb6:	f042 0201 	orr.w	r2, r2, #1
 8006eba:	609a      	str	r2, [r3, #8]

    /* Enable the UART DMA Rx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	6812      	ldr	r2, [r2, #0]
 8006ec4:	6892      	ldr	r2, [r2, #8]
 8006ec6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006eca:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	370c      	adds	r7, #12
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bc80      	pop	{r7}
 8006ede:	4770      	bx	lr

08006ee0 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eec:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ef2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006efe:	2b80      	cmp	r3, #128	; 0x80
 8006f00:	d126      	bne.n	8006f50 <HAL_UART_DMAStop+0x70>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2b21      	cmp	r3, #33	; 0x21
 8006f06:	d123      	bne.n	8006f50 <HAL_UART_DMAStop+0x70>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	6812      	ldr	r2, [r2, #0]
 8006f10:	6892      	ldr	r2, [r2, #8]
 8006f12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f16:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d014      	beq.n	8006f4a <HAL_UART_DMAStop+0x6a>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f24:	4618      	mov	r0, r3
 8006f26:	f7fa fc56 	bl	80017d6 <HAL_DMA_Abort>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00c      	beq.n	8006f4a <HAL_UART_DMAStop+0x6a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7fa fd7b 	bl	8001a30 <HAL_DMA_GetError>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b20      	cmp	r3, #32
 8006f3e:	d104      	bne.n	8006f4a <HAL_UART_DMAStop+0x6a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2210      	movs	r2, #16
 8006f44:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e031      	b.n	8006fae <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fecb 	bl	8007ce6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f5a:	2b40      	cmp	r3, #64	; 0x40
 8006f5c:	d126      	bne.n	8006fac <HAL_UART_DMAStop+0xcc>
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	2b22      	cmp	r3, #34	; 0x22
 8006f62:	d123      	bne.n	8006fac <HAL_UART_DMAStop+0xcc>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	6812      	ldr	r2, [r2, #0]
 8006f6c:	6892      	ldr	r2, [r2, #8]
 8006f6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f72:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d014      	beq.n	8006fa6 <HAL_UART_DMAStop+0xc6>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7fa fc28 	bl	80017d6 <HAL_DMA_Abort>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00c      	beq.n	8006fa6 <HAL_UART_DMAStop+0xc6>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7fa fd4d 	bl	8001a30 <HAL_DMA_GetError>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b20      	cmp	r3, #32
 8006f9a:	d104      	bne.n	8006fa6 <HAL_UART_DMAStop+0xc6>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2210      	movs	r2, #16
 8006fa0:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e003      	b.n	8006fae <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 feb1 	bl	8007d0e <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
	...

08006fb8 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  /* Disable interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	6812      	ldr	r2, [r2, #0]
 8006fc8:	6812      	ldr	r2, [r2, #0]
 8006fca:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006fce:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fda:	2b80      	cmp	r3, #128	; 0x80
 8006fdc:	d12d      	bne.n	800703a <HAL_UART_AbortTransmit_IT+0x82>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	6812      	ldr	r2, [r2, #0]
 8006fe6:	6892      	ldr	r2, [r2, #8]
 8006fe8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fec:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d013      	beq.n	800701e <HAL_UART_AbortTransmit_IT+0x66>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ffa:	4a19      	ldr	r2, [pc, #100]	; (8007060 <HAL_UART_AbortTransmit_IT+0xa8>)
 8006ffc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007002:	4618      	mov	r0, r3
 8007004:	f7fa fc24 	bl	8001850 <HAL_DMA_Abort_IT>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d022      	beq.n	8007054 <HAL_UART_AbortTransmit_IT+0x9c>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007018:	4610      	mov	r0, r2
 800701a:	4798      	blx	r3
 800701c:	e01a      	b.n	8007054 <HAL_UART_AbortTransmit_IT+0x9c>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0U;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      /* Clear TxISR function pointers */
      huart->TxISR = NULL;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2220      	movs	r2, #32
 8007030:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f989 	bl	800734a <HAL_UART_AbortTransmitCpltCallback>
 8007038:	e00c      	b.n	8007054 <HAL_UART_AbortTransmit_IT+0x9c>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0U;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Clear TxISR function pointers */
    huart->TxISR = NULL;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	665a      	str	r2, [r3, #100]	; 0x64
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2220      	movs	r2, #32
 800704c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f97b 	bl	800734a <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3708      	adds	r7, #8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	08007ee5 	.word	0x08007ee5

08007064 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b088      	sub	sp, #32
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	69db      	ldr	r3, [r3, #28]
 8007072:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007084:	69fa      	ldr	r2, [r7, #28]
 8007086:	f640 030f 	movw	r3, #2063	; 0x80f
 800708a:	4013      	ands	r3, r2
 800708c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d113      	bne.n	80070bc <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	f003 0320 	and.w	r3, r3, #32
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00e      	beq.n	80070bc <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	f003 0320 	and.w	r3, r3, #32
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d009      	beq.n	80070bc <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f000 8114 	beq.w	80072da <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	4798      	blx	r3
      }
      return;
 80070ba:	e10e      	b.n	80072da <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f000 80d6 	beq.w	8007270 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	f003 0301 	and.w	r3, r3, #1
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d105      	bne.n	80070da <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	f000 80cb 	beq.w	8007270 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	f003 0301 	and.w	r3, r3, #1
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00e      	beq.n	8007102 <HAL_UART_IRQHandler+0x9e>
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d009      	beq.n	8007102 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2201      	movs	r2, #1
 80070f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070fa:	f043 0201 	orr.w	r2, r3, #1
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	f003 0302 	and.w	r3, r3, #2
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00e      	beq.n	800712a <HAL_UART_IRQHandler+0xc6>
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	f003 0301 	and.w	r3, r3, #1
 8007112:	2b00      	cmp	r3, #0
 8007114:	d009      	beq.n	800712a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2202      	movs	r2, #2
 800711c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007122:	f043 0204 	orr.w	r2, r3, #4
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	f003 0304 	and.w	r3, r3, #4
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00e      	beq.n	8007152 <HAL_UART_IRQHandler+0xee>
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	f003 0301 	and.w	r3, r3, #1
 800713a:	2b00      	cmp	r3, #0
 800713c:	d009      	beq.n	8007152 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2204      	movs	r2, #4
 8007144:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800714a:	f043 0202 	orr.w	r2, r3, #2
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	f003 0308 	and.w	r3, r3, #8
 8007158:	2b00      	cmp	r3, #0
 800715a:	d013      	beq.n	8007184 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	f003 0320 	and.w	r3, r3, #32
 8007162:	2b00      	cmp	r3, #0
 8007164:	d104      	bne.n	8007170 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800716c:	2b00      	cmp	r3, #0
 800716e:	d009      	beq.n	8007184 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2208      	movs	r2, #8
 8007176:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800717c:	f043 0208 	orr.w	r2, r3, #8
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00f      	beq.n	80071ae <HAL_UART_IRQHandler+0x14a>
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00a      	beq.n	80071ae <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071a6:	f043 0220 	orr.w	r2, r3, #32
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f000 8093 	beq.w	80072de <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	f003 0320 	and.w	r3, r3, #32
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00c      	beq.n	80071dc <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	f003 0320 	and.w	r3, r3, #32
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d007      	beq.n	80071dc <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d003      	beq.n	80071dc <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071e0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ec:	2b40      	cmp	r3, #64	; 0x40
 80071ee:	d004      	beq.n	80071fa <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d031      	beq.n	800725e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 fd87 	bl	8007d0e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800720a:	2b40      	cmp	r3, #64	; 0x40
 800720c:	d123      	bne.n	8007256 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	6812      	ldr	r2, [r2, #0]
 8007216:	6892      	ldr	r2, [r2, #8]
 8007218:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800721c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007222:	2b00      	cmp	r3, #0
 8007224:	d013      	beq.n	800724e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800722a:	4a30      	ldr	r2, [pc, #192]	; (80072ec <HAL_UART_IRQHandler+0x288>)
 800722c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007232:	4618      	mov	r0, r3
 8007234:	f7fa fb0c 	bl	8001850 <HAL_DMA_Abort_IT>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d016      	beq.n	800726c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007248:	4610      	mov	r0, r2
 800724a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800724c:	e00e      	b.n	800726c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f872 	bl	8007338 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007254:	e00a      	b.n	800726c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f86e 	bl	8007338 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800725c:	e006      	b.n	800726c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 f86a 	bl	8007338 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800726a:	e038      	b.n	80072de <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800726c:	bf00      	nop
    return;
 800726e:	e036      	b.n	80072de <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00d      	beq.n	8007296 <HAL_UART_IRQHandler+0x232>
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d008      	beq.n	8007296 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800728c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fe56 	bl	8007f40 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007294:	e026      	b.n	80072e4 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00d      	beq.n	80072bc <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d008      	beq.n	80072bc <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d017      	beq.n	80072e2 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	4798      	blx	r3
    }
    return;
 80072ba:	e012      	b.n	80072e2 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00e      	beq.n	80072e4 <HAL_UART_IRQHandler+0x280>
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d009      	beq.n	80072e4 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fe1c 	bl	8007f0e <UART_EndTransmit_IT>
    return;
 80072d6:	bf00      	nop
 80072d8:	e004      	b.n	80072e4 <HAL_UART_IRQHandler+0x280>
      return;
 80072da:	bf00      	nop
 80072dc:	e002      	b.n	80072e4 <HAL_UART_IRQHandler+0x280>
    return;
 80072de:	bf00      	nop
 80072e0:	e000      	b.n	80072e4 <HAL_UART_IRQHandler+0x280>
    return;
 80072e2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80072e4:	3720      	adds	r7, #32
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	08007eb9 	.word	0x08007eb9

080072f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bc80      	pop	{r7}
 8007300:	4770      	bx	lr

08007302 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007302:	b480      	push	{r7}
 8007304:	b083      	sub	sp, #12
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800730a:	bf00      	nop
 800730c:	370c      	adds	r7, #12
 800730e:	46bd      	mov	sp, r7
 8007310:	bc80      	pop	{r7}
 8007312:	4770      	bx	lr

08007314 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800731c:	bf00      	nop
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	bc80      	pop	{r7}
 8007324:	4770      	bx	lr

08007326 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007326:	b480      	push	{r7}
 8007328:	b083      	sub	sp, #12
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800732e:	bf00      	nop
 8007330:	370c      	adds	r7, #12
 8007332:	46bd      	mov	sp, r7
 8007334:	bc80      	pop	{r7}
 8007336:	4770      	bx	lr

08007338 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	bc80      	pop	{r7}
 8007348:	4770      	bx	lr

0800734a <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800734a:	b480      	push	{r7}
 800734c:	b083      	sub	sp, #12
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8007352:	bf00      	nop
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	bc80      	pop	{r7}
 800735a:	4770      	bx	lr

0800735c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800735c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007360:	b08a      	sub	sp, #40	; 0x28
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007366:	2300      	movs	r3, #0
 8007368:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800736a:	2300      	movs	r3, #0
 800736c:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800736e:	2300      	movs	r3, #0
 8007370:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	689a      	ldr	r2, [r3, #8]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	431a      	orrs	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	695b      	ldr	r3, [r3, #20]
 8007380:	431a      	orrs	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	69db      	ldr	r3, [r3, #28]
 8007386:	4313      	orrs	r3, r2
 8007388:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	6819      	ldr	r1, [r3, #0]
 8007394:	4bb7      	ldr	r3, [pc, #732]	; (8007674 <UART_SetConfig+0x318>)
 8007396:	400b      	ands	r3, r1
 8007398:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800739a:	430b      	orrs	r3, r1
 800739c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	6812      	ldr	r2, [r2, #0]
 80073a6:	6852      	ldr	r2, [r2, #4]
 80073a8:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	68d2      	ldr	r2, [r2, #12]
 80073b0:	430a      	orrs	r2, r1
 80073b2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4aae      	ldr	r2, [pc, #696]	; (8007678 <UART_SetConfig+0x31c>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d004      	beq.n	80073ce <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a1b      	ldr	r3, [r3, #32]
 80073c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ca:	4313      	orrs	r3, r2
 80073cc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	6812      	ldr	r2, [r2, #0]
 80073d6:	6892      	ldr	r2, [r2, #8]
 80073d8:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 80073dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073de:	430a      	orrs	r2, r1
 80073e0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4aa5      	ldr	r2, [pc, #660]	; (800767c <UART_SetConfig+0x320>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d126      	bne.n	800743a <UART_SetConfig+0xde>
 80073ec:	4ba4      	ldr	r3, [pc, #656]	; (8007680 <UART_SetConfig+0x324>)
 80073ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073f2:	f003 0303 	and.w	r3, r3, #3
 80073f6:	2b03      	cmp	r3, #3
 80073f8:	d81a      	bhi.n	8007430 <UART_SetConfig+0xd4>
 80073fa:	a201      	add	r2, pc, #4	; (adr r2, 8007400 <UART_SetConfig+0xa4>)
 80073fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007400:	08007411 	.word	0x08007411
 8007404:	08007421 	.word	0x08007421
 8007408:	08007419 	.word	0x08007419
 800740c:	08007429 	.word	0x08007429
 8007410:	2301      	movs	r3, #1
 8007412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007416:	e105      	b.n	8007624 <UART_SetConfig+0x2c8>
 8007418:	2302      	movs	r3, #2
 800741a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800741e:	e101      	b.n	8007624 <UART_SetConfig+0x2c8>
 8007420:	2304      	movs	r3, #4
 8007422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007426:	e0fd      	b.n	8007624 <UART_SetConfig+0x2c8>
 8007428:	2308      	movs	r3, #8
 800742a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800742e:	e0f9      	b.n	8007624 <UART_SetConfig+0x2c8>
 8007430:	2310      	movs	r3, #16
 8007432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007436:	bf00      	nop
 8007438:	e0f4      	b.n	8007624 <UART_SetConfig+0x2c8>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a91      	ldr	r2, [pc, #580]	; (8007684 <UART_SetConfig+0x328>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d138      	bne.n	80074b6 <UART_SetConfig+0x15a>
 8007444:	4b8e      	ldr	r3, [pc, #568]	; (8007680 <UART_SetConfig+0x324>)
 8007446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800744a:	f003 030c 	and.w	r3, r3, #12
 800744e:	2b0c      	cmp	r3, #12
 8007450:	d82c      	bhi.n	80074ac <UART_SetConfig+0x150>
 8007452:	a201      	add	r2, pc, #4	; (adr r2, 8007458 <UART_SetConfig+0xfc>)
 8007454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007458:	0800748d 	.word	0x0800748d
 800745c:	080074ad 	.word	0x080074ad
 8007460:	080074ad 	.word	0x080074ad
 8007464:	080074ad 	.word	0x080074ad
 8007468:	0800749d 	.word	0x0800749d
 800746c:	080074ad 	.word	0x080074ad
 8007470:	080074ad 	.word	0x080074ad
 8007474:	080074ad 	.word	0x080074ad
 8007478:	08007495 	.word	0x08007495
 800747c:	080074ad 	.word	0x080074ad
 8007480:	080074ad 	.word	0x080074ad
 8007484:	080074ad 	.word	0x080074ad
 8007488:	080074a5 	.word	0x080074a5
 800748c:	2300      	movs	r3, #0
 800748e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007492:	e0c7      	b.n	8007624 <UART_SetConfig+0x2c8>
 8007494:	2302      	movs	r3, #2
 8007496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800749a:	e0c3      	b.n	8007624 <UART_SetConfig+0x2c8>
 800749c:	2304      	movs	r3, #4
 800749e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074a2:	e0bf      	b.n	8007624 <UART_SetConfig+0x2c8>
 80074a4:	2308      	movs	r3, #8
 80074a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074aa:	e0bb      	b.n	8007624 <UART_SetConfig+0x2c8>
 80074ac:	2310      	movs	r3, #16
 80074ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074b2:	bf00      	nop
 80074b4:	e0b6      	b.n	8007624 <UART_SetConfig+0x2c8>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a73      	ldr	r2, [pc, #460]	; (8007688 <UART_SetConfig+0x32c>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d125      	bne.n	800750c <UART_SetConfig+0x1b0>
 80074c0:	4b6f      	ldr	r3, [pc, #444]	; (8007680 <UART_SetConfig+0x324>)
 80074c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80074ca:	2b10      	cmp	r3, #16
 80074cc:	d011      	beq.n	80074f2 <UART_SetConfig+0x196>
 80074ce:	2b10      	cmp	r3, #16
 80074d0:	d802      	bhi.n	80074d8 <UART_SetConfig+0x17c>
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d005      	beq.n	80074e2 <UART_SetConfig+0x186>
 80074d6:	e014      	b.n	8007502 <UART_SetConfig+0x1a6>
 80074d8:	2b20      	cmp	r3, #32
 80074da:	d006      	beq.n	80074ea <UART_SetConfig+0x18e>
 80074dc:	2b30      	cmp	r3, #48	; 0x30
 80074de:	d00c      	beq.n	80074fa <UART_SetConfig+0x19e>
 80074e0:	e00f      	b.n	8007502 <UART_SetConfig+0x1a6>
 80074e2:	2300      	movs	r3, #0
 80074e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074e8:	e09c      	b.n	8007624 <UART_SetConfig+0x2c8>
 80074ea:	2302      	movs	r3, #2
 80074ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074f0:	e098      	b.n	8007624 <UART_SetConfig+0x2c8>
 80074f2:	2304      	movs	r3, #4
 80074f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074f8:	e094      	b.n	8007624 <UART_SetConfig+0x2c8>
 80074fa:	2308      	movs	r3, #8
 80074fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007500:	e090      	b.n	8007624 <UART_SetConfig+0x2c8>
 8007502:	2310      	movs	r3, #16
 8007504:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007508:	bf00      	nop
 800750a:	e08b      	b.n	8007624 <UART_SetConfig+0x2c8>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a5e      	ldr	r2, [pc, #376]	; (800768c <UART_SetConfig+0x330>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d125      	bne.n	8007562 <UART_SetConfig+0x206>
 8007516:	4b5a      	ldr	r3, [pc, #360]	; (8007680 <UART_SetConfig+0x324>)
 8007518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800751c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007520:	2b40      	cmp	r3, #64	; 0x40
 8007522:	d011      	beq.n	8007548 <UART_SetConfig+0x1ec>
 8007524:	2b40      	cmp	r3, #64	; 0x40
 8007526:	d802      	bhi.n	800752e <UART_SetConfig+0x1d2>
 8007528:	2b00      	cmp	r3, #0
 800752a:	d005      	beq.n	8007538 <UART_SetConfig+0x1dc>
 800752c:	e014      	b.n	8007558 <UART_SetConfig+0x1fc>
 800752e:	2b80      	cmp	r3, #128	; 0x80
 8007530:	d006      	beq.n	8007540 <UART_SetConfig+0x1e4>
 8007532:	2bc0      	cmp	r3, #192	; 0xc0
 8007534:	d00c      	beq.n	8007550 <UART_SetConfig+0x1f4>
 8007536:	e00f      	b.n	8007558 <UART_SetConfig+0x1fc>
 8007538:	2300      	movs	r3, #0
 800753a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800753e:	e071      	b.n	8007624 <UART_SetConfig+0x2c8>
 8007540:	2302      	movs	r3, #2
 8007542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007546:	e06d      	b.n	8007624 <UART_SetConfig+0x2c8>
 8007548:	2304      	movs	r3, #4
 800754a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800754e:	e069      	b.n	8007624 <UART_SetConfig+0x2c8>
 8007550:	2308      	movs	r3, #8
 8007552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007556:	e065      	b.n	8007624 <UART_SetConfig+0x2c8>
 8007558:	2310      	movs	r3, #16
 800755a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800755e:	bf00      	nop
 8007560:	e060      	b.n	8007624 <UART_SetConfig+0x2c8>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a4a      	ldr	r2, [pc, #296]	; (8007690 <UART_SetConfig+0x334>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d129      	bne.n	80075c0 <UART_SetConfig+0x264>
 800756c:	4b44      	ldr	r3, [pc, #272]	; (8007680 <UART_SetConfig+0x324>)
 800756e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800757a:	d014      	beq.n	80075a6 <UART_SetConfig+0x24a>
 800757c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007580:	d802      	bhi.n	8007588 <UART_SetConfig+0x22c>
 8007582:	2b00      	cmp	r3, #0
 8007584:	d007      	beq.n	8007596 <UART_SetConfig+0x23a>
 8007586:	e016      	b.n	80075b6 <UART_SetConfig+0x25a>
 8007588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800758c:	d007      	beq.n	800759e <UART_SetConfig+0x242>
 800758e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007592:	d00c      	beq.n	80075ae <UART_SetConfig+0x252>
 8007594:	e00f      	b.n	80075b6 <UART_SetConfig+0x25a>
 8007596:	2300      	movs	r3, #0
 8007598:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800759c:	e042      	b.n	8007624 <UART_SetConfig+0x2c8>
 800759e:	2302      	movs	r3, #2
 80075a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075a4:	e03e      	b.n	8007624 <UART_SetConfig+0x2c8>
 80075a6:	2304      	movs	r3, #4
 80075a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075ac:	e03a      	b.n	8007624 <UART_SetConfig+0x2c8>
 80075ae:	2308      	movs	r3, #8
 80075b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075b4:	e036      	b.n	8007624 <UART_SetConfig+0x2c8>
 80075b6:	2310      	movs	r3, #16
 80075b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075bc:	bf00      	nop
 80075be:	e031      	b.n	8007624 <UART_SetConfig+0x2c8>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a2c      	ldr	r2, [pc, #176]	; (8007678 <UART_SetConfig+0x31c>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d129      	bne.n	800761e <UART_SetConfig+0x2c2>
 80075ca:	4b2d      	ldr	r3, [pc, #180]	; (8007680 <UART_SetConfig+0x324>)
 80075cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80075d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075d8:	d014      	beq.n	8007604 <UART_SetConfig+0x2a8>
 80075da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075de:	d802      	bhi.n	80075e6 <UART_SetConfig+0x28a>
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d007      	beq.n	80075f4 <UART_SetConfig+0x298>
 80075e4:	e016      	b.n	8007614 <UART_SetConfig+0x2b8>
 80075e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075ea:	d007      	beq.n	80075fc <UART_SetConfig+0x2a0>
 80075ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075f0:	d00c      	beq.n	800760c <UART_SetConfig+0x2b0>
 80075f2:	e00f      	b.n	8007614 <UART_SetConfig+0x2b8>
 80075f4:	2300      	movs	r3, #0
 80075f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075fa:	e013      	b.n	8007624 <UART_SetConfig+0x2c8>
 80075fc:	2302      	movs	r3, #2
 80075fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007602:	e00f      	b.n	8007624 <UART_SetConfig+0x2c8>
 8007604:	2304      	movs	r3, #4
 8007606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800760a:	e00b      	b.n	8007624 <UART_SetConfig+0x2c8>
 800760c:	2308      	movs	r3, #8
 800760e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007612:	e007      	b.n	8007624 <UART_SetConfig+0x2c8>
 8007614:	2310      	movs	r3, #16
 8007616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800761a:	bf00      	nop
 800761c:	e002      	b.n	8007624 <UART_SetConfig+0x2c8>
 800761e:	2310      	movs	r3, #16
 8007620:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a13      	ldr	r2, [pc, #76]	; (8007678 <UART_SetConfig+0x31c>)
 800762a:	4293      	cmp	r3, r2
 800762c:	f040 80f1 	bne.w	8007812 <UART_SetConfig+0x4b6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007630:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007634:	2b08      	cmp	r3, #8
 8007636:	d837      	bhi.n	80076a8 <UART_SetConfig+0x34c>
 8007638:	a201      	add	r2, pc, #4	; (adr r2, 8007640 <UART_SetConfig+0x2e4>)
 800763a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763e:	bf00      	nop
 8007640:	08007665 	.word	0x08007665
 8007644:	080076a9 	.word	0x080076a9
 8007648:	0800766d 	.word	0x0800766d
 800764c:	080076a9 	.word	0x080076a9
 8007650:	08007699 	.word	0x08007699
 8007654:	080076a9 	.word	0x080076a9
 8007658:	080076a9 	.word	0x080076a9
 800765c:	080076a9 	.word	0x080076a9
 8007660:	080076a1 	.word	0x080076a1
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8007664:	f7fb fca8 	bl	8002fb8 <HAL_RCC_GetPCLK1Freq>
 8007668:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800766a:	e020      	b.n	80076ae <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800766c:	4b09      	ldr	r3, [pc, #36]	; (8007694 <UART_SetConfig+0x338>)
 800766e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007670:	e01d      	b.n	80076ae <UART_SetConfig+0x352>
 8007672:	bf00      	nop
 8007674:	efff69f3 	.word	0xefff69f3
 8007678:	40008000 	.word	0x40008000
 800767c:	40013800 	.word	0x40013800
 8007680:	40021000 	.word	0x40021000
 8007684:	40004400 	.word	0x40004400
 8007688:	40004800 	.word	0x40004800
 800768c:	40004c00 	.word	0x40004c00
 8007690:	40005000 	.word	0x40005000
 8007694:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8007698:	f7fb fbfa 	bl	8002e90 <HAL_RCC_GetSysClockFreq>
 800769c:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800769e:	e006      	b.n	80076ae <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80076a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076a4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80076a6:	e002      	b.n	80076ae <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	76fb      	strb	r3, [r7, #27]
        break;
 80076ac:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f000 81ab 	beq.w	8007a0c <UART_SetConfig+0x6b0>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	685a      	ldr	r2, [r3, #4]
 80076ba:	4613      	mov	r3, r2
 80076bc:	005b      	lsls	r3, r3, #1
 80076be:	441a      	add	r2, r3
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d805      	bhi.n	80076d2 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d202      	bcs.n	80076d8 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	76fb      	strb	r3, [r7, #27]
 80076d6:	e199      	b.n	8007a0c <UART_SetConfig+0x6b0>
      }
      else
      {
        switch (clocksource)
 80076d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076dc:	2b08      	cmp	r3, #8
 80076de:	f200 8085 	bhi.w	80077ec <UART_SetConfig+0x490>
 80076e2:	a201      	add	r2, pc, #4	; (adr r2, 80076e8 <UART_SetConfig+0x38c>)
 80076e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e8:	0800770d 	.word	0x0800770d
 80076ec:	080077ed 	.word	0x080077ed
 80076f0:	0800774f 	.word	0x0800774f
 80076f4:	080077ed 	.word	0x080077ed
 80076f8:	08007783 	.word	0x08007783
 80076fc:	080077ed 	.word	0x080077ed
 8007700:	080077ed 	.word	0x080077ed
 8007704:	080077ed 	.word	0x080077ed
 8007708:	080077c3 	.word	0x080077c3
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800770c:	f7fb fc54 	bl	8002fb8 <HAL_RCC_GetPCLK1Freq>
 8007710:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	f04f 0400 	mov.w	r4, #0
 8007718:	ea4f 2904 	mov.w	r9, r4, lsl #8
 800771c:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 8007720:	ea4f 2803 	mov.w	r8, r3, lsl #8
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	085b      	lsrs	r3, r3, #1
 800772a:	f04f 0400 	mov.w	r4, #0
 800772e:	eb18 0003 	adds.w	r0, r8, r3
 8007732:	eb49 0104 	adc.w	r1, r9, r4
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	f04f 0400 	mov.w	r4, #0
 800773e:	461a      	mov	r2, r3
 8007740:	4623      	mov	r3, r4
 8007742:	f7f9 faad 	bl	8000ca0 <__aeabi_uldivmod>
 8007746:	4603      	mov	r3, r0
 8007748:	460c      	mov	r4, r1
 800774a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800774c:	e051      	b.n	80077f2 <UART_SetConfig+0x496>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	085b      	lsrs	r3, r3, #1
 8007754:	f04f 0400 	mov.w	r4, #0
 8007758:	49aa      	ldr	r1, [pc, #680]	; (8007a04 <UART_SetConfig+0x6a8>)
 800775a:	f04f 0200 	mov.w	r2, #0
 800775e:	eb13 0801 	adds.w	r8, r3, r1
 8007762:	eb44 0902 	adc.w	r9, r4, r2
 8007766:	4640      	mov	r0, r8
 8007768:	4649      	mov	r1, r9
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	f04f 0400 	mov.w	r4, #0
 8007772:	461a      	mov	r2, r3
 8007774:	4623      	mov	r3, r4
 8007776:	f7f9 fa93 	bl	8000ca0 <__aeabi_uldivmod>
 800777a:	4603      	mov	r3, r0
 800777c:	460c      	mov	r4, r1
 800777e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8007780:	e037      	b.n	80077f2 <UART_SetConfig+0x496>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8007782:	f7fb fb85 	bl	8002e90 <HAL_RCC_GetSysClockFreq>
 8007786:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	461a      	mov	r2, r3
 800778c:	f04f 0300 	mov.w	r3, #0
 8007790:	021d      	lsls	r5, r3, #8
 8007792:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 8007796:	0214      	lsls	r4, r2, #8
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	085b      	lsrs	r3, r3, #1
 800779e:	461a      	mov	r2, r3
 80077a0:	f04f 0300 	mov.w	r3, #0
 80077a4:	18a0      	adds	r0, r4, r2
 80077a6:	eb45 0103 	adc.w	r1, r5, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	f04f 0400 	mov.w	r4, #0
 80077b2:	461a      	mov	r2, r3
 80077b4:	4623      	mov	r3, r4
 80077b6:	f7f9 fa73 	bl	8000ca0 <__aeabi_uldivmod>
 80077ba:	4603      	mov	r3, r0
 80077bc:	460c      	mov	r4, r1
 80077be:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80077c0:	e017      	b.n	80077f2 <UART_SetConfig+0x496>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	085b      	lsrs	r3, r3, #1
 80077c8:	f04f 0400 	mov.w	r4, #0
 80077cc:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80077d0:	f144 0100 	adc.w	r1, r4, #0
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	f04f 0400 	mov.w	r4, #0
 80077dc:	461a      	mov	r2, r3
 80077de:	4623      	mov	r3, r4
 80077e0:	f7f9 fa5e 	bl	8000ca0 <__aeabi_uldivmod>
 80077e4:	4603      	mov	r3, r0
 80077e6:	460c      	mov	r4, r1
 80077e8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80077ea:	e002      	b.n	80077f2 <UART_SetConfig+0x496>
          default:
            ret = HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	76fb      	strb	r3, [r7, #27]
            break;
 80077f0:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077f8:	d308      	bcc.n	800780c <UART_SetConfig+0x4b0>
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007800:	d204      	bcs.n	800780c <UART_SetConfig+0x4b0>
        {
          huart->Instance->BRR = usartdiv;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	69fa      	ldr	r2, [r7, #28]
 8007808:	60da      	str	r2, [r3, #12]
 800780a:	e0ff      	b.n	8007a0c <UART_SetConfig+0x6b0>
        }
        else
        {
          ret = HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	76fb      	strb	r3, [r7, #27]
 8007810:	e0fc      	b.n	8007a0c <UART_SetConfig+0x6b0>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	69db      	ldr	r3, [r3, #28]
 8007816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800781a:	f040 8083 	bne.w	8007924 <UART_SetConfig+0x5c8>
  {
    switch (clocksource)
 800781e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007822:	2b08      	cmp	r3, #8
 8007824:	d85e      	bhi.n	80078e4 <UART_SetConfig+0x588>
 8007826:	a201      	add	r2, pc, #4	; (adr r2, 800782c <UART_SetConfig+0x4d0>)
 8007828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782c:	08007851 	.word	0x08007851
 8007830:	08007871 	.word	0x08007871
 8007834:	08007891 	.word	0x08007891
 8007838:	080078e5 	.word	0x080078e5
 800783c:	080078ad 	.word	0x080078ad
 8007840:	080078e5 	.word	0x080078e5
 8007844:	080078e5 	.word	0x080078e5
 8007848:	080078e5 	.word	0x080078e5
 800784c:	080078cd 	.word	0x080078cd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007850:	f7fb fbb2 	bl	8002fb8 <HAL_RCC_GetPCLK1Freq>
 8007854:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	005a      	lsls	r2, r3, #1
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	085b      	lsrs	r3, r3, #1
 8007860:	441a      	add	r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	fbb2 f3f3 	udiv	r3, r2, r3
 800786a:	b29b      	uxth	r3, r3
 800786c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800786e:	e03c      	b.n	80078ea <UART_SetConfig+0x58e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007870:	f7fb fbb8 	bl	8002fe4 <HAL_RCC_GetPCLK2Freq>
 8007874:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	005a      	lsls	r2, r3, #1
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	085b      	lsrs	r3, r3, #1
 8007880:	441a      	add	r2, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	fbb2 f3f3 	udiv	r3, r2, r3
 800788a:	b29b      	uxth	r3, r3
 800788c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800788e:	e02c      	b.n	80078ea <UART_SetConfig+0x58e>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	085b      	lsrs	r3, r3, #1
 8007896:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800789a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	6852      	ldr	r2, [r2, #4]
 80078a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80078aa:	e01e      	b.n	80078ea <UART_SetConfig+0x58e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078ac:	f7fb faf0 	bl	8002e90 <HAL_RCC_GetSysClockFreq>
 80078b0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	005a      	lsls	r2, r3, #1
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	085b      	lsrs	r3, r3, #1
 80078bc:	441a      	add	r2, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80078ca:	e00e      	b.n	80078ea <UART_SetConfig+0x58e>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	085b      	lsrs	r3, r3, #1
 80078d2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	fbb2 f3f3 	udiv	r3, r2, r3
 80078de:	b29b      	uxth	r3, r3
 80078e0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80078e2:	e002      	b.n	80078ea <UART_SetConfig+0x58e>
      default:
        ret = HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	76fb      	strb	r3, [r7, #27]
        break;
 80078e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	2b0f      	cmp	r3, #15
 80078ee:	d916      	bls.n	800791e <UART_SetConfig+0x5c2>
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078f6:	d212      	bcs.n	800791e <UART_SetConfig+0x5c2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	f023 030f 	bic.w	r3, r3, #15
 8007900:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	085b      	lsrs	r3, r3, #1
 8007906:	b29b      	uxth	r3, r3
 8007908:	f003 0307 	and.w	r3, r3, #7
 800790c:	b29a      	uxth	r2, r3
 800790e:	89fb      	ldrh	r3, [r7, #14]
 8007910:	4313      	orrs	r3, r2
 8007912:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	89fa      	ldrh	r2, [r7, #14]
 800791a:	60da      	str	r2, [r3, #12]
 800791c:	e076      	b.n	8007a0c <UART_SetConfig+0x6b0>
    }
    else
    {
      ret = HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	76fb      	strb	r3, [r7, #27]
 8007922:	e073      	b.n	8007a0c <UART_SetConfig+0x6b0>
    }
  }
  else
  {
    switch (clocksource)
 8007924:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007928:	2b08      	cmp	r3, #8
 800792a:	d85c      	bhi.n	80079e6 <UART_SetConfig+0x68a>
 800792c:	a201      	add	r2, pc, #4	; (adr r2, 8007934 <UART_SetConfig+0x5d8>)
 800792e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007932:	bf00      	nop
 8007934:	08007959 	.word	0x08007959
 8007938:	08007977 	.word	0x08007977
 800793c:	08007995 	.word	0x08007995
 8007940:	080079e7 	.word	0x080079e7
 8007944:	080079b1 	.word	0x080079b1
 8007948:	080079e7 	.word	0x080079e7
 800794c:	080079e7 	.word	0x080079e7
 8007950:	080079e7 	.word	0x080079e7
 8007954:	080079cf 	.word	0x080079cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007958:	f7fb fb2e 	bl	8002fb8 <HAL_RCC_GetPCLK1Freq>
 800795c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	085a      	lsrs	r2, r3, #1
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	441a      	add	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007970:	b29b      	uxth	r3, r3
 8007972:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007974:	e03a      	b.n	80079ec <UART_SetConfig+0x690>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007976:	f7fb fb35 	bl	8002fe4 <HAL_RCC_GetPCLK2Freq>
 800797a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	085a      	lsrs	r2, r3, #1
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	441a      	add	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	fbb2 f3f3 	udiv	r3, r2, r3
 800798e:	b29b      	uxth	r3, r3
 8007990:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007992:	e02b      	b.n	80079ec <UART_SetConfig+0x690>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	085b      	lsrs	r3, r3, #1
 800799a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800799e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	6852      	ldr	r2, [r2, #4]
 80079a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80079ae:	e01d      	b.n	80079ec <UART_SetConfig+0x690>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079b0:	f7fb fa6e 	bl	8002e90 <HAL_RCC_GetSysClockFreq>
 80079b4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	085a      	lsrs	r2, r3, #1
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	441a      	add	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80079cc:	e00e      	b.n	80079ec <UART_SetConfig+0x690>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	085b      	lsrs	r3, r3, #1
 80079d4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80079e4:	e002      	b.n	80079ec <UART_SetConfig+0x690>
      default:
        ret = HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	76fb      	strb	r3, [r7, #27]
        break;
 80079ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	2b0f      	cmp	r3, #15
 80079f0:	d90a      	bls.n	8007a08 <UART_SetConfig+0x6ac>
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079f8:	d206      	bcs.n	8007a08 <UART_SetConfig+0x6ac>
    {
      huart->Instance->BRR = usartdiv;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	69fa      	ldr	r2, [r7, #28]
 8007a00:	60da      	str	r2, [r3, #12]
 8007a02:	e003      	b.n	8007a0c <UART_SetConfig+0x6b0>
 8007a04:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007a18:	7efb      	ldrb	r3, [r7, #27]
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3728      	adds	r7, #40	; 0x28
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08007a24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a30:	f003 0301 	and.w	r3, r3, #1
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00a      	beq.n	8007a4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	6812      	ldr	r2, [r2, #0]
 8007a40:	6852      	ldr	r2, [r2, #4]
 8007a42:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007a4a:	430a      	orrs	r2, r1
 8007a4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a52:	f003 0302 	and.w	r3, r3, #2
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00a      	beq.n	8007a70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	6812      	ldr	r2, [r2, #0]
 8007a62:	6852      	ldr	r2, [r2, #4]
 8007a64:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007a6c:	430a      	orrs	r2, r1
 8007a6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a74:	f003 0304 	and.w	r3, r3, #4
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00a      	beq.n	8007a92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	6812      	ldr	r2, [r2, #0]
 8007a84:	6852      	ldr	r2, [r2, #4]
 8007a86:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007a8e:	430a      	orrs	r2, r1
 8007a90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a96:	f003 0308 	and.w	r3, r3, #8
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00a      	beq.n	8007ab4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	6812      	ldr	r2, [r2, #0]
 8007aa6:	6852      	ldr	r2, [r2, #4]
 8007aa8:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007ab0:	430a      	orrs	r2, r1
 8007ab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab8:	f003 0310 	and.w	r3, r3, #16
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00a      	beq.n	8007ad6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	6812      	ldr	r2, [r2, #0]
 8007ac8:	6892      	ldr	r2, [r2, #8]
 8007aca:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007ad2:	430a      	orrs	r2, r1
 8007ad4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ada:	f003 0320 	and.w	r3, r3, #32
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00a      	beq.n	8007af8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	6812      	ldr	r2, [r2, #0]
 8007aea:	6892      	ldr	r2, [r2, #8]
 8007aec:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007af4:	430a      	orrs	r2, r1
 8007af6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d01a      	beq.n	8007b3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	6812      	ldr	r2, [r2, #0]
 8007b0c:	6852      	ldr	r2, [r2, #4]
 8007b0e:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007b16:	430a      	orrs	r2, r1
 8007b18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b22:	d10a      	bne.n	8007b3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	6812      	ldr	r2, [r2, #0]
 8007b2c:	6852      	ldr	r2, [r2, #4]
 8007b2e:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007b36:	430a      	orrs	r2, r1
 8007b38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00a      	beq.n	8007b5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	6812      	ldr	r2, [r2, #0]
 8007b4e:	6852      	ldr	r2, [r2, #4]
 8007b50:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007b58:	430a      	orrs	r2, r1
 8007b5a:	605a      	str	r2, [r3, #4]
  }
}
 8007b5c:	bf00      	nop
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bc80      	pop	{r7}
 8007b64:	4770      	bx	lr

08007b66 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b086      	sub	sp, #24
 8007b6a:	af02      	add	r7, sp, #8
 8007b6c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007b74:	f7f9 fa88 	bl	8001088 <HAL_GetTick>
 8007b78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 0308 	and.w	r3, r3, #8
 8007b84:	2b08      	cmp	r3, #8
 8007b86:	d10e      	bne.n	8007ba6 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f82a 	bl	8007bf0 <UART_WaitOnFlagUntilTimeout>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d001      	beq.n	8007ba6 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e020      	b.n	8007be8 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 0304 	and.w	r3, r3, #4
 8007bb0:	2b04      	cmp	r3, #4
 8007bb2:	d10e      	bne.n	8007bd2 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007bb8:	9300      	str	r3, [sp, #0]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f814 	bl	8007bf0 <UART_WaitOnFlagUntilTimeout>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d001      	beq.n	8007bd2 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	e00a      	b.n	8007be8 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2220      	movs	r2, #32
 8007bd6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2220      	movs	r2, #32
 8007bdc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007be6:	2300      	movs	r3, #0
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3710      	adds	r7, #16
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	603b      	str	r3, [r7, #0]
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c00:	e05d      	b.n	8007cbe <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c08:	d059      	beq.n	8007cbe <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c0a:	f7f9 fa3d 	bl	8001088 <HAL_GetTick>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	1ad2      	subs	r2, r2, r3
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d802      	bhi.n	8007c20 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d11b      	bne.n	8007c58 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	6812      	ldr	r2, [r2, #0]
 8007c28:	6812      	ldr	r2, [r2, #0]
 8007c2a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007c2e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	6812      	ldr	r2, [r2, #0]
 8007c38:	6892      	ldr	r2, [r2, #8]
 8007c3a:	f022 0201 	bic.w	r2, r2, #1
 8007c3e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2220      	movs	r2, #32
 8007c44:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2220      	movs	r2, #32
 8007c4a:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007c54:	2303      	movs	r3, #3
 8007c56:	e042      	b.n	8007cde <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f003 0304 	and.w	r3, r3, #4
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d02b      	beq.n	8007cbe <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	69db      	ldr	r3, [r3, #28]
 8007c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c74:	d123      	bne.n	8007cbe <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c7e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	6812      	ldr	r2, [r2, #0]
 8007c88:	6812      	ldr	r2, [r2, #0]
 8007c8a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007c8e:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	6812      	ldr	r2, [r2, #0]
 8007c98:	6892      	ldr	r2, [r2, #8]
 8007c9a:	f022 0201 	bic.w	r2, r2, #1
 8007c9e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2220      	movs	r2, #32
 8007ca4:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2220      	movs	r2, #32
 8007caa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2220      	movs	r2, #32
 8007cb0:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	e00f      	b.n	8007cde <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	69da      	ldr	r2, [r3, #28]
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	401a      	ands	r2, r3
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	bf0c      	ite	eq
 8007cce:	2301      	moveq	r3, #1
 8007cd0:	2300      	movne	r3, #0
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	79fb      	ldrb	r3, [r7, #7]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d092      	beq.n	8007c02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b083      	sub	sp, #12
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	6812      	ldr	r2, [r2, #0]
 8007cf6:	6812      	ldr	r2, [r2, #0]
 8007cf8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007cfc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2220      	movs	r2, #32
 8007d02:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007d04:	bf00      	nop
 8007d06:	370c      	adds	r7, #12
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bc80      	pop	{r7}
 8007d0c:	4770      	bx	lr

08007d0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b083      	sub	sp, #12
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	6812      	ldr	r2, [r2, #0]
 8007d1e:	6812      	ldr	r2, [r2, #0]
 8007d20:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007d24:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	6812      	ldr	r2, [r2, #0]
 8007d2e:	6892      	ldr	r2, [r2, #8]
 8007d30:	f022 0201 	bic.w	r2, r2, #1
 8007d34:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2220      	movs	r2, #32
 8007d3a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	661a      	str	r2, [r3, #96]	; 0x60
}
 8007d42:	bf00      	nop
 8007d44:	370c      	adds	r7, #12
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bc80      	pop	{r7}
 8007d4a:	4770      	bx	lr

08007d4c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d58:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f003 0320 	and.w	r3, r3, #32
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d114      	bne.n	8007d92 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	6812      	ldr	r2, [r2, #0]
 8007d78:	6892      	ldr	r2, [r2, #8]
 8007d7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d7e:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	6812      	ldr	r2, [r2, #0]
 8007d88:	6812      	ldr	r2, [r2, #0]
 8007d8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d8e:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d90:	e002      	b.n	8007d98 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f7ff faac 	bl	80072f0 <HAL_UART_TxCpltCallback>
}
 8007d98:	bf00      	nop
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dac:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f7ff faa7 	bl	8007302 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007db4:	bf00      	nop
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 0320 	and.w	r3, r3, #32
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d11e      	bne.n	8007e16 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	6812      	ldr	r2, [r2, #0]
 8007de8:	6812      	ldr	r2, [r2, #0]
 8007dea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007dee:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	6812      	ldr	r2, [r2, #0]
 8007df8:	6892      	ldr	r2, [r2, #8]
 8007dfa:	f022 0201 	bic.w	r2, r2, #1
 8007dfe:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	6812      	ldr	r2, [r2, #0]
 8007e08:	6892      	ldr	r2, [r2, #8]
 8007e0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e0e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2220      	movs	r2, #32
 8007e14:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f7ff fa7c 	bl	8007314 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e1c:	bf00      	nop
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e30:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	f7ff fa77 	bl	8007326 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e38:	bf00      	nop
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b086      	sub	sp, #24
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e4c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e52:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e58:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e64:	2b80      	cmp	r3, #128	; 0x80
 8007e66:	d109      	bne.n	8007e7c <UART_DMAError+0x3c>
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	2b21      	cmp	r3, #33	; 0x21
 8007e6c:	d106      	bne.n	8007e7c <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007e76:	6978      	ldr	r0, [r7, #20]
 8007e78:	f7ff ff35 	bl	8007ce6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e86:	2b40      	cmp	r3, #64	; 0x40
 8007e88:	d109      	bne.n	8007e9e <UART_DMAError+0x5e>
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2b22      	cmp	r3, #34	; 0x22
 8007e8e:	d106      	bne.n	8007e9e <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007e98:	6978      	ldr	r0, [r7, #20]
 8007e9a:	f7ff ff38 	bl	8007d0e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ea2:	f043 0210 	orr.w	r2, r3, #16
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007eaa:	6978      	ldr	r0, [r7, #20]
 8007eac:	f7ff fa44 	bl	8007338 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007eb0:	bf00      	nop
 8007eb2:	3718      	adds	r7, #24
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ed6:	68f8      	ldr	r0, [r7, #12]
 8007ed8:	f7ff fa2e 	bl	8007338 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007edc:	bf00      	nop
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <UART_DMATxOnlyAbortCallback>:
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef0:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0U;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2220      	movs	r2, #32
 8007efe:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f7ff fa22 	bl	800734a <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f06:	bf00      	nop
 8007f08:	3710      	adds	r7, #16
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b082      	sub	sp, #8
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	6812      	ldr	r2, [r2, #0]
 8007f1e:	6812      	ldr	r2, [r2, #0]
 8007f20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f24:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2220      	movs	r2, #32
 8007f2a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f7ff f9dc 	bl	80072f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f38:	bf00      	nop
 8007f3a:	3708      	adds	r7, #8
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007f48:	bf00      	nop
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bc80      	pop	{r7}
 8007f50:	4770      	bx	lr
	...

08007f54 <Init_Flash_Chips>:
 *
 * @return: HA_StatusTypeDef - Status of function
 */

HAL_StatusTypeDef Init_Flash_Chips(uint8_t* chipstatus)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
	//control Pin init
	MX_GPIO_Init();
 8007f5c:	f000 fb28 	bl	80085b0 <MX_GPIO_Init>
	//SPI int
	if(MX_SPI_Init(SPI2,&hspi2)		!= HAL_OK) return HAL_ERROR;
 8007f60:	4915      	ldr	r1, [pc, #84]	; (8007fb8 <Init_Flash_Chips+0x64>)
 8007f62:	4816      	ldr	r0, [pc, #88]	; (8007fbc <Init_Flash_Chips+0x68>)
 8007f64:	f000 fae4 	bl	8008530 <MX_SPI_Init>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d001      	beq.n	8007f72 <Init_Flash_Chips+0x1e>
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e01d      	b.n	8007fae <Init_Flash_Chips+0x5a>
	//check the status of each chip
	for (int chipnumber = 1; chipnumber < 5; ++chipnumber)
 8007f72:	2301      	movs	r3, #1
 8007f74:	60fb      	str	r3, [r7, #12]
 8007f76:	e016      	b.n	8007fa6 <Init_Flash_Chips+0x52>
	{
		if(FLASH_Is_Online(chipnumber))
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f000 f843 	bl	8008004 <FLASH_Is_Online>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00d      	beq.n	8007fa0 <Init_Flash_Chips+0x4c>
		{
			//set bit at position to show chip is online
			*chipstatus |=0b1<<(chipnumber-1);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	b25a      	sxtb	r2, r3
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	2101      	movs	r1, #1
 8007f90:	fa01 f303 	lsl.w	r3, r1, r3
 8007f94:	b25b      	sxtb	r3, r3
 8007f96:	4313      	orrs	r3, r2
 8007f98:	b25b      	sxtb	r3, r3
 8007f9a:	b2da      	uxtb	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	701a      	strb	r2, [r3, #0]
	for (int chipnumber = 1; chipnumber < 5; ++chipnumber)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	60fb      	str	r3, [r7, #12]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2b04      	cmp	r3, #4
 8007faa:	dde5      	ble.n	8007f78 <Init_Flash_Chips+0x24>
		}

	}
	return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	2000097c 	.word	0x2000097c
 8007fbc:	40003800 	.word	0x40003800

08007fc0 <FLASH_Get_ID>:
}
/*
 * @Description: Reads the Chip ID
 */
void FLASH_Get_ID(int ChipNumber,uint8_t* id)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]

	uint8_t cmd = 0x9F;
 8007fca:	239f      	movs	r3, #159	; 0x9f
 8007fcc:	73fb      	strb	r3, [r7, #15]
	FLASH_ChipSelect_setState(ChipNumber,CS_OPEN);
 8007fce:	2100      	movs	r1, #0
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 f83d 	bl	8008050 <FLASH_ChipSelect_setState>
	HAL_SPI_Transmit(&hspi2,&cmd,1,100);
 8007fd6:	f107 010f 	add.w	r1, r7, #15
 8007fda:	2364      	movs	r3, #100	; 0x64
 8007fdc:	2201      	movs	r2, #1
 8007fde:	4808      	ldr	r0, [pc, #32]	; (8008000 <FLASH_Get_ID+0x40>)
 8007fe0:	f7fc f8d5 	bl	800418e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,id,5,100);
 8007fe4:	2364      	movs	r3, #100	; 0x64
 8007fe6:	2205      	movs	r2, #5
 8007fe8:	6839      	ldr	r1, [r7, #0]
 8007fea:	4805      	ldr	r0, [pc, #20]	; (8008000 <FLASH_Get_ID+0x40>)
 8007fec:	f7fc fa33 	bl	8004456 <HAL_SPI_Receive>
	FLASH_ChipSelect_setState(ChipNumber,CS_CLOSED);
 8007ff0:	2101      	movs	r1, #1
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f82c 	bl	8008050 <FLASH_ChipSelect_setState>
}
 8007ff8:	bf00      	nop
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	2000097c 	.word	0x2000097c

08008004 <FLASH_Is_Online>:
 * Byte 4 = 0x00
 * If the sequence is not valid, the function returns a 0 otherwise, the function
 * returns a 1
 */
uint8_t FLASH_Is_Online(int ChipNumber)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
	uint8_t id[5] = {0};
 800800c:	f107 0308 	add.w	r3, r7, #8
 8008010:	2200      	movs	r2, #0
 8008012:	601a      	str	r2, [r3, #0]
 8008014:	711a      	strb	r2, [r3, #4]
	FLASH_Get_ID(ChipNumber,id);
 8008016:	f107 0308 	add.w	r3, r7, #8
 800801a:	4619      	mov	r1, r3
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f7ff ffcf 	bl	8007fc0 <FLASH_Get_ID>
	return (id[0] == 0x1f)&&(id[1] == 0x28)&&(id[2] == 0)&&(id[3] == 1)&&(id[4] == 0);
 8008022:	7a3b      	ldrb	r3, [r7, #8]
 8008024:	2b1f      	cmp	r3, #31
 8008026:	d10d      	bne.n	8008044 <FLASH_Is_Online+0x40>
 8008028:	7a7b      	ldrb	r3, [r7, #9]
 800802a:	2b28      	cmp	r3, #40	; 0x28
 800802c:	d10a      	bne.n	8008044 <FLASH_Is_Online+0x40>
 800802e:	7abb      	ldrb	r3, [r7, #10]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d107      	bne.n	8008044 <FLASH_Is_Online+0x40>
 8008034:	7afb      	ldrb	r3, [r7, #11]
 8008036:	2b01      	cmp	r3, #1
 8008038:	d104      	bne.n	8008044 <FLASH_Is_Online+0x40>
 800803a:	7b3b      	ldrb	r3, [r7, #12]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d101      	bne.n	8008044 <FLASH_Is_Online+0x40>
 8008040:	2301      	movs	r3, #1
 8008042:	e000      	b.n	8008046 <FLASH_Is_Online+0x42>
 8008044:	2300      	movs	r3, #0
 8008046:	b2db      	uxtb	r3, r3

}
 8008048:	4618      	mov	r0, r3
 800804a:	3710      	adds	r7, #16
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <FLASH_ChipSelect_setState>:
  * If more chips are added this function needs to be expanded to include
  * those chips. Just Copy one of cases and change the GPIO settings to
  * match the GPIO pin and port used for the new chip.
  */
void FLASH_ChipSelect_setState(int ChipNumber, CS_State_t state)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	460b      	mov	r3, r1
 800805a:	70fb      	strb	r3, [r7, #3]
	/*If more Dataflash chips are added
	 * this needs to be expanded to include their respective NSS pins*/
	switch (ChipNumber)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	3b01      	subs	r3, #1
 8008060:	2b03      	cmp	r3, #3
 8008062:	d828      	bhi.n	80080b6 <FLASH_ChipSelect_setState+0x66>
 8008064:	a201      	add	r2, pc, #4	; (adr r2, 800806c <FLASH_ChipSelect_setState+0x1c>)
 8008066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800806a:	bf00      	nop
 800806c:	0800807d 	.word	0x0800807d
 8008070:	0800808b 	.word	0x0800808b
 8008074:	08008099 	.word	0x08008099
 8008078:	080080a7 	.word	0x080080a7
	{
		case 1:
	    	HAL_GPIO_WritePin(GPIO_CHIP_1_CS_PORT, GPIO_CHIP_1_CS, state);
 800807c:	78fb      	ldrb	r3, [r7, #3]
 800807e:	461a      	mov	r2, r3
 8008080:	2101      	movs	r1, #1
 8008082:	480f      	ldr	r0, [pc, #60]	; (80080c0 <FLASH_ChipSelect_setState+0x70>)
 8008084:	f7f9 ffa8 	bl	8001fd8 <HAL_GPIO_WritePin>
	      break;
 8008088:	e015      	b.n	80080b6 <FLASH_ChipSelect_setState+0x66>
	    case 2:
	    	HAL_GPIO_WritePin(GPIO_CHIP_2_CS_PORT, GPIO_CHIP_2_CS, state);
 800808a:	78fb      	ldrb	r3, [r7, #3]
 800808c:	461a      	mov	r2, r3
 800808e:	2102      	movs	r1, #2
 8008090:	480b      	ldr	r0, [pc, #44]	; (80080c0 <FLASH_ChipSelect_setState+0x70>)
 8008092:	f7f9 ffa1 	bl	8001fd8 <HAL_GPIO_WritePin>
	      break;
 8008096:	e00e      	b.n	80080b6 <FLASH_ChipSelect_setState+0x66>
	    case 3:
	    	HAL_GPIO_WritePin(GPIO_CHIP_3_CS_PORT, GPIO_CHIP_3_CS, state);
 8008098:	78fb      	ldrb	r3, [r7, #3]
 800809a:	461a      	mov	r2, r3
 800809c:	2101      	movs	r1, #1
 800809e:	4809      	ldr	r0, [pc, #36]	; (80080c4 <FLASH_ChipSelect_setState+0x74>)
 80080a0:	f7f9 ff9a 	bl	8001fd8 <HAL_GPIO_WritePin>
	      break;
 80080a4:	e007      	b.n	80080b6 <FLASH_ChipSelect_setState+0x66>
	    case 4:
	    	HAL_GPIO_WritePin(GPIO_CHIP_4_CS_PORT, GPIO_CHIP_4_CS, state);
 80080a6:	78fb      	ldrb	r3, [r7, #3]
 80080a8:	461a      	mov	r2, r3
 80080aa:	2110      	movs	r1, #16
 80080ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80080b0:	f7f9 ff92 	bl	8001fd8 <HAL_GPIO_WritePin>
	      break;
 80080b4:	bf00      	nop
	}
}
 80080b6:	bf00      	nop
 80080b8:	3708      	adds	r7, #8
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	48000800 	.word	0x48000800
 80080c4:	48000400 	.word	0x48000400

080080c8 <FLASH_GetStatusRegister>:
  * 					  	Bit 5 of Byte 2			-> EPE bit (1 if Erase/Program Error occured in latest ERASE/WRITE operation)
  * 					  	See DataSheet for more information (Page 28-29)
  * 					  	Returns a pointer to FLASH_STATUS_REGISTER
  */
uint8_t* FLASH_GetStatusRegister(int ChipNumber)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
	//Define Command
	uint8_t command[1] = {0xD7};
 80080d0:	23d7      	movs	r3, #215	; 0xd7
 80080d2:	733b      	strb	r3, [r7, #12]

	//Open line to slave
	FLASH_ChipSelect_setState(ChipNumber,CS_OPEN);
 80080d4:	2100      	movs	r1, #0
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f7ff ffba 	bl	8008050 <FLASH_ChipSelect_setState>

	//Transmit command
	HAL_SPI_Transmit(&hspi2, command, 1, 100);
 80080dc:	f107 010c 	add.w	r1, r7, #12
 80080e0:	2364      	movs	r3, #100	; 0x64
 80080e2:	2201      	movs	r2, #1
 80080e4:	4808      	ldr	r0, [pc, #32]	; (8008108 <FLASH_GetStatusRegister+0x40>)
 80080e6:	f7fc f852 	bl	800418e <HAL_SPI_Transmit>

	//Update Register
	HAL_SPI_Receive(&hspi2, FLASH_STATUS_REGISTER, 2, 100);
 80080ea:	2364      	movs	r3, #100	; 0x64
 80080ec:	2202      	movs	r2, #2
 80080ee:	4907      	ldr	r1, [pc, #28]	; (800810c <FLASH_GetStatusRegister+0x44>)
 80080f0:	4805      	ldr	r0, [pc, #20]	; (8008108 <FLASH_GetStatusRegister+0x40>)
 80080f2:	f7fc f9b0 	bl	8004456 <HAL_SPI_Receive>

	//Close line to slave
	FLASH_ChipSelect_setState(ChipNumber,CS_CLOSED);
 80080f6:	2101      	movs	r1, #1
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f7ff ffa9 	bl	8008050 <FLASH_ChipSelect_setState>

	//Return pointer to FLASH_STATUS_REGISTER
	return FLASH_STATUS_REGISTER;
 80080fe:	4b03      	ldr	r3, [pc, #12]	; (800810c <FLASH_GetStatusRegister+0x44>)
}
 8008100:	4618      	mov	r0, r3
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}
 8008108:	2000097c 	.word	0x2000097c
 800810c:	200006ec 	.word	0x200006ec

08008110 <FLASH_Delay>:
/**
  * @DESCRIPTION Constantly calls 1ms delay if the selected chip is bust with an operation
  * This is called in most functions in this library already to ensure no data corruption occurs.
  */
void FLASH_Delay(int ChipNumber)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]

	FLASH_GetStatusRegister(ChipNumber); 					//Sets FLASH_STATUS_REGISTER
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f7ff ffd5 	bl	80080c8 <FLASH_GetStatusRegister>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);	//Turns off OnBoard LED for visual display
 800811e:	2200      	movs	r2, #0
 8008120:	2120      	movs	r1, #32
 8008122:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008126:	f7f9 ff57 	bl	8001fd8 <HAL_GPIO_WritePin>
	while((FLASH_STATUS_REGISTER[0])<128){					//Checks if RDY bit is off
 800812a:	e005      	b.n	8008138 <FLASH_Delay+0x28>
		FLASH_GetStatusRegister(ChipNumber);				//Sets FLASH_STATUS_REGISTER for next iteration
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f7ff ffcb 	bl	80080c8 <FLASH_GetStatusRegister>
		HAL_Delay(1);										//1ms Delay while not RDY
 8008132:	2001      	movs	r0, #1
 8008134:	f7f8 ffb2 	bl	800109c <HAL_Delay>
	while((FLASH_STATUS_REGISTER[0])<128){					//Checks if RDY bit is off
 8008138:	4b07      	ldr	r3, [pc, #28]	; (8008158 <FLASH_Delay+0x48>)
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	b25b      	sxtb	r3, r3
 800813e:	2b00      	cmp	r3, #0
 8008140:	daf4      	bge.n	800812c <FLASH_Delay+0x1c>
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);		//Turns on OnBoard LED to show Delay is finished
 8008142:	2201      	movs	r2, #1
 8008144:	2120      	movs	r1, #32
 8008146:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800814a:	f7f9 ff45 	bl	8001fd8 <HAL_GPIO_WritePin>
}
 800814e:	bf00      	nop
 8008150:	3708      	adds	r7, #8
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	200006ec 	.word	0x200006ec

0800815c <Data_rx>:
  * @DESCRIPTION Returns a pointer to the 264 or 256 Byte buffer depending on current page size.
  * Called in READ functions. The Page size int is changed automatically by
  * FLASH_CONFIG_PageSize(). Static function and so is "hidden" from outside use.
  */
static uint8_t* Data_rx()
{
 800815c:	b480      	push	{r7}
 800815e:	af00      	add	r7, sp, #0
	if (_264or256 == 256){ 	//Checks if Page size is 256
 8008160:	4b05      	ldr	r3, [pc, #20]	; (8008178 <Data_rx+0x1c>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008168:	d101      	bne.n	800816e <Data_rx+0x12>
		return Data_r256;	//Returns the 256 Byte buffer
 800816a:	4b04      	ldr	r3, [pc, #16]	; (800817c <Data_rx+0x20>)
 800816c:	e000      	b.n	8008170 <Data_rx+0x14>
	} else
	{
		return Data_r264;	//Returns the 264 Byte buffer
 800816e:	4b04      	ldr	r3, [pc, #16]	; (8008180 <Data_rx+0x24>)
	}
}
 8008170:	4618      	mov	r0, r3
 8008172:	46bd      	mov	sp, r7
 8008174:	bc80      	pop	{r7}
 8008176:	4770      	bx	lr
 8008178:	20000008 	.word	0x20000008
 800817c:	200006f0 	.word	0x200006f0
 8008180:	200007f0 	.word	0x200007f0

08008184 <FLASH_GetPageSize>:

/**
  * @DESCRIPTION Returns the current page size.
  */
int FLASH_GetPageSize()
{
 8008184:	b480      	push	{r7}
 8008186:	af00      	add	r7, sp, #0
	return _264or256; //Return Page size
 8008188:	4b02      	ldr	r3, [pc, #8]	; (8008194 <FLASH_GetPageSize+0x10>)
 800818a:	681b      	ldr	r3, [r3, #0]
}
 800818c:	4618      	mov	r0, r3
 800818e:	46bd      	mov	sp, r7
 8008190:	bc80      	pop	{r7}
 8008192:	4770      	bx	lr
 8008194:	20000008 	.word	0x20000008

08008198 <FLASH_SetAddress>:
  * is Most Significant Byte of the address and the last element is the Least Significant byte of the
  * address. Recommended to set the current address to {0x00, 0x00, 0x00} and then use FLASH_IncAddress
  * function to handle addressing of the chip.
  */
void FLASH_SetAddress(uint8_t MSB,uint8_t MID,uint8_t LSB)
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	4603      	mov	r3, r0
 80081a0:	71fb      	strb	r3, [r7, #7]
 80081a2:	460b      	mov	r3, r1
 80081a4:	71bb      	strb	r3, [r7, #6]
 80081a6:	4613      	mov	r3, r2
 80081a8:	717b      	strb	r3, [r7, #5]
	Current_Address[0] = MSB;	//Sets the Most Significant Byte of Address
 80081aa:	4a07      	ldr	r2, [pc, #28]	; (80081c8 <FLASH_SetAddress+0x30>)
 80081ac:	79fb      	ldrb	r3, [r7, #7]
 80081ae:	7013      	strb	r3, [r2, #0]
	Current_Address[1] = MID;	//Sets the Middle Byte of Address
 80081b0:	4a05      	ldr	r2, [pc, #20]	; (80081c8 <FLASH_SetAddress+0x30>)
 80081b2:	79bb      	ldrb	r3, [r7, #6]
 80081b4:	7053      	strb	r3, [r2, #1]
	Current_Address[2] = LSB;	//Sets the Least Significant Byte of Address
 80081b6:	4a04      	ldr	r2, [pc, #16]	; (80081c8 <FLASH_SetAddress+0x30>)
 80081b8:	797b      	ldrb	r3, [r7, #5]
 80081ba:	7093      	strb	r3, [r2, #2]
}
 80081bc:	bf00      	nop
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bc80      	pop	{r7}
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	200006e8 	.word	0x200006e8

080081cc <FLASH_IncAddress>:
  * address. Recommended to be used after a FLASH READ, WRITE or ERASE operation.
  * E.g. if 256 Bytes is written to the chip then call FLASH_IncAddres(256) to move to the next empty
  * address.
  */
void FLASH_IncAddress(int size)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b085      	sub	sp, #20
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
	int address = (Current_Address[0]<<16)+(Current_Address[1]<<8)+(Current_Address[2]); //Turns array into 24 bit int
 80081d4:	4b16      	ldr	r3, [pc, #88]	; (8008230 <FLASH_IncAddress+0x64>)
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	041a      	lsls	r2, r3, #16
 80081da:	4b15      	ldr	r3, [pc, #84]	; (8008230 <FLASH_IncAddress+0x64>)
 80081dc:	785b      	ldrb	r3, [r3, #1]
 80081de:	021b      	lsls	r3, r3, #8
 80081e0:	4413      	add	r3, r2
 80081e2:	4a13      	ldr	r2, [pc, #76]	; (8008230 <FLASH_IncAddress+0x64>)
 80081e4:	7892      	ldrb	r2, [r2, #2]
 80081e6:	4413      	add	r3, r2
 80081e8:	60bb      	str	r3, [r7, #8]
	int new_address = address + size; //Increments address by number of bytes entered
 80081ea:	68ba      	ldr	r2, [r7, #8]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4413      	add	r3, r2
 80081f0:	60fb      	str	r3, [r7, #12]
	if (new_address >= FLASH_MAX_ADDRESS)	//Checks if  Address has gone over MAX_ADDRESS
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	4a0f      	ldr	r2, [pc, #60]	; (8008234 <FLASH_IncAddress+0x68>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	dd06      	ble.n	8008208 <FLASH_IncAddress+0x3c>
	{
		new_address = new_address - FLASH_MAX_ADDRESS;	//Sets the new address to however much it went over by
 80081fa:	68fa      	ldr	r2, [r7, #12]
 80081fc:	4b0e      	ldr	r3, [pc, #56]	; (8008238 <FLASH_IncAddress+0x6c>)
 80081fe:	4413      	add	r3, r2
 8008200:	60fb      	str	r3, [r7, #12]
		FLASH_MAX_ADDRESS_FLAG = 1;						//Sets the address flag to tell user that the MAX_ADDRESS has been passed and data overwrite is possible
 8008202:	4b0e      	ldr	r3, [pc, #56]	; (800823c <FLASH_IncAddress+0x70>)
 8008204:	2201      	movs	r2, #1
 8008206:	601a      	str	r2, [r3, #0]
	}
	Current_Address[0] = (new_address&BYTE_Mask_MSB)>>16; //Reconstructs Address Array
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	141b      	asrs	r3, r3, #16
 800820c:	b2da      	uxtb	r2, r3
 800820e:	4b08      	ldr	r3, [pc, #32]	; (8008230 <FLASH_IncAddress+0x64>)
 8008210:	701a      	strb	r2, [r3, #0]
	Current_Address[1] = (new_address&BYTE_Mask_MID)>>8;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	121b      	asrs	r3, r3, #8
 8008216:	b2da      	uxtb	r2, r3
 8008218:	4b05      	ldr	r3, [pc, #20]	; (8008230 <FLASH_IncAddress+0x64>)
 800821a:	705a      	strb	r2, [r3, #1]
	Current_Address[2] = (new_address&BYTE_Mask_LSB);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	b2da      	uxtb	r2, r3
 8008220:	4b03      	ldr	r3, [pc, #12]	; (8008230 <FLASH_IncAddress+0x64>)
 8008222:	709a      	strb	r2, [r3, #2]
}
 8008224:	bf00      	nop
 8008226:	3714      	adds	r7, #20
 8008228:	46bd      	mov	sp, r7
 800822a:	bc80      	pop	{r7}
 800822c:	4770      	bx	lr
 800822e:	bf00      	nop
 8008230:	200006e8 	.word	0x200006e8
 8008234:	007ffffe 	.word	0x007ffffe
 8008238:	ff800001 	.word	0xff800001
 800823c:	200008f8 	.word	0x200008f8

08008240 <FLASH_GetAddress>:

/**
  * @DESCRIPTION Returns a pointer to Current_Address array
  */
int FLASH_GetAddress()
{
 8008240:	b480      	push	{r7}
 8008242:	af00      	add	r7, sp, #0
	return (Current_Address[0]<<16)+(Current_Address[1]<<8)+(Current_Address[2]); //Return current Address as 24bit int
 8008244:	4b06      	ldr	r3, [pc, #24]	; (8008260 <FLASH_GetAddress+0x20>)
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	041a      	lsls	r2, r3, #16
 800824a:	4b05      	ldr	r3, [pc, #20]	; (8008260 <FLASH_GetAddress+0x20>)
 800824c:	785b      	ldrb	r3, [r3, #1]
 800824e:	021b      	lsls	r3, r3, #8
 8008250:	4413      	add	r3, r2
 8008252:	4a03      	ldr	r2, [pc, #12]	; (8008260 <FLASH_GetAddress+0x20>)
 8008254:	7892      	ldrb	r2, [r2, #2]
 8008256:	4413      	add	r3, r2
}
 8008258:	4618      	mov	r0, r3
 800825a:	46bd      	mov	sp, r7
 800825c:	bc80      	pop	{r7}
 800825e:	4770      	bx	lr
 8008260:	200006e8 	.word	0x200006e8

08008264 <FLASH_Is_Available>:
  * 		     MAX FLAG has been raised or if the current amount of data results in the
  * 		     max flag being raised. 0 means unavailable, 1 means available
  *
  */
uint8_t FLASH_Is_Available(uint8_t chipnumber,int datasize)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	4603      	mov	r3, r0
 800826c:	6039      	str	r1, [r7, #0]
 800826e:	71fb      	strb	r3, [r7, #7]
	//check to see if chip is already at capacity
	if(FLASH_MAX_ADDRESS_FLAG)
 8008270:	4b0b      	ldr	r3, [pc, #44]	; (80082a0 <FLASH_Is_Available+0x3c>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d001      	beq.n	800827c <FLASH_Is_Available+0x18>
	{
		return 0;
 8008278:	2300      	movs	r3, #0
 800827a:	e00c      	b.n	8008296 <FLASH_Is_Available+0x32>
	}

	//get the current address and check what the final current address is
	uint32_t address = FLASH_GetAddress() + datasize;
 800827c:	f7ff ffe0 	bl	8008240 <FLASH_GetAddress>
 8008280:	4602      	mov	r2, r0
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	4413      	add	r3, r2
 8008286:	60fb      	str	r3, [r7, #12]
	if(address > FLASH_MAX_ADDRESS)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800828e:	d301      	bcc.n	8008294 <FLASH_Is_Available+0x30>
	{
		return 0;
 8008290:	2300      	movs	r3, #0
 8008292:	e000      	b.n	8008296 <FLASH_Is_Available+0x32>
	}
	return 1;
 8008294:	2301      	movs	r3, #1
}
 8008296:	4618      	mov	r0, r3
 8008298:	3710      	adds	r7, #16
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	200008f8 	.word	0x200008f8

080082a4 <FLASH_READ_Page>:
  * @DESCRIPTION READS one page of data from the Current_Address and stores it in uint8_t Data_rx[256].
  * If the next pages needs to READ then call FLASH_IncAddres(256 or 264) and then FLASH_READ_Page() again.
  * The data in Data_rx will be replaced with the new page data. Returns pointer to correct buffer.
  */
uint8_t* FLASH_READ_Page(int ChipNumber)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
	//Define Command
	uint8_t command[8] = {0xD2, Current_Address[0], Current_Address[1], Current_Address[2], DUMMYBYTE, DUMMYBYTE, DUMMYBYTE, DUMMYBYTE};
 80082ac:	23d2      	movs	r3, #210	; 0xd2
 80082ae:	723b      	strb	r3, [r7, #8]
 80082b0:	4b1a      	ldr	r3, [pc, #104]	; (800831c <FLASH_READ_Page+0x78>)
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	727b      	strb	r3, [r7, #9]
 80082b6:	4b19      	ldr	r3, [pc, #100]	; (800831c <FLASH_READ_Page+0x78>)
 80082b8:	785b      	ldrb	r3, [r3, #1]
 80082ba:	72bb      	strb	r3, [r7, #10]
 80082bc:	4b17      	ldr	r3, [pc, #92]	; (800831c <FLASH_READ_Page+0x78>)
 80082be:	789b      	ldrb	r3, [r3, #2]
 80082c0:	72fb      	strb	r3, [r7, #11]
 80082c2:	23ff      	movs	r3, #255	; 0xff
 80082c4:	733b      	strb	r3, [r7, #12]
 80082c6:	23ff      	movs	r3, #255	; 0xff
 80082c8:	737b      	strb	r3, [r7, #13]
 80082ca:	23ff      	movs	r3, #255	; 0xff
 80082cc:	73bb      	strb	r3, [r7, #14]
 80082ce:	23ff      	movs	r3, #255	; 0xff
 80082d0:	73fb      	strb	r3, [r7, #15]

	//Delay function if chip is busy
	FLASH_Delay(ChipNumber);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f7ff ff1c 	bl	8008110 <FLASH_Delay>

	//Open line to slave
	FLASH_ChipSelect_setState(ChipNumber,CS_OPEN);
 80082d8:	2100      	movs	r1, #0
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f7ff feb8 	bl	8008050 <FLASH_ChipSelect_setState>

	//Transmit command
	HAL_SPI_Transmit(&hspi2, command, 8, 800);
 80082e0:	f107 0108 	add.w	r1, r7, #8
 80082e4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80082e8:	2208      	movs	r2, #8
 80082ea:	480d      	ldr	r0, [pc, #52]	; (8008320 <FLASH_READ_Page+0x7c>)
 80082ec:	f7fb ff4f 	bl	800418e <HAL_SPI_Transmit>

	//Update Read Buffer
	HAL_SPI_Receive(&hspi2, Data_rx(), _264or256, HAL_MAX_DELAY);
 80082f0:	f7ff ff34 	bl	800815c <Data_rx>
 80082f4:	4601      	mov	r1, r0
 80082f6:	4b0b      	ldr	r3, [pc, #44]	; (8008324 <FLASH_READ_Page+0x80>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	b29a      	uxth	r2, r3
 80082fc:	f04f 33ff 	mov.w	r3, #4294967295
 8008300:	4807      	ldr	r0, [pc, #28]	; (8008320 <FLASH_READ_Page+0x7c>)
 8008302:	f7fc f8a8 	bl	8004456 <HAL_SPI_Receive>

	//Close line to slave
	FLASH_ChipSelect_setState(ChipNumber,CS_CLOSED);
 8008306:	2101      	movs	r1, #1
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f7ff fea1 	bl	8008050 <FLASH_ChipSelect_setState>

	//Return pointer to array using Data_rx() to return correctly sized buffer
	return Data_rx();
 800830e:	f7ff ff25 	bl	800815c <Data_rx>
 8008312:	4603      	mov	r3, r0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	200006e8 	.word	0x200006e8
 8008320:	2000097c 	.word	0x2000097c
 8008324:	20000008 	.word	0x20000008

08008328 <FLASH_READ_BufferHF>:
/**
  * @DESCRIPTION READS one page of data from a buffer of the users choice.
  * HF in function name signifies High Frequency read and supports a SCK of 50 - 85 MHz
  */
uint8_t* FLASH_READ_BufferHF(int ChipNumber, int BUFFERx)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
	//Define Command to be transmitted
	uint8_t OpCode;
	if (BUFFERx == BUFFER1){
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d102      	bne.n	800833e <FLASH_READ_BufferHF+0x16>
		OpCode = 0xD4;
 8008338:	23d4      	movs	r3, #212	; 0xd4
 800833a:	73fb      	strb	r3, [r7, #15]
 800833c:	e004      	b.n	8008348 <FLASH_READ_BufferHF+0x20>
	} else if (BUFFERx == BUFFER2){
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	2b02      	cmp	r3, #2
 8008342:	d101      	bne.n	8008348 <FLASH_READ_BufferHF+0x20>
		OpCode = 0xD6;
 8008344:	23d6      	movs	r3, #214	; 0xd6
 8008346:	73fb      	strb	r3, [r7, #15]
	}
	uint8_t AddressByte = 0x00;
 8008348:	2300      	movs	r3, #0
 800834a:	73bb      	strb	r3, [r7, #14]
	uint8_t command[5] = {OpCode, DUMMYBYTE, DUMMYBYTE, AddressByte, DUMMYBYTE};
 800834c:	7bfb      	ldrb	r3, [r7, #15]
 800834e:	723b      	strb	r3, [r7, #8]
 8008350:	23ff      	movs	r3, #255	; 0xff
 8008352:	727b      	strb	r3, [r7, #9]
 8008354:	23ff      	movs	r3, #255	; 0xff
 8008356:	72bb      	strb	r3, [r7, #10]
 8008358:	7bbb      	ldrb	r3, [r7, #14]
 800835a:	72fb      	strb	r3, [r7, #11]
 800835c:	23ff      	movs	r3, #255	; 0xff
 800835e:	733b      	strb	r3, [r7, #12]

	//Delays if Flash chip is busy
	FLASH_Delay(ChipNumber);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f7ff fed5 	bl	8008110 <FLASH_Delay>

	//Select Slave
	FLASH_ChipSelect_setState(ChipNumber,CS_OPEN);
 8008366:	2100      	movs	r1, #0
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f7ff fe71 	bl	8008050 <FLASH_ChipSelect_setState>

	//Transmit Command
	HAL_SPI_Transmit(&hspi2, command, 5, 500);
 800836e:	f107 0108 	add.w	r1, r7, #8
 8008372:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008376:	2205      	movs	r2, #5
 8008378:	480c      	ldr	r0, [pc, #48]	; (80083ac <FLASH_READ_BufferHF+0x84>)
 800837a:	f7fb ff08 	bl	800418e <HAL_SPI_Transmit>

	//Receive Data
	HAL_SPI_Receive(&hspi2, Data_rx(), _264or256, HAL_MAX_DELAY);
 800837e:	f7ff feed 	bl	800815c <Data_rx>
 8008382:	4601      	mov	r1, r0
 8008384:	4b0a      	ldr	r3, [pc, #40]	; (80083b0 <FLASH_READ_BufferHF+0x88>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	b29a      	uxth	r2, r3
 800838a:	f04f 33ff 	mov.w	r3, #4294967295
 800838e:	4807      	ldr	r0, [pc, #28]	; (80083ac <FLASH_READ_BufferHF+0x84>)
 8008390:	f7fc f861 	bl	8004456 <HAL_SPI_Receive>

	//Deselect Slave
	FLASH_ChipSelect_setState(ChipNumber, CS_CLOSED);
 8008394:	2101      	movs	r1, #1
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7ff fe5a 	bl	8008050 <FLASH_ChipSelect_setState>

	//Return Correctly sized buffer using Data_rx()
	return Data_rx();
 800839c:	f7ff fede 	bl	800815c <Data_rx>
 80083a0:	4603      	mov	r3, r0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	2000097c 	.word	0x2000097c
 80083b0:	20000008 	.word	0x20000008

080083b4 <FLASH_WRITE_ReadModifyWrite>:
  * @DESCRIPTION WRITES a variable number of bytes through a buffer of the users choice.
  * This function takes in data in the form of a uint8_t array. The size of array needs to be specified
  * and passed into the function.
  */
int FLASH_WRITE_ReadModifyWrite(int ChipNumber, int BUFFERx, uint8_t* Data, int size)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b086      	sub	sp, #24
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
 80083c0:	603b      	str	r3, [r7, #0]
	//Define Command to be transmitted
	uint8_t OpCode;
	if (BUFFERx == BUFFER1){
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d102      	bne.n	80083ce <FLASH_WRITE_ReadModifyWrite+0x1a>
		OpCode = 0x58;
 80083c8:	2358      	movs	r3, #88	; 0x58
 80083ca:	75fb      	strb	r3, [r7, #23]
 80083cc:	e004      	b.n	80083d8 <FLASH_WRITE_ReadModifyWrite+0x24>
	} else if (BUFFERx == BUFFER2){
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	d101      	bne.n	80083d8 <FLASH_WRITE_ReadModifyWrite+0x24>
		OpCode = 0x59;
 80083d4:	2359      	movs	r3, #89	; 0x59
 80083d6:	75fb      	strb	r3, [r7, #23]
	}
	uint8_t command[4] = {OpCode, Current_Address[0], Current_Address[1], Current_Address[2]};
 80083d8:	7dfb      	ldrb	r3, [r7, #23]
 80083da:	743b      	strb	r3, [r7, #16]
 80083dc:	4b15      	ldr	r3, [pc, #84]	; (8008434 <FLASH_WRITE_ReadModifyWrite+0x80>)
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	747b      	strb	r3, [r7, #17]
 80083e2:	4b14      	ldr	r3, [pc, #80]	; (8008434 <FLASH_WRITE_ReadModifyWrite+0x80>)
 80083e4:	785b      	ldrb	r3, [r3, #1]
 80083e6:	74bb      	strb	r3, [r7, #18]
 80083e8:	4b12      	ldr	r3, [pc, #72]	; (8008434 <FLASH_WRITE_ReadModifyWrite+0x80>)
 80083ea:	789b      	ldrb	r3, [r3, #2]
 80083ec:	74fb      	strb	r3, [r7, #19]

	//Delays if Flash chip is busy
	FLASH_Delay(ChipNumber);
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f7ff fe8e 	bl	8008110 <FLASH_Delay>

	//Select Slave
	FLASH_ChipSelect_setState(ChipNumber,CS_OPEN);
 80083f4:	2100      	movs	r1, #0
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	f7ff fe2a 	bl	8008050 <FLASH_ChipSelect_setState>

	//Transmit Command
	HAL_SPI_Transmit(&hspi2, command, 4, 400);
 80083fc:	f107 0110 	add.w	r1, r7, #16
 8008400:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008404:	2204      	movs	r2, #4
 8008406:	480c      	ldr	r0, [pc, #48]	; (8008438 <FLASH_WRITE_ReadModifyWrite+0x84>)
 8008408:	f7fb fec1 	bl	800418e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, Data, size, HAL_MAX_DELAY);
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	b29a      	uxth	r2, r3
 8008410:	f04f 33ff 	mov.w	r3, #4294967295
 8008414:	6879      	ldr	r1, [r7, #4]
 8008416:	4808      	ldr	r0, [pc, #32]	; (8008438 <FLASH_WRITE_ReadModifyWrite+0x84>)
 8008418:	f7fb feb9 	bl	800418e <HAL_SPI_Transmit>

	//Deselect Slave
	FLASH_ChipSelect_setState(ChipNumber,CS_CLOSED);
 800841c:	2101      	movs	r1, #1
 800841e:	68f8      	ldr	r0, [r7, #12]
 8008420:	f7ff fe16 	bl	8008050 <FLASH_ChipSelect_setState>

	//Returns 1 if Write was unsuccessful and 0 if successful. This is determined from EPE bit in the Status Register
	return FLASH_ADDITIONAL_GetEPEbit(ChipNumber);
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f000 f86f 	bl	8008508 <FLASH_ADDITIONAL_GetEPEbit>
 800842a:	4603      	mov	r3, r0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3718      	adds	r7, #24
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}
 8008434:	200006e8 	.word	0x200006e8
 8008438:	2000097c 	.word	0x2000097c

0800843c <FLASH_WRITE_PageOrByte_NoErase>:
/**
  * @DESCRIPTION WRITES to a page in main memory through Buffer 1 and can write up to 256 Bytes.
  * The size of the uint8_t data array needs to specified and passed in the function.
  */
int FLASH_WRITE_PageOrByte_NoErase(int ChipNumber,  uint8_t* Data, int size)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b086      	sub	sp, #24
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	607a      	str	r2, [r7, #4]
	//Only writes through buffer 1
	//Define Command to be transmitted
	uint8_t OpCode = 0x02;
 8008448:	2302      	movs	r3, #2
 800844a:	75fb      	strb	r3, [r7, #23]
	uint8_t command[4] = {OpCode, Current_Address[0], Current_Address[1], 0x00};
 800844c:	7dfb      	ldrb	r3, [r7, #23]
 800844e:	743b      	strb	r3, [r7, #16]
 8008450:	4b15      	ldr	r3, [pc, #84]	; (80084a8 <FLASH_WRITE_PageOrByte_NoErase+0x6c>)
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	747b      	strb	r3, [r7, #17]
 8008456:	4b14      	ldr	r3, [pc, #80]	; (80084a8 <FLASH_WRITE_PageOrByte_NoErase+0x6c>)
 8008458:	785b      	ldrb	r3, [r3, #1]
 800845a:	74bb      	strb	r3, [r7, #18]
 800845c:	2300      	movs	r3, #0
 800845e:	74fb      	strb	r3, [r7, #19]

	//Delays if Flash chip is busy
	FLASH_Delay(ChipNumber);
 8008460:	68f8      	ldr	r0, [r7, #12]
 8008462:	f7ff fe55 	bl	8008110 <FLASH_Delay>

	//Select Slave
	FLASH_ChipSelect_setState(ChipNumber,CS_OPEN);
 8008466:	2100      	movs	r1, #0
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f7ff fdf1 	bl	8008050 <FLASH_ChipSelect_setState>

	//Transmit Command
	HAL_SPI_Transmit(&hspi2, command, 4, 400);
 800846e:	f107 0110 	add.w	r1, r7, #16
 8008472:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008476:	2204      	movs	r2, #4
 8008478:	480c      	ldr	r0, [pc, #48]	; (80084ac <FLASH_WRITE_PageOrByte_NoErase+0x70>)
 800847a:	f7fb fe88 	bl	800418e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, Data, size, HAL_MAX_DELAY);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	b29a      	uxth	r2, r3
 8008482:	f04f 33ff 	mov.w	r3, #4294967295
 8008486:	68b9      	ldr	r1, [r7, #8]
 8008488:	4808      	ldr	r0, [pc, #32]	; (80084ac <FLASH_WRITE_PageOrByte_NoErase+0x70>)
 800848a:	f7fb fe80 	bl	800418e <HAL_SPI_Transmit>

	//Deselect Slave
	FLASH_ChipSelect_setState(ChipNumber,CS_CLOSED);
 800848e:	2101      	movs	r1, #1
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	f7ff fddd 	bl	8008050 <FLASH_ChipSelect_setState>

	//Returns 1 if Write was unsuccessful and 0 if successful. This is determined from EPE bit in the Status Register
	return FLASH_ADDITIONAL_GetEPEbit(ChipNumber);
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f000 f836 	bl	8008508 <FLASH_ADDITIONAL_GetEPEbit>
 800849c:	4603      	mov	r3, r0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3718      	adds	r7, #24
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	200006e8 	.word	0x200006e8
 80084ac:	2000097c 	.word	0x2000097c

080084b0 <FLASH_ERASE_Page>:
/**
  * @DESCRIPTION ERASES a page from the currently selected chip at the Current_Address.
  * Default erase value is 1 for each bit. This operation takes approx. 7 - 35ms.
  */
int FLASH_ERASE_Page(int ChipNumber)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
	//Define Command
	uint8_t command[4] = {0x81, Current_Address[0], Current_Address[1], DUMMYBYTE};
 80084b8:	2381      	movs	r3, #129	; 0x81
 80084ba:	733b      	strb	r3, [r7, #12]
 80084bc:	4b10      	ldr	r3, [pc, #64]	; (8008500 <FLASH_ERASE_Page+0x50>)
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	737b      	strb	r3, [r7, #13]
 80084c2:	4b0f      	ldr	r3, [pc, #60]	; (8008500 <FLASH_ERASE_Page+0x50>)
 80084c4:	785b      	ldrb	r3, [r3, #1]
 80084c6:	73bb      	strb	r3, [r7, #14]
 80084c8:	23ff      	movs	r3, #255	; 0xff
 80084ca:	73fb      	strb	r3, [r7, #15]

	//Delay function if chip is busy
	FLASH_Delay(ChipNumber);
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f7ff fe1f 	bl	8008110 <FLASH_Delay>

	//Open line to slave
	FLASH_ChipSelect_setState(ChipNumber,CS_OPEN);
 80084d2:	2100      	movs	r1, #0
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f7ff fdbb 	bl	8008050 <FLASH_ChipSelect_setState>

	//Transmit command
	HAL_SPI_Transmit(&hspi2, command, 4, 100);
 80084da:	f107 010c 	add.w	r1, r7, #12
 80084de:	2364      	movs	r3, #100	; 0x64
 80084e0:	2204      	movs	r2, #4
 80084e2:	4808      	ldr	r0, [pc, #32]	; (8008504 <FLASH_ERASE_Page+0x54>)
 80084e4:	f7fb fe53 	bl	800418e <HAL_SPI_Transmit>

	//Close line to slave
	FLASH_ChipSelect_setState(ChipNumber,CS_CLOSED);
 80084e8:	2101      	movs	r1, #1
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f7ff fdb0 	bl	8008050 <FLASH_ChipSelect_setState>

	//Returns 1 if ERASE was unsuccessful and 0 if successful. This is determined from EPE bit in the Status Register
	return FLASH_ADDITIONAL_GetEPEbit(ChipNumber);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 f809 	bl	8008508 <FLASH_ADDITIONAL_GetEPEbit>
 80084f6:	4603      	mov	r3, r0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3710      	adds	r7, #16
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	200006e8 	.word	0x200006e8
 8008504:	2000097c 	.word	0x2000097c

08008508 <FLASH_ADDITIONAL_GetEPEbit>:
	//Deselect Slave
	FLASH_ChipSelect_setState(ChipNumber,CS_CLOSED);
}

int FLASH_ADDITIONAL_GetEPEbit(int ChipNumber)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
	FLASH_GetStatusRegister(ChipNumber); 			//Update STATUS REGISTER
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f7ff fdd9 	bl	80080c8 <FLASH_GetStatusRegister>
	int EPE = (FLASH_STATUS_REGISTER[1]&0x20)>>5;	//Extract EPE bit
 8008516:	4b05      	ldr	r3, [pc, #20]	; (800852c <FLASH_ADDITIONAL_GetEPEbit+0x24>)
 8008518:	785b      	ldrb	r3, [r3, #1]
 800851a:	115b      	asrs	r3, r3, #5
 800851c:	f003 0301 	and.w	r3, r3, #1
 8008520:	60fb      	str	r3, [r7, #12]
	return EPE;										//Return EPE bit
 8008522:	68fb      	ldr	r3, [r7, #12]

}
 8008524:	4618      	mov	r0, r3
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	200006ec 	.word	0x200006ec

08008530 <MX_SPI_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
HAL_StatusTypeDef MX_SPI_Init(SPI_TypeDef *SPIx, SPI_HandleTypeDef *hspi)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]

	//For stm32L4 Nucleo 64 board there are 3 SPI peripherals
		/* SPI1 parameter configuration*/
		hspi->Instance = SPIx;										//Determines Which SPI is being used
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	601a      	str	r2, [r3, #0]
		hspi->Init.Mode = SPI_MODE;									//Determines if in Master or Slave Mode
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008546:	605a      	str	r2, [r3, #4]
		hspi->Init.Direction = SPI_DIRECTION;						//Determines if Full or Half Duplex is used
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	2200      	movs	r2, #0
 800854c:	609a      	str	r2, [r3, #8]
		hspi->Init.DataSize = SPI_DATASIZE;							//Determines Datasize to be sent across
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008554:	60da      	str	r2, [r3, #12]
		hspi->Init.CLKPolarity = SPI_CLKPolarity ;					//Determines if Clock idles High or Low
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	2200      	movs	r2, #0
 800855a:	611a      	str	r2, [r3, #16]
		hspi->Init.CLKPhase = SPI_CLKPhase;							//Determines if signal sampled on Rising or falling edge of clock
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	2200      	movs	r2, #0
 8008560:	615a      	str	r2, [r3, #20]
		hspi->Init.NSS = SPI_NSS;									//Determines if Slave select is Hardware or Software enabled
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008568:	619a      	str	r2, [r3, #24]
		hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER;		//Determines the SPI and therefore Slave clock speed
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	2210      	movs	r2, #16
 800856e:	61da      	str	r2, [r3, #28]
		hspi->Init.FirstBit = SPI_FIRSTBIT;							//Determines if LSB or MSB first
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	2200      	movs	r2, #0
 8008574:	621a      	str	r2, [r3, #32]
		hspi->Init.TIMode = SPI_TIMODE;								//Determines if TI mode is used
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	2200      	movs	r2, #0
 800857a:	625a      	str	r2, [r3, #36]	; 0x24
		hspi->Init.CRCCalculation = SPI_CRCCALCULATION;				//Enables CRC Calculation
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	2200      	movs	r2, #0
 8008580:	629a      	str	r2, [r3, #40]	; 0x28
		hspi->Init.CRCPolynomial = SPI_CRCPOLYNOMIAL;				//Sets the CRC Polynomial
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	2207      	movs	r2, #7
 8008586:	62da      	str	r2, [r3, #44]	; 0x2c
		hspi->Init.CRCLength = SPI_CRCLENGTH;						//Sets the CRC length
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	2200      	movs	r2, #0
 800858c:	631a      	str	r2, [r3, #48]	; 0x30
		hspi->Init.NSSPMode = SPI_NSSPMODE;							//Sets the NSSP mode
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	2208      	movs	r2, #8
 8008592:	635a      	str	r2, [r3, #52]	; 0x34
		if (HAL_SPI_Init(hspi) != HAL_OK)
 8008594:	6838      	ldr	r0, [r7, #0]
 8008596:	f7fb fd72 	bl	800407e <HAL_SPI_Init>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d001      	beq.n	80085a4 <MX_SPI_Init+0x74>
		{
			return HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e000      	b.n	80085a6 <MX_SPI_Init+0x76>
		}

		return HAL_OK;
 80085a4:	2300      	movs	r3, #0
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3708      	adds	r7, #8
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
	...

080085b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b086      	sub	sp, #24
 80085b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085b6:	1d3b      	adds	r3, r7, #4
 80085b8:	2200      	movs	r2, #0
 80085ba:	601a      	str	r2, [r3, #0]
 80085bc:	605a      	str	r2, [r3, #4]
 80085be:	609a      	str	r2, [r3, #8]
 80085c0:	60da      	str	r2, [r3, #12]
 80085c2:	611a      	str	r2, [r3, #16]

  //GPIO Ports Clock Enable
  GPIO_RCC_Init();
 80085c4:	f000 f832 	bl	800862c <GPIO_RCC_Init>

  //SET PIN STATE
  GPIO_PIN_STATE_Init();
 80085c8:	f000 f89a 	bl	8008700 <GPIO_PIN_STATE_Init>
  /*Configure GPIO pins : PC0 PC1 PC3 */
  /*
   * Chips 1,2 have CS lines running to PC0 and PC1
   * All chips have wp on PC3
   */
  GPIO_InitStruct.Pin =  GPIO_CHIP_1_CS|GPIO_CHIP_2_CS|GPIO_CHIP_WP;
 80085cc:	230b      	movs	r3, #11
 80085ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80085d0:	2301      	movs	r3, #1
 80085d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085d4:	2300      	movs	r3, #0
 80085d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085d8:	2300      	movs	r3, #0
 80085da:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIO_CHIP_1_CS_PORT, &GPIO_InitStruct);
 80085dc:	1d3b      	adds	r3, r7, #4
 80085de:	4619      	mov	r1, r3
 80085e0:	4810      	ldr	r0, [pc, #64]	; (8008624 <MX_GPIO_Init+0x74>)
 80085e2:	f7f9 fa5f 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 */
  //for Chip 4 CS
  GPIO_InitStruct.Pin = GPIO_CHIP_4_CS;
 80085e6:	2310      	movs	r3, #16
 80085e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80085ea:	2301      	movs	r3, #1
 80085ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085ee:	2300      	movs	r3, #0
 80085f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085f2:	2300      	movs	r3, #0
 80085f4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIO_CHIP_4_CS_PORT, &GPIO_InitStruct);
 80085f6:	1d3b      	adds	r3, r7, #4
 80085f8:	4619      	mov	r1, r3
 80085fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80085fe:	f7f9 fa51 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  //for Chip 3 CS
  GPIO_InitStruct.Pin = GPIO_CHIP_3_CS;
 8008602:	2301      	movs	r3, #1
 8008604:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008606:	2301      	movs	r3, #1
 8008608:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800860a:	2300      	movs	r3, #0
 800860c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800860e:	2300      	movs	r3, #0
 8008610:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIO_CHIP_3_CS_PORT, &GPIO_InitStruct);
 8008612:	1d3b      	adds	r3, r7, #4
 8008614:	4619      	mov	r1, r3
 8008616:	4804      	ldr	r0, [pc, #16]	; (8008628 <MX_GPIO_Init+0x78>)
 8008618:	f7f9 fa44 	bl	8001aa4 <HAL_GPIO_Init>

}
 800861c:	bf00      	nop
 800861e:	3718      	adds	r7, #24
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	48000800 	.word	0x48000800
 8008628:	48000400 	.word	0x48000400

0800862c <GPIO_RCC_Init>:

void GPIO_RCC_Init(void)
{
 800862c:	b480      	push	{r7}
 800862e:	b089      	sub	sp, #36	; 0x24
 8008630:	af00      	add	r7, sp, #0
	//GPIOA
	  if(RCC_GPIOA_CLK_ENABLE){
		  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008632:	4a32      	ldr	r2, [pc, #200]	; (80086fc <GPIO_RCC_Init+0xd0>)
 8008634:	4b31      	ldr	r3, [pc, #196]	; (80086fc <GPIO_RCC_Init+0xd0>)
 8008636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008638:	f043 0301 	orr.w	r3, r3, #1
 800863c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800863e:	4b2f      	ldr	r3, [pc, #188]	; (80086fc <GPIO_RCC_Init+0xd0>)
 8008640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008642:	f003 0301 	and.w	r3, r3, #1
 8008646:	61fb      	str	r3, [r7, #28]
 8008648:	69fb      	ldr	r3, [r7, #28]
		  __HAL_RCC_GPIOA_CLK_DISABLE();
	  }

	  //GPIOB
	  if(RCC_GPIOA_CLK_ENABLE){
		  __HAL_RCC_GPIOB_CLK_ENABLE();
 800864a:	4a2c      	ldr	r2, [pc, #176]	; (80086fc <GPIO_RCC_Init+0xd0>)
 800864c:	4b2b      	ldr	r3, [pc, #172]	; (80086fc <GPIO_RCC_Init+0xd0>)
 800864e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008650:	f043 0302 	orr.w	r3, r3, #2
 8008654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008656:	4b29      	ldr	r3, [pc, #164]	; (80086fc <GPIO_RCC_Init+0xd0>)
 8008658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800865a:	f003 0302 	and.w	r3, r3, #2
 800865e:	61bb      	str	r3, [r7, #24]
 8008660:	69bb      	ldr	r3, [r7, #24]
		  __HAL_RCC_GPIOB_CLK_DISABLE();
	  }

	  //GPIOC
	  if(RCC_GPIOA_CLK_ENABLE){
		  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008662:	4a26      	ldr	r2, [pc, #152]	; (80086fc <GPIO_RCC_Init+0xd0>)
 8008664:	4b25      	ldr	r3, [pc, #148]	; (80086fc <GPIO_RCC_Init+0xd0>)
 8008666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008668:	f043 0304 	orr.w	r3, r3, #4
 800866c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800866e:	4b23      	ldr	r3, [pc, #140]	; (80086fc <GPIO_RCC_Init+0xd0>)
 8008670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008672:	f003 0304 	and.w	r3, r3, #4
 8008676:	617b      	str	r3, [r7, #20]
 8008678:	697b      	ldr	r3, [r7, #20]
		  __HAL_RCC_GPIOC_CLK_DISABLE();
	  }

	  //GPIOD
	  if(RCC_GPIOA_CLK_ENABLE){
		  __HAL_RCC_GPIOD_CLK_ENABLE();
 800867a:	4a20      	ldr	r2, [pc, #128]	; (80086fc <GPIO_RCC_Init+0xd0>)
 800867c:	4b1f      	ldr	r3, [pc, #124]	; (80086fc <GPIO_RCC_Init+0xd0>)
 800867e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008680:	f043 0308 	orr.w	r3, r3, #8
 8008684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008686:	4b1d      	ldr	r3, [pc, #116]	; (80086fc <GPIO_RCC_Init+0xd0>)
 8008688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800868a:	f003 0308 	and.w	r3, r3, #8
 800868e:	613b      	str	r3, [r7, #16]
 8008690:	693b      	ldr	r3, [r7, #16]
		  __HAL_RCC_GPIOD_CLK_DISABLE();
	  }

	  //GPIOE
	  if(RCC_GPIOA_CLK_ENABLE){
		  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008692:	4a1a      	ldr	r2, [pc, #104]	; (80086fc <GPIO_RCC_Init+0xd0>)
 8008694:	4b19      	ldr	r3, [pc, #100]	; (80086fc <GPIO_RCC_Init+0xd0>)
 8008696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008698:	f043 0310 	orr.w	r3, r3, #16
 800869c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800869e:	4b17      	ldr	r3, [pc, #92]	; (80086fc <GPIO_RCC_Init+0xd0>)
 80086a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086a2:	f003 0310 	and.w	r3, r3, #16
 80086a6:	60fb      	str	r3, [r7, #12]
 80086a8:	68fb      	ldr	r3, [r7, #12]
		  __HAL_RCC_GPIOE_CLK_DISABLE();
	  }

	  //GPIOF
	  if(RCC_GPIOA_CLK_ENABLE){
		  __HAL_RCC_GPIOF_CLK_ENABLE();
 80086aa:	4a14      	ldr	r2, [pc, #80]	; (80086fc <GPIO_RCC_Init+0xd0>)
 80086ac:	4b13      	ldr	r3, [pc, #76]	; (80086fc <GPIO_RCC_Init+0xd0>)
 80086ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086b0:	f043 0320 	orr.w	r3, r3, #32
 80086b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80086b6:	4b11      	ldr	r3, [pc, #68]	; (80086fc <GPIO_RCC_Init+0xd0>)
 80086b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086ba:	f003 0320 	and.w	r3, r3, #32
 80086be:	60bb      	str	r3, [r7, #8]
 80086c0:	68bb      	ldr	r3, [r7, #8]
		  __HAL_RCC_GPIOF_CLK_DISABLE();
	  }

	  //GPIOG
	  if(RCC_GPIOA_CLK_ENABLE){
		  __HAL_RCC_GPIOG_CLK_ENABLE();
 80086c2:	4a0e      	ldr	r2, [pc, #56]	; (80086fc <GPIO_RCC_Init+0xd0>)
 80086c4:	4b0d      	ldr	r3, [pc, #52]	; (80086fc <GPIO_RCC_Init+0xd0>)
 80086c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80086ce:	4b0b      	ldr	r3, [pc, #44]	; (80086fc <GPIO_RCC_Init+0xd0>)
 80086d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d6:	607b      	str	r3, [r7, #4]
 80086d8:	687b      	ldr	r3, [r7, #4]
		  __HAL_RCC_GPIOG_CLK_DISABLE();
	  }

	  //GPIOH
	  if(RCC_GPIOA_CLK_ENABLE){
		  __HAL_RCC_GPIOH_CLK_ENABLE();
 80086da:	4a08      	ldr	r2, [pc, #32]	; (80086fc <GPIO_RCC_Init+0xd0>)
 80086dc:	4b07      	ldr	r3, [pc, #28]	; (80086fc <GPIO_RCC_Init+0xd0>)
 80086de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80086e6:	4b05      	ldr	r3, [pc, #20]	; (80086fc <GPIO_RCC_Init+0xd0>)
 80086e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086ee:	603b      	str	r3, [r7, #0]
 80086f0:	683b      	ldr	r3, [r7, #0]
	  } else {
		  __HAL_RCC_GPIOH_CLK_DISABLE();
	  }

}
 80086f2:	bf00      	nop
 80086f4:	3724      	adds	r7, #36	; 0x24
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bc80      	pop	{r7}
 80086fa:	4770      	bx	lr
 80086fc:	40021000 	.word	0x40021000

08008700 <GPIO_PIN_STATE_Init>:

void GPIO_PIN_STATE_Init()
{
 8008700:	b580      	push	{r7, lr}
 8008702:	af00      	add	r7, sp, #0
	/*Configure GPIOS pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, GPIOA_PINS, GPIO_PIN_SET);
 8008704:	2201      	movs	r2, #1
 8008706:	2110      	movs	r1, #16
 8008708:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800870c:	f7f9 fc64 	bl	8001fd8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, ~GPIOA_PINS, GPIO_PIN_RESET);
 8008710:	2200      	movs	r2, #0
 8008712:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8008716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800871a:	f7f9 fc5d 	bl	8001fd8 <HAL_GPIO_WritePin>

	  /*Configure GPIOB pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, GPIOB_PINS, GPIO_PIN_SET);
 800871e:	2201      	movs	r2, #1
 8008720:	2101      	movs	r1, #1
 8008722:	4826      	ldr	r0, [pc, #152]	; (80087bc <GPIO_PIN_STATE_Init+0xbc>)
 8008724:	f7f9 fc58 	bl	8001fd8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, ~GPIOB_PINS, GPIO_PIN_RESET);
 8008728:	2200      	movs	r2, #0
 800872a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 800872e:	4823      	ldr	r0, [pc, #140]	; (80087bc <GPIO_PIN_STATE_Init+0xbc>)
 8008730:	f7f9 fc52 	bl	8001fd8 <HAL_GPIO_WritePin>

	  /*Configure GPIOC pin Output Level */
	  HAL_GPIO_WritePin(GPIOC, GPIOC_PINS, GPIO_PIN_SET);
 8008734:	2201      	movs	r2, #1
 8008736:	210b      	movs	r1, #11
 8008738:	4821      	ldr	r0, [pc, #132]	; (80087c0 <GPIO_PIN_STATE_Init+0xc0>)
 800873a:	f7f9 fc4d 	bl	8001fd8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, ~GPIOC_PINS, GPIO_PIN_RESET);
 800873e:	2200      	movs	r2, #0
 8008740:	f64f 71f4 	movw	r1, #65524	; 0xfff4
 8008744:	481e      	ldr	r0, [pc, #120]	; (80087c0 <GPIO_PIN_STATE_Init+0xc0>)
 8008746:	f7f9 fc47 	bl	8001fd8 <HAL_GPIO_WritePin>

	  /*Configure GPIOD pin Output Level */
	  HAL_GPIO_WritePin(GPIOD, GPIOD_PINS, GPIO_PIN_SET);
 800874a:	2201      	movs	r2, #1
 800874c:	2100      	movs	r1, #0
 800874e:	481d      	ldr	r0, [pc, #116]	; (80087c4 <GPIO_PIN_STATE_Init+0xc4>)
 8008750:	f7f9 fc42 	bl	8001fd8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, ~GPIOD_PINS, GPIO_PIN_RESET);
 8008754:	2200      	movs	r2, #0
 8008756:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800875a:	481a      	ldr	r0, [pc, #104]	; (80087c4 <GPIO_PIN_STATE_Init+0xc4>)
 800875c:	f7f9 fc3c 	bl	8001fd8 <HAL_GPIO_WritePin>

	  /*Configure GPIOE pin Output Level */
	  HAL_GPIO_WritePin(GPIOE, GPIOE_PINS, GPIO_PIN_SET);
 8008760:	2201      	movs	r2, #1
 8008762:	2100      	movs	r1, #0
 8008764:	4818      	ldr	r0, [pc, #96]	; (80087c8 <GPIO_PIN_STATE_Init+0xc8>)
 8008766:	f7f9 fc37 	bl	8001fd8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, ~GPIOE_PINS, GPIO_PIN_RESET);
 800876a:	2200      	movs	r2, #0
 800876c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008770:	4815      	ldr	r0, [pc, #84]	; (80087c8 <GPIO_PIN_STATE_Init+0xc8>)
 8008772:	f7f9 fc31 	bl	8001fd8 <HAL_GPIO_WritePin>

	  /*Configure GPIOF pin Output Level */
	  HAL_GPIO_WritePin(GPIOF, GPIOF_PINS, GPIO_PIN_SET);
 8008776:	2201      	movs	r2, #1
 8008778:	2100      	movs	r1, #0
 800877a:	4814      	ldr	r0, [pc, #80]	; (80087cc <GPIO_PIN_STATE_Init+0xcc>)
 800877c:	f7f9 fc2c 	bl	8001fd8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOF, ~GPIOF_PINS, GPIO_PIN_RESET);
 8008780:	2200      	movs	r2, #0
 8008782:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008786:	4811      	ldr	r0, [pc, #68]	; (80087cc <GPIO_PIN_STATE_Init+0xcc>)
 8008788:	f7f9 fc26 	bl	8001fd8 <HAL_GPIO_WritePin>

	  /*Configure GPIOG pin Output Level */
	  HAL_GPIO_WritePin(GPIOE, GPIOG_PINS, GPIO_PIN_SET);
 800878c:	2201      	movs	r2, #1
 800878e:	2100      	movs	r1, #0
 8008790:	480d      	ldr	r0, [pc, #52]	; (80087c8 <GPIO_PIN_STATE_Init+0xc8>)
 8008792:	f7f9 fc21 	bl	8001fd8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, ~GPIOG_PINS, GPIO_PIN_RESET);
 8008796:	2200      	movs	r2, #0
 8008798:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800879c:	480a      	ldr	r0, [pc, #40]	; (80087c8 <GPIO_PIN_STATE_Init+0xc8>)
 800879e:	f7f9 fc1b 	bl	8001fd8 <HAL_GPIO_WritePin>

	  /*Configure GPIOH pin Output Level */
	  HAL_GPIO_WritePin(GPIOF, GPIOH_PINS, GPIO_PIN_SET);
 80087a2:	2201      	movs	r2, #1
 80087a4:	2100      	movs	r1, #0
 80087a6:	4809      	ldr	r0, [pc, #36]	; (80087cc <GPIO_PIN_STATE_Init+0xcc>)
 80087a8:	f7f9 fc16 	bl	8001fd8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOF, ~GPIOH_PINS, GPIO_PIN_RESET);
 80087ac:	2200      	movs	r2, #0
 80087ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80087b2:	4806      	ldr	r0, [pc, #24]	; (80087cc <GPIO_PIN_STATE_Init+0xcc>)
 80087b4:	f7f9 fc10 	bl	8001fd8 <HAL_GPIO_WritePin>

}
 80087b8:	bf00      	nop
 80087ba:	bd80      	pop	{r7, pc}
 80087bc:	48000400 	.word	0x48000400
 80087c0:	48000800 	.word	0x48000800
 80087c4:	48000c00 	.word	0x48000c00
 80087c8:	48001000 	.word	0x48001000
 80087cc:	48001400 	.word	0x48001400

080087d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef MX_TIM2_Init(void)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b098      	sub	sp, #96	; 0x60
 80087d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
	//reset code before init
	htim2.Instance = TIM2;
 80087d6:	4b63      	ldr	r3, [pc, #396]	; (8008964 <MX_TIM2_Init+0x194>)
 80087d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80087dc:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 80087de:	4861      	ldr	r0, [pc, #388]	; (8008964 <MX_TIM2_Init+0x194>)
 80087e0:	f7fc fb92 	bl	8004f08 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_IC_Stop_IT(&htim2,TIM_CHANNEL_1);
 80087e4:	2100      	movs	r1, #0
 80087e6:	485f      	ldr	r0, [pc, #380]	; (8008964 <MX_TIM2_Init+0x194>)
 80087e8:	f7fc fd6e 	bl	80052c8 <HAL_TIM_IC_Stop_IT>
	if(HAL_TIM_Base_DeInit(&htim2) != HAL_OK)
 80087ec:	485d      	ldr	r0, [pc, #372]	; (8008964 <MX_TIM2_Init+0x194>)
 80087ee:	f7fc fb07 	bl	8004e00 <HAL_TIM_Base_DeInit>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d001      	beq.n	80087fc <MX_TIM2_Init+0x2c>
	{
			return GPS_Init_Periph_Config_Error;
 80087f8:	2306      	movs	r3, #6
 80087fa:	e0ae      	b.n	800895a <MX_TIM2_Init+0x18a>
	}
  /* USER CODE END TIM2_Init 0 */
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80087fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008800:	2200      	movs	r2, #0
 8008802:	601a      	str	r2, [r3, #0]
 8008804:	605a      	str	r2, [r3, #4]
 8008806:	609a      	str	r2, [r3, #8]
 8008808:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800880a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800880e:	2200      	movs	r2, #0
 8008810:	601a      	str	r2, [r3, #0]
 8008812:	605a      	str	r2, [r3, #4]
 8008814:	609a      	str	r2, [r3, #8]
 8008816:	60da      	str	r2, [r3, #12]
 8008818:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800881a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800881e:	2200      	movs	r2, #0
 8008820:	601a      	str	r2, [r3, #0]
 8008822:	605a      	str	r2, [r3, #4]
 8008824:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008826:	f107 0314 	add.w	r3, r7, #20
 800882a:	2200      	movs	r2, #0
 800882c:	601a      	str	r2, [r3, #0]
 800882e:	605a      	str	r2, [r3, #4]
 8008830:	609a      	str	r2, [r3, #8]
 8008832:	60da      	str	r2, [r3, #12]
 8008834:	611a      	str	r2, [r3, #16]
 8008836:	615a      	str	r2, [r3, #20]
 8008838:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800883a:	1d3b      	adds	r3, r7, #4
 800883c:	2200      	movs	r2, #0
 800883e:	601a      	str	r2, [r3, #0]
 8008840:	605a      	str	r2, [r3, #4]
 8008842:	609a      	str	r2, [r3, #8]
 8008844:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008846:	4b47      	ldr	r3, [pc, #284]	; (8008964 <MX_TIM2_Init+0x194>)
 8008848:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800884c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 800884e:	4b45      	ldr	r3, [pc, #276]	; (8008964 <MX_TIM2_Init+0x194>)
 8008850:	2201      	movs	r2, #1
 8008852:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008854:	4b43      	ldr	r3, [pc, #268]	; (8008964 <MX_TIM2_Init+0x194>)
 8008856:	2200      	movs	r2, #0
 8008858:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536;
 800885a:	4b42      	ldr	r3, [pc, #264]	; (8008964 <MX_TIM2_Init+0x194>)
 800885c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008860:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008862:	4b40      	ldr	r3, [pc, #256]	; (8008964 <MX_TIM2_Init+0x194>)
 8008864:	2200      	movs	r2, #0
 8008866:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008868:	4b3e      	ldr	r3, [pc, #248]	; (8008964 <MX_TIM2_Init+0x194>)
 800886a:	2200      	movs	r2, #0
 800886c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800886e:	483d      	ldr	r0, [pc, #244]	; (8008964 <MX_TIM2_Init+0x194>)
 8008870:	f7fc fa9b 	bl	8004daa <HAL_TIM_Base_Init>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d001      	beq.n	800887e <MX_TIM2_Init+0xae>
  {
	  return HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	e06d      	b.n	800895a <MX_TIM2_Init+0x18a>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800887e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008882:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008884:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008888:	4619      	mov	r1, r3
 800888a:	4836      	ldr	r0, [pc, #216]	; (8008964 <MX_TIM2_Init+0x194>)
 800888c:	f7fc ffc6 	bl	800581c <HAL_TIM_ConfigClockSource>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d001      	beq.n	800889a <MX_TIM2_Init+0xca>
  {
   return HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	e05f      	b.n	800895a <MX_TIM2_Init+0x18a>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800889a:	4832      	ldr	r0, [pc, #200]	; (8008964 <MX_TIM2_Init+0x194>)
 800889c:	f7fc fb5e 	bl	8004f5c <HAL_TIM_OC_Init>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d001      	beq.n	80088aa <MX_TIM2_Init+0xda>
  {
   return HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	e057      	b.n	800895a <MX_TIM2_Init+0x18a>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80088aa:	482e      	ldr	r0, [pc, #184]	; (8008964 <MX_TIM2_Init+0x194>)
 80088ac:	f7fc fcd8 	bl	8005260 <HAL_TIM_IC_Init>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d001      	beq.n	80088ba <MX_TIM2_Init+0xea>
  {
   return HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	e04f      	b.n	800895a <MX_TIM2_Init+0x18a>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80088ba:	2304      	movs	r3, #4
 80088bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80088be:	2360      	movs	r3, #96	; 0x60
 80088c0:	643b      	str	r3, [r7, #64]	; 0x40
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80088c2:	2300      	movs	r3, #0
 80088c4:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.TriggerFilter = 0;
 80088c6:	2300      	movs	r3, #0
 80088c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig) != HAL_OK)
 80088ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80088ce:	4619      	mov	r1, r3
 80088d0:	4824      	ldr	r0, [pc, #144]	; (8008964 <MX_TIM2_Init+0x194>)
 80088d2:	f7fd f85c 	bl	800598e <HAL_TIM_SlaveConfigSynchro>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d001      	beq.n	80088e0 <MX_TIM2_Init+0x110>
  {
   return HAL_ERROR;
 80088dc:	2301      	movs	r3, #1
 80088de:	e03c      	b.n	800895a <MX_TIM2_Init+0x18a>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80088e0:	2300      	movs	r3, #0
 80088e2:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80088e4:	2300      	movs	r3, #0
 80088e6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80088e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80088ec:	4619      	mov	r1, r3
 80088ee:	481d      	ldr	r0, [pc, #116]	; (8008964 <MX_TIM2_Init+0x194>)
 80088f0:	f7fd fe86 	bl	8006600 <HAL_TIMEx_MasterConfigSynchronization>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d001      	beq.n	80088fe <MX_TIM2_Init+0x12e>
  {
   return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e02d      	b.n	800895a <MX_TIM2_Init+0x18a>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80088fe:	2300      	movs	r3, #0
 8008900:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = CCR1_VAL;
 8008902:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8008906:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8008908:	2302      	movs	r3, #2
 800890a:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800890c:	2300      	movs	r3, #0
 800890e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008910:	f107 0314 	add.w	r3, r7, #20
 8008914:	2200      	movs	r2, #0
 8008916:	4619      	mov	r1, r3
 8008918:	4812      	ldr	r0, [pc, #72]	; (8008964 <MX_TIM2_Init+0x194>)
 800891a:	f7fc fe65 	bl	80055e8 <HAL_TIM_OC_ConfigChannel>
 800891e:	4603      	mov	r3, r0
 8008920:	2b00      	cmp	r3, #0
 8008922:	d001      	beq.n	8008928 <MX_TIM2_Init+0x158>
  {
   return HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	e018      	b.n	800895a <MX_TIM2_Init+0x18a>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8008928:	2300      	movs	r3, #0
 800892a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800892c:	2301      	movs	r3, #1
 800892e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8008930:	2300      	movs	r3, #0
 8008932:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8008934:	2300      	movs	r3, #0
 8008936:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8008938:	1d3b      	adds	r3, r7, #4
 800893a:	2204      	movs	r2, #4
 800893c:	4619      	mov	r1, r3
 800893e:	4809      	ldr	r0, [pc, #36]	; (8008964 <MX_TIM2_Init+0x194>)
 8008940:	f7fc fed0 	bl	80056e4 <HAL_TIM_IC_ConfigChannel>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d001      	beq.n	800894e <MX_TIM2_Init+0x17e>
  {
   return HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	e005      	b.n	800895a <MX_TIM2_Init+0x18a>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  __HAL_TIM_CLEAR_IT(&htim2,TIM_IT_UPDATE);
 800894e:	4b05      	ldr	r3, [pc, #20]	; (8008964 <MX_TIM2_Init+0x194>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f06f 0201 	mvn.w	r2, #1
 8008956:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM2_Init 2 */
  return HAL_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3760      	adds	r7, #96	; 0x60
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	20001330 	.word	0x20001330

08008968 <MX_UART4_Init>:
  * @param None
  * @retval HAL_StatusTypeDef
  */

HAL_StatusTypeDef MX_UART4_Init(void)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800896c:	4b14      	ldr	r3, [pc, #80]	; (80089c0 <MX_UART4_Init+0x58>)
 800896e:	4a15      	ldr	r2, [pc, #84]	; (80089c4 <MX_UART4_Init+0x5c>)
 8008970:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8008972:	4b13      	ldr	r3, [pc, #76]	; (80089c0 <MX_UART4_Init+0x58>)
 8008974:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8008978:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800897a:	4b11      	ldr	r3, [pc, #68]	; (80089c0 <MX_UART4_Init+0x58>)
 800897c:	2200      	movs	r2, #0
 800897e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8008980:	4b0f      	ldr	r3, [pc, #60]	; (80089c0 <MX_UART4_Init+0x58>)
 8008982:	2200      	movs	r2, #0
 8008984:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8008986:	4b0e      	ldr	r3, [pc, #56]	; (80089c0 <MX_UART4_Init+0x58>)
 8008988:	2200      	movs	r2, #0
 800898a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800898c:	4b0c      	ldr	r3, [pc, #48]	; (80089c0 <MX_UART4_Init+0x58>)
 800898e:	220c      	movs	r2, #12
 8008990:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008992:	4b0b      	ldr	r3, [pc, #44]	; (80089c0 <MX_UART4_Init+0x58>)
 8008994:	2200      	movs	r2, #0
 8008996:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8008998:	4b09      	ldr	r3, [pc, #36]	; (80089c0 <MX_UART4_Init+0x58>)
 800899a:	2200      	movs	r2, #0
 800899c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800899e:	4b08      	ldr	r3, [pc, #32]	; (80089c0 <MX_UART4_Init+0x58>)
 80089a0:	2200      	movs	r2, #0
 80089a2:	621a      	str	r2, [r3, #32]

  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80089a4:	4b06      	ldr	r3, [pc, #24]	; (80089c0 <MX_UART4_Init+0x58>)
 80089a6:	2200      	movs	r2, #0
 80089a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80089aa:	4805      	ldr	r0, [pc, #20]	; (80089c0 <MX_UART4_Init+0x58>)
 80089ac:	f7fd ff1d 	bl	80067ea <HAL_UART_Init>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d001      	beq.n	80089ba <MX_UART4_Init+0x52>
  {
   return HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	e000      	b.n	80089bc <MX_UART4_Init+0x54>
  }

  return HAL_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	200012b0 	.word	0x200012b0
 80089c4:	40004c00 	.word	0x40004c00

080089c8 <MX_DMA_Init>:
  *@pram None
  *@retval HAL_StatusTypeDef
  */

static HAL_StatusTypeDef MX_DMA_Init(void)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
	 * This piece of code is designed to completely reset the peripheral registers
	 * if an unwanted reset causes the DMA to keep the previous register settings and
	 * state. This causes unwanted interrupts in the program that are a nightmare to clear
	 */
	//for DMA RX channel
	if(DMA2_Channel5->CCR != 0)
 80089ce:	4b44      	ldr	r3, [pc, #272]	; (8008ae0 <MX_DMA_Init+0x118>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00d      	beq.n	80089f2 <MX_DMA_Init+0x2a>
 	{
 		  //clear channel to reset state
 		  hdma_uart4_rx.Instance = DMA2_Channel5;
 80089d6:	4b43      	ldr	r3, [pc, #268]	; (8008ae4 <MX_DMA_Init+0x11c>)
 80089d8:	4a41      	ldr	r2, [pc, #260]	; (8008ae0 <MX_DMA_Init+0x118>)
 80089da:	601a      	str	r2, [r3, #0]
 		  hdma_uart4_rx.DmaBaseAddress->ISR = DMA2->ISR;
 80089dc:	4b41      	ldr	r3, [pc, #260]	; (8008ae4 <MX_DMA_Init+0x11c>)
 80089de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e0:	4a41      	ldr	r2, [pc, #260]	; (8008ae8 <MX_DMA_Init+0x120>)
 80089e2:	6812      	ldr	r2, [r2, #0]
 80089e4:	601a      	str	r2, [r3, #0]
 		  hdma_uart4_rx.ChannelIndex = 5;
 80089e6:	4b3f      	ldr	r3, [pc, #252]	; (8008ae4 <MX_DMA_Init+0x11c>)
 80089e8:	2205      	movs	r2, #5
 80089ea:	645a      	str	r2, [r3, #68]	; 0x44
 		  HAL_DMA_DeInit(&hdma_uart4_rx);
 80089ec:	483d      	ldr	r0, [pc, #244]	; (8008ae4 <MX_DMA_Init+0x11c>)
 80089ee:	f7f8 fdbd 	bl	800156c <HAL_DMA_DeInit>
 	  }
	//for DMA TX channel
	if(DMA2_Channel3->CCR != 0)
 80089f2:	4b3e      	ldr	r3, [pc, #248]	; (8008aec <MX_DMA_Init+0x124>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d00d      	beq.n	8008a16 <MX_DMA_Init+0x4e>
	{
		hdma_uart4_tx.Instance = DMA2_Channel3;
 80089fa:	4b3d      	ldr	r3, [pc, #244]	; (8008af0 <MX_DMA_Init+0x128>)
 80089fc:	4a3b      	ldr	r2, [pc, #236]	; (8008aec <MX_DMA_Init+0x124>)
 80089fe:	601a      	str	r2, [r3, #0]
		hdma_uart4_tx.DmaBaseAddress->ISR = DMA2->ISR;
 8008a00:	4b3b      	ldr	r3, [pc, #236]	; (8008af0 <MX_DMA_Init+0x128>)
 8008a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a04:	4a38      	ldr	r2, [pc, #224]	; (8008ae8 <MX_DMA_Init+0x120>)
 8008a06:	6812      	ldr	r2, [r2, #0]
 8008a08:	601a      	str	r2, [r3, #0]
		hdma_uart4_tx.ChannelIndex = 3;
 8008a0a:	4b39      	ldr	r3, [pc, #228]	; (8008af0 <MX_DMA_Init+0x128>)
 8008a0c:	2203      	movs	r2, #3
 8008a0e:	645a      	str	r2, [r3, #68]	; 0x44
		HAL_DMA_DeInit(&hdma_uart4_tx);
 8008a10:	4837      	ldr	r0, [pc, #220]	; (8008af0 <MX_DMA_Init+0x128>)
 8008a12:	f7f8 fdab 	bl	800156c <HAL_DMA_DeInit>
	}
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8008a16:	4a37      	ldr	r2, [pc, #220]	; (8008af4 <MX_DMA_Init+0x12c>)
 8008a18:	4b36      	ldr	r3, [pc, #216]	; (8008af4 <MX_DMA_Init+0x12c>)
 8008a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a1c:	f043 0302 	orr.w	r3, r3, #2
 8008a20:	6493      	str	r3, [r2, #72]	; 0x48
 8008a22:	4b34      	ldr	r3, [pc, #208]	; (8008af4 <MX_DMA_Init+0x12c>)
 8008a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a26:	f003 0302 	and.w	r3, r3, #2
 8008a2a:	607b      	str	r3, [r7, #4]
 8008a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008a2e:	4a31      	ldr	r2, [pc, #196]	; (8008af4 <MX_DMA_Init+0x12c>)
 8008a30:	4b30      	ldr	r3, [pc, #192]	; (8008af4 <MX_DMA_Init+0x12c>)
 8008a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a34:	f043 0301 	orr.w	r3, r3, #1
 8008a38:	6493      	str	r3, [r2, #72]	; 0x48
 8008a3a:	4b2e      	ldr	r3, [pc, #184]	; (8008af4 <MX_DMA_Init+0x12c>)
 8008a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	603b      	str	r3, [r7, #0]
 8008a44:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 8008a46:	4b2c      	ldr	r3, [pc, #176]	; (8008af8 <MX_DMA_Init+0x130>)
 8008a48:	4a2c      	ldr	r2, [pc, #176]	; (8008afc <MX_DMA_Init+0x134>)
 8008a4a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel1.Init.Request = DMA_REQUEST_0;
 8008a4c:	4b2a      	ldr	r3, [pc, #168]	; (8008af8 <MX_DMA_Init+0x130>)
 8008a4e:	2200      	movs	r2, #0
 8008a50:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8008a52:	4b29      	ldr	r3, [pc, #164]	; (8008af8 <MX_DMA_Init+0x130>)
 8008a54:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008a58:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8008a5a:	4b27      	ldr	r3, [pc, #156]	; (8008af8 <MX_DMA_Init+0x130>)
 8008a5c:	2240      	movs	r2, #64	; 0x40
 8008a5e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 8008a60:	4b25      	ldr	r3, [pc, #148]	; (8008af8 <MX_DMA_Init+0x130>)
 8008a62:	2280      	movs	r2, #128	; 0x80
 8008a64:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008a66:	4b24      	ldr	r3, [pc, #144]	; (8008af8 <MX_DMA_Init+0x130>)
 8008a68:	2200      	movs	r2, #0
 8008a6a:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008a6c:	4b22      	ldr	r3, [pc, #136]	; (8008af8 <MX_DMA_Init+0x130>)
 8008a6e:	2200      	movs	r2, #0
 8008a70:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 8008a72:	4b21      	ldr	r3, [pc, #132]	; (8008af8 <MX_DMA_Init+0x130>)
 8008a74:	2200      	movs	r2, #0
 8008a76:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 8008a78:	4b1f      	ldr	r3, [pc, #124]	; (8008af8 <MX_DMA_Init+0x130>)
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 8008a7e:	481e      	ldr	r0, [pc, #120]	; (8008af8 <MX_DMA_Init+0x130>)
 8008a80:	f7f8 fcbc 	bl	80013fc <HAL_DMA_Init>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d001      	beq.n	8008a8e <MX_DMA_Init+0xc6>
  {
    return HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e024      	b.n	8008ad8 <MX_DMA_Init+0x110>
  }

  /* DMA interrupt init */
  CLEAR_REG(hdma_uart4_rx.DmaBaseAddress->ISR);
 8008a8e:	4b15      	ldr	r3, [pc, #84]	; (8008ae4 <MX_DMA_Init+0x11c>)
 8008a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a92:	2200      	movs	r2, #0
 8008a94:	601a      	str	r2, [r3, #0]
  CLEAR_REG(hdma_uart4_tx.DmaBaseAddress->ISR);
 8008a96:	4b16      	ldr	r3, [pc, #88]	; (8008af0 <MX_DMA_Init+0x128>)
 8008a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	601a      	str	r2, [r3, #0]
  CLEAR_REG(hdma_memtomem_dma1_channel1.DmaBaseAddress->ISR);
 8008a9e:	4b16      	ldr	r3, [pc, #88]	; (8008af8 <MX_DMA_Init+0x130>)
 8008aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	601a      	str	r2, [r3, #0]

  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	2100      	movs	r1, #0
 8008aaa:	200b      	movs	r0, #11
 8008aac:	f7f8 fc4d 	bl	800134a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8008ab0:	200b      	movs	r0, #11
 8008ab2:	f7f8 fc66 	bl	8001382 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	2100      	movs	r1, #0
 8008aba:	203a      	movs	r0, #58	; 0x3a
 8008abc:	f7f8 fc45 	bl	800134a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8008ac0:	203a      	movs	r0, #58	; 0x3a
 8008ac2:	f7f8 fc5e 	bl	8001382 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	2100      	movs	r1, #0
 8008aca:	203c      	movs	r0, #60	; 0x3c
 8008acc:	f7f8 fc3d 	bl	800134a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8008ad0:	203c      	movs	r0, #60	; 0x3c
 8008ad2:	f7f8 fc56 	bl	8001382 <HAL_NVIC_EnableIRQ>
  return HAL_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3708      	adds	r7, #8
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	40020458 	.word	0x40020458
 8008ae4:	200009e0 	.word	0x200009e0
 8008ae8:	40020400 	.word	0x40020400
 8008aec:	40020430 	.word	0x40020430
 8008af0:	20001b74 	.word	0x20001b74
 8008af4:	40021000 	.word	0x40021000
 8008af8:	20000a64 	.word	0x20000a64
 8008afc:	40020008 	.word	0x40020008

08008b00 <GPS_Log_Begin>:
//}

//======================= 5. Utility Function Definitions ===============================

void GPS_Log_Begin(GPS_Handle_Typedef* hgps)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
		log_gps = SET;
 8008b08:	4b25      	ldr	r3, [pc, #148]	; (8008ba0 <GPS_Log_Begin+0xa0>)
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	701a      	strb	r2, [r3, #0]
	  __HAL_UART_ENABLE_IT(hgps->gps_huart,UART_IT_IDLE);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	6812      	ldr	r2, [r2, #0]
 8008b18:	6812      	ldr	r2, [r2, #0]
 8008b1a:	6812      	ldr	r2, [r2, #0]
 8008b1c:	f042 0210 	orr.w	r2, r2, #16
 8008b20:	601a      	str	r2, [r3, #0]
	  __HAL_DMA_ENABLE_IT(hgps->gps_huart->hdmarx, DMA_IT_TC);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	6812      	ldr	r2, [r2, #0]
 8008b2e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008b30:	6812      	ldr	r2, [r2, #0]
 8008b32:	6812      	ldr	r2, [r2, #0]
 8008b34:	f042 0202 	orr.w	r2, r2, #2
 8008b38:	601a      	str	r2, [r3, #0]
	  if(__HAL_TIM_GET_FLAG(hgps->gps_htim,TIM_FLAG_CC1) == SET)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	691b      	ldr	r3, [r3, #16]
 8008b42:	f003 0302 	and.w	r3, r3, #2
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d105      	bne.n	8008b56 <GPS_Log_Begin+0x56>
	  {
	   __HAL_TIM_CLEAR_FLAG(hgps->gps_htim,TIM_FLAG_CC1);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f06f 0202 	mvn.w	r2, #2
 8008b54:	611a      	str	r2, [r3, #16]
	  }
	  M2M_Txfer_Cplt = 0;
 8008b56:	4b13      	ldr	r3, [pc, #76]	; (8008ba4 <GPS_Log_Begin+0xa4>)
 8008b58:	2200      	movs	r2, #0
 8008b5a:	701a      	strb	r2, [r3, #0]
	  __HAL_TIM_ENABLE_IT(hgps->gps_htim,TIM_IT_CC1);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	6892      	ldr	r2, [r2, #8]
 8008b66:	6812      	ldr	r2, [r2, #0]
 8008b68:	68d2      	ldr	r2, [r2, #12]
 8008b6a:	f042 0202 	orr.w	r2, r2, #2
 8008b6e:	60da      	str	r2, [r3, #12]
	  HAL_TIM_OC_Start_IT(hgps->gps_htim, TIM_CHANNEL_1);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	2100      	movs	r1, #0
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7fc fa24 	bl	8004fc4 <HAL_TIM_OC_Start_IT>
	  HAL_TIM_Base_Start_IT(hgps->gps_htim);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7fc f997 	bl	8004eb4 <HAL_TIM_Base_Start_IT>
	  HAL_UART_Receive_DMA(hgps->gps_huart,DMA_RX_Buffer,DMA_RX_BUFFER_SIZE);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b8e:	4906      	ldr	r1, [pc, #24]	; (8008ba8 <GPS_Log_Begin+0xa8>)
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7fe f889 	bl	8006ca8 <HAL_UART_Receive_DMA>

}
 8008b96:	bf00      	nop
 8008b98:	3708      	adds	r7, #8
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	200023bc 	.word	0x200023bc
 8008ba4:	20000aac 	.word	0x20000aac
 8008ba8:	20000ab0 	.word	0x20000ab0

08008bac <GPS_Log_Stop>:

void GPS_Log_Stop(GPS_Handle_Typedef* hgps)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
	  log_gps = RESET;
 8008bb4:	4b21      	ldr	r3, [pc, #132]	; (8008c3c <GPS_Log_Stop+0x90>)
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	701a      	strb	r2, [r3, #0]
	  packet_full = 0;
 8008bba:	4b21      	ldr	r3, [pc, #132]	; (8008c40 <GPS_Log_Stop+0x94>)
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	701a      	strb	r2, [r3, #0]

	  HAL_UART_DMAStop(hgps->gps_huart);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7fe f98b 	bl	8006ee0 <HAL_UART_DMAStop>
	  __HAL_UART_DISABLE_IT(hgps->gps_huart,UART_IT_IDLE);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	6812      	ldr	r2, [r2, #0]
 8008bd4:	6812      	ldr	r2, [r2, #0]
 8008bd6:	6812      	ldr	r2, [r2, #0]
 8008bd8:	f022 0210 	bic.w	r2, r2, #16
 8008bdc:	601a      	str	r2, [r3, #0]
	  __HAL_DMA_DISABLE_IT(hgps->gps_huart->hdmarx, DMA_IT_TC);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	6812      	ldr	r2, [r2, #0]
 8008bea:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008bec:	6812      	ldr	r2, [r2, #0]
 8008bee:	6812      	ldr	r2, [r2, #0]
 8008bf0:	f022 0202 	bic.w	r2, r2, #2
 8008bf4:	601a      	str	r2, [r3, #0]

	  HAL_TIM_Base_Stop_IT(hgps->gps_htim);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7fc f984 	bl	8004f08 <HAL_TIM_Base_Stop_IT>
	  HAL_TIM_OC_Stop_IT(hgps->gps_htim, TIM_CHANNEL_1);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	2100      	movs	r1, #0
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7fc fa7a 	bl	8005100 <HAL_TIM_OC_Stop_IT>
	  if(__HAL_TIM_GET_FLAG(hgps->gps_htim,TIM_FLAG_CC1) == SET)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	691b      	ldr	r3, [r3, #16]
 8008c14:	f003 0302 	and.w	r3, r3, #2
 8008c18:	2b02      	cmp	r3, #2
 8008c1a:	d105      	bne.n	8008c28 <GPS_Log_Stop+0x7c>
	  {
	   __HAL_TIM_CLEAR_FLAG(hgps->gps_htim,TIM_FLAG_CC1);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f06f 0202 	mvn.w	r2, #2
 8008c26:	611a      	str	r2, [r3, #16]

	  }
	  hgps->gps_htim->Instance->CNT = 0;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("nop");
 8008c32:	bf00      	nop
	  __NOP();
}
 8008c34:	bf00      	nop
 8008c36:	3708      	adds	r7, #8
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	200023bc 	.word	0x200023bc
 8008c40:	20000a58 	.word	0x20000a58

08008c44 <Clear_Buffer>:

void  Clear_Buffer(uint8_t *buffer,uint32_t size)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
	memset(buffer,0,size);
 8008c4e:	683a      	ldr	r2, [r7, #0]
 8008c50:	2100      	movs	r1, #0
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f004 fb89 	bl	800d36a <memset>
}
 8008c58:	bf00      	nop
 8008c5a:	3708      	adds	r7, #8
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <is_valid>:

uint8_t is_valid(char* nmeamsg)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b088      	sub	sp, #32
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
	uint8_t flag = 0;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	77fb      	strb	r3, [r7, #31]

	char msg[4] = {0};
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8008c70:	2300      	movs	r3, #0
 8008c72:	61bb      	str	r3, [r7, #24]
 8008c74:	e00d      	b.n	8008c92 <is_valid+0x32>
	{
		msg[i] = *(nmeamsg+2+i);
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	3302      	adds	r3, #2
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	7819      	ldrb	r1, [r3, #0]
 8008c80:	f107 020c 	add.w	r2, r7, #12
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	4413      	add	r3, r2
 8008c88:	460a      	mov	r2, r1
 8008c8a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; ++i)
 8008c8c:	69bb      	ldr	r3, [r7, #24]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	61bb      	str	r3, [r7, #24]
 8008c92:	69bb      	ldr	r3, [r7, #24]
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	ddee      	ble.n	8008c76 <is_valid+0x16>
	}
	if((strcmp((char*)msg,"GLL") != 0))
 8008c98:	f107 030c 	add.w	r3, r7, #12
 8008c9c:	492c      	ldr	r1, [pc, #176]	; (8008d50 <is_valid+0xf0>)
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7f7 fa96 	bl	80001d0 <strcmp>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d019      	beq.n	8008cde <is_valid+0x7e>
	{

		if (strcmp((char*)msg,"ZDA") != 0)
 8008caa:	f107 030c 	add.w	r3, r7, #12
 8008cae:	4929      	ldr	r1, [pc, #164]	; (8008d54 <is_valid+0xf4>)
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7f7 fa8d 	bl	80001d0 <strcmp>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d00d      	beq.n	8008cd8 <is_valid+0x78>
		{
			if(strcmp((char*)msg,"GSA") != 0)
 8008cbc:	f107 030c 	add.w	r3, r7, #12
 8008cc0:	4925      	ldr	r1, [pc, #148]	; (8008d58 <is_valid+0xf8>)
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7f7 fa84 	bl	80001d0 <strcmp>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d001      	beq.n	8008cd2 <is_valid+0x72>
			{
				return -1;
 8008cce:	23ff      	movs	r3, #255	; 0xff
 8008cd0:	e039      	b.n	8008d46 <is_valid+0xe6>
			}
			else
			{
				flag = 2;
 8008cd2:	2302      	movs	r3, #2
 8008cd4:	77fb      	strb	r3, [r7, #31]
 8008cd6:	e004      	b.n	8008ce2 <is_valid+0x82>
			}
		}else
		{
			flag = 3;
 8008cd8:	2303      	movs	r3, #3
 8008cda:	77fb      	strb	r3, [r7, #31]
 8008cdc:	e001      	b.n	8008ce2 <is_valid+0x82>
		}

	}
	else
	{
		flag = 1;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	77fb      	strb	r3, [r7, #31]
	}
	/* check sum */
	uint16_t checksum = 0;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	82fb      	strh	r3, [r7, #22]
	while(*nmeamsg != '*')
 8008ce6:	e008      	b.n	8008cfa <is_valid+0x9a>
	{
		checksum^= *nmeamsg;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	b29a      	uxth	r2, r3
 8008cee:	8afb      	ldrh	r3, [r7, #22]
 8008cf0:	4053      	eors	r3, r2
 8008cf2:	82fb      	strh	r3, [r7, #22]
		nmeamsg++;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	607b      	str	r3, [r7, #4]
	while(*nmeamsg != '*')
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	2b2a      	cmp	r3, #42	; 0x2a
 8008d00:	d1f2      	bne.n	8008ce8 <is_valid+0x88>
	}
	uint8_t h = char_to_hex(*(++nmeamsg))*16;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	3301      	adds	r3, #1
 8008d06:	607b      	str	r3, [r7, #4]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f000 f825 	bl	8008d5c <char_to_hex>
 8008d12:	4603      	mov	r3, r0
 8008d14:	011b      	lsls	r3, r3, #4
 8008d16:	757b      	strb	r3, [r7, #21]
	uint8_t l = char_to_hex(*(++nmeamsg));
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	607b      	str	r3, [r7, #4]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	4618      	mov	r0, r3
 8008d24:	f000 f81a 	bl	8008d5c <char_to_hex>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	753b      	strb	r3, [r7, #20]
	uint16_t checkbyte= h+l;
 8008d2c:	7d7b      	ldrb	r3, [r7, #21]
 8008d2e:	b29a      	uxth	r2, r3
 8008d30:	7d3b      	ldrb	r3, [r7, #20]
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	4413      	add	r3, r2
 8008d36:	827b      	strh	r3, [r7, #18]

	if(!(checksum == checkbyte))
 8008d38:	8afa      	ldrh	r2, [r7, #22]
 8008d3a:	8a7b      	ldrh	r3, [r7, #18]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d001      	beq.n	8008d44 <is_valid+0xe4>
	{
		return -1;
 8008d40:	23ff      	movs	r3, #255	; 0xff
 8008d42:	e000      	b.n	8008d46 <is_valid+0xe6>
	}

	return flag;
 8008d44:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3720      	adds	r7, #32
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	08014df0 	.word	0x08014df0
 8008d54:	08014df4 	.word	0x08014df4
 8008d58:	08014df8 	.word	0x08014df8

08008d5c <char_to_hex>:
/*
 * Flag keeps track of successful coordinate retrievals
 */

uint8_t char_to_hex(char c)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	4603      	mov	r3, r0
 8008d64:	71fb      	strb	r3, [r7, #7]
	if(c == '\0')
 8008d66:	79fb      	ldrb	r3, [r7, #7]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d101      	bne.n	8008d70 <char_to_hex+0x14>
	{
		return 0;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	e01e      	b.n	8008dae <char_to_hex+0x52>
	}
	if ((c >='0') &&(c <='9'))
 8008d70:	79fb      	ldrb	r3, [r7, #7]
 8008d72:	2b2f      	cmp	r3, #47	; 0x2f
 8008d74:	d906      	bls.n	8008d84 <char_to_hex+0x28>
 8008d76:	79fb      	ldrb	r3, [r7, #7]
 8008d78:	2b39      	cmp	r3, #57	; 0x39
 8008d7a:	d803      	bhi.n	8008d84 <char_to_hex+0x28>
	{
		return (uint8_t)c - 48;
 8008d7c:	79fb      	ldrb	r3, [r7, #7]
 8008d7e:	3b30      	subs	r3, #48	; 0x30
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	e014      	b.n	8008dae <char_to_hex+0x52>
	}
	if((c >='a') &&(c <='f'))
 8008d84:	79fb      	ldrb	r3, [r7, #7]
 8008d86:	2b60      	cmp	r3, #96	; 0x60
 8008d88:	d906      	bls.n	8008d98 <char_to_hex+0x3c>
 8008d8a:	79fb      	ldrb	r3, [r7, #7]
 8008d8c:	2b66      	cmp	r3, #102	; 0x66
 8008d8e:	d803      	bhi.n	8008d98 <char_to_hex+0x3c>
	{
		return (uint8_t)c - 87;
 8008d90:	79fb      	ldrb	r3, [r7, #7]
 8008d92:	3b57      	subs	r3, #87	; 0x57
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	e00a      	b.n	8008dae <char_to_hex+0x52>
	}
	if((c >='A') &&(c <='F'))
 8008d98:	79fb      	ldrb	r3, [r7, #7]
 8008d9a:	2b40      	cmp	r3, #64	; 0x40
 8008d9c:	d906      	bls.n	8008dac <char_to_hex+0x50>
 8008d9e:	79fb      	ldrb	r3, [r7, #7]
 8008da0:	2b46      	cmp	r3, #70	; 0x46
 8008da2:	d803      	bhi.n	8008dac <char_to_hex+0x50>
	{
		return (uint8_t)c - 55;
 8008da4:	79fb      	ldrb	r3, [r7, #7]
 8008da6:	3b37      	subs	r3, #55	; 0x37
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	e000      	b.n	8008dae <char_to_hex+0x52>
	}
	return -1; //invalid charachter
 8008dac:	23ff      	movs	r3, #255	; 0xff
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	370c      	adds	r7, #12
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bc80      	pop	{r7}
 8008db6:	4770      	bx	lr

08008db8 <parse_ZDA>:
 * Parser Functions:
 * Extract key data from NMEA message strings.
 */

uint8_t parse_ZDA(char* ZDAstring)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b088      	sub	sp, #32
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
	time_t t;
	struct tm *timepointer;

	t = time(NULL);
 8008dc0:	2000      	movs	r0, #0
 8008dc2:	f006 fdd1 	bl	800f968 <time>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	60fb      	str	r3, [r7, #12]
	timepointer = localtime(&t);
 8008dca:	f107 030c 	add.w	r3, r7, #12
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f003 ffac 	bl	800cd2c <localtime>
 8008dd4:	61b8      	str	r0, [r7, #24]
	/* Get UTC time*/
	while(*ZDAstring++ != ',');
 8008dd6:	bf00      	nop
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	1c5a      	adds	r2, r3, #1
 8008ddc:	607a      	str	r2, [r7, #4]
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	2b2c      	cmp	r3, #44	; 0x2c
 8008de2:	d1f9      	bne.n	8008dd8 <parse_ZDA+0x20>
	char* temp = ZDAstring++;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	1c5a      	adds	r2, r3, #1
 8008de8:	607a      	str	r2, [r7, #4]
 8008dea:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < strlen(ZDAstring); ++i)
 8008dec:	2300      	movs	r3, #0
 8008dee:	61fb      	str	r3, [r7, #28]
 8008df0:	e011      	b.n	8008e16 <parse_ZDA+0x5e>
	{
		if ((ZDAstring[i]==',')&&(ZDAstring[i+1] == ','))
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	4413      	add	r3, r2
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	2b2c      	cmp	r3, #44	; 0x2c
 8008dfc:	d108      	bne.n	8008e10 <parse_ZDA+0x58>
 8008dfe:	69fb      	ldr	r3, [r7, #28]
 8008e00:	3301      	adds	r3, #1
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	4413      	add	r3, r2
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	2b2c      	cmp	r3, #44	; 0x2c
 8008e0a:	d101      	bne.n	8008e10 <parse_ZDA+0x58>
		{
			/* Data is invalid*/
			return -1;
 8008e0c:	23ff      	movs	r3, #255	; 0xff
 8008e0e:	e094      	b.n	8008f3a <parse_ZDA+0x182>
	for (int i = 0; i < strlen(ZDAstring); ++i)
 8008e10:	69fb      	ldr	r3, [r7, #28]
 8008e12:	3301      	adds	r3, #1
 8008e14:	61fb      	str	r3, [r7, #28]
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f7f7 f9e4 	bl	80001e4 <strlen>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d8e6      	bhi.n	8008df2 <parse_ZDA+0x3a>
		}
	}
	timepointer->tm_hour = (temp[0]-48)*10+ (temp[1]-48)+2;
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008e2c:	4613      	mov	r3, r2
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	4413      	add	r3, r2
 8008e32:	005b      	lsls	r3, r3, #1
 8008e34:	461a      	mov	r2, r3
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	3b30      	subs	r3, #48	; 0x30
 8008e3e:	4413      	add	r3, r2
 8008e40:	1c9a      	adds	r2, r3, #2
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	609a      	str	r2, [r3, #8]
	timepointer->tm_min = (temp[2]-48)*10+ (temp[3]-48)-1;
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	3302      	adds	r3, #2
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008e50:	4613      	mov	r3, r2
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	4413      	add	r3, r2
 8008e56:	005b      	lsls	r3, r3, #1
 8008e58:	461a      	mov	r2, r3
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	3303      	adds	r3, #3
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	3b30      	subs	r3, #48	; 0x30
 8008e62:	4413      	add	r3, r2
 8008e64:	1e5a      	subs	r2, r3, #1
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	605a      	str	r2, [r3, #4]
	timepointer->tm_sec = (temp[4]-48)*10+ (temp[5]-48) -1 ;
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	3304      	adds	r3, #4
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008e74:	4613      	mov	r3, r2
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	4413      	add	r3, r2
 8008e7a:	005b      	lsls	r3, r3, #1
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	3305      	adds	r3, #5
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	3b30      	subs	r3, #48	; 0x30
 8008e86:	4413      	add	r3, r2
 8008e88:	1e5a      	subs	r2, r3, #1
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	601a      	str	r2, [r3, #0]
	while(*ZDAstring++ != ',');
 8008e8e:	bf00      	nop
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	1c5a      	adds	r2, r3, #1
 8008e94:	607a      	str	r2, [r7, #4]
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	2b2c      	cmp	r3, #44	; 0x2c
 8008e9a:	d1f9      	bne.n	8008e90 <parse_ZDA+0xd8>
	temp = ZDAstring;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	617b      	str	r3, [r7, #20]
	timepointer->tm_mday = (temp[0]-48)*10+ (temp[1]-48);
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008ea8:	4613      	mov	r3, r2
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	4413      	add	r3, r2
 8008eae:	005b      	lsls	r3, r3, #1
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	3b30      	subs	r3, #48	; 0x30
 8008eba:	441a      	add	r2, r3
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	60da      	str	r2, [r3, #12]
	timepointer->tm_mon = (temp[3]-48)*10+ (temp[4]-48)-1;
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	3303      	adds	r3, #3
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008eca:	4613      	mov	r3, r2
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	4413      	add	r3, r2
 8008ed0:	005b      	lsls	r3, r3, #1
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	3304      	adds	r3, #4
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	3b30      	subs	r3, #48	; 0x30
 8008edc:	4413      	add	r3, r2
 8008ede:	1e5a      	subs	r2, r3, #1
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	611a      	str	r2, [r3, #16]
	timepointer->tm_year = (temp[6]-48)*1000 +(temp[7]-48)*100 + (temp[8]-48)*10 +(temp[9]-48)-1900;
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	3306      	adds	r3, #6
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	3b30      	subs	r3, #48	; 0x30
 8008eec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008ef0:	fb02 f203 	mul.w	r2, r2, r3
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	3307      	adds	r3, #7
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	3b30      	subs	r3, #48	; 0x30
 8008efc:	2164      	movs	r1, #100	; 0x64
 8008efe:	fb01 f303 	mul.w	r3, r1, r3
 8008f02:	18d1      	adds	r1, r2, r3
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	3308      	adds	r3, #8
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008f0e:	4613      	mov	r3, r2
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	4413      	add	r3, r2
 8008f14:	005b      	lsls	r3, r3, #1
 8008f16:	18ca      	adds	r2, r1, r3
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	3309      	adds	r3, #9
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	3b30      	subs	r3, #48	; 0x30
 8008f20:	4413      	add	r3, r2
 8008f22:	f2a3 726c 	subw	r2, r3, #1900	; 0x76c
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	615a      	str	r2, [r3, #20]
	time_t result;

	 result = mktime(timepointer);
 8008f2a:	69b8      	ldr	r0, [r7, #24]
 8008f2c:	f004 fb06 	bl	800d53c <mktime>
 8008f30:	6138      	str	r0, [r7, #16]
	 eTime =  result;
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	4a03      	ldr	r2, [pc, #12]	; (8008f44 <parse_ZDA+0x18c>)
 8008f36:	6013      	str	r3, [r2, #0]
	return 0;
 8008f38:	2300      	movs	r3, #0
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3720      	adds	r7, #32
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	20000a54 	.word	0x20000a54

08008f48 <Parse_GLL>:

uint8_t Parse_GLL(char* GLLstring)
{
 8008f48:	b5b0      	push	{r4, r5, r7, lr}
 8008f4a:	b086      	sub	sp, #24
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
	/* Extract latitude*/
	uint8_t flag = 0;
 8008f50:	2300      	movs	r3, #0
 8008f52:	75fb      	strb	r3, [r7, #23]
	GLLstring+= 6;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	3306      	adds	r3, #6
 8008f58:	607b      	str	r3, [r7, #4]
	char* temp = GLLstring;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	613b      	str	r3, [r7, #16]
	uint8_t count = 0;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	75bb      	strb	r3, [r7, #22]
	while(*GLLstring++ != ',')
 8008f62:	e002      	b.n	8008f6a <Parse_GLL+0x22>
	{
		count++;
 8008f64:	7dbb      	ldrb	r3, [r7, #22]
 8008f66:	3301      	adds	r3, #1
 8008f68:	75bb      	strb	r3, [r7, #22]
	while(*GLLstring++ != ',')
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	1c5a      	adds	r2, r3, #1
 8008f6e:	607a      	str	r2, [r7, #4]
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	2b2c      	cmp	r3, #44	; 0x2c
 8008f74:	d1f6      	bne.n	8008f64 <Parse_GLL+0x1c>
	}
	if((count > 0))
 8008f76:	7dbb      	ldrb	r3, [r7, #22]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d02e      	beq.n	8008fda <Parse_GLL+0x92>
	{
		temp[count] = '\0';
 8008f7c:	7dbb      	ldrb	r3, [r7, #22]
 8008f7e:	693a      	ldr	r2, [r7, #16]
 8008f80:	4413      	add	r3, r2
 8008f82:	2200      	movs	r2, #0
 8008f84:	701a      	strb	r2, [r3, #0]
		int8_t sign = 1 -2*( temp[++count] =='S');
 8008f86:	7dbb      	ldrb	r3, [r7, #22]
 8008f88:	3301      	adds	r3, #1
 8008f8a:	75bb      	strb	r3, [r7, #22]
 8008f8c:	7dbb      	ldrb	r3, [r7, #22]
 8008f8e:	693a      	ldr	r2, [r7, #16]
 8008f90:	4413      	add	r3, r2
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	2b53      	cmp	r3, #83	; 0x53
 8008f96:	d102      	bne.n	8008f9e <Parse_GLL+0x56>
 8008f98:	f04f 33ff 	mov.w	r3, #4294967295
 8008f9c:	e000      	b.n	8008fa0 <Parse_GLL+0x58>
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	73fb      	strb	r3, [r7, #15]
		GPS_coord.lat = sign*atof(temp);
 8008fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7f7 facc 	bl	8000544 <__aeabi_i2d>
 8008fac:	4604      	mov	r4, r0
 8008fae:	460d      	mov	r5, r1
 8008fb0:	6938      	ldr	r0, [r7, #16]
 8008fb2:	f003 fe89 	bl	800ccc8 <atof>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	460b      	mov	r3, r1
 8008fba:	4620      	mov	r0, r4
 8008fbc:	4629      	mov	r1, r5
 8008fbe:	f7f7 fb27 	bl	8000610 <__aeabi_dmul>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	460c      	mov	r4, r1
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	4621      	mov	r1, r4
 8008fca:	f7f7 fe19 	bl	8000c00 <__aeabi_d2f>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	4b28      	ldr	r3, [pc, #160]	; (8009074 <Parse_GLL+0x12c>)
 8008fd2:	601a      	str	r2, [r3, #0]
		flag++;
 8008fd4:	7dfb      	ldrb	r3, [r7, #23]
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	75fb      	strb	r3, [r7, #23]
	}

	/* Extract longitude */
	while(*GLLstring++ !=',');
 8008fda:	bf00      	nop
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	1c5a      	adds	r2, r3, #1
 8008fe0:	607a      	str	r2, [r7, #4]
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	2b2c      	cmp	r3, #44	; 0x2c
 8008fe6:	d1f9      	bne.n	8008fdc <Parse_GLL+0x94>
	temp = GLLstring;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	613b      	str	r3, [r7, #16]
	count = 0;
 8008fec:	2300      	movs	r3, #0
 8008fee:	75bb      	strb	r3, [r7, #22]
	while(*GLLstring++ != ',')
 8008ff0:	e002      	b.n	8008ff8 <Parse_GLL+0xb0>
	{
			count++;
 8008ff2:	7dbb      	ldrb	r3, [r7, #22]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	75bb      	strb	r3, [r7, #22]
	while(*GLLstring++ != ',')
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	1c5a      	adds	r2, r3, #1
 8008ffc:	607a      	str	r2, [r7, #4]
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	2b2c      	cmp	r3, #44	; 0x2c
 8009002:	d1f6      	bne.n	8008ff2 <Parse_GLL+0xaa>
	}
	if((count > 0))
 8009004:	7dbb      	ldrb	r3, [r7, #22]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d02e      	beq.n	8009068 <Parse_GLL+0x120>
	{
			temp[count] = '\0';
 800900a:	7dbb      	ldrb	r3, [r7, #22]
 800900c:	693a      	ldr	r2, [r7, #16]
 800900e:	4413      	add	r3, r2
 8009010:	2200      	movs	r2, #0
 8009012:	701a      	strb	r2, [r3, #0]
			int8_t sign = 1 -2*( temp[++count] =='W');
 8009014:	7dbb      	ldrb	r3, [r7, #22]
 8009016:	3301      	adds	r3, #1
 8009018:	75bb      	strb	r3, [r7, #22]
 800901a:	7dbb      	ldrb	r3, [r7, #22]
 800901c:	693a      	ldr	r2, [r7, #16]
 800901e:	4413      	add	r3, r2
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	2b57      	cmp	r3, #87	; 0x57
 8009024:	d102      	bne.n	800902c <Parse_GLL+0xe4>
 8009026:	f04f 33ff 	mov.w	r3, #4294967295
 800902a:	e000      	b.n	800902e <Parse_GLL+0xe6>
 800902c:	2301      	movs	r3, #1
 800902e:	73bb      	strb	r3, [r7, #14]
			GPS_coord.longi = sign*atof(temp);
 8009030:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009034:	4618      	mov	r0, r3
 8009036:	f7f7 fa85 	bl	8000544 <__aeabi_i2d>
 800903a:	4604      	mov	r4, r0
 800903c:	460d      	mov	r5, r1
 800903e:	6938      	ldr	r0, [r7, #16]
 8009040:	f003 fe42 	bl	800ccc8 <atof>
 8009044:	4602      	mov	r2, r0
 8009046:	460b      	mov	r3, r1
 8009048:	4620      	mov	r0, r4
 800904a:	4629      	mov	r1, r5
 800904c:	f7f7 fae0 	bl	8000610 <__aeabi_dmul>
 8009050:	4603      	mov	r3, r0
 8009052:	460c      	mov	r4, r1
 8009054:	4618      	mov	r0, r3
 8009056:	4621      	mov	r1, r4
 8009058:	f7f7 fdd2 	bl	8000c00 <__aeabi_d2f>
 800905c:	4602      	mov	r2, r0
 800905e:	4b05      	ldr	r3, [pc, #20]	; (8009074 <Parse_GLL+0x12c>)
 8009060:	605a      	str	r2, [r3, #4]
			flag++;
 8009062:	7dfb      	ldrb	r3, [r7, #23]
 8009064:	3301      	adds	r3, #1
 8009066:	75fb      	strb	r3, [r7, #23]

	}

return flag;
 8009068:	7dfb      	ldrb	r3, [r7, #23]

}
 800906a:	4618      	mov	r0, r3
 800906c:	3718      	adds	r7, #24
 800906e:	46bd      	mov	sp, r7
 8009070:	bdb0      	pop	{r4, r5, r7, pc}
 8009072:	bf00      	nop
 8009074:	20000a5c 	.word	0x20000a5c

08009078 <parse_GSA>:

uint8_t parse_GSA(char* GSA_string)
{
 8009078:	b480      	push	{r7}
 800907a:	b089      	sub	sp, #36	; 0x24
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
	/* Isolate Dilation of Precisions*/
	uint8_t count = 0;
 8009080:	2300      	movs	r3, #0
 8009082:	77fb      	strb	r3, [r7, #31]
	char* t = GSA_string;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	61bb      	str	r3, [r7, #24]
	while(count < 2)
 8009088:	e008      	b.n	800909c <parse_GSA+0x24>
	{
		if(*t++==',')count++;
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	1c5a      	adds	r2, r3, #1
 800908e:	61ba      	str	r2, [r7, #24]
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	2b2c      	cmp	r3, #44	; 0x2c
 8009094:	d102      	bne.n	800909c <parse_GSA+0x24>
 8009096:	7ffb      	ldrb	r3, [r7, #31]
 8009098:	3301      	adds	r3, #1
 800909a:	77fb      	strb	r3, [r7, #31]
	while(count < 2)
 800909c:	7ffb      	ldrb	r3, [r7, #31]
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d9f3      	bls.n	800908a <parse_GSA+0x12>
	}
	diag.fix_type = (*t++-48);
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	1c5a      	adds	r2, r3, #1
 80090a6:	61ba      	str	r2, [r7, #24]
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	3b30      	subs	r3, #48	; 0x30
 80090ac:	b2da      	uxtb	r2, r3
 80090ae:	4b45      	ldr	r3, [pc, #276]	; (80091c4 <parse_GSA+0x14c>)
 80090b0:	71da      	strb	r2, [r3, #7]

	//field 3 - 15 indicate satelites
	uint8_t numsats = 0;
 80090b2:	2300      	movs	r3, #0
 80090b4:	75fb      	strb	r3, [r7, #23]
	uint8_t numfields = 0;
 80090b6:	2300      	movs	r3, #0
 80090b8:	75bb      	strb	r3, [r7, #22]
	while(numfields < 12)
 80090ba:	e015      	b.n	80090e8 <parse_GSA+0x70>
	{
		uint8_t count = 0;
 80090bc:	2300      	movs	r3, #0
 80090be:	757b      	strb	r3, [r7, #21]
		while(*++t !=',')count++;
 80090c0:	e002      	b.n	80090c8 <parse_GSA+0x50>
 80090c2:	7d7b      	ldrb	r3, [r7, #21]
 80090c4:	3301      	adds	r3, #1
 80090c6:	757b      	strb	r3, [r7, #21]
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	3301      	adds	r3, #1
 80090cc:	61bb      	str	r3, [r7, #24]
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	2b2c      	cmp	r3, #44	; 0x2c
 80090d4:	d1f5      	bne.n	80090c2 <parse_GSA+0x4a>
		if(count > 0)
 80090d6:	7d7b      	ldrb	r3, [r7, #21]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d002      	beq.n	80090e2 <parse_GSA+0x6a>
		{
			numsats++;
 80090dc:	7dfb      	ldrb	r3, [r7, #23]
 80090de:	3301      	adds	r3, #1
 80090e0:	75fb      	strb	r3, [r7, #23]
		}
		numfields++;
 80090e2:	7dbb      	ldrb	r3, [r7, #22]
 80090e4:	3301      	adds	r3, #1
 80090e6:	75bb      	strb	r3, [r7, #22]
	while(numfields < 12)
 80090e8:	7dbb      	ldrb	r3, [r7, #22]
 80090ea:	2b0b      	cmp	r3, #11
 80090ec:	d9e6      	bls.n	80090bc <parse_GSA+0x44>

	}
	diag.num_sats = numsats;
 80090ee:	4a35      	ldr	r2, [pc, #212]	; (80091c4 <parse_GSA+0x14c>)
 80090f0:	7dfb      	ldrb	r3, [r7, #23]
 80090f2:	7193      	strb	r3, [r2, #6]
	DOP_t dop[3] = {0};
 80090f4:	f107 0308 	add.w	r3, r7, #8
 80090f8:	2200      	movs	r2, #0
 80090fa:	601a      	str	r2, [r3, #0]
 80090fc:	809a      	strh	r2, [r3, #4]
	for (int i = 0; i < 3; ++i)
 80090fe:	2300      	movs	r3, #0
 8009100:	613b      	str	r3, [r7, #16]
 8009102:	e043      	b.n	800918c <parse_GSA+0x114>
	{
		//get digit
		while(*++t != '.')
		{
			dop[i].digit = dop[i].digit*10 +(*t-48);
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	005b      	lsls	r3, r3, #1
 8009108:	f107 0220 	add.w	r2, r7, #32
 800910c:	4413      	add	r3, r2
 800910e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8009112:	461a      	mov	r2, r3
 8009114:	0092      	lsls	r2, r2, #2
 8009116:	4413      	add	r3, r2
 8009118:	005b      	lsls	r3, r3, #1
 800911a:	b2da      	uxtb	r2, r3
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	4413      	add	r3, r2
 8009122:	b2db      	uxtb	r3, r3
 8009124:	3b30      	subs	r3, #48	; 0x30
 8009126:	b2da      	uxtb	r2, r3
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	005b      	lsls	r3, r3, #1
 800912c:	f107 0120 	add.w	r1, r7, #32
 8009130:	440b      	add	r3, r1
 8009132:	f803 2c18 	strb.w	r2, [r3, #-24]
		while(*++t != '.')
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	3301      	adds	r3, #1
 800913a:	61bb      	str	r3, [r7, #24]
 800913c:	69bb      	ldr	r3, [r7, #24]
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	2b2e      	cmp	r3, #46	; 0x2e
 8009142:	d1df      	bne.n	8009104 <parse_GSA+0x8c>
		}
		while(*++t != ',')
 8009144:	e018      	b.n	8009178 <parse_GSA+0x100>
		{
			dop[i].precision = dop[i].precision*10+(*t-48);
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	005b      	lsls	r3, r3, #1
 800914a:	f107 0220 	add.w	r2, r7, #32
 800914e:	4413      	add	r3, r2
 8009150:	f813 3c17 	ldrb.w	r3, [r3, #-23]
 8009154:	461a      	mov	r2, r3
 8009156:	0092      	lsls	r2, r2, #2
 8009158:	4413      	add	r3, r2
 800915a:	005b      	lsls	r3, r3, #1
 800915c:	b2da      	uxtb	r2, r3
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	4413      	add	r3, r2
 8009164:	b2db      	uxtb	r3, r3
 8009166:	3b30      	subs	r3, #48	; 0x30
 8009168:	b2da      	uxtb	r2, r3
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	005b      	lsls	r3, r3, #1
 800916e:	f107 0120 	add.w	r1, r7, #32
 8009172:	440b      	add	r3, r1
 8009174:	f803 2c17 	strb.w	r2, [r3, #-23]
		while(*++t != ',')
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	3301      	adds	r3, #1
 800917c:	61bb      	str	r3, [r7, #24]
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	2b2c      	cmp	r3, #44	; 0x2c
 8009184:	d1df      	bne.n	8009146 <parse_GSA+0xce>
	for (int i = 0; i < 3; ++i)
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	3301      	adds	r3, #1
 800918a:	613b      	str	r3, [r7, #16]
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	2b02      	cmp	r3, #2
 8009190:	ddd1      	ble.n	8009136 <parse_GSA+0xbe>
	}
	/*
	 * If successful, add to diagnostic struct
	 *
	 */
diag.HDOP = dop[0];
 8009192:	4b0c      	ldr	r3, [pc, #48]	; (80091c4 <parse_GSA+0x14c>)
 8009194:	3302      	adds	r3, #2
 8009196:	f107 0208 	add.w	r2, r7, #8
 800919a:	8812      	ldrh	r2, [r2, #0]
 800919c:	801a      	strh	r2, [r3, #0]
diag.PDOP = dop[1];
 800919e:	4b09      	ldr	r3, [pc, #36]	; (80091c4 <parse_GSA+0x14c>)
 80091a0:	461a      	mov	r2, r3
 80091a2:	f107 030a 	add.w	r3, r7, #10
 80091a6:	881b      	ldrh	r3, [r3, #0]
 80091a8:	8013      	strh	r3, [r2, #0]
diag.VDOP = dop[2];
 80091aa:	4b06      	ldr	r3, [pc, #24]	; (80091c4 <parse_GSA+0x14c>)
 80091ac:	3304      	adds	r3, #4
 80091ae:	f107 020c 	add.w	r2, r7, #12
 80091b2:	8812      	ldrh	r2, [r2, #0]
 80091b4:	801a      	strh	r2, [r3, #0]
	return 0;
 80091b6:	2300      	movs	r3, #0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3724      	adds	r7, #36	; 0x24
 80091bc:	46bd      	mov	sp, r7
 80091be:	bc80      	pop	{r7}
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	20000a48 	.word	0x20000a48

080091c8 <init_GPS>:

//================== 5. Peripheral Function Definitions ===============================

GPS_Init_msg_t init_GPS(GPS_Handle_Typedef *hgps)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]

	if(MX_DMA_Init() != HAL_OK)  return GPS_Init_Periph_Config_Error;
 80091d0:	f7ff fbfa 	bl	80089c8 <MX_DMA_Init>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d001      	beq.n	80091de <init_GPS+0x16>
 80091da:	2306      	movs	r3, #6
 80091dc:	e078      	b.n	80092d0 <init_GPS+0x108>
	if(MX_UART4_Init() != HAL_OK) return GPS_Init_Periph_Config_Error;
 80091de:	f7ff fbc3 	bl	8008968 <MX_UART4_Init>
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d001      	beq.n	80091ec <init_GPS+0x24>
 80091e8:	2306      	movs	r3, #6
 80091ea:	e071      	b.n	80092d0 <init_GPS+0x108>
	if(MX_TIM2_Init() != HAL_OK) return GPS_Init_Periph_Config_Error;
 80091ec:	f7ff faf0 	bl	80087d0 <MX_TIM2_Init>
 80091f0:	4603      	mov	r3, r0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d001      	beq.n	80091fa <init_GPS+0x32>
 80091f6:	2306      	movs	r3, #6
 80091f8:	e06a      	b.n	80092d0 <init_GPS+0x108>

	/* attach handlers to gps instances*/
	hgps->gps_huart = &huart4;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	4a36      	ldr	r2, [pc, #216]	; (80092d8 <init_GPS+0x110>)
 80091fe:	601a      	str	r2, [r3, #0]
	hgps->gps_htim  = &htim2;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a36      	ldr	r2, [pc, #216]	; (80092dc <init_GPS+0x114>)
 8009204:	609a      	str	r2, [r3, #8]
	hgps->gps_hdmamem = &hdma_memtomem_dma1_channel1;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4a35      	ldr	r2, [pc, #212]	; (80092e0 <init_GPS+0x118>)
 800920a:	605a      	str	r2, [r3, #4]

	/* Attach pointers to data buffer */
	hgps->GPS_Tx_Buffer = DMA_TX_Buffer;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	4a35      	ldr	r2, [pc, #212]	; (80092e4 <init_GPS+0x11c>)
 8009210:	611a      	str	r2, [r3, #16]
	hgps->GPS_Rx_Buffer = DMA_RX_Buffer;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4a34      	ldr	r2, [pc, #208]	; (80092e8 <init_GPS+0x120>)
 8009216:	60da      	str	r2, [r3, #12]
	hgps->GPS_Mem_Buffer = GNSS_Buffer;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4a34      	ldr	r2, [pc, #208]	; (80092ec <init_GPS+0x124>)
 800921c:	615a      	str	r2, [r3, #20]

	//poll a byte to see if reciever online
	uint8_t test_byte;
	if(HAL_UART_Receive(hgps->gps_huart,&test_byte,1,250) != HAL_OK)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6818      	ldr	r0, [r3, #0]
 8009222:	f107 010e 	add.w	r1, r7, #14
 8009226:	23fa      	movs	r3, #250	; 0xfa
 8009228:	2201      	movs	r2, #1
 800922a:	f7fd fbf4 	bl	8006a16 <HAL_UART_Receive>
 800922e:	4603      	mov	r3, r0
 8009230:	2b00      	cmp	r3, #0
 8009232:	d001      	beq.n	8009238 <init_GPS+0x70>
	{
		return GPS_Init_Offline_Error;
 8009234:	2307      	movs	r3, #7
 8009236:	e04b      	b.n	80092d0 <init_GPS+0x108>
	}
	UBX_MSG_t GPS_Acknowledgement_State = UBX_Send_Ack(hgps);
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 f941 	bl	80094c0 <UBX_Send_Ack>
 800923e:	4603      	mov	r3, r0
 8009240:	73fb      	strb	r3, [r7, #15]
	if(GPS_Acknowledgement_State == UBX_ACK_ACK)
 8009242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009246:	2b01      	cmp	r3, #1
 8009248:	d115      	bne.n	8009276 <init_GPS+0xae>
	{
		Clear_Buffer(hgps->GPS_Tx_Buffer,DMA_TX_BUFFER_SIZE);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009252:	4618      	mov	r0, r3
 8009254:	f7ff fcf6 	bl	8008c44 <Clear_Buffer>
		Clear_Buffer(hgps->GPS_Mem_Buffer,GNSS_BUFFER_SIZE);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	695b      	ldr	r3, [r3, #20]
 800925c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009260:	4618      	mov	r0, r3
 8009262:	f7ff fcef 	bl	8008c44 <Clear_Buffer>
		if( UBX_Configure_Baudrate(hgps) != UBX_ACK_ACK)
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 fa5a 	bl	8009720 <UBX_Configure_Baudrate>
 800926c:	4603      	mov	r3, r0
 800926e:	2b01      	cmp	r3, #1
 8009270:	d025      	beq.n	80092be <init_GPS+0xf6>
		{
			return GPS_Init_Baud_Config_Error;
 8009272:	2303      	movs	r3, #3
 8009274:	e02c      	b.n	80092d0 <init_GPS+0x108>
		}

	}else if(GPS_Acknowledgement_State == UBX_TIMEOUT_Rx)
 8009276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800927a:	f113 0f03 	cmn.w	r3, #3
 800927e:	d112      	bne.n	80092a6 <init_GPS+0xde>
		/*
		 * If Not recieving Ack-Ack on 115200, it could be possible that the device is
		 * already configured. change baud rate and try again
		 */
		//configure baud rate to 115200 and try again
		if(USART_Set_Baudrate(hgps,115200) == HAL_OK)
 8009280:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 f8a1 	bl	80093cc <USART_Set_Baudrate>
 800928a:	4603      	mov	r3, r0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d104      	bne.n	800929a <init_GPS+0xd2>
		{
			GPS_Acknowledgement_State = UBX_Send_Ack(hgps);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 f915 	bl	80094c0 <UBX_Send_Ack>
 8009296:	4603      	mov	r3, r0
 8009298:	73fb      	strb	r3, [r7, #15]
		}
		if(GPS_Acknowledgement_State != UBX_ACK_ACK)
 800929a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d00d      	beq.n	80092be <init_GPS+0xf6>
		{
			return GPS_Init_Ack_Error;
 80092a2:	2302      	movs	r3, #2
 80092a4:	e014      	b.n	80092d0 <init_GPS+0x108>
		}


	}else if(GPS_Acknowledgement_State == UBX_TIMEOUT_Tx || GPS_Acknowledgement_State == UBX_ERROR)
 80092a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092aa:	f113 0f02 	cmn.w	r3, #2
 80092ae:	d004      	beq.n	80092ba <init_GPS+0xf2>
 80092b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b8:	d101      	bne.n	80092be <init_GPS+0xf6>
	{
		return GPS_Init_Ack_Tx_Error;
 80092ba:	2305      	movs	r3, #5
 80092bc:	e008      	b.n	80092d0 <init_GPS+0x108>
	}
	//configure message buffer
	if( UBX_Configure_Messages(hgps) != UBX_OK )
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 fa78 	bl	80097b4 <UBX_Configure_Messages>
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b02      	cmp	r3, #2
 80092c8:	d001      	beq.n	80092ce <init_GPS+0x106>
	{
		return GPS_Init_MSG_Config_Error;
 80092ca:	2304      	movs	r3, #4
 80092cc:	e000      	b.n	80092d0 <init_GPS+0x108>
	}
	return GPS_Init_OK;
 80092ce:	2301      	movs	r3, #1
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3710      	adds	r7, #16
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}
 80092d8:	200012b0 	.word	0x200012b0
 80092dc:	20001330 	.word	0x20001330
 80092e0:	20000a64 	.word	0x20000a64
 80092e4:	20001bbc 	.word	0x20001bbc
 80092e8:	20000ab0 	.word	0x20000ab0
 80092ec:	20001370 	.word	0x20001370

080092f0 <deinit_GPS>:

GPS_Init_msg_t deinit_GPS(GPS_Handle_Typedef* hgps)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
	/* Deinit Timer */
	if(hgps->gps_htim->Instance != GPS_TIM_PORT)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009302:	d004      	beq.n	800930e <deinit_GPS+0x1e>
	{
		hgps->gps_htim->Instance = GPS_TIM_PORT;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800930c:	601a      	str	r2, [r3, #0]
	}
	//Disable Timer
	HAL_TIM_Base_Stop_IT(hgps->gps_htim);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	4618      	mov	r0, r3
 8009314:	f7fb fdf8 	bl	8004f08 <HAL_TIM_Base_Stop_IT>
	if(HAL_TIM_Base_DeInit(hgps->gps_htim) != HAL_OK)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	4618      	mov	r0, r3
 800931e:	f7fb fd6f 	bl	8004e00 <HAL_TIM_Base_DeInit>
 8009322:	4603      	mov	r3, r0
 8009324:	2b00      	cmp	r3, #0
 8009326:	d001      	beq.n	800932c <deinit_GPS+0x3c>
	{
		return GPS_Init_Periph_Config_Error;
 8009328:	2306      	movs	r3, #6
 800932a:	e046      	b.n	80093ba <deinit_GPS+0xca>
	}
	//detach instance
	hgps->gps_htim = NULL;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	609a      	str	r2, [r3, #8]

	/* De init UART*/
	if(hgps->gps_huart->Instance != GPS_UART_PORT)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a22      	ldr	r2, [pc, #136]	; (80093c4 <deinit_GPS+0xd4>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d003      	beq.n	8009346 <deinit_GPS+0x56>
	{
		hgps->gps_huart->Instance = GPS_UART_PORT;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4a20      	ldr	r2, [pc, #128]	; (80093c4 <deinit_GPS+0xd4>)
 8009344:	601a      	str	r2, [r3, #0]
	}
	if(HAL_UART_DeInit(hgps->gps_huart) != HAL_OK)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4618      	mov	r0, r3
 800934c:	f7fd fa9b 	bl	8006886 <HAL_UART_DeInit>
 8009350:	4603      	mov	r3, r0
 8009352:	2b00      	cmp	r3, #0
 8009354:	d001      	beq.n	800935a <deinit_GPS+0x6a>
	{
		return GPS_Init_Periph_Config_Error;
 8009356:	2306      	movs	r3, #6
 8009358:	e02f      	b.n	80093ba <deinit_GPS+0xca>
	}
	hgps->gps_huart = NULL;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2200      	movs	r2, #0
 800935e:	601a      	str	r2, [r3, #0]

	/* De init DMA Memory Stream*/
	if(hgps->gps_hdmamem->Instance != DMA1_Channel1)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a18      	ldr	r2, [pc, #96]	; (80093c8 <deinit_GPS+0xd8>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d003      	beq.n	8009374 <deinit_GPS+0x84>
	{
		hgps->gps_hdmamem->Instance = DMA1_Channel1;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	4a15      	ldr	r2, [pc, #84]	; (80093c8 <deinit_GPS+0xd8>)
 8009372:	601a      	str	r2, [r3, #0]
	}
	if(HAL_DMA_DeInit(hgps->gps_hdmamem) != HAL_OK)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	4618      	mov	r0, r3
 800937a:	f7f8 f8f7 	bl	800156c <HAL_DMA_DeInit>
 800937e:	4603      	mov	r3, r0
 8009380:	2b00      	cmp	r3, #0
 8009382:	d001      	beq.n	8009388 <deinit_GPS+0x98>
	{
		return GPS_Init_Periph_Config_Error;
 8009384:	2306      	movs	r3, #6
 8009386:	e018      	b.n	80093ba <deinit_GPS+0xca>
	}
	hgps->gps_hdmamem = NULL;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	605a      	str	r2, [r3, #4]

	/* Clear memory buffers*/
	Clear_Buffer(hgps->GPS_Rx_Buffer,DMA_RX_BUFFER_SIZE);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009396:	4618      	mov	r0, r3
 8009398:	f7ff fc54 	bl	8008c44 <Clear_Buffer>
	Clear_Buffer(hgps->GPS_Tx_Buffer,DMA_TX_BUFFER_SIZE);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	691b      	ldr	r3, [r3, #16]
 80093a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80093a4:	4618      	mov	r0, r3
 80093a6:	f7ff fc4d 	bl	8008c44 <Clear_Buffer>
	Clear_Buffer(hgps->GPS_Mem_Buffer,GNSS_BUFFER_SIZE);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	695b      	ldr	r3, [r3, #20]
 80093ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7ff fc46 	bl	8008c44 <Clear_Buffer>


	return GPS_Init_OK;
 80093b8:	2301      	movs	r3, #1
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3708      	adds	r7, #8
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	40004c00 	.word	0x40004c00
 80093c8:	40020008 	.word	0x40020008

080093cc <USART_Set_Baudrate>:

HAL_StatusTypeDef USART_Set_Baudrate(GPS_Handle_Typedef* hgps,uint32_t baud)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
	//disable UART peripheral and change baud rate
 	 hgps->gps_huart->Instance->CR1 &= ~USART_CR1_UE;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	6812      	ldr	r2, [r2, #0]
 80093e0:	6812      	ldr	r2, [r2, #0]
 80093e2:	6812      	ldr	r2, [r2, #0]
 80093e4:	f022 0201 	bic.w	r2, r2, #1
 80093e8:	601a      	str	r2, [r3, #0]
 	 hgps->gps_huart->Init.BaudRate = baud;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	683a      	ldr	r2, [r7, #0]
 80093f0:	605a      	str	r2, [r3, #4]
	 if(HAL_UART_Init(hgps->gps_huart) != HAL_OK)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7fd f9f7 	bl	80067ea <HAL_UART_Init>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d001      	beq.n	8009406 <USART_Set_Baudrate+0x3a>
	 {
		return HAL_ERROR;
 8009402:	2301      	movs	r3, #1
 8009404:	e056      	b.n	80094b4 <USART_Set_Baudrate+0xe8>
	 }
	 hgps->gps_huart->Instance->CR1 |= USART_CR1_UE;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	6812      	ldr	r2, [r2, #0]
 8009410:	6812      	ldr	r2, [r2, #0]
 8009412:	6812      	ldr	r2, [r2, #0]
 8009414:	f042 0201 	orr.w	r2, r2, #1
 8009418:	601a      	str	r2, [r3, #0]
	 //clear all errors
	 //clear framing error
	 if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_FE) == SET)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	69db      	ldr	r3, [r3, #28]
 8009422:	f003 0302 	and.w	r3, r3, #2
 8009426:	2b02      	cmp	r3, #2
 8009428:	d104      	bne.n	8009434 <USART_Set_Baudrate+0x68>
	 {
	 	__HAL_UART_CLEAR_FEFLAG(hgps->gps_huart);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2202      	movs	r2, #2
 8009432:	621a      	str	r2, [r3, #32]
	 }
	 //clear noise error
	 if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_NE) == SET)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	69db      	ldr	r3, [r3, #28]
 800943c:	f003 0304 	and.w	r3, r3, #4
 8009440:	2b04      	cmp	r3, #4
 8009442:	d104      	bne.n	800944e <USART_Set_Baudrate+0x82>
	 {
	 	__HAL_UART_CLEAR_NEFLAG(hgps->gps_huart);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	2204      	movs	r2, #4
 800944c:	621a      	str	r2, [r3, #32]
	 }
	 //clear overun error
	 if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_ORE) == SET)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	69db      	ldr	r3, [r3, #28]
 8009456:	f003 0308 	and.w	r3, r3, #8
 800945a:	2b08      	cmp	r3, #8
 800945c:	d10a      	bne.n	8009474 <USART_Set_Baudrate+0xa8>
	 {
	 	uint8_t temp = hgps->gps_huart->Instance->RDR;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009466:	b29b      	uxth	r3, r3
 8009468:	73fb      	strb	r3, [r7, #15]
	 	(void)temp;
	 	__HAL_UART_CLEAR_OREFLAG(hgps->gps_huart);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	2208      	movs	r2, #8
 8009472:	621a      	str	r2, [r3, #32]
	 }
	 //clear parity errors
	 if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_PE) == SET)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	69db      	ldr	r3, [r3, #28]
 800947c:	f003 0301 	and.w	r3, r3, #1
 8009480:	2b01      	cmp	r3, #1
 8009482:	d104      	bne.n	800948e <USART_Set_Baudrate+0xc2>
	 {
	 	__HAL_UART_CLEAR_PEFLAG(hgps->gps_huart);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2201      	movs	r2, #1
 800948c:	621a      	str	r2, [r3, #32]
	 }
	 //clear hanging idle flag
	 if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_IDLE) == SET)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	69db      	ldr	r3, [r3, #28]
 8009496:	f003 0310 	and.w	r3, r3, #16
 800949a:	2b10      	cmp	r3, #16
 800949c:	d104      	bne.n	80094a8 <USART_Set_Baudrate+0xdc>
	 {
	  	__HAL_UART_CLEAR_IDLEFLAG(hgps->gps_huart);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2210      	movs	r2, #16
 80094a6:	621a      	str	r2, [r3, #32]
     }
	 //increase Timeout value to allow for longer waits
	 __HAL_TIM_SET_COMPARE(hgps->gps_htim,TIM_CHANNEL_1,1152000);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a03      	ldr	r2, [pc, #12]	; (80094bc <USART_Set_Baudrate+0xf0>)
 80094b0:	635a      	str	r2, [r3, #52]	; 0x34
	 return HAL_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3710      	adds	r7, #16
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	00119400 	.word	0x00119400

080094c0 <UBX_Send_Ack>:

//======================= 6. UBX Function Definitions =================================

UBX_MSG_t UBX_Send_Ack(GPS_Handle_Typedef *hgps)
{
 80094c0:	b5b0      	push	{r4, r5, r7, lr}
 80094c2:	b092      	sub	sp, #72	; 0x48
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]

	 uint8_t ubx_ack_string[] = {0xB5 ,0x62 ,0x06 ,0x09 ,0x0D ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0xFF ,0xFF ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x17 ,0x31 ,0xBF };
 80094c8:	4b90      	ldr	r3, [pc, #576]	; (800970c <UBX_Send_Ack+0x24c>)
 80094ca:	f107 0418 	add.w	r4, r7, #24
 80094ce:	461d      	mov	r5, r3
 80094d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80094d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80094d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80094d8:	6020      	str	r0, [r4, #0]
 80094da:	3404      	adds	r4, #4
 80094dc:	7021      	strb	r1, [r4, #0]
	 int size = (sizeof(ubx_ack_string)/sizeof(*ubx_ack_string));
 80094de:	2315      	movs	r3, #21
 80094e0:	63bb      	str	r3, [r7, #56]	; 0x38
	 for (int i = 0; i < size ; ++i)
 80094e2:	2300      	movs	r3, #0
 80094e4:	647b      	str	r3, [r7, #68]	; 0x44
 80094e6:	e00c      	b.n	8009502 <UBX_Send_Ack+0x42>
	 {
	  	hgps->GPS_Tx_Buffer[i] = ubx_ack_string[i];
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	691a      	ldr	r2, [r3, #16]
 80094ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094ee:	4413      	add	r3, r2
 80094f0:	f107 0118 	add.w	r1, r7, #24
 80094f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094f6:	440a      	add	r2, r1
 80094f8:	7812      	ldrb	r2, [r2, #0]
 80094fa:	701a      	strb	r2, [r3, #0]
	 for (int i = 0; i < size ; ++i)
 80094fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094fe:	3301      	adds	r3, #1
 8009500:	647b      	str	r3, [r7, #68]	; 0x44
 8009502:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009506:	429a      	cmp	r2, r3
 8009508:	dbee      	blt.n	80094e8 <UBX_Send_Ack+0x28>
	 }
	 TX_Cplt = 0;
 800950a:	4b81      	ldr	r3, [pc, #516]	; (8009710 <UBX_Send_Ack+0x250>)
 800950c:	2200      	movs	r2, #0
 800950e:	701a      	strb	r2, [r3, #0]
	 if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_TC))
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	69db      	ldr	r3, [r3, #28]
 8009518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800951c:	2b40      	cmp	r3, #64	; 0x40
 800951e:	d104      	bne.n	800952a <UBX_Send_Ack+0x6a>
	 {
		 __HAL_UART_CLEAR_FLAG(hgps->gps_huart,UART_FLAG_TC);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	2240      	movs	r2, #64	; 0x40
 8009528:	621a      	str	r2, [r3, #32]
	 }
	 __HAL_UART_ENABLE_IT(hgps->gps_huart,UART_IT_TC);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	687a      	ldr	r2, [r7, #4]
 8009532:	6812      	ldr	r2, [r2, #0]
 8009534:	6812      	ldr	r2, [r2, #0]
 8009536:	6812      	ldr	r2, [r2, #0]
 8009538:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800953c:	601a      	str	r2, [r3, #0]
	 if( HAL_UART_Transmit_DMA(hgps->gps_huart,hgps->GPS_Tx_Buffer, size) == HAL_OK)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6818      	ldr	r0, [r3, #0]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009548:	b292      	uxth	r2, r2
 800954a:	4619      	mov	r1, r3
 800954c:	f7fd fb30 	bl	8006bb0 <HAL_UART_Transmit_DMA>
 8009550:	4603      	mov	r3, r0
 8009552:	2b00      	cmp	r3, #0
 8009554:	d15a      	bne.n	800960c <UBX_Send_Ack+0x14c>
	 {
	  //begin DMA Reception
	 while(TX_Cplt != SET);
 8009556:	bf00      	nop
 8009558:	4b6d      	ldr	r3, [pc, #436]	; (8009710 <UBX_Send_Ack+0x250>)
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	2b01      	cmp	r3, #1
 800955e:	d1fb      	bne.n	8009558 <UBX_Send_Ack+0x98>
	 TX_Cplt = 0; //clear flag
 8009560:	4b6b      	ldr	r3, [pc, #428]	; (8009710 <UBX_Send_Ack+0x250>)
 8009562:	2200      	movs	r2, #0
 8009564:	701a      	strb	r2, [r3, #0]
	 __HAL_UART_ENABLE_IT(hgps->gps_huart,UART_IT_IDLE);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	6812      	ldr	r2, [r2, #0]
 8009570:	6812      	ldr	r2, [r2, #0]
 8009572:	6812      	ldr	r2, [r2, #0]
 8009574:	f042 0210 	orr.w	r2, r2, #16
 8009578:	601a      	str	r2, [r3, #0]
	 __HAL_DMA_ENABLE_IT(hgps->gps_huart->hdmarx, DMA_IT_TC);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	6812      	ldr	r2, [r2, #0]
 8009586:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009588:	6812      	ldr	r2, [r2, #0]
 800958a:	6812      	ldr	r2, [r2, #0]
 800958c:	f042 0202 	orr.w	r2, r2, #2
 8009590:	601a      	str	r2, [r3, #0]
	 if(__HAL_TIM_GET_FLAG(hgps->gps_htim,TIM_FLAG_CC1) == SET)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	691b      	ldr	r3, [r3, #16]
 800959a:	f003 0302 	and.w	r3, r3, #2
 800959e:	2b02      	cmp	r3, #2
 80095a0:	d105      	bne.n	80095ae <UBX_Send_Ack+0xee>
	 {
		 __HAL_TIM_CLEAR_FLAG(hgps->gps_htim,TIM_FLAG_CC1);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f06f 0202 	mvn.w	r2, #2
 80095ac:	611a      	str	r2, [r3, #16]
	 }
	 M2M_Txfer_Cplt = 0;
 80095ae:	4b59      	ldr	r3, [pc, #356]	; (8009714 <UBX_Send_Ack+0x254>)
 80095b0:	2200      	movs	r2, #0
 80095b2:	701a      	strb	r2, [r3, #0]
	 HAL_UART_Receive_DMA(hgps->gps_huart,hgps->GPS_Rx_Buffer, DMA_RX_BUFFER_SIZE);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6818      	ldr	r0, [r3, #0]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80095c0:	4619      	mov	r1, r3
 80095c2:	f7fd fb71 	bl	8006ca8 <HAL_UART_Receive_DMA>

	 __HAL_TIM_ENABLE_IT(hgps->gps_htim,TIM_IT_CC1);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	6892      	ldr	r2, [r2, #8]
 80095d0:	6812      	ldr	r2, [r2, #0]
 80095d2:	68d2      	ldr	r2, [r2, #12]
 80095d4:	f042 0202 	orr.w	r2, r2, #2
 80095d8:	60da      	str	r2, [r3, #12]
	 HAL_TIM_OC_Start_IT(hgps->gps_htim, TIM_CHANNEL_1);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	2100      	movs	r1, #0
 80095e0:	4618      	mov	r0, r3
 80095e2:	f7fb fcef 	bl	8004fc4 <HAL_TIM_OC_Start_IT>
	 HAL_TIM_Base_Start_IT(hgps->gps_htim);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	4618      	mov	r0, r3
 80095ec:	f7fb fc62 	bl	8004eb4 <HAL_TIM_Base_Start_IT>
	 }
	  while(M2M_Txfer_Cplt != SET)
 80095f0:	e00c      	b.n	800960c <UBX_Send_Ack+0x14c>
	  {
		  //TODO: SET DEVICE TO LOW POWER MODE WHILE DMA TRASNFER OCCURS
		  //Check for either receiver time out or peripheral timeout event
		  if(M2M_Txfer_Cplt == HAL_TIMEOUT)
 80095f2:	4b48      	ldr	r3, [pc, #288]	; (8009714 <UBX_Send_Ack+0x254>)
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	2b03      	cmp	r3, #3
 80095f8:	d108      	bne.n	800960c <UBX_Send_Ack+0x14c>
		  {
			  TIM_IDLE_Timeout = RESET;
 80095fa:	4b47      	ldr	r3, [pc, #284]	; (8009718 <UBX_Send_Ack+0x258>)
 80095fc:	2200      	movs	r2, #0
 80095fe:	701a      	strb	r2, [r3, #0]
			  M2M_Txfer_Cplt = RESET;
 8009600:	4b44      	ldr	r3, [pc, #272]	; (8009714 <UBX_Send_Ack+0x254>)
 8009602:	2200      	movs	r2, #0
 8009604:	701a      	strb	r2, [r3, #0]
			  return UBX_TIMEOUT_Rx;
 8009606:	f06f 0302 	mvn.w	r3, #2
 800960a:	e07a      	b.n	8009702 <UBX_Send_Ack+0x242>
	  while(M2M_Txfer_Cplt != SET)
 800960c:	4b41      	ldr	r3, [pc, #260]	; (8009714 <UBX_Send_Ack+0x254>)
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	2b01      	cmp	r3, #1
 8009612:	d1ee      	bne.n	80095f2 <UBX_Send_Ack+0x132>
		  }
	  }
	  M2M_Txfer_Cplt = RESET;
 8009614:	4b3f      	ldr	r3, [pc, #252]	; (8009714 <UBX_Send_Ack+0x254>)
 8009616:	2200      	movs	r2, #0
 8009618:	701a      	strb	r2, [r3, #0]
	  char val = (char) 0xB5;
 800961a:	23b5      	movs	r3, #181	; 0xb5
 800961c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  int index = (int)(strchr((char*)GNSS_Buffer,val))-(int)GNSS_Buffer;
 8009620:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009624:	4619      	mov	r1, r3
 8009626:	483d      	ldr	r0, [pc, #244]	; (800971c <UBX_Send_Ack+0x25c>)
 8009628:	f004 fa98 	bl	800db5c <strchr>
 800962c:	4603      	mov	r3, r0
 800962e:	461a      	mov	r2, r3
 8009630:	4b3a      	ldr	r3, [pc, #232]	; (800971c <UBX_Send_Ack+0x25c>)
 8009632:	1ad3      	subs	r3, r2, r3
 8009634:	633b      	str	r3, [r7, #48]	; 0x30
	  UBX_MSG_t GPS_Acknowledgement_State;
	  if((index < 0) || (index >GNSS_BUFFER_SIZE))
 8009636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009638:	2b00      	cmp	r3, #0
 800963a:	db60      	blt.n	80096fe <UBX_Send_Ack+0x23e>
 800963c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009642:	dc5c      	bgt.n	80096fe <UBX_Send_Ack+0x23e>
	  {

	  }else{
	  uint8_t msg[10] = {0};
 8009644:	f107 030c 	add.w	r3, r7, #12
 8009648:	2200      	movs	r2, #0
 800964a:	601a      	str	r2, [r3, #0]
 800964c:	605a      	str	r2, [r3, #4]
 800964e:	811a      	strh	r2, [r3, #8]
	  memcpy(msg,&hgps->GPS_Mem_Buffer[index],10);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	695a      	ldr	r2, [r3, #20]
 8009654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009656:	441a      	add	r2, r3
 8009658:	f107 030c 	add.w	r3, r7, #12
 800965c:	6810      	ldr	r0, [r2, #0]
 800965e:	6851      	ldr	r1, [r2, #4]
 8009660:	c303      	stmia	r3!, {r0, r1}
 8009662:	8912      	ldrh	r2, [r2, #8]
 8009664:	801a      	strh	r2, [r3, #0]

	  uint16_t header = ((uint16_t)msg[0]<<8) | ((uint16_t)msg[1]);
 8009666:	7b3b      	ldrb	r3, [r7, #12]
 8009668:	021b      	lsls	r3, r3, #8
 800966a:	b21a      	sxth	r2, r3
 800966c:	7b7b      	ldrb	r3, [r7, #13]
 800966e:	b21b      	sxth	r3, r3
 8009670:	4313      	orrs	r3, r2
 8009672:	b21b      	sxth	r3, r3
 8009674:	85fb      	strh	r3, [r7, #46]	; 0x2e
	  if(header == 0xb562)
 8009676:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009678:	f24b 5262 	movw	r2, #46434	; 0xb562
 800967c:	4293      	cmp	r3, r2
 800967e:	d13e      	bne.n	80096fe <UBX_Send_Ack+0x23e>
	  {
	 	 uint8_t ck_A =0, ck_B =0;
 8009680:	2300      	movs	r3, #0
 8009682:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009686:	2300      	movs	r3, #0
 8009688:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	 	 for (int i = 2; i < 8; ++i)
 800968c:	2302      	movs	r3, #2
 800968e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009690:	e013      	b.n	80096ba <UBX_Send_Ack+0x1fa>
	 	 {
	 	 	ck_A += (uint8_t)msg[i];
 8009692:	f107 020c 	add.w	r2, r7, #12
 8009696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009698:	4413      	add	r3, r2
 800969a:	781a      	ldrb	r2, [r3, #0]
 800969c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80096a0:	4413      	add	r3, r2
 80096a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	 	 	ck_B += ck_A;
 80096a6:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 80096aa:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80096ae:	4413      	add	r3, r2
 80096b0:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	 	 for (int i = 2; i < 8; ++i)
 80096b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096b6:	3301      	adds	r3, #1
 80096b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096bc:	2b07      	cmp	r3, #7
 80096be:	dde8      	ble.n	8009692 <UBX_Send_Ack+0x1d2>
	 	 }
	 	 if((ck_A == msg[8])&& (ck_B == msg[9]))
 80096c0:	7d3b      	ldrb	r3, [r7, #20]
 80096c2:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d116      	bne.n	80096f8 <UBX_Send_Ack+0x238>
 80096ca:	7d7b      	ldrb	r3, [r7, #21]
 80096cc:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d111      	bne.n	80096f8 <UBX_Send_Ack+0x238>
	 	 {
	 	 	//acknowledgement
	 	 	if(msg[2] == 0x05)
 80096d4:	7bbb      	ldrb	r3, [r7, #14]
 80096d6:	2b05      	cmp	r3, #5
 80096d8:	d111      	bne.n	80096fe <UBX_Send_Ack+0x23e>
	 	 	{
	 		 	switch (msg[3])
 80096da:	7bfb      	ldrb	r3, [r7, #15]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d002      	beq.n	80096e6 <UBX_Send_Ack+0x226>
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d004      	beq.n	80096ee <UBX_Send_Ack+0x22e>
	 	 	if(msg[2] == 0x05)
 80096e4:	e00b      	b.n	80096fe <UBX_Send_Ack+0x23e>
	 		 	{
	 		 		case 0:
	 		 			GPS_Acknowledgement_State = UBX_ACK_NACK;
 80096e6:	2300      	movs	r3, #0
 80096e8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	 		 			break;
 80096ec:	e003      	b.n	80096f6 <UBX_Send_Ack+0x236>
	 		 		case 1:
	 		 			GPS_Acknowledgement_State = UBX_ACK_ACK;
 80096ee:	2301      	movs	r3, #1
 80096f0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	 		 			break;
 80096f4:	bf00      	nop
	 	 	if(msg[2] == 0x05)
 80096f6:	e002      	b.n	80096fe <UBX_Send_Ack+0x23e>
	 		 		}
	 		 	}
	 		 }
	 		 else
	 		 {
	 		 	GPS_Acknowledgement_State = UBX_ERROR;
 80096f8:	23ff      	movs	r3, #255	; 0xff
 80096fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	 		 }
	 	 }
	  }
	  return GPS_Acknowledgement_State;
 80096fe:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8009702:	4618      	mov	r0, r3
 8009704:	3748      	adds	r7, #72	; 0x48
 8009706:	46bd      	mov	sp, r7
 8009708:	bdb0      	pop	{r4, r5, r7, pc}
 800970a:	bf00      	nop
 800970c:	08014dfc 	.word	0x08014dfc
 8009710:	20001b70 	.word	0x20001b70
 8009714:	20000aac 	.word	0x20000aac
 8009718:	20000a50 	.word	0x20000a50
 800971c:	20001370 	.word	0x20001370

08009720 <UBX_Configure_Baudrate>:

UBX_MSG_t UBX_Configure_Baudrate(GPS_Handle_Typedef* hgps)
{
 8009720:	b5b0      	push	{r4, r5, r7, lr}
 8009722:	b08a      	sub	sp, #40	; 0x28
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]

	//GPS is configured for 9600, change baud to 115200
	uint8_t ubx_baude_rate_config[] = {0xB5,0x62,0x06,0x00,0x14,0x00,0x01,0x00,0x00,0x00,0xD0,0x08,0x00,0x00,0x00,0xC2,0x01,0x00,0x07,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0xC0,0x7E};
 8009728:	4b20      	ldr	r3, [pc, #128]	; (80097ac <UBX_Configure_Baudrate+0x8c>)
 800972a:	f107 0408 	add.w	r4, r7, #8
 800972e:	461d      	mov	r5, r3
 8009730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009734:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009738:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint32_t size =  sizeof(ubx_baude_rate_config)/sizeof(ubx_baude_rate_config[0]);
 800973c:	231c      	movs	r3, #28
 800973e:	627b      	str	r3, [r7, #36]	; 0x24
	memcpy(hgps->GPS_Tx_Buffer,ubx_baude_rate_config,size);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	691b      	ldr	r3, [r3, #16]
 8009744:	f107 0108 	add.w	r1, r7, #8
 8009748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800974a:	4618      	mov	r0, r3
 800974c:	f003 fe02 	bl	800d354 <memcpy>
	if(HAL_UART_Transmit_DMA(hgps->gps_huart,hgps->GPS_Tx_Buffer,size) == HAL_OK)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6818      	ldr	r0, [r3, #0]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	691b      	ldr	r3, [r3, #16]
 8009758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800975a:	b292      	uxth	r2, r2
 800975c:	4619      	mov	r1, r3
 800975e:	f7fd fa27 	bl	8006bb0 <HAL_UART_Transmit_DMA>
 8009762:	4603      	mov	r3, r0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d11b      	bne.n	80097a0 <UBX_Configure_Baudrate+0x80>
	{
		 while(TX_Cplt != SET);
 8009768:	bf00      	nop
 800976a:	4b11      	ldr	r3, [pc, #68]	; (80097b0 <UBX_Configure_Baudrate+0x90>)
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	2b01      	cmp	r3, #1
 8009770:	d1fb      	bne.n	800976a <UBX_Configure_Baudrate+0x4a>
		 Clear_Buffer(hgps->GPS_Tx_Buffer,DMA_TX_BUFFER_SIZE);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	691b      	ldr	r3, [r3, #16]
 8009776:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800977a:	4618      	mov	r0, r3
 800977c:	f7ff fa62 	bl	8008c44 <Clear_Buffer>
		 if(USART_Set_Baudrate(hgps,115200) != HAL_OK)
 8009780:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f7ff fe21 	bl	80093cc <USART_Set_Baudrate>
 800978a:	4603      	mov	r3, r0
 800978c:	2b00      	cmp	r3, #0
 800978e:	d002      	beq.n	8009796 <UBX_Configure_Baudrate+0x76>
		 {
			 return UBX_ERROR;
 8009790:	f04f 33ff 	mov.w	r3, #4294967295
 8009794:	e006      	b.n	80097a4 <UBX_Configure_Baudrate+0x84>
		 }
		 return UBX_Send_Ack(hgps);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f7ff fe92 	bl	80094c0 <UBX_Send_Ack>
 800979c:	4603      	mov	r3, r0
 800979e:	e001      	b.n	80097a4 <UBX_Configure_Baudrate+0x84>
	}
	return UBX_TIMEOUT_Tx;
 80097a0:	f06f 0301 	mvn.w	r3, #1
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3728      	adds	r7, #40	; 0x28
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bdb0      	pop	{r4, r5, r7, pc}
 80097ac:	08014e14 	.word	0x08014e14
 80097b0:	20001b70 	.word	0x20001b70

080097b4 <UBX_Configure_Messages>:

UBX_MSG_t UBX_Configure_Messages(GPS_Handle_Typedef *hgps)
{
 80097b4:	b5b0      	push	{r4, r5, r7, lr}
 80097b6:	b0a8      	sub	sp, #160	; 0xa0
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
	//clear all active/useless messages
	uint8_t NMEA_Clear_buffer[] = {0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x0A, 0x00, 0x04, 0x23, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x09, 0x00, 0x03, 0x21, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x00, 0x00, 0xFA, 0x0F, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x0D, 0x00, 0x07, 0x29, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x06, 0x00, 0x00, 0x1B, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x07, 0x00, 0x01, 0x1D, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x03, 0x00, 0xFD, 0x15, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x04, 0x00, 0xFE, 0x17, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x0F, 0x00, 0x09, 0x2D, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x05, 0x00, 0xFF, 0x19} ;
 80097bc:	4a3d      	ldr	r2, [pc, #244]	; (80098b4 <UBX_Configure_Messages+0x100>)
 80097be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80097c2:	4611      	mov	r1, r2
 80097c4:	226e      	movs	r2, #110	; 0x6e
 80097c6:	4618      	mov	r0, r3
 80097c8:	f003 fdc4 	bl	800d354 <memcpy>
	uint32_t size = sizeof(NMEA_Clear_buffer)/sizeof(NMEA_Clear_buffer[0]);
 80097cc:	236e      	movs	r3, #110	; 0x6e
 80097ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	 if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_TC))
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	69db      	ldr	r3, [r3, #28]
 80097da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097de:	2b40      	cmp	r3, #64	; 0x40
 80097e0:	d104      	bne.n	80097ec <UBX_Configure_Messages+0x38>
	 {
		__HAL_UART_CLEAR_FLAG(hgps->gps_huart,UART_FLAG_TC);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2240      	movs	r2, #64	; 0x40
 80097ea:	621a      	str	r2, [r3, #32]
	 }
	__HAL_UART_ENABLE_IT(hgps->gps_huart,UART_IT_TC);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	6812      	ldr	r2, [r2, #0]
 80097f6:	6812      	ldr	r2, [r2, #0]
 80097f8:	6812      	ldr	r2, [r2, #0]
 80097fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097fe:	601a      	str	r2, [r3, #0]
	if(HAL_UART_Transmit_DMA(hgps->gps_huart,NMEA_Clear_buffer,size) != HAL_OK)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009808:	b292      	uxth	r2, r2
 800980a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800980e:	4618      	mov	r0, r3
 8009810:	f7fd f9ce 	bl	8006bb0 <HAL_UART_Transmit_DMA>
 8009814:	4603      	mov	r3, r0
 8009816:	2b00      	cmp	r3, #0
 8009818:	d002      	beq.n	8009820 <UBX_Configure_Messages+0x6c>
	{
		return UBX_ERROR;
 800981a:	f04f 33ff 	mov.w	r3, #4294967295
 800981e:	e044      	b.n	80098aa <UBX_Configure_Messages+0xf6>
	}
	while(TX_Cplt != SET);
 8009820:	bf00      	nop
 8009822:	4b25      	ldr	r3, [pc, #148]	; (80098b8 <UBX_Configure_Messages+0x104>)
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	2b01      	cmp	r3, #1
 8009828:	d1fb      	bne.n	8009822 <UBX_Configure_Messages+0x6e>
	TX_Cplt = 0;
 800982a:	4b23      	ldr	r3, [pc, #140]	; (80098b8 <UBX_Configure_Messages+0x104>)
 800982c:	2200      	movs	r2, #0
 800982e:	701a      	strb	r2, [r3, #0]
	(void)NMEA_Clear_buffer;
	//enable messages GLL ZDA GSA
	uint8_t NMEA_msgs[] = {0xB5,0x62,0x06,0x01,0x03,0x00,0xF0,0x01,0x01,0xFC,0x12,0xB5,0x62,0x06,0x01,0x03,0x00,0xF0,0x02,0x01,0xFD,0x14,0xB5,0x62,0x06,0x01,0x03,0x00,0xF0,0x08,0x01,0x03,0x20};
 8009830:	4b22      	ldr	r3, [pc, #136]	; (80098bc <UBX_Configure_Messages+0x108>)
 8009832:	f107 0408 	add.w	r4, r7, #8
 8009836:	461d      	mov	r5, r3
 8009838:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800983a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800983c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800983e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009840:	682b      	ldr	r3, [r5, #0]
 8009842:	7023      	strb	r3, [r4, #0]
	size = sizeof(NMEA_msgs)/sizeof(NMEA_msgs[0]);
 8009844:	2321      	movs	r3, #33	; 0x21
 8009846:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	 if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_TC))
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	69db      	ldr	r3, [r3, #28]
 8009852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009856:	2b40      	cmp	r3, #64	; 0x40
 8009858:	d104      	bne.n	8009864 <UBX_Configure_Messages+0xb0>
	 {
		 __HAL_UART_CLEAR_FLAG(hgps->gps_huart,UART_FLAG_TC);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2240      	movs	r2, #64	; 0x40
 8009862:	621a      	str	r2, [r3, #32]
	 }
	 __HAL_UART_ENABLE_IT(hgps->gps_huart,UART_IT_TC);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	6812      	ldr	r2, [r2, #0]
 800986e:	6812      	ldr	r2, [r2, #0]
 8009870:	6812      	ldr	r2, [r2, #0]
 8009872:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009876:	601a      	str	r2, [r3, #0]
	if(HAL_UART_Transmit_DMA(hgps->gps_huart,NMEA_msgs,size) == HAL_OK)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009880:	b292      	uxth	r2, r2
 8009882:	f107 0108 	add.w	r1, r7, #8
 8009886:	4618      	mov	r0, r3
 8009888:	f7fd f992 	bl	8006bb0 <HAL_UART_Transmit_DMA>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d109      	bne.n	80098a6 <UBX_Configure_Messages+0xf2>
	{
		while(TX_Cplt != SET);
 8009892:	bf00      	nop
 8009894:	4b08      	ldr	r3, [pc, #32]	; (80098b8 <UBX_Configure_Messages+0x104>)
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	2b01      	cmp	r3, #1
 800989a:	d1fb      	bne.n	8009894 <UBX_Configure_Messages+0xe0>
		TX_Cplt = 0;
 800989c:	4b06      	ldr	r3, [pc, #24]	; (80098b8 <UBX_Configure_Messages+0x104>)
 800989e:	2200      	movs	r2, #0
 80098a0:	701a      	strb	r2, [r3, #0]
		return UBX_OK;
 80098a2:	2302      	movs	r3, #2
 80098a4:	e001      	b.n	80098aa <UBX_Configure_Messages+0xf6>
	}

	return UBX_ERROR;
 80098a6:	f04f 33ff 	mov.w	r3, #4294967295

}
 80098aa:	4618      	mov	r0, r3
 80098ac:	37a0      	adds	r7, #160	; 0xa0
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bdb0      	pop	{r4, r5, r7, pc}
 80098b2:	bf00      	nop
 80098b4:	08014e30 	.word	0x08014e30
 80098b8:	20001b70 	.word	0x20001b70
 80098bc:	08014ea0 	.word	0x08014ea0

080098c0 <USART_TIM_RTO_Handler>:

//================ 7. IRQ Handlers Functions Prototypes ===============================

void USART_TIM_RTO_Handler(TIM_HandleTypeDef *htim)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b082      	sub	sp, #8
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
	if(__HAL_TIM_GET_IT_SOURCE(htim,TIM_IT_CC1))
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	f003 0302 	and.w	r3, r3, #2
 80098d2:	2b02      	cmp	r3, #2
 80098d4:	d11c      	bne.n	8009910 <USART_TIM_RTO_Handler+0x50>
	{

		//clear interrupt
		__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f06f 0202 	mvn.w	r2, #2
 80098de:	611a      	str	r2, [r3, #16]
		__HAL_TIM_CLEAR_IT(htim,TIM_IT_UPDATE);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f06f 0201 	mvn.w	r2, #1
 80098e8:	611a      	str	r2, [r3, #16]
		//set reciever timeout flag
		TIM_IDLE_Timeout = 1;
 80098ea:	4b0b      	ldr	r3, [pc, #44]	; (8009918 <USART_TIM_RTO_Handler+0x58>)
 80098ec:	2201      	movs	r2, #1
 80098ee:	701a      	strb	r2, [r3, #0]
		//disable timer
		HAL_TIM_Base_Stop_IT(htim);
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f7fb fb09 	bl	8004f08 <HAL_TIM_Base_Stop_IT>
		if(!log_gps)
 80098f6:	4b09      	ldr	r3, [pc, #36]	; (800991c <USART_TIM_RTO_Handler+0x5c>)
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d108      	bne.n	8009910 <USART_TIM_RTO_Handler+0x50>
		{
			UART4->ISR |= USART_ISR_IDLE;
 80098fe:	4a08      	ldr	r2, [pc, #32]	; (8009920 <USART_TIM_RTO_Handler+0x60>)
 8009900:	4b07      	ldr	r3, [pc, #28]	; (8009920 <USART_TIM_RTO_Handler+0x60>)
 8009902:	69db      	ldr	r3, [r3, #28]
 8009904:	f043 0310 	orr.w	r3, r3, #16
 8009908:	61d3      	str	r3, [r2, #28]
			USART_GPS_IRQHandler(&hgps);
 800990a:	4806      	ldr	r0, [pc, #24]	; (8009924 <USART_TIM_RTO_Handler+0x64>)
 800990c:	f000 f984 	bl	8009c18 <USART_GPS_IRQHandler>
		}

	}
}
 8009910:	bf00      	nop
 8009912:	3708      	adds	r7, #8
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}
 8009918:	20000a50 	.word	0x20000a50
 800991c:	200023bc 	.word	0x200023bc
 8009920:	40004c00 	.word	0x40004c00
 8009924:	20000a2c 	.word	0x20000a2c

08009928 <DMA_GNSS_MEM_IRQHandler>:

void DMA_GNSS_MEM_IRQHandler(GPS_Handle_Typedef *hgps)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]

		M2M_Txfer_Cplt = SET;
 8009930:	4b64      	ldr	r3, [pc, #400]	; (8009ac4 <DMA_GNSS_MEM_IRQHandler+0x19c>)
 8009932:	2201      	movs	r2, #1
 8009934:	701a      	strb	r2, [r3, #0]
		if(log_gps)
 8009936:	4b64      	ldr	r3, [pc, #400]	; (8009ac8 <DMA_GNSS_MEM_IRQHandler+0x1a0>)
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	2b00      	cmp	r3, #0
 800993c:	f000 80be 	beq.w	8009abc <DMA_GNSS_MEM_IRQHandler+0x194>
		{
			Clear_Buffer(hgps->GPS_Rx_Buffer,DMA_RX_BUFFER_SIZE);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009948:	4618      	mov	r0, r3
 800994a:	f7ff f97b 	bl	8008c44 <Clear_Buffer>
			//reset pointer
			char* msg = strtok((char*)GNSS_Buffer, "$");
 800994e:	495f      	ldr	r1, [pc, #380]	; (8009acc <DMA_GNSS_MEM_IRQHandler+0x1a4>)
 8009950:	485f      	ldr	r0, [pc, #380]	; (8009ad0 <DMA_GNSS_MEM_IRQHandler+0x1a8>)
 8009952:	f004 ff3b 	bl	800e7cc <strtok>
 8009956:	60f8      	str	r0, [r7, #12]
				while(msg != NULL)
 8009958:	e042      	b.n	80099e0 <DMA_GNSS_MEM_IRQHandler+0xb8>
				{
					switch(is_valid(msg))
 800995a:	68f8      	ldr	r0, [r7, #12]
 800995c:	f7ff f980 	bl	8008c60 <is_valid>
 8009960:	4603      	mov	r3, r0
 8009962:	2b02      	cmp	r3, #2
 8009964:	d012      	beq.n	800998c <DMA_GNSS_MEM_IRQHandler+0x64>
 8009966:	2b03      	cmp	r3, #3
 8009968:	d01e      	beq.n	80099a8 <DMA_GNSS_MEM_IRQHandler+0x80>
 800996a:	2b01      	cmp	r3, #1
 800996c:	d000      	beq.n	8009970 <DMA_GNSS_MEM_IRQHandler+0x48>
				    		packet_full |= 0b100;
				    	}
				    	break;
					  default:
						// invalid case
						break;
 800996e:	e02e      	b.n	80099ce <DMA_GNSS_MEM_IRQHandler+0xa6>
						if(Parse_GLL(msg) == 2)
 8009970:	68f8      	ldr	r0, [r7, #12]
 8009972:	f7ff fae9 	bl	8008f48 <Parse_GLL>
 8009976:	4603      	mov	r3, r0
 8009978:	2b02      	cmp	r3, #2
 800997a:	d123      	bne.n	80099c4 <DMA_GNSS_MEM_IRQHandler+0x9c>
							packet_full |= 0b1;
 800997c:	4b55      	ldr	r3, [pc, #340]	; (8009ad4 <DMA_GNSS_MEM_IRQHandler+0x1ac>)
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	f043 0301 	orr.w	r3, r3, #1
 8009984:	b2da      	uxtb	r2, r3
 8009986:	4b53      	ldr	r3, [pc, #332]	; (8009ad4 <DMA_GNSS_MEM_IRQHandler+0x1ac>)
 8009988:	701a      	strb	r2, [r3, #0]
						break;
 800998a:	e01b      	b.n	80099c4 <DMA_GNSS_MEM_IRQHandler+0x9c>
						if(parse_GSA(msg) == 0)
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	f7ff fb73 	bl	8009078 <parse_GSA>
 8009992:	4603      	mov	r3, r0
 8009994:	2b00      	cmp	r3, #0
 8009996:	d117      	bne.n	80099c8 <DMA_GNSS_MEM_IRQHandler+0xa0>
							packet_full |= 0b10;
 8009998:	4b4e      	ldr	r3, [pc, #312]	; (8009ad4 <DMA_GNSS_MEM_IRQHandler+0x1ac>)
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	f043 0302 	orr.w	r3, r3, #2
 80099a0:	b2da      	uxtb	r2, r3
 80099a2:	4b4c      	ldr	r3, [pc, #304]	; (8009ad4 <DMA_GNSS_MEM_IRQHandler+0x1ac>)
 80099a4:	701a      	strb	r2, [r3, #0]
						break;
 80099a6:	e00f      	b.n	80099c8 <DMA_GNSS_MEM_IRQHandler+0xa0>
				    	if(parse_ZDA(msg) == 0)
 80099a8:	68f8      	ldr	r0, [r7, #12]
 80099aa:	f7ff fa05 	bl	8008db8 <parse_ZDA>
 80099ae:	4603      	mov	r3, r0
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d10b      	bne.n	80099cc <DMA_GNSS_MEM_IRQHandler+0xa4>
				    		packet_full |= 0b100;
 80099b4:	4b47      	ldr	r3, [pc, #284]	; (8009ad4 <DMA_GNSS_MEM_IRQHandler+0x1ac>)
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	f043 0304 	orr.w	r3, r3, #4
 80099bc:	b2da      	uxtb	r2, r3
 80099be:	4b45      	ldr	r3, [pc, #276]	; (8009ad4 <DMA_GNSS_MEM_IRQHandler+0x1ac>)
 80099c0:	701a      	strb	r2, [r3, #0]
				    	break;
 80099c2:	e003      	b.n	80099cc <DMA_GNSS_MEM_IRQHandler+0xa4>
						break;
 80099c4:	bf00      	nop
 80099c6:	e002      	b.n	80099ce <DMA_GNSS_MEM_IRQHandler+0xa6>
						break;
 80099c8:	bf00      	nop
 80099ca:	e000      	b.n	80099ce <DMA_GNSS_MEM_IRQHandler+0xa6>
				    	break;
 80099cc:	bf00      	nop
					}
					if(packet_full == 7)
 80099ce:	4b41      	ldr	r3, [pc, #260]	; (8009ad4 <DMA_GNSS_MEM_IRQHandler+0x1ac>)
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	2b07      	cmp	r3, #7
 80099d4:	d008      	beq.n	80099e8 <DMA_GNSS_MEM_IRQHandler+0xc0>
					{
						break;
					}
					msg = strtok(NULL,"$");
 80099d6:	493d      	ldr	r1, [pc, #244]	; (8009acc <DMA_GNSS_MEM_IRQHandler+0x1a4>)
 80099d8:	2000      	movs	r0, #0
 80099da:	f004 fef7 	bl	800e7cc <strtok>
 80099de:	60f8      	str	r0, [r7, #12]
				while(msg != NULL)
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1b9      	bne.n	800995a <DMA_GNSS_MEM_IRQHandler+0x32>
 80099e6:	e000      	b.n	80099ea <DMA_GNSS_MEM_IRQHandler+0xc2>
						break;
 80099e8:	bf00      	nop
				}
			if(__HAL_TIM_GET_IT_SOURCE(hgps->gps_htim,TIM_IT_CC1))
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	f003 0302 	and.w	r3, r3, #2
 80099f6:	2b02      	cmp	r3, #2
 80099f8:	d10a      	bne.n	8009a10 <DMA_GNSS_MEM_IRQHandler+0xe8>
			{
				__HAL_TIM_CLEAR_FLAG(hgps->gps_htim,TIM_FLAG_CC1);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	689b      	ldr	r3, [r3, #8]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f06f 0202 	mvn.w	r2, #2
 8009a04:	611a      	str	r2, [r3, #16]
				hgps->gps_htim->Instance->CNT = 0;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	689b      	ldr	r3, [r3, #8]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	625a      	str	r2, [r3, #36]	; 0x24
			}
			hgps->gps_huart->hdmarx->DmaBaseAddress->IFCR = 0x3FU << hgps->gps_huart->hdmarx->ChannelIndex; // clear all interrupts
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	6812      	ldr	r2, [r2, #0]
 8009a1c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009a1e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009a20:	213f      	movs	r1, #63	; 0x3f
 8009a22:	fa01 f202 	lsl.w	r2, r1, r2
 8009a26:	605a      	str	r2, [r3, #4]
			hgps->gps_huart->hdmarx->Instance->CMAR = (uint32_t)hgps->GPS_Rx_Buffer; //reset the pointer
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	68d2      	ldr	r2, [r2, #12]
 8009a34:	60da      	str	r2, [r3, #12]
			hgps->gps_huart->hdmarx->Instance->CNDTR = DMA_RX_BUFFER_SIZE; //set the number of bytes to expect
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a42:	605a      	str	r2, [r3, #4]
			__HAL_UART_CLEAR_IDLEFLAG(hgps->gps_huart);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	2210      	movs	r2, #16
 8009a4c:	621a      	str	r2, [r3, #32]
			__HAL_UART_ENABLE_IT(hgps->gps_huart, UART_IT_IDLE);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	6812      	ldr	r2, [r2, #0]
 8009a58:	6812      	ldr	r2, [r2, #0]
 8009a5a:	6812      	ldr	r2, [r2, #0]
 8009a5c:	f042 0210 	orr.w	r2, r2, #16
 8009a60:	601a      	str	r2, [r3, #0]
			if(packet_full != 7)
 8009a62:	4b1c      	ldr	r3, [pc, #112]	; (8009ad4 <DMA_GNSS_MEM_IRQHandler+0x1ac>)
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	2b07      	cmp	r3, #7
 8009a68:	d028      	beq.n	8009abc <DMA_GNSS_MEM_IRQHandler+0x194>
			{

				__HAL_TIM_ENABLE_IT(hgps->gps_htim,TIM_IT_CC1);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	6892      	ldr	r2, [r2, #8]
 8009a74:	6812      	ldr	r2, [r2, #0]
 8009a76:	68d2      	ldr	r2, [r2, #12]
 8009a78:	f042 0202 	orr.w	r2, r2, #2
 8009a7c:	60da      	str	r2, [r3, #12]
				HAL_TIM_OC_Start_IT(hgps->gps_htim, TIM_CHANNEL_1);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	689b      	ldr	r3, [r3, #8]
 8009a82:	2100      	movs	r1, #0
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7fb fa9d 	bl	8004fc4 <HAL_TIM_OC_Start_IT>
				HAL_TIM_Base_Start_IT(hgps->gps_htim);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7fb fa10 	bl	8004eb4 <HAL_TIM_Base_Start_IT>
				__HAL_DMA_ENABLE(hgps->gps_huart->hdmarx);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	6812      	ldr	r2, [r2, #0]
 8009aa0:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009aa2:	6812      	ldr	r2, [r2, #0]
 8009aa4:	6812      	ldr	r2, [r2, #0]
 8009aa6:	f042 0201 	orr.w	r2, r2, #1
 8009aaa:	601a      	str	r2, [r3, #0]
				HAL_UART_DMAResume(hgps->gps_huart);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f7fd f9d0 	bl	8006e56 <HAL_UART_DMAResume>
				log_gps = SET;
 8009ab6:	4b04      	ldr	r3, [pc, #16]	; (8009ac8 <DMA_GNSS_MEM_IRQHandler+0x1a0>)
 8009ab8:	2201      	movs	r2, #1
 8009aba:	701a      	strb	r2, [r3, #0]
			}
		}

}
 8009abc:	bf00      	nop
 8009abe:	3710      	adds	r7, #16
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	20000aac 	.word	0x20000aac
 8009ac8:	200023bc 	.word	0x200023bc
 8009acc:	08014ec4 	.word	0x08014ec4
 8009ad0:	20001370 	.word	0x20001370
 8009ad4:	20000a58 	.word	0x20000a58

08009ad8 <DMA_GNSS_Periph_IRQHandler>:

void DMA_GNSS_Periph_IRQHandler(GPS_Handle_Typedef *hgps)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b082      	sub	sp, #8
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
	if(__HAL_DMA_GET_IT_SOURCE(hgps->gps_huart->hdmarx,DMA_IT_TC))
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f003 0302 	and.w	r3, r3, #2
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d046      	beq.n	8009b80 <DMA_GNSS_Periph_IRQHandler+0xa8>
	{
		__HAL_DMA_CLEAR_FLAG(hgps->gps_huart->hdmarx,DMA_FLAG_TC5);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	461a      	mov	r2, r3
 8009afc:	4b42      	ldr	r3, [pc, #264]	; (8009c08 <DMA_GNSS_Periph_IRQHandler+0x130>)
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d904      	bls.n	8009b0c <DMA_GNSS_Periph_IRQHandler+0x34>
 8009b02:	4b42      	ldr	r3, [pc, #264]	; (8009c0c <DMA_GNSS_Periph_IRQHandler+0x134>)
 8009b04:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009b08:	605a      	str	r2, [r3, #4]
 8009b0a:	e003      	b.n	8009b14 <DMA_GNSS_Periph_IRQHandler+0x3c>
 8009b0c:	4b40      	ldr	r3, [pc, #256]	; (8009c10 <DMA_GNSS_Periph_IRQHandler+0x138>)
 8009b0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009b12:	605a      	str	r2, [r3, #4]
		//stop timer and reset flag
		HAL_TIM_Base_Stop(hgps->gps_htim);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f7fb f9a1 	bl	8004e60 <HAL_TIM_Base_Stop>
		__HAL_TIM_DISABLE_IT(hgps->gps_htim,TIM_IT_CC1);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	689b      	ldr	r3, [r3, #8]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	6892      	ldr	r2, [r2, #8]
 8009b28:	6812      	ldr	r2, [r2, #0]
 8009b2a:	68d2      	ldr	r2, [r2, #12]
 8009b2c:	f022 0202 	bic.w	r2, r2, #2
 8009b30:	60da      	str	r2, [r3, #12]
		if(__HAL_TIM_GET_FLAG(hgps->gps_htim,TIM_FLAG_CC1))
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	691b      	ldr	r3, [r3, #16]
 8009b3a:	f003 0302 	and.w	r3, r3, #2
 8009b3e:	2b02      	cmp	r3, #2
 8009b40:	d105      	bne.n	8009b4e <DMA_GNSS_Periph_IRQHandler+0x76>
		{
			__HAL_TIM_CLEAR_FLAG(hgps->gps_htim,TIM_FLAG_CC1);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f06f 0202 	mvn.w	r2, #2
 8009b4c:	611a      	str	r2, [r3, #16]
		}
		TIM_IDLE_Timeout = RESET;
 8009b4e:	4b31      	ldr	r3, [pc, #196]	; (8009c14 <DMA_GNSS_Periph_IRQHandler+0x13c>)
 8009b50:	2200      	movs	r2, #0
 8009b52:	701a      	strb	r2, [r3, #0]

		//begin a Memory to Memory PEripheral transfer
		__HAL_DMA_ENABLE_IT(hgps->gps_hdmamem,DMA_IT_TC);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	6852      	ldr	r2, [r2, #4]
 8009b5e:	6812      	ldr	r2, [r2, #0]
 8009b60:	6812      	ldr	r2, [r2, #0]
 8009b62:	f042 0202 	orr.w	r2, r2, #2
 8009b66:	601a      	str	r2, [r3, #0]
		HAL_DMA_Start(hgps->gps_hdmamem,(uint32_t)hgps->GPS_Rx_Buffer,(uint32_t)hgps->GPS_Mem_Buffer,DMA_RX_BUFFER_SIZE);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6858      	ldr	r0, [r3, #4]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	68db      	ldr	r3, [r3, #12]
 8009b70:	4619      	mov	r1, r3
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	695b      	ldr	r3, [r3, #20]
 8009b76:	461a      	mov	r2, r3
 8009b78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b7c:	f7f7 fd88 	bl	8001690 <HAL_DMA_Start>
	}
		//in errata sheet Upon a data transfer error in a DMA channel x, both the specific TEIFx and the global GIFx
		//	flags are raised and the channel x is normally automatically disabled. However, if in the
		//	same clock cycle the software clears the GIFx flag (by setting the CGIFx bit of the
		//	DMA_IFCR register), the automatic channel disable fails and the TEIFx flag is not raised.
	if(__HAL_DMA_GET_IT_SOURCE(hgps->gps_hdmamem,DMA_IT_HT))
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f003 0304 	and.w	r3, r3, #4
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d017      	beq.n	8009bc0 <DMA_GNSS_Periph_IRQHandler+0xe8>
	{
		__HAL_DMA_CLEAR_FLAG(hgps->gps_hdmamem,DMA_IT_HT);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	461a      	mov	r2, r3
 8009b98:	4b1b      	ldr	r3, [pc, #108]	; (8009c08 <DMA_GNSS_Periph_IRQHandler+0x130>)
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d903      	bls.n	8009ba6 <DMA_GNSS_Periph_IRQHandler+0xce>
 8009b9e:	4b1b      	ldr	r3, [pc, #108]	; (8009c0c <DMA_GNSS_Periph_IRQHandler+0x134>)
 8009ba0:	2204      	movs	r2, #4
 8009ba2:	605a      	str	r2, [r3, #4]
 8009ba4:	e002      	b.n	8009bac <DMA_GNSS_Periph_IRQHandler+0xd4>
 8009ba6:	4b1a      	ldr	r3, [pc, #104]	; (8009c10 <DMA_GNSS_Periph_IRQHandler+0x138>)
 8009ba8:	2204      	movs	r2, #4
 8009baa:	605a      	str	r2, [r3, #4]
		__HAL_DMA_DISABLE_IT(hgps->gps_hdmamem,DMA_IT_HT);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	6852      	ldr	r2, [r2, #4]
 8009bb6:	6812      	ldr	r2, [r2, #0]
 8009bb8:	6812      	ldr	r2, [r2, #0]
 8009bba:	f022 0204 	bic.w	r2, r2, #4
 8009bbe:	601a      	str	r2, [r3, #0]
	}
	if(__HAL_DMA_GET_IT_SOURCE(hgps->gps_hdmamem,DMA_IT_TE))
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f003 0308 	and.w	r3, r3, #8
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d017      	beq.n	8009c00 <DMA_GNSS_Periph_IRQHandler+0x128>
	{
		__HAL_DMA_CLEAR_FLAG(hgps->gps_hdmamem,DMA_IT_TE);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	4b0b      	ldr	r3, [pc, #44]	; (8009c08 <DMA_GNSS_Periph_IRQHandler+0x130>)
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d903      	bls.n	8009be6 <DMA_GNSS_Periph_IRQHandler+0x10e>
 8009bde:	4b0b      	ldr	r3, [pc, #44]	; (8009c0c <DMA_GNSS_Periph_IRQHandler+0x134>)
 8009be0:	2208      	movs	r2, #8
 8009be2:	605a      	str	r2, [r3, #4]
 8009be4:	e002      	b.n	8009bec <DMA_GNSS_Periph_IRQHandler+0x114>
 8009be6:	4b0a      	ldr	r3, [pc, #40]	; (8009c10 <DMA_GNSS_Periph_IRQHandler+0x138>)
 8009be8:	2208      	movs	r2, #8
 8009bea:	605a      	str	r2, [r3, #4]
		__HAL_DMA_DISABLE_IT(hgps->gps_hdmamem,DMA_IT_TE);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	6852      	ldr	r2, [r2, #4]
 8009bf6:	6812      	ldr	r2, [r2, #0]
 8009bf8:	6812      	ldr	r2, [r2, #0]
 8009bfa:	f022 0208 	bic.w	r2, r2, #8
 8009bfe:	601a      	str	r2, [r3, #0]
	}
}
 8009c00:	bf00      	nop
 8009c02:	3708      	adds	r7, #8
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	40020080 	.word	0x40020080
 8009c0c:	40020400 	.word	0x40020400
 8009c10:	40020000 	.word	0x40020000
 8009c14:	20000a50 	.word	0x20000a50

08009c18 <USART_GPS_IRQHandler>:

void USART_GPS_IRQHandler(GPS_Handle_Typedef *hgps)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
	if(__HAL_UART_GET_IT_SOURCE(hgps->gps_huart,UART_IT_IDLE))
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f003 0310 	and.w	r3, r3, #16
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d07a      	beq.n	8009d26 <USART_GPS_IRQHandler+0x10e>
	{
		uint32_t temp = hgps->gps_huart->Instance->ISR;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	69db      	ldr	r3, [r3, #28]
 8009c38:	60fb      	str	r3, [r7, #12]
		temp = hgps->gps_huart->Instance->RDR;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	60fb      	str	r3, [r7, #12]
		 * 		   disable Periph-Mem stream and
		 * 		   begin Mem - Mem transfer of known data
		 *
		 */
		//check flag in TIM2
		if(TIM_IDLE_Timeout == SET)
 8009c46:	4b6a      	ldr	r3, [pc, #424]	; (8009df0 <USART_GPS_IRQHandler+0x1d8>)
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d166      	bne.n	8009d1c <USART_GPS_IRQHandler+0x104>
		{
			gnss_length = DMA_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(hgps->gps_huart->hdmarx);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	4b65      	ldr	r3, [pc, #404]	; (8009df4 <USART_GPS_IRQHandler+0x1dc>)
 8009c60:	601a      	str	r2, [r3, #0]
			//Disable DMA and unlink from UART
			if(log_gps)
 8009c62:	4b65      	ldr	r3, [pc, #404]	; (8009df8 <USART_GPS_IRQHandler+0x1e0>)
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d012      	beq.n	8009c90 <USART_GPS_IRQHandler+0x78>
			{
				HAL_UART_DMAPause(hgps->gps_huart);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7fd f89e 	bl	8006db0 <HAL_UART_DMAPause>
				hgps->gps_huart->hdmarx->Instance->CCR &= ~DMA_CCR_EN;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	6812      	ldr	r2, [r2, #0]
 8009c80:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009c82:	6812      	ldr	r2, [r2, #0]
 8009c84:	6812      	ldr	r2, [r2, #0]
 8009c86:	f022 0201 	bic.w	r2, r2, #1
 8009c8a:	601a      	str	r2, [r3, #0]
 8009c8c:	bf00      	nop
 8009c8e:	e004      	b.n	8009c9a <USART_GPS_IRQHandler+0x82>
				__NOP();

			}else
			{
				HAL_UART_DMAStop(hgps->gps_huart);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4618      	mov	r0, r3
 8009c96:	f7fd f923 	bl	8006ee0 <HAL_UART_DMAStop>
			}
			//Timeout case: USART has recieved no data, Reciever timeout

			if(gnss_length > 0)
 8009c9a:	4b56      	ldr	r3, [pc, #344]	; (8009df4 <USART_GPS_IRQHandler+0x1dc>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	dd16      	ble.n	8009cd0 <USART_GPS_IRQHandler+0xb8>
			{
				//begin transfer from mem to mem
				__HAL_DMA_ENABLE_IT(hgps->gps_hdmamem,DMA_IT_TC);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	6852      	ldr	r2, [r2, #4]
 8009cac:	6812      	ldr	r2, [r2, #0]
 8009cae:	6812      	ldr	r2, [r2, #0]
 8009cb0:	f042 0202 	orr.w	r2, r2, #2
 8009cb4:	601a      	str	r2, [r3, #0]
				HAL_DMA_Start(hgps->gps_hdmamem,(uint32_t)hgps->GPS_Rx_Buffer,(uint32_t)hgps->GPS_Mem_Buffer,gnss_length);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6858      	ldr	r0, [r3, #4]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	695b      	ldr	r3, [r3, #20]
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	4b4b      	ldr	r3, [pc, #300]	; (8009df4 <USART_GPS_IRQHandler+0x1dc>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f7f7 fce1 	bl	8001690 <HAL_DMA_Start>
 8009cce:	e018      	b.n	8009d02 <USART_GPS_IRQHandler+0xea>

			}else
			{
				if(log_gps)
 8009cd0:	4b49      	ldr	r3, [pc, #292]	; (8009df8 <USART_GPS_IRQHandler+0x1e0>)
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d011      	beq.n	8009cfc <USART_GPS_IRQHandler+0xe4>
				{
					HAL_UART_DMAResume(hgps->gps_huart);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f7fd f8ba 	bl	8006e56 <HAL_UART_DMAResume>
					hgps->gps_huart->hdmarx->Instance->CCR |= DMA_CCR_EN;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	6812      	ldr	r2, [r2, #0]
 8009cee:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009cf0:	6812      	ldr	r2, [r2, #0]
 8009cf2:	6812      	ldr	r2, [r2, #0]
 8009cf4:	f042 0201 	orr.w	r2, r2, #1
 8009cf8:	601a      	str	r2, [r3, #0]
 8009cfa:	bf00      	nop
			/*
			 * Case 2: gnss_length == 0;
			 *
			 * Reciever has recieved no data and has thus timed out.
			 */
				M2M_Txfer_Cplt = HAL_TIMEOUT;
 8009cfc:	4b3f      	ldr	r3, [pc, #252]	; (8009dfc <USART_GPS_IRQHandler+0x1e4>)
 8009cfe:	2203      	movs	r2, #3
 8009d00:	701a      	strb	r2, [r3, #0]
			}
			//clear tim flag
			TIM_IDLE_Timeout = 0;
 8009d02:	4b3b      	ldr	r3, [pc, #236]	; (8009df0 <USART_GPS_IRQHandler+0x1d8>)
 8009d04:	2200      	movs	r2, #0
 8009d06:	701a      	strb	r2, [r3, #0]
			__HAL_UART_DISABLE_IT(hgps->gps_huart,UART_IT_IDLE);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	6812      	ldr	r2, [r2, #0]
 8009d12:	6812      	ldr	r2, [r2, #0]
 8009d14:	6812      	ldr	r2, [r2, #0]
 8009d16:	f022 0210 	bic.w	r2, r2, #16
 8009d1a:	601a      	str	r2, [r3, #0]
		}

		__HAL_UART_CLEAR_FLAG(hgps->gps_huart,UART_FLAG_IDLE);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	2210      	movs	r2, #16
 8009d24:	621a      	str	r2, [r3, #32]
	} if(__HAL_UART_GET_IT_SOURCE(hgps->gps_huart,UART_IT_TC))
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d016      	beq.n	8009d64 <USART_GPS_IRQHandler+0x14c>
	{

		HAL_UART_AbortTransmit_IT(hgps->gps_huart);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f7fd f93c 	bl	8006fb8 <HAL_UART_AbortTransmit_IT>
		__HAL_UART_CLEAR_FLAG(hgps->gps_huart,UART_FLAG_IDLE);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2210      	movs	r2, #16
 8009d48:	621a      	str	r2, [r3, #32]
		__HAL_UART_DISABLE_IT(hgps->gps_huart,UART_IT_IDLE);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	6812      	ldr	r2, [r2, #0]
 8009d54:	6812      	ldr	r2, [r2, #0]
 8009d56:	6812      	ldr	r2, [r2, #0]
 8009d58:	f022 0210 	bic.w	r2, r2, #16
 8009d5c:	601a      	str	r2, [r3, #0]
		TX_Cplt = 1;
 8009d5e:	4b28      	ldr	r3, [pc, #160]	; (8009e00 <USART_GPS_IRQHandler+0x1e8>)
 8009d60:	2201      	movs	r2, #1
 8009d62:	701a      	strb	r2, [r3, #0]

	}
	// additional error handling
	if(__HAL_UART_GET_IT_SOURCE(hgps->gps_huart,UART_IT_ERR))
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	f003 0301 	and.w	r3, r3, #1
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d039      	beq.n	8009de8 <USART_GPS_IRQHandler+0x1d0>
	{
		//clear framing error
		if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_FE) == SET)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	69db      	ldr	r3, [r3, #28]
 8009d7c:	f003 0302 	and.w	r3, r3, #2
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	d104      	bne.n	8009d8e <USART_GPS_IRQHandler+0x176>
		{
			__HAL_UART_CLEAR_FEFLAG(hgps->gps_huart);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	2202      	movs	r2, #2
 8009d8c:	621a      	str	r2, [r3, #32]
		}
		//clear noise error
		if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_NE) == SET)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	69db      	ldr	r3, [r3, #28]
 8009d96:	f003 0304 	and.w	r3, r3, #4
 8009d9a:	2b04      	cmp	r3, #4
 8009d9c:	d104      	bne.n	8009da8 <USART_GPS_IRQHandler+0x190>
		{
			__HAL_UART_CLEAR_NEFLAG(hgps->gps_huart);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	2204      	movs	r2, #4
 8009da6:	621a      	str	r2, [r3, #32]
		}
		//clear overun error
		if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_ORE) == SET)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	69db      	ldr	r3, [r3, #28]
 8009db0:	f003 0308 	and.w	r3, r3, #8
 8009db4:	2b08      	cmp	r3, #8
 8009db6:	d10a      	bne.n	8009dce <USART_GPS_IRQHandler+0x1b6>
		{
			uint8_t temp = hgps->gps_huart->Instance->RDR;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	72fb      	strb	r3, [r7, #11]
			(void)temp;
			__HAL_UART_CLEAR_OREFLAG(hgps->gps_huart);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2208      	movs	r2, #8
 8009dcc:	621a      	str	r2, [r3, #32]
		}
		//clear parity errors
		if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_PE) == SET)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	69db      	ldr	r3, [r3, #28]
 8009dd6:	f003 0301 	and.w	r3, r3, #1
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d104      	bne.n	8009de8 <USART_GPS_IRQHandler+0x1d0>
		{
			__HAL_UART_CLEAR_PEFLAG(hgps->gps_huart);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	2201      	movs	r2, #1
 8009de6:	621a      	str	r2, [r3, #32]
		}
	}
}
 8009de8:	bf00      	nop
 8009dea:	3710      	adds	r7, #16
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}
 8009df0:	20000a50 	.word	0x20000a50
 8009df4:	20000a28 	.word	0x20000a28
 8009df8:	200023bc 	.word	0x200023bc
 8009dfc:	20000aac 	.word	0x20000aac
 8009e00:	20001b70 	.word	0x20001b70

08009e04 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static HAL_StatusTypeDef MX_UART5_Init(void)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	af00      	add	r7, sp, #0
  huart5.Instance = UART5;
 8009e08:	4b14      	ldr	r3, [pc, #80]	; (8009e5c <MX_UART5_Init+0x58>)
 8009e0a:	4a15      	ldr	r2, [pc, #84]	; (8009e60 <MX_UART5_Init+0x5c>)
 8009e0c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 19200;
 8009e0e:	4b13      	ldr	r3, [pc, #76]	; (8009e5c <MX_UART5_Init+0x58>)
 8009e10:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8009e14:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8009e16:	4b11      	ldr	r3, [pc, #68]	; (8009e5c <MX_UART5_Init+0x58>)
 8009e18:	2200      	movs	r2, #0
 8009e1a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8009e1c:	4b0f      	ldr	r3, [pc, #60]	; (8009e5c <MX_UART5_Init+0x58>)
 8009e1e:	2200      	movs	r2, #0
 8009e20:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8009e22:	4b0e      	ldr	r3, [pc, #56]	; (8009e5c <MX_UART5_Init+0x58>)
 8009e24:	2200      	movs	r2, #0
 8009e26:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8009e28:	4b0c      	ldr	r3, [pc, #48]	; (8009e5c <MX_UART5_Init+0x58>)
 8009e2a:	220c      	movs	r2, #12
 8009e2c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009e2e:	4b0b      	ldr	r3, [pc, #44]	; (8009e5c <MX_UART5_Init+0x58>)
 8009e30:	2200      	movs	r2, #0
 8009e32:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8009e34:	4b09      	ldr	r3, [pc, #36]	; (8009e5c <MX_UART5_Init+0x58>)
 8009e36:	2200      	movs	r2, #0
 8009e38:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009e3a:	4b08      	ldr	r3, [pc, #32]	; (8009e5c <MX_UART5_Init+0x58>)
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009e40:	4b06      	ldr	r3, [pc, #24]	; (8009e5c <MX_UART5_Init+0x58>)
 8009e42:	2200      	movs	r2, #0
 8009e44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8009e46:	4805      	ldr	r0, [pc, #20]	; (8009e5c <MX_UART5_Init+0x58>)
 8009e48:	f7fc fccf 	bl	80067ea <HAL_UART_Init>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d001      	beq.n	8009e56 <MX_UART5_Init+0x52>
  {
    return HAL_ERROR;
 8009e52:	2301      	movs	r3, #1
 8009e54:	e000      	b.n	8009e58 <MX_UART5_Init+0x54>
  }

  return HAL_OK;
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	20003600 	.word	0x20003600
 8009e60:	40005000 	.word	0x40005000

08009e64 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel2
  */
static HAL_StatusTypeDef MX_DMA_Init(void)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b082      	sub	sp, #8
 8009e68:	af00      	add	r7, sp, #0
  if(DMA2_Channel2->CCR != 0)
 8009e6a:	4b33      	ldr	r3, [pc, #204]	; (8009f38 <MX_DMA_Init+0xd4>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d00d      	beq.n	8009e8e <MX_DMA_Init+0x2a>
  {
   //clear channel to reset state
   hdma_uart5_rx.Instance = DMA2_Channel2;
 8009e72:	4b32      	ldr	r3, [pc, #200]	; (8009f3c <MX_DMA_Init+0xd8>)
 8009e74:	4a30      	ldr	r2, [pc, #192]	; (8009f38 <MX_DMA_Init+0xd4>)
 8009e76:	601a      	str	r2, [r3, #0]
   hdma_uart5_rx.DmaBaseAddress->ISR = DMA2->ISR;
 8009e78:	4b30      	ldr	r3, [pc, #192]	; (8009f3c <MX_DMA_Init+0xd8>)
 8009e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e7c:	4a30      	ldr	r2, [pc, #192]	; (8009f40 <MX_DMA_Init+0xdc>)
 8009e7e:	6812      	ldr	r2, [r2, #0]
 8009e80:	601a      	str	r2, [r3, #0]
   hdma_uart5_rx.ChannelIndex = 2;
 8009e82:	4b2e      	ldr	r3, [pc, #184]	; (8009f3c <MX_DMA_Init+0xd8>)
 8009e84:	2202      	movs	r2, #2
 8009e86:	645a      	str	r2, [r3, #68]	; 0x44
   HAL_DMA_DeInit(&hdma_uart5_rx);
 8009e88:	482c      	ldr	r0, [pc, #176]	; (8009f3c <MX_DMA_Init+0xd8>)
 8009e8a:	f7f7 fb6f 	bl	800156c <HAL_DMA_DeInit>
  }
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8009e8e:	4a2d      	ldr	r2, [pc, #180]	; (8009f44 <MX_DMA_Init+0xe0>)
 8009e90:	4b2c      	ldr	r3, [pc, #176]	; (8009f44 <MX_DMA_Init+0xe0>)
 8009e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e94:	f043 0302 	orr.w	r3, r3, #2
 8009e98:	6493      	str	r3, [r2, #72]	; 0x48
 8009e9a:	4b2a      	ldr	r3, [pc, #168]	; (8009f44 <MX_DMA_Init+0xe0>)
 8009e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e9e:	f003 0302 	and.w	r3, r3, #2
 8009ea2:	607b      	str	r3, [r7, #4]
 8009ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009ea6:	4a27      	ldr	r2, [pc, #156]	; (8009f44 <MX_DMA_Init+0xe0>)
 8009ea8:	4b26      	ldr	r3, [pc, #152]	; (8009f44 <MX_DMA_Init+0xe0>)
 8009eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009eac:	f043 0301 	orr.w	r3, r3, #1
 8009eb0:	6493      	str	r3, [r2, #72]	; 0x48
 8009eb2:	4b24      	ldr	r3, [pc, #144]	; (8009f44 <MX_DMA_Init+0xe0>)
 8009eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009eb6:	f003 0301 	and.w	r3, r3, #1
 8009eba:	603b      	str	r3, [r7, #0]
 8009ebc:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_channel2 on DMA1_Channel2 */
  hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 8009ebe:	4b22      	ldr	r3, [pc, #136]	; (8009f48 <MX_DMA_Init+0xe4>)
 8009ec0:	4a22      	ldr	r2, [pc, #136]	; (8009f4c <MX_DMA_Init+0xe8>)
 8009ec2:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel2.Init.Request = DMA_REQUEST_0;
 8009ec4:	4b20      	ldr	r3, [pc, #128]	; (8009f48 <MX_DMA_Init+0xe4>)
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8009eca:	4b1f      	ldr	r3, [pc, #124]	; (8009f48 <MX_DMA_Init+0xe4>)
 8009ecc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009ed0:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_ENABLE;
 8009ed2:	4b1d      	ldr	r3, [pc, #116]	; (8009f48 <MX_DMA_Init+0xe4>)
 8009ed4:	2240      	movs	r2, #64	; 0x40
 8009ed6:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel2.Init.MemInc = DMA_MINC_ENABLE;
 8009ed8:	4b1b      	ldr	r3, [pc, #108]	; (8009f48 <MX_DMA_Init+0xe4>)
 8009eda:	2280      	movs	r2, #128	; 0x80
 8009edc:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009ede:	4b1a      	ldr	r3, [pc, #104]	; (8009f48 <MX_DMA_Init+0xe4>)
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009ee4:	4b18      	ldr	r3, [pc, #96]	; (8009f48 <MX_DMA_Init+0xe4>)
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel2.Init.Mode = DMA_NORMAL;
 8009eea:	4b17      	ldr	r3, [pc, #92]	; (8009f48 <MX_DMA_Init+0xe4>)
 8009eec:	2200      	movs	r2, #0
 8009eee:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel2.Init.Priority = DMA_PRIORITY_LOW;
 8009ef0:	4b15      	ldr	r3, [pc, #84]	; (8009f48 <MX_DMA_Init+0xe4>)
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 8009ef6:	4814      	ldr	r0, [pc, #80]	; (8009f48 <MX_DMA_Init+0xe4>)
 8009ef8:	f7f7 fa80 	bl	80013fc <HAL_DMA_Init>
 8009efc:	4603      	mov	r3, r0
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d001      	beq.n	8009f06 <MX_DMA_Init+0xa2>
  {
	  return HAL_ERROR;
 8009f02:	2301      	movs	r3, #1
 8009f04:	e013      	b.n	8009f2e <MX_DMA_Init+0xca>
  }

  /* DMA interrupt init */
  HAL_NVIC_ClearPendingIRQ(DMA2_Channel2_IRQn);
 8009f06:	2039      	movs	r0, #57	; 0x39
 8009f08:	f7f7 fa69 	bl	80013de <HAL_NVIC_ClearPendingIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	2100      	movs	r1, #0
 8009f10:	200c      	movs	r0, #12
 8009f12:	f7f7 fa1a 	bl	800134a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8009f16:	200c      	movs	r0, #12
 8009f18:	f7f7 fa33 	bl	8001382 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	2100      	movs	r1, #0
 8009f20:	2039      	movs	r0, #57	; 0x39
 8009f22:	f7f7 fa12 	bl	800134a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8009f26:	2039      	movs	r0, #57	; 0x39
 8009f28:	f7f7 fa2b 	bl	8001382 <HAL_NVIC_EnableIRQ>

  return HAL_OK;
 8009f2c:	2300      	movs	r3, #0

}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3708      	adds	r7, #8
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	4002041c 	.word	0x4002041c
 8009f3c:	200036d0 	.word	0x200036d0
 8009f40:	40020400 	.word	0x40020400
 8009f44:	40021000 	.word	0x40021000
 8009f48:	20003684 	.word	0x20003684
 8009f4c:	4002001c 	.word	0x4002001c

08009f50 <MX_GPIO_Init>:
  * @param None
  * @retval None
  */

static HAL_StatusTypeDef MX_GPIO_Init(void)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b086      	sub	sp, #24
 8009f54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f56:	1d3b      	adds	r3, r7, #4
 8009f58:	2200      	movs	r2, #0
 8009f5a:	601a      	str	r2, [r3, #0]
 8009f5c:	605a      	str	r2, [r3, #4]
 8009f5e:	609a      	str	r2, [r3, #8]
 8009f60:	60da      	str	r2, [r3, #12]
 8009f62:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009f64:	4a1b      	ldr	r2, [pc, #108]	; (8009fd4 <MX_GPIO_Init+0x84>)
 8009f66:	4b1b      	ldr	r3, [pc, #108]	; (8009fd4 <MX_GPIO_Init+0x84>)
 8009f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f6a:	f043 0304 	orr.w	r3, r3, #4
 8009f6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009f70:	4b18      	ldr	r3, [pc, #96]	; (8009fd4 <MX_GPIO_Init+0x84>)
 8009f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f74:	f003 0304 	and.w	r3, r3, #4
 8009f78:	603b      	str	r3, [r7, #0]
 8009f7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */

  /*Configure GPIO pins : LD2_Pin IR_OnOff_Pin */
  GPIO_InitStruct.Pin =  IR_OnOff_Pin;
 8009f7c:	2380      	movs	r3, #128	; 0x80
 8009f7e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009f80:	2301      	movs	r3, #1
 8009f82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f84:	2300      	movs	r3, #0
 8009f86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009f8c:	1d3b      	adds	r3, r7, #4
 8009f8e:	4619      	mov	r1, r3
 8009f90:	4811      	ldr	r0, [pc, #68]	; (8009fd8 <MX_GPIO_Init+0x88>)
 8009f92:	f7f7 fd87 	bl	8001aa4 <HAL_GPIO_Init>
  /* Disable Internal Pull Down Resistor*/
  HAL_PWREx_DisableGPIOPullDown(IR_OnOff_PWR_GPIO_Port,IR_OnOff_Pin);
 8009f96:	2180      	movs	r1, #128	; 0x80
 8009f98:	2002      	movs	r0, #2
 8009f9a:	f7f8 f9d7 	bl	800234c <HAL_PWREx_DisableGPIOPullDown>
  HAL_PWREx_DisablePullUpPullDownConfig();
 8009f9e:	f7f8 fa53 	bl	8002448 <HAL_PWREx_DisablePullUpPullDownConfig>

  /*Configure GPIO pins : IR_RIng_Pin IR_NetAv_Pin */
  GPIO_InitStruct.Pin = IR_Ring_Pin|IR_NetAv_Pin;
 8009fa2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009fa6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009fa8:	4b0c      	ldr	r3, [pc, #48]	; (8009fdc <MX_GPIO_Init+0x8c>)
 8009faa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009fac:	2302      	movs	r3, #2
 8009fae:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009fb0:	1d3b      	adds	r3, r7, #4
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	4808      	ldr	r0, [pc, #32]	; (8009fd8 <MX_GPIO_Init+0x88>)
 8009fb6:	f7f7 fd75 	bl	8001aa4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8009fba:	2200      	movs	r2, #0
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	2028      	movs	r0, #40	; 0x28
 8009fc0:	f7f7 f9c3 	bl	800134a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8009fc4:	2028      	movs	r0, #40	; 0x28
 8009fc6:	f7f7 f9dc 	bl	8001382 <HAL_NVIC_EnableIRQ>

  return HAL_OK;
 8009fca:	2300      	movs	r3, #0

}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3718      	adds	r7, #24
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	40021000 	.word	0x40021000
 8009fd8:	48000800 	.word	0x48000800
 8009fdc:	10110000 	.word	0x10110000

08009fe0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static HAL_StatusTypeDef MX_TIM3_Init(void)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b094      	sub	sp, #80	; 0x50
 8009fe4:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009fe6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009fea:	2200      	movs	r2, #0
 8009fec:	601a      	str	r2, [r3, #0]
 8009fee:	605a      	str	r2, [r3, #4]
 8009ff0:	609a      	str	r2, [r3, #8]
 8009ff2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8009ff4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	601a      	str	r2, [r3, #0]
 8009ffc:	605a      	str	r2, [r3, #4]
 8009ffe:	609a      	str	r2, [r3, #8]
 800a000:	60da      	str	r2, [r3, #12]
 800a002:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a004:	f107 0320 	add.w	r3, r7, #32
 800a008:	2200      	movs	r2, #0
 800a00a:	601a      	str	r2, [r3, #0]
 800a00c:	605a      	str	r2, [r3, #4]
 800a00e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a010:	1d3b      	adds	r3, r7, #4
 800a012:	2200      	movs	r2, #0
 800a014:	601a      	str	r2, [r3, #0]
 800a016:	605a      	str	r2, [r3, #4]
 800a018:	609a      	str	r2, [r3, #8]
 800a01a:	60da      	str	r2, [r3, #12]
 800a01c:	611a      	str	r2, [r3, #16]
 800a01e:	615a      	str	r2, [r3, #20]
 800a020:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800a022:	4b3c      	ldr	r3, [pc, #240]	; (800a114 <MX_TIM3_Init+0x134>)
 800a024:	4a3c      	ldr	r2, [pc, #240]	; (800a118 <MX_TIM3_Init+0x138>)
 800a026:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800a028:	4b3a      	ldr	r3, [pc, #232]	; (800a114 <MX_TIM3_Init+0x134>)
 800a02a:	2200      	movs	r2, #0
 800a02c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a02e:	4b39      	ldr	r3, [pc, #228]	; (800a114 <MX_TIM3_Init+0x134>)
 800a030:	2200      	movs	r2, #0
 800a032:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800a034:	4b37      	ldr	r3, [pc, #220]	; (800a114 <MX_TIM3_Init+0x134>)
 800a036:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a03a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a03c:	4b35      	ldr	r3, [pc, #212]	; (800a114 <MX_TIM3_Init+0x134>)
 800a03e:	2200      	movs	r2, #0
 800a040:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a042:	4b34      	ldr	r3, [pc, #208]	; (800a114 <MX_TIM3_Init+0x134>)
 800a044:	2200      	movs	r2, #0
 800a046:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800a048:	4832      	ldr	r0, [pc, #200]	; (800a114 <MX_TIM3_Init+0x134>)
 800a04a:	f7fa feae 	bl	8004daa <HAL_TIM_Base_Init>
 800a04e:	4603      	mov	r3, r0
 800a050:	2b00      	cmp	r3, #0
 800a052:	d001      	beq.n	800a058 <MX_TIM3_Init+0x78>
  {
    return HAL_ERROR;
 800a054:	2301      	movs	r3, #1
 800a056:	e058      	b.n	800a10a <MX_TIM3_Init+0x12a>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a05c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800a05e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a062:	4619      	mov	r1, r3
 800a064:	482b      	ldr	r0, [pc, #172]	; (800a114 <MX_TIM3_Init+0x134>)
 800a066:	f7fb fbd9 	bl	800581c <HAL_TIM_ConfigClockSource>
 800a06a:	4603      	mov	r3, r0
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d001      	beq.n	800a074 <MX_TIM3_Init+0x94>
  {
    return HAL_ERROR;
 800a070:	2301      	movs	r3, #1
 800a072:	e04a      	b.n	800a10a <MX_TIM3_Init+0x12a>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800a074:	4827      	ldr	r0, [pc, #156]	; (800a114 <MX_TIM3_Init+0x134>)
 800a076:	f7fa ff71 	bl	8004f5c <HAL_TIM_OC_Init>
 800a07a:	4603      	mov	r3, r0
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d001      	beq.n	800a084 <MX_TIM3_Init+0xa4>
  {
    return HAL_ERROR;
 800a080:	2301      	movs	r3, #1
 800a082:	e042      	b.n	800a10a <MX_TIM3_Init+0x12a>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800a084:	2304      	movs	r3, #4
 800a086:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 800a088:	2370      	movs	r3, #112	; 0x70
 800a08a:	633b      	str	r3, [r7, #48]	; 0x30
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 800a08c:	2300      	movs	r3, #0
 800a08e:	637b      	str	r3, [r7, #52]	; 0x34
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 800a090:	2300      	movs	r3, #0
 800a092:	63bb      	str	r3, [r7, #56]	; 0x38
  sSlaveConfig.TriggerFilter = 0;
 800a094:	2300      	movs	r3, #0
 800a096:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800a098:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a09c:	4619      	mov	r1, r3
 800a09e:	481d      	ldr	r0, [pc, #116]	; (800a114 <MX_TIM3_Init+0x134>)
 800a0a0:	f7fb fc75 	bl	800598e <HAL_TIM_SlaveConfigSynchro>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d001      	beq.n	800a0ae <MX_TIM3_Init+0xce>
  {
    return HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e02d      	b.n	800a10a <MX_TIM3_Init+0x12a>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a0b6:	f107 0320 	add.w	r3, r7, #32
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	4815      	ldr	r0, [pc, #84]	; (800a114 <MX_TIM3_Init+0x134>)
 800a0be:	f7fc fa9f 	bl	8006600 <HAL_TIMEx_MasterConfigSynchronization>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d001      	beq.n	800a0cc <MX_TIM3_Init+0xec>
  {
    return HAL_ERROR;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e01e      	b.n	800a10a <MX_TIM3_Init+0x12a>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM_TIM3_ETR_COMP1) != HAL_OK)
 800a0cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a0d0:	4810      	ldr	r0, [pc, #64]	; (800a114 <MX_TIM3_Init+0x134>)
 800a0d2:	f7fc fb1b 	bl	800670c <HAL_TIMEx_RemapConfig>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d001      	beq.n	800a0e0 <MX_TIM3_Init+0x100>
  {
    return HAL_ERROR;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	e014      	b.n	800a10a <MX_TIM3_Init+0x12a>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 11520;
 800a0e4:	f44f 5334 	mov.w	r3, #11520	; 0x2d00
 800a0e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800a0ea:	2302      	movs	r3, #2
 800a0ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a0f2:	1d3b      	adds	r3, r7, #4
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	4806      	ldr	r0, [pc, #24]	; (800a114 <MX_TIM3_Init+0x134>)
 800a0fa:	f7fb fa75 	bl	80055e8 <HAL_TIM_OC_ConfigChannel>
 800a0fe:	4603      	mov	r3, r0
 800a100:	2b00      	cmp	r3, #0
 800a102:	d001      	beq.n	800a108 <MX_TIM3_Init+0x128>
  {
    return HAL_ERROR;
 800a104:	2301      	movs	r3, #1
 800a106:	e000      	b.n	800a10a <MX_TIM3_Init+0x12a>
  }
  return HAL_OK;
 800a108:	2300      	movs	r3, #0
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3750      	adds	r7, #80	; 0x50
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	200035b8 	.word	0x200035b8
 800a118:	40000400 	.word	0x40000400

0800a11c <IR_Clear_Buffer>:
 */

//======================= 5. Utility Function Definition ==================================

void  IR_Clear_Buffer(uint8_t *buffer,uint32_t size)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
	memset(buffer,0,size);
 800a126:	683a      	ldr	r2, [r7, #0]
 800a128:	2100      	movs	r1, #0
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f003 f91d 	bl	800d36a <memset>
}
 800a130:	bf00      	nop
 800a132:	3708      	adds	r7, #8
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <IR_Calculate_Checksum>:

uint16_t IR_Calculate_Checksum(uint8_t* messagebuff, uint8_t size)
{
 800a138:	b480      	push	{r7}
 800a13a:	b085      	sub	sp, #20
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	460b      	mov	r3, r1
 800a142:	70fb      	strb	r3, [r7, #3]
	uint32_t sum = 0;
 800a144:	2300      	movs	r3, #0
 800a146:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < size; ++i)
 800a148:	2300      	movs	r3, #0
 800a14a:	60bb      	str	r3, [r7, #8]
 800a14c:	e00a      	b.n	800a164 <IR_Calculate_Checksum+0x2c>
	{
		sum+= messagebuff[i];
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	4413      	add	r3, r2
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	461a      	mov	r2, r3
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	4413      	add	r3, r2
 800a15c:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < size; ++i)
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	3301      	adds	r3, #1
 800a162:	60bb      	str	r3, [r7, #8]
 800a164:	78fa      	ldrb	r2, [r7, #3]
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	429a      	cmp	r2, r3
 800a16a:	dcf0      	bgt.n	800a14e <IR_Calculate_Checksum+0x16>
	}
	//return last 16 bits
	return (uint16_t)(sum & 0xFFFF);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	b29b      	uxth	r3, r3
}
 800a170:	4618      	mov	r0, r3
 800a172:	3714      	adds	r7, #20
 800a174:	46bd      	mov	sp, r7
 800a176:	bc80      	pop	{r7}
 800a178:	4770      	bx	lr
	...

0800a17c <IR_Init_Module>:
 * @param: none
 *
 * @retval: IR_Status_t
 */
IR_Status_t IR_Init_Module(void)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
	 if(MX_GPIO_Init() != HAL_OK){return IR_Pin_CFG_Error;}
 800a182:	f7ff fee5 	bl	8009f50 <MX_GPIO_Init>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d001      	beq.n	800a190 <IR_Init_Module+0x14>
 800a18c:	2301      	movs	r3, #1
 800a18e:	e036      	b.n	800a1fe <IR_Init_Module+0x82>
	 if(MX_DMA_Init()  != HAL_OK){return IR_Pin_CFG_Error;}
 800a190:	f7ff fe68 	bl	8009e64 <MX_DMA_Init>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d001      	beq.n	800a19e <IR_Init_Module+0x22>
 800a19a:	2301      	movs	r3, #1
 800a19c:	e02f      	b.n	800a1fe <IR_Init_Module+0x82>
	 if(MX_UART5_Init()!= HAL_OK){return IR_Pin_CFG_Error;}
 800a19e:	f7ff fe31 	bl	8009e04 <MX_UART5_Init>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d001      	beq.n	800a1ac <IR_Init_Module+0x30>
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e028      	b.n	800a1fe <IR_Init_Module+0x82>
	 if(MX_TIM3_Init()!= HAL_OK){return IR_Pin_CFG_Error;}
 800a1ac:	f7ff ff18 	bl	8009fe0 <MX_TIM3_Init>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d001      	beq.n	800a1ba <IR_Init_Module+0x3e>
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	e021      	b.n	800a1fe <IR_Init_Module+0x82>
	 IR_OnOff_GPIO_Port->ODR |= 0b1<<15;
 800a1ba:	4a13      	ldr	r2, [pc, #76]	; (800a208 <IR_Init_Module+0x8c>)
 800a1bc:	4b12      	ldr	r3, [pc, #72]	; (800a208 <IR_Init_Module+0x8c>)
 800a1be:	695b      	ldr	r3, [r3, #20]
 800a1c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1c4:	6153      	str	r3, [r2, #20]
	  //send acknowledgement
	 char* msg;
	 if(IR_send_AT_CMD("AT\r")== IR_OK)
 800a1c6:	4811      	ldr	r0, [pc, #68]	; (800a20c <IR_Init_Module+0x90>)
 800a1c8:	f000 f87c 	bl	800a2c4 <IR_send_AT_CMD>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d10d      	bne.n	800a1ee <IR_Init_Module+0x72>
	 {
	 	msg = strtok((char*)(&RM_Buffer[2]),"\r");
 800a1d2:	490f      	ldr	r1, [pc, #60]	; (800a210 <IR_Init_Module+0x94>)
 800a1d4:	480f      	ldr	r0, [pc, #60]	; (800a214 <IR_Init_Module+0x98>)
 800a1d6:	f004 faf9 	bl	800e7cc <strtok>
 800a1da:	6078      	str	r0, [r7, #4]
	 	if(strcmp(msg,(char*)"OK") != 0)
 800a1dc:	490e      	ldr	r1, [pc, #56]	; (800a218 <IR_Init_Module+0x9c>)
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f7f5 fff6 	bl	80001d0 <strcmp>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d003      	beq.n	800a1f2 <IR_Init_Module+0x76>
	 	{
	 	  return IR_Ack_Error;
 800a1ea:	2307      	movs	r3, #7
 800a1ec:	e007      	b.n	800a1fe <IR_Init_Module+0x82>
	 	}
	 }else
	 {
	 	  return IR_Ack_Error;
 800a1ee:	2307      	movs	r3, #7
 800a1f0:	e005      	b.n	800a1fe <IR_Init_Module+0x82>
	 }
	 	  //analyse message
	 	  IR_Clear_Buffer(RM_Buffer,RM_BUFFER_SIZE);
 800a1f2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a1f6:	4809      	ldr	r0, [pc, #36]	; (800a21c <IR_Init_Module+0xa0>)
 800a1f8:	f7ff ff90 	bl	800a11c <IR_Clear_Buffer>
	 	  return IR_OK;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3708      	adds	r7, #8
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	48000800 	.word	0x48000800
 800a20c:	08014ec8 	.word	0x08014ec8
 800a210:	08014ecc 	.word	0x08014ecc
 800a214:	200033c2 	.word	0x200033c2
 800a218:	08014ed0 	.word	0x08014ed0
 800a21c:	200033c0 	.word	0x200033c0

0800a220 <IR_DeInit_Module>:
 *
 * NB: Ensure that HAL_TIM_BASE_DeInit calls the user defined MSP DeInit otherwise the peripheral will not
 * 	   be cleared
 */
IR_Status_t IR_DeInit_Module(void)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	af00      	add	r7, sp, #0
	/* Deinitialize TIMx Peripheral*/
	if(htim3.Instance != IR_TIM_PORT)
 800a224:	4b20      	ldr	r3, [pc, #128]	; (800a2a8 <IR_DeInit_Module+0x88>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a20      	ldr	r2, [pc, #128]	; (800a2ac <IR_DeInit_Module+0x8c>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d002      	beq.n	800a234 <IR_DeInit_Module+0x14>
	{
		htim3.Instance = IR_TIM_PORT;
 800a22e:	4b1e      	ldr	r3, [pc, #120]	; (800a2a8 <IR_DeInit_Module+0x88>)
 800a230:	4a1e      	ldr	r2, [pc, #120]	; (800a2ac <IR_DeInit_Module+0x8c>)
 800a232:	601a      	str	r2, [r3, #0]
	}
	HAL_TIM_Base_Stop_IT(&htim3);
 800a234:	481c      	ldr	r0, [pc, #112]	; (800a2a8 <IR_DeInit_Module+0x88>)
 800a236:	f7fa fe67 	bl	8004f08 <HAL_TIM_Base_Stop_IT>
	if(HAL_TIM_Base_DeInit(&htim3) != HAL_OK)
 800a23a:	481b      	ldr	r0, [pc, #108]	; (800a2a8 <IR_DeInit_Module+0x88>)
 800a23c:	f7fa fde0 	bl	8004e00 <HAL_TIM_Base_DeInit>
 800a240:	4603      	mov	r3, r0
 800a242:	2b00      	cmp	r3, #0
 800a244:	d001      	beq.n	800a24a <IR_DeInit_Module+0x2a>
	{
		return IR_CFG_Error;
 800a246:	2308      	movs	r3, #8
 800a248:	e02b      	b.n	800a2a2 <IR_DeInit_Module+0x82>
	}
	/* Deinitialize UARTx Peripheral*/
	if(huart5.Instance != UART5)
 800a24a:	4b19      	ldr	r3, [pc, #100]	; (800a2b0 <IR_DeInit_Module+0x90>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a19      	ldr	r2, [pc, #100]	; (800a2b4 <IR_DeInit_Module+0x94>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d002      	beq.n	800a25a <IR_DeInit_Module+0x3a>
	{
		huart5.Instance = IR_USART_PORT;
 800a254:	4b16      	ldr	r3, [pc, #88]	; (800a2b0 <IR_DeInit_Module+0x90>)
 800a256:	4a17      	ldr	r2, [pc, #92]	; (800a2b4 <IR_DeInit_Module+0x94>)
 800a258:	601a      	str	r2, [r3, #0]
	}
	if(HAL_UART_DeInit(&huart5) != HAL_OK)
 800a25a:	4815      	ldr	r0, [pc, #84]	; (800a2b0 <IR_DeInit_Module+0x90>)
 800a25c:	f7fc fb13 	bl	8006886 <HAL_UART_DeInit>
 800a260:	4603      	mov	r3, r0
 800a262:	2b00      	cmp	r3, #0
 800a264:	d001      	beq.n	800a26a <IR_DeInit_Module+0x4a>
	{
		return IR_CFG_Error;
 800a266:	2308      	movs	r3, #8
 800a268:	e01b      	b.n	800a2a2 <IR_DeInit_Module+0x82>
	}

	/* Deinitialize DMA MEM Channel*/
	if(hdma_memtomem_dma1_channel2.Instance != DMA1_Channel2)
 800a26a:	4b13      	ldr	r3, [pc, #76]	; (800a2b8 <IR_DeInit_Module+0x98>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a13      	ldr	r2, [pc, #76]	; (800a2bc <IR_DeInit_Module+0x9c>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d002      	beq.n	800a27a <IR_DeInit_Module+0x5a>
	{
		hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 800a274:	4b10      	ldr	r3, [pc, #64]	; (800a2b8 <IR_DeInit_Module+0x98>)
 800a276:	4a11      	ldr	r2, [pc, #68]	; (800a2bc <IR_DeInit_Module+0x9c>)
 800a278:	601a      	str	r2, [r3, #0]
	}
	if(HAL_DMA_DeInit(&hdma_memtomem_dma1_channel2) != HAL_OK)
 800a27a:	480f      	ldr	r0, [pc, #60]	; (800a2b8 <IR_DeInit_Module+0x98>)
 800a27c:	f7f7 f976 	bl	800156c <HAL_DMA_DeInit>
 800a280:	4603      	mov	r3, r0
 800a282:	2b00      	cmp	r3, #0
 800a284:	d001      	beq.n	800a28a <IR_DeInit_Module+0x6a>
	{
		return IR_CFG_Error;
 800a286:	2308      	movs	r3, #8
 800a288:	e00b      	b.n	800a2a2 <IR_DeInit_Module+0x82>
	}
	//set On/Off Pin to low and enable pull down resistor
	HAL_GPIO_WritePin(IR_OnOff_GPIO_Port,IR_OnOff_Pin,RESET);
 800a28a:	2200      	movs	r2, #0
 800a28c:	2180      	movs	r1, #128	; 0x80
 800a28e:	480c      	ldr	r0, [pc, #48]	; (800a2c0 <IR_DeInit_Module+0xa0>)
 800a290:	f7f7 fea2 	bl	8001fd8 <HAL_GPIO_WritePin>
	HAL_PWREx_EnableGPIOPullDown(IR_OnOff_PWR_GPIO_Port,IR_OnOff_Pin);
 800a294:	2180      	movs	r1, #128	; 0x80
 800a296:	2002      	movs	r0, #2
 800a298:	f7f7 ffb4 	bl	8002204 <HAL_PWREx_EnableGPIOPullDown>
	HAL_PWREx_EnablePullUpPullDownConfig();
 800a29c:	f7f8 f8c6 	bl	800242c <HAL_PWREx_EnablePullUpPullDownConfig>

	return IR_OK;
 800a2a0:	2300      	movs	r3, #0
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	200035b8 	.word	0x200035b8
 800a2ac:	40000400 	.word	0x40000400
 800a2b0:	20003600 	.word	0x20003600
 800a2b4:	40005000 	.word	0x40005000
 800a2b8:	20003684 	.word	0x20003684
 800a2bc:	4002001c 	.word	0x4002001c
 800a2c0:	48000800 	.word	0x48000800

0800a2c4 <IR_send_AT_CMD>:
	  return IR_OK;
}

IR_Status_t IR_send_AT_CMD(char* cmd)

{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b084      	sub	sp, #16
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]

	int size = strlen(cmd);
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f7f5 ff89 	bl	80001e4 <strlen>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	60fb      	str	r3, [r7, #12]
	if(Session_Flag == SBDWB)
 800a2d6:	4b33      	ldr	r3, [pc, #204]	; (800a3a4 <IR_send_AT_CMD+0xe0>)
 800a2d8:	781b      	ldrb	r3, [r3, #0]
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d102      	bne.n	800a2e4 <IR_send_AT_CMD+0x20>
	{
		size = IR_Bin_Message_Length;
 800a2de:	4b32      	ldr	r3, [pc, #200]	; (800a3a8 <IR_send_AT_CMD+0xe4>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	60fb      	str	r3, [r7, #12]
	}
	memcpy(IR_TX_Buffer,cmd,size);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	6879      	ldr	r1, [r7, #4]
 800a2ea:	4830      	ldr	r0, [pc, #192]	; (800a3ac <IR_send_AT_CMD+0xe8>)
 800a2ec:	f003 f832 	bl	800d354 <memcpy>
	if(HAL_UART_Transmit(&huart5,IR_TX_Buffer,size,100) != HAL_OK)
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	b29a      	uxth	r2, r3
 800a2f4:	2364      	movs	r3, #100	; 0x64
 800a2f6:	492d      	ldr	r1, [pc, #180]	; (800a3ac <IR_send_AT_CMD+0xe8>)
 800a2f8:	482d      	ldr	r0, [pc, #180]	; (800a3b0 <IR_send_AT_CMD+0xec>)
 800a2fa:	f7fc faf9 	bl	80068f0 <HAL_UART_Transmit>
 800a2fe:	4603      	mov	r3, r0
 800a300:	2b00      	cmp	r3, #0
 800a302:	d001      	beq.n	800a308 <IR_send_AT_CMD+0x44>
	{
		return IR_Tx_Error;
 800a304:	2303      	movs	r3, #3
 800a306:	e049      	b.n	800a39c <IR_send_AT_CMD+0xd8>
	}
	__HAL_DMA_ENABLE_IT(&hdma_uart5_rx,DMA_IT_TC);
 800a308:	4b2a      	ldr	r3, [pc, #168]	; (800a3b4 <IR_send_AT_CMD+0xf0>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a29      	ldr	r2, [pc, #164]	; (800a3b4 <IR_send_AT_CMD+0xf0>)
 800a30e:	6812      	ldr	r2, [r2, #0]
 800a310:	6812      	ldr	r2, [r2, #0]
 800a312:	f042 0202 	orr.w	r2, r2, #2
 800a316:	601a      	str	r2, [r3, #0]
	if(__HAL_UART_GET_FLAG(&huart5,UART_FLAG_IDLE))
 800a318:	4b25      	ldr	r3, [pc, #148]	; (800a3b0 <IR_send_AT_CMD+0xec>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	69db      	ldr	r3, [r3, #28]
 800a31e:	f003 0310 	and.w	r3, r3, #16
 800a322:	2b10      	cmp	r3, #16
 800a324:	d103      	bne.n	800a32e <IR_send_AT_CMD+0x6a>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart5);
 800a326:	4b22      	ldr	r3, [pc, #136]	; (800a3b0 <IR_send_AT_CMD+0xec>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	2210      	movs	r2, #16
 800a32c:	621a      	str	r2, [r3, #32]
	}
	__HAL_UART_ENABLE_IT(&huart5,UART_IT_IDLE);
 800a32e:	4b20      	ldr	r3, [pc, #128]	; (800a3b0 <IR_send_AT_CMD+0xec>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a1f      	ldr	r2, [pc, #124]	; (800a3b0 <IR_send_AT_CMD+0xec>)
 800a334:	6812      	ldr	r2, [r2, #0]
 800a336:	6812      	ldr	r2, [r2, #0]
 800a338:	f042 0210 	orr.w	r2, r2, #16
 800a33c:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart5,IR_RX_Buffer,RX_BUFFER_SIZE);
 800a33e:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800a342:	491d      	ldr	r1, [pc, #116]	; (800a3b8 <IR_send_AT_CMD+0xf4>)
 800a344:	481a      	ldr	r0, [pc, #104]	; (800a3b0 <IR_send_AT_CMD+0xec>)
 800a346:	f7fc fcaf 	bl	8006ca8 <HAL_UART_Receive_DMA>
	__HAL_TIM_ENABLE_IT(&htim3,TIM_IT_CC1);
 800a34a:	4b1c      	ldr	r3, [pc, #112]	; (800a3bc <IR_send_AT_CMD+0xf8>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a1b      	ldr	r2, [pc, #108]	; (800a3bc <IR_send_AT_CMD+0xf8>)
 800a350:	6812      	ldr	r2, [r2, #0]
 800a352:	68d2      	ldr	r2, [r2, #12]
 800a354:	f042 0202 	orr.w	r2, r2, #2
 800a358:	60da      	str	r2, [r3, #12]
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 800a35a:	2100      	movs	r1, #0
 800a35c:	4817      	ldr	r0, [pc, #92]	; (800a3bc <IR_send_AT_CMD+0xf8>)
 800a35e:	f7fa fe31 	bl	8004fc4 <HAL_TIM_OC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 800a362:	4816      	ldr	r0, [pc, #88]	; (800a3bc <IR_send_AT_CMD+0xf8>)
 800a364:	f7fa fda6 	bl	8004eb4 <HAL_TIM_Base_Start_IT>
	while(IR_RX_Flag == RESET);
 800a368:	bf00      	nop
 800a36a:	4b15      	ldr	r3, [pc, #84]	; (800a3c0 <IR_send_AT_CMD+0xfc>)
 800a36c:	f993 3000 	ldrsb.w	r3, [r3]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d0fa      	beq.n	800a36a <IR_send_AT_CMD+0xa6>

	if(IR_RX_Flag == -2)
 800a374:	4b12      	ldr	r3, [pc, #72]	; (800a3c0 <IR_send_AT_CMD+0xfc>)
 800a376:	f993 3000 	ldrsb.w	r3, [r3]
 800a37a:	f113 0f02 	cmn.w	r3, #2
 800a37e:	d101      	bne.n	800a384 <IR_send_AT_CMD+0xc0>
	{
		return IR_Rx_Timeout;
 800a380:	2305      	movs	r3, #5
 800a382:	e00b      	b.n	800a39c <IR_send_AT_CMD+0xd8>
	}if(IR_RX_Flag == -1)
 800a384:	4b0e      	ldr	r3, [pc, #56]	; (800a3c0 <IR_send_AT_CMD+0xfc>)
 800a386:	f993 3000 	ldrsb.w	r3, [r3]
 800a38a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a38e:	d101      	bne.n	800a394 <IR_send_AT_CMD+0xd0>
	{
		return IR_Rx_Error;
 800a390:	2302      	movs	r3, #2
 800a392:	e003      	b.n	800a39c <IR_send_AT_CMD+0xd8>
	}
	IR_RX_Flag = 0;
 800a394:	4b0a      	ldr	r3, [pc, #40]	; (800a3c0 <IR_send_AT_CMD+0xfc>)
 800a396:	2200      	movs	r2, #0
 800a398:	701a      	strb	r2, [r3, #0]
	return IR_OK;
 800a39a:	2300      	movs	r3, #0
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3710      	adds	r7, #16
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	200035fd 	.word	0x200035fd
 800a3a8:	200035b4 	.word	0x200035b4
 800a3ac:	200023c0 	.word	0x200023c0
 800a3b0:	20003600 	.word	0x20003600
 800a3b4:	200036d0 	.word	0x200036d0
 800a3b8:	20002bc0 	.word	0x20002bc0
 800a3bc:	200035b8 	.word	0x200035b8
 800a3c0:	200036cc 	.word	0x200036cc

0800a3c4 <IR_start_SBD_Session>:

//======================= 7. Transmit/Recieve Function Definition ==================================

IR_Status_t IR_start_SBD_Session(SBDX_Status_t* sbd)
{
 800a3c4:	b590      	push	{r4, r7, lr}
 800a3c6:	b08f      	sub	sp, #60	; 0x3c
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
	//increase prescaler to lengthen timeout
	htim3.Instance->PSC = 5;
 800a3cc:	4b74      	ldr	r3, [pc, #464]	; (800a5a0 <IR_start_SBD_Session+0x1dc>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	2205      	movs	r2, #5
 800a3d2:	629a      	str	r2, [r3, #40]	; 0x28
	Session_Flag = SBDIX;
 800a3d4:	4b73      	ldr	r3, [pc, #460]	; (800a5a4 <IR_start_SBD_Session+0x1e0>)
 800a3d6:	2202      	movs	r2, #2
 800a3d8:	701a      	strb	r2, [r3, #0]
	char* cmd = "AT+SBDIX\r";
 800a3da:	4b73      	ldr	r3, [pc, #460]	; (800a5a8 <IR_start_SBD_Session+0x1e4>)
 800a3dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	int size = strlen(cmd);
 800a3de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3e0:	f7f5 ff00 	bl	80001e4 <strlen>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	62bb      	str	r3, [r7, #40]	; 0x28
		memcpy(IR_TX_Buffer,cmd,size);
 800a3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a3ee:	486f      	ldr	r0, [pc, #444]	; (800a5ac <IR_start_SBD_Session+0x1e8>)
 800a3f0:	f002 ffb0 	bl	800d354 <memcpy>
		if(HAL_UART_Transmit(&huart5,IR_TX_Buffer,size,100) != HAL_OK)
 800a3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f6:	b29a      	uxth	r2, r3
 800a3f8:	2364      	movs	r3, #100	; 0x64
 800a3fa:	496c      	ldr	r1, [pc, #432]	; (800a5ac <IR_start_SBD_Session+0x1e8>)
 800a3fc:	486c      	ldr	r0, [pc, #432]	; (800a5b0 <IR_start_SBD_Session+0x1ec>)
 800a3fe:	f7fc fa77 	bl	80068f0 <HAL_UART_Transmit>
 800a402:	4603      	mov	r3, r0
 800a404:	2b00      	cmp	r3, #0
 800a406:	d001      	beq.n	800a40c <IR_start_SBD_Session+0x48>
		{
			return IR_Tx_Error;
 800a408:	2303      	movs	r3, #3
 800a40a:	e0c5      	b.n	800a598 <IR_start_SBD_Session+0x1d4>
		}
		__HAL_DMA_ENABLE_IT(&hdma_uart5_rx,DMA_IT_TC);
 800a40c:	4b69      	ldr	r3, [pc, #420]	; (800a5b4 <IR_start_SBD_Session+0x1f0>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4a68      	ldr	r2, [pc, #416]	; (800a5b4 <IR_start_SBD_Session+0x1f0>)
 800a412:	6812      	ldr	r2, [r2, #0]
 800a414:	6812      	ldr	r2, [r2, #0]
 800a416:	f042 0202 	orr.w	r2, r2, #2
 800a41a:	601a      	str	r2, [r3, #0]
		if(__HAL_UART_GET_FLAG(&huart5,UART_FLAG_IDLE))
 800a41c:	4b64      	ldr	r3, [pc, #400]	; (800a5b0 <IR_start_SBD_Session+0x1ec>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	69db      	ldr	r3, [r3, #28]
 800a422:	f003 0310 	and.w	r3, r3, #16
 800a426:	2b10      	cmp	r3, #16
 800a428:	d103      	bne.n	800a432 <IR_start_SBD_Session+0x6e>
		{
			__HAL_UART_CLEAR_IDLEFLAG(&huart5);
 800a42a:	4b61      	ldr	r3, [pc, #388]	; (800a5b0 <IR_start_SBD_Session+0x1ec>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	2210      	movs	r2, #16
 800a430:	621a      	str	r2, [r3, #32]
		}
		__HAL_UART_ENABLE_IT(&huart5,UART_IT_IDLE);
 800a432:	4b5f      	ldr	r3, [pc, #380]	; (800a5b0 <IR_start_SBD_Session+0x1ec>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a5e      	ldr	r2, [pc, #376]	; (800a5b0 <IR_start_SBD_Session+0x1ec>)
 800a438:	6812      	ldr	r2, [r2, #0]
 800a43a:	6812      	ldr	r2, [r2, #0]
 800a43c:	f042 0210 	orr.w	r2, r2, #16
 800a440:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart5,IR_RX_Buffer,RX_BUFFER_SIZE);
 800a442:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800a446:	495c      	ldr	r1, [pc, #368]	; (800a5b8 <IR_start_SBD_Session+0x1f4>)
 800a448:	4859      	ldr	r0, [pc, #356]	; (800a5b0 <IR_start_SBD_Session+0x1ec>)
 800a44a:	f7fc fc2d 	bl	8006ca8 <HAL_UART_Receive_DMA>
		__HAL_TIM_DISABLE_IT(&htim3,TIM_IT_CC1);
 800a44e:	4b54      	ldr	r3, [pc, #336]	; (800a5a0 <IR_start_SBD_Session+0x1dc>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4a53      	ldr	r2, [pc, #332]	; (800a5a0 <IR_start_SBD_Session+0x1dc>)
 800a454:	6812      	ldr	r2, [r2, #0]
 800a456:	68d2      	ldr	r2, [r2, #12]
 800a458:	f022 0202 	bic.w	r2, r2, #2
 800a45c:	60da      	str	r2, [r3, #12]
		__HAL_TIM_ENABLE_IT(&htim3,TIM_IT_UPDATE);
 800a45e:	4b50      	ldr	r3, [pc, #320]	; (800a5a0 <IR_start_SBD_Session+0x1dc>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a4f      	ldr	r2, [pc, #316]	; (800a5a0 <IR_start_SBD_Session+0x1dc>)
 800a464:	6812      	ldr	r2, [r2, #0]
 800a466:	68d2      	ldr	r2, [r2, #12]
 800a468:	f042 0201 	orr.w	r2, r2, #1
 800a46c:	60da      	str	r2, [r3, #12]
		HAL_NVIC_ClearPendingIRQ(TIM3_IRQn);
 800a46e:	201d      	movs	r0, #29
 800a470:	f7f6 ffb5 	bl	80013de <HAL_NVIC_ClearPendingIRQ>
		__HAL_TIM_ENABLE(&htim3);
 800a474:	4b4a      	ldr	r3, [pc, #296]	; (800a5a0 <IR_start_SBD_Session+0x1dc>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a49      	ldr	r2, [pc, #292]	; (800a5a0 <IR_start_SBD_Session+0x1dc>)
 800a47a:	6812      	ldr	r2, [r2, #0]
 800a47c:	6812      	ldr	r2, [r2, #0]
 800a47e:	f042 0201 	orr.w	r2, r2, #1
 800a482:	601a      	str	r2, [r3, #0]
		while(IR_RX_Flag == RESET);
 800a484:	bf00      	nop
 800a486:	4b4d      	ldr	r3, [pc, #308]	; (800a5bc <IR_start_SBD_Session+0x1f8>)
 800a488:	f993 3000 	ldrsb.w	r3, [r3]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d0fa      	beq.n	800a486 <IR_start_SBD_Session+0xc2>
		if(IR_RX_Flag == -2)
 800a490:	4b4a      	ldr	r3, [pc, #296]	; (800a5bc <IR_start_SBD_Session+0x1f8>)
 800a492:	f993 3000 	ldrsb.w	r3, [r3]
 800a496:	f113 0f02 	cmn.w	r3, #2
 800a49a:	d106      	bne.n	800a4aa <IR_start_SBD_Session+0xe6>
		{
			IR_Clear_Buffer(RM_Buffer,RM_BUFFER_SIZE);
 800a49c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a4a0:	4847      	ldr	r0, [pc, #284]	; (800a5c0 <IR_start_SBD_Session+0x1fc>)
 800a4a2:	f7ff fe3b 	bl	800a11c <IR_Clear_Buffer>
			return IR_Rx_Timeout;
 800a4a6:	2305      	movs	r3, #5
 800a4a8:	e076      	b.n	800a598 <IR_start_SBD_Session+0x1d4>
		}if(IR_RX_Flag == -1)
 800a4aa:	4b44      	ldr	r3, [pc, #272]	; (800a5bc <IR_start_SBD_Session+0x1f8>)
 800a4ac:	f993 3000 	ldrsb.w	r3, [r3]
 800a4b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4b4:	d106      	bne.n	800a4c4 <IR_start_SBD_Session+0x100>
		{
			IR_Clear_Buffer(RM_Buffer,RM_BUFFER_SIZE);
 800a4b6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a4ba:	4841      	ldr	r0, [pc, #260]	; (800a5c0 <IR_start_SBD_Session+0x1fc>)
 800a4bc:	f7ff fe2e 	bl	800a11c <IR_Clear_Buffer>
			return IR_Rx_Error;
 800a4c0:	2302      	movs	r3, #2
 800a4c2:	e069      	b.n	800a598 <IR_start_SBD_Session+0x1d4>
		}
		IR_RX_Flag = RESET;
 800a4c4:	4b3d      	ldr	r3, [pc, #244]	; (800a5bc <IR_start_SBD_Session+0x1f8>)
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	701a      	strb	r2, [r3, #0]
		//decode SBD Message
		char* status = strtok((char*)&RM_Buffer[2],"\r\n");
 800a4ca:	493e      	ldr	r1, [pc, #248]	; (800a5c4 <IR_start_SBD_Session+0x200>)
 800a4cc:	483e      	ldr	r0, [pc, #248]	; (800a5c8 <IR_start_SBD_Session+0x204>)
 800a4ce:	f004 f97d 	bl	800e7cc <strtok>
 800a4d2:	6278      	str	r0, [r7, #36]	; 0x24
		char* msg = strtok(NULL,"\r\n");
 800a4d4:	493b      	ldr	r1, [pc, #236]	; (800a5c4 <IR_start_SBD_Session+0x200>)
 800a4d6:	2000      	movs	r0, #0
 800a4d8:	f004 f978 	bl	800e7cc <strtok>
 800a4dc:	6238      	str	r0, [r7, #32]
		if(strcmp(msg,"OK") != 0)
 800a4de:	493b      	ldr	r1, [pc, #236]	; (800a5cc <IR_start_SBD_Session+0x208>)
 800a4e0:	6a38      	ldr	r0, [r7, #32]
 800a4e2:	f7f5 fe75 	bl	80001d0 <strcmp>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d006      	beq.n	800a4fa <IR_start_SBD_Session+0x136>
		{
			IR_Clear_Buffer(RM_Buffer,RM_BUFFER_SIZE);
 800a4ec:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a4f0:	4833      	ldr	r0, [pc, #204]	; (800a5c0 <IR_start_SBD_Session+0x1fc>)
 800a4f2:	f7ff fe13 	bl	800a11c <IR_Clear_Buffer>
			return IR_SBDIX_SESSION_ERROR;
 800a4f6:	230f      	movs	r3, #15
 800a4f8:	e04e      	b.n	800a598 <IR_start_SBD_Session+0x1d4>
		}
		char* temp = strtok(&status[7],", ");
 800a4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fc:	3307      	adds	r3, #7
 800a4fe:	4934      	ldr	r1, [pc, #208]	; (800a5d0 <IR_start_SBD_Session+0x20c>)
 800a500:	4618      	mov	r0, r3
 800a502:	f004 f963 	bl	800e7cc <strtok>
 800a506:	6378      	str	r0, [r7, #52]	; 0x34
		int temp_sbd[6] = {atoi(temp),0};
 800a508:	f107 0308 	add.w	r3, r7, #8
 800a50c:	2200      	movs	r2, #0
 800a50e:	601a      	str	r2, [r3, #0]
 800a510:	605a      	str	r2, [r3, #4]
 800a512:	609a      	str	r2, [r3, #8]
 800a514:	60da      	str	r2, [r3, #12]
 800a516:	611a      	str	r2, [r3, #16]
 800a518:	615a      	str	r2, [r3, #20]
 800a51a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a51c:	f002 fbd7 	bl	800ccce <atoi>
 800a520:	4603      	mov	r3, r0
 800a522:	60bb      	str	r3, [r7, #8]
		int count = 1;
 800a524:	2301      	movs	r3, #1
 800a526:	633b      	str	r3, [r7, #48]	; 0x30
		while(temp != NULL)
 800a528:	e011      	b.n	800a54e <IR_start_SBD_Session+0x18a>
		{
			temp = strtok(NULL, ", ");
 800a52a:	4929      	ldr	r1, [pc, #164]	; (800a5d0 <IR_start_SBD_Session+0x20c>)
 800a52c:	2000      	movs	r0, #0
 800a52e:	f004 f94d 	bl	800e7cc <strtok>
 800a532:	6378      	str	r0, [r7, #52]	; 0x34
			temp_sbd[count++] = atoi(temp);
 800a534:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800a536:	1c63      	adds	r3, r4, #1
 800a538:	633b      	str	r3, [r7, #48]	; 0x30
 800a53a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a53c:	f002 fbc7 	bl	800ccce <atoi>
 800a540:	4602      	mov	r2, r0
 800a542:	00a3      	lsls	r3, r4, #2
 800a544:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800a548:	440b      	add	r3, r1
 800a54a:	f843 2c30 	str.w	r2, [r3, #-48]
		while(temp != NULL)
 800a54e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a550:	2b00      	cmp	r3, #0
 800a552:	d1ea      	bne.n	800a52a <IR_start_SBD_Session+0x166>
		}
		sbd->MO_Status= temp_sbd[0];
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	b2da      	uxtb	r2, r3
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	701a      	strb	r2, [r3, #0]
		sbd->MO_MSN = temp_sbd[1];
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	461a      	mov	r2, r3
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	605a      	str	r2, [r3, #4]
		sbd->MT_Status = temp_sbd[2];
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	b2da      	uxtb	r2, r3
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	721a      	strb	r2, [r3, #8]
		sbd->MT_MSN = temp_sbd[3];
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	461a      	mov	r2, r3
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	60da      	str	r2, [r3, #12]
		sbd->MT_length = temp_sbd[4];
 800a574:	69bb      	ldr	r3, [r7, #24]
 800a576:	461a      	mov	r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	611a      	str	r2, [r3, #16]
		sbd->MT_Queued = temp_sbd[5];
 800a57c:	69fb      	ldr	r3, [r7, #28]
 800a57e:	461a      	mov	r2, r3
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	615a      	str	r2, [r3, #20]
		//reset prescaler
		htim3.Instance->PSC = 0;
 800a584:	4b06      	ldr	r3, [pc, #24]	; (800a5a0 <IR_start_SBD_Session+0x1dc>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2200      	movs	r2, #0
 800a58a:	629a      	str	r2, [r3, #40]	; 0x28
		IR_Clear_Buffer(RM_Buffer,RM_BUFFER_SIZE);
 800a58c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a590:	480b      	ldr	r0, [pc, #44]	; (800a5c0 <IR_start_SBD_Session+0x1fc>)
 800a592:	f7ff fdc3 	bl	800a11c <IR_Clear_Buffer>
		return IR_OK;
 800a596:	2300      	movs	r3, #0

}
 800a598:	4618      	mov	r0, r3
 800a59a:	373c      	adds	r7, #60	; 0x3c
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd90      	pop	{r4, r7, pc}
 800a5a0:	200035b8 	.word	0x200035b8
 800a5a4:	200035fd 	.word	0x200035fd
 800a5a8:	08014ee8 	.word	0x08014ee8
 800a5ac:	200023c0 	.word	0x200023c0
 800a5b0:	20003600 	.word	0x20003600
 800a5b4:	200036d0 	.word	0x200036d0
 800a5b8:	20002bc0 	.word	0x20002bc0
 800a5bc:	200036cc 	.word	0x200036cc
 800a5c0:	200033c0 	.word	0x200033c0
 800a5c4:	08014ee4 	.word	0x08014ee4
 800a5c8:	200033c2 	.word	0x200033c2
 800a5cc:	08014ed0 	.word	0x08014ed0
 800a5d0:	08014ef4 	.word	0x08014ef4

0800a5d4 <IR_send_Bin_String>:

IR_Status_t IR_send_Bin_String(uint8_t* bin_string,uint32_t len)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b086      	sub	sp, #24
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]

	  char* msg;
	  if(IR_send_AT_CMD("AT\r")== IR_OK)
 800a5de:	4862      	ldr	r0, [pc, #392]	; (800a768 <IR_send_Bin_String+0x194>)
 800a5e0:	f7ff fe70 	bl	800a2c4 <IR_send_AT_CMD>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d10d      	bne.n	800a606 <IR_send_Bin_String+0x32>
	  {
		  msg = strtok((char*)(&RM_Buffer[2]),"\r");
 800a5ea:	4960      	ldr	r1, [pc, #384]	; (800a76c <IR_send_Bin_String+0x198>)
 800a5ec:	4860      	ldr	r0, [pc, #384]	; (800a770 <IR_send_Bin_String+0x19c>)
 800a5ee:	f004 f8ed 	bl	800e7cc <strtok>
 800a5f2:	6178      	str	r0, [r7, #20]
		  if(strcmp(msg,(char*)"OK") != 0)
 800a5f4:	495f      	ldr	r1, [pc, #380]	; (800a774 <IR_send_Bin_String+0x1a0>)
 800a5f6:	6978      	ldr	r0, [r7, #20]
 800a5f8:	f7f5 fdea 	bl	80001d0 <strcmp>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d003      	beq.n	800a60a <IR_send_Bin_String+0x36>
		  {
		    return IR_Ack_Error;
 800a602:	2307      	movs	r3, #7
 800a604:	e0ab      	b.n	800a75e <IR_send_Bin_String+0x18a>
		  }
	  }else
	  {
		  return IR_Ack_Error;
 800a606:	2307      	movs	r3, #7
 800a608:	e0a9      	b.n	800a75e <IR_send_Bin_String+0x18a>
	  }
	  //analyse message
	  IR_Clear_Buffer(RM_Buffer,RM_BUFFER_SIZE);
 800a60a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a60e:	485a      	ldr	r0, [pc, #360]	; (800a778 <IR_send_Bin_String+0x1a4>)
 800a610:	f7ff fd84 	bl	800a11c <IR_Clear_Buffer>
	  if( IR_send_AT_CMD("AT&K0\r") == IR_OK)
 800a614:	4859      	ldr	r0, [pc, #356]	; (800a77c <IR_send_Bin_String+0x1a8>)
 800a616:	f7ff fe55 	bl	800a2c4 <IR_send_AT_CMD>
 800a61a:	4603      	mov	r3, r0
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d10d      	bne.n	800a63c <IR_send_Bin_String+0x68>
	  {
			msg = strtok((char*)(&RM_Buffer[2]),"\r");
 800a620:	4952      	ldr	r1, [pc, #328]	; (800a76c <IR_send_Bin_String+0x198>)
 800a622:	4853      	ldr	r0, [pc, #332]	; (800a770 <IR_send_Bin_String+0x19c>)
 800a624:	f004 f8d2 	bl	800e7cc <strtok>
 800a628:	6178      	str	r0, [r7, #20]
			if(strcmp(msg,(char*)"OK") != 0)
 800a62a:	4952      	ldr	r1, [pc, #328]	; (800a774 <IR_send_Bin_String+0x1a0>)
 800a62c:	6978      	ldr	r0, [r7, #20]
 800a62e:	f7f5 fdcf 	bl	80001d0 <strcmp>
 800a632:	4603      	mov	r3, r0
 800a634:	2b00      	cmp	r3, #0
 800a636:	d003      	beq.n	800a640 <IR_send_Bin_String+0x6c>
			{
				return IR_CFG_Error;
 800a638:	2308      	movs	r3, #8
 800a63a:	e090      	b.n	800a75e <IR_send_Bin_String+0x18a>
			}
	  }
	  else
	  {
		return IR_CFG_Error;
 800a63c:	2308      	movs	r3, #8
 800a63e:	e08e      	b.n	800a75e <IR_send_Bin_String+0x18a>
	  }
	  IR_Clear_Buffer(RM_Buffer,RM_BUFFER_SIZE);
 800a640:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a644:	484c      	ldr	r0, [pc, #304]	; (800a778 <IR_send_Bin_String+0x1a4>)
 800a646:	f7ff fd69 	bl	800a11c <IR_Clear_Buffer>
	  //prepare Iridium for binary message reception
	  sprintf((char*)IR_TX_Buffer,"AT+SBDWB=%lu\r",len);
 800a64a:	683a      	ldr	r2, [r7, #0]
 800a64c:	494c      	ldr	r1, [pc, #304]	; (800a780 <IR_send_Bin_String+0x1ac>)
 800a64e:	484d      	ldr	r0, [pc, #308]	; (800a784 <IR_send_Bin_String+0x1b0>)
 800a650:	f003 fa60 	bl	800db14 <sprintf>
	  if(IR_send_AT_CMD((char*)IR_TX_Buffer) == IR_OK)
 800a654:	484b      	ldr	r0, [pc, #300]	; (800a784 <IR_send_Bin_String+0x1b0>)
 800a656:	f7ff fe35 	bl	800a2c4 <IR_send_AT_CMD>
 800a65a:	4603      	mov	r3, r0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d112      	bne.n	800a686 <IR_send_Bin_String+0xb2>
	  {
		  IR_Clear_Buffer(IR_TX_Buffer,TX_BUFFER_SIZE);
 800a660:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a664:	4847      	ldr	r0, [pc, #284]	; (800a784 <IR_send_Bin_String+0x1b0>)
 800a666:	f7ff fd59 	bl	800a11c <IR_Clear_Buffer>
		  msg = strtok((char*)(&RM_Buffer[2]),"\r");
 800a66a:	4940      	ldr	r1, [pc, #256]	; (800a76c <IR_send_Bin_String+0x198>)
 800a66c:	4840      	ldr	r0, [pc, #256]	; (800a770 <IR_send_Bin_String+0x19c>)
 800a66e:	f004 f8ad 	bl	800e7cc <strtok>
 800a672:	6178      	str	r0, [r7, #20]
		  if(strcmp(msg,(char*)"READY") != 0)
 800a674:	4944      	ldr	r1, [pc, #272]	; (800a788 <IR_send_Bin_String+0x1b4>)
 800a676:	6978      	ldr	r0, [r7, #20]
 800a678:	f7f5 fdaa 	bl	80001d0 <strcmp>
 800a67c:	4603      	mov	r3, r0
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d001      	beq.n	800a686 <IR_send_Bin_String+0xb2>
		  {
		  	return IR_CFG_Error;
 800a682:	2308      	movs	r3, #8
 800a684:	e06b      	b.n	800a75e <IR_send_Bin_String+0x18a>
		  }
	  }
	  IR_Clear_Buffer(RM_Buffer,RM_BUFFER_SIZE);
 800a686:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a68a:	483b      	ldr	r0, [pc, #236]	; (800a778 <IR_send_Bin_String+0x1a4>)
 800a68c:	f7ff fd46 	bl	800a11c <IR_Clear_Buffer>
	  //create a binary message complete with checksum
	  memcpy(IR_TX_Buffer,bin_string,len);
 800a690:	683a      	ldr	r2, [r7, #0]
 800a692:	6879      	ldr	r1, [r7, #4]
 800a694:	483b      	ldr	r0, [pc, #236]	; (800a784 <IR_send_Bin_String+0x1b0>)
 800a696:	f002 fe5d 	bl	800d354 <memcpy>
	  uint16_t temp = IR_Calculate_Checksum(bin_string,len);
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	b2db      	uxtb	r3, r3
 800a69e:	4619      	mov	r1, r3
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f7ff fd49 	bl	800a138 <IR_Calculate_Checksum>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	827b      	strh	r3, [r7, #18]
	  uint8_t check_sum[3]  = {(uint8_t)((temp&0xFF00)>>8),(uint8_t)temp&0xFF,0x0d};
 800a6aa:	8a7b      	ldrh	r3, [r7, #18]
 800a6ac:	0a1b      	lsrs	r3, r3, #8
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	b2db      	uxtb	r3, r3
 800a6b2:	733b      	strb	r3, [r7, #12]
 800a6b4:	8a7b      	ldrh	r3, [r7, #18]
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	737b      	strb	r3, [r7, #13]
 800a6ba:	230d      	movs	r3, #13
 800a6bc:	73bb      	strb	r3, [r7, #14]
	  memcpy(&IR_TX_Buffer[len],check_sum,3);
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	4a30      	ldr	r2, [pc, #192]	; (800a784 <IR_send_Bin_String+0x1b0>)
 800a6c2:	4413      	add	r3, r2
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	f107 030c 	add.w	r3, r7, #12
 800a6ca:	8819      	ldrh	r1, [r3, #0]
 800a6cc:	789b      	ldrb	r3, [r3, #2]
 800a6ce:	8011      	strh	r1, [r2, #0]
 800a6d0:	7093      	strb	r3, [r2, #2]
	  //upload to message buffer
	  Session_Flag = SBDWB;
 800a6d2:	4b2e      	ldr	r3, [pc, #184]	; (800a78c <IR_send_Bin_String+0x1b8>)
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	701a      	strb	r2, [r3, #0]
	  IR_Bin_Message_Length = len+3;
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	3303      	adds	r3, #3
 800a6dc:	461a      	mov	r2, r3
 800a6de:	4b2c      	ldr	r3, [pc, #176]	; (800a790 <IR_send_Bin_String+0x1bc>)
 800a6e0:	601a      	str	r2, [r3, #0]
	  IR_send_AT_CMD((char*)IR_TX_Buffer);
 800a6e2:	4828      	ldr	r0, [pc, #160]	; (800a784 <IR_send_Bin_String+0x1b0>)
 800a6e4:	f7ff fdee 	bl	800a2c4 <IR_send_AT_CMD>
	  Session_Flag = NONE;
 800a6e8:	4b28      	ldr	r3, [pc, #160]	; (800a78c <IR_send_Bin_String+0x1b8>)
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	701a      	strb	r2, [r3, #0]
	  msg = strtok((char*)(&RM_Buffer[2]),"\r\n");
 800a6ee:	4929      	ldr	r1, [pc, #164]	; (800a794 <IR_send_Bin_String+0x1c0>)
 800a6f0:	481f      	ldr	r0, [pc, #124]	; (800a770 <IR_send_Bin_String+0x19c>)
 800a6f2:	f004 f86b 	bl	800e7cc <strtok>
 800a6f6:	6178      	str	r0, [r7, #20]
	  int8_t ret_val = *(msg) -48;
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	3b30      	subs	r3, #48	; 0x30
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	747b      	strb	r3, [r7, #17]
	  msg = strtok(NULL,"\r\n");
 800a702:	4924      	ldr	r1, [pc, #144]	; (800a794 <IR_send_Bin_String+0x1c0>)
 800a704:	2000      	movs	r0, #0
 800a706:	f004 f861 	bl	800e7cc <strtok>
 800a70a:	6178      	str	r0, [r7, #20]
	  if(ret_val < 0 || ret_val > 9)
 800a70c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800a710:	2b00      	cmp	r3, #0
 800a712:	db03      	blt.n	800a71c <IR_send_Bin_String+0x148>
 800a714:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800a718:	2b09      	cmp	r3, #9
 800a71a:	dd01      	ble.n	800a720 <IR_send_Bin_String+0x14c>
	  {
		  return IR_SBDWB_STATUS_ERROR;
 800a71c:	230b      	movs	r3, #11
 800a71e:	e01e      	b.n	800a75e <IR_send_Bin_String+0x18a>
	  }
	  if(strcmp(msg,(char*)"OK") == 0)
 800a720:	4914      	ldr	r1, [pc, #80]	; (800a774 <IR_send_Bin_String+0x1a0>)
 800a722:	6978      	ldr	r0, [r7, #20]
 800a724:	f7f5 fd54 	bl	80001d0 <strcmp>
 800a728:	4603      	mov	r3, r0
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d116      	bne.n	800a75c <IR_send_Bin_String+0x188>
	 {
		  switch(ret_val)
 800a72e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800a732:	2b03      	cmp	r3, #3
 800a734:	d812      	bhi.n	800a75c <IR_send_Bin_String+0x188>
 800a736:	a201      	add	r2, pc, #4	; (adr r2, 800a73c <IR_send_Bin_String+0x168>)
 800a738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a73c:	0800a74d 	.word	0x0800a74d
 800a740:	0800a751 	.word	0x0800a751
 800a744:	0800a755 	.word	0x0800a755
 800a748:	0800a759 	.word	0x0800a759
	  	  {
	  	  	  case 0:
	  		  	  return IR_MSG_UPLOAD_OK;
 800a74c:	230a      	movs	r3, #10
 800a74e:	e006      	b.n	800a75e <IR_send_Bin_String+0x18a>
	  	  	  case 1:
	  		  	  return IR_SBDWB_TIMEOUT;
 800a750:	230c      	movs	r3, #12
 800a752:	e004      	b.n	800a75e <IR_send_Bin_String+0x18a>
	  	  	  case 2:
	  		  	  return IR_SBDWB_CHECKSUM_ERROR;
 800a754:	230e      	movs	r3, #14
 800a756:	e002      	b.n	800a75e <IR_send_Bin_String+0x18a>
	  	  	  case 3:
	  		  	  return IR_SBDWB_MSGOVERRUN_ERROR;
 800a758:	230d      	movs	r3, #13
 800a75a:	e000      	b.n	800a75e <IR_send_Bin_String+0x18a>
	  	  }
	 	 }
	  //decode return pack
	  //return status

	  return IR_MSG_UPLOAD_ERROR;
 800a75c:	2309      	movs	r3, #9
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3718      	adds	r7, #24
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
 800a766:	bf00      	nop
 800a768:	08014ec8 	.word	0x08014ec8
 800a76c:	08014ecc 	.word	0x08014ecc
 800a770:	200033c2 	.word	0x200033c2
 800a774:	08014ed0 	.word	0x08014ed0
 800a778:	200033c0 	.word	0x200033c0
 800a77c:	08014ed4 	.word	0x08014ed4
 800a780:	08014ef8 	.word	0x08014ef8
 800a784:	200023c0 	.word	0x200023c0
 800a788:	08014f08 	.word	0x08014f08
 800a78c:	200035fd 	.word	0x200035fd
 800a790:	200035b4 	.word	0x200035b4
 800a794:	08014ee4 	.word	0x08014ee4

0800a798 <IR_recieve_String>:
	}
	  return IR_MSG_UPLOAD_OK;
}

IR_Status_t IR_recieve_String(uint8_t* MSG_Buff,uint32_t MSG_BUFF_SIZE, uint16_t *num_messages)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b08e      	sub	sp, #56	; 0x38
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	60b9      	str	r1, [r7, #8]
 800a7a2:	607a      	str	r2, [r7, #4]
	  char* msg;
	  if(IR_send_AT_CMD("AT\r")== IR_OK)
 800a7a4:	4842      	ldr	r0, [pc, #264]	; (800a8b0 <IR_recieve_String+0x118>)
 800a7a6:	f7ff fd8d 	bl	800a2c4 <IR_send_AT_CMD>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d10d      	bne.n	800a7cc <IR_recieve_String+0x34>
	  {
		  msg = strtok((char*)(&RM_Buffer[2]),"\r");
 800a7b0:	4940      	ldr	r1, [pc, #256]	; (800a8b4 <IR_recieve_String+0x11c>)
 800a7b2:	4841      	ldr	r0, [pc, #260]	; (800a8b8 <IR_recieve_String+0x120>)
 800a7b4:	f004 f80a 	bl	800e7cc <strtok>
 800a7b8:	6378      	str	r0, [r7, #52]	; 0x34
		  if(strcmp(msg,(char*)"OK") != 0)
 800a7ba:	4940      	ldr	r1, [pc, #256]	; (800a8bc <IR_recieve_String+0x124>)
 800a7bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a7be:	f7f5 fd07 	bl	80001d0 <strcmp>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d003      	beq.n	800a7d0 <IR_recieve_String+0x38>
		  {
		    return IR_Ack_Error;
 800a7c8:	2307      	movs	r3, #7
 800a7ca:	e06c      	b.n	800a8a6 <IR_recieve_String+0x10e>
		  }
	  }else
	  {
		  return IR_Ack_Error;
 800a7cc:	2307      	movs	r3, #7
 800a7ce:	e06a      	b.n	800a8a6 <IR_recieve_String+0x10e>
	  }
	  //analyse message
	  IR_Clear_Buffer(RM_Buffer,RM_BUFFER_SIZE);
 800a7d0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a7d4:	483a      	ldr	r0, [pc, #232]	; (800a8c0 <IR_recieve_String+0x128>)
 800a7d6:	f7ff fca1 	bl	800a11c <IR_Clear_Buffer>
	  if( IR_send_AT_CMD("AT&K0\r") == IR_OK)
 800a7da:	483a      	ldr	r0, [pc, #232]	; (800a8c4 <IR_recieve_String+0x12c>)
 800a7dc:	f7ff fd72 	bl	800a2c4 <IR_send_AT_CMD>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d10d      	bne.n	800a802 <IR_recieve_String+0x6a>
	  {
			msg = strtok((char*)(&RM_Buffer[2]),"\r");
 800a7e6:	4933      	ldr	r1, [pc, #204]	; (800a8b4 <IR_recieve_String+0x11c>)
 800a7e8:	4833      	ldr	r0, [pc, #204]	; (800a8b8 <IR_recieve_String+0x120>)
 800a7ea:	f003 ffef 	bl	800e7cc <strtok>
 800a7ee:	6378      	str	r0, [r7, #52]	; 0x34
			if(strcmp(msg,(char*)"OK") != 0)
 800a7f0:	4932      	ldr	r1, [pc, #200]	; (800a8bc <IR_recieve_String+0x124>)
 800a7f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a7f4:	f7f5 fcec 	bl	80001d0 <strcmp>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d003      	beq.n	800a806 <IR_recieve_String+0x6e>
			{
				return IR_CFG_Error;
 800a7fe:	2308      	movs	r3, #8
 800a800:	e051      	b.n	800a8a6 <IR_recieve_String+0x10e>
			}
	  }
	  else
	  {
		return IR_CFG_Error;
 800a802:	2308      	movs	r3, #8
 800a804:	e04f      	b.n	800a8a6 <IR_recieve_String+0x10e>
	  }
	  IR_Clear_Buffer(RM_Buffer,RM_BUFFER_SIZE);
 800a806:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a80a:	482d      	ldr	r0, [pc, #180]	; (800a8c0 <IR_recieve_String+0x128>)
 800a80c:	f7ff fc86 	bl	800a11c <IR_Clear_Buffer>
	SBDX_Status_t sbd;
	IR_Status_t flag = IR_start_SBD_Session(&sbd);
 800a810:	f107 0314 	add.w	r3, r7, #20
 800a814:	4618      	mov	r0, r3
 800a816:	f7ff fdd5 	bl	800a3c4 <IR_start_SBD_Session>
 800a81a:	4603      	mov	r3, r0
 800a81c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	if(flag != IR_OK)
 800a820:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a824:	2b00      	cmp	r3, #0
 800a826:	d002      	beq.n	800a82e <IR_recieve_String+0x96>
	{
		return flag;
 800a828:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a82c:	e03b      	b.n	800a8a6 <IR_recieve_String+0x10e>
	}
	//check SBDIX return status of mobile Terminated buffer
	switch(sbd.MT_Status)
 800a82e:	7f3b      	ldrb	r3, [r7, #28]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d015      	beq.n	800a860 <IR_recieve_String+0xc8>
 800a834:	2b02      	cmp	r3, #2
 800a836:	d015      	beq.n	800a864 <IR_recieve_String+0xcc>
	case 0:
		return IR_SBDIX_NO_NEW_MESSAGE;
	case 2:
		return IR_SBDIX_MAIL_CHECK_ERROR;
	default:
		break;
 800a838:	bf00      	nop
	}
	// Download Message to your controller
	*num_messages = sbd.MT_Queued;
 800a83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83c:	b29a      	uxth	r2, r3
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	801a      	strh	r2, [r3, #0]
	IR_Clear_Buffer(RM_Buffer,RM_BUFFER_SIZE);
 800a842:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a846:	481e      	ldr	r0, [pc, #120]	; (800a8c0 <IR_recieve_String+0x128>)
 800a848:	f7ff fc68 	bl	800a11c <IR_Clear_Buffer>
	Session_Flag = SBDRT;
 800a84c:	4b1e      	ldr	r3, [pc, #120]	; (800a8c8 <IR_recieve_String+0x130>)
 800a84e:	2203      	movs	r2, #3
 800a850:	701a      	strb	r2, [r3, #0]
	if(IR_send_AT_CMD("AT+SBDRT\r") != IR_OK)
 800a852:	481e      	ldr	r0, [pc, #120]	; (800a8cc <IR_recieve_String+0x134>)
 800a854:	f7ff fd36 	bl	800a2c4 <IR_send_AT_CMD>
 800a858:	4603      	mov	r3, r0
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d006      	beq.n	800a86c <IR_recieve_String+0xd4>
 800a85e:	e003      	b.n	800a868 <IR_recieve_String+0xd0>
		return IR_SBDIX_NO_NEW_MESSAGE;
 800a860:	2310      	movs	r3, #16
 800a862:	e020      	b.n	800a8a6 <IR_recieve_String+0x10e>
		return IR_SBDIX_MAIL_CHECK_ERROR;
 800a864:	2311      	movs	r3, #17
 800a866:	e01e      	b.n	800a8a6 <IR_recieve_String+0x10e>
	{
		return IR_SBDRT_Rx_Error;
 800a868:	2312      	movs	r3, #18
 800a86a:	e01c      	b.n	800a8a6 <IR_recieve_String+0x10e>
	}
	// SBDRT return type : +SBDRT\r\n<msg>\r\n<return_status>
	char* temp = strtok((char*)&RM_Buffer[10],"\r\n");
 800a86c:	4918      	ldr	r1, [pc, #96]	; (800a8d0 <IR_recieve_String+0x138>)
 800a86e:	4819      	ldr	r0, [pc, #100]	; (800a8d4 <IR_recieve_String+0x13c>)
 800a870:	f003 ffac 	bl	800e7cc <strtok>
 800a874:	62f8      	str	r0, [r7, #44]	; 0x2c
	msg = strtok(NULL,"\r\n");
 800a876:	4916      	ldr	r1, [pc, #88]	; (800a8d0 <IR_recieve_String+0x138>)
 800a878:	2000      	movs	r0, #0
 800a87a:	f003 ffa7 	bl	800e7cc <strtok>
 800a87e:	6378      	str	r0, [r7, #52]	; 0x34
	 if(strcmp(msg,(char*)"OK") != 0)
 800a880:	490e      	ldr	r1, [pc, #56]	; (800a8bc <IR_recieve_String+0x124>)
 800a882:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a884:	f7f5 fca4 	bl	80001d0 <strcmp>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d001      	beq.n	800a892 <IR_recieve_String+0xfa>
	 {
		return IR_Ack_Error;
 800a88e:	2307      	movs	r3, #7
 800a890:	e009      	b.n	800a8a6 <IR_recieve_String+0x10e>
	 }
	memcpy(MSG_Buff,temp,strlen(temp));
 800a892:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a894:	f7f5 fca6 	bl	80001e4 <strlen>
 800a898:	4603      	mov	r3, r0
 800a89a:	461a      	mov	r2, r3
 800a89c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a89e:	68f8      	ldr	r0, [r7, #12]
 800a8a0:	f002 fd58 	bl	800d354 <memcpy>
 	return IR_OK;
 800a8a4:	2300      	movs	r3, #0
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3738      	adds	r7, #56	; 0x38
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	08014ec8 	.word	0x08014ec8
 800a8b4:	08014ecc 	.word	0x08014ecc
 800a8b8:	200033c2 	.word	0x200033c2
 800a8bc:	08014ed0 	.word	0x08014ed0
 800a8c0:	200033c0 	.word	0x200033c0
 800a8c4:	08014ed4 	.word	0x08014ed4
 800a8c8:	200035fd 	.word	0x200035fd
 800a8cc:	08014f1c 	.word	0x08014f1c
 800a8d0:	08014ee4 	.word	0x08014ee4
 800a8d4:	200033ca 	.word	0x200033ca

0800a8d8 <DMA_Iridium_Periph_IRQHandler>:

//======================= 8. Handler Function Definition ==================================

void DMA_Iridium_Periph_IRQHandler(UART_HandleTypeDef *huart)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]

	huart->hdmarx->DmaBaseAddress->IFCR |= (DMA_IFCR_CTCIF2|DMA_IFCR_CGIF2);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a8ea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a8ec:	6852      	ldr	r2, [r2, #4]
 800a8ee:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800a8f2:	605a      	str	r2, [r3, #4]
	HAL_TIM_Base_Stop_IT(&htim3);
 800a8f4:	482b      	ldr	r0, [pc, #172]	; (800a9a4 <DMA_Iridium_Periph_IRQHandler+0xcc>)
 800a8f6:	f7fa fb07 	bl	8004f08 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_CC1|TIM_IT_UPDATE);
 800a8fa:	4b2a      	ldr	r3, [pc, #168]	; (800a9a4 <DMA_Iridium_Periph_IRQHandler+0xcc>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f06f 0203 	mvn.w	r2, #3
 800a902:	611a      	str	r2, [r3, #16]

	__HAL_UART_CLEAR_IDLEFLAG(&huart5);
 800a904:	4b28      	ldr	r3, [pc, #160]	; (800a9a8 <DMA_Iridium_Periph_IRQHandler+0xd0>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	2210      	movs	r2, #16
 800a90a:	621a      	str	r2, [r3, #32]
	__HAL_UART_DISABLE_IT(&huart5,UART_IT_IDLE);
 800a90c:	4b26      	ldr	r3, [pc, #152]	; (800a9a8 <DMA_Iridium_Periph_IRQHandler+0xd0>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a25      	ldr	r2, [pc, #148]	; (800a9a8 <DMA_Iridium_Periph_IRQHandler+0xd0>)
 800a912:	6812      	ldr	r2, [r2, #0]
 800a914:	6812      	ldr	r2, [r2, #0]
 800a916:	f022 0210 	bic.w	r2, r2, #16
 800a91a:	601a      	str	r2, [r3, #0]
	__HAL_TIM_DISABLE_IT(&htim3,TIM_IT_CC1);
 800a91c:	4b21      	ldr	r3, [pc, #132]	; (800a9a4 <DMA_Iridium_Periph_IRQHandler+0xcc>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a20      	ldr	r2, [pc, #128]	; (800a9a4 <DMA_Iridium_Periph_IRQHandler+0xcc>)
 800a922:	6812      	ldr	r2, [r2, #0]
 800a924:	68d2      	ldr	r2, [r2, #12]
 800a926:	f022 0202 	bic.w	r2, r2, #2
 800a92a:	60da      	str	r2, [r3, #12]

	if(__HAL_TIM_GET_FLAG(&htim3,TIM_FLAG_CC1))
 800a92c:	4b1d      	ldr	r3, [pc, #116]	; (800a9a4 <DMA_Iridium_Periph_IRQHandler+0xcc>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	691b      	ldr	r3, [r3, #16]
 800a932:	f003 0302 	and.w	r3, r3, #2
 800a936:	2b02      	cmp	r3, #2
 800a938:	d104      	bne.n	800a944 <DMA_Iridium_Periph_IRQHandler+0x6c>
	{
		__HAL_TIM_CLEAR_FLAG(&htim3,TIM_FLAG_CC1);
 800a93a:	4b1a      	ldr	r3, [pc, #104]	; (800a9a4 <DMA_Iridium_Periph_IRQHandler+0xcc>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f06f 0202 	mvn.w	r2, #2
 800a942:	611a      	str	r2, [r3, #16]
	}
	//begin transfer of collected data to memory
    uint8_t* ind = (uint8_t*)strchr((char*)IR_RX_Buffer,'\r')+1;
 800a944:	210d      	movs	r1, #13
 800a946:	4819      	ldr	r0, [pc, #100]	; (800a9ac <DMA_Iridium_Periph_IRQHandler+0xd4>)
 800a948:	f003 f908 	bl	800db5c <strchr>
 800a94c:	4603      	mov	r3, r0
 800a94e:	3301      	adds	r3, #1
 800a950:	60fb      	str	r3, [r7, #12]
	int len = (ind - IR_RX_Buffer)+1; // chope off the \0
 800a952:	68fa      	ldr	r2, [r7, #12]
 800a954:	4b15      	ldr	r3, [pc, #84]	; (800a9ac <DMA_Iridium_Periph_IRQHandler+0xd4>)
 800a956:	f1c3 0301 	rsb	r3, r3, #1
 800a95a:	4413      	add	r3, r2
 800a95c:	60bb      	str	r3, [r7, #8]
	msg_len = IR_length -len-1;
 800a95e:	4b14      	ldr	r3, [pc, #80]	; (800a9b0 <DMA_Iridium_Periph_IRQHandler+0xd8>)
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	1ad3      	subs	r3, r2, r3
 800a966:	3b01      	subs	r3, #1
 800a968:	4a12      	ldr	r2, [pc, #72]	; (800a9b4 <DMA_Iridium_Periph_IRQHandler+0xdc>)
 800a96a:	6013      	str	r3, [r2, #0]
	if(len > 0)
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	dd11      	ble.n	800a996 <DMA_Iridium_Periph_IRQHandler+0xbe>
	{
	   	__HAL_DMA_ENABLE_IT(&hdma_memtomem_dma1_channel2,DMA_IT_TC);
 800a972:	4b11      	ldr	r3, [pc, #68]	; (800a9b8 <DMA_Iridium_Periph_IRQHandler+0xe0>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	4a10      	ldr	r2, [pc, #64]	; (800a9b8 <DMA_Iridium_Periph_IRQHandler+0xe0>)
 800a978:	6812      	ldr	r2, [r2, #0]
 800a97a:	6812      	ldr	r2, [r2, #0]
 800a97c:	f042 0202 	orr.w	r2, r2, #2
 800a980:	601a      	str	r2, [r3, #0]
	   	HAL_DMA_Start(&hdma_memtomem_dma1_channel2,(uint32_t)(&IR_RX_Buffer[len]),(uint32_t)RM_Buffer,msg_len);
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	4a09      	ldr	r2, [pc, #36]	; (800a9ac <DMA_Iridium_Periph_IRQHandler+0xd4>)
 800a986:	4413      	add	r3, r2
 800a988:	4619      	mov	r1, r3
 800a98a:	4a0c      	ldr	r2, [pc, #48]	; (800a9bc <DMA_Iridium_Periph_IRQHandler+0xe4>)
 800a98c:	4b09      	ldr	r3, [pc, #36]	; (800a9b4 <DMA_Iridium_Periph_IRQHandler+0xdc>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4809      	ldr	r0, [pc, #36]	; (800a9b8 <DMA_Iridium_Periph_IRQHandler+0xe0>)
 800a992:	f7f6 fe7d 	bl	8001690 <HAL_DMA_Start>
	}
	IR_TIM_IDLE_Timeout = RESET;
 800a996:	4b0a      	ldr	r3, [pc, #40]	; (800a9c0 <DMA_Iridium_Periph_IRQHandler+0xe8>)
 800a998:	2200      	movs	r2, #0
 800a99a:	701a      	strb	r2, [r3, #0]
}
 800a99c:	bf00      	nop
 800a99e:	3710      	adds	r7, #16
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}
 800a9a4:	200035b8 	.word	0x200035b8
 800a9a8:	20003600 	.word	0x20003600
 800a9ac:	20002bc0 	.word	0x20002bc0
 800a9b0:	200035f8 	.word	0x200035f8
 800a9b4:	20003680 	.word	0x20003680
 800a9b8:	20003684 	.word	0x20003684
 800a9bc:	200033c0 	.word	0x200033c0
 800a9c0:	200035fc 	.word	0x200035fc

0800a9c4 <DMA_Iridium_MEM_IRQHandler>:

void DMA_Iridium_MEM_IRQHandler(DMA_HandleTypeDef *hdma_mem)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b082      	sub	sp, #8
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
	//clear the rx buffer
	IR_Clear_Buffer(IR_RX_Buffer,RX_BUFFER_SIZE);
 800a9cc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a9d0:	482f      	ldr	r0, [pc, #188]	; (800aa90 <DMA_Iridium_MEM_IRQHandler+0xcc>)
 800a9d2:	f7ff fba3 	bl	800a11c <IR_Clear_Buffer>
	msg_len = strlen((char*)RM_Buffer);
 800a9d6:	482f      	ldr	r0, [pc, #188]	; (800aa94 <DMA_Iridium_MEM_IRQHandler+0xd0>)
 800a9d8:	f7f5 fc04 	bl	80001e4 <strlen>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	4b2e      	ldr	r3, [pc, #184]	; (800aa98 <DMA_Iridium_MEM_IRQHandler+0xd4>)
 800a9e0:	601a      	str	r2, [r3, #0]
	//check message to see if valid
	//valid messages follow the format "\r\nMSG_STRING\r\n"
	if((RM_Buffer[0] == '\r') && (RM_Buffer[1] =='\n') &&(RM_Buffer[msg_len - 2] == '\r') && (RM_Buffer[msg_len -1] == '\n' ))
 800a9e2:	4b2c      	ldr	r3, [pc, #176]	; (800aa94 <DMA_Iridium_MEM_IRQHandler+0xd0>)
 800a9e4:	781b      	ldrb	r3, [r3, #0]
 800a9e6:	2b0d      	cmp	r3, #13
 800a9e8:	d115      	bne.n	800aa16 <DMA_Iridium_MEM_IRQHandler+0x52>
 800a9ea:	4b2a      	ldr	r3, [pc, #168]	; (800aa94 <DMA_Iridium_MEM_IRQHandler+0xd0>)
 800a9ec:	785b      	ldrb	r3, [r3, #1]
 800a9ee:	2b0a      	cmp	r3, #10
 800a9f0:	d111      	bne.n	800aa16 <DMA_Iridium_MEM_IRQHandler+0x52>
 800a9f2:	4b29      	ldr	r3, [pc, #164]	; (800aa98 <DMA_Iridium_MEM_IRQHandler+0xd4>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	3b02      	subs	r3, #2
 800a9f8:	4a26      	ldr	r2, [pc, #152]	; (800aa94 <DMA_Iridium_MEM_IRQHandler+0xd0>)
 800a9fa:	5cd3      	ldrb	r3, [r2, r3]
 800a9fc:	2b0d      	cmp	r3, #13
 800a9fe:	d10a      	bne.n	800aa16 <DMA_Iridium_MEM_IRQHandler+0x52>
 800aa00:	4b25      	ldr	r3, [pc, #148]	; (800aa98 <DMA_Iridium_MEM_IRQHandler+0xd4>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	3b01      	subs	r3, #1
 800aa06:	4a23      	ldr	r2, [pc, #140]	; (800aa94 <DMA_Iridium_MEM_IRQHandler+0xd0>)
 800aa08:	5cd3      	ldrb	r3, [r2, r3]
 800aa0a:	2b0a      	cmp	r3, #10
 800aa0c:	d103      	bne.n	800aa16 <DMA_Iridium_MEM_IRQHandler+0x52>
	{
		IR_RX_Flag = SET;
 800aa0e:	4b23      	ldr	r3, [pc, #140]	; (800aa9c <DMA_Iridium_MEM_IRQHandler+0xd8>)
 800aa10:	2201      	movs	r2, #1
 800aa12:	701a      	strb	r2, [r3, #0]
 800aa14:	e002      	b.n	800aa1c <DMA_Iridium_MEM_IRQHandler+0x58>
	}else
	{
		//invalid message returned
		IR_RX_Flag = -1;
 800aa16:	4b21      	ldr	r3, [pc, #132]	; (800aa9c <DMA_Iridium_MEM_IRQHandler+0xd8>)
 800aa18:	22ff      	movs	r2, #255	; 0xff
 800aa1a:	701a      	strb	r2, [r3, #0]
	}
	__HAL_DMA_CLEAR_FLAG(hdma_mem,DMA_FLAG_TC2);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	461a      	mov	r2, r3
 800aa22:	4b1f      	ldr	r3, [pc, #124]	; (800aaa0 <DMA_Iridium_MEM_IRQHandler+0xdc>)
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d903      	bls.n	800aa30 <DMA_Iridium_MEM_IRQHandler+0x6c>
 800aa28:	4b1e      	ldr	r3, [pc, #120]	; (800aaa4 <DMA_Iridium_MEM_IRQHandler+0xe0>)
 800aa2a:	2220      	movs	r2, #32
 800aa2c:	605a      	str	r2, [r3, #4]
 800aa2e:	e002      	b.n	800aa36 <DMA_Iridium_MEM_IRQHandler+0x72>
 800aa30:	4b1d      	ldr	r3, [pc, #116]	; (800aaa8 <DMA_Iridium_MEM_IRQHandler+0xe4>)
 800aa32:	2220      	movs	r2, #32
 800aa34:	605a      	str	r2, [r3, #4]
	if(__HAL_DMA_GET_FLAG(hdma_mem,DMA_FLAG_HT2))
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	4b18      	ldr	r3, [pc, #96]	; (800aaa0 <DMA_Iridium_MEM_IRQHandler+0xdc>)
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d909      	bls.n	800aa56 <DMA_Iridium_MEM_IRQHandler+0x92>
 800aa42:	4b18      	ldr	r3, [pc, #96]	; (800aaa4 <DMA_Iridium_MEM_IRQHandler+0xe0>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	bf14      	ite	ne
 800aa4e:	2301      	movne	r3, #1
 800aa50:	2300      	moveq	r3, #0
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	e008      	b.n	800aa68 <DMA_Iridium_MEM_IRQHandler+0xa4>
 800aa56:	4b14      	ldr	r3, [pc, #80]	; (800aaa8 <DMA_Iridium_MEM_IRQHandler+0xe4>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	bf14      	ite	ne
 800aa62:	2301      	movne	r3, #1
 800aa64:	2300      	moveq	r3, #0
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d00c      	beq.n	800aa86 <DMA_Iridium_MEM_IRQHandler+0xc2>
	{
		__HAL_DMA_CLEAR_FLAG(hdma_mem,DMA_FLAG_HT2);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	461a      	mov	r2, r3
 800aa72:	4b0b      	ldr	r3, [pc, #44]	; (800aaa0 <DMA_Iridium_MEM_IRQHandler+0xdc>)
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d903      	bls.n	800aa80 <DMA_Iridium_MEM_IRQHandler+0xbc>
 800aa78:	4b0a      	ldr	r3, [pc, #40]	; (800aaa4 <DMA_Iridium_MEM_IRQHandler+0xe0>)
 800aa7a:	2240      	movs	r2, #64	; 0x40
 800aa7c:	605a      	str	r2, [r3, #4]
	}
}
 800aa7e:	e002      	b.n	800aa86 <DMA_Iridium_MEM_IRQHandler+0xc2>
		__HAL_DMA_CLEAR_FLAG(hdma_mem,DMA_FLAG_HT2);
 800aa80:	4b09      	ldr	r3, [pc, #36]	; (800aaa8 <DMA_Iridium_MEM_IRQHandler+0xe4>)
 800aa82:	2240      	movs	r2, #64	; 0x40
 800aa84:	605a      	str	r2, [r3, #4]
}
 800aa86:	bf00      	nop
 800aa88:	3708      	adds	r7, #8
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	20002bc0 	.word	0x20002bc0
 800aa94:	200033c0 	.word	0x200033c0
 800aa98:	20003680 	.word	0x20003680
 800aa9c:	200036cc 	.word	0x200036cc
 800aaa0:	40020080 	.word	0x40020080
 800aaa4:	40020400 	.word	0x40020400
 800aaa8:	40020000 	.word	0x40020000

0800aaac <USART_RTO_IRQHandler>:

void USART_RTO_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b082      	sub	sp, #8
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
	if(__HAL_TIM_GET_IT_SOURCE(htim,TIM_IT_CC1))
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	68db      	ldr	r3, [r3, #12]
 800aaba:	f003 0302 	and.w	r3, r3, #2
 800aabe:	2b02      	cmp	r3, #2
 800aac0:	d11e      	bne.n	800ab00 <USART_RTO_IRQHandler+0x54>
	{
		//clear interrupt
		__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1|TIM_IT_UPDATE);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f06f 0203 	mvn.w	r2, #3
 800aaca:	611a      	str	r2, [r3, #16]
		if(Session_Flag != CSQ)
 800aacc:	4b1e      	ldr	r3, [pc, #120]	; (800ab48 <USART_RTO_IRQHandler+0x9c>)
 800aace:	781b      	ldrb	r3, [r3, #0]
 800aad0:	2b04      	cmp	r3, #4
 800aad2:	d015      	beq.n	800ab00 <USART_RTO_IRQHandler+0x54>
		{
		htim->Instance->CR1 &= ~TIM_CR1_CEN;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	6812      	ldr	r2, [r2, #0]
 800aadc:	6812      	ldr	r2, [r2, #0]
 800aade:	f022 0201 	bic.w	r2, r2, #1
 800aae2:	601a      	str	r2, [r3, #0]

			//set reciever timeout flag
			IR_TIM_IDLE_Timeout = 1;
 800aae4:	4b19      	ldr	r3, [pc, #100]	; (800ab4c <USART_RTO_IRQHandler+0xa0>)
 800aae6:	2201      	movs	r2, #1
 800aae8:	701a      	strb	r2, [r3, #0]
			//disable timer
			HAL_TIM_Base_Stop_IT(htim);
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f7fa fa0c 	bl	8004f08 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_OC_Stop_IT(&htim3,TIM_CHANNEL_1);
 800aaf0:	2100      	movs	r1, #0
 800aaf2:	4817      	ldr	r0, [pc, #92]	; (800ab50 <USART_RTO_IRQHandler+0xa4>)
 800aaf4:	f7fa fb04 	bl	8005100 <HAL_TIM_OC_Stop_IT>
			__HAL_TIM_SET_COUNTER(htim,0);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	2200      	movs	r2, #0
 800aafe:	625a      	str	r2, [r3, #36]	; 0x24
		}

	}
	if(__HAL_TIM_GET_IT_SOURCE(htim,TIM_IT_UPDATE))
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	f003 0301 	and.w	r3, r3, #1
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d117      	bne.n	800ab3e <USART_RTO_IRQHandler+0x92>
	{
		__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1|TIM_IT_UPDATE);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f06f 0203 	mvn.w	r2, #3
 800ab16:	611a      	str	r2, [r3, #16]
		if(Session_Flag == SBDIX || Session_Flag ==CSQ)
 800ab18:	4b0b      	ldr	r3, [pc, #44]	; (800ab48 <USART_RTO_IRQHandler+0x9c>)
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	2b02      	cmp	r3, #2
 800ab1e:	d003      	beq.n	800ab28 <USART_RTO_IRQHandler+0x7c>
 800ab20:	4b09      	ldr	r3, [pc, #36]	; (800ab48 <USART_RTO_IRQHandler+0x9c>)
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	2b04      	cmp	r3, #4
 800ab26:	d103      	bne.n	800ab30 <USART_RTO_IRQHandler+0x84>
		{
			Session_Flag = NONE;
 800ab28:	4b07      	ldr	r3, [pc, #28]	; (800ab48 <USART_RTO_IRQHandler+0x9c>)
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	701a      	strb	r2, [r3, #0]
 800ab2e:	e005      	b.n	800ab3c <USART_RTO_IRQHandler+0x90>
		}else
		{
			IR_TIM_IDLE_Timeout = 1;
 800ab30:	4b06      	ldr	r3, [pc, #24]	; (800ab4c <USART_RTO_IRQHandler+0xa0>)
 800ab32:	2201      	movs	r2, #1
 800ab34:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(htim);
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f7fa f9e6 	bl	8004f08 <HAL_TIM_Base_Stop_IT>
 800ab3c:	bf00      	nop
		}
		__NOP();

	}
}
 800ab3e:	bf00      	nop
 800ab40:	3708      	adds	r7, #8
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
 800ab46:	bf00      	nop
 800ab48:	200035fd 	.word	0x200035fd
 800ab4c:	200035fc 	.word	0x200035fc
 800ab50:	200035b8 	.word	0x200035b8

0800ab54 <USART_Iridium_IRQHandler>:

void USART_Iridium_IRQHandler(UART_HandleTypeDef *huart)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b086      	sub	sp, #24
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
	if(__HAL_UART_GET_IT_SOURCE(huart,UART_IT_IDLE))
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f003 0310 	and.w	r3, r3, #16
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	f000 8094 	beq.w	800ac94 <USART_Iridium_IRQHandler+0x140>
	{
		uint32_t temp = huart->Instance->ISR;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	69db      	ldr	r3, [r3, #28]
 800ab72:	60fb      	str	r3, [r7, #12]
		temp = huart->Instance->RDR;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	60fb      	str	r3, [r7, #12]
		(void)temp;
		//check for reciever timeout
		if(IR_TIM_IDLE_Timeout)
 800ab7e:	4b63      	ldr	r3, [pc, #396]	; (800ad0c <USART_Iridium_IRQHandler+0x1b8>)
 800ab80:	f993 3000 	ldrsb.w	r3, [r3]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	f000 8081 	beq.w	800ac8c <USART_Iridium_IRQHandler+0x138>
		{
			//check data counter
			HAL_UART_DMAStop(huart);
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f7fc f9a8 	bl	8006ee0 <HAL_UART_DMAStop>
			IR_length = (sizeof(IR_RX_Buffer)/sizeof(IR_RX_Buffer[0])) - __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
 800ab9c:	3306      	adds	r3, #6
 800ab9e:	4a5c      	ldr	r2, [pc, #368]	; (800ad10 <USART_Iridium_IRQHandler+0x1bc>)
 800aba0:	6013      	str	r3, [r2, #0]
			if(IR_length > 0)
 800aba2:	4b5b      	ldr	r3, [pc, #364]	; (800ad10 <USART_Iridium_IRQHandler+0x1bc>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d066      	beq.n	800ac78 <USART_Iridium_IRQHandler+0x124>
			{
				// transfer incomplete, move transfered data to message buffer
				uint8_t* ind;
				int len;
				if(Session_Flag == SBDWB)
 800abaa:	4b5a      	ldr	r3, [pc, #360]	; (800ad14 <USART_Iridium_IRQHandler+0x1c0>)
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d10a      	bne.n	800abc8 <USART_Iridium_IRQHandler+0x74>
				{
					ind = (uint8_t*)strchr((char*)IR_RX_Buffer,'\r');
 800abb2:	210d      	movs	r1, #13
 800abb4:	4858      	ldr	r0, [pc, #352]	; (800ad18 <USART_Iridium_IRQHandler+0x1c4>)
 800abb6:	f002 ffd1 	bl	800db5c <strchr>
 800abba:	6178      	str	r0, [r7, #20]
					len = strlen((char*)ind);
 800abbc:	6978      	ldr	r0, [r7, #20]
 800abbe:	f7f5 fb11 	bl	80001e4 <strlen>
 800abc2:	4603      	mov	r3, r0
 800abc4:	613b      	str	r3, [r7, #16]
 800abc6:	e02d      	b.n	800ac24 <USART_Iridium_IRQHandler+0xd0>
				}else if (Session_Flag == SBDRT)
 800abc8:	4b52      	ldr	r3, [pc, #328]	; (800ad14 <USART_Iridium_IRQHandler+0x1c0>)
 800abca:	781b      	ldrb	r3, [r3, #0]
 800abcc:	2b03      	cmp	r3, #3
 800abce:	d10c      	bne.n	800abea <USART_Iridium_IRQHandler+0x96>
				{
					ind = (uint8_t*)strchr((char*)IR_RX_Buffer,'\r') + 1 ;
 800abd0:	210d      	movs	r1, #13
 800abd2:	4851      	ldr	r0, [pc, #324]	; (800ad18 <USART_Iridium_IRQHandler+0x1c4>)
 800abd4:	f002 ffc2 	bl	800db5c <strchr>
 800abd8:	4603      	mov	r3, r0
 800abda:	3301      	adds	r3, #1
 800abdc:	617b      	str	r3, [r7, #20]
					len = strlen((char*)ind);
 800abde:	6978      	ldr	r0, [r7, #20]
 800abe0:	f7f5 fb00 	bl	80001e4 <strlen>
 800abe4:	4603      	mov	r3, r0
 800abe6:	613b      	str	r3, [r7, #16]
 800abe8:	e01c      	b.n	800ac24 <USART_Iridium_IRQHandler+0xd0>
				}
				else
				{
					if(strcmp((char*)IR_RX_Buffer,"AT+SBDIX\r") != 0)
 800abea:	494c      	ldr	r1, [pc, #304]	; (800ad1c <USART_Iridium_IRQHandler+0x1c8>)
 800abec:	484a      	ldr	r0, [pc, #296]	; (800ad18 <USART_Iridium_IRQHandler+0x1c4>)
 800abee:	f7f5 faef 	bl	80001d0 <strcmp>
 800abf2:	4603      	mov	r3, r0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d013      	beq.n	800ac20 <USART_Iridium_IRQHandler+0xcc>
					{
						ind = (uint8_t*)strchr((char*)IR_RX_Buffer,'\r')+1;
 800abf8:	210d      	movs	r1, #13
 800abfa:	4847      	ldr	r0, [pc, #284]	; (800ad18 <USART_Iridium_IRQHandler+0x1c4>)
 800abfc:	f002 ffae 	bl	800db5c <strchr>
 800ac00:	4603      	mov	r3, r0
 800ac02:	3301      	adds	r3, #1
 800ac04:	617b      	str	r3, [r7, #20]
						len = (ind - IR_RX_Buffer) -1; // chope off the \0
 800ac06:	697a      	ldr	r2, [r7, #20]
 800ac08:	4b43      	ldr	r3, [pc, #268]	; (800ad18 <USART_Iridium_IRQHandler+0x1c4>)
 800ac0a:	43db      	mvns	r3, r3
 800ac0c:	4413      	add	r3, r2
 800ac0e:	613b      	str	r3, [r7, #16]
						msg_len = IR_length -len-1;
 800ac10:	4b3f      	ldr	r3, [pc, #252]	; (800ad10 <USART_Iridium_IRQHandler+0x1bc>)
 800ac12:	681a      	ldr	r2, [r3, #0]
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	1ad3      	subs	r3, r2, r3
 800ac18:	3b01      	subs	r3, #1
 800ac1a:	4a41      	ldr	r2, [pc, #260]	; (800ad20 <USART_Iridium_IRQHandler+0x1cc>)
 800ac1c:	6013      	str	r3, [r2, #0]
 800ac1e:	e001      	b.n	800ac24 <USART_Iridium_IRQHandler+0xd0>
					}else
					{
						len = 0;
 800ac20:	2300      	movs	r3, #0
 800ac22:	613b      	str	r3, [r7, #16]
					}

				}

			    if(len > 0)
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	dd22      	ble.n	800ac70 <USART_Iridium_IRQHandler+0x11c>
			    {
			    	__HAL_DMA_ENABLE_IT(&hdma_memtomem_dma1_channel2,DMA_IT_TC);
 800ac2a:	4b3e      	ldr	r3, [pc, #248]	; (800ad24 <USART_Iridium_IRQHandler+0x1d0>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4a3d      	ldr	r2, [pc, #244]	; (800ad24 <USART_Iridium_IRQHandler+0x1d0>)
 800ac30:	6812      	ldr	r2, [r2, #0]
 800ac32:	6812      	ldr	r2, [r2, #0]
 800ac34:	f042 0202 	orr.w	r2, r2, #2
 800ac38:	601a      	str	r2, [r3, #0]
			    	if(Session_Flag == SBDWB || Session_Flag == SBDRT)
 800ac3a:	4b36      	ldr	r3, [pc, #216]	; (800ad14 <USART_Iridium_IRQHandler+0x1c0>)
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	2b01      	cmp	r3, #1
 800ac40:	d003      	beq.n	800ac4a <USART_Iridium_IRQHandler+0xf6>
 800ac42:	4b34      	ldr	r3, [pc, #208]	; (800ad14 <USART_Iridium_IRQHandler+0x1c0>)
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	2b03      	cmp	r3, #3
 800ac48:	d106      	bne.n	800ac58 <USART_Iridium_IRQHandler+0x104>
			    	{
			    		HAL_DMA_Start(&hdma_memtomem_dma1_channel2,(uint32_t)(ind),(uint32_t)RM_Buffer,len);
 800ac4a:	6979      	ldr	r1, [r7, #20]
 800ac4c:	4a36      	ldr	r2, [pc, #216]	; (800ad28 <USART_Iridium_IRQHandler+0x1d4>)
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	4834      	ldr	r0, [pc, #208]	; (800ad24 <USART_Iridium_IRQHandler+0x1d0>)
 800ac52:	f7f6 fd1d 	bl	8001690 <HAL_DMA_Start>
 800ac56:	e012      	b.n	800ac7e <USART_Iridium_IRQHandler+0x12a>
			    	}else
			    	{
			    		HAL_DMA_Start(&hdma_memtomem_dma1_channel2,(uint32_t)(&IR_RX_Buffer[len+1]),(uint32_t)RM_Buffer,msg_len);
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	4a2e      	ldr	r2, [pc, #184]	; (800ad18 <USART_Iridium_IRQHandler+0x1c4>)
 800ac5e:	4413      	add	r3, r2
 800ac60:	4619      	mov	r1, r3
 800ac62:	4a31      	ldr	r2, [pc, #196]	; (800ad28 <USART_Iridium_IRQHandler+0x1d4>)
 800ac64:	4b2e      	ldr	r3, [pc, #184]	; (800ad20 <USART_Iridium_IRQHandler+0x1cc>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	482e      	ldr	r0, [pc, #184]	; (800ad24 <USART_Iridium_IRQHandler+0x1d0>)
 800ac6a:	f7f6 fd11 	bl	8001690 <HAL_DMA_Start>
 800ac6e:	e006      	b.n	800ac7e <USART_Iridium_IRQHandler+0x12a>
			    	}
			    }else
			    {
			    	IR_RX_Flag = -1;
 800ac70:	4b2e      	ldr	r3, [pc, #184]	; (800ad2c <USART_Iridium_IRQHandler+0x1d8>)
 800ac72:	22ff      	movs	r2, #255	; 0xff
 800ac74:	701a      	strb	r2, [r3, #0]
 800ac76:	e002      	b.n	800ac7e <USART_Iridium_IRQHandler+0x12a>
			    (void)ind;

			}else
			{
				//reciever timeout
				IR_RX_Flag = -2;
 800ac78:	4b2c      	ldr	r3, [pc, #176]	; (800ad2c <USART_Iridium_IRQHandler+0x1d8>)
 800ac7a:	22fe      	movs	r2, #254	; 0xfe
 800ac7c:	701a      	strb	r2, [r3, #0]
			}
			IR_TIM_IDLE_Timeout = 0;
 800ac7e:	4b23      	ldr	r3, [pc, #140]	; (800ad0c <USART_Iridium_IRQHandler+0x1b8>)
 800ac80:	2200      	movs	r2, #0
 800ac82:	701a      	strb	r2, [r3, #0]
			__HAL_UART_CLEAR_IDLEFLAG(huart);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	2210      	movs	r2, #16
 800ac8a:	621a      	str	r2, [r3, #32]

		}
		__HAL_UART_CLEAR_IDLEFLAG(huart);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	2210      	movs	r2, #16
 800ac92:	621a      	str	r2, [r3, #32]
	}
	if(__HAL_UART_GET_IT_SOURCE(huart,UART_IT_ERR))
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	689b      	ldr	r3, [r3, #8]
 800ac9a:	f003 0301 	and.w	r3, r3, #1
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d030      	beq.n	800ad04 <USART_Iridium_IRQHandler+0x1b0>
	{
		//clear framing error
		if(__HAL_UART_GET_FLAG(huart,UART_FLAG_FE) == SET)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	69db      	ldr	r3, [r3, #28]
 800aca8:	f003 0302 	and.w	r3, r3, #2
 800acac:	2b02      	cmp	r3, #2
 800acae:	d103      	bne.n	800acb8 <USART_Iridium_IRQHandler+0x164>
		{
			__HAL_UART_CLEAR_FEFLAG(huart);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	2202      	movs	r2, #2
 800acb6:	621a      	str	r2, [r3, #32]
		}
		//clear noise error
		if(__HAL_UART_GET_FLAG(huart,UART_FLAG_NE) == SET)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	69db      	ldr	r3, [r3, #28]
 800acbe:	f003 0304 	and.w	r3, r3, #4
 800acc2:	2b04      	cmp	r3, #4
 800acc4:	d103      	bne.n	800acce <USART_Iridium_IRQHandler+0x17a>
		{
			__HAL_UART_CLEAR_NEFLAG(huart);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	2204      	movs	r2, #4
 800accc:	621a      	str	r2, [r3, #32]
		}
		//clear overun error
		if(__HAL_UART_GET_FLAG(huart,UART_FLAG_ORE) == SET)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	69db      	ldr	r3, [r3, #28]
 800acd4:	f003 0308 	and.w	r3, r3, #8
 800acd8:	2b08      	cmp	r3, #8
 800acda:	d108      	bne.n	800acee <USART_Iridium_IRQHandler+0x19a>
		{
			uint8_t temp = huart->Instance->RDR;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ace2:	b29b      	uxth	r3, r3
 800ace4:	72fb      	strb	r3, [r7, #11]
			(void)temp;
			__HAL_UART_CLEAR_OREFLAG(huart);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	2208      	movs	r2, #8
 800acec:	621a      	str	r2, [r3, #32]
		}
		//clear parity errors
		if(__HAL_UART_GET_FLAG(huart,UART_FLAG_PE) == SET)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	69db      	ldr	r3, [r3, #28]
 800acf4:	f003 0301 	and.w	r3, r3, #1
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	d103      	bne.n	800ad04 <USART_Iridium_IRQHandler+0x1b0>
		{
			__HAL_UART_CLEAR_PEFLAG(huart);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	2201      	movs	r2, #1
 800ad02:	621a      	str	r2, [r3, #32]
		}
	}
}
 800ad04:	bf00      	nop
 800ad06:	3718      	adds	r7, #24
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}
 800ad0c:	200035fc 	.word	0x200035fc
 800ad10:	200035f8 	.word	0x200035f8
 800ad14:	200035fd 	.word	0x200035fd
 800ad18:	20002bc0 	.word	0x20002bc0
 800ad1c:	08014ee8 	.word	0x08014ee8
 800ad20:	20003680 	.word	0x20003680
 800ad24:	20003684 	.word	0x20003684
 800ad28:	200033c0 	.word	0x200033c0
 800ad2c:	200036cc 	.word	0x200036cc

0800ad30 <Iridium_ControlPin_IRQHandler>:

void Iridium_ControlPin_IRQHandler(void)
{
 800ad30:	b480      	push	{r7}
 800ad32:	af00      	add	r7, sp, #0
	if(__HAL_GPIO_EXTI_GET_IT(IR_Ring_Pin))
 800ad34:	4b0b      	ldr	r3, [pc, #44]	; (800ad64 <Iridium_ControlPin_IRQHandler+0x34>)
 800ad36:	695b      	ldr	r3, [r3, #20]
 800ad38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d003      	beq.n	800ad48 <Iridium_ControlPin_IRQHandler+0x18>
	{
		__HAL_GPIO_EXTI_CLEAR_IT(IR_Ring_Pin);
 800ad40:	4b08      	ldr	r3, [pc, #32]	; (800ad64 <Iridium_ControlPin_IRQHandler+0x34>)
 800ad42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ad46:	615a      	str	r2, [r3, #20]
		//download messages
	}

	if(__HAL_GPIO_EXTI_GET_IT(IR_NetAv_Pin))
 800ad48:	4b06      	ldr	r3, [pc, #24]	; (800ad64 <Iridium_ControlPin_IRQHandler+0x34>)
 800ad4a:	695b      	ldr	r3, [r3, #20]
 800ad4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d003      	beq.n	800ad5c <Iridium_ControlPin_IRQHandler+0x2c>
	{
		__HAL_GPIO_EXTI_CLEAR_IT(IR_NetAv_Pin);
 800ad54:	4b03      	ldr	r3, [pc, #12]	; (800ad64 <Iridium_ControlPin_IRQHandler+0x34>)
 800ad56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ad5a:	615a      	str	r2, [r3, #20]

	}
}
 800ad5c:	bf00      	nop
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bc80      	pop	{r7}
 800ad62:	4770      	bx	lr
 800ad64:	40010400 	.word	0x40010400

0800ad68 <Init_Debug>:


static uint8_t driftbuffer[DRIFTBUFFER_SIZE] = {0};

HAL_StatusTypeDef Init_Debug(void)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b086      	sub	sp, #24
 800ad6c:	af00      	add	r7, sp, #0
	// set up clock output on GPIO Pin A8 for testing
#ifdef DEBUG_HSE_OUTPUT_ENABLE
	//configure pin
	/*Configure GPIO pin : PA8 */
	 GPIO_InitTypeDef GPIO_InitStruct;
	 GPIO_InitStruct.Pin = GPIO_PIN_8;
 800ad6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad72:	607b      	str	r3, [r7, #4]
	 GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad74:	2302      	movs	r3, #2
 800ad76:	60bb      	str	r3, [r7, #8]
	 GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	60fb      	str	r3, [r7, #12]
	 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	613b      	str	r3, [r7, #16]
	 GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800ad80:	2300      	movs	r3, #0
 800ad82:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad84:	1d3b      	adds	r3, r7, #4
 800ad86:	4619      	mov	r1, r3
 800ad88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ad8c:	f7f6 fe8a 	bl	8001aa4 <HAL_GPIO_Init>
	 //map clock output to PIN PA8
	 HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 800ad90:	2200      	movs	r2, #0
 800ad92:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800ad96:	2000      	movs	r0, #0
 800ad98:	f7f8 f846 	bl	8002e28 <HAL_RCC_MCOConfig>
#endif
	//initialise USART 2 for USB comms
#ifdef DEBUG_USART_ENABLE
	  huart2.Instance = USART2;
 800ad9c:	4b26      	ldr	r3, [pc, #152]	; (800ae38 <Init_Debug+0xd0>)
 800ad9e:	4a27      	ldr	r2, [pc, #156]	; (800ae3c <Init_Debug+0xd4>)
 800ada0:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 800ada2:	4b25      	ldr	r3, [pc, #148]	; (800ae38 <Init_Debug+0xd0>)
 800ada4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ada8:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800adaa:	4b23      	ldr	r3, [pc, #140]	; (800ae38 <Init_Debug+0xd0>)
 800adac:	2200      	movs	r2, #0
 800adae:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 800adb0:	4b21      	ldr	r3, [pc, #132]	; (800ae38 <Init_Debug+0xd0>)
 800adb2:	2200      	movs	r2, #0
 800adb4:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 800adb6:	4b20      	ldr	r3, [pc, #128]	; (800ae38 <Init_Debug+0xd0>)
 800adb8:	2200      	movs	r2, #0
 800adba:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 800adbc:	4b1e      	ldr	r3, [pc, #120]	; (800ae38 <Init_Debug+0xd0>)
 800adbe:	220c      	movs	r2, #12
 800adc0:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800adc2:	4b1d      	ldr	r3, [pc, #116]	; (800ae38 <Init_Debug+0xd0>)
 800adc4:	2200      	movs	r2, #0
 800adc6:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800adc8:	4b1b      	ldr	r3, [pc, #108]	; (800ae38 <Init_Debug+0xd0>)
 800adca:	2200      	movs	r2, #0
 800adcc:	61da      	str	r2, [r3, #28]
	  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800adce:	4b1a      	ldr	r3, [pc, #104]	; (800ae38 <Init_Debug+0xd0>)
 800add0:	2200      	movs	r2, #0
 800add2:	621a      	str	r2, [r3, #32]
	  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800add4:	4b18      	ldr	r3, [pc, #96]	; (800ae38 <Init_Debug+0xd0>)
 800add6:	2200      	movs	r2, #0
 800add8:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 800adda:	4817      	ldr	r0, [pc, #92]	; (800ae38 <Init_Debug+0xd0>)
 800addc:	f7fb fd05 	bl	80067ea <HAL_UART_Init>
 800ade0:	4603      	mov	r3, r0
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d001      	beq.n	800adea <Init_Debug+0x82>
	  {
	    return HAL_ERROR;
 800ade6:	2301      	movs	r3, #1
 800ade8:	e022      	b.n	800ae30 <Init_Debug+0xc8>
	  }
	  setbuf(stdout, NULL);
 800adea:	4b15      	ldr	r3, [pc, #84]	; (800ae40 <Init_Debug+0xd8>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	2100      	movs	r1, #0
 800adf2:	4618      	mov	r0, r3
 800adf4:	f002 fdba 	bl	800d96c <setbuf>
#endif

#ifdef DEBUG_LED1_ENABLE
	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800adf8:	2200      	movs	r2, #0
 800adfa:	2120      	movs	r1, #32
 800adfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ae00:	f7f7 f8ea 	bl	8001fd8 <HAL_GPIO_WritePin>
	  /*Configure GPIO pin : PD2 */
	  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800ae04:	2304      	movs	r3, #4
 800ae06:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ae08:	2303      	movs	r3, #3
 800ae0a:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ae10:	1d3b      	adds	r3, r7, #4
 800ae12:	4619      	mov	r1, r3
 800ae14:	480b      	ldr	r0, [pc, #44]	; (800ae44 <Init_Debug+0xdc>)
 800ae16:	f7f6 fe45 	bl	8001aa4 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,SET);
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	2120      	movs	r1, #32
 800ae1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ae22:	f7f7 f8d9 	bl	8001fd8 <HAL_GPIO_WritePin>
#endif

#ifdef DEBUG_LP_ENABLE
	  HAL_DBGMCU_EnableDBGStandbyMode();	//enable for shutdown mode
 800ae26:	f7f6 f969 	bl	80010fc <HAL_DBGMCU_EnableDBGStandbyMode>
	  HAL_DBGMCU_EnableDBGStopMode();
 800ae2a:	f7f6 f959 	bl	80010e0 <HAL_DBGMCU_EnableDBGStopMode>

#endif

	  return HAL_OK;
 800ae2e:	2300      	movs	r3, #0
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3718      	adds	r7, #24
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	20003734 	.word	0x20003734
 800ae3c:	40004400 	.word	0x40004400
 800ae40:	20000014 	.word	0x20000014
 800ae44:	48000c00 	.word	0x48000c00

0800ae48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
HAL_StatusTypeDef SystemClock_Config(void)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b0b8      	sub	sp, #224	; 0xe0
 800ae4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ae4e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800ae52:	2244      	movs	r2, #68	; 0x44
 800ae54:	2100      	movs	r1, #0
 800ae56:	4618      	mov	r0, r3
 800ae58:	f002 fa87 	bl	800d36a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ae5c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ae60:	2200      	movs	r2, #0
 800ae62:	601a      	str	r2, [r3, #0]
 800ae64:	605a      	str	r2, [r3, #4]
 800ae66:	609a      	str	r2, [r3, #8]
 800ae68:	60da      	str	r2, [r3, #12]
 800ae6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ae6c:	463b      	mov	r3, r7
 800ae6e:	2288      	movs	r2, #136	; 0x88
 800ae70:	2100      	movs	r1, #0
 800ae72:	4618      	mov	r0, r3
 800ae74:	f002 fa79 	bl	800d36a <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800ae78:	f7f7 f8de 	bl	8002038 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800ae7c:	4a3c      	ldr	r2, [pc, #240]	; (800af70 <SystemClock_Config+0x128>)
 800ae7e:	4b3c      	ldr	r3, [pc, #240]	; (800af70 <SystemClock_Config+0x128>)
 800ae80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae84:	f023 0318 	bic.w	r3, r3, #24
 800ae88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800ae8c:	2316      	movs	r3, #22
 800ae8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800ae92:	2301      	movs	r3, #1
 800ae94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800ae98:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800aea0:	2310      	movs	r3, #16
 800aea2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800aea6:	2301      	movs	r3, #1
 800aea8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800aeac:	2300      	movs	r3, #0
 800aeae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800aeb2:	2360      	movs	r3, #96	; 0x60
 800aeb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800aeb8:	2302      	movs	r3, #2
 800aeba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800aebe:	2301      	movs	r3, #1
 800aec0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800aec4:	2301      	movs	r3, #1
 800aec6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 26;
 800aeca:	231a      	movs	r3, #26
 800aecc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800aed0:	2307      	movs	r3, #7
 800aed2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800aed6:	2302      	movs	r3, #2
 800aed8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800aedc:	2302      	movs	r3, #2
 800aede:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800aee2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7f7 fad6 	bl	8002498 <HAL_RCC_OscConfig>
 800aeec:	4603      	mov	r3, r0
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d001      	beq.n	800aef6 <SystemClock_Config+0xae>
  {
    return HAL_ERROR;
 800aef2:	2301      	movs	r3, #1
 800aef4:	e037      	b.n	800af66 <SystemClock_Config+0x11e>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800aef6:	230f      	movs	r3, #15
 800aef8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800aefc:	2303      	movs	r3, #3
 800aefe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800af02:	2380      	movs	r3, #128	; 0x80
 800af04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800af08:	2300      	movs	r3, #0
 800af0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800af0e:	2300      	movs	r3, #0
 800af10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800af14:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800af18:	2101      	movs	r1, #1
 800af1a:	4618      	mov	r0, r3
 800af1c:	f7f7 fea2 	bl	8002c64 <HAL_RCC_ClockConfig>
 800af20:	4603      	mov	r3, r0
 800af22:	2b00      	cmp	r3, #0
 800af24:	d001      	beq.n	800af2a <SystemClock_Config+0xe2>
  {
    return HAL_ERROR;
 800af26:	2301      	movs	r3, #1
 800af28:	e01d      	b.n	800af66 <SystemClock_Config+0x11e>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2;
 800af2a:	f04f 1302 	mov.w	r3, #131074	; 0x20002
 800af2e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 800af30:	2308      	movs	r3, #8
 800af32:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800af34:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800af3c:	463b      	mov	r3, r7
 800af3e:	4618      	mov	r0, r3
 800af40:	f7f8 f8c6 	bl	80030d0 <HAL_RCCEx_PeriphCLKConfig>
 800af44:	4603      	mov	r3, r0
 800af46:	2b00      	cmp	r3, #0
 800af48:	d001      	beq.n	800af4e <SystemClock_Config+0x106>
  {
    return HAL_ERROR;
 800af4a:	2301      	movs	r3, #1
 800af4c:	e00b      	b.n	800af66 <SystemClock_Config+0x11e>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800af4e:	f44f 7000 	mov.w	r0, #512	; 0x200
 800af52:	f7f7 f8e7 	bl	8002124 <HAL_PWREx_ControlVoltageScaling>
 800af56:	4603      	mov	r3, r0
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d001      	beq.n	800af60 <SystemClock_Config+0x118>
  {
    return HAL_ERROR;
 800af5c:	2301      	movs	r3, #1
 800af5e:	e002      	b.n	800af66 <SystemClock_Config+0x11e>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800af60:	f7f8 fb9c 	bl	800369c <HAL_RCCEx_EnableMSIPLLMode>
  return HAL_OK;
 800af64:	2300      	movs	r3, #0
}
 800af66:	4618      	mov	r0, r3
 800af68:	37e0      	adds	r7, #224	; 0xe0
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	40021000 	.word	0x40021000

0800af74 <Go_To_Sleep>:

HAL_StatusTypeDef Go_To_Sleep(PWR_MODE_t mode, uint32_t seconds)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	4603      	mov	r3, r0
 800af7c:	6039      	str	r1, [r7, #0]
 800af7e:	71fb      	strb	r3, [r7, #7]
	//reset wake up pin interrupt
	__HAL_RCC_PWR_CLK_ENABLE();
 800af80:	4a16      	ldr	r2, [pc, #88]	; (800afdc <Go_To_Sleep+0x68>)
 800af82:	4b16      	ldr	r3, [pc, #88]	; (800afdc <Go_To_Sleep+0x68>)
 800af84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af8a:	6593      	str	r3, [r2, #88]	; 0x58
 800af8c:	4b13      	ldr	r3, [pc, #76]	; (800afdc <Go_To_Sleep+0x68>)
 800af8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af94:	60fb      	str	r3, [r7, #12]
 800af96:	68fb      	ldr	r3, [r7, #12]
	/* Enable Wake Up timer in interrupt mode */
	//set alarm
	if(seconds > 0)
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d00b      	beq.n	800afb6 <Go_To_Sleep+0x42>
	{
	 if(HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,(seconds-1),RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	3b01      	subs	r3, #1
 800afa2:	2204      	movs	r2, #4
 800afa4:	4619      	mov	r1, r3
 800afa6:	480e      	ldr	r0, [pc, #56]	; (800afe0 <Go_To_Sleep+0x6c>)
 800afa8:	f7f8 ffa6 	bl	8003ef8 <HAL_RTCEx_SetWakeUpTimer_IT>
 800afac:	4603      	mov	r3, r0
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d001      	beq.n	800afb6 <Go_To_Sleep+0x42>
	  {
		 return HAL_ERROR;
 800afb2:	2301      	movs	r3, #1
 800afb4:	e00d      	b.n	800afd2 <Go_To_Sleep+0x5e>
	  }
	}
	 HAL_PWREx_EnableInternalWakeUpLine();
 800afb6:	f7f7 f909 	bl	80021cc <HAL_PWREx_EnableInternalWakeUpLine>
	 //if shutdown mode enabled
	 if(mode == SHUTDOWN)
 800afba:	79fb      	ldrb	r3, [r7, #7]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d102      	bne.n	800afc6 <Go_To_Sleep+0x52>
	 {
		 HAL_PWREx_EnterSHUTDOWNMode();
 800afc0:	f7f7 fa50 	bl	8002464 <HAL_PWREx_EnterSHUTDOWNMode>
 800afc4:	e004      	b.n	800afd0 <Go_To_Sleep+0x5c>
	 }
	 else if(mode == STDBY)
 800afc6:	79fb      	ldrb	r3, [r7, #7]
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d101      	bne.n	800afd0 <Go_To_Sleep+0x5c>
	 {
		 HAL_PWR_EnterSTANDBYMode();
 800afcc:	f7f7 f884 	bl	80020d8 <HAL_PWR_EnterSTANDBYMode>
	 }
	 return HAL_OK;
 800afd0:	2300      	movs	r3, #0
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3710      	adds	r7, #16
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
 800afda:	bf00      	nop
 800afdc:	40021000 	.word	0x40021000
 800afe0:	200037b8 	.word	0x200037b8

0800afe4 <set_WUP_Pin>:
	HAL_PWREx_EnterSTOP1Mode(PWR_STOPENTRY_WFI);
	return HAL_OK;
}

void set_WUP_Pin(uint32_t Pin, PinMode_typedef mode)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b090      	sub	sp, #64	; 0x40
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	460b      	mov	r3, r1
 800afee:	70fb      	strb	r3, [r7, #3]

	GPIO_TypeDef *Pin_Port;
	IRQn_Type WUP_IRQn;
	GPIO_InitTypeDef GPIO_InitStruct;
	switch (Pin) {
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	3b01      	subs	r3, #1
 800aff4:	2b0f      	cmp	r3, #15
 800aff6:	f200 808a 	bhi.w	800b10e <set_WUP_Pin+0x12a>
 800affa:	a201      	add	r2, pc, #4	; (adr r2, 800b000 <set_WUP_Pin+0x1c>)
 800affc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b000:	0800b041 	.word	0x0800b041
 800b004:	0800b06b 	.word	0x0800b06b
 800b008:	0800b10f 	.word	0x0800b10f
 800b00c:	0800b095 	.word	0x0800b095
 800b010:	0800b10f 	.word	0x0800b10f
 800b014:	0800b10f 	.word	0x0800b10f
 800b018:	0800b10f 	.word	0x0800b10f
 800b01c:	0800b0bd 	.word	0x0800b0bd
 800b020:	0800b10f 	.word	0x0800b10f
 800b024:	0800b10f 	.word	0x0800b10f
 800b028:	0800b10f 	.word	0x0800b10f
 800b02c:	0800b10f 	.word	0x0800b10f
 800b030:	0800b10f 	.word	0x0800b10f
 800b034:	0800b10f 	.word	0x0800b10f
 800b038:	0800b10f 	.word	0x0800b10f
 800b03c:	0800b0e7 	.word	0x0800b0e7
		case PWR_WAKEUP_PIN1:
			__HAL_RCC_GPIOA_CLK_ENABLE();
 800b040:	4a69      	ldr	r2, [pc, #420]	; (800b1e8 <set_WUP_Pin+0x204>)
 800b042:	4b69      	ldr	r3, [pc, #420]	; (800b1e8 <set_WUP_Pin+0x204>)
 800b044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b046:	f043 0301 	orr.w	r3, r3, #1
 800b04a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b04c:	4b66      	ldr	r3, [pc, #408]	; (800b1e8 <set_WUP_Pin+0x204>)
 800b04e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b050:	f003 0301 	and.w	r3, r3, #1
 800b054:	623b      	str	r3, [r7, #32]
 800b056:	6a3b      	ldr	r3, [r7, #32]
			Pin_Port = GPIOA;
 800b058:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b05c:	63fb      	str	r3, [r7, #60]	; 0x3c
			GPIO_InitStruct.Pin = GPIO_PIN_0;
 800b05e:	2301      	movs	r3, #1
 800b060:	627b      	str	r3, [r7, #36]	; 0x24
			WUP_IRQn = EXTI0_IRQn;
 800b062:	2306      	movs	r3, #6
 800b064:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			break;
 800b068:	e052      	b.n	800b110 <set_WUP_Pin+0x12c>
		case PWR_WAKEUP_PIN2:
			__HAL_RCC_GPIOC_CLK_ENABLE();
 800b06a:	4a5f      	ldr	r2, [pc, #380]	; (800b1e8 <set_WUP_Pin+0x204>)
 800b06c:	4b5e      	ldr	r3, [pc, #376]	; (800b1e8 <set_WUP_Pin+0x204>)
 800b06e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b070:	f043 0304 	orr.w	r3, r3, #4
 800b074:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b076:	4b5c      	ldr	r3, [pc, #368]	; (800b1e8 <set_WUP_Pin+0x204>)
 800b078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b07a:	f003 0304 	and.w	r3, r3, #4
 800b07e:	61fb      	str	r3, [r7, #28]
 800b080:	69fb      	ldr	r3, [r7, #28]
			Pin_Port = GPIOC;
 800b082:	4b5a      	ldr	r3, [pc, #360]	; (800b1ec <set_WUP_Pin+0x208>)
 800b084:	63fb      	str	r3, [r7, #60]	; 0x3c
			GPIO_InitStruct.Pin = GPIO_PIN_13;
 800b086:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b08a:	627b      	str	r3, [r7, #36]	; 0x24
			WUP_IRQn = EXTI15_10_IRQn;
 800b08c:	2328      	movs	r3, #40	; 0x28
 800b08e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			break;
 800b092:	e03d      	b.n	800b110 <set_WUP_Pin+0x12c>
		case PWR_WAKEUP_PIN3:
			__HAL_RCC_GPIOE_CLK_ENABLE();
 800b094:	4a54      	ldr	r2, [pc, #336]	; (800b1e8 <set_WUP_Pin+0x204>)
 800b096:	4b54      	ldr	r3, [pc, #336]	; (800b1e8 <set_WUP_Pin+0x204>)
 800b098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b09a:	f043 0310 	orr.w	r3, r3, #16
 800b09e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b0a0:	4b51      	ldr	r3, [pc, #324]	; (800b1e8 <set_WUP_Pin+0x204>)
 800b0a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0a4:	f003 0310 	and.w	r3, r3, #16
 800b0a8:	61bb      	str	r3, [r7, #24]
 800b0aa:	69bb      	ldr	r3, [r7, #24]
			Pin_Port = GPIOE;
 800b0ac:	4b50      	ldr	r3, [pc, #320]	; (800b1f0 <set_WUP_Pin+0x20c>)
 800b0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
			GPIO_InitStruct.Pin = GPIO_PIN_6;
 800b0b0:	2340      	movs	r3, #64	; 0x40
 800b0b2:	627b      	str	r3, [r7, #36]	; 0x24
			WUP_IRQn = EXTI9_5_IRQn;
 800b0b4:	2317      	movs	r3, #23
 800b0b6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			break;
 800b0ba:	e029      	b.n	800b110 <set_WUP_Pin+0x12c>
		case PWR_WAKEUP_PIN4:
			__HAL_RCC_GPIOA_CLK_ENABLE();
 800b0bc:	4a4a      	ldr	r2, [pc, #296]	; (800b1e8 <set_WUP_Pin+0x204>)
 800b0be:	4b4a      	ldr	r3, [pc, #296]	; (800b1e8 <set_WUP_Pin+0x204>)
 800b0c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0c2:	f043 0301 	orr.w	r3, r3, #1
 800b0c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b0c8:	4b47      	ldr	r3, [pc, #284]	; (800b1e8 <set_WUP_Pin+0x204>)
 800b0ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0cc:	f003 0301 	and.w	r3, r3, #1
 800b0d0:	617b      	str	r3, [r7, #20]
 800b0d2:	697b      	ldr	r3, [r7, #20]
			GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b0d4:	2304      	movs	r3, #4
 800b0d6:	627b      	str	r3, [r7, #36]	; 0x24
			Pin_Port = GPIOA;
 800b0d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b0dc:	63fb      	str	r3, [r7, #60]	; 0x3c
			WUP_IRQn = EXTI2_IRQn;
 800b0de:	2308      	movs	r3, #8
 800b0e0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			break;
 800b0e4:	e014      	b.n	800b110 <set_WUP_Pin+0x12c>
		case PWR_WAKEUP_PIN5:
			__HAL_RCC_GPIOC_CLK_ENABLE();
 800b0e6:	4a40      	ldr	r2, [pc, #256]	; (800b1e8 <set_WUP_Pin+0x204>)
 800b0e8:	4b3f      	ldr	r3, [pc, #252]	; (800b1e8 <set_WUP_Pin+0x204>)
 800b0ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0ec:	f043 0304 	orr.w	r3, r3, #4
 800b0f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b0f2:	4b3d      	ldr	r3, [pc, #244]	; (800b1e8 <set_WUP_Pin+0x204>)
 800b0f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0f6:	f003 0304 	and.w	r3, r3, #4
 800b0fa:	613b      	str	r3, [r7, #16]
 800b0fc:	693b      	ldr	r3, [r7, #16]
			Pin_Port = GPIOC;
 800b0fe:	4b3b      	ldr	r3, [pc, #236]	; (800b1ec <set_WUP_Pin+0x208>)
 800b100:	63fb      	str	r3, [r7, #60]	; 0x3c
			GPIO_InitStruct.Pin = GPIO_PIN_5;
 800b102:	2320      	movs	r3, #32
 800b104:	627b      	str	r3, [r7, #36]	; 0x24
			WUP_IRQn = EXTI9_5_IRQn;
 800b106:	2317      	movs	r3, #23
 800b108:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			break;
 800b10c:	e000      	b.n	800b110 <set_WUP_Pin+0x12c>
		default:
			break;
 800b10e:	bf00      	nop
	}
	//configure pin for exti map


	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800b110:	4b38      	ldr	r3, [pc, #224]	; (800b1f4 <set_WUP_Pin+0x210>)
 800b112:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b114:	2302      	movs	r3, #2
 800b116:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b118:	2302      	movs	r3, #2
 800b11a:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(Pin_Port,&GPIO_InitStruct);
 800b11c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b120:	4619      	mov	r1, r3
 800b122:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b124:	f7f6 fcbe 	bl	8001aa4 <HAL_GPIO_Init>
	//set NVIC interrupt
    HAL_NVIC_SetPriority(WUP_IRQn, 0x0F, 0);
 800b128:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 800b12c:	2200      	movs	r2, #0
 800b12e:	210f      	movs	r1, #15
 800b130:	4618      	mov	r0, r3
 800b132:	f7f6 f90a 	bl	800134a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(WUP_IRQn);
 800b136:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 800b13a:	4618      	mov	r0, r3
 800b13c:	f7f6 f921 	bl	8001382 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_ClearPendingIRQ(WUP_IRQn);
 800b140:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 800b144:	4618      	mov	r0, r3
 800b146:	f7f6 f94a 	bl	80013de <HAL_NVIC_ClearPendingIRQ>
    //enable wup in PWR register
    __HAL_RCC_PWR_CLK_ENABLE();
 800b14a:	4a27      	ldr	r2, [pc, #156]	; (800b1e8 <set_WUP_Pin+0x204>)
 800b14c:	4b26      	ldr	r3, [pc, #152]	; (800b1e8 <set_WUP_Pin+0x204>)
 800b14e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b154:	6593      	str	r3, [r2, #88]	; 0x58
 800b156:	4b24      	ldr	r3, [pc, #144]	; (800b1e8 <set_WUP_Pin+0x204>)
 800b158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b15a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b15e:	60fb      	str	r3, [r7, #12]
 800b160:	68fb      	ldr	r3, [r7, #12]
    if(mode == MODE_WUP)
 800b162:	78fb      	ldrb	r3, [r7, #3]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d10f      	bne.n	800b188 <set_WUP_Pin+0x1a4>
    {
    	__HAL_RCC_PWR_CLK_ENABLE();
 800b168:	4a1f      	ldr	r2, [pc, #124]	; (800b1e8 <set_WUP_Pin+0x204>)
 800b16a:	4b1f      	ldr	r3, [pc, #124]	; (800b1e8 <set_WUP_Pin+0x204>)
 800b16c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b16e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b172:	6593      	str	r3, [r2, #88]	; 0x58
 800b174:	4b1c      	ldr	r3, [pc, #112]	; (800b1e8 <set_WUP_Pin+0x204>)
 800b176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b17c:	60bb      	str	r3, [r7, #8]
 800b17e:	68bb      	ldr	r3, [r7, #8]
    	HAL_PWR_EnableWakeUpPin(Pin);
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f7f6 ff75 	bl	8002070 <HAL_PWR_EnableWakeUpPin>
 800b186:	e005      	b.n	800b194 <set_WUP_Pin+0x1b0>
    	//clear unwanted interrupts

    }else if (mode == MODE_EXTI)
 800b188:	78fb      	ldrb	r3, [r7, #3]
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	d102      	bne.n	800b194 <set_WUP_Pin+0x1b0>
    {
    	HAL_PWR_DisableWakeUpPin(Pin);
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f7f6 ff8e 	bl	80020b0 <HAL_PWR_DisableWakeUpPin>
    }
   	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF1);
 800b194:	4b18      	ldr	r3, [pc, #96]	; (800b1f8 <set_WUP_Pin+0x214>)
 800b196:	2201      	movs	r2, #1
 800b198:	619a      	str	r2, [r3, #24]
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF2);
 800b19a:	4b17      	ldr	r3, [pc, #92]	; (800b1f8 <set_WUP_Pin+0x214>)
 800b19c:	2202      	movs	r2, #2
 800b19e:	619a      	str	r2, [r3, #24]
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF3);
 800b1a0:	4b15      	ldr	r3, [pc, #84]	; (800b1f8 <set_WUP_Pin+0x214>)
 800b1a2:	2204      	movs	r2, #4
 800b1a4:	619a      	str	r2, [r3, #24]
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF4);
 800b1a6:	4b14      	ldr	r3, [pc, #80]	; (800b1f8 <set_WUP_Pin+0x214>)
 800b1a8:	2208      	movs	r2, #8
 800b1aa:	619a      	str	r2, [r3, #24]
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF5);
 800b1ac:	4b12      	ldr	r3, [pc, #72]	; (800b1f8 <set_WUP_Pin+0x214>)
 800b1ae:	2210      	movs	r2, #16
 800b1b0:	619a      	str	r2, [r3, #24]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI_LINE_5);
 800b1b2:	4b12      	ldr	r3, [pc, #72]	; (800b1fc <set_WUP_Pin+0x218>)
 800b1b4:	4a12      	ldr	r2, [pc, #72]	; (800b200 <set_WUP_Pin+0x21c>)
 800b1b6:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI_LINE_13);
 800b1b8:	4b10      	ldr	r3, [pc, #64]	; (800b1fc <set_WUP_Pin+0x218>)
 800b1ba:	4a12      	ldr	r2, [pc, #72]	; (800b204 <set_WUP_Pin+0x220>)
 800b1bc:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI_LINE_0);
 800b1be:	4b0f      	ldr	r3, [pc, #60]	; (800b1fc <set_WUP_Pin+0x218>)
 800b1c0:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 800b1c4:	615a      	str	r2, [r3, #20]
   	__HAL_GPIO_EXTI_CLEAR_IT(EXTI_LINE_2);
 800b1c6:	4b0d      	ldr	r3, [pc, #52]	; (800b1fc <set_WUP_Pin+0x218>)
 800b1c8:	4a0f      	ldr	r2, [pc, #60]	; (800b208 <set_WUP_Pin+0x224>)
 800b1ca:	615a      	str	r2, [r3, #20]
   	__HAL_GPIO_EXTI_CLEAR_IT(EXTI_LINE_6);
 800b1cc:	4b0b      	ldr	r3, [pc, #44]	; (800b1fc <set_WUP_Pin+0x218>)
 800b1ce:	4a0f      	ldr	r2, [pc, #60]	; (800b20c <set_WUP_Pin+0x228>)
 800b1d0:	615a      	str	r2, [r3, #20]
	__HAL_RCC_PWR_CLK_DISABLE();
 800b1d2:	4a05      	ldr	r2, [pc, #20]	; (800b1e8 <set_WUP_Pin+0x204>)
 800b1d4:	4b04      	ldr	r3, [pc, #16]	; (800b1e8 <set_WUP_Pin+0x204>)
 800b1d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b1dc:	6593      	str	r3, [r2, #88]	; 0x58
}
 800b1de:	bf00      	nop
 800b1e0:	3740      	adds	r7, #64	; 0x40
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
 800b1e6:	bf00      	nop
 800b1e8:	40021000 	.word	0x40021000
 800b1ec:	48000800 	.word	0x48000800
 800b1f0:	48001000 	.word	0x48001000
 800b1f4:	10110000 	.word	0x10110000
 800b1f8:	40007000 	.word	0x40007000
 800b1fc:	40010400 	.word	0x40010400
 800b200:	16000005 	.word	0x16000005
 800b204:	1600000d 	.word	0x1600000d
 800b208:	16000002 	.word	0x16000002
 800b20c:	16000006 	.word	0x16000006

0800b210 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b082      	sub	sp, #8
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*) &ch,1,0xFFFF);
 800b218:	1d39      	adds	r1, r7, #4
 800b21a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b21e:	2201      	movs	r2, #1
 800b220:	4803      	ldr	r0, [pc, #12]	; (800b230 <__io_putchar+0x20>)
 800b222:	f7fb fb65 	bl	80068f0 <HAL_UART_Transmit>
	return ch;
 800b226:	687b      	ldr	r3, [r7, #4]
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3708      	adds	r7, #8
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}
 800b230:	20003734 	.word	0x20003734

0800b234 <GPIO_Set_Pin_LP>:

void GPIO_Set_Pin_LP(void)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b08a      	sub	sp, #40	; 0x28
 800b238:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b23a:	f107 0314 	add.w	r3, r7, #20
 800b23e:	2200      	movs	r2, #0
 800b240:	601a      	str	r2, [r3, #0]
 800b242:	605a      	str	r2, [r3, #4]
 800b244:	609a      	str	r2, [r3, #8]
 800b246:	60da      	str	r2, [r3, #12]
 800b248:	611a      	str	r2, [r3, #16]
	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b24a:	4a3e      	ldr	r2, [pc, #248]	; (800b344 <GPIO_Set_Pin_LP+0x110>)
 800b24c:	4b3d      	ldr	r3, [pc, #244]	; (800b344 <GPIO_Set_Pin_LP+0x110>)
 800b24e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b250:	f043 0304 	orr.w	r3, r3, #4
 800b254:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b256:	4b3b      	ldr	r3, [pc, #236]	; (800b344 <GPIO_Set_Pin_LP+0x110>)
 800b258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b25a:	f003 0304 	and.w	r3, r3, #4
 800b25e:	613b      	str	r3, [r7, #16]
 800b260:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b262:	4a38      	ldr	r2, [pc, #224]	; (800b344 <GPIO_Set_Pin_LP+0x110>)
 800b264:	4b37      	ldr	r3, [pc, #220]	; (800b344 <GPIO_Set_Pin_LP+0x110>)
 800b266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b26c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b26e:	4b35      	ldr	r3, [pc, #212]	; (800b344 <GPIO_Set_Pin_LP+0x110>)
 800b270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b276:	60fb      	str	r3, [r7, #12]
 800b278:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b27a:	4a32      	ldr	r2, [pc, #200]	; (800b344 <GPIO_Set_Pin_LP+0x110>)
 800b27c:	4b31      	ldr	r3, [pc, #196]	; (800b344 <GPIO_Set_Pin_LP+0x110>)
 800b27e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b280:	f043 0301 	orr.w	r3, r3, #1
 800b284:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b286:	4b2f      	ldr	r3, [pc, #188]	; (800b344 <GPIO_Set_Pin_LP+0x110>)
 800b288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b28a:	f003 0301 	and.w	r3, r3, #1
 800b28e:	60bb      	str	r3, [r7, #8]
 800b290:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b292:	4a2c      	ldr	r2, [pc, #176]	; (800b344 <GPIO_Set_Pin_LP+0x110>)
 800b294:	4b2b      	ldr	r3, [pc, #172]	; (800b344 <GPIO_Set_Pin_LP+0x110>)
 800b296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b298:	f043 0302 	orr.w	r3, r3, #2
 800b29c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b29e:	4b29      	ldr	r3, [pc, #164]	; (800b344 <GPIO_Set_Pin_LP+0x110>)
 800b2a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2a2:	f003 0302 	and.w	r3, r3, #2
 800b2a6:	607b      	str	r3, [r7, #4]
 800b2a8:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b2aa:	4a26      	ldr	r2, [pc, #152]	; (800b344 <GPIO_Set_Pin_LP+0x110>)
 800b2ac:	4b25      	ldr	r3, [pc, #148]	; (800b344 <GPIO_Set_Pin_LP+0x110>)
 800b2ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2b0:	f043 0308 	orr.w	r3, r3, #8
 800b2b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b2b6:	4b23      	ldr	r3, [pc, #140]	; (800b344 <GPIO_Set_Pin_LP+0x110>)
 800b2b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2ba:	f003 0308 	and.w	r3, r3, #8
 800b2be:	603b      	str	r3, [r7, #0]
 800b2c0:	683b      	ldr	r3, [r7, #0]
	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	2120      	movs	r1, #32
 800b2c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b2ca:	f7f6 fe85 	bl	8001fd8 <HAL_GPIO_WritePin>
	  /*Configure GPIO pins : PC13 PC0 PC1 PC2
	                           PC3 PC4 PC5 PC6
	                           PC7 PC8 PC9 PC10
	                           PC11 PC12 */
	  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 800b2ce:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800b2d2:	617b      	str	r3, [r7, #20]
	                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
	                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
	                          |GPIO_PIN_11|GPIO_PIN_12;
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b2d4:	2303      	movs	r3, #3
 800b2d6:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b2dc:	f107 0314 	add.w	r3, r7, #20
 800b2e0:	4619      	mov	r1, r3
 800b2e2:	4819      	ldr	r0, [pc, #100]	; (800b348 <GPIO_Set_Pin_LP+0x114>)
 800b2e4:	f7f6 fbde 	bl	8001aa4 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PA0 PA1 PA4 PA6
	                           PA7 PA9 PA10 PA11
	                           PA12 PA15 */
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 800b2e8:	f649 63d3 	movw	r3, #40659	; 0x9ed3
 800b2ec:	617b      	str	r3, [r7, #20]
	                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
	                          |GPIO_PIN_12|GPIO_PIN_15;
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b2ee:	2303      	movs	r3, #3
 800b2f0:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b2f6:	f107 0314 	add.w	r3, r7, #20
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b300:	f7f6 fbd0 	bl	8001aa4 <HAL_GPIO_Init>

	  /*Configure GPIO pin : LD2_Pin */
	  GPIO_InitStruct.Pin = LD2_Pin;
 800b304:	2320      	movs	r3, #32
 800b306:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b308:	2301      	movs	r3, #1
 800b30a:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b30c:	2300      	movs	r3, #0
 800b30e:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b310:	2300      	movs	r3, #0
 800b312:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800b314:	f107 0314 	add.w	r3, r7, #20
 800b318:	4619      	mov	r1, r3
 800b31a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b31e:	f7f6 fbc1 	bl	8001aa4 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PB0 PB1 PB2 PB10
	                           PB11 PB12 PB13 PB14
	                           PB15 PB3 PB4 PB5
	                           PB6 PB7 PB8 PB9 */
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800b322:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b326:	617b      	str	r3, [r7, #20]
	                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
	                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
	                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b328:	2303      	movs	r3, #3
 800b32a:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b32c:	2300      	movs	r3, #0
 800b32e:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b330:	f107 0314 	add.w	r3, r7, #20
 800b334:	4619      	mov	r1, r3
 800b336:	4805      	ldr	r0, [pc, #20]	; (800b34c <GPIO_Set_Pin_LP+0x118>)
 800b338:	f7f6 fbb4 	bl	8001aa4 <HAL_GPIO_Init>

}
 800b33c:	bf00      	nop
 800b33e:	3728      	adds	r7, #40	; 0x28
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}
 800b344:	40021000 	.word	0x40021000
 800b348:	48000800 	.word	0x48000800
 800b34c:	48000400 	.word	0x48000400

0800b350 <Get_Current_Address_Pointer>:
/*
 * @brief: Function code for returning Flash Chip address from storage
 *
 */
uint8_t Get_Current_Address_Pointer(uint8_t chip,uint8_t* address_Array)
{
 800b350:	b480      	push	{r7}
 800b352:	b087      	sub	sp, #28
 800b354:	af00      	add	r7, sp, #0
 800b356:	4603      	mov	r3, r0
 800b358:	6039      	str	r1, [r7, #0]
 800b35a:	71fb      	strb	r3, [r7, #7]


	if(chip < 4 && chip > 0)
 800b35c:	79fb      	ldrb	r3, [r7, #7]
 800b35e:	2b03      	cmp	r3, #3
 800b360:	d831      	bhi.n	800b3c6 <Get_Current_Address_Pointer+0x76>
 800b362:	79fb      	ldrb	r3, [r7, #7]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d02e      	beq.n	800b3c6 <Get_Current_Address_Pointer+0x76>
	{
		__HAL_RCC_PWR_CLK_ENABLE();
 800b368:	4a1a      	ldr	r2, [pc, #104]	; (800b3d4 <Get_Current_Address_Pointer+0x84>)
 800b36a:	4b1a      	ldr	r3, [pc, #104]	; (800b3d4 <Get_Current_Address_Pointer+0x84>)
 800b36c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b36e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b372:	6593      	str	r3, [r2, #88]	; 0x58
 800b374:	4b17      	ldr	r3, [pc, #92]	; (800b3d4 <Get_Current_Address_Pointer+0x84>)
 800b376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b37c:	60bb      	str	r3, [r7, #8]
 800b37e:	68bb      	ldr	r3, [r7, #8]
		//create pointer to register
		uint32_t* address = (uint32_t*)(&RTC->BKP2R) + (chip -1); //
 800b380:	79fb      	ldrb	r3, [r7, #7]
 800b382:	009a      	lsls	r2, r3, #2
 800b384:	4b14      	ldr	r3, [pc, #80]	; (800b3d8 <Get_Current_Address_Pointer+0x88>)
 800b386:	4413      	add	r3, r2
 800b388:	613b      	str	r3, [r7, #16]
		uint32_t temp = *address;
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	60fb      	str	r3, [r7, #12]
		//break up 24 bit number into 3 x 8 bit integer array
		for (int i = 0; i < 3; ++i)
 800b390:	2300      	movs	r3, #0
 800b392:	617b      	str	r3, [r7, #20]
 800b394:	e00c      	b.n	800b3b0 <Get_Current_Address_Pointer+0x60>
		{
			address_Array[i] = (temp>>(i*8))&0xFF;
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	683a      	ldr	r2, [r7, #0]
 800b39a:	4413      	add	r3, r2
 800b39c:	697a      	ldr	r2, [r7, #20]
 800b39e:	00d2      	lsls	r2, r2, #3
 800b3a0:	68f9      	ldr	r1, [r7, #12]
 800b3a2:	fa21 f202 	lsr.w	r2, r1, r2
 800b3a6:	b2d2      	uxtb	r2, r2
 800b3a8:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 3; ++i)
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	617b      	str	r3, [r7, #20]
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	2b02      	cmp	r3, #2
 800b3b4:	ddef      	ble.n	800b396 <Get_Current_Address_Pointer+0x46>
		}
		__HAL_RCC_PWR_CLK_DISABLE();
 800b3b6:	4a07      	ldr	r2, [pc, #28]	; (800b3d4 <Get_Current_Address_Pointer+0x84>)
 800b3b8:	4b06      	ldr	r3, [pc, #24]	; (800b3d4 <Get_Current_Address_Pointer+0x84>)
 800b3ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b3c0:	6593      	str	r3, [r2, #88]	; 0x58
		return 1;
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	e000      	b.n	800b3c8 <Get_Current_Address_Pointer+0x78>
	}
	//chip value out of range
	return 0;
 800b3c6:	2300      	movs	r3, #0
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	371c      	adds	r7, #28
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bc80      	pop	{r7}
 800b3d0:	4770      	bx	lr
 800b3d2:	bf00      	nop
 800b3d4:	40021000 	.word	0x40021000
 800b3d8:	40002854 	.word	0x40002854

0800b3dc <Set_Current_Address_Pointer>:
/*
 * @brief: Function code for storing Flash Chip address
 *
 */
uint8_t Set_Current_Address_Pointer(uint8_t chip,uint8_t* address_Array)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b087      	sub	sp, #28
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	6039      	str	r1, [r7, #0]
 800b3e6:	71fb      	strb	r3, [r7, #7]
	if(chip <= 4 && chip > 0)
 800b3e8:	79fb      	ldrb	r3, [r7, #7]
 800b3ea:	2b04      	cmp	r3, #4
 800b3ec:	d836      	bhi.n	800b45c <Set_Current_Address_Pointer+0x80>
 800b3ee:	79fb      	ldrb	r3, [r7, #7]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d033      	beq.n	800b45c <Set_Current_Address_Pointer+0x80>
		{
			__HAL_RCC_PWR_CLK_ENABLE();
 800b3f4:	4a1c      	ldr	r2, [pc, #112]	; (800b468 <Set_Current_Address_Pointer+0x8c>)
 800b3f6:	4b1c      	ldr	r3, [pc, #112]	; (800b468 <Set_Current_Address_Pointer+0x8c>)
 800b3f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3fe:	6593      	str	r3, [r2, #88]	; 0x58
 800b400:	4b19      	ldr	r3, [pc, #100]	; (800b468 <Set_Current_Address_Pointer+0x8c>)
 800b402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b408:	60bb      	str	r3, [r7, #8]
 800b40a:	68bb      	ldr	r3, [r7, #8]
			//create pointer to register
			uint32_t* address = (uint32_t*)(&RTC->BKP2R) + (chip -1); //
 800b40c:	79fb      	ldrb	r3, [r7, #7]
 800b40e:	009a      	lsls	r2, r3, #2
 800b410:	4b16      	ldr	r3, [pc, #88]	; (800b46c <Set_Current_Address_Pointer+0x90>)
 800b412:	4413      	add	r3, r2
 800b414:	60fb      	str	r3, [r7, #12]
			uint32_t temp = 0;
 800b416:	2300      	movs	r3, #0
 800b418:	617b      	str	r3, [r7, #20]
			//break up 24 bit number into 3 x 8 bit integer array
			for (int i = 0; i < 3; ++i)
 800b41a:	2300      	movs	r3, #0
 800b41c:	613b      	str	r3, [r7, #16]
 800b41e:	e00f      	b.n	800b440 <Set_Current_Address_Pointer+0x64>
			{
				temp |= address_Array[i] <<(8*i);
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	683a      	ldr	r2, [r7, #0]
 800b424:	4413      	add	r3, r2
 800b426:	781b      	ldrb	r3, [r3, #0]
 800b428:	461a      	mov	r2, r3
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	00db      	lsls	r3, r3, #3
 800b42e:	fa02 f303 	lsl.w	r3, r2, r3
 800b432:	461a      	mov	r2, r3
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	4313      	orrs	r3, r2
 800b438:	617b      	str	r3, [r7, #20]
			for (int i = 0; i < 3; ++i)
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	3301      	adds	r3, #1
 800b43e:	613b      	str	r3, [r7, #16]
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	2b02      	cmp	r3, #2
 800b444:	ddec      	ble.n	800b420 <Set_Current_Address_Pointer+0x44>
			}
			*address = temp;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	697a      	ldr	r2, [r7, #20]
 800b44a:	601a      	str	r2, [r3, #0]
			__HAL_RCC_PWR_CLK_DISABLE();
 800b44c:	4a06      	ldr	r2, [pc, #24]	; (800b468 <Set_Current_Address_Pointer+0x8c>)
 800b44e:	4b06      	ldr	r3, [pc, #24]	; (800b468 <Set_Current_Address_Pointer+0x8c>)
 800b450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b452:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b456:	6593      	str	r3, [r2, #88]	; 0x58
			return 1;
 800b458:	2301      	movs	r3, #1
 800b45a:	e000      	b.n	800b45e <Set_Current_Address_Pointer+0x82>
		}
		//chip value out of range
		return 0;
 800b45c:	2300      	movs	r3, #0
}
 800b45e:	4618      	mov	r0, r3
 800b460:	371c      	adds	r7, #28
 800b462:	46bd      	mov	sp, r7
 800b464:	bc80      	pop	{r7}
 800b466:	4770      	bx	lr
 800b468:	40021000 	.word	0x40021000
 800b46c:	40002854 	.word	0x40002854

0800b470 <Get_Active_Chip>:
/*
 * @brief: Code for retrieving active chip from back up registers
 *
 */
uint8_t Get_Active_Chip(void)
{
 800b470:	b480      	push	{r7}
 800b472:	b083      	sub	sp, #12
 800b474:	af00      	add	r7, sp, #0
	__HAL_RCC_PWR_CLK_ENABLE();
 800b476:	4a0e      	ldr	r2, [pc, #56]	; (800b4b0 <Get_Active_Chip+0x40>)
 800b478:	4b0d      	ldr	r3, [pc, #52]	; (800b4b0 <Get_Active_Chip+0x40>)
 800b47a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b47c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b480:	6593      	str	r3, [r2, #88]	; 0x58
 800b482:	4b0b      	ldr	r3, [pc, #44]	; (800b4b0 <Get_Active_Chip+0x40>)
 800b484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b48a:	603b      	str	r3, [r7, #0]
 800b48c:	683b      	ldr	r3, [r7, #0]
	uint8_t chip = ((RTC->BKP1R)&0xFF00)>>8;
 800b48e:	4b09      	ldr	r3, [pc, #36]	; (800b4b4 <Get_Active_Chip+0x44>)
 800b490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b492:	0a1b      	lsrs	r3, r3, #8
 800b494:	71fb      	strb	r3, [r7, #7]
	__HAL_RCC_PWR_CLK_DISABLE();
 800b496:	4a06      	ldr	r2, [pc, #24]	; (800b4b0 <Get_Active_Chip+0x40>)
 800b498:	4b05      	ldr	r3, [pc, #20]	; (800b4b0 <Get_Active_Chip+0x40>)
 800b49a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b49c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b4a0:	6593      	str	r3, [r2, #88]	; 0x58
	return chip;
 800b4a2:	79fb      	ldrb	r3, [r7, #7]
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	370c      	adds	r7, #12
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bc80      	pop	{r7}
 800b4ac:	4770      	bx	lr
 800b4ae:	bf00      	nop
 800b4b0:	40021000 	.word	0x40021000
 800b4b4:	40002800 	.word	0x40002800

0800b4b8 <Set_Active_Chip>:

void Set_Active_Chip(uint8_t chipnumber)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b085      	sub	sp, #20
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	4603      	mov	r3, r0
 800b4c0:	71fb      	strb	r3, [r7, #7]
	__HAL_RCC_PWR_CLK_ENABLE();
 800b4c2:	4a12      	ldr	r2, [pc, #72]	; (800b50c <Set_Active_Chip+0x54>)
 800b4c4:	4b11      	ldr	r3, [pc, #68]	; (800b50c <Set_Active_Chip+0x54>)
 800b4c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4cc:	6593      	str	r3, [r2, #88]	; 0x58
 800b4ce:	4b0f      	ldr	r3, [pc, #60]	; (800b50c <Set_Active_Chip+0x54>)
 800b4d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b4d6:	60bb      	str	r3, [r7, #8]
 800b4d8:	68bb      	ldr	r3, [r7, #8]
	uint32_t val = (RTC->BKP1R)&0xFFFF00FF;
 800b4da:	4b0d      	ldr	r3, [pc, #52]	; (800b510 <Set_Active_Chip+0x58>)
 800b4dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b4e2:	60fb      	str	r3, [r7, #12]
	val |= (chipnumber<<8);
 800b4e4:	79fb      	ldrb	r3, [r7, #7]
 800b4e6:	021b      	lsls	r3, r3, #8
 800b4e8:	461a      	mov	r2, r3
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	60fb      	str	r3, [r7, #12]
	RTC->BKP1R = val;
 800b4f0:	4a07      	ldr	r2, [pc, #28]	; (800b510 <Set_Active_Chip+0x58>)
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	6553      	str	r3, [r2, #84]	; 0x54
	__HAL_RCC_PWR_CLK_DISABLE();
 800b4f6:	4a05      	ldr	r2, [pc, #20]	; (800b50c <Set_Active_Chip+0x54>)
 800b4f8:	4b04      	ldr	r3, [pc, #16]	; (800b50c <Set_Active_Chip+0x54>)
 800b4fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b500:	6593      	str	r3, [r2, #88]	; 0x58
}
 800b502:	bf00      	nop
 800b504:	3714      	adds	r7, #20
 800b506:	46bd      	mov	sp, r7
 800b508:	bc80      	pop	{r7}
 800b50a:	4770      	bx	lr
 800b50c:	40021000 	.word	0x40021000
 800b510:	40002800 	.word	0x40002800

0800b514 <Get_Next_Active_Chip>:

uint8_t Get_Next_Active_Chip(void)
{
 800b514:	b480      	push	{r7}
 800b516:	b083      	sub	sp, #12
 800b518:	af00      	add	r7, sp, #0
	__HAL_RCC_PWR_CLK_ENABLE();
 800b51a:	4a0e      	ldr	r2, [pc, #56]	; (800b554 <Get_Next_Active_Chip+0x40>)
 800b51c:	4b0d      	ldr	r3, [pc, #52]	; (800b554 <Get_Next_Active_Chip+0x40>)
 800b51e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b524:	6593      	str	r3, [r2, #88]	; 0x58
 800b526:	4b0b      	ldr	r3, [pc, #44]	; (800b554 <Get_Next_Active_Chip+0x40>)
 800b528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b52a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b52e:	603b      	str	r3, [r7, #0]
 800b530:	683b      	ldr	r3, [r7, #0]
	uint8_t chip = ((RTC->BKP1R)&0xFF000000)>>24;
 800b532:	4b09      	ldr	r3, [pc, #36]	; (800b558 <Get_Next_Active_Chip+0x44>)
 800b534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b536:	0e1b      	lsrs	r3, r3, #24
 800b538:	71fb      	strb	r3, [r7, #7]
	__HAL_RCC_PWR_CLK_DISABLE();
 800b53a:	4a06      	ldr	r2, [pc, #24]	; (800b554 <Get_Next_Active_Chip+0x40>)
 800b53c:	4b05      	ldr	r3, [pc, #20]	; (800b554 <Get_Next_Active_Chip+0x40>)
 800b53e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b544:	6593      	str	r3, [r2, #88]	; 0x58
	return chip;
 800b546:	79fb      	ldrb	r3, [r7, #7]
}
 800b548:	4618      	mov	r0, r3
 800b54a:	370c      	adds	r7, #12
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bc80      	pop	{r7}
 800b550:	4770      	bx	lr
 800b552:	bf00      	nop
 800b554:	40021000 	.word	0x40021000
 800b558:	40002800 	.word	0x40002800

0800b55c <Set_Next_Active_Chip>:

void Set_Next_Active_Chip(uint8_t chipnumber)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b085      	sub	sp, #20
 800b560:	af00      	add	r7, sp, #0
 800b562:	4603      	mov	r3, r0
 800b564:	71fb      	strb	r3, [r7, #7]
	__HAL_RCC_PWR_CLK_ENABLE();
 800b566:	4a12      	ldr	r2, [pc, #72]	; (800b5b0 <Set_Next_Active_Chip+0x54>)
 800b568:	4b11      	ldr	r3, [pc, #68]	; (800b5b0 <Set_Next_Active_Chip+0x54>)
 800b56a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b56c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b570:	6593      	str	r3, [r2, #88]	; 0x58
 800b572:	4b0f      	ldr	r3, [pc, #60]	; (800b5b0 <Set_Next_Active_Chip+0x54>)
 800b574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b57a:	60bb      	str	r3, [r7, #8]
 800b57c:	68bb      	ldr	r3, [r7, #8]
	uint32_t val = (RTC->BKP1R)&0x00FFFFFF;
 800b57e:	4b0d      	ldr	r3, [pc, #52]	; (800b5b4 <Set_Next_Active_Chip+0x58>)
 800b580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b582:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b586:	60fb      	str	r3, [r7, #12]
	val |= (chipnumber<<24);
 800b588:	79fb      	ldrb	r3, [r7, #7]
 800b58a:	061b      	lsls	r3, r3, #24
 800b58c:	461a      	mov	r2, r3
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	4313      	orrs	r3, r2
 800b592:	60fb      	str	r3, [r7, #12]
	RTC->BKP1R = val;
 800b594:	4a07      	ldr	r2, [pc, #28]	; (800b5b4 <Set_Next_Active_Chip+0x58>)
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	6553      	str	r3, [r2, #84]	; 0x54
	__HAL_RCC_PWR_CLK_DISABLE();
 800b59a:	4a05      	ldr	r2, [pc, #20]	; (800b5b0 <Set_Next_Active_Chip+0x54>)
 800b59c:	4b04      	ldr	r3, [pc, #16]	; (800b5b0 <Set_Next_Active_Chip+0x54>)
 800b59e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b5a4:	6593      	str	r3, [r2, #88]	; 0x58
}
 800b5a6:	bf00      	nop
 800b5a8:	3714      	adds	r7, #20
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bc80      	pop	{r7}
 800b5ae:	4770      	bx	lr
 800b5b0:	40021000 	.word	0x40021000
 800b5b4:	40002800 	.word	0x40002800

0800b5b8 <to_binary_format>:

uint8_t* to_binary_format(GPS_Data_t gps_data ,uint8_t ID)
{
 800b5b8:	b084      	sub	sp, #16
 800b5ba:	b580      	push	{r7, lr}
 800b5bc:	b082      	sub	sp, #8
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	f107 0e10 	add.w	lr, r7, #16
 800b5c4:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
		unsigned char bytes[4];		//for 4 byte long unsigned integer arrays
		uint32_t num;				//for long numbers
	} byte_converter;

	/*0. Byte 0: Packet ID*/
	*driftbuffer = ID;
 800b5c8:	4a23      	ldr	r2, [pc, #140]	; (800b658 <to_binary_format+0xa0>)
 800b5ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b5ce:	7013      	strb	r3, [r2, #0]
	/*1. Bytes 1 - 4:  Epoch Time*/
	byte_converter.num = gps_data.Etime;
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	607b      	str	r3, [r7, #4]
	memcpy(&driftbuffer[1],(byte_converter).bytes,4);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	4a20      	ldr	r2, [pc, #128]	; (800b658 <to_binary_format+0xa0>)
 800b5d8:	f8c2 3001 	str.w	r3, [r2, #1]

	/* Add coordinates bytes 1 - 5 = lat, bytes 6 - 10 = long*/
	byte_converter.a = gps_data.coordinates.lat;
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	607b      	str	r3, [r7, #4]
	memcpy(&driftbuffer[5],byte_converter.bytes,4);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	4a1d      	ldr	r2, [pc, #116]	; (800b658 <to_binary_format+0xa0>)
 800b5e4:	f8c2 3005 	str.w	r3, [r2, #5]
	byte_converter.a = gps_data.coordinates.longi;
 800b5e8:	69bb      	ldr	r3, [r7, #24]
 800b5ea:	607b      	str	r3, [r7, #4]
	memcpy(&driftbuffer[9],byte_converter.bytes,4);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	4a1a      	ldr	r2, [pc, #104]	; (800b658 <to_binary_format+0xa0>)
 800b5f0:	f8c2 3009 	str.w	r3, [r2, #9]


	//convert HDOP,VDOP, PDOP to 2 bytes big endian
	driftbuffer[13] = gps_data.diag.HDOP.digit;
 800b5f4:	7fba      	ldrb	r2, [r7, #30]
 800b5f6:	4b18      	ldr	r3, [pc, #96]	; (800b658 <to_binary_format+0xa0>)
 800b5f8:	735a      	strb	r2, [r3, #13]
	driftbuffer[14] = gps_data.diag.HDOP.precision;
 800b5fa:	7ffa      	ldrb	r2, [r7, #31]
 800b5fc:	4b16      	ldr	r3, [pc, #88]	; (800b658 <to_binary_format+0xa0>)
 800b5fe:	739a      	strb	r2, [r3, #14]
	driftbuffer[15] = gps_data.diag.VDOP.digit;
 800b600:	f897 2020 	ldrb.w	r2, [r7, #32]
 800b604:	4b14      	ldr	r3, [pc, #80]	; (800b658 <to_binary_format+0xa0>)
 800b606:	73da      	strb	r2, [r3, #15]
	driftbuffer[16] = gps_data.diag.VDOP.precision;
 800b608:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b60c:	4b12      	ldr	r3, [pc, #72]	; (800b658 <to_binary_format+0xa0>)
 800b60e:	741a      	strb	r2, [r3, #16]
	driftbuffer[17] = gps_data.diag.PDOP.digit;
 800b610:	7f3a      	ldrb	r2, [r7, #28]
 800b612:	4b11      	ldr	r3, [pc, #68]	; (800b658 <to_binary_format+0xa0>)
 800b614:	745a      	strb	r2, [r3, #17]
	driftbuffer[18] = gps_data.diag.PDOP.precision;
 800b616:	7f7a      	ldrb	r2, [r7, #29]
 800b618:	4b0f      	ldr	r3, [pc, #60]	; (800b658 <to_binary_format+0xa0>)
 800b61a:	749a      	strb	r2, [r3, #18]
	driftbuffer[19] = (gps_data.diag.num_sats);
 800b61c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b620:	4b0d      	ldr	r3, [pc, #52]	; (800b658 <to_binary_format+0xa0>)
 800b622:	74da      	strb	r2, [r3, #19]
	driftbuffer[19] = driftbuffer[19]<<2;
 800b624:	4b0c      	ldr	r3, [pc, #48]	; (800b658 <to_binary_format+0xa0>)
 800b626:	7cdb      	ldrb	r3, [r3, #19]
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	b2da      	uxtb	r2, r3
 800b62c:	4b0a      	ldr	r3, [pc, #40]	; (800b658 <to_binary_format+0xa0>)
 800b62e:	74da      	strb	r2, [r3, #19]
	driftbuffer[19] |= gps_data.diag.fix_type;
 800b630:	4b09      	ldr	r3, [pc, #36]	; (800b658 <to_binary_format+0xa0>)
 800b632:	7cda      	ldrb	r2, [r3, #19]
 800b634:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b638:	4313      	orrs	r3, r2
 800b63a:	b2da      	uxtb	r2, r3
 800b63c:	4b06      	ldr	r3, [pc, #24]	; (800b658 <to_binary_format+0xa0>)
 800b63e:	74da      	strb	r2, [r3, #19]
//	//break down pressure into 4 unsigned bytes
//	driftbuffer[24] = (uint8_t)(packet.Temp&0xFF000000)>>24;
//	driftbuffer[25] = (uint8_t)(packet.Temp&0x00FF0000)>>16;
//	driftbuffer[26] = (uint8_t)(packet.Temp&0x0000FF00)>>8;
//	driftbuffer[27] = (uint8_t)(packet.Temp&0x00000000FF);
	driftbuffer[24] = 0xd; //end of packet character
 800b640:	4b05      	ldr	r3, [pc, #20]	; (800b658 <to_binary_format+0xa0>)
 800b642:	220d      	movs	r2, #13
 800b644:	761a      	strb	r2, [r3, #24]

	//return a pointer the the array driftbuffer;
	return driftbuffer;
 800b646:	4b04      	ldr	r3, [pc, #16]	; (800b658 <to_binary_format+0xa0>)
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3708      	adds	r7, #8
 800b64c:	46bd      	mov	sp, r7
 800b64e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b652:	b004      	add	sp, #16
 800b654:	4770      	bx	lr
 800b656:	bf00      	nop
 800b658:	200008fc 	.word	0x200008fc

0800b65c <get_driftBuffer_Size>:

uint8_t  get_driftBuffer_Size(void)
{
 800b65c:	b480      	push	{r7}
 800b65e:	af00      	add	r7, sp, #0
	return DRIFTBUFFER_SIZE;
 800b660:	2319      	movs	r3, #25
}
 800b662:	4618      	mov	r0, r3
 800b664:	46bd      	mov	sp, r7
 800b666:	bc80      	pop	{r7}
 800b668:	4770      	bx	lr
	...

0800b66c <Routine_ASYNC_IRIDIUM_RX>:
/*
 * @brief: Routine for Ring Alert Detection on IRidium Ring Pin
 */

void Routine_ASYNC_IRIDIUM_RX(void)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b09a      	sub	sp, #104	; 0x68
 800b670:	af00      	add	r7, sp, #0
	printf("Incoming Message from Satellite: Receiving...");
 800b672:	480f      	ldr	r0, [pc, #60]	; (800b6b0 <Routine_ASYNC_IRIDIUM_RX+0x44>)
 800b674:	f002 f8ea 	bl	800d84c <printf>
	//intialise modem
	if(IR_Init_Module() == IR_OK)
 800b678:	f7fe fd80 	bl	800a17c <IR_Init_Module>
 800b67c:	4603      	mov	r3, r0
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d10f      	bne.n	800b6a2 <Routine_ASYNC_IRIDIUM_RX+0x36>
	{
		//recieve message
		uint8_t message[100] = {0};
 800b682:	463b      	mov	r3, r7
 800b684:	2264      	movs	r2, #100	; 0x64
 800b686:	2100      	movs	r1, #0
 800b688:	4618      	mov	r0, r3
 800b68a:	f001 fe6e 	bl	800d36a <memset>
		uint16_t num_messages = 0;
 800b68e:	2300      	movs	r3, #0
 800b690:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
		IR_recieve_String(message,100,&num_messages);
 800b694:	f107 0266 	add.w	r2, r7, #102	; 0x66
 800b698:	463b      	mov	r3, r7
 800b69a:	2164      	movs	r1, #100	; 0x64
 800b69c:	4618      	mov	r0, r3
 800b69e:	f7ff f87b 	bl	800a798 <IR_recieve_String>
	}
	printf("Message Received!\r\n");
 800b6a2:	4804      	ldr	r0, [pc, #16]	; (800b6b4 <Routine_ASYNC_IRIDIUM_RX+0x48>)
 800b6a4:	f002 f94a 	bl	800d93c <puts>
}
 800b6a8:	bf00      	nop
 800b6aa:	3768      	adds	r7, #104	; 0x68
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}
 800b6b0:	08014f3c 	.word	0x08014f3c
 800b6b4:	08014f6c 	.word	0x08014f6c

0800b6b8 <Routine_Async_IMUevent_Sample>:

/*
 * @brief: Routine for IMU event detection
 */
void Routine_Async_IMUevent_Sample(void)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	af00      	add	r7, sp, #0

		 printf("IMU Event Detected while awake: Sampling...");
 800b6bc:	4803      	ldr	r0, [pc, #12]	; (800b6cc <Routine_Async_IMUevent_Sample+0x14>)
 800b6be:	f002 f8c5 	bl	800d84c <printf>

		printf("Done\r\n");
 800b6c2:	4803      	ldr	r0, [pc, #12]	; (800b6d0 <Routine_Async_IMUevent_Sample+0x18>)
 800b6c4:	f002 f93a 	bl	800d93c <puts>
		//ROUTINE END
}
 800b6c8:	bf00      	nop
 800b6ca:	bd80      	pop	{r7, pc}
 800b6cc:	08014f80 	.word	0x08014f80
 800b6d0:	08014fac 	.word	0x08014fac

0800b6d4 <POR_Handler>:
/*
 * @brief: Power On Reset Handler for BUOY (CASE: NRST Line Pulled low)
 */
void POR_Handler(void)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	af00      	add	r7, sp, #0
	  //clear flags
	  __HAL_RCC_CLEAR_RESET_FLAGS();
 800b6d8:	4a14      	ldr	r2, [pc, #80]	; (800b72c <POR_Handler+0x58>)
 800b6da:	4b14      	ldr	r3, [pc, #80]	; (800b72c <POR_Handler+0x58>)
 800b6dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b6e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b6e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	  //clear the back up registers
	  HAL_PWR_EnableBkUpAccess();
 800b6e8:	f7f6 fca6 	bl	8002038 <HAL_PWR_EnableBkUpAccess>
	  __HAL_RCC_BACKUPRESET_FORCE();
 800b6ec:	4a0f      	ldr	r2, [pc, #60]	; (800b72c <POR_Handler+0x58>)
 800b6ee:	4b0f      	ldr	r3, [pc, #60]	; (800b72c <POR_Handler+0x58>)
 800b6f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b6f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	  __HAL_RCC_BACKUPRESET_RELEASE();
 800b6fc:	4a0b      	ldr	r2, [pc, #44]	; (800b72c <POR_Handler+0x58>)
 800b6fe:	4b0b      	ldr	r3, [pc, #44]	; (800b72c <POR_Handler+0x58>)
 800b700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b704:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	  HAL_PWR_DisableBkUpAccess();
 800b70c:	f7f6 fca2 	bl	8002054 <HAL_PWR_DisableBkUpAccess>
	  SystemClock_Config();
 800b710:	f7ff fb9a 	bl	800ae48 <SystemClock_Config>
	  //deactivate and disable wake up timers
	  HAL_PWREx_DisableInternalWakeUpLine();
 800b714:	f7f6 fd68 	bl	80021e8 <HAL_PWREx_DisableInternalWakeUpLine>
	  /* Clear PWR wake up Flag */
	 __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800b718:	4b05      	ldr	r3, [pc, #20]	; (800b730 <POR_Handler+0x5c>)
 800b71a:	221f      	movs	r2, #31
 800b71c:	619a      	str	r2, [r3, #24]
	 __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 800b71e:	4b04      	ldr	r3, [pc, #16]	; (800b730 <POR_Handler+0x5c>)
 800b720:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b724:	619a      	str	r2, [r3, #24]
	  //reinitialise the clock
}
 800b726:	bf00      	nop
 800b728:	bd80      	pop	{r7, pc}
 800b72a:	bf00      	nop
 800b72c:	40021000 	.word	0x40021000
 800b730:	40007000 	.word	0x40007000

0800b734 <BOR_Handler>:
/*
 * @brief: Brown Out Reset Handler for BUOY (case Vbat < Vbrownoutthreshold)
 */
void BOR_Handler(void)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b082      	sub	sp, #8
 800b738:	af00      	add	r7, sp, #0
	  //clear flags
	  __HAL_RCC_CLEAR_RESET_FLAGS();
 800b73a:	4a11      	ldr	r2, [pc, #68]	; (800b780 <BOR_Handler+0x4c>)
 800b73c:	4b10      	ldr	r3, [pc, #64]	; (800b780 <BOR_Handler+0x4c>)
 800b73e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b742:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b746:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	  // transmit log to PC

	  char* msg= "Warning! Device encountered a Brown Out. Exiting Program...\r\n";
 800b74a:	4b0e      	ldr	r3, [pc, #56]	; (800b784 <BOR_Handler+0x50>)
 800b74c:	607b      	str	r3, [r7, #4]
	  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),100);
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f7f4 fd48 	bl	80001e4 <strlen>
 800b754:	4603      	mov	r3, r0
 800b756:	b29a      	uxth	r2, r3
 800b758:	2364      	movs	r3, #100	; 0x64
 800b75a:	6879      	ldr	r1, [r7, #4]
 800b75c:	480a      	ldr	r0, [pc, #40]	; (800b788 <BOR_Handler+0x54>)
 800b75e:	f7fb f8c7 	bl	80068f0 <HAL_UART_Transmit>
	  //perform system reset
	  POR_Handler();
 800b762:	f7ff ffb7 	bl	800b6d4 <POR_Handler>
	  HAL_NVIC_SystemReset();
 800b766:	f7f5 fe28 	bl	80013ba <HAL_NVIC_SystemReset>
	  /*
	   * Failure to perform system reset causes device to enter an infinite loop
	   */
	  while(1)
	  {
		  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 800b76a:	2120      	movs	r1, #32
 800b76c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b770:	f7f6 fc49 	bl	8002006 <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 800b774:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b778:	f7f5 fc90 	bl	800109c <HAL_Delay>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 800b77c:	e7f5      	b.n	800b76a <BOR_Handler+0x36>
 800b77e:	bf00      	nop
 800b780:	40021000 	.word	0x40021000
 800b784:	08014fb4 	.word	0x08014fb4
 800b788:	20003734 	.word	0x20003734

0800b78c <main>:
 **
 **===========================================================================
 **/

int main(void)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b084      	sub	sp, #16
 800b790:	af00      	add	r7, sp, #0
//======================== 1. SYSTEM INIT & CLOCK CONFIG ========================//

	HAL_Init();				//Init Flash prefetch, systick timer, NVIC and LL functions
 800b792:	f7f5 fc0d 	bl	8000fb0 <HAL_Init>
	SystemClock_Config();	//configure clock
 800b796:	f7ff fb57 	bl	800ae48 <SystemClock_Config>
	GPIO_Set_Pin_LP();		//Configure all unused GPIO pins to low Power mode
 800b79a:	f7ff fd4b 	bl	800b234 <GPIO_Set_Pin_LP>
	Init_Debug();			// initialize debug peripherals
 800b79e:	f7ff fae3 	bl	800ad68 <Init_Debug>

/*
 * When system powers on, check for any asynchronous resets that
 * may have occured. Use this area to add in any reset handling
 */
	if(__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == SET)
 800b7a2:	4b9f      	ldr	r3, [pc, #636]	; (800ba20 <main+0x294>)
 800b7a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b7a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d001      	beq.n	800b7b4 <main+0x28>
	{
	  BOR_Handler();
 800b7b0:	f7ff ffc0 	bl	800b734 <BOR_Handler>
	}
	uint8_t flag = __HAL_RCC_GET_PORRST_FLAG();
 800b7b4:	4b9a      	ldr	r3, [pc, #616]	; (800ba20 <main+0x294>)
 800b7b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b7ba:	0e9b      	lsrs	r3, r3, #26
 800b7bc:	f003 0305 	and.w	r3, r3, #5
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d001      	beq.n	800b7c8 <main+0x3c>
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	e000      	b.n	800b7ca <main+0x3e>
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	73fb      	strb	r3, [r7, #15]
	if(flag  == SET)
 800b7cc:	7bfb      	ldrb	r3, [r7, #15]
 800b7ce:	2b01      	cmp	r3, #1
 800b7d0:	d104      	bne.n	800b7dc <main+0x50>
	{
	  printf("Software Reset Detected. Initializing main program...\r\n");
 800b7d2:	4894      	ldr	r0, [pc, #592]	; (800ba24 <main+0x298>)
 800b7d4:	f002 f8b2 	bl	800d93c <puts>
	  POR_Handler();
 800b7d8:	f7ff ff7c 	bl	800b6d4 <POR_Handler>
	   * If an interrupt occurred while the device was sleeping, check the
	   * flags to determine if this occurred
	   */

	  //check for interrupts on wake up pins during deep sleep
	  __HAL_RCC_PWR_CLK_ENABLE();
 800b7dc:	4a90      	ldr	r2, [pc, #576]	; (800ba20 <main+0x294>)
 800b7de:	4b90      	ldr	r3, [pc, #576]	; (800ba20 <main+0x294>)
 800b7e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7e6:	6593      	str	r3, [r2, #88]	; 0x58
 800b7e8:	4b8d      	ldr	r3, [pc, #564]	; (800ba20 <main+0x294>)
 800b7ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7f0:	60bb      	str	r3, [r7, #8]
 800b7f2:	68bb      	ldr	r3, [r7, #8]
	  if(__HAL_PWR_GET_FLAG(IMU_EVENT_WAKE_FLAG)|| __HAL_PWR_GET_FLAG(IRIDIUM_RING_WAKE_FLAG))
 800b7f4:	4b8c      	ldr	r3, [pc, #560]	; (800ba28 <main+0x29c>)
 800b7f6:	691b      	ldr	r3, [r3, #16]
 800b7f8:	f003 0310 	and.w	r3, r3, #16
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d105      	bne.n	800b80c <main+0x80>
 800b800:	4b89      	ldr	r3, [pc, #548]	; (800ba28 <main+0x29c>)
 800b802:	691b      	ldr	r3, [r3, #16]
 800b804:	f003 0302 	and.w	r3, r3, #2
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d039      	beq.n	800b880 <main+0xf4>
	  {
		  Current_State = __GET_PREV_STATE();			//get previous state from back up reg
 800b80c:	4b87      	ldr	r3, [pc, #540]	; (800ba2c <main+0x2a0>)
 800b80e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b810:	b2da      	uxtb	r2, r3
 800b812:	4b87      	ldr	r3, [pc, #540]	; (800ba30 <main+0x2a4>)
 800b814:	701a      	strb	r2, [r3, #0]
		  if(__HAL_PWR_GET_FLAG(IMU_EVENT_WAKE_FLAG))
 800b816:	4b84      	ldr	r3, [pc, #528]	; (800ba28 <main+0x29c>)
 800b818:	691b      	ldr	r3, [r3, #16]
 800b81a:	f003 0310 	and.w	r3, r3, #16
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d004      	beq.n	800b82c <main+0xa0>
		  {
			  __HAL_PWR_CLEAR_FLAG(IMU_EVENT_WAKE_FLAG);	//clear  flag in PWR SR
 800b822:	4b81      	ldr	r3, [pc, #516]	; (800ba28 <main+0x29c>)
 800b824:	2210      	movs	r2, #16
 800b826:	619a      	str	r2, [r3, #24]
			  Routine_ASYNC_IMU_EVENT();				//Perform IMU Event Detection Routine
 800b828:	f000 f97e 	bl	800bb28 <Routine_ASYNC_IMU_EVENT>
		  }
		  if(__HAL_PWR_GET_FLAG(IRIDIUM_RING_WAKE_FLAG))	//clear  flag in PWR SR
 800b82c:	4b7e      	ldr	r3, [pc, #504]	; (800ba28 <main+0x29c>)
 800b82e:	691b      	ldr	r3, [r3, #16]
 800b830:	f003 0302 	and.w	r3, r3, #2
 800b834:	2b00      	cmp	r3, #0
 800b836:	d004      	beq.n	800b842 <main+0xb6>
		  {
			__HAL_PWR_CLEAR_FLAG(IRIDIUM_RING_WAKE_FLAG);
 800b838:	4b7b      	ldr	r3, [pc, #492]	; (800ba28 <main+0x29c>)
 800b83a:	2202      	movs	r2, #2
 800b83c:	619a      	str	r2, [r3, #24]
			Routine_ASYNC_IRIDIUM_RX();
 800b83e:	f7ff ff15 	bl	800b66c <Routine_ASYNC_IRIDIUM_RX>

		  }
		  if(Current_State == STATE_SLEEP)				//return to sleep if Interrupt event handled before wake up
 800b842:	4b7b      	ldr	r3, [pc, #492]	; (800ba30 <main+0x2a4>)
 800b844:	781b      	ldrb	r3, [r3, #0]
 800b846:	2b03      	cmp	r3, #3
 800b848:	d10f      	bne.n	800b86a <main+0xde>
		  {

			  printf("System Going Back To Sleep\r\n"); 	//check how long device was asleep for
 800b84a:	487a      	ldr	r0, [pc, #488]	; (800ba34 <main+0x2a8>)
 800b84c:	f002 f876 	bl	800d93c <puts>
			  set_WUP_Pin(IMU_EVENT_WAKE_PIN, MODE_WUP);	//reenable wake up pins
 800b850:	2100      	movs	r1, #0
 800b852:	2010      	movs	r0, #16
 800b854:	f7ff fbc6 	bl	800afe4 <set_WUP_Pin>
			  set_WUP_Pin(IRIDIUM_RING_WAKE_PIN, MODE_WUP);
 800b858:	2100      	movs	r1, #0
 800b85a:	2002      	movs	r0, #2
 800b85c:	f7ff fbc2 	bl	800afe4 <set_WUP_Pin>
			  Go_To_Sleep(STDBY,10);						//return to sleep
 800b860:	210a      	movs	r1, #10
 800b862:	2001      	movs	r0, #1
 800b864:	f7ff fb86 	bl	800af74 <Go_To_Sleep>
 800b868:	e00a      	b.n	800b880 <main+0xf4>
		  }
		  	 else
		  {

		  	  printf("Going Back to Main Loop:\r\n");		//if come from wake mode
 800b86a:	4873      	ldr	r0, [pc, #460]	; (800ba38 <main+0x2ac>)
 800b86c:	f002 f866 	bl	800d93c <puts>
			  __SET_CURRENT_STATE(STATE_ASYNCINT);
 800b870:	4a6e      	ldr	r2, [pc, #440]	; (800ba2c <main+0x2a0>)
 800b872:	4b6e      	ldr	r3, [pc, #440]	; (800ba2c <main+0x2a0>)
 800b874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b876:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b87a:	f043 0307 	orr.w	r3, r3, #7
 800b87e:	6513      	str	r3, [r2, #80]	; 0x50
	   * states are defined in the enum Buoy_State_typedef. The state check block performs the following routine
	   *
	   */

	  //enable access to back up registers
	  switch(__GET_PREV_STATE())
 800b880:	4b6a      	ldr	r3, [pc, #424]	; (800ba2c <main+0x2a0>)
 800b882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b884:	b2db      	uxtb	r3, r3
 800b886:	3b01      	subs	r3, #1
 800b888:	2b06      	cmp	r3, #6
 800b88a:	d867      	bhi.n	800b95c <main+0x1d0>
 800b88c:	a201      	add	r2, pc, #4	; (adr r2, 800b894 <main+0x108>)
 800b88e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b892:	bf00      	nop
 800b894:	0800b8b1 	.word	0x0800b8b1
 800b898:	0800b8b9 	.word	0x0800b8b9
 800b89c:	0800b913 	.word	0x0800b913
 800b8a0:	0800b95d 	.word	0x0800b95d
 800b8a4:	0800b95d 	.word	0x0800b95d
 800b8a8:	0800b943 	.word	0x0800b943
 800b8ac:	0800b8b1 	.word	0x0800b8b1
	  {
	  	 case STATE_ASYNCINT:
	  	 case STATE_RESET:
	  	 //system encountered a power on reset, put peripherals here
	  	 Current_State = STATE_SAMPLE;
 800b8b0:	4b5f      	ldr	r3, [pc, #380]	; (800ba30 <main+0x2a4>)
 800b8b2:	2202      	movs	r2, #2
 800b8b4:	701a      	strb	r2, [r3, #0]
	  	 break;
 800b8b6:	e054      	b.n	800b962 <main+0x1d6>

	  	 case STATE_SAMPLE:
	  	 //check how many samples have been recorded by the Buoy
	  	 sample_count = __GET_SAMPLE_COUNT();
 800b8b8:	4b5c      	ldr	r3, [pc, #368]	; (800ba2c <main+0x2a0>)
 800b8ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8bc:	0a1b      	lsrs	r3, r3, #8
 800b8be:	b2da      	uxtb	r2, r3
 800b8c0:	4b5e      	ldr	r3, [pc, #376]	; (800ba3c <main+0x2b0>)
 800b8c2:	701a      	strb	r2, [r3, #0]
	  	 if(sample_count > 3)
 800b8c4:	4b5d      	ldr	r3, [pc, #372]	; (800ba3c <main+0x2b0>)
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	2b03      	cmp	r3, #3
 800b8ca:	d903      	bls.n	800b8d4 <main+0x148>
	  	 {
	  		 //set next Buoy State to Transmit
	  		 Current_State = STATE_TRANSMIT;
 800b8cc:	4b58      	ldr	r3, [pc, #352]	; (800ba30 <main+0x2a4>)
 800b8ce:	2206      	movs	r2, #6
 800b8d0:	701a      	strb	r2, [r3, #0]
	  		 Current_State = STATE_SLEEP;
	  		 __HAL_RCC_PWR_CLK_ENABLE();
	  		 __SET_CURRENT_STATE(Current_State);
	  		 __HAL_RCC_PWR_CLK_DISABLE();
	  	 }
	  	 break;
 800b8d2:	e046      	b.n	800b962 <main+0x1d6>
	  		 Current_State = STATE_SLEEP;
 800b8d4:	4b56      	ldr	r3, [pc, #344]	; (800ba30 <main+0x2a4>)
 800b8d6:	2203      	movs	r2, #3
 800b8d8:	701a      	strb	r2, [r3, #0]
	  		 __HAL_RCC_PWR_CLK_ENABLE();
 800b8da:	4a51      	ldr	r2, [pc, #324]	; (800ba20 <main+0x294>)
 800b8dc:	4b50      	ldr	r3, [pc, #320]	; (800ba20 <main+0x294>)
 800b8de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b8e4:	6593      	str	r3, [r2, #88]	; 0x58
 800b8e6:	4b4e      	ldr	r3, [pc, #312]	; (800ba20 <main+0x294>)
 800b8e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8ee:	607b      	str	r3, [r7, #4]
 800b8f0:	687b      	ldr	r3, [r7, #4]
	  		 __SET_CURRENT_STATE(Current_State);
 800b8f2:	4a4e      	ldr	r2, [pc, #312]	; (800ba2c <main+0x2a0>)
 800b8f4:	4b4d      	ldr	r3, [pc, #308]	; (800ba2c <main+0x2a0>)
 800b8f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b8fc:	494c      	ldr	r1, [pc, #304]	; (800ba30 <main+0x2a4>)
 800b8fe:	7809      	ldrb	r1, [r1, #0]
 800b900:	430b      	orrs	r3, r1
 800b902:	6513      	str	r3, [r2, #80]	; 0x50
	  		 __HAL_RCC_PWR_CLK_DISABLE();
 800b904:	4a46      	ldr	r2, [pc, #280]	; (800ba20 <main+0x294>)
 800b906:	4b46      	ldr	r3, [pc, #280]	; (800ba20 <main+0x294>)
 800b908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b90a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b90e:	6593      	str	r3, [r2, #88]	; 0x58
	  	 break;
 800b910:	e027      	b.n	800b962 <main+0x1d6>

	  	 case STATE_SLEEP:
	  	hrtc.Instance = RTC;					 			//attach RTC instance to handler
 800b912:	4b4b      	ldr	r3, [pc, #300]	; (800ba40 <main+0x2b4>)
 800b914:	4a45      	ldr	r2, [pc, #276]	; (800ba2c <main+0x2a0>)
 800b916:	601a      	str	r2, [r3, #0]
	  	HAL_PWREx_DisableInternalWakeUpLine();				//clear wake up pending interrupt from internal wake up
 800b918:	f7f6 fc66 	bl	80021e8 <HAL_PWREx_DisableInternalWakeUpLine>
	  	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);					//clear pending interrupt from ext wake up pins
 800b91c:	4b42      	ldr	r3, [pc, #264]	; (800ba28 <main+0x29c>)
 800b91e:	221f      	movs	r2, #31
 800b920:	619a      	str	r2, [r3, #24]
	  	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 800b922:	4b41      	ldr	r3, [pc, #260]	; (800ba28 <main+0x29c>)
 800b924:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b928:	619a      	str	r2, [r3, #24]
		set_WUP_Pin(IMU_EVENT_WAKE_PIN,MODE_EXTI); 	  		//reconfigure wake up pins
 800b92a:	2101      	movs	r1, #1
 800b92c:	2010      	movs	r0, #16
 800b92e:	f7ff fb59 	bl	800afe4 <set_WUP_Pin>
		set_WUP_Pin(IRIDIUM_RING_WAKE_PIN,MODE_EXTI);  	  	//set Current State to Sample
 800b932:	2101      	movs	r1, #1
 800b934:	2002      	movs	r0, #2
 800b936:	f7ff fb55 	bl	800afe4 <set_WUP_Pin>
	  	Current_State = STATE_SAMPLE;
 800b93a:	4b3d      	ldr	r3, [pc, #244]	; (800ba30 <main+0x2a4>)
 800b93c:	2202      	movs	r2, #2
 800b93e:	701a      	strb	r2, [r3, #0]
	  	 break;
 800b940:	e00f      	b.n	800b962 <main+0x1d6>

	  	 case STATE_TRANSMIT:
	  	 Current_State = STATE_SLEEP;
 800b942:	4b3b      	ldr	r3, [pc, #236]	; (800ba30 <main+0x2a4>)
 800b944:	2203      	movs	r2, #3
 800b946:	701a      	strb	r2, [r3, #0]
  		 __SET_CURRENT_STATE(Current_State);
 800b948:	4a38      	ldr	r2, [pc, #224]	; (800ba2c <main+0x2a0>)
 800b94a:	4b38      	ldr	r3, [pc, #224]	; (800ba2c <main+0x2a0>)
 800b94c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b94e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b952:	4937      	ldr	r1, [pc, #220]	; (800ba30 <main+0x2a4>)
 800b954:	7809      	ldrb	r1, [r1, #0]
 800b956:	430b      	orrs	r3, r1
 800b958:	6513      	str	r3, [r2, #80]	; 0x50
	  	 break;
 800b95a:	e002      	b.n	800b962 <main+0x1d6>

	  	 //default case: reset state
	  	 default:
	  	 Current_State = STATE_INIT;
 800b95c:	4b34      	ldr	r3, [pc, #208]	; (800ba30 <main+0x2a4>)
 800b95e:	2200      	movs	r2, #0
 800b960:	701a      	strb	r2, [r3, #0]
	  }
	  __HAL_RCC_PWR_CLK_DISABLE();
 800b962:	4a2f      	ldr	r2, [pc, #188]	; (800ba20 <main+0x294>)
 800b964:	4b2e      	ldr	r3, [pc, #184]	; (800ba20 <main+0x294>)
 800b966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b96c:	6593      	str	r3, [r2, #88]	; 0x58
//============================== 5. STATE FUNCTIONS =============================//

	  /*
	   * Place Routine code Here
	   */
	  if(Current_State == STATE_INIT)
 800b96e:	4b30      	ldr	r3, [pc, #192]	; (800ba30 <main+0x2a4>)
 800b970:	781b      	ldrb	r3, [r3, #0]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d104      	bne.n	800b980 <main+0x1f4>
	  {
		  Routine_Init_STATE();
 800b976:	f000 fc39 	bl	800c1ec <Routine_Init_STATE>
		  Current_State = STATE_RESET;
 800b97a:	4b2d      	ldr	r3, [pc, #180]	; (800ba30 <main+0x2a4>)
 800b97c:	2201      	movs	r2, #1
 800b97e:	701a      	strb	r2, [r3, #0]
	  }

	  if(Current_State == STATE_RESET)
 800b980:	4b2b      	ldr	r3, [pc, #172]	; (800ba30 <main+0x2a4>)
 800b982:	781b      	ldrb	r3, [r3, #0]
 800b984:	2b01      	cmp	r3, #1
 800b986:	d102      	bne.n	800b98e <main+0x202>
	  {
	  	Routine_STATE_RESET();
 800b988:	f000 f8f0 	bl	800bb6c <Routine_STATE_RESET>
 800b98c:	e013      	b.n	800b9b6 <main+0x22a>
	  }
	  // SLEEP STATE
	  else if(Current_State == STATE_SLEEP)
 800b98e:	4b28      	ldr	r3, [pc, #160]	; (800ba30 <main+0x2a4>)
 800b990:	781b      	ldrb	r3, [r3, #0]
 800b992:	2b03      	cmp	r3, #3
 800b994:	d102      	bne.n	800b99c <main+0x210>
	  {
		  Routine_STATE_SLEEP();
 800b996:	f000 f907 	bl	800bba8 <Routine_STATE_SLEEP>
 800b99a:	e00c      	b.n	800b9b6 <main+0x22a>
	  }
	  //RESET STATE

	  //SAMPLE STATE
	  else if(Current_State == STATE_SAMPLE)
 800b99c:	4b24      	ldr	r3, [pc, #144]	; (800ba30 <main+0x2a4>)
 800b99e:	781b      	ldrb	r3, [r3, #0]
 800b9a0:	2b02      	cmp	r3, #2
 800b9a2:	d102      	bne.n	800b9aa <main+0x21e>
	  {
		  Routine_STATE_SAMPLE();
 800b9a4:	f000 f91a 	bl	800bbdc <Routine_STATE_SAMPLE>
 800b9a8:	e005      	b.n	800b9b6 <main+0x22a>
	  }
	  //TRANSMIT STATE
	  else if(Current_State == STATE_TRANSMIT)
 800b9aa:	4b21      	ldr	r3, [pc, #132]	; (800ba30 <main+0x2a4>)
 800b9ac:	781b      	ldrb	r3, [r3, #0]
 800b9ae:	2b06      	cmp	r3, #6
 800b9b0:	d101      	bne.n	800b9b6 <main+0x22a>
	  {
		  Routine_STATE_TRANSMIT();
 800b9b2:	f000 fb37 	bl	800c024 <Routine_STATE_TRANSMIT>

//========================= 6. END OF ROUTINE FUNCTION ==========================//
	  /*
	   * After each routine has run, save state to the back up registers
	   */
	  __HAL_RCC_PWR_CLK_ENABLE();
 800b9b6:	4a1a      	ldr	r2, [pc, #104]	; (800ba20 <main+0x294>)
 800b9b8:	4b19      	ldr	r3, [pc, #100]	; (800ba20 <main+0x294>)
 800b9ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9c0:	6593      	str	r3, [r2, #88]	; 0x58
 800b9c2:	4b17      	ldr	r3, [pc, #92]	; (800ba20 <main+0x294>)
 800b9c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9ca:	603b      	str	r3, [r7, #0]
 800b9cc:	683b      	ldr	r3, [r7, #0]
	  if(Current_State == STATE_SAMPLE)			//increment sample counter after each sampe
 800b9ce:	4b18      	ldr	r3, [pc, #96]	; (800ba30 <main+0x2a4>)
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	2b02      	cmp	r3, #2
 800b9d4:	d114      	bne.n	800ba00 <main+0x274>
	  {
		  sample_count = __GET_SAMPLE_COUNT();
 800b9d6:	4b15      	ldr	r3, [pc, #84]	; (800ba2c <main+0x2a0>)
 800b9d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9da:	0a1b      	lsrs	r3, r3, #8
 800b9dc:	b2da      	uxtb	r2, r3
 800b9de:	4b17      	ldr	r3, [pc, #92]	; (800ba3c <main+0x2b0>)
 800b9e0:	701a      	strb	r2, [r3, #0]
		  __SET_SAMPLE_COUNT(++sample_count);
 800b9e2:	4912      	ldr	r1, [pc, #72]	; (800ba2c <main+0x2a0>)
 800b9e4:	4b11      	ldr	r3, [pc, #68]	; (800ba2c <main+0x2a0>)
 800b9e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9e8:	b2db      	uxtb	r3, r3
 800b9ea:	4a14      	ldr	r2, [pc, #80]	; (800ba3c <main+0x2b0>)
 800b9ec:	7812      	ldrb	r2, [r2, #0]
 800b9ee:	3201      	adds	r2, #1
 800b9f0:	b2d0      	uxtb	r0, r2
 800b9f2:	4a12      	ldr	r2, [pc, #72]	; (800ba3c <main+0x2b0>)
 800b9f4:	7010      	strb	r0, [r2, #0]
 800b9f6:	4a11      	ldr	r2, [pc, #68]	; (800ba3c <main+0x2b0>)
 800b9f8:	7812      	ldrb	r2, [r2, #0]
 800b9fa:	0212      	lsls	r2, r2, #8
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	650b      	str	r3, [r1, #80]	; 0x50
	  }


	  __SET_CURRENT_STATE(Current_State);	    //write value to back up register
 800ba00:	4a0a      	ldr	r2, [pc, #40]	; (800ba2c <main+0x2a0>)
 800ba02:	4b0a      	ldr	r3, [pc, #40]	; (800ba2c <main+0x2a0>)
 800ba04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ba0a:	4909      	ldr	r1, [pc, #36]	; (800ba30 <main+0x2a4>)
 800ba0c:	7809      	ldrb	r1, [r1, #0]
 800ba0e:	430b      	orrs	r3, r1
 800ba10:	6513      	str	r3, [r2, #80]	; 0x50
	  __HAL_RCC_PWR_CLK_DISABLE();
 800ba12:	4a03      	ldr	r2, [pc, #12]	; (800ba20 <main+0x294>)
 800ba14:	4b02      	ldr	r3, [pc, #8]	; (800ba20 <main+0x294>)
 800ba16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ba1c:	6593      	str	r3, [r2, #88]	; 0x58
	  __HAL_RCC_PWR_CLK_ENABLE();
 800ba1e:	e6dd      	b.n	800b7dc <main+0x50>
 800ba20:	40021000 	.word	0x40021000
 800ba24:	08014ff4 	.word	0x08014ff4
 800ba28:	40007000 	.word	0x40007000
 800ba2c:	40002800 	.word	0x40002800
 800ba30:	200037b4 	.word	0x200037b4
 800ba34:	0801502c 	.word	0x0801502c
 800ba38:	08015048 	.word	0x08015048
 800ba3c:	2000372d 	.word	0x2000372d
 800ba40:	200037b8 	.word	0x200037b8

0800ba44 <MX_RTC_Init>:
//==================== 7. Configuration & Initialization Functions ====================//

/* Private functions */

static void MX_RTC_Init(void)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b086      	sub	sp, #24
 800ba48:	af00      	add	r7, sp, #0

  RTC_TimeTypeDef sTime = {0};
 800ba4a:	1d3b      	adds	r3, r7, #4
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	601a      	str	r2, [r3, #0]
 800ba50:	605a      	str	r2, [r3, #4]
 800ba52:	609a      	str	r2, [r3, #8]
 800ba54:	60da      	str	r2, [r3, #12]
 800ba56:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800ba58:	2300      	movs	r3, #0
 800ba5a:	603b      	str	r3, [r7, #0]
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800ba5c:	4b2d      	ldr	r3, [pc, #180]	; (800bb14 <MX_RTC_Init+0xd0>)
 800ba5e:	4a2e      	ldr	r2, [pc, #184]	; (800bb18 <MX_RTC_Init+0xd4>)
 800ba60:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800ba62:	4b2c      	ldr	r3, [pc, #176]	; (800bb14 <MX_RTC_Init+0xd0>)
 800ba64:	2200      	movs	r2, #0
 800ba66:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800ba68:	4b2a      	ldr	r3, [pc, #168]	; (800bb14 <MX_RTC_Init+0xd0>)
 800ba6a:	227f      	movs	r2, #127	; 0x7f
 800ba6c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800ba6e:	4b29      	ldr	r3, [pc, #164]	; (800bb14 <MX_RTC_Init+0xd0>)
 800ba70:	22ff      	movs	r2, #255	; 0xff
 800ba72:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800ba74:	4b27      	ldr	r3, [pc, #156]	; (800bb14 <MX_RTC_Init+0xd0>)
 800ba76:	2200      	movs	r2, #0
 800ba78:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800ba7a:	4b26      	ldr	r3, [pc, #152]	; (800bb14 <MX_RTC_Init+0xd0>)
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800ba80:	4b24      	ldr	r3, [pc, #144]	; (800bb14 <MX_RTC_Init+0xd0>)
 800ba82:	2200      	movs	r2, #0
 800ba84:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800ba86:	4b23      	ldr	r3, [pc, #140]	; (800bb14 <MX_RTC_Init+0xd0>)
 800ba88:	2200      	movs	r2, #0
 800ba8a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800ba8c:	4821      	ldr	r0, [pc, #132]	; (800bb14 <MX_RTC_Init+0xd0>)
 800ba8e:	f7f7 ffdd 	bl	8003a4c <HAL_RTC_Init>
 800ba92:	4603      	mov	r3, r0
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d001      	beq.n	800ba9c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800ba98:	f000 f840 	bl	800bb1c <Error_Handler>
  }

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 12;
 800ba9c:	230c      	movs	r3, #12
 800ba9e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 57;
 800baa0:	2339      	movs	r3, #57	; 0x39
 800baa2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800baa4:	2300      	movs	r3, #0
 800baa6:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800baa8:	2300      	movs	r3, #0
 800baaa:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800baac:	2300      	movs	r3, #0
 800baae:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800bab0:	1d3b      	adds	r3, r7, #4
 800bab2:	2200      	movs	r2, #0
 800bab4:	4619      	mov	r1, r3
 800bab6:	4817      	ldr	r0, [pc, #92]	; (800bb14 <MX_RTC_Init+0xd0>)
 800bab8:	f7f8 f843 	bl	8003b42 <HAL_RTC_SetTime>
 800babc:	4603      	mov	r3, r0
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d001      	beq.n	800bac6 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800bac2:	f000 f82b 	bl	800bb1c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 800bac6:	2305      	movs	r3, #5
 800bac8:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 800baca:	2305      	movs	r3, #5
 800bacc:	707b      	strb	r3, [r7, #1]
  sDate.Date = 8;
 800bace:	2308      	movs	r3, #8
 800bad0:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 800bad2:	2300      	movs	r3, #0
 800bad4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800bad6:	463b      	mov	r3, r7
 800bad8:	2200      	movs	r2, #0
 800bada:	4619      	mov	r1, r3
 800badc:	480d      	ldr	r0, [pc, #52]	; (800bb14 <MX_RTC_Init+0xd0>)
 800bade:	f7f8 f8cd 	bl	8003c7c <HAL_RTC_SetDate>
 800bae2:	4603      	mov	r3, r0
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d001      	beq.n	800baec <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 800bae8:	f000 f818 	bl	800bb1c <Error_Handler>
  }
  //clear unwanted interrupts
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc,RTC_FLAG_WUTF))
 800baec:	4b09      	ldr	r3, [pc, #36]	; (800bb14 <MX_RTC_Init+0xd0>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	68db      	ldr	r3, [r3, #12]
 800baf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d008      	beq.n	800bb0c <MX_RTC_Init+0xc8>
  {
	  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc,RTC_FLAG_WUTF);
 800bafa:	4b06      	ldr	r3, [pc, #24]	; (800bb14 <MX_RTC_Init+0xd0>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	4a05      	ldr	r2, [pc, #20]	; (800bb14 <MX_RTC_Init+0xd0>)
 800bb00:	6812      	ldr	r2, [r2, #0]
 800bb02:	68d2      	ldr	r2, [r2, #12]
 800bb04:	b2d2      	uxtb	r2, r2
 800bb06:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800bb0a:	60da      	str	r2, [r3, #12]
  }



}
 800bb0c:	bf00      	nop
 800bb0e:	3718      	adds	r7, #24
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	200037b8 	.word	0x200037b8
 800bb18:	40002800 	.word	0x40002800

0800bb1c <Error_Handler>:
//====================================== 7. END ======================================//

//==================================== 8. Handlers ===================================//

void Error_Handler(void)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800bb20:	bf00      	nop
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bc80      	pop	{r7}
 800bb26:	4770      	bx	lr

0800bb28 <Routine_ASYNC_IMU_EVENT>:
//===================================== 8. END ======================================//

//=============================== 9. Routines =======================================//

static void Routine_ASYNC_IMU_EVENT(void)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b082      	sub	sp, #8
 800bb2c:	af00      	add	r7, sp, #0
	 printf("IMU Event Detected: Sampling...");
 800bb2e:	480d      	ldr	r0, [pc, #52]	; (800bb64 <Routine_ASYNC_IMU_EVENT+0x3c>)
 800bb30:	f001 fe8c 	bl	800d84c <printf>
	 for (int i = 0; i < 50; ++i)
 800bb34:	2300      	movs	r3, #0
 800bb36:	607b      	str	r3, [r7, #4]
 800bb38:	e00a      	b.n	800bb50 <Routine_ASYNC_IMU_EVENT+0x28>
	 {
	 	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 800bb3a:	2120      	movs	r1, #32
 800bb3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bb40:	f7f6 fa61 	bl	8002006 <HAL_GPIO_TogglePin>
	 	HAL_Delay(100);
 800bb44:	2064      	movs	r0, #100	; 0x64
 800bb46:	f7f5 faa9 	bl	800109c <HAL_Delay>
	 for (int i = 0; i < 50; ++i)
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	3301      	adds	r3, #1
 800bb4e:	607b      	str	r3, [r7, #4]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2b31      	cmp	r3, #49	; 0x31
 800bb54:	ddf1      	ble.n	800bb3a <Routine_ASYNC_IMU_EVENT+0x12>
	 }
	 printf("Done\r\n");
 800bb56:	4804      	ldr	r0, [pc, #16]	; (800bb68 <Routine_ASYNC_IMU_EVENT+0x40>)
 800bb58:	f001 fef0 	bl	800d93c <puts>
}
 800bb5c:	bf00      	nop
 800bb5e:	3708      	adds	r7, #8
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}
 800bb64:	08015064 	.word	0x08015064
 800bb68:	08015084 	.word	0x08015084

0800bb6c <Routine_STATE_RESET>:



static void Routine_STATE_RESET(void)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	af00      	add	r7, sp, #0
	 //initialise RTC
	 MX_RTC_Init();
 800bb70:	f7ff ff68 	bl	800ba44 <MX_RTC_Init>
	 //Enable Interrupt pins as EXTI Outputs
	 set_WUP_Pin(IRIDIUM_RING_WAKE_PIN,MODE_EXTI);
 800bb74:	2101      	movs	r1, #1
 800bb76:	2002      	movs	r0, #2
 800bb78:	f7ff fa34 	bl	800afe4 <set_WUP_Pin>
	 set_WUP_Pin(IMU_EVENT_WAKE_PIN,MODE_EXTI);
 800bb7c:	2101      	movs	r1, #1
 800bb7e:	2010      	movs	r0, #16
 800bb80:	f7ff fa30 	bl	800afe4 <set_WUP_Pin>
	 printf("All Systems Online!\r\n");
 800bb84:	4806      	ldr	r0, [pc, #24]	; (800bba0 <Routine_STATE_RESET+0x34>)
 800bb86:	f001 fed9 	bl	800d93c <puts>
	 printf("Current State: RESET \t Next State: SAMPLE\r\n");
 800bb8a:	4806      	ldr	r0, [pc, #24]	; (800bba4 <Routine_STATE_RESET+0x38>)
 800bb8c:	f001 fed6 	bl	800d93c <puts>
	 HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,SET);
 800bb90:	2201      	movs	r2, #1
 800bb92:	2120      	movs	r1, #32
 800bb94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bb98:	f7f6 fa1e 	bl	8001fd8 <HAL_GPIO_WritePin>


}
 800bb9c:	bf00      	nop
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	0801508c 	.word	0x0801508c
 800bba4:	080150a4 	.word	0x080150a4

0800bba8 <Routine_STATE_SLEEP>:

static void Routine_STATE_SLEEP(void)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	af00      	add	r7, sp, #0
	  printf("Current State: SLEEP \t Next State: SAMPLE\r\n");
 800bbac:	4809      	ldr	r0, [pc, #36]	; (800bbd4 <Routine_STATE_SLEEP+0x2c>)
 800bbae:	f001 fec5 	bl	800d93c <puts>
	  printf("Good Night! \r\n");
 800bbb2:	4809      	ldr	r0, [pc, #36]	; (800bbd8 <Routine_STATE_SLEEP+0x30>)
 800bbb4:	f001 fec2 	bl	800d93c <puts>
	  set_WUP_Pin(IRIDIUM_RING_WAKE_PIN,MODE_WUP);
 800bbb8:	2100      	movs	r1, #0
 800bbba:	2002      	movs	r0, #2
 800bbbc:	f7ff fa12 	bl	800afe4 <set_WUP_Pin>
	  set_WUP_Pin(IMU_EVENT_WAKE_PIN,MODE_WUP);
 800bbc0:	2100      	movs	r1, #0
 800bbc2:	2010      	movs	r0, #16
 800bbc4:	f7ff fa0e 	bl	800afe4 <set_WUP_Pin>
	  Go_To_Sleep(STDBY,10);
 800bbc8:	210a      	movs	r1, #10
 800bbca:	2001      	movs	r0, #1
 800bbcc:	f7ff f9d2 	bl	800af74 <Go_To_Sleep>
}
 800bbd0:	bf00      	nop
 800bbd2:	bd80      	pop	{r7, pc}
 800bbd4:	080150d0 	.word	0x080150d0
 800bbd8:	080150fc 	.word	0x080150fc

0800bbdc <Routine_STATE_SAMPLE>:

static void Routine_STATE_SAMPLE(void)
{
 800bbdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bbe0:	b0a5      	sub	sp, #148	; 0x94
 800bbe2:	af04      	add	r7, sp, #16
	  //GPS  Init Routine
	  GPS_Data_t Gdata[5];
	  sample_count = __GET_SAMPLE_COUNT();
 800bbe4:	4bcf      	ldr	r3, [pc, #828]	; (800bf24 <Routine_STATE_SAMPLE+0x348>)
 800bbe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbe8:	0a1b      	lsrs	r3, r3, #8
 800bbea:	b2da      	uxtb	r2, r3
 800bbec:	4bce      	ldr	r3, [pc, #824]	; (800bf28 <Routine_STATE_SAMPLE+0x34c>)
 800bbee:	701a      	strb	r2, [r3, #0]
	  if(sample_count < 3)
 800bbf0:	4bcd      	ldr	r3, [pc, #820]	; (800bf28 <Routine_STATE_SAMPLE+0x34c>)
 800bbf2:	781b      	ldrb	r3, [r3, #0]
 800bbf4:	2b02      	cmp	r3, #2
 800bbf6:	d803      	bhi.n	800bc00 <Routine_STATE_SAMPLE+0x24>
	  {
		  printf("Current State: SAMPLE \t Next State: SLEEP\r\n");
 800bbf8:	48cc      	ldr	r0, [pc, #816]	; (800bf2c <Routine_STATE_SAMPLE+0x350>)
 800bbfa:	f001 fe9f 	bl	800d93c <puts>
 800bbfe:	e002      	b.n	800bc06 <Routine_STATE_SAMPLE+0x2a>
	  } else
	  {
		  printf("Current State: SAMPLE \t Next State: TRANS\r\n");
 800bc00:	48cb      	ldr	r0, [pc, #812]	; (800bf30 <Routine_STATE_SAMPLE+0x354>)
 800bc02:	f001 fe9b 	bl	800d93c <puts>
	  }

	  /* Attempt to initialize sensor within a number of retries */
	  uint8_t retries = 0;
 800bc06:	2300      	movs	r3, #0
 800bc08:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	  do
	  {
		  //initialise gps peripherals and begin comms on sensor instance
		  if(init_GPS(&hgps)== GPS_Init_OK)
 800bc0c:	48c9      	ldr	r0, [pc, #804]	; (800bf34 <Routine_STATE_SAMPLE+0x358>)
 800bc0e:	f7fd fadb 	bl	80091c8 <init_GPS>
 800bc12:	4603      	mov	r3, r0
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	d106      	bne.n	800bc26 <Routine_STATE_SAMPLE+0x4a>
		  {
			 printf("GPS Online! Acquiring Signal...\r\n");
 800bc18:	48c7      	ldr	r0, [pc, #796]	; (800bf38 <Routine_STATE_SAMPLE+0x35c>)
 800bc1a:	f001 fe8f 	bl	800d93c <puts>
			 GPS_On = 1;
 800bc1e:	4bc7      	ldr	r3, [pc, #796]	; (800bf3c <Routine_STATE_SAMPLE+0x360>)
 800bc20:	2201      	movs	r2, #1
 800bc22:	701a      	strb	r2, [r3, #0]
			 break;
 800bc24:	e00b      	b.n	800bc3e <Routine_STATE_SAMPLE+0x62>
		  }
		deinit_GPS(&hgps);
 800bc26:	48c3      	ldr	r0, [pc, #780]	; (800bf34 <Routine_STATE_SAMPLE+0x358>)
 800bc28:	f7fd fb62 	bl	80092f0 <deinit_GPS>
		retries++;
 800bc2c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bc30:	3301      	adds	r3, #1
 800bc32:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	  }
	  while (retries < GPS_INIT_RETRIES);
 800bc36:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bc3a:	2b31      	cmp	r3, #49	; 0x31
 800bc3c:	d9e6      	bls.n	800bc0c <Routine_STATE_SAMPLE+0x30>

	  // Sample Routine

	  if(GPS_On)
 800bc3e:	4bbf      	ldr	r3, [pc, #764]	; (800bf3c <Routine_STATE_SAMPLE+0x360>)
 800bc40:	781b      	ldrb	r3, [r3, #0]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	f000 80ef 	beq.w	800be26 <Routine_STATE_SAMPLE+0x24a>
	  {

		  for (uint8_t i = 0; i < 5; ++i)
 800bc48:	2300      	movs	r3, #0
 800bc4a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800bc4e:	e0e1      	b.n	800be14 <Routine_STATE_SAMPLE+0x238>
		  {

			  while(packet_full != 7)
			  {
				  GPS_Log_Begin(&hgps);
 800bc50:	48b8      	ldr	r0, [pc, #736]	; (800bf34 <Routine_STATE_SAMPLE+0x358>)
 800bc52:	f7fc ff55 	bl	8008b00 <GPS_Log_Begin>
			  while(packet_full != 7)
 800bc56:	4bba      	ldr	r3, [pc, #744]	; (800bf40 <Routine_STATE_SAMPLE+0x364>)
 800bc58:	781b      	ldrb	r3, [r3, #0]
 800bc5a:	2b07      	cmp	r3, #7
 800bc5c:	d1f8      	bne.n	800bc50 <Routine_STATE_SAMPLE+0x74>
			  }
			  GPS_Log_Stop(&hgps);
 800bc5e:	48b5      	ldr	r0, [pc, #724]	; (800bf34 <Routine_STATE_SAMPLE+0x358>)
 800bc60:	f7fc ffa4 	bl	8008bac <GPS_Log_Stop>
			  printf("Logging Data...\r\n");
 800bc64:	48b7      	ldr	r0, [pc, #732]	; (800bf44 <Routine_STATE_SAMPLE+0x368>)
 800bc66:	f001 fe69 	bl	800d93c <puts>
			  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,SET);
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	2120      	movs	r1, #32
 800bc6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bc72:	f7f6 f9b1 	bl	8001fd8 <HAL_GPIO_WritePin>
			  Gdata[i].coordinates = GPS_coord;
 800bc76:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 800bc7a:	4613      	mov	r3, r2
 800bc7c:	009b      	lsls	r3, r3, #2
 800bc7e:	4413      	add	r3, r2
 800bc80:	009b      	lsls	r3, r3, #2
 800bc82:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800bc86:	4413      	add	r3, r2
 800bc88:	3b74      	subs	r3, #116	; 0x74
 800bc8a:	4aaf      	ldr	r2, [pc, #700]	; (800bf48 <Routine_STATE_SAMPLE+0x36c>)
 800bc8c:	3304      	adds	r3, #4
 800bc8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bc92:	e883 0003 	stmia.w	r3, {r0, r1}
			  Gdata[i].Etime = eTime;
 800bc96:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 800bc9a:	4bac      	ldr	r3, [pc, #688]	; (800bf4c <Routine_STATE_SAMPLE+0x370>)
 800bc9c:	6819      	ldr	r1, [r3, #0]
 800bc9e:	4613      	mov	r3, r2
 800bca0:	009b      	lsls	r3, r3, #2
 800bca2:	4413      	add	r3, r2
 800bca4:	009b      	lsls	r3, r3, #2
 800bca6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800bcaa:	4413      	add	r3, r2
 800bcac:	3b74      	subs	r3, #116	; 0x74
 800bcae:	6019      	str	r1, [r3, #0]
			  Gdata[i].diag = diag;
 800bcb0:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 800bcb4:	4613      	mov	r3, r2
 800bcb6:	009b      	lsls	r3, r3, #2
 800bcb8:	4413      	add	r3, r2
 800bcba:	009b      	lsls	r3, r3, #2
 800bcbc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800bcc0:	4413      	add	r3, r2
 800bcc2:	3b6c      	subs	r3, #108	; 0x6c
 800bcc4:	4aa2      	ldr	r2, [pc, #648]	; (800bf50 <Routine_STATE_SAMPLE+0x374>)
 800bcc6:	3304      	adds	r3, #4
 800bcc8:	6810      	ldr	r0, [r2, #0]
 800bcca:	6851      	ldr	r1, [r2, #4]
 800bccc:	c303      	stmia	r3!, {r0, r1}
			  printf("local time: %lu, position: %f Lat, %f long\r\n", Gdata[i].Etime, Gdata[i].coordinates.lat, Gdata[i].coordinates.longi);
 800bcce:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 800bcd2:	4613      	mov	r3, r2
 800bcd4:	009b      	lsls	r3, r3, #2
 800bcd6:	4413      	add	r3, r2
 800bcd8:	009b      	lsls	r3, r3, #2
 800bcda:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800bcde:	4413      	add	r3, r2
 800bce0:	3b74      	subs	r3, #116	; 0x74
 800bce2:	681d      	ldr	r5, [r3, #0]
 800bce4:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 800bce8:	4613      	mov	r3, r2
 800bcea:	009b      	lsls	r3, r3, #2
 800bcec:	4413      	add	r3, r2
 800bcee:	009b      	lsls	r3, r3, #2
 800bcf0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800bcf4:	4413      	add	r3, r2
 800bcf6:	3b70      	subs	r3, #112	; 0x70
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f7f4 fc34 	bl	8000568 <__aeabi_f2d>
 800bd00:	4680      	mov	r8, r0
 800bd02:	4689      	mov	r9, r1
 800bd04:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 800bd08:	4613      	mov	r3, r2
 800bd0a:	009b      	lsls	r3, r3, #2
 800bd0c:	4413      	add	r3, r2
 800bd0e:	009b      	lsls	r3, r3, #2
 800bd10:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800bd14:	4413      	add	r3, r2
 800bd16:	3b6c      	subs	r3, #108	; 0x6c
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f7f4 fc24 	bl	8000568 <__aeabi_f2d>
 800bd20:	4603      	mov	r3, r0
 800bd22:	460c      	mov	r4, r1
 800bd24:	e88d 0018 	stmia.w	sp, {r3, r4}
 800bd28:	4642      	mov	r2, r8
 800bd2a:	464b      	mov	r3, r9
 800bd2c:	4629      	mov	r1, r5
 800bd2e:	4889      	ldr	r0, [pc, #548]	; (800bf54 <Routine_STATE_SAMPLE+0x378>)
 800bd30:	f001 fd8c 	bl	800d84c <printf>
			  printf("HDOP = %d.%d, \t PDOP = %d.%d, VDOP = %d.%d\r\n",  Gdata[i].diag.HDOP.digit, Gdata[i].diag.HDOP.precision,  Gdata[i].diag.PDOP.digit, Gdata[i].diag.PDOP.precision,  Gdata[i].diag.VDOP.digit, Gdata[i].diag.VDOP.precision);
 800bd34:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 800bd38:	4613      	mov	r3, r2
 800bd3a:	009b      	lsls	r3, r3, #2
 800bd3c:	4413      	add	r3, r2
 800bd3e:	009b      	lsls	r3, r3, #2
 800bd40:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800bd44:	4413      	add	r3, r2
 800bd46:	3b66      	subs	r3, #102	; 0x66
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	461c      	mov	r4, r3
 800bd4c:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 800bd50:	4613      	mov	r3, r2
 800bd52:	009b      	lsls	r3, r3, #2
 800bd54:	4413      	add	r3, r2
 800bd56:	009b      	lsls	r3, r3, #2
 800bd58:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800bd5c:	4413      	add	r3, r2
 800bd5e:	3b65      	subs	r3, #101	; 0x65
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	461d      	mov	r5, r3
 800bd64:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 800bd68:	4613      	mov	r3, r2
 800bd6a:	009b      	lsls	r3, r3, #2
 800bd6c:	4413      	add	r3, r2
 800bd6e:	009b      	lsls	r3, r3, #2
 800bd70:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800bd74:	4413      	add	r3, r2
 800bd76:	3b68      	subs	r3, #104	; 0x68
 800bd78:	781b      	ldrb	r3, [r3, #0]
 800bd7a:	461e      	mov	r6, r3
 800bd7c:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 800bd80:	4613      	mov	r3, r2
 800bd82:	009b      	lsls	r3, r3, #2
 800bd84:	4413      	add	r3, r2
 800bd86:	009b      	lsls	r3, r3, #2
 800bd88:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800bd8c:	4413      	add	r3, r2
 800bd8e:	3b67      	subs	r3, #103	; 0x67
 800bd90:	781b      	ldrb	r3, [r3, #0]
 800bd92:	4619      	mov	r1, r3
 800bd94:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 800bd98:	4613      	mov	r3, r2
 800bd9a:	009b      	lsls	r3, r3, #2
 800bd9c:	4413      	add	r3, r2
 800bd9e:	009b      	lsls	r3, r3, #2
 800bda0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800bda4:	4413      	add	r3, r2
 800bda6:	3b64      	subs	r3, #100	; 0x64
 800bda8:	781b      	ldrb	r3, [r3, #0]
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 800bdb0:	4613      	mov	r3, r2
 800bdb2:	009b      	lsls	r3, r3, #2
 800bdb4:	4413      	add	r3, r2
 800bdb6:	009b      	lsls	r3, r3, #2
 800bdb8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800bdbc:	4413      	add	r3, r2
 800bdbe:	3b63      	subs	r3, #99	; 0x63
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	9302      	str	r3, [sp, #8]
 800bdc4:	9001      	str	r0, [sp, #4]
 800bdc6:	9100      	str	r1, [sp, #0]
 800bdc8:	4633      	mov	r3, r6
 800bdca:	462a      	mov	r2, r5
 800bdcc:	4621      	mov	r1, r4
 800bdce:	4862      	ldr	r0, [pc, #392]	; (800bf58 <Routine_STATE_SAMPLE+0x37c>)
 800bdd0:	f001 fd3c 	bl	800d84c <printf>
			  printf("Number of Satellites %d, Fix Type = %d\r\n", Gdata[i].diag.num_sats, Gdata[i].diag.fix_type);
 800bdd4:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 800bdd8:	4613      	mov	r3, r2
 800bdda:	009b      	lsls	r3, r3, #2
 800bddc:	4413      	add	r3, r2
 800bdde:	009b      	lsls	r3, r3, #2
 800bde0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800bde4:	4413      	add	r3, r2
 800bde6:	3b62      	subs	r3, #98	; 0x62
 800bde8:	781b      	ldrb	r3, [r3, #0]
 800bdea:	4619      	mov	r1, r3
 800bdec:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 800bdf0:	4613      	mov	r3, r2
 800bdf2:	009b      	lsls	r3, r3, #2
 800bdf4:	4413      	add	r3, r2
 800bdf6:	009b      	lsls	r3, r3, #2
 800bdf8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800bdfc:	4413      	add	r3, r2
 800bdfe:	3b61      	subs	r3, #97	; 0x61
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	461a      	mov	r2, r3
 800be04:	4855      	ldr	r0, [pc, #340]	; (800bf5c <Routine_STATE_SAMPLE+0x380>)
 800be06:	f001 fd21 	bl	800d84c <printf>
		  for (uint8_t i = 0; i < 5; ++i)
 800be0a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800be0e:	3301      	adds	r3, #1
 800be10:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800be14:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800be18:	2b04      	cmp	r3, #4
 800be1a:	f67f af1c 	bls.w	800bc56 <Routine_STATE_SAMPLE+0x7a>
		  }
		  deinit_GPS(&hgps);
 800be1e:	4845      	ldr	r0, [pc, #276]	; (800bf34 <Routine_STATE_SAMPLE+0x358>)
 800be20:	f7fd fa66 	bl	80092f0 <deinit_GPS>
 800be24:	e002      	b.n	800be2c <Routine_STATE_SAMPLE+0x250>
	  }else
	  {
		  printf("Error GPS Not Found!\r\n");
 800be26:	484e      	ldr	r0, [pc, #312]	; (800bf60 <Routine_STATE_SAMPLE+0x384>)
 800be28:	f001 fd88 	bl	800d93c <puts>
	  }

	  //Init Flash Chips

	  uint8_t statusbyte;
	  uint8_t* buffer = to_binary_format(Gdata[0],__GET_SAMPLE_COUNT());
 800be2c:	4b3d      	ldr	r3, [pc, #244]	; (800bf24 <Routine_STATE_SAMPLE+0x348>)
 800be2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be30:	0a1b      	lsrs	r3, r3, #8
 800be32:	b2db      	uxtb	r3, r3
 800be34:	9301      	str	r3, [sp, #4]
 800be36:	69fb      	ldr	r3, [r7, #28]
 800be38:	9300      	str	r3, [sp, #0]
 800be3a:	f107 030c 	add.w	r3, r7, #12
 800be3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800be40:	f7ff fbba 	bl	800b5b8 <to_binary_format>
 800be44:	6778      	str	r0, [r7, #116]	; 0x74
	  if(Init_Flash_Chips(&statusbyte)== HAL_OK)
 800be46:	f107 030b 	add.w	r3, r7, #11
 800be4a:	4618      	mov	r0, r3
 800be4c:	f7fc f882 	bl	8007f54 <Init_Flash_Chips>
 800be50:	4603      	mov	r3, r0
 800be52:	2b00      	cmp	r3, #0
 800be54:	f040 80d7 	bne.w	800c006 <Routine_STATE_SAMPLE+0x42a>
	  {

		  uint8_t chipnumber = Get_Active_Chip();
 800be58:	f7ff fb0a 	bl	800b470 <Get_Active_Chip>
 800be5c:	4603      	mov	r3, r0
 800be5e:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
		  //get current pointer to free memory in chip
		  uint8_t address[3] = {0};
 800be62:	f107 0308 	add.w	r3, r7, #8
 800be66:	2100      	movs	r1, #0
 800be68:	460a      	mov	r2, r1
 800be6a:	801a      	strh	r2, [r3, #0]
 800be6c:	460a      	mov	r2, r1
 800be6e:	709a      	strb	r2, [r3, #2]
		  Get_Current_Address_Pointer(chipnumber,address);
 800be70:	f107 0208 	add.w	r2, r7, #8
 800be74:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800be78:	4611      	mov	r1, r2
 800be7a:	4618      	mov	r0, r3
 800be7c:	f7ff fa68 	bl	800b350 <Get_Current_Address_Pointer>
		  FLASH_SetAddress(address[2],address[1],address[0]);
 800be80:	7abb      	ldrb	r3, [r7, #10]
 800be82:	7a79      	ldrb	r1, [r7, #9]
 800be84:	7a3a      	ldrb	r2, [r7, #8]
 800be86:	4618      	mov	r0, r3
 800be88:	f7fc f986 	bl	8008198 <FLASH_SetAddress>
		  //check if there is still space
		  if(!FLASH_Is_Available(chipnumber,get_driftBuffer_Size()))
 800be8c:	f7ff fbe6 	bl	800b65c <get_driftBuffer_Size>
 800be90:	4603      	mov	r3, r0
 800be92:	461a      	mov	r2, r3
 800be94:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800be98:	4611      	mov	r1, r2
 800be9a:	4618      	mov	r0, r3
 800be9c:	f7fc f9e2 	bl	8008264 <FLASH_Is_Available>
 800bea0:	4603      	mov	r3, r0
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d177      	bne.n	800bf96 <Routine_STATE_SAMPLE+0x3ba>
		  {
			  //Routine to select next available chip for memory storage
			  printf("Warning! chip %d is at maximum capacity\r\n",chipnumber);
 800bea6:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800beaa:	4619      	mov	r1, r3
 800beac:	482d      	ldr	r0, [pc, #180]	; (800bf64 <Routine_STATE_SAMPLE+0x388>)
 800beae:	f001 fccd 	bl	800d84c <printf>
			  //set status to full
			  FLASH_SetAddress(0x00,0x00,0x00);
 800beb2:	2200      	movs	r2, #0
 800beb4:	2100      	movs	r1, #0
 800beb6:	2000      	movs	r0, #0
 800beb8:	f7fc f96e 	bl	8008198 <FLASH_SetAddress>
			  uint8_t chipstatus = Full;
 800bebc:	2304      	movs	r3, #4
 800bebe:	71fb      	strb	r3, [r7, #7]
			  FLASH_WRITE_ReadModifyWrite(chipnumber,BUFFER1,&chipstatus,1);
 800bec0:	f897 007d 	ldrb.w	r0, [r7, #125]	; 0x7d
 800bec4:	1dfa      	adds	r2, r7, #7
 800bec6:	2301      	movs	r3, #1
 800bec8:	2101      	movs	r1, #1
 800beca:	f7fc fa73 	bl	80083b4 <FLASH_WRITE_ReadModifyWrite>
			  //get next active chip and set as active
			  chipnumber = Get_Next_Active_Chip();
 800bece:	f7ff fb21 	bl	800b514 <Get_Next_Active_Chip>
 800bed2:	4603      	mov	r3, r0
 800bed4:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
			  chipstatus = Active;
 800bed8:	2301      	movs	r3, #1
 800beda:	71fb      	strb	r3, [r7, #7]
			  FLASH_WRITE_ReadModifyWrite(chipnumber,BUFFER1,&chipstatus,1);
 800bedc:	f897 007d 	ldrb.w	r0, [r7, #125]	; 0x7d
 800bee0:	1dfa      	adds	r2, r7, #7
 800bee2:	2301      	movs	r3, #1
 800bee4:	2101      	movs	r1, #1
 800bee6:	f7fc fa65 	bl	80083b4 <FLASH_WRITE_ReadModifyWrite>
			  //Set Next Active Chip
			  Set_Active_Chip(chipnumber);
 800beea:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800beee:	4618      	mov	r0, r3
 800bef0:	f7ff fae2 	bl	800b4b8 <Set_Active_Chip>
			  //Select inactive chip to be next for storage
			  //cycle through remaining chips
			  chipnumber = 0;
 800bef4:	2300      	movs	r3, #0
 800bef6:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
			  for (int i = Get_Next_Active_Chip(); i <FLASH_CHIPS; ++i)
 800befa:	f7ff fb0b 	bl	800b514 <Get_Next_Active_Chip>
 800befe:	4603      	mov	r3, r0
 800bf00:	67bb      	str	r3, [r7, #120]	; 0x78
 800bf02:	e034      	b.n	800bf6e <Routine_STATE_SAMPLE+0x392>
			  {
				  if((statusbyte& 0b1<<i)? SET: RESET)
 800bf04:	7afb      	ldrb	r3, [r7, #11]
 800bf06:	461a      	mov	r2, r3
 800bf08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf0a:	fa42 f303 	asr.w	r3, r2, r3
 800bf0e:	f003 0301 	and.w	r3, r3, #1
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d028      	beq.n	800bf68 <Routine_STATE_SAMPLE+0x38c>
				  {
					  chipnumber = i+1;
 800bf16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf18:	b2db      	uxtb	r3, r3
 800bf1a:	3301      	adds	r3, #1
 800bf1c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
					  break;
 800bf20:	e028      	b.n	800bf74 <Routine_STATE_SAMPLE+0x398>
 800bf22:	bf00      	nop
 800bf24:	40002800 	.word	0x40002800
 800bf28:	2000372d 	.word	0x2000372d
 800bf2c:	0801510c 	.word	0x0801510c
 800bf30:	08015138 	.word	0x08015138
 800bf34:	20000a2c 	.word	0x20000a2c
 800bf38:	08015164 	.word	0x08015164
 800bf3c:	20000915 	.word	0x20000915
 800bf40:	20000a58 	.word	0x20000a58
 800bf44:	08015188 	.word	0x08015188
 800bf48:	20000a5c 	.word	0x20000a5c
 800bf4c:	20000a54 	.word	0x20000a54
 800bf50:	20000a48 	.word	0x20000a48
 800bf54:	0801519c 	.word	0x0801519c
 800bf58:	080151cc 	.word	0x080151cc
 800bf5c:	080151fc 	.word	0x080151fc
 800bf60:	08015228 	.word	0x08015228
 800bf64:	08015240 	.word	0x08015240
			  for (int i = Get_Next_Active_Chip(); i <FLASH_CHIPS; ++i)
 800bf68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	67bb      	str	r3, [r7, #120]	; 0x78
 800bf6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf70:	2b03      	cmp	r3, #3
 800bf72:	ddc7      	ble.n	800bf04 <Routine_STATE_SAMPLE+0x328>
				  }

			  }
			  //set the status byte of the chip to next active
			  Set_Next_Active_Chip(chipnumber);
 800bf74:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f7ff faef 	bl	800b55c <Set_Next_Active_Chip>
			  chipstatus = Next_Active;
 800bf7e:	2302      	movs	r3, #2
 800bf80:	71fb      	strb	r3, [r7, #7]
			  FLASH_WRITE_ReadModifyWrite(chipnumber,BUFFER1,&chipstatus,1);
 800bf82:	f897 007d 	ldrb.w	r0, [r7, #125]	; 0x7d
 800bf86:	1dfa      	adds	r2, r7, #7
 800bf88:	2301      	movs	r3, #1
 800bf8a:	2101      	movs	r1, #1
 800bf8c:	f7fc fa12 	bl	80083b4 <FLASH_WRITE_ReadModifyWrite>
			  FLASH_IncAddress(1);
 800bf90:	2001      	movs	r0, #1
 800bf92:	f7fc f91b 	bl	80081cc <FLASH_IncAddress>
		  }
		  if(FLASH_WRITE_ReadModifyWrite(Get_Active_Chip(),BUFFER1,buffer,get_driftBuffer_Size()) != 1)
 800bf96:	f7ff fa6b 	bl	800b470 <Get_Active_Chip>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	461c      	mov	r4, r3
 800bf9e:	f7ff fb5d 	bl	800b65c <get_driftBuffer_Size>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800bfa6:	2101      	movs	r1, #1
 800bfa8:	4620      	mov	r0, r4
 800bfaa:	f7fc fa03 	bl	80083b4 <FLASH_WRITE_ReadModifyWrite>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	2b01      	cmp	r3, #1
 800bfb2:	d024      	beq.n	800bffe <Routine_STATE_SAMPLE+0x422>
		 {
		 	printf("Successfully saved data to chip %d\r\n",Get_Active_Chip());
 800bfb4:	f7ff fa5c 	bl	800b470 <Get_Active_Chip>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	4619      	mov	r1, r3
 800bfbc:	4816      	ldr	r0, [pc, #88]	; (800c018 <Routine_STATE_SAMPLE+0x43c>)
 800bfbe:	f001 fc45 	bl	800d84c <printf>
		 	//increment pointer to next available memory block
		 	FLASH_IncAddress(get_driftBuffer_Size());
 800bfc2:	f7ff fb4b 	bl	800b65c <get_driftBuffer_Size>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f7fc f8ff 	bl	80081cc <FLASH_IncAddress>
		 	//save address to chip
		 	uint32_t temp = FLASH_GetAddress();
 800bfce:	f7fc f937 	bl	8008240 <FLASH_GetAddress>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	673b      	str	r3, [r7, #112]	; 0x70
		 	address[2] = (temp & 0xFF0000)>>16;
 800bfd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bfd8:	0c1b      	lsrs	r3, r3, #16
 800bfda:	b2db      	uxtb	r3, r3
 800bfdc:	72bb      	strb	r3, [r7, #10]
		 	address[1] = (temp & 0xFF00)>>8;
 800bfde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bfe0:	0a1b      	lsrs	r3, r3, #8
 800bfe2:	b2db      	uxtb	r3, r3
 800bfe4:	727b      	strb	r3, [r7, #9]
		 	address[0] = (temp & 0xFF);
 800bfe6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bfe8:	b2db      	uxtb	r3, r3
 800bfea:	723b      	strb	r3, [r7, #8]
		 	Set_Current_Address_Pointer(chipnumber,address);
 800bfec:	f107 0208 	add.w	r2, r7, #8
 800bff0:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800bff4:	4611      	mov	r1, r2
 800bff6:	4618      	mov	r0, r3
 800bff8:	f7ff f9f0 	bl	800b3dc <Set_Current_Address_Pointer>
	  }else
	  {
		  printf("Error! Memory Full");
	  }

}
 800bffc:	e006      	b.n	800c00c <Routine_STATE_SAMPLE+0x430>
		   printf("Error Saving to Flash Chip\r\n");
 800bffe:	4807      	ldr	r0, [pc, #28]	; (800c01c <Routine_STATE_SAMPLE+0x440>)
 800c000:	f001 fc9c 	bl	800d93c <puts>
}
 800c004:	e002      	b.n	800c00c <Routine_STATE_SAMPLE+0x430>
		  printf("Error! Memory Full");
 800c006:	4806      	ldr	r0, [pc, #24]	; (800c020 <Routine_STATE_SAMPLE+0x444>)
 800c008:	f001 fc20 	bl	800d84c <printf>
}
 800c00c:	bf00      	nop
 800c00e:	3784      	adds	r7, #132	; 0x84
 800c010:	46bd      	mov	sp, r7
 800c012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c016:	bf00      	nop
 800c018:	0801526c 	.word	0x0801526c
 800c01c:	08015294 	.word	0x08015294
 800c020:	080152b0 	.word	0x080152b0

0800c024 <Routine_STATE_TRANSMIT>:

static void Routine_STATE_TRANSMIT(void)
{
 800c024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c028:	b093      	sub	sp, #76	; 0x4c
 800c02a:	af00      	add	r7, sp, #0
	  printf("Current State: TRANS \t Next State: SLEEP\r\n");
 800c02c:	4869      	ldr	r0, [pc, #420]	; (800c1d4 <Routine_STATE_TRANSMIT+0x1b0>)
 800c02e:	f001 fc85 	bl	800d93c <puts>

	  /* 1. Initialize Iridium Modem */
	  uint8_t chip = Get_Active_Chip();		 	 											//Get active chip
 800c032:	f7ff fa1d 	bl	800b470 <Get_Active_Chip>
 800c036:	4603      	mov	r3, r0
 800c038:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	  uint8_t Address[3] = {0};					 											//get current address pointer
 800c03c:	f107 031c 	add.w	r3, r7, #28
 800c040:	2100      	movs	r1, #0
 800c042:	460a      	mov	r2, r1
 800c044:	801a      	strh	r2, [r3, #0]
 800c046:	460a      	mov	r2, r1
 800c048:	709a      	strb	r2, [r3, #2]
	  Get_Current_Address_Pointer(chip,Address);
 800c04a:	f107 021c 	add.w	r2, r7, #28
 800c04e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c052:	4611      	mov	r1, r2
 800c054:	4618      	mov	r0, r3
 800c056:	f7ff f97b 	bl	800b350 <Get_Current_Address_Pointer>
	  if(IR_Init_Module() == IR_OK)
 800c05a:	f7fe f88f 	bl	800a17c <IR_Init_Module>
 800c05e:	4603      	mov	r3, r0
 800c060:	2b00      	cmp	r3, #0
 800c062:	d17d      	bne.n	800c160 <Routine_STATE_TRANSMIT+0x13c>
	  {
 800c064:	466b      	mov	r3, sp
 800c066:	461e      	mov	r6, r3
		  uint32_t size = ((Address[2] - 0x00)<<16)|((Address[1] - 0x00)<<8)|(Address[0]-0x01); //calculate length of data
 800c068:	7fbb      	ldrb	r3, [r7, #30]
 800c06a:	041a      	lsls	r2, r3, #16
 800c06c:	7f7b      	ldrb	r3, [r7, #29]
 800c06e:	021b      	lsls	r3, r3, #8
 800c070:	431a      	orrs	r2, r3
 800c072:	7f3b      	ldrb	r3, [r7, #28]
 800c074:	3b01      	subs	r3, #1
 800c076:	4313      	orrs	r3, r2
 800c078:	63fb      	str	r3, [r7, #60]	; 0x3c
		  int num_pages = size/FLASH_GetPageSize() +1;											//calculate number of pages to be read
 800c07a:	f7fc f883 	bl	8008184 <FLASH_GetPageSize>
 800c07e:	4603      	mov	r3, r0
 800c080:	461a      	mov	r2, r3
 800c082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c084:	fbb3 f3f2 	udiv	r3, r3, r2
 800c088:	3301      	adds	r3, #1
 800c08a:	63bb      	str	r3, [r7, #56]	; 0x38
		  /* Load Data */
		  printf("Preparing To Transmit...");
 800c08c:	4852      	ldr	r0, [pc, #328]	; (800c1d8 <Routine_STATE_TRANSMIT+0x1b4>)
 800c08e:	f001 fbdd 	bl	800d84c <printf>
		  /* 2. LOOP THROUGH NUMBER OF PAGES WITH DATA */
		  int payload_size = DRIFTBUFFER_SIZE*(__GET_SAMPLE_COUNT());
 800c092:	4b52      	ldr	r3, [pc, #328]	; (800c1dc <Routine_STATE_TRANSMIT+0x1b8>)
 800c094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c096:	0a1b      	lsrs	r3, r3, #8
 800c098:	b2da      	uxtb	r2, r3
 800c09a:	4613      	mov	r3, r2
 800c09c:	009b      	lsls	r3, r3, #2
 800c09e:	4413      	add	r3, r2
 800c0a0:	009a      	lsls	r2, r3, #2
 800c0a2:	4413      	add	r3, r2
 800c0a4:	637b      	str	r3, [r7, #52]	; 0x34
		  uint8_t packet [payload_size];
 800c0a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c0a8:	1e4b      	subs	r3, r1, #1
 800c0aa:	633b      	str	r3, [r7, #48]	; 0x30
 800c0ac:	460b      	mov	r3, r1
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	f04f 0300 	mov.w	r3, #0
 800c0b4:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 800c0b8:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 800c0bc:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800c0c0:	460b      	mov	r3, r1
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	f04f 0300 	mov.w	r3, #0
 800c0c8:	00dd      	lsls	r5, r3, #3
 800c0ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c0ce:	00d4      	lsls	r4, r2, #3
 800c0d0:	460b      	mov	r3, r1
 800c0d2:	3307      	adds	r3, #7
 800c0d4:	08db      	lsrs	r3, r3, #3
 800c0d6:	00db      	lsls	r3, r3, #3
 800c0d8:	ebad 0d03 	sub.w	sp, sp, r3
 800c0dc:	466b      	mov	r3, sp
 800c0de:	3300      	adds	r3, #0
 800c0e0:	62fb      	str	r3, [r7, #44]	; 0x2c

		  for (int i = 0; i < num_pages; ++i)
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	647b      	str	r3, [r7, #68]	; 0x44
 800c0e6:	e036      	b.n	800c156 <Routine_STATE_TRANSMIT+0x132>
		  {
			  FLASH_SetAddress(0x00,0x00,0x01);														//read size variables from memory
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	2100      	movs	r1, #0
 800c0ec:	2000      	movs	r0, #0
 800c0ee:	f7fc f853 	bl	8008198 <FLASH_SetAddress>
			  uint8_t* buffer = FLASH_READ_BufferHF(chip,BUFFER1);
 800c0f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c0f6:	2101      	movs	r1, #1
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f7fc f915 	bl	8008328 <FLASH_READ_BufferHF>
 800c0fe:	62b8      	str	r0, [r7, #40]	; 0x28
			  memcpy(packet,&buffer[1],payload_size);
 800c100:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c104:	3301      	adds	r3, #1
 800c106:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c108:	4619      	mov	r1, r3
 800c10a:	f001 f923 	bl	800d354 <memcpy>
			  IR_Status_t flag = IR_send_Bin_String(packet,payload_size);
 800c10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c110:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c112:	4611      	mov	r1, r2
 800c114:	4618      	mov	r0, r3
 800c116:	f7fe fa5d 	bl	800a5d4 <IR_send_Bin_String>
 800c11a:	4603      	mov	r3, r0
 800c11c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		  	  if(flag == IR_MSG_UPLOAD_OK)
 800c120:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c124:	2b0a      	cmp	r3, #10
 800c126:	d113      	bne.n	800c150 <Routine_STATE_TRANSMIT+0x12c>
		  	  {
			  	  printf("Message Uploaded!\r\nTransmitting...");
 800c128:	482d      	ldr	r0, [pc, #180]	; (800c1e0 <Routine_STATE_TRANSMIT+0x1bc>)
 800c12a:	f001 fb8f 	bl	800d84c <printf>
			  	  //create SBD Session
			  	  SBDX_Status_t sbd;
			  	  if(IR_start_SBD_Session(&sbd)== IR_OK)
 800c12e:	463b      	mov	r3, r7
 800c130:	4618      	mov	r0, r3
 800c132:	f7fe f947 	bl	800a3c4 <IR_start_SBD_Session>
 800c136:	4603      	mov	r3, r0
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d109      	bne.n	800c150 <Routine_STATE_TRANSMIT+0x12c>
			  	  {

		 		  	  //check return status
		 		  	  if(sbd.MO_Status < 2)
 800c13c:	783b      	ldrb	r3, [r7, #0]
 800c13e:	2b01      	cmp	r3, #1
 800c140:	d803      	bhi.n	800c14a <Routine_STATE_TRANSMIT+0x126>
		 		  	  {
		 			  	  //message sent
		 			  	  printf("Success!\r\n");
 800c142:	4828      	ldr	r0, [pc, #160]	; (800c1e4 <Routine_STATE_TRANSMIT+0x1c0>)
 800c144:	f001 fbfa 	bl	800d93c <puts>
 800c148:	e002      	b.n	800c150 <Routine_STATE_TRANSMIT+0x12c>
		 		  	  }else
		 		  	  {
		 		  		  printf("Failed!\r\n");
 800c14a:	4827      	ldr	r0, [pc, #156]	; (800c1e8 <Routine_STATE_TRANSMIT+0x1c4>)
 800c14c:	f001 fbf6 	bl	800d93c <puts>
		  for (int i = 0; i < num_pages; ++i)
 800c150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c152:	3301      	adds	r3, #1
 800c154:	647b      	str	r3, [r7, #68]	; 0x44
 800c156:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c15a:	429a      	cmp	r2, r3
 800c15c:	dbc4      	blt.n	800c0e8 <Routine_STATE_TRANSMIT+0xc4>
 800c15e:	46b5      	mov	sp, r6

		  	  }
		  }

	  }
	  IR_DeInit_Module();
 800c160:	f7fe f85e 	bl	800a220 <IR_DeInit_Module>

/* Reset Memory pointer*/
  //reset sample count
  __SET_SAMPLE_COUNT(0);
 800c164:	4a1d      	ldr	r2, [pc, #116]	; (800c1dc <Routine_STATE_TRANSMIT+0x1b8>)
 800c166:	4b1d      	ldr	r3, [pc, #116]	; (800c1dc <Routine_STATE_TRANSMIT+0x1b8>)
 800c168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c16a:	b2db      	uxtb	r3, r3
 800c16c:	6513      	str	r3, [r2, #80]	; 0x50
  //erase page and reset counter
  FLASH_ERASE_Page(chip);
 800c16e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c172:	4618      	mov	r0, r3
 800c174:	f7fc f99c 	bl	80084b0 <FLASH_ERASE_Page>
  FLASH_SetAddress(0x00,0x00,0x00);
 800c178:	2200      	movs	r2, #0
 800c17a:	2100      	movs	r1, #0
 800c17c:	2000      	movs	r0, #0
 800c17e:	f7fc f80b 	bl	8008198 <FLASH_SetAddress>
  uint8_t val = Active;
 800c182:	2301      	movs	r3, #1
 800c184:	76fb      	strb	r3, [r7, #27]
  FLASH_WRITE_PageOrByte_NoErase(chip,&val,1);
 800c186:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c18a:	f107 011b 	add.w	r1, r7, #27
 800c18e:	2201      	movs	r2, #1
 800c190:	4618      	mov	r0, r3
 800c192:	f7fc f953 	bl	800843c <FLASH_WRITE_PageOrByte_NoErase>
  FLASH_IncAddress(1);
 800c196:	2001      	movs	r0, #1
 800c198:	f7fc f818 	bl	80081cc <FLASH_IncAddress>
  uint32_t temp = FLASH_GetAddress();
 800c19c:	f7fc f850 	bl	8008240 <FLASH_GetAddress>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	623b      	str	r3, [r7, #32]
  Address[0] = temp&0xFF;
 800c1a4:	6a3b      	ldr	r3, [r7, #32]
 800c1a6:	b2db      	uxtb	r3, r3
 800c1a8:	773b      	strb	r3, [r7, #28]
  Address[1] = (temp&0xFF00)>>8;
 800c1aa:	6a3b      	ldr	r3, [r7, #32]
 800c1ac:	0a1b      	lsrs	r3, r3, #8
 800c1ae:	b2db      	uxtb	r3, r3
 800c1b0:	777b      	strb	r3, [r7, #29]
  Address[2] = (temp&0xFF0000)>>16;
 800c1b2:	6a3b      	ldr	r3, [r7, #32]
 800c1b4:	0c1b      	lsrs	r3, r3, #16
 800c1b6:	b2db      	uxtb	r3, r3
 800c1b8:	77bb      	strb	r3, [r7, #30]
  Set_Current_Address_Pointer(chip,Address);
 800c1ba:	f107 021c 	add.w	r2, r7, #28
 800c1be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c1c2:	4611      	mov	r1, r2
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f7ff f909 	bl	800b3dc <Set_Current_Address_Pointer>
}
 800c1ca:	bf00      	nop
 800c1cc:	374c      	adds	r7, #76	; 0x4c
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1d4:	080152c4 	.word	0x080152c4
 800c1d8:	080152f0 	.word	0x080152f0
 800c1dc:	40002800 	.word	0x40002800
 800c1e0:	0801530c 	.word	0x0801530c
 800c1e4:	08015330 	.word	0x08015330
 800c1e8:	0801533c 	.word	0x0801533c

0800c1ec <Routine_Init_STATE>:

static void Routine_Init_STATE(void)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b088      	sub	sp, #32
 800c1f0:	af00      	add	r7, sp, #0
	//Initialize and configure the flash chips
	printf("Setting Up Flash Chips...\r\n");
 800c1f2:	485c      	ldr	r0, [pc, #368]	; (800c364 <Routine_Init_STATE+0x178>)
 800c1f4:	f001 fba2 	bl	800d93c <puts>
	uint8_t status;

	uint32_t backup_val;
	Init_Flash_Chips(&status);
 800c1f8:	f107 030b 	add.w	r3, r7, #11
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f7fb fea9 	bl	8007f54 <Init_Flash_Chips>
	backup_val = status;
 800c202:	7afb      	ldrb	r3, [r7, #11]
 800c204:	61fb      	str	r3, [r7, #28]
	//set address to point to statusbyte (memory location 0x00,0x00,0x00)

	//Find the bit set in the lowest bit of the status position

	uint8_t Active_Set = 0;			//flag to keep track of chip statuses
 800c206:	2300      	movs	r3, #0
 800c208:	76fb      	strb	r3, [r7, #27]
	printf("Allocating Chip Statuses...\r\n");
 800c20a:	4857      	ldr	r0, [pc, #348]	; (800c368 <Routine_Init_STATE+0x17c>)
 800c20c:	f001 fb96 	bl	800d93c <puts>
	for (int i = 0; i < 4; ++i)
 800c210:	2300      	movs	r3, #0
 800c212:	617b      	str	r3, [r7, #20]
 800c214:	e06a      	b.n	800c2ec <Routine_Init_STATE+0x100>
	{
		uint8_t set = (status & 0b1<<i)>>i;
 800c216:	7afb      	ldrb	r3, [r7, #11]
 800c218:	4619      	mov	r1, r3
 800c21a:	2201      	movs	r2, #1
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	fa02 f303 	lsl.w	r3, r2, r3
 800c222:	ea01 0203 	and.w	r2, r1, r3
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	fa42 f303 	asr.w	r3, r2, r3
 800c22c:	74bb      	strb	r3, [r7, #18]
		if(set)
 800c22e:	7cbb      	ldrb	r3, [r7, #18]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d052      	beq.n	800c2da <Routine_Init_STATE+0xee>
		{

			Chip_Status_t flashchips;
			if(Active_Set == 0)		// no chip set yet
 800c234:	7efb      	ldrb	r3, [r7, #27]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d10c      	bne.n	800c254 <Routine_Init_STATE+0x68>
			{
				flashchips = Active;
 800c23a:	2301      	movs	r3, #1
 800c23c:	72bb      	strb	r3, [r7, #10]
				backup_val |= ((i+1)<<8);
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	3301      	adds	r3, #1
 800c242:	021b      	lsls	r3, r3, #8
 800c244:	461a      	mov	r2, r3
 800c246:	69fb      	ldr	r3, [r7, #28]
 800c248:	4313      	orrs	r3, r2
 800c24a:	61fb      	str	r3, [r7, #28]
				Active_Set++;
 800c24c:	7efb      	ldrb	r3, [r7, #27]
 800c24e:	3301      	adds	r3, #1
 800c250:	76fb      	strb	r3, [r7, #27]
 800c252:	e011      	b.n	800c278 <Routine_Init_STATE+0x8c>
			}else if(Active_Set == 1)//1st chip found
 800c254:	7efb      	ldrb	r3, [r7, #27]
 800c256:	2b01      	cmp	r3, #1
 800c258:	d10c      	bne.n	800c274 <Routine_Init_STATE+0x88>
			{
				flashchips = Next_Active;
 800c25a:	2302      	movs	r3, #2
 800c25c:	72bb      	strb	r3, [r7, #10]
				backup_val |= (i+1)<<24;
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	3301      	adds	r3, #1
 800c262:	061b      	lsls	r3, r3, #24
 800c264:	461a      	mov	r2, r3
 800c266:	69fb      	ldr	r3, [r7, #28]
 800c268:	4313      	orrs	r3, r2
 800c26a:	61fb      	str	r3, [r7, #28]
				Active_Set++;
 800c26c:	7efb      	ldrb	r3, [r7, #27]
 800c26e:	3301      	adds	r3, #1
 800c270:	76fb      	strb	r3, [r7, #27]
 800c272:	e001      	b.n	800c278 <Routine_Init_STATE+0x8c>
			}else
			{
				flashchips = Inactive;
 800c274:	2303      	movs	r3, #3
 800c276:	72bb      	strb	r3, [r7, #10]
			}
			FLASH_SetAddress(0x00,0x00,0x00);
 800c278:	2200      	movs	r2, #0
 800c27a:	2100      	movs	r1, #0
 800c27c:	2000      	movs	r0, #0
 800c27e:	f7fb ff8b 	bl	8008198 <FLASH_SetAddress>
			FLASH_ERASE_Page(i+1);
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	3301      	adds	r3, #1
 800c286:	4618      	mov	r0, r3
 800c288:	f7fc f912 	bl	80084b0 <FLASH_ERASE_Page>
			FLASH_WRITE_PageOrByte_NoErase((i+1),&flashchips,1);
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	3301      	adds	r3, #1
 800c290:	f107 010a 	add.w	r1, r7, #10
 800c294:	2201      	movs	r2, #1
 800c296:	4618      	mov	r0, r3
 800c298:	f7fc f8d0 	bl	800843c <FLASH_WRITE_PageOrByte_NoErase>
			uint8_t* buff;
			buff = FLASH_READ_Page(i+1);
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	3301      	adds	r3, #1
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f7fb ffff 	bl	80082a4 <FLASH_READ_Page>
 800c2a6:	60f8      	str	r0, [r7, #12]
			printf("Chip %d Status: %d\r\n",i+1,*buff);
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	1c59      	adds	r1, r3, #1
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	482e      	ldr	r0, [pc, #184]	; (800c36c <Routine_Init_STATE+0x180>)
 800c2b4:	f001 faca 	bl	800d84c <printf>
			//increment current address for the chip and save to back up registers
			FLASH_IncAddress(1);
 800c2b8:	2001      	movs	r0, #1
 800c2ba:	f7fb ff87 	bl	80081cc <FLASH_IncAddress>
			uint32_t address = FLASH_GetAddress();
 800c2be:	f7fb ffbf 	bl	8008240 <FLASH_GetAddress>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	607b      	str	r3, [r7, #4]
			Set_Current_Address_Pointer(i+1,(uint8_t*)&address);
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	b2db      	uxtb	r3, r3
 800c2ca:	3301      	adds	r3, #1
 800c2cc:	b2db      	uxtb	r3, r3
 800c2ce:	1d3a      	adds	r2, r7, #4
 800c2d0:	4611      	mov	r1, r2
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f7ff f882 	bl	800b3dc <Set_Current_Address_Pointer>
 800c2d8:	e005      	b.n	800c2e6 <Routine_Init_STATE+0xfa>
		}else
		{
			printf("Chip %d Offline!\r\n",i+1);
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	3301      	adds	r3, #1
 800c2de:	4619      	mov	r1, r3
 800c2e0:	4823      	ldr	r0, [pc, #140]	; (800c370 <Routine_Init_STATE+0x184>)
 800c2e2:	f001 fab3 	bl	800d84c <printf>
	for (int i = 0; i < 4; ++i)
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	3301      	adds	r3, #1
 800c2ea:	617b      	str	r3, [r7, #20]
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	2b03      	cmp	r3, #3
 800c2f0:	dd91      	ble.n	800c216 <Routine_Init_STATE+0x2a>
		}
	}
	//Store Chip status variable in RTC->BCKUP byte 0 : chip status, byte 1 : active chip, byte 2: back up chip
	 __HAL_RCC_PWR_CLK_ENABLE();
 800c2f2:	4a20      	ldr	r2, [pc, #128]	; (800c374 <Routine_Init_STATE+0x188>)
 800c2f4:	4b1f      	ldr	r3, [pc, #124]	; (800c374 <Routine_Init_STATE+0x188>)
 800c2f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2fc:	6593      	str	r3, [r2, #88]	; 0x58
 800c2fe:	4b1d      	ldr	r3, [pc, #116]	; (800c374 <Routine_Init_STATE+0x188>)
 800c300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c306:	603b      	str	r3, [r7, #0]
 800c308:	683b      	ldr	r3, [r7, #0]
	 RTC->BKP1R = backup_val;
 800c30a:	4a1b      	ldr	r2, [pc, #108]	; (800c378 <Routine_Init_STATE+0x18c>)
 800c30c:	69fb      	ldr	r3, [r7, #28]
 800c30e:	6553      	str	r3, [r2, #84]	; 0x54
	 __HAL_RCC_PWR_CLK_DISABLE();
 800c310:	4a18      	ldr	r2, [pc, #96]	; (800c374 <Routine_Init_STATE+0x188>)
 800c312:	4b18      	ldr	r3, [pc, #96]	; (800c374 <Routine_Init_STATE+0x188>)
 800c314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c316:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c31a:	6593      	str	r3, [r2, #88]	; 0x58

	 /* Test Iridium Modem */
	 uint8_t retries = 0;
 800c31c:	2300      	movs	r3, #0
 800c31e:	74fb      	strb	r3, [r7, #19]
	 while(retries++ < 20)
 800c320:	e00a      	b.n	800c338 <Routine_Init_STATE+0x14c>
	 {
		 if(IR_Init_Module() == IR_OK)
 800c322:	f7fd ff2b 	bl	800a17c <IR_Init_Module>
 800c326:	4603      	mov	r3, r0
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d103      	bne.n	800c334 <Routine_Init_STATE+0x148>
	 	 {
			 IR_On = 1;
 800c32c:	4b13      	ldr	r3, [pc, #76]	; (800c37c <Routine_Init_STATE+0x190>)
 800c32e:	2201      	movs	r2, #1
 800c330:	701a      	strb	r2, [r3, #0]
			 break;
 800c332:	e006      	b.n	800c342 <Routine_Init_STATE+0x156>
	 	 }
	 	 IR_DeInit_Module();
 800c334:	f7fd ff74 	bl	800a220 <IR_DeInit_Module>
	 while(retries++ < 20)
 800c338:	7cfb      	ldrb	r3, [r7, #19]
 800c33a:	1c5a      	adds	r2, r3, #1
 800c33c:	74fa      	strb	r2, [r7, #19]
 800c33e:	2b13      	cmp	r3, #19
 800c340:	d9ef      	bls.n	800c322 <Routine_Init_STATE+0x136>
	 }
	 if(IR_On)
 800c342:	4b0e      	ldr	r3, [pc, #56]	; (800c37c <Routine_Init_STATE+0x190>)
 800c344:	781b      	ldrb	r3, [r3, #0]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d003      	beq.n	800c352 <Routine_Init_STATE+0x166>
	 {
		 printf("Iridium Module online!\r\n");
 800c34a:	480d      	ldr	r0, [pc, #52]	; (800c380 <Routine_Init_STATE+0x194>)
 800c34c:	f001 faf6 	bl	800d93c <puts>
 800c350:	e002      	b.n	800c358 <Routine_Init_STATE+0x16c>
	 }else
	 {
		 printf("Error Connecting To Modem\r\n");
 800c352:	480c      	ldr	r0, [pc, #48]	; (800c384 <Routine_Init_STATE+0x198>)
 800c354:	f001 faf2 	bl	800d93c <puts>
	 }
	 IR_DeInit_Module();
 800c358:	f7fd ff62 	bl	800a220 <IR_DeInit_Module>
}
 800c35c:	bf00      	nop
 800c35e:	3720      	adds	r7, #32
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}
 800c364:	08015348 	.word	0x08015348
 800c368:	08015364 	.word	0x08015364
 800c36c:	08015384 	.word	0x08015384
 800c370:	0801539c 	.word	0x0801539c
 800c374:	40021000 	.word	0x40021000
 800c378:	40002800 	.word	0x40002800
 800c37c:	20000916 	.word	0x20000916
 800c380:	080153b0 	.word	0x080153b0
 800c384:	080153c8 	.word	0x080153c8

0800c388 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800c388:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c3c0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800c38c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800c38e:	e003      	b.n	800c398 <LoopCopyDataInit>

0800c390 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800c390:	4b0c      	ldr	r3, [pc, #48]	; (800c3c4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800c392:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800c394:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800c396:	3104      	adds	r1, #4

0800c398 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800c398:	480b      	ldr	r0, [pc, #44]	; (800c3c8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800c39a:	4b0c      	ldr	r3, [pc, #48]	; (800c3cc <LoopForever+0xe>)
	adds	r2, r0, r1
 800c39c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800c39e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800c3a0:	d3f6      	bcc.n	800c390 <CopyDataInit>
	ldr	r2, =_sbss
 800c3a2:	4a0b      	ldr	r2, [pc, #44]	; (800c3d0 <LoopForever+0x12>)
	b	LoopFillZerobss
 800c3a4:	e002      	b.n	800c3ac <LoopFillZerobss>

0800c3a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800c3a6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800c3a8:	f842 3b04 	str.w	r3, [r2], #4

0800c3ac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800c3ac:	4b09      	ldr	r3, [pc, #36]	; (800c3d4 <LoopForever+0x16>)
	cmp	r2, r3
 800c3ae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800c3b0:	d3f9      	bcc.n	800c3a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800c3b2:	f000 fc5d 	bl	800cc70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c3b6:	f000 fc95 	bl	800cce4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800c3ba:	f7ff f9e7 	bl	800b78c <main>

0800c3be <LoopForever>:

LoopForever:
    b LoopForever
 800c3be:	e7fe      	b.n	800c3be <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800c3c0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800c3c4:	080158a8 	.word	0x080158a8
	ldr	r0, =_sdata
 800c3c8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800c3cc:	200006cc 	.word	0x200006cc
	ldr	r2, =_sbss
 800c3d0:	200006cc 	.word	0x200006cc
	ldr	r3, = _ebss
 800c3d4:	200037ec 	.word	0x200037ec

0800c3d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800c3d8:	e7fe      	b.n	800c3d8 <ADC1_2_IRQHandler>
	...

0800c3dc <HAL_MspInit>:
  * @brief  Initialize the Global MSP.
  * @param  None
  * @retval None
  */
void HAL_MspInit(void)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b083      	sub	sp, #12
 800c3e0:	af00      	add	r7, sp, #0
  /* NOTE : This function is generated automatically by STM32CubeMX and eventually  
            modified by the user
   */ 
	  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c3e2:	4a0e      	ldr	r2, [pc, #56]	; (800c41c <HAL_MspInit+0x40>)
 800c3e4:	4b0d      	ldr	r3, [pc, #52]	; (800c41c <HAL_MspInit+0x40>)
 800c3e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3e8:	f043 0301 	orr.w	r3, r3, #1
 800c3ec:	6613      	str	r3, [r2, #96]	; 0x60
 800c3ee:	4b0b      	ldr	r3, [pc, #44]	; (800c41c <HAL_MspInit+0x40>)
 800c3f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3f2:	f003 0301 	and.w	r3, r3, #1
 800c3f6:	607b      	str	r3, [r7, #4]
 800c3f8:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_PWR_CLK_ENABLE();
 800c3fa:	4a08      	ldr	r2, [pc, #32]	; (800c41c <HAL_MspInit+0x40>)
 800c3fc:	4b07      	ldr	r3, [pc, #28]	; (800c41c <HAL_MspInit+0x40>)
 800c3fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c404:	6593      	str	r3, [r2, #88]	; 0x58
 800c406:	4b05      	ldr	r3, [pc, #20]	; (800c41c <HAL_MspInit+0x40>)
 800c408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c40a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c40e:	603b      	str	r3, [r7, #0]
 800c410:	683b      	ldr	r3, [r7, #0]
}
 800c412:	bf00      	nop
 800c414:	370c      	adds	r7, #12
 800c416:	46bd      	mov	sp, r7
 800c418:	bc80      	pop	{r7}
 800c41a:	4770      	bx	lr
 800c41c:	40021000 	.word	0x40021000

0800c420 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b082      	sub	sp, #8
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4a0b      	ldr	r2, [pc, #44]	; (800c45c <HAL_RTC_MspInit+0x3c>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d10f      	bne.n	800c452 <HAL_RTC_MspInit+0x32>
  {
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800c432:	4a0b      	ldr	r2, [pc, #44]	; (800c460 <HAL_RTC_MspInit+0x40>)
 800c434:	4b0a      	ldr	r3, [pc, #40]	; (800c460 <HAL_RTC_MspInit+0x40>)
 800c436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c43a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c43e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800c442:	2200      	movs	r2, #0
 800c444:	2100      	movs	r1, #0
 800c446:	2003      	movs	r0, #3
 800c448:	f7f4 ff7f 	bl	800134a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800c44c:	2003      	movs	r0, #3
 800c44e:	f7f4 ff98 	bl	8001382 <HAL_NVIC_EnableIRQ>

  }

}
 800c452:	bf00      	nop
 800c454:	3708      	adds	r7, #8
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
 800c45a:	bf00      	nop
 800c45c:	40002800 	.word	0x40002800
 800c460:	40021000 	.word	0x40021000

0800c464 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b08e      	sub	sp, #56	; 0x38
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c46c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c470:	2200      	movs	r2, #0
 800c472:	601a      	str	r2, [r3, #0]
 800c474:	605a      	str	r2, [r3, #4]
 800c476:	609a      	str	r2, [r3, #8]
 800c478:	60da      	str	r2, [r3, #12]
 800c47a:	611a      	str	r2, [r3, #16]
  // Debug USART Peripheral
  if(huart->Instance==USART2)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4aa0      	ldr	r2, [pc, #640]	; (800c704 <HAL_UART_MspInit+0x2a0>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d130      	bne.n	800c4e8 <HAL_UART_MspInit+0x84>
  {

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800c486:	4aa0      	ldr	r2, [pc, #640]	; (800c708 <HAL_UART_MspInit+0x2a4>)
 800c488:	4b9f      	ldr	r3, [pc, #636]	; (800c708 <HAL_UART_MspInit+0x2a4>)
 800c48a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c48c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c490:	6593      	str	r3, [r2, #88]	; 0x58
 800c492:	4b9d      	ldr	r3, [pc, #628]	; (800c708 <HAL_UART_MspInit+0x2a4>)
 800c494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c49a:	623b      	str	r3, [r7, #32]
 800c49c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c49e:	4a9a      	ldr	r2, [pc, #616]	; (800c708 <HAL_UART_MspInit+0x2a4>)
 800c4a0:	4b99      	ldr	r3, [pc, #612]	; (800c708 <HAL_UART_MspInit+0x2a4>)
 800c4a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4a4:	f043 0301 	orr.w	r3, r3, #1
 800c4a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c4aa:	4b97      	ldr	r3, [pc, #604]	; (800c708 <HAL_UART_MspInit+0x2a4>)
 800c4ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4ae:	f003 0301 	and.w	r3, r3, #1
 800c4b2:	61fb      	str	r3, [r7, #28]
 800c4b4:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800c4b6:	230c      	movs	r3, #12
 800c4b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c4ba:	2302      	movs	r3, #2
 800c4bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c4c2:	2303      	movs	r3, #3
 800c4c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800c4c6:	2307      	movs	r3, #7
 800c4c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c4ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c4ce:	4619      	mov	r1, r3
 800c4d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c4d4:	f7f5 fae6 	bl	8001aa4 <HAL_GPIO_Init>
    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800c4d8:	2200      	movs	r2, #0
 800c4da:	2100      	movs	r1, #0
 800c4dc:	2026      	movs	r0, #38	; 0x26
 800c4de:	f7f4 ff34 	bl	800134a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800c4e2:	2026      	movs	r0, #38	; 0x26
 800c4e4:	f7f4 ff4d 	bl	8001382 <HAL_NVIC_EnableIRQ>
  }

  //GPS UART Init
  if(huart->Instance==UART4)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	4a87      	ldr	r2, [pc, #540]	; (800c70c <HAL_UART_MspInit+0x2a8>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	f040 808d 	bne.w	800c60e <HAL_UART_MspInit+0x1aa>
  {

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800c4f4:	4a84      	ldr	r2, [pc, #528]	; (800c708 <HAL_UART_MspInit+0x2a4>)
 800c4f6:	4b84      	ldr	r3, [pc, #528]	; (800c708 <HAL_UART_MspInit+0x2a4>)
 800c4f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c4fe:	6593      	str	r3, [r2, #88]	; 0x58
 800c500:	4b81      	ldr	r3, [pc, #516]	; (800c708 <HAL_UART_MspInit+0x2a4>)
 800c502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c504:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c508:	61bb      	str	r3, [r7, #24]
 800c50a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c50c:	4a7e      	ldr	r2, [pc, #504]	; (800c708 <HAL_UART_MspInit+0x2a4>)
 800c50e:	4b7e      	ldr	r3, [pc, #504]	; (800c708 <HAL_UART_MspInit+0x2a4>)
 800c510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c512:	f043 0304 	orr.w	r3, r3, #4
 800c516:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c518:	4b7b      	ldr	r3, [pc, #492]	; (800c708 <HAL_UART_MspInit+0x2a4>)
 800c51a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c51c:	f003 0304 	and.w	r3, r3, #4
 800c520:	617b      	str	r3, [r7, #20]
 800c522:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 800c524:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800c528:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c52a:	2302      	movs	r3, #2
 800c52c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c52e:	2300      	movs	r3, #0
 800c530:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c532:	2303      	movs	r3, #3
 800c534:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800c536:	2308      	movs	r3, #8
 800c538:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c53a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c53e:	4619      	mov	r1, r3
 800c540:	4873      	ldr	r0, [pc, #460]	; (800c710 <HAL_UART_MspInit+0x2ac>)
 800c542:	f7f5 faaf 	bl	8001aa4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 800c546:	4b73      	ldr	r3, [pc, #460]	; (800c714 <HAL_UART_MspInit+0x2b0>)
 800c548:	4a73      	ldr	r2, [pc, #460]	; (800c718 <HAL_UART_MspInit+0x2b4>)
 800c54a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 800c54c:	4b71      	ldr	r3, [pc, #452]	; (800c714 <HAL_UART_MspInit+0x2b0>)
 800c54e:	2202      	movs	r2, #2
 800c550:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c552:	4b70      	ldr	r3, [pc, #448]	; (800c714 <HAL_UART_MspInit+0x2b0>)
 800c554:	2200      	movs	r2, #0
 800c556:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c558:	4b6e      	ldr	r3, [pc, #440]	; (800c714 <HAL_UART_MspInit+0x2b0>)
 800c55a:	2200      	movs	r2, #0
 800c55c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c55e:	4b6d      	ldr	r3, [pc, #436]	; (800c714 <HAL_UART_MspInit+0x2b0>)
 800c560:	2280      	movs	r2, #128	; 0x80
 800c562:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c564:	4b6b      	ldr	r3, [pc, #428]	; (800c714 <HAL_UART_MspInit+0x2b0>)
 800c566:	2200      	movs	r2, #0
 800c568:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c56a:	4b6a      	ldr	r3, [pc, #424]	; (800c714 <HAL_UART_MspInit+0x2b0>)
 800c56c:	2200      	movs	r2, #0
 800c56e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800c570:	4b68      	ldr	r3, [pc, #416]	; (800c714 <HAL_UART_MspInit+0x2b0>)
 800c572:	2200      	movs	r2, #0
 800c574:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c576:	4b67      	ldr	r3, [pc, #412]	; (800c714 <HAL_UART_MspInit+0x2b0>)
 800c578:	2200      	movs	r2, #0
 800c57a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800c57c:	4865      	ldr	r0, [pc, #404]	; (800c714 <HAL_UART_MspInit+0x2b0>)
 800c57e:	f7f4 ff3d 	bl	80013fc <HAL_DMA_Init>
 800c582:	4603      	mov	r3, r0
 800c584:	2b00      	cmp	r3, #0
 800c586:	d000      	beq.n	800c58a <HAL_UART_MspInit+0x126>
 800c588:	bf00      	nop
    {
      __NOP();
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	4a61      	ldr	r2, [pc, #388]	; (800c714 <HAL_UART_MspInit+0x2b0>)
 800c58e:	66da      	str	r2, [r3, #108]	; 0x6c
 800c590:	4a60      	ldr	r2, [pc, #384]	; (800c714 <HAL_UART_MspInit+0x2b0>)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel3;
 800c596:	4b61      	ldr	r3, [pc, #388]	; (800c71c <HAL_UART_MspInit+0x2b8>)
 800c598:	4a61      	ldr	r2, [pc, #388]	; (800c720 <HAL_UART_MspInit+0x2bc>)
 800c59a:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_2;
 800c59c:	4b5f      	ldr	r3, [pc, #380]	; (800c71c <HAL_UART_MspInit+0x2b8>)
 800c59e:	2202      	movs	r2, #2
 800c5a0:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c5a2:	4b5e      	ldr	r3, [pc, #376]	; (800c71c <HAL_UART_MspInit+0x2b8>)
 800c5a4:	2210      	movs	r2, #16
 800c5a6:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c5a8:	4b5c      	ldr	r3, [pc, #368]	; (800c71c <HAL_UART_MspInit+0x2b8>)
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c5ae:	4b5b      	ldr	r3, [pc, #364]	; (800c71c <HAL_UART_MspInit+0x2b8>)
 800c5b0:	2280      	movs	r2, #128	; 0x80
 800c5b2:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c5b4:	4b59      	ldr	r3, [pc, #356]	; (800c71c <HAL_UART_MspInit+0x2b8>)
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c5ba:	4b58      	ldr	r3, [pc, #352]	; (800c71c <HAL_UART_MspInit+0x2b8>)
 800c5bc:	2200      	movs	r2, #0
 800c5be:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800c5c0:	4b56      	ldr	r3, [pc, #344]	; (800c71c <HAL_UART_MspInit+0x2b8>)
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c5c6:	4b55      	ldr	r3, [pc, #340]	; (800c71c <HAL_UART_MspInit+0x2b8>)
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800c5cc:	4853      	ldr	r0, [pc, #332]	; (800c71c <HAL_UART_MspInit+0x2b8>)
 800c5ce:	f7f4 ff15 	bl	80013fc <HAL_DMA_Init>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d000      	beq.n	800c5da <HAL_UART_MspInit+0x176>
 800c5d8:	bf00      	nop
    {
      __NOP();
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	4a4f      	ldr	r2, [pc, #316]	; (800c71c <HAL_UART_MspInit+0x2b8>)
 800c5de:	669a      	str	r2, [r3, #104]	; 0x68
 800c5e0:	4a4e      	ldr	r2, [pc, #312]	; (800c71c <HAL_UART_MspInit+0x2b8>)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4 interrupt Init */

	CLEAR_REG(huart->Instance->CR1);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	601a      	str	r2, [r3, #0]
	CLEAR_REG(huart->Instance->CR2);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	605a      	str	r2, [r3, #4]
	CLEAR_REG(huart->Instance->CR3);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	609a      	str	r2, [r3, #8]

    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800c5fe:	2200      	movs	r2, #0
 800c600:	2100      	movs	r1, #0
 800c602:	2034      	movs	r0, #52	; 0x34
 800c604:	f7f4 fea1 	bl	800134a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800c608:	2034      	movs	r0, #52	; 0x34
 800c60a:	f7f4 feba 	bl	8001382 <HAL_NVIC_EnableIRQ>
  }
  //Iridium Peripheral
  if(huart->Instance==UART5)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	4a44      	ldr	r2, [pc, #272]	; (800c724 <HAL_UART_MspInit+0x2c0>)
 800c614:	4293      	cmp	r3, r2
 800c616:	d170      	bne.n	800c6fa <HAL_UART_MspInit+0x296>
   {


     /* Peripheral clock enable */
     __HAL_RCC_UART5_CLK_ENABLE();
 800c618:	4a3b      	ldr	r2, [pc, #236]	; (800c708 <HAL_UART_MspInit+0x2a4>)
 800c61a:	4b3b      	ldr	r3, [pc, #236]	; (800c708 <HAL_UART_MspInit+0x2a4>)
 800c61c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c61e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c622:	6593      	str	r3, [r2, #88]	; 0x58
 800c624:	4b38      	ldr	r3, [pc, #224]	; (800c708 <HAL_UART_MspInit+0x2a4>)
 800c626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c628:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c62c:	613b      	str	r3, [r7, #16]
 800c62e:	693b      	ldr	r3, [r7, #16]

     __HAL_RCC_GPIOC_CLK_ENABLE();
 800c630:	4a35      	ldr	r2, [pc, #212]	; (800c708 <HAL_UART_MspInit+0x2a4>)
 800c632:	4b35      	ldr	r3, [pc, #212]	; (800c708 <HAL_UART_MspInit+0x2a4>)
 800c634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c636:	f043 0304 	orr.w	r3, r3, #4
 800c63a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c63c:	4b32      	ldr	r3, [pc, #200]	; (800c708 <HAL_UART_MspInit+0x2a4>)
 800c63e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c640:	f003 0304 	and.w	r3, r3, #4
 800c644:	60fb      	str	r3, [r7, #12]
 800c646:	68fb      	ldr	r3, [r7, #12]
     __HAL_RCC_GPIOD_CLK_ENABLE();
 800c648:	4a2f      	ldr	r2, [pc, #188]	; (800c708 <HAL_UART_MspInit+0x2a4>)
 800c64a:	4b2f      	ldr	r3, [pc, #188]	; (800c708 <HAL_UART_MspInit+0x2a4>)
 800c64c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c64e:	f043 0308 	orr.w	r3, r3, #8
 800c652:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c654:	4b2c      	ldr	r3, [pc, #176]	; (800c708 <HAL_UART_MspInit+0x2a4>)
 800c656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c658:	f003 0308 	and.w	r3, r3, #8
 800c65c:	60bb      	str	r3, [r7, #8]
 800c65e:	68bb      	ldr	r3, [r7, #8]
     /**UART5 GPIO Configuration
     PC12     ------> UART5_TX
     PD2     ------> UART5_RX
     */
     GPIO_InitStruct.Pin = IR_TX_Pin;
 800c660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c664:	627b      	str	r3, [r7, #36]	; 0x24
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c666:	2302      	movs	r3, #2
 800c668:	62bb      	str	r3, [r7, #40]	; 0x28
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c66a:	2300      	movs	r3, #0
 800c66c:	62fb      	str	r3, [r7, #44]	; 0x2c
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c66e:	2303      	movs	r3, #3
 800c670:	633b      	str	r3, [r7, #48]	; 0x30
     GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800c672:	2308      	movs	r3, #8
 800c674:	637b      	str	r3, [r7, #52]	; 0x34
     HAL_GPIO_Init(IR_TX_GPIO_Port, &GPIO_InitStruct);
 800c676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c67a:	4619      	mov	r1, r3
 800c67c:	4824      	ldr	r0, [pc, #144]	; (800c710 <HAL_UART_MspInit+0x2ac>)
 800c67e:	f7f5 fa11 	bl	8001aa4 <HAL_GPIO_Init>

     GPIO_InitStruct.Pin = IR_RX_Pin;
 800c682:	2304      	movs	r3, #4
 800c684:	627b      	str	r3, [r7, #36]	; 0x24
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c686:	2302      	movs	r3, #2
 800c688:	62bb      	str	r3, [r7, #40]	; 0x28
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c68a:	2300      	movs	r3, #0
 800c68c:	62fb      	str	r3, [r7, #44]	; 0x2c
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c68e:	2303      	movs	r3, #3
 800c690:	633b      	str	r3, [r7, #48]	; 0x30
     GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800c692:	2308      	movs	r3, #8
 800c694:	637b      	str	r3, [r7, #52]	; 0x34
     HAL_GPIO_Init(IR_RX_GPIO_Port, &GPIO_InitStruct);
 800c696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c69a:	4619      	mov	r1, r3
 800c69c:	4822      	ldr	r0, [pc, #136]	; (800c728 <HAL_UART_MspInit+0x2c4>)
 800c69e:	f7f5 fa01 	bl	8001aa4 <HAL_GPIO_Init>

     /* UART5 DMA Init */
     /* UART5_RX Init */
     hdma_uart5_rx.Instance = DMA2_Channel2;
 800c6a2:	4b22      	ldr	r3, [pc, #136]	; (800c72c <HAL_UART_MspInit+0x2c8>)
 800c6a4:	4a22      	ldr	r2, [pc, #136]	; (800c730 <HAL_UART_MspInit+0x2cc>)
 800c6a6:	601a      	str	r2, [r3, #0]
     hdma_uart5_rx.Init.Request = DMA_REQUEST_2;
 800c6a8:	4b20      	ldr	r3, [pc, #128]	; (800c72c <HAL_UART_MspInit+0x2c8>)
 800c6aa:	2202      	movs	r2, #2
 800c6ac:	605a      	str	r2, [r3, #4]
     hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c6ae:	4b1f      	ldr	r3, [pc, #124]	; (800c72c <HAL_UART_MspInit+0x2c8>)
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	609a      	str	r2, [r3, #8]
     hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c6b4:	4b1d      	ldr	r3, [pc, #116]	; (800c72c <HAL_UART_MspInit+0x2c8>)
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	60da      	str	r2, [r3, #12]
     hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c6ba:	4b1c      	ldr	r3, [pc, #112]	; (800c72c <HAL_UART_MspInit+0x2c8>)
 800c6bc:	2280      	movs	r2, #128	; 0x80
 800c6be:	611a      	str	r2, [r3, #16]
     hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c6c0:	4b1a      	ldr	r3, [pc, #104]	; (800c72c <HAL_UART_MspInit+0x2c8>)
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	615a      	str	r2, [r3, #20]
     hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c6c6:	4b19      	ldr	r3, [pc, #100]	; (800c72c <HAL_UART_MspInit+0x2c8>)
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	619a      	str	r2, [r3, #24]
     hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 800c6cc:	4b17      	ldr	r3, [pc, #92]	; (800c72c <HAL_UART_MspInit+0x2c8>)
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	61da      	str	r2, [r3, #28]
     hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c6d2:	4b16      	ldr	r3, [pc, #88]	; (800c72c <HAL_UART_MspInit+0x2c8>)
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	621a      	str	r2, [r3, #32]
     if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800c6d8:	4814      	ldr	r0, [pc, #80]	; (800c72c <HAL_UART_MspInit+0x2c8>)
 800c6da:	f7f4 fe8f 	bl	80013fc <HAL_DMA_Init>
     {

     }

     __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	4a12      	ldr	r2, [pc, #72]	; (800c72c <HAL_UART_MspInit+0x2c8>)
 800c6e2:	66da      	str	r2, [r3, #108]	; 0x6c
 800c6e4:	4a11      	ldr	r2, [pc, #68]	; (800c72c <HAL_UART_MspInit+0x2c8>)
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6293      	str	r3, [r2, #40]	; 0x28

     /* UART5 interrupt Init */
     HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	2100      	movs	r1, #0
 800c6ee:	2035      	movs	r0, #53	; 0x35
 800c6f0:	f7f4 fe2b 	bl	800134a <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(UART5_IRQn);
 800c6f4:	2035      	movs	r0, #53	; 0x35
 800c6f6:	f7f4 fe44 	bl	8001382 <HAL_NVIC_EnableIRQ>

   }
}
 800c6fa:	bf00      	nop
 800c6fc:	3738      	adds	r7, #56	; 0x38
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
 800c702:	bf00      	nop
 800c704:	40004400 	.word	0x40004400
 800c708:	40021000 	.word	0x40021000
 800c70c:	40004c00 	.word	0x40004c00
 800c710:	48000800 	.word	0x48000800
 800c714:	200009e0 	.word	0x200009e0
 800c718:	40020458 	.word	0x40020458
 800c71c:	20001b74 	.word	0x20001b74
 800c720:	40020430 	.word	0x40020430
 800c724:	40005000 	.word	0x40005000
 800c728:	48000c00 	.word	0x48000c00
 800c72c:	200036d0 	.word	0x200036d0
 800c730:	4002041c 	.word	0x4002041c

0800c734 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b082      	sub	sp, #8
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  //Serial Output UART Deinit
  if(huart->Instance==USART2)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4a26      	ldr	r2, [pc, #152]	; (800c7dc <HAL_UART_MspDeInit+0xa8>)
 800c742:	4293      	cmp	r3, r2
 800c744:	d10d      	bne.n	800c762 <HAL_UART_MspDeInit+0x2e>
  {

    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 800c746:	4a26      	ldr	r2, [pc, #152]	; (800c7e0 <HAL_UART_MspDeInit+0xac>)
 800c748:	4b25      	ldr	r3, [pc, #148]	; (800c7e0 <HAL_UART_MspDeInit+0xac>)
 800c74a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c74c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c750:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800c752:	210c      	movs	r1, #12
 800c754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c758:	f7f5 fb4c 	bl	8001df4 <HAL_GPIO_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800c75c:	2026      	movs	r0, #38	; 0x26
 800c75e:	f7f4 fe1e 	bl	800139e <HAL_NVIC_DisableIRQ>

  }
  //GPS UART Deinit
  if(huart->Instance==UART4)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	4a1f      	ldr	r2, [pc, #124]	; (800c7e4 <HAL_UART_MspDeInit+0xb0>)
 800c768:	4293      	cmp	r3, r2
 800c76a:	d117      	bne.n	800c79c <HAL_UART_MspDeInit+0x68>
  {

    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 800c76c:	4a1c      	ldr	r2, [pc, #112]	; (800c7e0 <HAL_UART_MspDeInit+0xac>)
 800c76e:	4b1c      	ldr	r3, [pc, #112]	; (800c7e0 <HAL_UART_MspDeInit+0xac>)
 800c770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c772:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800c776:	6593      	str	r3, [r2, #88]	; 0x58

    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPS_TX_Pin|GPS_RX_Pin);
 800c778:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800c77c:	481a      	ldr	r0, [pc, #104]	; (800c7e8 <HAL_UART_MspDeInit+0xb4>)
 800c77e:	f7f5 fb39 	bl	8001df4 <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c786:	4618      	mov	r0, r3
 800c788:	f7f4 fef0 	bl	800156c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c790:	4618      	mov	r0, r3
 800c792:	f7f4 feeb 	bl	800156c <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 800c796:	2034      	movs	r0, #52	; 0x34
 800c798:	f7f4 fe01 	bl	800139e <HAL_NVIC_DisableIRQ>

  }

  //Iridium UART DeInit
  if(huart->Instance==UART5)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	4a12      	ldr	r2, [pc, #72]	; (800c7ec <HAL_UART_MspDeInit+0xb8>)
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	d116      	bne.n	800c7d4 <HAL_UART_MspDeInit+0xa0>
   {

     /* Peripheral clock disable */
     __HAL_RCC_UART5_CLK_DISABLE();
 800c7a6:	4a0e      	ldr	r2, [pc, #56]	; (800c7e0 <HAL_UART_MspDeInit+0xac>)
 800c7a8:	4b0d      	ldr	r3, [pc, #52]	; (800c7e0 <HAL_UART_MspDeInit+0xac>)
 800c7aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7ac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c7b0:	6593      	str	r3, [r2, #88]	; 0x58

     /**UART5 GPIO Configuration
     PC12     ------> UART5_TX
     PD2     ------> UART5_RX
     */
     HAL_GPIO_DeInit(IR_TX_GPIO_Port, IR_TX_Pin);
 800c7b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c7b6:	480c      	ldr	r0, [pc, #48]	; (800c7e8 <HAL_UART_MspDeInit+0xb4>)
 800c7b8:	f7f5 fb1c 	bl	8001df4 <HAL_GPIO_DeInit>

     HAL_GPIO_DeInit(IR_RX_GPIO_Port, IR_RX_Pin);
 800c7bc:	2104      	movs	r1, #4
 800c7be:	480c      	ldr	r0, [pc, #48]	; (800c7f0 <HAL_UART_MspDeInit+0xbc>)
 800c7c0:	f7f5 fb18 	bl	8001df4 <HAL_GPIO_DeInit>

     /* UART5 DMA DeInit */
     HAL_DMA_DeInit(huart->hdmarx);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	f7f4 fecf 	bl	800156c <HAL_DMA_DeInit>

     /* UART5 interrupt DeInit */
     HAL_NVIC_DisableIRQ(UART5_IRQn);
 800c7ce:	2035      	movs	r0, #53	; 0x35
 800c7d0:	f7f4 fde5 	bl	800139e <HAL_NVIC_DisableIRQ>

   }


}
 800c7d4:	bf00      	nop
 800c7d6:	3708      	adds	r7, #8
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}
 800c7dc:	40004400 	.word	0x40004400
 800c7e0:	40021000 	.word	0x40021000
 800c7e4:	40004c00 	.word	0x40004c00
 800c7e8:	48000800 	.word	0x48000800
 800c7ec:	40005000 	.word	0x40005000
 800c7f0:	48000c00 	.word	0x48000c00

0800c7f4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b08a      	sub	sp, #40	; 0x28
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c7fc:	f107 0314 	add.w	r3, r7, #20
 800c800:	2200      	movs	r2, #0
 800c802:	601a      	str	r2, [r3, #0]
 800c804:	605a      	str	r2, [r3, #4]
 800c806:	609a      	str	r2, [r3, #8]
 800c808:	60da      	str	r2, [r3, #12]
 800c80a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c814:	d130      	bne.n	800c878 <HAL_TIM_Base_MspInit+0x84>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800c816:	4a27      	ldr	r2, [pc, #156]	; (800c8b4 <HAL_TIM_Base_MspInit+0xc0>)
 800c818:	4b26      	ldr	r3, [pc, #152]	; (800c8b4 <HAL_TIM_Base_MspInit+0xc0>)
 800c81a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c81c:	f043 0301 	orr.w	r3, r3, #1
 800c820:	6593      	str	r3, [r2, #88]	; 0x58
 800c822:	4b24      	ldr	r3, [pc, #144]	; (800c8b4 <HAL_TIM_Base_MspInit+0xc0>)
 800c824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c826:	f003 0301 	and.w	r3, r3, #1
 800c82a:	613b      	str	r3, [r7, #16]
 800c82c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c82e:	4a21      	ldr	r2, [pc, #132]	; (800c8b4 <HAL_TIM_Base_MspInit+0xc0>)
 800c830:	4b20      	ldr	r3, [pc, #128]	; (800c8b4 <HAL_TIM_Base_MspInit+0xc0>)
 800c832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c834:	f043 0301 	orr.w	r3, r3, #1
 800c838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c83a:	4b1e      	ldr	r3, [pc, #120]	; (800c8b4 <HAL_TIM_Base_MspInit+0xc0>)
 800c83c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c83e:	f003 0301 	and.w	r3, r3, #1
 800c842:	60fb      	str	r3, [r7, #12]
 800c844:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800c846:	2302      	movs	r3, #2
 800c848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c84a:	2302      	movs	r3, #2
 800c84c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c84e:	2300      	movs	r3, #0
 800c850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c852:	2300      	movs	r3, #0
 800c854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800c856:	2301      	movs	r3, #1
 800c858:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c85a:	f107 0314 	add.w	r3, r7, #20
 800c85e:	4619      	mov	r1, r3
 800c860:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c864:	f7f5 f91e 	bl	8001aa4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800c868:	2200      	movs	r2, #0
 800c86a:	2100      	movs	r1, #0
 800c86c:	201c      	movs	r0, #28
 800c86e:	f7f4 fd6c 	bl	800134a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800c872:	201c      	movs	r0, #28
 800c874:	f7f4 fd85 	bl	8001382 <HAL_NVIC_EnableIRQ>

  }
  if(htim_base->Instance==TIM3)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	4a0e      	ldr	r2, [pc, #56]	; (800c8b8 <HAL_TIM_Base_MspInit+0xc4>)
 800c87e:	4293      	cmp	r3, r2
 800c880:	d113      	bne.n	800c8aa <HAL_TIM_Base_MspInit+0xb6>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800c882:	4a0c      	ldr	r2, [pc, #48]	; (800c8b4 <HAL_TIM_Base_MspInit+0xc0>)
 800c884:	4b0b      	ldr	r3, [pc, #44]	; (800c8b4 <HAL_TIM_Base_MspInit+0xc0>)
 800c886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c888:	f043 0302 	orr.w	r3, r3, #2
 800c88c:	6593      	str	r3, [r2, #88]	; 0x58
 800c88e:	4b09      	ldr	r3, [pc, #36]	; (800c8b4 <HAL_TIM_Base_MspInit+0xc0>)
 800c890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c892:	f003 0302 	and.w	r3, r3, #2
 800c896:	60bb      	str	r3, [r7, #8]
 800c898:	68bb      	ldr	r3, [r7, #8]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800c89a:	2200      	movs	r2, #0
 800c89c:	2100      	movs	r1, #0
 800c89e:	201d      	movs	r0, #29
 800c8a0:	f7f4 fd53 	bl	800134a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800c8a4:	201d      	movs	r0, #29
 800c8a6:	f7f4 fd6c 	bl	8001382 <HAL_NVIC_EnableIRQ>

  }

}
 800c8aa:	bf00      	nop
 800c8ac:	3728      	adds	r7, #40	; 0x28
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}
 800c8b2:	bf00      	nop
 800c8b4:	40021000 	.word	0x40021000
 800c8b8:	40000400 	.word	0x40000400

0800c8bc <HAL_TIM_Base_MspDeInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b082      	sub	sp, #8
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8cc:	d110      	bne.n	800c8f0 <HAL_TIM_Base_MspDeInit+0x34>
  {

	    /* TIM2 interrupt DeInit */
	    HAL_NVIC_ClearPendingIRQ(TIM2_IRQn);
 800c8ce:	201c      	movs	r0, #28
 800c8d0:	f7f4 fd85 	bl	80013de <HAL_NVIC_ClearPendingIRQ>
	    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 800c8d4:	201c      	movs	r0, #28
 800c8d6:	f7f4 fd62 	bl	800139e <HAL_NVIC_DisableIRQ>

    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 800c8da:	4a0e      	ldr	r2, [pc, #56]	; (800c914 <HAL_TIM_Base_MspDeInit+0x58>)
 800c8dc:	4b0d      	ldr	r3, [pc, #52]	; (800c914 <HAL_TIM_Base_MspDeInit+0x58>)
 800c8de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8e0:	f023 0301 	bic.w	r3, r3, #1
 800c8e4:	6593      	str	r3, [r2, #88]	; 0x58

    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1);
 800c8e6:	2102      	movs	r1, #2
 800c8e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c8ec:	f7f5 fa82 	bl	8001df4 <HAL_GPIO_DeInit>

  }
  if(htim_base->Instance==TIM3)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4a08      	ldr	r2, [pc, #32]	; (800c918 <HAL_TIM_Base_MspDeInit+0x5c>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d108      	bne.n	800c90c <HAL_TIM_Base_MspDeInit+0x50>
   {

     /* Peripheral clock disable */
     __HAL_RCC_TIM3_CLK_DISABLE();
 800c8fa:	4a06      	ldr	r2, [pc, #24]	; (800c914 <HAL_TIM_Base_MspDeInit+0x58>)
 800c8fc:	4b05      	ldr	r3, [pc, #20]	; (800c914 <HAL_TIM_Base_MspDeInit+0x58>)
 800c8fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c900:	f023 0302 	bic.w	r3, r3, #2
 800c904:	6593      	str	r3, [r2, #88]	; 0x58

     /* TIM3 interrupt DeInit */
     HAL_NVIC_DisableIRQ(TIM3_IRQn);
 800c906:	201d      	movs	r0, #29
 800c908:	f7f4 fd49 	bl	800139e <HAL_NVIC_DisableIRQ>

   }

}
 800c90c:	bf00      	nop
 800c90e:	3708      	adds	r7, #8
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}
 800c914:	40021000 	.word	0x40021000
 800c918:	40000400 	.word	0x40000400

0800c91c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b08a      	sub	sp, #40	; 0x28
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c924:	f107 0314 	add.w	r3, r7, #20
 800c928:	2200      	movs	r2, #0
 800c92a:	601a      	str	r2, [r3, #0]
 800c92c:	605a      	str	r2, [r3, #4]
 800c92e:	609a      	str	r2, [r3, #8]
 800c930:	60da      	str	r2, [r3, #12]
 800c932:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	4a17      	ldr	r2, [pc, #92]	; (800c998 <HAL_SPI_MspInit+0x7c>)
 800c93a:	4293      	cmp	r3, r2
 800c93c:	d128      	bne.n	800c990 <HAL_SPI_MspInit+0x74>
  {
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800c93e:	4a17      	ldr	r2, [pc, #92]	; (800c99c <HAL_SPI_MspInit+0x80>)
 800c940:	4b16      	ldr	r3, [pc, #88]	; (800c99c <HAL_SPI_MspInit+0x80>)
 800c942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c948:	6593      	str	r3, [r2, #88]	; 0x58
 800c94a:	4b14      	ldr	r3, [pc, #80]	; (800c99c <HAL_SPI_MspInit+0x80>)
 800c94c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c94e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c952:	613b      	str	r3, [r7, #16]
 800c954:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c956:	4a11      	ldr	r2, [pc, #68]	; (800c99c <HAL_SPI_MspInit+0x80>)
 800c958:	4b10      	ldr	r3, [pc, #64]	; (800c99c <HAL_SPI_MspInit+0x80>)
 800c95a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c95c:	f043 0302 	orr.w	r3, r3, #2
 800c960:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c962:	4b0e      	ldr	r3, [pc, #56]	; (800c99c <HAL_SPI_MspInit+0x80>)
 800c964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c966:	f003 0302 	and.w	r3, r3, #2
 800c96a:	60fb      	str	r3, [r7, #12]
 800c96c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
     PB13     ------> SPI2_SCK
     PB14     ------> SPI2_MISO
     PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800c96e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800c972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c974:	2302      	movs	r3, #2
 800c976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c978:	2300      	movs	r3, #0
 800c97a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c97c:	2303      	movs	r3, #3
 800c97e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800c980:	2305      	movs	r3, #5
 800c982:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c984:	f107 0314 	add.w	r3, r7, #20
 800c988:	4619      	mov	r1, r3
 800c98a:	4805      	ldr	r0, [pc, #20]	; (800c9a0 <HAL_SPI_MspInit+0x84>)
 800c98c:	f7f5 f88a 	bl	8001aa4 <HAL_GPIO_Init>

  }

}
 800c990:	bf00      	nop
 800c992:	3728      	adds	r7, #40	; 0x28
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}
 800c998:	40003800 	.word	0x40003800
 800c99c:	40021000 	.word	0x40021000
 800c9a0:	48000400 	.word	0x48000400

0800c9a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	af00      	add	r7, sp, #0
  /* USER CODE NonMaskableInt_IRQn 0 */


}
 800c9a8:	bf00      	nop
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bc80      	pop	{r7}
 800c9ae:	4770      	bx	lr

0800c9b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	af00      	add	r7, sp, #0
  /* USER CODE HardFault_IRQn 0 */


  while (1)
 800c9b4:	e7fe      	b.n	800c9b4 <HardFault_Handler+0x4>

0800c9b6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c9b6:	b480      	push	{r7}
 800c9b8:	af00      	add	r7, sp, #0
  /* USER CODE MemoryManagement_IRQn 0 */


  while (1)
 800c9ba:	e7fe      	b.n	800c9ba <MemManage_Handler+0x4>

0800c9bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */


  while (1)
 800c9c0:	e7fe      	b.n	800c9c0 <BusFault_Handler+0x4>

0800c9c2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c9c2:	b480      	push	{r7}
 800c9c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */


  while (1)
 800c9c6:	e7fe      	b.n	800c9c6 <UsageFault_Handler+0x4>

0800c9c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800c9c8:	b480      	push	{r7}
 800c9ca:	af00      	add	r7, sp, #0
  /* USER CODE SVCall_IRQn 0 */


}
 800c9cc:	bf00      	nop
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bc80      	pop	{r7}
 800c9d2:	4770      	bx	lr

0800c9d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	af00      	add	r7, sp, #0
  /* USER CODE DebugMonitor_IRQn 0 */


}
 800c9d8:	bf00      	nop
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bc80      	pop	{r7}
 800c9de:	4770      	bx	lr

0800c9e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	af00      	add	r7, sp, #0
  /* USER CODE PendSV_IRQn 0 */


}
 800c9e4:	bf00      	nop
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bc80      	pop	{r7}
 800c9ea:	4770      	bx	lr

0800c9ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  HAL_IncTick();
 800c9f0:	f7f4 fb38 	bl	8001064 <HAL_IncTick>

}
 800c9f4:	bf00      	nop
 800c9f6:	bd80      	pop	{r7, pc}

0800c9f8 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	af00      	add	r7, sp, #0
  /* USER CODE RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800c9fc:	4802      	ldr	r0, [pc, #8]	; (800ca08 <RTC_WKUP_IRQHandler+0x10>)
 800c9fe:	f7f7 fb0f 	bl	8004020 <HAL_RTCEx_WakeUpTimerIRQHandler>

}
 800ca02:	bf00      	nop
 800ca04:	bd80      	pop	{r7, pc}
 800ca06:	bf00      	nop
 800ca08:	200037b8 	.word	0x200037b8

0800ca0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	af00      	add	r7, sp, #0
  /* USER CODE TIM2_IRQn 0 */
  USART_TIM_RTO_Handler(hgps.gps_htim); //custom call back function
 800ca10:	4b05      	ldr	r3, [pc, #20]	; (800ca28 <TIM2_IRQHandler+0x1c>)
 800ca12:	689b      	ldr	r3, [r3, #8]
 800ca14:	4618      	mov	r0, r3
 800ca16:	f7fc ff53 	bl	80098c0 <USART_TIM_RTO_Handler>

  HAL_TIM_IRQHandler(hgps.gps_htim);	 //HAL default handler
 800ca1a:	4b03      	ldr	r3, [pc, #12]	; (800ca28 <TIM2_IRQHandler+0x1c>)
 800ca1c:	689b      	ldr	r3, [r3, #8]
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f7f8 fcc2 	bl	80053a8 <HAL_TIM_IRQHandler>

}
 800ca24:	bf00      	nop
 800ca26:	bd80      	pop	{r7, pc}
 800ca28:	20000a2c 	.word	0x20000a2c

0800ca2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	USART_RTO_IRQHandler(&htim3);
 800ca30:	4803      	ldr	r0, [pc, #12]	; (800ca40 <TIM3_IRQHandler+0x14>)
 800ca32:	f7fe f83b 	bl	800aaac <USART_RTO_IRQHandler>
	HAL_TIM_IRQHandler(&htim3);
 800ca36:	4802      	ldr	r0, [pc, #8]	; (800ca40 <TIM3_IRQHandler+0x14>)
 800ca38:	f7f8 fcb6 	bl	80053a8 <HAL_TIM_IRQHandler>
}
 800ca3c:	bf00      	nop
 800ca3e:	bd80      	pop	{r7, pc}
 800ca40:	200035b8 	.word	0x200035b8

0800ca44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	af00      	add	r7, sp, #0
  /* USER CODE USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800ca48:	4802      	ldr	r0, [pc, #8]	; (800ca54 <USART2_IRQHandler+0x10>)
 800ca4a:	f7fa fb0b 	bl	8007064 <HAL_UART_IRQHandler>

}
 800ca4e:	bf00      	nop
 800ca50:	bd80      	pop	{r7, pc}
 800ca52:	bf00      	nop
 800ca54:	20003734 	.word	0x20003734

0800ca58 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	af00      	add	r7, sp, #0
  /* USER CODE UART4_IRQn 0 */
	USART_GPS_IRQHandler(&hgps); //custom user Call Back function
 800ca5c:	4802      	ldr	r0, [pc, #8]	; (800ca68 <UART4_IRQHandler+0x10>)
 800ca5e:	f7fd f8db 	bl	8009c18 <USART_GPS_IRQHandler>

}
 800ca62:	bf00      	nop
 800ca64:	bd80      	pop	{r7, pc}
 800ca66:	bf00      	nop
 800ca68:	20000a2c 	.word	0x20000a2c

0800ca6c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
  USART_Iridium_IRQHandler(&huart5);
 800ca70:	4802      	ldr	r0, [pc, #8]	; (800ca7c <UART5_IRQHandler+0x10>)
 800ca72:	f7fe f86f 	bl	800ab54 <USART_Iridium_IRQHandler>
}
 800ca76:	bf00      	nop
 800ca78:	bd80      	pop	{r7, pc}
 800ca7a:	bf00      	nop
 800ca7c:	20003600 	.word	0x20003600

0800ca80 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 800ca84:	4803      	ldr	r0, [pc, #12]	; (800ca94 <DMA2_Channel2_IRQHandler+0x14>)
 800ca86:	f7f4 ff24 	bl	80018d2 <HAL_DMA_IRQHandler>
  DMA_Iridium_Periph_IRQHandler(&huart5);
 800ca8a:	4803      	ldr	r0, [pc, #12]	; (800ca98 <DMA2_Channel2_IRQHandler+0x18>)
 800ca8c:	f7fd ff24 	bl	800a8d8 <DMA_Iridium_Periph_IRQHandler>
}
 800ca90:	bf00      	nop
 800ca92:	bd80      	pop	{r7, pc}
 800ca94:	200036d0 	.word	0x200036d0
 800ca98:	20003600 	.word	0x20003600

0800ca9c <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800caa0:	4802      	ldr	r0, [pc, #8]	; (800caac <DMA2_Channel3_IRQHandler+0x10>)
 800caa2:	f7f4 ff16 	bl	80018d2 <HAL_DMA_IRQHandler>

}
 800caa6:	bf00      	nop
 800caa8:	bd80      	pop	{r7, pc}
 800caaa:	bf00      	nop
 800caac:	20001b74 	.word	0x20001b74

0800cab0 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	af00      	add	r7, sp, #0
  /* USER CODE DMA2_Channel5_IRQn 0 */
  DMA_GNSS_Periph_IRQHandler(&hgps);
 800cab4:	4802      	ldr	r0, [pc, #8]	; (800cac0 <DMA2_Channel5_IRQHandler+0x10>)
 800cab6:	f7fd f80f 	bl	8009ad8 <DMA_GNSS_Periph_IRQHandler>
}
 800caba:	bf00      	nop
 800cabc:	bd80      	pop	{r7, pc}
 800cabe:	bf00      	nop
 800cac0:	20000a2c 	.word	0x20000a2c

0800cac4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	af00      	add	r7, sp, #0
  /* USER CODE DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel1);
 800cac8:	4803      	ldr	r0, [pc, #12]	; (800cad8 <DMA1_Channel1_IRQHandler+0x14>)
 800caca:	f7f4 ff02 	bl	80018d2 <HAL_DMA_IRQHandler>
  DMA_GNSS_MEM_IRQHandler(&hgps);
 800cace:	4803      	ldr	r0, [pc, #12]	; (800cadc <DMA1_Channel1_IRQHandler+0x18>)
 800cad0:	f7fc ff2a 	bl	8009928 <DMA_GNSS_MEM_IRQHandler>

}
 800cad4:	bf00      	nop
 800cad6:	bd80      	pop	{r7, pc}
 800cad8:	20000a64 	.word	0x20000a64
 800cadc:	20000a2c 	.word	0x20000a2c

0800cae0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel2);
 800cae4:	4803      	ldr	r0, [pc, #12]	; (800caf4 <DMA1_Channel2_IRQHandler+0x14>)
 800cae6:	f7f4 fef4 	bl	80018d2 <HAL_DMA_IRQHandler>
  DMA_Iridium_MEM_IRQHandler(&hdma_memtomem_dma1_channel2);
 800caea:	4802      	ldr	r0, [pc, #8]	; (800caf4 <DMA1_Channel2_IRQHandler+0x14>)
 800caec:	f7fd ff6a 	bl	800a9c4 <DMA_Iridium_MEM_IRQHandler>

}
 800caf0:	bf00      	nop
 800caf2:	bd80      	pop	{r7, pc}
 800caf4:	20003684 	.word	0x20003684

0800caf8 <EXTI15_10_IRQHandler>:

/*
 * @brief: EXTI IRQ Handler for Wake Up Pin 2 (PC13)
 */
void EXTI15_10_IRQHandler(void)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	af00      	add	r7, sp, #0
	/* Wake Up Pin Handler */
	if(__HAL_GPIO_EXTI_GET_FLAG(EXTI_IRIDIUM_RING_WAKE_PIN))
 800cafc:	4b07      	ldr	r3, [pc, #28]	; (800cb1c <EXTI15_10_IRQHandler+0x24>)
 800cafe:	695b      	ldr	r3, [r3, #20]
 800cb00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d005      	beq.n	800cb14 <EXTI15_10_IRQHandler+0x1c>
	{
		__HAL_GPIO_EXTI_CLEAR_FLAG(EXTI_IRIDIUM_RING_WAKE_PIN);
 800cb08:	4b04      	ldr	r3, [pc, #16]	; (800cb1c <EXTI15_10_IRQHandler+0x24>)
 800cb0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800cb0e:	615a      	str	r2, [r3, #20]
		//interrupt source from PWR WAKE PIN 2 == IRIDIUM Recieve Event
		Routine_ASYNC_IRIDIUM_RX();
 800cb10:	f7fe fdac 	bl	800b66c <Routine_ASYNC_IRIDIUM_RX>
	}

	/* Iridium Control Pin Handlers */

	Iridium_ControlPin_IRQHandler();
 800cb14:	f7fe f90c 	bl	800ad30 <Iridium_ControlPin_IRQHandler>
}
 800cb18:	bf00      	nop
 800cb1a:	bd80      	pop	{r7, pc}
 800cb1c:	40010400 	.word	0x40010400

0800cb20 <EXTI9_5_IRQHandler>:

/*
 * @brief: EXTI IRQ Handler for Wake Up Pin 5 (PC5)
 */
void EXTI9_5_IRQHandler(void)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	af00      	add	r7, sp, #0
	/* Wake Up Pin Handler */
	if(__HAL_GPIO_EXTI_GET_FLAG(EXTI_IMU_EVENT_WAKE_PIN))
 800cb24:	4b06      	ldr	r3, [pc, #24]	; (800cb40 <EXTI9_5_IRQHandler+0x20>)
 800cb26:	695b      	ldr	r3, [r3, #20]
 800cb28:	f003 0320 	and.w	r3, r3, #32
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d004      	beq.n	800cb3a <EXTI9_5_IRQHandler+0x1a>
	{
		__HAL_GPIO_EXTI_CLEAR_FLAG(EXTI_IMU_EVENT_WAKE_PIN);
 800cb30:	4b03      	ldr	r3, [pc, #12]	; (800cb40 <EXTI9_5_IRQHandler+0x20>)
 800cb32:	2220      	movs	r2, #32
 800cb34:	615a      	str	r2, [r3, #20]

		//ROUTINE START
		Routine_Async_IMUevent_Sample();
 800cb36:	f7fe fdbf 	bl	800b6b8 <Routine_Async_IMUevent_Sample>
	}

}
 800cb3a:	bf00      	nop
 800cb3c:	bd80      	pop	{r7, pc}
 800cb3e:	bf00      	nop
 800cb40:	40010400 	.word	0x40010400

0800cb44 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800cb44:	b590      	push	{r4, r7, lr}
 800cb46:	b087      	sub	sp, #28
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	60f8      	str	r0, [r7, #12]
 800cb4c:	60b9      	str	r1, [r7, #8]
 800cb4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cb50:	2300      	movs	r3, #0
 800cb52:	617b      	str	r3, [r7, #20]
 800cb54:	e00a      	b.n	800cb6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800cb56:	68bc      	ldr	r4, [r7, #8]
 800cb58:	1c63      	adds	r3, r4, #1
 800cb5a:	60bb      	str	r3, [r7, #8]
 800cb5c:	f3af 8000 	nop.w
 800cb60:	4603      	mov	r3, r0
 800cb62:	b2db      	uxtb	r3, r3
 800cb64:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	3301      	adds	r3, #1
 800cb6a:	617b      	str	r3, [r7, #20]
 800cb6c:	697a      	ldr	r2, [r7, #20]
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	429a      	cmp	r2, r3
 800cb72:	dbf0      	blt.n	800cb56 <_read+0x12>
	}

return len;
 800cb74:	687b      	ldr	r3, [r7, #4]
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	371c      	adds	r7, #28
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd90      	pop	{r4, r7, pc}

0800cb7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800cb7e:	b580      	push	{r7, lr}
 800cb80:	b086      	sub	sp, #24
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	60f8      	str	r0, [r7, #12]
 800cb86:	60b9      	str	r1, [r7, #8]
 800cb88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	617b      	str	r3, [r7, #20]
 800cb8e:	e009      	b.n	800cba4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	1c5a      	adds	r2, r3, #1
 800cb94:	60ba      	str	r2, [r7, #8]
 800cb96:	781b      	ldrb	r3, [r3, #0]
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f7fe fb39 	bl	800b210 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cb9e:	697b      	ldr	r3, [r7, #20]
 800cba0:	3301      	adds	r3, #1
 800cba2:	617b      	str	r3, [r7, #20]
 800cba4:	697a      	ldr	r2, [r7, #20]
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	dbf1      	blt.n	800cb90 <_write+0x12>
	}
	return len;
 800cbac:	687b      	ldr	r3, [r7, #4]
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3718      	adds	r7, #24
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}
	...

0800cbb8 <_sbrk>:

caddr_t _sbrk(int incr)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b084      	sub	sp, #16
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800cbc0:	4b11      	ldr	r3, [pc, #68]	; (800cc08 <_sbrk+0x50>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d102      	bne.n	800cbce <_sbrk+0x16>
		heap_end = &end;
 800cbc8:	4b0f      	ldr	r3, [pc, #60]	; (800cc08 <_sbrk+0x50>)
 800cbca:	4a10      	ldr	r2, [pc, #64]	; (800cc0c <_sbrk+0x54>)
 800cbcc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800cbce:	4b0e      	ldr	r3, [pc, #56]	; (800cc08 <_sbrk+0x50>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800cbd4:	4b0c      	ldr	r3, [pc, #48]	; (800cc08 <_sbrk+0x50>)
 800cbd6:	681a      	ldr	r2, [r3, #0]
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	4413      	add	r3, r2
 800cbdc:	466a      	mov	r2, sp
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	d907      	bls.n	800cbf2 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800cbe2:	f000 f879 	bl	800ccd8 <__errno>
 800cbe6:	4602      	mov	r2, r0
 800cbe8:	230c      	movs	r3, #12
 800cbea:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800cbec:	f04f 33ff 	mov.w	r3, #4294967295
 800cbf0:	e006      	b.n	800cc00 <_sbrk+0x48>
	}

	heap_end += incr;
 800cbf2:	4b05      	ldr	r3, [pc, #20]	; (800cc08 <_sbrk+0x50>)
 800cbf4:	681a      	ldr	r2, [r3, #0]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	4413      	add	r3, r2
 800cbfa:	4a03      	ldr	r2, [pc, #12]	; (800cc08 <_sbrk+0x50>)
 800cbfc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	3710      	adds	r7, #16
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd80      	pop	{r7, pc}
 800cc08:	2000091c 	.word	0x2000091c
 800cc0c:	200037ec 	.word	0x200037ec

0800cc10 <_close>:

int _close(int file)
{
 800cc10:	b480      	push	{r7}
 800cc12:	b083      	sub	sp, #12
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
	return -1;
 800cc18:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	370c      	adds	r7, #12
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bc80      	pop	{r7}
 800cc24:	4770      	bx	lr

0800cc26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800cc26:	b480      	push	{r7}
 800cc28:	b083      	sub	sp, #12
 800cc2a:	af00      	add	r7, sp, #0
 800cc2c:	6078      	str	r0, [r7, #4]
 800cc2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800cc36:	605a      	str	r2, [r3, #4]
	return 0;
 800cc38:	2300      	movs	r3, #0
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	370c      	adds	r7, #12
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bc80      	pop	{r7}
 800cc42:	4770      	bx	lr

0800cc44 <_isatty>:

int _isatty(int file)
{
 800cc44:	b480      	push	{r7}
 800cc46:	b083      	sub	sp, #12
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
	return 1;
 800cc4c:	2301      	movs	r3, #1
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	370c      	adds	r7, #12
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bc80      	pop	{r7}
 800cc56:	4770      	bx	lr

0800cc58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b085      	sub	sp, #20
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	60f8      	str	r0, [r7, #12]
 800cc60:	60b9      	str	r1, [r7, #8]
 800cc62:	607a      	str	r2, [r7, #4]
	return 0;
 800cc64:	2300      	movs	r3, #0
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3714      	adds	r7, #20
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bc80      	pop	{r7}
 800cc6e:	4770      	bx	lr

0800cc70 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800cc70:	b480      	push	{r7}
 800cc72:	af00      	add	r7, sp, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800cc74:	4a12      	ldr	r2, [pc, #72]	; (800ccc0 <SystemInit+0x50>)
 800cc76:	4b12      	ldr	r3, [pc, #72]	; (800ccc0 <SystemInit+0x50>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f043 0301 	orr.w	r3, r3, #1
 800cc7e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800cc80:	4b0f      	ldr	r3, [pc, #60]	; (800ccc0 <SystemInit+0x50>)
 800cc82:	2200      	movs	r2, #0
 800cc84:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800cc86:	4a0e      	ldr	r2, [pc, #56]	; (800ccc0 <SystemInit+0x50>)
 800cc88:	4b0d      	ldr	r3, [pc, #52]	; (800ccc0 <SystemInit+0x50>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800cc90:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800cc94:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800cc96:	4b0a      	ldr	r3, [pc, #40]	; (800ccc0 <SystemInit+0x50>)
 800cc98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cc9c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800cc9e:	4a08      	ldr	r2, [pc, #32]	; (800ccc0 <SystemInit+0x50>)
 800cca0:	4b07      	ldr	r3, [pc, #28]	; (800ccc0 <SystemInit+0x50>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cca8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800ccaa:	4b05      	ldr	r3, [pc, #20]	; (800ccc0 <SystemInit+0x50>)
 800ccac:	2200      	movs	r2, #0
 800ccae:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ccb0:	4b04      	ldr	r3, [pc, #16]	; (800ccc4 <SystemInit+0x54>)
 800ccb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ccb6:	609a      	str	r2, [r3, #8]
#endif
}
 800ccb8:	bf00      	nop
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bc80      	pop	{r7}
 800ccbe:	4770      	bx	lr
 800ccc0:	40021000 	.word	0x40021000
 800ccc4:	e000ed00 	.word	0xe000ed00

0800ccc8 <atof>:
 800ccc8:	2100      	movs	r1, #0
 800ccca:	f001 bd6d 	b.w	800e7a8 <strtod>

0800ccce <atoi>:
 800ccce:	220a      	movs	r2, #10
 800ccd0:	2100      	movs	r1, #0
 800ccd2:	f001 be63 	b.w	800e99c <strtol>
	...

0800ccd8 <__errno>:
 800ccd8:	4b01      	ldr	r3, [pc, #4]	; (800cce0 <__errno+0x8>)
 800ccda:	6818      	ldr	r0, [r3, #0]
 800ccdc:	4770      	bx	lr
 800ccde:	bf00      	nop
 800cce0:	20000014 	.word	0x20000014

0800cce4 <__libc_init_array>:
 800cce4:	b570      	push	{r4, r5, r6, lr}
 800cce6:	4e0d      	ldr	r6, [pc, #52]	; (800cd1c <__libc_init_array+0x38>)
 800cce8:	4c0d      	ldr	r4, [pc, #52]	; (800cd20 <__libc_init_array+0x3c>)
 800ccea:	1ba4      	subs	r4, r4, r6
 800ccec:	10a4      	asrs	r4, r4, #2
 800ccee:	2500      	movs	r5, #0
 800ccf0:	42a5      	cmp	r5, r4
 800ccf2:	d109      	bne.n	800cd08 <__libc_init_array+0x24>
 800ccf4:	4e0b      	ldr	r6, [pc, #44]	; (800cd24 <__libc_init_array+0x40>)
 800ccf6:	4c0c      	ldr	r4, [pc, #48]	; (800cd28 <__libc_init_array+0x44>)
 800ccf8:	f008 f86e 	bl	8014dd8 <_init>
 800ccfc:	1ba4      	subs	r4, r4, r6
 800ccfe:	10a4      	asrs	r4, r4, #2
 800cd00:	2500      	movs	r5, #0
 800cd02:	42a5      	cmp	r5, r4
 800cd04:	d105      	bne.n	800cd12 <__libc_init_array+0x2e>
 800cd06:	bd70      	pop	{r4, r5, r6, pc}
 800cd08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cd0c:	4798      	blx	r3
 800cd0e:	3501      	adds	r5, #1
 800cd10:	e7ee      	b.n	800ccf0 <__libc_init_array+0xc>
 800cd12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cd16:	4798      	blx	r3
 800cd18:	3501      	adds	r5, #1
 800cd1a:	e7f2      	b.n	800cd02 <__libc_init_array+0x1e>
 800cd1c:	080158a0 	.word	0x080158a0
 800cd20:	080158a0 	.word	0x080158a0
 800cd24:	080158a0 	.word	0x080158a0
 800cd28:	080158a4 	.word	0x080158a4

0800cd2c <localtime>:
 800cd2c:	b538      	push	{r3, r4, r5, lr}
 800cd2e:	4b07      	ldr	r3, [pc, #28]	; (800cd4c <localtime+0x20>)
 800cd30:	681c      	ldr	r4, [r3, #0]
 800cd32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cd34:	4605      	mov	r5, r0
 800cd36:	b91b      	cbnz	r3, 800cd40 <localtime+0x14>
 800cd38:	2024      	movs	r0, #36	; 0x24
 800cd3a:	f000 f8ed 	bl	800cf18 <malloc>
 800cd3e:	63e0      	str	r0, [r4, #60]	; 0x3c
 800cd40:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800cd42:	4628      	mov	r0, r5
 800cd44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd48:	f000 b802 	b.w	800cd50 <localtime_r>
 800cd4c:	20000014 	.word	0x20000014

0800cd50 <localtime_r>:
 800cd50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd54:	460c      	mov	r4, r1
 800cd56:	4680      	mov	r8, r0
 800cd58:	f005 ff4c 	bl	8012bf4 <__gettzinfo>
 800cd5c:	4621      	mov	r1, r4
 800cd5e:	4607      	mov	r7, r0
 800cd60:	4640      	mov	r0, r8
 800cd62:	f005 ff4b 	bl	8012bfc <gmtime_r>
 800cd66:	6946      	ldr	r6, [r0, #20]
 800cd68:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 800cd6c:	07b3      	lsls	r3, r6, #30
 800cd6e:	4604      	mov	r4, r0
 800cd70:	d105      	bne.n	800cd7e <localtime_r+0x2e>
 800cd72:	2264      	movs	r2, #100	; 0x64
 800cd74:	fb96 f3f2 	sdiv	r3, r6, r2
 800cd78:	fb02 6313 	mls	r3, r2, r3, r6
 800cd7c:	b9fb      	cbnz	r3, 800cdbe <localtime_r+0x6e>
 800cd7e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800cd82:	fb96 f5f3 	sdiv	r5, r6, r3
 800cd86:	fb03 6515 	mls	r5, r3, r5, r6
 800cd8a:	fab5 f585 	clz	r5, r5
 800cd8e:	096d      	lsrs	r5, r5, #5
 800cd90:	4b5f      	ldr	r3, [pc, #380]	; (800cf10 <localtime_r+0x1c0>)
 800cd92:	2230      	movs	r2, #48	; 0x30
 800cd94:	fb02 3505 	mla	r5, r2, r5, r3
 800cd98:	f002 fea2 	bl	800fae0 <__tz_lock>
 800cd9c:	f002 feac 	bl	800faf8 <_tzset_unlocked>
 800cda0:	4b5c      	ldr	r3, [pc, #368]	; (800cf14 <localtime_r+0x1c4>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	b1e3      	cbz	r3, 800cde0 <localtime_r+0x90>
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	429e      	cmp	r6, r3
 800cdaa:	d10a      	bne.n	800cdc2 <localtime_r+0x72>
 800cdac:	6839      	ldr	r1, [r7, #0]
 800cdae:	f8d8 3000 	ldr.w	r3, [r8]
 800cdb2:	69fa      	ldr	r2, [r7, #28]
 800cdb4:	b969      	cbnz	r1, 800cdd2 <localtime_r+0x82>
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	db0d      	blt.n	800cdd6 <localtime_r+0x86>
 800cdba:	2301      	movs	r3, #1
 800cdbc:	e010      	b.n	800cde0 <localtime_r+0x90>
 800cdbe:	2501      	movs	r5, #1
 800cdc0:	e7e6      	b.n	800cd90 <localtime_r+0x40>
 800cdc2:	4630      	mov	r0, r6
 800cdc4:	f002 fde4 	bl	800f990 <__tzcalc_limits>
 800cdc8:	2800      	cmp	r0, #0
 800cdca:	d1ef      	bne.n	800cdac <localtime_r+0x5c>
 800cdcc:	f04f 33ff 	mov.w	r3, #4294967295
 800cdd0:	e006      	b.n	800cde0 <localtime_r+0x90>
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	db55      	blt.n	800ce82 <localtime_r+0x132>
 800cdd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cdd8:	4293      	cmp	r3, r2
 800cdda:	bfac      	ite	ge
 800cddc:	2300      	movge	r3, #0
 800cdde:	2301      	movlt	r3, #1
 800cde0:	6223      	str	r3, [r4, #32]
 800cde2:	6a23      	ldr	r3, [r4, #32]
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	bf0c      	ite	eq
 800cde8:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 800cdea:	6a39      	ldrne	r1, [r7, #32]
 800cdec:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800cdf0:	203c      	movs	r0, #60	; 0x3c
 800cdf2:	fb91 f6f3 	sdiv	r6, r1, r3
 800cdf6:	fb03 1316 	mls	r3, r3, r6, r1
 800cdfa:	6861      	ldr	r1, [r4, #4]
 800cdfc:	fb93 f2f0 	sdiv	r2, r3, r0
 800ce00:	fb00 3012 	mls	r0, r0, r2, r3
 800ce04:	6823      	ldr	r3, [r4, #0]
 800ce06:	1a89      	subs	r1, r1, r2
 800ce08:	68a2      	ldr	r2, [r4, #8]
 800ce0a:	6061      	str	r1, [r4, #4]
 800ce0c:	1a1b      	subs	r3, r3, r0
 800ce0e:	1b92      	subs	r2, r2, r6
 800ce10:	2b3b      	cmp	r3, #59	; 0x3b
 800ce12:	6023      	str	r3, [r4, #0]
 800ce14:	60a2      	str	r2, [r4, #8]
 800ce16:	dd36      	ble.n	800ce86 <localtime_r+0x136>
 800ce18:	3101      	adds	r1, #1
 800ce1a:	6061      	str	r1, [r4, #4]
 800ce1c:	3b3c      	subs	r3, #60	; 0x3c
 800ce1e:	6023      	str	r3, [r4, #0]
 800ce20:	6863      	ldr	r3, [r4, #4]
 800ce22:	2b3b      	cmp	r3, #59	; 0x3b
 800ce24:	dd35      	ble.n	800ce92 <localtime_r+0x142>
 800ce26:	3201      	adds	r2, #1
 800ce28:	60a2      	str	r2, [r4, #8]
 800ce2a:	3b3c      	subs	r3, #60	; 0x3c
 800ce2c:	6063      	str	r3, [r4, #4]
 800ce2e:	68a3      	ldr	r3, [r4, #8]
 800ce30:	2b17      	cmp	r3, #23
 800ce32:	dd34      	ble.n	800ce9e <localtime_r+0x14e>
 800ce34:	69e2      	ldr	r2, [r4, #28]
 800ce36:	3201      	adds	r2, #1
 800ce38:	61e2      	str	r2, [r4, #28]
 800ce3a:	69a2      	ldr	r2, [r4, #24]
 800ce3c:	3201      	adds	r2, #1
 800ce3e:	2a06      	cmp	r2, #6
 800ce40:	bfc8      	it	gt
 800ce42:	2200      	movgt	r2, #0
 800ce44:	61a2      	str	r2, [r4, #24]
 800ce46:	68e2      	ldr	r2, [r4, #12]
 800ce48:	3b18      	subs	r3, #24
 800ce4a:	3201      	adds	r2, #1
 800ce4c:	60a3      	str	r3, [r4, #8]
 800ce4e:	6923      	ldr	r3, [r4, #16]
 800ce50:	60e2      	str	r2, [r4, #12]
 800ce52:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800ce56:	428a      	cmp	r2, r1
 800ce58:	dd0e      	ble.n	800ce78 <localtime_r+0x128>
 800ce5a:	3301      	adds	r3, #1
 800ce5c:	2b0c      	cmp	r3, #12
 800ce5e:	bf0c      	ite	eq
 800ce60:	6963      	ldreq	r3, [r4, #20]
 800ce62:	6123      	strne	r3, [r4, #16]
 800ce64:	eba2 0201 	sub.w	r2, r2, r1
 800ce68:	60e2      	str	r2, [r4, #12]
 800ce6a:	bf01      	itttt	eq
 800ce6c:	3301      	addeq	r3, #1
 800ce6e:	2200      	moveq	r2, #0
 800ce70:	6122      	streq	r2, [r4, #16]
 800ce72:	6163      	streq	r3, [r4, #20]
 800ce74:	bf08      	it	eq
 800ce76:	61e2      	streq	r2, [r4, #28]
 800ce78:	f002 fe38 	bl	800faec <__tz_unlock>
 800ce7c:	4620      	mov	r0, r4
 800ce7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce82:	2300      	movs	r3, #0
 800ce84:	e7ac      	b.n	800cde0 <localtime_r+0x90>
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	daca      	bge.n	800ce20 <localtime_r+0xd0>
 800ce8a:	3901      	subs	r1, #1
 800ce8c:	6061      	str	r1, [r4, #4]
 800ce8e:	333c      	adds	r3, #60	; 0x3c
 800ce90:	e7c5      	b.n	800ce1e <localtime_r+0xce>
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	dacb      	bge.n	800ce2e <localtime_r+0xde>
 800ce96:	3a01      	subs	r2, #1
 800ce98:	60a2      	str	r2, [r4, #8]
 800ce9a:	333c      	adds	r3, #60	; 0x3c
 800ce9c:	e7c6      	b.n	800ce2c <localtime_r+0xdc>
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	daea      	bge.n	800ce78 <localtime_r+0x128>
 800cea2:	69e2      	ldr	r2, [r4, #28]
 800cea4:	3a01      	subs	r2, #1
 800cea6:	61e2      	str	r2, [r4, #28]
 800cea8:	69a2      	ldr	r2, [r4, #24]
 800ceaa:	3a01      	subs	r2, #1
 800ceac:	bf48      	it	mi
 800ceae:	2206      	movmi	r2, #6
 800ceb0:	61a2      	str	r2, [r4, #24]
 800ceb2:	68e2      	ldr	r2, [r4, #12]
 800ceb4:	3318      	adds	r3, #24
 800ceb6:	3a01      	subs	r2, #1
 800ceb8:	60e2      	str	r2, [r4, #12]
 800ceba:	60a3      	str	r3, [r4, #8]
 800cebc:	2a00      	cmp	r2, #0
 800cebe:	d1db      	bne.n	800ce78 <localtime_r+0x128>
 800cec0:	6923      	ldr	r3, [r4, #16]
 800cec2:	3b01      	subs	r3, #1
 800cec4:	d405      	bmi.n	800ced2 <localtime_r+0x182>
 800cec6:	6123      	str	r3, [r4, #16]
 800cec8:	6923      	ldr	r3, [r4, #16]
 800ceca:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800cece:	60e3      	str	r3, [r4, #12]
 800ced0:	e7d2      	b.n	800ce78 <localtime_r+0x128>
 800ced2:	230b      	movs	r3, #11
 800ced4:	6123      	str	r3, [r4, #16]
 800ced6:	6963      	ldr	r3, [r4, #20]
 800ced8:	1e5a      	subs	r2, r3, #1
 800ceda:	f012 0f03 	tst.w	r2, #3
 800cede:	6162      	str	r2, [r4, #20]
 800cee0:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 800cee4:	d105      	bne.n	800cef2 <localtime_r+0x1a2>
 800cee6:	2164      	movs	r1, #100	; 0x64
 800cee8:	fb92 f3f1 	sdiv	r3, r2, r1
 800ceec:	fb01 2313 	mls	r3, r1, r3, r2
 800cef0:	b963      	cbnz	r3, 800cf0c <localtime_r+0x1bc>
 800cef2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800cef6:	fb92 f3f1 	sdiv	r3, r2, r1
 800cefa:	fb01 2313 	mls	r3, r1, r3, r2
 800cefe:	fab3 f383 	clz	r3, r3
 800cf02:	095b      	lsrs	r3, r3, #5
 800cf04:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800cf08:	61e3      	str	r3, [r4, #28]
 800cf0a:	e7dd      	b.n	800cec8 <localtime_r+0x178>
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	e7f9      	b.n	800cf04 <localtime_r+0x1b4>
 800cf10:	08015490 	.word	0x08015490
 800cf14:	20000970 	.word	0x20000970

0800cf18 <malloc>:
 800cf18:	4b02      	ldr	r3, [pc, #8]	; (800cf24 <malloc+0xc>)
 800cf1a:	4601      	mov	r1, r0
 800cf1c:	6818      	ldr	r0, [r3, #0]
 800cf1e:	f000 b80b 	b.w	800cf38 <_malloc_r>
 800cf22:	bf00      	nop
 800cf24:	20000014 	.word	0x20000014

0800cf28 <free>:
 800cf28:	4b02      	ldr	r3, [pc, #8]	; (800cf34 <free+0xc>)
 800cf2a:	4601      	mov	r1, r0
 800cf2c:	6818      	ldr	r0, [r3, #0]
 800cf2e:	f005 b8c1 	b.w	80120b4 <_free_r>
 800cf32:	bf00      	nop
 800cf34:	20000014 	.word	0x20000014

0800cf38 <_malloc_r>:
 800cf38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf3c:	f101 040b 	add.w	r4, r1, #11
 800cf40:	2c16      	cmp	r4, #22
 800cf42:	4681      	mov	r9, r0
 800cf44:	d907      	bls.n	800cf56 <_malloc_r+0x1e>
 800cf46:	f034 0407 	bics.w	r4, r4, #7
 800cf4a:	d505      	bpl.n	800cf58 <_malloc_r+0x20>
 800cf4c:	230c      	movs	r3, #12
 800cf4e:	f8c9 3000 	str.w	r3, [r9]
 800cf52:	2600      	movs	r6, #0
 800cf54:	e131      	b.n	800d1ba <_malloc_r+0x282>
 800cf56:	2410      	movs	r4, #16
 800cf58:	428c      	cmp	r4, r1
 800cf5a:	d3f7      	bcc.n	800cf4c <_malloc_r+0x14>
 800cf5c:	4648      	mov	r0, r9
 800cf5e:	f000 fc69 	bl	800d834 <__malloc_lock>
 800cf62:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800cf66:	4d9c      	ldr	r5, [pc, #624]	; (800d1d8 <_malloc_r+0x2a0>)
 800cf68:	d236      	bcs.n	800cfd8 <_malloc_r+0xa0>
 800cf6a:	f104 0208 	add.w	r2, r4, #8
 800cf6e:	442a      	add	r2, r5
 800cf70:	f1a2 0108 	sub.w	r1, r2, #8
 800cf74:	6856      	ldr	r6, [r2, #4]
 800cf76:	428e      	cmp	r6, r1
 800cf78:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 800cf7c:	d102      	bne.n	800cf84 <_malloc_r+0x4c>
 800cf7e:	68d6      	ldr	r6, [r2, #12]
 800cf80:	42b2      	cmp	r2, r6
 800cf82:	d010      	beq.n	800cfa6 <_malloc_r+0x6e>
 800cf84:	6873      	ldr	r3, [r6, #4]
 800cf86:	68f2      	ldr	r2, [r6, #12]
 800cf88:	68b1      	ldr	r1, [r6, #8]
 800cf8a:	f023 0303 	bic.w	r3, r3, #3
 800cf8e:	60ca      	str	r2, [r1, #12]
 800cf90:	4433      	add	r3, r6
 800cf92:	6091      	str	r1, [r2, #8]
 800cf94:	685a      	ldr	r2, [r3, #4]
 800cf96:	f042 0201 	orr.w	r2, r2, #1
 800cf9a:	605a      	str	r2, [r3, #4]
 800cf9c:	4648      	mov	r0, r9
 800cf9e:	f000 fc4f 	bl	800d840 <__malloc_unlock>
 800cfa2:	3608      	adds	r6, #8
 800cfa4:	e109      	b.n	800d1ba <_malloc_r+0x282>
 800cfa6:	3302      	adds	r3, #2
 800cfa8:	4a8c      	ldr	r2, [pc, #560]	; (800d1dc <_malloc_r+0x2a4>)
 800cfaa:	692e      	ldr	r6, [r5, #16]
 800cfac:	4296      	cmp	r6, r2
 800cfae:	4611      	mov	r1, r2
 800cfb0:	d06d      	beq.n	800d08e <_malloc_r+0x156>
 800cfb2:	6870      	ldr	r0, [r6, #4]
 800cfb4:	f020 0003 	bic.w	r0, r0, #3
 800cfb8:	1b07      	subs	r7, r0, r4
 800cfba:	2f0f      	cmp	r7, #15
 800cfbc:	dd47      	ble.n	800d04e <_malloc_r+0x116>
 800cfbe:	1933      	adds	r3, r6, r4
 800cfc0:	f044 0401 	orr.w	r4, r4, #1
 800cfc4:	6074      	str	r4, [r6, #4]
 800cfc6:	616b      	str	r3, [r5, #20]
 800cfc8:	612b      	str	r3, [r5, #16]
 800cfca:	60da      	str	r2, [r3, #12]
 800cfcc:	609a      	str	r2, [r3, #8]
 800cfce:	f047 0201 	orr.w	r2, r7, #1
 800cfd2:	605a      	str	r2, [r3, #4]
 800cfd4:	5037      	str	r7, [r6, r0]
 800cfd6:	e7e1      	b.n	800cf9c <_malloc_r+0x64>
 800cfd8:	0a63      	lsrs	r3, r4, #9
 800cfda:	d02a      	beq.n	800d032 <_malloc_r+0xfa>
 800cfdc:	2b04      	cmp	r3, #4
 800cfde:	d812      	bhi.n	800d006 <_malloc_r+0xce>
 800cfe0:	09a3      	lsrs	r3, r4, #6
 800cfe2:	3338      	adds	r3, #56	; 0x38
 800cfe4:	1c5a      	adds	r2, r3, #1
 800cfe6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800cfea:	f1a2 0008 	sub.w	r0, r2, #8
 800cfee:	6856      	ldr	r6, [r2, #4]
 800cff0:	4286      	cmp	r6, r0
 800cff2:	d006      	beq.n	800d002 <_malloc_r+0xca>
 800cff4:	6872      	ldr	r2, [r6, #4]
 800cff6:	f022 0203 	bic.w	r2, r2, #3
 800cffa:	1b11      	subs	r1, r2, r4
 800cffc:	290f      	cmp	r1, #15
 800cffe:	dd1c      	ble.n	800d03a <_malloc_r+0x102>
 800d000:	3b01      	subs	r3, #1
 800d002:	3301      	adds	r3, #1
 800d004:	e7d0      	b.n	800cfa8 <_malloc_r+0x70>
 800d006:	2b14      	cmp	r3, #20
 800d008:	d801      	bhi.n	800d00e <_malloc_r+0xd6>
 800d00a:	335b      	adds	r3, #91	; 0x5b
 800d00c:	e7ea      	b.n	800cfe4 <_malloc_r+0xac>
 800d00e:	2b54      	cmp	r3, #84	; 0x54
 800d010:	d802      	bhi.n	800d018 <_malloc_r+0xe0>
 800d012:	0b23      	lsrs	r3, r4, #12
 800d014:	336e      	adds	r3, #110	; 0x6e
 800d016:	e7e5      	b.n	800cfe4 <_malloc_r+0xac>
 800d018:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800d01c:	d802      	bhi.n	800d024 <_malloc_r+0xec>
 800d01e:	0be3      	lsrs	r3, r4, #15
 800d020:	3377      	adds	r3, #119	; 0x77
 800d022:	e7df      	b.n	800cfe4 <_malloc_r+0xac>
 800d024:	f240 5254 	movw	r2, #1364	; 0x554
 800d028:	4293      	cmp	r3, r2
 800d02a:	d804      	bhi.n	800d036 <_malloc_r+0xfe>
 800d02c:	0ca3      	lsrs	r3, r4, #18
 800d02e:	337c      	adds	r3, #124	; 0x7c
 800d030:	e7d8      	b.n	800cfe4 <_malloc_r+0xac>
 800d032:	233f      	movs	r3, #63	; 0x3f
 800d034:	e7d6      	b.n	800cfe4 <_malloc_r+0xac>
 800d036:	237e      	movs	r3, #126	; 0x7e
 800d038:	e7d4      	b.n	800cfe4 <_malloc_r+0xac>
 800d03a:	2900      	cmp	r1, #0
 800d03c:	68f1      	ldr	r1, [r6, #12]
 800d03e:	db04      	blt.n	800d04a <_malloc_r+0x112>
 800d040:	68b3      	ldr	r3, [r6, #8]
 800d042:	60d9      	str	r1, [r3, #12]
 800d044:	608b      	str	r3, [r1, #8]
 800d046:	18b3      	adds	r3, r6, r2
 800d048:	e7a4      	b.n	800cf94 <_malloc_r+0x5c>
 800d04a:	460e      	mov	r6, r1
 800d04c:	e7d0      	b.n	800cff0 <_malloc_r+0xb8>
 800d04e:	2f00      	cmp	r7, #0
 800d050:	616a      	str	r2, [r5, #20]
 800d052:	612a      	str	r2, [r5, #16]
 800d054:	db05      	blt.n	800d062 <_malloc_r+0x12a>
 800d056:	4430      	add	r0, r6
 800d058:	6843      	ldr	r3, [r0, #4]
 800d05a:	f043 0301 	orr.w	r3, r3, #1
 800d05e:	6043      	str	r3, [r0, #4]
 800d060:	e79c      	b.n	800cf9c <_malloc_r+0x64>
 800d062:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800d066:	d244      	bcs.n	800d0f2 <_malloc_r+0x1ba>
 800d068:	08c0      	lsrs	r0, r0, #3
 800d06a:	1087      	asrs	r7, r0, #2
 800d06c:	2201      	movs	r2, #1
 800d06e:	fa02 f707 	lsl.w	r7, r2, r7
 800d072:	686a      	ldr	r2, [r5, #4]
 800d074:	3001      	adds	r0, #1
 800d076:	433a      	orrs	r2, r7
 800d078:	606a      	str	r2, [r5, #4]
 800d07a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800d07e:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 800d082:	60b7      	str	r7, [r6, #8]
 800d084:	3a08      	subs	r2, #8
 800d086:	60f2      	str	r2, [r6, #12]
 800d088:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 800d08c:	60fe      	str	r6, [r7, #12]
 800d08e:	2001      	movs	r0, #1
 800d090:	109a      	asrs	r2, r3, #2
 800d092:	fa00 f202 	lsl.w	r2, r0, r2
 800d096:	6868      	ldr	r0, [r5, #4]
 800d098:	4282      	cmp	r2, r0
 800d09a:	f200 80a1 	bhi.w	800d1e0 <_malloc_r+0x2a8>
 800d09e:	4202      	tst	r2, r0
 800d0a0:	d106      	bne.n	800d0b0 <_malloc_r+0x178>
 800d0a2:	f023 0303 	bic.w	r3, r3, #3
 800d0a6:	0052      	lsls	r2, r2, #1
 800d0a8:	4202      	tst	r2, r0
 800d0aa:	f103 0304 	add.w	r3, r3, #4
 800d0ae:	d0fa      	beq.n	800d0a6 <_malloc_r+0x16e>
 800d0b0:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 800d0b4:	46e0      	mov	r8, ip
 800d0b6:	469e      	mov	lr, r3
 800d0b8:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800d0bc:	4546      	cmp	r6, r8
 800d0be:	d153      	bne.n	800d168 <_malloc_r+0x230>
 800d0c0:	f10e 0e01 	add.w	lr, lr, #1
 800d0c4:	f01e 0f03 	tst.w	lr, #3
 800d0c8:	f108 0808 	add.w	r8, r8, #8
 800d0cc:	d1f4      	bne.n	800d0b8 <_malloc_r+0x180>
 800d0ce:	0798      	lsls	r0, r3, #30
 800d0d0:	d179      	bne.n	800d1c6 <_malloc_r+0x28e>
 800d0d2:	686b      	ldr	r3, [r5, #4]
 800d0d4:	ea23 0302 	bic.w	r3, r3, r2
 800d0d8:	606b      	str	r3, [r5, #4]
 800d0da:	6868      	ldr	r0, [r5, #4]
 800d0dc:	0052      	lsls	r2, r2, #1
 800d0de:	4282      	cmp	r2, r0
 800d0e0:	d87e      	bhi.n	800d1e0 <_malloc_r+0x2a8>
 800d0e2:	2a00      	cmp	r2, #0
 800d0e4:	d07c      	beq.n	800d1e0 <_malloc_r+0x2a8>
 800d0e6:	4673      	mov	r3, lr
 800d0e8:	4202      	tst	r2, r0
 800d0ea:	d1e1      	bne.n	800d0b0 <_malloc_r+0x178>
 800d0ec:	3304      	adds	r3, #4
 800d0ee:	0052      	lsls	r2, r2, #1
 800d0f0:	e7fa      	b.n	800d0e8 <_malloc_r+0x1b0>
 800d0f2:	0a42      	lsrs	r2, r0, #9
 800d0f4:	2a04      	cmp	r2, #4
 800d0f6:	d815      	bhi.n	800d124 <_malloc_r+0x1ec>
 800d0f8:	0982      	lsrs	r2, r0, #6
 800d0fa:	3238      	adds	r2, #56	; 0x38
 800d0fc:	1c57      	adds	r7, r2, #1
 800d0fe:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800d102:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800d106:	45be      	cmp	lr, r7
 800d108:	d126      	bne.n	800d158 <_malloc_r+0x220>
 800d10a:	2001      	movs	r0, #1
 800d10c:	1092      	asrs	r2, r2, #2
 800d10e:	fa00 f202 	lsl.w	r2, r0, r2
 800d112:	6868      	ldr	r0, [r5, #4]
 800d114:	4310      	orrs	r0, r2
 800d116:	6068      	str	r0, [r5, #4]
 800d118:	f8c6 e00c 	str.w	lr, [r6, #12]
 800d11c:	60b7      	str	r7, [r6, #8]
 800d11e:	f8ce 6008 	str.w	r6, [lr, #8]
 800d122:	e7b3      	b.n	800d08c <_malloc_r+0x154>
 800d124:	2a14      	cmp	r2, #20
 800d126:	d801      	bhi.n	800d12c <_malloc_r+0x1f4>
 800d128:	325b      	adds	r2, #91	; 0x5b
 800d12a:	e7e7      	b.n	800d0fc <_malloc_r+0x1c4>
 800d12c:	2a54      	cmp	r2, #84	; 0x54
 800d12e:	d802      	bhi.n	800d136 <_malloc_r+0x1fe>
 800d130:	0b02      	lsrs	r2, r0, #12
 800d132:	326e      	adds	r2, #110	; 0x6e
 800d134:	e7e2      	b.n	800d0fc <_malloc_r+0x1c4>
 800d136:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800d13a:	d802      	bhi.n	800d142 <_malloc_r+0x20a>
 800d13c:	0bc2      	lsrs	r2, r0, #15
 800d13e:	3277      	adds	r2, #119	; 0x77
 800d140:	e7dc      	b.n	800d0fc <_malloc_r+0x1c4>
 800d142:	f240 5754 	movw	r7, #1364	; 0x554
 800d146:	42ba      	cmp	r2, r7
 800d148:	bf9a      	itte	ls
 800d14a:	0c82      	lsrls	r2, r0, #18
 800d14c:	327c      	addls	r2, #124	; 0x7c
 800d14e:	227e      	movhi	r2, #126	; 0x7e
 800d150:	e7d4      	b.n	800d0fc <_malloc_r+0x1c4>
 800d152:	68bf      	ldr	r7, [r7, #8]
 800d154:	45be      	cmp	lr, r7
 800d156:	d004      	beq.n	800d162 <_malloc_r+0x22a>
 800d158:	687a      	ldr	r2, [r7, #4]
 800d15a:	f022 0203 	bic.w	r2, r2, #3
 800d15e:	4290      	cmp	r0, r2
 800d160:	d3f7      	bcc.n	800d152 <_malloc_r+0x21a>
 800d162:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800d166:	e7d7      	b.n	800d118 <_malloc_r+0x1e0>
 800d168:	6870      	ldr	r0, [r6, #4]
 800d16a:	68f7      	ldr	r7, [r6, #12]
 800d16c:	f020 0003 	bic.w	r0, r0, #3
 800d170:	eba0 0a04 	sub.w	sl, r0, r4
 800d174:	f1ba 0f0f 	cmp.w	sl, #15
 800d178:	dd10      	ble.n	800d19c <_malloc_r+0x264>
 800d17a:	68b2      	ldr	r2, [r6, #8]
 800d17c:	1933      	adds	r3, r6, r4
 800d17e:	f044 0401 	orr.w	r4, r4, #1
 800d182:	6074      	str	r4, [r6, #4]
 800d184:	60d7      	str	r7, [r2, #12]
 800d186:	60ba      	str	r2, [r7, #8]
 800d188:	f04a 0201 	orr.w	r2, sl, #1
 800d18c:	616b      	str	r3, [r5, #20]
 800d18e:	612b      	str	r3, [r5, #16]
 800d190:	60d9      	str	r1, [r3, #12]
 800d192:	6099      	str	r1, [r3, #8]
 800d194:	605a      	str	r2, [r3, #4]
 800d196:	f846 a000 	str.w	sl, [r6, r0]
 800d19a:	e6ff      	b.n	800cf9c <_malloc_r+0x64>
 800d19c:	f1ba 0f00 	cmp.w	sl, #0
 800d1a0:	db0f      	blt.n	800d1c2 <_malloc_r+0x28a>
 800d1a2:	4430      	add	r0, r6
 800d1a4:	6843      	ldr	r3, [r0, #4]
 800d1a6:	f043 0301 	orr.w	r3, r3, #1
 800d1aa:	6043      	str	r3, [r0, #4]
 800d1ac:	f856 3f08 	ldr.w	r3, [r6, #8]!
 800d1b0:	4648      	mov	r0, r9
 800d1b2:	60df      	str	r7, [r3, #12]
 800d1b4:	60bb      	str	r3, [r7, #8]
 800d1b6:	f000 fb43 	bl	800d840 <__malloc_unlock>
 800d1ba:	4630      	mov	r0, r6
 800d1bc:	b003      	add	sp, #12
 800d1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1c2:	463e      	mov	r6, r7
 800d1c4:	e77a      	b.n	800d0bc <_malloc_r+0x184>
 800d1c6:	f85c 0908 	ldr.w	r0, [ip], #-8
 800d1ca:	4584      	cmp	ip, r0
 800d1cc:	f103 33ff 	add.w	r3, r3, #4294967295
 800d1d0:	f43f af7d 	beq.w	800d0ce <_malloc_r+0x196>
 800d1d4:	e781      	b.n	800d0da <_malloc_r+0x1a2>
 800d1d6:	bf00      	nop
 800d1d8:	20000108 	.word	0x20000108
 800d1dc:	20000110 	.word	0x20000110
 800d1e0:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800d1e4:	f8db 6004 	ldr.w	r6, [fp, #4]
 800d1e8:	f026 0603 	bic.w	r6, r6, #3
 800d1ec:	42b4      	cmp	r4, r6
 800d1ee:	d803      	bhi.n	800d1f8 <_malloc_r+0x2c0>
 800d1f0:	1b33      	subs	r3, r6, r4
 800d1f2:	2b0f      	cmp	r3, #15
 800d1f4:	f300 8096 	bgt.w	800d324 <_malloc_r+0x3ec>
 800d1f8:	4a4f      	ldr	r2, [pc, #316]	; (800d338 <_malloc_r+0x400>)
 800d1fa:	6817      	ldr	r7, [r2, #0]
 800d1fc:	4a4f      	ldr	r2, [pc, #316]	; (800d33c <_malloc_r+0x404>)
 800d1fe:	6811      	ldr	r1, [r2, #0]
 800d200:	3710      	adds	r7, #16
 800d202:	3101      	adds	r1, #1
 800d204:	eb0b 0306 	add.w	r3, fp, r6
 800d208:	4427      	add	r7, r4
 800d20a:	d005      	beq.n	800d218 <_malloc_r+0x2e0>
 800d20c:	494c      	ldr	r1, [pc, #304]	; (800d340 <_malloc_r+0x408>)
 800d20e:	3901      	subs	r1, #1
 800d210:	440f      	add	r7, r1
 800d212:	3101      	adds	r1, #1
 800d214:	4249      	negs	r1, r1
 800d216:	400f      	ands	r7, r1
 800d218:	4639      	mov	r1, r7
 800d21a:	4648      	mov	r0, r9
 800d21c:	9201      	str	r2, [sp, #4]
 800d21e:	9300      	str	r3, [sp, #0]
 800d220:	f000 fb94 	bl	800d94c <_sbrk_r>
 800d224:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d228:	4680      	mov	r8, r0
 800d22a:	d056      	beq.n	800d2da <_malloc_r+0x3a2>
 800d22c:	9b00      	ldr	r3, [sp, #0]
 800d22e:	9a01      	ldr	r2, [sp, #4]
 800d230:	4283      	cmp	r3, r0
 800d232:	d901      	bls.n	800d238 <_malloc_r+0x300>
 800d234:	45ab      	cmp	fp, r5
 800d236:	d150      	bne.n	800d2da <_malloc_r+0x3a2>
 800d238:	4842      	ldr	r0, [pc, #264]	; (800d344 <_malloc_r+0x40c>)
 800d23a:	6801      	ldr	r1, [r0, #0]
 800d23c:	4543      	cmp	r3, r8
 800d23e:	eb07 0e01 	add.w	lr, r7, r1
 800d242:	f8c0 e000 	str.w	lr, [r0]
 800d246:	4940      	ldr	r1, [pc, #256]	; (800d348 <_malloc_r+0x410>)
 800d248:	4682      	mov	sl, r0
 800d24a:	d113      	bne.n	800d274 <_malloc_r+0x33c>
 800d24c:	420b      	tst	r3, r1
 800d24e:	d111      	bne.n	800d274 <_malloc_r+0x33c>
 800d250:	68ab      	ldr	r3, [r5, #8]
 800d252:	443e      	add	r6, r7
 800d254:	f046 0601 	orr.w	r6, r6, #1
 800d258:	605e      	str	r6, [r3, #4]
 800d25a:	4a3c      	ldr	r2, [pc, #240]	; (800d34c <_malloc_r+0x414>)
 800d25c:	f8da 3000 	ldr.w	r3, [sl]
 800d260:	6811      	ldr	r1, [r2, #0]
 800d262:	428b      	cmp	r3, r1
 800d264:	bf88      	it	hi
 800d266:	6013      	strhi	r3, [r2, #0]
 800d268:	4a39      	ldr	r2, [pc, #228]	; (800d350 <_malloc_r+0x418>)
 800d26a:	6811      	ldr	r1, [r2, #0]
 800d26c:	428b      	cmp	r3, r1
 800d26e:	bf88      	it	hi
 800d270:	6013      	strhi	r3, [r2, #0]
 800d272:	e032      	b.n	800d2da <_malloc_r+0x3a2>
 800d274:	6810      	ldr	r0, [r2, #0]
 800d276:	3001      	adds	r0, #1
 800d278:	bf1b      	ittet	ne
 800d27a:	eba8 0303 	subne.w	r3, r8, r3
 800d27e:	4473      	addne	r3, lr
 800d280:	f8c2 8000 	streq.w	r8, [r2]
 800d284:	f8ca 3000 	strne.w	r3, [sl]
 800d288:	f018 0007 	ands.w	r0, r8, #7
 800d28c:	bf1c      	itt	ne
 800d28e:	f1c0 0008 	rsbne	r0, r0, #8
 800d292:	4480      	addne	r8, r0
 800d294:	4b2a      	ldr	r3, [pc, #168]	; (800d340 <_malloc_r+0x408>)
 800d296:	4447      	add	r7, r8
 800d298:	4418      	add	r0, r3
 800d29a:	400f      	ands	r7, r1
 800d29c:	1bc7      	subs	r7, r0, r7
 800d29e:	4639      	mov	r1, r7
 800d2a0:	4648      	mov	r0, r9
 800d2a2:	f000 fb53 	bl	800d94c <_sbrk_r>
 800d2a6:	1c43      	adds	r3, r0, #1
 800d2a8:	bf08      	it	eq
 800d2aa:	4640      	moveq	r0, r8
 800d2ac:	f8da 3000 	ldr.w	r3, [sl]
 800d2b0:	f8c5 8008 	str.w	r8, [r5, #8]
 800d2b4:	bf08      	it	eq
 800d2b6:	2700      	moveq	r7, #0
 800d2b8:	eba0 0008 	sub.w	r0, r0, r8
 800d2bc:	443b      	add	r3, r7
 800d2be:	4407      	add	r7, r0
 800d2c0:	f047 0701 	orr.w	r7, r7, #1
 800d2c4:	45ab      	cmp	fp, r5
 800d2c6:	f8ca 3000 	str.w	r3, [sl]
 800d2ca:	f8c8 7004 	str.w	r7, [r8, #4]
 800d2ce:	d0c4      	beq.n	800d25a <_malloc_r+0x322>
 800d2d0:	2e0f      	cmp	r6, #15
 800d2d2:	d810      	bhi.n	800d2f6 <_malloc_r+0x3be>
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	f8c8 3004 	str.w	r3, [r8, #4]
 800d2da:	68ab      	ldr	r3, [r5, #8]
 800d2dc:	685a      	ldr	r2, [r3, #4]
 800d2de:	f022 0203 	bic.w	r2, r2, #3
 800d2e2:	4294      	cmp	r4, r2
 800d2e4:	eba2 0304 	sub.w	r3, r2, r4
 800d2e8:	d801      	bhi.n	800d2ee <_malloc_r+0x3b6>
 800d2ea:	2b0f      	cmp	r3, #15
 800d2ec:	dc1a      	bgt.n	800d324 <_malloc_r+0x3ec>
 800d2ee:	4648      	mov	r0, r9
 800d2f0:	f000 faa6 	bl	800d840 <__malloc_unlock>
 800d2f4:	e62d      	b.n	800cf52 <_malloc_r+0x1a>
 800d2f6:	f8db 3004 	ldr.w	r3, [fp, #4]
 800d2fa:	3e0c      	subs	r6, #12
 800d2fc:	f026 0607 	bic.w	r6, r6, #7
 800d300:	f003 0301 	and.w	r3, r3, #1
 800d304:	4333      	orrs	r3, r6
 800d306:	f8cb 3004 	str.w	r3, [fp, #4]
 800d30a:	eb0b 0306 	add.w	r3, fp, r6
 800d30e:	2205      	movs	r2, #5
 800d310:	2e0f      	cmp	r6, #15
 800d312:	605a      	str	r2, [r3, #4]
 800d314:	609a      	str	r2, [r3, #8]
 800d316:	d9a0      	bls.n	800d25a <_malloc_r+0x322>
 800d318:	f10b 0108 	add.w	r1, fp, #8
 800d31c:	4648      	mov	r0, r9
 800d31e:	f004 fec9 	bl	80120b4 <_free_r>
 800d322:	e79a      	b.n	800d25a <_malloc_r+0x322>
 800d324:	68ae      	ldr	r6, [r5, #8]
 800d326:	f044 0201 	orr.w	r2, r4, #1
 800d32a:	4434      	add	r4, r6
 800d32c:	f043 0301 	orr.w	r3, r3, #1
 800d330:	6072      	str	r2, [r6, #4]
 800d332:	60ac      	str	r4, [r5, #8]
 800d334:	6063      	str	r3, [r4, #4]
 800d336:	e631      	b.n	800cf9c <_malloc_r+0x64>
 800d338:	20000950 	.word	0x20000950
 800d33c:	20000510 	.word	0x20000510
 800d340:	00000080 	.word	0x00000080
 800d344:	20000920 	.word	0x20000920
 800d348:	0000007f 	.word	0x0000007f
 800d34c:	20000948 	.word	0x20000948
 800d350:	2000094c 	.word	0x2000094c

0800d354 <memcpy>:
 800d354:	b510      	push	{r4, lr}
 800d356:	1e43      	subs	r3, r0, #1
 800d358:	440a      	add	r2, r1
 800d35a:	4291      	cmp	r1, r2
 800d35c:	d100      	bne.n	800d360 <memcpy+0xc>
 800d35e:	bd10      	pop	{r4, pc}
 800d360:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d364:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d368:	e7f7      	b.n	800d35a <memcpy+0x6>

0800d36a <memset>:
 800d36a:	4402      	add	r2, r0
 800d36c:	4603      	mov	r3, r0
 800d36e:	4293      	cmp	r3, r2
 800d370:	d100      	bne.n	800d374 <memset+0xa>
 800d372:	4770      	bx	lr
 800d374:	f803 1b01 	strb.w	r1, [r3], #1
 800d378:	e7f9      	b.n	800d36e <memset+0x4>
	...

0800d37c <validate_structure>:
 800d37c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d37e:	6801      	ldr	r1, [r0, #0]
 800d380:	293b      	cmp	r1, #59	; 0x3b
 800d382:	4604      	mov	r4, r0
 800d384:	d911      	bls.n	800d3aa <validate_structure+0x2e>
 800d386:	223c      	movs	r2, #60	; 0x3c
 800d388:	4668      	mov	r0, sp
 800d38a:	f003 fe23 	bl	8010fd4 <div>
 800d38e:	9a01      	ldr	r2, [sp, #4]
 800d390:	6863      	ldr	r3, [r4, #4]
 800d392:	9900      	ldr	r1, [sp, #0]
 800d394:	2a00      	cmp	r2, #0
 800d396:	440b      	add	r3, r1
 800d398:	6063      	str	r3, [r4, #4]
 800d39a:	bfbb      	ittet	lt
 800d39c:	323c      	addlt	r2, #60	; 0x3c
 800d39e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800d3a2:	6022      	strge	r2, [r4, #0]
 800d3a4:	6022      	strlt	r2, [r4, #0]
 800d3a6:	bfb8      	it	lt
 800d3a8:	6063      	strlt	r3, [r4, #4]
 800d3aa:	6861      	ldr	r1, [r4, #4]
 800d3ac:	293b      	cmp	r1, #59	; 0x3b
 800d3ae:	d911      	bls.n	800d3d4 <validate_structure+0x58>
 800d3b0:	223c      	movs	r2, #60	; 0x3c
 800d3b2:	4668      	mov	r0, sp
 800d3b4:	f003 fe0e 	bl	8010fd4 <div>
 800d3b8:	9a01      	ldr	r2, [sp, #4]
 800d3ba:	68a3      	ldr	r3, [r4, #8]
 800d3bc:	9900      	ldr	r1, [sp, #0]
 800d3be:	2a00      	cmp	r2, #0
 800d3c0:	440b      	add	r3, r1
 800d3c2:	60a3      	str	r3, [r4, #8]
 800d3c4:	bfbb      	ittet	lt
 800d3c6:	323c      	addlt	r2, #60	; 0x3c
 800d3c8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800d3cc:	6062      	strge	r2, [r4, #4]
 800d3ce:	6062      	strlt	r2, [r4, #4]
 800d3d0:	bfb8      	it	lt
 800d3d2:	60a3      	strlt	r3, [r4, #8]
 800d3d4:	68a1      	ldr	r1, [r4, #8]
 800d3d6:	2917      	cmp	r1, #23
 800d3d8:	d911      	bls.n	800d3fe <validate_structure+0x82>
 800d3da:	2218      	movs	r2, #24
 800d3dc:	4668      	mov	r0, sp
 800d3de:	f003 fdf9 	bl	8010fd4 <div>
 800d3e2:	9a01      	ldr	r2, [sp, #4]
 800d3e4:	68e3      	ldr	r3, [r4, #12]
 800d3e6:	9900      	ldr	r1, [sp, #0]
 800d3e8:	2a00      	cmp	r2, #0
 800d3ea:	440b      	add	r3, r1
 800d3ec:	60e3      	str	r3, [r4, #12]
 800d3ee:	bfbb      	ittet	lt
 800d3f0:	3218      	addlt	r2, #24
 800d3f2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800d3f6:	60a2      	strge	r2, [r4, #8]
 800d3f8:	60a2      	strlt	r2, [r4, #8]
 800d3fa:	bfb8      	it	lt
 800d3fc:	60e3      	strlt	r3, [r4, #12]
 800d3fe:	6921      	ldr	r1, [r4, #16]
 800d400:	290b      	cmp	r1, #11
 800d402:	d911      	bls.n	800d428 <validate_structure+0xac>
 800d404:	220c      	movs	r2, #12
 800d406:	4668      	mov	r0, sp
 800d408:	f003 fde4 	bl	8010fd4 <div>
 800d40c:	9a01      	ldr	r2, [sp, #4]
 800d40e:	6963      	ldr	r3, [r4, #20]
 800d410:	9900      	ldr	r1, [sp, #0]
 800d412:	2a00      	cmp	r2, #0
 800d414:	440b      	add	r3, r1
 800d416:	6163      	str	r3, [r4, #20]
 800d418:	bfbb      	ittet	lt
 800d41a:	320c      	addlt	r2, #12
 800d41c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800d420:	6122      	strge	r2, [r4, #16]
 800d422:	6122      	strlt	r2, [r4, #16]
 800d424:	bfb8      	it	lt
 800d426:	6163      	strlt	r3, [r4, #20]
 800d428:	6963      	ldr	r3, [r4, #20]
 800d42a:	0799      	lsls	r1, r3, #30
 800d42c:	d143      	bne.n	800d4b6 <validate_structure+0x13a>
 800d42e:	2164      	movs	r1, #100	; 0x64
 800d430:	fb93 f2f1 	sdiv	r2, r3, r1
 800d434:	fb01 3212 	mls	r2, r1, r2, r3
 800d438:	2a00      	cmp	r2, #0
 800d43a:	d13e      	bne.n	800d4ba <validate_structure+0x13e>
 800d43c:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800d440:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800d444:	fb93 f2f1 	sdiv	r2, r3, r1
 800d448:	fb01 3312 	mls	r3, r1, r2, r3
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	bf14      	ite	ne
 800d450:	231c      	movne	r3, #28
 800d452:	231d      	moveq	r3, #29
 800d454:	68e2      	ldr	r2, [r4, #12]
 800d456:	2a00      	cmp	r2, #0
 800d458:	dd31      	ble.n	800d4be <validate_structure+0x142>
 800d45a:	4f37      	ldr	r7, [pc, #220]	; (800d538 <validate_structure+0x1bc>)
 800d45c:	2602      	movs	r6, #2
 800d45e:	f04f 0e00 	mov.w	lr, #0
 800d462:	2064      	movs	r0, #100	; 0x64
 800d464:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800d468:	6921      	ldr	r1, [r4, #16]
 800d46a:	68e2      	ldr	r2, [r4, #12]
 800d46c:	2901      	cmp	r1, #1
 800d46e:	d05d      	beq.n	800d52c <validate_structure+0x1b0>
 800d470:	f857 c021 	ldr.w	ip, [r7, r1, lsl #2]
 800d474:	4562      	cmp	r2, ip
 800d476:	dd2c      	ble.n	800d4d2 <validate_structure+0x156>
 800d478:	3101      	adds	r1, #1
 800d47a:	eba2 020c 	sub.w	r2, r2, ip
 800d47e:	290c      	cmp	r1, #12
 800d480:	60e2      	str	r2, [r4, #12]
 800d482:	6121      	str	r1, [r4, #16]
 800d484:	d1f0      	bne.n	800d468 <validate_structure+0xec>
 800d486:	6963      	ldr	r3, [r4, #20]
 800d488:	f8c4 e010 	str.w	lr, [r4, #16]
 800d48c:	1c5a      	adds	r2, r3, #1
 800d48e:	0791      	lsls	r1, r2, #30
 800d490:	6162      	str	r2, [r4, #20]
 800d492:	d147      	bne.n	800d524 <validate_structure+0x1a8>
 800d494:	fb92 f1f0 	sdiv	r1, r2, r0
 800d498:	fb00 2211 	mls	r2, r0, r1, r2
 800d49c:	2a00      	cmp	r2, #0
 800d49e:	d143      	bne.n	800d528 <validate_structure+0x1ac>
 800d4a0:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 800d4a4:	fb93 f2f5 	sdiv	r2, r3, r5
 800d4a8:	fb05 3312 	mls	r3, r5, r2, r3
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	bf14      	ite	ne
 800d4b0:	231c      	movne	r3, #28
 800d4b2:	231d      	moveq	r3, #29
 800d4b4:	e7d8      	b.n	800d468 <validate_structure+0xec>
 800d4b6:	231c      	movs	r3, #28
 800d4b8:	e7cc      	b.n	800d454 <validate_structure+0xd8>
 800d4ba:	231d      	movs	r3, #29
 800d4bc:	e7ca      	b.n	800d454 <validate_structure+0xd8>
 800d4be:	4f1e      	ldr	r7, [pc, #120]	; (800d538 <validate_structure+0x1bc>)
 800d4c0:	260b      	movs	r6, #11
 800d4c2:	2064      	movs	r0, #100	; 0x64
 800d4c4:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800d4c8:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800d4cc:	f1be 0f00 	cmp.w	lr, #0
 800d4d0:	dd01      	ble.n	800d4d6 <validate_structure+0x15a>
 800d4d2:	b003      	add	sp, #12
 800d4d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4d6:	6921      	ldr	r1, [r4, #16]
 800d4d8:	3901      	subs	r1, #1
 800d4da:	6121      	str	r1, [r4, #16]
 800d4dc:	3101      	adds	r1, #1
 800d4de:	d114      	bne.n	800d50a <validate_structure+0x18e>
 800d4e0:	6963      	ldr	r3, [r4, #20]
 800d4e2:	6126      	str	r6, [r4, #16]
 800d4e4:	1e59      	subs	r1, r3, #1
 800d4e6:	078a      	lsls	r2, r1, #30
 800d4e8:	6161      	str	r1, [r4, #20]
 800d4ea:	d117      	bne.n	800d51c <validate_structure+0x1a0>
 800d4ec:	fb91 f2f0 	sdiv	r2, r1, r0
 800d4f0:	fb00 1112 	mls	r1, r0, r2, r1
 800d4f4:	b9a1      	cbnz	r1, 800d520 <validate_structure+0x1a4>
 800d4f6:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800d4fa:	fb93 f2f5 	sdiv	r2, r3, r5
 800d4fe:	fb05 3312 	mls	r3, r5, r2, r3
 800d502:	2b00      	cmp	r3, #0
 800d504:	bf14      	ite	ne
 800d506:	231c      	movne	r3, #28
 800d508:	231d      	moveq	r3, #29
 800d50a:	6922      	ldr	r2, [r4, #16]
 800d50c:	2a01      	cmp	r2, #1
 800d50e:	bf14      	ite	ne
 800d510:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 800d514:	461a      	moveq	r2, r3
 800d516:	4472      	add	r2, lr
 800d518:	60e2      	str	r2, [r4, #12]
 800d51a:	e7d5      	b.n	800d4c8 <validate_structure+0x14c>
 800d51c:	231c      	movs	r3, #28
 800d51e:	e7f4      	b.n	800d50a <validate_structure+0x18e>
 800d520:	231d      	movs	r3, #29
 800d522:	e7f2      	b.n	800d50a <validate_structure+0x18e>
 800d524:	231c      	movs	r3, #28
 800d526:	e79f      	b.n	800d468 <validate_structure+0xec>
 800d528:	231d      	movs	r3, #29
 800d52a:	e79d      	b.n	800d468 <validate_structure+0xec>
 800d52c:	4293      	cmp	r3, r2
 800d52e:	dad0      	bge.n	800d4d2 <validate_structure+0x156>
 800d530:	1ad2      	subs	r2, r2, r3
 800d532:	60e2      	str	r2, [r4, #12]
 800d534:	6126      	str	r6, [r4, #16]
 800d536:	e797      	b.n	800d468 <validate_structure+0xec>
 800d538:	08015430 	.word	0x08015430

0800d53c <mktime>:
 800d53c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d540:	4681      	mov	r9, r0
 800d542:	f005 fb57 	bl	8012bf4 <__gettzinfo>
 800d546:	4680      	mov	r8, r0
 800d548:	4648      	mov	r0, r9
 800d54a:	f7ff ff17 	bl	800d37c <validate_structure>
 800d54e:	e899 0081 	ldmia.w	r9, {r0, r7}
 800d552:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d556:	4ab4      	ldr	r2, [pc, #720]	; (800d828 <mktime+0x2ec>)
 800d558:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800d55c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d560:	253c      	movs	r5, #60	; 0x3c
 800d562:	fb05 0707 	mla	r7, r5, r7, r0
 800d566:	f8d9 0008 	ldr.w	r0, [r9, #8]
 800d56a:	f44f 6561 	mov.w	r5, #3600	; 0xe10
 800d56e:	3c01      	subs	r4, #1
 800d570:	2b01      	cmp	r3, #1
 800d572:	fb05 7000 	mla	r0, r5, r0, r7
 800d576:	4414      	add	r4, r2
 800d578:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800d57c:	dd11      	ble.n	800d5a2 <mktime+0x66>
 800d57e:	0799      	lsls	r1, r3, #30
 800d580:	d10f      	bne.n	800d5a2 <mktime+0x66>
 800d582:	2164      	movs	r1, #100	; 0x64
 800d584:	fb93 f2f1 	sdiv	r2, r3, r1
 800d588:	fb01 3212 	mls	r2, r1, r2, r3
 800d58c:	b942      	cbnz	r2, 800d5a0 <mktime+0x64>
 800d58e:	f203 756c 	addw	r5, r3, #1900	; 0x76c
 800d592:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800d596:	fb95 f2f1 	sdiv	r2, r5, r1
 800d59a:	fb01 5212 	mls	r2, r1, r2, r5
 800d59e:	b902      	cbnz	r2, 800d5a2 <mktime+0x66>
 800d5a0:	3401      	adds	r4, #1
 800d5a2:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
 800d5a6:	3210      	adds	r2, #16
 800d5a8:	f644 6120 	movw	r1, #20000	; 0x4e20
 800d5ac:	428a      	cmp	r2, r1
 800d5ae:	f8c9 401c 	str.w	r4, [r9, #28]
 800d5b2:	f200 812d 	bhi.w	800d810 <mktime+0x2d4>
 800d5b6:	2b46      	cmp	r3, #70	; 0x46
 800d5b8:	dd70      	ble.n	800d69c <mktime+0x160>
 800d5ba:	2546      	movs	r5, #70	; 0x46
 800d5bc:	f240 176d 	movw	r7, #365	; 0x16d
 800d5c0:	2164      	movs	r1, #100	; 0x64
 800d5c2:	f44f 76c8 	mov.w	r6, #400	; 0x190
 800d5c6:	07aa      	lsls	r2, r5, #30
 800d5c8:	d162      	bne.n	800d690 <mktime+0x154>
 800d5ca:	fb95 f2f1 	sdiv	r2, r5, r1
 800d5ce:	fb01 5212 	mls	r2, r1, r2, r5
 800d5d2:	2a00      	cmp	r2, #0
 800d5d4:	d15f      	bne.n	800d696 <mktime+0x15a>
 800d5d6:	f205 7e6c 	addw	lr, r5, #1900	; 0x76c
 800d5da:	fb9e f2f6 	sdiv	r2, lr, r6
 800d5de:	fb06 e212 	mls	r2, r6, r2, lr
 800d5e2:	2a00      	cmp	r2, #0
 800d5e4:	bf14      	ite	ne
 800d5e6:	463a      	movne	r2, r7
 800d5e8:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800d5ec:	3501      	adds	r5, #1
 800d5ee:	42ab      	cmp	r3, r5
 800d5f0:	4414      	add	r4, r2
 800d5f2:	d1e8      	bne.n	800d5c6 <mktime+0x8a>
 800d5f4:	4f8d      	ldr	r7, [pc, #564]	; (800d82c <mktime+0x2f0>)
 800d5f6:	fb07 0704 	mla	r7, r7, r4, r0
 800d5fa:	f002 fa71 	bl	800fae0 <__tz_lock>
 800d5fe:	f002 fa7b 	bl	800faf8 <_tzset_unlocked>
 800d602:	4b8b      	ldr	r3, [pc, #556]	; (800d830 <mktime+0x2f4>)
 800d604:	681e      	ldr	r6, [r3, #0]
 800d606:	2e00      	cmp	r6, #0
 800d608:	f000 810a 	beq.w	800d820 <mktime+0x2e4>
 800d60c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800d610:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800d614:	2b01      	cmp	r3, #1
 800d616:	bfa8      	it	ge
 800d618:	2301      	movge	r3, #1
 800d61a:	469a      	mov	sl, r3
 800d61c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d620:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800d624:	4298      	cmp	r0, r3
 800d626:	d17c      	bne.n	800d722 <mktime+0x1e6>
 800d628:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 800d62c:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800d630:	f8d8 003c 	ldr.w	r0, [r8, #60]	; 0x3c
 800d634:	f8d8 101c 	ldr.w	r1, [r8, #28]
 800d638:	1ad6      	subs	r6, r2, r3
 800d63a:	42b7      	cmp	r7, r6
 800d63c:	eba1 0100 	sub.w	r1, r1, r0
 800d640:	da76      	bge.n	800d730 <mktime+0x1f4>
 800d642:	f8d8 2000 	ldr.w	r2, [r8]
 800d646:	2a00      	cmp	r2, #0
 800d648:	d076      	beq.n	800d738 <mktime+0x1fc>
 800d64a:	428f      	cmp	r7, r1
 800d64c:	f2c0 80e3 	blt.w	800d816 <mktime+0x2da>
 800d650:	42b7      	cmp	r7, r6
 800d652:	bfac      	ite	ge
 800d654:	2600      	movge	r6, #0
 800d656:	2601      	movlt	r6, #1
 800d658:	f1ba 0f00 	cmp.w	sl, #0
 800d65c:	da72      	bge.n	800d744 <mktime+0x208>
 800d65e:	2e01      	cmp	r6, #1
 800d660:	f040 80de 	bne.w	800d820 <mktime+0x2e4>
 800d664:	f8d8 503c 	ldr.w	r5, [r8, #60]	; 0x3c
 800d668:	2601      	movs	r6, #1
 800d66a:	443d      	add	r5, r7
 800d66c:	f002 fa3e 	bl	800faec <__tz_unlock>
 800d670:	3404      	adds	r4, #4
 800d672:	2307      	movs	r3, #7
 800d674:	fb94 f3f3 	sdiv	r3, r4, r3
 800d678:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800d67c:	1ae4      	subs	r4, r4, r3
 800d67e:	bf48      	it	mi
 800d680:	3407      	addmi	r4, #7
 800d682:	f8c9 6020 	str.w	r6, [r9, #32]
 800d686:	f8c9 4018 	str.w	r4, [r9, #24]
 800d68a:	4628      	mov	r0, r5
 800d68c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d690:	f240 126d 	movw	r2, #365	; 0x16d
 800d694:	e7aa      	b.n	800d5ec <mktime+0xb0>
 800d696:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800d69a:	e7a7      	b.n	800d5ec <mktime+0xb0>
 800d69c:	d01e      	beq.n	800d6dc <mktime+0x1a0>
 800d69e:	2245      	movs	r2, #69	; 0x45
 800d6a0:	f240 176d 	movw	r7, #365	; 0x16d
 800d6a4:	2564      	movs	r5, #100	; 0x64
 800d6a6:	f44f 76c8 	mov.w	r6, #400	; 0x190
 800d6aa:	429a      	cmp	r2, r3
 800d6ac:	dc18      	bgt.n	800d6e0 <mktime+0x1a4>
 800d6ae:	079d      	lsls	r5, r3, #30
 800d6b0:	d131      	bne.n	800d716 <mktime+0x1da>
 800d6b2:	2164      	movs	r1, #100	; 0x64
 800d6b4:	fb93 f2f1 	sdiv	r2, r3, r1
 800d6b8:	fb01 3212 	mls	r2, r1, r2, r3
 800d6bc:	bb72      	cbnz	r2, 800d71c <mktime+0x1e0>
 800d6be:	f203 756c 	addw	r5, r3, #1900	; 0x76c
 800d6c2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800d6c6:	fb95 f2f1 	sdiv	r2, r5, r1
 800d6ca:	fb01 5212 	mls	r2, r1, r2, r5
 800d6ce:	2a00      	cmp	r2, #0
 800d6d0:	f240 126d 	movw	r2, #365	; 0x16d
 800d6d4:	bf08      	it	eq
 800d6d6:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800d6da:	1aa4      	subs	r4, r4, r2
 800d6dc:	461d      	mov	r5, r3
 800d6de:	e789      	b.n	800d5f4 <mktime+0xb8>
 800d6e0:	0791      	lsls	r1, r2, #30
 800d6e2:	d112      	bne.n	800d70a <mktime+0x1ce>
 800d6e4:	fb92 f1f5 	sdiv	r1, r2, r5
 800d6e8:	fb05 2111 	mls	r1, r5, r1, r2
 800d6ec:	b981      	cbnz	r1, 800d710 <mktime+0x1d4>
 800d6ee:	f202 7e6c 	addw	lr, r2, #1900	; 0x76c
 800d6f2:	fb9e f1f6 	sdiv	r1, lr, r6
 800d6f6:	fb06 e111 	mls	r1, r6, r1, lr
 800d6fa:	2900      	cmp	r1, #0
 800d6fc:	bf14      	ite	ne
 800d6fe:	4639      	movne	r1, r7
 800d700:	f44f 71b7 	moveq.w	r1, #366	; 0x16e
 800d704:	1a64      	subs	r4, r4, r1
 800d706:	3a01      	subs	r2, #1
 800d708:	e7cf      	b.n	800d6aa <mktime+0x16e>
 800d70a:	f240 116d 	movw	r1, #365	; 0x16d
 800d70e:	e7f9      	b.n	800d704 <mktime+0x1c8>
 800d710:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 800d714:	e7f6      	b.n	800d704 <mktime+0x1c8>
 800d716:	f240 126d 	movw	r2, #365	; 0x16d
 800d71a:	e7de      	b.n	800d6da <mktime+0x19e>
 800d71c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800d720:	e7db      	b.n	800d6da <mktime+0x19e>
 800d722:	f002 f935 	bl	800f990 <__tzcalc_limits>
 800d726:	2800      	cmp	r0, #0
 800d728:	f47f af7e 	bne.w	800d628 <mktime+0xec>
 800d72c:	4656      	mov	r6, sl
 800d72e:	e796      	b.n	800d65e <mktime+0x122>
 800d730:	1a12      	subs	r2, r2, r0
 800d732:	4297      	cmp	r7, r2
 800d734:	dbfa      	blt.n	800d72c <mktime+0x1f0>
 800d736:	e784      	b.n	800d642 <mktime+0x106>
 800d738:	428f      	cmp	r7, r1
 800d73a:	db89      	blt.n	800d650 <mktime+0x114>
 800d73c:	f1ba 0f00 	cmp.w	sl, #0
 800d740:	db90      	blt.n	800d664 <mktime+0x128>
 800d742:	2601      	movs	r6, #1
 800d744:	ea8a 0a06 	eor.w	sl, sl, r6
 800d748:	f1ba 0f01 	cmp.w	sl, #1
 800d74c:	d187      	bne.n	800d65e <mktime+0x122>
 800d74e:	1a1b      	subs	r3, r3, r0
 800d750:	b906      	cbnz	r6, 800d754 <mktime+0x218>
 800d752:	425b      	negs	r3, r3
 800d754:	f8d9 2000 	ldr.w	r2, [r9]
 800d758:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 800d75c:	441a      	add	r2, r3
 800d75e:	f8c9 2000 	str.w	r2, [r9]
 800d762:	4648      	mov	r0, r9
 800d764:	441f      	add	r7, r3
 800d766:	f7ff fe09 	bl	800d37c <validate_structure>
 800d76a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800d76e:	ebb3 030a 	subs.w	r3, r3, sl
 800d772:	f43f af74 	beq.w	800d65e <mktime+0x122>
 800d776:	2b01      	cmp	r3, #1
 800d778:	dc21      	bgt.n	800d7be <mktime+0x282>
 800d77a:	1c98      	adds	r0, r3, #2
 800d77c:	bfd8      	it	le
 800d77e:	2301      	movle	r3, #1
 800d780:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800d784:	441c      	add	r4, r3
 800d786:	189b      	adds	r3, r3, r2
 800d788:	d522      	bpl.n	800d7d0 <mktime+0x294>
 800d78a:	1e6a      	subs	r2, r5, #1
 800d78c:	0791      	lsls	r1, r2, #30
 800d78e:	d119      	bne.n	800d7c4 <mktime+0x288>
 800d790:	2164      	movs	r1, #100	; 0x64
 800d792:	fb92 f3f1 	sdiv	r3, r2, r1
 800d796:	fb01 2313 	mls	r3, r1, r3, r2
 800d79a:	b9b3      	cbnz	r3, 800d7ca <mktime+0x28e>
 800d79c:	f205 756b 	addw	r5, r5, #1899	; 0x76b
 800d7a0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d7a4:	fb95 f3f2 	sdiv	r3, r5, r2
 800d7a8:	fb02 5513 	mls	r5, r2, r3, r5
 800d7ac:	2d00      	cmp	r5, #0
 800d7ae:	f240 136d 	movw	r3, #365	; 0x16d
 800d7b2:	bf18      	it	ne
 800d7b4:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800d7b8:	f8c9 301c 	str.w	r3, [r9, #28]
 800d7bc:	e74f      	b.n	800d65e <mktime+0x122>
 800d7be:	f04f 33ff 	mov.w	r3, #4294967295
 800d7c2:	e7dd      	b.n	800d780 <mktime+0x244>
 800d7c4:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800d7c8:	e7f6      	b.n	800d7b8 <mktime+0x27c>
 800d7ca:	f240 136d 	movw	r3, #365	; 0x16d
 800d7ce:	e7f3      	b.n	800d7b8 <mktime+0x27c>
 800d7d0:	07aa      	lsls	r2, r5, #30
 800d7d2:	d117      	bne.n	800d804 <mktime+0x2c8>
 800d7d4:	2164      	movs	r1, #100	; 0x64
 800d7d6:	fb95 f2f1 	sdiv	r2, r5, r1
 800d7da:	fb01 5212 	mls	r2, r1, r2, r5
 800d7de:	b9a2      	cbnz	r2, 800d80a <mktime+0x2ce>
 800d7e0:	f205 756c 	addw	r5, r5, #1900	; 0x76c
 800d7e4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800d7e8:	fb95 f2f1 	sdiv	r2, r5, r1
 800d7ec:	fb01 5512 	mls	r5, r1, r2, r5
 800d7f0:	2d00      	cmp	r5, #0
 800d7f2:	f240 126d 	movw	r2, #365	; 0x16d
 800d7f6:	bf08      	it	eq
 800d7f8:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800d7fc:	429a      	cmp	r2, r3
 800d7fe:	bfd8      	it	le
 800d800:	1a9b      	suble	r3, r3, r2
 800d802:	e7d9      	b.n	800d7b8 <mktime+0x27c>
 800d804:	f240 126d 	movw	r2, #365	; 0x16d
 800d808:	e7f8      	b.n	800d7fc <mktime+0x2c0>
 800d80a:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800d80e:	e7f5      	b.n	800d7fc <mktime+0x2c0>
 800d810:	f04f 35ff 	mov.w	r5, #4294967295
 800d814:	e739      	b.n	800d68a <mktime+0x14e>
 800d816:	f1ba 0f00 	cmp.w	sl, #0
 800d81a:	f04f 0600 	mov.w	r6, #0
 800d81e:	da91      	bge.n	800d744 <mktime+0x208>
 800d820:	f8d8 5020 	ldr.w	r5, [r8, #32]
 800d824:	443d      	add	r5, r7
 800d826:	e721      	b.n	800d66c <mktime+0x130>
 800d828:	08015460 	.word	0x08015460
 800d82c:	00015180 	.word	0x00015180
 800d830:	20000970 	.word	0x20000970

0800d834 <__malloc_lock>:
 800d834:	4801      	ldr	r0, [pc, #4]	; (800d83c <__malloc_lock+0x8>)
 800d836:	f005 baae 	b.w	8012d96 <__retarget_lock_acquire_recursive>
 800d83a:	bf00      	nop
 800d83c:	200037e0 	.word	0x200037e0

0800d840 <__malloc_unlock>:
 800d840:	4801      	ldr	r0, [pc, #4]	; (800d848 <__malloc_unlock+0x8>)
 800d842:	f005 baaa 	b.w	8012d9a <__retarget_lock_release_recursive>
 800d846:	bf00      	nop
 800d848:	200037e0 	.word	0x200037e0

0800d84c <printf>:
 800d84c:	b40f      	push	{r0, r1, r2, r3}
 800d84e:	4b0a      	ldr	r3, [pc, #40]	; (800d878 <printf+0x2c>)
 800d850:	b513      	push	{r0, r1, r4, lr}
 800d852:	681c      	ldr	r4, [r3, #0]
 800d854:	b124      	cbz	r4, 800d860 <printf+0x14>
 800d856:	69a3      	ldr	r3, [r4, #24]
 800d858:	b913      	cbnz	r3, 800d860 <printf+0x14>
 800d85a:	4620      	mov	r0, r4
 800d85c:	f004 fb54 	bl	8011f08 <__sinit>
 800d860:	ab05      	add	r3, sp, #20
 800d862:	9a04      	ldr	r2, [sp, #16]
 800d864:	68a1      	ldr	r1, [r4, #8]
 800d866:	9301      	str	r3, [sp, #4]
 800d868:	4620      	mov	r0, r4
 800d86a:	f002 facd 	bl	800fe08 <_vfprintf_r>
 800d86e:	b002      	add	sp, #8
 800d870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d874:	b004      	add	sp, #16
 800d876:	4770      	bx	lr
 800d878:	20000014 	.word	0x20000014

0800d87c <_puts_r>:
 800d87c:	b530      	push	{r4, r5, lr}
 800d87e:	4605      	mov	r5, r0
 800d880:	b089      	sub	sp, #36	; 0x24
 800d882:	4608      	mov	r0, r1
 800d884:	460c      	mov	r4, r1
 800d886:	f7f2 fcad 	bl	80001e4 <strlen>
 800d88a:	4b28      	ldr	r3, [pc, #160]	; (800d92c <_puts_r+0xb0>)
 800d88c:	9306      	str	r3, [sp, #24]
 800d88e:	2301      	movs	r3, #1
 800d890:	9005      	str	r0, [sp, #20]
 800d892:	9307      	str	r3, [sp, #28]
 800d894:	4418      	add	r0, r3
 800d896:	ab04      	add	r3, sp, #16
 800d898:	9301      	str	r3, [sp, #4]
 800d89a:	2302      	movs	r3, #2
 800d89c:	9404      	str	r4, [sp, #16]
 800d89e:	9003      	str	r0, [sp, #12]
 800d8a0:	9302      	str	r3, [sp, #8]
 800d8a2:	b125      	cbz	r5, 800d8ae <_puts_r+0x32>
 800d8a4:	69ab      	ldr	r3, [r5, #24]
 800d8a6:	b913      	cbnz	r3, 800d8ae <_puts_r+0x32>
 800d8a8:	4628      	mov	r0, r5
 800d8aa:	f004 fb2d 	bl	8011f08 <__sinit>
 800d8ae:	69ab      	ldr	r3, [r5, #24]
 800d8b0:	68ac      	ldr	r4, [r5, #8]
 800d8b2:	b913      	cbnz	r3, 800d8ba <_puts_r+0x3e>
 800d8b4:	4628      	mov	r0, r5
 800d8b6:	f004 fb27 	bl	8011f08 <__sinit>
 800d8ba:	4b1d      	ldr	r3, [pc, #116]	; (800d930 <_puts_r+0xb4>)
 800d8bc:	429c      	cmp	r4, r3
 800d8be:	d12a      	bne.n	800d916 <_puts_r+0x9a>
 800d8c0:	686c      	ldr	r4, [r5, #4]
 800d8c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d8c4:	07db      	lsls	r3, r3, #31
 800d8c6:	d405      	bmi.n	800d8d4 <_puts_r+0x58>
 800d8c8:	89a3      	ldrh	r3, [r4, #12]
 800d8ca:	0598      	lsls	r0, r3, #22
 800d8cc:	d402      	bmi.n	800d8d4 <_puts_r+0x58>
 800d8ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8d0:	f005 fa61 	bl	8012d96 <__retarget_lock_acquire_recursive>
 800d8d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8d8:	0499      	lsls	r1, r3, #18
 800d8da:	d406      	bmi.n	800d8ea <_puts_r+0x6e>
 800d8dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d8e0:	81a3      	strh	r3, [r4, #12]
 800d8e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d8e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d8e8:	6663      	str	r3, [r4, #100]	; 0x64
 800d8ea:	4628      	mov	r0, r5
 800d8ec:	aa01      	add	r2, sp, #4
 800d8ee:	4621      	mov	r1, r4
 800d8f0:	f004 fc9c 	bl	801222c <__sfvwrite_r>
 800d8f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d8f6:	2800      	cmp	r0, #0
 800d8f8:	bf14      	ite	ne
 800d8fa:	f04f 35ff 	movne.w	r5, #4294967295
 800d8fe:	250a      	moveq	r5, #10
 800d900:	07da      	lsls	r2, r3, #31
 800d902:	d405      	bmi.n	800d910 <_puts_r+0x94>
 800d904:	89a3      	ldrh	r3, [r4, #12]
 800d906:	059b      	lsls	r3, r3, #22
 800d908:	d402      	bmi.n	800d910 <_puts_r+0x94>
 800d90a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d90c:	f005 fa45 	bl	8012d9a <__retarget_lock_release_recursive>
 800d910:	4628      	mov	r0, r5
 800d912:	b009      	add	sp, #36	; 0x24
 800d914:	bd30      	pop	{r4, r5, pc}
 800d916:	4b07      	ldr	r3, [pc, #28]	; (800d934 <_puts_r+0xb8>)
 800d918:	429c      	cmp	r4, r3
 800d91a:	d101      	bne.n	800d920 <_puts_r+0xa4>
 800d91c:	68ac      	ldr	r4, [r5, #8]
 800d91e:	e7d0      	b.n	800d8c2 <_puts_r+0x46>
 800d920:	4b05      	ldr	r3, [pc, #20]	; (800d938 <_puts_r+0xbc>)
 800d922:	429c      	cmp	r4, r3
 800d924:	bf08      	it	eq
 800d926:	68ec      	ldreq	r4, [r5, #12]
 800d928:	e7cb      	b.n	800d8c2 <_puts_r+0x46>
 800d92a:	bf00      	nop
 800d92c:	080154f0 	.word	0x080154f0
 800d930:	08015628 	.word	0x08015628
 800d934:	08015648 	.word	0x08015648
 800d938:	08015608 	.word	0x08015608

0800d93c <puts>:
 800d93c:	4b02      	ldr	r3, [pc, #8]	; (800d948 <puts+0xc>)
 800d93e:	4601      	mov	r1, r0
 800d940:	6818      	ldr	r0, [r3, #0]
 800d942:	f7ff bf9b 	b.w	800d87c <_puts_r>
 800d946:	bf00      	nop
 800d948:	20000014 	.word	0x20000014

0800d94c <_sbrk_r>:
 800d94c:	b538      	push	{r3, r4, r5, lr}
 800d94e:	4c06      	ldr	r4, [pc, #24]	; (800d968 <_sbrk_r+0x1c>)
 800d950:	2300      	movs	r3, #0
 800d952:	4605      	mov	r5, r0
 800d954:	4608      	mov	r0, r1
 800d956:	6023      	str	r3, [r4, #0]
 800d958:	f7ff f92e 	bl	800cbb8 <_sbrk>
 800d95c:	1c43      	adds	r3, r0, #1
 800d95e:	d102      	bne.n	800d966 <_sbrk_r+0x1a>
 800d960:	6823      	ldr	r3, [r4, #0]
 800d962:	b103      	cbz	r3, 800d966 <_sbrk_r+0x1a>
 800d964:	602b      	str	r3, [r5, #0]
 800d966:	bd38      	pop	{r3, r4, r5, pc}
 800d968:	200037e8 	.word	0x200037e8

0800d96c <setbuf>:
 800d96c:	2900      	cmp	r1, #0
 800d96e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d972:	bf0c      	ite	eq
 800d974:	2202      	moveq	r2, #2
 800d976:	2200      	movne	r2, #0
 800d978:	f000 b800 	b.w	800d97c <setvbuf>

0800d97c <setvbuf>:
 800d97c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d980:	461d      	mov	r5, r3
 800d982:	4b60      	ldr	r3, [pc, #384]	; (800db04 <setvbuf+0x188>)
 800d984:	681e      	ldr	r6, [r3, #0]
 800d986:	4604      	mov	r4, r0
 800d988:	460f      	mov	r7, r1
 800d98a:	4690      	mov	r8, r2
 800d98c:	b126      	cbz	r6, 800d998 <setvbuf+0x1c>
 800d98e:	69b3      	ldr	r3, [r6, #24]
 800d990:	b913      	cbnz	r3, 800d998 <setvbuf+0x1c>
 800d992:	4630      	mov	r0, r6
 800d994:	f004 fab8 	bl	8011f08 <__sinit>
 800d998:	4b5b      	ldr	r3, [pc, #364]	; (800db08 <setvbuf+0x18c>)
 800d99a:	429c      	cmp	r4, r3
 800d99c:	d166      	bne.n	800da6c <setvbuf+0xf0>
 800d99e:	6874      	ldr	r4, [r6, #4]
 800d9a0:	f1b8 0f02 	cmp.w	r8, #2
 800d9a4:	d006      	beq.n	800d9b4 <setvbuf+0x38>
 800d9a6:	f1b8 0f01 	cmp.w	r8, #1
 800d9aa:	f200 80a7 	bhi.w	800dafc <setvbuf+0x180>
 800d9ae:	2d00      	cmp	r5, #0
 800d9b0:	f2c0 80a4 	blt.w	800dafc <setvbuf+0x180>
 800d9b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d9b6:	07da      	lsls	r2, r3, #31
 800d9b8:	d405      	bmi.n	800d9c6 <setvbuf+0x4a>
 800d9ba:	89a3      	ldrh	r3, [r4, #12]
 800d9bc:	059b      	lsls	r3, r3, #22
 800d9be:	d402      	bmi.n	800d9c6 <setvbuf+0x4a>
 800d9c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d9c2:	f005 f9e8 	bl	8012d96 <__retarget_lock_acquire_recursive>
 800d9c6:	4621      	mov	r1, r4
 800d9c8:	4630      	mov	r0, r6
 800d9ca:	f004 fa09 	bl	8011de0 <_fflush_r>
 800d9ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d9d0:	b141      	cbz	r1, 800d9e4 <setvbuf+0x68>
 800d9d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d9d6:	4299      	cmp	r1, r3
 800d9d8:	d002      	beq.n	800d9e0 <setvbuf+0x64>
 800d9da:	4630      	mov	r0, r6
 800d9dc:	f004 fb6a 	bl	80120b4 <_free_r>
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	6363      	str	r3, [r4, #52]	; 0x34
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	61a3      	str	r3, [r4, #24]
 800d9e8:	6063      	str	r3, [r4, #4]
 800d9ea:	89a3      	ldrh	r3, [r4, #12]
 800d9ec:	0618      	lsls	r0, r3, #24
 800d9ee:	d503      	bpl.n	800d9f8 <setvbuf+0x7c>
 800d9f0:	6921      	ldr	r1, [r4, #16]
 800d9f2:	4630      	mov	r0, r6
 800d9f4:	f004 fb5e 	bl	80120b4 <_free_r>
 800d9f8:	89a3      	ldrh	r3, [r4, #12]
 800d9fa:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800d9fe:	f023 0303 	bic.w	r3, r3, #3
 800da02:	f1b8 0f02 	cmp.w	r8, #2
 800da06:	81a3      	strh	r3, [r4, #12]
 800da08:	d072      	beq.n	800daf0 <setvbuf+0x174>
 800da0a:	ab01      	add	r3, sp, #4
 800da0c:	466a      	mov	r2, sp
 800da0e:	4621      	mov	r1, r4
 800da10:	4630      	mov	r0, r6
 800da12:	f005 f9c3 	bl	8012d9c <__swhatbuf_r>
 800da16:	89a3      	ldrh	r3, [r4, #12]
 800da18:	4318      	orrs	r0, r3
 800da1a:	81a0      	strh	r0, [r4, #12]
 800da1c:	2d00      	cmp	r5, #0
 800da1e:	d12f      	bne.n	800da80 <setvbuf+0x104>
 800da20:	9d00      	ldr	r5, [sp, #0]
 800da22:	4628      	mov	r0, r5
 800da24:	f7ff fa78 	bl	800cf18 <malloc>
 800da28:	4607      	mov	r7, r0
 800da2a:	2800      	cmp	r0, #0
 800da2c:	d162      	bne.n	800daf4 <setvbuf+0x178>
 800da2e:	f8dd 9000 	ldr.w	r9, [sp]
 800da32:	45a9      	cmp	r9, r5
 800da34:	d150      	bne.n	800dad8 <setvbuf+0x15c>
 800da36:	f04f 35ff 	mov.w	r5, #4294967295
 800da3a:	2200      	movs	r2, #0
 800da3c:	60a2      	str	r2, [r4, #8]
 800da3e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800da42:	6022      	str	r2, [r4, #0]
 800da44:	6122      	str	r2, [r4, #16]
 800da46:	2201      	movs	r2, #1
 800da48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da4c:	6162      	str	r2, [r4, #20]
 800da4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800da50:	f043 0302 	orr.w	r3, r3, #2
 800da54:	07d1      	lsls	r1, r2, #31
 800da56:	81a3      	strh	r3, [r4, #12]
 800da58:	d404      	bmi.n	800da64 <setvbuf+0xe8>
 800da5a:	059b      	lsls	r3, r3, #22
 800da5c:	d402      	bmi.n	800da64 <setvbuf+0xe8>
 800da5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da60:	f005 f99b 	bl	8012d9a <__retarget_lock_release_recursive>
 800da64:	4628      	mov	r0, r5
 800da66:	b003      	add	sp, #12
 800da68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da6c:	4b27      	ldr	r3, [pc, #156]	; (800db0c <setvbuf+0x190>)
 800da6e:	429c      	cmp	r4, r3
 800da70:	d101      	bne.n	800da76 <setvbuf+0xfa>
 800da72:	68b4      	ldr	r4, [r6, #8]
 800da74:	e794      	b.n	800d9a0 <setvbuf+0x24>
 800da76:	4b26      	ldr	r3, [pc, #152]	; (800db10 <setvbuf+0x194>)
 800da78:	429c      	cmp	r4, r3
 800da7a:	bf08      	it	eq
 800da7c:	68f4      	ldreq	r4, [r6, #12]
 800da7e:	e78f      	b.n	800d9a0 <setvbuf+0x24>
 800da80:	2f00      	cmp	r7, #0
 800da82:	d0ce      	beq.n	800da22 <setvbuf+0xa6>
 800da84:	69b3      	ldr	r3, [r6, #24]
 800da86:	b913      	cbnz	r3, 800da8e <setvbuf+0x112>
 800da88:	4630      	mov	r0, r6
 800da8a:	f004 fa3d 	bl	8011f08 <__sinit>
 800da8e:	9b00      	ldr	r3, [sp, #0]
 800da90:	6127      	str	r7, [r4, #16]
 800da92:	429d      	cmp	r5, r3
 800da94:	bf18      	it	ne
 800da96:	89a3      	ldrhne	r3, [r4, #12]
 800da98:	6027      	str	r7, [r4, #0]
 800da9a:	bf1c      	itt	ne
 800da9c:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
 800daa0:	81a3      	strhne	r3, [r4, #12]
 800daa2:	f1b8 0f01 	cmp.w	r8, #1
 800daa6:	bf08      	it	eq
 800daa8:	89a3      	ldrheq	r3, [r4, #12]
 800daaa:	6165      	str	r5, [r4, #20]
 800daac:	bf04      	itt	eq
 800daae:	f043 0301 	orreq.w	r3, r3, #1
 800dab2:	81a3      	strheq	r3, [r4, #12]
 800dab4:	89a3      	ldrh	r3, [r4, #12]
 800dab6:	f013 0208 	ands.w	r2, r3, #8
 800daba:	d01d      	beq.n	800daf8 <setvbuf+0x17c>
 800dabc:	07da      	lsls	r2, r3, #31
 800dabe:	bf41      	itttt	mi
 800dac0:	2200      	movmi	r2, #0
 800dac2:	426d      	negmi	r5, r5
 800dac4:	60a2      	strmi	r2, [r4, #8]
 800dac6:	61a5      	strmi	r5, [r4, #24]
 800dac8:	bf58      	it	pl
 800daca:	60a5      	strpl	r5, [r4, #8]
 800dacc:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800dace:	f015 0501 	ands.w	r5, r5, #1
 800dad2:	d0c2      	beq.n	800da5a <setvbuf+0xde>
 800dad4:	2500      	movs	r5, #0
 800dad6:	e7c5      	b.n	800da64 <setvbuf+0xe8>
 800dad8:	4648      	mov	r0, r9
 800dada:	f7ff fa1d 	bl	800cf18 <malloc>
 800dade:	4607      	mov	r7, r0
 800dae0:	2800      	cmp	r0, #0
 800dae2:	d0a8      	beq.n	800da36 <setvbuf+0xba>
 800dae4:	89a3      	ldrh	r3, [r4, #12]
 800dae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800daea:	81a3      	strh	r3, [r4, #12]
 800daec:	464d      	mov	r5, r9
 800daee:	e7c9      	b.n	800da84 <setvbuf+0x108>
 800daf0:	2500      	movs	r5, #0
 800daf2:	e7a2      	b.n	800da3a <setvbuf+0xbe>
 800daf4:	46a9      	mov	r9, r5
 800daf6:	e7f5      	b.n	800dae4 <setvbuf+0x168>
 800daf8:	60a2      	str	r2, [r4, #8]
 800dafa:	e7e7      	b.n	800dacc <setvbuf+0x150>
 800dafc:	f04f 35ff 	mov.w	r5, #4294967295
 800db00:	e7b0      	b.n	800da64 <setvbuf+0xe8>
 800db02:	bf00      	nop
 800db04:	20000014 	.word	0x20000014
 800db08:	08015628 	.word	0x08015628
 800db0c:	08015648 	.word	0x08015648
 800db10:	08015608 	.word	0x08015608

0800db14 <sprintf>:
 800db14:	b40e      	push	{r1, r2, r3}
 800db16:	b500      	push	{lr}
 800db18:	b09c      	sub	sp, #112	; 0x70
 800db1a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800db1e:	ab1d      	add	r3, sp, #116	; 0x74
 800db20:	f8ad 1014 	strh.w	r1, [sp, #20]
 800db24:	9002      	str	r0, [sp, #8]
 800db26:	9006      	str	r0, [sp, #24]
 800db28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800db2c:	480a      	ldr	r0, [pc, #40]	; (800db58 <sprintf+0x44>)
 800db2e:	9104      	str	r1, [sp, #16]
 800db30:	9107      	str	r1, [sp, #28]
 800db32:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800db36:	f853 2b04 	ldr.w	r2, [r3], #4
 800db3a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800db3e:	6800      	ldr	r0, [r0, #0]
 800db40:	9301      	str	r3, [sp, #4]
 800db42:	a902      	add	r1, sp, #8
 800db44:	f000 ff40 	bl	800e9c8 <_svfprintf_r>
 800db48:	9b02      	ldr	r3, [sp, #8]
 800db4a:	2200      	movs	r2, #0
 800db4c:	701a      	strb	r2, [r3, #0]
 800db4e:	b01c      	add	sp, #112	; 0x70
 800db50:	f85d eb04 	ldr.w	lr, [sp], #4
 800db54:	b003      	add	sp, #12
 800db56:	4770      	bx	lr
 800db58:	20000014 	.word	0x20000014

0800db5c <strchr>:
 800db5c:	b2c9      	uxtb	r1, r1
 800db5e:	4603      	mov	r3, r0
 800db60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db64:	b11a      	cbz	r2, 800db6e <strchr+0x12>
 800db66:	4291      	cmp	r1, r2
 800db68:	d1f9      	bne.n	800db5e <strchr+0x2>
 800db6a:	4618      	mov	r0, r3
 800db6c:	4770      	bx	lr
 800db6e:	2900      	cmp	r1, #0
 800db70:	bf0c      	ite	eq
 800db72:	4618      	moveq	r0, r3
 800db74:	2000      	movne	r0, #0
 800db76:	4770      	bx	lr

0800db78 <sulp>:
 800db78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db7c:	460f      	mov	r7, r1
 800db7e:	4690      	mov	r8, r2
 800db80:	f005 fc64 	bl	801344c <__ulp>
 800db84:	4604      	mov	r4, r0
 800db86:	460d      	mov	r5, r1
 800db88:	f1b8 0f00 	cmp.w	r8, #0
 800db8c:	d011      	beq.n	800dbb2 <sulp+0x3a>
 800db8e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800db92:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800db96:	2b00      	cmp	r3, #0
 800db98:	dd0b      	ble.n	800dbb2 <sulp+0x3a>
 800db9a:	051b      	lsls	r3, r3, #20
 800db9c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800dba0:	2400      	movs	r4, #0
 800dba2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800dba6:	4622      	mov	r2, r4
 800dba8:	462b      	mov	r3, r5
 800dbaa:	f7f2 fd31 	bl	8000610 <__aeabi_dmul>
 800dbae:	4604      	mov	r4, r0
 800dbb0:	460d      	mov	r5, r1
 800dbb2:	4620      	mov	r0, r4
 800dbb4:	4629      	mov	r1, r5
 800dbb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbba:	0000      	movs	r0, r0
 800dbbc:	0000      	movs	r0, r0
	...

0800dbc0 <_strtod_l>:
 800dbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbc4:	4699      	mov	r9, r3
 800dbc6:	b09f      	sub	sp, #124	; 0x7c
 800dbc8:	2300      	movs	r3, #0
 800dbca:	4680      	mov	r8, r0
 800dbcc:	4648      	mov	r0, r9
 800dbce:	460c      	mov	r4, r1
 800dbd0:	9215      	str	r2, [sp, #84]	; 0x54
 800dbd2:	931a      	str	r3, [sp, #104]	; 0x68
 800dbd4:	f005 f8cc 	bl	8012d70 <__localeconv_l>
 800dbd8:	4607      	mov	r7, r0
 800dbda:	6800      	ldr	r0, [r0, #0]
 800dbdc:	f7f2 fb02 	bl	80001e4 <strlen>
 800dbe0:	f04f 0a00 	mov.w	sl, #0
 800dbe4:	4605      	mov	r5, r0
 800dbe6:	f04f 0b00 	mov.w	fp, #0
 800dbea:	9419      	str	r4, [sp, #100]	; 0x64
 800dbec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dbee:	781a      	ldrb	r2, [r3, #0]
 800dbf0:	2a0d      	cmp	r2, #13
 800dbf2:	d833      	bhi.n	800dc5c <_strtod_l+0x9c>
 800dbf4:	2a09      	cmp	r2, #9
 800dbf6:	d237      	bcs.n	800dc68 <_strtod_l+0xa8>
 800dbf8:	2a00      	cmp	r2, #0
 800dbfa:	d03f      	beq.n	800dc7c <_strtod_l+0xbc>
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	9309      	str	r3, [sp, #36]	; 0x24
 800dc00:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800dc02:	7833      	ldrb	r3, [r6, #0]
 800dc04:	2b30      	cmp	r3, #48	; 0x30
 800dc06:	f040 8101 	bne.w	800de0c <_strtod_l+0x24c>
 800dc0a:	7873      	ldrb	r3, [r6, #1]
 800dc0c:	2b58      	cmp	r3, #88	; 0x58
 800dc0e:	d001      	beq.n	800dc14 <_strtod_l+0x54>
 800dc10:	2b78      	cmp	r3, #120	; 0x78
 800dc12:	d16b      	bne.n	800dcec <_strtod_l+0x12c>
 800dc14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc16:	9301      	str	r3, [sp, #4]
 800dc18:	ab1a      	add	r3, sp, #104	; 0x68
 800dc1a:	9300      	str	r3, [sp, #0]
 800dc1c:	f8cd 9008 	str.w	r9, [sp, #8]
 800dc20:	ab1b      	add	r3, sp, #108	; 0x6c
 800dc22:	4aaa      	ldr	r2, [pc, #680]	; (800decc <_strtod_l+0x30c>)
 800dc24:	a919      	add	r1, sp, #100	; 0x64
 800dc26:	4640      	mov	r0, r8
 800dc28:	f004 fcb6 	bl	8012598 <__gethex>
 800dc2c:	f010 0407 	ands.w	r4, r0, #7
 800dc30:	4605      	mov	r5, r0
 800dc32:	d005      	beq.n	800dc40 <_strtod_l+0x80>
 800dc34:	2c06      	cmp	r4, #6
 800dc36:	d12b      	bne.n	800dc90 <_strtod_l+0xd0>
 800dc38:	3601      	adds	r6, #1
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	9619      	str	r6, [sp, #100]	; 0x64
 800dc3e:	9309      	str	r3, [sp, #36]	; 0x24
 800dc40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	f040 8599 	bne.w	800e77a <_strtod_l+0xbba>
 800dc48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc4a:	b1e3      	cbz	r3, 800dc86 <_strtod_l+0xc6>
 800dc4c:	4652      	mov	r2, sl
 800dc4e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800dc52:	4610      	mov	r0, r2
 800dc54:	4619      	mov	r1, r3
 800dc56:	b01f      	add	sp, #124	; 0x7c
 800dc58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc5c:	2a2b      	cmp	r2, #43	; 0x2b
 800dc5e:	d006      	beq.n	800dc6e <_strtod_l+0xae>
 800dc60:	2a2d      	cmp	r2, #45	; 0x2d
 800dc62:	d013      	beq.n	800dc8c <_strtod_l+0xcc>
 800dc64:	2a20      	cmp	r2, #32
 800dc66:	d1c9      	bne.n	800dbfc <_strtod_l+0x3c>
 800dc68:	3301      	adds	r3, #1
 800dc6a:	9319      	str	r3, [sp, #100]	; 0x64
 800dc6c:	e7be      	b.n	800dbec <_strtod_l+0x2c>
 800dc6e:	2200      	movs	r2, #0
 800dc70:	9209      	str	r2, [sp, #36]	; 0x24
 800dc72:	1c5a      	adds	r2, r3, #1
 800dc74:	9219      	str	r2, [sp, #100]	; 0x64
 800dc76:	785b      	ldrb	r3, [r3, #1]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d1c1      	bne.n	800dc00 <_strtod_l+0x40>
 800dc7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc7e:	9419      	str	r4, [sp, #100]	; 0x64
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	f040 8578 	bne.w	800e776 <_strtod_l+0xbb6>
 800dc86:	4652      	mov	r2, sl
 800dc88:	465b      	mov	r3, fp
 800dc8a:	e7e2      	b.n	800dc52 <_strtod_l+0x92>
 800dc8c:	2201      	movs	r2, #1
 800dc8e:	e7ef      	b.n	800dc70 <_strtod_l+0xb0>
 800dc90:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800dc92:	b13a      	cbz	r2, 800dca4 <_strtod_l+0xe4>
 800dc94:	2135      	movs	r1, #53	; 0x35
 800dc96:	a81c      	add	r0, sp, #112	; 0x70
 800dc98:	f005 fcc5 	bl	8013626 <__copybits>
 800dc9c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800dc9e:	4640      	mov	r0, r8
 800dca0:	f005 f948 	bl	8012f34 <_Bfree>
 800dca4:	3c01      	subs	r4, #1
 800dca6:	2c04      	cmp	r4, #4
 800dca8:	d808      	bhi.n	800dcbc <_strtod_l+0xfc>
 800dcaa:	e8df f004 	tbb	[pc, r4]
 800dcae:	030c      	.short	0x030c
 800dcb0:	1a17      	.short	0x1a17
 800dcb2:	0c          	.byte	0x0c
 800dcb3:	00          	.byte	0x00
 800dcb4:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 800dcb8:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 800dcbc:	0729      	lsls	r1, r5, #28
 800dcbe:	d5bf      	bpl.n	800dc40 <_strtod_l+0x80>
 800dcc0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800dcc4:	e7bc      	b.n	800dc40 <_strtod_l+0x80>
 800dcc6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dcc8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800dcca:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 800dcce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800dcd2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800dcd6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800dcda:	e7ef      	b.n	800dcbc <_strtod_l+0xfc>
 800dcdc:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 800ded8 <_strtod_l+0x318>
 800dce0:	e7ec      	b.n	800dcbc <_strtod_l+0xfc>
 800dce2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800dce6:	f04f 3aff 	mov.w	sl, #4294967295
 800dcea:	e7e7      	b.n	800dcbc <_strtod_l+0xfc>
 800dcec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dcee:	1c5a      	adds	r2, r3, #1
 800dcf0:	9219      	str	r2, [sp, #100]	; 0x64
 800dcf2:	785b      	ldrb	r3, [r3, #1]
 800dcf4:	2b30      	cmp	r3, #48	; 0x30
 800dcf6:	d0f9      	beq.n	800dcec <_strtod_l+0x12c>
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d0a1      	beq.n	800dc40 <_strtod_l+0x80>
 800dcfc:	2301      	movs	r3, #1
 800dcfe:	9308      	str	r3, [sp, #32]
 800dd00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dd02:	930a      	str	r3, [sp, #40]	; 0x28
 800dd04:	2300      	movs	r3, #0
 800dd06:	9305      	str	r3, [sp, #20]
 800dd08:	9306      	str	r3, [sp, #24]
 800dd0a:	9304      	str	r3, [sp, #16]
 800dd0c:	220a      	movs	r2, #10
 800dd0e:	9819      	ldr	r0, [sp, #100]	; 0x64
 800dd10:	7806      	ldrb	r6, [r0, #0]
 800dd12:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800dd16:	b2d9      	uxtb	r1, r3
 800dd18:	2909      	cmp	r1, #9
 800dd1a:	d979      	bls.n	800de10 <_strtod_l+0x250>
 800dd1c:	462a      	mov	r2, r5
 800dd1e:	6839      	ldr	r1, [r7, #0]
 800dd20:	f005 feb3 	bl	8013a8a <strncmp>
 800dd24:	2800      	cmp	r0, #0
 800dd26:	f000 8085 	beq.w	800de34 <_strtod_l+0x274>
 800dd2a:	2000      	movs	r0, #0
 800dd2c:	9d04      	ldr	r5, [sp, #16]
 800dd2e:	4633      	mov	r3, r6
 800dd30:	4602      	mov	r2, r0
 800dd32:	4601      	mov	r1, r0
 800dd34:	2b65      	cmp	r3, #101	; 0x65
 800dd36:	d002      	beq.n	800dd3e <_strtod_l+0x17e>
 800dd38:	2b45      	cmp	r3, #69	; 0x45
 800dd3a:	f040 80ef 	bne.w	800df1c <_strtod_l+0x35c>
 800dd3e:	b925      	cbnz	r5, 800dd4a <_strtod_l+0x18a>
 800dd40:	b910      	cbnz	r0, 800dd48 <_strtod_l+0x188>
 800dd42:	9b08      	ldr	r3, [sp, #32]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d099      	beq.n	800dc7c <_strtod_l+0xbc>
 800dd48:	2500      	movs	r5, #0
 800dd4a:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800dd4c:	1c63      	adds	r3, r4, #1
 800dd4e:	9319      	str	r3, [sp, #100]	; 0x64
 800dd50:	7863      	ldrb	r3, [r4, #1]
 800dd52:	2b2b      	cmp	r3, #43	; 0x2b
 800dd54:	f000 80cf 	beq.w	800def6 <_strtod_l+0x336>
 800dd58:	2b2d      	cmp	r3, #45	; 0x2d
 800dd5a:	f000 80d2 	beq.w	800df02 <_strtod_l+0x342>
 800dd5e:	2600      	movs	r6, #0
 800dd60:	9607      	str	r6, [sp, #28]
 800dd62:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800dd66:	2e09      	cmp	r6, #9
 800dd68:	f200 80d7 	bhi.w	800df1a <_strtod_l+0x35a>
 800dd6c:	2b30      	cmp	r3, #48	; 0x30
 800dd6e:	f000 80ca 	beq.w	800df06 <_strtod_l+0x346>
 800dd72:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 800dd76:	2e08      	cmp	r6, #8
 800dd78:	f200 80d0 	bhi.w	800df1c <_strtod_l+0x35c>
 800dd7c:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800dd80:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dd82:	f04f 0c0a 	mov.w	ip, #10
 800dd86:	461f      	mov	r7, r3
 800dd88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dd8a:	1c5e      	adds	r6, r3, #1
 800dd8c:	9619      	str	r6, [sp, #100]	; 0x64
 800dd8e:	785b      	ldrb	r3, [r3, #1]
 800dd90:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
 800dd94:	f1b9 0f09 	cmp.w	r9, #9
 800dd98:	f240 80ba 	bls.w	800df10 <_strtod_l+0x350>
 800dd9c:	1bf6      	subs	r6, r6, r7
 800dd9e:	2e08      	cmp	r6, #8
 800dda0:	f644 691f 	movw	r9, #19999	; 0x4e1f
 800dda4:	dc02      	bgt.n	800ddac <_strtod_l+0x1ec>
 800dda6:	45f1      	cmp	r9, lr
 800dda8:	bfa8      	it	ge
 800ddaa:	46f1      	movge	r9, lr
 800ddac:	9e07      	ldr	r6, [sp, #28]
 800ddae:	b10e      	cbz	r6, 800ddb4 <_strtod_l+0x1f4>
 800ddb0:	f1c9 0900 	rsb	r9, r9, #0
 800ddb4:	2d00      	cmp	r5, #0
 800ddb6:	f040 80d7 	bne.w	800df68 <_strtod_l+0x3a8>
 800ddba:	2800      	cmp	r0, #0
 800ddbc:	f47f af40 	bne.w	800dc40 <_strtod_l+0x80>
 800ddc0:	9a08      	ldr	r2, [sp, #32]
 800ddc2:	2a00      	cmp	r2, #0
 800ddc4:	f47f af3c 	bne.w	800dc40 <_strtod_l+0x80>
 800ddc8:	2900      	cmp	r1, #0
 800ddca:	f47f af57 	bne.w	800dc7c <_strtod_l+0xbc>
 800ddce:	2b4e      	cmp	r3, #78	; 0x4e
 800ddd0:	f000 80ad 	beq.w	800df2e <_strtod_l+0x36e>
 800ddd4:	f300 80a5 	bgt.w	800df22 <_strtod_l+0x362>
 800ddd8:	2b49      	cmp	r3, #73	; 0x49
 800ddda:	f47f af4f 	bne.w	800dc7c <_strtod_l+0xbc>
 800ddde:	493c      	ldr	r1, [pc, #240]	; (800ded0 <_strtod_l+0x310>)
 800dde0:	a819      	add	r0, sp, #100	; 0x64
 800dde2:	f004 fe09 	bl	80129f8 <__match>
 800dde6:	2800      	cmp	r0, #0
 800dde8:	f43f af48 	beq.w	800dc7c <_strtod_l+0xbc>
 800ddec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ddee:	4939      	ldr	r1, [pc, #228]	; (800ded4 <_strtod_l+0x314>)
 800ddf0:	3b01      	subs	r3, #1
 800ddf2:	a819      	add	r0, sp, #100	; 0x64
 800ddf4:	9319      	str	r3, [sp, #100]	; 0x64
 800ddf6:	f004 fdff 	bl	80129f8 <__match>
 800ddfa:	b910      	cbnz	r0, 800de02 <_strtod_l+0x242>
 800ddfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ddfe:	3301      	adds	r3, #1
 800de00:	9319      	str	r3, [sp, #100]	; 0x64
 800de02:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 800ded8 <_strtod_l+0x318>
 800de06:	f04f 0a00 	mov.w	sl, #0
 800de0a:	e719      	b.n	800dc40 <_strtod_l+0x80>
 800de0c:	2300      	movs	r3, #0
 800de0e:	e776      	b.n	800dcfe <_strtod_l+0x13e>
 800de10:	9904      	ldr	r1, [sp, #16]
 800de12:	2908      	cmp	r1, #8
 800de14:	bfd5      	itete	le
 800de16:	9906      	ldrle	r1, [sp, #24]
 800de18:	9905      	ldrgt	r1, [sp, #20]
 800de1a:	fb02 3301 	mlale	r3, r2, r1, r3
 800de1e:	fb02 3301 	mlagt	r3, r2, r1, r3
 800de22:	bfd4      	ite	le
 800de24:	9306      	strle	r3, [sp, #24]
 800de26:	9305      	strgt	r3, [sp, #20]
 800de28:	9b04      	ldr	r3, [sp, #16]
 800de2a:	3001      	adds	r0, #1
 800de2c:	3301      	adds	r3, #1
 800de2e:	9304      	str	r3, [sp, #16]
 800de30:	9019      	str	r0, [sp, #100]	; 0x64
 800de32:	e76c      	b.n	800dd0e <_strtod_l+0x14e>
 800de34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800de36:	195a      	adds	r2, r3, r5
 800de38:	9219      	str	r2, [sp, #100]	; 0x64
 800de3a:	9a04      	ldr	r2, [sp, #16]
 800de3c:	5d5b      	ldrb	r3, [r3, r5]
 800de3e:	2a00      	cmp	r2, #0
 800de40:	d154      	bne.n	800deec <_strtod_l+0x32c>
 800de42:	4610      	mov	r0, r2
 800de44:	2b30      	cmp	r3, #48	; 0x30
 800de46:	d02a      	beq.n	800de9e <_strtod_l+0x2de>
 800de48:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800de4c:	2a08      	cmp	r2, #8
 800de4e:	f200 8499 	bhi.w	800e784 <_strtod_l+0xbc4>
 800de52:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800de54:	920a      	str	r2, [sp, #40]	; 0x28
 800de56:	4602      	mov	r2, r0
 800de58:	2000      	movs	r0, #0
 800de5a:	4605      	mov	r5, r0
 800de5c:	3b30      	subs	r3, #48	; 0x30
 800de5e:	f100 0101 	add.w	r1, r0, #1
 800de62:	d011      	beq.n	800de88 <_strtod_l+0x2c8>
 800de64:	440a      	add	r2, r1
 800de66:	eb00 0c05 	add.w	ip, r0, r5
 800de6a:	4629      	mov	r1, r5
 800de6c:	260a      	movs	r6, #10
 800de6e:	4561      	cmp	r1, ip
 800de70:	d11b      	bne.n	800deaa <_strtod_l+0x2ea>
 800de72:	4428      	add	r0, r5
 800de74:	2808      	cmp	r0, #8
 800de76:	f100 0501 	add.w	r5, r0, #1
 800de7a:	dc2f      	bgt.n	800dedc <_strtod_l+0x31c>
 800de7c:	9806      	ldr	r0, [sp, #24]
 800de7e:	210a      	movs	r1, #10
 800de80:	fb01 3300 	mla	r3, r1, r0, r3
 800de84:	9306      	str	r3, [sp, #24]
 800de86:	2100      	movs	r1, #0
 800de88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800de8a:	1c58      	adds	r0, r3, #1
 800de8c:	9019      	str	r0, [sp, #100]	; 0x64
 800de8e:	785b      	ldrb	r3, [r3, #1]
 800de90:	4608      	mov	r0, r1
 800de92:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800de96:	2909      	cmp	r1, #9
 800de98:	d9e0      	bls.n	800de5c <_strtod_l+0x29c>
 800de9a:	2101      	movs	r1, #1
 800de9c:	e74a      	b.n	800dd34 <_strtod_l+0x174>
 800de9e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dea0:	1c5a      	adds	r2, r3, #1
 800dea2:	9219      	str	r2, [sp, #100]	; 0x64
 800dea4:	3001      	adds	r0, #1
 800dea6:	785b      	ldrb	r3, [r3, #1]
 800dea8:	e7cc      	b.n	800de44 <_strtod_l+0x284>
 800deaa:	3101      	adds	r1, #1
 800deac:	f101 3eff 	add.w	lr, r1, #4294967295
 800deb0:	f1be 0f08 	cmp.w	lr, #8
 800deb4:	dc03      	bgt.n	800debe <_strtod_l+0x2fe>
 800deb6:	9f06      	ldr	r7, [sp, #24]
 800deb8:	4377      	muls	r7, r6
 800deba:	9706      	str	r7, [sp, #24]
 800debc:	e7d7      	b.n	800de6e <_strtod_l+0x2ae>
 800debe:	2910      	cmp	r1, #16
 800dec0:	bfde      	ittt	le
 800dec2:	9f05      	ldrle	r7, [sp, #20]
 800dec4:	4377      	mulle	r7, r6
 800dec6:	9705      	strle	r7, [sp, #20]
 800dec8:	e7d1      	b.n	800de6e <_strtod_l+0x2ae>
 800deca:	bf00      	nop
 800decc:	080154f4 	.word	0x080154f4
 800ded0:	0801554d 	.word	0x0801554d
 800ded4:	080155fb 	.word	0x080155fb
 800ded8:	7ff00000 	.word	0x7ff00000
 800dedc:	2d10      	cmp	r5, #16
 800dede:	bfdf      	itttt	le
 800dee0:	9805      	ldrle	r0, [sp, #20]
 800dee2:	210a      	movle	r1, #10
 800dee4:	fb01 3300 	mlale	r3, r1, r0, r3
 800dee8:	9305      	strle	r3, [sp, #20]
 800deea:	e7cc      	b.n	800de86 <_strtod_l+0x2c6>
 800deec:	4602      	mov	r2, r0
 800deee:	9d04      	ldr	r5, [sp, #16]
 800def0:	e7cf      	b.n	800de92 <_strtod_l+0x2d2>
 800def2:	2101      	movs	r1, #1
 800def4:	e724      	b.n	800dd40 <_strtod_l+0x180>
 800def6:	2300      	movs	r3, #0
 800def8:	9307      	str	r3, [sp, #28]
 800defa:	1ca3      	adds	r3, r4, #2
 800defc:	9319      	str	r3, [sp, #100]	; 0x64
 800defe:	78a3      	ldrb	r3, [r4, #2]
 800df00:	e72f      	b.n	800dd62 <_strtod_l+0x1a2>
 800df02:	2301      	movs	r3, #1
 800df04:	e7f8      	b.n	800def8 <_strtod_l+0x338>
 800df06:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800df08:	1c5e      	adds	r6, r3, #1
 800df0a:	9619      	str	r6, [sp, #100]	; 0x64
 800df0c:	785b      	ldrb	r3, [r3, #1]
 800df0e:	e72d      	b.n	800dd6c <_strtod_l+0x1ac>
 800df10:	fb0c 3e0e 	mla	lr, ip, lr, r3
 800df14:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800df18:	e736      	b.n	800dd88 <_strtod_l+0x1c8>
 800df1a:	9419      	str	r4, [sp, #100]	; 0x64
 800df1c:	f04f 0900 	mov.w	r9, #0
 800df20:	e748      	b.n	800ddb4 <_strtod_l+0x1f4>
 800df22:	2b69      	cmp	r3, #105	; 0x69
 800df24:	f43f af5b 	beq.w	800ddde <_strtod_l+0x21e>
 800df28:	2b6e      	cmp	r3, #110	; 0x6e
 800df2a:	f47f aea7 	bne.w	800dc7c <_strtod_l+0xbc>
 800df2e:	498c      	ldr	r1, [pc, #560]	; (800e160 <_strtod_l+0x5a0>)
 800df30:	a819      	add	r0, sp, #100	; 0x64
 800df32:	f004 fd61 	bl	80129f8 <__match>
 800df36:	2800      	cmp	r0, #0
 800df38:	f43f aea0 	beq.w	800dc7c <_strtod_l+0xbc>
 800df3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800df3e:	781b      	ldrb	r3, [r3, #0]
 800df40:	2b28      	cmp	r3, #40	; 0x28
 800df42:	d10e      	bne.n	800df62 <_strtod_l+0x3a2>
 800df44:	aa1c      	add	r2, sp, #112	; 0x70
 800df46:	4987      	ldr	r1, [pc, #540]	; (800e164 <_strtod_l+0x5a4>)
 800df48:	a819      	add	r0, sp, #100	; 0x64
 800df4a:	f004 fd68 	bl	8012a1e <__hexnan>
 800df4e:	2805      	cmp	r0, #5
 800df50:	d107      	bne.n	800df62 <_strtod_l+0x3a2>
 800df52:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800df54:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 800df58:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800df5c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800df60:	e66e      	b.n	800dc40 <_strtod_l+0x80>
 800df62:	f8df b210 	ldr.w	fp, [pc, #528]	; 800e174 <_strtod_l+0x5b4>
 800df66:	e74e      	b.n	800de06 <_strtod_l+0x246>
 800df68:	9b04      	ldr	r3, [sp, #16]
 800df6a:	9806      	ldr	r0, [sp, #24]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	bf08      	it	eq
 800df70:	462b      	moveq	r3, r5
 800df72:	2d10      	cmp	r5, #16
 800df74:	462c      	mov	r4, r5
 800df76:	eba9 0902 	sub.w	r9, r9, r2
 800df7a:	bfa8      	it	ge
 800df7c:	2410      	movge	r4, #16
 800df7e:	9304      	str	r3, [sp, #16]
 800df80:	f7f2 fad0 	bl	8000524 <__aeabi_ui2d>
 800df84:	2c09      	cmp	r4, #9
 800df86:	4682      	mov	sl, r0
 800df88:	468b      	mov	fp, r1
 800df8a:	dd13      	ble.n	800dfb4 <_strtod_l+0x3f4>
 800df8c:	4b76      	ldr	r3, [pc, #472]	; (800e168 <_strtod_l+0x5a8>)
 800df8e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800df92:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800df96:	f7f2 fb3b 	bl	8000610 <__aeabi_dmul>
 800df9a:	4606      	mov	r6, r0
 800df9c:	9805      	ldr	r0, [sp, #20]
 800df9e:	460f      	mov	r7, r1
 800dfa0:	f7f2 fac0 	bl	8000524 <__aeabi_ui2d>
 800dfa4:	4602      	mov	r2, r0
 800dfa6:	460b      	mov	r3, r1
 800dfa8:	4630      	mov	r0, r6
 800dfaa:	4639      	mov	r1, r7
 800dfac:	f7f2 f97e 	bl	80002ac <__adddf3>
 800dfb0:	4682      	mov	sl, r0
 800dfb2:	468b      	mov	fp, r1
 800dfb4:	2d0f      	cmp	r5, #15
 800dfb6:	dc36      	bgt.n	800e026 <_strtod_l+0x466>
 800dfb8:	f1b9 0f00 	cmp.w	r9, #0
 800dfbc:	f43f ae40 	beq.w	800dc40 <_strtod_l+0x80>
 800dfc0:	dd24      	ble.n	800e00c <_strtod_l+0x44c>
 800dfc2:	f1b9 0f16 	cmp.w	r9, #22
 800dfc6:	dc0b      	bgt.n	800dfe0 <_strtod_l+0x420>
 800dfc8:	4d67      	ldr	r5, [pc, #412]	; (800e168 <_strtod_l+0x5a8>)
 800dfca:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 800dfce:	e9d9 0100 	ldrd	r0, r1, [r9]
 800dfd2:	4652      	mov	r2, sl
 800dfd4:	465b      	mov	r3, fp
 800dfd6:	f7f2 fb1b 	bl	8000610 <__aeabi_dmul>
 800dfda:	4682      	mov	sl, r0
 800dfdc:	468b      	mov	fp, r1
 800dfde:	e62f      	b.n	800dc40 <_strtod_l+0x80>
 800dfe0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800dfe4:	4599      	cmp	r9, r3
 800dfe6:	dc1e      	bgt.n	800e026 <_strtod_l+0x466>
 800dfe8:	4c5f      	ldr	r4, [pc, #380]	; (800e168 <_strtod_l+0x5a8>)
 800dfea:	f1c5 050f 	rsb	r5, r5, #15
 800dfee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800dff2:	eba9 0505 	sub.w	r5, r9, r5
 800dff6:	4652      	mov	r2, sl
 800dff8:	465b      	mov	r3, fp
 800dffa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dffe:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e002:	f7f2 fb05 	bl	8000610 <__aeabi_dmul>
 800e006:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e00a:	e7e4      	b.n	800dfd6 <_strtod_l+0x416>
 800e00c:	f119 0f16 	cmn.w	r9, #22
 800e010:	db09      	blt.n	800e026 <_strtod_l+0x466>
 800e012:	4d55      	ldr	r5, [pc, #340]	; (800e168 <_strtod_l+0x5a8>)
 800e014:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
 800e018:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e01c:	4650      	mov	r0, sl
 800e01e:	4659      	mov	r1, fp
 800e020:	f7f2 fc20 	bl	8000864 <__aeabi_ddiv>
 800e024:	e7d9      	b.n	800dfda <_strtod_l+0x41a>
 800e026:	1b2c      	subs	r4, r5, r4
 800e028:	444c      	add	r4, r9
 800e02a:	2c00      	cmp	r4, #0
 800e02c:	dd73      	ble.n	800e116 <_strtod_l+0x556>
 800e02e:	f014 030f 	ands.w	r3, r4, #15
 800e032:	d00a      	beq.n	800e04a <_strtod_l+0x48a>
 800e034:	494c      	ldr	r1, [pc, #304]	; (800e168 <_strtod_l+0x5a8>)
 800e036:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e03a:	4652      	mov	r2, sl
 800e03c:	465b      	mov	r3, fp
 800e03e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e042:	f7f2 fae5 	bl	8000610 <__aeabi_dmul>
 800e046:	4682      	mov	sl, r0
 800e048:	468b      	mov	fp, r1
 800e04a:	f034 040f 	bics.w	r4, r4, #15
 800e04e:	d054      	beq.n	800e0fa <_strtod_l+0x53a>
 800e050:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 800e054:	dd27      	ble.n	800e0a6 <_strtod_l+0x4e6>
 800e056:	f04f 0900 	mov.w	r9, #0
 800e05a:	f8cd 9010 	str.w	r9, [sp, #16]
 800e05e:	f8cd 901c 	str.w	r9, [sp, #28]
 800e062:	f8cd 9018 	str.w	r9, [sp, #24]
 800e066:	2322      	movs	r3, #34	; 0x22
 800e068:	f8df b10c 	ldr.w	fp, [pc, #268]	; 800e178 <_strtod_l+0x5b8>
 800e06c:	f8c8 3000 	str.w	r3, [r8]
 800e070:	f04f 0a00 	mov.w	sl, #0
 800e074:	9b07      	ldr	r3, [sp, #28]
 800e076:	2b00      	cmp	r3, #0
 800e078:	f43f ade2 	beq.w	800dc40 <_strtod_l+0x80>
 800e07c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e07e:	4640      	mov	r0, r8
 800e080:	f004 ff58 	bl	8012f34 <_Bfree>
 800e084:	9906      	ldr	r1, [sp, #24]
 800e086:	4640      	mov	r0, r8
 800e088:	f004 ff54 	bl	8012f34 <_Bfree>
 800e08c:	9904      	ldr	r1, [sp, #16]
 800e08e:	4640      	mov	r0, r8
 800e090:	f004 ff50 	bl	8012f34 <_Bfree>
 800e094:	9907      	ldr	r1, [sp, #28]
 800e096:	4640      	mov	r0, r8
 800e098:	f004 ff4c 	bl	8012f34 <_Bfree>
 800e09c:	4649      	mov	r1, r9
 800e09e:	4640      	mov	r0, r8
 800e0a0:	f004 ff48 	bl	8012f34 <_Bfree>
 800e0a4:	e5cc      	b.n	800dc40 <_strtod_l+0x80>
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	4e30      	ldr	r6, [pc, #192]	; (800e16c <_strtod_l+0x5ac>)
 800e0aa:	1124      	asrs	r4, r4, #4
 800e0ac:	4650      	mov	r0, sl
 800e0ae:	4659      	mov	r1, fp
 800e0b0:	461f      	mov	r7, r3
 800e0b2:	2c01      	cmp	r4, #1
 800e0b4:	dc24      	bgt.n	800e100 <_strtod_l+0x540>
 800e0b6:	b10b      	cbz	r3, 800e0bc <_strtod_l+0x4fc>
 800e0b8:	4682      	mov	sl, r0
 800e0ba:	468b      	mov	fp, r1
 800e0bc:	4b2b      	ldr	r3, [pc, #172]	; (800e16c <_strtod_l+0x5ac>)
 800e0be:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e0c2:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e0c6:	4652      	mov	r2, sl
 800e0c8:	465b      	mov	r3, fp
 800e0ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e0ce:	f7f2 fa9f 	bl	8000610 <__aeabi_dmul>
 800e0d2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e0d6:	468b      	mov	fp, r1
 800e0d8:	460a      	mov	r2, r1
 800e0da:	0d1b      	lsrs	r3, r3, #20
 800e0dc:	4924      	ldr	r1, [pc, #144]	; (800e170 <_strtod_l+0x5b0>)
 800e0de:	051b      	lsls	r3, r3, #20
 800e0e0:	428b      	cmp	r3, r1
 800e0e2:	4682      	mov	sl, r0
 800e0e4:	d8b7      	bhi.n	800e056 <_strtod_l+0x496>
 800e0e6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e0ea:	428b      	cmp	r3, r1
 800e0ec:	bf86      	itte	hi
 800e0ee:	f8df b08c 	ldrhi.w	fp, [pc, #140]	; 800e17c <_strtod_l+0x5bc>
 800e0f2:	f04f 3aff 	movhi.w	sl, #4294967295
 800e0f6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	9305      	str	r3, [sp, #20]
 800e0fe:	e070      	b.n	800e1e2 <_strtod_l+0x622>
 800e100:	07e2      	lsls	r2, r4, #31
 800e102:	d504      	bpl.n	800e10e <_strtod_l+0x54e>
 800e104:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e108:	f7f2 fa82 	bl	8000610 <__aeabi_dmul>
 800e10c:	2301      	movs	r3, #1
 800e10e:	3701      	adds	r7, #1
 800e110:	1064      	asrs	r4, r4, #1
 800e112:	3608      	adds	r6, #8
 800e114:	e7cd      	b.n	800e0b2 <_strtod_l+0x4f2>
 800e116:	d0f0      	beq.n	800e0fa <_strtod_l+0x53a>
 800e118:	4264      	negs	r4, r4
 800e11a:	f014 020f 	ands.w	r2, r4, #15
 800e11e:	d00a      	beq.n	800e136 <_strtod_l+0x576>
 800e120:	4b11      	ldr	r3, [pc, #68]	; (800e168 <_strtod_l+0x5a8>)
 800e122:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e126:	4650      	mov	r0, sl
 800e128:	4659      	mov	r1, fp
 800e12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e12e:	f7f2 fb99 	bl	8000864 <__aeabi_ddiv>
 800e132:	4682      	mov	sl, r0
 800e134:	468b      	mov	fp, r1
 800e136:	1124      	asrs	r4, r4, #4
 800e138:	d0df      	beq.n	800e0fa <_strtod_l+0x53a>
 800e13a:	2c1f      	cmp	r4, #31
 800e13c:	dd20      	ble.n	800e180 <_strtod_l+0x5c0>
 800e13e:	f04f 0900 	mov.w	r9, #0
 800e142:	f8cd 9010 	str.w	r9, [sp, #16]
 800e146:	f8cd 901c 	str.w	r9, [sp, #28]
 800e14a:	f8cd 9018 	str.w	r9, [sp, #24]
 800e14e:	2322      	movs	r3, #34	; 0x22
 800e150:	f04f 0a00 	mov.w	sl, #0
 800e154:	f04f 0b00 	mov.w	fp, #0
 800e158:	f8c8 3000 	str.w	r3, [r8]
 800e15c:	e78a      	b.n	800e074 <_strtod_l+0x4b4>
 800e15e:	bf00      	nop
 800e160:	08015555 	.word	0x08015555
 800e164:	08015508 	.word	0x08015508
 800e168:	080156a0 	.word	0x080156a0
 800e16c:	08015678 	.word	0x08015678
 800e170:	7ca00000 	.word	0x7ca00000
 800e174:	fff80000 	.word	0xfff80000
 800e178:	7ff00000 	.word	0x7ff00000
 800e17c:	7fefffff 	.word	0x7fefffff
 800e180:	f014 0310 	ands.w	r3, r4, #16
 800e184:	bf18      	it	ne
 800e186:	236a      	movne	r3, #106	; 0x6a
 800e188:	4e9f      	ldr	r6, [pc, #636]	; (800e408 <_strtod_l+0x848>)
 800e18a:	9305      	str	r3, [sp, #20]
 800e18c:	4650      	mov	r0, sl
 800e18e:	4659      	mov	r1, fp
 800e190:	2300      	movs	r3, #0
 800e192:	2c00      	cmp	r4, #0
 800e194:	f300 8106 	bgt.w	800e3a4 <_strtod_l+0x7e4>
 800e198:	b10b      	cbz	r3, 800e19e <_strtod_l+0x5de>
 800e19a:	4682      	mov	sl, r0
 800e19c:	468b      	mov	fp, r1
 800e19e:	9b05      	ldr	r3, [sp, #20]
 800e1a0:	b1bb      	cbz	r3, 800e1d2 <_strtod_l+0x612>
 800e1a2:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800e1a6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	4659      	mov	r1, fp
 800e1ae:	dd10      	ble.n	800e1d2 <_strtod_l+0x612>
 800e1b0:	2b1f      	cmp	r3, #31
 800e1b2:	f340 8101 	ble.w	800e3b8 <_strtod_l+0x7f8>
 800e1b6:	2b34      	cmp	r3, #52	; 0x34
 800e1b8:	bfde      	ittt	le
 800e1ba:	3b20      	suble	r3, #32
 800e1bc:	f04f 32ff 	movle.w	r2, #4294967295
 800e1c0:	fa02 f303 	lslle.w	r3, r2, r3
 800e1c4:	f04f 0a00 	mov.w	sl, #0
 800e1c8:	bfcc      	ite	gt
 800e1ca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800e1ce:	ea03 0b01 	andle.w	fp, r3, r1
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	4650      	mov	r0, sl
 800e1d8:	4659      	mov	r1, fp
 800e1da:	f7f2 fc81 	bl	8000ae0 <__aeabi_dcmpeq>
 800e1de:	2800      	cmp	r0, #0
 800e1e0:	d1ad      	bne.n	800e13e <_strtod_l+0x57e>
 800e1e2:	9b06      	ldr	r3, [sp, #24]
 800e1e4:	9300      	str	r3, [sp, #0]
 800e1e6:	9a04      	ldr	r2, [sp, #16]
 800e1e8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e1ea:	462b      	mov	r3, r5
 800e1ec:	4640      	mov	r0, r8
 800e1ee:	f004 fef3 	bl	8012fd8 <__s2b>
 800e1f2:	9007      	str	r0, [sp, #28]
 800e1f4:	2800      	cmp	r0, #0
 800e1f6:	f43f af2e 	beq.w	800e056 <_strtod_l+0x496>
 800e1fa:	f1b9 0f00 	cmp.w	r9, #0
 800e1fe:	f1c9 0300 	rsb	r3, r9, #0
 800e202:	bfa8      	it	ge
 800e204:	2300      	movge	r3, #0
 800e206:	930e      	str	r3, [sp, #56]	; 0x38
 800e208:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
 800e20c:	f04f 0900 	mov.w	r9, #0
 800e210:	930f      	str	r3, [sp, #60]	; 0x3c
 800e212:	f8cd 9010 	str.w	r9, [sp, #16]
 800e216:	9b07      	ldr	r3, [sp, #28]
 800e218:	4640      	mov	r0, r8
 800e21a:	6859      	ldr	r1, [r3, #4]
 800e21c:	f004 fe56 	bl	8012ecc <_Balloc>
 800e220:	9006      	str	r0, [sp, #24]
 800e222:	2800      	cmp	r0, #0
 800e224:	f43f af1f 	beq.w	800e066 <_strtod_l+0x4a6>
 800e228:	9b07      	ldr	r3, [sp, #28]
 800e22a:	691a      	ldr	r2, [r3, #16]
 800e22c:	3202      	adds	r2, #2
 800e22e:	f103 010c 	add.w	r1, r3, #12
 800e232:	0092      	lsls	r2, r2, #2
 800e234:	300c      	adds	r0, #12
 800e236:	f7ff f88d 	bl	800d354 <memcpy>
 800e23a:	ab1c      	add	r3, sp, #112	; 0x70
 800e23c:	9301      	str	r3, [sp, #4]
 800e23e:	ab1b      	add	r3, sp, #108	; 0x6c
 800e240:	9300      	str	r3, [sp, #0]
 800e242:	4652      	mov	r2, sl
 800e244:	465b      	mov	r3, fp
 800e246:	4640      	mov	r0, r8
 800e248:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800e24c:	f005 f974 	bl	8013538 <__d2b>
 800e250:	901a      	str	r0, [sp, #104]	; 0x68
 800e252:	2800      	cmp	r0, #0
 800e254:	f43f af07 	beq.w	800e066 <_strtod_l+0x4a6>
 800e258:	2101      	movs	r1, #1
 800e25a:	4640      	mov	r0, r8
 800e25c:	f004 ff48 	bl	80130f0 <__i2b>
 800e260:	9004      	str	r0, [sp, #16]
 800e262:	4603      	mov	r3, r0
 800e264:	2800      	cmp	r0, #0
 800e266:	f43f aefe 	beq.w	800e066 <_strtod_l+0x4a6>
 800e26a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800e26c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e26e:	2d00      	cmp	r5, #0
 800e270:	bfab      	itete	ge
 800e272:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800e274:	9b0f      	ldrlt	r3, [sp, #60]	; 0x3c
 800e276:	9c0f      	ldrge	r4, [sp, #60]	; 0x3c
 800e278:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800e27a:	bfac      	ite	ge
 800e27c:	195e      	addge	r6, r3, r5
 800e27e:	1b5c      	sublt	r4, r3, r5
 800e280:	9b05      	ldr	r3, [sp, #20]
 800e282:	1aed      	subs	r5, r5, r3
 800e284:	4415      	add	r5, r2
 800e286:	4b61      	ldr	r3, [pc, #388]	; (800e40c <_strtod_l+0x84c>)
 800e288:	3d01      	subs	r5, #1
 800e28a:	429d      	cmp	r5, r3
 800e28c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e290:	f280 80a4 	bge.w	800e3dc <_strtod_l+0x81c>
 800e294:	1b5b      	subs	r3, r3, r5
 800e296:	2b1f      	cmp	r3, #31
 800e298:	eba2 0203 	sub.w	r2, r2, r3
 800e29c:	f04f 0701 	mov.w	r7, #1
 800e2a0:	f300 8091 	bgt.w	800e3c6 <_strtod_l+0x806>
 800e2a4:	fa07 f303 	lsl.w	r3, r7, r3
 800e2a8:	9314      	str	r3, [sp, #80]	; 0x50
 800e2aa:	2500      	movs	r5, #0
 800e2ac:	18b7      	adds	r7, r6, r2
 800e2ae:	9b05      	ldr	r3, [sp, #20]
 800e2b0:	42be      	cmp	r6, r7
 800e2b2:	4414      	add	r4, r2
 800e2b4:	441c      	add	r4, r3
 800e2b6:	4633      	mov	r3, r6
 800e2b8:	bfa8      	it	ge
 800e2ba:	463b      	movge	r3, r7
 800e2bc:	42a3      	cmp	r3, r4
 800e2be:	bfa8      	it	ge
 800e2c0:	4623      	movge	r3, r4
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	bfc2      	ittt	gt
 800e2c6:	1aff      	subgt	r7, r7, r3
 800e2c8:	1ae4      	subgt	r4, r4, r3
 800e2ca:	1af6      	subgt	r6, r6, r3
 800e2cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e2ce:	b1bb      	cbz	r3, 800e300 <_strtod_l+0x740>
 800e2d0:	461a      	mov	r2, r3
 800e2d2:	9904      	ldr	r1, [sp, #16]
 800e2d4:	4640      	mov	r0, r8
 800e2d6:	f004 ffa1 	bl	801321c <__pow5mult>
 800e2da:	9004      	str	r0, [sp, #16]
 800e2dc:	2800      	cmp	r0, #0
 800e2de:	f43f aec2 	beq.w	800e066 <_strtod_l+0x4a6>
 800e2e2:	4601      	mov	r1, r0
 800e2e4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e2e6:	4640      	mov	r0, r8
 800e2e8:	f004 ff0b 	bl	8013102 <__multiply>
 800e2ec:	9008      	str	r0, [sp, #32]
 800e2ee:	2800      	cmp	r0, #0
 800e2f0:	f43f aeb9 	beq.w	800e066 <_strtod_l+0x4a6>
 800e2f4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e2f6:	4640      	mov	r0, r8
 800e2f8:	f004 fe1c 	bl	8012f34 <_Bfree>
 800e2fc:	9b08      	ldr	r3, [sp, #32]
 800e2fe:	931a      	str	r3, [sp, #104]	; 0x68
 800e300:	2f00      	cmp	r7, #0
 800e302:	dc6f      	bgt.n	800e3e4 <_strtod_l+0x824>
 800e304:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e306:	2b00      	cmp	r3, #0
 800e308:	d175      	bne.n	800e3f6 <_strtod_l+0x836>
 800e30a:	2c00      	cmp	r4, #0
 800e30c:	dd08      	ble.n	800e320 <_strtod_l+0x760>
 800e30e:	4622      	mov	r2, r4
 800e310:	9906      	ldr	r1, [sp, #24]
 800e312:	4640      	mov	r0, r8
 800e314:	f004 ffd0 	bl	80132b8 <__lshift>
 800e318:	9006      	str	r0, [sp, #24]
 800e31a:	2800      	cmp	r0, #0
 800e31c:	f43f aea3 	beq.w	800e066 <_strtod_l+0x4a6>
 800e320:	2e00      	cmp	r6, #0
 800e322:	dd08      	ble.n	800e336 <_strtod_l+0x776>
 800e324:	4632      	mov	r2, r6
 800e326:	9904      	ldr	r1, [sp, #16]
 800e328:	4640      	mov	r0, r8
 800e32a:	f004 ffc5 	bl	80132b8 <__lshift>
 800e32e:	9004      	str	r0, [sp, #16]
 800e330:	2800      	cmp	r0, #0
 800e332:	f43f ae98 	beq.w	800e066 <_strtod_l+0x4a6>
 800e336:	9a06      	ldr	r2, [sp, #24]
 800e338:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e33a:	4640      	mov	r0, r8
 800e33c:	f005 f827 	bl	801338e <__mdiff>
 800e340:	4681      	mov	r9, r0
 800e342:	2800      	cmp	r0, #0
 800e344:	f43f ae8f 	beq.w	800e066 <_strtod_l+0x4a6>
 800e348:	2400      	movs	r4, #0
 800e34a:	68c3      	ldr	r3, [r0, #12]
 800e34c:	9904      	ldr	r1, [sp, #16]
 800e34e:	60c4      	str	r4, [r0, #12]
 800e350:	9308      	str	r3, [sp, #32]
 800e352:	f005 f802 	bl	801335a <__mcmp>
 800e356:	42a0      	cmp	r0, r4
 800e358:	da5a      	bge.n	800e410 <_strtod_l+0x850>
 800e35a:	9b08      	ldr	r3, [sp, #32]
 800e35c:	b9f3      	cbnz	r3, 800e39c <_strtod_l+0x7dc>
 800e35e:	f1ba 0f00 	cmp.w	sl, #0
 800e362:	d11b      	bne.n	800e39c <_strtod_l+0x7dc>
 800e364:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e368:	b9c3      	cbnz	r3, 800e39c <_strtod_l+0x7dc>
 800e36a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e36e:	0d1b      	lsrs	r3, r3, #20
 800e370:	051b      	lsls	r3, r3, #20
 800e372:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e376:	d911      	bls.n	800e39c <_strtod_l+0x7dc>
 800e378:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e37c:	b91b      	cbnz	r3, 800e386 <_strtod_l+0x7c6>
 800e37e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e382:	2b01      	cmp	r3, #1
 800e384:	dd0a      	ble.n	800e39c <_strtod_l+0x7dc>
 800e386:	4649      	mov	r1, r9
 800e388:	2201      	movs	r2, #1
 800e38a:	4640      	mov	r0, r8
 800e38c:	f004 ff94 	bl	80132b8 <__lshift>
 800e390:	9904      	ldr	r1, [sp, #16]
 800e392:	4681      	mov	r9, r0
 800e394:	f004 ffe1 	bl	801335a <__mcmp>
 800e398:	2800      	cmp	r0, #0
 800e39a:	dc6a      	bgt.n	800e472 <_strtod_l+0x8b2>
 800e39c:	9b05      	ldr	r3, [sp, #20]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d174      	bne.n	800e48c <_strtod_l+0x8cc>
 800e3a2:	e66b      	b.n	800e07c <_strtod_l+0x4bc>
 800e3a4:	07e2      	lsls	r2, r4, #31
 800e3a6:	d504      	bpl.n	800e3b2 <_strtod_l+0x7f2>
 800e3a8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e3ac:	f7f2 f930 	bl	8000610 <__aeabi_dmul>
 800e3b0:	2301      	movs	r3, #1
 800e3b2:	1064      	asrs	r4, r4, #1
 800e3b4:	3608      	adds	r6, #8
 800e3b6:	e6ec      	b.n	800e192 <_strtod_l+0x5d2>
 800e3b8:	f04f 32ff 	mov.w	r2, #4294967295
 800e3bc:	fa02 f303 	lsl.w	r3, r2, r3
 800e3c0:	ea03 0a0a 	and.w	sl, r3, sl
 800e3c4:	e705      	b.n	800e1d2 <_strtod_l+0x612>
 800e3c6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800e3ca:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800e3ce:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800e3d2:	35e2      	adds	r5, #226	; 0xe2
 800e3d4:	fa07 f505 	lsl.w	r5, r7, r5
 800e3d8:	9714      	str	r7, [sp, #80]	; 0x50
 800e3da:	e767      	b.n	800e2ac <_strtod_l+0x6ec>
 800e3dc:	2301      	movs	r3, #1
 800e3de:	2500      	movs	r5, #0
 800e3e0:	9314      	str	r3, [sp, #80]	; 0x50
 800e3e2:	e763      	b.n	800e2ac <_strtod_l+0x6ec>
 800e3e4:	463a      	mov	r2, r7
 800e3e6:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e3e8:	4640      	mov	r0, r8
 800e3ea:	f004 ff65 	bl	80132b8 <__lshift>
 800e3ee:	901a      	str	r0, [sp, #104]	; 0x68
 800e3f0:	2800      	cmp	r0, #0
 800e3f2:	d187      	bne.n	800e304 <_strtod_l+0x744>
 800e3f4:	e637      	b.n	800e066 <_strtod_l+0x4a6>
 800e3f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e3f8:	9906      	ldr	r1, [sp, #24]
 800e3fa:	4640      	mov	r0, r8
 800e3fc:	f004 ff0e 	bl	801321c <__pow5mult>
 800e400:	9006      	str	r0, [sp, #24]
 800e402:	2800      	cmp	r0, #0
 800e404:	d181      	bne.n	800e30a <_strtod_l+0x74a>
 800e406:	e62e      	b.n	800e066 <_strtod_l+0x4a6>
 800e408:	08015520 	.word	0x08015520
 800e40c:	fffffc02 	.word	0xfffffc02
 800e410:	f040 8086 	bne.w	800e520 <_strtod_l+0x960>
 800e414:	9a08      	ldr	r2, [sp, #32]
 800e416:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e41a:	b332      	cbz	r2, 800e46a <_strtod_l+0x8aa>
 800e41c:	4aac      	ldr	r2, [pc, #688]	; (800e6d0 <_strtod_l+0xb10>)
 800e41e:	4293      	cmp	r3, r2
 800e420:	4659      	mov	r1, fp
 800e422:	d152      	bne.n	800e4ca <_strtod_l+0x90a>
 800e424:	9b05      	ldr	r3, [sp, #20]
 800e426:	4650      	mov	r0, sl
 800e428:	b1d3      	cbz	r3, 800e460 <_strtod_l+0x8a0>
 800e42a:	4aaa      	ldr	r2, [pc, #680]	; (800e6d4 <_strtod_l+0xb14>)
 800e42c:	400a      	ands	r2, r1
 800e42e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800e432:	f04f 34ff 	mov.w	r4, #4294967295
 800e436:	d816      	bhi.n	800e466 <_strtod_l+0x8a6>
 800e438:	0d12      	lsrs	r2, r2, #20
 800e43a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e43e:	fa04 f303 	lsl.w	r3, r4, r3
 800e442:	4283      	cmp	r3, r0
 800e444:	d141      	bne.n	800e4ca <_strtod_l+0x90a>
 800e446:	4aa4      	ldr	r2, [pc, #656]	; (800e6d8 <_strtod_l+0xb18>)
 800e448:	4291      	cmp	r1, r2
 800e44a:	d102      	bne.n	800e452 <_strtod_l+0x892>
 800e44c:	3301      	adds	r3, #1
 800e44e:	f43f ae0a 	beq.w	800e066 <_strtod_l+0x4a6>
 800e452:	4ba0      	ldr	r3, [pc, #640]	; (800e6d4 <_strtod_l+0xb14>)
 800e454:	400b      	ands	r3, r1
 800e456:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800e45a:	f04f 0a00 	mov.w	sl, #0
 800e45e:	e79d      	b.n	800e39c <_strtod_l+0x7dc>
 800e460:	f04f 33ff 	mov.w	r3, #4294967295
 800e464:	e7ed      	b.n	800e442 <_strtod_l+0x882>
 800e466:	4623      	mov	r3, r4
 800e468:	e7eb      	b.n	800e442 <_strtod_l+0x882>
 800e46a:	bb73      	cbnz	r3, 800e4ca <_strtod_l+0x90a>
 800e46c:	f1ba 0f00 	cmp.w	sl, #0
 800e470:	d12b      	bne.n	800e4ca <_strtod_l+0x90a>
 800e472:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e476:	9a05      	ldr	r2, [sp, #20]
 800e478:	0d1b      	lsrs	r3, r3, #20
 800e47a:	051b      	lsls	r3, r3, #20
 800e47c:	b1e2      	cbz	r2, 800e4b8 <_strtod_l+0x8f8>
 800e47e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e482:	dc19      	bgt.n	800e4b8 <_strtod_l+0x8f8>
 800e484:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 800e488:	f77f ae61 	ble.w	800e14e <_strtod_l+0x58e>
 800e48c:	4b93      	ldr	r3, [pc, #588]	; (800e6dc <_strtod_l+0xb1c>)
 800e48e:	930d      	str	r3, [sp, #52]	; 0x34
 800e490:	2300      	movs	r3, #0
 800e492:	930c      	str	r3, [sp, #48]	; 0x30
 800e494:	4650      	mov	r0, sl
 800e496:	4659      	mov	r1, fp
 800e498:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e49c:	f7f2 f8b8 	bl	8000610 <__aeabi_dmul>
 800e4a0:	4682      	mov	sl, r0
 800e4a2:	468b      	mov	fp, r1
 800e4a4:	2900      	cmp	r1, #0
 800e4a6:	f47f ade9 	bne.w	800e07c <_strtod_l+0x4bc>
 800e4aa:	2800      	cmp	r0, #0
 800e4ac:	f47f ade6 	bne.w	800e07c <_strtod_l+0x4bc>
 800e4b0:	2322      	movs	r3, #34	; 0x22
 800e4b2:	f8c8 3000 	str.w	r3, [r8]
 800e4b6:	e5e1      	b.n	800e07c <_strtod_l+0x4bc>
 800e4b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e4bc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e4c0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e4c4:	f04f 3aff 	mov.w	sl, #4294967295
 800e4c8:	e768      	b.n	800e39c <_strtod_l+0x7dc>
 800e4ca:	b19d      	cbz	r5, 800e4f4 <_strtod_l+0x934>
 800e4cc:	ea15 0f0b 	tst.w	r5, fp
 800e4d0:	f43f af64 	beq.w	800e39c <_strtod_l+0x7dc>
 800e4d4:	9b08      	ldr	r3, [sp, #32]
 800e4d6:	9a05      	ldr	r2, [sp, #20]
 800e4d8:	4650      	mov	r0, sl
 800e4da:	4659      	mov	r1, fp
 800e4dc:	b173      	cbz	r3, 800e4fc <_strtod_l+0x93c>
 800e4de:	f7ff fb4b 	bl	800db78 <sulp>
 800e4e2:	4602      	mov	r2, r0
 800e4e4:	460b      	mov	r3, r1
 800e4e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e4ea:	f7f1 fedf 	bl	80002ac <__adddf3>
 800e4ee:	4682      	mov	sl, r0
 800e4f0:	468b      	mov	fp, r1
 800e4f2:	e753      	b.n	800e39c <_strtod_l+0x7dc>
 800e4f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e4f6:	ea13 0f0a 	tst.w	r3, sl
 800e4fa:	e7e9      	b.n	800e4d0 <_strtod_l+0x910>
 800e4fc:	f7ff fb3c 	bl	800db78 <sulp>
 800e500:	4602      	mov	r2, r0
 800e502:	460b      	mov	r3, r1
 800e504:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e508:	f7f1 fece 	bl	80002a8 <__aeabi_dsub>
 800e50c:	2200      	movs	r2, #0
 800e50e:	2300      	movs	r3, #0
 800e510:	4682      	mov	sl, r0
 800e512:	468b      	mov	fp, r1
 800e514:	f7f2 fae4 	bl	8000ae0 <__aeabi_dcmpeq>
 800e518:	2800      	cmp	r0, #0
 800e51a:	f47f ae18 	bne.w	800e14e <_strtod_l+0x58e>
 800e51e:	e73d      	b.n	800e39c <_strtod_l+0x7dc>
 800e520:	9904      	ldr	r1, [sp, #16]
 800e522:	4648      	mov	r0, r9
 800e524:	f005 f857 	bl	80135d6 <__ratio>
 800e528:	2200      	movs	r2, #0
 800e52a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e52e:	4606      	mov	r6, r0
 800e530:	460f      	mov	r7, r1
 800e532:	f7f2 fae9 	bl	8000b08 <__aeabi_dcmple>
 800e536:	2800      	cmp	r0, #0
 800e538:	d070      	beq.n	800e61c <_strtod_l+0xa5c>
 800e53a:	9b08      	ldr	r3, [sp, #32]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d043      	beq.n	800e5c8 <_strtod_l+0xa08>
 800e540:	4f67      	ldr	r7, [pc, #412]	; (800e6e0 <_strtod_l+0xb20>)
 800e542:	2600      	movs	r6, #0
 800e544:	4d66      	ldr	r5, [pc, #408]	; (800e6e0 <_strtod_l+0xb20>)
 800e546:	4b63      	ldr	r3, [pc, #396]	; (800e6d4 <_strtod_l+0xb14>)
 800e548:	ea0b 0303 	and.w	r3, fp, r3
 800e54c:	9314      	str	r3, [sp, #80]	; 0x50
 800e54e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e550:	4b64      	ldr	r3, [pc, #400]	; (800e6e4 <_strtod_l+0xb24>)
 800e552:	429a      	cmp	r2, r3
 800e554:	f040 80ce 	bne.w	800e6f4 <_strtod_l+0xb34>
 800e558:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e55c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e560:	4650      	mov	r0, sl
 800e562:	4659      	mov	r1, fp
 800e564:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e568:	f004 ff70 	bl	801344c <__ulp>
 800e56c:	4602      	mov	r2, r0
 800e56e:	460b      	mov	r3, r1
 800e570:	4630      	mov	r0, r6
 800e572:	4639      	mov	r1, r7
 800e574:	f7f2 f84c 	bl	8000610 <__aeabi_dmul>
 800e578:	4652      	mov	r2, sl
 800e57a:	465b      	mov	r3, fp
 800e57c:	f7f1 fe96 	bl	80002ac <__adddf3>
 800e580:	4a54      	ldr	r2, [pc, #336]	; (800e6d4 <_strtod_l+0xb14>)
 800e582:	4b59      	ldr	r3, [pc, #356]	; (800e6e8 <_strtod_l+0xb28>)
 800e584:	400a      	ands	r2, r1
 800e586:	429a      	cmp	r2, r3
 800e588:	4682      	mov	sl, r0
 800e58a:	d95d      	bls.n	800e648 <_strtod_l+0xa88>
 800e58c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e58e:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
 800e592:	429a      	cmp	r2, r3
 800e594:	d103      	bne.n	800e59e <_strtod_l+0x9de>
 800e596:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e598:	3301      	adds	r3, #1
 800e59a:	f43f ad64 	beq.w	800e066 <_strtod_l+0x4a6>
 800e59e:	f8df b138 	ldr.w	fp, [pc, #312]	; 800e6d8 <_strtod_l+0xb18>
 800e5a2:	f04f 3aff 	mov.w	sl, #4294967295
 800e5a6:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e5a8:	4640      	mov	r0, r8
 800e5aa:	f004 fcc3 	bl	8012f34 <_Bfree>
 800e5ae:	9906      	ldr	r1, [sp, #24]
 800e5b0:	4640      	mov	r0, r8
 800e5b2:	f004 fcbf 	bl	8012f34 <_Bfree>
 800e5b6:	9904      	ldr	r1, [sp, #16]
 800e5b8:	4640      	mov	r0, r8
 800e5ba:	f004 fcbb 	bl	8012f34 <_Bfree>
 800e5be:	4649      	mov	r1, r9
 800e5c0:	4640      	mov	r0, r8
 800e5c2:	f004 fcb7 	bl	8012f34 <_Bfree>
 800e5c6:	e626      	b.n	800e216 <_strtod_l+0x656>
 800e5c8:	f1ba 0f00 	cmp.w	sl, #0
 800e5cc:	d118      	bne.n	800e600 <_strtod_l+0xa40>
 800e5ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e5d2:	b9e3      	cbnz	r3, 800e60e <_strtod_l+0xa4e>
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	4b42      	ldr	r3, [pc, #264]	; (800e6e0 <_strtod_l+0xb20>)
 800e5d8:	4630      	mov	r0, r6
 800e5da:	4639      	mov	r1, r7
 800e5dc:	f7f2 fa8a 	bl	8000af4 <__aeabi_dcmplt>
 800e5e0:	b9c8      	cbnz	r0, 800e616 <_strtod_l+0xa56>
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	4b41      	ldr	r3, [pc, #260]	; (800e6ec <_strtod_l+0xb2c>)
 800e5e6:	4630      	mov	r0, r6
 800e5e8:	4639      	mov	r1, r7
 800e5ea:	f7f2 f811 	bl	8000610 <__aeabi_dmul>
 800e5ee:	4604      	mov	r4, r0
 800e5f0:	460d      	mov	r5, r1
 800e5f2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800e5f6:	9416      	str	r4, [sp, #88]	; 0x58
 800e5f8:	9317      	str	r3, [sp, #92]	; 0x5c
 800e5fa:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800e5fe:	e7a2      	b.n	800e546 <_strtod_l+0x986>
 800e600:	f1ba 0f01 	cmp.w	sl, #1
 800e604:	d103      	bne.n	800e60e <_strtod_l+0xa4e>
 800e606:	f1bb 0f00 	cmp.w	fp, #0
 800e60a:	f43f ada0 	beq.w	800e14e <_strtod_l+0x58e>
 800e60e:	2600      	movs	r6, #0
 800e610:	4f37      	ldr	r7, [pc, #220]	; (800e6f0 <_strtod_l+0xb30>)
 800e612:	2400      	movs	r4, #0
 800e614:	e796      	b.n	800e544 <_strtod_l+0x984>
 800e616:	9c08      	ldr	r4, [sp, #32]
 800e618:	4d34      	ldr	r5, [pc, #208]	; (800e6ec <_strtod_l+0xb2c>)
 800e61a:	e7ea      	b.n	800e5f2 <_strtod_l+0xa32>
 800e61c:	4b33      	ldr	r3, [pc, #204]	; (800e6ec <_strtod_l+0xb2c>)
 800e61e:	2200      	movs	r2, #0
 800e620:	4630      	mov	r0, r6
 800e622:	4639      	mov	r1, r7
 800e624:	f7f1 fff4 	bl	8000610 <__aeabi_dmul>
 800e628:	9b08      	ldr	r3, [sp, #32]
 800e62a:	4604      	mov	r4, r0
 800e62c:	460d      	mov	r5, r1
 800e62e:	b933      	cbnz	r3, 800e63e <_strtod_l+0xa7e>
 800e630:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e634:	9010      	str	r0, [sp, #64]	; 0x40
 800e636:	9311      	str	r3, [sp, #68]	; 0x44
 800e638:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800e63c:	e783      	b.n	800e546 <_strtod_l+0x986>
 800e63e:	4602      	mov	r2, r0
 800e640:	460b      	mov	r3, r1
 800e642:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800e646:	e7f7      	b.n	800e638 <_strtod_l+0xa78>
 800e648:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
 800e64c:	9b05      	ldr	r3, [sp, #20]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d1a9      	bne.n	800e5a6 <_strtod_l+0x9e6>
 800e652:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e656:	0d1b      	lsrs	r3, r3, #20
 800e658:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e65a:	051b      	lsls	r3, r3, #20
 800e65c:	429a      	cmp	r2, r3
 800e65e:	465e      	mov	r6, fp
 800e660:	d1a1      	bne.n	800e5a6 <_strtod_l+0x9e6>
 800e662:	4629      	mov	r1, r5
 800e664:	4620      	mov	r0, r4
 800e666:	f7f2 fa83 	bl	8000b70 <__aeabi_d2iz>
 800e66a:	f7f1 ff6b 	bl	8000544 <__aeabi_i2d>
 800e66e:	460b      	mov	r3, r1
 800e670:	4602      	mov	r2, r0
 800e672:	4629      	mov	r1, r5
 800e674:	4620      	mov	r0, r4
 800e676:	f7f1 fe17 	bl	80002a8 <__aeabi_dsub>
 800e67a:	9b08      	ldr	r3, [sp, #32]
 800e67c:	4604      	mov	r4, r0
 800e67e:	460d      	mov	r5, r1
 800e680:	b933      	cbnz	r3, 800e690 <_strtod_l+0xad0>
 800e682:	f1ba 0f00 	cmp.w	sl, #0
 800e686:	d103      	bne.n	800e690 <_strtod_l+0xad0>
 800e688:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e68c:	2e00      	cmp	r6, #0
 800e68e:	d06c      	beq.n	800e76a <_strtod_l+0xbaa>
 800e690:	a30b      	add	r3, pc, #44	; (adr r3, 800e6c0 <_strtod_l+0xb00>)
 800e692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e696:	4620      	mov	r0, r4
 800e698:	4629      	mov	r1, r5
 800e69a:	f7f2 fa2b 	bl	8000af4 <__aeabi_dcmplt>
 800e69e:	2800      	cmp	r0, #0
 800e6a0:	f47f acec 	bne.w	800e07c <_strtod_l+0x4bc>
 800e6a4:	a308      	add	r3, pc, #32	; (adr r3, 800e6c8 <_strtod_l+0xb08>)
 800e6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6aa:	4620      	mov	r0, r4
 800e6ac:	4629      	mov	r1, r5
 800e6ae:	f7f2 fa3f 	bl	8000b30 <__aeabi_dcmpgt>
 800e6b2:	2800      	cmp	r0, #0
 800e6b4:	f43f af77 	beq.w	800e5a6 <_strtod_l+0x9e6>
 800e6b8:	e4e0      	b.n	800e07c <_strtod_l+0x4bc>
 800e6ba:	bf00      	nop
 800e6bc:	f3af 8000 	nop.w
 800e6c0:	94a03595 	.word	0x94a03595
 800e6c4:	3fdfffff 	.word	0x3fdfffff
 800e6c8:	35afe535 	.word	0x35afe535
 800e6cc:	3fe00000 	.word	0x3fe00000
 800e6d0:	000fffff 	.word	0x000fffff
 800e6d4:	7ff00000 	.word	0x7ff00000
 800e6d8:	7fefffff 	.word	0x7fefffff
 800e6dc:	39500000 	.word	0x39500000
 800e6e0:	3ff00000 	.word	0x3ff00000
 800e6e4:	7fe00000 	.word	0x7fe00000
 800e6e8:	7c9fffff 	.word	0x7c9fffff
 800e6ec:	3fe00000 	.word	0x3fe00000
 800e6f0:	bff00000 	.word	0xbff00000
 800e6f4:	9b05      	ldr	r3, [sp, #20]
 800e6f6:	b313      	cbz	r3, 800e73e <_strtod_l+0xb7e>
 800e6f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e6fa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e6fe:	d81e      	bhi.n	800e73e <_strtod_l+0xb7e>
 800e700:	a325      	add	r3, pc, #148	; (adr r3, 800e798 <_strtod_l+0xbd8>)
 800e702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e706:	4620      	mov	r0, r4
 800e708:	4629      	mov	r1, r5
 800e70a:	f7f2 f9fd 	bl	8000b08 <__aeabi_dcmple>
 800e70e:	b190      	cbz	r0, 800e736 <_strtod_l+0xb76>
 800e710:	4629      	mov	r1, r5
 800e712:	4620      	mov	r0, r4
 800e714:	f7f2 fa54 	bl	8000bc0 <__aeabi_d2uiz>
 800e718:	2800      	cmp	r0, #0
 800e71a:	bf08      	it	eq
 800e71c:	2001      	moveq	r0, #1
 800e71e:	f7f1 ff01 	bl	8000524 <__aeabi_ui2d>
 800e722:	9b08      	ldr	r3, [sp, #32]
 800e724:	4604      	mov	r4, r0
 800e726:	460d      	mov	r5, r1
 800e728:	b9d3      	cbnz	r3, 800e760 <_strtod_l+0xba0>
 800e72a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e72e:	9012      	str	r0, [sp, #72]	; 0x48
 800e730:	9313      	str	r3, [sp, #76]	; 0x4c
 800e732:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800e736:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e738:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800e73c:	1a9f      	subs	r7, r3, r2
 800e73e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e742:	f004 fe83 	bl	801344c <__ulp>
 800e746:	4602      	mov	r2, r0
 800e748:	460b      	mov	r3, r1
 800e74a:	4630      	mov	r0, r6
 800e74c:	4639      	mov	r1, r7
 800e74e:	f7f1 ff5f 	bl	8000610 <__aeabi_dmul>
 800e752:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e756:	f7f1 fda9 	bl	80002ac <__adddf3>
 800e75a:	4682      	mov	sl, r0
 800e75c:	468b      	mov	fp, r1
 800e75e:	e775      	b.n	800e64c <_strtod_l+0xa8c>
 800e760:	4602      	mov	r2, r0
 800e762:	460b      	mov	r3, r1
 800e764:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800e768:	e7e3      	b.n	800e732 <_strtod_l+0xb72>
 800e76a:	a30d      	add	r3, pc, #52	; (adr r3, 800e7a0 <_strtod_l+0xbe0>)
 800e76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e770:	f7f2 f9c0 	bl	8000af4 <__aeabi_dcmplt>
 800e774:	e79d      	b.n	800e6b2 <_strtod_l+0xaf2>
 800e776:	2300      	movs	r3, #0
 800e778:	9309      	str	r3, [sp, #36]	; 0x24
 800e77a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e77c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e77e:	6013      	str	r3, [r2, #0]
 800e780:	f7ff ba62 	b.w	800dc48 <_strtod_l+0x88>
 800e784:	2b65      	cmp	r3, #101	; 0x65
 800e786:	f04f 0200 	mov.w	r2, #0
 800e78a:	f43f abb2 	beq.w	800def2 <_strtod_l+0x332>
 800e78e:	4615      	mov	r5, r2
 800e790:	2101      	movs	r1, #1
 800e792:	f7ff bad1 	b.w	800dd38 <_strtod_l+0x178>
 800e796:	bf00      	nop
 800e798:	ffc00000 	.word	0xffc00000
 800e79c:	41dfffff 	.word	0x41dfffff
 800e7a0:	94a03595 	.word	0x94a03595
 800e7a4:	3fcfffff 	.word	0x3fcfffff

0800e7a8 <strtod>:
 800e7a8:	4b06      	ldr	r3, [pc, #24]	; (800e7c4 <strtod+0x1c>)
 800e7aa:	4a07      	ldr	r2, [pc, #28]	; (800e7c8 <strtod+0x20>)
 800e7ac:	b410      	push	{r4}
 800e7ae:	681c      	ldr	r4, [r3, #0]
 800e7b0:	6a23      	ldr	r3, [r4, #32]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	bf08      	it	eq
 800e7b6:	4613      	moveq	r3, r2
 800e7b8:	460a      	mov	r2, r1
 800e7ba:	4601      	mov	r1, r0
 800e7bc:	4620      	mov	r0, r4
 800e7be:	bc10      	pop	{r4}
 800e7c0:	f7ff b9fe 	b.w	800dbc0 <_strtod_l>
 800e7c4:	20000014 	.word	0x20000014
 800e7c8:	20000560 	.word	0x20000560

0800e7cc <strtok>:
 800e7cc:	4b14      	ldr	r3, [pc, #80]	; (800e820 <strtok+0x54>)
 800e7ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7d2:	681d      	ldr	r5, [r3, #0]
 800e7d4:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
 800e7d8:	4606      	mov	r6, r0
 800e7da:	460f      	mov	r7, r1
 800e7dc:	b9bc      	cbnz	r4, 800e80e <strtok+0x42>
 800e7de:	2050      	movs	r0, #80	; 0x50
 800e7e0:	f7fe fb9a 	bl	800cf18 <malloc>
 800e7e4:	f8c5 00e8 	str.w	r0, [r5, #232]	; 0xe8
 800e7e8:	6004      	str	r4, [r0, #0]
 800e7ea:	6044      	str	r4, [r0, #4]
 800e7ec:	6084      	str	r4, [r0, #8]
 800e7ee:	60c4      	str	r4, [r0, #12]
 800e7f0:	6104      	str	r4, [r0, #16]
 800e7f2:	6144      	str	r4, [r0, #20]
 800e7f4:	6184      	str	r4, [r0, #24]
 800e7f6:	6284      	str	r4, [r0, #40]	; 0x28
 800e7f8:	62c4      	str	r4, [r0, #44]	; 0x2c
 800e7fa:	6304      	str	r4, [r0, #48]	; 0x30
 800e7fc:	6344      	str	r4, [r0, #52]	; 0x34
 800e7fe:	6384      	str	r4, [r0, #56]	; 0x38
 800e800:	63c4      	str	r4, [r0, #60]	; 0x3c
 800e802:	6404      	str	r4, [r0, #64]	; 0x40
 800e804:	6444      	str	r4, [r0, #68]	; 0x44
 800e806:	6484      	str	r4, [r0, #72]	; 0x48
 800e808:	64c4      	str	r4, [r0, #76]	; 0x4c
 800e80a:	7704      	strb	r4, [r0, #28]
 800e80c:	6244      	str	r4, [r0, #36]	; 0x24
 800e80e:	f8d5 20e8 	ldr.w	r2, [r5, #232]	; 0xe8
 800e812:	4639      	mov	r1, r7
 800e814:	4630      	mov	r0, r6
 800e816:	2301      	movs	r3, #1
 800e818:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e81c:	f000 b802 	b.w	800e824 <__strtok_r>
 800e820:	20000014 	.word	0x20000014

0800e824 <__strtok_r>:
 800e824:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e826:	b918      	cbnz	r0, 800e830 <__strtok_r+0xc>
 800e828:	6810      	ldr	r0, [r2, #0]
 800e82a:	b908      	cbnz	r0, 800e830 <__strtok_r+0xc>
 800e82c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e82e:	4620      	mov	r0, r4
 800e830:	4604      	mov	r4, r0
 800e832:	460f      	mov	r7, r1
 800e834:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e838:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e83c:	b91e      	cbnz	r6, 800e846 <__strtok_r+0x22>
 800e83e:	b965      	cbnz	r5, 800e85a <__strtok_r+0x36>
 800e840:	6015      	str	r5, [r2, #0]
 800e842:	4628      	mov	r0, r5
 800e844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e846:	42b5      	cmp	r5, r6
 800e848:	d1f6      	bne.n	800e838 <__strtok_r+0x14>
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d1ef      	bne.n	800e82e <__strtok_r+0xa>
 800e84e:	6014      	str	r4, [r2, #0]
 800e850:	7003      	strb	r3, [r0, #0]
 800e852:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e854:	461c      	mov	r4, r3
 800e856:	e00c      	b.n	800e872 <__strtok_r+0x4e>
 800e858:	b915      	cbnz	r5, 800e860 <__strtok_r+0x3c>
 800e85a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e85e:	460e      	mov	r6, r1
 800e860:	f816 5b01 	ldrb.w	r5, [r6], #1
 800e864:	42ab      	cmp	r3, r5
 800e866:	d1f7      	bne.n	800e858 <__strtok_r+0x34>
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d0f3      	beq.n	800e854 <__strtok_r+0x30>
 800e86c:	2300      	movs	r3, #0
 800e86e:	f804 3c01 	strb.w	r3, [r4, #-1]
 800e872:	6014      	str	r4, [r2, #0]
 800e874:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e876 <_strtol_l.isra.0>:
 800e876:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e87a:	4680      	mov	r8, r0
 800e87c:	4689      	mov	r9, r1
 800e87e:	4692      	mov	sl, r2
 800e880:	461f      	mov	r7, r3
 800e882:	468b      	mov	fp, r1
 800e884:	465d      	mov	r5, fp
 800e886:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e888:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e88c:	f004 fa5e 	bl	8012d4c <__locale_ctype_ptr_l>
 800e890:	4420      	add	r0, r4
 800e892:	7846      	ldrb	r6, [r0, #1]
 800e894:	f016 0608 	ands.w	r6, r6, #8
 800e898:	d10b      	bne.n	800e8b2 <_strtol_l.isra.0+0x3c>
 800e89a:	2c2d      	cmp	r4, #45	; 0x2d
 800e89c:	d10b      	bne.n	800e8b6 <_strtol_l.isra.0+0x40>
 800e89e:	782c      	ldrb	r4, [r5, #0]
 800e8a0:	2601      	movs	r6, #1
 800e8a2:	f10b 0502 	add.w	r5, fp, #2
 800e8a6:	b167      	cbz	r7, 800e8c2 <_strtol_l.isra.0+0x4c>
 800e8a8:	2f10      	cmp	r7, #16
 800e8aa:	d114      	bne.n	800e8d6 <_strtol_l.isra.0+0x60>
 800e8ac:	2c30      	cmp	r4, #48	; 0x30
 800e8ae:	d00a      	beq.n	800e8c6 <_strtol_l.isra.0+0x50>
 800e8b0:	e011      	b.n	800e8d6 <_strtol_l.isra.0+0x60>
 800e8b2:	46ab      	mov	fp, r5
 800e8b4:	e7e6      	b.n	800e884 <_strtol_l.isra.0+0xe>
 800e8b6:	2c2b      	cmp	r4, #43	; 0x2b
 800e8b8:	bf04      	itt	eq
 800e8ba:	782c      	ldrbeq	r4, [r5, #0]
 800e8bc:	f10b 0502 	addeq.w	r5, fp, #2
 800e8c0:	e7f1      	b.n	800e8a6 <_strtol_l.isra.0+0x30>
 800e8c2:	2c30      	cmp	r4, #48	; 0x30
 800e8c4:	d127      	bne.n	800e916 <_strtol_l.isra.0+0xa0>
 800e8c6:	782b      	ldrb	r3, [r5, #0]
 800e8c8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e8cc:	2b58      	cmp	r3, #88	; 0x58
 800e8ce:	d14b      	bne.n	800e968 <_strtol_l.isra.0+0xf2>
 800e8d0:	786c      	ldrb	r4, [r5, #1]
 800e8d2:	2710      	movs	r7, #16
 800e8d4:	3502      	adds	r5, #2
 800e8d6:	2e00      	cmp	r6, #0
 800e8d8:	bf0c      	ite	eq
 800e8da:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800e8de:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	fbb1 fef7 	udiv	lr, r1, r7
 800e8e8:	4610      	mov	r0, r2
 800e8ea:	fb07 1c1e 	mls	ip, r7, lr, r1
 800e8ee:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800e8f2:	2b09      	cmp	r3, #9
 800e8f4:	d811      	bhi.n	800e91a <_strtol_l.isra.0+0xa4>
 800e8f6:	461c      	mov	r4, r3
 800e8f8:	42a7      	cmp	r7, r4
 800e8fa:	dd1d      	ble.n	800e938 <_strtol_l.isra.0+0xc2>
 800e8fc:	1c53      	adds	r3, r2, #1
 800e8fe:	d007      	beq.n	800e910 <_strtol_l.isra.0+0x9a>
 800e900:	4586      	cmp	lr, r0
 800e902:	d316      	bcc.n	800e932 <_strtol_l.isra.0+0xbc>
 800e904:	d101      	bne.n	800e90a <_strtol_l.isra.0+0x94>
 800e906:	45a4      	cmp	ip, r4
 800e908:	db13      	blt.n	800e932 <_strtol_l.isra.0+0xbc>
 800e90a:	fb00 4007 	mla	r0, r0, r7, r4
 800e90e:	2201      	movs	r2, #1
 800e910:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e914:	e7eb      	b.n	800e8ee <_strtol_l.isra.0+0x78>
 800e916:	270a      	movs	r7, #10
 800e918:	e7dd      	b.n	800e8d6 <_strtol_l.isra.0+0x60>
 800e91a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800e91e:	2b19      	cmp	r3, #25
 800e920:	d801      	bhi.n	800e926 <_strtol_l.isra.0+0xb0>
 800e922:	3c37      	subs	r4, #55	; 0x37
 800e924:	e7e8      	b.n	800e8f8 <_strtol_l.isra.0+0x82>
 800e926:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800e92a:	2b19      	cmp	r3, #25
 800e92c:	d804      	bhi.n	800e938 <_strtol_l.isra.0+0xc2>
 800e92e:	3c57      	subs	r4, #87	; 0x57
 800e930:	e7e2      	b.n	800e8f8 <_strtol_l.isra.0+0x82>
 800e932:	f04f 32ff 	mov.w	r2, #4294967295
 800e936:	e7eb      	b.n	800e910 <_strtol_l.isra.0+0x9a>
 800e938:	1c53      	adds	r3, r2, #1
 800e93a:	d108      	bne.n	800e94e <_strtol_l.isra.0+0xd8>
 800e93c:	2322      	movs	r3, #34	; 0x22
 800e93e:	f8c8 3000 	str.w	r3, [r8]
 800e942:	4608      	mov	r0, r1
 800e944:	f1ba 0f00 	cmp.w	sl, #0
 800e948:	d107      	bne.n	800e95a <_strtol_l.isra.0+0xe4>
 800e94a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e94e:	b106      	cbz	r6, 800e952 <_strtol_l.isra.0+0xdc>
 800e950:	4240      	negs	r0, r0
 800e952:	f1ba 0f00 	cmp.w	sl, #0
 800e956:	d00c      	beq.n	800e972 <_strtol_l.isra.0+0xfc>
 800e958:	b122      	cbz	r2, 800e964 <_strtol_l.isra.0+0xee>
 800e95a:	3d01      	subs	r5, #1
 800e95c:	f8ca 5000 	str.w	r5, [sl]
 800e960:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e964:	464d      	mov	r5, r9
 800e966:	e7f9      	b.n	800e95c <_strtol_l.isra.0+0xe6>
 800e968:	2430      	movs	r4, #48	; 0x30
 800e96a:	2f00      	cmp	r7, #0
 800e96c:	d1b3      	bne.n	800e8d6 <_strtol_l.isra.0+0x60>
 800e96e:	2708      	movs	r7, #8
 800e970:	e7b1      	b.n	800e8d6 <_strtol_l.isra.0+0x60>
 800e972:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800e978 <_strtol_r>:
 800e978:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e97a:	4c06      	ldr	r4, [pc, #24]	; (800e994 <_strtol_r+0x1c>)
 800e97c:	4d06      	ldr	r5, [pc, #24]	; (800e998 <_strtol_r+0x20>)
 800e97e:	6824      	ldr	r4, [r4, #0]
 800e980:	6a24      	ldr	r4, [r4, #32]
 800e982:	2c00      	cmp	r4, #0
 800e984:	bf08      	it	eq
 800e986:	462c      	moveq	r4, r5
 800e988:	9400      	str	r4, [sp, #0]
 800e98a:	f7ff ff74 	bl	800e876 <_strtol_l.isra.0>
 800e98e:	b003      	add	sp, #12
 800e990:	bd30      	pop	{r4, r5, pc}
 800e992:	bf00      	nop
 800e994:	20000014 	.word	0x20000014
 800e998:	20000560 	.word	0x20000560

0800e99c <strtol>:
 800e99c:	4b08      	ldr	r3, [pc, #32]	; (800e9c0 <strtol+0x24>)
 800e99e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e9a0:	681c      	ldr	r4, [r3, #0]
 800e9a2:	4d08      	ldr	r5, [pc, #32]	; (800e9c4 <strtol+0x28>)
 800e9a4:	6a23      	ldr	r3, [r4, #32]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	bf08      	it	eq
 800e9aa:	462b      	moveq	r3, r5
 800e9ac:	9300      	str	r3, [sp, #0]
 800e9ae:	4613      	mov	r3, r2
 800e9b0:	460a      	mov	r2, r1
 800e9b2:	4601      	mov	r1, r0
 800e9b4:	4620      	mov	r0, r4
 800e9b6:	f7ff ff5e 	bl	800e876 <_strtol_l.isra.0>
 800e9ba:	b003      	add	sp, #12
 800e9bc:	bd30      	pop	{r4, r5, pc}
 800e9be:	bf00      	nop
 800e9c0:	20000014 	.word	0x20000014
 800e9c4:	20000560 	.word	0x20000560

0800e9c8 <_svfprintf_r>:
 800e9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9cc:	b0bf      	sub	sp, #252	; 0xfc
 800e9ce:	4689      	mov	r9, r1
 800e9d0:	4615      	mov	r5, r2
 800e9d2:	461f      	mov	r7, r3
 800e9d4:	4682      	mov	sl, r0
 800e9d6:	f004 f9cd 	bl	8012d74 <_localeconv_r>
 800e9da:	6803      	ldr	r3, [r0, #0]
 800e9dc:	9311      	str	r3, [sp, #68]	; 0x44
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f7f1 fc00 	bl	80001e4 <strlen>
 800e9e4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800e9e8:	900a      	str	r0, [sp, #40]	; 0x28
 800e9ea:	061b      	lsls	r3, r3, #24
 800e9ec:	d518      	bpl.n	800ea20 <_svfprintf_r+0x58>
 800e9ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e9f2:	b9ab      	cbnz	r3, 800ea20 <_svfprintf_r+0x58>
 800e9f4:	2140      	movs	r1, #64	; 0x40
 800e9f6:	4650      	mov	r0, sl
 800e9f8:	f7fe fa9e 	bl	800cf38 <_malloc_r>
 800e9fc:	f8c9 0000 	str.w	r0, [r9]
 800ea00:	f8c9 0010 	str.w	r0, [r9, #16]
 800ea04:	b948      	cbnz	r0, 800ea1a <_svfprintf_r+0x52>
 800ea06:	230c      	movs	r3, #12
 800ea08:	f8ca 3000 	str.w	r3, [sl]
 800ea0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ea10:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea12:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ea14:	b03f      	add	sp, #252	; 0xfc
 800ea16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea1a:	2340      	movs	r3, #64	; 0x40
 800ea1c:	f8c9 3014 	str.w	r3, [r9, #20]
 800ea20:	2300      	movs	r3, #0
 800ea22:	ac2e      	add	r4, sp, #184	; 0xb8
 800ea24:	9421      	str	r4, [sp, #132]	; 0x84
 800ea26:	9323      	str	r3, [sp, #140]	; 0x8c
 800ea28:	9322      	str	r3, [sp, #136]	; 0x88
 800ea2a:	9509      	str	r5, [sp, #36]	; 0x24
 800ea2c:	9307      	str	r3, [sp, #28]
 800ea2e:	930d      	str	r3, [sp, #52]	; 0x34
 800ea30:	930e      	str	r3, [sp, #56]	; 0x38
 800ea32:	9315      	str	r3, [sp, #84]	; 0x54
 800ea34:	9314      	str	r3, [sp, #80]	; 0x50
 800ea36:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea38:	9312      	str	r3, [sp, #72]	; 0x48
 800ea3a:	9313      	str	r3, [sp, #76]	; 0x4c
 800ea3c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ea3e:	462b      	mov	r3, r5
 800ea40:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea44:	b112      	cbz	r2, 800ea4c <_svfprintf_r+0x84>
 800ea46:	2a25      	cmp	r2, #37	; 0x25
 800ea48:	f040 8083 	bne.w	800eb52 <_svfprintf_r+0x18a>
 800ea4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea4e:	1aee      	subs	r6, r5, r3
 800ea50:	d00d      	beq.n	800ea6e <_svfprintf_r+0xa6>
 800ea52:	e884 0048 	stmia.w	r4, {r3, r6}
 800ea56:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ea58:	4433      	add	r3, r6
 800ea5a:	9323      	str	r3, [sp, #140]	; 0x8c
 800ea5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ea5e:	3301      	adds	r3, #1
 800ea60:	2b07      	cmp	r3, #7
 800ea62:	9322      	str	r3, [sp, #136]	; 0x88
 800ea64:	dc77      	bgt.n	800eb56 <_svfprintf_r+0x18e>
 800ea66:	3408      	adds	r4, #8
 800ea68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea6a:	4433      	add	r3, r6
 800ea6c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea6e:	782b      	ldrb	r3, [r5, #0]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	f000 8725 	beq.w	800f8c0 <_svfprintf_r+0xef8>
 800ea76:	2300      	movs	r3, #0
 800ea78:	1c69      	adds	r1, r5, #1
 800ea7a:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800ea7e:	461a      	mov	r2, r3
 800ea80:	f04f 3bff 	mov.w	fp, #4294967295
 800ea84:	930c      	str	r3, [sp, #48]	; 0x30
 800ea86:	461d      	mov	r5, r3
 800ea88:	200a      	movs	r0, #10
 800ea8a:	1c4e      	adds	r6, r1, #1
 800ea8c:	7809      	ldrb	r1, [r1, #0]
 800ea8e:	9609      	str	r6, [sp, #36]	; 0x24
 800ea90:	9106      	str	r1, [sp, #24]
 800ea92:	9906      	ldr	r1, [sp, #24]
 800ea94:	3920      	subs	r1, #32
 800ea96:	2958      	cmp	r1, #88	; 0x58
 800ea98:	f200 8414 	bhi.w	800f2c4 <_svfprintf_r+0x8fc>
 800ea9c:	e8df f011 	tbh	[pc, r1, lsl #1]
 800eaa0:	041200a6 	.word	0x041200a6
 800eaa4:	00ab0412 	.word	0x00ab0412
 800eaa8:	04120412 	.word	0x04120412
 800eaac:	04120412 	.word	0x04120412
 800eab0:	04120412 	.word	0x04120412
 800eab4:	006500ae 	.word	0x006500ae
 800eab8:	00b70412 	.word	0x00b70412
 800eabc:	041200ba 	.word	0x041200ba
 800eac0:	00da00d7 	.word	0x00da00d7
 800eac4:	00da00da 	.word	0x00da00da
 800eac8:	00da00da 	.word	0x00da00da
 800eacc:	00da00da 	.word	0x00da00da
 800ead0:	00da00da 	.word	0x00da00da
 800ead4:	04120412 	.word	0x04120412
 800ead8:	04120412 	.word	0x04120412
 800eadc:	04120412 	.word	0x04120412
 800eae0:	04120412 	.word	0x04120412
 800eae4:	04120412 	.word	0x04120412
 800eae8:	0124010e 	.word	0x0124010e
 800eaec:	01240412 	.word	0x01240412
 800eaf0:	04120412 	.word	0x04120412
 800eaf4:	04120412 	.word	0x04120412
 800eaf8:	041200ed 	.word	0x041200ed
 800eafc:	033c0412 	.word	0x033c0412
 800eb00:	04120412 	.word	0x04120412
 800eb04:	04120412 	.word	0x04120412
 800eb08:	03a40412 	.word	0x03a40412
 800eb0c:	04120412 	.word	0x04120412
 800eb10:	04120086 	.word	0x04120086
 800eb14:	04120412 	.word	0x04120412
 800eb18:	04120412 	.word	0x04120412
 800eb1c:	04120412 	.word	0x04120412
 800eb20:	04120412 	.word	0x04120412
 800eb24:	01000412 	.word	0x01000412
 800eb28:	0124006b 	.word	0x0124006b
 800eb2c:	01240124 	.word	0x01240124
 800eb30:	006b00f0 	.word	0x006b00f0
 800eb34:	04120412 	.word	0x04120412
 800eb38:	041200f3 	.word	0x041200f3
 800eb3c:	033e031e 	.word	0x033e031e
 800eb40:	00fa0372 	.word	0x00fa0372
 800eb44:	03830412 	.word	0x03830412
 800eb48:	03a60412 	.word	0x03a60412
 800eb4c:	04120412 	.word	0x04120412
 800eb50:	03be      	.short	0x03be
 800eb52:	461d      	mov	r5, r3
 800eb54:	e773      	b.n	800ea3e <_svfprintf_r+0x76>
 800eb56:	aa21      	add	r2, sp, #132	; 0x84
 800eb58:	4649      	mov	r1, r9
 800eb5a:	4650      	mov	r0, sl
 800eb5c:	f005 f84c 	bl	8013bf8 <__ssprint_r>
 800eb60:	2800      	cmp	r0, #0
 800eb62:	f040 868e 	bne.w	800f882 <_svfprintf_r+0xeba>
 800eb66:	ac2e      	add	r4, sp, #184	; 0xb8
 800eb68:	e77e      	b.n	800ea68 <_svfprintf_r+0xa0>
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	222b      	movs	r2, #43	; 0x2b
 800eb6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb70:	e78b      	b.n	800ea8a <_svfprintf_r+0xc2>
 800eb72:	460f      	mov	r7, r1
 800eb74:	e7fb      	b.n	800eb6e <_svfprintf_r+0x1a6>
 800eb76:	b10b      	cbz	r3, 800eb7c <_svfprintf_r+0x1b4>
 800eb78:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800eb7c:	06ae      	lsls	r6, r5, #26
 800eb7e:	f140 80a3 	bpl.w	800ecc8 <_svfprintf_r+0x300>
 800eb82:	3707      	adds	r7, #7
 800eb84:	f027 0707 	bic.w	r7, r7, #7
 800eb88:	f107 0308 	add.w	r3, r7, #8
 800eb8c:	e9d7 6700 	ldrd	r6, r7, [r7]
 800eb90:	9308      	str	r3, [sp, #32]
 800eb92:	2e00      	cmp	r6, #0
 800eb94:	f177 0300 	sbcs.w	r3, r7, #0
 800eb98:	da06      	bge.n	800eba8 <_svfprintf_r+0x1e0>
 800eb9a:	4276      	negs	r6, r6
 800eb9c:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800eba0:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800eba4:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800eba8:	2301      	movs	r3, #1
 800ebaa:	e2c6      	b.n	800f13a <_svfprintf_r+0x772>
 800ebac:	b10b      	cbz	r3, 800ebb2 <_svfprintf_r+0x1ea>
 800ebae:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800ebb2:	4ba1      	ldr	r3, [pc, #644]	; (800ee38 <_svfprintf_r+0x470>)
 800ebb4:	9315      	str	r3, [sp, #84]	; 0x54
 800ebb6:	06ab      	lsls	r3, r5, #26
 800ebb8:	f140 8335 	bpl.w	800f226 <_svfprintf_r+0x85e>
 800ebbc:	3707      	adds	r7, #7
 800ebbe:	f027 0707 	bic.w	r7, r7, #7
 800ebc2:	f107 0308 	add.w	r3, r7, #8
 800ebc6:	e9d7 6700 	ldrd	r6, r7, [r7]
 800ebca:	9308      	str	r3, [sp, #32]
 800ebcc:	07e8      	lsls	r0, r5, #31
 800ebce:	d50b      	bpl.n	800ebe8 <_svfprintf_r+0x220>
 800ebd0:	ea56 0307 	orrs.w	r3, r6, r7
 800ebd4:	d008      	beq.n	800ebe8 <_svfprintf_r+0x220>
 800ebd6:	2330      	movs	r3, #48	; 0x30
 800ebd8:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 800ebdc:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800ebe0:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
 800ebe4:	f045 0502 	orr.w	r5, r5, #2
 800ebe8:	2302      	movs	r3, #2
 800ebea:	e2a3      	b.n	800f134 <_svfprintf_r+0x76c>
 800ebec:	2a00      	cmp	r2, #0
 800ebee:	d1be      	bne.n	800eb6e <_svfprintf_r+0x1a6>
 800ebf0:	2301      	movs	r3, #1
 800ebf2:	2220      	movs	r2, #32
 800ebf4:	e7bb      	b.n	800eb6e <_svfprintf_r+0x1a6>
 800ebf6:	f045 0501 	orr.w	r5, r5, #1
 800ebfa:	e7b8      	b.n	800eb6e <_svfprintf_r+0x1a6>
 800ebfc:	683e      	ldr	r6, [r7, #0]
 800ebfe:	960c      	str	r6, [sp, #48]	; 0x30
 800ec00:	2e00      	cmp	r6, #0
 800ec02:	f107 0104 	add.w	r1, r7, #4
 800ec06:	dab4      	bge.n	800eb72 <_svfprintf_r+0x1aa>
 800ec08:	4276      	negs	r6, r6
 800ec0a:	960c      	str	r6, [sp, #48]	; 0x30
 800ec0c:	460f      	mov	r7, r1
 800ec0e:	f045 0504 	orr.w	r5, r5, #4
 800ec12:	e7ac      	b.n	800eb6e <_svfprintf_r+0x1a6>
 800ec14:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ec16:	1c4e      	adds	r6, r1, #1
 800ec18:	7809      	ldrb	r1, [r1, #0]
 800ec1a:	9106      	str	r1, [sp, #24]
 800ec1c:	292a      	cmp	r1, #42	; 0x2a
 800ec1e:	d010      	beq.n	800ec42 <_svfprintf_r+0x27a>
 800ec20:	f04f 0b00 	mov.w	fp, #0
 800ec24:	9609      	str	r6, [sp, #36]	; 0x24
 800ec26:	9906      	ldr	r1, [sp, #24]
 800ec28:	3930      	subs	r1, #48	; 0x30
 800ec2a:	2909      	cmp	r1, #9
 800ec2c:	f63f af31 	bhi.w	800ea92 <_svfprintf_r+0xca>
 800ec30:	fb00 1b0b 	mla	fp, r0, fp, r1
 800ec34:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ec36:	460e      	mov	r6, r1
 800ec38:	f816 1b01 	ldrb.w	r1, [r6], #1
 800ec3c:	9106      	str	r1, [sp, #24]
 800ec3e:	9609      	str	r6, [sp, #36]	; 0x24
 800ec40:	e7f1      	b.n	800ec26 <_svfprintf_r+0x25e>
 800ec42:	6839      	ldr	r1, [r7, #0]
 800ec44:	9609      	str	r6, [sp, #36]	; 0x24
 800ec46:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
 800ec4a:	3704      	adds	r7, #4
 800ec4c:	e78f      	b.n	800eb6e <_svfprintf_r+0x1a6>
 800ec4e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800ec52:	e78c      	b.n	800eb6e <_svfprintf_r+0x1a6>
 800ec54:	2100      	movs	r1, #0
 800ec56:	910c      	str	r1, [sp, #48]	; 0x30
 800ec58:	9906      	ldr	r1, [sp, #24]
 800ec5a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ec5c:	3930      	subs	r1, #48	; 0x30
 800ec5e:	fb00 1106 	mla	r1, r0, r6, r1
 800ec62:	910c      	str	r1, [sp, #48]	; 0x30
 800ec64:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ec66:	460e      	mov	r6, r1
 800ec68:	f816 1b01 	ldrb.w	r1, [r6], #1
 800ec6c:	9106      	str	r1, [sp, #24]
 800ec6e:	9906      	ldr	r1, [sp, #24]
 800ec70:	9609      	str	r6, [sp, #36]	; 0x24
 800ec72:	3930      	subs	r1, #48	; 0x30
 800ec74:	2909      	cmp	r1, #9
 800ec76:	d9ef      	bls.n	800ec58 <_svfprintf_r+0x290>
 800ec78:	e70b      	b.n	800ea92 <_svfprintf_r+0xca>
 800ec7a:	f045 0508 	orr.w	r5, r5, #8
 800ec7e:	e776      	b.n	800eb6e <_svfprintf_r+0x1a6>
 800ec80:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800ec84:	e773      	b.n	800eb6e <_svfprintf_r+0x1a6>
 800ec86:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ec88:	7809      	ldrb	r1, [r1, #0]
 800ec8a:	296c      	cmp	r1, #108	; 0x6c
 800ec8c:	d105      	bne.n	800ec9a <_svfprintf_r+0x2d2>
 800ec8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ec90:	3101      	adds	r1, #1
 800ec92:	9109      	str	r1, [sp, #36]	; 0x24
 800ec94:	f045 0520 	orr.w	r5, r5, #32
 800ec98:	e769      	b.n	800eb6e <_svfprintf_r+0x1a6>
 800ec9a:	f045 0510 	orr.w	r5, r5, #16
 800ec9e:	e766      	b.n	800eb6e <_svfprintf_r+0x1a6>
 800eca0:	1d3b      	adds	r3, r7, #4
 800eca2:	9308      	str	r3, [sp, #32]
 800eca4:	2600      	movs	r6, #0
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 800ecac:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 800ecb0:	f04f 0b01 	mov.w	fp, #1
 800ecb4:	4637      	mov	r7, r6
 800ecb6:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 800ecba:	e11a      	b.n	800eef2 <_svfprintf_r+0x52a>
 800ecbc:	b10b      	cbz	r3, 800ecc2 <_svfprintf_r+0x2fa>
 800ecbe:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800ecc2:	f045 0510 	orr.w	r5, r5, #16
 800ecc6:	e759      	b.n	800eb7c <_svfprintf_r+0x1b4>
 800ecc8:	f015 0f10 	tst.w	r5, #16
 800eccc:	f107 0304 	add.w	r3, r7, #4
 800ecd0:	d003      	beq.n	800ecda <_svfprintf_r+0x312>
 800ecd2:	683e      	ldr	r6, [r7, #0]
 800ecd4:	9308      	str	r3, [sp, #32]
 800ecd6:	17f7      	asrs	r7, r6, #31
 800ecd8:	e75b      	b.n	800eb92 <_svfprintf_r+0x1ca>
 800ecda:	683e      	ldr	r6, [r7, #0]
 800ecdc:	9308      	str	r3, [sp, #32]
 800ecde:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ece2:	bf18      	it	ne
 800ece4:	b236      	sxthne	r6, r6
 800ece6:	e7f6      	b.n	800ecd6 <_svfprintf_r+0x30e>
 800ece8:	b10b      	cbz	r3, 800ecee <_svfprintf_r+0x326>
 800ecea:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800ecee:	3707      	adds	r7, #7
 800ecf0:	f027 0707 	bic.w	r7, r7, #7
 800ecf4:	f107 0308 	add.w	r3, r7, #8
 800ecf8:	9308      	str	r3, [sp, #32]
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	930d      	str	r3, [sp, #52]	; 0x34
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	930e      	str	r3, [sp, #56]	; 0x38
 800ed02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed04:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800ed06:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 800ed0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ed0e:	4b4b      	ldr	r3, [pc, #300]	; (800ee3c <_svfprintf_r+0x474>)
 800ed10:	4638      	mov	r0, r7
 800ed12:	4631      	mov	r1, r6
 800ed14:	f7f1 ff16 	bl	8000b44 <__aeabi_dcmpun>
 800ed18:	2800      	cmp	r0, #0
 800ed1a:	f040 85da 	bne.w	800f8d2 <_svfprintf_r+0xf0a>
 800ed1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ed22:	4b46      	ldr	r3, [pc, #280]	; (800ee3c <_svfprintf_r+0x474>)
 800ed24:	4638      	mov	r0, r7
 800ed26:	4631      	mov	r1, r6
 800ed28:	f7f1 feee 	bl	8000b08 <__aeabi_dcmple>
 800ed2c:	2800      	cmp	r0, #0
 800ed2e:	f040 85d0 	bne.w	800f8d2 <_svfprintf_r+0xf0a>
 800ed32:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ed34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ed36:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ed38:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ed3a:	f7f1 fedb 	bl	8000af4 <__aeabi_dcmplt>
 800ed3e:	b110      	cbz	r0, 800ed46 <_svfprintf_r+0x37e>
 800ed40:	232d      	movs	r3, #45	; 0x2d
 800ed42:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800ed46:	4b3e      	ldr	r3, [pc, #248]	; (800ee40 <_svfprintf_r+0x478>)
 800ed48:	4a3e      	ldr	r2, [pc, #248]	; (800ee44 <_svfprintf_r+0x47c>)
 800ed4a:	9906      	ldr	r1, [sp, #24]
 800ed4c:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800ed50:	2947      	cmp	r1, #71	; 0x47
 800ed52:	bfcc      	ite	gt
 800ed54:	4690      	movgt	r8, r2
 800ed56:	4698      	movle	r8, r3
 800ed58:	f04f 0b03 	mov.w	fp, #3
 800ed5c:	2600      	movs	r6, #0
 800ed5e:	4637      	mov	r7, r6
 800ed60:	e0c7      	b.n	800eef2 <_svfprintf_r+0x52a>
 800ed62:	f1bb 3fff 	cmp.w	fp, #4294967295
 800ed66:	d026      	beq.n	800edb6 <_svfprintf_r+0x3ee>
 800ed68:	9b06      	ldr	r3, [sp, #24]
 800ed6a:	f023 0320 	bic.w	r3, r3, #32
 800ed6e:	2b47      	cmp	r3, #71	; 0x47
 800ed70:	d104      	bne.n	800ed7c <_svfprintf_r+0x3b4>
 800ed72:	f1bb 0f00 	cmp.w	fp, #0
 800ed76:	bf08      	it	eq
 800ed78:	f04f 0b01 	moveq.w	fp, #1
 800ed7c:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800ed80:	9317      	str	r3, [sp, #92]	; 0x5c
 800ed82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed84:	1e1f      	subs	r7, r3, #0
 800ed86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed88:	930f      	str	r3, [sp, #60]	; 0x3c
 800ed8a:	bfbd      	ittte	lt
 800ed8c:	463b      	movlt	r3, r7
 800ed8e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800ed92:	9310      	strlt	r3, [sp, #64]	; 0x40
 800ed94:	2300      	movge	r3, #0
 800ed96:	bfb8      	it	lt
 800ed98:	232d      	movlt	r3, #45	; 0x2d
 800ed9a:	9316      	str	r3, [sp, #88]	; 0x58
 800ed9c:	9b06      	ldr	r3, [sp, #24]
 800ed9e:	bfa8      	it	ge
 800eda0:	9710      	strge	r7, [sp, #64]	; 0x40
 800eda2:	f023 0720 	bic.w	r7, r3, #32
 800eda6:	2f46      	cmp	r7, #70	; 0x46
 800eda8:	d008      	beq.n	800edbc <_svfprintf_r+0x3f4>
 800edaa:	2f45      	cmp	r7, #69	; 0x45
 800edac:	d142      	bne.n	800ee34 <_svfprintf_r+0x46c>
 800edae:	f10b 0601 	add.w	r6, fp, #1
 800edb2:	2302      	movs	r3, #2
 800edb4:	e004      	b.n	800edc0 <_svfprintf_r+0x3f8>
 800edb6:	f04f 0b06 	mov.w	fp, #6
 800edba:	e7df      	b.n	800ed7c <_svfprintf_r+0x3b4>
 800edbc:	465e      	mov	r6, fp
 800edbe:	2303      	movs	r3, #3
 800edc0:	aa1f      	add	r2, sp, #124	; 0x7c
 800edc2:	9204      	str	r2, [sp, #16]
 800edc4:	aa1c      	add	r2, sp, #112	; 0x70
 800edc6:	9203      	str	r2, [sp, #12]
 800edc8:	aa1b      	add	r2, sp, #108	; 0x6c
 800edca:	9202      	str	r2, [sp, #8]
 800edcc:	e88d 0048 	stmia.w	sp, {r3, r6}
 800edd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800edd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800edd4:	4650      	mov	r0, sl
 800edd6:	f002 f99f 	bl	8011118 <_dtoa_r>
 800edda:	2f47      	cmp	r7, #71	; 0x47
 800eddc:	4680      	mov	r8, r0
 800edde:	d102      	bne.n	800ede6 <_svfprintf_r+0x41e>
 800ede0:	07e8      	lsls	r0, r5, #31
 800ede2:	f140 8583 	bpl.w	800f8ec <_svfprintf_r+0xf24>
 800ede6:	eb08 0306 	add.w	r3, r8, r6
 800edea:	2f46      	cmp	r7, #70	; 0x46
 800edec:	9307      	str	r3, [sp, #28]
 800edee:	d111      	bne.n	800ee14 <_svfprintf_r+0x44c>
 800edf0:	f898 3000 	ldrb.w	r3, [r8]
 800edf4:	2b30      	cmp	r3, #48	; 0x30
 800edf6:	d109      	bne.n	800ee0c <_svfprintf_r+0x444>
 800edf8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800edfa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800edfc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800edfe:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ee00:	f7f1 fe6e 	bl	8000ae0 <__aeabi_dcmpeq>
 800ee04:	b910      	cbnz	r0, 800ee0c <_svfprintf_r+0x444>
 800ee06:	f1c6 0601 	rsb	r6, r6, #1
 800ee0a:	961b      	str	r6, [sp, #108]	; 0x6c
 800ee0c:	9a07      	ldr	r2, [sp, #28]
 800ee0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ee10:	441a      	add	r2, r3
 800ee12:	9207      	str	r2, [sp, #28]
 800ee14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ee16:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ee18:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ee1a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ee1c:	f7f1 fe60 	bl	8000ae0 <__aeabi_dcmpeq>
 800ee20:	b990      	cbnz	r0, 800ee48 <_svfprintf_r+0x480>
 800ee22:	2230      	movs	r2, #48	; 0x30
 800ee24:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ee26:	9907      	ldr	r1, [sp, #28]
 800ee28:	4299      	cmp	r1, r3
 800ee2a:	d90f      	bls.n	800ee4c <_svfprintf_r+0x484>
 800ee2c:	1c59      	adds	r1, r3, #1
 800ee2e:	911f      	str	r1, [sp, #124]	; 0x7c
 800ee30:	701a      	strb	r2, [r3, #0]
 800ee32:	e7f7      	b.n	800ee24 <_svfprintf_r+0x45c>
 800ee34:	465e      	mov	r6, fp
 800ee36:	e7bc      	b.n	800edb2 <_svfprintf_r+0x3ea>
 800ee38:	08015558 	.word	0x08015558
 800ee3c:	7fefffff 	.word	0x7fefffff
 800ee40:	08015548 	.word	0x08015548
 800ee44:	0801554c 	.word	0x0801554c
 800ee48:	9b07      	ldr	r3, [sp, #28]
 800ee4a:	931f      	str	r3, [sp, #124]	; 0x7c
 800ee4c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ee4e:	2f47      	cmp	r7, #71	; 0x47
 800ee50:	eba3 0308 	sub.w	r3, r3, r8
 800ee54:	9307      	str	r3, [sp, #28]
 800ee56:	f040 80fe 	bne.w	800f056 <_svfprintf_r+0x68e>
 800ee5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ee5c:	1cd9      	adds	r1, r3, #3
 800ee5e:	db02      	blt.n	800ee66 <_svfprintf_r+0x49e>
 800ee60:	459b      	cmp	fp, r3
 800ee62:	f280 8124 	bge.w	800f0ae <_svfprintf_r+0x6e6>
 800ee66:	9b06      	ldr	r3, [sp, #24]
 800ee68:	3b02      	subs	r3, #2
 800ee6a:	9306      	str	r3, [sp, #24]
 800ee6c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ee6e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800ee72:	f88d 1074 	strb.w	r1, [sp, #116]	; 0x74
 800ee76:	1e53      	subs	r3, r2, #1
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	931b      	str	r3, [sp, #108]	; 0x6c
 800ee7c:	bfb6      	itet	lt
 800ee7e:	f1c2 0301 	rsblt	r3, r2, #1
 800ee82:	222b      	movge	r2, #43	; 0x2b
 800ee84:	222d      	movlt	r2, #45	; 0x2d
 800ee86:	2b09      	cmp	r3, #9
 800ee88:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 800ee8c:	f340 80ff 	ble.w	800f08e <_svfprintf_r+0x6c6>
 800ee90:	f10d 0283 	add.w	r2, sp, #131	; 0x83
 800ee94:	260a      	movs	r6, #10
 800ee96:	fb93 f0f6 	sdiv	r0, r3, r6
 800ee9a:	fb06 3310 	mls	r3, r6, r0, r3
 800ee9e:	3330      	adds	r3, #48	; 0x30
 800eea0:	2809      	cmp	r0, #9
 800eea2:	f802 3c01 	strb.w	r3, [r2, #-1]
 800eea6:	f102 31ff 	add.w	r1, r2, #4294967295
 800eeaa:	4603      	mov	r3, r0
 800eeac:	f300 80e8 	bgt.w	800f080 <_svfprintf_r+0x6b8>
 800eeb0:	3330      	adds	r3, #48	; 0x30
 800eeb2:	f801 3c01 	strb.w	r3, [r1, #-1]
 800eeb6:	3a02      	subs	r2, #2
 800eeb8:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 800eebc:	f10d 0083 	add.w	r0, sp, #131	; 0x83
 800eec0:	4282      	cmp	r2, r0
 800eec2:	4619      	mov	r1, r3
 800eec4:	f0c0 80de 	bcc.w	800f084 <_svfprintf_r+0x6bc>
 800eec8:	9a07      	ldr	r2, [sp, #28]
 800eeca:	ab1d      	add	r3, sp, #116	; 0x74
 800eecc:	1acb      	subs	r3, r1, r3
 800eece:	2a01      	cmp	r2, #1
 800eed0:	9314      	str	r3, [sp, #80]	; 0x50
 800eed2:	eb03 0b02 	add.w	fp, r3, r2
 800eed6:	dc02      	bgt.n	800eede <_svfprintf_r+0x516>
 800eed8:	f015 0701 	ands.w	r7, r5, #1
 800eedc:	d002      	beq.n	800eee4 <_svfprintf_r+0x51c>
 800eede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eee0:	2700      	movs	r7, #0
 800eee2:	449b      	add	fp, r3
 800eee4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800eee6:	b113      	cbz	r3, 800eeee <_svfprintf_r+0x526>
 800eee8:	232d      	movs	r3, #45	; 0x2d
 800eeea:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800eeee:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800eef0:	2600      	movs	r6, #0
 800eef2:	455e      	cmp	r6, fp
 800eef4:	4633      	mov	r3, r6
 800eef6:	bfb8      	it	lt
 800eef8:	465b      	movlt	r3, fp
 800eefa:	930f      	str	r3, [sp, #60]	; 0x3c
 800eefc:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 800ef00:	b113      	cbz	r3, 800ef08 <_svfprintf_r+0x540>
 800ef02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ef04:	3301      	adds	r3, #1
 800ef06:	930f      	str	r3, [sp, #60]	; 0x3c
 800ef08:	f015 0302 	ands.w	r3, r5, #2
 800ef0c:	9316      	str	r3, [sp, #88]	; 0x58
 800ef0e:	bf1e      	ittt	ne
 800ef10:	9b0f      	ldrne	r3, [sp, #60]	; 0x3c
 800ef12:	3302      	addne	r3, #2
 800ef14:	930f      	strne	r3, [sp, #60]	; 0x3c
 800ef16:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 800ef1a:	9317      	str	r3, [sp, #92]	; 0x5c
 800ef1c:	d118      	bne.n	800ef50 <_svfprintf_r+0x588>
 800ef1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ef22:	1a9b      	subs	r3, r3, r2
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	9310      	str	r3, [sp, #64]	; 0x40
 800ef28:	dd12      	ble.n	800ef50 <_svfprintf_r+0x588>
 800ef2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ef2c:	2b10      	cmp	r3, #16
 800ef2e:	4bab      	ldr	r3, [pc, #684]	; (800f1dc <_svfprintf_r+0x814>)
 800ef30:	6023      	str	r3, [r4, #0]
 800ef32:	f300 81d9 	bgt.w	800f2e8 <_svfprintf_r+0x920>
 800ef36:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ef38:	6063      	str	r3, [r4, #4]
 800ef3a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ef3c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ef3e:	4413      	add	r3, r2
 800ef40:	9323      	str	r3, [sp, #140]	; 0x8c
 800ef42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ef44:	3301      	adds	r3, #1
 800ef46:	2b07      	cmp	r3, #7
 800ef48:	9322      	str	r3, [sp, #136]	; 0x88
 800ef4a:	f300 81e6 	bgt.w	800f31a <_svfprintf_r+0x952>
 800ef4e:	3408      	adds	r4, #8
 800ef50:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 800ef54:	b173      	cbz	r3, 800ef74 <_svfprintf_r+0x5ac>
 800ef56:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 800ef5a:	6023      	str	r3, [r4, #0]
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	6063      	str	r3, [r4, #4]
 800ef60:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ef62:	3301      	adds	r3, #1
 800ef64:	9323      	str	r3, [sp, #140]	; 0x8c
 800ef66:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ef68:	3301      	adds	r3, #1
 800ef6a:	2b07      	cmp	r3, #7
 800ef6c:	9322      	str	r3, [sp, #136]	; 0x88
 800ef6e:	f300 81de 	bgt.w	800f32e <_svfprintf_r+0x966>
 800ef72:	3408      	adds	r4, #8
 800ef74:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ef76:	b16b      	cbz	r3, 800ef94 <_svfprintf_r+0x5cc>
 800ef78:	ab1a      	add	r3, sp, #104	; 0x68
 800ef7a:	6023      	str	r3, [r4, #0]
 800ef7c:	2302      	movs	r3, #2
 800ef7e:	6063      	str	r3, [r4, #4]
 800ef80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ef82:	3302      	adds	r3, #2
 800ef84:	9323      	str	r3, [sp, #140]	; 0x8c
 800ef86:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ef88:	3301      	adds	r3, #1
 800ef8a:	2b07      	cmp	r3, #7
 800ef8c:	9322      	str	r3, [sp, #136]	; 0x88
 800ef8e:	f300 81d8 	bgt.w	800f342 <_svfprintf_r+0x97a>
 800ef92:	3408      	adds	r4, #8
 800ef94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ef96:	2b80      	cmp	r3, #128	; 0x80
 800ef98:	d118      	bne.n	800efcc <_svfprintf_r+0x604>
 800ef9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ef9e:	1a9b      	subs	r3, r3, r2
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	9310      	str	r3, [sp, #64]	; 0x40
 800efa4:	dd12      	ble.n	800efcc <_svfprintf_r+0x604>
 800efa6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800efa8:	2b10      	cmp	r3, #16
 800efaa:	4b8d      	ldr	r3, [pc, #564]	; (800f1e0 <_svfprintf_r+0x818>)
 800efac:	6023      	str	r3, [r4, #0]
 800efae:	f300 81d2 	bgt.w	800f356 <_svfprintf_r+0x98e>
 800efb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800efb4:	6063      	str	r3, [r4, #4]
 800efb6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800efb8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800efba:	4413      	add	r3, r2
 800efbc:	9323      	str	r3, [sp, #140]	; 0x8c
 800efbe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800efc0:	3301      	adds	r3, #1
 800efc2:	2b07      	cmp	r3, #7
 800efc4:	9322      	str	r3, [sp, #136]	; 0x88
 800efc6:	f300 81df 	bgt.w	800f388 <_svfprintf_r+0x9c0>
 800efca:	3408      	adds	r4, #8
 800efcc:	eba6 060b 	sub.w	r6, r6, fp
 800efd0:	2e00      	cmp	r6, #0
 800efd2:	dd0f      	ble.n	800eff4 <_svfprintf_r+0x62c>
 800efd4:	4b82      	ldr	r3, [pc, #520]	; (800f1e0 <_svfprintf_r+0x818>)
 800efd6:	6023      	str	r3, [r4, #0]
 800efd8:	2e10      	cmp	r6, #16
 800efda:	f300 81df 	bgt.w	800f39c <_svfprintf_r+0x9d4>
 800efde:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800efe0:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800efe2:	6066      	str	r6, [r4, #4]
 800efe4:	3301      	adds	r3, #1
 800efe6:	4406      	add	r6, r0
 800efe8:	2b07      	cmp	r3, #7
 800efea:	9623      	str	r6, [sp, #140]	; 0x8c
 800efec:	9322      	str	r3, [sp, #136]	; 0x88
 800efee:	f300 81ec 	bgt.w	800f3ca <_svfprintf_r+0xa02>
 800eff2:	3408      	adds	r4, #8
 800eff4:	05eb      	lsls	r3, r5, #23
 800eff6:	f100 81f2 	bmi.w	800f3de <_svfprintf_r+0xa16>
 800effa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800effc:	e884 0900 	stmia.w	r4, {r8, fp}
 800f000:	445b      	add	r3, fp
 800f002:	9323      	str	r3, [sp, #140]	; 0x8c
 800f004:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f006:	3301      	adds	r3, #1
 800f008:	2b07      	cmp	r3, #7
 800f00a:	9322      	str	r3, [sp, #136]	; 0x88
 800f00c:	f340 8419 	ble.w	800f842 <_svfprintf_r+0xe7a>
 800f010:	aa21      	add	r2, sp, #132	; 0x84
 800f012:	4649      	mov	r1, r9
 800f014:	4650      	mov	r0, sl
 800f016:	f004 fdef 	bl	8013bf8 <__ssprint_r>
 800f01a:	2800      	cmp	r0, #0
 800f01c:	f040 8431 	bne.w	800f882 <_svfprintf_r+0xeba>
 800f020:	ac2e      	add	r4, sp, #184	; 0xb8
 800f022:	076b      	lsls	r3, r5, #29
 800f024:	f100 8410 	bmi.w	800f848 <_svfprintf_r+0xe80>
 800f028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f02a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f02c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f02e:	428a      	cmp	r2, r1
 800f030:	bfac      	ite	ge
 800f032:	189b      	addge	r3, r3, r2
 800f034:	185b      	addlt	r3, r3, r1
 800f036:	930b      	str	r3, [sp, #44]	; 0x2c
 800f038:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f03a:	b13b      	cbz	r3, 800f04c <_svfprintf_r+0x684>
 800f03c:	aa21      	add	r2, sp, #132	; 0x84
 800f03e:	4649      	mov	r1, r9
 800f040:	4650      	mov	r0, sl
 800f042:	f004 fdd9 	bl	8013bf8 <__ssprint_r>
 800f046:	2800      	cmp	r0, #0
 800f048:	f040 841b 	bne.w	800f882 <_svfprintf_r+0xeba>
 800f04c:	2300      	movs	r3, #0
 800f04e:	9322      	str	r3, [sp, #136]	; 0x88
 800f050:	9f08      	ldr	r7, [sp, #32]
 800f052:	ac2e      	add	r4, sp, #184	; 0xb8
 800f054:	e4f2      	b.n	800ea3c <_svfprintf_r+0x74>
 800f056:	9b06      	ldr	r3, [sp, #24]
 800f058:	2b65      	cmp	r3, #101	; 0x65
 800f05a:	f77f af07 	ble.w	800ee6c <_svfprintf_r+0x4a4>
 800f05e:	9b06      	ldr	r3, [sp, #24]
 800f060:	2b66      	cmp	r3, #102	; 0x66
 800f062:	d124      	bne.n	800f0ae <_svfprintf_r+0x6e6>
 800f064:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f066:	2b00      	cmp	r3, #0
 800f068:	dd19      	ble.n	800f09e <_svfprintf_r+0x6d6>
 800f06a:	f1bb 0f00 	cmp.w	fp, #0
 800f06e:	d101      	bne.n	800f074 <_svfprintf_r+0x6ac>
 800f070:	07ea      	lsls	r2, r5, #31
 800f072:	d502      	bpl.n	800f07a <_svfprintf_r+0x6b2>
 800f074:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f076:	4413      	add	r3, r2
 800f078:	445b      	add	r3, fp
 800f07a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800f07c:	469b      	mov	fp, r3
 800f07e:	e731      	b.n	800eee4 <_svfprintf_r+0x51c>
 800f080:	460a      	mov	r2, r1
 800f082:	e708      	b.n	800ee96 <_svfprintf_r+0x4ce>
 800f084:	f812 1b01 	ldrb.w	r1, [r2], #1
 800f088:	f803 1b01 	strb.w	r1, [r3], #1
 800f08c:	e718      	b.n	800eec0 <_svfprintf_r+0x4f8>
 800f08e:	2230      	movs	r2, #48	; 0x30
 800f090:	4413      	add	r3, r2
 800f092:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 800f096:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 800f09a:	a91e      	add	r1, sp, #120	; 0x78
 800f09c:	e714      	b.n	800eec8 <_svfprintf_r+0x500>
 800f09e:	f1bb 0f00 	cmp.w	fp, #0
 800f0a2:	d101      	bne.n	800f0a8 <_svfprintf_r+0x6e0>
 800f0a4:	07eb      	lsls	r3, r5, #31
 800f0a6:	d515      	bpl.n	800f0d4 <_svfprintf_r+0x70c>
 800f0a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0aa:	3301      	adds	r3, #1
 800f0ac:	e7e4      	b.n	800f078 <_svfprintf_r+0x6b0>
 800f0ae:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800f0b0:	9b07      	ldr	r3, [sp, #28]
 800f0b2:	429a      	cmp	r2, r3
 800f0b4:	db06      	blt.n	800f0c4 <_svfprintf_r+0x6fc>
 800f0b6:	07ef      	lsls	r7, r5, #31
 800f0b8:	d50e      	bpl.n	800f0d8 <_svfprintf_r+0x710>
 800f0ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0bc:	4413      	add	r3, r2
 800f0be:	2267      	movs	r2, #103	; 0x67
 800f0c0:	9206      	str	r2, [sp, #24]
 800f0c2:	e7da      	b.n	800f07a <_svfprintf_r+0x6b2>
 800f0c4:	9b07      	ldr	r3, [sp, #28]
 800f0c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f0c8:	2a00      	cmp	r2, #0
 800f0ca:	440b      	add	r3, r1
 800f0cc:	dcf7      	bgt.n	800f0be <_svfprintf_r+0x6f6>
 800f0ce:	f1c2 0201 	rsb	r2, r2, #1
 800f0d2:	e7f3      	b.n	800f0bc <_svfprintf_r+0x6f4>
 800f0d4:	2301      	movs	r3, #1
 800f0d6:	e7d0      	b.n	800f07a <_svfprintf_r+0x6b2>
 800f0d8:	4613      	mov	r3, r2
 800f0da:	e7f0      	b.n	800f0be <_svfprintf_r+0x6f6>
 800f0dc:	b10b      	cbz	r3, 800f0e2 <_svfprintf_r+0x71a>
 800f0de:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800f0e2:	f015 0f20 	tst.w	r5, #32
 800f0e6:	f107 0304 	add.w	r3, r7, #4
 800f0ea:	d008      	beq.n	800f0fe <_svfprintf_r+0x736>
 800f0ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f0ee:	683a      	ldr	r2, [r7, #0]
 800f0f0:	17ce      	asrs	r6, r1, #31
 800f0f2:	4608      	mov	r0, r1
 800f0f4:	4631      	mov	r1, r6
 800f0f6:	e9c2 0100 	strd	r0, r1, [r2]
 800f0fa:	461f      	mov	r7, r3
 800f0fc:	e49e      	b.n	800ea3c <_svfprintf_r+0x74>
 800f0fe:	06ee      	lsls	r6, r5, #27
 800f100:	d503      	bpl.n	800f10a <_svfprintf_r+0x742>
 800f102:	683a      	ldr	r2, [r7, #0]
 800f104:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f106:	6011      	str	r1, [r2, #0]
 800f108:	e7f7      	b.n	800f0fa <_svfprintf_r+0x732>
 800f10a:	0668      	lsls	r0, r5, #25
 800f10c:	d5f9      	bpl.n	800f102 <_svfprintf_r+0x73a>
 800f10e:	683a      	ldr	r2, [r7, #0]
 800f110:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 800f114:	8011      	strh	r1, [r2, #0]
 800f116:	e7f0      	b.n	800f0fa <_svfprintf_r+0x732>
 800f118:	f045 0510 	orr.w	r5, r5, #16
 800f11c:	f015 0320 	ands.w	r3, r5, #32
 800f120:	d022      	beq.n	800f168 <_svfprintf_r+0x7a0>
 800f122:	3707      	adds	r7, #7
 800f124:	f027 0707 	bic.w	r7, r7, #7
 800f128:	f107 0308 	add.w	r3, r7, #8
 800f12c:	e9d7 6700 	ldrd	r6, r7, [r7]
 800f130:	9308      	str	r3, [sp, #32]
 800f132:	2300      	movs	r3, #0
 800f134:	2200      	movs	r2, #0
 800f136:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800f13a:	f1bb 3fff 	cmp.w	fp, #4294967295
 800f13e:	f000 83db 	beq.w	800f8f8 <_svfprintf_r+0xf30>
 800f142:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 800f146:	920f      	str	r2, [sp, #60]	; 0x3c
 800f148:	ea56 0207 	orrs.w	r2, r6, r7
 800f14c:	f040 83d9 	bne.w	800f902 <_svfprintf_r+0xf3a>
 800f150:	f1bb 0f00 	cmp.w	fp, #0
 800f154:	f000 80aa 	beq.w	800f2ac <_svfprintf_r+0x8e4>
 800f158:	2b01      	cmp	r3, #1
 800f15a:	d076      	beq.n	800f24a <_svfprintf_r+0x882>
 800f15c:	2b02      	cmp	r3, #2
 800f15e:	f000 8091 	beq.w	800f284 <_svfprintf_r+0x8bc>
 800f162:	2600      	movs	r6, #0
 800f164:	2700      	movs	r7, #0
 800f166:	e3d2      	b.n	800f90e <_svfprintf_r+0xf46>
 800f168:	1d3a      	adds	r2, r7, #4
 800f16a:	f015 0110 	ands.w	r1, r5, #16
 800f16e:	9208      	str	r2, [sp, #32]
 800f170:	d002      	beq.n	800f178 <_svfprintf_r+0x7b0>
 800f172:	683e      	ldr	r6, [r7, #0]
 800f174:	2700      	movs	r7, #0
 800f176:	e7dd      	b.n	800f134 <_svfprintf_r+0x76c>
 800f178:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800f17c:	d0f9      	beq.n	800f172 <_svfprintf_r+0x7aa>
 800f17e:	883e      	ldrh	r6, [r7, #0]
 800f180:	2700      	movs	r7, #0
 800f182:	e7d6      	b.n	800f132 <_svfprintf_r+0x76a>
 800f184:	1d3b      	adds	r3, r7, #4
 800f186:	9308      	str	r3, [sp, #32]
 800f188:	2330      	movs	r3, #48	; 0x30
 800f18a:	2278      	movs	r2, #120	; 0x78
 800f18c:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 800f190:	4b14      	ldr	r3, [pc, #80]	; (800f1e4 <_svfprintf_r+0x81c>)
 800f192:	683e      	ldr	r6, [r7, #0]
 800f194:	9315      	str	r3, [sp, #84]	; 0x54
 800f196:	2700      	movs	r7, #0
 800f198:	f045 0502 	orr.w	r5, r5, #2
 800f19c:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 800f1a0:	2302      	movs	r3, #2
 800f1a2:	9206      	str	r2, [sp, #24]
 800f1a4:	e7c6      	b.n	800f134 <_svfprintf_r+0x76c>
 800f1a6:	1d3b      	adds	r3, r7, #4
 800f1a8:	2600      	movs	r6, #0
 800f1aa:	f1bb 3fff 	cmp.w	fp, #4294967295
 800f1ae:	9308      	str	r3, [sp, #32]
 800f1b0:	f8d7 8000 	ldr.w	r8, [r7]
 800f1b4:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 800f1b8:	d00a      	beq.n	800f1d0 <_svfprintf_r+0x808>
 800f1ba:	465a      	mov	r2, fp
 800f1bc:	4631      	mov	r1, r6
 800f1be:	4640      	mov	r0, r8
 800f1c0:	f7f1 f81e 	bl	8000200 <memchr>
 800f1c4:	2800      	cmp	r0, #0
 800f1c6:	f000 808d 	beq.w	800f2e4 <_svfprintf_r+0x91c>
 800f1ca:	eba0 0b08 	sub.w	fp, r0, r8
 800f1ce:	e5c6      	b.n	800ed5e <_svfprintf_r+0x396>
 800f1d0:	4640      	mov	r0, r8
 800f1d2:	f7f1 f807 	bl	80001e4 <strlen>
 800f1d6:	4683      	mov	fp, r0
 800f1d8:	e5c1      	b.n	800ed5e <_svfprintf_r+0x396>
 800f1da:	bf00      	nop
 800f1dc:	0801557c 	.word	0x0801557c
 800f1e0:	0801558c 	.word	0x0801558c
 800f1e4:	08015569 	.word	0x08015569
 800f1e8:	f045 0510 	orr.w	r5, r5, #16
 800f1ec:	06a9      	lsls	r1, r5, #26
 800f1ee:	d509      	bpl.n	800f204 <_svfprintf_r+0x83c>
 800f1f0:	3707      	adds	r7, #7
 800f1f2:	f027 0707 	bic.w	r7, r7, #7
 800f1f6:	f107 0308 	add.w	r3, r7, #8
 800f1fa:	e9d7 6700 	ldrd	r6, r7, [r7]
 800f1fe:	9308      	str	r3, [sp, #32]
 800f200:	2301      	movs	r3, #1
 800f202:	e797      	b.n	800f134 <_svfprintf_r+0x76c>
 800f204:	1d3b      	adds	r3, r7, #4
 800f206:	f015 0f10 	tst.w	r5, #16
 800f20a:	9308      	str	r3, [sp, #32]
 800f20c:	d001      	beq.n	800f212 <_svfprintf_r+0x84a>
 800f20e:	683e      	ldr	r6, [r7, #0]
 800f210:	e002      	b.n	800f218 <_svfprintf_r+0x850>
 800f212:	066a      	lsls	r2, r5, #25
 800f214:	d5fb      	bpl.n	800f20e <_svfprintf_r+0x846>
 800f216:	883e      	ldrh	r6, [r7, #0]
 800f218:	2700      	movs	r7, #0
 800f21a:	e7f1      	b.n	800f200 <_svfprintf_r+0x838>
 800f21c:	b10b      	cbz	r3, 800f222 <_svfprintf_r+0x85a>
 800f21e:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800f222:	4ba3      	ldr	r3, [pc, #652]	; (800f4b0 <_svfprintf_r+0xae8>)
 800f224:	e4c6      	b.n	800ebb4 <_svfprintf_r+0x1ec>
 800f226:	1d3b      	adds	r3, r7, #4
 800f228:	f015 0f10 	tst.w	r5, #16
 800f22c:	9308      	str	r3, [sp, #32]
 800f22e:	d001      	beq.n	800f234 <_svfprintf_r+0x86c>
 800f230:	683e      	ldr	r6, [r7, #0]
 800f232:	e002      	b.n	800f23a <_svfprintf_r+0x872>
 800f234:	066e      	lsls	r6, r5, #25
 800f236:	d5fb      	bpl.n	800f230 <_svfprintf_r+0x868>
 800f238:	883e      	ldrh	r6, [r7, #0]
 800f23a:	2700      	movs	r7, #0
 800f23c:	e4c6      	b.n	800ebcc <_svfprintf_r+0x204>
 800f23e:	4643      	mov	r3, r8
 800f240:	e366      	b.n	800f910 <_svfprintf_r+0xf48>
 800f242:	2f00      	cmp	r7, #0
 800f244:	bf08      	it	eq
 800f246:	2e0a      	cmpeq	r6, #10
 800f248:	d205      	bcs.n	800f256 <_svfprintf_r+0x88e>
 800f24a:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 800f24e:	3630      	adds	r6, #48	; 0x30
 800f250:	f808 6d41 	strb.w	r6, [r8, #-65]!
 800f254:	e377      	b.n	800f946 <_svfprintf_r+0xf7e>
 800f256:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 800f25a:	4630      	mov	r0, r6
 800f25c:	4639      	mov	r1, r7
 800f25e:	220a      	movs	r2, #10
 800f260:	2300      	movs	r3, #0
 800f262:	f7f1 fd1d 	bl	8000ca0 <__aeabi_uldivmod>
 800f266:	3230      	adds	r2, #48	; 0x30
 800f268:	f808 2d01 	strb.w	r2, [r8, #-1]!
 800f26c:	2300      	movs	r3, #0
 800f26e:	4630      	mov	r0, r6
 800f270:	4639      	mov	r1, r7
 800f272:	220a      	movs	r2, #10
 800f274:	f7f1 fd14 	bl	8000ca0 <__aeabi_uldivmod>
 800f278:	4606      	mov	r6, r0
 800f27a:	460f      	mov	r7, r1
 800f27c:	ea56 0307 	orrs.w	r3, r6, r7
 800f280:	d1eb      	bne.n	800f25a <_svfprintf_r+0x892>
 800f282:	e360      	b.n	800f946 <_svfprintf_r+0xf7e>
 800f284:	2600      	movs	r6, #0
 800f286:	2700      	movs	r7, #0
 800f288:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 800f28c:	f006 030f 	and.w	r3, r6, #15
 800f290:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f292:	5cd3      	ldrb	r3, [r2, r3]
 800f294:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800f298:	0933      	lsrs	r3, r6, #4
 800f29a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800f29e:	093a      	lsrs	r2, r7, #4
 800f2a0:	461e      	mov	r6, r3
 800f2a2:	4617      	mov	r7, r2
 800f2a4:	ea56 0307 	orrs.w	r3, r6, r7
 800f2a8:	d1f0      	bne.n	800f28c <_svfprintf_r+0x8c4>
 800f2aa:	e34c      	b.n	800f946 <_svfprintf_r+0xf7e>
 800f2ac:	b93b      	cbnz	r3, 800f2be <_svfprintf_r+0x8f6>
 800f2ae:	07ea      	lsls	r2, r5, #31
 800f2b0:	d505      	bpl.n	800f2be <_svfprintf_r+0x8f6>
 800f2b2:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 800f2b6:	2330      	movs	r3, #48	; 0x30
 800f2b8:	f808 3d41 	strb.w	r3, [r8, #-65]!
 800f2bc:	e343      	b.n	800f946 <_svfprintf_r+0xf7e>
 800f2be:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 800f2c2:	e340      	b.n	800f946 <_svfprintf_r+0xf7e>
 800f2c4:	b10b      	cbz	r3, 800f2ca <_svfprintf_r+0x902>
 800f2c6:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800f2ca:	9b06      	ldr	r3, [sp, #24]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	f000 82f7 	beq.w	800f8c0 <_svfprintf_r+0xef8>
 800f2d2:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800f2d6:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 800f2da:	2600      	movs	r6, #0
 800f2dc:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 800f2e0:	9708      	str	r7, [sp, #32]
 800f2e2:	e4e5      	b.n	800ecb0 <_svfprintf_r+0x2e8>
 800f2e4:	4606      	mov	r6, r0
 800f2e6:	e53a      	b.n	800ed5e <_svfprintf_r+0x396>
 800f2e8:	2310      	movs	r3, #16
 800f2ea:	6063      	str	r3, [r4, #4]
 800f2ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f2ee:	3310      	adds	r3, #16
 800f2f0:	9323      	str	r3, [sp, #140]	; 0x8c
 800f2f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f2f4:	3301      	adds	r3, #1
 800f2f6:	2b07      	cmp	r3, #7
 800f2f8:	9322      	str	r3, [sp, #136]	; 0x88
 800f2fa:	dc04      	bgt.n	800f306 <_svfprintf_r+0x93e>
 800f2fc:	3408      	adds	r4, #8
 800f2fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f300:	3b10      	subs	r3, #16
 800f302:	9310      	str	r3, [sp, #64]	; 0x40
 800f304:	e611      	b.n	800ef2a <_svfprintf_r+0x562>
 800f306:	aa21      	add	r2, sp, #132	; 0x84
 800f308:	4649      	mov	r1, r9
 800f30a:	4650      	mov	r0, sl
 800f30c:	f004 fc74 	bl	8013bf8 <__ssprint_r>
 800f310:	2800      	cmp	r0, #0
 800f312:	f040 82b6 	bne.w	800f882 <_svfprintf_r+0xeba>
 800f316:	ac2e      	add	r4, sp, #184	; 0xb8
 800f318:	e7f1      	b.n	800f2fe <_svfprintf_r+0x936>
 800f31a:	aa21      	add	r2, sp, #132	; 0x84
 800f31c:	4649      	mov	r1, r9
 800f31e:	4650      	mov	r0, sl
 800f320:	f004 fc6a 	bl	8013bf8 <__ssprint_r>
 800f324:	2800      	cmp	r0, #0
 800f326:	f040 82ac 	bne.w	800f882 <_svfprintf_r+0xeba>
 800f32a:	ac2e      	add	r4, sp, #184	; 0xb8
 800f32c:	e610      	b.n	800ef50 <_svfprintf_r+0x588>
 800f32e:	aa21      	add	r2, sp, #132	; 0x84
 800f330:	4649      	mov	r1, r9
 800f332:	4650      	mov	r0, sl
 800f334:	f004 fc60 	bl	8013bf8 <__ssprint_r>
 800f338:	2800      	cmp	r0, #0
 800f33a:	f040 82a2 	bne.w	800f882 <_svfprintf_r+0xeba>
 800f33e:	ac2e      	add	r4, sp, #184	; 0xb8
 800f340:	e618      	b.n	800ef74 <_svfprintf_r+0x5ac>
 800f342:	aa21      	add	r2, sp, #132	; 0x84
 800f344:	4649      	mov	r1, r9
 800f346:	4650      	mov	r0, sl
 800f348:	f004 fc56 	bl	8013bf8 <__ssprint_r>
 800f34c:	2800      	cmp	r0, #0
 800f34e:	f040 8298 	bne.w	800f882 <_svfprintf_r+0xeba>
 800f352:	ac2e      	add	r4, sp, #184	; 0xb8
 800f354:	e61e      	b.n	800ef94 <_svfprintf_r+0x5cc>
 800f356:	2310      	movs	r3, #16
 800f358:	6063      	str	r3, [r4, #4]
 800f35a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f35c:	3310      	adds	r3, #16
 800f35e:	9323      	str	r3, [sp, #140]	; 0x8c
 800f360:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f362:	3301      	adds	r3, #1
 800f364:	2b07      	cmp	r3, #7
 800f366:	9322      	str	r3, [sp, #136]	; 0x88
 800f368:	dc04      	bgt.n	800f374 <_svfprintf_r+0x9ac>
 800f36a:	3408      	adds	r4, #8
 800f36c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f36e:	3b10      	subs	r3, #16
 800f370:	9310      	str	r3, [sp, #64]	; 0x40
 800f372:	e618      	b.n	800efa6 <_svfprintf_r+0x5de>
 800f374:	aa21      	add	r2, sp, #132	; 0x84
 800f376:	4649      	mov	r1, r9
 800f378:	4650      	mov	r0, sl
 800f37a:	f004 fc3d 	bl	8013bf8 <__ssprint_r>
 800f37e:	2800      	cmp	r0, #0
 800f380:	f040 827f 	bne.w	800f882 <_svfprintf_r+0xeba>
 800f384:	ac2e      	add	r4, sp, #184	; 0xb8
 800f386:	e7f1      	b.n	800f36c <_svfprintf_r+0x9a4>
 800f388:	aa21      	add	r2, sp, #132	; 0x84
 800f38a:	4649      	mov	r1, r9
 800f38c:	4650      	mov	r0, sl
 800f38e:	f004 fc33 	bl	8013bf8 <__ssprint_r>
 800f392:	2800      	cmp	r0, #0
 800f394:	f040 8275 	bne.w	800f882 <_svfprintf_r+0xeba>
 800f398:	ac2e      	add	r4, sp, #184	; 0xb8
 800f39a:	e617      	b.n	800efcc <_svfprintf_r+0x604>
 800f39c:	2310      	movs	r3, #16
 800f39e:	6063      	str	r3, [r4, #4]
 800f3a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f3a2:	3310      	adds	r3, #16
 800f3a4:	9323      	str	r3, [sp, #140]	; 0x8c
 800f3a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f3a8:	3301      	adds	r3, #1
 800f3aa:	2b07      	cmp	r3, #7
 800f3ac:	9322      	str	r3, [sp, #136]	; 0x88
 800f3ae:	dc02      	bgt.n	800f3b6 <_svfprintf_r+0x9ee>
 800f3b0:	3408      	adds	r4, #8
 800f3b2:	3e10      	subs	r6, #16
 800f3b4:	e60e      	b.n	800efd4 <_svfprintf_r+0x60c>
 800f3b6:	aa21      	add	r2, sp, #132	; 0x84
 800f3b8:	4649      	mov	r1, r9
 800f3ba:	4650      	mov	r0, sl
 800f3bc:	f004 fc1c 	bl	8013bf8 <__ssprint_r>
 800f3c0:	2800      	cmp	r0, #0
 800f3c2:	f040 825e 	bne.w	800f882 <_svfprintf_r+0xeba>
 800f3c6:	ac2e      	add	r4, sp, #184	; 0xb8
 800f3c8:	e7f3      	b.n	800f3b2 <_svfprintf_r+0x9ea>
 800f3ca:	aa21      	add	r2, sp, #132	; 0x84
 800f3cc:	4649      	mov	r1, r9
 800f3ce:	4650      	mov	r0, sl
 800f3d0:	f004 fc12 	bl	8013bf8 <__ssprint_r>
 800f3d4:	2800      	cmp	r0, #0
 800f3d6:	f040 8254 	bne.w	800f882 <_svfprintf_r+0xeba>
 800f3da:	ac2e      	add	r4, sp, #184	; 0xb8
 800f3dc:	e60a      	b.n	800eff4 <_svfprintf_r+0x62c>
 800f3de:	9b06      	ldr	r3, [sp, #24]
 800f3e0:	2b65      	cmp	r3, #101	; 0x65
 800f3e2:	f340 81a9 	ble.w	800f738 <_svfprintf_r+0xd70>
 800f3e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f3e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f3ea:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f3ec:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f3ee:	f7f1 fb77 	bl	8000ae0 <__aeabi_dcmpeq>
 800f3f2:	2800      	cmp	r0, #0
 800f3f4:	d062      	beq.n	800f4bc <_svfprintf_r+0xaf4>
 800f3f6:	4b2f      	ldr	r3, [pc, #188]	; (800f4b4 <_svfprintf_r+0xaec>)
 800f3f8:	6023      	str	r3, [r4, #0]
 800f3fa:	2301      	movs	r3, #1
 800f3fc:	6063      	str	r3, [r4, #4]
 800f3fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f400:	3301      	adds	r3, #1
 800f402:	9323      	str	r3, [sp, #140]	; 0x8c
 800f404:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f406:	3301      	adds	r3, #1
 800f408:	2b07      	cmp	r3, #7
 800f40a:	9322      	str	r3, [sp, #136]	; 0x88
 800f40c:	dc25      	bgt.n	800f45a <_svfprintf_r+0xa92>
 800f40e:	3408      	adds	r4, #8
 800f410:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f412:	9a07      	ldr	r2, [sp, #28]
 800f414:	4293      	cmp	r3, r2
 800f416:	db02      	blt.n	800f41e <_svfprintf_r+0xa56>
 800f418:	07ee      	lsls	r6, r5, #31
 800f41a:	f57f ae02 	bpl.w	800f022 <_svfprintf_r+0x65a>
 800f41e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f420:	6023      	str	r3, [r4, #0]
 800f422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f424:	6063      	str	r3, [r4, #4]
 800f426:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f428:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f42a:	4413      	add	r3, r2
 800f42c:	9323      	str	r3, [sp, #140]	; 0x8c
 800f42e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f430:	3301      	adds	r3, #1
 800f432:	2b07      	cmp	r3, #7
 800f434:	9322      	str	r3, [sp, #136]	; 0x88
 800f436:	dc1a      	bgt.n	800f46e <_svfprintf_r+0xaa6>
 800f438:	3408      	adds	r4, #8
 800f43a:	9b07      	ldr	r3, [sp, #28]
 800f43c:	1e5e      	subs	r6, r3, #1
 800f43e:	2e00      	cmp	r6, #0
 800f440:	f77f adef 	ble.w	800f022 <_svfprintf_r+0x65a>
 800f444:	4f1c      	ldr	r7, [pc, #112]	; (800f4b8 <_svfprintf_r+0xaf0>)
 800f446:	f04f 0810 	mov.w	r8, #16
 800f44a:	2e10      	cmp	r6, #16
 800f44c:	6027      	str	r7, [r4, #0]
 800f44e:	dc18      	bgt.n	800f482 <_svfprintf_r+0xaba>
 800f450:	6066      	str	r6, [r4, #4]
 800f452:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f454:	441e      	add	r6, r3
 800f456:	9623      	str	r6, [sp, #140]	; 0x8c
 800f458:	e5d4      	b.n	800f004 <_svfprintf_r+0x63c>
 800f45a:	aa21      	add	r2, sp, #132	; 0x84
 800f45c:	4649      	mov	r1, r9
 800f45e:	4650      	mov	r0, sl
 800f460:	f004 fbca 	bl	8013bf8 <__ssprint_r>
 800f464:	2800      	cmp	r0, #0
 800f466:	f040 820c 	bne.w	800f882 <_svfprintf_r+0xeba>
 800f46a:	ac2e      	add	r4, sp, #184	; 0xb8
 800f46c:	e7d0      	b.n	800f410 <_svfprintf_r+0xa48>
 800f46e:	aa21      	add	r2, sp, #132	; 0x84
 800f470:	4649      	mov	r1, r9
 800f472:	4650      	mov	r0, sl
 800f474:	f004 fbc0 	bl	8013bf8 <__ssprint_r>
 800f478:	2800      	cmp	r0, #0
 800f47a:	f040 8202 	bne.w	800f882 <_svfprintf_r+0xeba>
 800f47e:	ac2e      	add	r4, sp, #184	; 0xb8
 800f480:	e7db      	b.n	800f43a <_svfprintf_r+0xa72>
 800f482:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f484:	f8c4 8004 	str.w	r8, [r4, #4]
 800f488:	3310      	adds	r3, #16
 800f48a:	9323      	str	r3, [sp, #140]	; 0x8c
 800f48c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f48e:	3301      	adds	r3, #1
 800f490:	2b07      	cmp	r3, #7
 800f492:	9322      	str	r3, [sp, #136]	; 0x88
 800f494:	dc02      	bgt.n	800f49c <_svfprintf_r+0xad4>
 800f496:	3408      	adds	r4, #8
 800f498:	3e10      	subs	r6, #16
 800f49a:	e7d6      	b.n	800f44a <_svfprintf_r+0xa82>
 800f49c:	aa21      	add	r2, sp, #132	; 0x84
 800f49e:	4649      	mov	r1, r9
 800f4a0:	4650      	mov	r0, sl
 800f4a2:	f004 fba9 	bl	8013bf8 <__ssprint_r>
 800f4a6:	2800      	cmp	r0, #0
 800f4a8:	f040 81eb 	bne.w	800f882 <_svfprintf_r+0xeba>
 800f4ac:	ac2e      	add	r4, sp, #184	; 0xb8
 800f4ae:	e7f3      	b.n	800f498 <_svfprintf_r+0xad0>
 800f4b0:	08015569 	.word	0x08015569
 800f4b4:	0801557a 	.word	0x0801557a
 800f4b8:	0801558c 	.word	0x0801558c
 800f4bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	dc7a      	bgt.n	800f5b8 <_svfprintf_r+0xbf0>
 800f4c2:	4b9b      	ldr	r3, [pc, #620]	; (800f730 <_svfprintf_r+0xd68>)
 800f4c4:	6023      	str	r3, [r4, #0]
 800f4c6:	2301      	movs	r3, #1
 800f4c8:	6063      	str	r3, [r4, #4]
 800f4ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f4cc:	3301      	adds	r3, #1
 800f4ce:	9323      	str	r3, [sp, #140]	; 0x8c
 800f4d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f4d2:	3301      	adds	r3, #1
 800f4d4:	2b07      	cmp	r3, #7
 800f4d6:	9322      	str	r3, [sp, #136]	; 0x88
 800f4d8:	dc44      	bgt.n	800f564 <_svfprintf_r+0xb9c>
 800f4da:	3408      	adds	r4, #8
 800f4dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f4de:	b923      	cbnz	r3, 800f4ea <_svfprintf_r+0xb22>
 800f4e0:	9b07      	ldr	r3, [sp, #28]
 800f4e2:	b913      	cbnz	r3, 800f4ea <_svfprintf_r+0xb22>
 800f4e4:	07e8      	lsls	r0, r5, #31
 800f4e6:	f57f ad9c 	bpl.w	800f022 <_svfprintf_r+0x65a>
 800f4ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f4ec:	6023      	str	r3, [r4, #0]
 800f4ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4f0:	6063      	str	r3, [r4, #4]
 800f4f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f4f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f4f6:	4413      	add	r3, r2
 800f4f8:	9323      	str	r3, [sp, #140]	; 0x8c
 800f4fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f4fc:	3301      	adds	r3, #1
 800f4fe:	2b07      	cmp	r3, #7
 800f500:	9322      	str	r3, [sp, #136]	; 0x88
 800f502:	dc39      	bgt.n	800f578 <_svfprintf_r+0xbb0>
 800f504:	f104 0308 	add.w	r3, r4, #8
 800f508:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800f50a:	2e00      	cmp	r6, #0
 800f50c:	da19      	bge.n	800f542 <_svfprintf_r+0xb7a>
 800f50e:	4f89      	ldr	r7, [pc, #548]	; (800f734 <_svfprintf_r+0xd6c>)
 800f510:	4276      	negs	r6, r6
 800f512:	2410      	movs	r4, #16
 800f514:	2e10      	cmp	r6, #16
 800f516:	601f      	str	r7, [r3, #0]
 800f518:	dc38      	bgt.n	800f58c <_svfprintf_r+0xbc4>
 800f51a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800f51c:	605e      	str	r6, [r3, #4]
 800f51e:	4416      	add	r6, r2
 800f520:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f522:	9623      	str	r6, [sp, #140]	; 0x8c
 800f524:	3201      	adds	r2, #1
 800f526:	2a07      	cmp	r2, #7
 800f528:	f103 0308 	add.w	r3, r3, #8
 800f52c:	9222      	str	r2, [sp, #136]	; 0x88
 800f52e:	dd08      	ble.n	800f542 <_svfprintf_r+0xb7a>
 800f530:	aa21      	add	r2, sp, #132	; 0x84
 800f532:	4649      	mov	r1, r9
 800f534:	4650      	mov	r0, sl
 800f536:	f004 fb5f 	bl	8013bf8 <__ssprint_r>
 800f53a:	2800      	cmp	r0, #0
 800f53c:	f040 81a1 	bne.w	800f882 <_svfprintf_r+0xeba>
 800f540:	ab2e      	add	r3, sp, #184	; 0xb8
 800f542:	9a07      	ldr	r2, [sp, #28]
 800f544:	605a      	str	r2, [r3, #4]
 800f546:	9907      	ldr	r1, [sp, #28]
 800f548:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800f54a:	f8c3 8000 	str.w	r8, [r3]
 800f54e:	440a      	add	r2, r1
 800f550:	9223      	str	r2, [sp, #140]	; 0x8c
 800f552:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f554:	3201      	adds	r2, #1
 800f556:	2a07      	cmp	r2, #7
 800f558:	9222      	str	r2, [sp, #136]	; 0x88
 800f55a:	f73f ad59 	bgt.w	800f010 <_svfprintf_r+0x648>
 800f55e:	f103 0408 	add.w	r4, r3, #8
 800f562:	e55e      	b.n	800f022 <_svfprintf_r+0x65a>
 800f564:	aa21      	add	r2, sp, #132	; 0x84
 800f566:	4649      	mov	r1, r9
 800f568:	4650      	mov	r0, sl
 800f56a:	f004 fb45 	bl	8013bf8 <__ssprint_r>
 800f56e:	2800      	cmp	r0, #0
 800f570:	f040 8187 	bne.w	800f882 <_svfprintf_r+0xeba>
 800f574:	ac2e      	add	r4, sp, #184	; 0xb8
 800f576:	e7b1      	b.n	800f4dc <_svfprintf_r+0xb14>
 800f578:	aa21      	add	r2, sp, #132	; 0x84
 800f57a:	4649      	mov	r1, r9
 800f57c:	4650      	mov	r0, sl
 800f57e:	f004 fb3b 	bl	8013bf8 <__ssprint_r>
 800f582:	2800      	cmp	r0, #0
 800f584:	f040 817d 	bne.w	800f882 <_svfprintf_r+0xeba>
 800f588:	ab2e      	add	r3, sp, #184	; 0xb8
 800f58a:	e7bd      	b.n	800f508 <_svfprintf_r+0xb40>
 800f58c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800f58e:	605c      	str	r4, [r3, #4]
 800f590:	3210      	adds	r2, #16
 800f592:	9223      	str	r2, [sp, #140]	; 0x8c
 800f594:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f596:	3201      	adds	r2, #1
 800f598:	2a07      	cmp	r2, #7
 800f59a:	9222      	str	r2, [sp, #136]	; 0x88
 800f59c:	dc02      	bgt.n	800f5a4 <_svfprintf_r+0xbdc>
 800f59e:	3308      	adds	r3, #8
 800f5a0:	3e10      	subs	r6, #16
 800f5a2:	e7b7      	b.n	800f514 <_svfprintf_r+0xb4c>
 800f5a4:	aa21      	add	r2, sp, #132	; 0x84
 800f5a6:	4649      	mov	r1, r9
 800f5a8:	4650      	mov	r0, sl
 800f5aa:	f004 fb25 	bl	8013bf8 <__ssprint_r>
 800f5ae:	2800      	cmp	r0, #0
 800f5b0:	f040 8167 	bne.w	800f882 <_svfprintf_r+0xeba>
 800f5b4:	ab2e      	add	r3, sp, #184	; 0xb8
 800f5b6:	e7f3      	b.n	800f5a0 <_svfprintf_r+0xbd8>
 800f5b8:	9b07      	ldr	r3, [sp, #28]
 800f5ba:	42bb      	cmp	r3, r7
 800f5bc:	bfa8      	it	ge
 800f5be:	463b      	movge	r3, r7
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	461e      	mov	r6, r3
 800f5c4:	dd0b      	ble.n	800f5de <_svfprintf_r+0xc16>
 800f5c6:	6063      	str	r3, [r4, #4]
 800f5c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f5ca:	f8c4 8000 	str.w	r8, [r4]
 800f5ce:	4433      	add	r3, r6
 800f5d0:	9323      	str	r3, [sp, #140]	; 0x8c
 800f5d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f5d4:	3301      	adds	r3, #1
 800f5d6:	2b07      	cmp	r3, #7
 800f5d8:	9322      	str	r3, [sp, #136]	; 0x88
 800f5da:	dc5f      	bgt.n	800f69c <_svfprintf_r+0xcd4>
 800f5dc:	3408      	adds	r4, #8
 800f5de:	2e00      	cmp	r6, #0
 800f5e0:	bfac      	ite	ge
 800f5e2:	1bbe      	subge	r6, r7, r6
 800f5e4:	463e      	movlt	r6, r7
 800f5e6:	2e00      	cmp	r6, #0
 800f5e8:	dd0f      	ble.n	800f60a <_svfprintf_r+0xc42>
 800f5ea:	f8df b148 	ldr.w	fp, [pc, #328]	; 800f734 <_svfprintf_r+0xd6c>
 800f5ee:	f8c4 b000 	str.w	fp, [r4]
 800f5f2:	2e10      	cmp	r6, #16
 800f5f4:	dc5c      	bgt.n	800f6b0 <_svfprintf_r+0xce8>
 800f5f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f5f8:	6066      	str	r6, [r4, #4]
 800f5fa:	441e      	add	r6, r3
 800f5fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f5fe:	9623      	str	r6, [sp, #140]	; 0x8c
 800f600:	3301      	adds	r3, #1
 800f602:	2b07      	cmp	r3, #7
 800f604:	9322      	str	r3, [sp, #136]	; 0x88
 800f606:	dc6a      	bgt.n	800f6de <_svfprintf_r+0xd16>
 800f608:	3408      	adds	r4, #8
 800f60a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f60c:	9a07      	ldr	r2, [sp, #28]
 800f60e:	4293      	cmp	r3, r2
 800f610:	db01      	blt.n	800f616 <_svfprintf_r+0xc4e>
 800f612:	07e9      	lsls	r1, r5, #31
 800f614:	d50d      	bpl.n	800f632 <_svfprintf_r+0xc6a>
 800f616:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f618:	6023      	str	r3, [r4, #0]
 800f61a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f61c:	6063      	str	r3, [r4, #4]
 800f61e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f620:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f622:	4413      	add	r3, r2
 800f624:	9323      	str	r3, [sp, #140]	; 0x8c
 800f626:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f628:	3301      	adds	r3, #1
 800f62a:	2b07      	cmp	r3, #7
 800f62c:	9322      	str	r3, [sp, #136]	; 0x88
 800f62e:	dc60      	bgt.n	800f6f2 <_svfprintf_r+0xd2a>
 800f630:	3408      	adds	r4, #8
 800f632:	9b07      	ldr	r3, [sp, #28]
 800f634:	9a07      	ldr	r2, [sp, #28]
 800f636:	1bde      	subs	r6, r3, r7
 800f638:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f63a:	1ad3      	subs	r3, r2, r3
 800f63c:	429e      	cmp	r6, r3
 800f63e:	bfa8      	it	ge
 800f640:	461e      	movge	r6, r3
 800f642:	2e00      	cmp	r6, #0
 800f644:	dd0b      	ble.n	800f65e <_svfprintf_r+0xc96>
 800f646:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f648:	6066      	str	r6, [r4, #4]
 800f64a:	4433      	add	r3, r6
 800f64c:	9323      	str	r3, [sp, #140]	; 0x8c
 800f64e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f650:	3301      	adds	r3, #1
 800f652:	4447      	add	r7, r8
 800f654:	2b07      	cmp	r3, #7
 800f656:	6027      	str	r7, [r4, #0]
 800f658:	9322      	str	r3, [sp, #136]	; 0x88
 800f65a:	dc54      	bgt.n	800f706 <_svfprintf_r+0xd3e>
 800f65c:	3408      	adds	r4, #8
 800f65e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f660:	9a07      	ldr	r2, [sp, #28]
 800f662:	2e00      	cmp	r6, #0
 800f664:	eba2 0303 	sub.w	r3, r2, r3
 800f668:	bfac      	ite	ge
 800f66a:	1b9e      	subge	r6, r3, r6
 800f66c:	461e      	movlt	r6, r3
 800f66e:	2e00      	cmp	r6, #0
 800f670:	f77f acd7 	ble.w	800f022 <_svfprintf_r+0x65a>
 800f674:	4f2f      	ldr	r7, [pc, #188]	; (800f734 <_svfprintf_r+0xd6c>)
 800f676:	f04f 0810 	mov.w	r8, #16
 800f67a:	2e10      	cmp	r6, #16
 800f67c:	6027      	str	r7, [r4, #0]
 800f67e:	f77f aee7 	ble.w	800f450 <_svfprintf_r+0xa88>
 800f682:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f684:	f8c4 8004 	str.w	r8, [r4, #4]
 800f688:	3310      	adds	r3, #16
 800f68a:	9323      	str	r3, [sp, #140]	; 0x8c
 800f68c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f68e:	3301      	adds	r3, #1
 800f690:	2b07      	cmp	r3, #7
 800f692:	9322      	str	r3, [sp, #136]	; 0x88
 800f694:	dc41      	bgt.n	800f71a <_svfprintf_r+0xd52>
 800f696:	3408      	adds	r4, #8
 800f698:	3e10      	subs	r6, #16
 800f69a:	e7ee      	b.n	800f67a <_svfprintf_r+0xcb2>
 800f69c:	aa21      	add	r2, sp, #132	; 0x84
 800f69e:	4649      	mov	r1, r9
 800f6a0:	4650      	mov	r0, sl
 800f6a2:	f004 faa9 	bl	8013bf8 <__ssprint_r>
 800f6a6:	2800      	cmp	r0, #0
 800f6a8:	f040 80eb 	bne.w	800f882 <_svfprintf_r+0xeba>
 800f6ac:	ac2e      	add	r4, sp, #184	; 0xb8
 800f6ae:	e796      	b.n	800f5de <_svfprintf_r+0xc16>
 800f6b0:	2310      	movs	r3, #16
 800f6b2:	6063      	str	r3, [r4, #4]
 800f6b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f6b6:	3310      	adds	r3, #16
 800f6b8:	9323      	str	r3, [sp, #140]	; 0x8c
 800f6ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f6bc:	3301      	adds	r3, #1
 800f6be:	2b07      	cmp	r3, #7
 800f6c0:	9322      	str	r3, [sp, #136]	; 0x88
 800f6c2:	dc02      	bgt.n	800f6ca <_svfprintf_r+0xd02>
 800f6c4:	3408      	adds	r4, #8
 800f6c6:	3e10      	subs	r6, #16
 800f6c8:	e791      	b.n	800f5ee <_svfprintf_r+0xc26>
 800f6ca:	aa21      	add	r2, sp, #132	; 0x84
 800f6cc:	4649      	mov	r1, r9
 800f6ce:	4650      	mov	r0, sl
 800f6d0:	f004 fa92 	bl	8013bf8 <__ssprint_r>
 800f6d4:	2800      	cmp	r0, #0
 800f6d6:	f040 80d4 	bne.w	800f882 <_svfprintf_r+0xeba>
 800f6da:	ac2e      	add	r4, sp, #184	; 0xb8
 800f6dc:	e7f3      	b.n	800f6c6 <_svfprintf_r+0xcfe>
 800f6de:	aa21      	add	r2, sp, #132	; 0x84
 800f6e0:	4649      	mov	r1, r9
 800f6e2:	4650      	mov	r0, sl
 800f6e4:	f004 fa88 	bl	8013bf8 <__ssprint_r>
 800f6e8:	2800      	cmp	r0, #0
 800f6ea:	f040 80ca 	bne.w	800f882 <_svfprintf_r+0xeba>
 800f6ee:	ac2e      	add	r4, sp, #184	; 0xb8
 800f6f0:	e78b      	b.n	800f60a <_svfprintf_r+0xc42>
 800f6f2:	aa21      	add	r2, sp, #132	; 0x84
 800f6f4:	4649      	mov	r1, r9
 800f6f6:	4650      	mov	r0, sl
 800f6f8:	f004 fa7e 	bl	8013bf8 <__ssprint_r>
 800f6fc:	2800      	cmp	r0, #0
 800f6fe:	f040 80c0 	bne.w	800f882 <_svfprintf_r+0xeba>
 800f702:	ac2e      	add	r4, sp, #184	; 0xb8
 800f704:	e795      	b.n	800f632 <_svfprintf_r+0xc6a>
 800f706:	aa21      	add	r2, sp, #132	; 0x84
 800f708:	4649      	mov	r1, r9
 800f70a:	4650      	mov	r0, sl
 800f70c:	f004 fa74 	bl	8013bf8 <__ssprint_r>
 800f710:	2800      	cmp	r0, #0
 800f712:	f040 80b6 	bne.w	800f882 <_svfprintf_r+0xeba>
 800f716:	ac2e      	add	r4, sp, #184	; 0xb8
 800f718:	e7a1      	b.n	800f65e <_svfprintf_r+0xc96>
 800f71a:	aa21      	add	r2, sp, #132	; 0x84
 800f71c:	4649      	mov	r1, r9
 800f71e:	4650      	mov	r0, sl
 800f720:	f004 fa6a 	bl	8013bf8 <__ssprint_r>
 800f724:	2800      	cmp	r0, #0
 800f726:	f040 80ac 	bne.w	800f882 <_svfprintf_r+0xeba>
 800f72a:	ac2e      	add	r4, sp, #184	; 0xb8
 800f72c:	e7b4      	b.n	800f698 <_svfprintf_r+0xcd0>
 800f72e:	bf00      	nop
 800f730:	0801557a 	.word	0x0801557a
 800f734:	0801558c 	.word	0x0801558c
 800f738:	9b07      	ldr	r3, [sp, #28]
 800f73a:	2b01      	cmp	r3, #1
 800f73c:	dc01      	bgt.n	800f742 <_svfprintf_r+0xd7a>
 800f73e:	07ea      	lsls	r2, r5, #31
 800f740:	d576      	bpl.n	800f830 <_svfprintf_r+0xe68>
 800f742:	2301      	movs	r3, #1
 800f744:	6063      	str	r3, [r4, #4]
 800f746:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f748:	f8c4 8000 	str.w	r8, [r4]
 800f74c:	3301      	adds	r3, #1
 800f74e:	9323      	str	r3, [sp, #140]	; 0x8c
 800f750:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f752:	3301      	adds	r3, #1
 800f754:	2b07      	cmp	r3, #7
 800f756:	9322      	str	r3, [sp, #136]	; 0x88
 800f758:	dc36      	bgt.n	800f7c8 <_svfprintf_r+0xe00>
 800f75a:	3408      	adds	r4, #8
 800f75c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f75e:	6023      	str	r3, [r4, #0]
 800f760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f762:	6063      	str	r3, [r4, #4]
 800f764:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f766:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f768:	4413      	add	r3, r2
 800f76a:	9323      	str	r3, [sp, #140]	; 0x8c
 800f76c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f76e:	3301      	adds	r3, #1
 800f770:	2b07      	cmp	r3, #7
 800f772:	9322      	str	r3, [sp, #136]	; 0x88
 800f774:	dc31      	bgt.n	800f7da <_svfprintf_r+0xe12>
 800f776:	3408      	adds	r4, #8
 800f778:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f77a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f77c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f77e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f780:	f7f1 f9ae 	bl	8000ae0 <__aeabi_dcmpeq>
 800f784:	9b07      	ldr	r3, [sp, #28]
 800f786:	1e5e      	subs	r6, r3, #1
 800f788:	2800      	cmp	r0, #0
 800f78a:	d12f      	bne.n	800f7ec <_svfprintf_r+0xe24>
 800f78c:	f108 0301 	add.w	r3, r8, #1
 800f790:	e884 0048 	stmia.w	r4, {r3, r6}
 800f794:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f796:	9a07      	ldr	r2, [sp, #28]
 800f798:	3b01      	subs	r3, #1
 800f79a:	4413      	add	r3, r2
 800f79c:	9323      	str	r3, [sp, #140]	; 0x8c
 800f79e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f7a0:	3301      	adds	r3, #1
 800f7a2:	2b07      	cmp	r3, #7
 800f7a4:	9322      	str	r3, [sp, #136]	; 0x88
 800f7a6:	dd4a      	ble.n	800f83e <_svfprintf_r+0xe76>
 800f7a8:	aa21      	add	r2, sp, #132	; 0x84
 800f7aa:	4649      	mov	r1, r9
 800f7ac:	4650      	mov	r0, sl
 800f7ae:	f004 fa23 	bl	8013bf8 <__ssprint_r>
 800f7b2:	2800      	cmp	r0, #0
 800f7b4:	d165      	bne.n	800f882 <_svfprintf_r+0xeba>
 800f7b6:	ac2e      	add	r4, sp, #184	; 0xb8
 800f7b8:	ab1d      	add	r3, sp, #116	; 0x74
 800f7ba:	6023      	str	r3, [r4, #0]
 800f7bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f7be:	6063      	str	r3, [r4, #4]
 800f7c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f7c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f7c4:	4413      	add	r3, r2
 800f7c6:	e41c      	b.n	800f002 <_svfprintf_r+0x63a>
 800f7c8:	aa21      	add	r2, sp, #132	; 0x84
 800f7ca:	4649      	mov	r1, r9
 800f7cc:	4650      	mov	r0, sl
 800f7ce:	f004 fa13 	bl	8013bf8 <__ssprint_r>
 800f7d2:	2800      	cmp	r0, #0
 800f7d4:	d155      	bne.n	800f882 <_svfprintf_r+0xeba>
 800f7d6:	ac2e      	add	r4, sp, #184	; 0xb8
 800f7d8:	e7c0      	b.n	800f75c <_svfprintf_r+0xd94>
 800f7da:	aa21      	add	r2, sp, #132	; 0x84
 800f7dc:	4649      	mov	r1, r9
 800f7de:	4650      	mov	r0, sl
 800f7e0:	f004 fa0a 	bl	8013bf8 <__ssprint_r>
 800f7e4:	2800      	cmp	r0, #0
 800f7e6:	d14c      	bne.n	800f882 <_svfprintf_r+0xeba>
 800f7e8:	ac2e      	add	r4, sp, #184	; 0xb8
 800f7ea:	e7c5      	b.n	800f778 <_svfprintf_r+0xdb0>
 800f7ec:	2e00      	cmp	r6, #0
 800f7ee:	dde3      	ble.n	800f7b8 <_svfprintf_r+0xdf0>
 800f7f0:	4f59      	ldr	r7, [pc, #356]	; (800f958 <_svfprintf_r+0xf90>)
 800f7f2:	f04f 0810 	mov.w	r8, #16
 800f7f6:	2e10      	cmp	r6, #16
 800f7f8:	6027      	str	r7, [r4, #0]
 800f7fa:	dc04      	bgt.n	800f806 <_svfprintf_r+0xe3e>
 800f7fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f7fe:	6066      	str	r6, [r4, #4]
 800f800:	441e      	add	r6, r3
 800f802:	9623      	str	r6, [sp, #140]	; 0x8c
 800f804:	e7cb      	b.n	800f79e <_svfprintf_r+0xdd6>
 800f806:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f808:	f8c4 8004 	str.w	r8, [r4, #4]
 800f80c:	3310      	adds	r3, #16
 800f80e:	9323      	str	r3, [sp, #140]	; 0x8c
 800f810:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f812:	3301      	adds	r3, #1
 800f814:	2b07      	cmp	r3, #7
 800f816:	9322      	str	r3, [sp, #136]	; 0x88
 800f818:	dc02      	bgt.n	800f820 <_svfprintf_r+0xe58>
 800f81a:	3408      	adds	r4, #8
 800f81c:	3e10      	subs	r6, #16
 800f81e:	e7ea      	b.n	800f7f6 <_svfprintf_r+0xe2e>
 800f820:	aa21      	add	r2, sp, #132	; 0x84
 800f822:	4649      	mov	r1, r9
 800f824:	4650      	mov	r0, sl
 800f826:	f004 f9e7 	bl	8013bf8 <__ssprint_r>
 800f82a:	bb50      	cbnz	r0, 800f882 <_svfprintf_r+0xeba>
 800f82c:	ac2e      	add	r4, sp, #184	; 0xb8
 800f82e:	e7f5      	b.n	800f81c <_svfprintf_r+0xe54>
 800f830:	2301      	movs	r3, #1
 800f832:	6063      	str	r3, [r4, #4]
 800f834:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f836:	f8c4 8000 	str.w	r8, [r4]
 800f83a:	3301      	adds	r3, #1
 800f83c:	e7ae      	b.n	800f79c <_svfprintf_r+0xdd4>
 800f83e:	3408      	adds	r4, #8
 800f840:	e7ba      	b.n	800f7b8 <_svfprintf_r+0xdf0>
 800f842:	3408      	adds	r4, #8
 800f844:	f7ff bbed 	b.w	800f022 <_svfprintf_r+0x65a>
 800f848:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f84a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f84c:	1a9d      	subs	r5, r3, r2
 800f84e:	2d00      	cmp	r5, #0
 800f850:	f77f abea 	ble.w	800f028 <_svfprintf_r+0x660>
 800f854:	2610      	movs	r6, #16
 800f856:	4b41      	ldr	r3, [pc, #260]	; (800f95c <_svfprintf_r+0xf94>)
 800f858:	6023      	str	r3, [r4, #0]
 800f85a:	2d10      	cmp	r5, #16
 800f85c:	dc1b      	bgt.n	800f896 <_svfprintf_r+0xece>
 800f85e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f860:	6065      	str	r5, [r4, #4]
 800f862:	441d      	add	r5, r3
 800f864:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f866:	9523      	str	r5, [sp, #140]	; 0x8c
 800f868:	3301      	adds	r3, #1
 800f86a:	2b07      	cmp	r3, #7
 800f86c:	9322      	str	r3, [sp, #136]	; 0x88
 800f86e:	f77f abdb 	ble.w	800f028 <_svfprintf_r+0x660>
 800f872:	aa21      	add	r2, sp, #132	; 0x84
 800f874:	4649      	mov	r1, r9
 800f876:	4650      	mov	r0, sl
 800f878:	f004 f9be 	bl	8013bf8 <__ssprint_r>
 800f87c:	2800      	cmp	r0, #0
 800f87e:	f43f abd3 	beq.w	800f028 <_svfprintf_r+0x660>
 800f882:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800f886:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f88a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f88c:	bf18      	it	ne
 800f88e:	f04f 33ff 	movne.w	r3, #4294967295
 800f892:	f7ff b8bd 	b.w	800ea10 <_svfprintf_r+0x48>
 800f896:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f898:	6066      	str	r6, [r4, #4]
 800f89a:	3310      	adds	r3, #16
 800f89c:	9323      	str	r3, [sp, #140]	; 0x8c
 800f89e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f8a0:	3301      	adds	r3, #1
 800f8a2:	2b07      	cmp	r3, #7
 800f8a4:	9322      	str	r3, [sp, #136]	; 0x88
 800f8a6:	dc02      	bgt.n	800f8ae <_svfprintf_r+0xee6>
 800f8a8:	3408      	adds	r4, #8
 800f8aa:	3d10      	subs	r5, #16
 800f8ac:	e7d3      	b.n	800f856 <_svfprintf_r+0xe8e>
 800f8ae:	aa21      	add	r2, sp, #132	; 0x84
 800f8b0:	4649      	mov	r1, r9
 800f8b2:	4650      	mov	r0, sl
 800f8b4:	f004 f9a0 	bl	8013bf8 <__ssprint_r>
 800f8b8:	2800      	cmp	r0, #0
 800f8ba:	d1e2      	bne.n	800f882 <_svfprintf_r+0xeba>
 800f8bc:	ac2e      	add	r4, sp, #184	; 0xb8
 800f8be:	e7f4      	b.n	800f8aa <_svfprintf_r+0xee2>
 800f8c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d0dd      	beq.n	800f882 <_svfprintf_r+0xeba>
 800f8c6:	aa21      	add	r2, sp, #132	; 0x84
 800f8c8:	4649      	mov	r1, r9
 800f8ca:	4650      	mov	r0, sl
 800f8cc:	f004 f994 	bl	8013bf8 <__ssprint_r>
 800f8d0:	e7d7      	b.n	800f882 <_svfprintf_r+0xeba>
 800f8d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f8d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f8d6:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f8d8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f8da:	f7f1 f933 	bl	8000b44 <__aeabi_dcmpun>
 800f8de:	2800      	cmp	r0, #0
 800f8e0:	f43f aa3f 	beq.w	800ed62 <_svfprintf_r+0x39a>
 800f8e4:	4b1e      	ldr	r3, [pc, #120]	; (800f960 <_svfprintf_r+0xf98>)
 800f8e6:	4a1f      	ldr	r2, [pc, #124]	; (800f964 <_svfprintf_r+0xf9c>)
 800f8e8:	f7ff ba2f 	b.w	800ed4a <_svfprintf_r+0x382>
 800f8ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f8ee:	eba3 0308 	sub.w	r3, r3, r8
 800f8f2:	9307      	str	r3, [sp, #28]
 800f8f4:	f7ff bab1 	b.w	800ee5a <_svfprintf_r+0x492>
 800f8f8:	ea56 0207 	orrs.w	r2, r6, r7
 800f8fc:	950f      	str	r5, [sp, #60]	; 0x3c
 800f8fe:	f43f ac2b 	beq.w	800f158 <_svfprintf_r+0x790>
 800f902:	2b01      	cmp	r3, #1
 800f904:	f43f ac9d 	beq.w	800f242 <_svfprintf_r+0x87a>
 800f908:	2b02      	cmp	r3, #2
 800f90a:	f43f acbd 	beq.w	800f288 <_svfprintf_r+0x8c0>
 800f90e:	ab2e      	add	r3, sp, #184	; 0xb8
 800f910:	08f1      	lsrs	r1, r6, #3
 800f912:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800f916:	08f8      	lsrs	r0, r7, #3
 800f918:	f006 0207 	and.w	r2, r6, #7
 800f91c:	4607      	mov	r7, r0
 800f91e:	460e      	mov	r6, r1
 800f920:	3230      	adds	r2, #48	; 0x30
 800f922:	ea56 0107 	orrs.w	r1, r6, r7
 800f926:	f103 38ff 	add.w	r8, r3, #4294967295
 800f92a:	f803 2c01 	strb.w	r2, [r3, #-1]
 800f92e:	f47f ac86 	bne.w	800f23e <_svfprintf_r+0x876>
 800f932:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f934:	07c9      	lsls	r1, r1, #31
 800f936:	d506      	bpl.n	800f946 <_svfprintf_r+0xf7e>
 800f938:	2a30      	cmp	r2, #48	; 0x30
 800f93a:	d004      	beq.n	800f946 <_svfprintf_r+0xf7e>
 800f93c:	2230      	movs	r2, #48	; 0x30
 800f93e:	f808 2c01 	strb.w	r2, [r8, #-1]
 800f942:	f1a3 0802 	sub.w	r8, r3, #2
 800f946:	ab2e      	add	r3, sp, #184	; 0xb8
 800f948:	465e      	mov	r6, fp
 800f94a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f94c:	eba3 0b08 	sub.w	fp, r3, r8
 800f950:	2700      	movs	r7, #0
 800f952:	f7ff bace 	b.w	800eef2 <_svfprintf_r+0x52a>
 800f956:	bf00      	nop
 800f958:	0801558c 	.word	0x0801558c
 800f95c:	0801557c 	.word	0x0801557c
 800f960:	08015550 	.word	0x08015550
 800f964:	08015554 	.word	0x08015554

0800f968 <time>:
 800f968:	b513      	push	{r0, r1, r4, lr}
 800f96a:	4b08      	ldr	r3, [pc, #32]	; (800f98c <time+0x24>)
 800f96c:	4604      	mov	r4, r0
 800f96e:	2200      	movs	r2, #0
 800f970:	6818      	ldr	r0, [r3, #0]
 800f972:	4669      	mov	r1, sp
 800f974:	f003 f92c 	bl	8012bd0 <_gettimeofday_r>
 800f978:	2800      	cmp	r0, #0
 800f97a:	bfbc      	itt	lt
 800f97c:	f04f 33ff 	movlt.w	r3, #4294967295
 800f980:	9300      	strlt	r3, [sp, #0]
 800f982:	9800      	ldr	r0, [sp, #0]
 800f984:	b104      	cbz	r4, 800f988 <time+0x20>
 800f986:	6020      	str	r0, [r4, #0]
 800f988:	b002      	add	sp, #8
 800f98a:	bd10      	pop	{r4, pc}
 800f98c:	20000014 	.word	0x20000014

0800f990 <__tzcalc_limits>:
 800f990:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f994:	4604      	mov	r4, r0
 800f996:	f003 f92d 	bl	8012bf4 <__gettzinfo>
 800f99a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800f99e:	429c      	cmp	r4, r3
 800f9a0:	f340 8098 	ble.w	800fad4 <__tzcalc_limits+0x144>
 800f9a4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 800f9a8:	18e3      	adds	r3, r4, r3
 800f9aa:	109b      	asrs	r3, r3, #2
 800f9ac:	f240 126d 	movw	r2, #365	; 0x16d
 800f9b0:	f2a4 75b2 	subw	r5, r4, #1970	; 0x7b2
 800f9b4:	fb02 3505 	mla	r5, r2, r5, r3
 800f9b8:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800f9bc:	f2a4 736d 	subw	r3, r4, #1901	; 0x76d
 800f9c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800f9c4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 800f9c8:	441d      	add	r5, r3
 800f9ca:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800f9ce:	18a2      	adds	r2, r4, r2
 800f9d0:	fb94 f7f3 	sdiv	r7, r4, r3
 800f9d4:	fb92 f2f3 	sdiv	r2, r2, r3
 800f9d8:	fb03 4717 	mls	r7, r3, r7, r4
 800f9dc:	f100 0338 	add.w	r3, r0, #56	; 0x38
 800f9e0:	4415      	add	r5, r2
 800f9e2:	fab7 fe87 	clz	lr, r7
 800f9e6:	2264      	movs	r2, #100	; 0x64
 800f9e8:	9301      	str	r3, [sp, #4]
 800f9ea:	f004 0303 	and.w	r3, r4, #3
 800f9ee:	fb94 f6f2 	sdiv	r6, r4, r2
 800f9f2:	6044      	str	r4, [r0, #4]
 800f9f4:	fb02 4616 	mls	r6, r2, r6, r4
 800f9f8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 800f9fc:	4601      	mov	r1, r0
 800f9fe:	9300      	str	r3, [sp, #0]
 800fa00:	f06f 4c40 	mvn.w	ip, #3221225472	; 0xc0000000
 800fa04:	7a0b      	ldrb	r3, [r1, #8]
 800fa06:	2b4a      	cmp	r3, #74	; 0x4a
 800fa08:	d123      	bne.n	800fa52 <__tzcalc_limits+0xc2>
 800fa0a:	694c      	ldr	r4, [r1, #20]
 800fa0c:	9a00      	ldr	r2, [sp, #0]
 800fa0e:	192b      	adds	r3, r5, r4
 800fa10:	b902      	cbnz	r2, 800fa14 <__tzcalc_limits+0x84>
 800fa12:	b906      	cbnz	r6, 800fa16 <__tzcalc_limits+0x86>
 800fa14:	b9df      	cbnz	r7, 800fa4e <__tzcalc_limits+0xbe>
 800fa16:	2c3b      	cmp	r4, #59	; 0x3b
 800fa18:	bfd4      	ite	le
 800fa1a:	2400      	movle	r4, #0
 800fa1c:	2401      	movgt	r4, #1
 800fa1e:	441c      	add	r4, r3
 800fa20:	3c01      	subs	r4, #1
 800fa22:	4b2d      	ldr	r3, [pc, #180]	; (800fad8 <__tzcalc_limits+0x148>)
 800fa24:	698a      	ldr	r2, [r1, #24]
 800fa26:	fb03 2404 	mla	r4, r3, r4, r2
 800fa2a:	6a0b      	ldr	r3, [r1, #32]
 800fa2c:	441c      	add	r4, r3
 800fa2e:	f841 4f1c 	str.w	r4, [r1, #28]!
 800fa32:	9b01      	ldr	r3, [sp, #4]
 800fa34:	428b      	cmp	r3, r1
 800fa36:	d1e5      	bne.n	800fa04 <__tzcalc_limits+0x74>
 800fa38:	69c3      	ldr	r3, [r0, #28]
 800fa3a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800fa3c:	4293      	cmp	r3, r2
 800fa3e:	bfac      	ite	ge
 800fa40:	2300      	movge	r3, #0
 800fa42:	2301      	movlt	r3, #1
 800fa44:	6003      	str	r3, [r0, #0]
 800fa46:	2001      	movs	r0, #1
 800fa48:	b003      	add	sp, #12
 800fa4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa4e:	2400      	movs	r4, #0
 800fa50:	e7e5      	b.n	800fa1e <__tzcalc_limits+0x8e>
 800fa52:	2b44      	cmp	r3, #68	; 0x44
 800fa54:	d102      	bne.n	800fa5c <__tzcalc_limits+0xcc>
 800fa56:	694b      	ldr	r3, [r1, #20]
 800fa58:	18ec      	adds	r4, r5, r3
 800fa5a:	e7e2      	b.n	800fa22 <__tzcalc_limits+0x92>
 800fa5c:	9b00      	ldr	r3, [sp, #0]
 800fa5e:	bb7b      	cbnz	r3, 800fac0 <__tzcalc_limits+0x130>
 800fa60:	2e00      	cmp	r6, #0
 800fa62:	bf0c      	ite	eq
 800fa64:	46f0      	moveq	r8, lr
 800fa66:	f04f 0801 	movne.w	r8, #1
 800fa6a:	4b1c      	ldr	r3, [pc, #112]	; (800fadc <__tzcalc_limits+0x14c>)
 800fa6c:	68cc      	ldr	r4, [r1, #12]
 800fa6e:	2230      	movs	r2, #48	; 0x30
 800fa70:	fb02 3808 	mla	r8, r2, r8, r3
 800fa74:	f1a8 0a04 	sub.w	sl, r8, #4
 800fa78:	462b      	mov	r3, r5
 800fa7a:	f04f 0901 	mov.w	r9, #1
 800fa7e:	45a1      	cmp	r9, r4
 800fa80:	db20      	blt.n	800fac4 <__tzcalc_limits+0x134>
 800fa82:	2c01      	cmp	r4, #1
 800fa84:	bfb8      	it	lt
 800fa86:	2401      	movlt	r4, #1
 800fa88:	46a1      	mov	r9, r4
 800fa8a:	f103 0b04 	add.w	fp, r3, #4
 800fa8e:	2207      	movs	r2, #7
 800fa90:	694c      	ldr	r4, [r1, #20]
 800fa92:	fb9b faf2 	sdiv	sl, fp, r2
 800fa96:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 800fa9a:	ebab 0a0a 	sub.w	sl, fp, sl
 800fa9e:	ebb4 0a0a 	subs.w	sl, r4, sl
 800faa2:	690c      	ldr	r4, [r1, #16]
 800faa4:	44e1      	add	r9, ip
 800faa6:	f104 34ff 	add.w	r4, r4, #4294967295
 800faaa:	bf48      	it	mi
 800faac:	4492      	addmi	sl, r2
 800faae:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800fab2:	f858 8029 	ldr.w	r8, [r8, r9, lsl #2]
 800fab6:	4454      	add	r4, sl
 800fab8:	4544      	cmp	r4, r8
 800faba:	da09      	bge.n	800fad0 <__tzcalc_limits+0x140>
 800fabc:	441c      	add	r4, r3
 800fabe:	e7b0      	b.n	800fa22 <__tzcalc_limits+0x92>
 800fac0:	46f0      	mov	r8, lr
 800fac2:	e7d2      	b.n	800fa6a <__tzcalc_limits+0xda>
 800fac4:	f85a bf04 	ldr.w	fp, [sl, #4]!
 800fac8:	f109 0901 	add.w	r9, r9, #1
 800facc:	445b      	add	r3, fp
 800face:	e7d6      	b.n	800fa7e <__tzcalc_limits+0xee>
 800fad0:	3c07      	subs	r4, #7
 800fad2:	e7f1      	b.n	800fab8 <__tzcalc_limits+0x128>
 800fad4:	2000      	movs	r0, #0
 800fad6:	e7b7      	b.n	800fa48 <__tzcalc_limits+0xb8>
 800fad8:	00015180 	.word	0x00015180
 800fadc:	08015490 	.word	0x08015490

0800fae0 <__tz_lock>:
 800fae0:	4801      	ldr	r0, [pc, #4]	; (800fae8 <__tz_lock+0x8>)
 800fae2:	f003 b957 	b.w	8012d94 <__retarget_lock_acquire>
 800fae6:	bf00      	nop
 800fae8:	200037e3 	.word	0x200037e3

0800faec <__tz_unlock>:
 800faec:	4801      	ldr	r0, [pc, #4]	; (800faf4 <__tz_unlock+0x8>)
 800faee:	f003 b953 	b.w	8012d98 <__retarget_lock_release>
 800faf2:	bf00      	nop
 800faf4:	200037e3 	.word	0x200037e3

0800faf8 <_tzset_unlocked>:
 800faf8:	4b01      	ldr	r3, [pc, #4]	; (800fb00 <_tzset_unlocked+0x8>)
 800fafa:	6818      	ldr	r0, [r3, #0]
 800fafc:	f000 b802 	b.w	800fb04 <_tzset_unlocked_r>
 800fb00:	20000014 	.word	0x20000014

0800fb04 <_tzset_unlocked_r>:
 800fb04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb08:	b08d      	sub	sp, #52	; 0x34
 800fb0a:	4607      	mov	r7, r0
 800fb0c:	f003 f872 	bl	8012bf4 <__gettzinfo>
 800fb10:	49b1      	ldr	r1, [pc, #708]	; (800fdd8 <_tzset_unlocked_r+0x2d4>)
 800fb12:	4eb2      	ldr	r6, [pc, #712]	; (800fddc <_tzset_unlocked_r+0x2d8>)
 800fb14:	4605      	mov	r5, r0
 800fb16:	4638      	mov	r0, r7
 800fb18:	f003 f852 	bl	8012bc0 <_getenv_r>
 800fb1c:	4604      	mov	r4, r0
 800fb1e:	b970      	cbnz	r0, 800fb3e <_tzset_unlocked_r+0x3a>
 800fb20:	4baf      	ldr	r3, [pc, #700]	; (800fde0 <_tzset_unlocked_r+0x2dc>)
 800fb22:	4ab0      	ldr	r2, [pc, #704]	; (800fde4 <_tzset_unlocked_r+0x2e0>)
 800fb24:	6018      	str	r0, [r3, #0]
 800fb26:	4bb0      	ldr	r3, [pc, #704]	; (800fde8 <_tzset_unlocked_r+0x2e4>)
 800fb28:	6018      	str	r0, [r3, #0]
 800fb2a:	4bb0      	ldr	r3, [pc, #704]	; (800fdec <_tzset_unlocked_r+0x2e8>)
 800fb2c:	6830      	ldr	r0, [r6, #0]
 800fb2e:	601a      	str	r2, [r3, #0]
 800fb30:	605a      	str	r2, [r3, #4]
 800fb32:	f7fd f9f9 	bl	800cf28 <free>
 800fb36:	6034      	str	r4, [r6, #0]
 800fb38:	b00d      	add	sp, #52	; 0x34
 800fb3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb3e:	6831      	ldr	r1, [r6, #0]
 800fb40:	2900      	cmp	r1, #0
 800fb42:	d160      	bne.n	800fc06 <_tzset_unlocked_r+0x102>
 800fb44:	6830      	ldr	r0, [r6, #0]
 800fb46:	f7fd f9ef 	bl	800cf28 <free>
 800fb4a:	4620      	mov	r0, r4
 800fb4c:	f7f0 fb4a 	bl	80001e4 <strlen>
 800fb50:	1c41      	adds	r1, r0, #1
 800fb52:	4638      	mov	r0, r7
 800fb54:	f7fd f9f0 	bl	800cf38 <_malloc_r>
 800fb58:	6030      	str	r0, [r6, #0]
 800fb5a:	2800      	cmp	r0, #0
 800fb5c:	d158      	bne.n	800fc10 <_tzset_unlocked_r+0x10c>
 800fb5e:	7823      	ldrb	r3, [r4, #0]
 800fb60:	4aa3      	ldr	r2, [pc, #652]	; (800fdf0 <_tzset_unlocked_r+0x2ec>)
 800fb62:	49a4      	ldr	r1, [pc, #656]	; (800fdf4 <_tzset_unlocked_r+0x2f0>)
 800fb64:	2b3a      	cmp	r3, #58	; 0x3a
 800fb66:	bf08      	it	eq
 800fb68:	3401      	addeq	r4, #1
 800fb6a:	ae0a      	add	r6, sp, #40	; 0x28
 800fb6c:	4633      	mov	r3, r6
 800fb6e:	4620      	mov	r0, r4
 800fb70:	f003 ff14 	bl	801399c <siscanf>
 800fb74:	2800      	cmp	r0, #0
 800fb76:	dddf      	ble.n	800fb38 <_tzset_unlocked_r+0x34>
 800fb78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb7a:	18e7      	adds	r7, r4, r3
 800fb7c:	5ce3      	ldrb	r3, [r4, r3]
 800fb7e:	2b2d      	cmp	r3, #45	; 0x2d
 800fb80:	d14a      	bne.n	800fc18 <_tzset_unlocked_r+0x114>
 800fb82:	3701      	adds	r7, #1
 800fb84:	f04f 34ff 	mov.w	r4, #4294967295
 800fb88:	f10d 0a20 	add.w	sl, sp, #32
 800fb8c:	f10d 0b1e 	add.w	fp, sp, #30
 800fb90:	f04f 0800 	mov.w	r8, #0
 800fb94:	9603      	str	r6, [sp, #12]
 800fb96:	f8cd a008 	str.w	sl, [sp, #8]
 800fb9a:	9601      	str	r6, [sp, #4]
 800fb9c:	f8cd b000 	str.w	fp, [sp]
 800fba0:	4633      	mov	r3, r6
 800fba2:	aa07      	add	r2, sp, #28
 800fba4:	4994      	ldr	r1, [pc, #592]	; (800fdf8 <_tzset_unlocked_r+0x2f4>)
 800fba6:	f8ad 801e 	strh.w	r8, [sp, #30]
 800fbaa:	4638      	mov	r0, r7
 800fbac:	f8ad 8020 	strh.w	r8, [sp, #32]
 800fbb0:	f003 fef4 	bl	801399c <siscanf>
 800fbb4:	4540      	cmp	r0, r8
 800fbb6:	ddbf      	ble.n	800fb38 <_tzset_unlocked_r+0x34>
 800fbb8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800fbbc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800fbc0:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800fe04 <_tzset_unlocked_r+0x300>
 800fbc4:	213c      	movs	r1, #60	; 0x3c
 800fbc6:	fb01 2203 	mla	r2, r1, r3, r2
 800fbca:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800fbce:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800fbd2:	fb01 2303 	mla	r3, r1, r3, r2
 800fbd6:	435c      	muls	r4, r3
 800fbd8:	622c      	str	r4, [r5, #32]
 800fbda:	4c84      	ldr	r4, [pc, #528]	; (800fdec <_tzset_unlocked_r+0x2e8>)
 800fbdc:	4b84      	ldr	r3, [pc, #528]	; (800fdf0 <_tzset_unlocked_r+0x2ec>)
 800fbde:	6023      	str	r3, [r4, #0]
 800fbe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fbe2:	4984      	ldr	r1, [pc, #528]	; (800fdf4 <_tzset_unlocked_r+0x2f0>)
 800fbe4:	441f      	add	r7, r3
 800fbe6:	464a      	mov	r2, r9
 800fbe8:	4633      	mov	r3, r6
 800fbea:	4638      	mov	r0, r7
 800fbec:	f003 fed6 	bl	801399c <siscanf>
 800fbf0:	4540      	cmp	r0, r8
 800fbf2:	dc16      	bgt.n	800fc22 <_tzset_unlocked_r+0x11e>
 800fbf4:	6823      	ldr	r3, [r4, #0]
 800fbf6:	6063      	str	r3, [r4, #4]
 800fbf8:	4b79      	ldr	r3, [pc, #484]	; (800fde0 <_tzset_unlocked_r+0x2dc>)
 800fbfa:	6a2a      	ldr	r2, [r5, #32]
 800fbfc:	601a      	str	r2, [r3, #0]
 800fbfe:	4b7a      	ldr	r3, [pc, #488]	; (800fde8 <_tzset_unlocked_r+0x2e4>)
 800fc00:	f8c3 8000 	str.w	r8, [r3]
 800fc04:	e798      	b.n	800fb38 <_tzset_unlocked_r+0x34>
 800fc06:	f7f0 fae3 	bl	80001d0 <strcmp>
 800fc0a:	2800      	cmp	r0, #0
 800fc0c:	d094      	beq.n	800fb38 <_tzset_unlocked_r+0x34>
 800fc0e:	e799      	b.n	800fb44 <_tzset_unlocked_r+0x40>
 800fc10:	4621      	mov	r1, r4
 800fc12:	f003 ff32 	bl	8013a7a <strcpy>
 800fc16:	e7a2      	b.n	800fb5e <_tzset_unlocked_r+0x5a>
 800fc18:	2b2b      	cmp	r3, #43	; 0x2b
 800fc1a:	bf08      	it	eq
 800fc1c:	3701      	addeq	r7, #1
 800fc1e:	2401      	movs	r4, #1
 800fc20:	e7b2      	b.n	800fb88 <_tzset_unlocked_r+0x84>
 800fc22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc24:	f8c4 9004 	str.w	r9, [r4, #4]
 800fc28:	18fc      	adds	r4, r7, r3
 800fc2a:	5cfb      	ldrb	r3, [r7, r3]
 800fc2c:	2b2d      	cmp	r3, #45	; 0x2d
 800fc2e:	f040 8092 	bne.w	800fd56 <_tzset_unlocked_r+0x252>
 800fc32:	3401      	adds	r4, #1
 800fc34:	f04f 37ff 	mov.w	r7, #4294967295
 800fc38:	2300      	movs	r3, #0
 800fc3a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800fc3e:	f8ad 301e 	strh.w	r3, [sp, #30]
 800fc42:	f8ad 3020 	strh.w	r3, [sp, #32]
 800fc46:	930a      	str	r3, [sp, #40]	; 0x28
 800fc48:	9603      	str	r6, [sp, #12]
 800fc4a:	f8cd a008 	str.w	sl, [sp, #8]
 800fc4e:	9601      	str	r6, [sp, #4]
 800fc50:	f8cd b000 	str.w	fp, [sp]
 800fc54:	4633      	mov	r3, r6
 800fc56:	aa07      	add	r2, sp, #28
 800fc58:	4967      	ldr	r1, [pc, #412]	; (800fdf8 <_tzset_unlocked_r+0x2f4>)
 800fc5a:	4620      	mov	r0, r4
 800fc5c:	f003 fe9e 	bl	801399c <siscanf>
 800fc60:	2800      	cmp	r0, #0
 800fc62:	dc7d      	bgt.n	800fd60 <_tzset_unlocked_r+0x25c>
 800fc64:	6a2b      	ldr	r3, [r5, #32]
 800fc66:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800fc6a:	63eb      	str	r3, [r5, #60]	; 0x3c
 800fc6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc6e:	462f      	mov	r7, r5
 800fc70:	441c      	add	r4, r3
 800fc72:	f04f 0900 	mov.w	r9, #0
 800fc76:	7823      	ldrb	r3, [r4, #0]
 800fc78:	2b2c      	cmp	r3, #44	; 0x2c
 800fc7a:	bf08      	it	eq
 800fc7c:	3401      	addeq	r4, #1
 800fc7e:	f894 8000 	ldrb.w	r8, [r4]
 800fc82:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800fc86:	d17b      	bne.n	800fd80 <_tzset_unlocked_r+0x27c>
 800fc88:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800fc8c:	9302      	str	r3, [sp, #8]
 800fc8e:	ab09      	add	r3, sp, #36	; 0x24
 800fc90:	9300      	str	r3, [sp, #0]
 800fc92:	9603      	str	r6, [sp, #12]
 800fc94:	9601      	str	r6, [sp, #4]
 800fc96:	4633      	mov	r3, r6
 800fc98:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800fc9c:	4957      	ldr	r1, [pc, #348]	; (800fdfc <_tzset_unlocked_r+0x2f8>)
 800fc9e:	4620      	mov	r0, r4
 800fca0:	f003 fe7c 	bl	801399c <siscanf>
 800fca4:	2803      	cmp	r0, #3
 800fca6:	f47f af47 	bne.w	800fb38 <_tzset_unlocked_r+0x34>
 800fcaa:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800fcae:	1e4b      	subs	r3, r1, #1
 800fcb0:	2b0b      	cmp	r3, #11
 800fcb2:	f63f af41 	bhi.w	800fb38 <_tzset_unlocked_r+0x34>
 800fcb6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800fcba:	1e53      	subs	r3, r2, #1
 800fcbc:	2b04      	cmp	r3, #4
 800fcbe:	f63f af3b 	bhi.w	800fb38 <_tzset_unlocked_r+0x34>
 800fcc2:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800fcc6:	2b06      	cmp	r3, #6
 800fcc8:	f63f af36 	bhi.w	800fb38 <_tzset_unlocked_r+0x34>
 800fccc:	f887 8008 	strb.w	r8, [r7, #8]
 800fcd0:	60f9      	str	r1, [r7, #12]
 800fcd2:	613a      	str	r2, [r7, #16]
 800fcd4:	617b      	str	r3, [r7, #20]
 800fcd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fcd8:	eb04 0803 	add.w	r8, r4, r3
 800fcdc:	2302      	movs	r3, #2
 800fcde:	f8ad 301c 	strh.w	r3, [sp, #28]
 800fce2:	2300      	movs	r3, #0
 800fce4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800fce8:	f8ad 3020 	strh.w	r3, [sp, #32]
 800fcec:	930a      	str	r3, [sp, #40]	; 0x28
 800fcee:	f898 3000 	ldrb.w	r3, [r8]
 800fcf2:	2b2f      	cmp	r3, #47	; 0x2f
 800fcf4:	d10b      	bne.n	800fd0e <_tzset_unlocked_r+0x20a>
 800fcf6:	9603      	str	r6, [sp, #12]
 800fcf8:	f8cd a008 	str.w	sl, [sp, #8]
 800fcfc:	9601      	str	r6, [sp, #4]
 800fcfe:	f8cd b000 	str.w	fp, [sp]
 800fd02:	4633      	mov	r3, r6
 800fd04:	aa07      	add	r2, sp, #28
 800fd06:	493e      	ldr	r1, [pc, #248]	; (800fe00 <_tzset_unlocked_r+0x2fc>)
 800fd08:	4640      	mov	r0, r8
 800fd0a:	f003 fe47 	bl	801399c <siscanf>
 800fd0e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800fd12:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800fd16:	213c      	movs	r1, #60	; 0x3c
 800fd18:	fb01 2203 	mla	r2, r1, r3, r2
 800fd1c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800fd20:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800fd24:	fb01 2303 	mla	r3, r1, r3, r2
 800fd28:	61bb      	str	r3, [r7, #24]
 800fd2a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800fd2c:	f109 0901 	add.w	r9, r9, #1
 800fd30:	f1b9 0f02 	cmp.w	r9, #2
 800fd34:	4444      	add	r4, r8
 800fd36:	f107 071c 	add.w	r7, r7, #28
 800fd3a:	d19c      	bne.n	800fc76 <_tzset_unlocked_r+0x172>
 800fd3c:	6868      	ldr	r0, [r5, #4]
 800fd3e:	f7ff fe27 	bl	800f990 <__tzcalc_limits>
 800fd42:	4b27      	ldr	r3, [pc, #156]	; (800fde0 <_tzset_unlocked_r+0x2dc>)
 800fd44:	6a2a      	ldr	r2, [r5, #32]
 800fd46:	601a      	str	r2, [r3, #0]
 800fd48:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800fd4a:	1a9b      	subs	r3, r3, r2
 800fd4c:	4a26      	ldr	r2, [pc, #152]	; (800fde8 <_tzset_unlocked_r+0x2e4>)
 800fd4e:	bf18      	it	ne
 800fd50:	2301      	movne	r3, #1
 800fd52:	6013      	str	r3, [r2, #0]
 800fd54:	e6f0      	b.n	800fb38 <_tzset_unlocked_r+0x34>
 800fd56:	2b2b      	cmp	r3, #43	; 0x2b
 800fd58:	bf08      	it	eq
 800fd5a:	3401      	addeq	r4, #1
 800fd5c:	2701      	movs	r7, #1
 800fd5e:	e76b      	b.n	800fc38 <_tzset_unlocked_r+0x134>
 800fd60:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800fd64:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800fd68:	213c      	movs	r1, #60	; 0x3c
 800fd6a:	fb01 2203 	mla	r2, r1, r3, r2
 800fd6e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800fd72:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800fd76:	fb01 2303 	mla	r3, r1, r3, r2
 800fd7a:	435f      	muls	r7, r3
 800fd7c:	63ef      	str	r7, [r5, #60]	; 0x3c
 800fd7e:	e775      	b.n	800fc6c <_tzset_unlocked_r+0x168>
 800fd80:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800fd84:	bf06      	itte	eq
 800fd86:	3401      	addeq	r4, #1
 800fd88:	4643      	moveq	r3, r8
 800fd8a:	2344      	movne	r3, #68	; 0x44
 800fd8c:	220a      	movs	r2, #10
 800fd8e:	a90b      	add	r1, sp, #44	; 0x2c
 800fd90:	4620      	mov	r0, r4
 800fd92:	9305      	str	r3, [sp, #20]
 800fd94:	f003 ff1a 	bl	8013bcc <strtoul>
 800fd98:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800fd9c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800fda0:	4544      	cmp	r4, r8
 800fda2:	9b05      	ldr	r3, [sp, #20]
 800fda4:	d114      	bne.n	800fdd0 <_tzset_unlocked_r+0x2cc>
 800fda6:	234d      	movs	r3, #77	; 0x4d
 800fda8:	f1b9 0f00 	cmp.w	r9, #0
 800fdac:	d107      	bne.n	800fdbe <_tzset_unlocked_r+0x2ba>
 800fdae:	722b      	strb	r3, [r5, #8]
 800fdb0:	2303      	movs	r3, #3
 800fdb2:	60eb      	str	r3, [r5, #12]
 800fdb4:	2302      	movs	r3, #2
 800fdb6:	612b      	str	r3, [r5, #16]
 800fdb8:	f8c5 9014 	str.w	r9, [r5, #20]
 800fdbc:	e78e      	b.n	800fcdc <_tzset_unlocked_r+0x1d8>
 800fdbe:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 800fdc2:	230b      	movs	r3, #11
 800fdc4:	62ab      	str	r3, [r5, #40]	; 0x28
 800fdc6:	2301      	movs	r3, #1
 800fdc8:	62eb      	str	r3, [r5, #44]	; 0x2c
 800fdca:	2300      	movs	r3, #0
 800fdcc:	632b      	str	r3, [r5, #48]	; 0x30
 800fdce:	e785      	b.n	800fcdc <_tzset_unlocked_r+0x1d8>
 800fdd0:	b280      	uxth	r0, r0
 800fdd2:	723b      	strb	r3, [r7, #8]
 800fdd4:	6178      	str	r0, [r7, #20]
 800fdd6:	e781      	b.n	800fcdc <_tzset_unlocked_r+0x1d8>
 800fdd8:	0801559c 	.word	0x0801559c
 800fddc:	2000096c 	.word	0x2000096c
 800fde0:	20000974 	.word	0x20000974
 800fde4:	0801559f 	.word	0x0801559f
 800fde8:	20000970 	.word	0x20000970
 800fdec:	20000518 	.word	0x20000518
 800fdf0:	2000095f 	.word	0x2000095f
 800fdf4:	080155a3 	.word	0x080155a3
 800fdf8:	080155c6 	.word	0x080155c6
 800fdfc:	080155b2 	.word	0x080155b2
 800fe00:	080155c5 	.word	0x080155c5
 800fe04:	20000954 	.word	0x20000954

0800fe08 <_vfprintf_r>:
 800fe08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe0c:	b0bf      	sub	sp, #252	; 0xfc
 800fe0e:	460d      	mov	r5, r1
 800fe10:	4616      	mov	r6, r2
 800fe12:	461c      	mov	r4, r3
 800fe14:	461f      	mov	r7, r3
 800fe16:	4681      	mov	r9, r0
 800fe18:	f002 ffac 	bl	8012d74 <_localeconv_r>
 800fe1c:	6803      	ldr	r3, [r0, #0]
 800fe1e:	9311      	str	r3, [sp, #68]	; 0x44
 800fe20:	4618      	mov	r0, r3
 800fe22:	f7f0 f9df 	bl	80001e4 <strlen>
 800fe26:	900b      	str	r0, [sp, #44]	; 0x2c
 800fe28:	f1b9 0f00 	cmp.w	r9, #0
 800fe2c:	d005      	beq.n	800fe3a <_vfprintf_r+0x32>
 800fe2e:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800fe32:	b913      	cbnz	r3, 800fe3a <_vfprintf_r+0x32>
 800fe34:	4648      	mov	r0, r9
 800fe36:	f002 f867 	bl	8011f08 <__sinit>
 800fe3a:	4b90      	ldr	r3, [pc, #576]	; (801007c <_vfprintf_r+0x274>)
 800fe3c:	429d      	cmp	r5, r3
 800fe3e:	d12c      	bne.n	800fe9a <_vfprintf_r+0x92>
 800fe40:	f8d9 5004 	ldr.w	r5, [r9, #4]
 800fe44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe46:	07d8      	lsls	r0, r3, #31
 800fe48:	d405      	bmi.n	800fe56 <_vfprintf_r+0x4e>
 800fe4a:	89ab      	ldrh	r3, [r5, #12]
 800fe4c:	0599      	lsls	r1, r3, #22
 800fe4e:	d402      	bmi.n	800fe56 <_vfprintf_r+0x4e>
 800fe50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe52:	f002 ffa0 	bl	8012d96 <__retarget_lock_acquire_recursive>
 800fe56:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 800fe5a:	049a      	lsls	r2, r3, #18
 800fe5c:	d406      	bmi.n	800fe6c <_vfprintf_r+0x64>
 800fe5e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fe62:	81ab      	strh	r3, [r5, #12]
 800fe64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fe6a:	666b      	str	r3, [r5, #100]	; 0x64
 800fe6c:	89ab      	ldrh	r3, [r5, #12]
 800fe6e:	071b      	lsls	r3, r3, #28
 800fe70:	d501      	bpl.n	800fe76 <_vfprintf_r+0x6e>
 800fe72:	692b      	ldr	r3, [r5, #16]
 800fe74:	b9eb      	cbnz	r3, 800feb2 <_vfprintf_r+0xaa>
 800fe76:	4629      	mov	r1, r5
 800fe78:	4648      	mov	r0, r9
 800fe7a:	f001 f83d 	bl	8010ef8 <__swsetup_r>
 800fe7e:	b1c0      	cbz	r0, 800feb2 <_vfprintf_r+0xaa>
 800fe80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe82:	07d8      	lsls	r0, r3, #31
 800fe84:	d405      	bmi.n	800fe92 <_vfprintf_r+0x8a>
 800fe86:	89ab      	ldrh	r3, [r5, #12]
 800fe88:	0599      	lsls	r1, r3, #22
 800fe8a:	d402      	bmi.n	800fe92 <_vfprintf_r+0x8a>
 800fe8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe8e:	f002 ff84 	bl	8012d9a <__retarget_lock_release_recursive>
 800fe92:	f04f 33ff 	mov.w	r3, #4294967295
 800fe96:	930c      	str	r3, [sp, #48]	; 0x30
 800fe98:	e023      	b.n	800fee2 <_vfprintf_r+0xda>
 800fe9a:	4b79      	ldr	r3, [pc, #484]	; (8010080 <_vfprintf_r+0x278>)
 800fe9c:	429d      	cmp	r5, r3
 800fe9e:	d102      	bne.n	800fea6 <_vfprintf_r+0x9e>
 800fea0:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800fea4:	e7ce      	b.n	800fe44 <_vfprintf_r+0x3c>
 800fea6:	4b77      	ldr	r3, [pc, #476]	; (8010084 <_vfprintf_r+0x27c>)
 800fea8:	429d      	cmp	r5, r3
 800feaa:	bf08      	it	eq
 800feac:	f8d9 500c 	ldreq.w	r5, [r9, #12]
 800feb0:	e7c8      	b.n	800fe44 <_vfprintf_r+0x3c>
 800feb2:	89ab      	ldrh	r3, [r5, #12]
 800feb4:	f003 021a 	and.w	r2, r3, #26
 800feb8:	2a0a      	cmp	r2, #10
 800feba:	d116      	bne.n	800feea <_vfprintf_r+0xe2>
 800febc:	f9b5 200e 	ldrsh.w	r2, [r5, #14]
 800fec0:	2a00      	cmp	r2, #0
 800fec2:	db12      	blt.n	800feea <_vfprintf_r+0xe2>
 800fec4:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 800fec6:	07d2      	lsls	r2, r2, #31
 800fec8:	d404      	bmi.n	800fed4 <_vfprintf_r+0xcc>
 800feca:	059f      	lsls	r7, r3, #22
 800fecc:	d402      	bmi.n	800fed4 <_vfprintf_r+0xcc>
 800fece:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fed0:	f002 ff63 	bl	8012d9a <__retarget_lock_release_recursive>
 800fed4:	4623      	mov	r3, r4
 800fed6:	4632      	mov	r2, r6
 800fed8:	4629      	mov	r1, r5
 800feda:	4648      	mov	r0, r9
 800fedc:	f000 ffcc 	bl	8010e78 <__sbprintf>
 800fee0:	900c      	str	r0, [sp, #48]	; 0x30
 800fee2:	980c      	ldr	r0, [sp, #48]	; 0x30
 800fee4:	b03f      	add	sp, #252	; 0xfc
 800fee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feea:	2300      	movs	r3, #0
 800feec:	ac2e      	add	r4, sp, #184	; 0xb8
 800feee:	9421      	str	r4, [sp, #132]	; 0x84
 800fef0:	9323      	str	r3, [sp, #140]	; 0x8c
 800fef2:	9322      	str	r3, [sp, #136]	; 0x88
 800fef4:	9609      	str	r6, [sp, #36]	; 0x24
 800fef6:	9307      	str	r3, [sp, #28]
 800fef8:	930e      	str	r3, [sp, #56]	; 0x38
 800fefa:	930f      	str	r3, [sp, #60]	; 0x3c
 800fefc:	9315      	str	r3, [sp, #84]	; 0x54
 800fefe:	9314      	str	r3, [sp, #80]	; 0x50
 800ff00:	930c      	str	r3, [sp, #48]	; 0x30
 800ff02:	9312      	str	r3, [sp, #72]	; 0x48
 800ff04:	9313      	str	r3, [sp, #76]	; 0x4c
 800ff06:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ff08:	4633      	mov	r3, r6
 800ff0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff0e:	b112      	cbz	r2, 800ff16 <_vfprintf_r+0x10e>
 800ff10:	2a25      	cmp	r2, #37	; 0x25
 800ff12:	f040 8084 	bne.w	801001e <_vfprintf_r+0x216>
 800ff16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff18:	ebb6 0803 	subs.w	r8, r6, r3
 800ff1c:	d00d      	beq.n	800ff3a <_vfprintf_r+0x132>
 800ff1e:	e884 0108 	stmia.w	r4, {r3, r8}
 800ff22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ff24:	4443      	add	r3, r8
 800ff26:	9323      	str	r3, [sp, #140]	; 0x8c
 800ff28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ff2a:	3301      	adds	r3, #1
 800ff2c:	2b07      	cmp	r3, #7
 800ff2e:	9322      	str	r3, [sp, #136]	; 0x88
 800ff30:	dc77      	bgt.n	8010022 <_vfprintf_r+0x21a>
 800ff32:	3408      	adds	r4, #8
 800ff34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ff36:	4443      	add	r3, r8
 800ff38:	930c      	str	r3, [sp, #48]	; 0x30
 800ff3a:	7833      	ldrb	r3, [r6, #0]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	f000 8741 	beq.w	8010dc4 <_vfprintf_r+0xfbc>
 800ff42:	2300      	movs	r3, #0
 800ff44:	3601      	adds	r6, #1
 800ff46:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800ff4a:	461a      	mov	r2, r3
 800ff4c:	f04f 3bff 	mov.w	fp, #4294967295
 800ff50:	930d      	str	r3, [sp, #52]	; 0x34
 800ff52:	469a      	mov	sl, r3
 800ff54:	200a      	movs	r0, #10
 800ff56:	1c71      	adds	r1, r6, #1
 800ff58:	9109      	str	r1, [sp, #36]	; 0x24
 800ff5a:	7831      	ldrb	r1, [r6, #0]
 800ff5c:	9106      	str	r1, [sp, #24]
 800ff5e:	9906      	ldr	r1, [sp, #24]
 800ff60:	3920      	subs	r1, #32
 800ff62:	2958      	cmp	r1, #88	; 0x58
 800ff64:	f200 8426 	bhi.w	80107b4 <_vfprintf_r+0x9ac>
 800ff68:	e8df f011 	tbh	[pc, r1, lsl #1]
 800ff6c:	042400b0 	.word	0x042400b0
 800ff70:	00b50424 	.word	0x00b50424
 800ff74:	04240424 	.word	0x04240424
 800ff78:	04240424 	.word	0x04240424
 800ff7c:	04240424 	.word	0x04240424
 800ff80:	006500b8 	.word	0x006500b8
 800ff84:	00c10424 	.word	0x00c10424
 800ff88:	042400c4 	.word	0x042400c4
 800ff8c:	00e400e1 	.word	0x00e400e1
 800ff90:	00e400e4 	.word	0x00e400e4
 800ff94:	00e400e4 	.word	0x00e400e4
 800ff98:	00e400e4 	.word	0x00e400e4
 800ff9c:	00e400e4 	.word	0x00e400e4
 800ffa0:	04240424 	.word	0x04240424
 800ffa4:	04240424 	.word	0x04240424
 800ffa8:	04240424 	.word	0x04240424
 800ffac:	04240424 	.word	0x04240424
 800ffb0:	04240424 	.word	0x04240424
 800ffb4:	012e0118 	.word	0x012e0118
 800ffb8:	012e0424 	.word	0x012e0424
 800ffbc:	04240424 	.word	0x04240424
 800ffc0:	04240424 	.word	0x04240424
 800ffc4:	042400f7 	.word	0x042400f7
 800ffc8:	034b0424 	.word	0x034b0424
 800ffcc:	04240424 	.word	0x04240424
 800ffd0:	04240424 	.word	0x04240424
 800ffd4:	03b20424 	.word	0x03b20424
 800ffd8:	04240424 	.word	0x04240424
 800ffdc:	0424008e 	.word	0x0424008e
 800ffe0:	04240424 	.word	0x04240424
 800ffe4:	04240424 	.word	0x04240424
 800ffe8:	04240424 	.word	0x04240424
 800ffec:	04240424 	.word	0x04240424
 800fff0:	010a0424 	.word	0x010a0424
 800fff4:	012e006b 	.word	0x012e006b
 800fff8:	012e012e 	.word	0x012e012e
 800fffc:	006b00fa 	.word	0x006b00fa
 8010000:	04240424 	.word	0x04240424
 8010004:	042400fd 	.word	0x042400fd
 8010008:	034d032b 	.word	0x034d032b
 801000c:	01040381 	.word	0x01040381
 8010010:	03920424 	.word	0x03920424
 8010014:	03b40424 	.word	0x03b40424
 8010018:	04240424 	.word	0x04240424
 801001c:	03ce      	.short	0x03ce
 801001e:	461e      	mov	r6, r3
 8010020:	e772      	b.n	800ff08 <_vfprintf_r+0x100>
 8010022:	aa21      	add	r2, sp, #132	; 0x84
 8010024:	4629      	mov	r1, r5
 8010026:	4648      	mov	r0, r9
 8010028:	f004 fabb 	bl	80145a2 <__sprint_r>
 801002c:	2800      	cmp	r0, #0
 801002e:	f040 86a5 	bne.w	8010d7c <_vfprintf_r+0xf74>
 8010032:	ac2e      	add	r4, sp, #184	; 0xb8
 8010034:	e77e      	b.n	800ff34 <_vfprintf_r+0x12c>
 8010036:	2301      	movs	r3, #1
 8010038:	222b      	movs	r2, #43	; 0x2b
 801003a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801003c:	e78b      	b.n	800ff56 <_vfprintf_r+0x14e>
 801003e:	460f      	mov	r7, r1
 8010040:	e7fb      	b.n	801003a <_vfprintf_r+0x232>
 8010042:	b10b      	cbz	r3, 8010048 <_vfprintf_r+0x240>
 8010044:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8010048:	f01a 0f20 	tst.w	sl, #32
 801004c:	f000 80ac 	beq.w	80101a8 <_vfprintf_r+0x3a0>
 8010050:	3707      	adds	r7, #7
 8010052:	f027 0707 	bic.w	r7, r7, #7
 8010056:	f107 0308 	add.w	r3, r7, #8
 801005a:	e9d7 6700 	ldrd	r6, r7, [r7]
 801005e:	9308      	str	r3, [sp, #32]
 8010060:	2e00      	cmp	r6, #0
 8010062:	f177 0300 	sbcs.w	r3, r7, #0
 8010066:	da06      	bge.n	8010076 <_vfprintf_r+0x26e>
 8010068:	4276      	negs	r6, r6
 801006a:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801006e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8010072:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8010076:	2301      	movs	r3, #1
 8010078:	e2d4      	b.n	8010624 <_vfprintf_r+0x81c>
 801007a:	bf00      	nop
 801007c:	08015628 	.word	0x08015628
 8010080:	08015648 	.word	0x08015648
 8010084:	08015608 	.word	0x08015608
 8010088:	b10b      	cbz	r3, 801008e <_vfprintf_r+0x286>
 801008a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 801008e:	4ba3      	ldr	r3, [pc, #652]	; (801031c <_vfprintf_r+0x514>)
 8010090:	9315      	str	r3, [sp, #84]	; 0x54
 8010092:	f01a 0f20 	tst.w	sl, #32
 8010096:	f000 833c 	beq.w	8010712 <_vfprintf_r+0x90a>
 801009a:	3707      	adds	r7, #7
 801009c:	f027 0707 	bic.w	r7, r7, #7
 80100a0:	f107 0308 	add.w	r3, r7, #8
 80100a4:	e9d7 6700 	ldrd	r6, r7, [r7]
 80100a8:	9308      	str	r3, [sp, #32]
 80100aa:	f01a 0f01 	tst.w	sl, #1
 80100ae:	d00b      	beq.n	80100c8 <_vfprintf_r+0x2c0>
 80100b0:	ea56 0307 	orrs.w	r3, r6, r7
 80100b4:	d008      	beq.n	80100c8 <_vfprintf_r+0x2c0>
 80100b6:	2330      	movs	r3, #48	; 0x30
 80100b8:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 80100bc:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80100c0:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
 80100c4:	f04a 0a02 	orr.w	sl, sl, #2
 80100c8:	2302      	movs	r3, #2
 80100ca:	e2a8      	b.n	801061e <_vfprintf_r+0x816>
 80100cc:	2a00      	cmp	r2, #0
 80100ce:	d1b4      	bne.n	801003a <_vfprintf_r+0x232>
 80100d0:	2301      	movs	r3, #1
 80100d2:	2220      	movs	r2, #32
 80100d4:	e7b1      	b.n	801003a <_vfprintf_r+0x232>
 80100d6:	f04a 0a01 	orr.w	sl, sl, #1
 80100da:	e7ae      	b.n	801003a <_vfprintf_r+0x232>
 80100dc:	683e      	ldr	r6, [r7, #0]
 80100de:	960d      	str	r6, [sp, #52]	; 0x34
 80100e0:	2e00      	cmp	r6, #0
 80100e2:	f107 0104 	add.w	r1, r7, #4
 80100e6:	daaa      	bge.n	801003e <_vfprintf_r+0x236>
 80100e8:	4276      	negs	r6, r6
 80100ea:	960d      	str	r6, [sp, #52]	; 0x34
 80100ec:	460f      	mov	r7, r1
 80100ee:	f04a 0a04 	orr.w	sl, sl, #4
 80100f2:	e7a2      	b.n	801003a <_vfprintf_r+0x232>
 80100f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80100f6:	1c4e      	adds	r6, r1, #1
 80100f8:	7809      	ldrb	r1, [r1, #0]
 80100fa:	9106      	str	r1, [sp, #24]
 80100fc:	292a      	cmp	r1, #42	; 0x2a
 80100fe:	d010      	beq.n	8010122 <_vfprintf_r+0x31a>
 8010100:	f04f 0b00 	mov.w	fp, #0
 8010104:	9609      	str	r6, [sp, #36]	; 0x24
 8010106:	9906      	ldr	r1, [sp, #24]
 8010108:	3930      	subs	r1, #48	; 0x30
 801010a:	2909      	cmp	r1, #9
 801010c:	f63f af27 	bhi.w	800ff5e <_vfprintf_r+0x156>
 8010110:	fb00 1b0b 	mla	fp, r0, fp, r1
 8010114:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010116:	460e      	mov	r6, r1
 8010118:	f816 1b01 	ldrb.w	r1, [r6], #1
 801011c:	9106      	str	r1, [sp, #24]
 801011e:	9609      	str	r6, [sp, #36]	; 0x24
 8010120:	e7f1      	b.n	8010106 <_vfprintf_r+0x2fe>
 8010122:	6839      	ldr	r1, [r7, #0]
 8010124:	9609      	str	r6, [sp, #36]	; 0x24
 8010126:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
 801012a:	3704      	adds	r7, #4
 801012c:	e785      	b.n	801003a <_vfprintf_r+0x232>
 801012e:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8010132:	e782      	b.n	801003a <_vfprintf_r+0x232>
 8010134:	2100      	movs	r1, #0
 8010136:	910d      	str	r1, [sp, #52]	; 0x34
 8010138:	9906      	ldr	r1, [sp, #24]
 801013a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801013c:	3930      	subs	r1, #48	; 0x30
 801013e:	fb00 1106 	mla	r1, r0, r6, r1
 8010142:	910d      	str	r1, [sp, #52]	; 0x34
 8010144:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010146:	460e      	mov	r6, r1
 8010148:	f816 1b01 	ldrb.w	r1, [r6], #1
 801014c:	9106      	str	r1, [sp, #24]
 801014e:	9906      	ldr	r1, [sp, #24]
 8010150:	9609      	str	r6, [sp, #36]	; 0x24
 8010152:	3930      	subs	r1, #48	; 0x30
 8010154:	2909      	cmp	r1, #9
 8010156:	d9ef      	bls.n	8010138 <_vfprintf_r+0x330>
 8010158:	e701      	b.n	800ff5e <_vfprintf_r+0x156>
 801015a:	f04a 0a08 	orr.w	sl, sl, #8
 801015e:	e76c      	b.n	801003a <_vfprintf_r+0x232>
 8010160:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
 8010164:	e769      	b.n	801003a <_vfprintf_r+0x232>
 8010166:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010168:	7809      	ldrb	r1, [r1, #0]
 801016a:	296c      	cmp	r1, #108	; 0x6c
 801016c:	d105      	bne.n	801017a <_vfprintf_r+0x372>
 801016e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010170:	3101      	adds	r1, #1
 8010172:	9109      	str	r1, [sp, #36]	; 0x24
 8010174:	f04a 0a20 	orr.w	sl, sl, #32
 8010178:	e75f      	b.n	801003a <_vfprintf_r+0x232>
 801017a:	f04a 0a10 	orr.w	sl, sl, #16
 801017e:	e75c      	b.n	801003a <_vfprintf_r+0x232>
 8010180:	1d3b      	adds	r3, r7, #4
 8010182:	9308      	str	r3, [sp, #32]
 8010184:	2600      	movs	r6, #0
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 801018c:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8010190:	f04f 0b01 	mov.w	fp, #1
 8010194:	960a      	str	r6, [sp, #40]	; 0x28
 8010196:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 801019a:	e11f      	b.n	80103dc <_vfprintf_r+0x5d4>
 801019c:	b10b      	cbz	r3, 80101a2 <_vfprintf_r+0x39a>
 801019e:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80101a2:	f04a 0a10 	orr.w	sl, sl, #16
 80101a6:	e74f      	b.n	8010048 <_vfprintf_r+0x240>
 80101a8:	f01a 0f10 	tst.w	sl, #16
 80101ac:	f107 0304 	add.w	r3, r7, #4
 80101b0:	d003      	beq.n	80101ba <_vfprintf_r+0x3b2>
 80101b2:	683e      	ldr	r6, [r7, #0]
 80101b4:	9308      	str	r3, [sp, #32]
 80101b6:	17f7      	asrs	r7, r6, #31
 80101b8:	e752      	b.n	8010060 <_vfprintf_r+0x258>
 80101ba:	683e      	ldr	r6, [r7, #0]
 80101bc:	9308      	str	r3, [sp, #32]
 80101be:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80101c2:	bf18      	it	ne
 80101c4:	b236      	sxthne	r6, r6
 80101c6:	e7f6      	b.n	80101b6 <_vfprintf_r+0x3ae>
 80101c8:	b10b      	cbz	r3, 80101ce <_vfprintf_r+0x3c6>
 80101ca:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80101ce:	3707      	adds	r7, #7
 80101d0:	f027 0707 	bic.w	r7, r7, #7
 80101d4:	f107 0308 	add.w	r3, r7, #8
 80101d8:	9308      	str	r3, [sp, #32]
 80101da:	683b      	ldr	r3, [r7, #0]
 80101dc:	930e      	str	r3, [sp, #56]	; 0x38
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80101e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80101e4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80101e6:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 80101ea:	f04f 32ff 	mov.w	r2, #4294967295
 80101ee:	4b4c      	ldr	r3, [pc, #304]	; (8010320 <_vfprintf_r+0x518>)
 80101f0:	4638      	mov	r0, r7
 80101f2:	4631      	mov	r1, r6
 80101f4:	f7f0 fca6 	bl	8000b44 <__aeabi_dcmpun>
 80101f8:	2800      	cmp	r0, #0
 80101fa:	f040 85f0 	bne.w	8010dde <_vfprintf_r+0xfd6>
 80101fe:	f04f 32ff 	mov.w	r2, #4294967295
 8010202:	4b47      	ldr	r3, [pc, #284]	; (8010320 <_vfprintf_r+0x518>)
 8010204:	4638      	mov	r0, r7
 8010206:	4631      	mov	r1, r6
 8010208:	f7f0 fc7e 	bl	8000b08 <__aeabi_dcmple>
 801020c:	2800      	cmp	r0, #0
 801020e:	f040 85e6 	bne.w	8010dde <_vfprintf_r+0xfd6>
 8010212:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010214:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010216:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010218:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801021a:	f7f0 fc6b 	bl	8000af4 <__aeabi_dcmplt>
 801021e:	b110      	cbz	r0, 8010226 <_vfprintf_r+0x41e>
 8010220:	232d      	movs	r3, #45	; 0x2d
 8010222:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8010226:	4b3f      	ldr	r3, [pc, #252]	; (8010324 <_vfprintf_r+0x51c>)
 8010228:	4a3f      	ldr	r2, [pc, #252]	; (8010328 <_vfprintf_r+0x520>)
 801022a:	9906      	ldr	r1, [sp, #24]
 801022c:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8010230:	2947      	cmp	r1, #71	; 0x47
 8010232:	bfcc      	ite	gt
 8010234:	4690      	movgt	r8, r2
 8010236:	4698      	movle	r8, r3
 8010238:	f04f 0b03 	mov.w	fp, #3
 801023c:	2600      	movs	r6, #0
 801023e:	960a      	str	r6, [sp, #40]	; 0x28
 8010240:	e0cc      	b.n	80103dc <_vfprintf_r+0x5d4>
 8010242:	f1bb 3fff 	cmp.w	fp, #4294967295
 8010246:	d026      	beq.n	8010296 <_vfprintf_r+0x48e>
 8010248:	9b06      	ldr	r3, [sp, #24]
 801024a:	f023 0320 	bic.w	r3, r3, #32
 801024e:	2b47      	cmp	r3, #71	; 0x47
 8010250:	d104      	bne.n	801025c <_vfprintf_r+0x454>
 8010252:	f1bb 0f00 	cmp.w	fp, #0
 8010256:	bf08      	it	eq
 8010258:	f04f 0b01 	moveq.w	fp, #1
 801025c:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 8010260:	9317      	str	r3, [sp, #92]	; 0x5c
 8010262:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010264:	1e1f      	subs	r7, r3, #0
 8010266:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010268:	930a      	str	r3, [sp, #40]	; 0x28
 801026a:	bfbd      	ittte	lt
 801026c:	463b      	movlt	r3, r7
 801026e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8010272:	9310      	strlt	r3, [sp, #64]	; 0x40
 8010274:	2300      	movge	r3, #0
 8010276:	bfb8      	it	lt
 8010278:	232d      	movlt	r3, #45	; 0x2d
 801027a:	9316      	str	r3, [sp, #88]	; 0x58
 801027c:	9b06      	ldr	r3, [sp, #24]
 801027e:	bfa8      	it	ge
 8010280:	9710      	strge	r7, [sp, #64]	; 0x40
 8010282:	f023 0720 	bic.w	r7, r3, #32
 8010286:	2f46      	cmp	r7, #70	; 0x46
 8010288:	d008      	beq.n	801029c <_vfprintf_r+0x494>
 801028a:	2f45      	cmp	r7, #69	; 0x45
 801028c:	d143      	bne.n	8010316 <_vfprintf_r+0x50e>
 801028e:	f10b 0601 	add.w	r6, fp, #1
 8010292:	2302      	movs	r3, #2
 8010294:	e004      	b.n	80102a0 <_vfprintf_r+0x498>
 8010296:	f04f 0b06 	mov.w	fp, #6
 801029a:	e7df      	b.n	801025c <_vfprintf_r+0x454>
 801029c:	465e      	mov	r6, fp
 801029e:	2303      	movs	r3, #3
 80102a0:	aa1f      	add	r2, sp, #124	; 0x7c
 80102a2:	9204      	str	r2, [sp, #16]
 80102a4:	aa1c      	add	r2, sp, #112	; 0x70
 80102a6:	9203      	str	r2, [sp, #12]
 80102a8:	aa1b      	add	r2, sp, #108	; 0x6c
 80102aa:	9202      	str	r2, [sp, #8]
 80102ac:	e88d 0048 	stmia.w	sp, {r3, r6}
 80102b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80102b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80102b4:	4648      	mov	r0, r9
 80102b6:	f000 ff2f 	bl	8011118 <_dtoa_r>
 80102ba:	2f47      	cmp	r7, #71	; 0x47
 80102bc:	4680      	mov	r8, r0
 80102be:	d103      	bne.n	80102c8 <_vfprintf_r+0x4c0>
 80102c0:	f01a 0f01 	tst.w	sl, #1
 80102c4:	f000 8598 	beq.w	8010df8 <_vfprintf_r+0xff0>
 80102c8:	eb08 0306 	add.w	r3, r8, r6
 80102cc:	2f46      	cmp	r7, #70	; 0x46
 80102ce:	9307      	str	r3, [sp, #28]
 80102d0:	d111      	bne.n	80102f6 <_vfprintf_r+0x4ee>
 80102d2:	f898 3000 	ldrb.w	r3, [r8]
 80102d6:	2b30      	cmp	r3, #48	; 0x30
 80102d8:	d109      	bne.n	80102ee <_vfprintf_r+0x4e6>
 80102da:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80102dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80102de:	980a      	ldr	r0, [sp, #40]	; 0x28
 80102e0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80102e2:	f7f0 fbfd 	bl	8000ae0 <__aeabi_dcmpeq>
 80102e6:	b910      	cbnz	r0, 80102ee <_vfprintf_r+0x4e6>
 80102e8:	f1c6 0601 	rsb	r6, r6, #1
 80102ec:	961b      	str	r6, [sp, #108]	; 0x6c
 80102ee:	9a07      	ldr	r2, [sp, #28]
 80102f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80102f2:	441a      	add	r2, r3
 80102f4:	9207      	str	r2, [sp, #28]
 80102f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80102f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80102fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80102fc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80102fe:	f7f0 fbef 	bl	8000ae0 <__aeabi_dcmpeq>
 8010302:	b998      	cbnz	r0, 801032c <_vfprintf_r+0x524>
 8010304:	2230      	movs	r2, #48	; 0x30
 8010306:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010308:	9907      	ldr	r1, [sp, #28]
 801030a:	4299      	cmp	r1, r3
 801030c:	d910      	bls.n	8010330 <_vfprintf_r+0x528>
 801030e:	1c59      	adds	r1, r3, #1
 8010310:	911f      	str	r1, [sp, #124]	; 0x7c
 8010312:	701a      	strb	r2, [r3, #0]
 8010314:	e7f7      	b.n	8010306 <_vfprintf_r+0x4fe>
 8010316:	465e      	mov	r6, fp
 8010318:	e7bb      	b.n	8010292 <_vfprintf_r+0x48a>
 801031a:	bf00      	nop
 801031c:	08015558 	.word	0x08015558
 8010320:	7fefffff 	.word	0x7fefffff
 8010324:	08015548 	.word	0x08015548
 8010328:	0801554c 	.word	0x0801554c
 801032c:	9b07      	ldr	r3, [sp, #28]
 801032e:	931f      	str	r3, [sp, #124]	; 0x7c
 8010330:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010332:	2f47      	cmp	r7, #71	; 0x47
 8010334:	eba3 0308 	sub.w	r3, r3, r8
 8010338:	9307      	str	r3, [sp, #28]
 801033a:	f040 80fb 	bne.w	8010534 <_vfprintf_r+0x72c>
 801033e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010340:	1cde      	adds	r6, r3, #3
 8010342:	db02      	blt.n	801034a <_vfprintf_r+0x542>
 8010344:	459b      	cmp	fp, r3
 8010346:	f280 8124 	bge.w	8010592 <_vfprintf_r+0x78a>
 801034a:	9b06      	ldr	r3, [sp, #24]
 801034c:	3b02      	subs	r3, #2
 801034e:	9306      	str	r3, [sp, #24]
 8010350:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8010352:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8010356:	f88d 1074 	strb.w	r1, [sp, #116]	; 0x74
 801035a:	1e53      	subs	r3, r2, #1
 801035c:	2b00      	cmp	r3, #0
 801035e:	931b      	str	r3, [sp, #108]	; 0x6c
 8010360:	bfb6      	itet	lt
 8010362:	f1c2 0301 	rsblt	r3, r2, #1
 8010366:	222b      	movge	r2, #43	; 0x2b
 8010368:	222d      	movlt	r2, #45	; 0x2d
 801036a:	2b09      	cmp	r3, #9
 801036c:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 8010370:	f340 80fe 	ble.w	8010570 <_vfprintf_r+0x768>
 8010374:	f10d 0283 	add.w	r2, sp, #131	; 0x83
 8010378:	260a      	movs	r6, #10
 801037a:	fb93 f0f6 	sdiv	r0, r3, r6
 801037e:	fb06 3310 	mls	r3, r6, r0, r3
 8010382:	3330      	adds	r3, #48	; 0x30
 8010384:	2809      	cmp	r0, #9
 8010386:	f802 3c01 	strb.w	r3, [r2, #-1]
 801038a:	f102 31ff 	add.w	r1, r2, #4294967295
 801038e:	4603      	mov	r3, r0
 8010390:	f300 80e7 	bgt.w	8010562 <_vfprintf_r+0x75a>
 8010394:	3330      	adds	r3, #48	; 0x30
 8010396:	f801 3c01 	strb.w	r3, [r1, #-1]
 801039a:	3a02      	subs	r2, #2
 801039c:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 80103a0:	f10d 0083 	add.w	r0, sp, #131	; 0x83
 80103a4:	4282      	cmp	r2, r0
 80103a6:	4619      	mov	r1, r3
 80103a8:	f0c0 80dd 	bcc.w	8010566 <_vfprintf_r+0x75e>
 80103ac:	9a07      	ldr	r2, [sp, #28]
 80103ae:	ab1d      	add	r3, sp, #116	; 0x74
 80103b0:	1acb      	subs	r3, r1, r3
 80103b2:	2a01      	cmp	r2, #1
 80103b4:	9314      	str	r3, [sp, #80]	; 0x50
 80103b6:	eb03 0b02 	add.w	fp, r3, r2
 80103ba:	dc03      	bgt.n	80103c4 <_vfprintf_r+0x5bc>
 80103bc:	f01a 0301 	ands.w	r3, sl, #1
 80103c0:	930a      	str	r3, [sp, #40]	; 0x28
 80103c2:	d003      	beq.n	80103cc <_vfprintf_r+0x5c4>
 80103c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80103c6:	449b      	add	fp, r3
 80103c8:	2300      	movs	r3, #0
 80103ca:	930a      	str	r3, [sp, #40]	; 0x28
 80103cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80103ce:	b113      	cbz	r3, 80103d6 <_vfprintf_r+0x5ce>
 80103d0:	232d      	movs	r3, #45	; 0x2d
 80103d2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80103d6:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 80103da:	2600      	movs	r6, #0
 80103dc:	455e      	cmp	r6, fp
 80103de:	4633      	mov	r3, r6
 80103e0:	bfb8      	it	lt
 80103e2:	465b      	movlt	r3, fp
 80103e4:	9310      	str	r3, [sp, #64]	; 0x40
 80103e6:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 80103ea:	b113      	cbz	r3, 80103f2 <_vfprintf_r+0x5ea>
 80103ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80103ee:	3301      	adds	r3, #1
 80103f0:	9310      	str	r3, [sp, #64]	; 0x40
 80103f2:	f01a 0302 	ands.w	r3, sl, #2
 80103f6:	9316      	str	r3, [sp, #88]	; 0x58
 80103f8:	bf1e      	ittt	ne
 80103fa:	9b10      	ldrne	r3, [sp, #64]	; 0x40
 80103fc:	3302      	addne	r3, #2
 80103fe:	9310      	strne	r3, [sp, #64]	; 0x40
 8010400:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8010404:	9317      	str	r3, [sp, #92]	; 0x5c
 8010406:	d114      	bne.n	8010432 <_vfprintf_r+0x62a>
 8010408:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801040a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801040c:	1a9f      	subs	r7, r3, r2
 801040e:	2f00      	cmp	r7, #0
 8010410:	dd0f      	ble.n	8010432 <_vfprintf_r+0x62a>
 8010412:	4bac      	ldr	r3, [pc, #688]	; (80106c4 <_vfprintf_r+0x8bc>)
 8010414:	6023      	str	r3, [r4, #0]
 8010416:	2f10      	cmp	r7, #16
 8010418:	f300 81de 	bgt.w	80107d8 <_vfprintf_r+0x9d0>
 801041c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801041e:	6067      	str	r7, [r4, #4]
 8010420:	441f      	add	r7, r3
 8010422:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010424:	9723      	str	r7, [sp, #140]	; 0x8c
 8010426:	3301      	adds	r3, #1
 8010428:	2b07      	cmp	r3, #7
 801042a:	9322      	str	r3, [sp, #136]	; 0x88
 801042c:	f300 81eb 	bgt.w	8010806 <_vfprintf_r+0x9fe>
 8010430:	3408      	adds	r4, #8
 8010432:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8010436:	b173      	cbz	r3, 8010456 <_vfprintf_r+0x64e>
 8010438:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 801043c:	6023      	str	r3, [r4, #0]
 801043e:	2301      	movs	r3, #1
 8010440:	6063      	str	r3, [r4, #4]
 8010442:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010444:	3301      	adds	r3, #1
 8010446:	9323      	str	r3, [sp, #140]	; 0x8c
 8010448:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801044a:	3301      	adds	r3, #1
 801044c:	2b07      	cmp	r3, #7
 801044e:	9322      	str	r3, [sp, #136]	; 0x88
 8010450:	f300 81e3 	bgt.w	801081a <_vfprintf_r+0xa12>
 8010454:	3408      	adds	r4, #8
 8010456:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010458:	b16b      	cbz	r3, 8010476 <_vfprintf_r+0x66e>
 801045a:	ab1a      	add	r3, sp, #104	; 0x68
 801045c:	6023      	str	r3, [r4, #0]
 801045e:	2302      	movs	r3, #2
 8010460:	6063      	str	r3, [r4, #4]
 8010462:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010464:	3302      	adds	r3, #2
 8010466:	9323      	str	r3, [sp, #140]	; 0x8c
 8010468:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801046a:	3301      	adds	r3, #1
 801046c:	2b07      	cmp	r3, #7
 801046e:	9322      	str	r3, [sp, #136]	; 0x88
 8010470:	f300 81dd 	bgt.w	801082e <_vfprintf_r+0xa26>
 8010474:	3408      	adds	r4, #8
 8010476:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010478:	2b80      	cmp	r3, #128	; 0x80
 801047a:	d114      	bne.n	80104a6 <_vfprintf_r+0x69e>
 801047c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801047e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010480:	1a9f      	subs	r7, r3, r2
 8010482:	2f00      	cmp	r7, #0
 8010484:	dd0f      	ble.n	80104a6 <_vfprintf_r+0x69e>
 8010486:	4b90      	ldr	r3, [pc, #576]	; (80106c8 <_vfprintf_r+0x8c0>)
 8010488:	6023      	str	r3, [r4, #0]
 801048a:	2f10      	cmp	r7, #16
 801048c:	f300 81d9 	bgt.w	8010842 <_vfprintf_r+0xa3a>
 8010490:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010492:	6067      	str	r7, [r4, #4]
 8010494:	441f      	add	r7, r3
 8010496:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010498:	9723      	str	r7, [sp, #140]	; 0x8c
 801049a:	3301      	adds	r3, #1
 801049c:	2b07      	cmp	r3, #7
 801049e:	9322      	str	r3, [sp, #136]	; 0x88
 80104a0:	f300 81e6 	bgt.w	8010870 <_vfprintf_r+0xa68>
 80104a4:	3408      	adds	r4, #8
 80104a6:	eba6 060b 	sub.w	r6, r6, fp
 80104aa:	2e00      	cmp	r6, #0
 80104ac:	dd0f      	ble.n	80104ce <_vfprintf_r+0x6c6>
 80104ae:	4f86      	ldr	r7, [pc, #536]	; (80106c8 <_vfprintf_r+0x8c0>)
 80104b0:	6027      	str	r7, [r4, #0]
 80104b2:	2e10      	cmp	r6, #16
 80104b4:	f300 81e6 	bgt.w	8010884 <_vfprintf_r+0xa7c>
 80104b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80104ba:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80104bc:	6066      	str	r6, [r4, #4]
 80104be:	3301      	adds	r3, #1
 80104c0:	4406      	add	r6, r0
 80104c2:	2b07      	cmp	r3, #7
 80104c4:	9623      	str	r6, [sp, #140]	; 0x8c
 80104c6:	9322      	str	r3, [sp, #136]	; 0x88
 80104c8:	f300 81f3 	bgt.w	80108b2 <_vfprintf_r+0xaaa>
 80104cc:	3408      	adds	r4, #8
 80104ce:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80104d2:	f040 81f8 	bne.w	80108c6 <_vfprintf_r+0xabe>
 80104d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80104d8:	e884 0900 	stmia.w	r4, {r8, fp}
 80104dc:	445b      	add	r3, fp
 80104de:	9323      	str	r3, [sp, #140]	; 0x8c
 80104e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80104e2:	3301      	adds	r3, #1
 80104e4:	2b07      	cmp	r3, #7
 80104e6:	9322      	str	r3, [sp, #136]	; 0x88
 80104e8:	f340 8428 	ble.w	8010d3c <_vfprintf_r+0xf34>
 80104ec:	aa21      	add	r2, sp, #132	; 0x84
 80104ee:	4629      	mov	r1, r5
 80104f0:	4648      	mov	r0, r9
 80104f2:	f004 f856 	bl	80145a2 <__sprint_r>
 80104f6:	2800      	cmp	r0, #0
 80104f8:	f040 8440 	bne.w	8010d7c <_vfprintf_r+0xf74>
 80104fc:	ac2e      	add	r4, sp, #184	; 0xb8
 80104fe:	f01a 0f04 	tst.w	sl, #4
 8010502:	f040 841e 	bne.w	8010d42 <_vfprintf_r+0xf3a>
 8010506:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010508:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801050a:	9910      	ldr	r1, [sp, #64]	; 0x40
 801050c:	428a      	cmp	r2, r1
 801050e:	bfac      	ite	ge
 8010510:	189b      	addge	r3, r3, r2
 8010512:	185b      	addlt	r3, r3, r1
 8010514:	930c      	str	r3, [sp, #48]	; 0x30
 8010516:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010518:	b13b      	cbz	r3, 801052a <_vfprintf_r+0x722>
 801051a:	aa21      	add	r2, sp, #132	; 0x84
 801051c:	4629      	mov	r1, r5
 801051e:	4648      	mov	r0, r9
 8010520:	f004 f83f 	bl	80145a2 <__sprint_r>
 8010524:	2800      	cmp	r0, #0
 8010526:	f040 8429 	bne.w	8010d7c <_vfprintf_r+0xf74>
 801052a:	2300      	movs	r3, #0
 801052c:	9322      	str	r3, [sp, #136]	; 0x88
 801052e:	9f08      	ldr	r7, [sp, #32]
 8010530:	ac2e      	add	r4, sp, #184	; 0xb8
 8010532:	e4e8      	b.n	800ff06 <_vfprintf_r+0xfe>
 8010534:	9b06      	ldr	r3, [sp, #24]
 8010536:	2b65      	cmp	r3, #101	; 0x65
 8010538:	f77f af0a 	ble.w	8010350 <_vfprintf_r+0x548>
 801053c:	9b06      	ldr	r3, [sp, #24]
 801053e:	2b66      	cmp	r3, #102	; 0x66
 8010540:	d127      	bne.n	8010592 <_vfprintf_r+0x78a>
 8010542:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010544:	2b00      	cmp	r3, #0
 8010546:	dd1b      	ble.n	8010580 <_vfprintf_r+0x778>
 8010548:	f1bb 0f00 	cmp.w	fp, #0
 801054c:	d102      	bne.n	8010554 <_vfprintf_r+0x74c>
 801054e:	f01a 0f01 	tst.w	sl, #1
 8010552:	d002      	beq.n	801055a <_vfprintf_r+0x752>
 8010554:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010556:	4413      	add	r3, r2
 8010558:	445b      	add	r3, fp
 801055a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801055c:	920a      	str	r2, [sp, #40]	; 0x28
 801055e:	469b      	mov	fp, r3
 8010560:	e734      	b.n	80103cc <_vfprintf_r+0x5c4>
 8010562:	460a      	mov	r2, r1
 8010564:	e709      	b.n	801037a <_vfprintf_r+0x572>
 8010566:	f812 1b01 	ldrb.w	r1, [r2], #1
 801056a:	f803 1b01 	strb.w	r1, [r3], #1
 801056e:	e719      	b.n	80103a4 <_vfprintf_r+0x59c>
 8010570:	2230      	movs	r2, #48	; 0x30
 8010572:	4413      	add	r3, r2
 8010574:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 8010578:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 801057c:	a91e      	add	r1, sp, #120	; 0x78
 801057e:	e715      	b.n	80103ac <_vfprintf_r+0x5a4>
 8010580:	f1bb 0f00 	cmp.w	fp, #0
 8010584:	d102      	bne.n	801058c <_vfprintf_r+0x784>
 8010586:	f01a 0f01 	tst.w	sl, #1
 801058a:	d016      	beq.n	80105ba <_vfprintf_r+0x7b2>
 801058c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801058e:	3301      	adds	r3, #1
 8010590:	e7e2      	b.n	8010558 <_vfprintf_r+0x750>
 8010592:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8010594:	9b07      	ldr	r3, [sp, #28]
 8010596:	429a      	cmp	r2, r3
 8010598:	db07      	blt.n	80105aa <_vfprintf_r+0x7a2>
 801059a:	f01a 0f01 	tst.w	sl, #1
 801059e:	d00e      	beq.n	80105be <_vfprintf_r+0x7b6>
 80105a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80105a2:	4413      	add	r3, r2
 80105a4:	2267      	movs	r2, #103	; 0x67
 80105a6:	9206      	str	r2, [sp, #24]
 80105a8:	e7d7      	b.n	801055a <_vfprintf_r+0x752>
 80105aa:	9b07      	ldr	r3, [sp, #28]
 80105ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80105ae:	2a00      	cmp	r2, #0
 80105b0:	440b      	add	r3, r1
 80105b2:	dcf7      	bgt.n	80105a4 <_vfprintf_r+0x79c>
 80105b4:	f1c2 0201 	rsb	r2, r2, #1
 80105b8:	e7f3      	b.n	80105a2 <_vfprintf_r+0x79a>
 80105ba:	2301      	movs	r3, #1
 80105bc:	e7cd      	b.n	801055a <_vfprintf_r+0x752>
 80105be:	4613      	mov	r3, r2
 80105c0:	e7f0      	b.n	80105a4 <_vfprintf_r+0x79c>
 80105c2:	b10b      	cbz	r3, 80105c8 <_vfprintf_r+0x7c0>
 80105c4:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80105c8:	f01a 0f20 	tst.w	sl, #32
 80105cc:	f107 0304 	add.w	r3, r7, #4
 80105d0:	d008      	beq.n	80105e4 <_vfprintf_r+0x7dc>
 80105d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80105d4:	683a      	ldr	r2, [r7, #0]
 80105d6:	17cf      	asrs	r7, r1, #31
 80105d8:	4608      	mov	r0, r1
 80105da:	4639      	mov	r1, r7
 80105dc:	e9c2 0100 	strd	r0, r1, [r2]
 80105e0:	461f      	mov	r7, r3
 80105e2:	e490      	b.n	800ff06 <_vfprintf_r+0xfe>
 80105e4:	f01a 0f10 	tst.w	sl, #16
 80105e8:	d003      	beq.n	80105f2 <_vfprintf_r+0x7ea>
 80105ea:	683a      	ldr	r2, [r7, #0]
 80105ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 80105ee:	6011      	str	r1, [r2, #0]
 80105f0:	e7f6      	b.n	80105e0 <_vfprintf_r+0x7d8>
 80105f2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80105f6:	d0f8      	beq.n	80105ea <_vfprintf_r+0x7e2>
 80105f8:	683a      	ldr	r2, [r7, #0]
 80105fa:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80105fe:	8011      	strh	r1, [r2, #0]
 8010600:	e7ee      	b.n	80105e0 <_vfprintf_r+0x7d8>
 8010602:	f04a 0a10 	orr.w	sl, sl, #16
 8010606:	f01a 0320 	ands.w	r3, sl, #32
 801060a:	d022      	beq.n	8010652 <_vfprintf_r+0x84a>
 801060c:	3707      	adds	r7, #7
 801060e:	f027 0707 	bic.w	r7, r7, #7
 8010612:	f107 0308 	add.w	r3, r7, #8
 8010616:	e9d7 6700 	ldrd	r6, r7, [r7]
 801061a:	9308      	str	r3, [sp, #32]
 801061c:	2300      	movs	r3, #0
 801061e:	2200      	movs	r2, #0
 8010620:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8010624:	f1bb 3fff 	cmp.w	fp, #4294967295
 8010628:	f000 83eb 	beq.w	8010e02 <_vfprintf_r+0xffa>
 801062c:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 8010630:	920a      	str	r2, [sp, #40]	; 0x28
 8010632:	ea56 0207 	orrs.w	r2, r6, r7
 8010636:	f040 83ea 	bne.w	8010e0e <_vfprintf_r+0x1006>
 801063a:	f1bb 0f00 	cmp.w	fp, #0
 801063e:	f000 80ac 	beq.w	801079a <_vfprintf_r+0x992>
 8010642:	2b01      	cmp	r3, #1
 8010644:	d078      	beq.n	8010738 <_vfprintf_r+0x930>
 8010646:	2b02      	cmp	r3, #2
 8010648:	f000 8093 	beq.w	8010772 <_vfprintf_r+0x96a>
 801064c:	2600      	movs	r6, #0
 801064e:	2700      	movs	r7, #0
 8010650:	e3e3      	b.n	8010e1a <_vfprintf_r+0x1012>
 8010652:	1d3a      	adds	r2, r7, #4
 8010654:	f01a 0110 	ands.w	r1, sl, #16
 8010658:	9208      	str	r2, [sp, #32]
 801065a:	d002      	beq.n	8010662 <_vfprintf_r+0x85a>
 801065c:	683e      	ldr	r6, [r7, #0]
 801065e:	2700      	movs	r7, #0
 8010660:	e7dd      	b.n	801061e <_vfprintf_r+0x816>
 8010662:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 8010666:	d0f9      	beq.n	801065c <_vfprintf_r+0x854>
 8010668:	883e      	ldrh	r6, [r7, #0]
 801066a:	2700      	movs	r7, #0
 801066c:	e7d6      	b.n	801061c <_vfprintf_r+0x814>
 801066e:	1d3b      	adds	r3, r7, #4
 8010670:	9308      	str	r3, [sp, #32]
 8010672:	2330      	movs	r3, #48	; 0x30
 8010674:	2278      	movs	r2, #120	; 0x78
 8010676:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 801067a:	4b14      	ldr	r3, [pc, #80]	; (80106cc <_vfprintf_r+0x8c4>)
 801067c:	683e      	ldr	r6, [r7, #0]
 801067e:	9315      	str	r3, [sp, #84]	; 0x54
 8010680:	2700      	movs	r7, #0
 8010682:	f04a 0a02 	orr.w	sl, sl, #2
 8010686:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 801068a:	2302      	movs	r3, #2
 801068c:	9206      	str	r2, [sp, #24]
 801068e:	e7c6      	b.n	801061e <_vfprintf_r+0x816>
 8010690:	1d3b      	adds	r3, r7, #4
 8010692:	2600      	movs	r6, #0
 8010694:	f1bb 3fff 	cmp.w	fp, #4294967295
 8010698:	9308      	str	r3, [sp, #32]
 801069a:	f8d7 8000 	ldr.w	r8, [r7]
 801069e:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 80106a2:	d00a      	beq.n	80106ba <_vfprintf_r+0x8b2>
 80106a4:	465a      	mov	r2, fp
 80106a6:	4631      	mov	r1, r6
 80106a8:	4640      	mov	r0, r8
 80106aa:	f7ef fda9 	bl	8000200 <memchr>
 80106ae:	2800      	cmp	r0, #0
 80106b0:	f000 8090 	beq.w	80107d4 <_vfprintf_r+0x9cc>
 80106b4:	eba0 0b08 	sub.w	fp, r0, r8
 80106b8:	e5c1      	b.n	801023e <_vfprintf_r+0x436>
 80106ba:	4640      	mov	r0, r8
 80106bc:	f7ef fd92 	bl	80001e4 <strlen>
 80106c0:	4683      	mov	fp, r0
 80106c2:	e5bc      	b.n	801023e <_vfprintf_r+0x436>
 80106c4:	080155d8 	.word	0x080155d8
 80106c8:	080155e8 	.word	0x080155e8
 80106cc:	08015569 	.word	0x08015569
 80106d0:	f04a 0a10 	orr.w	sl, sl, #16
 80106d4:	f01a 0f20 	tst.w	sl, #32
 80106d8:	d009      	beq.n	80106ee <_vfprintf_r+0x8e6>
 80106da:	3707      	adds	r7, #7
 80106dc:	f027 0707 	bic.w	r7, r7, #7
 80106e0:	f107 0308 	add.w	r3, r7, #8
 80106e4:	e9d7 6700 	ldrd	r6, r7, [r7]
 80106e8:	9308      	str	r3, [sp, #32]
 80106ea:	2301      	movs	r3, #1
 80106ec:	e797      	b.n	801061e <_vfprintf_r+0x816>
 80106ee:	1d3b      	adds	r3, r7, #4
 80106f0:	f01a 0f10 	tst.w	sl, #16
 80106f4:	9308      	str	r3, [sp, #32]
 80106f6:	d001      	beq.n	80106fc <_vfprintf_r+0x8f4>
 80106f8:	683e      	ldr	r6, [r7, #0]
 80106fa:	e003      	b.n	8010704 <_vfprintf_r+0x8fc>
 80106fc:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8010700:	d0fa      	beq.n	80106f8 <_vfprintf_r+0x8f0>
 8010702:	883e      	ldrh	r6, [r7, #0]
 8010704:	2700      	movs	r7, #0
 8010706:	e7f0      	b.n	80106ea <_vfprintf_r+0x8e2>
 8010708:	b10b      	cbz	r3, 801070e <_vfprintf_r+0x906>
 801070a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 801070e:	4ba3      	ldr	r3, [pc, #652]	; (801099c <_vfprintf_r+0xb94>)
 8010710:	e4be      	b.n	8010090 <_vfprintf_r+0x288>
 8010712:	1d3b      	adds	r3, r7, #4
 8010714:	f01a 0f10 	tst.w	sl, #16
 8010718:	9308      	str	r3, [sp, #32]
 801071a:	d001      	beq.n	8010720 <_vfprintf_r+0x918>
 801071c:	683e      	ldr	r6, [r7, #0]
 801071e:	e003      	b.n	8010728 <_vfprintf_r+0x920>
 8010720:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8010724:	d0fa      	beq.n	801071c <_vfprintf_r+0x914>
 8010726:	883e      	ldrh	r6, [r7, #0]
 8010728:	2700      	movs	r7, #0
 801072a:	e4be      	b.n	80100aa <_vfprintf_r+0x2a2>
 801072c:	4643      	mov	r3, r8
 801072e:	e375      	b.n	8010e1c <_vfprintf_r+0x1014>
 8010730:	2f00      	cmp	r7, #0
 8010732:	bf08      	it	eq
 8010734:	2e0a      	cmpeq	r6, #10
 8010736:	d205      	bcs.n	8010744 <_vfprintf_r+0x93c>
 8010738:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 801073c:	3630      	adds	r6, #48	; 0x30
 801073e:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8010742:	e386      	b.n	8010e52 <_vfprintf_r+0x104a>
 8010744:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8010748:	4630      	mov	r0, r6
 801074a:	4639      	mov	r1, r7
 801074c:	220a      	movs	r2, #10
 801074e:	2300      	movs	r3, #0
 8010750:	f7f0 faa6 	bl	8000ca0 <__aeabi_uldivmod>
 8010754:	3230      	adds	r2, #48	; 0x30
 8010756:	f808 2d01 	strb.w	r2, [r8, #-1]!
 801075a:	2300      	movs	r3, #0
 801075c:	4630      	mov	r0, r6
 801075e:	4639      	mov	r1, r7
 8010760:	220a      	movs	r2, #10
 8010762:	f7f0 fa9d 	bl	8000ca0 <__aeabi_uldivmod>
 8010766:	4606      	mov	r6, r0
 8010768:	460f      	mov	r7, r1
 801076a:	ea56 0307 	orrs.w	r3, r6, r7
 801076e:	d1eb      	bne.n	8010748 <_vfprintf_r+0x940>
 8010770:	e36f      	b.n	8010e52 <_vfprintf_r+0x104a>
 8010772:	2600      	movs	r6, #0
 8010774:	2700      	movs	r7, #0
 8010776:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 801077a:	f006 030f 	and.w	r3, r6, #15
 801077e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010780:	5cd3      	ldrb	r3, [r2, r3]
 8010782:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8010786:	0933      	lsrs	r3, r6, #4
 8010788:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 801078c:	093a      	lsrs	r2, r7, #4
 801078e:	461e      	mov	r6, r3
 8010790:	4617      	mov	r7, r2
 8010792:	ea56 0307 	orrs.w	r3, r6, r7
 8010796:	d1f0      	bne.n	801077a <_vfprintf_r+0x972>
 8010798:	e35b      	b.n	8010e52 <_vfprintf_r+0x104a>
 801079a:	b943      	cbnz	r3, 80107ae <_vfprintf_r+0x9a6>
 801079c:	f01a 0f01 	tst.w	sl, #1
 80107a0:	d005      	beq.n	80107ae <_vfprintf_r+0x9a6>
 80107a2:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 80107a6:	2330      	movs	r3, #48	; 0x30
 80107a8:	f808 3d41 	strb.w	r3, [r8, #-65]!
 80107ac:	e351      	b.n	8010e52 <_vfprintf_r+0x104a>
 80107ae:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 80107b2:	e34e      	b.n	8010e52 <_vfprintf_r+0x104a>
 80107b4:	b10b      	cbz	r3, 80107ba <_vfprintf_r+0x9b2>
 80107b6:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80107ba:	9b06      	ldr	r3, [sp, #24]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	f000 8301 	beq.w	8010dc4 <_vfprintf_r+0xfbc>
 80107c2:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80107c6:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 80107ca:	2600      	movs	r6, #0
 80107cc:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 80107d0:	9708      	str	r7, [sp, #32]
 80107d2:	e4dd      	b.n	8010190 <_vfprintf_r+0x388>
 80107d4:	4606      	mov	r6, r0
 80107d6:	e532      	b.n	801023e <_vfprintf_r+0x436>
 80107d8:	2310      	movs	r3, #16
 80107da:	6063      	str	r3, [r4, #4]
 80107dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80107de:	3310      	adds	r3, #16
 80107e0:	9323      	str	r3, [sp, #140]	; 0x8c
 80107e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80107e4:	3301      	adds	r3, #1
 80107e6:	2b07      	cmp	r3, #7
 80107e8:	9322      	str	r3, [sp, #136]	; 0x88
 80107ea:	dc02      	bgt.n	80107f2 <_vfprintf_r+0x9ea>
 80107ec:	3408      	adds	r4, #8
 80107ee:	3f10      	subs	r7, #16
 80107f0:	e60f      	b.n	8010412 <_vfprintf_r+0x60a>
 80107f2:	aa21      	add	r2, sp, #132	; 0x84
 80107f4:	4629      	mov	r1, r5
 80107f6:	4648      	mov	r0, r9
 80107f8:	f003 fed3 	bl	80145a2 <__sprint_r>
 80107fc:	2800      	cmp	r0, #0
 80107fe:	f040 82bd 	bne.w	8010d7c <_vfprintf_r+0xf74>
 8010802:	ac2e      	add	r4, sp, #184	; 0xb8
 8010804:	e7f3      	b.n	80107ee <_vfprintf_r+0x9e6>
 8010806:	aa21      	add	r2, sp, #132	; 0x84
 8010808:	4629      	mov	r1, r5
 801080a:	4648      	mov	r0, r9
 801080c:	f003 fec9 	bl	80145a2 <__sprint_r>
 8010810:	2800      	cmp	r0, #0
 8010812:	f040 82b3 	bne.w	8010d7c <_vfprintf_r+0xf74>
 8010816:	ac2e      	add	r4, sp, #184	; 0xb8
 8010818:	e60b      	b.n	8010432 <_vfprintf_r+0x62a>
 801081a:	aa21      	add	r2, sp, #132	; 0x84
 801081c:	4629      	mov	r1, r5
 801081e:	4648      	mov	r0, r9
 8010820:	f003 febf 	bl	80145a2 <__sprint_r>
 8010824:	2800      	cmp	r0, #0
 8010826:	f040 82a9 	bne.w	8010d7c <_vfprintf_r+0xf74>
 801082a:	ac2e      	add	r4, sp, #184	; 0xb8
 801082c:	e613      	b.n	8010456 <_vfprintf_r+0x64e>
 801082e:	aa21      	add	r2, sp, #132	; 0x84
 8010830:	4629      	mov	r1, r5
 8010832:	4648      	mov	r0, r9
 8010834:	f003 feb5 	bl	80145a2 <__sprint_r>
 8010838:	2800      	cmp	r0, #0
 801083a:	f040 829f 	bne.w	8010d7c <_vfprintf_r+0xf74>
 801083e:	ac2e      	add	r4, sp, #184	; 0xb8
 8010840:	e619      	b.n	8010476 <_vfprintf_r+0x66e>
 8010842:	2310      	movs	r3, #16
 8010844:	6063      	str	r3, [r4, #4]
 8010846:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010848:	3310      	adds	r3, #16
 801084a:	9323      	str	r3, [sp, #140]	; 0x8c
 801084c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801084e:	3301      	adds	r3, #1
 8010850:	2b07      	cmp	r3, #7
 8010852:	9322      	str	r3, [sp, #136]	; 0x88
 8010854:	dc02      	bgt.n	801085c <_vfprintf_r+0xa54>
 8010856:	3408      	adds	r4, #8
 8010858:	3f10      	subs	r7, #16
 801085a:	e614      	b.n	8010486 <_vfprintf_r+0x67e>
 801085c:	aa21      	add	r2, sp, #132	; 0x84
 801085e:	4629      	mov	r1, r5
 8010860:	4648      	mov	r0, r9
 8010862:	f003 fe9e 	bl	80145a2 <__sprint_r>
 8010866:	2800      	cmp	r0, #0
 8010868:	f040 8288 	bne.w	8010d7c <_vfprintf_r+0xf74>
 801086c:	ac2e      	add	r4, sp, #184	; 0xb8
 801086e:	e7f3      	b.n	8010858 <_vfprintf_r+0xa50>
 8010870:	aa21      	add	r2, sp, #132	; 0x84
 8010872:	4629      	mov	r1, r5
 8010874:	4648      	mov	r0, r9
 8010876:	f003 fe94 	bl	80145a2 <__sprint_r>
 801087a:	2800      	cmp	r0, #0
 801087c:	f040 827e 	bne.w	8010d7c <_vfprintf_r+0xf74>
 8010880:	ac2e      	add	r4, sp, #184	; 0xb8
 8010882:	e610      	b.n	80104a6 <_vfprintf_r+0x69e>
 8010884:	2310      	movs	r3, #16
 8010886:	6063      	str	r3, [r4, #4]
 8010888:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801088a:	3310      	adds	r3, #16
 801088c:	9323      	str	r3, [sp, #140]	; 0x8c
 801088e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010890:	3301      	adds	r3, #1
 8010892:	2b07      	cmp	r3, #7
 8010894:	9322      	str	r3, [sp, #136]	; 0x88
 8010896:	dc02      	bgt.n	801089e <_vfprintf_r+0xa96>
 8010898:	3408      	adds	r4, #8
 801089a:	3e10      	subs	r6, #16
 801089c:	e608      	b.n	80104b0 <_vfprintf_r+0x6a8>
 801089e:	aa21      	add	r2, sp, #132	; 0x84
 80108a0:	4629      	mov	r1, r5
 80108a2:	4648      	mov	r0, r9
 80108a4:	f003 fe7d 	bl	80145a2 <__sprint_r>
 80108a8:	2800      	cmp	r0, #0
 80108aa:	f040 8267 	bne.w	8010d7c <_vfprintf_r+0xf74>
 80108ae:	ac2e      	add	r4, sp, #184	; 0xb8
 80108b0:	e7f3      	b.n	801089a <_vfprintf_r+0xa92>
 80108b2:	aa21      	add	r2, sp, #132	; 0x84
 80108b4:	4629      	mov	r1, r5
 80108b6:	4648      	mov	r0, r9
 80108b8:	f003 fe73 	bl	80145a2 <__sprint_r>
 80108bc:	2800      	cmp	r0, #0
 80108be:	f040 825d 	bne.w	8010d7c <_vfprintf_r+0xf74>
 80108c2:	ac2e      	add	r4, sp, #184	; 0xb8
 80108c4:	e603      	b.n	80104ce <_vfprintf_r+0x6c6>
 80108c6:	9b06      	ldr	r3, [sp, #24]
 80108c8:	2b65      	cmp	r3, #101	; 0x65
 80108ca:	f340 81b1 	ble.w	8010c30 <_vfprintf_r+0xe28>
 80108ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80108d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80108d2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80108d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80108d6:	f7f0 f903 	bl	8000ae0 <__aeabi_dcmpeq>
 80108da:	2800      	cmp	r0, #0
 80108dc:	d064      	beq.n	80109a8 <_vfprintf_r+0xba0>
 80108de:	4b30      	ldr	r3, [pc, #192]	; (80109a0 <_vfprintf_r+0xb98>)
 80108e0:	6023      	str	r3, [r4, #0]
 80108e2:	2301      	movs	r3, #1
 80108e4:	6063      	str	r3, [r4, #4]
 80108e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80108e8:	3301      	adds	r3, #1
 80108ea:	9323      	str	r3, [sp, #140]	; 0x8c
 80108ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80108ee:	3301      	adds	r3, #1
 80108f0:	2b07      	cmp	r3, #7
 80108f2:	9322      	str	r3, [sp, #136]	; 0x88
 80108f4:	dc26      	bgt.n	8010944 <_vfprintf_r+0xb3c>
 80108f6:	3408      	adds	r4, #8
 80108f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80108fa:	9a07      	ldr	r2, [sp, #28]
 80108fc:	4293      	cmp	r3, r2
 80108fe:	db03      	blt.n	8010908 <_vfprintf_r+0xb00>
 8010900:	f01a 0f01 	tst.w	sl, #1
 8010904:	f43f adfb 	beq.w	80104fe <_vfprintf_r+0x6f6>
 8010908:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801090a:	6023      	str	r3, [r4, #0]
 801090c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801090e:	6063      	str	r3, [r4, #4]
 8010910:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010912:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010914:	4413      	add	r3, r2
 8010916:	9323      	str	r3, [sp, #140]	; 0x8c
 8010918:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801091a:	3301      	adds	r3, #1
 801091c:	2b07      	cmp	r3, #7
 801091e:	9322      	str	r3, [sp, #136]	; 0x88
 8010920:	dc1a      	bgt.n	8010958 <_vfprintf_r+0xb50>
 8010922:	3408      	adds	r4, #8
 8010924:	9b07      	ldr	r3, [sp, #28]
 8010926:	1e5e      	subs	r6, r3, #1
 8010928:	2e00      	cmp	r6, #0
 801092a:	f77f ade8 	ble.w	80104fe <_vfprintf_r+0x6f6>
 801092e:	4f1d      	ldr	r7, [pc, #116]	; (80109a4 <_vfprintf_r+0xb9c>)
 8010930:	f04f 0810 	mov.w	r8, #16
 8010934:	2e10      	cmp	r6, #16
 8010936:	6027      	str	r7, [r4, #0]
 8010938:	dc18      	bgt.n	801096c <_vfprintf_r+0xb64>
 801093a:	6066      	str	r6, [r4, #4]
 801093c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801093e:	441e      	add	r6, r3
 8010940:	9623      	str	r6, [sp, #140]	; 0x8c
 8010942:	e5cd      	b.n	80104e0 <_vfprintf_r+0x6d8>
 8010944:	aa21      	add	r2, sp, #132	; 0x84
 8010946:	4629      	mov	r1, r5
 8010948:	4648      	mov	r0, r9
 801094a:	f003 fe2a 	bl	80145a2 <__sprint_r>
 801094e:	2800      	cmp	r0, #0
 8010950:	f040 8214 	bne.w	8010d7c <_vfprintf_r+0xf74>
 8010954:	ac2e      	add	r4, sp, #184	; 0xb8
 8010956:	e7cf      	b.n	80108f8 <_vfprintf_r+0xaf0>
 8010958:	aa21      	add	r2, sp, #132	; 0x84
 801095a:	4629      	mov	r1, r5
 801095c:	4648      	mov	r0, r9
 801095e:	f003 fe20 	bl	80145a2 <__sprint_r>
 8010962:	2800      	cmp	r0, #0
 8010964:	f040 820a 	bne.w	8010d7c <_vfprintf_r+0xf74>
 8010968:	ac2e      	add	r4, sp, #184	; 0xb8
 801096a:	e7db      	b.n	8010924 <_vfprintf_r+0xb1c>
 801096c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801096e:	f8c4 8004 	str.w	r8, [r4, #4]
 8010972:	3310      	adds	r3, #16
 8010974:	9323      	str	r3, [sp, #140]	; 0x8c
 8010976:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010978:	3301      	adds	r3, #1
 801097a:	2b07      	cmp	r3, #7
 801097c:	9322      	str	r3, [sp, #136]	; 0x88
 801097e:	dc02      	bgt.n	8010986 <_vfprintf_r+0xb7e>
 8010980:	3408      	adds	r4, #8
 8010982:	3e10      	subs	r6, #16
 8010984:	e7d6      	b.n	8010934 <_vfprintf_r+0xb2c>
 8010986:	aa21      	add	r2, sp, #132	; 0x84
 8010988:	4629      	mov	r1, r5
 801098a:	4648      	mov	r0, r9
 801098c:	f003 fe09 	bl	80145a2 <__sprint_r>
 8010990:	2800      	cmp	r0, #0
 8010992:	f040 81f3 	bne.w	8010d7c <_vfprintf_r+0xf74>
 8010996:	ac2e      	add	r4, sp, #184	; 0xb8
 8010998:	e7f3      	b.n	8010982 <_vfprintf_r+0xb7a>
 801099a:	bf00      	nop
 801099c:	08015569 	.word	0x08015569
 80109a0:	0801557a 	.word	0x0801557a
 80109a4:	080155e8 	.word	0x080155e8
 80109a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	dc7b      	bgt.n	8010aa6 <_vfprintf_r+0xc9e>
 80109ae:	4b9e      	ldr	r3, [pc, #632]	; (8010c28 <_vfprintf_r+0xe20>)
 80109b0:	6023      	str	r3, [r4, #0]
 80109b2:	2301      	movs	r3, #1
 80109b4:	6063      	str	r3, [r4, #4]
 80109b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80109b8:	3301      	adds	r3, #1
 80109ba:	9323      	str	r3, [sp, #140]	; 0x8c
 80109bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80109be:	3301      	adds	r3, #1
 80109c0:	2b07      	cmp	r3, #7
 80109c2:	9322      	str	r3, [sp, #136]	; 0x88
 80109c4:	dc45      	bgt.n	8010a52 <_vfprintf_r+0xc4a>
 80109c6:	3408      	adds	r4, #8
 80109c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80109ca:	b92b      	cbnz	r3, 80109d8 <_vfprintf_r+0xbd0>
 80109cc:	9b07      	ldr	r3, [sp, #28]
 80109ce:	b91b      	cbnz	r3, 80109d8 <_vfprintf_r+0xbd0>
 80109d0:	f01a 0f01 	tst.w	sl, #1
 80109d4:	f43f ad93 	beq.w	80104fe <_vfprintf_r+0x6f6>
 80109d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80109da:	6023      	str	r3, [r4, #0]
 80109dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109de:	6063      	str	r3, [r4, #4]
 80109e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80109e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80109e4:	4413      	add	r3, r2
 80109e6:	9323      	str	r3, [sp, #140]	; 0x8c
 80109e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80109ea:	3301      	adds	r3, #1
 80109ec:	2b07      	cmp	r3, #7
 80109ee:	9322      	str	r3, [sp, #136]	; 0x88
 80109f0:	dc39      	bgt.n	8010a66 <_vfprintf_r+0xc5e>
 80109f2:	f104 0308 	add.w	r3, r4, #8
 80109f6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80109f8:	2e00      	cmp	r6, #0
 80109fa:	da19      	bge.n	8010a30 <_vfprintf_r+0xc28>
 80109fc:	4f8b      	ldr	r7, [pc, #556]	; (8010c2c <_vfprintf_r+0xe24>)
 80109fe:	4276      	negs	r6, r6
 8010a00:	2410      	movs	r4, #16
 8010a02:	2e10      	cmp	r6, #16
 8010a04:	601f      	str	r7, [r3, #0]
 8010a06:	dc38      	bgt.n	8010a7a <_vfprintf_r+0xc72>
 8010a08:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8010a0a:	605e      	str	r6, [r3, #4]
 8010a0c:	4416      	add	r6, r2
 8010a0e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010a10:	9623      	str	r6, [sp, #140]	; 0x8c
 8010a12:	3201      	adds	r2, #1
 8010a14:	2a07      	cmp	r2, #7
 8010a16:	f103 0308 	add.w	r3, r3, #8
 8010a1a:	9222      	str	r2, [sp, #136]	; 0x88
 8010a1c:	dd08      	ble.n	8010a30 <_vfprintf_r+0xc28>
 8010a1e:	aa21      	add	r2, sp, #132	; 0x84
 8010a20:	4629      	mov	r1, r5
 8010a22:	4648      	mov	r0, r9
 8010a24:	f003 fdbd 	bl	80145a2 <__sprint_r>
 8010a28:	2800      	cmp	r0, #0
 8010a2a:	f040 81a7 	bne.w	8010d7c <_vfprintf_r+0xf74>
 8010a2e:	ab2e      	add	r3, sp, #184	; 0xb8
 8010a30:	9a07      	ldr	r2, [sp, #28]
 8010a32:	605a      	str	r2, [r3, #4]
 8010a34:	9907      	ldr	r1, [sp, #28]
 8010a36:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8010a38:	f8c3 8000 	str.w	r8, [r3]
 8010a3c:	440a      	add	r2, r1
 8010a3e:	9223      	str	r2, [sp, #140]	; 0x8c
 8010a40:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010a42:	3201      	adds	r2, #1
 8010a44:	2a07      	cmp	r2, #7
 8010a46:	9222      	str	r2, [sp, #136]	; 0x88
 8010a48:	f73f ad50 	bgt.w	80104ec <_vfprintf_r+0x6e4>
 8010a4c:	f103 0408 	add.w	r4, r3, #8
 8010a50:	e555      	b.n	80104fe <_vfprintf_r+0x6f6>
 8010a52:	aa21      	add	r2, sp, #132	; 0x84
 8010a54:	4629      	mov	r1, r5
 8010a56:	4648      	mov	r0, r9
 8010a58:	f003 fda3 	bl	80145a2 <__sprint_r>
 8010a5c:	2800      	cmp	r0, #0
 8010a5e:	f040 818d 	bne.w	8010d7c <_vfprintf_r+0xf74>
 8010a62:	ac2e      	add	r4, sp, #184	; 0xb8
 8010a64:	e7b0      	b.n	80109c8 <_vfprintf_r+0xbc0>
 8010a66:	aa21      	add	r2, sp, #132	; 0x84
 8010a68:	4629      	mov	r1, r5
 8010a6a:	4648      	mov	r0, r9
 8010a6c:	f003 fd99 	bl	80145a2 <__sprint_r>
 8010a70:	2800      	cmp	r0, #0
 8010a72:	f040 8183 	bne.w	8010d7c <_vfprintf_r+0xf74>
 8010a76:	ab2e      	add	r3, sp, #184	; 0xb8
 8010a78:	e7bd      	b.n	80109f6 <_vfprintf_r+0xbee>
 8010a7a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8010a7c:	605c      	str	r4, [r3, #4]
 8010a7e:	3210      	adds	r2, #16
 8010a80:	9223      	str	r2, [sp, #140]	; 0x8c
 8010a82:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010a84:	3201      	adds	r2, #1
 8010a86:	2a07      	cmp	r2, #7
 8010a88:	9222      	str	r2, [sp, #136]	; 0x88
 8010a8a:	dc02      	bgt.n	8010a92 <_vfprintf_r+0xc8a>
 8010a8c:	3308      	adds	r3, #8
 8010a8e:	3e10      	subs	r6, #16
 8010a90:	e7b7      	b.n	8010a02 <_vfprintf_r+0xbfa>
 8010a92:	aa21      	add	r2, sp, #132	; 0x84
 8010a94:	4629      	mov	r1, r5
 8010a96:	4648      	mov	r0, r9
 8010a98:	f003 fd83 	bl	80145a2 <__sprint_r>
 8010a9c:	2800      	cmp	r0, #0
 8010a9e:	f040 816d 	bne.w	8010d7c <_vfprintf_r+0xf74>
 8010aa2:	ab2e      	add	r3, sp, #184	; 0xb8
 8010aa4:	e7f3      	b.n	8010a8e <_vfprintf_r+0xc86>
 8010aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010aa8:	9a07      	ldr	r2, [sp, #28]
 8010aaa:	4293      	cmp	r3, r2
 8010aac:	bfa8      	it	ge
 8010aae:	4613      	movge	r3, r2
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	461e      	mov	r6, r3
 8010ab4:	dd0b      	ble.n	8010ace <_vfprintf_r+0xcc6>
 8010ab6:	6063      	str	r3, [r4, #4]
 8010ab8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010aba:	f8c4 8000 	str.w	r8, [r4]
 8010abe:	4433      	add	r3, r6
 8010ac0:	9323      	str	r3, [sp, #140]	; 0x8c
 8010ac2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010ac4:	3301      	adds	r3, #1
 8010ac6:	2b07      	cmp	r3, #7
 8010ac8:	9322      	str	r3, [sp, #136]	; 0x88
 8010aca:	dc63      	bgt.n	8010b94 <_vfprintf_r+0xd8c>
 8010acc:	3408      	adds	r4, #8
 8010ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ad0:	2e00      	cmp	r6, #0
 8010ad2:	bfa8      	it	ge
 8010ad4:	1b9b      	subge	r3, r3, r6
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	461e      	mov	r6, r3
 8010ada:	dd0f      	ble.n	8010afc <_vfprintf_r+0xcf4>
 8010adc:	4f53      	ldr	r7, [pc, #332]	; (8010c2c <_vfprintf_r+0xe24>)
 8010ade:	f04f 0b10 	mov.w	fp, #16
 8010ae2:	2e10      	cmp	r6, #16
 8010ae4:	6027      	str	r7, [r4, #0]
 8010ae6:	dc5f      	bgt.n	8010ba8 <_vfprintf_r+0xda0>
 8010ae8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010aea:	6066      	str	r6, [r4, #4]
 8010aec:	441e      	add	r6, r3
 8010aee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010af0:	9623      	str	r6, [sp, #140]	; 0x8c
 8010af2:	3301      	adds	r3, #1
 8010af4:	2b07      	cmp	r3, #7
 8010af6:	9322      	str	r3, [sp, #136]	; 0x88
 8010af8:	dc6d      	bgt.n	8010bd6 <_vfprintf_r+0xdce>
 8010afa:	3408      	adds	r4, #8
 8010afc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010afe:	9a07      	ldr	r2, [sp, #28]
 8010b00:	4293      	cmp	r3, r2
 8010b02:	db02      	blt.n	8010b0a <_vfprintf_r+0xd02>
 8010b04:	f01a 0f01 	tst.w	sl, #1
 8010b08:	d00d      	beq.n	8010b26 <_vfprintf_r+0xd1e>
 8010b0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010b0c:	6023      	str	r3, [r4, #0]
 8010b0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b10:	6063      	str	r3, [r4, #4]
 8010b12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010b14:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010b16:	4413      	add	r3, r2
 8010b18:	9323      	str	r3, [sp, #140]	; 0x8c
 8010b1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010b1c:	3301      	adds	r3, #1
 8010b1e:	2b07      	cmp	r3, #7
 8010b20:	9322      	str	r3, [sp, #136]	; 0x88
 8010b22:	dc62      	bgt.n	8010bea <_vfprintf_r+0xde2>
 8010b24:	3408      	adds	r4, #8
 8010b26:	9b07      	ldr	r3, [sp, #28]
 8010b28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010b2a:	1a9e      	subs	r6, r3, r2
 8010b2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010b2e:	9a07      	ldr	r2, [sp, #28]
 8010b30:	1ad3      	subs	r3, r2, r3
 8010b32:	429e      	cmp	r6, r3
 8010b34:	bfa8      	it	ge
 8010b36:	461e      	movge	r6, r3
 8010b38:	2e00      	cmp	r6, #0
 8010b3a:	dd0c      	ble.n	8010b56 <_vfprintf_r+0xd4e>
 8010b3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b3e:	4443      	add	r3, r8
 8010b40:	e884 0048 	stmia.w	r4, {r3, r6}
 8010b44:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010b46:	4433      	add	r3, r6
 8010b48:	9323      	str	r3, [sp, #140]	; 0x8c
 8010b4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010b4c:	3301      	adds	r3, #1
 8010b4e:	2b07      	cmp	r3, #7
 8010b50:	9322      	str	r3, [sp, #136]	; 0x88
 8010b52:	dc54      	bgt.n	8010bfe <_vfprintf_r+0xdf6>
 8010b54:	3408      	adds	r4, #8
 8010b56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010b58:	9a07      	ldr	r2, [sp, #28]
 8010b5a:	2e00      	cmp	r6, #0
 8010b5c:	eba2 0303 	sub.w	r3, r2, r3
 8010b60:	bfac      	ite	ge
 8010b62:	1b9e      	subge	r6, r3, r6
 8010b64:	461e      	movlt	r6, r3
 8010b66:	2e00      	cmp	r6, #0
 8010b68:	f77f acc9 	ble.w	80104fe <_vfprintf_r+0x6f6>
 8010b6c:	4f2f      	ldr	r7, [pc, #188]	; (8010c2c <_vfprintf_r+0xe24>)
 8010b6e:	f04f 0810 	mov.w	r8, #16
 8010b72:	2e10      	cmp	r6, #16
 8010b74:	6027      	str	r7, [r4, #0]
 8010b76:	f77f aee0 	ble.w	801093a <_vfprintf_r+0xb32>
 8010b7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010b7c:	f8c4 8004 	str.w	r8, [r4, #4]
 8010b80:	3310      	adds	r3, #16
 8010b82:	9323      	str	r3, [sp, #140]	; 0x8c
 8010b84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010b86:	3301      	adds	r3, #1
 8010b88:	2b07      	cmp	r3, #7
 8010b8a:	9322      	str	r3, [sp, #136]	; 0x88
 8010b8c:	dc41      	bgt.n	8010c12 <_vfprintf_r+0xe0a>
 8010b8e:	3408      	adds	r4, #8
 8010b90:	3e10      	subs	r6, #16
 8010b92:	e7ee      	b.n	8010b72 <_vfprintf_r+0xd6a>
 8010b94:	aa21      	add	r2, sp, #132	; 0x84
 8010b96:	4629      	mov	r1, r5
 8010b98:	4648      	mov	r0, r9
 8010b9a:	f003 fd02 	bl	80145a2 <__sprint_r>
 8010b9e:	2800      	cmp	r0, #0
 8010ba0:	f040 80ec 	bne.w	8010d7c <_vfprintf_r+0xf74>
 8010ba4:	ac2e      	add	r4, sp, #184	; 0xb8
 8010ba6:	e792      	b.n	8010ace <_vfprintf_r+0xcc6>
 8010ba8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010baa:	f8c4 b004 	str.w	fp, [r4, #4]
 8010bae:	3310      	adds	r3, #16
 8010bb0:	9323      	str	r3, [sp, #140]	; 0x8c
 8010bb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010bb4:	3301      	adds	r3, #1
 8010bb6:	2b07      	cmp	r3, #7
 8010bb8:	9322      	str	r3, [sp, #136]	; 0x88
 8010bba:	dc02      	bgt.n	8010bc2 <_vfprintf_r+0xdba>
 8010bbc:	3408      	adds	r4, #8
 8010bbe:	3e10      	subs	r6, #16
 8010bc0:	e78f      	b.n	8010ae2 <_vfprintf_r+0xcda>
 8010bc2:	aa21      	add	r2, sp, #132	; 0x84
 8010bc4:	4629      	mov	r1, r5
 8010bc6:	4648      	mov	r0, r9
 8010bc8:	f003 fceb 	bl	80145a2 <__sprint_r>
 8010bcc:	2800      	cmp	r0, #0
 8010bce:	f040 80d5 	bne.w	8010d7c <_vfprintf_r+0xf74>
 8010bd2:	ac2e      	add	r4, sp, #184	; 0xb8
 8010bd4:	e7f3      	b.n	8010bbe <_vfprintf_r+0xdb6>
 8010bd6:	aa21      	add	r2, sp, #132	; 0x84
 8010bd8:	4629      	mov	r1, r5
 8010bda:	4648      	mov	r0, r9
 8010bdc:	f003 fce1 	bl	80145a2 <__sprint_r>
 8010be0:	2800      	cmp	r0, #0
 8010be2:	f040 80cb 	bne.w	8010d7c <_vfprintf_r+0xf74>
 8010be6:	ac2e      	add	r4, sp, #184	; 0xb8
 8010be8:	e788      	b.n	8010afc <_vfprintf_r+0xcf4>
 8010bea:	aa21      	add	r2, sp, #132	; 0x84
 8010bec:	4629      	mov	r1, r5
 8010bee:	4648      	mov	r0, r9
 8010bf0:	f003 fcd7 	bl	80145a2 <__sprint_r>
 8010bf4:	2800      	cmp	r0, #0
 8010bf6:	f040 80c1 	bne.w	8010d7c <_vfprintf_r+0xf74>
 8010bfa:	ac2e      	add	r4, sp, #184	; 0xb8
 8010bfc:	e793      	b.n	8010b26 <_vfprintf_r+0xd1e>
 8010bfe:	aa21      	add	r2, sp, #132	; 0x84
 8010c00:	4629      	mov	r1, r5
 8010c02:	4648      	mov	r0, r9
 8010c04:	f003 fccd 	bl	80145a2 <__sprint_r>
 8010c08:	2800      	cmp	r0, #0
 8010c0a:	f040 80b7 	bne.w	8010d7c <_vfprintf_r+0xf74>
 8010c0e:	ac2e      	add	r4, sp, #184	; 0xb8
 8010c10:	e7a1      	b.n	8010b56 <_vfprintf_r+0xd4e>
 8010c12:	aa21      	add	r2, sp, #132	; 0x84
 8010c14:	4629      	mov	r1, r5
 8010c16:	4648      	mov	r0, r9
 8010c18:	f003 fcc3 	bl	80145a2 <__sprint_r>
 8010c1c:	2800      	cmp	r0, #0
 8010c1e:	f040 80ad 	bne.w	8010d7c <_vfprintf_r+0xf74>
 8010c22:	ac2e      	add	r4, sp, #184	; 0xb8
 8010c24:	e7b4      	b.n	8010b90 <_vfprintf_r+0xd88>
 8010c26:	bf00      	nop
 8010c28:	0801557a 	.word	0x0801557a
 8010c2c:	080155e8 	.word	0x080155e8
 8010c30:	9b07      	ldr	r3, [sp, #28]
 8010c32:	2b01      	cmp	r3, #1
 8010c34:	dc02      	bgt.n	8010c3c <_vfprintf_r+0xe34>
 8010c36:	f01a 0f01 	tst.w	sl, #1
 8010c3a:	d076      	beq.n	8010d2a <_vfprintf_r+0xf22>
 8010c3c:	2301      	movs	r3, #1
 8010c3e:	6063      	str	r3, [r4, #4]
 8010c40:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010c42:	f8c4 8000 	str.w	r8, [r4]
 8010c46:	3301      	adds	r3, #1
 8010c48:	9323      	str	r3, [sp, #140]	; 0x8c
 8010c4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010c4c:	3301      	adds	r3, #1
 8010c4e:	2b07      	cmp	r3, #7
 8010c50:	9322      	str	r3, [sp, #136]	; 0x88
 8010c52:	dc36      	bgt.n	8010cc2 <_vfprintf_r+0xeba>
 8010c54:	3408      	adds	r4, #8
 8010c56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010c58:	6023      	str	r3, [r4, #0]
 8010c5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c5c:	6063      	str	r3, [r4, #4]
 8010c5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010c60:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010c62:	4413      	add	r3, r2
 8010c64:	9323      	str	r3, [sp, #140]	; 0x8c
 8010c66:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010c68:	3301      	adds	r3, #1
 8010c6a:	2b07      	cmp	r3, #7
 8010c6c:	9322      	str	r3, [sp, #136]	; 0x88
 8010c6e:	dc31      	bgt.n	8010cd4 <_vfprintf_r+0xecc>
 8010c70:	3408      	adds	r4, #8
 8010c72:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010c74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010c76:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010c78:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010c7a:	f7ef ff31 	bl	8000ae0 <__aeabi_dcmpeq>
 8010c7e:	9b07      	ldr	r3, [sp, #28]
 8010c80:	1e5e      	subs	r6, r3, #1
 8010c82:	2800      	cmp	r0, #0
 8010c84:	d12f      	bne.n	8010ce6 <_vfprintf_r+0xede>
 8010c86:	f108 0301 	add.w	r3, r8, #1
 8010c8a:	e884 0048 	stmia.w	r4, {r3, r6}
 8010c8e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010c90:	9a07      	ldr	r2, [sp, #28]
 8010c92:	3b01      	subs	r3, #1
 8010c94:	4413      	add	r3, r2
 8010c96:	9323      	str	r3, [sp, #140]	; 0x8c
 8010c98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010c9a:	3301      	adds	r3, #1
 8010c9c:	2b07      	cmp	r3, #7
 8010c9e:	9322      	str	r3, [sp, #136]	; 0x88
 8010ca0:	dd4a      	ble.n	8010d38 <_vfprintf_r+0xf30>
 8010ca2:	aa21      	add	r2, sp, #132	; 0x84
 8010ca4:	4629      	mov	r1, r5
 8010ca6:	4648      	mov	r0, r9
 8010ca8:	f003 fc7b 	bl	80145a2 <__sprint_r>
 8010cac:	2800      	cmp	r0, #0
 8010cae:	d165      	bne.n	8010d7c <_vfprintf_r+0xf74>
 8010cb0:	ac2e      	add	r4, sp, #184	; 0xb8
 8010cb2:	ab1d      	add	r3, sp, #116	; 0x74
 8010cb4:	6023      	str	r3, [r4, #0]
 8010cb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010cb8:	6063      	str	r3, [r4, #4]
 8010cba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010cbc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010cbe:	4413      	add	r3, r2
 8010cc0:	e40d      	b.n	80104de <_vfprintf_r+0x6d6>
 8010cc2:	aa21      	add	r2, sp, #132	; 0x84
 8010cc4:	4629      	mov	r1, r5
 8010cc6:	4648      	mov	r0, r9
 8010cc8:	f003 fc6b 	bl	80145a2 <__sprint_r>
 8010ccc:	2800      	cmp	r0, #0
 8010cce:	d155      	bne.n	8010d7c <_vfprintf_r+0xf74>
 8010cd0:	ac2e      	add	r4, sp, #184	; 0xb8
 8010cd2:	e7c0      	b.n	8010c56 <_vfprintf_r+0xe4e>
 8010cd4:	aa21      	add	r2, sp, #132	; 0x84
 8010cd6:	4629      	mov	r1, r5
 8010cd8:	4648      	mov	r0, r9
 8010cda:	f003 fc62 	bl	80145a2 <__sprint_r>
 8010cde:	2800      	cmp	r0, #0
 8010ce0:	d14c      	bne.n	8010d7c <_vfprintf_r+0xf74>
 8010ce2:	ac2e      	add	r4, sp, #184	; 0xb8
 8010ce4:	e7c5      	b.n	8010c72 <_vfprintf_r+0xe6a>
 8010ce6:	2e00      	cmp	r6, #0
 8010ce8:	dde3      	ble.n	8010cb2 <_vfprintf_r+0xeaa>
 8010cea:	4f5f      	ldr	r7, [pc, #380]	; (8010e68 <_vfprintf_r+0x1060>)
 8010cec:	f04f 0810 	mov.w	r8, #16
 8010cf0:	2e10      	cmp	r6, #16
 8010cf2:	6027      	str	r7, [r4, #0]
 8010cf4:	dc04      	bgt.n	8010d00 <_vfprintf_r+0xef8>
 8010cf6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010cf8:	6066      	str	r6, [r4, #4]
 8010cfa:	441e      	add	r6, r3
 8010cfc:	9623      	str	r6, [sp, #140]	; 0x8c
 8010cfe:	e7cb      	b.n	8010c98 <_vfprintf_r+0xe90>
 8010d00:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010d02:	f8c4 8004 	str.w	r8, [r4, #4]
 8010d06:	3310      	adds	r3, #16
 8010d08:	9323      	str	r3, [sp, #140]	; 0x8c
 8010d0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010d0c:	3301      	adds	r3, #1
 8010d0e:	2b07      	cmp	r3, #7
 8010d10:	9322      	str	r3, [sp, #136]	; 0x88
 8010d12:	dc02      	bgt.n	8010d1a <_vfprintf_r+0xf12>
 8010d14:	3408      	adds	r4, #8
 8010d16:	3e10      	subs	r6, #16
 8010d18:	e7ea      	b.n	8010cf0 <_vfprintf_r+0xee8>
 8010d1a:	aa21      	add	r2, sp, #132	; 0x84
 8010d1c:	4629      	mov	r1, r5
 8010d1e:	4648      	mov	r0, r9
 8010d20:	f003 fc3f 	bl	80145a2 <__sprint_r>
 8010d24:	bb50      	cbnz	r0, 8010d7c <_vfprintf_r+0xf74>
 8010d26:	ac2e      	add	r4, sp, #184	; 0xb8
 8010d28:	e7f5      	b.n	8010d16 <_vfprintf_r+0xf0e>
 8010d2a:	2301      	movs	r3, #1
 8010d2c:	6063      	str	r3, [r4, #4]
 8010d2e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010d30:	f8c4 8000 	str.w	r8, [r4]
 8010d34:	3301      	adds	r3, #1
 8010d36:	e7ae      	b.n	8010c96 <_vfprintf_r+0xe8e>
 8010d38:	3408      	adds	r4, #8
 8010d3a:	e7ba      	b.n	8010cb2 <_vfprintf_r+0xeaa>
 8010d3c:	3408      	adds	r4, #8
 8010d3e:	f7ff bbde 	b.w	80104fe <_vfprintf_r+0x6f6>
 8010d42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010d44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010d46:	1a9e      	subs	r6, r3, r2
 8010d48:	2e00      	cmp	r6, #0
 8010d4a:	f77f abdc 	ble.w	8010506 <_vfprintf_r+0x6fe>
 8010d4e:	2710      	movs	r7, #16
 8010d50:	4b46      	ldr	r3, [pc, #280]	; (8010e6c <_vfprintf_r+0x1064>)
 8010d52:	6023      	str	r3, [r4, #0]
 8010d54:	2e10      	cmp	r6, #16
 8010d56:	dc20      	bgt.n	8010d9a <_vfprintf_r+0xf92>
 8010d58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010d5a:	6066      	str	r6, [r4, #4]
 8010d5c:	441e      	add	r6, r3
 8010d5e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010d60:	9623      	str	r6, [sp, #140]	; 0x8c
 8010d62:	3301      	adds	r3, #1
 8010d64:	2b07      	cmp	r3, #7
 8010d66:	9322      	str	r3, [sp, #136]	; 0x88
 8010d68:	f77f abcd 	ble.w	8010506 <_vfprintf_r+0x6fe>
 8010d6c:	aa21      	add	r2, sp, #132	; 0x84
 8010d6e:	4629      	mov	r1, r5
 8010d70:	4648      	mov	r0, r9
 8010d72:	f003 fc16 	bl	80145a2 <__sprint_r>
 8010d76:	2800      	cmp	r0, #0
 8010d78:	f43f abc5 	beq.w	8010506 <_vfprintf_r+0x6fe>
 8010d7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010d7e:	07d9      	lsls	r1, r3, #31
 8010d80:	d405      	bmi.n	8010d8e <_vfprintf_r+0xf86>
 8010d82:	89ab      	ldrh	r3, [r5, #12]
 8010d84:	059a      	lsls	r2, r3, #22
 8010d86:	d402      	bmi.n	8010d8e <_vfprintf_r+0xf86>
 8010d88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010d8a:	f002 f806 	bl	8012d9a <__retarget_lock_release_recursive>
 8010d8e:	89ab      	ldrh	r3, [r5, #12]
 8010d90:	065b      	lsls	r3, r3, #25
 8010d92:	f57f a8a6 	bpl.w	800fee2 <_vfprintf_r+0xda>
 8010d96:	f7ff b87c 	b.w	800fe92 <_vfprintf_r+0x8a>
 8010d9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010d9c:	6067      	str	r7, [r4, #4]
 8010d9e:	3310      	adds	r3, #16
 8010da0:	9323      	str	r3, [sp, #140]	; 0x8c
 8010da2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010da4:	3301      	adds	r3, #1
 8010da6:	2b07      	cmp	r3, #7
 8010da8:	9322      	str	r3, [sp, #136]	; 0x88
 8010daa:	dc02      	bgt.n	8010db2 <_vfprintf_r+0xfaa>
 8010dac:	3408      	adds	r4, #8
 8010dae:	3e10      	subs	r6, #16
 8010db0:	e7ce      	b.n	8010d50 <_vfprintf_r+0xf48>
 8010db2:	aa21      	add	r2, sp, #132	; 0x84
 8010db4:	4629      	mov	r1, r5
 8010db6:	4648      	mov	r0, r9
 8010db8:	f003 fbf3 	bl	80145a2 <__sprint_r>
 8010dbc:	2800      	cmp	r0, #0
 8010dbe:	d1dd      	bne.n	8010d7c <_vfprintf_r+0xf74>
 8010dc0:	ac2e      	add	r4, sp, #184	; 0xb8
 8010dc2:	e7f4      	b.n	8010dae <_vfprintf_r+0xfa6>
 8010dc4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010dc6:	b913      	cbnz	r3, 8010dce <_vfprintf_r+0xfc6>
 8010dc8:	2300      	movs	r3, #0
 8010dca:	9322      	str	r3, [sp, #136]	; 0x88
 8010dcc:	e7d6      	b.n	8010d7c <_vfprintf_r+0xf74>
 8010dce:	aa21      	add	r2, sp, #132	; 0x84
 8010dd0:	4629      	mov	r1, r5
 8010dd2:	4648      	mov	r0, r9
 8010dd4:	f003 fbe5 	bl	80145a2 <__sprint_r>
 8010dd8:	2800      	cmp	r0, #0
 8010dda:	d0f5      	beq.n	8010dc8 <_vfprintf_r+0xfc0>
 8010ddc:	e7ce      	b.n	8010d7c <_vfprintf_r+0xf74>
 8010dde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010de0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010de2:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010de4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010de6:	f7ef fead 	bl	8000b44 <__aeabi_dcmpun>
 8010dea:	2800      	cmp	r0, #0
 8010dec:	f43f aa29 	beq.w	8010242 <_vfprintf_r+0x43a>
 8010df0:	4b1f      	ldr	r3, [pc, #124]	; (8010e70 <_vfprintf_r+0x1068>)
 8010df2:	4a20      	ldr	r2, [pc, #128]	; (8010e74 <_vfprintf_r+0x106c>)
 8010df4:	f7ff ba19 	b.w	801022a <_vfprintf_r+0x422>
 8010df8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010dfa:	1a1b      	subs	r3, r3, r0
 8010dfc:	9307      	str	r3, [sp, #28]
 8010dfe:	f7ff ba9e 	b.w	801033e <_vfprintf_r+0x536>
 8010e02:	ea56 0207 	orrs.w	r2, r6, r7
 8010e06:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8010e0a:	f43f ac1a 	beq.w	8010642 <_vfprintf_r+0x83a>
 8010e0e:	2b01      	cmp	r3, #1
 8010e10:	f43f ac8e 	beq.w	8010730 <_vfprintf_r+0x928>
 8010e14:	2b02      	cmp	r3, #2
 8010e16:	f43f acae 	beq.w	8010776 <_vfprintf_r+0x96e>
 8010e1a:	ab2e      	add	r3, sp, #184	; 0xb8
 8010e1c:	08f1      	lsrs	r1, r6, #3
 8010e1e:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8010e22:	08f8      	lsrs	r0, r7, #3
 8010e24:	f006 0207 	and.w	r2, r6, #7
 8010e28:	4607      	mov	r7, r0
 8010e2a:	460e      	mov	r6, r1
 8010e2c:	3230      	adds	r2, #48	; 0x30
 8010e2e:	ea56 0107 	orrs.w	r1, r6, r7
 8010e32:	f103 38ff 	add.w	r8, r3, #4294967295
 8010e36:	f803 2c01 	strb.w	r2, [r3, #-1]
 8010e3a:	f47f ac77 	bne.w	801072c <_vfprintf_r+0x924>
 8010e3e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010e40:	07c8      	lsls	r0, r1, #31
 8010e42:	d506      	bpl.n	8010e52 <_vfprintf_r+0x104a>
 8010e44:	2a30      	cmp	r2, #48	; 0x30
 8010e46:	d004      	beq.n	8010e52 <_vfprintf_r+0x104a>
 8010e48:	2230      	movs	r2, #48	; 0x30
 8010e4a:	f808 2c01 	strb.w	r2, [r8, #-1]
 8010e4e:	f1a3 0802 	sub.w	r8, r3, #2
 8010e52:	ab2e      	add	r3, sp, #184	; 0xb8
 8010e54:	465e      	mov	r6, fp
 8010e56:	eba3 0b08 	sub.w	fp, r3, r8
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8010e60:	930a      	str	r3, [sp, #40]	; 0x28
 8010e62:	f7ff babb 	b.w	80103dc <_vfprintf_r+0x5d4>
 8010e66:	bf00      	nop
 8010e68:	080155e8 	.word	0x080155e8
 8010e6c:	080155d8 	.word	0x080155d8
 8010e70:	08015550 	.word	0x08015550
 8010e74:	08015554 	.word	0x08015554

08010e78 <__sbprintf>:
 8010e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e7a:	460c      	mov	r4, r1
 8010e7c:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8010e80:	461f      	mov	r7, r3
 8010e82:	8989      	ldrh	r1, [r1, #12]
 8010e84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010e86:	9319      	str	r3, [sp, #100]	; 0x64
 8010e88:	89e3      	ldrh	r3, [r4, #14]
 8010e8a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010e8e:	f021 0102 	bic.w	r1, r1, #2
 8010e92:	6a23      	ldr	r3, [r4, #32]
 8010e94:	f8ad 100c 	strh.w	r1, [sp, #12]
 8010e98:	9308      	str	r3, [sp, #32]
 8010e9a:	a91a      	add	r1, sp, #104	; 0x68
 8010e9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010e9e:	930a      	str	r3, [sp, #40]	; 0x28
 8010ea0:	4615      	mov	r5, r2
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	4606      	mov	r6, r0
 8010ea6:	9100      	str	r1, [sp, #0]
 8010ea8:	9104      	str	r1, [sp, #16]
 8010eaa:	a816      	add	r0, sp, #88	; 0x58
 8010eac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010eb0:	9102      	str	r1, [sp, #8]
 8010eb2:	9105      	str	r1, [sp, #20]
 8010eb4:	9306      	str	r3, [sp, #24]
 8010eb6:	f001 ff6b 	bl	8012d90 <__retarget_lock_init_recursive>
 8010eba:	462a      	mov	r2, r5
 8010ebc:	463b      	mov	r3, r7
 8010ebe:	4669      	mov	r1, sp
 8010ec0:	4630      	mov	r0, r6
 8010ec2:	f7fe ffa1 	bl	800fe08 <_vfprintf_r>
 8010ec6:	1e05      	subs	r5, r0, #0
 8010ec8:	db07      	blt.n	8010eda <__sbprintf+0x62>
 8010eca:	4669      	mov	r1, sp
 8010ecc:	4630      	mov	r0, r6
 8010ece:	f000 ff87 	bl	8011de0 <_fflush_r>
 8010ed2:	2800      	cmp	r0, #0
 8010ed4:	bf18      	it	ne
 8010ed6:	f04f 35ff 	movne.w	r5, #4294967295
 8010eda:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010ede:	9816      	ldr	r0, [sp, #88]	; 0x58
 8010ee0:	065b      	lsls	r3, r3, #25
 8010ee2:	bf42      	ittt	mi
 8010ee4:	89a3      	ldrhmi	r3, [r4, #12]
 8010ee6:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8010eea:	81a3      	strhmi	r3, [r4, #12]
 8010eec:	f001 ff51 	bl	8012d92 <__retarget_lock_close_recursive>
 8010ef0:	4628      	mov	r0, r5
 8010ef2:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8010ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010ef8 <__swsetup_r>:
 8010ef8:	4b32      	ldr	r3, [pc, #200]	; (8010fc4 <__swsetup_r+0xcc>)
 8010efa:	b570      	push	{r4, r5, r6, lr}
 8010efc:	681d      	ldr	r5, [r3, #0]
 8010efe:	4606      	mov	r6, r0
 8010f00:	460c      	mov	r4, r1
 8010f02:	b125      	cbz	r5, 8010f0e <__swsetup_r+0x16>
 8010f04:	69ab      	ldr	r3, [r5, #24]
 8010f06:	b913      	cbnz	r3, 8010f0e <__swsetup_r+0x16>
 8010f08:	4628      	mov	r0, r5
 8010f0a:	f000 fffd 	bl	8011f08 <__sinit>
 8010f0e:	4b2e      	ldr	r3, [pc, #184]	; (8010fc8 <__swsetup_r+0xd0>)
 8010f10:	429c      	cmp	r4, r3
 8010f12:	d10f      	bne.n	8010f34 <__swsetup_r+0x3c>
 8010f14:	686c      	ldr	r4, [r5, #4]
 8010f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f1a:	b29a      	uxth	r2, r3
 8010f1c:	0715      	lsls	r5, r2, #28
 8010f1e:	d42c      	bmi.n	8010f7a <__swsetup_r+0x82>
 8010f20:	06d0      	lsls	r0, r2, #27
 8010f22:	d411      	bmi.n	8010f48 <__swsetup_r+0x50>
 8010f24:	2209      	movs	r2, #9
 8010f26:	6032      	str	r2, [r6, #0]
 8010f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f2c:	81a3      	strh	r3, [r4, #12]
 8010f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8010f32:	bd70      	pop	{r4, r5, r6, pc}
 8010f34:	4b25      	ldr	r3, [pc, #148]	; (8010fcc <__swsetup_r+0xd4>)
 8010f36:	429c      	cmp	r4, r3
 8010f38:	d101      	bne.n	8010f3e <__swsetup_r+0x46>
 8010f3a:	68ac      	ldr	r4, [r5, #8]
 8010f3c:	e7eb      	b.n	8010f16 <__swsetup_r+0x1e>
 8010f3e:	4b24      	ldr	r3, [pc, #144]	; (8010fd0 <__swsetup_r+0xd8>)
 8010f40:	429c      	cmp	r4, r3
 8010f42:	bf08      	it	eq
 8010f44:	68ec      	ldreq	r4, [r5, #12]
 8010f46:	e7e6      	b.n	8010f16 <__swsetup_r+0x1e>
 8010f48:	0751      	lsls	r1, r2, #29
 8010f4a:	d512      	bpl.n	8010f72 <__swsetup_r+0x7a>
 8010f4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f4e:	b141      	cbz	r1, 8010f62 <__swsetup_r+0x6a>
 8010f50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f54:	4299      	cmp	r1, r3
 8010f56:	d002      	beq.n	8010f5e <__swsetup_r+0x66>
 8010f58:	4630      	mov	r0, r6
 8010f5a:	f001 f8ab 	bl	80120b4 <_free_r>
 8010f5e:	2300      	movs	r3, #0
 8010f60:	6363      	str	r3, [r4, #52]	; 0x34
 8010f62:	89a3      	ldrh	r3, [r4, #12]
 8010f64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010f68:	81a3      	strh	r3, [r4, #12]
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	6063      	str	r3, [r4, #4]
 8010f6e:	6923      	ldr	r3, [r4, #16]
 8010f70:	6023      	str	r3, [r4, #0]
 8010f72:	89a3      	ldrh	r3, [r4, #12]
 8010f74:	f043 0308 	orr.w	r3, r3, #8
 8010f78:	81a3      	strh	r3, [r4, #12]
 8010f7a:	6923      	ldr	r3, [r4, #16]
 8010f7c:	b94b      	cbnz	r3, 8010f92 <__swsetup_r+0x9a>
 8010f7e:	89a3      	ldrh	r3, [r4, #12]
 8010f80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010f88:	d003      	beq.n	8010f92 <__swsetup_r+0x9a>
 8010f8a:	4621      	mov	r1, r4
 8010f8c:	4630      	mov	r0, r6
 8010f8e:	f001 ff31 	bl	8012df4 <__smakebuf_r>
 8010f92:	89a2      	ldrh	r2, [r4, #12]
 8010f94:	f012 0301 	ands.w	r3, r2, #1
 8010f98:	d00c      	beq.n	8010fb4 <__swsetup_r+0xbc>
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	60a3      	str	r3, [r4, #8]
 8010f9e:	6963      	ldr	r3, [r4, #20]
 8010fa0:	425b      	negs	r3, r3
 8010fa2:	61a3      	str	r3, [r4, #24]
 8010fa4:	6923      	ldr	r3, [r4, #16]
 8010fa6:	b953      	cbnz	r3, 8010fbe <__swsetup_r+0xc6>
 8010fa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010fac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010fb0:	d1ba      	bne.n	8010f28 <__swsetup_r+0x30>
 8010fb2:	bd70      	pop	{r4, r5, r6, pc}
 8010fb4:	0792      	lsls	r2, r2, #30
 8010fb6:	bf58      	it	pl
 8010fb8:	6963      	ldrpl	r3, [r4, #20]
 8010fba:	60a3      	str	r3, [r4, #8]
 8010fbc:	e7f2      	b.n	8010fa4 <__swsetup_r+0xac>
 8010fbe:	2000      	movs	r0, #0
 8010fc0:	e7f7      	b.n	8010fb2 <__swsetup_r+0xba>
 8010fc2:	bf00      	nop
 8010fc4:	20000014 	.word	0x20000014
 8010fc8:	08015628 	.word	0x08015628
 8010fcc:	08015648 	.word	0x08015648
 8010fd0:	08015608 	.word	0x08015608

08010fd4 <div>:
 8010fd4:	2900      	cmp	r1, #0
 8010fd6:	b510      	push	{r4, lr}
 8010fd8:	fb91 f4f2 	sdiv	r4, r1, r2
 8010fdc:	fb02 1314 	mls	r3, r2, r4, r1
 8010fe0:	db06      	blt.n	8010ff0 <div+0x1c>
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	da01      	bge.n	8010fea <div+0x16>
 8010fe6:	3401      	adds	r4, #1
 8010fe8:	1a9b      	subs	r3, r3, r2
 8010fea:	6004      	str	r4, [r0, #0]
 8010fec:	6043      	str	r3, [r0, #4]
 8010fee:	bd10      	pop	{r4, pc}
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	bfc4      	itt	gt
 8010ff4:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8010ff8:	189b      	addgt	r3, r3, r2
 8010ffa:	e7f6      	b.n	8010fea <div+0x16>

08010ffc <quorem>:
 8010ffc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011000:	6903      	ldr	r3, [r0, #16]
 8011002:	690c      	ldr	r4, [r1, #16]
 8011004:	429c      	cmp	r4, r3
 8011006:	4680      	mov	r8, r0
 8011008:	f300 8082 	bgt.w	8011110 <quorem+0x114>
 801100c:	3c01      	subs	r4, #1
 801100e:	f101 0714 	add.w	r7, r1, #20
 8011012:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8011016:	f100 0614 	add.w	r6, r0, #20
 801101a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801101e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8011022:	eb06 030e 	add.w	r3, r6, lr
 8011026:	3501      	adds	r5, #1
 8011028:	eb07 090e 	add.w	r9, r7, lr
 801102c:	9301      	str	r3, [sp, #4]
 801102e:	fbb0 f5f5 	udiv	r5, r0, r5
 8011032:	b395      	cbz	r5, 801109a <quorem+0x9e>
 8011034:	f04f 0a00 	mov.w	sl, #0
 8011038:	4638      	mov	r0, r7
 801103a:	46b4      	mov	ip, r6
 801103c:	46d3      	mov	fp, sl
 801103e:	f850 2b04 	ldr.w	r2, [r0], #4
 8011042:	b293      	uxth	r3, r2
 8011044:	fb05 a303 	mla	r3, r5, r3, sl
 8011048:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801104c:	b29b      	uxth	r3, r3
 801104e:	ebab 0303 	sub.w	r3, fp, r3
 8011052:	0c12      	lsrs	r2, r2, #16
 8011054:	f8bc b000 	ldrh.w	fp, [ip]
 8011058:	fb05 a202 	mla	r2, r5, r2, sl
 801105c:	fa13 f38b 	uxtah	r3, r3, fp
 8011060:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8011064:	fa1f fb82 	uxth.w	fp, r2
 8011068:	f8dc 2000 	ldr.w	r2, [ip]
 801106c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8011070:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011074:	b29b      	uxth	r3, r3
 8011076:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801107a:	4581      	cmp	r9, r0
 801107c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8011080:	f84c 3b04 	str.w	r3, [ip], #4
 8011084:	d2db      	bcs.n	801103e <quorem+0x42>
 8011086:	f856 300e 	ldr.w	r3, [r6, lr]
 801108a:	b933      	cbnz	r3, 801109a <quorem+0x9e>
 801108c:	9b01      	ldr	r3, [sp, #4]
 801108e:	3b04      	subs	r3, #4
 8011090:	429e      	cmp	r6, r3
 8011092:	461a      	mov	r2, r3
 8011094:	d330      	bcc.n	80110f8 <quorem+0xfc>
 8011096:	f8c8 4010 	str.w	r4, [r8, #16]
 801109a:	4640      	mov	r0, r8
 801109c:	f002 f95d 	bl	801335a <__mcmp>
 80110a0:	2800      	cmp	r0, #0
 80110a2:	db25      	blt.n	80110f0 <quorem+0xf4>
 80110a4:	3501      	adds	r5, #1
 80110a6:	4630      	mov	r0, r6
 80110a8:	f04f 0e00 	mov.w	lr, #0
 80110ac:	f857 2b04 	ldr.w	r2, [r7], #4
 80110b0:	f8d0 c000 	ldr.w	ip, [r0]
 80110b4:	b293      	uxth	r3, r2
 80110b6:	ebae 0303 	sub.w	r3, lr, r3
 80110ba:	0c12      	lsrs	r2, r2, #16
 80110bc:	fa13 f38c 	uxtah	r3, r3, ip
 80110c0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80110c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80110c8:	b29b      	uxth	r3, r3
 80110ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80110ce:	45b9      	cmp	r9, r7
 80110d0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80110d4:	f840 3b04 	str.w	r3, [r0], #4
 80110d8:	d2e8      	bcs.n	80110ac <quorem+0xb0>
 80110da:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80110de:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80110e2:	b92a      	cbnz	r2, 80110f0 <quorem+0xf4>
 80110e4:	3b04      	subs	r3, #4
 80110e6:	429e      	cmp	r6, r3
 80110e8:	461a      	mov	r2, r3
 80110ea:	d30b      	bcc.n	8011104 <quorem+0x108>
 80110ec:	f8c8 4010 	str.w	r4, [r8, #16]
 80110f0:	4628      	mov	r0, r5
 80110f2:	b003      	add	sp, #12
 80110f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110f8:	6812      	ldr	r2, [r2, #0]
 80110fa:	3b04      	subs	r3, #4
 80110fc:	2a00      	cmp	r2, #0
 80110fe:	d1ca      	bne.n	8011096 <quorem+0x9a>
 8011100:	3c01      	subs	r4, #1
 8011102:	e7c5      	b.n	8011090 <quorem+0x94>
 8011104:	6812      	ldr	r2, [r2, #0]
 8011106:	3b04      	subs	r3, #4
 8011108:	2a00      	cmp	r2, #0
 801110a:	d1ef      	bne.n	80110ec <quorem+0xf0>
 801110c:	3c01      	subs	r4, #1
 801110e:	e7ea      	b.n	80110e6 <quorem+0xea>
 8011110:	2000      	movs	r0, #0
 8011112:	e7ee      	b.n	80110f2 <quorem+0xf6>
 8011114:	0000      	movs	r0, r0
	...

08011118 <_dtoa_r>:
 8011118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801111c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801111e:	b095      	sub	sp, #84	; 0x54
 8011120:	4604      	mov	r4, r0
 8011122:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8011124:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011128:	b93e      	cbnz	r6, 801113a <_dtoa_r+0x22>
 801112a:	2010      	movs	r0, #16
 801112c:	f7fb fef4 	bl	800cf18 <malloc>
 8011130:	6260      	str	r0, [r4, #36]	; 0x24
 8011132:	6046      	str	r6, [r0, #4]
 8011134:	6086      	str	r6, [r0, #8]
 8011136:	6006      	str	r6, [r0, #0]
 8011138:	60c6      	str	r6, [r0, #12]
 801113a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801113c:	6819      	ldr	r1, [r3, #0]
 801113e:	b151      	cbz	r1, 8011156 <_dtoa_r+0x3e>
 8011140:	685a      	ldr	r2, [r3, #4]
 8011142:	604a      	str	r2, [r1, #4]
 8011144:	2301      	movs	r3, #1
 8011146:	4093      	lsls	r3, r2
 8011148:	608b      	str	r3, [r1, #8]
 801114a:	4620      	mov	r0, r4
 801114c:	f001 fef2 	bl	8012f34 <_Bfree>
 8011150:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011152:	2200      	movs	r2, #0
 8011154:	601a      	str	r2, [r3, #0]
 8011156:	9b03      	ldr	r3, [sp, #12]
 8011158:	2b00      	cmp	r3, #0
 801115a:	bfbf      	itttt	lt
 801115c:	2301      	movlt	r3, #1
 801115e:	602b      	strlt	r3, [r5, #0]
 8011160:	9b03      	ldrlt	r3, [sp, #12]
 8011162:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011166:	bfb2      	itee	lt
 8011168:	9303      	strlt	r3, [sp, #12]
 801116a:	2300      	movge	r3, #0
 801116c:	602b      	strge	r3, [r5, #0]
 801116e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8011172:	4ba9      	ldr	r3, [pc, #676]	; (8011418 <_dtoa_r+0x300>)
 8011174:	ea33 0309 	bics.w	r3, r3, r9
 8011178:	d11b      	bne.n	80111b2 <_dtoa_r+0x9a>
 801117a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801117c:	f242 730f 	movw	r3, #9999	; 0x270f
 8011180:	6013      	str	r3, [r2, #0]
 8011182:	9b02      	ldr	r3, [sp, #8]
 8011184:	b923      	cbnz	r3, 8011190 <_dtoa_r+0x78>
 8011186:	f3c9 0013 	ubfx	r0, r9, #0, #20
 801118a:	2800      	cmp	r0, #0
 801118c:	f000 8581 	beq.w	8011c92 <_dtoa_r+0xb7a>
 8011190:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011192:	b953      	cbnz	r3, 80111aa <_dtoa_r+0x92>
 8011194:	4ba1      	ldr	r3, [pc, #644]	; (801141c <_dtoa_r+0x304>)
 8011196:	e021      	b.n	80111dc <_dtoa_r+0xc4>
 8011198:	4ba1      	ldr	r3, [pc, #644]	; (8011420 <_dtoa_r+0x308>)
 801119a:	9306      	str	r3, [sp, #24]
 801119c:	3308      	adds	r3, #8
 801119e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80111a0:	6013      	str	r3, [r2, #0]
 80111a2:	9806      	ldr	r0, [sp, #24]
 80111a4:	b015      	add	sp, #84	; 0x54
 80111a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111aa:	4b9c      	ldr	r3, [pc, #624]	; (801141c <_dtoa_r+0x304>)
 80111ac:	9306      	str	r3, [sp, #24]
 80111ae:	3303      	adds	r3, #3
 80111b0:	e7f5      	b.n	801119e <_dtoa_r+0x86>
 80111b2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80111b6:	2200      	movs	r2, #0
 80111b8:	2300      	movs	r3, #0
 80111ba:	4630      	mov	r0, r6
 80111bc:	4639      	mov	r1, r7
 80111be:	f7ef fc8f 	bl	8000ae0 <__aeabi_dcmpeq>
 80111c2:	4680      	mov	r8, r0
 80111c4:	b160      	cbz	r0, 80111e0 <_dtoa_r+0xc8>
 80111c6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80111c8:	2301      	movs	r3, #1
 80111ca:	6013      	str	r3, [r2, #0]
 80111cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	f000 855c 	beq.w	8011c8c <_dtoa_r+0xb74>
 80111d4:	4b93      	ldr	r3, [pc, #588]	; (8011424 <_dtoa_r+0x30c>)
 80111d6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80111d8:	6013      	str	r3, [r2, #0]
 80111da:	3b01      	subs	r3, #1
 80111dc:	9306      	str	r3, [sp, #24]
 80111de:	e7e0      	b.n	80111a2 <_dtoa_r+0x8a>
 80111e0:	ab12      	add	r3, sp, #72	; 0x48
 80111e2:	9301      	str	r3, [sp, #4]
 80111e4:	ab13      	add	r3, sp, #76	; 0x4c
 80111e6:	9300      	str	r3, [sp, #0]
 80111e8:	4632      	mov	r2, r6
 80111ea:	463b      	mov	r3, r7
 80111ec:	4620      	mov	r0, r4
 80111ee:	f002 f9a3 	bl	8013538 <__d2b>
 80111f2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80111f6:	4682      	mov	sl, r0
 80111f8:	2d00      	cmp	r5, #0
 80111fa:	d07c      	beq.n	80112f6 <_dtoa_r+0x1de>
 80111fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011200:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8011204:	4630      	mov	r0, r6
 8011206:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801120a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801120e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8011212:	2200      	movs	r2, #0
 8011214:	4b84      	ldr	r3, [pc, #528]	; (8011428 <_dtoa_r+0x310>)
 8011216:	f7ef f847 	bl	80002a8 <__aeabi_dsub>
 801121a:	a379      	add	r3, pc, #484	; (adr r3, 8011400 <_dtoa_r+0x2e8>)
 801121c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011220:	f7ef f9f6 	bl	8000610 <__aeabi_dmul>
 8011224:	a378      	add	r3, pc, #480	; (adr r3, 8011408 <_dtoa_r+0x2f0>)
 8011226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801122a:	f7ef f83f 	bl	80002ac <__adddf3>
 801122e:	4606      	mov	r6, r0
 8011230:	4628      	mov	r0, r5
 8011232:	460f      	mov	r7, r1
 8011234:	f7ef f986 	bl	8000544 <__aeabi_i2d>
 8011238:	a375      	add	r3, pc, #468	; (adr r3, 8011410 <_dtoa_r+0x2f8>)
 801123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801123e:	f7ef f9e7 	bl	8000610 <__aeabi_dmul>
 8011242:	4602      	mov	r2, r0
 8011244:	460b      	mov	r3, r1
 8011246:	4630      	mov	r0, r6
 8011248:	4639      	mov	r1, r7
 801124a:	f7ef f82f 	bl	80002ac <__adddf3>
 801124e:	4606      	mov	r6, r0
 8011250:	460f      	mov	r7, r1
 8011252:	f7ef fc8d 	bl	8000b70 <__aeabi_d2iz>
 8011256:	2200      	movs	r2, #0
 8011258:	4683      	mov	fp, r0
 801125a:	2300      	movs	r3, #0
 801125c:	4630      	mov	r0, r6
 801125e:	4639      	mov	r1, r7
 8011260:	f7ef fc48 	bl	8000af4 <__aeabi_dcmplt>
 8011264:	b158      	cbz	r0, 801127e <_dtoa_r+0x166>
 8011266:	4658      	mov	r0, fp
 8011268:	f7ef f96c 	bl	8000544 <__aeabi_i2d>
 801126c:	4602      	mov	r2, r0
 801126e:	460b      	mov	r3, r1
 8011270:	4630      	mov	r0, r6
 8011272:	4639      	mov	r1, r7
 8011274:	f7ef fc34 	bl	8000ae0 <__aeabi_dcmpeq>
 8011278:	b908      	cbnz	r0, 801127e <_dtoa_r+0x166>
 801127a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801127e:	f1bb 0f16 	cmp.w	fp, #22
 8011282:	d857      	bhi.n	8011334 <_dtoa_r+0x21c>
 8011284:	4969      	ldr	r1, [pc, #420]	; (801142c <_dtoa_r+0x314>)
 8011286:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801128a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801128e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011292:	f7ef fc4d 	bl	8000b30 <__aeabi_dcmpgt>
 8011296:	2800      	cmp	r0, #0
 8011298:	d04e      	beq.n	8011338 <_dtoa_r+0x220>
 801129a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801129e:	2300      	movs	r3, #0
 80112a0:	930d      	str	r3, [sp, #52]	; 0x34
 80112a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80112a4:	1b5d      	subs	r5, r3, r5
 80112a6:	1e6b      	subs	r3, r5, #1
 80112a8:	9307      	str	r3, [sp, #28]
 80112aa:	bf43      	ittte	mi
 80112ac:	2300      	movmi	r3, #0
 80112ae:	f1c5 0801 	rsbmi	r8, r5, #1
 80112b2:	9307      	strmi	r3, [sp, #28]
 80112b4:	f04f 0800 	movpl.w	r8, #0
 80112b8:	f1bb 0f00 	cmp.w	fp, #0
 80112bc:	db3e      	blt.n	801133c <_dtoa_r+0x224>
 80112be:	9b07      	ldr	r3, [sp, #28]
 80112c0:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80112c4:	445b      	add	r3, fp
 80112c6:	9307      	str	r3, [sp, #28]
 80112c8:	2300      	movs	r3, #0
 80112ca:	9308      	str	r3, [sp, #32]
 80112cc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80112ce:	2b09      	cmp	r3, #9
 80112d0:	f200 80b0 	bhi.w	8011434 <_dtoa_r+0x31c>
 80112d4:	2b05      	cmp	r3, #5
 80112d6:	bfc4      	itt	gt
 80112d8:	3b04      	subgt	r3, #4
 80112da:	931e      	strgt	r3, [sp, #120]	; 0x78
 80112dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80112de:	f1a3 0302 	sub.w	r3, r3, #2
 80112e2:	bfcc      	ite	gt
 80112e4:	2600      	movgt	r6, #0
 80112e6:	2601      	movle	r6, #1
 80112e8:	2b03      	cmp	r3, #3
 80112ea:	f200 80af 	bhi.w	801144c <_dtoa_r+0x334>
 80112ee:	e8df f003 	tbb	[pc, r3]
 80112f2:	8583      	.short	0x8583
 80112f4:	772d      	.short	0x772d
 80112f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80112f8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80112fa:	441d      	add	r5, r3
 80112fc:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011300:	2b20      	cmp	r3, #32
 8011302:	dd11      	ble.n	8011328 <_dtoa_r+0x210>
 8011304:	9a02      	ldr	r2, [sp, #8]
 8011306:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801130a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 801130e:	fa22 f000 	lsr.w	r0, r2, r0
 8011312:	fa09 f303 	lsl.w	r3, r9, r3
 8011316:	4318      	orrs	r0, r3
 8011318:	f7ef f904 	bl	8000524 <__aeabi_ui2d>
 801131c:	2301      	movs	r3, #1
 801131e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8011322:	3d01      	subs	r5, #1
 8011324:	9310      	str	r3, [sp, #64]	; 0x40
 8011326:	e774      	b.n	8011212 <_dtoa_r+0xfa>
 8011328:	f1c3 0020 	rsb	r0, r3, #32
 801132c:	9b02      	ldr	r3, [sp, #8]
 801132e:	fa03 f000 	lsl.w	r0, r3, r0
 8011332:	e7f1      	b.n	8011318 <_dtoa_r+0x200>
 8011334:	2301      	movs	r3, #1
 8011336:	e7b3      	b.n	80112a0 <_dtoa_r+0x188>
 8011338:	900d      	str	r0, [sp, #52]	; 0x34
 801133a:	e7b2      	b.n	80112a2 <_dtoa_r+0x18a>
 801133c:	f1cb 0300 	rsb	r3, fp, #0
 8011340:	9308      	str	r3, [sp, #32]
 8011342:	2300      	movs	r3, #0
 8011344:	eba8 080b 	sub.w	r8, r8, fp
 8011348:	930c      	str	r3, [sp, #48]	; 0x30
 801134a:	e7bf      	b.n	80112cc <_dtoa_r+0x1b4>
 801134c:	2301      	movs	r3, #1
 801134e:	9309      	str	r3, [sp, #36]	; 0x24
 8011350:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011352:	2b00      	cmp	r3, #0
 8011354:	dd7d      	ble.n	8011452 <_dtoa_r+0x33a>
 8011356:	9304      	str	r3, [sp, #16]
 8011358:	4699      	mov	r9, r3
 801135a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801135c:	2200      	movs	r2, #0
 801135e:	606a      	str	r2, [r5, #4]
 8011360:	2104      	movs	r1, #4
 8011362:	f101 0214 	add.w	r2, r1, #20
 8011366:	429a      	cmp	r2, r3
 8011368:	d978      	bls.n	801145c <_dtoa_r+0x344>
 801136a:	6869      	ldr	r1, [r5, #4]
 801136c:	4620      	mov	r0, r4
 801136e:	f001 fdad 	bl	8012ecc <_Balloc>
 8011372:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011374:	6028      	str	r0, [r5, #0]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	9306      	str	r3, [sp, #24]
 801137a:	f1b9 0f0e 	cmp.w	r9, #14
 801137e:	f200 80ee 	bhi.w	801155e <_dtoa_r+0x446>
 8011382:	2e00      	cmp	r6, #0
 8011384:	f000 80eb 	beq.w	801155e <_dtoa_r+0x446>
 8011388:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801138c:	f1bb 0f00 	cmp.w	fp, #0
 8011390:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8011394:	dd77      	ble.n	8011486 <_dtoa_r+0x36e>
 8011396:	4a25      	ldr	r2, [pc, #148]	; (801142c <_dtoa_r+0x314>)
 8011398:	f00b 030f 	and.w	r3, fp, #15
 801139c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80113a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113a4:	ea4f 162b 	mov.w	r6, fp, asr #4
 80113a8:	06f0      	lsls	r0, r6, #27
 80113aa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80113ae:	d55a      	bpl.n	8011466 <_dtoa_r+0x34e>
 80113b0:	4b1f      	ldr	r3, [pc, #124]	; (8011430 <_dtoa_r+0x318>)
 80113b2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80113b6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80113ba:	f7ef fa53 	bl	8000864 <__aeabi_ddiv>
 80113be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80113c2:	f006 060f 	and.w	r6, r6, #15
 80113c6:	2503      	movs	r5, #3
 80113c8:	4f19      	ldr	r7, [pc, #100]	; (8011430 <_dtoa_r+0x318>)
 80113ca:	2e00      	cmp	r6, #0
 80113cc:	d14d      	bne.n	801146a <_dtoa_r+0x352>
 80113ce:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80113d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113d6:	f7ef fa45 	bl	8000864 <__aeabi_ddiv>
 80113da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80113de:	e06c      	b.n	80114ba <_dtoa_r+0x3a2>
 80113e0:	2301      	movs	r3, #1
 80113e2:	9309      	str	r3, [sp, #36]	; 0x24
 80113e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80113e6:	445b      	add	r3, fp
 80113e8:	f103 0901 	add.w	r9, r3, #1
 80113ec:	9304      	str	r3, [sp, #16]
 80113ee:	464b      	mov	r3, r9
 80113f0:	2b01      	cmp	r3, #1
 80113f2:	bfb8      	it	lt
 80113f4:	2301      	movlt	r3, #1
 80113f6:	e7b0      	b.n	801135a <_dtoa_r+0x242>
 80113f8:	2300      	movs	r3, #0
 80113fa:	e7a8      	b.n	801134e <_dtoa_r+0x236>
 80113fc:	2300      	movs	r3, #0
 80113fe:	e7f0      	b.n	80113e2 <_dtoa_r+0x2ca>
 8011400:	636f4361 	.word	0x636f4361
 8011404:	3fd287a7 	.word	0x3fd287a7
 8011408:	8b60c8b3 	.word	0x8b60c8b3
 801140c:	3fc68a28 	.word	0x3fc68a28
 8011410:	509f79fb 	.word	0x509f79fb
 8011414:	3fd34413 	.word	0x3fd34413
 8011418:	7ff00000 	.word	0x7ff00000
 801141c:	08015601 	.word	0x08015601
 8011420:	080155f8 	.word	0x080155f8
 8011424:	0801557b 	.word	0x0801557b
 8011428:	3ff80000 	.word	0x3ff80000
 801142c:	080156a0 	.word	0x080156a0
 8011430:	08015678 	.word	0x08015678
 8011434:	2601      	movs	r6, #1
 8011436:	2300      	movs	r3, #0
 8011438:	931e      	str	r3, [sp, #120]	; 0x78
 801143a:	9609      	str	r6, [sp, #36]	; 0x24
 801143c:	f04f 33ff 	mov.w	r3, #4294967295
 8011440:	9304      	str	r3, [sp, #16]
 8011442:	4699      	mov	r9, r3
 8011444:	2200      	movs	r2, #0
 8011446:	2312      	movs	r3, #18
 8011448:	921f      	str	r2, [sp, #124]	; 0x7c
 801144a:	e786      	b.n	801135a <_dtoa_r+0x242>
 801144c:	2301      	movs	r3, #1
 801144e:	9309      	str	r3, [sp, #36]	; 0x24
 8011450:	e7f4      	b.n	801143c <_dtoa_r+0x324>
 8011452:	2301      	movs	r3, #1
 8011454:	9304      	str	r3, [sp, #16]
 8011456:	4699      	mov	r9, r3
 8011458:	461a      	mov	r2, r3
 801145a:	e7f5      	b.n	8011448 <_dtoa_r+0x330>
 801145c:	686a      	ldr	r2, [r5, #4]
 801145e:	3201      	adds	r2, #1
 8011460:	606a      	str	r2, [r5, #4]
 8011462:	0049      	lsls	r1, r1, #1
 8011464:	e77d      	b.n	8011362 <_dtoa_r+0x24a>
 8011466:	2502      	movs	r5, #2
 8011468:	e7ae      	b.n	80113c8 <_dtoa_r+0x2b0>
 801146a:	07f1      	lsls	r1, r6, #31
 801146c:	d508      	bpl.n	8011480 <_dtoa_r+0x368>
 801146e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011472:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011476:	f7ef f8cb 	bl	8000610 <__aeabi_dmul>
 801147a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801147e:	3501      	adds	r5, #1
 8011480:	1076      	asrs	r6, r6, #1
 8011482:	3708      	adds	r7, #8
 8011484:	e7a1      	b.n	80113ca <_dtoa_r+0x2b2>
 8011486:	f000 80a5 	beq.w	80115d4 <_dtoa_r+0x4bc>
 801148a:	f1cb 0600 	rsb	r6, fp, #0
 801148e:	4ba3      	ldr	r3, [pc, #652]	; (801171c <_dtoa_r+0x604>)
 8011490:	4fa3      	ldr	r7, [pc, #652]	; (8011720 <_dtoa_r+0x608>)
 8011492:	f006 020f 	and.w	r2, r6, #15
 8011496:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801149a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801149e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80114a2:	f7ef f8b5 	bl	8000610 <__aeabi_dmul>
 80114a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80114aa:	1136      	asrs	r6, r6, #4
 80114ac:	2300      	movs	r3, #0
 80114ae:	2502      	movs	r5, #2
 80114b0:	2e00      	cmp	r6, #0
 80114b2:	f040 8084 	bne.w	80115be <_dtoa_r+0x4a6>
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d18f      	bne.n	80113da <_dtoa_r+0x2c2>
 80114ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80114bc:	2b00      	cmp	r3, #0
 80114be:	f000 808b 	beq.w	80115d8 <_dtoa_r+0x4c0>
 80114c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80114c6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80114ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80114ce:	2200      	movs	r2, #0
 80114d0:	4b94      	ldr	r3, [pc, #592]	; (8011724 <_dtoa_r+0x60c>)
 80114d2:	f7ef fb0f 	bl	8000af4 <__aeabi_dcmplt>
 80114d6:	2800      	cmp	r0, #0
 80114d8:	d07e      	beq.n	80115d8 <_dtoa_r+0x4c0>
 80114da:	f1b9 0f00 	cmp.w	r9, #0
 80114de:	d07b      	beq.n	80115d8 <_dtoa_r+0x4c0>
 80114e0:	9b04      	ldr	r3, [sp, #16]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	dd37      	ble.n	8011556 <_dtoa_r+0x43e>
 80114e6:	2200      	movs	r2, #0
 80114e8:	4b8f      	ldr	r3, [pc, #572]	; (8011728 <_dtoa_r+0x610>)
 80114ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80114ee:	f7ef f88f 	bl	8000610 <__aeabi_dmul>
 80114f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80114f6:	9e04      	ldr	r6, [sp, #16]
 80114f8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80114fc:	3501      	adds	r5, #1
 80114fe:	4628      	mov	r0, r5
 8011500:	f7ef f820 	bl	8000544 <__aeabi_i2d>
 8011504:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011508:	f7ef f882 	bl	8000610 <__aeabi_dmul>
 801150c:	4b87      	ldr	r3, [pc, #540]	; (801172c <_dtoa_r+0x614>)
 801150e:	2200      	movs	r2, #0
 8011510:	f7ee fecc 	bl	80002ac <__adddf3>
 8011514:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011518:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801151a:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 801151e:	950b      	str	r5, [sp, #44]	; 0x2c
 8011520:	2e00      	cmp	r6, #0
 8011522:	d15c      	bne.n	80115de <_dtoa_r+0x4c6>
 8011524:	2200      	movs	r2, #0
 8011526:	4b82      	ldr	r3, [pc, #520]	; (8011730 <_dtoa_r+0x618>)
 8011528:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801152c:	f7ee febc 	bl	80002a8 <__aeabi_dsub>
 8011530:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011532:	462b      	mov	r3, r5
 8011534:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011538:	f7ef fafa 	bl	8000b30 <__aeabi_dcmpgt>
 801153c:	2800      	cmp	r0, #0
 801153e:	f040 82f7 	bne.w	8011b30 <_dtoa_r+0xa18>
 8011542:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011544:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8011548:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801154c:	f7ef fad2 	bl	8000af4 <__aeabi_dcmplt>
 8011550:	2800      	cmp	r0, #0
 8011552:	f040 82eb 	bne.w	8011b2c <_dtoa_r+0xa14>
 8011556:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801155a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801155e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011560:	2b00      	cmp	r3, #0
 8011562:	f2c0 8151 	blt.w	8011808 <_dtoa_r+0x6f0>
 8011566:	f1bb 0f0e 	cmp.w	fp, #14
 801156a:	f300 814d 	bgt.w	8011808 <_dtoa_r+0x6f0>
 801156e:	4b6b      	ldr	r3, [pc, #428]	; (801171c <_dtoa_r+0x604>)
 8011570:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011578:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801157c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801157e:	2b00      	cmp	r3, #0
 8011580:	f280 80da 	bge.w	8011738 <_dtoa_r+0x620>
 8011584:	f1b9 0f00 	cmp.w	r9, #0
 8011588:	f300 80d6 	bgt.w	8011738 <_dtoa_r+0x620>
 801158c:	f040 82cd 	bne.w	8011b2a <_dtoa_r+0xa12>
 8011590:	2200      	movs	r2, #0
 8011592:	4b67      	ldr	r3, [pc, #412]	; (8011730 <_dtoa_r+0x618>)
 8011594:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011598:	f7ef f83a 	bl	8000610 <__aeabi_dmul>
 801159c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80115a0:	f7ef fabc 	bl	8000b1c <__aeabi_dcmpge>
 80115a4:	464e      	mov	r6, r9
 80115a6:	464f      	mov	r7, r9
 80115a8:	2800      	cmp	r0, #0
 80115aa:	f040 82a4 	bne.w	8011af6 <_dtoa_r+0x9de>
 80115ae:	9b06      	ldr	r3, [sp, #24]
 80115b0:	9a06      	ldr	r2, [sp, #24]
 80115b2:	1c5d      	adds	r5, r3, #1
 80115b4:	2331      	movs	r3, #49	; 0x31
 80115b6:	7013      	strb	r3, [r2, #0]
 80115b8:	f10b 0b01 	add.w	fp, fp, #1
 80115bc:	e29f      	b.n	8011afe <_dtoa_r+0x9e6>
 80115be:	07f2      	lsls	r2, r6, #31
 80115c0:	d505      	bpl.n	80115ce <_dtoa_r+0x4b6>
 80115c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80115c6:	f7ef f823 	bl	8000610 <__aeabi_dmul>
 80115ca:	3501      	adds	r5, #1
 80115cc:	2301      	movs	r3, #1
 80115ce:	1076      	asrs	r6, r6, #1
 80115d0:	3708      	adds	r7, #8
 80115d2:	e76d      	b.n	80114b0 <_dtoa_r+0x398>
 80115d4:	2502      	movs	r5, #2
 80115d6:	e770      	b.n	80114ba <_dtoa_r+0x3a2>
 80115d8:	465f      	mov	r7, fp
 80115da:	464e      	mov	r6, r9
 80115dc:	e78f      	b.n	80114fe <_dtoa_r+0x3e6>
 80115de:	9a06      	ldr	r2, [sp, #24]
 80115e0:	4b4e      	ldr	r3, [pc, #312]	; (801171c <_dtoa_r+0x604>)
 80115e2:	4432      	add	r2, r6
 80115e4:	9211      	str	r2, [sp, #68]	; 0x44
 80115e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80115e8:	1e71      	subs	r1, r6, #1
 80115ea:	2a00      	cmp	r2, #0
 80115ec:	d048      	beq.n	8011680 <_dtoa_r+0x568>
 80115ee:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80115f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115f6:	2000      	movs	r0, #0
 80115f8:	494e      	ldr	r1, [pc, #312]	; (8011734 <_dtoa_r+0x61c>)
 80115fa:	f7ef f933 	bl	8000864 <__aeabi_ddiv>
 80115fe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011602:	f7ee fe51 	bl	80002a8 <__aeabi_dsub>
 8011606:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801160a:	9d06      	ldr	r5, [sp, #24]
 801160c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011610:	f7ef faae 	bl	8000b70 <__aeabi_d2iz>
 8011614:	4606      	mov	r6, r0
 8011616:	f7ee ff95 	bl	8000544 <__aeabi_i2d>
 801161a:	4602      	mov	r2, r0
 801161c:	460b      	mov	r3, r1
 801161e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011622:	f7ee fe41 	bl	80002a8 <__aeabi_dsub>
 8011626:	3630      	adds	r6, #48	; 0x30
 8011628:	f805 6b01 	strb.w	r6, [r5], #1
 801162c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011630:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011634:	f7ef fa5e 	bl	8000af4 <__aeabi_dcmplt>
 8011638:	2800      	cmp	r0, #0
 801163a:	d165      	bne.n	8011708 <_dtoa_r+0x5f0>
 801163c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011640:	2000      	movs	r0, #0
 8011642:	4938      	ldr	r1, [pc, #224]	; (8011724 <_dtoa_r+0x60c>)
 8011644:	f7ee fe30 	bl	80002a8 <__aeabi_dsub>
 8011648:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801164c:	f7ef fa52 	bl	8000af4 <__aeabi_dcmplt>
 8011650:	2800      	cmp	r0, #0
 8011652:	f040 80b9 	bne.w	80117c8 <_dtoa_r+0x6b0>
 8011656:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011658:	429d      	cmp	r5, r3
 801165a:	f43f af7c 	beq.w	8011556 <_dtoa_r+0x43e>
 801165e:	2200      	movs	r2, #0
 8011660:	4b31      	ldr	r3, [pc, #196]	; (8011728 <_dtoa_r+0x610>)
 8011662:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011666:	f7ee ffd3 	bl	8000610 <__aeabi_dmul>
 801166a:	2200      	movs	r2, #0
 801166c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011670:	4b2d      	ldr	r3, [pc, #180]	; (8011728 <_dtoa_r+0x610>)
 8011672:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011676:	f7ee ffcb 	bl	8000610 <__aeabi_dmul>
 801167a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801167e:	e7c5      	b.n	801160c <_dtoa_r+0x4f4>
 8011680:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8011684:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011688:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801168c:	f7ee ffc0 	bl	8000610 <__aeabi_dmul>
 8011690:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011694:	9d06      	ldr	r5, [sp, #24]
 8011696:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801169a:	f7ef fa69 	bl	8000b70 <__aeabi_d2iz>
 801169e:	4606      	mov	r6, r0
 80116a0:	f7ee ff50 	bl	8000544 <__aeabi_i2d>
 80116a4:	3630      	adds	r6, #48	; 0x30
 80116a6:	4602      	mov	r2, r0
 80116a8:	460b      	mov	r3, r1
 80116aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80116ae:	f7ee fdfb 	bl	80002a8 <__aeabi_dsub>
 80116b2:	f805 6b01 	strb.w	r6, [r5], #1
 80116b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80116b8:	42ab      	cmp	r3, r5
 80116ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80116be:	f04f 0200 	mov.w	r2, #0
 80116c2:	d125      	bne.n	8011710 <_dtoa_r+0x5f8>
 80116c4:	4b1b      	ldr	r3, [pc, #108]	; (8011734 <_dtoa_r+0x61c>)
 80116c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80116ca:	f7ee fdef 	bl	80002ac <__adddf3>
 80116ce:	4602      	mov	r2, r0
 80116d0:	460b      	mov	r3, r1
 80116d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80116d6:	f7ef fa2b 	bl	8000b30 <__aeabi_dcmpgt>
 80116da:	2800      	cmp	r0, #0
 80116dc:	d174      	bne.n	80117c8 <_dtoa_r+0x6b0>
 80116de:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80116e2:	2000      	movs	r0, #0
 80116e4:	4913      	ldr	r1, [pc, #76]	; (8011734 <_dtoa_r+0x61c>)
 80116e6:	f7ee fddf 	bl	80002a8 <__aeabi_dsub>
 80116ea:	4602      	mov	r2, r0
 80116ec:	460b      	mov	r3, r1
 80116ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80116f2:	f7ef f9ff 	bl	8000af4 <__aeabi_dcmplt>
 80116f6:	2800      	cmp	r0, #0
 80116f8:	f43f af2d 	beq.w	8011556 <_dtoa_r+0x43e>
 80116fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011700:	2b30      	cmp	r3, #48	; 0x30
 8011702:	f105 32ff 	add.w	r2, r5, #4294967295
 8011706:	d001      	beq.n	801170c <_dtoa_r+0x5f4>
 8011708:	46bb      	mov	fp, r7
 801170a:	e04c      	b.n	80117a6 <_dtoa_r+0x68e>
 801170c:	4615      	mov	r5, r2
 801170e:	e7f5      	b.n	80116fc <_dtoa_r+0x5e4>
 8011710:	4b05      	ldr	r3, [pc, #20]	; (8011728 <_dtoa_r+0x610>)
 8011712:	f7ee ff7d 	bl	8000610 <__aeabi_dmul>
 8011716:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801171a:	e7bc      	b.n	8011696 <_dtoa_r+0x57e>
 801171c:	080156a0 	.word	0x080156a0
 8011720:	08015678 	.word	0x08015678
 8011724:	3ff00000 	.word	0x3ff00000
 8011728:	40240000 	.word	0x40240000
 801172c:	401c0000 	.word	0x401c0000
 8011730:	40140000 	.word	0x40140000
 8011734:	3fe00000 	.word	0x3fe00000
 8011738:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801173c:	9d06      	ldr	r5, [sp, #24]
 801173e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011742:	4630      	mov	r0, r6
 8011744:	4639      	mov	r1, r7
 8011746:	f7ef f88d 	bl	8000864 <__aeabi_ddiv>
 801174a:	f7ef fa11 	bl	8000b70 <__aeabi_d2iz>
 801174e:	4680      	mov	r8, r0
 8011750:	f7ee fef8 	bl	8000544 <__aeabi_i2d>
 8011754:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011758:	f7ee ff5a 	bl	8000610 <__aeabi_dmul>
 801175c:	4602      	mov	r2, r0
 801175e:	460b      	mov	r3, r1
 8011760:	4630      	mov	r0, r6
 8011762:	4639      	mov	r1, r7
 8011764:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8011768:	f7ee fd9e 	bl	80002a8 <__aeabi_dsub>
 801176c:	f805 6b01 	strb.w	r6, [r5], #1
 8011770:	9e06      	ldr	r6, [sp, #24]
 8011772:	1bae      	subs	r6, r5, r6
 8011774:	45b1      	cmp	r9, r6
 8011776:	4602      	mov	r2, r0
 8011778:	460b      	mov	r3, r1
 801177a:	d138      	bne.n	80117ee <_dtoa_r+0x6d6>
 801177c:	f7ee fd96 	bl	80002ac <__adddf3>
 8011780:	4606      	mov	r6, r0
 8011782:	460f      	mov	r7, r1
 8011784:	4602      	mov	r2, r0
 8011786:	460b      	mov	r3, r1
 8011788:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801178c:	f7ef f9b2 	bl	8000af4 <__aeabi_dcmplt>
 8011790:	b9c8      	cbnz	r0, 80117c6 <_dtoa_r+0x6ae>
 8011792:	4632      	mov	r2, r6
 8011794:	463b      	mov	r3, r7
 8011796:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801179a:	f7ef f9a1 	bl	8000ae0 <__aeabi_dcmpeq>
 801179e:	b110      	cbz	r0, 80117a6 <_dtoa_r+0x68e>
 80117a0:	f018 0f01 	tst.w	r8, #1
 80117a4:	d10f      	bne.n	80117c6 <_dtoa_r+0x6ae>
 80117a6:	4651      	mov	r1, sl
 80117a8:	4620      	mov	r0, r4
 80117aa:	f001 fbc3 	bl	8012f34 <_Bfree>
 80117ae:	2300      	movs	r3, #0
 80117b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80117b2:	702b      	strb	r3, [r5, #0]
 80117b4:	f10b 0301 	add.w	r3, fp, #1
 80117b8:	6013      	str	r3, [r2, #0]
 80117ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80117bc:	2b00      	cmp	r3, #0
 80117be:	f43f acf0 	beq.w	80111a2 <_dtoa_r+0x8a>
 80117c2:	601d      	str	r5, [r3, #0]
 80117c4:	e4ed      	b.n	80111a2 <_dtoa_r+0x8a>
 80117c6:	465f      	mov	r7, fp
 80117c8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80117cc:	2a39      	cmp	r2, #57	; 0x39
 80117ce:	f105 33ff 	add.w	r3, r5, #4294967295
 80117d2:	d106      	bne.n	80117e2 <_dtoa_r+0x6ca>
 80117d4:	9a06      	ldr	r2, [sp, #24]
 80117d6:	429a      	cmp	r2, r3
 80117d8:	d107      	bne.n	80117ea <_dtoa_r+0x6d2>
 80117da:	2330      	movs	r3, #48	; 0x30
 80117dc:	7013      	strb	r3, [r2, #0]
 80117de:	3701      	adds	r7, #1
 80117e0:	4613      	mov	r3, r2
 80117e2:	781a      	ldrb	r2, [r3, #0]
 80117e4:	3201      	adds	r2, #1
 80117e6:	701a      	strb	r2, [r3, #0]
 80117e8:	e78e      	b.n	8011708 <_dtoa_r+0x5f0>
 80117ea:	461d      	mov	r5, r3
 80117ec:	e7ec      	b.n	80117c8 <_dtoa_r+0x6b0>
 80117ee:	2200      	movs	r2, #0
 80117f0:	4bb4      	ldr	r3, [pc, #720]	; (8011ac4 <_dtoa_r+0x9ac>)
 80117f2:	f7ee ff0d 	bl	8000610 <__aeabi_dmul>
 80117f6:	2200      	movs	r2, #0
 80117f8:	2300      	movs	r3, #0
 80117fa:	4606      	mov	r6, r0
 80117fc:	460f      	mov	r7, r1
 80117fe:	f7ef f96f 	bl	8000ae0 <__aeabi_dcmpeq>
 8011802:	2800      	cmp	r0, #0
 8011804:	d09b      	beq.n	801173e <_dtoa_r+0x626>
 8011806:	e7ce      	b.n	80117a6 <_dtoa_r+0x68e>
 8011808:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801180a:	2a00      	cmp	r2, #0
 801180c:	f000 8129 	beq.w	8011a62 <_dtoa_r+0x94a>
 8011810:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011812:	2a01      	cmp	r2, #1
 8011814:	f300 810e 	bgt.w	8011a34 <_dtoa_r+0x91c>
 8011818:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801181a:	2a00      	cmp	r2, #0
 801181c:	f000 8106 	beq.w	8011a2c <_dtoa_r+0x914>
 8011820:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011824:	9e08      	ldr	r6, [sp, #32]
 8011826:	4645      	mov	r5, r8
 8011828:	9a07      	ldr	r2, [sp, #28]
 801182a:	2101      	movs	r1, #1
 801182c:	441a      	add	r2, r3
 801182e:	4620      	mov	r0, r4
 8011830:	4498      	add	r8, r3
 8011832:	9207      	str	r2, [sp, #28]
 8011834:	f001 fc5c 	bl	80130f0 <__i2b>
 8011838:	4607      	mov	r7, r0
 801183a:	2d00      	cmp	r5, #0
 801183c:	dd0b      	ble.n	8011856 <_dtoa_r+0x73e>
 801183e:	9b07      	ldr	r3, [sp, #28]
 8011840:	2b00      	cmp	r3, #0
 8011842:	dd08      	ble.n	8011856 <_dtoa_r+0x73e>
 8011844:	42ab      	cmp	r3, r5
 8011846:	9a07      	ldr	r2, [sp, #28]
 8011848:	bfa8      	it	ge
 801184a:	462b      	movge	r3, r5
 801184c:	eba8 0803 	sub.w	r8, r8, r3
 8011850:	1aed      	subs	r5, r5, r3
 8011852:	1ad3      	subs	r3, r2, r3
 8011854:	9307      	str	r3, [sp, #28]
 8011856:	9b08      	ldr	r3, [sp, #32]
 8011858:	b1fb      	cbz	r3, 801189a <_dtoa_r+0x782>
 801185a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801185c:	2b00      	cmp	r3, #0
 801185e:	f000 8104 	beq.w	8011a6a <_dtoa_r+0x952>
 8011862:	2e00      	cmp	r6, #0
 8011864:	dd11      	ble.n	801188a <_dtoa_r+0x772>
 8011866:	4639      	mov	r1, r7
 8011868:	4632      	mov	r2, r6
 801186a:	4620      	mov	r0, r4
 801186c:	f001 fcd6 	bl	801321c <__pow5mult>
 8011870:	4652      	mov	r2, sl
 8011872:	4601      	mov	r1, r0
 8011874:	4607      	mov	r7, r0
 8011876:	4620      	mov	r0, r4
 8011878:	f001 fc43 	bl	8013102 <__multiply>
 801187c:	4651      	mov	r1, sl
 801187e:	900a      	str	r0, [sp, #40]	; 0x28
 8011880:	4620      	mov	r0, r4
 8011882:	f001 fb57 	bl	8012f34 <_Bfree>
 8011886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011888:	469a      	mov	sl, r3
 801188a:	9b08      	ldr	r3, [sp, #32]
 801188c:	1b9a      	subs	r2, r3, r6
 801188e:	d004      	beq.n	801189a <_dtoa_r+0x782>
 8011890:	4651      	mov	r1, sl
 8011892:	4620      	mov	r0, r4
 8011894:	f001 fcc2 	bl	801321c <__pow5mult>
 8011898:	4682      	mov	sl, r0
 801189a:	2101      	movs	r1, #1
 801189c:	4620      	mov	r0, r4
 801189e:	f001 fc27 	bl	80130f0 <__i2b>
 80118a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	4606      	mov	r6, r0
 80118a8:	f340 80e1 	ble.w	8011a6e <_dtoa_r+0x956>
 80118ac:	461a      	mov	r2, r3
 80118ae:	4601      	mov	r1, r0
 80118b0:	4620      	mov	r0, r4
 80118b2:	f001 fcb3 	bl	801321c <__pow5mult>
 80118b6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80118b8:	2b01      	cmp	r3, #1
 80118ba:	4606      	mov	r6, r0
 80118bc:	f340 80da 	ble.w	8011a74 <_dtoa_r+0x95c>
 80118c0:	2300      	movs	r3, #0
 80118c2:	9308      	str	r3, [sp, #32]
 80118c4:	6933      	ldr	r3, [r6, #16]
 80118c6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80118ca:	6918      	ldr	r0, [r3, #16]
 80118cc:	f001 fbc2 	bl	8013054 <__hi0bits>
 80118d0:	f1c0 0020 	rsb	r0, r0, #32
 80118d4:	9b07      	ldr	r3, [sp, #28]
 80118d6:	4418      	add	r0, r3
 80118d8:	f010 001f 	ands.w	r0, r0, #31
 80118dc:	f000 80f0 	beq.w	8011ac0 <_dtoa_r+0x9a8>
 80118e0:	f1c0 0320 	rsb	r3, r0, #32
 80118e4:	2b04      	cmp	r3, #4
 80118e6:	f340 80e2 	ble.w	8011aae <_dtoa_r+0x996>
 80118ea:	9b07      	ldr	r3, [sp, #28]
 80118ec:	f1c0 001c 	rsb	r0, r0, #28
 80118f0:	4480      	add	r8, r0
 80118f2:	4405      	add	r5, r0
 80118f4:	4403      	add	r3, r0
 80118f6:	9307      	str	r3, [sp, #28]
 80118f8:	f1b8 0f00 	cmp.w	r8, #0
 80118fc:	dd05      	ble.n	801190a <_dtoa_r+0x7f2>
 80118fe:	4651      	mov	r1, sl
 8011900:	4642      	mov	r2, r8
 8011902:	4620      	mov	r0, r4
 8011904:	f001 fcd8 	bl	80132b8 <__lshift>
 8011908:	4682      	mov	sl, r0
 801190a:	9b07      	ldr	r3, [sp, #28]
 801190c:	2b00      	cmp	r3, #0
 801190e:	dd05      	ble.n	801191c <_dtoa_r+0x804>
 8011910:	4631      	mov	r1, r6
 8011912:	461a      	mov	r2, r3
 8011914:	4620      	mov	r0, r4
 8011916:	f001 fccf 	bl	80132b8 <__lshift>
 801191a:	4606      	mov	r6, r0
 801191c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801191e:	2b00      	cmp	r3, #0
 8011920:	f000 80d2 	beq.w	8011ac8 <_dtoa_r+0x9b0>
 8011924:	4631      	mov	r1, r6
 8011926:	4650      	mov	r0, sl
 8011928:	f001 fd17 	bl	801335a <__mcmp>
 801192c:	2800      	cmp	r0, #0
 801192e:	f280 80cb 	bge.w	8011ac8 <_dtoa_r+0x9b0>
 8011932:	2300      	movs	r3, #0
 8011934:	4651      	mov	r1, sl
 8011936:	220a      	movs	r2, #10
 8011938:	4620      	mov	r0, r4
 801193a:	f001 fb12 	bl	8012f62 <__multadd>
 801193e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011940:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011944:	4682      	mov	sl, r0
 8011946:	2b00      	cmp	r3, #0
 8011948:	f000 81aa 	beq.w	8011ca0 <_dtoa_r+0xb88>
 801194c:	2300      	movs	r3, #0
 801194e:	4639      	mov	r1, r7
 8011950:	220a      	movs	r2, #10
 8011952:	4620      	mov	r0, r4
 8011954:	f001 fb05 	bl	8012f62 <__multadd>
 8011958:	9b04      	ldr	r3, [sp, #16]
 801195a:	2b00      	cmp	r3, #0
 801195c:	4607      	mov	r7, r0
 801195e:	dc03      	bgt.n	8011968 <_dtoa_r+0x850>
 8011960:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011962:	2b02      	cmp	r3, #2
 8011964:	f300 80b8 	bgt.w	8011ad8 <_dtoa_r+0x9c0>
 8011968:	2d00      	cmp	r5, #0
 801196a:	dd05      	ble.n	8011978 <_dtoa_r+0x860>
 801196c:	4639      	mov	r1, r7
 801196e:	462a      	mov	r2, r5
 8011970:	4620      	mov	r0, r4
 8011972:	f001 fca1 	bl	80132b8 <__lshift>
 8011976:	4607      	mov	r7, r0
 8011978:	9b08      	ldr	r3, [sp, #32]
 801197a:	2b00      	cmp	r3, #0
 801197c:	f000 8110 	beq.w	8011ba0 <_dtoa_r+0xa88>
 8011980:	6879      	ldr	r1, [r7, #4]
 8011982:	4620      	mov	r0, r4
 8011984:	f001 faa2 	bl	8012ecc <_Balloc>
 8011988:	693a      	ldr	r2, [r7, #16]
 801198a:	3202      	adds	r2, #2
 801198c:	4605      	mov	r5, r0
 801198e:	0092      	lsls	r2, r2, #2
 8011990:	f107 010c 	add.w	r1, r7, #12
 8011994:	300c      	adds	r0, #12
 8011996:	f7fb fcdd 	bl	800d354 <memcpy>
 801199a:	2201      	movs	r2, #1
 801199c:	4629      	mov	r1, r5
 801199e:	4620      	mov	r0, r4
 80119a0:	f001 fc8a 	bl	80132b8 <__lshift>
 80119a4:	9b02      	ldr	r3, [sp, #8]
 80119a6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80119aa:	9707      	str	r7, [sp, #28]
 80119ac:	f003 0301 	and.w	r3, r3, #1
 80119b0:	4607      	mov	r7, r0
 80119b2:	9308      	str	r3, [sp, #32]
 80119b4:	4631      	mov	r1, r6
 80119b6:	4650      	mov	r0, sl
 80119b8:	f7ff fb20 	bl	8010ffc <quorem>
 80119bc:	9907      	ldr	r1, [sp, #28]
 80119be:	4605      	mov	r5, r0
 80119c0:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80119c4:	4650      	mov	r0, sl
 80119c6:	f001 fcc8 	bl	801335a <__mcmp>
 80119ca:	463a      	mov	r2, r7
 80119cc:	9002      	str	r0, [sp, #8]
 80119ce:	4631      	mov	r1, r6
 80119d0:	4620      	mov	r0, r4
 80119d2:	f001 fcdc 	bl	801338e <__mdiff>
 80119d6:	68c3      	ldr	r3, [r0, #12]
 80119d8:	4602      	mov	r2, r0
 80119da:	2b00      	cmp	r3, #0
 80119dc:	f040 80e2 	bne.w	8011ba4 <_dtoa_r+0xa8c>
 80119e0:	4601      	mov	r1, r0
 80119e2:	9009      	str	r0, [sp, #36]	; 0x24
 80119e4:	4650      	mov	r0, sl
 80119e6:	f001 fcb8 	bl	801335a <__mcmp>
 80119ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80119ec:	4603      	mov	r3, r0
 80119ee:	4611      	mov	r1, r2
 80119f0:	4620      	mov	r0, r4
 80119f2:	9309      	str	r3, [sp, #36]	; 0x24
 80119f4:	f001 fa9e 	bl	8012f34 <_Bfree>
 80119f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	f040 80d4 	bne.w	8011ba8 <_dtoa_r+0xa90>
 8011a00:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011a02:	2a00      	cmp	r2, #0
 8011a04:	f040 80d0 	bne.w	8011ba8 <_dtoa_r+0xa90>
 8011a08:	9a08      	ldr	r2, [sp, #32]
 8011a0a:	2a00      	cmp	r2, #0
 8011a0c:	f040 80cc 	bne.w	8011ba8 <_dtoa_r+0xa90>
 8011a10:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011a14:	f000 80e8 	beq.w	8011be8 <_dtoa_r+0xad0>
 8011a18:	9b02      	ldr	r3, [sp, #8]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	dd01      	ble.n	8011a22 <_dtoa_r+0x90a>
 8011a1e:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8011a22:	f108 0501 	add.w	r5, r8, #1
 8011a26:	f888 9000 	strb.w	r9, [r8]
 8011a2a:	e06a      	b.n	8011b02 <_dtoa_r+0x9ea>
 8011a2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011a2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011a32:	e6f7      	b.n	8011824 <_dtoa_r+0x70c>
 8011a34:	9b08      	ldr	r3, [sp, #32]
 8011a36:	f109 36ff 	add.w	r6, r9, #4294967295
 8011a3a:	42b3      	cmp	r3, r6
 8011a3c:	bfbf      	itttt	lt
 8011a3e:	9b08      	ldrlt	r3, [sp, #32]
 8011a40:	9608      	strlt	r6, [sp, #32]
 8011a42:	1af2      	sublt	r2, r6, r3
 8011a44:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8011a46:	bfb7      	itett	lt
 8011a48:	189b      	addlt	r3, r3, r2
 8011a4a:	1b9e      	subge	r6, r3, r6
 8011a4c:	930c      	strlt	r3, [sp, #48]	; 0x30
 8011a4e:	2600      	movlt	r6, #0
 8011a50:	f1b9 0f00 	cmp.w	r9, #0
 8011a54:	bfb9      	ittee	lt
 8011a56:	eba8 0509 	sublt.w	r5, r8, r9
 8011a5a:	2300      	movlt	r3, #0
 8011a5c:	4645      	movge	r5, r8
 8011a5e:	464b      	movge	r3, r9
 8011a60:	e6e2      	b.n	8011828 <_dtoa_r+0x710>
 8011a62:	9e08      	ldr	r6, [sp, #32]
 8011a64:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011a66:	4645      	mov	r5, r8
 8011a68:	e6e7      	b.n	801183a <_dtoa_r+0x722>
 8011a6a:	9a08      	ldr	r2, [sp, #32]
 8011a6c:	e710      	b.n	8011890 <_dtoa_r+0x778>
 8011a6e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011a70:	2b01      	cmp	r3, #1
 8011a72:	dc18      	bgt.n	8011aa6 <_dtoa_r+0x98e>
 8011a74:	9b02      	ldr	r3, [sp, #8]
 8011a76:	b9b3      	cbnz	r3, 8011aa6 <_dtoa_r+0x98e>
 8011a78:	9b03      	ldr	r3, [sp, #12]
 8011a7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011a7e:	b9a3      	cbnz	r3, 8011aaa <_dtoa_r+0x992>
 8011a80:	9b03      	ldr	r3, [sp, #12]
 8011a82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011a86:	0d1b      	lsrs	r3, r3, #20
 8011a88:	051b      	lsls	r3, r3, #20
 8011a8a:	b12b      	cbz	r3, 8011a98 <_dtoa_r+0x980>
 8011a8c:	9b07      	ldr	r3, [sp, #28]
 8011a8e:	3301      	adds	r3, #1
 8011a90:	9307      	str	r3, [sp, #28]
 8011a92:	f108 0801 	add.w	r8, r8, #1
 8011a96:	2301      	movs	r3, #1
 8011a98:	9308      	str	r3, [sp, #32]
 8011a9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	f47f af11 	bne.w	80118c4 <_dtoa_r+0x7ac>
 8011aa2:	2001      	movs	r0, #1
 8011aa4:	e716      	b.n	80118d4 <_dtoa_r+0x7bc>
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	e7f6      	b.n	8011a98 <_dtoa_r+0x980>
 8011aaa:	9b02      	ldr	r3, [sp, #8]
 8011aac:	e7f4      	b.n	8011a98 <_dtoa_r+0x980>
 8011aae:	f43f af23 	beq.w	80118f8 <_dtoa_r+0x7e0>
 8011ab2:	9a07      	ldr	r2, [sp, #28]
 8011ab4:	331c      	adds	r3, #28
 8011ab6:	441a      	add	r2, r3
 8011ab8:	4498      	add	r8, r3
 8011aba:	441d      	add	r5, r3
 8011abc:	4613      	mov	r3, r2
 8011abe:	e71a      	b.n	80118f6 <_dtoa_r+0x7de>
 8011ac0:	4603      	mov	r3, r0
 8011ac2:	e7f6      	b.n	8011ab2 <_dtoa_r+0x99a>
 8011ac4:	40240000 	.word	0x40240000
 8011ac8:	f1b9 0f00 	cmp.w	r9, #0
 8011acc:	dc33      	bgt.n	8011b36 <_dtoa_r+0xa1e>
 8011ace:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011ad0:	2b02      	cmp	r3, #2
 8011ad2:	dd30      	ble.n	8011b36 <_dtoa_r+0xa1e>
 8011ad4:	f8cd 9010 	str.w	r9, [sp, #16]
 8011ad8:	9b04      	ldr	r3, [sp, #16]
 8011ada:	b963      	cbnz	r3, 8011af6 <_dtoa_r+0x9de>
 8011adc:	4631      	mov	r1, r6
 8011ade:	2205      	movs	r2, #5
 8011ae0:	4620      	mov	r0, r4
 8011ae2:	f001 fa3e 	bl	8012f62 <__multadd>
 8011ae6:	4601      	mov	r1, r0
 8011ae8:	4606      	mov	r6, r0
 8011aea:	4650      	mov	r0, sl
 8011aec:	f001 fc35 	bl	801335a <__mcmp>
 8011af0:	2800      	cmp	r0, #0
 8011af2:	f73f ad5c 	bgt.w	80115ae <_dtoa_r+0x496>
 8011af6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011af8:	9d06      	ldr	r5, [sp, #24]
 8011afa:	ea6f 0b03 	mvn.w	fp, r3
 8011afe:	2300      	movs	r3, #0
 8011b00:	9307      	str	r3, [sp, #28]
 8011b02:	4631      	mov	r1, r6
 8011b04:	4620      	mov	r0, r4
 8011b06:	f001 fa15 	bl	8012f34 <_Bfree>
 8011b0a:	2f00      	cmp	r7, #0
 8011b0c:	f43f ae4b 	beq.w	80117a6 <_dtoa_r+0x68e>
 8011b10:	9b07      	ldr	r3, [sp, #28]
 8011b12:	b12b      	cbz	r3, 8011b20 <_dtoa_r+0xa08>
 8011b14:	42bb      	cmp	r3, r7
 8011b16:	d003      	beq.n	8011b20 <_dtoa_r+0xa08>
 8011b18:	4619      	mov	r1, r3
 8011b1a:	4620      	mov	r0, r4
 8011b1c:	f001 fa0a 	bl	8012f34 <_Bfree>
 8011b20:	4639      	mov	r1, r7
 8011b22:	4620      	mov	r0, r4
 8011b24:	f001 fa06 	bl	8012f34 <_Bfree>
 8011b28:	e63d      	b.n	80117a6 <_dtoa_r+0x68e>
 8011b2a:	2600      	movs	r6, #0
 8011b2c:	4637      	mov	r7, r6
 8011b2e:	e7e2      	b.n	8011af6 <_dtoa_r+0x9de>
 8011b30:	46bb      	mov	fp, r7
 8011b32:	4637      	mov	r7, r6
 8011b34:	e53b      	b.n	80115ae <_dtoa_r+0x496>
 8011b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b38:	f8cd 9010 	str.w	r9, [sp, #16]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	f47f af13 	bne.w	8011968 <_dtoa_r+0x850>
 8011b42:	9d06      	ldr	r5, [sp, #24]
 8011b44:	4631      	mov	r1, r6
 8011b46:	4650      	mov	r0, sl
 8011b48:	f7ff fa58 	bl	8010ffc <quorem>
 8011b4c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011b50:	f805 9b01 	strb.w	r9, [r5], #1
 8011b54:	9b06      	ldr	r3, [sp, #24]
 8011b56:	9a04      	ldr	r2, [sp, #16]
 8011b58:	1aeb      	subs	r3, r5, r3
 8011b5a:	429a      	cmp	r2, r3
 8011b5c:	f300 8083 	bgt.w	8011c66 <_dtoa_r+0xb4e>
 8011b60:	9b06      	ldr	r3, [sp, #24]
 8011b62:	2a01      	cmp	r2, #1
 8011b64:	bfac      	ite	ge
 8011b66:	189b      	addge	r3, r3, r2
 8011b68:	3301      	addlt	r3, #1
 8011b6a:	4698      	mov	r8, r3
 8011b6c:	2300      	movs	r3, #0
 8011b6e:	9307      	str	r3, [sp, #28]
 8011b70:	4651      	mov	r1, sl
 8011b72:	2201      	movs	r2, #1
 8011b74:	4620      	mov	r0, r4
 8011b76:	f001 fb9f 	bl	80132b8 <__lshift>
 8011b7a:	4631      	mov	r1, r6
 8011b7c:	4682      	mov	sl, r0
 8011b7e:	f001 fbec 	bl	801335a <__mcmp>
 8011b82:	2800      	cmp	r0, #0
 8011b84:	dc35      	bgt.n	8011bf2 <_dtoa_r+0xada>
 8011b86:	d102      	bne.n	8011b8e <_dtoa_r+0xa76>
 8011b88:	f019 0f01 	tst.w	r9, #1
 8011b8c:	d131      	bne.n	8011bf2 <_dtoa_r+0xada>
 8011b8e:	4645      	mov	r5, r8
 8011b90:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011b94:	2b30      	cmp	r3, #48	; 0x30
 8011b96:	f105 32ff 	add.w	r2, r5, #4294967295
 8011b9a:	d1b2      	bne.n	8011b02 <_dtoa_r+0x9ea>
 8011b9c:	4615      	mov	r5, r2
 8011b9e:	e7f7      	b.n	8011b90 <_dtoa_r+0xa78>
 8011ba0:	4638      	mov	r0, r7
 8011ba2:	e6ff      	b.n	80119a4 <_dtoa_r+0x88c>
 8011ba4:	2301      	movs	r3, #1
 8011ba6:	e722      	b.n	80119ee <_dtoa_r+0x8d6>
 8011ba8:	9a02      	ldr	r2, [sp, #8]
 8011baa:	2a00      	cmp	r2, #0
 8011bac:	db04      	blt.n	8011bb8 <_dtoa_r+0xaa0>
 8011bae:	d129      	bne.n	8011c04 <_dtoa_r+0xaec>
 8011bb0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011bb2:	bb3a      	cbnz	r2, 8011c04 <_dtoa_r+0xaec>
 8011bb4:	9a08      	ldr	r2, [sp, #32]
 8011bb6:	bb2a      	cbnz	r2, 8011c04 <_dtoa_r+0xaec>
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	f77f af32 	ble.w	8011a22 <_dtoa_r+0x90a>
 8011bbe:	4651      	mov	r1, sl
 8011bc0:	2201      	movs	r2, #1
 8011bc2:	4620      	mov	r0, r4
 8011bc4:	f001 fb78 	bl	80132b8 <__lshift>
 8011bc8:	4631      	mov	r1, r6
 8011bca:	4682      	mov	sl, r0
 8011bcc:	f001 fbc5 	bl	801335a <__mcmp>
 8011bd0:	2800      	cmp	r0, #0
 8011bd2:	dc05      	bgt.n	8011be0 <_dtoa_r+0xac8>
 8011bd4:	f47f af25 	bne.w	8011a22 <_dtoa_r+0x90a>
 8011bd8:	f019 0f01 	tst.w	r9, #1
 8011bdc:	f43f af21 	beq.w	8011a22 <_dtoa_r+0x90a>
 8011be0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011be4:	f47f af1b 	bne.w	8011a1e <_dtoa_r+0x906>
 8011be8:	2339      	movs	r3, #57	; 0x39
 8011bea:	f888 3000 	strb.w	r3, [r8]
 8011bee:	f108 0801 	add.w	r8, r8, #1
 8011bf2:	4645      	mov	r5, r8
 8011bf4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011bf8:	2b39      	cmp	r3, #57	; 0x39
 8011bfa:	f105 32ff 	add.w	r2, r5, #4294967295
 8011bfe:	d03a      	beq.n	8011c76 <_dtoa_r+0xb5e>
 8011c00:	3301      	adds	r3, #1
 8011c02:	e03f      	b.n	8011c84 <_dtoa_r+0xb6c>
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	f108 0501 	add.w	r5, r8, #1
 8011c0a:	dd05      	ble.n	8011c18 <_dtoa_r+0xb00>
 8011c0c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011c10:	d0ea      	beq.n	8011be8 <_dtoa_r+0xad0>
 8011c12:	f109 0901 	add.w	r9, r9, #1
 8011c16:	e706      	b.n	8011a26 <_dtoa_r+0x90e>
 8011c18:	9b06      	ldr	r3, [sp, #24]
 8011c1a:	9a04      	ldr	r2, [sp, #16]
 8011c1c:	f805 9c01 	strb.w	r9, [r5, #-1]
 8011c20:	1aeb      	subs	r3, r5, r3
 8011c22:	4293      	cmp	r3, r2
 8011c24:	46a8      	mov	r8, r5
 8011c26:	d0a3      	beq.n	8011b70 <_dtoa_r+0xa58>
 8011c28:	4651      	mov	r1, sl
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	220a      	movs	r2, #10
 8011c2e:	4620      	mov	r0, r4
 8011c30:	f001 f997 	bl	8012f62 <__multadd>
 8011c34:	9b07      	ldr	r3, [sp, #28]
 8011c36:	9907      	ldr	r1, [sp, #28]
 8011c38:	42bb      	cmp	r3, r7
 8011c3a:	4682      	mov	sl, r0
 8011c3c:	f04f 0300 	mov.w	r3, #0
 8011c40:	f04f 020a 	mov.w	r2, #10
 8011c44:	4620      	mov	r0, r4
 8011c46:	d104      	bne.n	8011c52 <_dtoa_r+0xb3a>
 8011c48:	f001 f98b 	bl	8012f62 <__multadd>
 8011c4c:	9007      	str	r0, [sp, #28]
 8011c4e:	4607      	mov	r7, r0
 8011c50:	e6b0      	b.n	80119b4 <_dtoa_r+0x89c>
 8011c52:	f001 f986 	bl	8012f62 <__multadd>
 8011c56:	2300      	movs	r3, #0
 8011c58:	9007      	str	r0, [sp, #28]
 8011c5a:	220a      	movs	r2, #10
 8011c5c:	4639      	mov	r1, r7
 8011c5e:	4620      	mov	r0, r4
 8011c60:	f001 f97f 	bl	8012f62 <__multadd>
 8011c64:	e7f3      	b.n	8011c4e <_dtoa_r+0xb36>
 8011c66:	4651      	mov	r1, sl
 8011c68:	2300      	movs	r3, #0
 8011c6a:	220a      	movs	r2, #10
 8011c6c:	4620      	mov	r0, r4
 8011c6e:	f001 f978 	bl	8012f62 <__multadd>
 8011c72:	4682      	mov	sl, r0
 8011c74:	e766      	b.n	8011b44 <_dtoa_r+0xa2c>
 8011c76:	9b06      	ldr	r3, [sp, #24]
 8011c78:	4293      	cmp	r3, r2
 8011c7a:	d105      	bne.n	8011c88 <_dtoa_r+0xb70>
 8011c7c:	9a06      	ldr	r2, [sp, #24]
 8011c7e:	f10b 0b01 	add.w	fp, fp, #1
 8011c82:	2331      	movs	r3, #49	; 0x31
 8011c84:	7013      	strb	r3, [r2, #0]
 8011c86:	e73c      	b.n	8011b02 <_dtoa_r+0x9ea>
 8011c88:	4615      	mov	r5, r2
 8011c8a:	e7b3      	b.n	8011bf4 <_dtoa_r+0xadc>
 8011c8c:	4b09      	ldr	r3, [pc, #36]	; (8011cb4 <_dtoa_r+0xb9c>)
 8011c8e:	f7ff baa5 	b.w	80111dc <_dtoa_r+0xc4>
 8011c92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	f47f aa7f 	bne.w	8011198 <_dtoa_r+0x80>
 8011c9a:	4b07      	ldr	r3, [pc, #28]	; (8011cb8 <_dtoa_r+0xba0>)
 8011c9c:	f7ff ba9e 	b.w	80111dc <_dtoa_r+0xc4>
 8011ca0:	9b04      	ldr	r3, [sp, #16]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	f73f af4d 	bgt.w	8011b42 <_dtoa_r+0xa2a>
 8011ca8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011caa:	2b02      	cmp	r3, #2
 8011cac:	f77f af49 	ble.w	8011b42 <_dtoa_r+0xa2a>
 8011cb0:	e712      	b.n	8011ad8 <_dtoa_r+0x9c0>
 8011cb2:	bf00      	nop
 8011cb4:	0801557a 	.word	0x0801557a
 8011cb8:	080155f8 	.word	0x080155f8

08011cbc <__sflush_r>:
 8011cbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011cc0:	b293      	uxth	r3, r2
 8011cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cc6:	4605      	mov	r5, r0
 8011cc8:	0718      	lsls	r0, r3, #28
 8011cca:	460c      	mov	r4, r1
 8011ccc:	d461      	bmi.n	8011d92 <__sflush_r+0xd6>
 8011cce:	684b      	ldr	r3, [r1, #4]
 8011cd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	818a      	strh	r2, [r1, #12]
 8011cd8:	dc05      	bgt.n	8011ce6 <__sflush_r+0x2a>
 8011cda:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	dc02      	bgt.n	8011ce6 <__sflush_r+0x2a>
 8011ce0:	2000      	movs	r0, #0
 8011ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ce6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011ce8:	2e00      	cmp	r6, #0
 8011cea:	d0f9      	beq.n	8011ce0 <__sflush_r+0x24>
 8011cec:	2300      	movs	r3, #0
 8011cee:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011cf2:	682f      	ldr	r7, [r5, #0]
 8011cf4:	602b      	str	r3, [r5, #0]
 8011cf6:	d037      	beq.n	8011d68 <__sflush_r+0xac>
 8011cf8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011cfa:	89a3      	ldrh	r3, [r4, #12]
 8011cfc:	075a      	lsls	r2, r3, #29
 8011cfe:	d505      	bpl.n	8011d0c <__sflush_r+0x50>
 8011d00:	6863      	ldr	r3, [r4, #4]
 8011d02:	1ac0      	subs	r0, r0, r3
 8011d04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011d06:	b10b      	cbz	r3, 8011d0c <__sflush_r+0x50>
 8011d08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011d0a:	1ac0      	subs	r0, r0, r3
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	4602      	mov	r2, r0
 8011d10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011d12:	6a21      	ldr	r1, [r4, #32]
 8011d14:	4628      	mov	r0, r5
 8011d16:	47b0      	blx	r6
 8011d18:	1c43      	adds	r3, r0, #1
 8011d1a:	89a3      	ldrh	r3, [r4, #12]
 8011d1c:	d106      	bne.n	8011d2c <__sflush_r+0x70>
 8011d1e:	6829      	ldr	r1, [r5, #0]
 8011d20:	291d      	cmp	r1, #29
 8011d22:	d84f      	bhi.n	8011dc4 <__sflush_r+0x108>
 8011d24:	4a2d      	ldr	r2, [pc, #180]	; (8011ddc <__sflush_r+0x120>)
 8011d26:	40ca      	lsrs	r2, r1
 8011d28:	07d6      	lsls	r6, r2, #31
 8011d2a:	d54b      	bpl.n	8011dc4 <__sflush_r+0x108>
 8011d2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011d30:	b21b      	sxth	r3, r3
 8011d32:	2200      	movs	r2, #0
 8011d34:	6062      	str	r2, [r4, #4]
 8011d36:	04d9      	lsls	r1, r3, #19
 8011d38:	6922      	ldr	r2, [r4, #16]
 8011d3a:	81a3      	strh	r3, [r4, #12]
 8011d3c:	6022      	str	r2, [r4, #0]
 8011d3e:	d504      	bpl.n	8011d4a <__sflush_r+0x8e>
 8011d40:	1c42      	adds	r2, r0, #1
 8011d42:	d101      	bne.n	8011d48 <__sflush_r+0x8c>
 8011d44:	682b      	ldr	r3, [r5, #0]
 8011d46:	b903      	cbnz	r3, 8011d4a <__sflush_r+0x8e>
 8011d48:	6560      	str	r0, [r4, #84]	; 0x54
 8011d4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d4c:	602f      	str	r7, [r5, #0]
 8011d4e:	2900      	cmp	r1, #0
 8011d50:	d0c6      	beq.n	8011ce0 <__sflush_r+0x24>
 8011d52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011d56:	4299      	cmp	r1, r3
 8011d58:	d002      	beq.n	8011d60 <__sflush_r+0xa4>
 8011d5a:	4628      	mov	r0, r5
 8011d5c:	f000 f9aa 	bl	80120b4 <_free_r>
 8011d60:	2000      	movs	r0, #0
 8011d62:	6360      	str	r0, [r4, #52]	; 0x34
 8011d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d68:	6a21      	ldr	r1, [r4, #32]
 8011d6a:	2301      	movs	r3, #1
 8011d6c:	4628      	mov	r0, r5
 8011d6e:	47b0      	blx	r6
 8011d70:	1c41      	adds	r1, r0, #1
 8011d72:	d1c2      	bne.n	8011cfa <__sflush_r+0x3e>
 8011d74:	682b      	ldr	r3, [r5, #0]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d0bf      	beq.n	8011cfa <__sflush_r+0x3e>
 8011d7a:	2b1d      	cmp	r3, #29
 8011d7c:	d001      	beq.n	8011d82 <__sflush_r+0xc6>
 8011d7e:	2b16      	cmp	r3, #22
 8011d80:	d101      	bne.n	8011d86 <__sflush_r+0xca>
 8011d82:	602f      	str	r7, [r5, #0]
 8011d84:	e7ac      	b.n	8011ce0 <__sflush_r+0x24>
 8011d86:	89a3      	ldrh	r3, [r4, #12]
 8011d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d8c:	81a3      	strh	r3, [r4, #12]
 8011d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d92:	690f      	ldr	r7, [r1, #16]
 8011d94:	2f00      	cmp	r7, #0
 8011d96:	d0a3      	beq.n	8011ce0 <__sflush_r+0x24>
 8011d98:	079b      	lsls	r3, r3, #30
 8011d9a:	680e      	ldr	r6, [r1, #0]
 8011d9c:	bf08      	it	eq
 8011d9e:	694b      	ldreq	r3, [r1, #20]
 8011da0:	600f      	str	r7, [r1, #0]
 8011da2:	bf18      	it	ne
 8011da4:	2300      	movne	r3, #0
 8011da6:	eba6 0807 	sub.w	r8, r6, r7
 8011daa:	608b      	str	r3, [r1, #8]
 8011dac:	f1b8 0f00 	cmp.w	r8, #0
 8011db0:	dd96      	ble.n	8011ce0 <__sflush_r+0x24>
 8011db2:	4643      	mov	r3, r8
 8011db4:	463a      	mov	r2, r7
 8011db6:	6a21      	ldr	r1, [r4, #32]
 8011db8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011dba:	4628      	mov	r0, r5
 8011dbc:	47b0      	blx	r6
 8011dbe:	2800      	cmp	r0, #0
 8011dc0:	dc07      	bgt.n	8011dd2 <__sflush_r+0x116>
 8011dc2:	89a3      	ldrh	r3, [r4, #12]
 8011dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011dc8:	81a3      	strh	r3, [r4, #12]
 8011dca:	f04f 30ff 	mov.w	r0, #4294967295
 8011dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dd2:	4407      	add	r7, r0
 8011dd4:	eba8 0800 	sub.w	r8, r8, r0
 8011dd8:	e7e8      	b.n	8011dac <__sflush_r+0xf0>
 8011dda:	bf00      	nop
 8011ddc:	20400001 	.word	0x20400001

08011de0 <_fflush_r>:
 8011de0:	b538      	push	{r3, r4, r5, lr}
 8011de2:	690b      	ldr	r3, [r1, #16]
 8011de4:	4605      	mov	r5, r0
 8011de6:	460c      	mov	r4, r1
 8011de8:	b913      	cbnz	r3, 8011df0 <_fflush_r+0x10>
 8011dea:	2500      	movs	r5, #0
 8011dec:	4628      	mov	r0, r5
 8011dee:	bd38      	pop	{r3, r4, r5, pc}
 8011df0:	b118      	cbz	r0, 8011dfa <_fflush_r+0x1a>
 8011df2:	6983      	ldr	r3, [r0, #24]
 8011df4:	b90b      	cbnz	r3, 8011dfa <_fflush_r+0x1a>
 8011df6:	f000 f887 	bl	8011f08 <__sinit>
 8011dfa:	4b14      	ldr	r3, [pc, #80]	; (8011e4c <_fflush_r+0x6c>)
 8011dfc:	429c      	cmp	r4, r3
 8011dfe:	d11b      	bne.n	8011e38 <_fflush_r+0x58>
 8011e00:	686c      	ldr	r4, [r5, #4]
 8011e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d0ef      	beq.n	8011dea <_fflush_r+0xa>
 8011e0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011e0c:	07d0      	lsls	r0, r2, #31
 8011e0e:	d404      	bmi.n	8011e1a <_fflush_r+0x3a>
 8011e10:	0599      	lsls	r1, r3, #22
 8011e12:	d402      	bmi.n	8011e1a <_fflush_r+0x3a>
 8011e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011e16:	f000 ffbe 	bl	8012d96 <__retarget_lock_acquire_recursive>
 8011e1a:	4628      	mov	r0, r5
 8011e1c:	4621      	mov	r1, r4
 8011e1e:	f7ff ff4d 	bl	8011cbc <__sflush_r>
 8011e22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011e24:	07da      	lsls	r2, r3, #31
 8011e26:	4605      	mov	r5, r0
 8011e28:	d4e0      	bmi.n	8011dec <_fflush_r+0xc>
 8011e2a:	89a3      	ldrh	r3, [r4, #12]
 8011e2c:	059b      	lsls	r3, r3, #22
 8011e2e:	d4dd      	bmi.n	8011dec <_fflush_r+0xc>
 8011e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011e32:	f000 ffb2 	bl	8012d9a <__retarget_lock_release_recursive>
 8011e36:	e7d9      	b.n	8011dec <_fflush_r+0xc>
 8011e38:	4b05      	ldr	r3, [pc, #20]	; (8011e50 <_fflush_r+0x70>)
 8011e3a:	429c      	cmp	r4, r3
 8011e3c:	d101      	bne.n	8011e42 <_fflush_r+0x62>
 8011e3e:	68ac      	ldr	r4, [r5, #8]
 8011e40:	e7df      	b.n	8011e02 <_fflush_r+0x22>
 8011e42:	4b04      	ldr	r3, [pc, #16]	; (8011e54 <_fflush_r+0x74>)
 8011e44:	429c      	cmp	r4, r3
 8011e46:	bf08      	it	eq
 8011e48:	68ec      	ldreq	r4, [r5, #12]
 8011e4a:	e7da      	b.n	8011e02 <_fflush_r+0x22>
 8011e4c:	08015628 	.word	0x08015628
 8011e50:	08015648 	.word	0x08015648
 8011e54:	08015608 	.word	0x08015608

08011e58 <_cleanup_r>:
 8011e58:	4901      	ldr	r1, [pc, #4]	; (8011e60 <_cleanup_r+0x8>)
 8011e5a:	f000 bb35 	b.w	80124c8 <_fwalk_reent>
 8011e5e:	bf00      	nop
 8011e60:	080146e1 	.word	0x080146e1

08011e64 <std.isra.0>:
 8011e64:	2300      	movs	r3, #0
 8011e66:	b510      	push	{r4, lr}
 8011e68:	4604      	mov	r4, r0
 8011e6a:	6003      	str	r3, [r0, #0]
 8011e6c:	6043      	str	r3, [r0, #4]
 8011e6e:	6083      	str	r3, [r0, #8]
 8011e70:	8181      	strh	r1, [r0, #12]
 8011e72:	6643      	str	r3, [r0, #100]	; 0x64
 8011e74:	81c2      	strh	r2, [r0, #14]
 8011e76:	6103      	str	r3, [r0, #16]
 8011e78:	6143      	str	r3, [r0, #20]
 8011e7a:	6183      	str	r3, [r0, #24]
 8011e7c:	4619      	mov	r1, r3
 8011e7e:	2208      	movs	r2, #8
 8011e80:	305c      	adds	r0, #92	; 0x5c
 8011e82:	f7fb fa72 	bl	800d36a <memset>
 8011e86:	4b05      	ldr	r3, [pc, #20]	; (8011e9c <std.isra.0+0x38>)
 8011e88:	6263      	str	r3, [r4, #36]	; 0x24
 8011e8a:	4b05      	ldr	r3, [pc, #20]	; (8011ea0 <std.isra.0+0x3c>)
 8011e8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8011e8e:	4b05      	ldr	r3, [pc, #20]	; (8011ea4 <std.isra.0+0x40>)
 8011e90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011e92:	4b05      	ldr	r3, [pc, #20]	; (8011ea8 <std.isra.0+0x44>)
 8011e94:	6224      	str	r4, [r4, #32]
 8011e96:	6323      	str	r3, [r4, #48]	; 0x30
 8011e98:	bd10      	pop	{r4, pc}
 8011e9a:	bf00      	nop
 8011e9c:	080139f1 	.word	0x080139f1
 8011ea0:	08013a17 	.word	0x08013a17
 8011ea4:	08013a4f 	.word	0x08013a4f
 8011ea8:	08013a73 	.word	0x08013a73

08011eac <__sfmoreglue>:
 8011eac:	b570      	push	{r4, r5, r6, lr}
 8011eae:	1e4a      	subs	r2, r1, #1
 8011eb0:	2568      	movs	r5, #104	; 0x68
 8011eb2:	4355      	muls	r5, r2
 8011eb4:	460e      	mov	r6, r1
 8011eb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011eba:	f7fb f83d 	bl	800cf38 <_malloc_r>
 8011ebe:	4604      	mov	r4, r0
 8011ec0:	b140      	cbz	r0, 8011ed4 <__sfmoreglue+0x28>
 8011ec2:	2100      	movs	r1, #0
 8011ec4:	e880 0042 	stmia.w	r0, {r1, r6}
 8011ec8:	300c      	adds	r0, #12
 8011eca:	60a0      	str	r0, [r4, #8]
 8011ecc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011ed0:	f7fb fa4b 	bl	800d36a <memset>
 8011ed4:	4620      	mov	r0, r4
 8011ed6:	bd70      	pop	{r4, r5, r6, pc}

08011ed8 <__sfp_lock_acquire>:
 8011ed8:	4801      	ldr	r0, [pc, #4]	; (8011ee0 <__sfp_lock_acquire+0x8>)
 8011eda:	f000 bf5c 	b.w	8012d96 <__retarget_lock_acquire_recursive>
 8011ede:	bf00      	nop
 8011ee0:	200037e4 	.word	0x200037e4

08011ee4 <__sfp_lock_release>:
 8011ee4:	4801      	ldr	r0, [pc, #4]	; (8011eec <__sfp_lock_release+0x8>)
 8011ee6:	f000 bf58 	b.w	8012d9a <__retarget_lock_release_recursive>
 8011eea:	bf00      	nop
 8011eec:	200037e4 	.word	0x200037e4

08011ef0 <__sinit_lock_acquire>:
 8011ef0:	4801      	ldr	r0, [pc, #4]	; (8011ef8 <__sinit_lock_acquire+0x8>)
 8011ef2:	f000 bf50 	b.w	8012d96 <__retarget_lock_acquire_recursive>
 8011ef6:	bf00      	nop
 8011ef8:	200037df 	.word	0x200037df

08011efc <__sinit_lock_release>:
 8011efc:	4801      	ldr	r0, [pc, #4]	; (8011f04 <__sinit_lock_release+0x8>)
 8011efe:	f000 bf4c 	b.w	8012d9a <__retarget_lock_release_recursive>
 8011f02:	bf00      	nop
 8011f04:	200037df 	.word	0x200037df

08011f08 <__sinit>:
 8011f08:	b510      	push	{r4, lr}
 8011f0a:	4604      	mov	r4, r0
 8011f0c:	f7ff fff0 	bl	8011ef0 <__sinit_lock_acquire>
 8011f10:	69a3      	ldr	r3, [r4, #24]
 8011f12:	b11b      	cbz	r3, 8011f1c <__sinit+0x14>
 8011f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f18:	f7ff bff0 	b.w	8011efc <__sinit_lock_release>
 8011f1c:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8011f20:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 8011f24:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8011f28:	4b12      	ldr	r3, [pc, #72]	; (8011f74 <__sinit+0x6c>)
 8011f2a:	4a13      	ldr	r2, [pc, #76]	; (8011f78 <__sinit+0x70>)
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	62a2      	str	r2, [r4, #40]	; 0x28
 8011f30:	429c      	cmp	r4, r3
 8011f32:	bf04      	itt	eq
 8011f34:	2301      	moveq	r3, #1
 8011f36:	61a3      	streq	r3, [r4, #24]
 8011f38:	4620      	mov	r0, r4
 8011f3a:	f000 f81f 	bl	8011f7c <__sfp>
 8011f3e:	6060      	str	r0, [r4, #4]
 8011f40:	4620      	mov	r0, r4
 8011f42:	f000 f81b 	bl	8011f7c <__sfp>
 8011f46:	60a0      	str	r0, [r4, #8]
 8011f48:	4620      	mov	r0, r4
 8011f4a:	f000 f817 	bl	8011f7c <__sfp>
 8011f4e:	2200      	movs	r2, #0
 8011f50:	60e0      	str	r0, [r4, #12]
 8011f52:	2104      	movs	r1, #4
 8011f54:	6860      	ldr	r0, [r4, #4]
 8011f56:	f7ff ff85 	bl	8011e64 <std.isra.0>
 8011f5a:	2201      	movs	r2, #1
 8011f5c:	2109      	movs	r1, #9
 8011f5e:	68a0      	ldr	r0, [r4, #8]
 8011f60:	f7ff ff80 	bl	8011e64 <std.isra.0>
 8011f64:	2202      	movs	r2, #2
 8011f66:	2112      	movs	r1, #18
 8011f68:	68e0      	ldr	r0, [r4, #12]
 8011f6a:	f7ff ff7b 	bl	8011e64 <std.isra.0>
 8011f6e:	2301      	movs	r3, #1
 8011f70:	61a3      	str	r3, [r4, #24]
 8011f72:	e7cf      	b.n	8011f14 <__sinit+0xc>
 8011f74:	0801542c 	.word	0x0801542c
 8011f78:	08011e59 	.word	0x08011e59

08011f7c <__sfp>:
 8011f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f7e:	4607      	mov	r7, r0
 8011f80:	f7ff ffaa 	bl	8011ed8 <__sfp_lock_acquire>
 8011f84:	4b1f      	ldr	r3, [pc, #124]	; (8012004 <__sfp+0x88>)
 8011f86:	681e      	ldr	r6, [r3, #0]
 8011f88:	69b3      	ldr	r3, [r6, #24]
 8011f8a:	b913      	cbnz	r3, 8011f92 <__sfp+0x16>
 8011f8c:	4630      	mov	r0, r6
 8011f8e:	f7ff ffbb 	bl	8011f08 <__sinit>
 8011f92:	36d8      	adds	r6, #216	; 0xd8
 8011f94:	68b4      	ldr	r4, [r6, #8]
 8011f96:	6873      	ldr	r3, [r6, #4]
 8011f98:	3b01      	subs	r3, #1
 8011f9a:	d503      	bpl.n	8011fa4 <__sfp+0x28>
 8011f9c:	6833      	ldr	r3, [r6, #0]
 8011f9e:	b133      	cbz	r3, 8011fae <__sfp+0x32>
 8011fa0:	6836      	ldr	r6, [r6, #0]
 8011fa2:	e7f7      	b.n	8011f94 <__sfp+0x18>
 8011fa4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011fa8:	b17d      	cbz	r5, 8011fca <__sfp+0x4e>
 8011faa:	3468      	adds	r4, #104	; 0x68
 8011fac:	e7f4      	b.n	8011f98 <__sfp+0x1c>
 8011fae:	2104      	movs	r1, #4
 8011fb0:	4638      	mov	r0, r7
 8011fb2:	f7ff ff7b 	bl	8011eac <__sfmoreglue>
 8011fb6:	4604      	mov	r4, r0
 8011fb8:	6030      	str	r0, [r6, #0]
 8011fba:	2800      	cmp	r0, #0
 8011fbc:	d1f0      	bne.n	8011fa0 <__sfp+0x24>
 8011fbe:	f7ff ff91 	bl	8011ee4 <__sfp_lock_release>
 8011fc2:	230c      	movs	r3, #12
 8011fc4:	603b      	str	r3, [r7, #0]
 8011fc6:	4620      	mov	r0, r4
 8011fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011fce:	81e3      	strh	r3, [r4, #14]
 8011fd0:	2301      	movs	r3, #1
 8011fd2:	81a3      	strh	r3, [r4, #12]
 8011fd4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011fd8:	6665      	str	r5, [r4, #100]	; 0x64
 8011fda:	f000 fed9 	bl	8012d90 <__retarget_lock_init_recursive>
 8011fde:	f7ff ff81 	bl	8011ee4 <__sfp_lock_release>
 8011fe2:	6025      	str	r5, [r4, #0]
 8011fe4:	60a5      	str	r5, [r4, #8]
 8011fe6:	6065      	str	r5, [r4, #4]
 8011fe8:	6125      	str	r5, [r4, #16]
 8011fea:	6165      	str	r5, [r4, #20]
 8011fec:	61a5      	str	r5, [r4, #24]
 8011fee:	2208      	movs	r2, #8
 8011ff0:	4629      	mov	r1, r5
 8011ff2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011ff6:	f7fb f9b8 	bl	800d36a <memset>
 8011ffa:	6365      	str	r5, [r4, #52]	; 0x34
 8011ffc:	63a5      	str	r5, [r4, #56]	; 0x38
 8011ffe:	64a5      	str	r5, [r4, #72]	; 0x48
 8012000:	64e5      	str	r5, [r4, #76]	; 0x4c
 8012002:	e7e0      	b.n	8011fc6 <__sfp+0x4a>
 8012004:	0801542c 	.word	0x0801542c

08012008 <_malloc_trim_r>:
 8012008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801200c:	4f25      	ldr	r7, [pc, #148]	; (80120a4 <_malloc_trim_r+0x9c>)
 801200e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80120b0 <_malloc_trim_r+0xa8>
 8012012:	4689      	mov	r9, r1
 8012014:	4606      	mov	r6, r0
 8012016:	f7fb fc0d 	bl	800d834 <__malloc_lock>
 801201a:	68bb      	ldr	r3, [r7, #8]
 801201c:	685d      	ldr	r5, [r3, #4]
 801201e:	f1a8 0411 	sub.w	r4, r8, #17
 8012022:	f025 0503 	bic.w	r5, r5, #3
 8012026:	eba4 0409 	sub.w	r4, r4, r9
 801202a:	442c      	add	r4, r5
 801202c:	fbb4 f4f8 	udiv	r4, r4, r8
 8012030:	3c01      	subs	r4, #1
 8012032:	fb08 f404 	mul.w	r4, r8, r4
 8012036:	4544      	cmp	r4, r8
 8012038:	da05      	bge.n	8012046 <_malloc_trim_r+0x3e>
 801203a:	4630      	mov	r0, r6
 801203c:	f7fb fc00 	bl	800d840 <__malloc_unlock>
 8012040:	2000      	movs	r0, #0
 8012042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012046:	2100      	movs	r1, #0
 8012048:	4630      	mov	r0, r6
 801204a:	f7fb fc7f 	bl	800d94c <_sbrk_r>
 801204e:	68bb      	ldr	r3, [r7, #8]
 8012050:	442b      	add	r3, r5
 8012052:	4298      	cmp	r0, r3
 8012054:	d1f1      	bne.n	801203a <_malloc_trim_r+0x32>
 8012056:	4261      	negs	r1, r4
 8012058:	4630      	mov	r0, r6
 801205a:	f7fb fc77 	bl	800d94c <_sbrk_r>
 801205e:	3001      	adds	r0, #1
 8012060:	d110      	bne.n	8012084 <_malloc_trim_r+0x7c>
 8012062:	2100      	movs	r1, #0
 8012064:	4630      	mov	r0, r6
 8012066:	f7fb fc71 	bl	800d94c <_sbrk_r>
 801206a:	68ba      	ldr	r2, [r7, #8]
 801206c:	1a83      	subs	r3, r0, r2
 801206e:	2b0f      	cmp	r3, #15
 8012070:	dde3      	ble.n	801203a <_malloc_trim_r+0x32>
 8012072:	490d      	ldr	r1, [pc, #52]	; (80120a8 <_malloc_trim_r+0xa0>)
 8012074:	6809      	ldr	r1, [r1, #0]
 8012076:	1a40      	subs	r0, r0, r1
 8012078:	490c      	ldr	r1, [pc, #48]	; (80120ac <_malloc_trim_r+0xa4>)
 801207a:	f043 0301 	orr.w	r3, r3, #1
 801207e:	6008      	str	r0, [r1, #0]
 8012080:	6053      	str	r3, [r2, #4]
 8012082:	e7da      	b.n	801203a <_malloc_trim_r+0x32>
 8012084:	68bb      	ldr	r3, [r7, #8]
 8012086:	4a09      	ldr	r2, [pc, #36]	; (80120ac <_malloc_trim_r+0xa4>)
 8012088:	1b2d      	subs	r5, r5, r4
 801208a:	f045 0501 	orr.w	r5, r5, #1
 801208e:	605d      	str	r5, [r3, #4]
 8012090:	6813      	ldr	r3, [r2, #0]
 8012092:	4630      	mov	r0, r6
 8012094:	1b1c      	subs	r4, r3, r4
 8012096:	6014      	str	r4, [r2, #0]
 8012098:	f7fb fbd2 	bl	800d840 <__malloc_unlock>
 801209c:	2001      	movs	r0, #1
 801209e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120a2:	bf00      	nop
 80120a4:	20000108 	.word	0x20000108
 80120a8:	20000510 	.word	0x20000510
 80120ac:	20000920 	.word	0x20000920
 80120b0:	00000080 	.word	0x00000080

080120b4 <_free_r>:
 80120b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120b8:	4604      	mov	r4, r0
 80120ba:	4688      	mov	r8, r1
 80120bc:	2900      	cmp	r1, #0
 80120be:	f000 80ab 	beq.w	8012218 <_free_r+0x164>
 80120c2:	f7fb fbb7 	bl	800d834 <__malloc_lock>
 80120c6:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80120ca:	4d54      	ldr	r5, [pc, #336]	; (801221c <_free_r+0x168>)
 80120cc:	f022 0001 	bic.w	r0, r2, #1
 80120d0:	f1a8 0308 	sub.w	r3, r8, #8
 80120d4:	181f      	adds	r7, r3, r0
 80120d6:	68a9      	ldr	r1, [r5, #8]
 80120d8:	687e      	ldr	r6, [r7, #4]
 80120da:	428f      	cmp	r7, r1
 80120dc:	f026 0603 	bic.w	r6, r6, #3
 80120e0:	f002 0201 	and.w	r2, r2, #1
 80120e4:	d11b      	bne.n	801211e <_free_r+0x6a>
 80120e6:	4430      	add	r0, r6
 80120e8:	b93a      	cbnz	r2, 80120fa <_free_r+0x46>
 80120ea:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80120ee:	1a9b      	subs	r3, r3, r2
 80120f0:	4410      	add	r0, r2
 80120f2:	6899      	ldr	r1, [r3, #8]
 80120f4:	68da      	ldr	r2, [r3, #12]
 80120f6:	60ca      	str	r2, [r1, #12]
 80120f8:	6091      	str	r1, [r2, #8]
 80120fa:	f040 0201 	orr.w	r2, r0, #1
 80120fe:	605a      	str	r2, [r3, #4]
 8012100:	60ab      	str	r3, [r5, #8]
 8012102:	4b47      	ldr	r3, [pc, #284]	; (8012220 <_free_r+0x16c>)
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	4298      	cmp	r0, r3
 8012108:	d304      	bcc.n	8012114 <_free_r+0x60>
 801210a:	4b46      	ldr	r3, [pc, #280]	; (8012224 <_free_r+0x170>)
 801210c:	4620      	mov	r0, r4
 801210e:	6819      	ldr	r1, [r3, #0]
 8012110:	f7ff ff7a 	bl	8012008 <_malloc_trim_r>
 8012114:	4620      	mov	r0, r4
 8012116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801211a:	f7fb bb91 	b.w	800d840 <__malloc_unlock>
 801211e:	607e      	str	r6, [r7, #4]
 8012120:	2a00      	cmp	r2, #0
 8012122:	d139      	bne.n	8012198 <_free_r+0xe4>
 8012124:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8012128:	1a5b      	subs	r3, r3, r1
 801212a:	4408      	add	r0, r1
 801212c:	6899      	ldr	r1, [r3, #8]
 801212e:	f105 0e08 	add.w	lr, r5, #8
 8012132:	4571      	cmp	r1, lr
 8012134:	d032      	beq.n	801219c <_free_r+0xe8>
 8012136:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 801213a:	f8c1 e00c 	str.w	lr, [r1, #12]
 801213e:	f8ce 1008 	str.w	r1, [lr, #8]
 8012142:	19b9      	adds	r1, r7, r6
 8012144:	6849      	ldr	r1, [r1, #4]
 8012146:	07c9      	lsls	r1, r1, #31
 8012148:	d40a      	bmi.n	8012160 <_free_r+0xac>
 801214a:	4430      	add	r0, r6
 801214c:	68b9      	ldr	r1, [r7, #8]
 801214e:	bb3a      	cbnz	r2, 80121a0 <_free_r+0xec>
 8012150:	4e35      	ldr	r6, [pc, #212]	; (8012228 <_free_r+0x174>)
 8012152:	42b1      	cmp	r1, r6
 8012154:	d124      	bne.n	80121a0 <_free_r+0xec>
 8012156:	616b      	str	r3, [r5, #20]
 8012158:	612b      	str	r3, [r5, #16]
 801215a:	2201      	movs	r2, #1
 801215c:	60d9      	str	r1, [r3, #12]
 801215e:	6099      	str	r1, [r3, #8]
 8012160:	f040 0101 	orr.w	r1, r0, #1
 8012164:	6059      	str	r1, [r3, #4]
 8012166:	5018      	str	r0, [r3, r0]
 8012168:	2a00      	cmp	r2, #0
 801216a:	d1d3      	bne.n	8012114 <_free_r+0x60>
 801216c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8012170:	d21a      	bcs.n	80121a8 <_free_r+0xf4>
 8012172:	08c0      	lsrs	r0, r0, #3
 8012174:	1081      	asrs	r1, r0, #2
 8012176:	2201      	movs	r2, #1
 8012178:	408a      	lsls	r2, r1
 801217a:	6869      	ldr	r1, [r5, #4]
 801217c:	3001      	adds	r0, #1
 801217e:	430a      	orrs	r2, r1
 8012180:	606a      	str	r2, [r5, #4]
 8012182:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8012186:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 801218a:	6099      	str	r1, [r3, #8]
 801218c:	3a08      	subs	r2, #8
 801218e:	60da      	str	r2, [r3, #12]
 8012190:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8012194:	60cb      	str	r3, [r1, #12]
 8012196:	e7bd      	b.n	8012114 <_free_r+0x60>
 8012198:	2200      	movs	r2, #0
 801219a:	e7d2      	b.n	8012142 <_free_r+0x8e>
 801219c:	2201      	movs	r2, #1
 801219e:	e7d0      	b.n	8012142 <_free_r+0x8e>
 80121a0:	68fe      	ldr	r6, [r7, #12]
 80121a2:	60ce      	str	r6, [r1, #12]
 80121a4:	60b1      	str	r1, [r6, #8]
 80121a6:	e7db      	b.n	8012160 <_free_r+0xac>
 80121a8:	0a42      	lsrs	r2, r0, #9
 80121aa:	2a04      	cmp	r2, #4
 80121ac:	d813      	bhi.n	80121d6 <_free_r+0x122>
 80121ae:	0982      	lsrs	r2, r0, #6
 80121b0:	3238      	adds	r2, #56	; 0x38
 80121b2:	1c51      	adds	r1, r2, #1
 80121b4:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80121b8:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80121bc:	428e      	cmp	r6, r1
 80121be:	d124      	bne.n	801220a <_free_r+0x156>
 80121c0:	2001      	movs	r0, #1
 80121c2:	1092      	asrs	r2, r2, #2
 80121c4:	fa00 f202 	lsl.w	r2, r0, r2
 80121c8:	6868      	ldr	r0, [r5, #4]
 80121ca:	4302      	orrs	r2, r0
 80121cc:	606a      	str	r2, [r5, #4]
 80121ce:	60de      	str	r6, [r3, #12]
 80121d0:	6099      	str	r1, [r3, #8]
 80121d2:	60b3      	str	r3, [r6, #8]
 80121d4:	e7de      	b.n	8012194 <_free_r+0xe0>
 80121d6:	2a14      	cmp	r2, #20
 80121d8:	d801      	bhi.n	80121de <_free_r+0x12a>
 80121da:	325b      	adds	r2, #91	; 0x5b
 80121dc:	e7e9      	b.n	80121b2 <_free_r+0xfe>
 80121de:	2a54      	cmp	r2, #84	; 0x54
 80121e0:	d802      	bhi.n	80121e8 <_free_r+0x134>
 80121e2:	0b02      	lsrs	r2, r0, #12
 80121e4:	326e      	adds	r2, #110	; 0x6e
 80121e6:	e7e4      	b.n	80121b2 <_free_r+0xfe>
 80121e8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80121ec:	d802      	bhi.n	80121f4 <_free_r+0x140>
 80121ee:	0bc2      	lsrs	r2, r0, #15
 80121f0:	3277      	adds	r2, #119	; 0x77
 80121f2:	e7de      	b.n	80121b2 <_free_r+0xfe>
 80121f4:	f240 5154 	movw	r1, #1364	; 0x554
 80121f8:	428a      	cmp	r2, r1
 80121fa:	bf9a      	itte	ls
 80121fc:	0c82      	lsrls	r2, r0, #18
 80121fe:	327c      	addls	r2, #124	; 0x7c
 8012200:	227e      	movhi	r2, #126	; 0x7e
 8012202:	e7d6      	b.n	80121b2 <_free_r+0xfe>
 8012204:	6889      	ldr	r1, [r1, #8]
 8012206:	428e      	cmp	r6, r1
 8012208:	d004      	beq.n	8012214 <_free_r+0x160>
 801220a:	684a      	ldr	r2, [r1, #4]
 801220c:	f022 0203 	bic.w	r2, r2, #3
 8012210:	4290      	cmp	r0, r2
 8012212:	d3f7      	bcc.n	8012204 <_free_r+0x150>
 8012214:	68ce      	ldr	r6, [r1, #12]
 8012216:	e7da      	b.n	80121ce <_free_r+0x11a>
 8012218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801221c:	20000108 	.word	0x20000108
 8012220:	20000514 	.word	0x20000514
 8012224:	20000950 	.word	0x20000950
 8012228:	20000110 	.word	0x20000110

0801222c <__sfvwrite_r>:
 801222c:	6893      	ldr	r3, [r2, #8]
 801222e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012232:	4607      	mov	r7, r0
 8012234:	460c      	mov	r4, r1
 8012236:	4690      	mov	r8, r2
 8012238:	b91b      	cbnz	r3, 8012242 <__sfvwrite_r+0x16>
 801223a:	2000      	movs	r0, #0
 801223c:	b003      	add	sp, #12
 801223e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012242:	898b      	ldrh	r3, [r1, #12]
 8012244:	0718      	lsls	r0, r3, #28
 8012246:	d526      	bpl.n	8012296 <__sfvwrite_r+0x6a>
 8012248:	690b      	ldr	r3, [r1, #16]
 801224a:	b323      	cbz	r3, 8012296 <__sfvwrite_r+0x6a>
 801224c:	89a3      	ldrh	r3, [r4, #12]
 801224e:	f8d8 6000 	ldr.w	r6, [r8]
 8012252:	f013 0902 	ands.w	r9, r3, #2
 8012256:	d02d      	beq.n	80122b4 <__sfvwrite_r+0x88>
 8012258:	f04f 0a00 	mov.w	sl, #0
 801225c:	f8df b264 	ldr.w	fp, [pc, #612]	; 80124c4 <__sfvwrite_r+0x298>
 8012260:	46d1      	mov	r9, sl
 8012262:	f1b9 0f00 	cmp.w	r9, #0
 8012266:	d01f      	beq.n	80122a8 <__sfvwrite_r+0x7c>
 8012268:	45d9      	cmp	r9, fp
 801226a:	464b      	mov	r3, r9
 801226c:	4652      	mov	r2, sl
 801226e:	bf28      	it	cs
 8012270:	465b      	movcs	r3, fp
 8012272:	6a21      	ldr	r1, [r4, #32]
 8012274:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8012276:	4638      	mov	r0, r7
 8012278:	47a8      	blx	r5
 801227a:	2800      	cmp	r0, #0
 801227c:	f340 8089 	ble.w	8012392 <__sfvwrite_r+0x166>
 8012280:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012284:	4482      	add	sl, r0
 8012286:	eba9 0900 	sub.w	r9, r9, r0
 801228a:	1a18      	subs	r0, r3, r0
 801228c:	f8c8 0008 	str.w	r0, [r8, #8]
 8012290:	2800      	cmp	r0, #0
 8012292:	d1e6      	bne.n	8012262 <__sfvwrite_r+0x36>
 8012294:	e7d1      	b.n	801223a <__sfvwrite_r+0xe>
 8012296:	4621      	mov	r1, r4
 8012298:	4638      	mov	r0, r7
 801229a:	f7fe fe2d 	bl	8010ef8 <__swsetup_r>
 801229e:	2800      	cmp	r0, #0
 80122a0:	d0d4      	beq.n	801224c <__sfvwrite_r+0x20>
 80122a2:	f04f 30ff 	mov.w	r0, #4294967295
 80122a6:	e7c9      	b.n	801223c <__sfvwrite_r+0x10>
 80122a8:	f8d6 a000 	ldr.w	sl, [r6]
 80122ac:	f8d6 9004 	ldr.w	r9, [r6, #4]
 80122b0:	3608      	adds	r6, #8
 80122b2:	e7d6      	b.n	8012262 <__sfvwrite_r+0x36>
 80122b4:	f013 0301 	ands.w	r3, r3, #1
 80122b8:	d043      	beq.n	8012342 <__sfvwrite_r+0x116>
 80122ba:	4648      	mov	r0, r9
 80122bc:	46ca      	mov	sl, r9
 80122be:	46cb      	mov	fp, r9
 80122c0:	f1bb 0f00 	cmp.w	fp, #0
 80122c4:	f000 80d9 	beq.w	801247a <__sfvwrite_r+0x24e>
 80122c8:	b950      	cbnz	r0, 80122e0 <__sfvwrite_r+0xb4>
 80122ca:	465a      	mov	r2, fp
 80122cc:	210a      	movs	r1, #10
 80122ce:	4650      	mov	r0, sl
 80122d0:	f7ed ff96 	bl	8000200 <memchr>
 80122d4:	2800      	cmp	r0, #0
 80122d6:	f000 80d5 	beq.w	8012484 <__sfvwrite_r+0x258>
 80122da:	3001      	adds	r0, #1
 80122dc:	eba0 090a 	sub.w	r9, r0, sl
 80122e0:	6820      	ldr	r0, [r4, #0]
 80122e2:	6921      	ldr	r1, [r4, #16]
 80122e4:	6962      	ldr	r2, [r4, #20]
 80122e6:	45d9      	cmp	r9, fp
 80122e8:	464b      	mov	r3, r9
 80122ea:	bf28      	it	cs
 80122ec:	465b      	movcs	r3, fp
 80122ee:	4288      	cmp	r0, r1
 80122f0:	f240 80cb 	bls.w	801248a <__sfvwrite_r+0x25e>
 80122f4:	68a5      	ldr	r5, [r4, #8]
 80122f6:	4415      	add	r5, r2
 80122f8:	42ab      	cmp	r3, r5
 80122fa:	f340 80c6 	ble.w	801248a <__sfvwrite_r+0x25e>
 80122fe:	4651      	mov	r1, sl
 8012300:	462a      	mov	r2, r5
 8012302:	f000 fdc9 	bl	8012e98 <memmove>
 8012306:	6823      	ldr	r3, [r4, #0]
 8012308:	442b      	add	r3, r5
 801230a:	6023      	str	r3, [r4, #0]
 801230c:	4621      	mov	r1, r4
 801230e:	4638      	mov	r0, r7
 8012310:	f7ff fd66 	bl	8011de0 <_fflush_r>
 8012314:	2800      	cmp	r0, #0
 8012316:	d13c      	bne.n	8012392 <__sfvwrite_r+0x166>
 8012318:	ebb9 0905 	subs.w	r9, r9, r5
 801231c:	f040 80cf 	bne.w	80124be <__sfvwrite_r+0x292>
 8012320:	4621      	mov	r1, r4
 8012322:	4638      	mov	r0, r7
 8012324:	f7ff fd5c 	bl	8011de0 <_fflush_r>
 8012328:	2800      	cmp	r0, #0
 801232a:	d132      	bne.n	8012392 <__sfvwrite_r+0x166>
 801232c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012330:	44aa      	add	sl, r5
 8012332:	ebab 0b05 	sub.w	fp, fp, r5
 8012336:	1b5d      	subs	r5, r3, r5
 8012338:	f8c8 5008 	str.w	r5, [r8, #8]
 801233c:	2d00      	cmp	r5, #0
 801233e:	d1bf      	bne.n	80122c0 <__sfvwrite_r+0x94>
 8012340:	e77b      	b.n	801223a <__sfvwrite_r+0xe>
 8012342:	4699      	mov	r9, r3
 8012344:	469a      	mov	sl, r3
 8012346:	f1ba 0f00 	cmp.w	sl, #0
 801234a:	d027      	beq.n	801239c <__sfvwrite_r+0x170>
 801234c:	89a2      	ldrh	r2, [r4, #12]
 801234e:	68a5      	ldr	r5, [r4, #8]
 8012350:	0591      	lsls	r1, r2, #22
 8012352:	d565      	bpl.n	8012420 <__sfvwrite_r+0x1f4>
 8012354:	45aa      	cmp	sl, r5
 8012356:	d33b      	bcc.n	80123d0 <__sfvwrite_r+0x1a4>
 8012358:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801235c:	d036      	beq.n	80123cc <__sfvwrite_r+0x1a0>
 801235e:	6921      	ldr	r1, [r4, #16]
 8012360:	6823      	ldr	r3, [r4, #0]
 8012362:	1a5b      	subs	r3, r3, r1
 8012364:	9301      	str	r3, [sp, #4]
 8012366:	6963      	ldr	r3, [r4, #20]
 8012368:	2002      	movs	r0, #2
 801236a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801236e:	fb93 fbf0 	sdiv	fp, r3, r0
 8012372:	9b01      	ldr	r3, [sp, #4]
 8012374:	1c58      	adds	r0, r3, #1
 8012376:	4450      	add	r0, sl
 8012378:	4583      	cmp	fp, r0
 801237a:	bf38      	it	cc
 801237c:	4683      	movcc	fp, r0
 801237e:	0553      	lsls	r3, r2, #21
 8012380:	d53e      	bpl.n	8012400 <__sfvwrite_r+0x1d4>
 8012382:	4659      	mov	r1, fp
 8012384:	4638      	mov	r0, r7
 8012386:	f7fa fdd7 	bl	800cf38 <_malloc_r>
 801238a:	4605      	mov	r5, r0
 801238c:	b950      	cbnz	r0, 80123a4 <__sfvwrite_r+0x178>
 801238e:	230c      	movs	r3, #12
 8012390:	603b      	str	r3, [r7, #0]
 8012392:	89a3      	ldrh	r3, [r4, #12]
 8012394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012398:	81a3      	strh	r3, [r4, #12]
 801239a:	e782      	b.n	80122a2 <__sfvwrite_r+0x76>
 801239c:	e896 0600 	ldmia.w	r6, {r9, sl}
 80123a0:	3608      	adds	r6, #8
 80123a2:	e7d0      	b.n	8012346 <__sfvwrite_r+0x11a>
 80123a4:	9a01      	ldr	r2, [sp, #4]
 80123a6:	6921      	ldr	r1, [r4, #16]
 80123a8:	f7fa ffd4 	bl	800d354 <memcpy>
 80123ac:	89a2      	ldrh	r2, [r4, #12]
 80123ae:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80123b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80123b6:	81a2      	strh	r2, [r4, #12]
 80123b8:	9b01      	ldr	r3, [sp, #4]
 80123ba:	6125      	str	r5, [r4, #16]
 80123bc:	441d      	add	r5, r3
 80123be:	ebab 0303 	sub.w	r3, fp, r3
 80123c2:	6025      	str	r5, [r4, #0]
 80123c4:	f8c4 b014 	str.w	fp, [r4, #20]
 80123c8:	4655      	mov	r5, sl
 80123ca:	60a3      	str	r3, [r4, #8]
 80123cc:	45aa      	cmp	sl, r5
 80123ce:	d200      	bcs.n	80123d2 <__sfvwrite_r+0x1a6>
 80123d0:	4655      	mov	r5, sl
 80123d2:	462a      	mov	r2, r5
 80123d4:	4649      	mov	r1, r9
 80123d6:	6820      	ldr	r0, [r4, #0]
 80123d8:	f000 fd5e 	bl	8012e98 <memmove>
 80123dc:	68a3      	ldr	r3, [r4, #8]
 80123de:	1b5b      	subs	r3, r3, r5
 80123e0:	60a3      	str	r3, [r4, #8]
 80123e2:	6823      	ldr	r3, [r4, #0]
 80123e4:	441d      	add	r5, r3
 80123e6:	6025      	str	r5, [r4, #0]
 80123e8:	4655      	mov	r5, sl
 80123ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80123ee:	44a9      	add	r9, r5
 80123f0:	ebaa 0a05 	sub.w	sl, sl, r5
 80123f4:	1b5d      	subs	r5, r3, r5
 80123f6:	f8c8 5008 	str.w	r5, [r8, #8]
 80123fa:	2d00      	cmp	r5, #0
 80123fc:	d1a3      	bne.n	8012346 <__sfvwrite_r+0x11a>
 80123fe:	e71c      	b.n	801223a <__sfvwrite_r+0xe>
 8012400:	465a      	mov	r2, fp
 8012402:	4638      	mov	r0, r7
 8012404:	f001 f94a 	bl	801369c <_realloc_r>
 8012408:	4605      	mov	r5, r0
 801240a:	2800      	cmp	r0, #0
 801240c:	d1d4      	bne.n	80123b8 <__sfvwrite_r+0x18c>
 801240e:	6921      	ldr	r1, [r4, #16]
 8012410:	4638      	mov	r0, r7
 8012412:	f7ff fe4f 	bl	80120b4 <_free_r>
 8012416:	89a3      	ldrh	r3, [r4, #12]
 8012418:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801241c:	81a3      	strh	r3, [r4, #12]
 801241e:	e7b6      	b.n	801238e <__sfvwrite_r+0x162>
 8012420:	6820      	ldr	r0, [r4, #0]
 8012422:	6923      	ldr	r3, [r4, #16]
 8012424:	4298      	cmp	r0, r3
 8012426:	d802      	bhi.n	801242e <__sfvwrite_r+0x202>
 8012428:	6962      	ldr	r2, [r4, #20]
 801242a:	4592      	cmp	sl, r2
 801242c:	d215      	bcs.n	801245a <__sfvwrite_r+0x22e>
 801242e:	4555      	cmp	r5, sl
 8012430:	bf28      	it	cs
 8012432:	4655      	movcs	r5, sl
 8012434:	462a      	mov	r2, r5
 8012436:	4649      	mov	r1, r9
 8012438:	f000 fd2e 	bl	8012e98 <memmove>
 801243c:	68a3      	ldr	r3, [r4, #8]
 801243e:	6822      	ldr	r2, [r4, #0]
 8012440:	1b5b      	subs	r3, r3, r5
 8012442:	442a      	add	r2, r5
 8012444:	60a3      	str	r3, [r4, #8]
 8012446:	6022      	str	r2, [r4, #0]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d1ce      	bne.n	80123ea <__sfvwrite_r+0x1be>
 801244c:	4621      	mov	r1, r4
 801244e:	4638      	mov	r0, r7
 8012450:	f7ff fcc6 	bl	8011de0 <_fflush_r>
 8012454:	2800      	cmp	r0, #0
 8012456:	d0c8      	beq.n	80123ea <__sfvwrite_r+0x1be>
 8012458:	e79b      	b.n	8012392 <__sfvwrite_r+0x166>
 801245a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801245e:	4553      	cmp	r3, sl
 8012460:	bf28      	it	cs
 8012462:	4653      	movcs	r3, sl
 8012464:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8012466:	fb93 f3f2 	sdiv	r3, r3, r2
 801246a:	6a21      	ldr	r1, [r4, #32]
 801246c:	4353      	muls	r3, r2
 801246e:	4638      	mov	r0, r7
 8012470:	464a      	mov	r2, r9
 8012472:	47a8      	blx	r5
 8012474:	1e05      	subs	r5, r0, #0
 8012476:	dcb8      	bgt.n	80123ea <__sfvwrite_r+0x1be>
 8012478:	e78b      	b.n	8012392 <__sfvwrite_r+0x166>
 801247a:	e896 0c00 	ldmia.w	r6, {sl, fp}
 801247e:	2000      	movs	r0, #0
 8012480:	3608      	adds	r6, #8
 8012482:	e71d      	b.n	80122c0 <__sfvwrite_r+0x94>
 8012484:	f10b 0901 	add.w	r9, fp, #1
 8012488:	e72a      	b.n	80122e0 <__sfvwrite_r+0xb4>
 801248a:	4293      	cmp	r3, r2
 801248c:	db09      	blt.n	80124a2 <__sfvwrite_r+0x276>
 801248e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8012490:	6a21      	ldr	r1, [r4, #32]
 8012492:	4613      	mov	r3, r2
 8012494:	4638      	mov	r0, r7
 8012496:	4652      	mov	r2, sl
 8012498:	47a8      	blx	r5
 801249a:	1e05      	subs	r5, r0, #0
 801249c:	f73f af3c 	bgt.w	8012318 <__sfvwrite_r+0xec>
 80124a0:	e777      	b.n	8012392 <__sfvwrite_r+0x166>
 80124a2:	461a      	mov	r2, r3
 80124a4:	4651      	mov	r1, sl
 80124a6:	9301      	str	r3, [sp, #4]
 80124a8:	f000 fcf6 	bl	8012e98 <memmove>
 80124ac:	9b01      	ldr	r3, [sp, #4]
 80124ae:	68a2      	ldr	r2, [r4, #8]
 80124b0:	1ad2      	subs	r2, r2, r3
 80124b2:	60a2      	str	r2, [r4, #8]
 80124b4:	6822      	ldr	r2, [r4, #0]
 80124b6:	441a      	add	r2, r3
 80124b8:	6022      	str	r2, [r4, #0]
 80124ba:	461d      	mov	r5, r3
 80124bc:	e72c      	b.n	8012318 <__sfvwrite_r+0xec>
 80124be:	2001      	movs	r0, #1
 80124c0:	e734      	b.n	801232c <__sfvwrite_r+0x100>
 80124c2:	bf00      	nop
 80124c4:	7ffffc00 	.word	0x7ffffc00

080124c8 <_fwalk_reent>:
 80124c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124cc:	4680      	mov	r8, r0
 80124ce:	4689      	mov	r9, r1
 80124d0:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 80124d4:	2600      	movs	r6, #0
 80124d6:	b914      	cbnz	r4, 80124de <_fwalk_reent+0x16>
 80124d8:	4630      	mov	r0, r6
 80124da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124de:	68a5      	ldr	r5, [r4, #8]
 80124e0:	6867      	ldr	r7, [r4, #4]
 80124e2:	3f01      	subs	r7, #1
 80124e4:	d501      	bpl.n	80124ea <_fwalk_reent+0x22>
 80124e6:	6824      	ldr	r4, [r4, #0]
 80124e8:	e7f5      	b.n	80124d6 <_fwalk_reent+0xe>
 80124ea:	89ab      	ldrh	r3, [r5, #12]
 80124ec:	2b01      	cmp	r3, #1
 80124ee:	d907      	bls.n	8012500 <_fwalk_reent+0x38>
 80124f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80124f4:	3301      	adds	r3, #1
 80124f6:	d003      	beq.n	8012500 <_fwalk_reent+0x38>
 80124f8:	4629      	mov	r1, r5
 80124fa:	4640      	mov	r0, r8
 80124fc:	47c8      	blx	r9
 80124fe:	4306      	orrs	r6, r0
 8012500:	3568      	adds	r5, #104	; 0x68
 8012502:	e7ee      	b.n	80124e2 <_fwalk_reent+0x1a>

08012504 <rshift>:
 8012504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012506:	6906      	ldr	r6, [r0, #16]
 8012508:	114b      	asrs	r3, r1, #5
 801250a:	42b3      	cmp	r3, r6
 801250c:	f100 0514 	add.w	r5, r0, #20
 8012510:	da2b      	bge.n	801256a <rshift+0x66>
 8012512:	f011 011f 	ands.w	r1, r1, #31
 8012516:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 801251a:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 801251e:	d108      	bne.n	8012532 <rshift+0x2e>
 8012520:	4629      	mov	r1, r5
 8012522:	42b2      	cmp	r2, r6
 8012524:	460b      	mov	r3, r1
 8012526:	d210      	bcs.n	801254a <rshift+0x46>
 8012528:	f852 3b04 	ldr.w	r3, [r2], #4
 801252c:	f841 3b04 	str.w	r3, [r1], #4
 8012530:	e7f7      	b.n	8012522 <rshift+0x1e>
 8012532:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 8012536:	f1c1 0e20 	rsb	lr, r1, #32
 801253a:	3204      	adds	r2, #4
 801253c:	40cc      	lsrs	r4, r1
 801253e:	462b      	mov	r3, r5
 8012540:	42b2      	cmp	r2, r6
 8012542:	d308      	bcc.n	8012556 <rshift+0x52>
 8012544:	601c      	str	r4, [r3, #0]
 8012546:	b104      	cbz	r4, 801254a <rshift+0x46>
 8012548:	3304      	adds	r3, #4
 801254a:	1b5b      	subs	r3, r3, r5
 801254c:	109b      	asrs	r3, r3, #2
 801254e:	6103      	str	r3, [r0, #16]
 8012550:	b903      	cbnz	r3, 8012554 <rshift+0x50>
 8012552:	6143      	str	r3, [r0, #20]
 8012554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012556:	6817      	ldr	r7, [r2, #0]
 8012558:	fa07 f70e 	lsl.w	r7, r7, lr
 801255c:	433c      	orrs	r4, r7
 801255e:	f843 4b04 	str.w	r4, [r3], #4
 8012562:	f852 4b04 	ldr.w	r4, [r2], #4
 8012566:	40cc      	lsrs	r4, r1
 8012568:	e7ea      	b.n	8012540 <rshift+0x3c>
 801256a:	462b      	mov	r3, r5
 801256c:	e7ed      	b.n	801254a <rshift+0x46>

0801256e <__hexdig_fun>:
 801256e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012572:	2b09      	cmp	r3, #9
 8012574:	d802      	bhi.n	801257c <__hexdig_fun+0xe>
 8012576:	3820      	subs	r0, #32
 8012578:	b2c0      	uxtb	r0, r0
 801257a:	4770      	bx	lr
 801257c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012580:	2b05      	cmp	r3, #5
 8012582:	d801      	bhi.n	8012588 <__hexdig_fun+0x1a>
 8012584:	3847      	subs	r0, #71	; 0x47
 8012586:	e7f7      	b.n	8012578 <__hexdig_fun+0xa>
 8012588:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801258c:	2b05      	cmp	r3, #5
 801258e:	d801      	bhi.n	8012594 <__hexdig_fun+0x26>
 8012590:	3827      	subs	r0, #39	; 0x27
 8012592:	e7f1      	b.n	8012578 <__hexdig_fun+0xa>
 8012594:	2000      	movs	r0, #0
 8012596:	4770      	bx	lr

08012598 <__gethex>:
 8012598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801259c:	b08b      	sub	sp, #44	; 0x2c
 801259e:	468a      	mov	sl, r1
 80125a0:	9002      	str	r0, [sp, #8]
 80125a2:	9816      	ldr	r0, [sp, #88]	; 0x58
 80125a4:	9306      	str	r3, [sp, #24]
 80125a6:	4690      	mov	r8, r2
 80125a8:	f000 fbe2 	bl	8012d70 <__localeconv_l>
 80125ac:	6803      	ldr	r3, [r0, #0]
 80125ae:	9303      	str	r3, [sp, #12]
 80125b0:	4618      	mov	r0, r3
 80125b2:	f7ed fe17 	bl	80001e4 <strlen>
 80125b6:	9b03      	ldr	r3, [sp, #12]
 80125b8:	9001      	str	r0, [sp, #4]
 80125ba:	4403      	add	r3, r0
 80125bc:	f04f 0b00 	mov.w	fp, #0
 80125c0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80125c4:	9307      	str	r3, [sp, #28]
 80125c6:	f8da 3000 	ldr.w	r3, [sl]
 80125ca:	3302      	adds	r3, #2
 80125cc:	461f      	mov	r7, r3
 80125ce:	f813 0b01 	ldrb.w	r0, [r3], #1
 80125d2:	2830      	cmp	r0, #48	; 0x30
 80125d4:	d06c      	beq.n	80126b0 <__gethex+0x118>
 80125d6:	f7ff ffca 	bl	801256e <__hexdig_fun>
 80125da:	4604      	mov	r4, r0
 80125dc:	2800      	cmp	r0, #0
 80125de:	d16a      	bne.n	80126b6 <__gethex+0x11e>
 80125e0:	9a01      	ldr	r2, [sp, #4]
 80125e2:	9903      	ldr	r1, [sp, #12]
 80125e4:	4638      	mov	r0, r7
 80125e6:	f001 fa50 	bl	8013a8a <strncmp>
 80125ea:	2800      	cmp	r0, #0
 80125ec:	d166      	bne.n	80126bc <__gethex+0x124>
 80125ee:	9b01      	ldr	r3, [sp, #4]
 80125f0:	5cf8      	ldrb	r0, [r7, r3]
 80125f2:	18fe      	adds	r6, r7, r3
 80125f4:	f7ff ffbb 	bl	801256e <__hexdig_fun>
 80125f8:	2800      	cmp	r0, #0
 80125fa:	d062      	beq.n	80126c2 <__gethex+0x12a>
 80125fc:	4633      	mov	r3, r6
 80125fe:	7818      	ldrb	r0, [r3, #0]
 8012600:	2830      	cmp	r0, #48	; 0x30
 8012602:	461f      	mov	r7, r3
 8012604:	f103 0301 	add.w	r3, r3, #1
 8012608:	d0f9      	beq.n	80125fe <__gethex+0x66>
 801260a:	f7ff ffb0 	bl	801256e <__hexdig_fun>
 801260e:	fab0 f580 	clz	r5, r0
 8012612:	096d      	lsrs	r5, r5, #5
 8012614:	4634      	mov	r4, r6
 8012616:	f04f 0b01 	mov.w	fp, #1
 801261a:	463a      	mov	r2, r7
 801261c:	4616      	mov	r6, r2
 801261e:	3201      	adds	r2, #1
 8012620:	7830      	ldrb	r0, [r6, #0]
 8012622:	f7ff ffa4 	bl	801256e <__hexdig_fun>
 8012626:	2800      	cmp	r0, #0
 8012628:	d1f8      	bne.n	801261c <__gethex+0x84>
 801262a:	9a01      	ldr	r2, [sp, #4]
 801262c:	9903      	ldr	r1, [sp, #12]
 801262e:	4630      	mov	r0, r6
 8012630:	f001 fa2b 	bl	8013a8a <strncmp>
 8012634:	b950      	cbnz	r0, 801264c <__gethex+0xb4>
 8012636:	b954      	cbnz	r4, 801264e <__gethex+0xb6>
 8012638:	9b01      	ldr	r3, [sp, #4]
 801263a:	18f4      	adds	r4, r6, r3
 801263c:	4622      	mov	r2, r4
 801263e:	4616      	mov	r6, r2
 8012640:	3201      	adds	r2, #1
 8012642:	7830      	ldrb	r0, [r6, #0]
 8012644:	f7ff ff93 	bl	801256e <__hexdig_fun>
 8012648:	2800      	cmp	r0, #0
 801264a:	d1f8      	bne.n	801263e <__gethex+0xa6>
 801264c:	b10c      	cbz	r4, 8012652 <__gethex+0xba>
 801264e:	1ba4      	subs	r4, r4, r6
 8012650:	00a4      	lsls	r4, r4, #2
 8012652:	7833      	ldrb	r3, [r6, #0]
 8012654:	2b50      	cmp	r3, #80	; 0x50
 8012656:	d001      	beq.n	801265c <__gethex+0xc4>
 8012658:	2b70      	cmp	r3, #112	; 0x70
 801265a:	d140      	bne.n	80126de <__gethex+0x146>
 801265c:	7873      	ldrb	r3, [r6, #1]
 801265e:	2b2b      	cmp	r3, #43	; 0x2b
 8012660:	d035      	beq.n	80126ce <__gethex+0x136>
 8012662:	2b2d      	cmp	r3, #45	; 0x2d
 8012664:	d02f      	beq.n	80126c6 <__gethex+0x12e>
 8012666:	1c71      	adds	r1, r6, #1
 8012668:	f04f 0900 	mov.w	r9, #0
 801266c:	7808      	ldrb	r0, [r1, #0]
 801266e:	f7ff ff7e 	bl	801256e <__hexdig_fun>
 8012672:	1e43      	subs	r3, r0, #1
 8012674:	b2db      	uxtb	r3, r3
 8012676:	2b18      	cmp	r3, #24
 8012678:	d831      	bhi.n	80126de <__gethex+0x146>
 801267a:	f1a0 0210 	sub.w	r2, r0, #16
 801267e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012682:	f7ff ff74 	bl	801256e <__hexdig_fun>
 8012686:	1e43      	subs	r3, r0, #1
 8012688:	b2db      	uxtb	r3, r3
 801268a:	2b18      	cmp	r3, #24
 801268c:	d922      	bls.n	80126d4 <__gethex+0x13c>
 801268e:	f1b9 0f00 	cmp.w	r9, #0
 8012692:	d000      	beq.n	8012696 <__gethex+0xfe>
 8012694:	4252      	negs	r2, r2
 8012696:	4414      	add	r4, r2
 8012698:	f8ca 1000 	str.w	r1, [sl]
 801269c:	b30d      	cbz	r5, 80126e2 <__gethex+0x14a>
 801269e:	f1bb 0f00 	cmp.w	fp, #0
 80126a2:	bf14      	ite	ne
 80126a4:	2700      	movne	r7, #0
 80126a6:	2706      	moveq	r7, #6
 80126a8:	4638      	mov	r0, r7
 80126aa:	b00b      	add	sp, #44	; 0x2c
 80126ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126b0:	f10b 0b01 	add.w	fp, fp, #1
 80126b4:	e78a      	b.n	80125cc <__gethex+0x34>
 80126b6:	2500      	movs	r5, #0
 80126b8:	462c      	mov	r4, r5
 80126ba:	e7ae      	b.n	801261a <__gethex+0x82>
 80126bc:	463e      	mov	r6, r7
 80126be:	2501      	movs	r5, #1
 80126c0:	e7c7      	b.n	8012652 <__gethex+0xba>
 80126c2:	4604      	mov	r4, r0
 80126c4:	e7fb      	b.n	80126be <__gethex+0x126>
 80126c6:	f04f 0901 	mov.w	r9, #1
 80126ca:	1cb1      	adds	r1, r6, #2
 80126cc:	e7ce      	b.n	801266c <__gethex+0xd4>
 80126ce:	f04f 0900 	mov.w	r9, #0
 80126d2:	e7fa      	b.n	80126ca <__gethex+0x132>
 80126d4:	230a      	movs	r3, #10
 80126d6:	fb03 0202 	mla	r2, r3, r2, r0
 80126da:	3a10      	subs	r2, #16
 80126dc:	e7cf      	b.n	801267e <__gethex+0xe6>
 80126de:	4631      	mov	r1, r6
 80126e0:	e7da      	b.n	8012698 <__gethex+0x100>
 80126e2:	1bf3      	subs	r3, r6, r7
 80126e4:	3b01      	subs	r3, #1
 80126e6:	4629      	mov	r1, r5
 80126e8:	2b07      	cmp	r3, #7
 80126ea:	dc49      	bgt.n	8012780 <__gethex+0x1e8>
 80126ec:	9802      	ldr	r0, [sp, #8]
 80126ee:	f000 fbed 	bl	8012ecc <_Balloc>
 80126f2:	9b01      	ldr	r3, [sp, #4]
 80126f4:	f100 0914 	add.w	r9, r0, #20
 80126f8:	f04f 0b00 	mov.w	fp, #0
 80126fc:	f1c3 0301 	rsb	r3, r3, #1
 8012700:	4605      	mov	r5, r0
 8012702:	f8cd 9010 	str.w	r9, [sp, #16]
 8012706:	46da      	mov	sl, fp
 8012708:	9308      	str	r3, [sp, #32]
 801270a:	42b7      	cmp	r7, r6
 801270c:	d33b      	bcc.n	8012786 <__gethex+0x1ee>
 801270e:	9804      	ldr	r0, [sp, #16]
 8012710:	f840 ab04 	str.w	sl, [r0], #4
 8012714:	eba0 0009 	sub.w	r0, r0, r9
 8012718:	1080      	asrs	r0, r0, #2
 801271a:	6128      	str	r0, [r5, #16]
 801271c:	0147      	lsls	r7, r0, #5
 801271e:	4650      	mov	r0, sl
 8012720:	f000 fc98 	bl	8013054 <__hi0bits>
 8012724:	f8d8 6000 	ldr.w	r6, [r8]
 8012728:	1a3f      	subs	r7, r7, r0
 801272a:	42b7      	cmp	r7, r6
 801272c:	dd64      	ble.n	80127f8 <__gethex+0x260>
 801272e:	1bbf      	subs	r7, r7, r6
 8012730:	4639      	mov	r1, r7
 8012732:	4628      	mov	r0, r5
 8012734:	f000 ff91 	bl	801365a <__any_on>
 8012738:	4682      	mov	sl, r0
 801273a:	b178      	cbz	r0, 801275c <__gethex+0x1c4>
 801273c:	1e7b      	subs	r3, r7, #1
 801273e:	1159      	asrs	r1, r3, #5
 8012740:	f003 021f 	and.w	r2, r3, #31
 8012744:	f04f 0a01 	mov.w	sl, #1
 8012748:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801274c:	fa0a f202 	lsl.w	r2, sl, r2
 8012750:	420a      	tst	r2, r1
 8012752:	d003      	beq.n	801275c <__gethex+0x1c4>
 8012754:	4553      	cmp	r3, sl
 8012756:	dc46      	bgt.n	80127e6 <__gethex+0x24e>
 8012758:	f04f 0a02 	mov.w	sl, #2
 801275c:	4639      	mov	r1, r7
 801275e:	4628      	mov	r0, r5
 8012760:	f7ff fed0 	bl	8012504 <rshift>
 8012764:	443c      	add	r4, r7
 8012766:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801276a:	429c      	cmp	r4, r3
 801276c:	dd52      	ble.n	8012814 <__gethex+0x27c>
 801276e:	4629      	mov	r1, r5
 8012770:	9802      	ldr	r0, [sp, #8]
 8012772:	f000 fbdf 	bl	8012f34 <_Bfree>
 8012776:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012778:	2300      	movs	r3, #0
 801277a:	6013      	str	r3, [r2, #0]
 801277c:	27a3      	movs	r7, #163	; 0xa3
 801277e:	e793      	b.n	80126a8 <__gethex+0x110>
 8012780:	3101      	adds	r1, #1
 8012782:	105b      	asrs	r3, r3, #1
 8012784:	e7b0      	b.n	80126e8 <__gethex+0x150>
 8012786:	1e73      	subs	r3, r6, #1
 8012788:	9305      	str	r3, [sp, #20]
 801278a:	9a07      	ldr	r2, [sp, #28]
 801278c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012790:	4293      	cmp	r3, r2
 8012792:	d018      	beq.n	80127c6 <__gethex+0x22e>
 8012794:	f1bb 0f20 	cmp.w	fp, #32
 8012798:	d107      	bne.n	80127aa <__gethex+0x212>
 801279a:	9b04      	ldr	r3, [sp, #16]
 801279c:	f8c3 a000 	str.w	sl, [r3]
 80127a0:	3304      	adds	r3, #4
 80127a2:	f04f 0a00 	mov.w	sl, #0
 80127a6:	9304      	str	r3, [sp, #16]
 80127a8:	46d3      	mov	fp, sl
 80127aa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80127ae:	f7ff fede 	bl	801256e <__hexdig_fun>
 80127b2:	f000 000f 	and.w	r0, r0, #15
 80127b6:	fa00 f00b 	lsl.w	r0, r0, fp
 80127ba:	ea4a 0a00 	orr.w	sl, sl, r0
 80127be:	f10b 0b04 	add.w	fp, fp, #4
 80127c2:	9b05      	ldr	r3, [sp, #20]
 80127c4:	e00d      	b.n	80127e2 <__gethex+0x24a>
 80127c6:	9b05      	ldr	r3, [sp, #20]
 80127c8:	9a08      	ldr	r2, [sp, #32]
 80127ca:	4413      	add	r3, r2
 80127cc:	429f      	cmp	r7, r3
 80127ce:	d8e1      	bhi.n	8012794 <__gethex+0x1fc>
 80127d0:	4618      	mov	r0, r3
 80127d2:	9a01      	ldr	r2, [sp, #4]
 80127d4:	9903      	ldr	r1, [sp, #12]
 80127d6:	9309      	str	r3, [sp, #36]	; 0x24
 80127d8:	f001 f957 	bl	8013a8a <strncmp>
 80127dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127de:	2800      	cmp	r0, #0
 80127e0:	d1d8      	bne.n	8012794 <__gethex+0x1fc>
 80127e2:	461e      	mov	r6, r3
 80127e4:	e791      	b.n	801270a <__gethex+0x172>
 80127e6:	1eb9      	subs	r1, r7, #2
 80127e8:	4628      	mov	r0, r5
 80127ea:	f000 ff36 	bl	801365a <__any_on>
 80127ee:	2800      	cmp	r0, #0
 80127f0:	d0b2      	beq.n	8012758 <__gethex+0x1c0>
 80127f2:	f04f 0a03 	mov.w	sl, #3
 80127f6:	e7b1      	b.n	801275c <__gethex+0x1c4>
 80127f8:	da09      	bge.n	801280e <__gethex+0x276>
 80127fa:	1bf7      	subs	r7, r6, r7
 80127fc:	4629      	mov	r1, r5
 80127fe:	463a      	mov	r2, r7
 8012800:	9802      	ldr	r0, [sp, #8]
 8012802:	f000 fd59 	bl	80132b8 <__lshift>
 8012806:	1be4      	subs	r4, r4, r7
 8012808:	4605      	mov	r5, r0
 801280a:	f100 0914 	add.w	r9, r0, #20
 801280e:	f04f 0a00 	mov.w	sl, #0
 8012812:	e7a8      	b.n	8012766 <__gethex+0x1ce>
 8012814:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012818:	4284      	cmp	r4, r0
 801281a:	da6a      	bge.n	80128f2 <__gethex+0x35a>
 801281c:	1b04      	subs	r4, r0, r4
 801281e:	42a6      	cmp	r6, r4
 8012820:	dc2e      	bgt.n	8012880 <__gethex+0x2e8>
 8012822:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012826:	2b02      	cmp	r3, #2
 8012828:	d022      	beq.n	8012870 <__gethex+0x2d8>
 801282a:	2b03      	cmp	r3, #3
 801282c:	d024      	beq.n	8012878 <__gethex+0x2e0>
 801282e:	2b01      	cmp	r3, #1
 8012830:	d115      	bne.n	801285e <__gethex+0x2c6>
 8012832:	42a6      	cmp	r6, r4
 8012834:	d113      	bne.n	801285e <__gethex+0x2c6>
 8012836:	2e01      	cmp	r6, #1
 8012838:	dc0b      	bgt.n	8012852 <__gethex+0x2ba>
 801283a:	9a06      	ldr	r2, [sp, #24]
 801283c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012840:	6013      	str	r3, [r2, #0]
 8012842:	2301      	movs	r3, #1
 8012844:	612b      	str	r3, [r5, #16]
 8012846:	f8c9 3000 	str.w	r3, [r9]
 801284a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801284c:	2762      	movs	r7, #98	; 0x62
 801284e:	601d      	str	r5, [r3, #0]
 8012850:	e72a      	b.n	80126a8 <__gethex+0x110>
 8012852:	1e71      	subs	r1, r6, #1
 8012854:	4628      	mov	r0, r5
 8012856:	f000 ff00 	bl	801365a <__any_on>
 801285a:	2800      	cmp	r0, #0
 801285c:	d1ed      	bne.n	801283a <__gethex+0x2a2>
 801285e:	4629      	mov	r1, r5
 8012860:	9802      	ldr	r0, [sp, #8]
 8012862:	f000 fb67 	bl	8012f34 <_Bfree>
 8012866:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012868:	2300      	movs	r3, #0
 801286a:	6013      	str	r3, [r2, #0]
 801286c:	2750      	movs	r7, #80	; 0x50
 801286e:	e71b      	b.n	80126a8 <__gethex+0x110>
 8012870:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012872:	2b00      	cmp	r3, #0
 8012874:	d0e1      	beq.n	801283a <__gethex+0x2a2>
 8012876:	e7f2      	b.n	801285e <__gethex+0x2c6>
 8012878:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801287a:	2b00      	cmp	r3, #0
 801287c:	d1dd      	bne.n	801283a <__gethex+0x2a2>
 801287e:	e7ee      	b.n	801285e <__gethex+0x2c6>
 8012880:	1e67      	subs	r7, r4, #1
 8012882:	f1ba 0f00 	cmp.w	sl, #0
 8012886:	d131      	bne.n	80128ec <__gethex+0x354>
 8012888:	b127      	cbz	r7, 8012894 <__gethex+0x2fc>
 801288a:	4639      	mov	r1, r7
 801288c:	4628      	mov	r0, r5
 801288e:	f000 fee4 	bl	801365a <__any_on>
 8012892:	4682      	mov	sl, r0
 8012894:	117a      	asrs	r2, r7, #5
 8012896:	2301      	movs	r3, #1
 8012898:	f007 071f 	and.w	r7, r7, #31
 801289c:	fa03 f707 	lsl.w	r7, r3, r7
 80128a0:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80128a4:	4621      	mov	r1, r4
 80128a6:	421f      	tst	r7, r3
 80128a8:	4628      	mov	r0, r5
 80128aa:	bf18      	it	ne
 80128ac:	f04a 0a02 	orrne.w	sl, sl, #2
 80128b0:	1b36      	subs	r6, r6, r4
 80128b2:	f7ff fe27 	bl	8012504 <rshift>
 80128b6:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80128ba:	2702      	movs	r7, #2
 80128bc:	f1ba 0f00 	cmp.w	sl, #0
 80128c0:	d045      	beq.n	801294e <__gethex+0x3b6>
 80128c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80128c6:	2b02      	cmp	r3, #2
 80128c8:	d015      	beq.n	80128f6 <__gethex+0x35e>
 80128ca:	2b03      	cmp	r3, #3
 80128cc:	d017      	beq.n	80128fe <__gethex+0x366>
 80128ce:	2b01      	cmp	r3, #1
 80128d0:	d109      	bne.n	80128e6 <__gethex+0x34e>
 80128d2:	f01a 0f02 	tst.w	sl, #2
 80128d6:	d006      	beq.n	80128e6 <__gethex+0x34e>
 80128d8:	f8d9 3000 	ldr.w	r3, [r9]
 80128dc:	ea4a 0a03 	orr.w	sl, sl, r3
 80128e0:	f01a 0f01 	tst.w	sl, #1
 80128e4:	d10e      	bne.n	8012904 <__gethex+0x36c>
 80128e6:	f047 0710 	orr.w	r7, r7, #16
 80128ea:	e030      	b.n	801294e <__gethex+0x3b6>
 80128ec:	f04f 0a01 	mov.w	sl, #1
 80128f0:	e7d0      	b.n	8012894 <__gethex+0x2fc>
 80128f2:	2701      	movs	r7, #1
 80128f4:	e7e2      	b.n	80128bc <__gethex+0x324>
 80128f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80128f8:	f1c3 0301 	rsb	r3, r3, #1
 80128fc:	9315      	str	r3, [sp, #84]	; 0x54
 80128fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012900:	2b00      	cmp	r3, #0
 8012902:	d0f0      	beq.n	80128e6 <__gethex+0x34e>
 8012904:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8012908:	f105 0314 	add.w	r3, r5, #20
 801290c:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8012910:	eb03 010a 	add.w	r1, r3, sl
 8012914:	2000      	movs	r0, #0
 8012916:	681a      	ldr	r2, [r3, #0]
 8012918:	f1b2 3fff 	cmp.w	r2, #4294967295
 801291c:	d01c      	beq.n	8012958 <__gethex+0x3c0>
 801291e:	3201      	adds	r2, #1
 8012920:	601a      	str	r2, [r3, #0]
 8012922:	2f02      	cmp	r7, #2
 8012924:	f105 0314 	add.w	r3, r5, #20
 8012928:	d138      	bne.n	801299c <__gethex+0x404>
 801292a:	f8d8 2000 	ldr.w	r2, [r8]
 801292e:	3a01      	subs	r2, #1
 8012930:	4296      	cmp	r6, r2
 8012932:	d10a      	bne.n	801294a <__gethex+0x3b2>
 8012934:	1171      	asrs	r1, r6, #5
 8012936:	2201      	movs	r2, #1
 8012938:	f006 061f 	and.w	r6, r6, #31
 801293c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012940:	fa02 f606 	lsl.w	r6, r2, r6
 8012944:	421e      	tst	r6, r3
 8012946:	bf18      	it	ne
 8012948:	4617      	movne	r7, r2
 801294a:	f047 0720 	orr.w	r7, r7, #32
 801294e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012950:	601d      	str	r5, [r3, #0]
 8012952:	9b06      	ldr	r3, [sp, #24]
 8012954:	601c      	str	r4, [r3, #0]
 8012956:	e6a7      	b.n	80126a8 <__gethex+0x110>
 8012958:	f843 0b04 	str.w	r0, [r3], #4
 801295c:	4299      	cmp	r1, r3
 801295e:	d8da      	bhi.n	8012916 <__gethex+0x37e>
 8012960:	68ab      	ldr	r3, [r5, #8]
 8012962:	4599      	cmp	r9, r3
 8012964:	db12      	blt.n	801298c <__gethex+0x3f4>
 8012966:	6869      	ldr	r1, [r5, #4]
 8012968:	9802      	ldr	r0, [sp, #8]
 801296a:	3101      	adds	r1, #1
 801296c:	f000 faae 	bl	8012ecc <_Balloc>
 8012970:	692a      	ldr	r2, [r5, #16]
 8012972:	3202      	adds	r2, #2
 8012974:	f105 010c 	add.w	r1, r5, #12
 8012978:	4683      	mov	fp, r0
 801297a:	0092      	lsls	r2, r2, #2
 801297c:	300c      	adds	r0, #12
 801297e:	f7fa fce9 	bl	800d354 <memcpy>
 8012982:	4629      	mov	r1, r5
 8012984:	9802      	ldr	r0, [sp, #8]
 8012986:	f000 fad5 	bl	8012f34 <_Bfree>
 801298a:	465d      	mov	r5, fp
 801298c:	692b      	ldr	r3, [r5, #16]
 801298e:	1c5a      	adds	r2, r3, #1
 8012990:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8012994:	612a      	str	r2, [r5, #16]
 8012996:	2201      	movs	r2, #1
 8012998:	615a      	str	r2, [r3, #20]
 801299a:	e7c2      	b.n	8012922 <__gethex+0x38a>
 801299c:	692a      	ldr	r2, [r5, #16]
 801299e:	4591      	cmp	r9, r2
 80129a0:	da0b      	bge.n	80129ba <__gethex+0x422>
 80129a2:	2101      	movs	r1, #1
 80129a4:	4628      	mov	r0, r5
 80129a6:	f7ff fdad 	bl	8012504 <rshift>
 80129aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80129ae:	3401      	adds	r4, #1
 80129b0:	429c      	cmp	r4, r3
 80129b2:	f73f aedc 	bgt.w	801276e <__gethex+0x1d6>
 80129b6:	2701      	movs	r7, #1
 80129b8:	e7c7      	b.n	801294a <__gethex+0x3b2>
 80129ba:	f016 061f 	ands.w	r6, r6, #31
 80129be:	d0fa      	beq.n	80129b6 <__gethex+0x41e>
 80129c0:	449a      	add	sl, r3
 80129c2:	f1c6 0620 	rsb	r6, r6, #32
 80129c6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80129ca:	f000 fb43 	bl	8013054 <__hi0bits>
 80129ce:	42b0      	cmp	r0, r6
 80129d0:	dbe7      	blt.n	80129a2 <__gethex+0x40a>
 80129d2:	e7f0      	b.n	80129b6 <__gethex+0x41e>

080129d4 <L_shift>:
 80129d4:	f1c2 0208 	rsb	r2, r2, #8
 80129d8:	0092      	lsls	r2, r2, #2
 80129da:	b570      	push	{r4, r5, r6, lr}
 80129dc:	f1c2 0620 	rsb	r6, r2, #32
 80129e0:	6843      	ldr	r3, [r0, #4]
 80129e2:	6804      	ldr	r4, [r0, #0]
 80129e4:	fa03 f506 	lsl.w	r5, r3, r6
 80129e8:	432c      	orrs	r4, r5
 80129ea:	40d3      	lsrs	r3, r2
 80129ec:	6004      	str	r4, [r0, #0]
 80129ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80129f2:	4288      	cmp	r0, r1
 80129f4:	d3f4      	bcc.n	80129e0 <L_shift+0xc>
 80129f6:	bd70      	pop	{r4, r5, r6, pc}

080129f8 <__match>:
 80129f8:	b530      	push	{r4, r5, lr}
 80129fa:	6803      	ldr	r3, [r0, #0]
 80129fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012a00:	3301      	adds	r3, #1
 8012a02:	b914      	cbnz	r4, 8012a0a <__match+0x12>
 8012a04:	6003      	str	r3, [r0, #0]
 8012a06:	2001      	movs	r0, #1
 8012a08:	bd30      	pop	{r4, r5, pc}
 8012a0a:	781a      	ldrb	r2, [r3, #0]
 8012a0c:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012a10:	2d19      	cmp	r5, #25
 8012a12:	bf98      	it	ls
 8012a14:	3220      	addls	r2, #32
 8012a16:	42a2      	cmp	r2, r4
 8012a18:	d0f0      	beq.n	80129fc <__match+0x4>
 8012a1a:	2000      	movs	r0, #0
 8012a1c:	bd30      	pop	{r4, r5, pc}

08012a1e <__hexnan>:
 8012a1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a22:	680b      	ldr	r3, [r1, #0]
 8012a24:	6801      	ldr	r1, [r0, #0]
 8012a26:	115f      	asrs	r7, r3, #5
 8012a28:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8012a2c:	f013 031f 	ands.w	r3, r3, #31
 8012a30:	b087      	sub	sp, #28
 8012a32:	bf18      	it	ne
 8012a34:	3704      	addne	r7, #4
 8012a36:	2500      	movs	r5, #0
 8012a38:	1f3e      	subs	r6, r7, #4
 8012a3a:	4682      	mov	sl, r0
 8012a3c:	4690      	mov	r8, r2
 8012a3e:	9302      	str	r3, [sp, #8]
 8012a40:	f847 5c04 	str.w	r5, [r7, #-4]
 8012a44:	46b1      	mov	r9, r6
 8012a46:	4634      	mov	r4, r6
 8012a48:	9501      	str	r5, [sp, #4]
 8012a4a:	46ab      	mov	fp, r5
 8012a4c:	784a      	ldrb	r2, [r1, #1]
 8012a4e:	1c4b      	adds	r3, r1, #1
 8012a50:	9303      	str	r3, [sp, #12]
 8012a52:	b342      	cbz	r2, 8012aa6 <__hexnan+0x88>
 8012a54:	4610      	mov	r0, r2
 8012a56:	9105      	str	r1, [sp, #20]
 8012a58:	9204      	str	r2, [sp, #16]
 8012a5a:	f7ff fd88 	bl	801256e <__hexdig_fun>
 8012a5e:	2800      	cmp	r0, #0
 8012a60:	d143      	bne.n	8012aea <__hexnan+0xcc>
 8012a62:	9a04      	ldr	r2, [sp, #16]
 8012a64:	9905      	ldr	r1, [sp, #20]
 8012a66:	2a20      	cmp	r2, #32
 8012a68:	d818      	bhi.n	8012a9c <__hexnan+0x7e>
 8012a6a:	9b01      	ldr	r3, [sp, #4]
 8012a6c:	459b      	cmp	fp, r3
 8012a6e:	dd13      	ble.n	8012a98 <__hexnan+0x7a>
 8012a70:	454c      	cmp	r4, r9
 8012a72:	d206      	bcs.n	8012a82 <__hexnan+0x64>
 8012a74:	2d07      	cmp	r5, #7
 8012a76:	dc04      	bgt.n	8012a82 <__hexnan+0x64>
 8012a78:	462a      	mov	r2, r5
 8012a7a:	4649      	mov	r1, r9
 8012a7c:	4620      	mov	r0, r4
 8012a7e:	f7ff ffa9 	bl	80129d4 <L_shift>
 8012a82:	4544      	cmp	r4, r8
 8012a84:	d944      	bls.n	8012b10 <__hexnan+0xf2>
 8012a86:	2300      	movs	r3, #0
 8012a88:	f1a4 0904 	sub.w	r9, r4, #4
 8012a8c:	f844 3c04 	str.w	r3, [r4, #-4]
 8012a90:	f8cd b004 	str.w	fp, [sp, #4]
 8012a94:	464c      	mov	r4, r9
 8012a96:	461d      	mov	r5, r3
 8012a98:	9903      	ldr	r1, [sp, #12]
 8012a9a:	e7d7      	b.n	8012a4c <__hexnan+0x2e>
 8012a9c:	2a29      	cmp	r2, #41	; 0x29
 8012a9e:	d14a      	bne.n	8012b36 <__hexnan+0x118>
 8012aa0:	3102      	adds	r1, #2
 8012aa2:	f8ca 1000 	str.w	r1, [sl]
 8012aa6:	f1bb 0f00 	cmp.w	fp, #0
 8012aaa:	d044      	beq.n	8012b36 <__hexnan+0x118>
 8012aac:	454c      	cmp	r4, r9
 8012aae:	d206      	bcs.n	8012abe <__hexnan+0xa0>
 8012ab0:	2d07      	cmp	r5, #7
 8012ab2:	dc04      	bgt.n	8012abe <__hexnan+0xa0>
 8012ab4:	462a      	mov	r2, r5
 8012ab6:	4649      	mov	r1, r9
 8012ab8:	4620      	mov	r0, r4
 8012aba:	f7ff ff8b 	bl	80129d4 <L_shift>
 8012abe:	4544      	cmp	r4, r8
 8012ac0:	d928      	bls.n	8012b14 <__hexnan+0xf6>
 8012ac2:	4643      	mov	r3, r8
 8012ac4:	f854 2b04 	ldr.w	r2, [r4], #4
 8012ac8:	f843 2b04 	str.w	r2, [r3], #4
 8012acc:	42a6      	cmp	r6, r4
 8012ace:	d2f9      	bcs.n	8012ac4 <__hexnan+0xa6>
 8012ad0:	2200      	movs	r2, #0
 8012ad2:	f843 2b04 	str.w	r2, [r3], #4
 8012ad6:	429e      	cmp	r6, r3
 8012ad8:	d2fb      	bcs.n	8012ad2 <__hexnan+0xb4>
 8012ada:	6833      	ldr	r3, [r6, #0]
 8012adc:	b91b      	cbnz	r3, 8012ae6 <__hexnan+0xc8>
 8012ade:	4546      	cmp	r6, r8
 8012ae0:	d127      	bne.n	8012b32 <__hexnan+0x114>
 8012ae2:	2301      	movs	r3, #1
 8012ae4:	6033      	str	r3, [r6, #0]
 8012ae6:	2005      	movs	r0, #5
 8012ae8:	e026      	b.n	8012b38 <__hexnan+0x11a>
 8012aea:	3501      	adds	r5, #1
 8012aec:	2d08      	cmp	r5, #8
 8012aee:	f10b 0b01 	add.w	fp, fp, #1
 8012af2:	dd06      	ble.n	8012b02 <__hexnan+0xe4>
 8012af4:	4544      	cmp	r4, r8
 8012af6:	d9cf      	bls.n	8012a98 <__hexnan+0x7a>
 8012af8:	2300      	movs	r3, #0
 8012afa:	f844 3c04 	str.w	r3, [r4, #-4]
 8012afe:	2501      	movs	r5, #1
 8012b00:	3c04      	subs	r4, #4
 8012b02:	6822      	ldr	r2, [r4, #0]
 8012b04:	f000 000f 	and.w	r0, r0, #15
 8012b08:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012b0c:	6020      	str	r0, [r4, #0]
 8012b0e:	e7c3      	b.n	8012a98 <__hexnan+0x7a>
 8012b10:	2508      	movs	r5, #8
 8012b12:	e7c1      	b.n	8012a98 <__hexnan+0x7a>
 8012b14:	9b02      	ldr	r3, [sp, #8]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d0df      	beq.n	8012ada <__hexnan+0xbc>
 8012b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8012b1e:	f1c3 0320 	rsb	r3, r3, #32
 8012b22:	fa22 f303 	lsr.w	r3, r2, r3
 8012b26:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8012b2a:	401a      	ands	r2, r3
 8012b2c:	f847 2c04 	str.w	r2, [r7, #-4]
 8012b30:	e7d3      	b.n	8012ada <__hexnan+0xbc>
 8012b32:	3e04      	subs	r6, #4
 8012b34:	e7d1      	b.n	8012ada <__hexnan+0xbc>
 8012b36:	2004      	movs	r0, #4
 8012b38:	b007      	add	sp, #28
 8012b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08012b40 <_findenv_r>:
 8012b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b44:	4606      	mov	r6, r0
 8012b46:	468a      	mov	sl, r1
 8012b48:	4617      	mov	r7, r2
 8012b4a:	f001 fdbd 	bl	80146c8 <__env_lock>
 8012b4e:	4b1b      	ldr	r3, [pc, #108]	; (8012bbc <_findenv_r+0x7c>)
 8012b50:	f8d3 8000 	ldr.w	r8, [r3]
 8012b54:	4699      	mov	r9, r3
 8012b56:	f1b8 0f00 	cmp.w	r8, #0
 8012b5a:	d007      	beq.n	8012b6c <_findenv_r+0x2c>
 8012b5c:	4654      	mov	r4, sl
 8012b5e:	4623      	mov	r3, r4
 8012b60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012b64:	b332      	cbz	r2, 8012bb4 <_findenv_r+0x74>
 8012b66:	2a3d      	cmp	r2, #61	; 0x3d
 8012b68:	461c      	mov	r4, r3
 8012b6a:	d1f8      	bne.n	8012b5e <_findenv_r+0x1e>
 8012b6c:	4630      	mov	r0, r6
 8012b6e:	f001 fdb1 	bl	80146d4 <__env_unlock>
 8012b72:	2000      	movs	r0, #0
 8012b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b78:	f108 0804 	add.w	r8, r8, #4
 8012b7c:	f8d8 0000 	ldr.w	r0, [r8]
 8012b80:	2800      	cmp	r0, #0
 8012b82:	d0f3      	beq.n	8012b6c <_findenv_r+0x2c>
 8012b84:	4622      	mov	r2, r4
 8012b86:	4651      	mov	r1, sl
 8012b88:	f000 ff7f 	bl	8013a8a <strncmp>
 8012b8c:	2800      	cmp	r0, #0
 8012b8e:	d1f3      	bne.n	8012b78 <_findenv_r+0x38>
 8012b90:	f8d8 3000 	ldr.w	r3, [r8]
 8012b94:	191d      	adds	r5, r3, r4
 8012b96:	5d1b      	ldrb	r3, [r3, r4]
 8012b98:	2b3d      	cmp	r3, #61	; 0x3d
 8012b9a:	d1ed      	bne.n	8012b78 <_findenv_r+0x38>
 8012b9c:	f8d9 3000 	ldr.w	r3, [r9]
 8012ba0:	eba8 0303 	sub.w	r3, r8, r3
 8012ba4:	109b      	asrs	r3, r3, #2
 8012ba6:	4630      	mov	r0, r6
 8012ba8:	603b      	str	r3, [r7, #0]
 8012baa:	f001 fd93 	bl	80146d4 <__env_unlock>
 8012bae:	1c68      	adds	r0, r5, #1
 8012bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bb4:	eba4 040a 	sub.w	r4, r4, sl
 8012bb8:	e7e0      	b.n	8012b7c <_findenv_r+0x3c>
 8012bba:	bf00      	nop
 8012bbc:	2000000c 	.word	0x2000000c

08012bc0 <_getenv_r>:
 8012bc0:	b507      	push	{r0, r1, r2, lr}
 8012bc2:	aa01      	add	r2, sp, #4
 8012bc4:	f7ff ffbc 	bl	8012b40 <_findenv_r>
 8012bc8:	b003      	add	sp, #12
 8012bca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08012bd0 <_gettimeofday_r>:
 8012bd0:	b538      	push	{r3, r4, r5, lr}
 8012bd2:	4c07      	ldr	r4, [pc, #28]	; (8012bf0 <_gettimeofday_r+0x20>)
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	4605      	mov	r5, r0
 8012bd8:	4608      	mov	r0, r1
 8012bda:	4611      	mov	r1, r2
 8012bdc:	6023      	str	r3, [r4, #0]
 8012bde:	f002 f8f3 	bl	8014dc8 <_gettimeofday>
 8012be2:	1c43      	adds	r3, r0, #1
 8012be4:	d102      	bne.n	8012bec <_gettimeofday_r+0x1c>
 8012be6:	6823      	ldr	r3, [r4, #0]
 8012be8:	b103      	cbz	r3, 8012bec <_gettimeofday_r+0x1c>
 8012bea:	602b      	str	r3, [r5, #0]
 8012bec:	bd38      	pop	{r3, r4, r5, pc}
 8012bee:	bf00      	nop
 8012bf0:	200037e8 	.word	0x200037e8

08012bf4 <__gettzinfo>:
 8012bf4:	4800      	ldr	r0, [pc, #0]	; (8012bf8 <__gettzinfo+0x4>)
 8012bf6:	4770      	bx	lr
 8012bf8:	20000520 	.word	0x20000520

08012bfc <gmtime_r>:
 8012bfc:	6802      	ldr	r2, [r0, #0]
 8012bfe:	4848      	ldr	r0, [pc, #288]	; (8012d20 <gmtime_r+0x124>)
 8012c00:	fb92 f3f0 	sdiv	r3, r2, r0
 8012c04:	fb00 2013 	mls	r0, r0, r3, r2
 8012c08:	2800      	cmp	r0, #0
 8012c0a:	bfb8      	it	lt
 8012c0c:	f500 30a8 	addlt.w	r0, r0, #86016	; 0x15000
 8012c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c12:	bfb8      	it	lt
 8012c14:	f500 70c0 	addlt.w	r0, r0, #384	; 0x180
 8012c18:	f44f 6461 	mov.w	r4, #3600	; 0xe10
 8012c1c:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 8012c20:	fb90 f2f4 	sdiv	r2, r0, r4
 8012c24:	fb04 0012 	mls	r0, r4, r2, r0
 8012c28:	f04f 043c 	mov.w	r4, #60	; 0x3c
 8012c2c:	bfac      	ite	ge
 8012c2e:	f603 236c 	addwge	r3, r3, #2668	; 0xa6c
 8012c32:	f603 236b 	addwlt	r3, r3, #2667	; 0xa6b
 8012c36:	608a      	str	r2, [r1, #8]
 8012c38:	fb90 f2f4 	sdiv	r2, r0, r4
 8012c3c:	fb04 0012 	mls	r0, r4, r2, r0
 8012c40:	604a      	str	r2, [r1, #4]
 8012c42:	6008      	str	r0, [r1, #0]
 8012c44:	2207      	movs	r2, #7
 8012c46:	1cd8      	adds	r0, r3, #3
 8012c48:	fb90 f2f2 	sdiv	r2, r0, r2
 8012c4c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8012c50:	1a82      	subs	r2, r0, r2
 8012c52:	618a      	str	r2, [r1, #24]
 8012c54:	4a33      	ldr	r2, [pc, #204]	; (8012d24 <gmtime_r+0x128>)
 8012c56:	4c34      	ldr	r4, [pc, #208]	; (8012d28 <gmtime_r+0x12c>)
 8012c58:	fb93 f4f4 	sdiv	r4, r3, r4
 8012c5c:	fb02 3304 	mla	r3, r2, r4, r3
 8012c60:	f648 60ac 	movw	r0, #36524	; 0x8eac
 8012c64:	fbb3 f0f0 	udiv	r0, r3, r0
 8012c68:	4418      	add	r0, r3
 8012c6a:	f240 57b4 	movw	r7, #1460	; 0x5b4
 8012c6e:	fbb3 f2f7 	udiv	r2, r3, r7
 8012c72:	1a80      	subs	r0, r0, r2
 8012c74:	4a2d      	ldr	r2, [pc, #180]	; (8012d2c <gmtime_r+0x130>)
 8012c76:	fbb3 f2f2 	udiv	r2, r3, r2
 8012c7a:	1a82      	subs	r2, r0, r2
 8012c7c:	f648 6094 	movw	r0, #36500	; 0x8e94
 8012c80:	fbb2 f0f0 	udiv	r0, r2, r0
 8012c84:	4403      	add	r3, r0
 8012c86:	f240 166d 	movw	r6, #365	; 0x16d
 8012c8a:	fbb2 f5f6 	udiv	r5, r2, r6
 8012c8e:	fbb2 f2f7 	udiv	r2, r2, r7
 8012c92:	1a9a      	subs	r2, r3, r2
 8012c94:	fb06 2315 	mls	r3, r6, r5, r2
 8012c98:	2099      	movs	r0, #153	; 0x99
 8012c9a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8012c9e:	1c5e      	adds	r6, r3, #1
 8012ca0:	3202      	adds	r2, #2
 8012ca2:	fbb2 f2f0 	udiv	r2, r2, r0
 8012ca6:	2a0a      	cmp	r2, #10
 8012ca8:	fb00 f002 	mul.w	r0, r0, r2
 8012cac:	f100 0002 	add.w	r0, r0, #2
 8012cb0:	f04f 0705 	mov.w	r7, #5
 8012cb4:	fbb0 f0f7 	udiv	r0, r0, r7
 8012cb8:	eba6 0000 	sub.w	r0, r6, r0
 8012cbc:	bf34      	ite	cc
 8012cbe:	2602      	movcc	r6, #2
 8012cc0:	f06f 0609 	mvncs.w	r6, #9
 8012cc4:	4416      	add	r6, r2
 8012cc6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8012cca:	fb02 5404 	mla	r4, r2, r4, r5
 8012cce:	2e01      	cmp	r6, #1
 8012cd0:	bf98      	it	ls
 8012cd2:	3401      	addls	r4, #1
 8012cd4:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8012cd8:	d30b      	bcc.n	8012cf2 <gmtime_r+0xf6>
 8012cda:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8012cde:	61cb      	str	r3, [r1, #28]
 8012ce0:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	60c8      	str	r0, [r1, #12]
 8012ce8:	614c      	str	r4, [r1, #20]
 8012cea:	610e      	str	r6, [r1, #16]
 8012cec:	620b      	str	r3, [r1, #32]
 8012cee:	4608      	mov	r0, r1
 8012cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012cf2:	07aa      	lsls	r2, r5, #30
 8012cf4:	d105      	bne.n	8012d02 <gmtime_r+0x106>
 8012cf6:	2764      	movs	r7, #100	; 0x64
 8012cf8:	fbb5 f2f7 	udiv	r2, r5, r7
 8012cfc:	fb07 5212 	mls	r2, r7, r2, r5
 8012d00:	b95a      	cbnz	r2, 8012d1a <gmtime_r+0x11e>
 8012d02:	f44f 77c8 	mov.w	r7, #400	; 0x190
 8012d06:	fbb5 f2f7 	udiv	r2, r5, r7
 8012d0a:	fb07 5212 	mls	r2, r7, r2, r5
 8012d0e:	fab2 f282 	clz	r2, r2
 8012d12:	0952      	lsrs	r2, r2, #5
 8012d14:	333b      	adds	r3, #59	; 0x3b
 8012d16:	4413      	add	r3, r2
 8012d18:	e7e1      	b.n	8012cde <gmtime_r+0xe2>
 8012d1a:	2201      	movs	r2, #1
 8012d1c:	e7fa      	b.n	8012d14 <gmtime_r+0x118>
 8012d1e:	bf00      	nop
 8012d20:	00015180 	.word	0x00015180
 8012d24:	fffdc54f 	.word	0xfffdc54f
 8012d28:	00023ab1 	.word	0x00023ab1
 8012d2c:	00023ab0 	.word	0x00023ab0

08012d30 <__locale_mb_cur_max>:
 8012d30:	4b04      	ldr	r3, [pc, #16]	; (8012d44 <__locale_mb_cur_max+0x14>)
 8012d32:	4a05      	ldr	r2, [pc, #20]	; (8012d48 <__locale_mb_cur_max+0x18>)
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	6a1b      	ldr	r3, [r3, #32]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	bf08      	it	eq
 8012d3c:	4613      	moveq	r3, r2
 8012d3e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8012d42:	4770      	bx	lr
 8012d44:	20000014 	.word	0x20000014
 8012d48:	20000560 	.word	0x20000560

08012d4c <__locale_ctype_ptr_l>:
 8012d4c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8012d50:	4770      	bx	lr
	...

08012d54 <__locale_ctype_ptr>:
 8012d54:	4b04      	ldr	r3, [pc, #16]	; (8012d68 <__locale_ctype_ptr+0x14>)
 8012d56:	4a05      	ldr	r2, [pc, #20]	; (8012d6c <__locale_ctype_ptr+0x18>)
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	6a1b      	ldr	r3, [r3, #32]
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	bf08      	it	eq
 8012d60:	4613      	moveq	r3, r2
 8012d62:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8012d66:	4770      	bx	lr
 8012d68:	20000014 	.word	0x20000014
 8012d6c:	20000560 	.word	0x20000560

08012d70 <__localeconv_l>:
 8012d70:	30f0      	adds	r0, #240	; 0xf0
 8012d72:	4770      	bx	lr

08012d74 <_localeconv_r>:
 8012d74:	4b04      	ldr	r3, [pc, #16]	; (8012d88 <_localeconv_r+0x14>)
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	6a18      	ldr	r0, [r3, #32]
 8012d7a:	4b04      	ldr	r3, [pc, #16]	; (8012d8c <_localeconv_r+0x18>)
 8012d7c:	2800      	cmp	r0, #0
 8012d7e:	bf08      	it	eq
 8012d80:	4618      	moveq	r0, r3
 8012d82:	30f0      	adds	r0, #240	; 0xf0
 8012d84:	4770      	bx	lr
 8012d86:	bf00      	nop
 8012d88:	20000014 	.word	0x20000014
 8012d8c:	20000560 	.word	0x20000560

08012d90 <__retarget_lock_init_recursive>:
 8012d90:	4770      	bx	lr

08012d92 <__retarget_lock_close_recursive>:
 8012d92:	4770      	bx	lr

08012d94 <__retarget_lock_acquire>:
 8012d94:	4770      	bx	lr

08012d96 <__retarget_lock_acquire_recursive>:
 8012d96:	4770      	bx	lr

08012d98 <__retarget_lock_release>:
 8012d98:	4770      	bx	lr

08012d9a <__retarget_lock_release_recursive>:
 8012d9a:	4770      	bx	lr

08012d9c <__swhatbuf_r>:
 8012d9c:	b570      	push	{r4, r5, r6, lr}
 8012d9e:	460e      	mov	r6, r1
 8012da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012da4:	2900      	cmp	r1, #0
 8012da6:	b090      	sub	sp, #64	; 0x40
 8012da8:	4614      	mov	r4, r2
 8012daa:	461d      	mov	r5, r3
 8012dac:	da09      	bge.n	8012dc2 <__swhatbuf_r+0x26>
 8012dae:	89b3      	ldrh	r3, [r6, #12]
 8012db0:	2200      	movs	r2, #0
 8012db2:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012db6:	602a      	str	r2, [r5, #0]
 8012db8:	d116      	bne.n	8012de8 <__swhatbuf_r+0x4c>
 8012dba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012dbe:	6023      	str	r3, [r4, #0]
 8012dc0:	e015      	b.n	8012dee <__swhatbuf_r+0x52>
 8012dc2:	aa01      	add	r2, sp, #4
 8012dc4:	f001 fd62 	bl	801488c <_fstat_r>
 8012dc8:	2800      	cmp	r0, #0
 8012dca:	dbf0      	blt.n	8012dae <__swhatbuf_r+0x12>
 8012dcc:	9a02      	ldr	r2, [sp, #8]
 8012dce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012dd2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012dd6:	425a      	negs	r2, r3
 8012dd8:	415a      	adcs	r2, r3
 8012dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012dde:	602a      	str	r2, [r5, #0]
 8012de0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012de4:	6023      	str	r3, [r4, #0]
 8012de6:	e002      	b.n	8012dee <__swhatbuf_r+0x52>
 8012de8:	2340      	movs	r3, #64	; 0x40
 8012dea:	6023      	str	r3, [r4, #0]
 8012dec:	4610      	mov	r0, r2
 8012dee:	b010      	add	sp, #64	; 0x40
 8012df0:	bd70      	pop	{r4, r5, r6, pc}
	...

08012df4 <__smakebuf_r>:
 8012df4:	898b      	ldrh	r3, [r1, #12]
 8012df6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012df8:	079d      	lsls	r5, r3, #30
 8012dfa:	4606      	mov	r6, r0
 8012dfc:	460c      	mov	r4, r1
 8012dfe:	d507      	bpl.n	8012e10 <__smakebuf_r+0x1c>
 8012e00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012e04:	6023      	str	r3, [r4, #0]
 8012e06:	6123      	str	r3, [r4, #16]
 8012e08:	2301      	movs	r3, #1
 8012e0a:	6163      	str	r3, [r4, #20]
 8012e0c:	b002      	add	sp, #8
 8012e0e:	bd70      	pop	{r4, r5, r6, pc}
 8012e10:	ab01      	add	r3, sp, #4
 8012e12:	466a      	mov	r2, sp
 8012e14:	f7ff ffc2 	bl	8012d9c <__swhatbuf_r>
 8012e18:	9900      	ldr	r1, [sp, #0]
 8012e1a:	4605      	mov	r5, r0
 8012e1c:	4630      	mov	r0, r6
 8012e1e:	f7fa f88b 	bl	800cf38 <_malloc_r>
 8012e22:	b948      	cbnz	r0, 8012e38 <__smakebuf_r+0x44>
 8012e24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e28:	059a      	lsls	r2, r3, #22
 8012e2a:	d4ef      	bmi.n	8012e0c <__smakebuf_r+0x18>
 8012e2c:	f023 0303 	bic.w	r3, r3, #3
 8012e30:	f043 0302 	orr.w	r3, r3, #2
 8012e34:	81a3      	strh	r3, [r4, #12]
 8012e36:	e7e3      	b.n	8012e00 <__smakebuf_r+0xc>
 8012e38:	4b0d      	ldr	r3, [pc, #52]	; (8012e70 <__smakebuf_r+0x7c>)
 8012e3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8012e3c:	89a3      	ldrh	r3, [r4, #12]
 8012e3e:	6020      	str	r0, [r4, #0]
 8012e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e44:	81a3      	strh	r3, [r4, #12]
 8012e46:	9b00      	ldr	r3, [sp, #0]
 8012e48:	6163      	str	r3, [r4, #20]
 8012e4a:	9b01      	ldr	r3, [sp, #4]
 8012e4c:	6120      	str	r0, [r4, #16]
 8012e4e:	b15b      	cbz	r3, 8012e68 <__smakebuf_r+0x74>
 8012e50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e54:	4630      	mov	r0, r6
 8012e56:	f001 fd2b 	bl	80148b0 <_isatty_r>
 8012e5a:	b128      	cbz	r0, 8012e68 <__smakebuf_r+0x74>
 8012e5c:	89a3      	ldrh	r3, [r4, #12]
 8012e5e:	f023 0303 	bic.w	r3, r3, #3
 8012e62:	f043 0301 	orr.w	r3, r3, #1
 8012e66:	81a3      	strh	r3, [r4, #12]
 8012e68:	89a3      	ldrh	r3, [r4, #12]
 8012e6a:	431d      	orrs	r5, r3
 8012e6c:	81a5      	strh	r5, [r4, #12]
 8012e6e:	e7cd      	b.n	8012e0c <__smakebuf_r+0x18>
 8012e70:	08011e59 	.word	0x08011e59

08012e74 <__ascii_mbtowc>:
 8012e74:	b082      	sub	sp, #8
 8012e76:	b901      	cbnz	r1, 8012e7a <__ascii_mbtowc+0x6>
 8012e78:	a901      	add	r1, sp, #4
 8012e7a:	b142      	cbz	r2, 8012e8e <__ascii_mbtowc+0x1a>
 8012e7c:	b14b      	cbz	r3, 8012e92 <__ascii_mbtowc+0x1e>
 8012e7e:	7813      	ldrb	r3, [r2, #0]
 8012e80:	600b      	str	r3, [r1, #0]
 8012e82:	7812      	ldrb	r2, [r2, #0]
 8012e84:	1c10      	adds	r0, r2, #0
 8012e86:	bf18      	it	ne
 8012e88:	2001      	movne	r0, #1
 8012e8a:	b002      	add	sp, #8
 8012e8c:	4770      	bx	lr
 8012e8e:	4610      	mov	r0, r2
 8012e90:	e7fb      	b.n	8012e8a <__ascii_mbtowc+0x16>
 8012e92:	f06f 0001 	mvn.w	r0, #1
 8012e96:	e7f8      	b.n	8012e8a <__ascii_mbtowc+0x16>

08012e98 <memmove>:
 8012e98:	4288      	cmp	r0, r1
 8012e9a:	b510      	push	{r4, lr}
 8012e9c:	eb01 0302 	add.w	r3, r1, r2
 8012ea0:	d803      	bhi.n	8012eaa <memmove+0x12>
 8012ea2:	1e42      	subs	r2, r0, #1
 8012ea4:	4299      	cmp	r1, r3
 8012ea6:	d10c      	bne.n	8012ec2 <memmove+0x2a>
 8012ea8:	bd10      	pop	{r4, pc}
 8012eaa:	4298      	cmp	r0, r3
 8012eac:	d2f9      	bcs.n	8012ea2 <memmove+0xa>
 8012eae:	1881      	adds	r1, r0, r2
 8012eb0:	1ad2      	subs	r2, r2, r3
 8012eb2:	42d3      	cmn	r3, r2
 8012eb4:	d100      	bne.n	8012eb8 <memmove+0x20>
 8012eb6:	bd10      	pop	{r4, pc}
 8012eb8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012ebc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8012ec0:	e7f7      	b.n	8012eb2 <memmove+0x1a>
 8012ec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012ec6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012eca:	e7eb      	b.n	8012ea4 <memmove+0xc>

08012ecc <_Balloc>:
 8012ecc:	b570      	push	{r4, r5, r6, lr}
 8012ece:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012ed0:	4604      	mov	r4, r0
 8012ed2:	460e      	mov	r6, r1
 8012ed4:	b93d      	cbnz	r5, 8012ee6 <_Balloc+0x1a>
 8012ed6:	2010      	movs	r0, #16
 8012ed8:	f7fa f81e 	bl	800cf18 <malloc>
 8012edc:	6260      	str	r0, [r4, #36]	; 0x24
 8012ede:	6045      	str	r5, [r0, #4]
 8012ee0:	6085      	str	r5, [r0, #8]
 8012ee2:	6005      	str	r5, [r0, #0]
 8012ee4:	60c5      	str	r5, [r0, #12]
 8012ee6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8012ee8:	68eb      	ldr	r3, [r5, #12]
 8012eea:	b183      	cbz	r3, 8012f0e <_Balloc+0x42>
 8012eec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012eee:	68db      	ldr	r3, [r3, #12]
 8012ef0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012ef4:	b9b8      	cbnz	r0, 8012f26 <_Balloc+0x5a>
 8012ef6:	2101      	movs	r1, #1
 8012ef8:	fa01 f506 	lsl.w	r5, r1, r6
 8012efc:	1d6a      	adds	r2, r5, #5
 8012efe:	0092      	lsls	r2, r2, #2
 8012f00:	4620      	mov	r0, r4
 8012f02:	f001 fba3 	bl	801464c <_calloc_r>
 8012f06:	b160      	cbz	r0, 8012f22 <_Balloc+0x56>
 8012f08:	6046      	str	r6, [r0, #4]
 8012f0a:	6085      	str	r5, [r0, #8]
 8012f0c:	e00e      	b.n	8012f2c <_Balloc+0x60>
 8012f0e:	2221      	movs	r2, #33	; 0x21
 8012f10:	2104      	movs	r1, #4
 8012f12:	4620      	mov	r0, r4
 8012f14:	f001 fb9a 	bl	801464c <_calloc_r>
 8012f18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012f1a:	60e8      	str	r0, [r5, #12]
 8012f1c:	68db      	ldr	r3, [r3, #12]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d1e4      	bne.n	8012eec <_Balloc+0x20>
 8012f22:	2000      	movs	r0, #0
 8012f24:	bd70      	pop	{r4, r5, r6, pc}
 8012f26:	6802      	ldr	r2, [r0, #0]
 8012f28:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	6103      	str	r3, [r0, #16]
 8012f30:	60c3      	str	r3, [r0, #12]
 8012f32:	bd70      	pop	{r4, r5, r6, pc}

08012f34 <_Bfree>:
 8012f34:	b570      	push	{r4, r5, r6, lr}
 8012f36:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8012f38:	4606      	mov	r6, r0
 8012f3a:	460d      	mov	r5, r1
 8012f3c:	b93c      	cbnz	r4, 8012f4e <_Bfree+0x1a>
 8012f3e:	2010      	movs	r0, #16
 8012f40:	f7f9 ffea 	bl	800cf18 <malloc>
 8012f44:	6270      	str	r0, [r6, #36]	; 0x24
 8012f46:	6044      	str	r4, [r0, #4]
 8012f48:	6084      	str	r4, [r0, #8]
 8012f4a:	6004      	str	r4, [r0, #0]
 8012f4c:	60c4      	str	r4, [r0, #12]
 8012f4e:	b13d      	cbz	r5, 8012f60 <_Bfree+0x2c>
 8012f50:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012f52:	686a      	ldr	r2, [r5, #4]
 8012f54:	68db      	ldr	r3, [r3, #12]
 8012f56:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012f5a:	6029      	str	r1, [r5, #0]
 8012f5c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8012f60:	bd70      	pop	{r4, r5, r6, pc}

08012f62 <__multadd>:
 8012f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f66:	690d      	ldr	r5, [r1, #16]
 8012f68:	461f      	mov	r7, r3
 8012f6a:	4606      	mov	r6, r0
 8012f6c:	460c      	mov	r4, r1
 8012f6e:	f101 0e14 	add.w	lr, r1, #20
 8012f72:	2300      	movs	r3, #0
 8012f74:	f8de 0000 	ldr.w	r0, [lr]
 8012f78:	b281      	uxth	r1, r0
 8012f7a:	fb02 7101 	mla	r1, r2, r1, r7
 8012f7e:	0c0f      	lsrs	r7, r1, #16
 8012f80:	0c00      	lsrs	r0, r0, #16
 8012f82:	fb02 7000 	mla	r0, r2, r0, r7
 8012f86:	b289      	uxth	r1, r1
 8012f88:	3301      	adds	r3, #1
 8012f8a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8012f8e:	429d      	cmp	r5, r3
 8012f90:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8012f94:	f84e 1b04 	str.w	r1, [lr], #4
 8012f98:	dcec      	bgt.n	8012f74 <__multadd+0x12>
 8012f9a:	b1d7      	cbz	r7, 8012fd2 <__multadd+0x70>
 8012f9c:	68a3      	ldr	r3, [r4, #8]
 8012f9e:	429d      	cmp	r5, r3
 8012fa0:	db12      	blt.n	8012fc8 <__multadd+0x66>
 8012fa2:	6861      	ldr	r1, [r4, #4]
 8012fa4:	4630      	mov	r0, r6
 8012fa6:	3101      	adds	r1, #1
 8012fa8:	f7ff ff90 	bl	8012ecc <_Balloc>
 8012fac:	6922      	ldr	r2, [r4, #16]
 8012fae:	3202      	adds	r2, #2
 8012fb0:	f104 010c 	add.w	r1, r4, #12
 8012fb4:	4680      	mov	r8, r0
 8012fb6:	0092      	lsls	r2, r2, #2
 8012fb8:	300c      	adds	r0, #12
 8012fba:	f7fa f9cb 	bl	800d354 <memcpy>
 8012fbe:	4621      	mov	r1, r4
 8012fc0:	4630      	mov	r0, r6
 8012fc2:	f7ff ffb7 	bl	8012f34 <_Bfree>
 8012fc6:	4644      	mov	r4, r8
 8012fc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012fcc:	3501      	adds	r5, #1
 8012fce:	615f      	str	r7, [r3, #20]
 8012fd0:	6125      	str	r5, [r4, #16]
 8012fd2:	4620      	mov	r0, r4
 8012fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012fd8 <__s2b>:
 8012fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fdc:	460c      	mov	r4, r1
 8012fde:	4615      	mov	r5, r2
 8012fe0:	461f      	mov	r7, r3
 8012fe2:	2209      	movs	r2, #9
 8012fe4:	3308      	adds	r3, #8
 8012fe6:	4606      	mov	r6, r0
 8012fe8:	fb93 f3f2 	sdiv	r3, r3, r2
 8012fec:	2100      	movs	r1, #0
 8012fee:	2201      	movs	r2, #1
 8012ff0:	429a      	cmp	r2, r3
 8012ff2:	db20      	blt.n	8013036 <__s2b+0x5e>
 8012ff4:	4630      	mov	r0, r6
 8012ff6:	f7ff ff69 	bl	8012ecc <_Balloc>
 8012ffa:	9b08      	ldr	r3, [sp, #32]
 8012ffc:	6143      	str	r3, [r0, #20]
 8012ffe:	2d09      	cmp	r5, #9
 8013000:	f04f 0301 	mov.w	r3, #1
 8013004:	6103      	str	r3, [r0, #16]
 8013006:	dd19      	ble.n	801303c <__s2b+0x64>
 8013008:	f104 0909 	add.w	r9, r4, #9
 801300c:	46c8      	mov	r8, r9
 801300e:	442c      	add	r4, r5
 8013010:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013014:	4601      	mov	r1, r0
 8013016:	3b30      	subs	r3, #48	; 0x30
 8013018:	220a      	movs	r2, #10
 801301a:	4630      	mov	r0, r6
 801301c:	f7ff ffa1 	bl	8012f62 <__multadd>
 8013020:	45a0      	cmp	r8, r4
 8013022:	d1f5      	bne.n	8013010 <__s2b+0x38>
 8013024:	f1a5 0408 	sub.w	r4, r5, #8
 8013028:	444c      	add	r4, r9
 801302a:	1b2d      	subs	r5, r5, r4
 801302c:	1963      	adds	r3, r4, r5
 801302e:	42bb      	cmp	r3, r7
 8013030:	db07      	blt.n	8013042 <__s2b+0x6a>
 8013032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013036:	0052      	lsls	r2, r2, #1
 8013038:	3101      	adds	r1, #1
 801303a:	e7d9      	b.n	8012ff0 <__s2b+0x18>
 801303c:	340a      	adds	r4, #10
 801303e:	2509      	movs	r5, #9
 8013040:	e7f3      	b.n	801302a <__s2b+0x52>
 8013042:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013046:	4601      	mov	r1, r0
 8013048:	3b30      	subs	r3, #48	; 0x30
 801304a:	220a      	movs	r2, #10
 801304c:	4630      	mov	r0, r6
 801304e:	f7ff ff88 	bl	8012f62 <__multadd>
 8013052:	e7eb      	b.n	801302c <__s2b+0x54>

08013054 <__hi0bits>:
 8013054:	0c02      	lsrs	r2, r0, #16
 8013056:	0412      	lsls	r2, r2, #16
 8013058:	4603      	mov	r3, r0
 801305a:	b9b2      	cbnz	r2, 801308a <__hi0bits+0x36>
 801305c:	0403      	lsls	r3, r0, #16
 801305e:	2010      	movs	r0, #16
 8013060:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013064:	bf04      	itt	eq
 8013066:	021b      	lsleq	r3, r3, #8
 8013068:	3008      	addeq	r0, #8
 801306a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801306e:	bf04      	itt	eq
 8013070:	011b      	lsleq	r3, r3, #4
 8013072:	3004      	addeq	r0, #4
 8013074:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013078:	bf04      	itt	eq
 801307a:	009b      	lsleq	r3, r3, #2
 801307c:	3002      	addeq	r0, #2
 801307e:	2b00      	cmp	r3, #0
 8013080:	db06      	blt.n	8013090 <__hi0bits+0x3c>
 8013082:	005b      	lsls	r3, r3, #1
 8013084:	d503      	bpl.n	801308e <__hi0bits+0x3a>
 8013086:	3001      	adds	r0, #1
 8013088:	4770      	bx	lr
 801308a:	2000      	movs	r0, #0
 801308c:	e7e8      	b.n	8013060 <__hi0bits+0xc>
 801308e:	2020      	movs	r0, #32
 8013090:	4770      	bx	lr

08013092 <__lo0bits>:
 8013092:	6803      	ldr	r3, [r0, #0]
 8013094:	f013 0207 	ands.w	r2, r3, #7
 8013098:	4601      	mov	r1, r0
 801309a:	d00b      	beq.n	80130b4 <__lo0bits+0x22>
 801309c:	07da      	lsls	r2, r3, #31
 801309e:	d423      	bmi.n	80130e8 <__lo0bits+0x56>
 80130a0:	0798      	lsls	r0, r3, #30
 80130a2:	bf49      	itett	mi
 80130a4:	085b      	lsrmi	r3, r3, #1
 80130a6:	089b      	lsrpl	r3, r3, #2
 80130a8:	2001      	movmi	r0, #1
 80130aa:	600b      	strmi	r3, [r1, #0]
 80130ac:	bf5c      	itt	pl
 80130ae:	600b      	strpl	r3, [r1, #0]
 80130b0:	2002      	movpl	r0, #2
 80130b2:	4770      	bx	lr
 80130b4:	b298      	uxth	r0, r3
 80130b6:	b9a8      	cbnz	r0, 80130e4 <__lo0bits+0x52>
 80130b8:	0c1b      	lsrs	r3, r3, #16
 80130ba:	2010      	movs	r0, #16
 80130bc:	f013 0fff 	tst.w	r3, #255	; 0xff
 80130c0:	bf04      	itt	eq
 80130c2:	0a1b      	lsreq	r3, r3, #8
 80130c4:	3008      	addeq	r0, #8
 80130c6:	071a      	lsls	r2, r3, #28
 80130c8:	bf04      	itt	eq
 80130ca:	091b      	lsreq	r3, r3, #4
 80130cc:	3004      	addeq	r0, #4
 80130ce:	079a      	lsls	r2, r3, #30
 80130d0:	bf04      	itt	eq
 80130d2:	089b      	lsreq	r3, r3, #2
 80130d4:	3002      	addeq	r0, #2
 80130d6:	07da      	lsls	r2, r3, #31
 80130d8:	d402      	bmi.n	80130e0 <__lo0bits+0x4e>
 80130da:	085b      	lsrs	r3, r3, #1
 80130dc:	d006      	beq.n	80130ec <__lo0bits+0x5a>
 80130de:	3001      	adds	r0, #1
 80130e0:	600b      	str	r3, [r1, #0]
 80130e2:	4770      	bx	lr
 80130e4:	4610      	mov	r0, r2
 80130e6:	e7e9      	b.n	80130bc <__lo0bits+0x2a>
 80130e8:	2000      	movs	r0, #0
 80130ea:	4770      	bx	lr
 80130ec:	2020      	movs	r0, #32
 80130ee:	4770      	bx	lr

080130f0 <__i2b>:
 80130f0:	b510      	push	{r4, lr}
 80130f2:	460c      	mov	r4, r1
 80130f4:	2101      	movs	r1, #1
 80130f6:	f7ff fee9 	bl	8012ecc <_Balloc>
 80130fa:	2201      	movs	r2, #1
 80130fc:	6144      	str	r4, [r0, #20]
 80130fe:	6102      	str	r2, [r0, #16]
 8013100:	bd10      	pop	{r4, pc}

08013102 <__multiply>:
 8013102:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013106:	4614      	mov	r4, r2
 8013108:	690a      	ldr	r2, [r1, #16]
 801310a:	6923      	ldr	r3, [r4, #16]
 801310c:	429a      	cmp	r2, r3
 801310e:	bfb8      	it	lt
 8013110:	460b      	movlt	r3, r1
 8013112:	4689      	mov	r9, r1
 8013114:	bfbc      	itt	lt
 8013116:	46a1      	movlt	r9, r4
 8013118:	461c      	movlt	r4, r3
 801311a:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801311e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013122:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013126:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801312a:	eb07 060a 	add.w	r6, r7, sl
 801312e:	429e      	cmp	r6, r3
 8013130:	bfc8      	it	gt
 8013132:	3101      	addgt	r1, #1
 8013134:	f7ff feca 	bl	8012ecc <_Balloc>
 8013138:	f100 0514 	add.w	r5, r0, #20
 801313c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013140:	462b      	mov	r3, r5
 8013142:	2200      	movs	r2, #0
 8013144:	4543      	cmp	r3, r8
 8013146:	d316      	bcc.n	8013176 <__multiply+0x74>
 8013148:	f104 0214 	add.w	r2, r4, #20
 801314c:	f109 0114 	add.w	r1, r9, #20
 8013150:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8013154:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8013158:	9301      	str	r3, [sp, #4]
 801315a:	9c01      	ldr	r4, [sp, #4]
 801315c:	4294      	cmp	r4, r2
 801315e:	4613      	mov	r3, r2
 8013160:	d80c      	bhi.n	801317c <__multiply+0x7a>
 8013162:	2e00      	cmp	r6, #0
 8013164:	dd03      	ble.n	801316e <__multiply+0x6c>
 8013166:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801316a:	2b00      	cmp	r3, #0
 801316c:	d054      	beq.n	8013218 <__multiply+0x116>
 801316e:	6106      	str	r6, [r0, #16]
 8013170:	b003      	add	sp, #12
 8013172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013176:	f843 2b04 	str.w	r2, [r3], #4
 801317a:	e7e3      	b.n	8013144 <__multiply+0x42>
 801317c:	f8b3 a000 	ldrh.w	sl, [r3]
 8013180:	3204      	adds	r2, #4
 8013182:	f1ba 0f00 	cmp.w	sl, #0
 8013186:	d020      	beq.n	80131ca <__multiply+0xc8>
 8013188:	46ae      	mov	lr, r5
 801318a:	4689      	mov	r9, r1
 801318c:	f04f 0c00 	mov.w	ip, #0
 8013190:	f859 4b04 	ldr.w	r4, [r9], #4
 8013194:	f8be b000 	ldrh.w	fp, [lr]
 8013198:	b2a3      	uxth	r3, r4
 801319a:	fb0a b303 	mla	r3, sl, r3, fp
 801319e:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80131a2:	f8de 4000 	ldr.w	r4, [lr]
 80131a6:	4463      	add	r3, ip
 80131a8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80131ac:	fb0a c40b 	mla	r4, sl, fp, ip
 80131b0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80131b4:	b29b      	uxth	r3, r3
 80131b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80131ba:	454f      	cmp	r7, r9
 80131bc:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80131c0:	f84e 3b04 	str.w	r3, [lr], #4
 80131c4:	d8e4      	bhi.n	8013190 <__multiply+0x8e>
 80131c6:	f8ce c000 	str.w	ip, [lr]
 80131ca:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 80131ce:	f1b9 0f00 	cmp.w	r9, #0
 80131d2:	d01f      	beq.n	8013214 <__multiply+0x112>
 80131d4:	682b      	ldr	r3, [r5, #0]
 80131d6:	46ae      	mov	lr, r5
 80131d8:	468c      	mov	ip, r1
 80131da:	f04f 0a00 	mov.w	sl, #0
 80131de:	f8bc 4000 	ldrh.w	r4, [ip]
 80131e2:	f8be b002 	ldrh.w	fp, [lr, #2]
 80131e6:	fb09 b404 	mla	r4, r9, r4, fp
 80131ea:	44a2      	add	sl, r4
 80131ec:	b29b      	uxth	r3, r3
 80131ee:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80131f2:	f84e 3b04 	str.w	r3, [lr], #4
 80131f6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80131fa:	f8be 4000 	ldrh.w	r4, [lr]
 80131fe:	0c1b      	lsrs	r3, r3, #16
 8013200:	fb09 4303 	mla	r3, r9, r3, r4
 8013204:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8013208:	4567      	cmp	r7, ip
 801320a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801320e:	d8e6      	bhi.n	80131de <__multiply+0xdc>
 8013210:	f8ce 3000 	str.w	r3, [lr]
 8013214:	3504      	adds	r5, #4
 8013216:	e7a0      	b.n	801315a <__multiply+0x58>
 8013218:	3e01      	subs	r6, #1
 801321a:	e7a2      	b.n	8013162 <__multiply+0x60>

0801321c <__pow5mult>:
 801321c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013220:	4615      	mov	r5, r2
 8013222:	f012 0203 	ands.w	r2, r2, #3
 8013226:	4606      	mov	r6, r0
 8013228:	460f      	mov	r7, r1
 801322a:	d007      	beq.n	801323c <__pow5mult+0x20>
 801322c:	3a01      	subs	r2, #1
 801322e:	4c21      	ldr	r4, [pc, #132]	; (80132b4 <__pow5mult+0x98>)
 8013230:	2300      	movs	r3, #0
 8013232:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013236:	f7ff fe94 	bl	8012f62 <__multadd>
 801323a:	4607      	mov	r7, r0
 801323c:	10ad      	asrs	r5, r5, #2
 801323e:	d035      	beq.n	80132ac <__pow5mult+0x90>
 8013240:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013242:	b93c      	cbnz	r4, 8013254 <__pow5mult+0x38>
 8013244:	2010      	movs	r0, #16
 8013246:	f7f9 fe67 	bl	800cf18 <malloc>
 801324a:	6270      	str	r0, [r6, #36]	; 0x24
 801324c:	6044      	str	r4, [r0, #4]
 801324e:	6084      	str	r4, [r0, #8]
 8013250:	6004      	str	r4, [r0, #0]
 8013252:	60c4      	str	r4, [r0, #12]
 8013254:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013258:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801325c:	b94c      	cbnz	r4, 8013272 <__pow5mult+0x56>
 801325e:	f240 2171 	movw	r1, #625	; 0x271
 8013262:	4630      	mov	r0, r6
 8013264:	f7ff ff44 	bl	80130f0 <__i2b>
 8013268:	2300      	movs	r3, #0
 801326a:	f8c8 0008 	str.w	r0, [r8, #8]
 801326e:	4604      	mov	r4, r0
 8013270:	6003      	str	r3, [r0, #0]
 8013272:	f04f 0800 	mov.w	r8, #0
 8013276:	07eb      	lsls	r3, r5, #31
 8013278:	d50a      	bpl.n	8013290 <__pow5mult+0x74>
 801327a:	4639      	mov	r1, r7
 801327c:	4622      	mov	r2, r4
 801327e:	4630      	mov	r0, r6
 8013280:	f7ff ff3f 	bl	8013102 <__multiply>
 8013284:	4639      	mov	r1, r7
 8013286:	4681      	mov	r9, r0
 8013288:	4630      	mov	r0, r6
 801328a:	f7ff fe53 	bl	8012f34 <_Bfree>
 801328e:	464f      	mov	r7, r9
 8013290:	106d      	asrs	r5, r5, #1
 8013292:	d00b      	beq.n	80132ac <__pow5mult+0x90>
 8013294:	6820      	ldr	r0, [r4, #0]
 8013296:	b938      	cbnz	r0, 80132a8 <__pow5mult+0x8c>
 8013298:	4622      	mov	r2, r4
 801329a:	4621      	mov	r1, r4
 801329c:	4630      	mov	r0, r6
 801329e:	f7ff ff30 	bl	8013102 <__multiply>
 80132a2:	6020      	str	r0, [r4, #0]
 80132a4:	f8c0 8000 	str.w	r8, [r0]
 80132a8:	4604      	mov	r4, r0
 80132aa:	e7e4      	b.n	8013276 <__pow5mult+0x5a>
 80132ac:	4638      	mov	r0, r7
 80132ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132b2:	bf00      	nop
 80132b4:	08015768 	.word	0x08015768

080132b8 <__lshift>:
 80132b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132bc:	460c      	mov	r4, r1
 80132be:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80132c2:	6923      	ldr	r3, [r4, #16]
 80132c4:	6849      	ldr	r1, [r1, #4]
 80132c6:	eb0a 0903 	add.w	r9, sl, r3
 80132ca:	68a3      	ldr	r3, [r4, #8]
 80132cc:	4607      	mov	r7, r0
 80132ce:	4616      	mov	r6, r2
 80132d0:	f109 0501 	add.w	r5, r9, #1
 80132d4:	42ab      	cmp	r3, r5
 80132d6:	db31      	blt.n	801333c <__lshift+0x84>
 80132d8:	4638      	mov	r0, r7
 80132da:	f7ff fdf7 	bl	8012ecc <_Balloc>
 80132de:	2200      	movs	r2, #0
 80132e0:	4680      	mov	r8, r0
 80132e2:	f100 0314 	add.w	r3, r0, #20
 80132e6:	4611      	mov	r1, r2
 80132e8:	4552      	cmp	r2, sl
 80132ea:	db2a      	blt.n	8013342 <__lshift+0x8a>
 80132ec:	6920      	ldr	r0, [r4, #16]
 80132ee:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80132f2:	f104 0114 	add.w	r1, r4, #20
 80132f6:	f016 021f 	ands.w	r2, r6, #31
 80132fa:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80132fe:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8013302:	d022      	beq.n	801334a <__lshift+0x92>
 8013304:	f1c2 0c20 	rsb	ip, r2, #32
 8013308:	2000      	movs	r0, #0
 801330a:	680e      	ldr	r6, [r1, #0]
 801330c:	4096      	lsls	r6, r2
 801330e:	4330      	orrs	r0, r6
 8013310:	f843 0b04 	str.w	r0, [r3], #4
 8013314:	f851 0b04 	ldr.w	r0, [r1], #4
 8013318:	458e      	cmp	lr, r1
 801331a:	fa20 f00c 	lsr.w	r0, r0, ip
 801331e:	d8f4      	bhi.n	801330a <__lshift+0x52>
 8013320:	6018      	str	r0, [r3, #0]
 8013322:	b108      	cbz	r0, 8013328 <__lshift+0x70>
 8013324:	f109 0502 	add.w	r5, r9, #2
 8013328:	3d01      	subs	r5, #1
 801332a:	4638      	mov	r0, r7
 801332c:	f8c8 5010 	str.w	r5, [r8, #16]
 8013330:	4621      	mov	r1, r4
 8013332:	f7ff fdff 	bl	8012f34 <_Bfree>
 8013336:	4640      	mov	r0, r8
 8013338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801333c:	3101      	adds	r1, #1
 801333e:	005b      	lsls	r3, r3, #1
 8013340:	e7c8      	b.n	80132d4 <__lshift+0x1c>
 8013342:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8013346:	3201      	adds	r2, #1
 8013348:	e7ce      	b.n	80132e8 <__lshift+0x30>
 801334a:	3b04      	subs	r3, #4
 801334c:	f851 2b04 	ldr.w	r2, [r1], #4
 8013350:	f843 2f04 	str.w	r2, [r3, #4]!
 8013354:	458e      	cmp	lr, r1
 8013356:	d8f9      	bhi.n	801334c <__lshift+0x94>
 8013358:	e7e6      	b.n	8013328 <__lshift+0x70>

0801335a <__mcmp>:
 801335a:	6903      	ldr	r3, [r0, #16]
 801335c:	690a      	ldr	r2, [r1, #16]
 801335e:	1a9b      	subs	r3, r3, r2
 8013360:	b530      	push	{r4, r5, lr}
 8013362:	d10c      	bne.n	801337e <__mcmp+0x24>
 8013364:	0092      	lsls	r2, r2, #2
 8013366:	3014      	adds	r0, #20
 8013368:	3114      	adds	r1, #20
 801336a:	1884      	adds	r4, r0, r2
 801336c:	4411      	add	r1, r2
 801336e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013372:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013376:	4295      	cmp	r5, r2
 8013378:	d003      	beq.n	8013382 <__mcmp+0x28>
 801337a:	d305      	bcc.n	8013388 <__mcmp+0x2e>
 801337c:	2301      	movs	r3, #1
 801337e:	4618      	mov	r0, r3
 8013380:	bd30      	pop	{r4, r5, pc}
 8013382:	42a0      	cmp	r0, r4
 8013384:	d3f3      	bcc.n	801336e <__mcmp+0x14>
 8013386:	e7fa      	b.n	801337e <__mcmp+0x24>
 8013388:	f04f 33ff 	mov.w	r3, #4294967295
 801338c:	e7f7      	b.n	801337e <__mcmp+0x24>

0801338e <__mdiff>:
 801338e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013392:	460d      	mov	r5, r1
 8013394:	4607      	mov	r7, r0
 8013396:	4611      	mov	r1, r2
 8013398:	4628      	mov	r0, r5
 801339a:	4614      	mov	r4, r2
 801339c:	f7ff ffdd 	bl	801335a <__mcmp>
 80133a0:	1e06      	subs	r6, r0, #0
 80133a2:	d108      	bne.n	80133b6 <__mdiff+0x28>
 80133a4:	4631      	mov	r1, r6
 80133a6:	4638      	mov	r0, r7
 80133a8:	f7ff fd90 	bl	8012ecc <_Balloc>
 80133ac:	2301      	movs	r3, #1
 80133ae:	6103      	str	r3, [r0, #16]
 80133b0:	6146      	str	r6, [r0, #20]
 80133b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133b6:	bfa4      	itt	ge
 80133b8:	4623      	movge	r3, r4
 80133ba:	462c      	movge	r4, r5
 80133bc:	4638      	mov	r0, r7
 80133be:	6861      	ldr	r1, [r4, #4]
 80133c0:	bfa6      	itte	ge
 80133c2:	461d      	movge	r5, r3
 80133c4:	2600      	movge	r6, #0
 80133c6:	2601      	movlt	r6, #1
 80133c8:	f7ff fd80 	bl	8012ecc <_Balloc>
 80133cc:	692b      	ldr	r3, [r5, #16]
 80133ce:	60c6      	str	r6, [r0, #12]
 80133d0:	6926      	ldr	r6, [r4, #16]
 80133d2:	f105 0914 	add.w	r9, r5, #20
 80133d6:	f104 0214 	add.w	r2, r4, #20
 80133da:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80133de:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80133e2:	f100 0514 	add.w	r5, r0, #20
 80133e6:	f04f 0c00 	mov.w	ip, #0
 80133ea:	f852 ab04 	ldr.w	sl, [r2], #4
 80133ee:	f859 4b04 	ldr.w	r4, [r9], #4
 80133f2:	fa1c f18a 	uxtah	r1, ip, sl
 80133f6:	b2a3      	uxth	r3, r4
 80133f8:	1ac9      	subs	r1, r1, r3
 80133fa:	0c23      	lsrs	r3, r4, #16
 80133fc:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8013400:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8013404:	b289      	uxth	r1, r1
 8013406:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801340a:	45c8      	cmp	r8, r9
 801340c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8013410:	4696      	mov	lr, r2
 8013412:	f845 3b04 	str.w	r3, [r5], #4
 8013416:	d8e8      	bhi.n	80133ea <__mdiff+0x5c>
 8013418:	45be      	cmp	lr, r7
 801341a:	d305      	bcc.n	8013428 <__mdiff+0x9a>
 801341c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8013420:	b18b      	cbz	r3, 8013446 <__mdiff+0xb8>
 8013422:	6106      	str	r6, [r0, #16]
 8013424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013428:	f85e 1b04 	ldr.w	r1, [lr], #4
 801342c:	fa1c f381 	uxtah	r3, ip, r1
 8013430:	141a      	asrs	r2, r3, #16
 8013432:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013436:	b29b      	uxth	r3, r3
 8013438:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801343c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013440:	f845 3b04 	str.w	r3, [r5], #4
 8013444:	e7e8      	b.n	8013418 <__mdiff+0x8a>
 8013446:	3e01      	subs	r6, #1
 8013448:	e7e8      	b.n	801341c <__mdiff+0x8e>
	...

0801344c <__ulp>:
 801344c:	4b10      	ldr	r3, [pc, #64]	; (8013490 <__ulp+0x44>)
 801344e:	400b      	ands	r3, r1
 8013450:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8013454:	2b00      	cmp	r3, #0
 8013456:	dd02      	ble.n	801345e <__ulp+0x12>
 8013458:	2000      	movs	r0, #0
 801345a:	4619      	mov	r1, r3
 801345c:	4770      	bx	lr
 801345e:	425b      	negs	r3, r3
 8013460:	151b      	asrs	r3, r3, #20
 8013462:	2b13      	cmp	r3, #19
 8013464:	f04f 0000 	mov.w	r0, #0
 8013468:	f04f 0100 	mov.w	r1, #0
 801346c:	dc04      	bgt.n	8013478 <__ulp+0x2c>
 801346e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8013472:	fa42 f103 	asr.w	r1, r2, r3
 8013476:	4770      	bx	lr
 8013478:	3b14      	subs	r3, #20
 801347a:	2b1e      	cmp	r3, #30
 801347c:	f04f 0201 	mov.w	r2, #1
 8013480:	bfda      	itte	le
 8013482:	f1c3 031f 	rsble	r3, r3, #31
 8013486:	fa02 f303 	lslle.w	r3, r2, r3
 801348a:	4613      	movgt	r3, r2
 801348c:	4618      	mov	r0, r3
 801348e:	4770      	bx	lr
 8013490:	7ff00000 	.word	0x7ff00000

08013494 <__b2d>:
 8013494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013498:	6907      	ldr	r7, [r0, #16]
 801349a:	f100 0914 	add.w	r9, r0, #20
 801349e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80134a2:	f1a7 0804 	sub.w	r8, r7, #4
 80134a6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80134aa:	4630      	mov	r0, r6
 80134ac:	f7ff fdd2 	bl	8013054 <__hi0bits>
 80134b0:	f1c0 0320 	rsb	r3, r0, #32
 80134b4:	280a      	cmp	r0, #10
 80134b6:	600b      	str	r3, [r1, #0]
 80134b8:	491e      	ldr	r1, [pc, #120]	; (8013534 <__b2d+0xa0>)
 80134ba:	dc17      	bgt.n	80134ec <__b2d+0x58>
 80134bc:	f1c0 0e0b 	rsb	lr, r0, #11
 80134c0:	45c1      	cmp	r9, r8
 80134c2:	fa26 f30e 	lsr.w	r3, r6, lr
 80134c6:	bf38      	it	cc
 80134c8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80134cc:	ea43 0501 	orr.w	r5, r3, r1
 80134d0:	bf28      	it	cs
 80134d2:	2200      	movcs	r2, #0
 80134d4:	f100 0315 	add.w	r3, r0, #21
 80134d8:	fa06 f303 	lsl.w	r3, r6, r3
 80134dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80134e0:	ea43 0402 	orr.w	r4, r3, r2
 80134e4:	4620      	mov	r0, r4
 80134e6:	4629      	mov	r1, r5
 80134e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134ec:	45c1      	cmp	r9, r8
 80134ee:	bf3a      	itte	cc
 80134f0:	f1a7 0808 	subcc.w	r8, r7, #8
 80134f4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80134f8:	2200      	movcs	r2, #0
 80134fa:	f1b0 030b 	subs.w	r3, r0, #11
 80134fe:	d015      	beq.n	801352c <__b2d+0x98>
 8013500:	409e      	lsls	r6, r3
 8013502:	f1c3 0720 	rsb	r7, r3, #32
 8013506:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 801350a:	fa22 f107 	lsr.w	r1, r2, r7
 801350e:	45c8      	cmp	r8, r9
 8013510:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8013514:	ea46 0501 	orr.w	r5, r6, r1
 8013518:	bf8c      	ite	hi
 801351a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 801351e:	2100      	movls	r1, #0
 8013520:	fa02 f003 	lsl.w	r0, r2, r3
 8013524:	40f9      	lsrs	r1, r7
 8013526:	ea40 0401 	orr.w	r4, r0, r1
 801352a:	e7db      	b.n	80134e4 <__b2d+0x50>
 801352c:	ea46 0501 	orr.w	r5, r6, r1
 8013530:	4614      	mov	r4, r2
 8013532:	e7d7      	b.n	80134e4 <__b2d+0x50>
 8013534:	3ff00000 	.word	0x3ff00000

08013538 <__d2b>:
 8013538:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801353c:	2101      	movs	r1, #1
 801353e:	461c      	mov	r4, r3
 8013540:	4690      	mov	r8, r2
 8013542:	9e08      	ldr	r6, [sp, #32]
 8013544:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8013546:	f7ff fcc1 	bl	8012ecc <_Balloc>
 801354a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 801354e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8013552:	4607      	mov	r7, r0
 8013554:	bb34      	cbnz	r4, 80135a4 <__d2b+0x6c>
 8013556:	9201      	str	r2, [sp, #4]
 8013558:	f1b8 0f00 	cmp.w	r8, #0
 801355c:	d027      	beq.n	80135ae <__d2b+0x76>
 801355e:	a802      	add	r0, sp, #8
 8013560:	f840 8d08 	str.w	r8, [r0, #-8]!
 8013564:	f7ff fd95 	bl	8013092 <__lo0bits>
 8013568:	9900      	ldr	r1, [sp, #0]
 801356a:	b1f0      	cbz	r0, 80135aa <__d2b+0x72>
 801356c:	9a01      	ldr	r2, [sp, #4]
 801356e:	f1c0 0320 	rsb	r3, r0, #32
 8013572:	fa02 f303 	lsl.w	r3, r2, r3
 8013576:	430b      	orrs	r3, r1
 8013578:	40c2      	lsrs	r2, r0
 801357a:	617b      	str	r3, [r7, #20]
 801357c:	9201      	str	r2, [sp, #4]
 801357e:	9b01      	ldr	r3, [sp, #4]
 8013580:	61bb      	str	r3, [r7, #24]
 8013582:	2b00      	cmp	r3, #0
 8013584:	bf14      	ite	ne
 8013586:	2102      	movne	r1, #2
 8013588:	2101      	moveq	r1, #1
 801358a:	6139      	str	r1, [r7, #16]
 801358c:	b1c4      	cbz	r4, 80135c0 <__d2b+0x88>
 801358e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8013592:	4404      	add	r4, r0
 8013594:	6034      	str	r4, [r6, #0]
 8013596:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801359a:	6028      	str	r0, [r5, #0]
 801359c:	4638      	mov	r0, r7
 801359e:	b002      	add	sp, #8
 80135a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135a4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80135a8:	e7d5      	b.n	8013556 <__d2b+0x1e>
 80135aa:	6179      	str	r1, [r7, #20]
 80135ac:	e7e7      	b.n	801357e <__d2b+0x46>
 80135ae:	a801      	add	r0, sp, #4
 80135b0:	f7ff fd6f 	bl	8013092 <__lo0bits>
 80135b4:	9b01      	ldr	r3, [sp, #4]
 80135b6:	617b      	str	r3, [r7, #20]
 80135b8:	2101      	movs	r1, #1
 80135ba:	6139      	str	r1, [r7, #16]
 80135bc:	3020      	adds	r0, #32
 80135be:	e7e5      	b.n	801358c <__d2b+0x54>
 80135c0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80135c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80135c8:	6030      	str	r0, [r6, #0]
 80135ca:	6918      	ldr	r0, [r3, #16]
 80135cc:	f7ff fd42 	bl	8013054 <__hi0bits>
 80135d0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80135d4:	e7e1      	b.n	801359a <__d2b+0x62>

080135d6 <__ratio>:
 80135d6:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80135da:	4688      	mov	r8, r1
 80135dc:	4669      	mov	r1, sp
 80135de:	4681      	mov	r9, r0
 80135e0:	f7ff ff58 	bl	8013494 <__b2d>
 80135e4:	460d      	mov	r5, r1
 80135e6:	4604      	mov	r4, r0
 80135e8:	a901      	add	r1, sp, #4
 80135ea:	4640      	mov	r0, r8
 80135ec:	f7ff ff52 	bl	8013494 <__b2d>
 80135f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80135f4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80135f8:	9e00      	ldr	r6, [sp, #0]
 80135fa:	1a9a      	subs	r2, r3, r2
 80135fc:	9b01      	ldr	r3, [sp, #4]
 80135fe:	1af3      	subs	r3, r6, r3
 8013600:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8013604:	2b00      	cmp	r3, #0
 8013606:	bfd6      	itet	le
 8013608:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801360c:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 8013610:	eb01 5103 	addle.w	r1, r1, r3, lsl #20
 8013614:	4602      	mov	r2, r0
 8013616:	460b      	mov	r3, r1
 8013618:	4620      	mov	r0, r4
 801361a:	4629      	mov	r1, r5
 801361c:	f7ed f922 	bl	8000864 <__aeabi_ddiv>
 8013620:	b002      	add	sp, #8
 8013622:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

08013626 <__copybits>:
 8013626:	3901      	subs	r1, #1
 8013628:	b510      	push	{r4, lr}
 801362a:	1149      	asrs	r1, r1, #5
 801362c:	6914      	ldr	r4, [r2, #16]
 801362e:	3101      	adds	r1, #1
 8013630:	f102 0314 	add.w	r3, r2, #20
 8013634:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013638:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801363c:	42a3      	cmp	r3, r4
 801363e:	4602      	mov	r2, r0
 8013640:	d303      	bcc.n	801364a <__copybits+0x24>
 8013642:	2300      	movs	r3, #0
 8013644:	428a      	cmp	r2, r1
 8013646:	d305      	bcc.n	8013654 <__copybits+0x2e>
 8013648:	bd10      	pop	{r4, pc}
 801364a:	f853 2b04 	ldr.w	r2, [r3], #4
 801364e:	f840 2b04 	str.w	r2, [r0], #4
 8013652:	e7f3      	b.n	801363c <__copybits+0x16>
 8013654:	f842 3b04 	str.w	r3, [r2], #4
 8013658:	e7f4      	b.n	8013644 <__copybits+0x1e>

0801365a <__any_on>:
 801365a:	f100 0214 	add.w	r2, r0, #20
 801365e:	6900      	ldr	r0, [r0, #16]
 8013660:	114b      	asrs	r3, r1, #5
 8013662:	4298      	cmp	r0, r3
 8013664:	b510      	push	{r4, lr}
 8013666:	db11      	blt.n	801368c <__any_on+0x32>
 8013668:	dd0a      	ble.n	8013680 <__any_on+0x26>
 801366a:	f011 011f 	ands.w	r1, r1, #31
 801366e:	d007      	beq.n	8013680 <__any_on+0x26>
 8013670:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013674:	fa24 f001 	lsr.w	r0, r4, r1
 8013678:	fa00 f101 	lsl.w	r1, r0, r1
 801367c:	428c      	cmp	r4, r1
 801367e:	d10b      	bne.n	8013698 <__any_on+0x3e>
 8013680:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013684:	4293      	cmp	r3, r2
 8013686:	d803      	bhi.n	8013690 <__any_on+0x36>
 8013688:	2000      	movs	r0, #0
 801368a:	bd10      	pop	{r4, pc}
 801368c:	4603      	mov	r3, r0
 801368e:	e7f7      	b.n	8013680 <__any_on+0x26>
 8013690:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013694:	2900      	cmp	r1, #0
 8013696:	d0f5      	beq.n	8013684 <__any_on+0x2a>
 8013698:	2001      	movs	r0, #1
 801369a:	bd10      	pop	{r4, pc}

0801369c <_realloc_r>:
 801369c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136a0:	4682      	mov	sl, r0
 80136a2:	460c      	mov	r4, r1
 80136a4:	b929      	cbnz	r1, 80136b2 <_realloc_r+0x16>
 80136a6:	4611      	mov	r1, r2
 80136a8:	b003      	add	sp, #12
 80136aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136ae:	f7f9 bc43 	b.w	800cf38 <_malloc_r>
 80136b2:	9201      	str	r2, [sp, #4]
 80136b4:	f7fa f8be 	bl	800d834 <__malloc_lock>
 80136b8:	9a01      	ldr	r2, [sp, #4]
 80136ba:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80136be:	f102 080b 	add.w	r8, r2, #11
 80136c2:	f1b8 0f16 	cmp.w	r8, #22
 80136c6:	f1a4 0908 	sub.w	r9, r4, #8
 80136ca:	f025 0603 	bic.w	r6, r5, #3
 80136ce:	d90a      	bls.n	80136e6 <_realloc_r+0x4a>
 80136d0:	f038 0807 	bics.w	r8, r8, #7
 80136d4:	d509      	bpl.n	80136ea <_realloc_r+0x4e>
 80136d6:	230c      	movs	r3, #12
 80136d8:	f8ca 3000 	str.w	r3, [sl]
 80136dc:	2700      	movs	r7, #0
 80136de:	4638      	mov	r0, r7
 80136e0:	b003      	add	sp, #12
 80136e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136e6:	f04f 0810 	mov.w	r8, #16
 80136ea:	4590      	cmp	r8, r2
 80136ec:	d3f3      	bcc.n	80136d6 <_realloc_r+0x3a>
 80136ee:	45b0      	cmp	r8, r6
 80136f0:	f340 8145 	ble.w	801397e <_realloc_r+0x2e2>
 80136f4:	4ba8      	ldr	r3, [pc, #672]	; (8013998 <_realloc_r+0x2fc>)
 80136f6:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80136fa:	eb09 0106 	add.w	r1, r9, r6
 80136fe:	4571      	cmp	r1, lr
 8013700:	469b      	mov	fp, r3
 8013702:	684b      	ldr	r3, [r1, #4]
 8013704:	d005      	beq.n	8013712 <_realloc_r+0x76>
 8013706:	f023 0001 	bic.w	r0, r3, #1
 801370a:	4408      	add	r0, r1
 801370c:	6840      	ldr	r0, [r0, #4]
 801370e:	07c7      	lsls	r7, r0, #31
 8013710:	d447      	bmi.n	80137a2 <_realloc_r+0x106>
 8013712:	f023 0303 	bic.w	r3, r3, #3
 8013716:	4571      	cmp	r1, lr
 8013718:	eb06 0703 	add.w	r7, r6, r3
 801371c:	d119      	bne.n	8013752 <_realloc_r+0xb6>
 801371e:	f108 0010 	add.w	r0, r8, #16
 8013722:	4287      	cmp	r7, r0
 8013724:	db3f      	blt.n	80137a6 <_realloc_r+0x10a>
 8013726:	eb09 0308 	add.w	r3, r9, r8
 801372a:	eba7 0708 	sub.w	r7, r7, r8
 801372e:	f047 0701 	orr.w	r7, r7, #1
 8013732:	f8cb 3008 	str.w	r3, [fp, #8]
 8013736:	605f      	str	r7, [r3, #4]
 8013738:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801373c:	f003 0301 	and.w	r3, r3, #1
 8013740:	ea43 0308 	orr.w	r3, r3, r8
 8013744:	f844 3c04 	str.w	r3, [r4, #-4]
 8013748:	4650      	mov	r0, sl
 801374a:	f7fa f879 	bl	800d840 <__malloc_unlock>
 801374e:	4627      	mov	r7, r4
 8013750:	e7c5      	b.n	80136de <_realloc_r+0x42>
 8013752:	45b8      	cmp	r8, r7
 8013754:	dc27      	bgt.n	80137a6 <_realloc_r+0x10a>
 8013756:	68cb      	ldr	r3, [r1, #12]
 8013758:	688a      	ldr	r2, [r1, #8]
 801375a:	60d3      	str	r3, [r2, #12]
 801375c:	609a      	str	r2, [r3, #8]
 801375e:	eba7 0008 	sub.w	r0, r7, r8
 8013762:	280f      	cmp	r0, #15
 8013764:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013768:	eb09 0207 	add.w	r2, r9, r7
 801376c:	f240 8109 	bls.w	8013982 <_realloc_r+0x2e6>
 8013770:	eb09 0108 	add.w	r1, r9, r8
 8013774:	f003 0301 	and.w	r3, r3, #1
 8013778:	ea43 0308 	orr.w	r3, r3, r8
 801377c:	f040 0001 	orr.w	r0, r0, #1
 8013780:	f8c9 3004 	str.w	r3, [r9, #4]
 8013784:	6048      	str	r0, [r1, #4]
 8013786:	6853      	ldr	r3, [r2, #4]
 8013788:	f043 0301 	orr.w	r3, r3, #1
 801378c:	6053      	str	r3, [r2, #4]
 801378e:	3108      	adds	r1, #8
 8013790:	4650      	mov	r0, sl
 8013792:	f7fe fc8f 	bl	80120b4 <_free_r>
 8013796:	4650      	mov	r0, sl
 8013798:	f7fa f852 	bl	800d840 <__malloc_unlock>
 801379c:	f109 0708 	add.w	r7, r9, #8
 80137a0:	e79d      	b.n	80136de <_realloc_r+0x42>
 80137a2:	2300      	movs	r3, #0
 80137a4:	4619      	mov	r1, r3
 80137a6:	07e8      	lsls	r0, r5, #31
 80137a8:	f100 8084 	bmi.w	80138b4 <_realloc_r+0x218>
 80137ac:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80137b0:	eba9 0505 	sub.w	r5, r9, r5
 80137b4:	6868      	ldr	r0, [r5, #4]
 80137b6:	f020 0003 	bic.w	r0, r0, #3
 80137ba:	4430      	add	r0, r6
 80137bc:	2900      	cmp	r1, #0
 80137be:	d076      	beq.n	80138ae <_realloc_r+0x212>
 80137c0:	4571      	cmp	r1, lr
 80137c2:	d150      	bne.n	8013866 <_realloc_r+0x1ca>
 80137c4:	4403      	add	r3, r0
 80137c6:	f108 0110 	add.w	r1, r8, #16
 80137ca:	428b      	cmp	r3, r1
 80137cc:	db6f      	blt.n	80138ae <_realloc_r+0x212>
 80137ce:	462f      	mov	r7, r5
 80137d0:	68ea      	ldr	r2, [r5, #12]
 80137d2:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80137d6:	60ca      	str	r2, [r1, #12]
 80137d8:	6091      	str	r1, [r2, #8]
 80137da:	1f32      	subs	r2, r6, #4
 80137dc:	2a24      	cmp	r2, #36	; 0x24
 80137de:	d83b      	bhi.n	8013858 <_realloc_r+0x1bc>
 80137e0:	2a13      	cmp	r2, #19
 80137e2:	d936      	bls.n	8013852 <_realloc_r+0x1b6>
 80137e4:	6821      	ldr	r1, [r4, #0]
 80137e6:	60a9      	str	r1, [r5, #8]
 80137e8:	6861      	ldr	r1, [r4, #4]
 80137ea:	60e9      	str	r1, [r5, #12]
 80137ec:	2a1b      	cmp	r2, #27
 80137ee:	d81c      	bhi.n	801382a <_realloc_r+0x18e>
 80137f0:	f105 0210 	add.w	r2, r5, #16
 80137f4:	f104 0108 	add.w	r1, r4, #8
 80137f8:	6808      	ldr	r0, [r1, #0]
 80137fa:	6010      	str	r0, [r2, #0]
 80137fc:	6848      	ldr	r0, [r1, #4]
 80137fe:	6050      	str	r0, [r2, #4]
 8013800:	6889      	ldr	r1, [r1, #8]
 8013802:	6091      	str	r1, [r2, #8]
 8013804:	eb05 0208 	add.w	r2, r5, r8
 8013808:	eba3 0308 	sub.w	r3, r3, r8
 801380c:	f043 0301 	orr.w	r3, r3, #1
 8013810:	f8cb 2008 	str.w	r2, [fp, #8]
 8013814:	6053      	str	r3, [r2, #4]
 8013816:	686b      	ldr	r3, [r5, #4]
 8013818:	f003 0301 	and.w	r3, r3, #1
 801381c:	ea43 0308 	orr.w	r3, r3, r8
 8013820:	606b      	str	r3, [r5, #4]
 8013822:	4650      	mov	r0, sl
 8013824:	f7fa f80c 	bl	800d840 <__malloc_unlock>
 8013828:	e759      	b.n	80136de <_realloc_r+0x42>
 801382a:	68a1      	ldr	r1, [r4, #8]
 801382c:	6129      	str	r1, [r5, #16]
 801382e:	68e1      	ldr	r1, [r4, #12]
 8013830:	6169      	str	r1, [r5, #20]
 8013832:	2a24      	cmp	r2, #36	; 0x24
 8013834:	bf01      	itttt	eq
 8013836:	6922      	ldreq	r2, [r4, #16]
 8013838:	61aa      	streq	r2, [r5, #24]
 801383a:	6960      	ldreq	r0, [r4, #20]
 801383c:	61e8      	streq	r0, [r5, #28]
 801383e:	bf19      	ittee	ne
 8013840:	f105 0218 	addne.w	r2, r5, #24
 8013844:	f104 0110 	addne.w	r1, r4, #16
 8013848:	f105 0220 	addeq.w	r2, r5, #32
 801384c:	f104 0118 	addeq.w	r1, r4, #24
 8013850:	e7d2      	b.n	80137f8 <_realloc_r+0x15c>
 8013852:	463a      	mov	r2, r7
 8013854:	4621      	mov	r1, r4
 8013856:	e7cf      	b.n	80137f8 <_realloc_r+0x15c>
 8013858:	4621      	mov	r1, r4
 801385a:	4638      	mov	r0, r7
 801385c:	9301      	str	r3, [sp, #4]
 801385e:	f7ff fb1b 	bl	8012e98 <memmove>
 8013862:	9b01      	ldr	r3, [sp, #4]
 8013864:	e7ce      	b.n	8013804 <_realloc_r+0x168>
 8013866:	18c7      	adds	r7, r0, r3
 8013868:	45b8      	cmp	r8, r7
 801386a:	dc20      	bgt.n	80138ae <_realloc_r+0x212>
 801386c:	68cb      	ldr	r3, [r1, #12]
 801386e:	688a      	ldr	r2, [r1, #8]
 8013870:	60d3      	str	r3, [r2, #12]
 8013872:	609a      	str	r2, [r3, #8]
 8013874:	4628      	mov	r0, r5
 8013876:	68eb      	ldr	r3, [r5, #12]
 8013878:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801387c:	60d3      	str	r3, [r2, #12]
 801387e:	609a      	str	r2, [r3, #8]
 8013880:	1f32      	subs	r2, r6, #4
 8013882:	2a24      	cmp	r2, #36	; 0x24
 8013884:	d842      	bhi.n	801390c <_realloc_r+0x270>
 8013886:	2a13      	cmp	r2, #19
 8013888:	d93e      	bls.n	8013908 <_realloc_r+0x26c>
 801388a:	6823      	ldr	r3, [r4, #0]
 801388c:	60ab      	str	r3, [r5, #8]
 801388e:	6863      	ldr	r3, [r4, #4]
 8013890:	60eb      	str	r3, [r5, #12]
 8013892:	2a1b      	cmp	r2, #27
 8013894:	d824      	bhi.n	80138e0 <_realloc_r+0x244>
 8013896:	f105 0010 	add.w	r0, r5, #16
 801389a:	f104 0308 	add.w	r3, r4, #8
 801389e:	681a      	ldr	r2, [r3, #0]
 80138a0:	6002      	str	r2, [r0, #0]
 80138a2:	685a      	ldr	r2, [r3, #4]
 80138a4:	6042      	str	r2, [r0, #4]
 80138a6:	689b      	ldr	r3, [r3, #8]
 80138a8:	6083      	str	r3, [r0, #8]
 80138aa:	46a9      	mov	r9, r5
 80138ac:	e757      	b.n	801375e <_realloc_r+0xc2>
 80138ae:	4580      	cmp	r8, r0
 80138b0:	4607      	mov	r7, r0
 80138b2:	dddf      	ble.n	8013874 <_realloc_r+0x1d8>
 80138b4:	4611      	mov	r1, r2
 80138b6:	4650      	mov	r0, sl
 80138b8:	f7f9 fb3e 	bl	800cf38 <_malloc_r>
 80138bc:	4607      	mov	r7, r0
 80138be:	2800      	cmp	r0, #0
 80138c0:	d0af      	beq.n	8013822 <_realloc_r+0x186>
 80138c2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80138c6:	f023 0301 	bic.w	r3, r3, #1
 80138ca:	f1a0 0208 	sub.w	r2, r0, #8
 80138ce:	444b      	add	r3, r9
 80138d0:	429a      	cmp	r2, r3
 80138d2:	d11f      	bne.n	8013914 <_realloc_r+0x278>
 80138d4:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80138d8:	f027 0703 	bic.w	r7, r7, #3
 80138dc:	4437      	add	r7, r6
 80138de:	e73e      	b.n	801375e <_realloc_r+0xc2>
 80138e0:	68a3      	ldr	r3, [r4, #8]
 80138e2:	612b      	str	r3, [r5, #16]
 80138e4:	68e3      	ldr	r3, [r4, #12]
 80138e6:	616b      	str	r3, [r5, #20]
 80138e8:	2a24      	cmp	r2, #36	; 0x24
 80138ea:	bf01      	itttt	eq
 80138ec:	6923      	ldreq	r3, [r4, #16]
 80138ee:	61ab      	streq	r3, [r5, #24]
 80138f0:	6962      	ldreq	r2, [r4, #20]
 80138f2:	61ea      	streq	r2, [r5, #28]
 80138f4:	bf19      	ittee	ne
 80138f6:	f105 0018 	addne.w	r0, r5, #24
 80138fa:	f104 0310 	addne.w	r3, r4, #16
 80138fe:	f105 0020 	addeq.w	r0, r5, #32
 8013902:	f104 0318 	addeq.w	r3, r4, #24
 8013906:	e7ca      	b.n	801389e <_realloc_r+0x202>
 8013908:	4623      	mov	r3, r4
 801390a:	e7c8      	b.n	801389e <_realloc_r+0x202>
 801390c:	4621      	mov	r1, r4
 801390e:	f7ff fac3 	bl	8012e98 <memmove>
 8013912:	e7ca      	b.n	80138aa <_realloc_r+0x20e>
 8013914:	1f32      	subs	r2, r6, #4
 8013916:	2a24      	cmp	r2, #36	; 0x24
 8013918:	d82d      	bhi.n	8013976 <_realloc_r+0x2da>
 801391a:	2a13      	cmp	r2, #19
 801391c:	d928      	bls.n	8013970 <_realloc_r+0x2d4>
 801391e:	6823      	ldr	r3, [r4, #0]
 8013920:	6003      	str	r3, [r0, #0]
 8013922:	6863      	ldr	r3, [r4, #4]
 8013924:	6043      	str	r3, [r0, #4]
 8013926:	2a1b      	cmp	r2, #27
 8013928:	d80e      	bhi.n	8013948 <_realloc_r+0x2ac>
 801392a:	f100 0308 	add.w	r3, r0, #8
 801392e:	f104 0208 	add.w	r2, r4, #8
 8013932:	6811      	ldr	r1, [r2, #0]
 8013934:	6019      	str	r1, [r3, #0]
 8013936:	6851      	ldr	r1, [r2, #4]
 8013938:	6059      	str	r1, [r3, #4]
 801393a:	6892      	ldr	r2, [r2, #8]
 801393c:	609a      	str	r2, [r3, #8]
 801393e:	4621      	mov	r1, r4
 8013940:	4650      	mov	r0, sl
 8013942:	f7fe fbb7 	bl	80120b4 <_free_r>
 8013946:	e76c      	b.n	8013822 <_realloc_r+0x186>
 8013948:	68a3      	ldr	r3, [r4, #8]
 801394a:	6083      	str	r3, [r0, #8]
 801394c:	68e3      	ldr	r3, [r4, #12]
 801394e:	60c3      	str	r3, [r0, #12]
 8013950:	2a24      	cmp	r2, #36	; 0x24
 8013952:	bf01      	itttt	eq
 8013954:	6923      	ldreq	r3, [r4, #16]
 8013956:	6103      	streq	r3, [r0, #16]
 8013958:	6961      	ldreq	r1, [r4, #20]
 801395a:	6141      	streq	r1, [r0, #20]
 801395c:	bf19      	ittee	ne
 801395e:	f100 0310 	addne.w	r3, r0, #16
 8013962:	f104 0210 	addne.w	r2, r4, #16
 8013966:	f100 0318 	addeq.w	r3, r0, #24
 801396a:	f104 0218 	addeq.w	r2, r4, #24
 801396e:	e7e0      	b.n	8013932 <_realloc_r+0x296>
 8013970:	4603      	mov	r3, r0
 8013972:	4622      	mov	r2, r4
 8013974:	e7dd      	b.n	8013932 <_realloc_r+0x296>
 8013976:	4621      	mov	r1, r4
 8013978:	f7ff fa8e 	bl	8012e98 <memmove>
 801397c:	e7df      	b.n	801393e <_realloc_r+0x2a2>
 801397e:	4637      	mov	r7, r6
 8013980:	e6ed      	b.n	801375e <_realloc_r+0xc2>
 8013982:	f003 0301 	and.w	r3, r3, #1
 8013986:	431f      	orrs	r7, r3
 8013988:	f8c9 7004 	str.w	r7, [r9, #4]
 801398c:	6853      	ldr	r3, [r2, #4]
 801398e:	f043 0301 	orr.w	r3, r3, #1
 8013992:	6053      	str	r3, [r2, #4]
 8013994:	e6ff      	b.n	8013796 <_realloc_r+0xfa>
 8013996:	bf00      	nop
 8013998:	20000108 	.word	0x20000108

0801399c <siscanf>:
 801399c:	b40e      	push	{r1, r2, r3}
 801399e:	b530      	push	{r4, r5, lr}
 80139a0:	b09c      	sub	sp, #112	; 0x70
 80139a2:	ac1f      	add	r4, sp, #124	; 0x7c
 80139a4:	f44f 7201 	mov.w	r2, #516	; 0x204
 80139a8:	f854 5b04 	ldr.w	r5, [r4], #4
 80139ac:	f8ad 2014 	strh.w	r2, [sp, #20]
 80139b0:	9002      	str	r0, [sp, #8]
 80139b2:	9006      	str	r0, [sp, #24]
 80139b4:	f7ec fc16 	bl	80001e4 <strlen>
 80139b8:	4b0b      	ldr	r3, [pc, #44]	; (80139e8 <siscanf+0x4c>)
 80139ba:	9003      	str	r0, [sp, #12]
 80139bc:	9007      	str	r0, [sp, #28]
 80139be:	930b      	str	r3, [sp, #44]	; 0x2c
 80139c0:	480a      	ldr	r0, [pc, #40]	; (80139ec <siscanf+0x50>)
 80139c2:	9401      	str	r4, [sp, #4]
 80139c4:	2300      	movs	r3, #0
 80139c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80139c8:	9314      	str	r3, [sp, #80]	; 0x50
 80139ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80139ce:	f8ad 3016 	strh.w	r3, [sp, #22]
 80139d2:	462a      	mov	r2, r5
 80139d4:	4623      	mov	r3, r4
 80139d6:	a902      	add	r1, sp, #8
 80139d8:	6800      	ldr	r0, [r0, #0]
 80139da:	f000 fa19 	bl	8013e10 <__ssvfiscanf_r>
 80139de:	b01c      	add	sp, #112	; 0x70
 80139e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80139e4:	b003      	add	sp, #12
 80139e6:	4770      	bx	lr
 80139e8:	08013a13 	.word	0x08013a13
 80139ec:	20000014 	.word	0x20000014

080139f0 <__sread>:
 80139f0:	b510      	push	{r4, lr}
 80139f2:	460c      	mov	r4, r1
 80139f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80139f8:	f000 ffb6 	bl	8014968 <_read_r>
 80139fc:	2800      	cmp	r0, #0
 80139fe:	bfab      	itete	ge
 8013a00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013a02:	89a3      	ldrhlt	r3, [r4, #12]
 8013a04:	181b      	addge	r3, r3, r0
 8013a06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013a0a:	bfac      	ite	ge
 8013a0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8013a0e:	81a3      	strhlt	r3, [r4, #12]
 8013a10:	bd10      	pop	{r4, pc}

08013a12 <__seofread>:
 8013a12:	2000      	movs	r0, #0
 8013a14:	4770      	bx	lr

08013a16 <__swrite>:
 8013a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a1a:	461f      	mov	r7, r3
 8013a1c:	898b      	ldrh	r3, [r1, #12]
 8013a1e:	05db      	lsls	r3, r3, #23
 8013a20:	4605      	mov	r5, r0
 8013a22:	460c      	mov	r4, r1
 8013a24:	4616      	mov	r6, r2
 8013a26:	d505      	bpl.n	8013a34 <__swrite+0x1e>
 8013a28:	2302      	movs	r3, #2
 8013a2a:	2200      	movs	r2, #0
 8013a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a30:	f000 ff5c 	bl	80148ec <_lseek_r>
 8013a34:	89a3      	ldrh	r3, [r4, #12]
 8013a36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013a3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013a3e:	81a3      	strh	r3, [r4, #12]
 8013a40:	4632      	mov	r2, r6
 8013a42:	463b      	mov	r3, r7
 8013a44:	4628      	mov	r0, r5
 8013a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a4a:	f000 bded 	b.w	8014628 <_write_r>

08013a4e <__sseek>:
 8013a4e:	b510      	push	{r4, lr}
 8013a50:	460c      	mov	r4, r1
 8013a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a56:	f000 ff49 	bl	80148ec <_lseek_r>
 8013a5a:	1c43      	adds	r3, r0, #1
 8013a5c:	89a3      	ldrh	r3, [r4, #12]
 8013a5e:	bf15      	itete	ne
 8013a60:	6560      	strne	r0, [r4, #84]	; 0x54
 8013a62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013a66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013a6a:	81a3      	strheq	r3, [r4, #12]
 8013a6c:	bf18      	it	ne
 8013a6e:	81a3      	strhne	r3, [r4, #12]
 8013a70:	bd10      	pop	{r4, pc}

08013a72 <__sclose>:
 8013a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a76:	f000 be17 	b.w	80146a8 <_close_r>

08013a7a <strcpy>:
 8013a7a:	4603      	mov	r3, r0
 8013a7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013a80:	f803 2b01 	strb.w	r2, [r3], #1
 8013a84:	2a00      	cmp	r2, #0
 8013a86:	d1f9      	bne.n	8013a7c <strcpy+0x2>
 8013a88:	4770      	bx	lr

08013a8a <strncmp>:
 8013a8a:	b510      	push	{r4, lr}
 8013a8c:	b16a      	cbz	r2, 8013aaa <strncmp+0x20>
 8013a8e:	3901      	subs	r1, #1
 8013a90:	1884      	adds	r4, r0, r2
 8013a92:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013a96:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013a9a:	4293      	cmp	r3, r2
 8013a9c:	d103      	bne.n	8013aa6 <strncmp+0x1c>
 8013a9e:	42a0      	cmp	r0, r4
 8013aa0:	d001      	beq.n	8013aa6 <strncmp+0x1c>
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d1f5      	bne.n	8013a92 <strncmp+0x8>
 8013aa6:	1a98      	subs	r0, r3, r2
 8013aa8:	bd10      	pop	{r4, pc}
 8013aaa:	4610      	mov	r0, r2
 8013aac:	bd10      	pop	{r4, pc}

08013aae <_strtoul_l.isra.0>:
 8013aae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ab2:	4680      	mov	r8, r0
 8013ab4:	4689      	mov	r9, r1
 8013ab6:	4692      	mov	sl, r2
 8013ab8:	461e      	mov	r6, r3
 8013aba:	460f      	mov	r7, r1
 8013abc:	463d      	mov	r5, r7
 8013abe:	9808      	ldr	r0, [sp, #32]
 8013ac0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013ac4:	f7ff f942 	bl	8012d4c <__locale_ctype_ptr_l>
 8013ac8:	4420      	add	r0, r4
 8013aca:	7843      	ldrb	r3, [r0, #1]
 8013acc:	f013 0308 	ands.w	r3, r3, #8
 8013ad0:	d10a      	bne.n	8013ae8 <_strtoul_l.isra.0+0x3a>
 8013ad2:	2c2d      	cmp	r4, #45	; 0x2d
 8013ad4:	d10a      	bne.n	8013aec <_strtoul_l.isra.0+0x3e>
 8013ad6:	782c      	ldrb	r4, [r5, #0]
 8013ad8:	2301      	movs	r3, #1
 8013ada:	1cbd      	adds	r5, r7, #2
 8013adc:	b15e      	cbz	r6, 8013af6 <_strtoul_l.isra.0+0x48>
 8013ade:	2e10      	cmp	r6, #16
 8013ae0:	d113      	bne.n	8013b0a <_strtoul_l.isra.0+0x5c>
 8013ae2:	2c30      	cmp	r4, #48	; 0x30
 8013ae4:	d009      	beq.n	8013afa <_strtoul_l.isra.0+0x4c>
 8013ae6:	e010      	b.n	8013b0a <_strtoul_l.isra.0+0x5c>
 8013ae8:	462f      	mov	r7, r5
 8013aea:	e7e7      	b.n	8013abc <_strtoul_l.isra.0+0xe>
 8013aec:	2c2b      	cmp	r4, #43	; 0x2b
 8013aee:	bf04      	itt	eq
 8013af0:	782c      	ldrbeq	r4, [r5, #0]
 8013af2:	1cbd      	addeq	r5, r7, #2
 8013af4:	e7f2      	b.n	8013adc <_strtoul_l.isra.0+0x2e>
 8013af6:	2c30      	cmp	r4, #48	; 0x30
 8013af8:	d125      	bne.n	8013b46 <_strtoul_l.isra.0+0x98>
 8013afa:	782a      	ldrb	r2, [r5, #0]
 8013afc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8013b00:	2a58      	cmp	r2, #88	; 0x58
 8013b02:	d14a      	bne.n	8013b9a <_strtoul_l.isra.0+0xec>
 8013b04:	786c      	ldrb	r4, [r5, #1]
 8013b06:	2610      	movs	r6, #16
 8013b08:	3502      	adds	r5, #2
 8013b0a:	f04f 31ff 	mov.w	r1, #4294967295
 8013b0e:	2700      	movs	r7, #0
 8013b10:	fbb1 f1f6 	udiv	r1, r1, r6
 8013b14:	fb06 fe01 	mul.w	lr, r6, r1
 8013b18:	ea6f 0e0e 	mvn.w	lr, lr
 8013b1c:	4638      	mov	r0, r7
 8013b1e:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8013b22:	2a09      	cmp	r2, #9
 8013b24:	d811      	bhi.n	8013b4a <_strtoul_l.isra.0+0x9c>
 8013b26:	4614      	mov	r4, r2
 8013b28:	42a6      	cmp	r6, r4
 8013b2a:	dd1d      	ble.n	8013b68 <_strtoul_l.isra.0+0xba>
 8013b2c:	2f00      	cmp	r7, #0
 8013b2e:	db18      	blt.n	8013b62 <_strtoul_l.isra.0+0xb4>
 8013b30:	4281      	cmp	r1, r0
 8013b32:	d316      	bcc.n	8013b62 <_strtoul_l.isra.0+0xb4>
 8013b34:	d101      	bne.n	8013b3a <_strtoul_l.isra.0+0x8c>
 8013b36:	45a6      	cmp	lr, r4
 8013b38:	db13      	blt.n	8013b62 <_strtoul_l.isra.0+0xb4>
 8013b3a:	fb00 4006 	mla	r0, r0, r6, r4
 8013b3e:	2701      	movs	r7, #1
 8013b40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013b44:	e7eb      	b.n	8013b1e <_strtoul_l.isra.0+0x70>
 8013b46:	260a      	movs	r6, #10
 8013b48:	e7df      	b.n	8013b0a <_strtoul_l.isra.0+0x5c>
 8013b4a:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8013b4e:	2a19      	cmp	r2, #25
 8013b50:	d801      	bhi.n	8013b56 <_strtoul_l.isra.0+0xa8>
 8013b52:	3c37      	subs	r4, #55	; 0x37
 8013b54:	e7e8      	b.n	8013b28 <_strtoul_l.isra.0+0x7a>
 8013b56:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8013b5a:	2a19      	cmp	r2, #25
 8013b5c:	d804      	bhi.n	8013b68 <_strtoul_l.isra.0+0xba>
 8013b5e:	3c57      	subs	r4, #87	; 0x57
 8013b60:	e7e2      	b.n	8013b28 <_strtoul_l.isra.0+0x7a>
 8013b62:	f04f 37ff 	mov.w	r7, #4294967295
 8013b66:	e7eb      	b.n	8013b40 <_strtoul_l.isra.0+0x92>
 8013b68:	2f00      	cmp	r7, #0
 8013b6a:	da09      	bge.n	8013b80 <_strtoul_l.isra.0+0xd2>
 8013b6c:	2322      	movs	r3, #34	; 0x22
 8013b6e:	f8c8 3000 	str.w	r3, [r8]
 8013b72:	f04f 30ff 	mov.w	r0, #4294967295
 8013b76:	f1ba 0f00 	cmp.w	sl, #0
 8013b7a:	d107      	bne.n	8013b8c <_strtoul_l.isra.0+0xde>
 8013b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b80:	b103      	cbz	r3, 8013b84 <_strtoul_l.isra.0+0xd6>
 8013b82:	4240      	negs	r0, r0
 8013b84:	f1ba 0f00 	cmp.w	sl, #0
 8013b88:	d00c      	beq.n	8013ba4 <_strtoul_l.isra.0+0xf6>
 8013b8a:	b127      	cbz	r7, 8013b96 <_strtoul_l.isra.0+0xe8>
 8013b8c:	3d01      	subs	r5, #1
 8013b8e:	f8ca 5000 	str.w	r5, [sl]
 8013b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b96:	464d      	mov	r5, r9
 8013b98:	e7f9      	b.n	8013b8e <_strtoul_l.isra.0+0xe0>
 8013b9a:	2430      	movs	r4, #48	; 0x30
 8013b9c:	2e00      	cmp	r6, #0
 8013b9e:	d1b4      	bne.n	8013b0a <_strtoul_l.isra.0+0x5c>
 8013ba0:	2608      	movs	r6, #8
 8013ba2:	e7b2      	b.n	8013b0a <_strtoul_l.isra.0+0x5c>
 8013ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013ba8 <_strtoul_r>:
 8013ba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013baa:	4c06      	ldr	r4, [pc, #24]	; (8013bc4 <_strtoul_r+0x1c>)
 8013bac:	4d06      	ldr	r5, [pc, #24]	; (8013bc8 <_strtoul_r+0x20>)
 8013bae:	6824      	ldr	r4, [r4, #0]
 8013bb0:	6a24      	ldr	r4, [r4, #32]
 8013bb2:	2c00      	cmp	r4, #0
 8013bb4:	bf08      	it	eq
 8013bb6:	462c      	moveq	r4, r5
 8013bb8:	9400      	str	r4, [sp, #0]
 8013bba:	f7ff ff78 	bl	8013aae <_strtoul_l.isra.0>
 8013bbe:	b003      	add	sp, #12
 8013bc0:	bd30      	pop	{r4, r5, pc}
 8013bc2:	bf00      	nop
 8013bc4:	20000014 	.word	0x20000014
 8013bc8:	20000560 	.word	0x20000560

08013bcc <strtoul>:
 8013bcc:	4b08      	ldr	r3, [pc, #32]	; (8013bf0 <strtoul+0x24>)
 8013bce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013bd0:	681c      	ldr	r4, [r3, #0]
 8013bd2:	4d08      	ldr	r5, [pc, #32]	; (8013bf4 <strtoul+0x28>)
 8013bd4:	6a23      	ldr	r3, [r4, #32]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	bf08      	it	eq
 8013bda:	462b      	moveq	r3, r5
 8013bdc:	9300      	str	r3, [sp, #0]
 8013bde:	4613      	mov	r3, r2
 8013be0:	460a      	mov	r2, r1
 8013be2:	4601      	mov	r1, r0
 8013be4:	4620      	mov	r0, r4
 8013be6:	f7ff ff62 	bl	8013aae <_strtoul_l.isra.0>
 8013bea:	b003      	add	sp, #12
 8013bec:	bd30      	pop	{r4, r5, pc}
 8013bee:	bf00      	nop
 8013bf0:	20000014 	.word	0x20000014
 8013bf4:	20000560 	.word	0x20000560

08013bf8 <__ssprint_r>:
 8013bf8:	6893      	ldr	r3, [r2, #8]
 8013bfa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bfe:	4681      	mov	r9, r0
 8013c00:	460c      	mov	r4, r1
 8013c02:	4617      	mov	r7, r2
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d060      	beq.n	8013cca <__ssprint_r+0xd2>
 8013c08:	f04f 0b00 	mov.w	fp, #0
 8013c0c:	f8d2 a000 	ldr.w	sl, [r2]
 8013c10:	465e      	mov	r6, fp
 8013c12:	b356      	cbz	r6, 8013c6a <__ssprint_r+0x72>
 8013c14:	68a3      	ldr	r3, [r4, #8]
 8013c16:	429e      	cmp	r6, r3
 8013c18:	d344      	bcc.n	8013ca4 <__ssprint_r+0xac>
 8013c1a:	89a2      	ldrh	r2, [r4, #12]
 8013c1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013c20:	d03e      	beq.n	8013ca0 <__ssprint_r+0xa8>
 8013c22:	6825      	ldr	r5, [r4, #0]
 8013c24:	6921      	ldr	r1, [r4, #16]
 8013c26:	eba5 0801 	sub.w	r8, r5, r1
 8013c2a:	6965      	ldr	r5, [r4, #20]
 8013c2c:	2302      	movs	r3, #2
 8013c2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013c32:	fb95 f5f3 	sdiv	r5, r5, r3
 8013c36:	f108 0301 	add.w	r3, r8, #1
 8013c3a:	4433      	add	r3, r6
 8013c3c:	429d      	cmp	r5, r3
 8013c3e:	bf38      	it	cc
 8013c40:	461d      	movcc	r5, r3
 8013c42:	0553      	lsls	r3, r2, #21
 8013c44:	d546      	bpl.n	8013cd4 <__ssprint_r+0xdc>
 8013c46:	4629      	mov	r1, r5
 8013c48:	4648      	mov	r0, r9
 8013c4a:	f7f9 f975 	bl	800cf38 <_malloc_r>
 8013c4e:	b998      	cbnz	r0, 8013c78 <__ssprint_r+0x80>
 8013c50:	230c      	movs	r3, #12
 8013c52:	f8c9 3000 	str.w	r3, [r9]
 8013c56:	89a3      	ldrh	r3, [r4, #12]
 8013c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c5c:	81a3      	strh	r3, [r4, #12]
 8013c5e:	2300      	movs	r3, #0
 8013c60:	60bb      	str	r3, [r7, #8]
 8013c62:	607b      	str	r3, [r7, #4]
 8013c64:	f04f 30ff 	mov.w	r0, #4294967295
 8013c68:	e031      	b.n	8013cce <__ssprint_r+0xd6>
 8013c6a:	f8da b000 	ldr.w	fp, [sl]
 8013c6e:	f8da 6004 	ldr.w	r6, [sl, #4]
 8013c72:	f10a 0a08 	add.w	sl, sl, #8
 8013c76:	e7cc      	b.n	8013c12 <__ssprint_r+0x1a>
 8013c78:	4642      	mov	r2, r8
 8013c7a:	6921      	ldr	r1, [r4, #16]
 8013c7c:	9001      	str	r0, [sp, #4]
 8013c7e:	f7f9 fb69 	bl	800d354 <memcpy>
 8013c82:	89a2      	ldrh	r2, [r4, #12]
 8013c84:	9b01      	ldr	r3, [sp, #4]
 8013c86:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8013c8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8013c8e:	81a2      	strh	r2, [r4, #12]
 8013c90:	6123      	str	r3, [r4, #16]
 8013c92:	6165      	str	r5, [r4, #20]
 8013c94:	4443      	add	r3, r8
 8013c96:	eba5 0508 	sub.w	r5, r5, r8
 8013c9a:	6023      	str	r3, [r4, #0]
 8013c9c:	60a5      	str	r5, [r4, #8]
 8013c9e:	4633      	mov	r3, r6
 8013ca0:	429e      	cmp	r6, r3
 8013ca2:	d200      	bcs.n	8013ca6 <__ssprint_r+0xae>
 8013ca4:	4633      	mov	r3, r6
 8013ca6:	461a      	mov	r2, r3
 8013ca8:	4659      	mov	r1, fp
 8013caa:	6820      	ldr	r0, [r4, #0]
 8013cac:	9301      	str	r3, [sp, #4]
 8013cae:	f7ff f8f3 	bl	8012e98 <memmove>
 8013cb2:	68a2      	ldr	r2, [r4, #8]
 8013cb4:	9b01      	ldr	r3, [sp, #4]
 8013cb6:	1ad2      	subs	r2, r2, r3
 8013cb8:	60a2      	str	r2, [r4, #8]
 8013cba:	6822      	ldr	r2, [r4, #0]
 8013cbc:	4413      	add	r3, r2
 8013cbe:	6023      	str	r3, [r4, #0]
 8013cc0:	68bb      	ldr	r3, [r7, #8]
 8013cc2:	1b9e      	subs	r6, r3, r6
 8013cc4:	60be      	str	r6, [r7, #8]
 8013cc6:	2e00      	cmp	r6, #0
 8013cc8:	d1cf      	bne.n	8013c6a <__ssprint_r+0x72>
 8013cca:	2000      	movs	r0, #0
 8013ccc:	6078      	str	r0, [r7, #4]
 8013cce:	b003      	add	sp, #12
 8013cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cd4:	462a      	mov	r2, r5
 8013cd6:	4648      	mov	r0, r9
 8013cd8:	f7ff fce0 	bl	801369c <_realloc_r>
 8013cdc:	4603      	mov	r3, r0
 8013cde:	2800      	cmp	r0, #0
 8013ce0:	d1d6      	bne.n	8013c90 <__ssprint_r+0x98>
 8013ce2:	6921      	ldr	r1, [r4, #16]
 8013ce4:	4648      	mov	r0, r9
 8013ce6:	f7fe f9e5 	bl	80120b4 <_free_r>
 8013cea:	e7b1      	b.n	8013c50 <__ssprint_r+0x58>

08013cec <_sungetc_r>:
 8013cec:	b538      	push	{r3, r4, r5, lr}
 8013cee:	1c4b      	adds	r3, r1, #1
 8013cf0:	4614      	mov	r4, r2
 8013cf2:	d103      	bne.n	8013cfc <_sungetc_r+0x10>
 8013cf4:	f04f 35ff 	mov.w	r5, #4294967295
 8013cf8:	4628      	mov	r0, r5
 8013cfa:	bd38      	pop	{r3, r4, r5, pc}
 8013cfc:	8993      	ldrh	r3, [r2, #12]
 8013cfe:	f023 0320 	bic.w	r3, r3, #32
 8013d02:	8193      	strh	r3, [r2, #12]
 8013d04:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8013d06:	6852      	ldr	r2, [r2, #4]
 8013d08:	b2cd      	uxtb	r5, r1
 8013d0a:	b18b      	cbz	r3, 8013d30 <_sungetc_r+0x44>
 8013d0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013d0e:	429a      	cmp	r2, r3
 8013d10:	da08      	bge.n	8013d24 <_sungetc_r+0x38>
 8013d12:	6823      	ldr	r3, [r4, #0]
 8013d14:	1e5a      	subs	r2, r3, #1
 8013d16:	6022      	str	r2, [r4, #0]
 8013d18:	f803 5c01 	strb.w	r5, [r3, #-1]
 8013d1c:	6863      	ldr	r3, [r4, #4]
 8013d1e:	3301      	adds	r3, #1
 8013d20:	6063      	str	r3, [r4, #4]
 8013d22:	e7e9      	b.n	8013cf8 <_sungetc_r+0xc>
 8013d24:	4621      	mov	r1, r4
 8013d26:	f000 fc01 	bl	801452c <__submore>
 8013d2a:	2800      	cmp	r0, #0
 8013d2c:	d0f1      	beq.n	8013d12 <_sungetc_r+0x26>
 8013d2e:	e7e1      	b.n	8013cf4 <_sungetc_r+0x8>
 8013d30:	6921      	ldr	r1, [r4, #16]
 8013d32:	6823      	ldr	r3, [r4, #0]
 8013d34:	b151      	cbz	r1, 8013d4c <_sungetc_r+0x60>
 8013d36:	4299      	cmp	r1, r3
 8013d38:	d208      	bcs.n	8013d4c <_sungetc_r+0x60>
 8013d3a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8013d3e:	428d      	cmp	r5, r1
 8013d40:	d104      	bne.n	8013d4c <_sungetc_r+0x60>
 8013d42:	3b01      	subs	r3, #1
 8013d44:	3201      	adds	r2, #1
 8013d46:	6023      	str	r3, [r4, #0]
 8013d48:	6062      	str	r2, [r4, #4]
 8013d4a:	e7d5      	b.n	8013cf8 <_sungetc_r+0xc>
 8013d4c:	63e3      	str	r3, [r4, #60]	; 0x3c
 8013d4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013d52:	6363      	str	r3, [r4, #52]	; 0x34
 8013d54:	2303      	movs	r3, #3
 8013d56:	63a3      	str	r3, [r4, #56]	; 0x38
 8013d58:	4623      	mov	r3, r4
 8013d5a:	6422      	str	r2, [r4, #64]	; 0x40
 8013d5c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8013d60:	6023      	str	r3, [r4, #0]
 8013d62:	2301      	movs	r3, #1
 8013d64:	e7dc      	b.n	8013d20 <_sungetc_r+0x34>

08013d66 <__ssrefill_r>:
 8013d66:	b510      	push	{r4, lr}
 8013d68:	460c      	mov	r4, r1
 8013d6a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013d6c:	b169      	cbz	r1, 8013d8a <__ssrefill_r+0x24>
 8013d6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013d72:	4299      	cmp	r1, r3
 8013d74:	d001      	beq.n	8013d7a <__ssrefill_r+0x14>
 8013d76:	f7fe f99d 	bl	80120b4 <_free_r>
 8013d7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013d7c:	6063      	str	r3, [r4, #4]
 8013d7e:	2000      	movs	r0, #0
 8013d80:	6360      	str	r0, [r4, #52]	; 0x34
 8013d82:	b113      	cbz	r3, 8013d8a <__ssrefill_r+0x24>
 8013d84:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013d86:	6023      	str	r3, [r4, #0]
 8013d88:	bd10      	pop	{r4, pc}
 8013d8a:	6923      	ldr	r3, [r4, #16]
 8013d8c:	6023      	str	r3, [r4, #0]
 8013d8e:	2300      	movs	r3, #0
 8013d90:	6063      	str	r3, [r4, #4]
 8013d92:	89a3      	ldrh	r3, [r4, #12]
 8013d94:	f043 0320 	orr.w	r3, r3, #32
 8013d98:	81a3      	strh	r3, [r4, #12]
 8013d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8013d9e:	bd10      	pop	{r4, pc}

08013da0 <_sfread_r>:
 8013da0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013da4:	4615      	mov	r5, r2
 8013da6:	435d      	muls	r5, r3
 8013da8:	4682      	mov	sl, r0
 8013daa:	4691      	mov	r9, r2
 8013dac:	4698      	mov	r8, r3
 8013dae:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8013db0:	d029      	beq.n	8013e06 <_sfread_r+0x66>
 8013db2:	460f      	mov	r7, r1
 8013db4:	462e      	mov	r6, r5
 8013db6:	f04f 0b00 	mov.w	fp, #0
 8013dba:	6863      	ldr	r3, [r4, #4]
 8013dbc:	429e      	cmp	r6, r3
 8013dbe:	d80c      	bhi.n	8013dda <_sfread_r+0x3a>
 8013dc0:	4632      	mov	r2, r6
 8013dc2:	6821      	ldr	r1, [r4, #0]
 8013dc4:	4638      	mov	r0, r7
 8013dc6:	f7f9 fac5 	bl	800d354 <memcpy>
 8013dca:	6863      	ldr	r3, [r4, #4]
 8013dcc:	6825      	ldr	r5, [r4, #0]
 8013dce:	1b9b      	subs	r3, r3, r6
 8013dd0:	4435      	add	r5, r6
 8013dd2:	6025      	str	r5, [r4, #0]
 8013dd4:	6063      	str	r3, [r4, #4]
 8013dd6:	4645      	mov	r5, r8
 8013dd8:	e015      	b.n	8013e06 <_sfread_r+0x66>
 8013dda:	461a      	mov	r2, r3
 8013ddc:	6821      	ldr	r1, [r4, #0]
 8013dde:	9301      	str	r3, [sp, #4]
 8013de0:	4638      	mov	r0, r7
 8013de2:	f7f9 fab7 	bl	800d354 <memcpy>
 8013de6:	9b01      	ldr	r3, [sp, #4]
 8013de8:	6822      	ldr	r2, [r4, #0]
 8013dea:	441a      	add	r2, r3
 8013dec:	e884 0804 	stmia.w	r4, {r2, fp}
 8013df0:	4621      	mov	r1, r4
 8013df2:	4650      	mov	r0, sl
 8013df4:	441f      	add	r7, r3
 8013df6:	1af6      	subs	r6, r6, r3
 8013df8:	f7ff ffb5 	bl	8013d66 <__ssrefill_r>
 8013dfc:	2800      	cmp	r0, #0
 8013dfe:	d0dc      	beq.n	8013dba <_sfread_r+0x1a>
 8013e00:	1bad      	subs	r5, r5, r6
 8013e02:	fbb5 f5f9 	udiv	r5, r5, r9
 8013e06:	4628      	mov	r0, r5
 8013e08:	b003      	add	sp, #12
 8013e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08013e10 <__ssvfiscanf_r>:
 8013e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e14:	461e      	mov	r6, r3
 8013e16:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8013e1a:	b0d7      	sub	sp, #348	; 0x15c
 8013e1c:	049c      	lsls	r4, r3, #18
 8013e1e:	9003      	str	r0, [sp, #12]
 8013e20:	460d      	mov	r5, r1
 8013e22:	d406      	bmi.n	8013e32 <__ssvfiscanf_r+0x22>
 8013e24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013e28:	818b      	strh	r3, [r1, #12]
 8013e2a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8013e2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013e30:	664b      	str	r3, [r1, #100]	; 0x64
 8013e32:	2300      	movs	r3, #0
 8013e34:	9206      	str	r2, [sp, #24]
 8013e36:	9305      	str	r3, [sp, #20]
 8013e38:	4699      	mov	r9, r3
 8013e3a:	4698      	mov	r8, r3
 8013e3c:	9304      	str	r3, [sp, #16]
 8013e3e:	9a06      	ldr	r2, [sp, #24]
 8013e40:	f812 3b01 	ldrb.w	r3, [r2], #1
 8013e44:	9206      	str	r2, [sp, #24]
 8013e46:	9309      	str	r3, [sp, #36]	; 0x24
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	f000 8099 	beq.w	8013f80 <__ssvfiscanf_r+0x170>
 8013e4e:	f7fe ff81 	bl	8012d54 <__locale_ctype_ptr>
 8013e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e54:	4418      	add	r0, r3
 8013e56:	7844      	ldrb	r4, [r0, #1]
 8013e58:	f014 0408 	ands.w	r4, r4, #8
 8013e5c:	d019      	beq.n	8013e92 <__ssvfiscanf_r+0x82>
 8013e5e:	686b      	ldr	r3, [r5, #4]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	dd0f      	ble.n	8013e84 <__ssvfiscanf_r+0x74>
 8013e64:	f7fe ff76 	bl	8012d54 <__locale_ctype_ptr>
 8013e68:	682b      	ldr	r3, [r5, #0]
 8013e6a:	781a      	ldrb	r2, [r3, #0]
 8013e6c:	4410      	add	r0, r2
 8013e6e:	7842      	ldrb	r2, [r0, #1]
 8013e70:	0710      	lsls	r0, r2, #28
 8013e72:	d5e4      	bpl.n	8013e3e <__ssvfiscanf_r+0x2e>
 8013e74:	686a      	ldr	r2, [r5, #4]
 8013e76:	3301      	adds	r3, #1
 8013e78:	3a01      	subs	r2, #1
 8013e7a:	f108 0801 	add.w	r8, r8, #1
 8013e7e:	606a      	str	r2, [r5, #4]
 8013e80:	602b      	str	r3, [r5, #0]
 8013e82:	e7ec      	b.n	8013e5e <__ssvfiscanf_r+0x4e>
 8013e84:	4629      	mov	r1, r5
 8013e86:	9803      	ldr	r0, [sp, #12]
 8013e88:	f7ff ff6d 	bl	8013d66 <__ssrefill_r>
 8013e8c:	2800      	cmp	r0, #0
 8013e8e:	d0e9      	beq.n	8013e64 <__ssvfiscanf_r+0x54>
 8013e90:	e7d5      	b.n	8013e3e <__ssvfiscanf_r+0x2e>
 8013e92:	2b25      	cmp	r3, #37	; 0x25
 8013e94:	d16a      	bne.n	8013f6c <__ssvfiscanf_r+0x15c>
 8013e96:	9b06      	ldr	r3, [sp, #24]
 8013e98:	46a2      	mov	sl, r4
 8013e9a:	4627      	mov	r7, r4
 8013e9c:	220a      	movs	r2, #10
 8013e9e:	9906      	ldr	r1, [sp, #24]
 8013ea0:	781c      	ldrb	r4, [r3, #0]
 8013ea2:	3101      	adds	r1, #1
 8013ea4:	2c63      	cmp	r4, #99	; 0x63
 8013ea6:	9106      	str	r1, [sp, #24]
 8013ea8:	f000 80f8 	beq.w	801409c <__ssvfiscanf_r+0x28c>
 8013eac:	d82c      	bhi.n	8013f08 <__ssvfiscanf_r+0xf8>
 8013eae:	2c39      	cmp	r4, #57	; 0x39
 8013eb0:	d80a      	bhi.n	8013ec8 <__ssvfiscanf_r+0xb8>
 8013eb2:	2c30      	cmp	r4, #48	; 0x30
 8013eb4:	f080 808c 	bcs.w	8013fd0 <__ssvfiscanf_r+0x1c0>
 8013eb8:	2c25      	cmp	r4, #37	; 0x25
 8013eba:	d057      	beq.n	8013f6c <__ssvfiscanf_r+0x15c>
 8013ebc:	2c2a      	cmp	r4, #42	; 0x2a
 8013ebe:	d07d      	beq.n	8013fbc <__ssvfiscanf_r+0x1ac>
 8013ec0:	b954      	cbnz	r4, 8013ed8 <__ssvfiscanf_r+0xc8>
 8013ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8013ec6:	e06f      	b.n	8013fa8 <__ssvfiscanf_r+0x198>
 8013ec8:	2c4f      	cmp	r4, #79	; 0x4f
 8013eca:	f000 8085 	beq.w	8013fd8 <__ssvfiscanf_r+0x1c8>
 8013ece:	d80e      	bhi.n	8013eee <__ssvfiscanf_r+0xde>
 8013ed0:	2c44      	cmp	r4, #68	; 0x44
 8013ed2:	d009      	beq.n	8013ee8 <__ssvfiscanf_r+0xd8>
 8013ed4:	2c4c      	cmp	r4, #76	; 0x4c
 8013ed6:	d02b      	beq.n	8013f30 <__ssvfiscanf_r+0x120>
 8013ed8:	f7fe ff3c 	bl	8012d54 <__locale_ctype_ptr>
 8013edc:	4420      	add	r0, r4
 8013ede:	7843      	ldrb	r3, [r0, #1]
 8013ee0:	f003 0303 	and.w	r3, r3, #3
 8013ee4:	2b01      	cmp	r3, #1
 8013ee6:	d118      	bne.n	8013f1a <__ssvfiscanf_r+0x10a>
 8013ee8:	f04a 0a01 	orr.w	sl, sl, #1
 8013eec:	e015      	b.n	8013f1a <__ssvfiscanf_r+0x10a>
 8013eee:	2c58      	cmp	r4, #88	; 0x58
 8013ef0:	d02f      	beq.n	8013f52 <__ssvfiscanf_r+0x142>
 8013ef2:	2c5b      	cmp	r4, #91	; 0x5b
 8013ef4:	d1f0      	bne.n	8013ed8 <__ssvfiscanf_r+0xc8>
 8013ef6:	9906      	ldr	r1, [sp, #24]
 8013ef8:	a816      	add	r0, sp, #88	; 0x58
 8013efa:	f000 fd47 	bl	801498c <__sccl>
 8013efe:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
 8013f02:	9006      	str	r0, [sp, #24]
 8013f04:	2401      	movs	r4, #1
 8013f06:	e074      	b.n	8013ff2 <__ssvfiscanf_r+0x1e2>
 8013f08:	2c6e      	cmp	r4, #110	; 0x6e
 8013f0a:	f000 80cb 	beq.w	80140a4 <__ssvfiscanf_r+0x294>
 8013f0e:	d812      	bhi.n	8013f36 <__ssvfiscanf_r+0x126>
 8013f10:	2c68      	cmp	r4, #104	; 0x68
 8013f12:	d05a      	beq.n	8013fca <__ssvfiscanf_r+0x1ba>
 8013f14:	d803      	bhi.n	8013f1e <__ssvfiscanf_r+0x10e>
 8013f16:	2c64      	cmp	r4, #100	; 0x64
 8013f18:	d1de      	bne.n	8013ed8 <__ssvfiscanf_r+0xc8>
 8013f1a:	4ba7      	ldr	r3, [pc, #668]	; (80141b8 <__ssvfiscanf_r+0x3a8>)
 8013f1c:	e064      	b.n	8013fe8 <__ssvfiscanf_r+0x1d8>
 8013f1e:	2c69      	cmp	r4, #105	; 0x69
 8013f20:	d01e      	beq.n	8013f60 <__ssvfiscanf_r+0x150>
 8013f22:	2c6c      	cmp	r4, #108	; 0x6c
 8013f24:	d1d8      	bne.n	8013ed8 <__ssvfiscanf_r+0xc8>
 8013f26:	7859      	ldrb	r1, [r3, #1]
 8013f28:	296c      	cmp	r1, #108	; 0x6c
 8013f2a:	d14b      	bne.n	8013fc4 <__ssvfiscanf_r+0x1b4>
 8013f2c:	3302      	adds	r3, #2
 8013f2e:	9306      	str	r3, [sp, #24]
 8013f30:	f04a 0a02 	orr.w	sl, sl, #2
 8013f34:	e044      	b.n	8013fc0 <__ssvfiscanf_r+0x1b0>
 8013f36:	2c73      	cmp	r4, #115	; 0x73
 8013f38:	d05a      	beq.n	8013ff0 <__ssvfiscanf_r+0x1e0>
 8013f3a:	d806      	bhi.n	8013f4a <__ssvfiscanf_r+0x13a>
 8013f3c:	2c6f      	cmp	r4, #111	; 0x6f
 8013f3e:	d04d      	beq.n	8013fdc <__ssvfiscanf_r+0x1cc>
 8013f40:	2c70      	cmp	r4, #112	; 0x70
 8013f42:	d1c9      	bne.n	8013ed8 <__ssvfiscanf_r+0xc8>
 8013f44:	f44a 7a08 	orr.w	sl, sl, #544	; 0x220
 8013f48:	e005      	b.n	8013f56 <__ssvfiscanf_r+0x146>
 8013f4a:	2c75      	cmp	r4, #117	; 0x75
 8013f4c:	d04b      	beq.n	8013fe6 <__ssvfiscanf_r+0x1d6>
 8013f4e:	2c78      	cmp	r4, #120	; 0x78
 8013f50:	d1c2      	bne.n	8013ed8 <__ssvfiscanf_r+0xc8>
 8013f52:	f44a 7a00 	orr.w	sl, sl, #512	; 0x200
 8013f56:	4b99      	ldr	r3, [pc, #612]	; (80141bc <__ssvfiscanf_r+0x3ac>)
 8013f58:	9305      	str	r3, [sp, #20]
 8013f5a:	f04f 0910 	mov.w	r9, #16
 8013f5e:	e003      	b.n	8013f68 <__ssvfiscanf_r+0x158>
 8013f60:	4b95      	ldr	r3, [pc, #596]	; (80141b8 <__ssvfiscanf_r+0x3a8>)
 8013f62:	9305      	str	r3, [sp, #20]
 8013f64:	f04f 0900 	mov.w	r9, #0
 8013f68:	2403      	movs	r4, #3
 8013f6a:	e042      	b.n	8013ff2 <__ssvfiscanf_r+0x1e2>
 8013f6c:	686b      	ldr	r3, [r5, #4]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	dd0a      	ble.n	8013f88 <__ssvfiscanf_r+0x178>
 8013f72:	682b      	ldr	r3, [r5, #0]
 8013f74:	9a06      	ldr	r2, [sp, #24]
 8013f76:	7819      	ldrb	r1, [r3, #0]
 8013f78:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8013f7c:	4291      	cmp	r1, r2
 8013f7e:	d015      	beq.n	8013fac <__ssvfiscanf_r+0x19c>
 8013f80:	9804      	ldr	r0, [sp, #16]
 8013f82:	b057      	add	sp, #348	; 0x15c
 8013f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f88:	4629      	mov	r1, r5
 8013f8a:	9803      	ldr	r0, [sp, #12]
 8013f8c:	f7ff feeb 	bl	8013d66 <__ssrefill_r>
 8013f90:	2800      	cmp	r0, #0
 8013f92:	d0ee      	beq.n	8013f72 <__ssvfiscanf_r+0x162>
 8013f94:	9b04      	ldr	r3, [sp, #16]
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d093      	beq.n	8013ec2 <__ssvfiscanf_r+0xb2>
 8013f9a:	89ab      	ldrh	r3, [r5, #12]
 8013f9c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013fa0:	9b04      	ldr	r3, [sp, #16]
 8013fa2:	bf18      	it	ne
 8013fa4:	f04f 33ff 	movne.w	r3, #4294967295
 8013fa8:	9304      	str	r3, [sp, #16]
 8013faa:	e7e9      	b.n	8013f80 <__ssvfiscanf_r+0x170>
 8013fac:	686a      	ldr	r2, [r5, #4]
 8013fae:	3301      	adds	r3, #1
 8013fb0:	3a01      	subs	r2, #1
 8013fb2:	606a      	str	r2, [r5, #4]
 8013fb4:	602b      	str	r3, [r5, #0]
 8013fb6:	f108 0801 	add.w	r8, r8, #1
 8013fba:	e740      	b.n	8013e3e <__ssvfiscanf_r+0x2e>
 8013fbc:	f04a 0a10 	orr.w	sl, sl, #16
 8013fc0:	9b06      	ldr	r3, [sp, #24]
 8013fc2:	e76c      	b.n	8013e9e <__ssvfiscanf_r+0x8e>
 8013fc4:	f04a 0a01 	orr.w	sl, sl, #1
 8013fc8:	e7fa      	b.n	8013fc0 <__ssvfiscanf_r+0x1b0>
 8013fca:	f04a 0a04 	orr.w	sl, sl, #4
 8013fce:	e7f7      	b.n	8013fc0 <__ssvfiscanf_r+0x1b0>
 8013fd0:	fb02 4707 	mla	r7, r2, r7, r4
 8013fd4:	3f30      	subs	r7, #48	; 0x30
 8013fd6:	e7f3      	b.n	8013fc0 <__ssvfiscanf_r+0x1b0>
 8013fd8:	f04a 0a01 	orr.w	sl, sl, #1
 8013fdc:	4b77      	ldr	r3, [pc, #476]	; (80141bc <__ssvfiscanf_r+0x3ac>)
 8013fde:	9305      	str	r3, [sp, #20]
 8013fe0:	f04f 0908 	mov.w	r9, #8
 8013fe4:	e7c0      	b.n	8013f68 <__ssvfiscanf_r+0x158>
 8013fe6:	4b75      	ldr	r3, [pc, #468]	; (80141bc <__ssvfiscanf_r+0x3ac>)
 8013fe8:	9305      	str	r3, [sp, #20]
 8013fea:	f04f 090a 	mov.w	r9, #10
 8013fee:	e7bb      	b.n	8013f68 <__ssvfiscanf_r+0x158>
 8013ff0:	2402      	movs	r4, #2
 8013ff2:	686b      	ldr	r3, [r5, #4]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	dd71      	ble.n	80140dc <__ssvfiscanf_r+0x2cc>
 8013ff8:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8013ffc:	d107      	bne.n	801400e <__ssvfiscanf_r+0x1fe>
 8013ffe:	f7fe fea9 	bl	8012d54 <__locale_ctype_ptr>
 8014002:	682b      	ldr	r3, [r5, #0]
 8014004:	781a      	ldrb	r2, [r3, #0]
 8014006:	4410      	add	r0, r2
 8014008:	7842      	ldrb	r2, [r0, #1]
 801400a:	0711      	lsls	r1, r2, #28
 801400c:	d46d      	bmi.n	80140ea <__ssvfiscanf_r+0x2da>
 801400e:	2c02      	cmp	r4, #2
 8014010:	f000 8113 	beq.w	801423a <__ssvfiscanf_r+0x42a>
 8014014:	2c03      	cmp	r4, #3
 8014016:	f000 81c7 	beq.w	80143a8 <__ssvfiscanf_r+0x598>
 801401a:	2c01      	cmp	r4, #1
 801401c:	f00a 0410 	and.w	r4, sl, #16
 8014020:	f000 80ba 	beq.w	8014198 <__ssvfiscanf_r+0x388>
 8014024:	2f00      	cmp	r7, #0
 8014026:	bf08      	it	eq
 8014028:	2701      	moveq	r7, #1
 801402a:	f01a 0a01 	ands.w	sl, sl, #1
 801402e:	f000 8087 	beq.w	8014140 <__ssvfiscanf_r+0x330>
 8014032:	2208      	movs	r2, #8
 8014034:	2100      	movs	r1, #0
 8014036:	a80a      	add	r0, sp, #40	; 0x28
 8014038:	f7f9 f997 	bl	800d36a <memset>
 801403c:	2c00      	cmp	r4, #0
 801403e:	d166      	bne.n	801410e <__ssvfiscanf_r+0x2fe>
 8014040:	f8d6 b000 	ldr.w	fp, [r6]
 8014044:	3604      	adds	r6, #4
 8014046:	2300      	movs	r3, #0
 8014048:	2f00      	cmp	r7, #0
 801404a:	d071      	beq.n	8014130 <__ssvfiscanf_r+0x320>
 801404c:	9307      	str	r3, [sp, #28]
 801404e:	f7fe fe6f 	bl	8012d30 <__locale_mb_cur_max>
 8014052:	9b07      	ldr	r3, [sp, #28]
 8014054:	4283      	cmp	r3, r0
 8014056:	d09d      	beq.n	8013f94 <__ssvfiscanf_r+0x184>
 8014058:	682a      	ldr	r2, [r5, #0]
 801405a:	a80c      	add	r0, sp, #48	; 0x30
 801405c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8014060:	54c1      	strb	r1, [r0, r3]
 8014062:	f103 0a01 	add.w	sl, r3, #1
 8014066:	686b      	ldr	r3, [r5, #4]
 8014068:	3b01      	subs	r3, #1
 801406a:	e885 000c 	stmia.w	r5, {r2, r3}
 801406e:	ab0a      	add	r3, sp, #40	; 0x28
 8014070:	4602      	mov	r2, r0
 8014072:	9300      	str	r3, [sp, #0]
 8014074:	4659      	mov	r1, fp
 8014076:	4653      	mov	r3, sl
 8014078:	9803      	ldr	r0, [sp, #12]
 801407a:	f000 fc49 	bl	8014910 <_mbrtowc_r>
 801407e:	1c42      	adds	r2, r0, #1
 8014080:	d088      	beq.n	8013f94 <__ssvfiscanf_r+0x184>
 8014082:	2800      	cmp	r0, #0
 8014084:	d146      	bne.n	8014114 <__ssvfiscanf_r+0x304>
 8014086:	b90c      	cbnz	r4, 801408c <__ssvfiscanf_r+0x27c>
 8014088:	f8cb 4000 	str.w	r4, [fp]
 801408c:	44d0      	add	r8, sl
 801408e:	3f01      	subs	r7, #1
 8014090:	b90c      	cbnz	r4, 8014096 <__ssvfiscanf_r+0x286>
 8014092:	f10b 0b04 	add.w	fp, fp, #4
 8014096:	f04f 0a00 	mov.w	sl, #0
 801409a:	e03d      	b.n	8014118 <__ssvfiscanf_r+0x308>
 801409c:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
 80140a0:	2400      	movs	r4, #0
 80140a2:	e7a6      	b.n	8013ff2 <__ssvfiscanf_r+0x1e2>
 80140a4:	f01a 0f10 	tst.w	sl, #16
 80140a8:	f47f aec9 	bne.w	8013e3e <__ssvfiscanf_r+0x2e>
 80140ac:	f01a 0f04 	tst.w	sl, #4
 80140b0:	6832      	ldr	r2, [r6, #0]
 80140b2:	f106 0304 	add.w	r3, r6, #4
 80140b6:	d003      	beq.n	80140c0 <__ssvfiscanf_r+0x2b0>
 80140b8:	f8a2 8000 	strh.w	r8, [r2]
 80140bc:	461e      	mov	r6, r3
 80140be:	e6be      	b.n	8013e3e <__ssvfiscanf_r+0x2e>
 80140c0:	f01a 0f01 	tst.w	sl, #1
 80140c4:	d002      	beq.n	80140cc <__ssvfiscanf_r+0x2bc>
 80140c6:	f8c2 8000 	str.w	r8, [r2]
 80140ca:	e7f7      	b.n	80140bc <__ssvfiscanf_r+0x2ac>
 80140cc:	f01a 0f02 	tst.w	sl, #2
 80140d0:	d0f9      	beq.n	80140c6 <__ssvfiscanf_r+0x2b6>
 80140d2:	4640      	mov	r0, r8
 80140d4:	17c1      	asrs	r1, r0, #31
 80140d6:	e9c2 0100 	strd	r0, r1, [r2]
 80140da:	e7ef      	b.n	80140bc <__ssvfiscanf_r+0x2ac>
 80140dc:	4629      	mov	r1, r5
 80140de:	9803      	ldr	r0, [sp, #12]
 80140e0:	f7ff fe41 	bl	8013d66 <__ssrefill_r>
 80140e4:	2800      	cmp	r0, #0
 80140e6:	d087      	beq.n	8013ff8 <__ssvfiscanf_r+0x1e8>
 80140e8:	e754      	b.n	8013f94 <__ssvfiscanf_r+0x184>
 80140ea:	686a      	ldr	r2, [r5, #4]
 80140ec:	3a01      	subs	r2, #1
 80140ee:	2a00      	cmp	r2, #0
 80140f0:	f108 0801 	add.w	r8, r8, #1
 80140f4:	606a      	str	r2, [r5, #4]
 80140f6:	dd02      	ble.n	80140fe <__ssvfiscanf_r+0x2ee>
 80140f8:	3301      	adds	r3, #1
 80140fa:	602b      	str	r3, [r5, #0]
 80140fc:	e77f      	b.n	8013ffe <__ssvfiscanf_r+0x1ee>
 80140fe:	4629      	mov	r1, r5
 8014100:	9803      	ldr	r0, [sp, #12]
 8014102:	f7ff fe30 	bl	8013d66 <__ssrefill_r>
 8014106:	2800      	cmp	r0, #0
 8014108:	f43f af79 	beq.w	8013ffe <__ssvfiscanf_r+0x1ee>
 801410c:	e742      	b.n	8013f94 <__ssvfiscanf_r+0x184>
 801410e:	f04f 0b00 	mov.w	fp, #0
 8014112:	e798      	b.n	8014046 <__ssvfiscanf_r+0x236>
 8014114:	3002      	adds	r0, #2
 8014116:	d1b9      	bne.n	801408c <__ssvfiscanf_r+0x27c>
 8014118:	686b      	ldr	r3, [r5, #4]
 801411a:	2b00      	cmp	r3, #0
 801411c:	dc0e      	bgt.n	801413c <__ssvfiscanf_r+0x32c>
 801411e:	4629      	mov	r1, r5
 8014120:	9803      	ldr	r0, [sp, #12]
 8014122:	f7ff fe20 	bl	8013d66 <__ssrefill_r>
 8014126:	b148      	cbz	r0, 801413c <__ssvfiscanf_r+0x32c>
 8014128:	f1ba 0f00 	cmp.w	sl, #0
 801412c:	f47f af32 	bne.w	8013f94 <__ssvfiscanf_r+0x184>
 8014130:	2c00      	cmp	r4, #0
 8014132:	f47f ae84 	bne.w	8013e3e <__ssvfiscanf_r+0x2e>
 8014136:	9b04      	ldr	r3, [sp, #16]
 8014138:	3301      	adds	r3, #1
 801413a:	e67f      	b.n	8013e3c <__ssvfiscanf_r+0x2c>
 801413c:	4653      	mov	r3, sl
 801413e:	e783      	b.n	8014048 <__ssvfiscanf_r+0x238>
 8014140:	b1cc      	cbz	r4, 8014176 <__ssvfiscanf_r+0x366>
 8014142:	4654      	mov	r4, sl
 8014144:	686b      	ldr	r3, [r5, #4]
 8014146:	682a      	ldr	r2, [r5, #0]
 8014148:	42bb      	cmp	r3, r7
 801414a:	da0e      	bge.n	801416a <__ssvfiscanf_r+0x35a>
 801414c:	441c      	add	r4, r3
 801414e:	1aff      	subs	r7, r7, r3
 8014150:	4413      	add	r3, r2
 8014152:	602b      	str	r3, [r5, #0]
 8014154:	4629      	mov	r1, r5
 8014156:	9803      	ldr	r0, [sp, #12]
 8014158:	f7ff fe05 	bl	8013d66 <__ssrefill_r>
 801415c:	2800      	cmp	r0, #0
 801415e:	d0f1      	beq.n	8014144 <__ssvfiscanf_r+0x334>
 8014160:	2c00      	cmp	r4, #0
 8014162:	f43f af17 	beq.w	8013f94 <__ssvfiscanf_r+0x184>
 8014166:	44a0      	add	r8, r4
 8014168:	e669      	b.n	8013e3e <__ssvfiscanf_r+0x2e>
 801416a:	1bdb      	subs	r3, r3, r7
 801416c:	443c      	add	r4, r7
 801416e:	4417      	add	r7, r2
 8014170:	606b      	str	r3, [r5, #4]
 8014172:	602f      	str	r7, [r5, #0]
 8014174:	e7f7      	b.n	8014166 <__ssvfiscanf_r+0x356>
 8014176:	9500      	str	r5, [sp, #0]
 8014178:	463b      	mov	r3, r7
 801417a:	2201      	movs	r2, #1
 801417c:	6831      	ldr	r1, [r6, #0]
 801417e:	9803      	ldr	r0, [sp, #12]
 8014180:	1d34      	adds	r4, r6, #4
 8014182:	f7ff fe0d 	bl	8013da0 <_sfread_r>
 8014186:	2800      	cmp	r0, #0
 8014188:	f43f af04 	beq.w	8013f94 <__ssvfiscanf_r+0x184>
 801418c:	4480      	add	r8, r0
 801418e:	9b04      	ldr	r3, [sp, #16]
 8014190:	3301      	adds	r3, #1
 8014192:	9304      	str	r3, [sp, #16]
 8014194:	4626      	mov	r6, r4
 8014196:	e652      	b.n	8013e3e <__ssvfiscanf_r+0x2e>
 8014198:	2f00      	cmp	r7, #0
 801419a:	bf08      	it	eq
 801419c:	f04f 37ff 	moveq.w	r7, #4294967295
 80141a0:	b1fc      	cbz	r4, 80141e2 <__ssvfiscanf_r+0x3d2>
 80141a2:	2400      	movs	r4, #0
 80141a4:	f10d 0a58 	add.w	sl, sp, #88	; 0x58
 80141a8:	682b      	ldr	r3, [r5, #0]
 80141aa:	781a      	ldrb	r2, [r3, #0]
 80141ac:	f81a 2002 	ldrb.w	r2, [sl, r2]
 80141b0:	b932      	cbnz	r2, 80141c0 <__ssvfiscanf_r+0x3b0>
 80141b2:	2c00      	cmp	r4, #0
 80141b4:	d1d7      	bne.n	8014166 <__ssvfiscanf_r+0x356>
 80141b6:	e6e3      	b.n	8013f80 <__ssvfiscanf_r+0x170>
 80141b8:	0800e979 	.word	0x0800e979
 80141bc:	08013ba9 	.word	0x08013ba9
 80141c0:	686a      	ldr	r2, [r5, #4]
 80141c2:	3401      	adds	r4, #1
 80141c4:	3a01      	subs	r2, #1
 80141c6:	3301      	adds	r3, #1
 80141c8:	42a7      	cmp	r7, r4
 80141ca:	606a      	str	r2, [r5, #4]
 80141cc:	602b      	str	r3, [r5, #0]
 80141ce:	d0ca      	beq.n	8014166 <__ssvfiscanf_r+0x356>
 80141d0:	2a00      	cmp	r2, #0
 80141d2:	dce9      	bgt.n	80141a8 <__ssvfiscanf_r+0x398>
 80141d4:	4629      	mov	r1, r5
 80141d6:	9803      	ldr	r0, [sp, #12]
 80141d8:	f7ff fdc5 	bl	8013d66 <__ssrefill_r>
 80141dc:	2800      	cmp	r0, #0
 80141de:	d0e3      	beq.n	80141a8 <__ssvfiscanf_r+0x398>
 80141e0:	e7c1      	b.n	8014166 <__ssvfiscanf_r+0x356>
 80141e2:	6834      	ldr	r4, [r6, #0]
 80141e4:	f106 0a04 	add.w	sl, r6, #4
 80141e8:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
 80141ec:	4626      	mov	r6, r4
 80141ee:	682b      	ldr	r3, [r5, #0]
 80141f0:	781a      	ldrb	r2, [r3, #0]
 80141f2:	f81b 2002 	ldrb.w	r2, [fp, r2]
 80141f6:	b1b2      	cbz	r2, 8014226 <__ssvfiscanf_r+0x416>
 80141f8:	686a      	ldr	r2, [r5, #4]
 80141fa:	3a01      	subs	r2, #1
 80141fc:	606a      	str	r2, [r5, #4]
 80141fe:	1c5a      	adds	r2, r3, #1
 8014200:	602a      	str	r2, [r5, #0]
 8014202:	781b      	ldrb	r3, [r3, #0]
 8014204:	f806 3b01 	strb.w	r3, [r6], #1
 8014208:	1bbb      	subs	r3, r7, r6
 801420a:	42dc      	cmn	r4, r3
 801420c:	d00b      	beq.n	8014226 <__ssvfiscanf_r+0x416>
 801420e:	686b      	ldr	r3, [r5, #4]
 8014210:	2b00      	cmp	r3, #0
 8014212:	dcec      	bgt.n	80141ee <__ssvfiscanf_r+0x3de>
 8014214:	4629      	mov	r1, r5
 8014216:	9803      	ldr	r0, [sp, #12]
 8014218:	f7ff fda5 	bl	8013d66 <__ssrefill_r>
 801421c:	2800      	cmp	r0, #0
 801421e:	d0e6      	beq.n	80141ee <__ssvfiscanf_r+0x3de>
 8014220:	42b4      	cmp	r4, r6
 8014222:	f43f aeb7 	beq.w	8013f94 <__ssvfiscanf_r+0x184>
 8014226:	1b34      	subs	r4, r6, r4
 8014228:	f43f aeaa 	beq.w	8013f80 <__ssvfiscanf_r+0x170>
 801422c:	2300      	movs	r3, #0
 801422e:	7033      	strb	r3, [r6, #0]
 8014230:	9b04      	ldr	r3, [sp, #16]
 8014232:	3301      	adds	r3, #1
 8014234:	9304      	str	r3, [sp, #16]
 8014236:	4656      	mov	r6, sl
 8014238:	e795      	b.n	8014166 <__ssvfiscanf_r+0x356>
 801423a:	2f00      	cmp	r7, #0
 801423c:	bf08      	it	eq
 801423e:	f04f 37ff 	moveq.w	r7, #4294967295
 8014242:	f01a 0b01 	ands.w	fp, sl, #1
 8014246:	f00a 0410 	and.w	r4, sl, #16
 801424a:	d06a      	beq.n	8014322 <__ssvfiscanf_r+0x512>
 801424c:	2208      	movs	r2, #8
 801424e:	2100      	movs	r1, #0
 8014250:	a80a      	add	r0, sp, #40	; 0x28
 8014252:	f7f9 f88a 	bl	800d36a <memset>
 8014256:	2c00      	cmp	r4, #0
 8014258:	d13e      	bne.n	80142d8 <__ssvfiscanf_r+0x4c8>
 801425a:	f8d6 a000 	ldr.w	sl, [r6]
 801425e:	3604      	adds	r6, #4
 8014260:	2300      	movs	r3, #0
 8014262:	9307      	str	r3, [sp, #28]
 8014264:	f7fe fd76 	bl	8012d54 <__locale_ctype_ptr>
 8014268:	682a      	ldr	r2, [r5, #0]
 801426a:	7812      	ldrb	r2, [r2, #0]
 801426c:	4410      	add	r0, r2
 801426e:	7842      	ldrb	r2, [r0, #1]
 8014270:	0711      	lsls	r1, r2, #28
 8014272:	d42b      	bmi.n	80142cc <__ssvfiscanf_r+0x4bc>
 8014274:	9b07      	ldr	r3, [sp, #28]
 8014276:	b34f      	cbz	r7, 80142cc <__ssvfiscanf_r+0x4bc>
 8014278:	9307      	str	r3, [sp, #28]
 801427a:	f7fe fd59 	bl	8012d30 <__locale_mb_cur_max>
 801427e:	9b07      	ldr	r3, [sp, #28]
 8014280:	4283      	cmp	r3, r0
 8014282:	f43f ae87 	beq.w	8013f94 <__ssvfiscanf_r+0x184>
 8014286:	682a      	ldr	r2, [r5, #0]
 8014288:	a80c      	add	r0, sp, #48	; 0x30
 801428a:	f812 1b01 	ldrb.w	r1, [r2], #1
 801428e:	54c1      	strb	r1, [r0, r3]
 8014290:	f103 0b01 	add.w	fp, r3, #1
 8014294:	686b      	ldr	r3, [r5, #4]
 8014296:	3b01      	subs	r3, #1
 8014298:	e885 000c 	stmia.w	r5, {r2, r3}
 801429c:	ab0a      	add	r3, sp, #40	; 0x28
 801429e:	9300      	str	r3, [sp, #0]
 80142a0:	4602      	mov	r2, r0
 80142a2:	465b      	mov	r3, fp
 80142a4:	4651      	mov	r1, sl
 80142a6:	9803      	ldr	r0, [sp, #12]
 80142a8:	f000 fb32 	bl	8014910 <_mbrtowc_r>
 80142ac:	1c43      	adds	r3, r0, #1
 80142ae:	f43f ae71 	beq.w	8013f94 <__ssvfiscanf_r+0x184>
 80142b2:	b9a0      	cbnz	r0, 80142de <__ssvfiscanf_r+0x4ce>
 80142b4:	f8ca 0000 	str.w	r0, [sl]
 80142b8:	f8da 0000 	ldr.w	r0, [sl]
 80142bc:	f000 fb08 	bl	80148d0 <iswspace>
 80142c0:	4603      	mov	r3, r0
 80142c2:	b1c8      	cbz	r0, 80142f8 <__ssvfiscanf_r+0x4e8>
 80142c4:	af0c      	add	r7, sp, #48	; 0x30
 80142c6:	f1bb 0f00 	cmp.w	fp, #0
 80142ca:	d10c      	bne.n	80142e6 <__ssvfiscanf_r+0x4d6>
 80142cc:	2c00      	cmp	r4, #0
 80142ce:	f47f adb6 	bne.w	8013e3e <__ssvfiscanf_r+0x2e>
 80142d2:	f8ca 4000 	str.w	r4, [sl]
 80142d6:	e72e      	b.n	8014136 <__ssvfiscanf_r+0x326>
 80142d8:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
 80142dc:	e7c0      	b.n	8014260 <__ssvfiscanf_r+0x450>
 80142de:	3002      	adds	r0, #2
 80142e0:	d1ea      	bne.n	80142b8 <__ssvfiscanf_r+0x4a8>
 80142e2:	465b      	mov	r3, fp
 80142e4:	e00e      	b.n	8014304 <__ssvfiscanf_r+0x4f4>
 80142e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80142ea:	462a      	mov	r2, r5
 80142ec:	f817 100b 	ldrb.w	r1, [r7, fp]
 80142f0:	9803      	ldr	r0, [sp, #12]
 80142f2:	f7ff fcfb 	bl	8013cec <_sungetc_r>
 80142f6:	e7e6      	b.n	80142c6 <__ssvfiscanf_r+0x4b6>
 80142f8:	44d8      	add	r8, fp
 80142fa:	3f01      	subs	r7, #1
 80142fc:	b914      	cbnz	r4, 8014304 <__ssvfiscanf_r+0x4f4>
 80142fe:	f10a 0a04 	add.w	sl, sl, #4
 8014302:	4623      	mov	r3, r4
 8014304:	686a      	ldr	r2, [r5, #4]
 8014306:	2a00      	cmp	r2, #0
 8014308:	dcab      	bgt.n	8014262 <__ssvfiscanf_r+0x452>
 801430a:	4629      	mov	r1, r5
 801430c:	9803      	ldr	r0, [sp, #12]
 801430e:	9307      	str	r3, [sp, #28]
 8014310:	f7ff fd29 	bl	8013d66 <__ssrefill_r>
 8014314:	9b07      	ldr	r3, [sp, #28]
 8014316:	2800      	cmp	r0, #0
 8014318:	d0a3      	beq.n	8014262 <__ssvfiscanf_r+0x452>
 801431a:	2b00      	cmp	r3, #0
 801431c:	f47f ae3a 	bne.w	8013f94 <__ssvfiscanf_r+0x184>
 8014320:	e7d4      	b.n	80142cc <__ssvfiscanf_r+0x4bc>
 8014322:	2c00      	cmp	r4, #0
 8014324:	d136      	bne.n	8014394 <__ssvfiscanf_r+0x584>
 8014326:	f8d6 a000 	ldr.w	sl, [r6]
 801432a:	1d34      	adds	r4, r6, #4
 801432c:	4656      	mov	r6, sl
 801432e:	f7fe fd11 	bl	8012d54 <__locale_ctype_ptr>
 8014332:	682a      	ldr	r2, [r5, #0]
 8014334:	7813      	ldrb	r3, [r2, #0]
 8014336:	4418      	add	r0, r3
 8014338:	7843      	ldrb	r3, [r0, #1]
 801433a:	071b      	lsls	r3, r3, #28
 801433c:	d414      	bmi.n	8014368 <__ssvfiscanf_r+0x558>
 801433e:	686b      	ldr	r3, [r5, #4]
 8014340:	3b01      	subs	r3, #1
 8014342:	606b      	str	r3, [r5, #4]
 8014344:	1c53      	adds	r3, r2, #1
 8014346:	602b      	str	r3, [r5, #0]
 8014348:	7813      	ldrb	r3, [r2, #0]
 801434a:	f806 3b01 	strb.w	r3, [r6], #1
 801434e:	1bbb      	subs	r3, r7, r6
 8014350:	eb1a 0f03 	cmn.w	sl, r3
 8014354:	d008      	beq.n	8014368 <__ssvfiscanf_r+0x558>
 8014356:	686b      	ldr	r3, [r5, #4]
 8014358:	2b00      	cmp	r3, #0
 801435a:	dce8      	bgt.n	801432e <__ssvfiscanf_r+0x51e>
 801435c:	4629      	mov	r1, r5
 801435e:	9803      	ldr	r0, [sp, #12]
 8014360:	f7ff fd01 	bl	8013d66 <__ssrefill_r>
 8014364:	2800      	cmp	r0, #0
 8014366:	d0e2      	beq.n	801432e <__ssvfiscanf_r+0x51e>
 8014368:	2300      	movs	r3, #0
 801436a:	7033      	strb	r3, [r6, #0]
 801436c:	eba6 060a 	sub.w	r6, r6, sl
 8014370:	44b0      	add	r8, r6
 8014372:	e70c      	b.n	801418e <__ssvfiscanf_r+0x37e>
 8014374:	686a      	ldr	r2, [r5, #4]
 8014376:	f10b 0b01 	add.w	fp, fp, #1
 801437a:	3a01      	subs	r2, #1
 801437c:	3301      	adds	r3, #1
 801437e:	455f      	cmp	r7, fp
 8014380:	606a      	str	r2, [r5, #4]
 8014382:	602b      	str	r3, [r5, #0]
 8014384:	d00e      	beq.n	80143a4 <__ssvfiscanf_r+0x594>
 8014386:	2a00      	cmp	r2, #0
 8014388:	dc04      	bgt.n	8014394 <__ssvfiscanf_r+0x584>
 801438a:	4629      	mov	r1, r5
 801438c:	9803      	ldr	r0, [sp, #12]
 801438e:	f7ff fcea 	bl	8013d66 <__ssrefill_r>
 8014392:	b938      	cbnz	r0, 80143a4 <__ssvfiscanf_r+0x594>
 8014394:	f7fe fcde 	bl	8012d54 <__locale_ctype_ptr>
 8014398:	682b      	ldr	r3, [r5, #0]
 801439a:	781a      	ldrb	r2, [r3, #0]
 801439c:	4410      	add	r0, r2
 801439e:	7842      	ldrb	r2, [r0, #1]
 80143a0:	0712      	lsls	r2, r2, #28
 80143a2:	d5e7      	bpl.n	8014374 <__ssvfiscanf_r+0x564>
 80143a4:	44d8      	add	r8, fp
 80143a6:	e54a      	b.n	8013e3e <__ssvfiscanf_r+0x2e>
 80143a8:	1e7b      	subs	r3, r7, #1
 80143aa:	2b26      	cmp	r3, #38	; 0x26
 80143ac:	bf88      	it	hi
 80143ae:	f1a7 0327 	subhi.w	r3, r7, #39	; 0x27
 80143b2:	f44a 6458 	orr.w	r4, sl, #3456	; 0xd80
 80143b6:	bf8c      	ite	hi
 80143b8:	2727      	movhi	r7, #39	; 0x27
 80143ba:	2300      	movls	r3, #0
 80143bc:	f04f 0b00 	mov.w	fp, #0
 80143c0:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 80143c4:	6829      	ldr	r1, [r5, #0]
 80143c6:	780a      	ldrb	r2, [r1, #0]
 80143c8:	2a39      	cmp	r2, #57	; 0x39
 80143ca:	d82d      	bhi.n	8014428 <__ssvfiscanf_r+0x618>
 80143cc:	2a38      	cmp	r2, #56	; 0x38
 80143ce:	d270      	bcs.n	80144b2 <__ssvfiscanf_r+0x6a2>
 80143d0:	2a30      	cmp	r2, #48	; 0x30
 80143d2:	d045      	beq.n	8014460 <__ssvfiscanf_r+0x650>
 80143d4:	d867      	bhi.n	80144a6 <__ssvfiscanf_r+0x696>
 80143d6:	2a2b      	cmp	r2, #43	; 0x2b
 80143d8:	d072      	beq.n	80144c0 <__ssvfiscanf_r+0x6b0>
 80143da:	2a2d      	cmp	r2, #45	; 0x2d
 80143dc:	d070      	beq.n	80144c0 <__ssvfiscanf_r+0x6b0>
 80143de:	05e3      	lsls	r3, r4, #23
 80143e0:	d50f      	bpl.n	8014402 <__ssvfiscanf_r+0x5f2>
 80143e2:	ab0c      	add	r3, sp, #48	; 0x30
 80143e4:	459a      	cmp	sl, r3
 80143e6:	d908      	bls.n	80143fa <__ssvfiscanf_r+0x5ea>
 80143e8:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
 80143ec:	9803      	ldr	r0, [sp, #12]
 80143ee:	462a      	mov	r2, r5
 80143f0:	f7ff fc7c 	bl	8013cec <_sungetc_r>
 80143f4:	f10a 37ff 	add.w	r7, sl, #4294967295
 80143f8:	46ba      	mov	sl, r7
 80143fa:	ab0c      	add	r3, sp, #48	; 0x30
 80143fc:	459a      	cmp	sl, r3
 80143fe:	f43f adbf 	beq.w	8013f80 <__ssvfiscanf_r+0x170>
 8014402:	f014 0210 	ands.w	r2, r4, #16
 8014406:	f040 8085 	bne.w	8014514 <__ssvfiscanf_r+0x704>
 801440a:	464b      	mov	r3, r9
 801440c:	a90c      	add	r1, sp, #48	; 0x30
 801440e:	9803      	ldr	r0, [sp, #12]
 8014410:	9f05      	ldr	r7, [sp, #20]
 8014412:	f88a 2000 	strb.w	r2, [sl]
 8014416:	47b8      	blx	r7
 8014418:	f014 0f20 	tst.w	r4, #32
 801441c:	f106 0304 	add.w	r3, r6, #4
 8014420:	d05c      	beq.n	80144dc <__ssvfiscanf_r+0x6cc>
 8014422:	6832      	ldr	r2, [r6, #0]
 8014424:	6010      	str	r0, [r2, #0]
 8014426:	e05d      	b.n	80144e4 <__ssvfiscanf_r+0x6d4>
 8014428:	2a58      	cmp	r2, #88	; 0x58
 801442a:	d00d      	beq.n	8014448 <__ssvfiscanf_r+0x638>
 801442c:	d806      	bhi.n	801443c <__ssvfiscanf_r+0x62c>
 801442e:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
 8014432:	2805      	cmp	r0, #5
 8014434:	d8d3      	bhi.n	80143de <__ssvfiscanf_r+0x5ce>
 8014436:	f1b9 0f0a 	cmp.w	r9, #10
 801443a:	e03f      	b.n	80144bc <__ssvfiscanf_r+0x6ac>
 801443c:	2a61      	cmp	r2, #97	; 0x61
 801443e:	d3ce      	bcc.n	80143de <__ssvfiscanf_r+0x5ce>
 8014440:	2a66      	cmp	r2, #102	; 0x66
 8014442:	d9f8      	bls.n	8014436 <__ssvfiscanf_r+0x626>
 8014444:	2a78      	cmp	r2, #120	; 0x78
 8014446:	d1ca      	bne.n	80143de <__ssvfiscanf_r+0x5ce>
 8014448:	f404 60c0 	and.w	r0, r4, #1536	; 0x600
 801444c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8014450:	d1c5      	bne.n	80143de <__ssvfiscanf_r+0x5ce>
 8014452:	f424 7400 	bic.w	r4, r4, #512	; 0x200
 8014456:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
 801445a:	f04f 0910 	mov.w	r9, #16
 801445e:	e00c      	b.n	801447a <__ssvfiscanf_r+0x66a>
 8014460:	0520      	lsls	r0, r4, #20
 8014462:	d50a      	bpl.n	801447a <__ssvfiscanf_r+0x66a>
 8014464:	f1b9 0f00 	cmp.w	r9, #0
 8014468:	d103      	bne.n	8014472 <__ssvfiscanf_r+0x662>
 801446a:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 801446e:	f04f 0908 	mov.w	r9, #8
 8014472:	0560      	lsls	r0, r4, #21
 8014474:	d506      	bpl.n	8014484 <__ssvfiscanf_r+0x674>
 8014476:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
 801447a:	f88a 2000 	strb.w	r2, [sl]
 801447e:	f10a 0a01 	add.w	sl, sl, #1
 8014482:	e006      	b.n	8014492 <__ssvfiscanf_r+0x682>
 8014484:	f424 7460 	bic.w	r4, r4, #896	; 0x380
 8014488:	b10b      	cbz	r3, 801448e <__ssvfiscanf_r+0x67e>
 801448a:	3b01      	subs	r3, #1
 801448c:	3701      	adds	r7, #1
 801448e:	f10b 0b01 	add.w	fp, fp, #1
 8014492:	686a      	ldr	r2, [r5, #4]
 8014494:	3a01      	subs	r2, #1
 8014496:	2a00      	cmp	r2, #0
 8014498:	606a      	str	r2, [r5, #4]
 801449a:	dd16      	ble.n	80144ca <__ssvfiscanf_r+0x6ba>
 801449c:	3101      	adds	r1, #1
 801449e:	6029      	str	r1, [r5, #0]
 80144a0:	3f01      	subs	r7, #1
 80144a2:	d18f      	bne.n	80143c4 <__ssvfiscanf_r+0x5b4>
 80144a4:	e79b      	b.n	80143de <__ssvfiscanf_r+0x5ce>
 80144a6:	481f      	ldr	r0, [pc, #124]	; (8014524 <__ssvfiscanf_r+0x714>)
 80144a8:	f930 9019 	ldrsh.w	r9, [r0, r9, lsl #1]
 80144ac:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
 80144b0:	e7e3      	b.n	801447a <__ssvfiscanf_r+0x66a>
 80144b2:	481c      	ldr	r0, [pc, #112]	; (8014524 <__ssvfiscanf_r+0x714>)
 80144b4:	f930 9019 	ldrsh.w	r9, [r0, r9, lsl #1]
 80144b8:	f1b9 0f08 	cmp.w	r9, #8
 80144bc:	dcf6      	bgt.n	80144ac <__ssvfiscanf_r+0x69c>
 80144be:	e78e      	b.n	80143de <__ssvfiscanf_r+0x5ce>
 80144c0:	0620      	lsls	r0, r4, #24
 80144c2:	d58c      	bpl.n	80143de <__ssvfiscanf_r+0x5ce>
 80144c4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 80144c8:	e7d7      	b.n	801447a <__ssvfiscanf_r+0x66a>
 80144ca:	4629      	mov	r1, r5
 80144cc:	9803      	ldr	r0, [sp, #12]
 80144ce:	9307      	str	r3, [sp, #28]
 80144d0:	f7ff fc49 	bl	8013d66 <__ssrefill_r>
 80144d4:	9b07      	ldr	r3, [sp, #28]
 80144d6:	2800      	cmp	r0, #0
 80144d8:	d0e2      	beq.n	80144a0 <__ssvfiscanf_r+0x690>
 80144da:	e780      	b.n	80143de <__ssvfiscanf_r+0x5ce>
 80144dc:	0767      	lsls	r7, r4, #29
 80144de:	d503      	bpl.n	80144e8 <__ssvfiscanf_r+0x6d8>
 80144e0:	6832      	ldr	r2, [r6, #0]
 80144e2:	8010      	strh	r0, [r2, #0]
 80144e4:	461e      	mov	r6, r3
 80144e6:	e012      	b.n	801450e <__ssvfiscanf_r+0x6fe>
 80144e8:	f014 0201 	ands.w	r2, r4, #1
 80144ec:	d199      	bne.n	8014422 <__ssvfiscanf_r+0x612>
 80144ee:	07a1      	lsls	r1, r4, #30
 80144f0:	d597      	bpl.n	8014422 <__ssvfiscanf_r+0x612>
 80144f2:	9b05      	ldr	r3, [sp, #20]
 80144f4:	9803      	ldr	r0, [sp, #12]
 80144f6:	4619      	mov	r1, r3
 80144f8:	4b0b      	ldr	r3, [pc, #44]	; (8014528 <__ssvfiscanf_r+0x718>)
 80144fa:	4299      	cmp	r1, r3
 80144fc:	464b      	mov	r3, r9
 80144fe:	a90c      	add	r1, sp, #48	; 0x30
 8014500:	d10d      	bne.n	801451e <__ssvfiscanf_r+0x70e>
 8014502:	f000 fbc9 	bl	8014c98 <_strtoull_r>
 8014506:	6833      	ldr	r3, [r6, #0]
 8014508:	e9c3 0100 	strd	r0, r1, [r3]
 801450c:	3604      	adds	r6, #4
 801450e:	9b04      	ldr	r3, [sp, #16]
 8014510:	3301      	adds	r3, #1
 8014512:	9304      	str	r3, [sp, #16]
 8014514:	ab0c      	add	r3, sp, #48	; 0x30
 8014516:	ebaa 0a03 	sub.w	sl, sl, r3
 801451a:	44d3      	add	fp, sl
 801451c:	e742      	b.n	80143a4 <__ssvfiscanf_r+0x594>
 801451e:	f000 fb09 	bl	8014b34 <_strtoll_r>
 8014522:	e7f0      	b.n	8014506 <__ssvfiscanf_r+0x6f6>
 8014524:	08015774 	.word	0x08015774
 8014528:	08013ba9 	.word	0x08013ba9

0801452c <__submore>:
 801452c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014530:	460c      	mov	r4, r1
 8014532:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014534:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014538:	4299      	cmp	r1, r3
 801453a:	d11e      	bne.n	801457a <__submore+0x4e>
 801453c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014540:	f7f8 fcfa 	bl	800cf38 <_malloc_r>
 8014544:	b918      	cbnz	r0, 801454e <__submore+0x22>
 8014546:	f04f 30ff 	mov.w	r0, #4294967295
 801454a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801454e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014552:	63a3      	str	r3, [r4, #56]	; 0x38
 8014554:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8014558:	6360      	str	r0, [r4, #52]	; 0x34
 801455a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801455e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8014562:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8014566:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801456a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801456e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8014572:	6020      	str	r0, [r4, #0]
 8014574:	2000      	movs	r0, #0
 8014576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801457a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801457c:	0077      	lsls	r7, r6, #1
 801457e:	463a      	mov	r2, r7
 8014580:	f7ff f88c 	bl	801369c <_realloc_r>
 8014584:	4605      	mov	r5, r0
 8014586:	2800      	cmp	r0, #0
 8014588:	d0dd      	beq.n	8014546 <__submore+0x1a>
 801458a:	eb00 0806 	add.w	r8, r0, r6
 801458e:	4601      	mov	r1, r0
 8014590:	4632      	mov	r2, r6
 8014592:	4640      	mov	r0, r8
 8014594:	f7f8 fede 	bl	800d354 <memcpy>
 8014598:	f8c4 8000 	str.w	r8, [r4]
 801459c:	6365      	str	r5, [r4, #52]	; 0x34
 801459e:	63a7      	str	r7, [r4, #56]	; 0x38
 80145a0:	e7e8      	b.n	8014574 <__submore+0x48>

080145a2 <__sprint_r>:
 80145a2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145a6:	6893      	ldr	r3, [r2, #8]
 80145a8:	4680      	mov	r8, r0
 80145aa:	460f      	mov	r7, r1
 80145ac:	4614      	mov	r4, r2
 80145ae:	b91b      	cbnz	r3, 80145b8 <__sprint_r+0x16>
 80145b0:	6053      	str	r3, [r2, #4]
 80145b2:	4618      	mov	r0, r3
 80145b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145b8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80145ba:	049d      	lsls	r5, r3, #18
 80145bc:	d523      	bpl.n	8014606 <__sprint_r+0x64>
 80145be:	6815      	ldr	r5, [r2, #0]
 80145c0:	68a0      	ldr	r0, [r4, #8]
 80145c2:	3508      	adds	r5, #8
 80145c4:	b920      	cbnz	r0, 80145d0 <__sprint_r+0x2e>
 80145c6:	2300      	movs	r3, #0
 80145c8:	60a3      	str	r3, [r4, #8]
 80145ca:	6063      	str	r3, [r4, #4]
 80145cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145d0:	f855 6c04 	ldr.w	r6, [r5, #-4]
 80145d4:	f855 bc08 	ldr.w	fp, [r5, #-8]
 80145d8:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 80145dc:	f04f 0900 	mov.w	r9, #0
 80145e0:	45ca      	cmp	sl, r9
 80145e2:	dc05      	bgt.n	80145f0 <__sprint_r+0x4e>
 80145e4:	68a3      	ldr	r3, [r4, #8]
 80145e6:	f026 0603 	bic.w	r6, r6, #3
 80145ea:	1b9e      	subs	r6, r3, r6
 80145ec:	60a6      	str	r6, [r4, #8]
 80145ee:	e7e7      	b.n	80145c0 <__sprint_r+0x1e>
 80145f0:	463a      	mov	r2, r7
 80145f2:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 80145f6:	4640      	mov	r0, r8
 80145f8:	f000 f91f 	bl	801483a <_fputwc_r>
 80145fc:	1c43      	adds	r3, r0, #1
 80145fe:	d0e2      	beq.n	80145c6 <__sprint_r+0x24>
 8014600:	f109 0901 	add.w	r9, r9, #1
 8014604:	e7ec      	b.n	80145e0 <__sprint_r+0x3e>
 8014606:	f7fd fe11 	bl	801222c <__sfvwrite_r>
 801460a:	e7dc      	b.n	80145c6 <__sprint_r+0x24>

0801460c <__ascii_wctomb>:
 801460c:	b149      	cbz	r1, 8014622 <__ascii_wctomb+0x16>
 801460e:	2aff      	cmp	r2, #255	; 0xff
 8014610:	bf85      	ittet	hi
 8014612:	238a      	movhi	r3, #138	; 0x8a
 8014614:	6003      	strhi	r3, [r0, #0]
 8014616:	700a      	strbls	r2, [r1, #0]
 8014618:	f04f 30ff 	movhi.w	r0, #4294967295
 801461c:	bf98      	it	ls
 801461e:	2001      	movls	r0, #1
 8014620:	4770      	bx	lr
 8014622:	4608      	mov	r0, r1
 8014624:	4770      	bx	lr
	...

08014628 <_write_r>:
 8014628:	b538      	push	{r3, r4, r5, lr}
 801462a:	4c07      	ldr	r4, [pc, #28]	; (8014648 <_write_r+0x20>)
 801462c:	4605      	mov	r5, r0
 801462e:	4608      	mov	r0, r1
 8014630:	4611      	mov	r1, r2
 8014632:	2200      	movs	r2, #0
 8014634:	6022      	str	r2, [r4, #0]
 8014636:	461a      	mov	r2, r3
 8014638:	f7f8 faa1 	bl	800cb7e <_write>
 801463c:	1c43      	adds	r3, r0, #1
 801463e:	d102      	bne.n	8014646 <_write_r+0x1e>
 8014640:	6823      	ldr	r3, [r4, #0]
 8014642:	b103      	cbz	r3, 8014646 <_write_r+0x1e>
 8014644:	602b      	str	r3, [r5, #0]
 8014646:	bd38      	pop	{r3, r4, r5, pc}
 8014648:	200037e8 	.word	0x200037e8

0801464c <_calloc_r>:
 801464c:	b510      	push	{r4, lr}
 801464e:	4351      	muls	r1, r2
 8014650:	f7f8 fc72 	bl	800cf38 <_malloc_r>
 8014654:	4604      	mov	r4, r0
 8014656:	b198      	cbz	r0, 8014680 <_calloc_r+0x34>
 8014658:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801465c:	f022 0203 	bic.w	r2, r2, #3
 8014660:	3a04      	subs	r2, #4
 8014662:	2a24      	cmp	r2, #36	; 0x24
 8014664:	d81b      	bhi.n	801469e <_calloc_r+0x52>
 8014666:	2a13      	cmp	r2, #19
 8014668:	d917      	bls.n	801469a <_calloc_r+0x4e>
 801466a:	2100      	movs	r1, #0
 801466c:	2a1b      	cmp	r2, #27
 801466e:	6001      	str	r1, [r0, #0]
 8014670:	6041      	str	r1, [r0, #4]
 8014672:	d807      	bhi.n	8014684 <_calloc_r+0x38>
 8014674:	f100 0308 	add.w	r3, r0, #8
 8014678:	2200      	movs	r2, #0
 801467a:	601a      	str	r2, [r3, #0]
 801467c:	605a      	str	r2, [r3, #4]
 801467e:	609a      	str	r2, [r3, #8]
 8014680:	4620      	mov	r0, r4
 8014682:	bd10      	pop	{r4, pc}
 8014684:	2a24      	cmp	r2, #36	; 0x24
 8014686:	6081      	str	r1, [r0, #8]
 8014688:	60c1      	str	r1, [r0, #12]
 801468a:	bf11      	iteee	ne
 801468c:	f100 0310 	addne.w	r3, r0, #16
 8014690:	6101      	streq	r1, [r0, #16]
 8014692:	f100 0318 	addeq.w	r3, r0, #24
 8014696:	6141      	streq	r1, [r0, #20]
 8014698:	e7ee      	b.n	8014678 <_calloc_r+0x2c>
 801469a:	4603      	mov	r3, r0
 801469c:	e7ec      	b.n	8014678 <_calloc_r+0x2c>
 801469e:	2100      	movs	r1, #0
 80146a0:	f7f8 fe63 	bl	800d36a <memset>
 80146a4:	e7ec      	b.n	8014680 <_calloc_r+0x34>
	...

080146a8 <_close_r>:
 80146a8:	b538      	push	{r3, r4, r5, lr}
 80146aa:	4c06      	ldr	r4, [pc, #24]	; (80146c4 <_close_r+0x1c>)
 80146ac:	2300      	movs	r3, #0
 80146ae:	4605      	mov	r5, r0
 80146b0:	4608      	mov	r0, r1
 80146b2:	6023      	str	r3, [r4, #0]
 80146b4:	f7f8 faac 	bl	800cc10 <_close>
 80146b8:	1c43      	adds	r3, r0, #1
 80146ba:	d102      	bne.n	80146c2 <_close_r+0x1a>
 80146bc:	6823      	ldr	r3, [r4, #0]
 80146be:	b103      	cbz	r3, 80146c2 <_close_r+0x1a>
 80146c0:	602b      	str	r3, [r5, #0]
 80146c2:	bd38      	pop	{r3, r4, r5, pc}
 80146c4:	200037e8 	.word	0x200037e8

080146c8 <__env_lock>:
 80146c8:	4801      	ldr	r0, [pc, #4]	; (80146d0 <__env_lock+0x8>)
 80146ca:	f7fe bb64 	b.w	8012d96 <__retarget_lock_acquire_recursive>
 80146ce:	bf00      	nop
 80146d0:	200037de 	.word	0x200037de

080146d4 <__env_unlock>:
 80146d4:	4801      	ldr	r0, [pc, #4]	; (80146dc <__env_unlock+0x8>)
 80146d6:	f7fe bb60 	b.w	8012d9a <__retarget_lock_release_recursive>
 80146da:	bf00      	nop
 80146dc:	200037de 	.word	0x200037de

080146e0 <_fclose_r>:
 80146e0:	b570      	push	{r4, r5, r6, lr}
 80146e2:	4605      	mov	r5, r0
 80146e4:	460c      	mov	r4, r1
 80146e6:	b911      	cbnz	r1, 80146ee <_fclose_r+0xe>
 80146e8:	2600      	movs	r6, #0
 80146ea:	4630      	mov	r0, r6
 80146ec:	bd70      	pop	{r4, r5, r6, pc}
 80146ee:	b118      	cbz	r0, 80146f8 <_fclose_r+0x18>
 80146f0:	6983      	ldr	r3, [r0, #24]
 80146f2:	b90b      	cbnz	r3, 80146f8 <_fclose_r+0x18>
 80146f4:	f7fd fc08 	bl	8011f08 <__sinit>
 80146f8:	4b2c      	ldr	r3, [pc, #176]	; (80147ac <_fclose_r+0xcc>)
 80146fa:	429c      	cmp	r4, r3
 80146fc:	d114      	bne.n	8014728 <_fclose_r+0x48>
 80146fe:	686c      	ldr	r4, [r5, #4]
 8014700:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014702:	07d8      	lsls	r0, r3, #31
 8014704:	d405      	bmi.n	8014712 <_fclose_r+0x32>
 8014706:	89a3      	ldrh	r3, [r4, #12]
 8014708:	0599      	lsls	r1, r3, #22
 801470a:	d402      	bmi.n	8014712 <_fclose_r+0x32>
 801470c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801470e:	f7fe fb42 	bl	8012d96 <__retarget_lock_acquire_recursive>
 8014712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014716:	b98b      	cbnz	r3, 801473c <_fclose_r+0x5c>
 8014718:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801471a:	f016 0601 	ands.w	r6, r6, #1
 801471e:	d1e3      	bne.n	80146e8 <_fclose_r+0x8>
 8014720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014722:	f7fe fb3a 	bl	8012d9a <__retarget_lock_release_recursive>
 8014726:	e7e0      	b.n	80146ea <_fclose_r+0xa>
 8014728:	4b21      	ldr	r3, [pc, #132]	; (80147b0 <_fclose_r+0xd0>)
 801472a:	429c      	cmp	r4, r3
 801472c:	d101      	bne.n	8014732 <_fclose_r+0x52>
 801472e:	68ac      	ldr	r4, [r5, #8]
 8014730:	e7e6      	b.n	8014700 <_fclose_r+0x20>
 8014732:	4b20      	ldr	r3, [pc, #128]	; (80147b4 <_fclose_r+0xd4>)
 8014734:	429c      	cmp	r4, r3
 8014736:	bf08      	it	eq
 8014738:	68ec      	ldreq	r4, [r5, #12]
 801473a:	e7e1      	b.n	8014700 <_fclose_r+0x20>
 801473c:	4621      	mov	r1, r4
 801473e:	4628      	mov	r0, r5
 8014740:	f7fd fabc 	bl	8011cbc <__sflush_r>
 8014744:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014746:	4606      	mov	r6, r0
 8014748:	b133      	cbz	r3, 8014758 <_fclose_r+0x78>
 801474a:	6a21      	ldr	r1, [r4, #32]
 801474c:	4628      	mov	r0, r5
 801474e:	4798      	blx	r3
 8014750:	2800      	cmp	r0, #0
 8014752:	bfb8      	it	lt
 8014754:	f04f 36ff 	movlt.w	r6, #4294967295
 8014758:	89a3      	ldrh	r3, [r4, #12]
 801475a:	061a      	lsls	r2, r3, #24
 801475c:	d503      	bpl.n	8014766 <_fclose_r+0x86>
 801475e:	6921      	ldr	r1, [r4, #16]
 8014760:	4628      	mov	r0, r5
 8014762:	f7fd fca7 	bl	80120b4 <_free_r>
 8014766:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014768:	b141      	cbz	r1, 801477c <_fclose_r+0x9c>
 801476a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801476e:	4299      	cmp	r1, r3
 8014770:	d002      	beq.n	8014778 <_fclose_r+0x98>
 8014772:	4628      	mov	r0, r5
 8014774:	f7fd fc9e 	bl	80120b4 <_free_r>
 8014778:	2300      	movs	r3, #0
 801477a:	6363      	str	r3, [r4, #52]	; 0x34
 801477c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801477e:	b121      	cbz	r1, 801478a <_fclose_r+0xaa>
 8014780:	4628      	mov	r0, r5
 8014782:	f7fd fc97 	bl	80120b4 <_free_r>
 8014786:	2300      	movs	r3, #0
 8014788:	64a3      	str	r3, [r4, #72]	; 0x48
 801478a:	f7fd fba5 	bl	8011ed8 <__sfp_lock_acquire>
 801478e:	2300      	movs	r3, #0
 8014790:	81a3      	strh	r3, [r4, #12]
 8014792:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014794:	07db      	lsls	r3, r3, #31
 8014796:	d402      	bmi.n	801479e <_fclose_r+0xbe>
 8014798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801479a:	f7fe fafe 	bl	8012d9a <__retarget_lock_release_recursive>
 801479e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80147a0:	f7fe faf7 	bl	8012d92 <__retarget_lock_close_recursive>
 80147a4:	f7fd fb9e 	bl	8011ee4 <__sfp_lock_release>
 80147a8:	e79f      	b.n	80146ea <_fclose_r+0xa>
 80147aa:	bf00      	nop
 80147ac:	08015628 	.word	0x08015628
 80147b0:	08015648 	.word	0x08015648
 80147b4:	08015608 	.word	0x08015608

080147b8 <__fputwc>:
 80147b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80147bc:	4680      	mov	r8, r0
 80147be:	460e      	mov	r6, r1
 80147c0:	4614      	mov	r4, r2
 80147c2:	f7fe fab5 	bl	8012d30 <__locale_mb_cur_max>
 80147c6:	2801      	cmp	r0, #1
 80147c8:	d11c      	bne.n	8014804 <__fputwc+0x4c>
 80147ca:	1e73      	subs	r3, r6, #1
 80147cc:	2bfe      	cmp	r3, #254	; 0xfe
 80147ce:	d819      	bhi.n	8014804 <__fputwc+0x4c>
 80147d0:	f88d 6004 	strb.w	r6, [sp, #4]
 80147d4:	4605      	mov	r5, r0
 80147d6:	2700      	movs	r7, #0
 80147d8:	f10d 0904 	add.w	r9, sp, #4
 80147dc:	42af      	cmp	r7, r5
 80147de:	d020      	beq.n	8014822 <__fputwc+0x6a>
 80147e0:	68a3      	ldr	r3, [r4, #8]
 80147e2:	f817 1009 	ldrb.w	r1, [r7, r9]
 80147e6:	3b01      	subs	r3, #1
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	60a3      	str	r3, [r4, #8]
 80147ec:	da04      	bge.n	80147f8 <__fputwc+0x40>
 80147ee:	69a2      	ldr	r2, [r4, #24]
 80147f0:	4293      	cmp	r3, r2
 80147f2:	db1a      	blt.n	801482a <__fputwc+0x72>
 80147f4:	290a      	cmp	r1, #10
 80147f6:	d018      	beq.n	801482a <__fputwc+0x72>
 80147f8:	6823      	ldr	r3, [r4, #0]
 80147fa:	1c5a      	adds	r2, r3, #1
 80147fc:	6022      	str	r2, [r4, #0]
 80147fe:	7019      	strb	r1, [r3, #0]
 8014800:	3701      	adds	r7, #1
 8014802:	e7eb      	b.n	80147dc <__fputwc+0x24>
 8014804:	4632      	mov	r2, r6
 8014806:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 801480a:	a901      	add	r1, sp, #4
 801480c:	4640      	mov	r0, r8
 801480e:	f000 fab3 	bl	8014d78 <_wcrtomb_r>
 8014812:	1c42      	adds	r2, r0, #1
 8014814:	4605      	mov	r5, r0
 8014816:	d1de      	bne.n	80147d6 <__fputwc+0x1e>
 8014818:	89a3      	ldrh	r3, [r4, #12]
 801481a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801481e:	81a3      	strh	r3, [r4, #12]
 8014820:	4606      	mov	r6, r0
 8014822:	4630      	mov	r0, r6
 8014824:	b003      	add	sp, #12
 8014826:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801482a:	4622      	mov	r2, r4
 801482c:	4640      	mov	r0, r8
 801482e:	f000 fa45 	bl	8014cbc <__swbuf_r>
 8014832:	1c43      	adds	r3, r0, #1
 8014834:	d1e4      	bne.n	8014800 <__fputwc+0x48>
 8014836:	4606      	mov	r6, r0
 8014838:	e7f3      	b.n	8014822 <__fputwc+0x6a>

0801483a <_fputwc_r>:
 801483a:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801483c:	07db      	lsls	r3, r3, #31
 801483e:	b570      	push	{r4, r5, r6, lr}
 8014840:	4605      	mov	r5, r0
 8014842:	460e      	mov	r6, r1
 8014844:	4614      	mov	r4, r2
 8014846:	d405      	bmi.n	8014854 <_fputwc_r+0x1a>
 8014848:	8993      	ldrh	r3, [r2, #12]
 801484a:	0598      	lsls	r0, r3, #22
 801484c:	d402      	bmi.n	8014854 <_fputwc_r+0x1a>
 801484e:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8014850:	f7fe faa1 	bl	8012d96 <__retarget_lock_acquire_recursive>
 8014854:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014858:	0499      	lsls	r1, r3, #18
 801485a:	d406      	bmi.n	801486a <_fputwc_r+0x30>
 801485c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014860:	81a3      	strh	r3, [r4, #12]
 8014862:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014864:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014868:	6663      	str	r3, [r4, #100]	; 0x64
 801486a:	4622      	mov	r2, r4
 801486c:	4628      	mov	r0, r5
 801486e:	4631      	mov	r1, r6
 8014870:	f7ff ffa2 	bl	80147b8 <__fputwc>
 8014874:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014876:	07da      	lsls	r2, r3, #31
 8014878:	4605      	mov	r5, r0
 801487a:	d405      	bmi.n	8014888 <_fputwc_r+0x4e>
 801487c:	89a3      	ldrh	r3, [r4, #12]
 801487e:	059b      	lsls	r3, r3, #22
 8014880:	d402      	bmi.n	8014888 <_fputwc_r+0x4e>
 8014882:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014884:	f7fe fa89 	bl	8012d9a <__retarget_lock_release_recursive>
 8014888:	4628      	mov	r0, r5
 801488a:	bd70      	pop	{r4, r5, r6, pc}

0801488c <_fstat_r>:
 801488c:	b538      	push	{r3, r4, r5, lr}
 801488e:	4c07      	ldr	r4, [pc, #28]	; (80148ac <_fstat_r+0x20>)
 8014890:	2300      	movs	r3, #0
 8014892:	4605      	mov	r5, r0
 8014894:	4608      	mov	r0, r1
 8014896:	4611      	mov	r1, r2
 8014898:	6023      	str	r3, [r4, #0]
 801489a:	f7f8 f9c4 	bl	800cc26 <_fstat>
 801489e:	1c43      	adds	r3, r0, #1
 80148a0:	d102      	bne.n	80148a8 <_fstat_r+0x1c>
 80148a2:	6823      	ldr	r3, [r4, #0]
 80148a4:	b103      	cbz	r3, 80148a8 <_fstat_r+0x1c>
 80148a6:	602b      	str	r3, [r5, #0]
 80148a8:	bd38      	pop	{r3, r4, r5, pc}
 80148aa:	bf00      	nop
 80148ac:	200037e8 	.word	0x200037e8

080148b0 <_isatty_r>:
 80148b0:	b538      	push	{r3, r4, r5, lr}
 80148b2:	4c06      	ldr	r4, [pc, #24]	; (80148cc <_isatty_r+0x1c>)
 80148b4:	2300      	movs	r3, #0
 80148b6:	4605      	mov	r5, r0
 80148b8:	4608      	mov	r0, r1
 80148ba:	6023      	str	r3, [r4, #0]
 80148bc:	f7f8 f9c2 	bl	800cc44 <_isatty>
 80148c0:	1c43      	adds	r3, r0, #1
 80148c2:	d102      	bne.n	80148ca <_isatty_r+0x1a>
 80148c4:	6823      	ldr	r3, [r4, #0]
 80148c6:	b103      	cbz	r3, 80148ca <_isatty_r+0x1a>
 80148c8:	602b      	str	r3, [r5, #0]
 80148ca:	bd38      	pop	{r3, r4, r5, pc}
 80148cc:	200037e8 	.word	0x200037e8

080148d0 <iswspace>:
 80148d0:	28ff      	cmp	r0, #255	; 0xff
 80148d2:	b510      	push	{r4, lr}
 80148d4:	4604      	mov	r4, r0
 80148d6:	d806      	bhi.n	80148e6 <iswspace+0x16>
 80148d8:	f7fe fa3c 	bl	8012d54 <__locale_ctype_ptr>
 80148dc:	4420      	add	r0, r4
 80148de:	7840      	ldrb	r0, [r0, #1]
 80148e0:	f000 0008 	and.w	r0, r0, #8
 80148e4:	bd10      	pop	{r4, pc}
 80148e6:	2000      	movs	r0, #0
 80148e8:	bd10      	pop	{r4, pc}
	...

080148ec <_lseek_r>:
 80148ec:	b538      	push	{r3, r4, r5, lr}
 80148ee:	4c07      	ldr	r4, [pc, #28]	; (801490c <_lseek_r+0x20>)
 80148f0:	4605      	mov	r5, r0
 80148f2:	4608      	mov	r0, r1
 80148f4:	4611      	mov	r1, r2
 80148f6:	2200      	movs	r2, #0
 80148f8:	6022      	str	r2, [r4, #0]
 80148fa:	461a      	mov	r2, r3
 80148fc:	f7f8 f9ac 	bl	800cc58 <_lseek>
 8014900:	1c43      	adds	r3, r0, #1
 8014902:	d102      	bne.n	801490a <_lseek_r+0x1e>
 8014904:	6823      	ldr	r3, [r4, #0]
 8014906:	b103      	cbz	r3, 801490a <_lseek_r+0x1e>
 8014908:	602b      	str	r3, [r5, #0]
 801490a:	bd38      	pop	{r3, r4, r5, pc}
 801490c:	200037e8 	.word	0x200037e8

08014910 <_mbrtowc_r>:
 8014910:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014912:	9d08      	ldr	r5, [sp, #32]
 8014914:	4c11      	ldr	r4, [pc, #68]	; (801495c <_mbrtowc_r+0x4c>)
 8014916:	4606      	mov	r6, r0
 8014918:	4617      	mov	r7, r2
 801491a:	b9a2      	cbnz	r2, 8014946 <_mbrtowc_r+0x36>
 801491c:	6823      	ldr	r3, [r4, #0]
 801491e:	4a10      	ldr	r2, [pc, #64]	; (8014960 <_mbrtowc_r+0x50>)
 8014920:	6a1b      	ldr	r3, [r3, #32]
 8014922:	9500      	str	r5, [sp, #0]
 8014924:	2b00      	cmp	r3, #0
 8014926:	bf08      	it	eq
 8014928:	4613      	moveq	r3, r2
 801492a:	4a0e      	ldr	r2, [pc, #56]	; (8014964 <_mbrtowc_r+0x54>)
 801492c:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
 8014930:	4639      	mov	r1, r7
 8014932:	2301      	movs	r3, #1
 8014934:	47a0      	blx	r4
 8014936:	1c43      	adds	r3, r0, #1
 8014938:	bf01      	itttt	eq
 801493a:	2300      	moveq	r3, #0
 801493c:	602b      	streq	r3, [r5, #0]
 801493e:	238a      	moveq	r3, #138	; 0x8a
 8014940:	6033      	streq	r3, [r6, #0]
 8014942:	b003      	add	sp, #12
 8014944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014946:	6824      	ldr	r4, [r4, #0]
 8014948:	4f05      	ldr	r7, [pc, #20]	; (8014960 <_mbrtowc_r+0x50>)
 801494a:	6a24      	ldr	r4, [r4, #32]
 801494c:	9500      	str	r5, [sp, #0]
 801494e:	2c00      	cmp	r4, #0
 8014950:	bf08      	it	eq
 8014952:	463c      	moveq	r4, r7
 8014954:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 8014958:	e7ec      	b.n	8014934 <_mbrtowc_r+0x24>
 801495a:	bf00      	nop
 801495c:	20000014 	.word	0x20000014
 8014960:	20000560 	.word	0x20000560
 8014964:	080154f1 	.word	0x080154f1

08014968 <_read_r>:
 8014968:	b538      	push	{r3, r4, r5, lr}
 801496a:	4c07      	ldr	r4, [pc, #28]	; (8014988 <_read_r+0x20>)
 801496c:	4605      	mov	r5, r0
 801496e:	4608      	mov	r0, r1
 8014970:	4611      	mov	r1, r2
 8014972:	2200      	movs	r2, #0
 8014974:	6022      	str	r2, [r4, #0]
 8014976:	461a      	mov	r2, r3
 8014978:	f7f8 f8e4 	bl	800cb44 <_read>
 801497c:	1c43      	adds	r3, r0, #1
 801497e:	d102      	bne.n	8014986 <_read_r+0x1e>
 8014980:	6823      	ldr	r3, [r4, #0]
 8014982:	b103      	cbz	r3, 8014986 <_read_r+0x1e>
 8014984:	602b      	str	r3, [r5, #0]
 8014986:	bd38      	pop	{r3, r4, r5, pc}
 8014988:	200037e8 	.word	0x200037e8

0801498c <__sccl>:
 801498c:	b570      	push	{r4, r5, r6, lr}
 801498e:	780b      	ldrb	r3, [r1, #0]
 8014990:	2b5e      	cmp	r3, #94	; 0x5e
 8014992:	bf13      	iteet	ne
 8014994:	1c4a      	addne	r2, r1, #1
 8014996:	1c8a      	addeq	r2, r1, #2
 8014998:	784b      	ldrbeq	r3, [r1, #1]
 801499a:	2100      	movne	r1, #0
 801499c:	bf08      	it	eq
 801499e:	2101      	moveq	r1, #1
 80149a0:	1e44      	subs	r4, r0, #1
 80149a2:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80149a6:	f804 1f01 	strb.w	r1, [r4, #1]!
 80149aa:	42a5      	cmp	r5, r4
 80149ac:	d1fb      	bne.n	80149a6 <__sccl+0x1a>
 80149ae:	b913      	cbnz	r3, 80149b6 <__sccl+0x2a>
 80149b0:	3a01      	subs	r2, #1
 80149b2:	4610      	mov	r0, r2
 80149b4:	bd70      	pop	{r4, r5, r6, pc}
 80149b6:	f081 0401 	eor.w	r4, r1, #1
 80149ba:	54c4      	strb	r4, [r0, r3]
 80149bc:	4611      	mov	r1, r2
 80149be:	780d      	ldrb	r5, [r1, #0]
 80149c0:	2d2d      	cmp	r5, #45	; 0x2d
 80149c2:	f101 0201 	add.w	r2, r1, #1
 80149c6:	d006      	beq.n	80149d6 <__sccl+0x4a>
 80149c8:	2d5d      	cmp	r5, #93	; 0x5d
 80149ca:	d0f2      	beq.n	80149b2 <__sccl+0x26>
 80149cc:	b90d      	cbnz	r5, 80149d2 <__sccl+0x46>
 80149ce:	460a      	mov	r2, r1
 80149d0:	e7ef      	b.n	80149b2 <__sccl+0x26>
 80149d2:	462b      	mov	r3, r5
 80149d4:	e7f1      	b.n	80149ba <__sccl+0x2e>
 80149d6:	784e      	ldrb	r6, [r1, #1]
 80149d8:	2e5d      	cmp	r6, #93	; 0x5d
 80149da:	d0fa      	beq.n	80149d2 <__sccl+0x46>
 80149dc:	42b3      	cmp	r3, r6
 80149de:	dcf8      	bgt.n	80149d2 <__sccl+0x46>
 80149e0:	3102      	adds	r1, #2
 80149e2:	3301      	adds	r3, #1
 80149e4:	429e      	cmp	r6, r3
 80149e6:	54c4      	strb	r4, [r0, r3]
 80149e8:	dcfb      	bgt.n	80149e2 <__sccl+0x56>
 80149ea:	e7e8      	b.n	80149be <__sccl+0x32>

080149ec <_strtoll_l.isra.0>:
 80149ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149f0:	b087      	sub	sp, #28
 80149f2:	4688      	mov	r8, r1
 80149f4:	9005      	str	r0, [sp, #20]
 80149f6:	4693      	mov	fp, r2
 80149f8:	461f      	mov	r7, r3
 80149fa:	4689      	mov	r9, r1
 80149fc:	464d      	mov	r5, r9
 80149fe:	9810      	ldr	r0, [sp, #64]	; 0x40
 8014a00:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014a04:	f7fe f9a2 	bl	8012d4c <__locale_ctype_ptr_l>
 8014a08:	4420      	add	r0, r4
 8014a0a:	7846      	ldrb	r6, [r0, #1]
 8014a0c:	f016 0608 	ands.w	r6, r6, #8
 8014a10:	d10b      	bne.n	8014a2a <_strtoll_l.isra.0+0x3e>
 8014a12:	2c2d      	cmp	r4, #45	; 0x2d
 8014a14:	d10b      	bne.n	8014a2e <_strtoll_l.isra.0+0x42>
 8014a16:	782c      	ldrb	r4, [r5, #0]
 8014a18:	2601      	movs	r6, #1
 8014a1a:	f109 0502 	add.w	r5, r9, #2
 8014a1e:	b167      	cbz	r7, 8014a3a <_strtoll_l.isra.0+0x4e>
 8014a20:	2f10      	cmp	r7, #16
 8014a22:	d114      	bne.n	8014a4e <_strtoll_l.isra.0+0x62>
 8014a24:	2c30      	cmp	r4, #48	; 0x30
 8014a26:	d00a      	beq.n	8014a3e <_strtoll_l.isra.0+0x52>
 8014a28:	e011      	b.n	8014a4e <_strtoll_l.isra.0+0x62>
 8014a2a:	46a9      	mov	r9, r5
 8014a2c:	e7e6      	b.n	80149fc <_strtoll_l.isra.0+0x10>
 8014a2e:	2c2b      	cmp	r4, #43	; 0x2b
 8014a30:	bf04      	itt	eq
 8014a32:	782c      	ldrbeq	r4, [r5, #0]
 8014a34:	f109 0502 	addeq.w	r5, r9, #2
 8014a38:	e7f1      	b.n	8014a1e <_strtoll_l.isra.0+0x32>
 8014a3a:	2c30      	cmp	r4, #48	; 0x30
 8014a3c:	d144      	bne.n	8014ac8 <_strtoll_l.isra.0+0xdc>
 8014a3e:	782b      	ldrb	r3, [r5, #0]
 8014a40:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014a44:	2b58      	cmp	r3, #88	; 0x58
 8014a46:	d170      	bne.n	8014b2a <_strtoll_l.isra.0+0x13e>
 8014a48:	786c      	ldrb	r4, [r5, #1]
 8014a4a:	2710      	movs	r7, #16
 8014a4c:	3502      	adds	r5, #2
 8014a4e:	2e00      	cmp	r6, #0
 8014a50:	d03c      	beq.n	8014acc <_strtoll_l.isra.0+0xe0>
 8014a52:	f04f 0a00 	mov.w	sl, #0
 8014a56:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8014a5a:	463a      	mov	r2, r7
 8014a5c:	17fb      	asrs	r3, r7, #31
 8014a5e:	4650      	mov	r0, sl
 8014a60:	4649      	mov	r1, r9
 8014a62:	e9cd 2300 	strd	r2, r3, [sp]
 8014a66:	f7ec f91b 	bl	8000ca0 <__aeabi_uldivmod>
 8014a6a:	17fb      	asrs	r3, r7, #31
 8014a6c:	9204      	str	r2, [sp, #16]
 8014a6e:	4650      	mov	r0, sl
 8014a70:	463a      	mov	r2, r7
 8014a72:	4649      	mov	r1, r9
 8014a74:	f7ec f914 	bl	8000ca0 <__aeabi_uldivmod>
 8014a78:	2300      	movs	r3, #0
 8014a7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014a7e:	2000      	movs	r0, #0
 8014a80:	2100      	movs	r1, #0
 8014a82:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8014a86:	2a09      	cmp	r2, #9
 8014a88:	d825      	bhi.n	8014ad6 <_strtoll_l.isra.0+0xea>
 8014a8a:	4614      	mov	r4, r2
 8014a8c:	42a7      	cmp	r7, r4
 8014a8e:	dd31      	ble.n	8014af4 <_strtoll_l.isra.0+0x108>
 8014a90:	1c5a      	adds	r2, r3, #1
 8014a92:	d016      	beq.n	8014ac2 <_strtoll_l.isra.0+0xd6>
 8014a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014a98:	428b      	cmp	r3, r1
 8014a9a:	bf08      	it	eq
 8014a9c:	4282      	cmpeq	r2, r0
 8014a9e:	d326      	bcc.n	8014aee <_strtoll_l.isra.0+0x102>
 8014aa0:	d102      	bne.n	8014aa8 <_strtoll_l.isra.0+0xbc>
 8014aa2:	9b04      	ldr	r3, [sp, #16]
 8014aa4:	42a3      	cmp	r3, r4
 8014aa6:	db22      	blt.n	8014aee <_strtoll_l.isra.0+0x102>
 8014aa8:	9b00      	ldr	r3, [sp, #0]
 8014aaa:	9a01      	ldr	r2, [sp, #4]
 8014aac:	434b      	muls	r3, r1
 8014aae:	fb00 3302 	mla	r3, r0, r2, r3
 8014ab2:	9a00      	ldr	r2, [sp, #0]
 8014ab4:	fba2 0100 	umull	r0, r1, r2, r0
 8014ab8:	4419      	add	r1, r3
 8014aba:	1900      	adds	r0, r0, r4
 8014abc:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8014ac0:	2301      	movs	r3, #1
 8014ac2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014ac6:	e7dc      	b.n	8014a82 <_strtoll_l.isra.0+0x96>
 8014ac8:	270a      	movs	r7, #10
 8014aca:	e7c0      	b.n	8014a4e <_strtoll_l.isra.0+0x62>
 8014acc:	f04f 3aff 	mov.w	sl, #4294967295
 8014ad0:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8014ad4:	e7c1      	b.n	8014a5a <_strtoll_l.isra.0+0x6e>
 8014ad6:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8014ada:	2a19      	cmp	r2, #25
 8014adc:	d801      	bhi.n	8014ae2 <_strtoll_l.isra.0+0xf6>
 8014ade:	3c37      	subs	r4, #55	; 0x37
 8014ae0:	e7d4      	b.n	8014a8c <_strtoll_l.isra.0+0xa0>
 8014ae2:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8014ae6:	2a19      	cmp	r2, #25
 8014ae8:	d804      	bhi.n	8014af4 <_strtoll_l.isra.0+0x108>
 8014aea:	3c57      	subs	r4, #87	; 0x57
 8014aec:	e7ce      	b.n	8014a8c <_strtoll_l.isra.0+0xa0>
 8014aee:	f04f 33ff 	mov.w	r3, #4294967295
 8014af2:	e7e6      	b.n	8014ac2 <_strtoll_l.isra.0+0xd6>
 8014af4:	1c5a      	adds	r2, r3, #1
 8014af6:	d10a      	bne.n	8014b0e <_strtoll_l.isra.0+0x122>
 8014af8:	9a05      	ldr	r2, [sp, #20]
 8014afa:	2322      	movs	r3, #34	; 0x22
 8014afc:	6013      	str	r3, [r2, #0]
 8014afe:	4650      	mov	r0, sl
 8014b00:	4649      	mov	r1, r9
 8014b02:	f1bb 0f00 	cmp.w	fp, #0
 8014b06:	d10a      	bne.n	8014b1e <_strtoll_l.isra.0+0x132>
 8014b08:	b007      	add	sp, #28
 8014b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b0e:	b116      	cbz	r6, 8014b16 <_strtoll_l.isra.0+0x12a>
 8014b10:	4240      	negs	r0, r0
 8014b12:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8014b16:	f1bb 0f00 	cmp.w	fp, #0
 8014b1a:	d0f5      	beq.n	8014b08 <_strtoll_l.isra.0+0x11c>
 8014b1c:	b11b      	cbz	r3, 8014b26 <_strtoll_l.isra.0+0x13a>
 8014b1e:	3d01      	subs	r5, #1
 8014b20:	f8cb 5000 	str.w	r5, [fp]
 8014b24:	e7f0      	b.n	8014b08 <_strtoll_l.isra.0+0x11c>
 8014b26:	4645      	mov	r5, r8
 8014b28:	e7fa      	b.n	8014b20 <_strtoll_l.isra.0+0x134>
 8014b2a:	2430      	movs	r4, #48	; 0x30
 8014b2c:	2f00      	cmp	r7, #0
 8014b2e:	d18e      	bne.n	8014a4e <_strtoll_l.isra.0+0x62>
 8014b30:	2708      	movs	r7, #8
 8014b32:	e78c      	b.n	8014a4e <_strtoll_l.isra.0+0x62>

08014b34 <_strtoll_r>:
 8014b34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014b36:	4c06      	ldr	r4, [pc, #24]	; (8014b50 <_strtoll_r+0x1c>)
 8014b38:	4d06      	ldr	r5, [pc, #24]	; (8014b54 <_strtoll_r+0x20>)
 8014b3a:	6824      	ldr	r4, [r4, #0]
 8014b3c:	6a24      	ldr	r4, [r4, #32]
 8014b3e:	2c00      	cmp	r4, #0
 8014b40:	bf08      	it	eq
 8014b42:	462c      	moveq	r4, r5
 8014b44:	9400      	str	r4, [sp, #0]
 8014b46:	f7ff ff51 	bl	80149ec <_strtoll_l.isra.0>
 8014b4a:	b003      	add	sp, #12
 8014b4c:	bd30      	pop	{r4, r5, pc}
 8014b4e:	bf00      	nop
 8014b50:	20000014 	.word	0x20000014
 8014b54:	20000560 	.word	0x20000560

08014b58 <_strtoull_l.isra.0>:
 8014b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b5c:	b085      	sub	sp, #20
 8014b5e:	4688      	mov	r8, r1
 8014b60:	9003      	str	r0, [sp, #12]
 8014b62:	4691      	mov	r9, r2
 8014b64:	461f      	mov	r7, r3
 8014b66:	468b      	mov	fp, r1
 8014b68:	465d      	mov	r5, fp
 8014b6a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014b6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014b70:	f7fe f8ec 	bl	8012d4c <__locale_ctype_ptr_l>
 8014b74:	4420      	add	r0, r4
 8014b76:	7846      	ldrb	r6, [r0, #1]
 8014b78:	f016 0608 	ands.w	r6, r6, #8
 8014b7c:	d10b      	bne.n	8014b96 <_strtoull_l.isra.0+0x3e>
 8014b7e:	2c2d      	cmp	r4, #45	; 0x2d
 8014b80:	d10b      	bne.n	8014b9a <_strtoull_l.isra.0+0x42>
 8014b82:	782c      	ldrb	r4, [r5, #0]
 8014b84:	2601      	movs	r6, #1
 8014b86:	f10b 0502 	add.w	r5, fp, #2
 8014b8a:	b167      	cbz	r7, 8014ba6 <_strtoull_l.isra.0+0x4e>
 8014b8c:	2f10      	cmp	r7, #16
 8014b8e:	d114      	bne.n	8014bba <_strtoull_l.isra.0+0x62>
 8014b90:	2c30      	cmp	r4, #48	; 0x30
 8014b92:	d00a      	beq.n	8014baa <_strtoull_l.isra.0+0x52>
 8014b94:	e011      	b.n	8014bba <_strtoull_l.isra.0+0x62>
 8014b96:	46ab      	mov	fp, r5
 8014b98:	e7e6      	b.n	8014b68 <_strtoull_l.isra.0+0x10>
 8014b9a:	2c2b      	cmp	r4, #43	; 0x2b
 8014b9c:	bf04      	itt	eq
 8014b9e:	782c      	ldrbeq	r4, [r5, #0]
 8014ba0:	f10b 0502 	addeq.w	r5, fp, #2
 8014ba4:	e7f1      	b.n	8014b8a <_strtoull_l.isra.0+0x32>
 8014ba6:	2c30      	cmp	r4, #48	; 0x30
 8014ba8:	d141      	bne.n	8014c2e <_strtoull_l.isra.0+0xd6>
 8014baa:	782b      	ldrb	r3, [r5, #0]
 8014bac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014bb0:	2b58      	cmp	r3, #88	; 0x58
 8014bb2:	d16c      	bne.n	8014c8e <_strtoull_l.isra.0+0x136>
 8014bb4:	786c      	ldrb	r4, [r5, #1]
 8014bb6:	2710      	movs	r7, #16
 8014bb8:	3502      	adds	r5, #2
 8014bba:	ea4f 7be7 	mov.w	fp, r7, asr #31
 8014bbe:	463a      	mov	r2, r7
 8014bc0:	465b      	mov	r3, fp
 8014bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8014bc6:	f04f 31ff 	mov.w	r1, #4294967295
 8014bca:	f7ec f869 	bl	8000ca0 <__aeabi_uldivmod>
 8014bce:	463a      	mov	r2, r7
 8014bd0:	e9cd 0100 	strd	r0, r1, [sp]
 8014bd4:	465b      	mov	r3, fp
 8014bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8014bda:	f04f 31ff 	mov.w	r1, #4294967295
 8014bde:	f7ec f85f 	bl	8000ca0 <__aeabi_uldivmod>
 8014be2:	46ba      	mov	sl, r7
 8014be4:	4694      	mov	ip, r2
 8014be6:	2300      	movs	r3, #0
 8014be8:	2000      	movs	r0, #0
 8014bea:	2100      	movs	r1, #0
 8014bec:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8014bf0:	f1be 0f09 	cmp.w	lr, #9
 8014bf4:	d81d      	bhi.n	8014c32 <_strtoull_l.isra.0+0xda>
 8014bf6:	4674      	mov	r4, lr
 8014bf8:	42a7      	cmp	r7, r4
 8014bfa:	dd2b      	ble.n	8014c54 <_strtoull_l.isra.0+0xfc>
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	db26      	blt.n	8014c4e <_strtoull_l.isra.0+0xf6>
 8014c00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014c04:	428b      	cmp	r3, r1
 8014c06:	bf08      	it	eq
 8014c08:	4282      	cmpeq	r2, r0
 8014c0a:	d320      	bcc.n	8014c4e <_strtoull_l.isra.0+0xf6>
 8014c0c:	d101      	bne.n	8014c12 <_strtoull_l.isra.0+0xba>
 8014c0e:	45a4      	cmp	ip, r4
 8014c10:	db1d      	blt.n	8014c4e <_strtoull_l.isra.0+0xf6>
 8014c12:	fb0a f301 	mul.w	r3, sl, r1
 8014c16:	fb00 330b 	mla	r3, r0, fp, r3
 8014c1a:	fbaa 0100 	umull	r0, r1, sl, r0
 8014c1e:	4419      	add	r1, r3
 8014c20:	1900      	adds	r0, r0, r4
 8014c22:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8014c26:	2301      	movs	r3, #1
 8014c28:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014c2c:	e7de      	b.n	8014bec <_strtoull_l.isra.0+0x94>
 8014c2e:	270a      	movs	r7, #10
 8014c30:	e7c3      	b.n	8014bba <_strtoull_l.isra.0+0x62>
 8014c32:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8014c36:	f1be 0f19 	cmp.w	lr, #25
 8014c3a:	d801      	bhi.n	8014c40 <_strtoull_l.isra.0+0xe8>
 8014c3c:	3c37      	subs	r4, #55	; 0x37
 8014c3e:	e7db      	b.n	8014bf8 <_strtoull_l.isra.0+0xa0>
 8014c40:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8014c44:	f1be 0f19 	cmp.w	lr, #25
 8014c48:	d804      	bhi.n	8014c54 <_strtoull_l.isra.0+0xfc>
 8014c4a:	3c57      	subs	r4, #87	; 0x57
 8014c4c:	e7d4      	b.n	8014bf8 <_strtoull_l.isra.0+0xa0>
 8014c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8014c52:	e7e9      	b.n	8014c28 <_strtoull_l.isra.0+0xd0>
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	da0c      	bge.n	8014c72 <_strtoull_l.isra.0+0x11a>
 8014c58:	9a03      	ldr	r2, [sp, #12]
 8014c5a:	2322      	movs	r3, #34	; 0x22
 8014c5c:	6013      	str	r3, [r2, #0]
 8014c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8014c62:	f04f 31ff 	mov.w	r1, #4294967295
 8014c66:	f1b9 0f00 	cmp.w	r9, #0
 8014c6a:	d10a      	bne.n	8014c82 <_strtoull_l.isra.0+0x12a>
 8014c6c:	b005      	add	sp, #20
 8014c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c72:	b116      	cbz	r6, 8014c7a <_strtoull_l.isra.0+0x122>
 8014c74:	4240      	negs	r0, r0
 8014c76:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8014c7a:	f1b9 0f00 	cmp.w	r9, #0
 8014c7e:	d0f5      	beq.n	8014c6c <_strtoull_l.isra.0+0x114>
 8014c80:	b11b      	cbz	r3, 8014c8a <_strtoull_l.isra.0+0x132>
 8014c82:	3d01      	subs	r5, #1
 8014c84:	f8c9 5000 	str.w	r5, [r9]
 8014c88:	e7f0      	b.n	8014c6c <_strtoull_l.isra.0+0x114>
 8014c8a:	4645      	mov	r5, r8
 8014c8c:	e7fa      	b.n	8014c84 <_strtoull_l.isra.0+0x12c>
 8014c8e:	2430      	movs	r4, #48	; 0x30
 8014c90:	2f00      	cmp	r7, #0
 8014c92:	d192      	bne.n	8014bba <_strtoull_l.isra.0+0x62>
 8014c94:	2708      	movs	r7, #8
 8014c96:	e790      	b.n	8014bba <_strtoull_l.isra.0+0x62>

08014c98 <_strtoull_r>:
 8014c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014c9a:	4c06      	ldr	r4, [pc, #24]	; (8014cb4 <_strtoull_r+0x1c>)
 8014c9c:	4d06      	ldr	r5, [pc, #24]	; (8014cb8 <_strtoull_r+0x20>)
 8014c9e:	6824      	ldr	r4, [r4, #0]
 8014ca0:	6a24      	ldr	r4, [r4, #32]
 8014ca2:	2c00      	cmp	r4, #0
 8014ca4:	bf08      	it	eq
 8014ca6:	462c      	moveq	r4, r5
 8014ca8:	9400      	str	r4, [sp, #0]
 8014caa:	f7ff ff55 	bl	8014b58 <_strtoull_l.isra.0>
 8014cae:	b003      	add	sp, #12
 8014cb0:	bd30      	pop	{r4, r5, pc}
 8014cb2:	bf00      	nop
 8014cb4:	20000014 	.word	0x20000014
 8014cb8:	20000560 	.word	0x20000560

08014cbc <__swbuf_r>:
 8014cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cbe:	460e      	mov	r6, r1
 8014cc0:	4614      	mov	r4, r2
 8014cc2:	4605      	mov	r5, r0
 8014cc4:	b118      	cbz	r0, 8014cce <__swbuf_r+0x12>
 8014cc6:	6983      	ldr	r3, [r0, #24]
 8014cc8:	b90b      	cbnz	r3, 8014cce <__swbuf_r+0x12>
 8014cca:	f7fd f91d 	bl	8011f08 <__sinit>
 8014cce:	4b27      	ldr	r3, [pc, #156]	; (8014d6c <__swbuf_r+0xb0>)
 8014cd0:	429c      	cmp	r4, r3
 8014cd2:	d12f      	bne.n	8014d34 <__swbuf_r+0x78>
 8014cd4:	686c      	ldr	r4, [r5, #4]
 8014cd6:	69a3      	ldr	r3, [r4, #24]
 8014cd8:	60a3      	str	r3, [r4, #8]
 8014cda:	89a3      	ldrh	r3, [r4, #12]
 8014cdc:	0719      	lsls	r1, r3, #28
 8014cde:	d533      	bpl.n	8014d48 <__swbuf_r+0x8c>
 8014ce0:	6923      	ldr	r3, [r4, #16]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d030      	beq.n	8014d48 <__swbuf_r+0x8c>
 8014ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014cea:	b2f6      	uxtb	r6, r6
 8014cec:	049a      	lsls	r2, r3, #18
 8014cee:	4637      	mov	r7, r6
 8014cf0:	d534      	bpl.n	8014d5c <__swbuf_r+0xa0>
 8014cf2:	6923      	ldr	r3, [r4, #16]
 8014cf4:	6820      	ldr	r0, [r4, #0]
 8014cf6:	1ac0      	subs	r0, r0, r3
 8014cf8:	6963      	ldr	r3, [r4, #20]
 8014cfa:	4298      	cmp	r0, r3
 8014cfc:	db04      	blt.n	8014d08 <__swbuf_r+0x4c>
 8014cfe:	4621      	mov	r1, r4
 8014d00:	4628      	mov	r0, r5
 8014d02:	f7fd f86d 	bl	8011de0 <_fflush_r>
 8014d06:	bb28      	cbnz	r0, 8014d54 <__swbuf_r+0x98>
 8014d08:	68a3      	ldr	r3, [r4, #8]
 8014d0a:	3b01      	subs	r3, #1
 8014d0c:	60a3      	str	r3, [r4, #8]
 8014d0e:	6823      	ldr	r3, [r4, #0]
 8014d10:	1c5a      	adds	r2, r3, #1
 8014d12:	6022      	str	r2, [r4, #0]
 8014d14:	701e      	strb	r6, [r3, #0]
 8014d16:	6963      	ldr	r3, [r4, #20]
 8014d18:	3001      	adds	r0, #1
 8014d1a:	4298      	cmp	r0, r3
 8014d1c:	d004      	beq.n	8014d28 <__swbuf_r+0x6c>
 8014d1e:	89a3      	ldrh	r3, [r4, #12]
 8014d20:	07db      	lsls	r3, r3, #31
 8014d22:	d519      	bpl.n	8014d58 <__swbuf_r+0x9c>
 8014d24:	2e0a      	cmp	r6, #10
 8014d26:	d117      	bne.n	8014d58 <__swbuf_r+0x9c>
 8014d28:	4621      	mov	r1, r4
 8014d2a:	4628      	mov	r0, r5
 8014d2c:	f7fd f858 	bl	8011de0 <_fflush_r>
 8014d30:	b190      	cbz	r0, 8014d58 <__swbuf_r+0x9c>
 8014d32:	e00f      	b.n	8014d54 <__swbuf_r+0x98>
 8014d34:	4b0e      	ldr	r3, [pc, #56]	; (8014d70 <__swbuf_r+0xb4>)
 8014d36:	429c      	cmp	r4, r3
 8014d38:	d101      	bne.n	8014d3e <__swbuf_r+0x82>
 8014d3a:	68ac      	ldr	r4, [r5, #8]
 8014d3c:	e7cb      	b.n	8014cd6 <__swbuf_r+0x1a>
 8014d3e:	4b0d      	ldr	r3, [pc, #52]	; (8014d74 <__swbuf_r+0xb8>)
 8014d40:	429c      	cmp	r4, r3
 8014d42:	bf08      	it	eq
 8014d44:	68ec      	ldreq	r4, [r5, #12]
 8014d46:	e7c6      	b.n	8014cd6 <__swbuf_r+0x1a>
 8014d48:	4621      	mov	r1, r4
 8014d4a:	4628      	mov	r0, r5
 8014d4c:	f7fc f8d4 	bl	8010ef8 <__swsetup_r>
 8014d50:	2800      	cmp	r0, #0
 8014d52:	d0c8      	beq.n	8014ce6 <__swbuf_r+0x2a>
 8014d54:	f04f 37ff 	mov.w	r7, #4294967295
 8014d58:	4638      	mov	r0, r7
 8014d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014d60:	81a3      	strh	r3, [r4, #12]
 8014d62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014d64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014d68:	6663      	str	r3, [r4, #100]	; 0x64
 8014d6a:	e7c2      	b.n	8014cf2 <__swbuf_r+0x36>
 8014d6c:	08015628 	.word	0x08015628
 8014d70:	08015648 	.word	0x08015648
 8014d74:	08015608 	.word	0x08015608

08014d78 <_wcrtomb_r>:
 8014d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d7a:	4605      	mov	r5, r0
 8014d7c:	b085      	sub	sp, #20
 8014d7e:	461e      	mov	r6, r3
 8014d80:	460f      	mov	r7, r1
 8014d82:	4c0f      	ldr	r4, [pc, #60]	; (8014dc0 <_wcrtomb_r+0x48>)
 8014d84:	b991      	cbnz	r1, 8014dac <_wcrtomb_r+0x34>
 8014d86:	6822      	ldr	r2, [r4, #0]
 8014d88:	490e      	ldr	r1, [pc, #56]	; (8014dc4 <_wcrtomb_r+0x4c>)
 8014d8a:	6a12      	ldr	r2, [r2, #32]
 8014d8c:	2a00      	cmp	r2, #0
 8014d8e:	bf08      	it	eq
 8014d90:	460a      	moveq	r2, r1
 8014d92:	a901      	add	r1, sp, #4
 8014d94:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8014d98:	463a      	mov	r2, r7
 8014d9a:	47a0      	blx	r4
 8014d9c:	1c43      	adds	r3, r0, #1
 8014d9e:	bf01      	itttt	eq
 8014da0:	2300      	moveq	r3, #0
 8014da2:	6033      	streq	r3, [r6, #0]
 8014da4:	238a      	moveq	r3, #138	; 0x8a
 8014da6:	602b      	streq	r3, [r5, #0]
 8014da8:	b005      	add	sp, #20
 8014daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014dac:	6824      	ldr	r4, [r4, #0]
 8014dae:	4f05      	ldr	r7, [pc, #20]	; (8014dc4 <_wcrtomb_r+0x4c>)
 8014db0:	6a24      	ldr	r4, [r4, #32]
 8014db2:	2c00      	cmp	r4, #0
 8014db4:	bf08      	it	eq
 8014db6:	463c      	moveq	r4, r7
 8014db8:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 8014dbc:	e7ed      	b.n	8014d9a <_wcrtomb_r+0x22>
 8014dbe:	bf00      	nop
 8014dc0:	20000014 	.word	0x20000014
 8014dc4:	20000560 	.word	0x20000560

08014dc8 <_gettimeofday>:
 8014dc8:	4b02      	ldr	r3, [pc, #8]	; (8014dd4 <_gettimeofday+0xc>)
 8014dca:	2258      	movs	r2, #88	; 0x58
 8014dcc:	601a      	str	r2, [r3, #0]
 8014dce:	f04f 30ff 	mov.w	r0, #4294967295
 8014dd2:	4770      	bx	lr
 8014dd4:	200037e8 	.word	0x200037e8

08014dd8 <_init>:
 8014dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014dda:	bf00      	nop
 8014ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014dde:	bc08      	pop	{r3}
 8014de0:	469e      	mov	lr, r3
 8014de2:	4770      	bx	lr

08014de4 <_fini>:
 8014de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014de6:	bf00      	nop
 8014de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014dea:	bc08      	pop	{r3}
 8014dec:	469e      	mov	lr, r3
 8014dee:	4770      	bx	lr
