
Buoy_Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000105e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000928  08010770  08010770  00020770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011098  08011098  00021098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080110a0  080110a0  000210a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080110a4  080110a4  000210a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000006c8  20000000  080110a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram2         00000000  10000000  10000000  000306c8  2**0
                  CONTENTS
  8 .bss          00001b38  200006c8  200006c8  000306c8  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  20002200  20002200  000306c8  2**0
                  ALLOC
 10 .ARM.attributes 0000002a  00000000  00000000  000306c8  2**0
                  CONTENTS, READONLY
 11 .debug_info   000196bc  00000000  00000000  000306f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002c86  00000000  00000000  00049dae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001370  00000000  00000000  0004ca38  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001218  00000000  00000000  0004dda8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00009154  00000000  00000000  0004efc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00006324  00000000  00000000  00058114  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005e438  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006c7c  00000000  00000000  0005e4b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         00000024  00000000  00000000  00065130  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      0000004e  00000000  00000000  00065154  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200006c8 	.word	0x200006c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010758 	.word	0x08010758

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200006cc 	.word	0x200006cc
 80001cc:	08010758 	.word	0x08010758

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f092 0f00 	teq	r2, #0
 800058a:	bf14      	ite	ne
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a0:	e720      	b.n	80003e4 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_ul2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	e00a      	b.n	80005ca <__aeabi_l2d+0x16>

080005b4 <__aeabi_l2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c2:	d502      	bpl.n	80005ca <__aeabi_l2d+0x16>
 80005c4:	4240      	negs	r0, r0
 80005c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d6:	f43f aedc 	beq.w	8000392 <__adddf3+0xe6>
 80005da:	f04f 0203 	mov.w	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f2:	f1c2 0320 	rsb	r3, r2, #32
 80005f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000602:	ea40 000e 	orr.w	r0, r0, lr
 8000606:	fa21 f102 	lsr.w	r1, r1, r2
 800060a:	4414      	add	r4, r2
 800060c:	e6c1      	b.n	8000392 <__adddf3+0xe6>
 800060e:	bf00      	nop

08000610 <__aeabi_dmul>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000616:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061e:	bf1d      	ittte	ne
 8000620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000624:	ea94 0f0c 	teqne	r4, ip
 8000628:	ea95 0f0c 	teqne	r5, ip
 800062c:	f000 f8de 	bleq	80007ec <__aeabi_dmul+0x1dc>
 8000630:	442c      	add	r4, r5
 8000632:	ea81 0603 	eor.w	r6, r1, r3
 8000636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000642:	bf18      	it	ne
 8000644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000650:	d038      	beq.n	80006c4 <__aeabi_dmul+0xb4>
 8000652:	fba0 ce02 	umull	ip, lr, r0, r2
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000662:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000666:	f04f 0600 	mov.w	r6, #0
 800066a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066e:	f09c 0f00 	teq	ip, #0
 8000672:	bf18      	it	ne
 8000674:	f04e 0e01 	orrne.w	lr, lr, #1
 8000678:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800067c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000680:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000684:	d204      	bcs.n	8000690 <__aeabi_dmul+0x80>
 8000686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068a:	416d      	adcs	r5, r5
 800068c:	eb46 0606 	adc.w	r6, r6, r6
 8000690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800069c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a8:	bf88      	it	hi
 80006aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ae:	d81e      	bhi.n	80006ee <__aeabi_dmul+0xde>
 80006b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b4:	bf08      	it	eq
 80006b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ba:	f150 0000 	adcs.w	r0, r0, #0
 80006be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c8:	ea46 0101 	orr.w	r1, r6, r1
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d8:	bfc2      	ittt	gt
 80006da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	popgt	{r4, r5, r6, pc}
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e8:	f04f 0e00 	mov.w	lr, #0
 80006ec:	3c01      	subs	r4, #1
 80006ee:	f300 80ab 	bgt.w	8000848 <__aeabi_dmul+0x238>
 80006f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f6:	bfde      	ittt	le
 80006f8:	2000      	movle	r0, #0
 80006fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd70      	pople	{r4, r5, r6, pc}
 8000700:	f1c4 0400 	rsb	r4, r4, #0
 8000704:	3c20      	subs	r4, #32
 8000706:	da35      	bge.n	8000774 <__aeabi_dmul+0x164>
 8000708:	340c      	adds	r4, #12
 800070a:	dc1b      	bgt.n	8000744 <__aeabi_dmul+0x134>
 800070c:	f104 0414 	add.w	r4, r4, #20
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f305 	lsl.w	r3, r0, r5
 8000718:	fa20 f004 	lsr.w	r0, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	fa21 f604 	lsr.w	r6, r1, r4
 8000734:	eb42 0106 	adc.w	r1, r2, r6
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 040c 	rsb	r4, r4, #12
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f304 	lsl.w	r3, r0, r4
 8000750:	fa20 f005 	lsr.w	r0, r0, r5
 8000754:	fa01 f204 	lsl.w	r2, r1, r4
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f205 	lsl.w	r2, r0, r5
 800077c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000780:	fa20 f304 	lsr.w	r3, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea43 0302 	orr.w	r3, r3, r2
 800078c:	fa21 f004 	lsr.w	r0, r1, r4
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	fa21 f204 	lsr.w	r2, r1, r4
 8000798:	ea20 0002 	bic.w	r0, r0, r2
 800079c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f094 0f00 	teq	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__aeabi_dmul+0x1c2>
 80007b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b6:	0040      	lsls	r0, r0, #1
 80007b8:	eb41 0101 	adc.w	r1, r1, r1
 80007bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3c01      	subeq	r4, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1a6>
 80007c6:	ea41 0106 	orr.w	r1, r1, r6
 80007ca:	f095 0f00 	teq	r5, #0
 80007ce:	bf18      	it	ne
 80007d0:	4770      	bxne	lr
 80007d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	eb43 0303 	adc.w	r3, r3, r3
 80007dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3d01      	subeq	r5, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1c6>
 80007e6:	ea43 0306 	orr.w	r3, r3, r6
 80007ea:	4770      	bx	lr
 80007ec:	ea94 0f0c 	teq	r4, ip
 80007f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f4:	bf18      	it	ne
 80007f6:	ea95 0f0c 	teqne	r5, ip
 80007fa:	d00c      	beq.n	8000816 <__aeabi_dmul+0x206>
 80007fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000806:	d1d1      	bne.n	80007ac <__aeabi_dmul+0x19c>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081a:	bf06      	itte	eq
 800081c:	4610      	moveq	r0, r2
 800081e:	4619      	moveq	r1, r3
 8000820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000824:	d019      	beq.n	800085a <__aeabi_dmul+0x24a>
 8000826:	ea94 0f0c 	teq	r4, ip
 800082a:	d102      	bne.n	8000832 <__aeabi_dmul+0x222>
 800082c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000830:	d113      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000832:	ea95 0f0c 	teq	r5, ip
 8000836:	d105      	bne.n	8000844 <__aeabi_dmul+0x234>
 8000838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800083c:	bf1c      	itt	ne
 800083e:	4610      	movne	r0, r2
 8000840:	4619      	movne	r1, r3
 8000842:	d10a      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000850:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <__aeabi_ddiv>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000872:	bf1d      	ittte	ne
 8000874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000878:	ea94 0f0c 	teqne	r4, ip
 800087c:	ea95 0f0c 	teqne	r5, ip
 8000880:	f000 f8a7 	bleq	80009d2 <__aeabi_ddiv+0x16e>
 8000884:	eba4 0405 	sub.w	r4, r4, r5
 8000888:	ea81 0e03 	eor.w	lr, r1, r3
 800088c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f000 8088 	beq.w	80009a8 <__aeabi_ddiv+0x144>
 8000898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800089c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008bc:	429d      	cmp	r5, r3
 80008be:	bf08      	it	eq
 80008c0:	4296      	cmpeq	r6, r2
 80008c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ca:	d202      	bcs.n	80008d2 <__aeabi_ddiv+0x6e>
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	eb65 0503 	sbc.w	r5, r5, r3
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000940:	ea55 0e06 	orrs.w	lr, r5, r6
 8000944:	d018      	beq.n	8000978 <__aeabi_ddiv+0x114>
 8000946:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000962:	d1c0      	bne.n	80008e6 <__aeabi_ddiv+0x82>
 8000964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000968:	d10b      	bne.n	8000982 <__aeabi_ddiv+0x11e>
 800096a:	ea41 0100 	orr.w	r1, r1, r0
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000976:	e7b6      	b.n	80008e6 <__aeabi_ddiv+0x82>
 8000978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800097c:	bf04      	itt	eq
 800097e:	4301      	orreq	r1, r0
 8000980:	2000      	moveq	r0, #0
 8000982:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000986:	bf88      	it	hi
 8000988:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800098c:	f63f aeaf 	bhi.w	80006ee <__aeabi_dmul+0xde>
 8000990:	ebb5 0c03 	subs.w	ip, r5, r3
 8000994:	bf04      	itt	eq
 8000996:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099e:	f150 0000 	adcs.w	r0, r0, #0
 80009a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b4:	bfc2      	ittt	gt
 80009b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009be:	bd70      	popgt	{r4, r5, r6, pc}
 80009c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c4:	f04f 0e00 	mov.w	lr, #0
 80009c8:	3c01      	subs	r4, #1
 80009ca:	e690      	b.n	80006ee <__aeabi_dmul+0xde>
 80009cc:	ea45 0e06 	orr.w	lr, r5, r6
 80009d0:	e68d      	b.n	80006ee <__aeabi_dmul+0xde>
 80009d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d6:	ea94 0f0c 	teq	r4, ip
 80009da:	bf08      	it	eq
 80009dc:	ea95 0f0c 	teqeq	r5, ip
 80009e0:	f43f af3b 	beq.w	800085a <__aeabi_dmul+0x24a>
 80009e4:	ea94 0f0c 	teq	r4, ip
 80009e8:	d10a      	bne.n	8000a00 <__aeabi_ddiv+0x19c>
 80009ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ee:	f47f af34 	bne.w	800085a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	f47f af25 	bne.w	8000844 <__aeabi_dmul+0x234>
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	e72c      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a00:	ea95 0f0c 	teq	r5, ip
 8000a04:	d106      	bne.n	8000a14 <__aeabi_ddiv+0x1b0>
 8000a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0a:	f43f aefd 	beq.w	8000808 <__aeabi_dmul+0x1f8>
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	e722      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	f47f aec5 	bne.w	80007ac <__aeabi_dmul+0x19c>
 8000a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a26:	f47f af0d 	bne.w	8000844 <__aeabi_dmul+0x234>
 8000a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2e:	f47f aeeb 	bne.w	8000808 <__aeabi_dmul+0x1f8>
 8000a32:	e712      	b.n	800085a <__aeabi_dmul+0x24a>

08000a34 <__gedf2>:
 8000a34:	f04f 3cff 	mov.w	ip, #4294967295
 8000a38:	e006      	b.n	8000a48 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__ledf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	e002      	b.n	8000a48 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__cmpdf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5e:	d01b      	beq.n	8000a98 <__cmpdf2+0x54>
 8000a60:	b001      	add	sp, #4
 8000a62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a66:	bf0c      	ite	eq
 8000a68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a6c:	ea91 0f03 	teqne	r1, r3
 8000a70:	bf02      	ittt	eq
 8000a72:	ea90 0f02 	teqeq	r0, r2
 8000a76:	2000      	moveq	r0, #0
 8000a78:	4770      	bxeq	lr
 8000a7a:	f110 0f00 	cmn.w	r0, #0
 8000a7e:	ea91 0f03 	teq	r1, r3
 8000a82:	bf58      	it	pl
 8000a84:	4299      	cmppl	r1, r3
 8000a86:	bf08      	it	eq
 8000a88:	4290      	cmpeq	r0, r2
 8000a8a:	bf2c      	ite	cs
 8000a8c:	17d8      	asrcs	r0, r3, #31
 8000a8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a92:	f040 0001 	orr.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__cmpdf2+0x64>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d107      	bne.n	8000ab8 <__cmpdf2+0x74>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d1d6      	bne.n	8000a60 <__cmpdf2+0x1c>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d0d3      	beq.n	8000a60 <__cmpdf2+0x1c>
 8000ab8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdrcmple>:
 8000ac0:	4684      	mov	ip, r0
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4662      	mov	r2, ip
 8000ac6:	468c      	mov	ip, r1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4663      	mov	r3, ip
 8000acc:	e000      	b.n	8000ad0 <__aeabi_cdcmpeq>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdcmpeq>:
 8000ad0:	b501      	push	{r0, lr}
 8000ad2:	f7ff ffb7 	bl	8000a44 <__cmpdf2>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	bf48      	it	mi
 8000ada:	f110 0f00 	cmnmi.w	r0, #0
 8000ade:	bd01      	pop	{r0, pc}

08000ae0 <__aeabi_dcmpeq>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff fff4 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000ae8:	bf0c      	ite	eq
 8000aea:	2001      	moveq	r0, #1
 8000aec:	2000      	movne	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmplt>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffea 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000afc:	bf34      	ite	cc
 8000afe:	2001      	movcc	r0, #1
 8000b00:	2000      	movcs	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmple>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffe0 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000b10:	bf94      	ite	ls
 8000b12:	2001      	movls	r0, #1
 8000b14:	2000      	movhi	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpge>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffce 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b24:	bf94      	ite	ls
 8000b26:	2001      	movls	r0, #1
 8000b28:	2000      	movhi	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmpgt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffc4 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpun>:
 8000b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x10>
 8000b4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b52:	d10a      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x20>
 8000b5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0001 	mov.w	r0, #1
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2iz>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b78:	d215      	bcs.n	8000ba6 <__aeabi_d2iz+0x36>
 8000b7a:	d511      	bpl.n	8000ba0 <__aeabi_d2iz+0x30>
 8000b7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b84:	d912      	bls.n	8000bac <__aeabi_d2iz+0x3c>
 8000b86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b96:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d105      	bne.n	8000bb8 <__aeabi_d2iz+0x48>
 8000bac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	bf08      	it	eq
 8000bb2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_d2uiz>:
 8000bc0:	004a      	lsls	r2, r1, #1
 8000bc2:	d211      	bcs.n	8000be8 <__aeabi_d2uiz+0x28>
 8000bc4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc8:	d211      	bcs.n	8000bee <__aeabi_d2uiz+0x2e>
 8000bca:	d50d      	bpl.n	8000be8 <__aeabi_d2uiz+0x28>
 8000bcc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd4:	d40e      	bmi.n	8000bf4 <__aeabi_d2uiz+0x34>
 8000bd6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bde:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000be2:	fa23 f002 	lsr.w	r0, r3, r2
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d102      	bne.n	8000bfa <__aeabi_d2uiz+0x3a>
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf8:	4770      	bx	lr
 8000bfa:	f04f 0000 	mov.w	r0, #0
 8000bfe:	4770      	bx	lr

08000c00 <__aeabi_d2f>:
 8000c00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c08:	bf24      	itt	cs
 8000c0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c12:	d90d      	bls.n	8000c30 <__aeabi_d2f+0x30>
 8000c14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c28:	bf08      	it	eq
 8000c2a:	f020 0001 	biceq.w	r0, r0, #1
 8000c2e:	4770      	bx	lr
 8000c30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c34:	d121      	bne.n	8000c7a <__aeabi_d2f+0x7a>
 8000c36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c3a:	bfbc      	itt	lt
 8000c3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	4770      	bxlt	lr
 8000c42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c4a:	f1c2 0218 	rsb	r2, r2, #24
 8000c4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c56:	fa20 f002 	lsr.w	r0, r0, r2
 8000c5a:	bf18      	it	ne
 8000c5c:	f040 0001 	orrne.w	r0, r0, #1
 8000c60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c6c:	ea40 000c 	orr.w	r0, r0, ip
 8000c70:	fa23 f302 	lsr.w	r3, r3, r2
 8000c74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c78:	e7cc      	b.n	8000c14 <__aeabi_d2f+0x14>
 8000c7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7e:	d107      	bne.n	8000c90 <__aeabi_d2f+0x90>
 8000c80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c84:	bf1e      	ittt	ne
 8000c86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8e:	4770      	bxne	lr
 8000c90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_uldivmod>:
 8000ca0:	b953      	cbnz	r3, 8000cb8 <__aeabi_uldivmod+0x18>
 8000ca2:	b94a      	cbnz	r2, 8000cb8 <__aeabi_uldivmod+0x18>
 8000ca4:	2900      	cmp	r1, #0
 8000ca6:	bf08      	it	eq
 8000ca8:	2800      	cmpeq	r0, #0
 8000caa:	bf1c      	itt	ne
 8000cac:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb4:	f000 b97a 	b.w	8000fac <__aeabi_idiv0>
 8000cb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc0:	f000 f806 	bl	8000cd0 <__udivmoddi4>
 8000cc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ccc:	b004      	add	sp, #16
 8000cce:	4770      	bx	lr

08000cd0 <__udivmoddi4>:
 8000cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd4:	468c      	mov	ip, r1
 8000cd6:	460d      	mov	r5, r1
 8000cd8:	4604      	mov	r4, r0
 8000cda:	9e08      	ldr	r6, [sp, #32]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d151      	bne.n	8000d84 <__udivmoddi4+0xb4>
 8000ce0:	428a      	cmp	r2, r1
 8000ce2:	4617      	mov	r7, r2
 8000ce4:	d96d      	bls.n	8000dc2 <__udivmoddi4+0xf2>
 8000ce6:	fab2 fe82 	clz	lr, r2
 8000cea:	f1be 0f00 	cmp.w	lr, #0
 8000cee:	d00b      	beq.n	8000d08 <__udivmoddi4+0x38>
 8000cf0:	f1ce 0c20 	rsb	ip, lr, #32
 8000cf4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000cf8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cfc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000d00:	ea4c 0c05 	orr.w	ip, ip, r5
 8000d04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d08:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000d0c:	0c25      	lsrs	r5, r4, #16
 8000d0e:	fbbc f8fa 	udiv	r8, ip, sl
 8000d12:	fa1f f987 	uxth.w	r9, r7
 8000d16:	fb0a cc18 	mls	ip, sl, r8, ip
 8000d1a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d1e:	fb08 f309 	mul.w	r3, r8, r9
 8000d22:	42ab      	cmp	r3, r5
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x6c>
 8000d26:	19ed      	adds	r5, r5, r7
 8000d28:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d2c:	f080 8123 	bcs.w	8000f76 <__udivmoddi4+0x2a6>
 8000d30:	42ab      	cmp	r3, r5
 8000d32:	f240 8120 	bls.w	8000f76 <__udivmoddi4+0x2a6>
 8000d36:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3a:	443d      	add	r5, r7
 8000d3c:	1aed      	subs	r5, r5, r3
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d44:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d4c:	fb00 f909 	mul.w	r9, r0, r9
 8000d50:	45a1      	cmp	r9, r4
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x98>
 8000d54:	19e4      	adds	r4, r4, r7
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	f080 810a 	bcs.w	8000f72 <__udivmoddi4+0x2a2>
 8000d5e:	45a1      	cmp	r9, r4
 8000d60:	f240 8107 	bls.w	8000f72 <__udivmoddi4+0x2a2>
 8000d64:	3802      	subs	r0, #2
 8000d66:	443c      	add	r4, r7
 8000d68:	eba4 0409 	sub.w	r4, r4, r9
 8000d6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d70:	2100      	movs	r1, #0
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d061      	beq.n	8000e3a <__udivmoddi4+0x16a>
 8000d76:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	6034      	str	r4, [r6, #0]
 8000d7e:	6073      	str	r3, [r6, #4]
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	428b      	cmp	r3, r1
 8000d86:	d907      	bls.n	8000d98 <__udivmoddi4+0xc8>
 8000d88:	2e00      	cmp	r6, #0
 8000d8a:	d054      	beq.n	8000e36 <__udivmoddi4+0x166>
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d92:	4608      	mov	r0, r1
 8000d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d98:	fab3 f183 	clz	r1, r3
 8000d9c:	2900      	cmp	r1, #0
 8000d9e:	f040 808e 	bne.w	8000ebe <__udivmoddi4+0x1ee>
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	d302      	bcc.n	8000dac <__udivmoddi4+0xdc>
 8000da6:	4282      	cmp	r2, r0
 8000da8:	f200 80fa 	bhi.w	8000fa0 <__udivmoddi4+0x2d0>
 8000dac:	1a84      	subs	r4, r0, r2
 8000dae:	eb65 0503 	sbc.w	r5, r5, r3
 8000db2:	2001      	movs	r0, #1
 8000db4:	46ac      	mov	ip, r5
 8000db6:	2e00      	cmp	r6, #0
 8000db8:	d03f      	beq.n	8000e3a <__udivmoddi4+0x16a>
 8000dba:	e886 1010 	stmia.w	r6, {r4, ip}
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	b912      	cbnz	r2, 8000dca <__udivmoddi4+0xfa>
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000dca:	fab7 fe87 	clz	lr, r7
 8000dce:	f1be 0f00 	cmp.w	lr, #0
 8000dd2:	d134      	bne.n	8000e3e <__udivmoddi4+0x16e>
 8000dd4:	1beb      	subs	r3, r5, r7
 8000dd6:	0c3a      	lsrs	r2, r7, #16
 8000dd8:	fa1f fc87 	uxth.w	ip, r7
 8000ddc:	2101      	movs	r1, #1
 8000dde:	fbb3 f8f2 	udiv	r8, r3, r2
 8000de2:	0c25      	lsrs	r5, r4, #16
 8000de4:	fb02 3318 	mls	r3, r2, r8, r3
 8000de8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dec:	fb0c f308 	mul.w	r3, ip, r8
 8000df0:	42ab      	cmp	r3, r5
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x134>
 8000df4:	19ed      	adds	r5, r5, r7
 8000df6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x132>
 8000dfc:	42ab      	cmp	r3, r5
 8000dfe:	f200 80d1 	bhi.w	8000fa4 <__udivmoddi4+0x2d4>
 8000e02:	4680      	mov	r8, r0
 8000e04:	1aed      	subs	r5, r5, r3
 8000e06:	b2a3      	uxth	r3, r4
 8000e08:	fbb5 f0f2 	udiv	r0, r5, r2
 8000e0c:	fb02 5510 	mls	r5, r2, r0, r5
 8000e10:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000e14:	fb0c fc00 	mul.w	ip, ip, r0
 8000e18:	45a4      	cmp	ip, r4
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x15c>
 8000e1c:	19e4      	adds	r4, r4, r7
 8000e1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x15a>
 8000e24:	45a4      	cmp	ip, r4
 8000e26:	f200 80b8 	bhi.w	8000f9a <__udivmoddi4+0x2ca>
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	eba4 040c 	sub.w	r4, r4, ip
 8000e30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e34:	e79d      	b.n	8000d72 <__udivmoddi4+0xa2>
 8000e36:	4631      	mov	r1, r6
 8000e38:	4630      	mov	r0, r6
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	f1ce 0420 	rsb	r4, lr, #32
 8000e42:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e4a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e4e:	0c3a      	lsrs	r2, r7, #16
 8000e50:	fa25 f404 	lsr.w	r4, r5, r4
 8000e54:	ea48 0803 	orr.w	r8, r8, r3
 8000e58:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e5c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e60:	fb02 4411 	mls	r4, r2, r1, r4
 8000e64:	fa1f fc87 	uxth.w	ip, r7
 8000e68:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e6c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e70:	42ab      	cmp	r3, r5
 8000e72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e76:	d909      	bls.n	8000e8c <__udivmoddi4+0x1bc>
 8000e78:	19ed      	adds	r5, r5, r7
 8000e7a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e7e:	f080 808a 	bcs.w	8000f96 <__udivmoddi4+0x2c6>
 8000e82:	42ab      	cmp	r3, r5
 8000e84:	f240 8087 	bls.w	8000f96 <__udivmoddi4+0x2c6>
 8000e88:	3902      	subs	r1, #2
 8000e8a:	443d      	add	r5, r7
 8000e8c:	1aeb      	subs	r3, r5, r3
 8000e8e:	fa1f f588 	uxth.w	r5, r8
 8000e92:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e96:	fb02 3310 	mls	r3, r2, r0, r3
 8000e9a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e9e:	fb00 f30c 	mul.w	r3, r0, ip
 8000ea2:	42ab      	cmp	r3, r5
 8000ea4:	d907      	bls.n	8000eb6 <__udivmoddi4+0x1e6>
 8000ea6:	19ed      	adds	r5, r5, r7
 8000ea8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eac:	d26f      	bcs.n	8000f8e <__udivmoddi4+0x2be>
 8000eae:	42ab      	cmp	r3, r5
 8000eb0:	d96d      	bls.n	8000f8e <__udivmoddi4+0x2be>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	443d      	add	r5, r7
 8000eb6:	1aeb      	subs	r3, r5, r3
 8000eb8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ebc:	e78f      	b.n	8000dde <__udivmoddi4+0x10e>
 8000ebe:	f1c1 0720 	rsb	r7, r1, #32
 8000ec2:	fa22 f807 	lsr.w	r8, r2, r7
 8000ec6:	408b      	lsls	r3, r1
 8000ec8:	fa05 f401 	lsl.w	r4, r5, r1
 8000ecc:	ea48 0303 	orr.w	r3, r8, r3
 8000ed0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000ed4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	ea4e 0e04 	orr.w	lr, lr, r4
 8000ede:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ee2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000ee6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000eea:	fa1f f883 	uxth.w	r8, r3
 8000eee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ef2:	fb09 f408 	mul.w	r4, r9, r8
 8000ef6:	42ac      	cmp	r4, r5
 8000ef8:	fa02 f201 	lsl.w	r2, r2, r1
 8000efc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x244>
 8000f02:	18ed      	adds	r5, r5, r3
 8000f04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f08:	d243      	bcs.n	8000f92 <__udivmoddi4+0x2c2>
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	d941      	bls.n	8000f92 <__udivmoddi4+0x2c2>
 8000f0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f12:	441d      	add	r5, r3
 8000f14:	1b2d      	subs	r5, r5, r4
 8000f16:	fa1f fe8e 	uxth.w	lr, lr
 8000f1a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000f1e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f22:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f26:	fb00 f808 	mul.w	r8, r0, r8
 8000f2a:	45a0      	cmp	r8, r4
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x26e>
 8000f2e:	18e4      	adds	r4, r4, r3
 8000f30:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f34:	d229      	bcs.n	8000f8a <__udivmoddi4+0x2ba>
 8000f36:	45a0      	cmp	r8, r4
 8000f38:	d927      	bls.n	8000f8a <__udivmoddi4+0x2ba>
 8000f3a:	3802      	subs	r0, #2
 8000f3c:	441c      	add	r4, r3
 8000f3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f42:	eba4 0408 	sub.w	r4, r4, r8
 8000f46:	fba0 8902 	umull	r8, r9, r0, r2
 8000f4a:	454c      	cmp	r4, r9
 8000f4c:	46c6      	mov	lr, r8
 8000f4e:	464d      	mov	r5, r9
 8000f50:	d315      	bcc.n	8000f7e <__udivmoddi4+0x2ae>
 8000f52:	d012      	beq.n	8000f7a <__udivmoddi4+0x2aa>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x29c>
 8000f56:	ebba 030e 	subs.w	r3, sl, lr
 8000f5a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40cb      	lsrs	r3, r1
 8000f64:	431f      	orrs	r7, r3
 8000f66:	40cc      	lsrs	r4, r1
 8000f68:	6037      	str	r7, [r6, #0]
 8000f6a:	6074      	str	r4, [r6, #4]
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f72:	4618      	mov	r0, r3
 8000f74:	e6f8      	b.n	8000d68 <__udivmoddi4+0x98>
 8000f76:	4690      	mov	r8, r2
 8000f78:	e6e0      	b.n	8000d3c <__udivmoddi4+0x6c>
 8000f7a:	45c2      	cmp	sl, r8
 8000f7c:	d2ea      	bcs.n	8000f54 <__udivmoddi4+0x284>
 8000f7e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f82:	eb69 0503 	sbc.w	r5, r9, r3
 8000f86:	3801      	subs	r0, #1
 8000f88:	e7e4      	b.n	8000f54 <__udivmoddi4+0x284>
 8000f8a:	4628      	mov	r0, r5
 8000f8c:	e7d7      	b.n	8000f3e <__udivmoddi4+0x26e>
 8000f8e:	4640      	mov	r0, r8
 8000f90:	e791      	b.n	8000eb6 <__udivmoddi4+0x1e6>
 8000f92:	4681      	mov	r9, r0
 8000f94:	e7be      	b.n	8000f14 <__udivmoddi4+0x244>
 8000f96:	4601      	mov	r1, r0
 8000f98:	e778      	b.n	8000e8c <__udivmoddi4+0x1bc>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	443c      	add	r4, r7
 8000f9e:	e745      	b.n	8000e2c <__udivmoddi4+0x15c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e708      	b.n	8000db6 <__udivmoddi4+0xe6>
 8000fa4:	f1a8 0802 	sub.w	r8, r8, #2
 8000fa8:	443d      	add	r5, r7
 8000faa:	e72b      	b.n	8000e04 <__udivmoddi4+0x134>

08000fac <__aeabi_idiv0>:
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop

08000fb0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fba:	4a0c      	ldr	r2, [pc, #48]	; (8000fec <HAL_Init+0x3c>)
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <HAL_Init+0x3c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc6:	2003      	movs	r0, #3
 8000fc8:	f000 f9b4 	bl	8001334 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f000 f80f 	bl	8000ff0 <HAL_InitTick>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d002      	beq.n	8000fde <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	71fb      	strb	r3, [r7, #7]
 8000fdc:	e001      	b.n	8000fe2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fde:	f008 f8b1 	bl	8009144 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40022000 	.word	0x40022000

08000ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <HAL_InitTick+0x68>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d022      	beq.n	800104a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <HAL_InitTick+0x6c>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b13      	ldr	r3, [pc, #76]	; (8001058 <HAL_InitTick+0x68>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001010:	fbb1 f3f3 	udiv	r3, r1, r3
 8001014:	fbb2 f3f3 	udiv	r3, r2, r3
 8001018:	4618      	mov	r0, r3
 800101a:	f000 f9d4 	bl	80013c6 <HAL_SYSTICK_Config>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d10f      	bne.n	8001044 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b0f      	cmp	r3, #15
 8001028:	d809      	bhi.n	800103e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800102a:	2200      	movs	r2, #0
 800102c:	6879      	ldr	r1, [r7, #4]
 800102e:	f04f 30ff 	mov.w	r0, #4294967295
 8001032:	f000 f98a 	bl	800134a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001036:	4a0a      	ldr	r2, [pc, #40]	; (8001060 <HAL_InitTick+0x70>)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	e007      	b.n	800104e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	73fb      	strb	r3, [r7, #15]
 8001042:	e004      	b.n	800104e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	73fb      	strb	r3, [r7, #15]
 8001048:	e001      	b.n	800104e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800104e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000004 	.word	0x20000004
 800105c:	2000000c 	.word	0x2000000c
 8001060:	20000000 	.word	0x20000000

08001064 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <HAL_IncTick+0x1c>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <HAL_IncTick+0x20>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4413      	add	r3, r2
 8001072:	4a03      	ldr	r2, [pc, #12]	; (8001080 <HAL_IncTick+0x1c>)
 8001074:	6013      	str	r3, [r2, #0]
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20000748 	.word	0x20000748
 8001084:	20000004 	.word	0x20000004

08001088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return uwTick;
 800108c:	4b02      	ldr	r3, [pc, #8]	; (8001098 <HAL_GetTick+0x10>)
 800108e:	681b      	ldr	r3, [r3, #0]
}
 8001090:	4618      	mov	r0, r3
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr
 8001098:	20000748 	.word	0x20000748

0800109c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a4:	f7ff fff0 	bl	8001088 <HAL_GetTick>
 80010a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b4:	d004      	beq.n	80010c0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <HAL_Delay+0x40>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	4413      	add	r3, r2
 80010be:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010c0:	bf00      	nop
 80010c2:	f7ff ffe1 	bl	8001088 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	1ad2      	subs	r2, r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d3f7      	bcc.n	80010c2 <HAL_Delay+0x26>
  {
  }
}
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000004 	.word	0x20000004

080010e0 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP0/STOP1/STOP2 modes.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80010e4:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 80010e6:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f043 0302 	orr.w	r3, r3, #2
 80010ee:	6053      	str	r3, [r2, #4]
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr
 80010f8:	e0042000 	.word	0xe0042000

080010fc <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8001100:	4a04      	ldr	r2, [pc, #16]	; (8001114 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8001102:	4b04      	ldr	r3, [pc, #16]	; (8001114 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f043 0304 	orr.w	r3, r3, #4
 800110a:	6053      	str	r3, [r2, #4]
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr
 8001114:	e0042000 	.word	0xe0042000

08001118 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <NVIC_SetPriorityGrouping+0x44>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001134:	4013      	ands	r3, r2
 8001136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001140:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114a:	4a04      	ldr	r2, [pc, #16]	; (800115c <NVIC_SetPriorityGrouping+0x44>)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	60d3      	str	r3, [r2, #12]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <NVIC_GetPriorityGrouping+0x18>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	f003 0307 	and.w	r3, r3, #7
}
 800116e:	4618      	mov	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001186:	4908      	ldr	r1, [pc, #32]	; (80011a8 <NVIC_EnableIRQ+0x2c>)
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	095b      	lsrs	r3, r3, #5
 800118e:	79fa      	ldrb	r2, [r7, #7]
 8001190:	f002 021f 	and.w	r2, r2, #31
 8001194:	2001      	movs	r0, #1
 8001196:	fa00 f202 	lsl.w	r2, r0, r2
 800119a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr
 80011a8:	e000e100 	.word	0xe000e100

080011ac <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80011b6:	4909      	ldr	r1, [pc, #36]	; (80011dc <NVIC_DisableIRQ+0x30>)
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	095b      	lsrs	r3, r3, #5
 80011be:	79fa      	ldrb	r2, [r7, #7]
 80011c0:	f002 021f 	and.w	r2, r2, #31
 80011c4:	2001      	movs	r0, #1
 80011c6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ca:	3320      	adds	r3, #32
 80011cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000e100 	.word	0xe000e100

080011e0 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80011ea:	4909      	ldr	r1, [pc, #36]	; (8001210 <NVIC_ClearPendingIRQ+0x30>)
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	095b      	lsrs	r3, r3, #5
 80011f2:	79fa      	ldrb	r2, [r7, #7]
 80011f4:	f002 021f 	and.w	r2, r2, #31
 80011f8:	2001      	movs	r0, #1
 80011fa:	fa00 f202 	lsl.w	r2, r0, r2
 80011fe:	3360      	adds	r3, #96	; 0x60
 8001200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000e100 	.word	0xe000e100

08001214 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	6039      	str	r1, [r7, #0]
 800121e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001224:	2b00      	cmp	r3, #0
 8001226:	da0b      	bge.n	8001240 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001228:	490d      	ldr	r1, [pc, #52]	; (8001260 <NVIC_SetPriority+0x4c>)
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	f003 030f 	and.w	r3, r3, #15
 8001230:	3b04      	subs	r3, #4
 8001232:	683a      	ldr	r2, [r7, #0]
 8001234:	b2d2      	uxtb	r2, r2
 8001236:	0112      	lsls	r2, r2, #4
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	440b      	add	r3, r1
 800123c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800123e:	e009      	b.n	8001254 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001240:	4908      	ldr	r1, [pc, #32]	; (8001264 <NVIC_SetPriority+0x50>)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	0112      	lsls	r2, r2, #4
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	440b      	add	r3, r1
 8001250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000ed00 	.word	0xe000ed00
 8001264:	e000e100 	.word	0xe000e100

08001268 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001268:	b480      	push	{r7}
 800126a:	b089      	sub	sp, #36	; 0x24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f1c3 0307 	rsb	r3, r3, #7
 8001282:	2b04      	cmp	r3, #4
 8001284:	bf28      	it	cs
 8001286:	2304      	movcs	r3, #4
 8001288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3304      	adds	r3, #4
 800128e:	2b06      	cmp	r3, #6
 8001290:	d902      	bls.n	8001298 <NVIC_EncodePriority+0x30>
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3b03      	subs	r3, #3
 8001296:	e000      	b.n	800129a <NVIC_EncodePriority+0x32>
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800129c:	2201      	movs	r2, #1
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	1e5a      	subs	r2, r3, #1
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	401a      	ands	r2, r3
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ae:	2101      	movs	r1, #1
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	fa01 f303 	lsl.w	r3, r1, r3
 80012b6:	1e59      	subs	r1, r3, #1
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	4313      	orrs	r3, r2
         );
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3724      	adds	r7, #36	; 0x24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012cc:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80012d0:	4905      	ldr	r1, [pc, #20]	; (80012e8 <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80012d2:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <NVIC_SystemReset+0x20>)
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80012da:	4b04      	ldr	r3, [pc, #16]	; (80012ec <NVIC_SystemReset+0x24>)
 80012dc:	4313      	orrs	r3, r2
 80012de:	60cb      	str	r3, [r1, #12]
 80012e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80012e4:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80012e6:	e7fd      	b.n	80012e4 <NVIC_SystemReset+0x1c>
 80012e8:	e000ed00 	.word	0xe000ed00
 80012ec:	05fa0004 	.word	0x05fa0004

080012f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001300:	d301      	bcc.n	8001306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001302:	2301      	movs	r3, #1
 8001304:	e00f      	b.n	8001326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001306:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <SysTick_Config+0x40>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130e:	210f      	movs	r1, #15
 8001310:	f04f 30ff 	mov.w	r0, #4294967295
 8001314:	f7ff ff7e 	bl	8001214 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <SysTick_Config+0x40>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <SysTick_Config+0x40>)
 8001320:	2207      	movs	r2, #7
 8001322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	e000e010 	.word	0xe000e010

08001334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff feeb 	bl	8001118 <NVIC_SetPriorityGrouping>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af00      	add	r7, sp, #0
 8001350:	4603      	mov	r3, r0
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800135c:	f7ff ff00 	bl	8001160 <NVIC_GetPriorityGrouping>
 8001360:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	68b9      	ldr	r1, [r7, #8]
 8001366:	6978      	ldr	r0, [r7, #20]
 8001368:	f7ff ff7e 	bl	8001268 <NVIC_EncodePriority>
 800136c:	4602      	mov	r2, r0
 800136e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff4d 	bl	8001214 <NVIC_SetPriority>
}
 800137a:	bf00      	nop
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	4603      	mov	r3, r0
 800138a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800138c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fef3 	bl	800117c <NVIC_EnableIRQ>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	4603      	mov	r3, r0
 80013a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80013a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fefd 	bl	80011ac <NVIC_DisableIRQ>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80013be:	f7ff ff83 	bl	80012c8 <NVIC_SystemReset>
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff ff8e 	bl	80012f0 <SysTick_Config>
 80013d4:	4603      	mov	r3, r0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	4603      	mov	r3, r0
 80013e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80013e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fef7 	bl	80011e0 <NVIC_ClearPendingIRQ>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e098      	b.n	8001540 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	461a      	mov	r2, r3
 8001414:	4b4d      	ldr	r3, [pc, #308]	; (800154c <HAL_DMA_Init+0x150>)
 8001416:	429a      	cmp	r2, r3
 8001418:	d80f      	bhi.n	800143a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	461a      	mov	r2, r3
 8001420:	4b4b      	ldr	r3, [pc, #300]	; (8001550 <HAL_DMA_Init+0x154>)
 8001422:	4413      	add	r3, r2
 8001424:	4a4b      	ldr	r2, [pc, #300]	; (8001554 <HAL_DMA_Init+0x158>)
 8001426:	fba2 2303 	umull	r2, r3, r2, r3
 800142a:	091b      	lsrs	r3, r3, #4
 800142c:	009a      	lsls	r2, r3, #2
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a48      	ldr	r2, [pc, #288]	; (8001558 <HAL_DMA_Init+0x15c>)
 8001436:	641a      	str	r2, [r3, #64]	; 0x40
 8001438:	e00e      	b.n	8001458 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	461a      	mov	r2, r3
 8001440:	4b46      	ldr	r3, [pc, #280]	; (800155c <HAL_DMA_Init+0x160>)
 8001442:	4413      	add	r3, r2
 8001444:	4a43      	ldr	r2, [pc, #268]	; (8001554 <HAL_DMA_Init+0x158>)
 8001446:	fba2 2303 	umull	r2, r3, r2, r3
 800144a:	091b      	lsrs	r3, r3, #4
 800144c:	009a      	lsls	r2, r3, #2
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a42      	ldr	r2, [pc, #264]	; (8001560 <HAL_DMA_Init+0x164>)
 8001456:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2202      	movs	r2, #2
 800145c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800146e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001472:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800147c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001488:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001494:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800149c:	68fa      	ldr	r2, [r7, #12]
 800149e:	4313      	orrs	r3, r2
 80014a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014b2:	d039      	beq.n	8001528 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	4a27      	ldr	r2, [pc, #156]	; (8001558 <HAL_DMA_Init+0x15c>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d11a      	bne.n	80014f4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80014be:	4929      	ldr	r1, [pc, #164]	; (8001564 <HAL_DMA_Init+0x168>)
 80014c0:	4b28      	ldr	r3, [pc, #160]	; (8001564 <HAL_DMA_Init+0x168>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c8:	f003 031c 	and.w	r3, r3, #28
 80014cc:	200f      	movs	r0, #15
 80014ce:	fa00 f303 	lsl.w	r3, r0, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	4013      	ands	r3, r2
 80014d6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80014d8:	4822      	ldr	r0, [pc, #136]	; (8001564 <HAL_DMA_Init+0x168>)
 80014da:	4b22      	ldr	r3, [pc, #136]	; (8001564 <HAL_DMA_Init+0x168>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6859      	ldr	r1, [r3, #4]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	f003 031c 	and.w	r3, r3, #28
 80014ea:	fa01 f303 	lsl.w	r3, r1, r3
 80014ee:	4313      	orrs	r3, r2
 80014f0:	6003      	str	r3, [r0, #0]
 80014f2:	e019      	b.n	8001528 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80014f4:	491c      	ldr	r1, [pc, #112]	; (8001568 <HAL_DMA_Init+0x16c>)
 80014f6:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <HAL_DMA_Init+0x16c>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	f003 031c 	and.w	r3, r3, #28
 8001502:	200f      	movs	r0, #15
 8001504:	fa00 f303 	lsl.w	r3, r0, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	4013      	ands	r3, r2
 800150c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800150e:	4816      	ldr	r0, [pc, #88]	; (8001568 <HAL_DMA_Init+0x16c>)
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <HAL_DMA_Init+0x16c>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6859      	ldr	r1, [r3, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151c:	f003 031c 	and.w	r3, r3, #28
 8001520:	fa01 f303 	lsl.w	r3, r1, r3
 8001524:	4313      	orrs	r3, r2
 8001526:	6003      	str	r3, [r0, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40020407 	.word	0x40020407
 8001550:	bffdfff8 	.word	0xbffdfff8
 8001554:	cccccccd 	.word	0xcccccccd
 8001558:	40020000 	.word	0x40020000
 800155c:	bffdfbf8 	.word	0xbffdfbf8
 8001560:	40020400 	.word	0x40020400
 8001564:	400200a8 	.word	0x400200a8
 8001568:	400204a8 	.word	0x400204a8

0800156c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e072      	b.n	8001664 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	6812      	ldr	r2, [r2, #0]
 8001586:	6812      	ldr	r2, [r2, #0]
 8001588:	f022 0201 	bic.w	r2, r2, #1
 800158c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	4b36      	ldr	r3, [pc, #216]	; (8001670 <HAL_DMA_DeInit+0x104>)
 8001596:	429a      	cmp	r2, r3
 8001598:	d80f      	bhi.n	80015ba <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	461a      	mov	r2, r3
 80015a0:	4b34      	ldr	r3, [pc, #208]	; (8001674 <HAL_DMA_DeInit+0x108>)
 80015a2:	4413      	add	r3, r2
 80015a4:	4a34      	ldr	r2, [pc, #208]	; (8001678 <HAL_DMA_DeInit+0x10c>)
 80015a6:	fba2 2303 	umull	r2, r3, r2, r3
 80015aa:	091b      	lsrs	r3, r3, #4
 80015ac:	009a      	lsls	r2, r3, #2
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a31      	ldr	r2, [pc, #196]	; (800167c <HAL_DMA_DeInit+0x110>)
 80015b6:	641a      	str	r2, [r3, #64]	; 0x40
 80015b8:	e00e      	b.n	80015d8 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	461a      	mov	r2, r3
 80015c0:	4b2f      	ldr	r3, [pc, #188]	; (8001680 <HAL_DMA_DeInit+0x114>)
 80015c2:	4413      	add	r3, r2
 80015c4:	4a2c      	ldr	r2, [pc, #176]	; (8001678 <HAL_DMA_DeInit+0x10c>)
 80015c6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ca:	091b      	lsrs	r3, r3, #4
 80015cc:	009a      	lsls	r2, r3, #2
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a2b      	ldr	r2, [pc, #172]	; (8001684 <HAL_DMA_DeInit+0x118>)
 80015d6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80015e8:	f002 021c 	and.w	r2, r2, #28
 80015ec:	2101      	movs	r1, #1
 80015ee:	fa01 f202 	lsl.w	r2, r1, r2
 80015f2:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	4a20      	ldr	r2, [pc, #128]	; (800167c <HAL_DMA_DeInit+0x110>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d10d      	bne.n	800161a <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80015fe:	4922      	ldr	r1, [pc, #136]	; (8001688 <HAL_DMA_DeInit+0x11c>)
 8001600:	4b21      	ldr	r3, [pc, #132]	; (8001688 <HAL_DMA_DeInit+0x11c>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001608:	f003 031c 	and.w	r3, r3, #28
 800160c:	200f      	movs	r0, #15
 800160e:	fa00 f303 	lsl.w	r3, r0, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	4013      	ands	r3, r2
 8001616:	600b      	str	r3, [r1, #0]
 8001618:	e00c      	b.n	8001634 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800161a:	491c      	ldr	r1, [pc, #112]	; (800168c <HAL_DMA_DeInit+0x120>)
 800161c:	4b1b      	ldr	r3, [pc, #108]	; (800168c <HAL_DMA_DeInit+0x120>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001624:	f003 031c 	and.w	r3, r3, #28
 8001628:	200f      	movs	r0, #15
 800162a:	fa00 f303 	lsl.w	r3, r0, r3
 800162e:	43db      	mvns	r3, r3
 8001630:	4013      	ands	r3, r2
 8001632:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40020407 	.word	0x40020407
 8001674:	bffdfff8 	.word	0xbffdfff8
 8001678:	cccccccd 	.word	0xcccccccd
 800167c:	40020000 	.word	0x40020000
 8001680:	bffdfbf8 	.word	0xbffdfbf8
 8001684:	40020400 	.word	0x40020400
 8001688:	400200a8 	.word	0x400200a8
 800168c:	400204a8 	.word	0x400204a8

08001690 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
 800169c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d101      	bne.n	80016b0 <HAL_DMA_Start+0x20>
 80016ac:	2302      	movs	r3, #2
 80016ae:	e02e      	b.n	800170e <HAL_DMA_Start+0x7e>
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d11d      	bne.n	8001700 <HAL_DMA_Start+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2202      	movs	r2, #2
 80016c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2200      	movs	r2, #0
 80016d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	6812      	ldr	r2, [r2, #0]
 80016da:	6812      	ldr	r2, [r2, #0]
 80016dc:	f022 0201 	bic.w	r2, r2, #1
 80016e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	68b9      	ldr	r1, [r7, #8]
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f000 f9ac 	bl	8001a46 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	6812      	ldr	r2, [r2, #0]
 80016f6:	6812      	ldr	r2, [r2, #0]
 80016f8:	f042 0201 	orr.w	r2, r2, #1
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	e005      	b.n	800170c <HAL_DMA_Start+0x7c>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    status = HAL_BUSY;
 8001708:	2302      	movs	r3, #2
 800170a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800170c:	7dfb      	ldrb	r3, [r7, #23]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b086      	sub	sp, #24
 800171a:	af00      	add	r7, sp, #0
 800171c:	60f8      	str	r0, [r7, #12]
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	607a      	str	r2, [r7, #4]
 8001722:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001724:	2300      	movs	r3, #0
 8001726:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800172e:	2b01      	cmp	r3, #1
 8001730:	d101      	bne.n	8001736 <HAL_DMA_Start_IT+0x20>
 8001732:	2302      	movs	r3, #2
 8001734:	e04b      	b.n	80017ce <HAL_DMA_Start_IT+0xb8>
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b01      	cmp	r3, #1
 8001748:	d13a      	bne.n	80017c0 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2202      	movs	r2, #2
 800174e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2200      	movs	r2, #0
 8001756:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	6812      	ldr	r2, [r2, #0]
 8001760:	6812      	ldr	r2, [r2, #0]
 8001762:	f022 0201 	bic.w	r2, r2, #1
 8001766:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	68b9      	ldr	r1, [r7, #8]
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f000 f969 	bl	8001a46 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001778:	2b00      	cmp	r3, #0
 800177a:	d008      	beq.n	800178e <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	6812      	ldr	r2, [r2, #0]
 8001784:	6812      	ldr	r2, [r2, #0]
 8001786:	f042 020e 	orr.w	r2, r2, #14
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	e00f      	b.n	80017ae <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	6812      	ldr	r2, [r2, #0]
 8001796:	6812      	ldr	r2, [r2, #0]
 8001798:	f022 0204 	bic.w	r2, r2, #4
 800179c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	6812      	ldr	r2, [r2, #0]
 80017a6:	6812      	ldr	r2, [r2, #0]
 80017a8:	f042 020a 	orr.w	r2, r2, #10
 80017ac:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	6812      	ldr	r2, [r2, #0]
 80017b6:	6812      	ldr	r2, [r2, #0]
 80017b8:	f042 0201 	orr.w	r2, r2, #1
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	e005      	b.n	80017cc <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80017c8:	2302      	movs	r3, #2
 80017ca:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80017cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b085      	sub	sp, #20
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017de:	2300      	movs	r3, #0
 80017e0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d008      	beq.n	8001800 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2204      	movs	r2, #4
 80017f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e022      	b.n	8001846 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6812      	ldr	r2, [r2, #0]
 8001808:	6812      	ldr	r2, [r2, #0]
 800180a:	f022 020e 	bic.w	r2, r2, #14
 800180e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	6812      	ldr	r2, [r2, #0]
 800181a:	f022 0201 	bic.w	r2, r2, #1
 800181e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001828:	f002 021c 	and.w	r2, r2, #28
 800182c:	2101      	movs	r1, #1
 800182e:	fa01 f202 	lsl.w	r2, r1, r2
 8001832:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001844:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001846:	4618      	mov	r0, r3
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001858:	2300      	movs	r3, #0
 800185a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d005      	beq.n	8001874 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2204      	movs	r2, #4
 800186c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	73fb      	strb	r3, [r7, #15]
 8001872:	e029      	b.n	80018c8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6812      	ldr	r2, [r2, #0]
 800187c:	6812      	ldr	r2, [r2, #0]
 800187e:	f022 020e 	bic.w	r2, r2, #14
 8001882:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6812      	ldr	r2, [r2, #0]
 800188c:	6812      	ldr	r2, [r2, #0]
 800188e:	f022 0201 	bic.w	r2, r2, #1
 8001892:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800189c:	f002 021c 	and.w	r2, r2, #28
 80018a0:	2101      	movs	r1, #1
 80018a2:	fa01 f202 	lsl.w	r2, r1, r2
 80018a6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	4798      	blx	r3
    }
  }
  return status;
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b084      	sub	sp, #16
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	f003 031c 	and.w	r3, r3, #28
 80018f2:	2204      	movs	r2, #4
 80018f4:	409a      	lsls	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4013      	ands	r3, r2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d026      	beq.n	800194c <HAL_DMA_IRQHandler+0x7a>
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	d021      	beq.n	800194c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0320 	and.w	r3, r3, #32
 8001912:	2b00      	cmp	r3, #0
 8001914:	d107      	bne.n	8001926 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6812      	ldr	r2, [r2, #0]
 800191e:	6812      	ldr	r2, [r2, #0]
 8001920:	f022 0204 	bic.w	r2, r2, #4
 8001924:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800192e:	f002 021c 	and.w	r2, r2, #28
 8001932:	2104      	movs	r1, #4
 8001934:	fa01 f202 	lsl.w	r2, r1, r2
 8001938:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	2b00      	cmp	r3, #0
 8001940:	d071      	beq.n	8001a26 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800194a:	e06c      	b.n	8001a26 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001950:	f003 031c 	and.w	r3, r3, #28
 8001954:	2202      	movs	r2, #2
 8001956:	409a      	lsls	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4013      	ands	r3, r2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d02e      	beq.n	80019be <HAL_DMA_IRQHandler+0xec>
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d029      	beq.n	80019be <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0320 	and.w	r3, r3, #32
 8001974:	2b00      	cmp	r3, #0
 8001976:	d10b      	bne.n	8001990 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6812      	ldr	r2, [r2, #0]
 8001980:	6812      	ldr	r2, [r2, #0]
 8001982:	f022 020a 	bic.w	r2, r2, #10
 8001986:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001998:	f002 021c 	and.w	r2, r2, #28
 800199c:	2102      	movs	r1, #2
 800199e:	fa01 f202 	lsl.w	r2, r1, r2
 80019a2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d038      	beq.n	8001a26 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80019bc:	e033      	b.n	8001a26 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	f003 031c 	and.w	r3, r3, #28
 80019c6:	2208      	movs	r2, #8
 80019c8:	409a      	lsls	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4013      	ands	r3, r2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d02a      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x156>
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	f003 0308 	and.w	r3, r3, #8
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d025      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	f022 020e 	bic.w	r2, r2, #14
 80019ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80019f4:	f002 021c 	and.w	r2, r2, #28
 80019f8:	2101      	movs	r1, #1
 80019fa:	fa01 f202 	lsl.w	r2, r1, r2
 80019fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d004      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001a26:	bf00      	nop
 8001a28:	bf00      	nop
}
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bc80      	pop	{r7}
 8001a44:	4770      	bx	lr

08001a46 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b085      	sub	sp, #20
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	60f8      	str	r0, [r7, #12]
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a5c:	f002 021c 	and.w	r2, r2, #28
 8001a60:	2101      	movs	r1, #1
 8001a62:	fa01 f202 	lsl.w	r2, r1, r2
 8001a66:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2b10      	cmp	r3, #16
 8001a76:	d108      	bne.n	8001a8a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68ba      	ldr	r2, [r7, #8]
 8001a86:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a88:	e007      	b.n	8001a9a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	60da      	str	r2, [r3, #12]
}
 8001a9a:	bf00      	nop
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b087      	sub	sp, #28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab2:	e17f      	b.n	8001db4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	2101      	movs	r1, #1
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 8171 	beq.w	8001dae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d00b      	beq.n	8001aec <HAL_GPIO_Init+0x48>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d007      	beq.n	8001aec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ae0:	2b11      	cmp	r3, #17
 8001ae2:	d003      	beq.n	8001aec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b12      	cmp	r3, #18
 8001aea:	d130      	bne.n	8001b4e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	2203      	movs	r2, #3
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	68da      	ldr	r2, [r3, #12]
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b22:	2201      	movs	r2, #1
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	091b      	lsrs	r3, r3, #4
 8001b38:	f003 0201 	and.w	r2, r3, #1
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	d118      	bne.n	8001b8c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b60:	2201      	movs	r2, #1
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	08db      	lsrs	r3, r3, #3
 8001b76:	f003 0201 	and.w	r2, r3, #1
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	2203      	movs	r2, #3
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d003      	beq.n	8001bcc <HAL_GPIO_Init+0x128>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b12      	cmp	r3, #18
 8001bca:	d123      	bne.n	8001c14 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	08da      	lsrs	r2, r3, #3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3208      	adds	r2, #8
 8001bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	220f      	movs	r2, #15
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	691a      	ldr	r2, [r3, #16]
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	08da      	lsrs	r2, r3, #3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	3208      	adds	r2, #8
 8001c0e:	6939      	ldr	r1, [r7, #16]
 8001c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	2203      	movs	r2, #3
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 0203 	and.w	r2, r3, #3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 80ac 	beq.w	8001dae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c56:	4a5e      	ldr	r2, [pc, #376]	; (8001dd0 <HAL_GPIO_Init+0x32c>)
 8001c58:	4b5d      	ldr	r3, [pc, #372]	; (8001dd0 <HAL_GPIO_Init+0x32c>)
 8001c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6613      	str	r3, [r2, #96]	; 0x60
 8001c62:	4b5b      	ldr	r3, [pc, #364]	; (8001dd0 <HAL_GPIO_Init+0x32c>)
 8001c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c6e:	4a59      	ldr	r2, [pc, #356]	; (8001dd4 <HAL_GPIO_Init+0x330>)
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	089b      	lsrs	r3, r3, #2
 8001c74:	3302      	adds	r3, #2
 8001c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	220f      	movs	r2, #15
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c98:	d025      	beq.n	8001ce6 <HAL_GPIO_Init+0x242>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a4e      	ldr	r2, [pc, #312]	; (8001dd8 <HAL_GPIO_Init+0x334>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d01f      	beq.n	8001ce2 <HAL_GPIO_Init+0x23e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a4d      	ldr	r2, [pc, #308]	; (8001ddc <HAL_GPIO_Init+0x338>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d019      	beq.n	8001cde <HAL_GPIO_Init+0x23a>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a4c      	ldr	r2, [pc, #304]	; (8001de0 <HAL_GPIO_Init+0x33c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d013      	beq.n	8001cda <HAL_GPIO_Init+0x236>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a4b      	ldr	r2, [pc, #300]	; (8001de4 <HAL_GPIO_Init+0x340>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d00d      	beq.n	8001cd6 <HAL_GPIO_Init+0x232>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a4a      	ldr	r2, [pc, #296]	; (8001de8 <HAL_GPIO_Init+0x344>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d007      	beq.n	8001cd2 <HAL_GPIO_Init+0x22e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a49      	ldr	r2, [pc, #292]	; (8001dec <HAL_GPIO_Init+0x348>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d101      	bne.n	8001cce <HAL_GPIO_Init+0x22a>
 8001cca:	2306      	movs	r3, #6
 8001ccc:	e00c      	b.n	8001ce8 <HAL_GPIO_Init+0x244>
 8001cce:	2307      	movs	r3, #7
 8001cd0:	e00a      	b.n	8001ce8 <HAL_GPIO_Init+0x244>
 8001cd2:	2305      	movs	r3, #5
 8001cd4:	e008      	b.n	8001ce8 <HAL_GPIO_Init+0x244>
 8001cd6:	2304      	movs	r3, #4
 8001cd8:	e006      	b.n	8001ce8 <HAL_GPIO_Init+0x244>
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e004      	b.n	8001ce8 <HAL_GPIO_Init+0x244>
 8001cde:	2302      	movs	r3, #2
 8001ce0:	e002      	b.n	8001ce8 <HAL_GPIO_Init+0x244>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <HAL_GPIO_Init+0x244>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	f002 0203 	and.w	r2, r2, #3
 8001cee:	0092      	lsls	r2, r2, #2
 8001cf0:	4093      	lsls	r3, r2
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cf8:	4936      	ldr	r1, [pc, #216]	; (8001dd4 <HAL_GPIO_Init+0x330>)
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	089b      	lsrs	r3, r3, #2
 8001cfe:	3302      	adds	r3, #2
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d06:	4b3a      	ldr	r3, [pc, #232]	; (8001df0 <HAL_GPIO_Init+0x34c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	4013      	ands	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d2a:	4a31      	ldr	r2, [pc, #196]	; (8001df0 <HAL_GPIO_Init+0x34c>)
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001d30:	4b2f      	ldr	r3, [pc, #188]	; (8001df0 <HAL_GPIO_Init+0x34c>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d54:	4a26      	ldr	r2, [pc, #152]	; (8001df0 <HAL_GPIO_Init+0x34c>)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d5a:	4b25      	ldr	r3, [pc, #148]	; (8001df0 <HAL_GPIO_Init+0x34c>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	43db      	mvns	r3, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4013      	ands	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d7e:	4a1c      	ldr	r2, [pc, #112]	; (8001df0 <HAL_GPIO_Init+0x34c>)
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d84:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <HAL_GPIO_Init+0x34c>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4013      	ands	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001da8:	4a11      	ldr	r2, [pc, #68]	; (8001df0 <HAL_GPIO_Init+0x34c>)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	3301      	adds	r3, #1
 8001db2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f47f ae78 	bne.w	8001ab4 <HAL_GPIO_Init+0x10>
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	371c      	adds	r7, #28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40010000 	.word	0x40010000
 8001dd8:	48000400 	.word	0x48000400
 8001ddc:	48000800 	.word	0x48000800
 8001de0:	48000c00 	.word	0x48000c00
 8001de4:	48001000 	.word	0x48001000
 8001de8:	48001400 	.word	0x48001400
 8001dec:	48001800 	.word	0x48001800
 8001df0:	40010400 	.word	0x40010400

08001df4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b087      	sub	sp, #28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001e02:	e0cd      	b.n	8001fa0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001e04:	2201      	movs	r2, #1
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	409a      	lsls	r2, r3
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 80c1 	beq.w	8001f9a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001e18:	4a67      	ldr	r2, [pc, #412]	; (8001fb8 <HAL_GPIO_DeInit+0x1c4>)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	089b      	lsrs	r3, r3, #2
 8001e1e:	3302      	adds	r3, #2
 8001e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e24:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	220f      	movs	r2, #15
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	4013      	ands	r3, r2
 8001e38:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e40:	d025      	beq.n	8001e8e <HAL_GPIO_DeInit+0x9a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a5d      	ldr	r2, [pc, #372]	; (8001fbc <HAL_GPIO_DeInit+0x1c8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d01f      	beq.n	8001e8a <HAL_GPIO_DeInit+0x96>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a5c      	ldr	r2, [pc, #368]	; (8001fc0 <HAL_GPIO_DeInit+0x1cc>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d019      	beq.n	8001e86 <HAL_GPIO_DeInit+0x92>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a5b      	ldr	r2, [pc, #364]	; (8001fc4 <HAL_GPIO_DeInit+0x1d0>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d013      	beq.n	8001e82 <HAL_GPIO_DeInit+0x8e>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a5a      	ldr	r2, [pc, #360]	; (8001fc8 <HAL_GPIO_DeInit+0x1d4>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d00d      	beq.n	8001e7e <HAL_GPIO_DeInit+0x8a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a59      	ldr	r2, [pc, #356]	; (8001fcc <HAL_GPIO_DeInit+0x1d8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d007      	beq.n	8001e7a <HAL_GPIO_DeInit+0x86>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a58      	ldr	r2, [pc, #352]	; (8001fd0 <HAL_GPIO_DeInit+0x1dc>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d101      	bne.n	8001e76 <HAL_GPIO_DeInit+0x82>
 8001e72:	2306      	movs	r3, #6
 8001e74:	e00c      	b.n	8001e90 <HAL_GPIO_DeInit+0x9c>
 8001e76:	2307      	movs	r3, #7
 8001e78:	e00a      	b.n	8001e90 <HAL_GPIO_DeInit+0x9c>
 8001e7a:	2305      	movs	r3, #5
 8001e7c:	e008      	b.n	8001e90 <HAL_GPIO_DeInit+0x9c>
 8001e7e:	2304      	movs	r3, #4
 8001e80:	e006      	b.n	8001e90 <HAL_GPIO_DeInit+0x9c>
 8001e82:	2303      	movs	r3, #3
 8001e84:	e004      	b.n	8001e90 <HAL_GPIO_DeInit+0x9c>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e002      	b.n	8001e90 <HAL_GPIO_DeInit+0x9c>
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <HAL_GPIO_DeInit+0x9c>
 8001e8e:	2300      	movs	r3, #0
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	f002 0203 	and.w	r2, r2, #3
 8001e96:	0092      	lsls	r2, r2, #2
 8001e98:	fa03 f202 	lsl.w	r2, r3, r2
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d132      	bne.n	8001f08 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001ea2:	494c      	ldr	r1, [pc, #304]	; (8001fd4 <HAL_GPIO_DeInit+0x1e0>)
 8001ea4:	4b4b      	ldr	r3, [pc, #300]	; (8001fd4 <HAL_GPIO_DeInit+0x1e0>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	4013      	ands	r3, r2
 8001eae:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001eb0:	4948      	ldr	r1, [pc, #288]	; (8001fd4 <HAL_GPIO_DeInit+0x1e0>)
 8001eb2:	4b48      	ldr	r3, [pc, #288]	; (8001fd4 <HAL_GPIO_DeInit+0x1e0>)
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	4013      	ands	r3, r2
 8001ebc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001ebe:	4945      	ldr	r1, [pc, #276]	; (8001fd4 <HAL_GPIO_DeInit+0x1e0>)
 8001ec0:	4b44      	ldr	r3, [pc, #272]	; (8001fd4 <HAL_GPIO_DeInit+0x1e0>)
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	4013      	ands	r3, r2
 8001eca:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001ecc:	4941      	ldr	r1, [pc, #260]	; (8001fd4 <HAL_GPIO_DeInit+0x1e0>)
 8001ece:	4b41      	ldr	r3, [pc, #260]	; (8001fd4 <HAL_GPIO_DeInit+0x1e0>)
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	220f      	movs	r2, #15
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001eea:	4833      	ldr	r0, [pc, #204]	; (8001fb8 <HAL_GPIO_DeInit+0x1c4>)
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	089b      	lsrs	r3, r3, #2
 8001ef0:	4931      	ldr	r1, [pc, #196]	; (8001fb8 <HAL_GPIO_DeInit+0x1c4>)
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	0892      	lsrs	r2, r2, #2
 8001ef6:	3202      	adds	r2, #2
 8001ef8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	43d2      	mvns	r2, r2
 8001f00:	400a      	ands	r2, r1
 8001f02:	3302      	adds	r3, #2
 8001f04:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	2103      	movs	r1, #3
 8001f12:	fa01 f303 	lsl.w	r3, r1, r3
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	08da      	lsrs	r2, r3, #3
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	08d9      	lsrs	r1, r3, #3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3108      	adds	r1, #8
 8001f28:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	200f      	movs	r0, #15
 8001f36:	fa00 f303 	lsl.w	r3, r0, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	4019      	ands	r1, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3208      	adds	r2, #8
 8001f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	2103      	movs	r1, #3
 8001f50:	fa01 f303 	lsl.w	r3, r1, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	401a      	ands	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	2101      	movs	r1, #1
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	fa01 f303 	lsl.w	r3, r1, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68da      	ldr	r2, [r3, #12]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	2103      	movs	r1, #3
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	401a      	ands	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	401a      	ands	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f47f af2b 	bne.w	8001e04 <HAL_GPIO_DeInit+0x10>
  }
}
 8001fae:	bf00      	nop
 8001fb0:	371c      	adds	r7, #28
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr
 8001fb8:	40010000 	.word	0x40010000
 8001fbc:	48000400 	.word	0x48000400
 8001fc0:	48000800 	.word	0x48000800
 8001fc4:	48000c00 	.word	0x48000c00
 8001fc8:	48001000 	.word	0x48001000
 8001fcc:	48001400 	.word	0x48001400
 8001fd0:	48001800 	.word	0x48001800
 8001fd4:	40010400 	.word	0x40010400

08001fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	807b      	strh	r3, [r7, #2]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fe8:	787b      	ldrb	r3, [r7, #1]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fee:	887a      	ldrh	r2, [r7, #2]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ff4:	e002      	b.n	8001ffc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ff6:	887a      	ldrh	r2, [r7, #2]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr

08002006 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	460b      	mov	r3, r1
 8002010:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695a      	ldr	r2, [r3, #20]
 8002016:	887b      	ldrh	r3, [r7, #2]
 8002018:	4013      	ands	r3, r2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800201e:	887a      	ldrh	r2, [r7, #2]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002024:	e002      	b.n	800202c <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002026:	887a      	ldrh	r2, [r7, #2]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	619a      	str	r2, [r3, #24]
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr
	...

08002038 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800203c:	4a04      	ldr	r2, [pc, #16]	; (8002050 <HAL_PWR_EnableBkUpAccess+0x18>)
 800203e:	4b04      	ldr	r3, [pc, #16]	; (8002050 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002046:	6013      	str	r3, [r2, #0]
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr
 8002050:	40007000 	.word	0x40007000

08002054 <HAL_PWR_DisableBkUpAccess>:
  * @brief Disable access to the backup domain
  *        (RTC registers, RTC backup data registers).
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8002058:	4a04      	ldr	r2, [pc, #16]	; (800206c <HAL_PWR_DisableBkUpAccess+0x18>)
 800205a:	4b04      	ldr	r3, [pc, #16]	; (800206c <HAL_PWR_DisableBkUpAccess+0x18>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002062:	6013      	str	r3, [r2, #0]
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	40007000 	.word	0x40007000

08002070 <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8002078:	490c      	ldr	r1, [pc, #48]	; (80020ac <HAL_PWR_EnableWakeUpPin+0x3c>)
 800207a:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <HAL_PWR_EnableWakeUpPin+0x3c>)
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f003 031f 	and.w	r3, r3, #31
 8002084:	43db      	mvns	r3, r3
 8002086:	401a      	ands	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	095b      	lsrs	r3, r3, #5
 800208c:	4313      	orrs	r3, r2
 800208e:	60cb      	str	r3, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 8002090:	4906      	ldr	r1, [pc, #24]	; (80020ac <HAL_PWR_EnableWakeUpPin+0x3c>)
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_PWR_EnableWakeUpPin+0x3c>)
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f003 031f 	and.w	r3, r3, #31
 800209c:	4313      	orrs	r3, r2
 800209e:	608b      	str	r3, [r1, #8]


}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40007000 	.word	0x40007000

080020b0 <HAL_PWR_DisableWakeUpPin>:
  *         This parameter can be one of the following values:
  *           @arg @ref PWR_WAKEUP_PIN1, PWR_WAKEUP_PIN2, PWR_WAKEUP_PIN3, PWR_WAKEUP_PIN4, PWR_WAKEUP_PIN5
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 80020b8:	4906      	ldr	r1, [pc, #24]	; (80020d4 <HAL_PWR_DisableWakeUpPin+0x24>)
 80020ba:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <HAL_PWR_DisableWakeUpPin+0x24>)
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f003 031f 	and.w	r3, r3, #31
 80020c4:	43db      	mvns	r3, r3
 80020c6:	4013      	ands	r3, r2
 80020c8:	608b      	str	r3, [r1, #8]
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr
 80020d4:	40007000 	.word	0x40007000

080020d8 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 80020dc:	4a09      	ldr	r2, [pc, #36]	; (8002104 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80020de:	4b09      	ldr	r3, [pc, #36]	; (8002104 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 0307 	bic.w	r3, r3, #7
 80020e6:	f043 0303 	orr.w	r3, r3, #3
 80020ea:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80020ec:	4a06      	ldr	r2, [pc, #24]	; (8002108 <HAL_PWR_EnterSTANDBYMode+0x30>)
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_PWR_EnterSTANDBYMode+0x30>)
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	f043 0304 	orr.w	r3, r3, #4
 80020f6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfi");
 80020f8:	bf30      	wfi
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 80020fa:	bf00      	nop
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40007000 	.word	0x40007000
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <HAL_PWREx_GetVoltageRange+0x14>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr
 8002120:	40007000 	.word	0x40007000

08002124 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002132:	d130      	bne.n	8002196 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002134:	4b22      	ldr	r3, [pc, #136]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800213c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002140:	d038      	beq.n	80021b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002142:	4a1f      	ldr	r2, [pc, #124]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8002144:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800214c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002150:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002152:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2232      	movs	r2, #50	; 0x32
 8002158:	fb02 f303 	mul.w	r3, r2, r3
 800215c:	4a1a      	ldr	r2, [pc, #104]	; (80021c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800215e:	fba2 2303 	umull	r2, r3, r2, r3
 8002162:	0c9b      	lsrs	r3, r3, #18
 8002164:	3301      	adds	r3, #1
 8002166:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002168:	e002      	b.n	8002170 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	3b01      	subs	r3, #1
 800216e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002170:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800217c:	d102      	bne.n	8002184 <HAL_PWREx_ControlVoltageScaling+0x60>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1f2      	bne.n	800216a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002184:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002190:	d110      	bne.n	80021b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e00f      	b.n	80021b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002196:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800219e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021a2:	d007      	beq.n	80021b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021a4:	4a06      	ldr	r2, [pc, #24]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc80      	pop	{r7}
 80021be:	4770      	bx	lr
 80021c0:	40007000 	.word	0x40007000
 80021c4:	2000000c 	.word	0x2000000c
 80021c8:	431bde83 	.word	0x431bde83

080021cc <HAL_PWREx_EnableInternalWakeUpLine>:
/**
  * @brief Enable Internal Wake-up Line.
  * @retval None
  */
void HAL_PWREx_EnableInternalWakeUpLine(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_EIWF);
 80021d0:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <HAL_PWREx_EnableInternalWakeUpLine+0x18>)
 80021d2:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <HAL_PWREx_EnableInternalWakeUpLine+0x18>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021da:	6093      	str	r3, [r2, #8]
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr
 80021e4:	40007000 	.word	0x40007000

080021e8 <HAL_PWREx_DisableInternalWakeUpLine>:
/**
  * @brief Disable Internal Wake-up Line.
  * @retval None
  */
void HAL_PWREx_DisableInternalWakeUpLine(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_EIWF);
 80021ec:	4a04      	ldr	r2, [pc, #16]	; (8002200 <HAL_PWREx_DisableInternalWakeUpLine+0x18>)
 80021ee:	4b04      	ldr	r3, [pc, #16]	; (8002200 <HAL_PWREx_DisableInternalWakeUpLine+0x18>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80021f6:	6093      	str	r3, [r2, #8]
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr
 8002200:	40007000 	.word	0x40007000

08002204 <HAL_PWREx_EnterSHUTDOWNMode>:
  *        The BOR is not available.
  * @note  The I/Os can be configured either with a pull-up or pull-down or can be kept in analog state.
  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0

  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_SHUTDOWN);
 8002208:	4a09      	ldr	r2, [pc, #36]	; (8002230 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 800220a:	4b09      	ldr	r3, [pc, #36]	; (8002230 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f023 0307 	bic.w	r3, r3, #7
 8002212:	f043 0304 	orr.w	r3, r3, #4
 8002216:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002218:	4a06      	ldr	r2, [pc, #24]	; (8002234 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 800221a:	4b06      	ldr	r3, [pc, #24]	; (8002234 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	f043 0304 	orr.w	r3, r3, #4
 8002222:	6113      	str	r3, [r2, #16]
 8002224:	bf30      	wfi
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 8002226:	bf00      	nop
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40007000 	.word	0x40007000
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b088      	sub	sp, #32
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e3d4      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800224a:	4ba1      	ldr	r3, [pc, #644]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 030c 	and.w	r3, r3, #12
 8002252:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002254:	4b9e      	ldr	r3, [pc, #632]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0310 	and.w	r3, r3, #16
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 80e4 	beq.w	8002434 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d007      	beq.n	8002282 <HAL_RCC_OscConfig+0x4a>
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	2b0c      	cmp	r3, #12
 8002276:	f040 808b 	bne.w	8002390 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2b01      	cmp	r3, #1
 800227e:	f040 8087 	bne.w	8002390 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002282:	4b93      	ldr	r3, [pc, #588]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d005      	beq.n	800229a <HAL_RCC_OscConfig+0x62>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e3ac      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1a      	ldr	r2, [r3, #32]
 800229e:	4b8c      	ldr	r3, [pc, #560]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d004      	beq.n	80022b4 <HAL_RCC_OscConfig+0x7c>
 80022aa:	4b89      	ldr	r3, [pc, #548]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022b2:	e005      	b.n	80022c0 <HAL_RCC_OscConfig+0x88>
 80022b4:	4b86      	ldr	r3, [pc, #536]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80022b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ba:	091b      	lsrs	r3, r3, #4
 80022bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d923      	bls.n	800230c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f000 fd71 	bl	8002db0 <RCC_SetFlashLatencyFromMSIRange>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e38d      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022d8:	4a7d      	ldr	r2, [pc, #500]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80022da:	4b7d      	ldr	r3, [pc, #500]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f043 0308 	orr.w	r3, r3, #8
 80022e2:	6013      	str	r3, [r2, #0]
 80022e4:	497a      	ldr	r1, [pc, #488]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80022e6:	4b7a      	ldr	r3, [pc, #488]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022f6:	4976      	ldr	r1, [pc, #472]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80022f8:	4b75      	ldr	r3, [pc, #468]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	021b      	lsls	r3, r3, #8
 8002306:	4313      	orrs	r3, r2
 8002308:	604b      	str	r3, [r1, #4]
 800230a:	e025      	b.n	8002358 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800230c:	4a70      	ldr	r2, [pc, #448]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 800230e:	4b70      	ldr	r3, [pc, #448]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f043 0308 	orr.w	r3, r3, #8
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	496d      	ldr	r1, [pc, #436]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 800231a:	4b6d      	ldr	r3, [pc, #436]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	4313      	orrs	r3, r2
 8002328:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800232a:	4969      	ldr	r1, [pc, #420]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 800232c:	4b68      	ldr	r3, [pc, #416]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	021b      	lsls	r3, r3, #8
 800233a:	4313      	orrs	r3, r2
 800233c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d109      	bne.n	8002358 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	4618      	mov	r0, r3
 800234a:	f000 fd31 	bl	8002db0 <RCC_SetFlashLatencyFromMSIRange>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e34d      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002358:	f000 fc6a 	bl	8002c30 <HAL_RCC_GetSysClockFreq>
 800235c:	4601      	mov	r1, r0
 800235e:	4b5c      	ldr	r3, [pc, #368]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	091b      	lsrs	r3, r3, #4
 8002364:	f003 030f 	and.w	r3, r3, #15
 8002368:	4a5a      	ldr	r2, [pc, #360]	; (80024d4 <HAL_RCC_OscConfig+0x29c>)
 800236a:	5cd3      	ldrb	r3, [r2, r3]
 800236c:	f003 031f 	and.w	r3, r3, #31
 8002370:	fa21 f303 	lsr.w	r3, r1, r3
 8002374:	4a58      	ldr	r2, [pc, #352]	; (80024d8 <HAL_RCC_OscConfig+0x2a0>)
 8002376:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002378:	4b58      	ldr	r3, [pc, #352]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe fe37 	bl	8000ff0 <HAL_InitTick>
 8002382:	4603      	mov	r3, r0
 8002384:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002386:	7bfb      	ldrb	r3, [r7, #15]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d052      	beq.n	8002432 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	e331      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d032      	beq.n	80023fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002398:	4a4d      	ldr	r2, [pc, #308]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 800239a:	4b4d      	ldr	r3, [pc, #308]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023a4:	f7fe fe70 	bl	8001088 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023ac:	f7fe fe6c 	bl	8001088 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e31a      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023be:	4b44      	ldr	r3, [pc, #272]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0f0      	beq.n	80023ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023ca:	4a41      	ldr	r2, [pc, #260]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80023cc:	4b40      	ldr	r3, [pc, #256]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f043 0308 	orr.w	r3, r3, #8
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	493e      	ldr	r1, [pc, #248]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80023d8:	4b3d      	ldr	r3, [pc, #244]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023e8:	4939      	ldr	r1, [pc, #228]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80023ea:	4b39      	ldr	r3, [pc, #228]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	021b      	lsls	r3, r3, #8
 80023f8:	4313      	orrs	r3, r2
 80023fa:	604b      	str	r3, [r1, #4]
 80023fc:	e01a      	b.n	8002434 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023fe:	4a34      	ldr	r2, [pc, #208]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 8002400:	4b33      	ldr	r3, [pc, #204]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f023 0301 	bic.w	r3, r3, #1
 8002408:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800240a:	f7fe fe3d 	bl	8001088 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002412:	f7fe fe39 	bl	8001088 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e2e7      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002424:	4b2a      	ldr	r3, [pc, #168]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1f0      	bne.n	8002412 <HAL_RCC_OscConfig+0x1da>
 8002430:	e000      	b.n	8002434 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002432:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b00      	cmp	r3, #0
 800243e:	d074      	beq.n	800252a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	2b08      	cmp	r3, #8
 8002444:	d005      	beq.n	8002452 <HAL_RCC_OscConfig+0x21a>
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	2b0c      	cmp	r3, #12
 800244a:	d10e      	bne.n	800246a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	2b03      	cmp	r3, #3
 8002450:	d10b      	bne.n	800246a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002452:	4b1f      	ldr	r3, [pc, #124]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d064      	beq.n	8002528 <HAL_RCC_OscConfig+0x2f0>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d160      	bne.n	8002528 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e2c4      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002472:	d106      	bne.n	8002482 <HAL_RCC_OscConfig+0x24a>
 8002474:	4a16      	ldr	r2, [pc, #88]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 8002476:	4b16      	ldr	r3, [pc, #88]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	e01d      	b.n	80024be <HAL_RCC_OscConfig+0x286>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800248a:	d10c      	bne.n	80024a6 <HAL_RCC_OscConfig+0x26e>
 800248c:	4a10      	ldr	r2, [pc, #64]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 800248e:	4b10      	ldr	r3, [pc, #64]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	4a0d      	ldr	r2, [pc, #52]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 800249a:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a2:	6013      	str	r3, [r2, #0]
 80024a4:	e00b      	b.n	80024be <HAL_RCC_OscConfig+0x286>
 80024a6:	4a0a      	ldr	r2, [pc, #40]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80024a8:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	4a07      	ldr	r2, [pc, #28]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <HAL_RCC_OscConfig+0x298>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024bc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d01c      	beq.n	8002500 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c6:	f7fe fddf 	bl	8001088 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024cc:	e011      	b.n	80024f2 <HAL_RCC_OscConfig+0x2ba>
 80024ce:	bf00      	nop
 80024d0:	40021000 	.word	0x40021000
 80024d4:	08010c04 	.word	0x08010c04
 80024d8:	2000000c 	.word	0x2000000c
 80024dc:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e0:	f7fe fdd2 	bl	8001088 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b64      	cmp	r3, #100	; 0x64
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e280      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024f2:	4baf      	ldr	r3, [pc, #700]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0x2a8>
 80024fe:	e014      	b.n	800252a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002500:	f7fe fdc2 	bl	8001088 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002508:	f7fe fdbe 	bl	8001088 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b64      	cmp	r3, #100	; 0x64
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e26c      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800251a:	4ba5      	ldr	r3, [pc, #660]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f0      	bne.n	8002508 <HAL_RCC_OscConfig+0x2d0>
 8002526:	e000      	b.n	800252a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d060      	beq.n	80025f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	2b04      	cmp	r3, #4
 800253a:	d005      	beq.n	8002548 <HAL_RCC_OscConfig+0x310>
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	2b0c      	cmp	r3, #12
 8002540:	d119      	bne.n	8002576 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2b02      	cmp	r3, #2
 8002546:	d116      	bne.n	8002576 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002548:	4b99      	ldr	r3, [pc, #612]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002550:	2b00      	cmp	r3, #0
 8002552:	d005      	beq.n	8002560 <HAL_RCC_OscConfig+0x328>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e249      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002560:	4993      	ldr	r1, [pc, #588]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 8002562:	4b93      	ldr	r3, [pc, #588]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	061b      	lsls	r3, r3, #24
 8002570:	4313      	orrs	r3, r2
 8002572:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002574:	e040      	b.n	80025f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d023      	beq.n	80025c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800257e:	4a8c      	ldr	r2, [pc, #560]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 8002580:	4b8b      	ldr	r3, [pc, #556]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002588:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258a:	f7fe fd7d 	bl	8001088 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002592:	f7fe fd79 	bl	8001088 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e227      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025a4:	4b82      	ldr	r3, [pc, #520]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b0:	497f      	ldr	r1, [pc, #508]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 80025b2:	4b7f      	ldr	r3, [pc, #508]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	061b      	lsls	r3, r3, #24
 80025c0:	4313      	orrs	r3, r2
 80025c2:	604b      	str	r3, [r1, #4]
 80025c4:	e018      	b.n	80025f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025c6:	4a7a      	ldr	r2, [pc, #488]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 80025c8:	4b79      	ldr	r3, [pc, #484]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d2:	f7fe fd59 	bl	8001088 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025da:	f7fe fd55 	bl	8001088 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e203      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025ec:	4b70      	ldr	r3, [pc, #448]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1f0      	bne.n	80025da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0308 	and.w	r3, r3, #8
 8002600:	2b00      	cmp	r3, #0
 8002602:	d03c      	beq.n	800267e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d01c      	beq.n	8002646 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800260c:	4a68      	ldr	r2, [pc, #416]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 800260e:	4b68      	ldr	r3, [pc, #416]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 8002610:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261c:	f7fe fd34 	bl	8001088 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002624:	f7fe fd30 	bl	8001088 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e1de      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002636:	4b5e      	ldr	r3, [pc, #376]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 8002638:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0ef      	beq.n	8002624 <HAL_RCC_OscConfig+0x3ec>
 8002644:	e01b      	b.n	800267e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002646:	4a5a      	ldr	r2, [pc, #360]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 8002648:	4b59      	ldr	r3, [pc, #356]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 800264a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800264e:	f023 0301 	bic.w	r3, r3, #1
 8002652:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002656:	f7fe fd17 	bl	8001088 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800265e:	f7fe fd13 	bl	8001088 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e1c1      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002670:	4b4f      	ldr	r3, [pc, #316]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 8002672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1ef      	bne.n	800265e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0304 	and.w	r3, r3, #4
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 80a6 	beq.w	80027d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800268c:	2300      	movs	r3, #0
 800268e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002690:	4b47      	ldr	r3, [pc, #284]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 8002692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10d      	bne.n	80026b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800269c:	4a44      	ldr	r2, [pc, #272]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 800269e:	4b44      	ldr	r3, [pc, #272]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 80026a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a6:	6593      	str	r3, [r2, #88]	; 0x58
 80026a8:	4b41      	ldr	r3, [pc, #260]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 80026aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b0:	60bb      	str	r3, [r7, #8]
 80026b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026b4:	2301      	movs	r3, #1
 80026b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026b8:	4b3e      	ldr	r3, [pc, #248]	; (80027b4 <HAL_RCC_OscConfig+0x57c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d118      	bne.n	80026f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026c4:	4a3b      	ldr	r2, [pc, #236]	; (80027b4 <HAL_RCC_OscConfig+0x57c>)
 80026c6:	4b3b      	ldr	r3, [pc, #236]	; (80027b4 <HAL_RCC_OscConfig+0x57c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d0:	f7fe fcda 	bl	8001088 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d8:	f7fe fcd6 	bl	8001088 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e184      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ea:	4b32      	ldr	r3, [pc, #200]	; (80027b4 <HAL_RCC_OscConfig+0x57c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d108      	bne.n	8002710 <HAL_RCC_OscConfig+0x4d8>
 80026fe:	4a2c      	ldr	r2, [pc, #176]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 8002700:	4b2b      	ldr	r3, [pc, #172]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 8002702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800270e:	e024      	b.n	800275a <HAL_RCC_OscConfig+0x522>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2b05      	cmp	r3, #5
 8002716:	d110      	bne.n	800273a <HAL_RCC_OscConfig+0x502>
 8002718:	4a25      	ldr	r2, [pc, #148]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 800271a:	4b25      	ldr	r3, [pc, #148]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 800271c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002720:	f043 0304 	orr.w	r3, r3, #4
 8002724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002728:	4a21      	ldr	r2, [pc, #132]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 800272a:	4b21      	ldr	r3, [pc, #132]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 800272c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002738:	e00f      	b.n	800275a <HAL_RCC_OscConfig+0x522>
 800273a:	4a1d      	ldr	r2, [pc, #116]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 800273c:	4b1c      	ldr	r3, [pc, #112]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 800273e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002742:	f023 0301 	bic.w	r3, r3, #1
 8002746:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800274a:	4a19      	ldr	r2, [pc, #100]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 800274c:	4b18      	ldr	r3, [pc, #96]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 800274e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002752:	f023 0304 	bic.w	r3, r3, #4
 8002756:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d016      	beq.n	8002790 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002762:	f7fe fc91 	bl	8001088 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002768:	e00a      	b.n	8002780 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276a:	f7fe fc8d 	bl	8001088 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	f241 3288 	movw	r2, #5000	; 0x1388
 8002778:	4293      	cmp	r3, r2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e139      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002780:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <HAL_RCC_OscConfig+0x578>)
 8002782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0ed      	beq.n	800276a <HAL_RCC_OscConfig+0x532>
 800278e:	e01a      	b.n	80027c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002790:	f7fe fc7a 	bl	8001088 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002796:	e00f      	b.n	80027b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002798:	f7fe fc76 	bl	8001088 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d906      	bls.n	80027b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e122      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
 80027ae:	bf00      	nop
 80027b0:	40021000 	.word	0x40021000
 80027b4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027b8:	4b90      	ldr	r3, [pc, #576]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 80027ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1e8      	bne.n	8002798 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027c6:	7ffb      	ldrb	r3, [r7, #31]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d105      	bne.n	80027d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027cc:	4a8b      	ldr	r2, [pc, #556]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 80027ce:	4b8b      	ldr	r3, [pc, #556]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 80027d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027d6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 8108 	beq.w	80029f2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	f040 80d0 	bne.w	800298c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027ec:	4b83      	ldr	r3, [pc, #524]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	f003 0203 	and.w	r2, r3, #3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d130      	bne.n	8002862 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	3b01      	subs	r3, #1
 800280c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800280e:	429a      	cmp	r2, r3
 8002810:	d127      	bne.n	8002862 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800281c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800281e:	429a      	cmp	r2, r3
 8002820:	d11f      	bne.n	8002862 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800282c:	2a07      	cmp	r2, #7
 800282e:	bf14      	ite	ne
 8002830:	2201      	movne	r2, #1
 8002832:	2200      	moveq	r2, #0
 8002834:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002836:	4293      	cmp	r3, r2
 8002838:	d113      	bne.n	8002862 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002844:	085b      	lsrs	r3, r3, #1
 8002846:	3b01      	subs	r3, #1
 8002848:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800284a:	429a      	cmp	r2, r3
 800284c:	d109      	bne.n	8002862 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002858:	085b      	lsrs	r3, r3, #1
 800285a:	3b01      	subs	r3, #1
 800285c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800285e:	429a      	cmp	r2, r3
 8002860:	d06e      	beq.n	8002940 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	2b0c      	cmp	r3, #12
 8002866:	d069      	beq.n	800293c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002868:	4b64      	ldr	r3, [pc, #400]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d105      	bne.n	8002880 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002874:	4b61      	ldr	r3, [pc, #388]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e0b7      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002884:	4a5d      	ldr	r2, [pc, #372]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 8002886:	4b5d      	ldr	r3, [pc, #372]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800288e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002890:	f7fe fbfa 	bl	8001088 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002898:	f7fe fbf6 	bl	8001088 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e0a4      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028aa:	4b54      	ldr	r3, [pc, #336]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f0      	bne.n	8002898 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028b6:	4851      	ldr	r0, [pc, #324]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 80028b8:	4b50      	ldr	r3, [pc, #320]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	4b50      	ldr	r3, [pc, #320]	; (8002a00 <HAL_RCC_OscConfig+0x7c8>)
 80028be:	4013      	ands	r3, r2
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028c8:	3a01      	subs	r2, #1
 80028ca:	0112      	lsls	r2, r2, #4
 80028cc:	4311      	orrs	r1, r2
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028d2:	0212      	lsls	r2, r2, #8
 80028d4:	4311      	orrs	r1, r2
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028da:	0852      	lsrs	r2, r2, #1
 80028dc:	3a01      	subs	r2, #1
 80028de:	0552      	lsls	r2, r2, #21
 80028e0:	4311      	orrs	r1, r2
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028e6:	0852      	lsrs	r2, r2, #1
 80028e8:	3a01      	subs	r2, #1
 80028ea:	0652      	lsls	r2, r2, #25
 80028ec:	4311      	orrs	r1, r2
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028f2:	0912      	lsrs	r2, r2, #4
 80028f4:	0452      	lsls	r2, r2, #17
 80028f6:	430a      	orrs	r2, r1
 80028f8:	4313      	orrs	r3, r2
 80028fa:	60c3      	str	r3, [r0, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028fc:	4a3f      	ldr	r2, [pc, #252]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 80028fe:	4b3f      	ldr	r3, [pc, #252]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002906:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002908:	4a3c      	ldr	r2, [pc, #240]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 800290a:	4b3c      	ldr	r3, [pc, #240]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002912:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002914:	f7fe fbb8 	bl	8001088 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800291c:	f7fe fbb4 	bl	8001088 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e062      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800292e:	4b33      	ldr	r3, [pc, #204]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800293a:	e05a      	b.n	80029f2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e059      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002940:	4b2e      	ldr	r3, [pc, #184]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d152      	bne.n	80029f2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800294c:	4a2b      	ldr	r2, [pc, #172]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 800294e:	4b2b      	ldr	r3, [pc, #172]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002956:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002958:	4a28      	ldr	r2, [pc, #160]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 800295a:	4b28      	ldr	r3, [pc, #160]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002962:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002964:	f7fe fb90 	bl	8001088 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800296c:	f7fe fb8c 	bl	8001088 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e03a      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800297e:	4b1f      	ldr	r3, [pc, #124]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0f0      	beq.n	800296c <HAL_RCC_OscConfig+0x734>
 800298a:	e032      	b.n	80029f2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	2b0c      	cmp	r3, #12
 8002990:	d02d      	beq.n	80029ee <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002992:	4a1a      	ldr	r2, [pc, #104]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 8002994:	4b19      	ldr	r3, [pc, #100]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800299c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800299e:	4b17      	ldr	r3, [pc, #92]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d105      	bne.n	80029b6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80029aa:	4a14      	ldr	r2, [pc, #80]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 80029ac:	4b13      	ldr	r3, [pc, #76]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f023 0303 	bic.w	r3, r3, #3
 80029b4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029b6:	4a11      	ldr	r2, [pc, #68]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 80029b8:	4b10      	ldr	r3, [pc, #64]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80029c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c6:	f7fe fb5f 	bl	8001088 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ce:	f7fe fb5b 	bl	8001088 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e009      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029e0:	4b06      	ldr	r3, [pc, #24]	; (80029fc <HAL_RCC_OscConfig+0x7c4>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1f0      	bne.n	80029ce <HAL_RCC_OscConfig+0x796>
 80029ec:	e001      	b.n	80029f2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e000      	b.n	80029f4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3720      	adds	r7, #32
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40021000 	.word	0x40021000
 8002a00:	f99d808c 	.word	0xf99d808c

08002a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e0c8      	b.n	8002baa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a18:	4b66      	ldr	r3, [pc, #408]	; (8002bb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0207 	and.w	r2, r3, #7
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d210      	bcs.n	8002a48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a26:	4963      	ldr	r1, [pc, #396]	; (8002bb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002a28:	4b62      	ldr	r3, [pc, #392]	; (8002bb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f023 0207 	bic.w	r2, r3, #7
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a36:	4b5f      	ldr	r3, [pc, #380]	; (8002bb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0207 	and.w	r2, r3, #7
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e0b0      	b.n	8002baa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d04c      	beq.n	8002aee <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	d107      	bne.n	8002a6c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a5c:	4b56      	ldr	r3, [pc, #344]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d121      	bne.n	8002aac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e09e      	b.n	8002baa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d107      	bne.n	8002a84 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a74:	4b50      	ldr	r3, [pc, #320]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d115      	bne.n	8002aac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e092      	b.n	8002baa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d107      	bne.n	8002a9c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a8c:	4b4a      	ldr	r3, [pc, #296]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d109      	bne.n	8002aac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e086      	b.n	8002baa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a9c:	4b46      	ldr	r3, [pc, #280]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e07e      	b.n	8002baa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002aac:	4942      	ldr	r1, [pc, #264]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002aae:	4b42      	ldr	r3, [pc, #264]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f023 0203 	bic.w	r2, r3, #3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002abe:	f7fe fae3 	bl	8001088 <HAL_GetTick>
 8002ac2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac4:	e00a      	b.n	8002adc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac6:	f7fe fadf 	bl	8001088 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e066      	b.n	8002baa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002adc:	4b36      	ldr	r3, [pc, #216]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 020c 	and.w	r2, r3, #12
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d1eb      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d008      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002afa:	492f      	ldr	r1, [pc, #188]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002afc:	4b2e      	ldr	r3, [pc, #184]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b0c:	4b29      	ldr	r3, [pc, #164]	; (8002bb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0207 	and.w	r2, r3, #7
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d910      	bls.n	8002b3c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1a:	4926      	ldr	r1, [pc, #152]	; (8002bb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002b1c:	4b25      	ldr	r3, [pc, #148]	; (8002bb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f023 0207 	bic.w	r2, r3, #7
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2a:	4b22      	ldr	r3, [pc, #136]	; (8002bb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0207 	and.w	r2, r3, #7
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e036      	b.n	8002baa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d008      	beq.n	8002b5a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b48:	491b      	ldr	r1, [pc, #108]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002b4a:	4b1b      	ldr	r3, [pc, #108]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d009      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b66:	4914      	ldr	r1, [pc, #80]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002b68:	4b13      	ldr	r3, [pc, #76]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4313      	orrs	r3, r2
 8002b78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b7a:	f000 f859 	bl	8002c30 <HAL_RCC_GetSysClockFreq>
 8002b7e:	4601      	mov	r1, r0
 8002b80:	4b0d      	ldr	r3, [pc, #52]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	091b      	lsrs	r3, r3, #4
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	4a0c      	ldr	r2, [pc, #48]	; (8002bbc <HAL_RCC_ClockConfig+0x1b8>)
 8002b8c:	5cd3      	ldrb	r3, [r2, r3]
 8002b8e:	f003 031f 	and.w	r3, r3, #31
 8002b92:	fa21 f303 	lsr.w	r3, r1, r3
 8002b96:	4a0a      	ldr	r2, [pc, #40]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b9a:	4b0a      	ldr	r3, [pc, #40]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fe fa26 	bl	8000ff0 <HAL_InitTick>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ba8:	7afb      	ldrb	r3, [r7, #11]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40022000 	.word	0x40022000
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	08010c04 	.word	0x08010c04
 8002bc0:	2000000c 	.word	0x2000000c
 8002bc4:	20000000 	.word	0x20000000

08002bc8 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08a      	sub	sp, #40	; 0x28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8002bd4:	4a15      	ldr	r2, [pc, #84]	; (8002c2c <HAL_RCC_MCOConfig+0x64>)
 8002bd6:	4b15      	ldr	r3, [pc, #84]	; (8002c2c <HAL_RCC_MCOConfig+0x64>)
 8002bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bda:	f043 0301 	orr.w	r3, r3, #1
 8002bde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002be0:	4b12      	ldr	r3, [pc, #72]	; (8002c2c <HAL_RCC_MCOConfig+0x64>)
 8002be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	613b      	str	r3, [r7, #16]
 8002bea:	693b      	ldr	r3, [r7, #16]

  /* Configue the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8002bec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002c02:	f107 0314 	add.w	r3, r7, #20
 8002c06:	4619      	mov	r1, r3
 8002c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c0c:	f7fe ff4a 	bl	8001aa4 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8002c10:	4806      	ldr	r0, [pc, #24]	; (8002c2c <HAL_RCC_MCOConfig+0x64>)
 8002c12:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <HAL_RCC_MCOConfig+0x64>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 8002c1a:	68b9      	ldr	r1, [r7, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	430b      	orrs	r3, r1
 8002c20:	4313      	orrs	r3, r2
 8002c22:	6083      	str	r3, [r0, #8]
}
 8002c24:	bf00      	nop
 8002c26:	3728      	adds	r7, #40	; 0x28
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40021000 	.word	0x40021000

08002c30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b089      	sub	sp, #36	; 0x24
 8002c34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	61fb      	str	r3, [r7, #28]
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c3e:	4b3d      	ldr	r3, [pc, #244]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 030c 	and.w	r3, r3, #12
 8002c46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c48:	4b3a      	ldr	r3, [pc, #232]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <HAL_RCC_GetSysClockFreq+0x34>
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	2b0c      	cmp	r3, #12
 8002c5c:	d121      	bne.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d11e      	bne.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c64:	4b33      	ldr	r3, [pc, #204]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0308 	and.w	r3, r3, #8
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d107      	bne.n	8002c80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c70:	4b30      	ldr	r3, [pc, #192]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c76:	0a1b      	lsrs	r3, r3, #8
 8002c78:	f003 030f 	and.w	r3, r3, #15
 8002c7c:	61fb      	str	r3, [r7, #28]
 8002c7e:	e005      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c80:	4b2c      	ldr	r3, [pc, #176]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	091b      	lsrs	r3, r3, #4
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c8c:	4a2a      	ldr	r2, [pc, #168]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10d      	bne.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ca0:	e00a      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d102      	bne.n	8002cae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ca8:	4b24      	ldr	r3, [pc, #144]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002caa:	61bb      	str	r3, [r7, #24]
 8002cac:	e004      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d101      	bne.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cb4:	4b22      	ldr	r3, [pc, #136]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cb6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	2b0c      	cmp	r3, #12
 8002cbc:	d133      	bne.n	8002d26 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cbe:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d002      	beq.n	8002cd4 <HAL_RCC_GetSysClockFreq+0xa4>
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	d003      	beq.n	8002cda <HAL_RCC_GetSysClockFreq+0xaa>
 8002cd2:	e005      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cd4:	4b19      	ldr	r3, [pc, #100]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002cd6:	617b      	str	r3, [r7, #20]
      break;
 8002cd8:	e005      	b.n	8002ce6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002cda:	4b19      	ldr	r3, [pc, #100]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cdc:	617b      	str	r3, [r7, #20]
      break;
 8002cde:	e002      	b.n	8002ce6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	617b      	str	r3, [r7, #20]
      break;
 8002ce4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ce6:	4b13      	ldr	r3, [pc, #76]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	091b      	lsrs	r3, r3, #4
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cf4:	4b0f      	ldr	r3, [pc, #60]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	0a1b      	lsrs	r3, r3, #8
 8002cfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	fb02 f203 	mul.w	r2, r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d0c:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	0e5b      	lsrs	r3, r3, #25
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	3301      	adds	r3, #1
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d24:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d26:	69bb      	ldr	r3, [r7, #24]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3724      	adds	r7, #36	; 0x24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc80      	pop	{r7}
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	40021000 	.word	0x40021000
 8002d38:	08010c1c 	.word	0x08010c1c
 8002d3c:	00f42400 	.word	0x00f42400
 8002d40:	007a1200 	.word	0x007a1200

08002d44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d48:	4b02      	ldr	r3, [pc, #8]	; (8002d54 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr
 8002d54:	2000000c 	.word	0x2000000c

08002d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d5c:	f7ff fff2 	bl	8002d44 <HAL_RCC_GetHCLKFreq>
 8002d60:	4601      	mov	r1, r0
 8002d62:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	0a1b      	lsrs	r3, r3, #8
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	4a04      	ldr	r2, [pc, #16]	; (8002d80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d6e:	5cd3      	ldrb	r3, [r2, r3]
 8002d70:	f003 031f 	and.w	r3, r3, #31
 8002d74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	08010c14 	.word	0x08010c14

08002d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d88:	f7ff ffdc 	bl	8002d44 <HAL_RCC_GetHCLKFreq>
 8002d8c:	4601      	mov	r1, r0
 8002d8e:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	0adb      	lsrs	r3, r3, #11
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	4a04      	ldr	r2, [pc, #16]	; (8002dac <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d9a:	5cd3      	ldrb	r3, [r2, r3]
 8002d9c:	f003 031f 	and.w	r3, r3, #31
 8002da0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40021000 	.word	0x40021000
 8002dac:	08010c14 	.word	0x08010c14

08002db0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002db8:	2300      	movs	r3, #0
 8002dba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002dbc:	4b2a      	ldr	r3, [pc, #168]	; (8002e68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002dc8:	f7ff f9a0 	bl	800210c <HAL_PWREx_GetVoltageRange>
 8002dcc:	6178      	str	r0, [r7, #20]
 8002dce:	e014      	b.n	8002dfa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dd0:	4a25      	ldr	r2, [pc, #148]	; (8002e68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dd2:	4b25      	ldr	r3, [pc, #148]	; (8002e68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dda:	6593      	str	r3, [r2, #88]	; 0x58
 8002ddc:	4b22      	ldr	r3, [pc, #136]	; (8002e68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002de8:	f7ff f990 	bl	800210c <HAL_PWREx_GetVoltageRange>
 8002dec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002dee:	4a1e      	ldr	r2, [pc, #120]	; (8002e68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002df0:	4b1d      	ldr	r3, [pc, #116]	; (8002e68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002df8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e00:	d10b      	bne.n	8002e1a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b80      	cmp	r3, #128	; 0x80
 8002e06:	d919      	bls.n	8002e3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2ba0      	cmp	r3, #160	; 0xa0
 8002e0c:	d902      	bls.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e0e:	2302      	movs	r3, #2
 8002e10:	613b      	str	r3, [r7, #16]
 8002e12:	e013      	b.n	8002e3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e14:	2301      	movs	r3, #1
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	e010      	b.n	8002e3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b80      	cmp	r3, #128	; 0x80
 8002e1e:	d902      	bls.n	8002e26 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e20:	2303      	movs	r3, #3
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	e00a      	b.n	8002e3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b80      	cmp	r3, #128	; 0x80
 8002e2a:	d102      	bne.n	8002e32 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	613b      	str	r3, [r7, #16]
 8002e30:	e004      	b.n	8002e3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b70      	cmp	r3, #112	; 0x70
 8002e36:	d101      	bne.n	8002e3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e38:	2301      	movs	r3, #1
 8002e3a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e3c:	490b      	ldr	r1, [pc, #44]	; (8002e6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e3e:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f023 0207 	bic.w	r2, r3, #7
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e4c:	4b07      	ldr	r3, [pc, #28]	; (8002e6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0207 	and.w	r2, r3, #7
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d001      	beq.n	8002e5e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	40022000 	.word	0x40022000

08002e70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e78:	2300      	movs	r3, #0
 8002e7a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d03f      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e94:	d01c      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002e96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e9a:	d802      	bhi.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00e      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002ea0:	e01f      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002ea2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ea6:	d003      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002ea8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002eac:	d01c      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002eae:	e018      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002eb0:	4a85      	ldr	r2, [pc, #532]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002eb2:	4b85      	ldr	r3, [pc, #532]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ebc:	e015      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f000 fac7 	bl	8003458 <RCCEx_PLLSAI1_Config>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ece:	e00c      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3320      	adds	r3, #32
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 fbae 	bl	8003638 <RCCEx_PLLSAI2_Config>
 8002edc:	4603      	mov	r3, r0
 8002ede:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ee0:	e003      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	74fb      	strb	r3, [r7, #19]
      break;
 8002ee6:	e000      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002ee8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002eea:	7cfb      	ldrb	r3, [r7, #19]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10b      	bne.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ef0:	4975      	ldr	r1, [pc, #468]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ef2:	4b75      	ldr	r3, [pc, #468]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f06:	e001      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f08:	7cfb      	ldrb	r3, [r7, #19]
 8002f0a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d03f      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f20:	d01c      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002f22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f26:	d802      	bhi.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00e      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002f2c:	e01f      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002f2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f32:	d003      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002f34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f38:	d01c      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002f3a:	e018      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f3c:	4a62      	ldr	r2, [pc, #392]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f3e:	4b62      	ldr	r3, [pc, #392]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f46:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f48:	e015      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	2100      	movs	r1, #0
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 fa81 	bl	8003458 <RCCEx_PLLSAI1_Config>
 8002f56:	4603      	mov	r3, r0
 8002f58:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f5a:	e00c      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3320      	adds	r3, #32
 8002f60:	2100      	movs	r1, #0
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 fb68 	bl	8003638 <RCCEx_PLLSAI2_Config>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f6c:	e003      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	74fb      	strb	r3, [r7, #19]
      break;
 8002f72:	e000      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002f74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f76:	7cfb      	ldrb	r3, [r7, #19]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10b      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f7c:	4952      	ldr	r1, [pc, #328]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f7e:	4b52      	ldr	r3, [pc, #328]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f84:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f92:	e001      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f94:	7cfb      	ldrb	r3, [r7, #19]
 8002f96:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 80a0 	beq.w	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002faa:	4b47      	ldr	r3, [pc, #284]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00d      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fc0:	4a41      	ldr	r2, [pc, #260]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fc2:	4b41      	ldr	r3, [pc, #260]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fca:	6593      	str	r3, [r2, #88]	; 0x58
 8002fcc:	4b3e      	ldr	r3, [pc, #248]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fdc:	4a3b      	ldr	r2, [pc, #236]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002fde:	4b3b      	ldr	r3, [pc, #236]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fe8:	f7fe f84e 	bl	8001088 <HAL_GetTick>
 8002fec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fee:	e009      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff0:	f7fe f84a 	bl	8001088 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d902      	bls.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	74fb      	strb	r3, [r7, #19]
        break;
 8003002:	e005      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003004:	4b31      	ldr	r3, [pc, #196]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0ef      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003010:	7cfb      	ldrb	r3, [r7, #19]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d15c      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003016:	4b2c      	ldr	r3, [pc, #176]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003020:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d01f      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	429a      	cmp	r2, r3
 8003032:	d019      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003034:	4b24      	ldr	r3, [pc, #144]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800303e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003040:	4a21      	ldr	r2, [pc, #132]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003042:	4b21      	ldr	r3, [pc, #132]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800304c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003050:	4a1d      	ldr	r2, [pc, #116]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003052:	4b1d      	ldr	r3, [pc, #116]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800305c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003060:	4a19      	ldr	r2, [pc, #100]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d016      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003072:	f7fe f809 	bl	8001088 <HAL_GetTick>
 8003076:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003078:	e00b      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307a:	f7fe f805 	bl	8001088 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	f241 3288 	movw	r2, #5000	; 0x1388
 8003088:	4293      	cmp	r3, r2
 800308a:	d902      	bls.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	74fb      	strb	r3, [r7, #19]
            break;
 8003090:	e006      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003092:	4b0d      	ldr	r3, [pc, #52]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0ec      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80030a0:	7cfb      	ldrb	r3, [r7, #19]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10c      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030a6:	4908      	ldr	r1, [pc, #32]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030a8:	4b07      	ldr	r3, [pc, #28]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030b8:	4313      	orrs	r3, r2
 80030ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030be:	e009      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030c0:	7cfb      	ldrb	r3, [r7, #19]
 80030c2:	74bb      	strb	r3, [r7, #18]
 80030c4:	e006      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80030c6:	bf00      	nop
 80030c8:	40021000 	.word	0x40021000
 80030cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d0:	7cfb      	ldrb	r3, [r7, #19]
 80030d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030d4:	7c7b      	ldrb	r3, [r7, #17]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d105      	bne.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030da:	4a9e      	ldr	r2, [pc, #632]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030dc:	4b9d      	ldr	r3, [pc, #628]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030f2:	4998      	ldr	r1, [pc, #608]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030f4:	4b97      	ldr	r3, [pc, #604]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fa:	f023 0203 	bic.w	r2, r3, #3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003102:	4313      	orrs	r3, r2
 8003104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00a      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003114:	498f      	ldr	r1, [pc, #572]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003116:	4b8f      	ldr	r3, [pc, #572]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311c:	f023 020c 	bic.w	r2, r3, #12
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003124:	4313      	orrs	r3, r2
 8003126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0304 	and.w	r3, r3, #4
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00a      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003136:	4987      	ldr	r1, [pc, #540]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003138:	4b86      	ldr	r3, [pc, #536]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800313a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00a      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003158:	497e      	ldr	r1, [pc, #504]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800315a:	4b7e      	ldr	r3, [pc, #504]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800315c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003160:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00a      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800317a:	4976      	ldr	r1, [pc, #472]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800317c:	4b75      	ldr	r3, [pc, #468]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800317e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003182:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00a      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800319c:	496d      	ldr	r1, [pc, #436]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800319e:	4b6d      	ldr	r3, [pc, #436]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ac:	4313      	orrs	r3, r2
 80031ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031be:	4965      	ldr	r1, [pc, #404]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031c0:	4b64      	ldr	r3, [pc, #400]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ce:	4313      	orrs	r3, r2
 80031d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00a      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031e0:	495c      	ldr	r1, [pc, #368]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031e2:	4b5c      	ldr	r3, [pc, #368]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003202:	4954      	ldr	r1, [pc, #336]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003204:	4b53      	ldr	r3, [pc, #332]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003212:	4313      	orrs	r3, r2
 8003214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00a      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003224:	494b      	ldr	r1, [pc, #300]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003226:	4b4b      	ldr	r3, [pc, #300]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003234:	4313      	orrs	r3, r2
 8003236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00a      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003246:	4943      	ldr	r1, [pc, #268]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003248:	4b42      	ldr	r3, [pc, #264]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800324a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003256:	4313      	orrs	r3, r2
 8003258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d028      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003268:	493a      	ldr	r1, [pc, #232]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800326a:	4b3a      	ldr	r3, [pc, #232]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800326c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003270:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003278:	4313      	orrs	r3, r2
 800327a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003282:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003286:	d106      	bne.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003288:	4a32      	ldr	r2, [pc, #200]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800328a:	4b32      	ldr	r3, [pc, #200]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003292:	60d3      	str	r3, [r2, #12]
 8003294:	e011      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800329a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800329e:	d10c      	bne.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3304      	adds	r3, #4
 80032a4:	2101      	movs	r1, #1
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 f8d6 	bl	8003458 <RCCEx_PLLSAI1_Config>
 80032ac:	4603      	mov	r3, r0
 80032ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032b0:	7cfb      	ldrb	r3, [r7, #19]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80032b6:	7cfb      	ldrb	r3, [r7, #19]
 80032b8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d028      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032c6:	4923      	ldr	r1, [pc, #140]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032c8:	4b22      	ldr	r3, [pc, #136]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032e4:	d106      	bne.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032e6:	4a1b      	ldr	r2, [pc, #108]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032e8:	4b1a      	ldr	r3, [pc, #104]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032f0:	60d3      	str	r3, [r2, #12]
 80032f2:	e011      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032fc:	d10c      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	3304      	adds	r3, #4
 8003302:	2101      	movs	r1, #1
 8003304:	4618      	mov	r0, r3
 8003306:	f000 f8a7 	bl	8003458 <RCCEx_PLLSAI1_Config>
 800330a:	4603      	mov	r3, r0
 800330c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800330e:	7cfb      	ldrb	r3, [r7, #19]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003314:	7cfb      	ldrb	r3, [r7, #19]
 8003316:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d02b      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003324:	490b      	ldr	r1, [pc, #44]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003326:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003334:	4313      	orrs	r3, r2
 8003336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800333e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003342:	d109      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003344:	4a03      	ldr	r2, [pc, #12]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003346:	4b03      	ldr	r3, [pc, #12]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800334e:	60d3      	str	r3, [r2, #12]
 8003350:	e014      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003352:	bf00      	nop
 8003354:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800335c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003360:	d10c      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3304      	adds	r3, #4
 8003366:	2101      	movs	r1, #1
 8003368:	4618      	mov	r0, r3
 800336a:	f000 f875 	bl	8003458 <RCCEx_PLLSAI1_Config>
 800336e:	4603      	mov	r3, r0
 8003370:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003372:	7cfb      	ldrb	r3, [r7, #19]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003378:	7cfb      	ldrb	r3, [r7, #19]
 800337a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d02f      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003388:	492b      	ldr	r1, [pc, #172]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800338a:	4b2b      	ldr	r3, [pc, #172]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800338c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003390:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003398:	4313      	orrs	r3, r2
 800339a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033a6:	d10d      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3304      	adds	r3, #4
 80033ac:	2102      	movs	r1, #2
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 f852 	bl	8003458 <RCCEx_PLLSAI1_Config>
 80033b4:	4603      	mov	r3, r0
 80033b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033b8:	7cfb      	ldrb	r3, [r7, #19]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d014      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80033be:	7cfb      	ldrb	r3, [r7, #19]
 80033c0:	74bb      	strb	r3, [r7, #18]
 80033c2:	e011      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3320      	adds	r3, #32
 80033d2:	2102      	movs	r1, #2
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 f92f 	bl	8003638 <RCCEx_PLLSAI2_Config>
 80033da:	4603      	mov	r3, r0
 80033dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033de:	7cfb      	ldrb	r3, [r7, #19]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80033e4:	7cfb      	ldrb	r3, [r7, #19]
 80033e6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033f4:	4910      	ldr	r1, [pc, #64]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033f6:	4b10      	ldr	r3, [pc, #64]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00b      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003416:	4908      	ldr	r1, [pc, #32]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003418:	4b07      	ldr	r3, [pc, #28]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800341a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003428:	4313      	orrs	r3, r2
 800342a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800342e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003430:	4618      	mov	r0, r3
 8003432:	3718      	adds	r7, #24
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40021000 	.word	0x40021000

0800343c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003440:	4a04      	ldr	r2, [pc, #16]	; (8003454 <HAL_RCCEx_EnableMSIPLLMode+0x18>)
 8003442:	4b04      	ldr	r3, [pc, #16]	; (8003454 <HAL_RCCEx_EnableMSIPLLMode+0x18>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f043 0304 	orr.w	r3, r3, #4
 800344a:	6013      	str	r3, [r2, #0]
}
 800344c:	bf00      	nop
 800344e:	46bd      	mov	sp, r7
 8003450:	bc80      	pop	{r7}
 8003452:	4770      	bx	lr
 8003454:	40021000 	.word	0x40021000

08003458 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003462:	2300      	movs	r3, #0
 8003464:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003466:	4b73      	ldr	r3, [pc, #460]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f003 0303 	and.w	r3, r3, #3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d018      	beq.n	80034a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003472:	4b70      	ldr	r3, [pc, #448]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f003 0203 	and.w	r2, r3, #3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d10d      	bne.n	800349e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
       ||
 8003486:	2b00      	cmp	r3, #0
 8003488:	d009      	beq.n	800349e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800348a:	4b6a      	ldr	r3, [pc, #424]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	091b      	lsrs	r3, r3, #4
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
       ||
 800349a:	429a      	cmp	r2, r3
 800349c:	d044      	beq.n	8003528 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	73fb      	strb	r3, [r7, #15]
 80034a2:	e041      	b.n	8003528 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d00c      	beq.n	80034c6 <RCCEx_PLLSAI1_Config+0x6e>
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d013      	beq.n	80034d8 <RCCEx_PLLSAI1_Config+0x80>
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d120      	bne.n	80034f6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034b4:	4b5f      	ldr	r3, [pc, #380]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d11d      	bne.n	80034fc <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034c4:	e01a      	b.n	80034fc <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034c6:	4b5b      	ldr	r3, [pc, #364]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d116      	bne.n	8003500 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034d6:	e013      	b.n	8003500 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034d8:	4b56      	ldr	r3, [pc, #344]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10f      	bne.n	8003504 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034e4:	4b53      	ldr	r3, [pc, #332]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d109      	bne.n	8003504 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034f4:	e006      	b.n	8003504 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	73fb      	strb	r3, [r7, #15]
      break;
 80034fa:	e004      	b.n	8003506 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80034fc:	bf00      	nop
 80034fe:	e002      	b.n	8003506 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003500:	bf00      	nop
 8003502:	e000      	b.n	8003506 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003504:	bf00      	nop
    }

    if(status == HAL_OK)
 8003506:	7bfb      	ldrb	r3, [r7, #15]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10d      	bne.n	8003528 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800350c:	4849      	ldr	r0, [pc, #292]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 800350e:	4b49      	ldr	r3, [pc, #292]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6819      	ldr	r1, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	3b01      	subs	r3, #1
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	430b      	orrs	r3, r1
 8003524:	4313      	orrs	r3, r2
 8003526:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003528:	7bfb      	ldrb	r3, [r7, #15]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d17d      	bne.n	800362a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800352e:	4a41      	ldr	r2, [pc, #260]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003530:	4b40      	ldr	r3, [pc, #256]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003538:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800353a:	f7fd fda5 	bl	8001088 <HAL_GetTick>
 800353e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003540:	e009      	b.n	8003556 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003542:	f7fd fda1 	bl	8001088 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d902      	bls.n	8003556 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	73fb      	strb	r3, [r7, #15]
        break;
 8003554:	e005      	b.n	8003562 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003556:	4b37      	ldr	r3, [pc, #220]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1ef      	bne.n	8003542 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003562:	7bfb      	ldrb	r3, [r7, #15]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d160      	bne.n	800362a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d111      	bne.n	8003592 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800356e:	4831      	ldr	r0, [pc, #196]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003570:	4b30      	ldr	r3, [pc, #192]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	6892      	ldr	r2, [r2, #8]
 8003580:	0211      	lsls	r1, r2, #8
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	68d2      	ldr	r2, [r2, #12]
 8003586:	0912      	lsrs	r2, r2, #4
 8003588:	0452      	lsls	r2, r2, #17
 800358a:	430a      	orrs	r2, r1
 800358c:	4313      	orrs	r3, r2
 800358e:	6103      	str	r3, [r0, #16]
 8003590:	e027      	b.n	80035e2 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d112      	bne.n	80035be <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003598:	4826      	ldr	r0, [pc, #152]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 800359a:	4b26      	ldr	r3, [pc, #152]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80035a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6892      	ldr	r2, [r2, #8]
 80035aa:	0211      	lsls	r1, r2, #8
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6912      	ldr	r2, [r2, #16]
 80035b0:	0852      	lsrs	r2, r2, #1
 80035b2:	3a01      	subs	r2, #1
 80035b4:	0552      	lsls	r2, r2, #21
 80035b6:	430a      	orrs	r2, r1
 80035b8:	4313      	orrs	r3, r2
 80035ba:	6103      	str	r3, [r0, #16]
 80035bc:	e011      	b.n	80035e2 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035be:	481d      	ldr	r0, [pc, #116]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035c0:	4b1c      	ldr	r3, [pc, #112]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6892      	ldr	r2, [r2, #8]
 80035d0:	0211      	lsls	r1, r2, #8
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	6952      	ldr	r2, [r2, #20]
 80035d6:	0852      	lsrs	r2, r2, #1
 80035d8:	3a01      	subs	r2, #1
 80035da:	0652      	lsls	r2, r2, #25
 80035dc:	430a      	orrs	r2, r1
 80035de:	4313      	orrs	r3, r2
 80035e0:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80035e2:	4a14      	ldr	r2, [pc, #80]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035e4:	4b13      	ldr	r3, [pc, #76]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035ec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ee:	f7fd fd4b 	bl	8001088 <HAL_GetTick>
 80035f2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035f4:	e009      	b.n	800360a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035f6:	f7fd fd47 	bl	8001088 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d902      	bls.n	800360a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	73fb      	strb	r3, [r7, #15]
          break;
 8003608:	e005      	b.n	8003616 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800360a:	4b0a      	ldr	r3, [pc, #40]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0ef      	beq.n	80035f6 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003616:	7bfb      	ldrb	r3, [r7, #15]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d106      	bne.n	800362a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800361c:	4905      	ldr	r1, [pc, #20]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 800361e:	4b05      	ldr	r3, [pc, #20]	; (8003634 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003620:	691a      	ldr	r2, [r3, #16]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	4313      	orrs	r3, r2
 8003628:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800362a:	7bfb      	ldrb	r3, [r7, #15]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40021000 	.word	0x40021000

08003638 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003646:	4b68      	ldr	r3, [pc, #416]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f003 0303 	and.w	r3, r3, #3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d018      	beq.n	8003684 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003652:	4b65      	ldr	r3, [pc, #404]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f003 0203 	and.w	r2, r3, #3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d10d      	bne.n	800367e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
       ||
 8003666:	2b00      	cmp	r3, #0
 8003668:	d009      	beq.n	800367e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800366a:	4b5f      	ldr	r3, [pc, #380]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	091b      	lsrs	r3, r3, #4
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
       ||
 800367a:	429a      	cmp	r2, r3
 800367c:	d044      	beq.n	8003708 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	73fb      	strb	r3, [r7, #15]
 8003682:	e041      	b.n	8003708 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b02      	cmp	r3, #2
 800368a:	d00c      	beq.n	80036a6 <RCCEx_PLLSAI2_Config+0x6e>
 800368c:	2b03      	cmp	r3, #3
 800368e:	d013      	beq.n	80036b8 <RCCEx_PLLSAI2_Config+0x80>
 8003690:	2b01      	cmp	r3, #1
 8003692:	d120      	bne.n	80036d6 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003694:	4b54      	ldr	r3, [pc, #336]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d11d      	bne.n	80036dc <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a4:	e01a      	b.n	80036dc <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036a6:	4b50      	ldr	r3, [pc, #320]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d116      	bne.n	80036e0 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036b6:	e013      	b.n	80036e0 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036b8:	4b4b      	ldr	r3, [pc, #300]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10f      	bne.n	80036e4 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036c4:	4b48      	ldr	r3, [pc, #288]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d109      	bne.n	80036e4 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036d4:	e006      	b.n	80036e4 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	73fb      	strb	r3, [r7, #15]
      break;
 80036da:	e004      	b.n	80036e6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80036dc:	bf00      	nop
 80036de:	e002      	b.n	80036e6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80036e0:	bf00      	nop
 80036e2:	e000      	b.n	80036e6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80036e4:	bf00      	nop
    }

    if(status == HAL_OK)
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10d      	bne.n	8003708 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036ec:	483e      	ldr	r0, [pc, #248]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036ee:	4b3e      	ldr	r3, [pc, #248]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6819      	ldr	r1, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	3b01      	subs	r3, #1
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	430b      	orrs	r3, r1
 8003704:	4313      	orrs	r3, r2
 8003706:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003708:	7bfb      	ldrb	r3, [r7, #15]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d167      	bne.n	80037de <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800370e:	4a36      	ldr	r2, [pc, #216]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003710:	4b35      	ldr	r3, [pc, #212]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003718:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800371a:	f7fd fcb5 	bl	8001088 <HAL_GetTick>
 800371e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003720:	e009      	b.n	8003736 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003722:	f7fd fcb1 	bl	8001088 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d902      	bls.n	8003736 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	73fb      	strb	r3, [r7, #15]
        break;
 8003734:	e005      	b.n	8003742 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003736:	4b2c      	ldr	r3, [pc, #176]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1ef      	bne.n	8003722 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003742:	7bfb      	ldrb	r3, [r7, #15]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d14a      	bne.n	80037de <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d111      	bne.n	8003772 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800374e:	4826      	ldr	r0, [pc, #152]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003750:	4b25      	ldr	r3, [pc, #148]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6892      	ldr	r2, [r2, #8]
 8003760:	0211      	lsls	r1, r2, #8
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	68d2      	ldr	r2, [r2, #12]
 8003766:	0912      	lsrs	r2, r2, #4
 8003768:	0452      	lsls	r2, r2, #17
 800376a:	430a      	orrs	r2, r1
 800376c:	4313      	orrs	r3, r2
 800376e:	6143      	str	r3, [r0, #20]
 8003770:	e011      	b.n	8003796 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003772:	481d      	ldr	r0, [pc, #116]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003774:	4b1c      	ldr	r3, [pc, #112]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800377c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6892      	ldr	r2, [r2, #8]
 8003784:	0211      	lsls	r1, r2, #8
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6912      	ldr	r2, [r2, #16]
 800378a:	0852      	lsrs	r2, r2, #1
 800378c:	3a01      	subs	r2, #1
 800378e:	0652      	lsls	r2, r2, #25
 8003790:	430a      	orrs	r2, r1
 8003792:	4313      	orrs	r3, r2
 8003794:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003796:	4a14      	ldr	r2, [pc, #80]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003798:	4b13      	ldr	r3, [pc, #76]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a2:	f7fd fc71 	bl	8001088 <HAL_GetTick>
 80037a6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037a8:	e009      	b.n	80037be <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037aa:	f7fd fc6d 	bl	8001088 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d902      	bls.n	80037be <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	73fb      	strb	r3, [r7, #15]
          break;
 80037bc:	e005      	b.n	80037ca <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037be:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0ef      	beq.n	80037aa <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80037ca:	7bfb      	ldrb	r3, [r7, #15]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d106      	bne.n	80037de <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80037d0:	4905      	ldr	r1, [pc, #20]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037d2:	4b05      	ldr	r3, [pc, #20]	; (80037e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037d4:	695a      	ldr	r2, [r3, #20]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	4313      	orrs	r3, r2
 80037dc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80037de:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40021000 	.word	0x40021000

080037ec <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d06c      	beq.n	80038d8 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d106      	bne.n	8003818 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f005 fcb8 	bl	8009188 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2202      	movs	r2, #2
 800381c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	22ca      	movs	r2, #202	; 0xca
 8003826:	625a      	str	r2, [r3, #36]	; 0x24
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2253      	movs	r2, #83	; 0x53
 800382e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f9a0 	bl	8003b76 <RTC_EnterInitMode>
 8003836:	4603      	mov	r3, r0
 8003838:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800383a:	7bfb      	ldrb	r3, [r7, #15]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d14b      	bne.n	80038d8 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800384e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003852:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6812      	ldr	r2, [r2, #0]
 800385c:	6891      	ldr	r1, [r2, #8]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6850      	ldr	r0, [r2, #4]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6912      	ldr	r2, [r2, #16]
 8003866:	4310      	orrs	r0, r2
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6992      	ldr	r2, [r2, #24]
 800386c:	4302      	orrs	r2, r0
 800386e:	430a      	orrs	r2, r1
 8003870:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	68d2      	ldr	r2, [r2, #12]
 800387a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6812      	ldr	r2, [r2, #0]
 8003884:	6911      	ldr	r1, [r2, #16]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6892      	ldr	r2, [r2, #8]
 800388a:	0412      	lsls	r2, r2, #16
 800388c:	430a      	orrs	r2, r1
 800388e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 f9a3 	bl	8003bdc <RTC_ExitInitMode>
 8003896:	4603      	mov	r3, r0
 8003898:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800389a:	7bfb      	ldrb	r3, [r7, #15]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d11b      	bne.n	80038d8 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6812      	ldr	r2, [r2, #0]
 80038a8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80038aa:	f022 0203 	bic.w	r2, r2, #3
 80038ae:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6812      	ldr	r2, [r2, #0]
 80038b8:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	69d0      	ldr	r0, [r2, #28]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6952      	ldr	r2, [r2, #20]
 80038c2:	4302      	orrs	r2, r0
 80038c4:	430a      	orrs	r2, r1
 80038c6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	22ff      	movs	r2, #255	; 0xff
 80038ce:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80038e2:	b590      	push	{r4, r7, lr}
 80038e4:	b087      	sub	sp, #28
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	60f8      	str	r0, [r7, #12]
 80038ea:	60b9      	str	r1, [r7, #8]
 80038ec:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_RTC_SetTime+0x1a>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e08b      	b.n	8003a14 <HAL_RTC_SetTime+0x132>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	22ca      	movs	r2, #202	; 0xca
 8003912:	625a      	str	r2, [r3, #36]	; 0x24
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2253      	movs	r2, #83	; 0x53
 800391a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 f92a 	bl	8003b76 <RTC_EnterInitMode>
 8003922:	4603      	mov	r3, r0
 8003924:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003926:	7cfb      	ldrb	r3, [r7, #19]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d163      	bne.n	80039f4 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d126      	bne.n	8003980 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393c:	2b00      	cmp	r3, #0
 800393e:	d102      	bne.n	8003946 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	2200      	movs	r2, #0
 8003944:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f000 f984 	bl	8003c58 <RTC_ByteToBcd2>
 8003950:	4603      	mov	r3, r0
 8003952:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	785b      	ldrb	r3, [r3, #1]
 8003958:	4618      	mov	r0, r3
 800395a:	f000 f97d 	bl	8003c58 <RTC_ByteToBcd2>
 800395e:	4603      	mov	r3, r0
 8003960:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003962:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	789b      	ldrb	r3, [r3, #2]
 8003968:	4618      	mov	r0, r3
 800396a:	f000 f975 	bl	8003c58 <RTC_ByteToBcd2>
 800396e:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003970:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	78db      	ldrb	r3, [r3, #3]
 8003978:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800397a:	4313      	orrs	r3, r2
 800397c:	617b      	str	r3, [r7, #20]
 800397e:	e018      	b.n	80039b2 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398a:	2b00      	cmp	r3, #0
 800398c:	d102      	bne.n	8003994 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2200      	movs	r2, #0
 8003992:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	785b      	ldrb	r3, [r3, #1]
 800399e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80039a0:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80039a6:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	78db      	ldrb	r3, [r3, #3]
 80039ac:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80039ae:	4313      	orrs	r3, r2
 80039b0:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80039bc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80039c0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	6812      	ldr	r2, [r2, #0]
 80039ca:	6892      	ldr	r2, [r2, #8]
 80039cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039d0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	6812      	ldr	r2, [r2, #0]
 80039da:	6891      	ldr	r1, [r2, #8]
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	68d0      	ldr	r0, [r2, #12]
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	6912      	ldr	r2, [r2, #16]
 80039e4:	4302      	orrs	r2, r0
 80039e6:	430a      	orrs	r2, r1
 80039e8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 f8f6 	bl	8003bdc <RTC_ExitInitMode>
 80039f0:	4603      	mov	r3, r0
 80039f2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	22ff      	movs	r2, #255	; 0xff
 80039fa:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80039fc:	7cfb      	ldrb	r3, [r7, #19]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d103      	bne.n	8003a0a <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003a12:	7cfb      	ldrb	r3, [r7, #19]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	371c      	adds	r7, #28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd90      	pop	{r4, r7, pc}

08003a1c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003a1c:	b590      	push	{r4, r7, lr}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d101      	bne.n	8003a36 <HAL_RTC_SetDate+0x1a>
 8003a32:	2302      	movs	r3, #2
 8003a34:	e075      	b.n	8003b22 <HAL_RTC_SetDate+0x106>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2202      	movs	r2, #2
 8003a42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10e      	bne.n	8003a6a <HAL_RTC_SetDate+0x4e>
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	785b      	ldrb	r3, [r3, #1]
 8003a50:	f003 0310 	and.w	r3, r3, #16
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d008      	beq.n	8003a6a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	785b      	ldrb	r3, [r3, #1]
 8003a5c:	f023 0310 	bic.w	r3, r3, #16
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	330a      	adds	r3, #10
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d11c      	bne.n	8003aaa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	78db      	ldrb	r3, [r3, #3]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 f8ef 	bl	8003c58 <RTC_ByteToBcd2>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	785b      	ldrb	r3, [r3, #1]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 f8e8 	bl	8003c58 <RTC_ByteToBcd2>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003a8c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	789b      	ldrb	r3, [r3, #2]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 f8e0 	bl	8003c58 <RTC_ByteToBcd2>
 8003a98:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003a9a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	e00e      	b.n	8003ac8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	78db      	ldrb	r3, [r3, #3]
 8003aae:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	785b      	ldrb	r3, [r3, #1]
 8003ab4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003ab6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003abc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	22ca      	movs	r2, #202	; 0xca
 8003ace:	625a      	str	r2, [r3, #36]	; 0x24
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2253      	movs	r2, #83	; 0x53
 8003ad6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 f84c 	bl	8003b76 <RTC_EnterInitMode>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003ae2:	7cfb      	ldrb	r3, [r7, #19]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10c      	bne.n	8003b02 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003af2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003af6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 f86f 	bl	8003bdc <RTC_ExitInitMode>
 8003afe:	4603      	mov	r3, r0
 8003b00:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	22ff      	movs	r2, #255	; 0xff
 8003b08:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003b0a:	7cfb      	ldrb	r3, [r7, #19]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d103      	bne.n	8003b18 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003b20:	7cfb      	ldrb	r3, [r7, #19]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	371c      	adds	r7, #28
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd90      	pop	{r4, r7, pc}

08003b2a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b084      	sub	sp, #16
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6812      	ldr	r2, [r2, #0]
 8003b3a:	68d2      	ldr	r2, [r2, #12]
 8003b3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b40:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003b42:	f7fd faa1 	bl	8001088 <HAL_GetTick>
 8003b46:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003b48:	e009      	b.n	8003b5e <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b4a:	f7fd fa9d 	bl	8001088 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b58:	d901      	bls.n	8003b5e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e007      	b.n	8003b6e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	f003 0320 	and.w	r3, r3, #32
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0ee      	beq.n	8003b4a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b084      	sub	sp, #16
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d120      	bne.n	8003bd2 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f04f 32ff 	mov.w	r2, #4294967295
 8003b98:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003b9a:	f7fd fa75 	bl	8001088 <HAL_GetTick>
 8003b9e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003ba0:	e00d      	b.n	8003bbe <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003ba2:	f7fd fa71 	bl	8001088 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bb0:	d905      	bls.n	8003bbe <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2203      	movs	r2, #3
 8003bba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d102      	bne.n	8003bd2 <RTC_EnterInitMode+0x5c>
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
 8003bce:	2b03      	cmp	r3, #3
 8003bd0:	d1e7      	bne.n	8003ba2 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003be4:	2300      	movs	r3, #0
 8003be6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003be8:	4a1a      	ldr	r2, [pc, #104]	; (8003c54 <RTC_ExitInitMode+0x78>)
 8003bea:	4b1a      	ldr	r3, [pc, #104]	; (8003c54 <RTC_ExitInitMode+0x78>)
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bf2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003bf4:	4b17      	ldr	r3, [pc, #92]	; (8003c54 <RTC_ExitInitMode+0x78>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10c      	bne.n	8003c1a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7ff ff92 	bl	8003b2a <HAL_RTC_WaitForSynchro>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d01e      	beq.n	8003c4a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2203      	movs	r2, #3
 8003c10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	73fb      	strb	r3, [r7, #15]
 8003c18:	e017      	b.n	8003c4a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003c1a:	4a0e      	ldr	r2, [pc, #56]	; (8003c54 <RTC_ExitInitMode+0x78>)
 8003c1c:	4b0d      	ldr	r3, [pc, #52]	; (8003c54 <RTC_ExitInitMode+0x78>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f023 0320 	bic.w	r3, r3, #32
 8003c24:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7ff ff7f 	bl	8003b2a <HAL_RTC_WaitForSynchro>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d005      	beq.n	8003c3e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2203      	movs	r2, #3
 8003c36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003c3e:	4a05      	ldr	r2, [pc, #20]	; (8003c54 <RTC_ExitInitMode+0x78>)
 8003c40:	4b04      	ldr	r3, [pc, #16]	; (8003c54 <RTC_ExitInitMode+0x78>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f043 0320 	orr.w	r3, r3, #32
 8003c48:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40002800 	.word	0x40002800

08003c58 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	4603      	mov	r3, r0
 8003c60:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8003c66:	79fb      	ldrb	r3, [r7, #7]
 8003c68:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8003c6a:	e005      	b.n	8003c78 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8003c72:	7afb      	ldrb	r3, [r7, #11]
 8003c74:	3b0a      	subs	r3, #10
 8003c76:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8003c78:	7afb      	ldrb	r3, [r7, #11]
 8003c7a:	2b09      	cmp	r3, #9
 8003c7c:	d8f6      	bhi.n	8003c6c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	7afb      	ldrb	r3, [r7, #11]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	b2db      	uxtb	r3, r3
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bc80      	pop	{r7}
 8003c94:	4770      	bx	lr
	...

08003c98 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d101      	bne.n	8003cb2 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	e07f      	b.n	8003db2 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	22ca      	movs	r2, #202	; 0xca
 8003cc8:	625a      	str	r2, [r3, #36]	; 0x24
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2253      	movs	r2, #83	; 0x53
 8003cd0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	6812      	ldr	r2, [r2, #0]
 8003cda:	6892      	ldr	r2, [r2, #8]
 8003cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ce0:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	6812      	ldr	r2, [r2, #0]
 8003cea:	68d2      	ldr	r2, [r2, #12]
 8003cec:	b2d2      	uxtb	r2, r2
 8003cee:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003cf2:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d120      	bne.n	8003d44 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8003d02:	f7fd f9c1 	bl	8001088 <HAL_GetTick>
 8003d06:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8003d08:	e015      	b.n	8003d36 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d0a:	f7fd f9bd 	bl	8001088 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d18:	d90d      	bls.n	8003d36 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	22ff      	movs	r2, #255	; 0xff
 8003d20:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2203      	movs	r2, #3
 8003d26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e03d      	b.n	8003db2 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0e2      	beq.n	8003d0a <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	6812      	ldr	r2, [r2, #0]
 8003d54:	6892      	ldr	r2, [r2, #8]
 8003d56:	f022 0107 	bic.w	r1, r2, #7
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003d60:	4a16      	ldr	r2, [pc, #88]	; (8003dbc <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8003d62:	4b16      	ldr	r3, [pc, #88]	; (8003dbc <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d6a:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003d6c:	4a13      	ldr	r2, [pc, #76]	; (8003dbc <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8003d6e:	4b13      	ldr	r3, [pc, #76]	; (8003dbc <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d76:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	6812      	ldr	r2, [r2, #0]
 8003d80:	6892      	ldr	r2, [r2, #8]
 8003d82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d86:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	6812      	ldr	r2, [r2, #0]
 8003d90:	6892      	ldr	r2, [r2, #8]
 8003d92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d96:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	22ff      	movs	r2, #255	; 0xff
 8003d9e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3718      	adds	r7, #24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	40010400 	.word	0x40010400

08003dc0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003dc8:	4b0f      	ldr	r3, [pc, #60]	; (8003e08 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8003dca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003dce:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00b      	beq.n	8003df6 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	6812      	ldr	r2, [r2, #0]
 8003de6:	68d2      	ldr	r2, [r2, #12]
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003dee:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 f80b 	bl	8003e0c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8003dfe:	bf00      	nop
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	40010400 	.word	0x40010400

08003e0c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bc80      	pop	{r7}
 8003e1c:	4770      	bx	lr

08003e1e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b082      	sub	sp, #8
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e01d      	b.n	8003e6c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d106      	bne.n	8003e4a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f005 faeb 	bl	8009420 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	3304      	adds	r3, #4
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4610      	mov	r0, r2
 8003e5e:	f000 fd1f 	bl	80048a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6a1a      	ldr	r2, [r3, #32]
 8003e8a:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e8e:	4013      	ands	r3, r2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10f      	bne.n	8003eb4 <HAL_TIM_Base_DeInit+0x40>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6a1a      	ldr	r2, [r3, #32]
 8003e9a:	f240 4344 	movw	r3, #1092	; 0x444
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d107      	bne.n	8003eb4 <HAL_TIM_Base_DeInit+0x40>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6812      	ldr	r2, [r2, #0]
 8003eac:	6812      	ldr	r2, [r2, #0]
 8003eae:	f022 0201 	bic.w	r2, r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f005 fafb 	bl	80094b0 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6a1a      	ldr	r2, [r3, #32]
 8003eea:	f241 1311 	movw	r3, #4369	; 0x1111
 8003eee:	4013      	ands	r3, r2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10f      	bne.n	8003f14 <HAL_TIM_Base_Stop+0x40>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6a1a      	ldr	r2, [r3, #32]
 8003efa:	f240 4344 	movw	r3, #1092	; 0x444
 8003efe:	4013      	ands	r3, r2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d107      	bne.n	8003f14 <HAL_TIM_Base_Stop+0x40>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6812      	ldr	r2, [r2, #0]
 8003f0c:	6812      	ldr	r2, [r2, #0]
 8003f0e:	f022 0201 	bic.w	r2, r2, #1
 8003f12:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bc80      	pop	{r7}
 8003f26:	4770      	bx	lr

08003f28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6812      	ldr	r2, [r2, #0]
 8003f38:	68d2      	ldr	r2, [r2, #12]
 8003f3a:	f042 0201 	orr.w	r2, r2, #1
 8003f3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689a      	ldr	r2, [r3, #8]
 8003f46:	4b0c      	ldr	r3, [pc, #48]	; (8003f78 <HAL_TIM_Base_Start_IT+0x50>)
 8003f48:	4013      	ands	r3, r2
 8003f4a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2b06      	cmp	r3, #6
 8003f50:	d00b      	beq.n	8003f6a <HAL_TIM_Base_Start_IT+0x42>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f58:	d007      	beq.n	8003f6a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6812      	ldr	r2, [r2, #0]
 8003f62:	6812      	ldr	r2, [r2, #0]
 8003f64:	f042 0201 	orr.w	r2, r2, #1
 8003f68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3714      	adds	r7, #20
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bc80      	pop	{r7}
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	00010007 	.word	0x00010007

08003f7c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6812      	ldr	r2, [r2, #0]
 8003f8c:	68d2      	ldr	r2, [r2, #12]
 8003f8e:	f022 0201 	bic.w	r2, r2, #1
 8003f92:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6a1a      	ldr	r2, [r3, #32]
 8003f9a:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10f      	bne.n	8003fc4 <HAL_TIM_Base_Stop_IT+0x48>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6a1a      	ldr	r2, [r3, #32]
 8003faa:	f240 4344 	movw	r3, #1092	; 0x444
 8003fae:	4013      	ands	r3, r2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d107      	bne.n	8003fc4 <HAL_TIM_Base_Stop_IT+0x48>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6812      	ldr	r2, [r2, #0]
 8003fbc:	6812      	ldr	r2, [r2, #0]
 8003fbe:	f022 0201 	bic.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr

08003fd0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e01d      	b.n	800401e <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d106      	bne.n	8003ffc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f815 	bl	8004026 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3304      	adds	r3, #4
 800400c:	4619      	mov	r1, r3
 800400e:	4610      	mov	r0, r2
 8004010:	f000 fc46 	bl	80048a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	4770      	bx	lr

08004038 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	2b0c      	cmp	r3, #12
 8004046:	d841      	bhi.n	80040cc <HAL_TIM_OC_Start_IT+0x94>
 8004048:	a201      	add	r2, pc, #4	; (adr r2, 8004050 <HAL_TIM_OC_Start_IT+0x18>)
 800404a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404e:	bf00      	nop
 8004050:	08004085 	.word	0x08004085
 8004054:	080040cd 	.word	0x080040cd
 8004058:	080040cd 	.word	0x080040cd
 800405c:	080040cd 	.word	0x080040cd
 8004060:	08004097 	.word	0x08004097
 8004064:	080040cd 	.word	0x080040cd
 8004068:	080040cd 	.word	0x080040cd
 800406c:	080040cd 	.word	0x080040cd
 8004070:	080040a9 	.word	0x080040a9
 8004074:	080040cd 	.word	0x080040cd
 8004078:	080040cd 	.word	0x080040cd
 800407c:	080040cd 	.word	0x080040cd
 8004080:	080040bb 	.word	0x080040bb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6812      	ldr	r2, [r2, #0]
 800408c:	68d2      	ldr	r2, [r2, #12]
 800408e:	f042 0202 	orr.w	r2, r2, #2
 8004092:	60da      	str	r2, [r3, #12]
      break;
 8004094:	e01b      	b.n	80040ce <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6812      	ldr	r2, [r2, #0]
 800409e:	68d2      	ldr	r2, [r2, #12]
 80040a0:	f042 0204 	orr.w	r2, r2, #4
 80040a4:	60da      	str	r2, [r3, #12]
      break;
 80040a6:	e012      	b.n	80040ce <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6812      	ldr	r2, [r2, #0]
 80040b0:	68d2      	ldr	r2, [r2, #12]
 80040b2:	f042 0208 	orr.w	r2, r2, #8
 80040b6:	60da      	str	r2, [r3, #12]
      break;
 80040b8:	e009      	b.n	80040ce <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	6812      	ldr	r2, [r2, #0]
 80040c2:	68d2      	ldr	r2, [r2, #12]
 80040c4:	f042 0210 	orr.w	r2, r2, #16
 80040c8:	60da      	str	r2, [r3, #12]
      break;
 80040ca:	e000      	b.n	80040ce <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 80040cc:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2201      	movs	r2, #1
 80040d4:	6839      	ldr	r1, [r7, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f001 f987 	bl	80053ea <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a1e      	ldr	r2, [pc, #120]	; (800415c <HAL_TIM_OC_Start_IT+0x124>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d013      	beq.n	800410e <HAL_TIM_OC_Start_IT+0xd6>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a1d      	ldr	r2, [pc, #116]	; (8004160 <HAL_TIM_OC_Start_IT+0x128>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d00e      	beq.n	800410e <HAL_TIM_OC_Start_IT+0xd6>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a1b      	ldr	r2, [pc, #108]	; (8004164 <HAL_TIM_OC_Start_IT+0x12c>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d009      	beq.n	800410e <HAL_TIM_OC_Start_IT+0xd6>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a1a      	ldr	r2, [pc, #104]	; (8004168 <HAL_TIM_OC_Start_IT+0x130>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d004      	beq.n	800410e <HAL_TIM_OC_Start_IT+0xd6>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a18      	ldr	r2, [pc, #96]	; (800416c <HAL_TIM_OC_Start_IT+0x134>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d101      	bne.n	8004112 <HAL_TIM_OC_Start_IT+0xda>
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <HAL_TIM_OC_Start_IT+0xdc>
 8004112:	2300      	movs	r3, #0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d007      	beq.n	8004128 <HAL_TIM_OC_Start_IT+0xf0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6812      	ldr	r2, [r2, #0]
 8004120:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004122:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004126:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	4b10      	ldr	r3, [pc, #64]	; (8004170 <HAL_TIM_OC_Start_IT+0x138>)
 8004130:	4013      	ands	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2b06      	cmp	r3, #6
 8004138:	d00b      	beq.n	8004152 <HAL_TIM_OC_Start_IT+0x11a>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004140:	d007      	beq.n	8004152 <HAL_TIM_OC_Start_IT+0x11a>
  {
    __HAL_TIM_ENABLE(htim);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	6812      	ldr	r2, [r2, #0]
 800414a:	6812      	ldr	r2, [r2, #0]
 800414c:	f042 0201 	orr.w	r2, r2, #1
 8004150:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	40012c00 	.word	0x40012c00
 8004160:	40013400 	.word	0x40013400
 8004164:	40014000 	.word	0x40014000
 8004168:	40014400 	.word	0x40014400
 800416c:	40014800 	.word	0x40014800
 8004170:	00010007 	.word	0x00010007

08004174 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e01d      	b.n	80041c2 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d106      	bne.n	80041a0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f815 	bl	80041ca <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2202      	movs	r2, #2
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3304      	adds	r3, #4
 80041b0:	4619      	mov	r1, r3
 80041b2:	4610      	mov	r0, r2
 80041b4:	f000 fb74 	bl	80048a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bc80      	pop	{r7}
 80041da:	4770      	bx	lr

080041dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d122      	bne.n	8004238 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d11b      	bne.n	8004238 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f06f 0202 	mvn.w	r2, #2
 8004208:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 fb23 	bl	800486a <HAL_TIM_IC_CaptureCallback>
 8004224:	e005      	b.n	8004232 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 fb16 	bl	8004858 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 fb25 	bl	800487c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b04      	cmp	r3, #4
 8004244:	d122      	bne.n	800428c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b04      	cmp	r3, #4
 8004252:	d11b      	bne.n	800428c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f06f 0204 	mvn.w	r2, #4
 800425c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2202      	movs	r2, #2
 8004262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 faf9 	bl	800486a <HAL_TIM_IC_CaptureCallback>
 8004278:	e005      	b.n	8004286 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 faec 	bl	8004858 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 fafb 	bl	800487c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	2b08      	cmp	r3, #8
 8004298:	d122      	bne.n	80042e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f003 0308 	and.w	r3, r3, #8
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d11b      	bne.n	80042e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f06f 0208 	mvn.w	r2, #8
 80042b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2204      	movs	r2, #4
 80042b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 facf 	bl	800486a <HAL_TIM_IC_CaptureCallback>
 80042cc:	e005      	b.n	80042da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fac2 	bl	8004858 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 fad1 	bl	800487c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f003 0310 	and.w	r3, r3, #16
 80042ea:	2b10      	cmp	r3, #16
 80042ec:	d122      	bne.n	8004334 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f003 0310 	and.w	r3, r3, #16
 80042f8:	2b10      	cmp	r3, #16
 80042fa:	d11b      	bne.n	8004334 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f06f 0210 	mvn.w	r2, #16
 8004304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2208      	movs	r2, #8
 800430a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 faa5 	bl	800486a <HAL_TIM_IC_CaptureCallback>
 8004320:	e005      	b.n	800432e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 fa98 	bl	8004858 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 faa7 	bl	800487c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b01      	cmp	r3, #1
 8004340:	d10e      	bne.n	8004360 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	2b01      	cmp	r3, #1
 800434e:	d107      	bne.n	8004360 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f06f 0201 	mvn.w	r2, #1
 8004358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 fa73 	bl	8004846 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436a:	2b80      	cmp	r3, #128	; 0x80
 800436c:	d10e      	bne.n	800438c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004378:	2b80      	cmp	r3, #128	; 0x80
 800437a:	d107      	bne.n	800438c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f001 f8e3 	bl	8005552 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800439a:	d10e      	bne.n	80043ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a6:	2b80      	cmp	r3, #128	; 0x80
 80043a8:	d107      	bne.n	80043ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80043b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f001 f8d5 	bl	8005564 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c4:	2b40      	cmp	r3, #64	; 0x40
 80043c6:	d10e      	bne.n	80043e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d2:	2b40      	cmp	r3, #64	; 0x40
 80043d4:	d107      	bne.n	80043e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 fa54 	bl	800488e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	f003 0320 	and.w	r3, r3, #32
 80043f0:	2b20      	cmp	r3, #32
 80043f2:	d10e      	bne.n	8004412 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f003 0320 	and.w	r3, r3, #32
 80043fe:	2b20      	cmp	r3, #32
 8004400:	d107      	bne.n	8004412 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f06f 0220 	mvn.w	r2, #32
 800440a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f001 f897 	bl	8005540 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004412:	bf00      	nop
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
	...

0800441c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800442e:	2b01      	cmp	r3, #1
 8004430:	d101      	bne.n	8004436 <HAL_TIM_OC_ConfigChannel+0x1a>
 8004432:	2302      	movs	r3, #2
 8004434:	e06c      	b.n	8004510 <HAL_TIM_OC_ConfigChannel+0xf4>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2202      	movs	r2, #2
 8004442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b14      	cmp	r3, #20
 800444a:	d857      	bhi.n	80044fc <HAL_TIM_OC_ConfigChannel+0xe0>
 800444c:	a201      	add	r2, pc, #4	; (adr r2, 8004454 <HAL_TIM_OC_ConfigChannel+0x38>)
 800444e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004452:	bf00      	nop
 8004454:	080044a9 	.word	0x080044a9
 8004458:	080044fd 	.word	0x080044fd
 800445c:	080044fd 	.word	0x080044fd
 8004460:	080044fd 	.word	0x080044fd
 8004464:	080044b7 	.word	0x080044b7
 8004468:	080044fd 	.word	0x080044fd
 800446c:	080044fd 	.word	0x080044fd
 8004470:	080044fd 	.word	0x080044fd
 8004474:	080044c5 	.word	0x080044c5
 8004478:	080044fd 	.word	0x080044fd
 800447c:	080044fd 	.word	0x080044fd
 8004480:	080044fd 	.word	0x080044fd
 8004484:	080044d3 	.word	0x080044d3
 8004488:	080044fd 	.word	0x080044fd
 800448c:	080044fd 	.word	0x080044fd
 8004490:	080044fd 	.word	0x080044fd
 8004494:	080044e1 	.word	0x080044e1
 8004498:	080044fd 	.word	0x080044fd
 800449c:	080044fd 	.word	0x080044fd
 80044a0:	080044fd 	.word	0x080044fd
 80044a4:	080044ef 	.word	0x080044ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68b9      	ldr	r1, [r7, #8]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 fa8e 	bl	80049d0 <TIM_OC1_SetConfig>
      break;
 80044b4:	e023      	b.n	80044fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68b9      	ldr	r1, [r7, #8]
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 fb17 	bl	8004af0 <TIM_OC2_SetConfig>
      break;
 80044c2:	e01c      	b.n	80044fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68b9      	ldr	r1, [r7, #8]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 fb98 	bl	8004c00 <TIM_OC3_SetConfig>
      break;
 80044d0:	e015      	b.n	80044fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68b9      	ldr	r1, [r7, #8]
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 fc19 	bl	8004d10 <TIM_OC4_SetConfig>
      break;
 80044de:	e00e      	b.n	80044fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68b9      	ldr	r1, [r7, #8]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fc7a 	bl	8004de0 <TIM_OC5_SetConfig>
      break;
 80044ec:	e007      	b.n	80044fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68b9      	ldr	r1, [r7, #8]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f000 fcd7 	bl	8004ea8 <TIM_OC6_SetConfig>
      break;
 80044fa:	e000      	b.n	80044fe <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      break;
 80044fc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800452a:	2b01      	cmp	r3, #1
 800452c:	d101      	bne.n	8004532 <HAL_TIM_IC_ConfigChannel+0x1a>
 800452e:	2302      	movs	r3, #2
 8004530:	e08a      	b.n	8004648 <HAL_TIM_IC_ConfigChannel+0x130>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2202      	movs	r2, #2
 800453e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d11b      	bne.n	8004580 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6818      	ldr	r0, [r3, #0]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	6819      	ldr	r1, [r3, #0]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f000 fd92 	bl	8005080 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	6812      	ldr	r2, [r2, #0]
 8004564:	6992      	ldr	r2, [r2, #24]
 8004566:	f022 020c 	bic.w	r2, r2, #12
 800456a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	6812      	ldr	r2, [r2, #0]
 8004574:	6991      	ldr	r1, [r2, #24]
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	6892      	ldr	r2, [r2, #8]
 800457a:	430a      	orrs	r2, r1
 800457c:	619a      	str	r2, [r3, #24]
 800457e:	e05a      	b.n	8004636 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b04      	cmp	r3, #4
 8004584:	d11c      	bne.n	80045c0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6818      	ldr	r0, [r3, #0]
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	6819      	ldr	r1, [r3, #0]
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f000 fe0d 	bl	80051b4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	6812      	ldr	r2, [r2, #0]
 80045a2:	6992      	ldr	r2, [r2, #24]
 80045a4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80045a8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	6812      	ldr	r2, [r2, #0]
 80045b2:	6991      	ldr	r1, [r2, #24]
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	6892      	ldr	r2, [r2, #8]
 80045b8:	0212      	lsls	r2, r2, #8
 80045ba:	430a      	orrs	r2, r1
 80045bc:	619a      	str	r2, [r3, #24]
 80045be:	e03a      	b.n	8004636 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b08      	cmp	r3, #8
 80045c4:	d11b      	bne.n	80045fe <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6818      	ldr	r0, [r3, #0]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	6819      	ldr	r1, [r3, #0]
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	f000 fe58 	bl	800528a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	6812      	ldr	r2, [r2, #0]
 80045e2:	69d2      	ldr	r2, [r2, #28]
 80045e4:	f022 020c 	bic.w	r2, r2, #12
 80045e8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	6812      	ldr	r2, [r2, #0]
 80045f2:	69d1      	ldr	r1, [r2, #28]
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	6892      	ldr	r2, [r2, #8]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	61da      	str	r2, [r3, #28]
 80045fc:	e01b      	b.n	8004636 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6818      	ldr	r0, [r3, #0]
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	6819      	ldr	r1, [r3, #0]
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f000 fe77 	bl	8005300 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	6812      	ldr	r2, [r2, #0]
 800461a:	69d2      	ldr	r2, [r2, #28]
 800461c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004620:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	6812      	ldr	r2, [r2, #0]
 800462a:	69d1      	ldr	r1, [r2, #28]
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	6892      	ldr	r2, [r2, #8]
 8004630:	0212      	lsls	r2, r2, #8
 8004632:	430a      	orrs	r2, r1
 8004634:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004660:	2b01      	cmp	r3, #1
 8004662:	d101      	bne.n	8004668 <HAL_TIM_ConfigClockSource+0x18>
 8004664:	2302      	movs	r3, #2
 8004666:	e0a8      	b.n	80047ba <HAL_TIM_ConfigClockSource+0x16a>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2202      	movs	r2, #2
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004686:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800468a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004692:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2b40      	cmp	r3, #64	; 0x40
 80046a2:	d067      	beq.n	8004774 <HAL_TIM_ConfigClockSource+0x124>
 80046a4:	2b40      	cmp	r3, #64	; 0x40
 80046a6:	d80b      	bhi.n	80046c0 <HAL_TIM_ConfigClockSource+0x70>
 80046a8:	2b10      	cmp	r3, #16
 80046aa:	d073      	beq.n	8004794 <HAL_TIM_ConfigClockSource+0x144>
 80046ac:	2b10      	cmp	r3, #16
 80046ae:	d802      	bhi.n	80046b6 <HAL_TIM_ConfigClockSource+0x66>
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d06f      	beq.n	8004794 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80046b4:	e078      	b.n	80047a8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80046b6:	2b20      	cmp	r3, #32
 80046b8:	d06c      	beq.n	8004794 <HAL_TIM_ConfigClockSource+0x144>
 80046ba:	2b30      	cmp	r3, #48	; 0x30
 80046bc:	d06a      	beq.n	8004794 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80046be:	e073      	b.n	80047a8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80046c0:	2b70      	cmp	r3, #112	; 0x70
 80046c2:	d00d      	beq.n	80046e0 <HAL_TIM_ConfigClockSource+0x90>
 80046c4:	2b70      	cmp	r3, #112	; 0x70
 80046c6:	d804      	bhi.n	80046d2 <HAL_TIM_ConfigClockSource+0x82>
 80046c8:	2b50      	cmp	r3, #80	; 0x50
 80046ca:	d033      	beq.n	8004734 <HAL_TIM_ConfigClockSource+0xe4>
 80046cc:	2b60      	cmp	r3, #96	; 0x60
 80046ce:	d041      	beq.n	8004754 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80046d0:	e06a      	b.n	80047a8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80046d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d6:	d066      	beq.n	80047a6 <HAL_TIM_ConfigClockSource+0x156>
 80046d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046dc:	d017      	beq.n	800470e <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80046de:	e063      	b.n	80047a8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6818      	ldr	r0, [r3, #0]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	6899      	ldr	r1, [r3, #8]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	f000 fe5c 	bl	80053ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004702:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	609a      	str	r2, [r3, #8]
      break;
 800470c:	e04c      	b.n	80047a8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6818      	ldr	r0, [r3, #0]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	6899      	ldr	r1, [r3, #8]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f000 fe45 	bl	80053ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6812      	ldr	r2, [r2, #0]
 800472a:	6892      	ldr	r2, [r2, #8]
 800472c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004730:	609a      	str	r2, [r3, #8]
      break;
 8004732:	e039      	b.n	80047a8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6818      	ldr	r0, [r3, #0]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	6859      	ldr	r1, [r3, #4]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	461a      	mov	r2, r3
 8004742:	f000 fd09 	bl	8005158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2150      	movs	r1, #80	; 0x50
 800474c:	4618      	mov	r0, r3
 800474e:	f000 fe13 	bl	8005378 <TIM_ITRx_SetConfig>
      break;
 8004752:	e029      	b.n	80047a8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6818      	ldr	r0, [r3, #0]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	6859      	ldr	r1, [r3, #4]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	461a      	mov	r2, r3
 8004762:	f000 fd63 	bl	800522c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2160      	movs	r1, #96	; 0x60
 800476c:	4618      	mov	r0, r3
 800476e:	f000 fe03 	bl	8005378 <TIM_ITRx_SetConfig>
      break;
 8004772:	e019      	b.n	80047a8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6818      	ldr	r0, [r3, #0]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	6859      	ldr	r1, [r3, #4]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	461a      	mov	r2, r3
 8004782:	f000 fce9 	bl	8005158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2140      	movs	r1, #64	; 0x40
 800478c:	4618      	mov	r0, r3
 800478e:	f000 fdf3 	bl	8005378 <TIM_ITRx_SetConfig>
      break;
 8004792:	e009      	b.n	80047a8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4619      	mov	r1, r3
 800479e:	4610      	mov	r0, r2
 80047a0:	f000 fdea 	bl	8005378 <TIM_ITRx_SetConfig>
      break;
 80047a4:	e000      	b.n	80047a8 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80047a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b082      	sub	sp, #8
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d101      	bne.n	80047da <HAL_TIM_SlaveConfigSynchro+0x18>
 80047d6:	2302      	movs	r3, #2
 80047d8:	e031      	b.n	800483e <HAL_TIM_SlaveConfigSynchro+0x7c>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2202      	movs	r2, #2
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80047ea:	6839      	ldr	r1, [r7, #0]
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 fbbf 	bl	8004f70 <TIM_SlaveTimer_SetConfig>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d009      	beq.n	800480c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e018      	b.n	800483e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6812      	ldr	r2, [r2, #0]
 8004814:	68d2      	ldr	r2, [r2, #12]
 8004816:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800481a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6812      	ldr	r2, [r2, #0]
 8004824:	68d2      	ldr	r2, [r2, #12]
 8004826:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800482a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	bc80      	pop	{r7}
 8004856:	4770      	bx	lr

08004858 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	bc80      	pop	{r7}
 8004868:	4770      	bx	lr

0800486a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	bc80      	pop	{r7}
 800487a:	4770      	bx	lr

0800487c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	bc80      	pop	{r7}
 800488c:	4770      	bx	lr

0800488e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800488e:	b480      	push	{r7}
 8004890:	b083      	sub	sp, #12
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	bc80      	pop	{r7}
 800489e:	4770      	bx	lr

080048a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a3f      	ldr	r2, [pc, #252]	; (80049b0 <TIM_Base_SetConfig+0x110>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d013      	beq.n	80048e0 <TIM_Base_SetConfig+0x40>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048be:	d00f      	beq.n	80048e0 <TIM_Base_SetConfig+0x40>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a3c      	ldr	r2, [pc, #240]	; (80049b4 <TIM_Base_SetConfig+0x114>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d00b      	beq.n	80048e0 <TIM_Base_SetConfig+0x40>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a3b      	ldr	r2, [pc, #236]	; (80049b8 <TIM_Base_SetConfig+0x118>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d007      	beq.n	80048e0 <TIM_Base_SetConfig+0x40>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a3a      	ldr	r2, [pc, #232]	; (80049bc <TIM_Base_SetConfig+0x11c>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d003      	beq.n	80048e0 <TIM_Base_SetConfig+0x40>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a39      	ldr	r2, [pc, #228]	; (80049c0 <TIM_Base_SetConfig+0x120>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d108      	bne.n	80048f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a2e      	ldr	r2, [pc, #184]	; (80049b0 <TIM_Base_SetConfig+0x110>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d01f      	beq.n	800493a <TIM_Base_SetConfig+0x9a>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004900:	d01b      	beq.n	800493a <TIM_Base_SetConfig+0x9a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a2b      	ldr	r2, [pc, #172]	; (80049b4 <TIM_Base_SetConfig+0x114>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d017      	beq.n	800493a <TIM_Base_SetConfig+0x9a>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a2a      	ldr	r2, [pc, #168]	; (80049b8 <TIM_Base_SetConfig+0x118>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d013      	beq.n	800493a <TIM_Base_SetConfig+0x9a>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a29      	ldr	r2, [pc, #164]	; (80049bc <TIM_Base_SetConfig+0x11c>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d00f      	beq.n	800493a <TIM_Base_SetConfig+0x9a>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a28      	ldr	r2, [pc, #160]	; (80049c0 <TIM_Base_SetConfig+0x120>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d00b      	beq.n	800493a <TIM_Base_SetConfig+0x9a>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a27      	ldr	r2, [pc, #156]	; (80049c4 <TIM_Base_SetConfig+0x124>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d007      	beq.n	800493a <TIM_Base_SetConfig+0x9a>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a26      	ldr	r2, [pc, #152]	; (80049c8 <TIM_Base_SetConfig+0x128>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d003      	beq.n	800493a <TIM_Base_SetConfig+0x9a>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a25      	ldr	r2, [pc, #148]	; (80049cc <TIM_Base_SetConfig+0x12c>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d108      	bne.n	800494c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004940:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	4313      	orrs	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	4313      	orrs	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a0f      	ldr	r2, [pc, #60]	; (80049b0 <TIM_Base_SetConfig+0x110>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d00f      	beq.n	8004998 <TIM_Base_SetConfig+0xf8>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a11      	ldr	r2, [pc, #68]	; (80049c0 <TIM_Base_SetConfig+0x120>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d00b      	beq.n	8004998 <TIM_Base_SetConfig+0xf8>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a10      	ldr	r2, [pc, #64]	; (80049c4 <TIM_Base_SetConfig+0x124>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d007      	beq.n	8004998 <TIM_Base_SetConfig+0xf8>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a0f      	ldr	r2, [pc, #60]	; (80049c8 <TIM_Base_SetConfig+0x128>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d003      	beq.n	8004998 <TIM_Base_SetConfig+0xf8>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a0e      	ldr	r2, [pc, #56]	; (80049cc <TIM_Base_SetConfig+0x12c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d103      	bne.n	80049a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	691a      	ldr	r2, [r3, #16]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	615a      	str	r2, [r3, #20]
}
 80049a6:	bf00      	nop
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bc80      	pop	{r7}
 80049ae:	4770      	bx	lr
 80049b0:	40012c00 	.word	0x40012c00
 80049b4:	40000400 	.word	0x40000400
 80049b8:	40000800 	.word	0x40000800
 80049bc:	40000c00 	.word	0x40000c00
 80049c0:	40013400 	.word	0x40013400
 80049c4:	40014000 	.word	0x40014000
 80049c8:	40014400 	.word	0x40014400
 80049cc:	40014800 	.word	0x40014800

080049d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	f023 0201 	bic.w	r2, r3, #1
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 0303 	bic.w	r3, r3, #3
 8004a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f023 0302 	bic.w	r3, r3, #2
 8004a1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a2c      	ldr	r2, [pc, #176]	; (8004adc <TIM_OC1_SetConfig+0x10c>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d00f      	beq.n	8004a50 <TIM_OC1_SetConfig+0x80>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a2b      	ldr	r2, [pc, #172]	; (8004ae0 <TIM_OC1_SetConfig+0x110>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d00b      	beq.n	8004a50 <TIM_OC1_SetConfig+0x80>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a2a      	ldr	r2, [pc, #168]	; (8004ae4 <TIM_OC1_SetConfig+0x114>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d007      	beq.n	8004a50 <TIM_OC1_SetConfig+0x80>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a29      	ldr	r2, [pc, #164]	; (8004ae8 <TIM_OC1_SetConfig+0x118>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d003      	beq.n	8004a50 <TIM_OC1_SetConfig+0x80>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a28      	ldr	r2, [pc, #160]	; (8004aec <TIM_OC1_SetConfig+0x11c>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d10c      	bne.n	8004a6a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	f023 0308 	bic.w	r3, r3, #8
 8004a56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f023 0304 	bic.w	r3, r3, #4
 8004a68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a1b      	ldr	r2, [pc, #108]	; (8004adc <TIM_OC1_SetConfig+0x10c>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d00f      	beq.n	8004a92 <TIM_OC1_SetConfig+0xc2>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a1a      	ldr	r2, [pc, #104]	; (8004ae0 <TIM_OC1_SetConfig+0x110>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d00b      	beq.n	8004a92 <TIM_OC1_SetConfig+0xc2>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a19      	ldr	r2, [pc, #100]	; (8004ae4 <TIM_OC1_SetConfig+0x114>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d007      	beq.n	8004a92 <TIM_OC1_SetConfig+0xc2>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a18      	ldr	r2, [pc, #96]	; (8004ae8 <TIM_OC1_SetConfig+0x118>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d003      	beq.n	8004a92 <TIM_OC1_SetConfig+0xc2>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a17      	ldr	r2, [pc, #92]	; (8004aec <TIM_OC1_SetConfig+0x11c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d111      	bne.n	8004ab6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	685a      	ldr	r2, [r3, #4]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	621a      	str	r2, [r3, #32]
}
 8004ad0:	bf00      	nop
 8004ad2:	371c      	adds	r7, #28
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bc80      	pop	{r7}
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	40012c00 	.word	0x40012c00
 8004ae0:	40013400 	.word	0x40013400
 8004ae4:	40014000 	.word	0x40014000
 8004ae8:	40014400 	.word	0x40014400
 8004aec:	40014800 	.word	0x40014800

08004af0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b087      	sub	sp, #28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	f023 0210 	bic.w	r2, r3, #16
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	021b      	lsls	r3, r3, #8
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f023 0320 	bic.w	r3, r3, #32
 8004b3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a27      	ldr	r2, [pc, #156]	; (8004bec <TIM_OC2_SetConfig+0xfc>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d003      	beq.n	8004b5c <TIM_OC2_SetConfig+0x6c>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a26      	ldr	r2, [pc, #152]	; (8004bf0 <TIM_OC2_SetConfig+0x100>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d10d      	bne.n	8004b78 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	011b      	lsls	r3, r3, #4
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a1c      	ldr	r2, [pc, #112]	; (8004bec <TIM_OC2_SetConfig+0xfc>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d00f      	beq.n	8004ba0 <TIM_OC2_SetConfig+0xb0>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a1b      	ldr	r2, [pc, #108]	; (8004bf0 <TIM_OC2_SetConfig+0x100>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d00b      	beq.n	8004ba0 <TIM_OC2_SetConfig+0xb0>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a1a      	ldr	r2, [pc, #104]	; (8004bf4 <TIM_OC2_SetConfig+0x104>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d007      	beq.n	8004ba0 <TIM_OC2_SetConfig+0xb0>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a19      	ldr	r2, [pc, #100]	; (8004bf8 <TIM_OC2_SetConfig+0x108>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d003      	beq.n	8004ba0 <TIM_OC2_SetConfig+0xb0>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a18      	ldr	r2, [pc, #96]	; (8004bfc <TIM_OC2_SetConfig+0x10c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d113      	bne.n	8004bc8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ba6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	621a      	str	r2, [r3, #32]
}
 8004be2:	bf00      	nop
 8004be4:	371c      	adds	r7, #28
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bc80      	pop	{r7}
 8004bea:	4770      	bx	lr
 8004bec:	40012c00 	.word	0x40012c00
 8004bf0:	40013400 	.word	0x40013400
 8004bf4:	40014000 	.word	0x40014000
 8004bf8:	40014400 	.word	0x40014400
 8004bfc:	40014800 	.word	0x40014800

08004c00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b087      	sub	sp, #28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 0303 	bic.w	r3, r3, #3
 8004c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	021b      	lsls	r3, r3, #8
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a27      	ldr	r2, [pc, #156]	; (8004cfc <TIM_OC3_SetConfig+0xfc>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d003      	beq.n	8004c6a <TIM_OC3_SetConfig+0x6a>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a26      	ldr	r2, [pc, #152]	; (8004d00 <TIM_OC3_SetConfig+0x100>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d10d      	bne.n	8004c86 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	021b      	lsls	r3, r3, #8
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a1c      	ldr	r2, [pc, #112]	; (8004cfc <TIM_OC3_SetConfig+0xfc>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d00f      	beq.n	8004cae <TIM_OC3_SetConfig+0xae>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a1b      	ldr	r2, [pc, #108]	; (8004d00 <TIM_OC3_SetConfig+0x100>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00b      	beq.n	8004cae <TIM_OC3_SetConfig+0xae>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a1a      	ldr	r2, [pc, #104]	; (8004d04 <TIM_OC3_SetConfig+0x104>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d007      	beq.n	8004cae <TIM_OC3_SetConfig+0xae>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a19      	ldr	r2, [pc, #100]	; (8004d08 <TIM_OC3_SetConfig+0x108>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d003      	beq.n	8004cae <TIM_OC3_SetConfig+0xae>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a18      	ldr	r2, [pc, #96]	; (8004d0c <TIM_OC3_SetConfig+0x10c>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d113      	bne.n	8004cd6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	011b      	lsls	r3, r3, #4
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	621a      	str	r2, [r3, #32]
}
 8004cf0:	bf00      	nop
 8004cf2:	371c      	adds	r7, #28
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bc80      	pop	{r7}
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	40012c00 	.word	0x40012c00
 8004d00:	40013400 	.word	0x40013400
 8004d04:	40014000 	.word	0x40014000
 8004d08:	40014400 	.word	0x40014400
 8004d0c:	40014800 	.word	0x40014800

08004d10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b087      	sub	sp, #28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	021b      	lsls	r3, r3, #8
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	031b      	lsls	r3, r3, #12
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a17      	ldr	r2, [pc, #92]	; (8004dcc <TIM_OC4_SetConfig+0xbc>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d00f      	beq.n	8004d94 <TIM_OC4_SetConfig+0x84>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a16      	ldr	r2, [pc, #88]	; (8004dd0 <TIM_OC4_SetConfig+0xc0>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d00b      	beq.n	8004d94 <TIM_OC4_SetConfig+0x84>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a15      	ldr	r2, [pc, #84]	; (8004dd4 <TIM_OC4_SetConfig+0xc4>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d007      	beq.n	8004d94 <TIM_OC4_SetConfig+0x84>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a14      	ldr	r2, [pc, #80]	; (8004dd8 <TIM_OC4_SetConfig+0xc8>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d003      	beq.n	8004d94 <TIM_OC4_SetConfig+0x84>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a13      	ldr	r2, [pc, #76]	; (8004ddc <TIM_OC4_SetConfig+0xcc>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d109      	bne.n	8004da8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	019b      	lsls	r3, r3, #6
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	621a      	str	r2, [r3, #32]
}
 8004dc2:	bf00      	nop
 8004dc4:	371c      	adds	r7, #28
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bc80      	pop	{r7}
 8004dca:	4770      	bx	lr
 8004dcc:	40012c00 	.word	0x40012c00
 8004dd0:	40013400 	.word	0x40013400
 8004dd4:	40014000 	.word	0x40014000
 8004dd8:	40014400 	.word	0x40014400
 8004ddc:	40014800 	.word	0x40014800

08004de0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b087      	sub	sp, #28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	041b      	lsls	r3, r3, #16
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a17      	ldr	r2, [pc, #92]	; (8004e94 <TIM_OC5_SetConfig+0xb4>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d00f      	beq.n	8004e5a <TIM_OC5_SetConfig+0x7a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a16      	ldr	r2, [pc, #88]	; (8004e98 <TIM_OC5_SetConfig+0xb8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d00b      	beq.n	8004e5a <TIM_OC5_SetConfig+0x7a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a15      	ldr	r2, [pc, #84]	; (8004e9c <TIM_OC5_SetConfig+0xbc>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d007      	beq.n	8004e5a <TIM_OC5_SetConfig+0x7a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a14      	ldr	r2, [pc, #80]	; (8004ea0 <TIM_OC5_SetConfig+0xc0>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d003      	beq.n	8004e5a <TIM_OC5_SetConfig+0x7a>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a13      	ldr	r2, [pc, #76]	; (8004ea4 <TIM_OC5_SetConfig+0xc4>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d109      	bne.n	8004e6e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	021b      	lsls	r3, r3, #8
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	621a      	str	r2, [r3, #32]
}
 8004e88:	bf00      	nop
 8004e8a:	371c      	adds	r7, #28
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bc80      	pop	{r7}
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	40012c00 	.word	0x40012c00
 8004e98:	40013400 	.word	0x40013400
 8004e9c:	40014000 	.word	0x40014000
 8004ea0:	40014400 	.word	0x40014400
 8004ea4:	40014800 	.word	0x40014800

08004ea8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	021b      	lsls	r3, r3, #8
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004eee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	051b      	lsls	r3, r3, #20
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a17      	ldr	r2, [pc, #92]	; (8004f5c <TIM_OC6_SetConfig+0xb4>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d00f      	beq.n	8004f24 <TIM_OC6_SetConfig+0x7c>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a16      	ldr	r2, [pc, #88]	; (8004f60 <TIM_OC6_SetConfig+0xb8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d00b      	beq.n	8004f24 <TIM_OC6_SetConfig+0x7c>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a15      	ldr	r2, [pc, #84]	; (8004f64 <TIM_OC6_SetConfig+0xbc>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d007      	beq.n	8004f24 <TIM_OC6_SetConfig+0x7c>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a14      	ldr	r2, [pc, #80]	; (8004f68 <TIM_OC6_SetConfig+0xc0>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d003      	beq.n	8004f24 <TIM_OC6_SetConfig+0x7c>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a13      	ldr	r2, [pc, #76]	; (8004f6c <TIM_OC6_SetConfig+0xc4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d109      	bne.n	8004f38 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	029b      	lsls	r3, r3, #10
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	621a      	str	r2, [r3, #32]
}
 8004f52:	bf00      	nop
 8004f54:	371c      	adds	r7, #28
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bc80      	pop	{r7}
 8004f5a:	4770      	bx	lr
 8004f5c:	40012c00 	.word	0x40012c00
 8004f60:	40013400 	.word	0x40013400
 8004f64:	40014000 	.word	0x40014000
 8004f68:	40014400 	.word	0x40014400
 8004f6c:	40014800 	.word	0x40014800

08004f70 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f88:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f9a:	f023 0307 	bic.w	r3, r3, #7
 8004f9e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2b30      	cmp	r3, #48	; 0x30
 8004fb8:	d05c      	beq.n	8005074 <TIM_SlaveTimer_SetConfig+0x104>
 8004fba:	2b30      	cmp	r3, #48	; 0x30
 8004fbc:	d806      	bhi.n	8004fcc <TIM_SlaveTimer_SetConfig+0x5c>
 8004fbe:	2b10      	cmp	r3, #16
 8004fc0:	d058      	beq.n	8005074 <TIM_SlaveTimer_SetConfig+0x104>
 8004fc2:	2b20      	cmp	r3, #32
 8004fc4:	d056      	beq.n	8005074 <TIM_SlaveTimer_SetConfig+0x104>
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d054      	beq.n	8005074 <TIM_SlaveTimer_SetConfig+0x104>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8004fca:	e054      	b.n	8005076 <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8004fcc:	2b50      	cmp	r3, #80	; 0x50
 8004fce:	d03d      	beq.n	800504c <TIM_SlaveTimer_SetConfig+0xdc>
 8004fd0:	2b50      	cmp	r3, #80	; 0x50
 8004fd2:	d802      	bhi.n	8004fda <TIM_SlaveTimer_SetConfig+0x6a>
 8004fd4:	2b40      	cmp	r3, #64	; 0x40
 8004fd6:	d010      	beq.n	8004ffa <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 8004fd8:	e04d      	b.n	8005076 <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8004fda:	2b60      	cmp	r3, #96	; 0x60
 8004fdc:	d040      	beq.n	8005060 <TIM_SlaveTimer_SetConfig+0xf0>
 8004fde:	2b70      	cmp	r3, #112	; 0x70
 8004fe0:	d000      	beq.n	8004fe4 <TIM_SlaveTimer_SetConfig+0x74>
      break;
 8004fe2:	e048      	b.n	8005076 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6818      	ldr	r0, [r3, #0]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	68d9      	ldr	r1, [r3, #12]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	f000 f9da 	bl	80053ac <TIM_ETR_SetConfig>
      break;
 8004ff8:	e03d      	b.n	8005076 <TIM_SlaveTimer_SetConfig+0x106>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b05      	cmp	r3, #5
 8005000:	d101      	bne.n	8005006 <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e038      	b.n	8005078 <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	6812      	ldr	r2, [r2, #0]
 8005016:	6a12      	ldr	r2, [r2, #32]
 8005018:	f022 0201 	bic.w	r2, r2, #1
 800501c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800502c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	011b      	lsls	r3, r3, #4
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	4313      	orrs	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	621a      	str	r2, [r3, #32]
      break;
 800504a:	e014      	b.n	8005076 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6818      	ldr	r0, [r3, #0]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	6899      	ldr	r1, [r3, #8]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	461a      	mov	r2, r3
 800505a:	f000 f87d 	bl	8005158 <TIM_TI1_ConfigInputStage>
      break;
 800505e:	e00a      	b.n	8005076 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6818      	ldr	r0, [r3, #0]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	6899      	ldr	r1, [r3, #8]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	461a      	mov	r2, r3
 800506e:	f000 f8dd 	bl	800522c <TIM_TI2_ConfigInputStage>
      break;
 8005072:	e000      	b.n	8005076 <TIM_SlaveTimer_SetConfig+0x106>
      break;
 8005074:	bf00      	nop
  }
  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3718      	adds	r7, #24
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
 800508c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	f023 0201 	bic.w	r2, r3, #1
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	4a25      	ldr	r2, [pc, #148]	; (8005140 <TIM_TI1_SetConfig+0xc0>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d017      	beq.n	80050de <TIM_TI1_SetConfig+0x5e>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b4:	d013      	beq.n	80050de <TIM_TI1_SetConfig+0x5e>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	4a22      	ldr	r2, [pc, #136]	; (8005144 <TIM_TI1_SetConfig+0xc4>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d00f      	beq.n	80050de <TIM_TI1_SetConfig+0x5e>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	4a21      	ldr	r2, [pc, #132]	; (8005148 <TIM_TI1_SetConfig+0xc8>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d00b      	beq.n	80050de <TIM_TI1_SetConfig+0x5e>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	4a20      	ldr	r2, [pc, #128]	; (800514c <TIM_TI1_SetConfig+0xcc>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d007      	beq.n	80050de <TIM_TI1_SetConfig+0x5e>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4a1f      	ldr	r2, [pc, #124]	; (8005150 <TIM_TI1_SetConfig+0xd0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d003      	beq.n	80050de <TIM_TI1_SetConfig+0x5e>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	4a1e      	ldr	r2, [pc, #120]	; (8005154 <TIM_TI1_SetConfig+0xd4>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d101      	bne.n	80050e2 <TIM_TI1_SetConfig+0x62>
 80050de:	2301      	movs	r3, #1
 80050e0:	e000      	b.n	80050e4 <TIM_TI1_SetConfig+0x64>
 80050e2:	2300      	movs	r3, #0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d008      	beq.n	80050fa <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f023 0303 	bic.w	r3, r3, #3
 80050ee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	617b      	str	r3, [r7, #20]
 80050f8:	e003      	b.n	8005102 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f043 0301 	orr.w	r3, r3, #1
 8005100:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005108:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	011b      	lsls	r3, r3, #4
 800510e:	b2db      	uxtb	r3, r3
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	4313      	orrs	r3, r2
 8005114:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f023 030a 	bic.w	r3, r3, #10
 800511c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	f003 030a 	and.w	r3, r3, #10
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	4313      	orrs	r3, r2
 8005128:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	621a      	str	r2, [r3, #32]
}
 8005136:	bf00      	nop
 8005138:	371c      	adds	r7, #28
 800513a:	46bd      	mov	sp, r7
 800513c:	bc80      	pop	{r7}
 800513e:	4770      	bx	lr
 8005140:	40012c00 	.word	0x40012c00
 8005144:	40000400 	.word	0x40000400
 8005148:	40000800 	.word	0x40000800
 800514c:	40000c00 	.word	0x40000c00
 8005150:	40013400 	.word	0x40013400
 8005154:	40014000 	.word	0x40014000

08005158 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	f023 0201 	bic.w	r2, r3, #1
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005182:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	4313      	orrs	r3, r2
 800518c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f023 030a 	bic.w	r3, r3, #10
 8005194:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	4313      	orrs	r3, r2
 800519c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	621a      	str	r2, [r3, #32]
}
 80051aa:	bf00      	nop
 80051ac:	371c      	adds	r7, #28
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bc80      	pop	{r7}
 80051b2:	4770      	bx	lr

080051b4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
 80051c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	f023 0210 	bic.w	r2, r3, #16
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	021b      	lsls	r3, r3, #8
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	031b      	lsls	r3, r3, #12
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005206:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	011b      	lsls	r3, r3, #4
 800520c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	4313      	orrs	r3, r2
 8005214:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	621a      	str	r2, [r3, #32]
}
 8005222:	bf00      	nop
 8005224:	371c      	adds	r7, #28
 8005226:	46bd      	mov	sp, r7
 8005228:	bc80      	pop	{r7}
 800522a:	4770      	bx	lr

0800522c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800522c:	b480      	push	{r7}
 800522e:	b087      	sub	sp, #28
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	f023 0210 	bic.w	r2, r3, #16
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005256:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	031b      	lsls	r3, r3, #12
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	4313      	orrs	r3, r2
 8005260:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005268:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	011b      	lsls	r3, r3, #4
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	4313      	orrs	r3, r2
 8005272:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	621a      	str	r2, [r3, #32]
}
 8005280:	bf00      	nop
 8005282:	371c      	adds	r7, #28
 8005284:	46bd      	mov	sp, r7
 8005286:	bc80      	pop	{r7}
 8005288:	4770      	bx	lr

0800528a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800528a:	b480      	push	{r7}
 800528c:	b087      	sub	sp, #28
 800528e:	af00      	add	r7, sp, #0
 8005290:	60f8      	str	r0, [r7, #12]
 8005292:	60b9      	str	r1, [r7, #8]
 8005294:	607a      	str	r2, [r7, #4]
 8005296:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6a1b      	ldr	r3, [r3, #32]
 800529c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	69db      	ldr	r3, [r3, #28]
 80052a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f023 0303 	bic.w	r3, r3, #3
 80052b6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4313      	orrs	r3, r2
 80052be:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	011b      	lsls	r3, r3, #4
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80052da:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	021b      	lsls	r3, r3, #8
 80052e0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	621a      	str	r2, [r3, #32]
}
 80052f6:	bf00      	nop
 80052f8:	371c      	adds	r7, #28
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bc80      	pop	{r7}
 80052fe:	4770      	bx	lr

08005300 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
 800530c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6a1b      	ldr	r3, [r3, #32]
 8005324:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800532c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	021b      	lsls	r3, r3, #8
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	4313      	orrs	r3, r2
 8005336:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800533e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	031b      	lsls	r3, r3, #12
 8005344:	b29b      	uxth	r3, r3
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	4313      	orrs	r3, r2
 800534a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005352:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	031b      	lsls	r3, r3, #12
 8005358:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	4313      	orrs	r3, r2
 8005360:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	621a      	str	r2, [r3, #32]
}
 800536e:	bf00      	nop
 8005370:	371c      	adds	r7, #28
 8005372:	46bd      	mov	sp, r7
 8005374:	bc80      	pop	{r7}
 8005376:	4770      	bx	lr

08005378 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	4313      	orrs	r3, r2
 8005396:	f043 0307 	orr.w	r3, r3, #7
 800539a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	609a      	str	r2, [r3, #8]
}
 80053a2:	bf00      	nop
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bc80      	pop	{r7}
 80053aa:	4770      	bx	lr

080053ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b087      	sub	sp, #28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	021a      	lsls	r2, r3, #8
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	431a      	orrs	r2, r3
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	609a      	str	r2, [r3, #8]
}
 80053e0:	bf00      	nop
 80053e2:	371c      	adds	r7, #28
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bc80      	pop	{r7}
 80053e8:	4770      	bx	lr

080053ea <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b087      	sub	sp, #28
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	60f8      	str	r0, [r7, #12]
 80053f2:	60b9      	str	r1, [r7, #8]
 80053f4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	f003 031f 	and.w	r3, r3, #31
 80053fc:	2201      	movs	r2, #1
 80053fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005402:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a1a      	ldr	r2, [r3, #32]
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	43db      	mvns	r3, r3
 800540c:	401a      	ands	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6a1a      	ldr	r2, [r3, #32]
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	f003 031f 	and.w	r3, r3, #31
 800541c:	6879      	ldr	r1, [r7, #4]
 800541e:	fa01 f303 	lsl.w	r3, r1, r3
 8005422:	431a      	orrs	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	621a      	str	r2, [r3, #32]
}
 8005428:	bf00      	nop
 800542a:	371c      	adds	r7, #28
 800542c:	46bd      	mov	sp, r7
 800542e:	bc80      	pop	{r7}
 8005430:	4770      	bx	lr
	...

08005434 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005444:	2b01      	cmp	r3, #1
 8005446:	d101      	bne.n	800544c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005448:	2302      	movs	r3, #2
 800544a:	e068      	b.n	800551e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a2d      	ldr	r2, [pc, #180]	; (8005528 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d004      	beq.n	8005480 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a2c      	ldr	r2, [pc, #176]	; (800552c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d108      	bne.n	8005492 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005486:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	4313      	orrs	r3, r2
 8005490:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005498:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a1d      	ldr	r2, [pc, #116]	; (8005528 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d01d      	beq.n	80054f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054be:	d018      	beq.n	80054f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a1a      	ldr	r2, [pc, #104]	; (8005530 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d013      	beq.n	80054f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a19      	ldr	r2, [pc, #100]	; (8005534 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d00e      	beq.n	80054f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a17      	ldr	r2, [pc, #92]	; (8005538 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d009      	beq.n	80054f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a12      	ldr	r2, [pc, #72]	; (800552c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d004      	beq.n	80054f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a13      	ldr	r2, [pc, #76]	; (800553c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d10c      	bne.n	800550c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	4313      	orrs	r3, r2
 8005502:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	bc80      	pop	{r7}
 8005526:	4770      	bx	lr
 8005528:	40012c00 	.word	0x40012c00
 800552c:	40013400 	.word	0x40013400
 8005530:	40000400 	.word	0x40000400
 8005534:	40000800 	.word	0x40000800
 8005538:	40000c00 	.word	0x40000c00
 800553c:	40014000 	.word	0x40014000

08005540 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	bc80      	pop	{r7}
 8005550:	4770      	bx	lr

08005552 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005552:	b480      	push	{r7}
 8005554:	b083      	sub	sp, #12
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800555a:	bf00      	nop
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	bc80      	pop	{r7}
 8005562:	4770      	bx	lr

08005564 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	bc80      	pop	{r7}
 8005574:	4770      	bx	lr

08005576 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b082      	sub	sp, #8
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e040      	b.n	800560a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800558c:	2b00      	cmp	r3, #0
 800558e:	d106      	bne.n	800559e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f003 fe17 	bl	80091cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2224      	movs	r2, #36	; 0x24
 80055a2:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	6812      	ldr	r2, [r2, #0]
 80055ac:	6812      	ldr	r2, [r2, #0]
 80055ae:	f022 0201 	bic.w	r2, r2, #1
 80055b2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 fd97 	bl	80060e8 <UART_SetConfig>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d101      	bne.n	80055c4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e022      	b.n	800560a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d002      	beq.n	80055d2 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f001 f8ef 	bl	80067b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	6812      	ldr	r2, [r2, #0]
 80055da:	6852      	ldr	r2, [r2, #4]
 80055dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	6812      	ldr	r2, [r2, #0]
 80055ea:	6892      	ldr	r2, [r2, #8]
 80055ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055f0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	6812      	ldr	r2, [r2, #0]
 80055fa:	6812      	ldr	r2, [r2, #0]
 80055fc:	f042 0201 	orr.w	r2, r2, #1
 8005600:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f001 f975 	bl	80068f2 <UART_CheckIdleState>
 8005608:	4603      	mov	r3, r0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b082      	sub	sp, #8
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e027      	b.n	8005674 <HAL_UART_DeInit+0x62>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2224      	movs	r2, #36	; 0x24
 8005628:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	6812      	ldr	r2, [r2, #0]
 8005632:	6812      	ldr	r2, [r2, #0]
 8005634:	f022 0201 	bic.w	r2, r2, #1
 8005638:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2200      	movs	r2, #0
 8005640:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2200      	movs	r2, #0
 8005648:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2200      	movs	r2, #0
 8005650:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f003 fea4 	bl	80093a0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3708      	adds	r7, #8
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b08a      	sub	sp, #40	; 0x28
 8005680:	af02      	add	r7, sp, #8
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	603b      	str	r3, [r7, #0]
 8005688:	4613      	mov	r3, r2
 800568a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005690:	2b20      	cmp	r3, #32
 8005692:	f040 8081 	bne.w	8005798 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d002      	beq.n	80056a2 <HAL_UART_Transmit+0x26>
 800569c:	88fb      	ldrh	r3, [r7, #6]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e079      	b.n	800579a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d101      	bne.n	80056b4 <HAL_UART_Transmit+0x38>
 80056b0:	2302      	movs	r3, #2
 80056b2:	e072      	b.n	800579a <HAL_UART_Transmit+0x11e>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2221      	movs	r2, #33	; 0x21
 80056c6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80056c8:	f7fb fcde 	bl	8001088 <HAL_GetTick>
 80056cc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	88fa      	ldrh	r2, [r7, #6]
 80056d2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	88fa      	ldrh	r2, [r7, #6]
 80056da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e6:	d108      	bne.n	80056fa <HAL_UART_Transmit+0x7e>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d104      	bne.n	80056fa <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80056f0:	2300      	movs	r3, #0
 80056f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	61bb      	str	r3, [r7, #24]
 80056f8:	e003      	b.n	8005702 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056fe:	2300      	movs	r3, #0
 8005700:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800570a:	e02d      	b.n	8005768 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	9300      	str	r3, [sp, #0]
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	2200      	movs	r2, #0
 8005714:	2180      	movs	r1, #128	; 0x80
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f001 f930 	bl	800697c <UART_WaitOnFlagUntilTimeout>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e039      	b.n	800579a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d10b      	bne.n	8005744 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	8812      	ldrh	r2, [r2, #0]
 8005734:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005738:	b292      	uxth	r2, r2
 800573a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	3302      	adds	r3, #2
 8005740:	61bb      	str	r3, [r7, #24]
 8005742:	e008      	b.n	8005756 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	69fa      	ldr	r2, [r7, #28]
 800574a:	7812      	ldrb	r2, [r2, #0]
 800574c:	b292      	uxth	r2, r2
 800574e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	3301      	adds	r3, #1
 8005754:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800575c:	b29b      	uxth	r3, r3
 800575e:	3b01      	subs	r3, #1
 8005760:	b29a      	uxth	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800576e:	b29b      	uxth	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1cb      	bne.n	800570c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	9300      	str	r3, [sp, #0]
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	2200      	movs	r2, #0
 800577c:	2140      	movs	r1, #64	; 0x40
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f001 f8fc 	bl	800697c <UART_WaitOnFlagUntilTimeout>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e005      	b.n	800579a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2220      	movs	r2, #32
 8005792:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005794:	2300      	movs	r3, #0
 8005796:	e000      	b.n	800579a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005798:	2302      	movs	r3, #2
  }
}
 800579a:	4618      	mov	r0, r3
 800579c:	3720      	adds	r7, #32
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b08a      	sub	sp, #40	; 0x28
 80057a6:	af02      	add	r7, sp, #8
 80057a8:	60f8      	str	r0, [r7, #12]
 80057aa:	60b9      	str	r1, [r7, #8]
 80057ac:	603b      	str	r3, [r7, #0]
 80057ae:	4613      	mov	r3, r2
 80057b0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057b6:	2b20      	cmp	r3, #32
 80057b8:	f040 80bb 	bne.w	8005932 <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d002      	beq.n	80057c8 <HAL_UART_Receive+0x26>
 80057c2:	88fb      	ldrh	r3, [r7, #6]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e0b3      	b.n	8005934 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d101      	bne.n	80057da <HAL_UART_Receive+0x38>
 80057d6:	2302      	movs	r3, #2
 80057d8:	e0ac      	b.n	8005934 <HAL_UART_Receive+0x192>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2222      	movs	r2, #34	; 0x22
 80057ec:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80057ee:	f7fb fc4b 	bl	8001088 <HAL_GetTick>
 80057f2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	88fa      	ldrh	r2, [r7, #6]
 80057f8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	88fa      	ldrh	r2, [r7, #6]
 8005800:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800580c:	d10e      	bne.n	800582c <HAL_UART_Receive+0x8a>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d105      	bne.n	8005822 <HAL_UART_Receive+0x80>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f240 12ff 	movw	r2, #511	; 0x1ff
 800581c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005820:	e02d      	b.n	800587e <HAL_UART_Receive+0xdc>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	22ff      	movs	r2, #255	; 0xff
 8005826:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800582a:	e028      	b.n	800587e <HAL_UART_Receive+0xdc>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10d      	bne.n	8005850 <HAL_UART_Receive+0xae>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d104      	bne.n	8005846 <HAL_UART_Receive+0xa4>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	22ff      	movs	r2, #255	; 0xff
 8005840:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005844:	e01b      	b.n	800587e <HAL_UART_Receive+0xdc>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	227f      	movs	r2, #127	; 0x7f
 800584a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800584e:	e016      	b.n	800587e <HAL_UART_Receive+0xdc>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005858:	d10d      	bne.n	8005876 <HAL_UART_Receive+0xd4>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d104      	bne.n	800586c <HAL_UART_Receive+0xca>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	227f      	movs	r2, #127	; 0x7f
 8005866:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800586a:	e008      	b.n	800587e <HAL_UART_Receive+0xdc>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	223f      	movs	r2, #63	; 0x3f
 8005870:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005874:	e003      	b.n	800587e <HAL_UART_Receive+0xdc>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005884:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800588e:	d108      	bne.n	80058a2 <HAL_UART_Receive+0x100>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d104      	bne.n	80058a2 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8005898:	2300      	movs	r3, #0
 800589a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	61bb      	str	r3, [r7, #24]
 80058a0:	e003      	b.n	80058aa <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058a6:	2300      	movs	r3, #0
 80058a8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80058b2:	e033      	b.n	800591c <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	2200      	movs	r2, #0
 80058bc:	2120      	movs	r1, #32
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f001 f85c 	bl	800697c <UART_WaitOnFlagUntilTimeout>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d001      	beq.n	80058ce <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e032      	b.n	8005934 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d10c      	bne.n	80058ee <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80058da:	b29a      	uxth	r2, r3
 80058dc:	8a7b      	ldrh	r3, [r7, #18]
 80058de:	4013      	ands	r3, r2
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	3302      	adds	r3, #2
 80058ea:	61bb      	str	r3, [r7, #24]
 80058ec:	e00d      	b.n	800590a <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	b2da      	uxtb	r2, r3
 80058f8:	8a7b      	ldrh	r3, [r7, #18]
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	4013      	ands	r3, r2
 80058fe:	b2da      	uxtb	r2, r3
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	3301      	adds	r3, #1
 8005908:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005910:	b29b      	uxth	r3, r3
 8005912:	3b01      	subs	r3, #1
 8005914:	b29a      	uxth	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005922:	b29b      	uxth	r3, r3
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1c5      	bne.n	80058b4 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2220      	movs	r2, #32
 800592c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800592e:	2300      	movs	r3, #0
 8005930:	e000      	b.n	8005934 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8005932:	2302      	movs	r3, #2
  }
}
 8005934:	4618      	mov	r0, r3
 8005936:	3720      	adds	r7, #32
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	4613      	mov	r3, r2
 8005948:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800594e:	2b20      	cmp	r3, #32
 8005950:	d164      	bne.n	8005a1c <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d002      	beq.n	800595e <HAL_UART_Transmit_DMA+0x22>
 8005958:	88fb      	ldrh	r3, [r7, #6]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e05d      	b.n	8005a1e <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005968:	2b01      	cmp	r3, #1
 800596a:	d101      	bne.n	8005970 <HAL_UART_Transmit_DMA+0x34>
 800596c:	2302      	movs	r3, #2
 800596e:	e056      	b.n	8005a1e <HAL_UART_Transmit_DMA+0xe2>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	88fa      	ldrh	r2, [r7, #6]
 8005982:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	88fa      	ldrh	r2, [r7, #6]
 800598a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2221      	movs	r2, #33	; 0x21
 8005998:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d02a      	beq.n	80059f8 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059a6:	4a20      	ldr	r2, [pc, #128]	; (8005a28 <HAL_UART_Transmit_DMA+0xec>)
 80059a8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059ae:	4a1f      	ldr	r2, [pc, #124]	; (8005a2c <HAL_UART_Transmit_DMA+0xf0>)
 80059b0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059b6:	4a1e      	ldr	r2, [pc, #120]	; (8005a30 <HAL_UART_Transmit_DMA+0xf4>)
 80059b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059be:	2200      	movs	r2, #0
 80059c0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ca:	4619      	mov	r1, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	3328      	adds	r3, #40	; 0x28
 80059d2:	461a      	mov	r2, r3
 80059d4:	88fb      	ldrh	r3, [r7, #6]
 80059d6:	f7fb fe9e 	bl	8001716 <HAL_DMA_Start_IT>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00b      	beq.n	80059f8 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2210      	movs	r2, #16
 80059e4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2220      	movs	r2, #32
 80059f2:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e012      	b.n	8005a1e <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2240      	movs	r2, #64	; 0x40
 80059fe:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	6812      	ldr	r2, [r2, #0]
 8005a10:	6892      	ldr	r2, [r2, #8]
 8005a12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a16:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	e000      	b.n	8005a1e <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8005a1c:	2302      	movs	r3, #2
  }
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	08006ad9 	.word	0x08006ad9
 8005a2c:	08006b2d 	.word	0x08006b2d
 8005a30:	08006bcd 	.word	0x08006bcd

08005a34 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a46:	2b20      	cmp	r3, #32
 8005a48:	d16c      	bne.n	8005b24 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d002      	beq.n	8005a56 <HAL_UART_Receive_DMA+0x22>
 8005a50:	88fb      	ldrh	r3, [r7, #6]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e065      	b.n	8005b26 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d101      	bne.n	8005a68 <HAL_UART_Receive_DMA+0x34>
 8005a64:	2302      	movs	r3, #2
 8005a66:	e05e      	b.n	8005b26 <HAL_UART_Receive_DMA+0xf2>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	88fa      	ldrh	r2, [r7, #6]
 8005a7a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2222      	movs	r2, #34	; 0x22
 8005a88:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d02a      	beq.n	8005ae8 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a96:	4a26      	ldr	r2, [pc, #152]	; (8005b30 <HAL_UART_Receive_DMA+0xfc>)
 8005a98:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a9e:	4a25      	ldr	r2, [pc, #148]	; (8005b34 <HAL_UART_Receive_DMA+0x100>)
 8005aa0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005aa6:	4a24      	ldr	r2, [pc, #144]	; (8005b38 <HAL_UART_Receive_DMA+0x104>)
 8005aa8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005aae:	2200      	movs	r2, #0
 8005ab0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	3324      	adds	r3, #36	; 0x24
 8005abc:	4619      	mov	r1, r3
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	88fb      	ldrh	r3, [r7, #6]
 8005ac6:	f7fb fe26 	bl	8001716 <HAL_DMA_Start_IT>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00b      	beq.n	8005ae8 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2210      	movs	r2, #16
 8005ad4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2220      	movs	r2, #32
 8005ae2:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e01e      	b.n	8005b26 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	6812      	ldr	r2, [r2, #0]
 8005af8:	6812      	ldr	r2, [r2, #0]
 8005afa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005afe:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	6812      	ldr	r2, [r2, #0]
 8005b08:	6892      	ldr	r2, [r2, #8]
 8005b0a:	f042 0201 	orr.w	r2, r2, #1
 8005b0e:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	6812      	ldr	r2, [r2, #0]
 8005b18:	6892      	ldr	r2, [r2, #8]
 8005b1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b1e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005b20:	2300      	movs	r3, #0
 8005b22:	e000      	b.n	8005b26 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8005b24:	2302      	movs	r3, #2
  }
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	08006b49 	.word	0x08006b49
 8005b34:	08006bb1 	.word	0x08006bb1
 8005b38:	08006bcd 	.word	0x08006bcd

08005b3c <HAL_UART_DMAPause>:
  * @brief Pause the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b48:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b4e:	60bb      	str	r3, [r7, #8]

  __HAL_LOCK(huart);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d101      	bne.n	8005b5e <HAL_UART_DMAPause+0x22>
 8005b5a:	2302      	movs	r3, #2
 8005b5c:	e03c      	b.n	8005bd8 <HAL_UART_DMAPause+0x9c>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b70:	2b80      	cmp	r3, #128	; 0x80
 8005b72:	d10a      	bne.n	8005b8a <HAL_UART_DMAPause+0x4e>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2b21      	cmp	r3, #33	; 0x21
 8005b78:	d107      	bne.n	8005b8a <HAL_UART_DMAPause+0x4e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    /* Disable the UART DMA Tx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	6812      	ldr	r2, [r2, #0]
 8005b82:	6892      	ldr	r2, [r2, #8]
 8005b84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b88:	609a      	str	r2, [r3, #8]
  }
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b94:	2b40      	cmp	r3, #64	; 0x40
 8005b96:	d11a      	bne.n	8005bce <HAL_UART_DMAPause+0x92>
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	2b22      	cmp	r3, #34	; 0x22
 8005b9c:	d117      	bne.n	8005bce <HAL_UART_DMAPause+0x92>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	6812      	ldr	r2, [r2, #0]
 8005ba6:	6812      	ldr	r2, [r2, #0]
 8005ba8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bac:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	6812      	ldr	r2, [r2, #0]
 8005bb6:	6892      	ldr	r2, [r2, #8]
 8005bb8:	f022 0201 	bic.w	r2, r2, #1
 8005bbc:	609a      	str	r2, [r3, #8]

    /* Disable the UART DMA Rx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	6812      	ldr	r2, [r2, #0]
 8005bc6:	6892      	ldr	r2, [r2, #8]
 8005bc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bcc:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3714      	adds	r7, #20
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bc80      	pop	{r7}
 8005be0:	4770      	bx	lr

08005be2 <HAL_UART_DMAResume>:
  * @brief Resume the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b083      	sub	sp, #12
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d101      	bne.n	8005bf8 <HAL_UART_DMAResume+0x16>
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e034      	b.n	8005c62 <HAL_UART_DMAResume+0x80>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c04:	2b21      	cmp	r3, #33	; 0x21
 8005c06:	d107      	bne.n	8005c18 <HAL_UART_DMAResume+0x36>
  {
    /* Enable the UART DMA Tx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	6812      	ldr	r2, [r2, #0]
 8005c10:	6892      	ldr	r2, [r2, #8]
 8005c12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c16:	609a      	str	r2, [r3, #8]
  }
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c1c:	2b22      	cmp	r3, #34	; 0x22
 8005c1e:	d11b      	bne.n	8005c58 <HAL_UART_DMAResume+0x76>
  {
    /* Clear the Overrun flag before resuming the Rx transfer */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2208      	movs	r2, #8
 8005c26:	621a      	str	r2, [r3, #32]

    /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	6812      	ldr	r2, [r2, #0]
 8005c30:	6812      	ldr	r2, [r2, #0]
 8005c32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c36:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	6812      	ldr	r2, [r2, #0]
 8005c40:	6892      	ldr	r2, [r2, #8]
 8005c42:	f042 0201 	orr.w	r2, r2, #1
 8005c46:	609a      	str	r2, [r3, #8]

    /* Enable the UART DMA Rx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	6812      	ldr	r2, [r2, #0]
 8005c50:	6892      	ldr	r2, [r2, #8]
 8005c52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c56:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	370c      	adds	r7, #12
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bc80      	pop	{r7}
 8005c6a:	4770      	bx	lr

08005c6c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c78:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c7e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c8a:	2b80      	cmp	r3, #128	; 0x80
 8005c8c:	d126      	bne.n	8005cdc <HAL_UART_DMAStop+0x70>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2b21      	cmp	r3, #33	; 0x21
 8005c92:	d123      	bne.n	8005cdc <HAL_UART_DMAStop+0x70>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	6812      	ldr	r2, [r2, #0]
 8005c9c:	6892      	ldr	r2, [r2, #8]
 8005c9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ca2:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d014      	beq.n	8005cd6 <HAL_UART_DMAStop+0x6a>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7fb fd90 	bl	80017d6 <HAL_DMA_Abort>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00c      	beq.n	8005cd6 <HAL_UART_DMAStop+0x6a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7fb feb5 	bl	8001a30 <HAL_DMA_GetError>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b20      	cmp	r3, #32
 8005cca:	d104      	bne.n	8005cd6 <HAL_UART_DMAStop+0x6a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2210      	movs	r2, #16
 8005cd0:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e031      	b.n	8005d3a <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 fecb 	bl	8006a72 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce6:	2b40      	cmp	r3, #64	; 0x40
 8005ce8:	d126      	bne.n	8005d38 <HAL_UART_DMAStop+0xcc>
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	2b22      	cmp	r3, #34	; 0x22
 8005cee:	d123      	bne.n	8005d38 <HAL_UART_DMAStop+0xcc>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	6812      	ldr	r2, [r2, #0]
 8005cf8:	6892      	ldr	r2, [r2, #8]
 8005cfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cfe:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d014      	beq.n	8005d32 <HAL_UART_DMAStop+0xc6>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7fb fd62 	bl	80017d6 <HAL_DMA_Abort>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00c      	beq.n	8005d32 <HAL_UART_DMAStop+0xc6>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7fb fe87 	bl	8001a30 <HAL_DMA_GetError>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b20      	cmp	r3, #32
 8005d26:	d104      	bne.n	8005d32 <HAL_UART_DMAStop+0xc6>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2210      	movs	r2, #16
 8005d2c:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e003      	b.n	8005d3a <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 feb1 	bl	8006a9a <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
	...

08005d44 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Disable interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	6812      	ldr	r2, [r2, #0]
 8005d54:	6812      	ldr	r2, [r2, #0]
 8005d56:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005d5a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d66:	2b80      	cmp	r3, #128	; 0x80
 8005d68:	d12d      	bne.n	8005dc6 <HAL_UART_AbortTransmit_IT+0x82>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	6812      	ldr	r2, [r2, #0]
 8005d72:	6892      	ldr	r2, [r2, #8]
 8005d74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d78:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d013      	beq.n	8005daa <HAL_UART_AbortTransmit_IT+0x66>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d86:	4a19      	ldr	r2, [pc, #100]	; (8005dec <HAL_UART_AbortTransmit_IT+0xa8>)
 8005d88:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7fb fd5e 	bl	8001850 <HAL_DMA_Abort_IT>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d022      	beq.n	8005de0 <HAL_UART_AbortTransmit_IT+0x9c>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005da4:	4610      	mov	r0, r2
 8005da6:	4798      	blx	r3
 8005da8:	e01a      	b.n	8005de0 <HAL_UART_AbortTransmit_IT+0x9c>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0U;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      /* Clear TxISR function pointers */
      huart->TxISR = NULL;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 f989 	bl	80060d6 <HAL_UART_AbortTransmitCpltCallback>
 8005dc4:	e00c      	b.n	8005de0 <HAL_UART_AbortTransmit_IT+0x9c>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0U;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Clear TxISR function pointers */
    huart->TxISR = NULL;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	665a      	str	r2, [r3, #100]	; 0x64
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2220      	movs	r2, #32
 8005dd8:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f97b 	bl	80060d6 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	08006c71 	.word	0x08006c71

08005df0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b088      	sub	sp, #32
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e10:	69fa      	ldr	r2, [r7, #28]
 8005e12:	f640 030f 	movw	r3, #2063	; 0x80f
 8005e16:	4013      	ands	r3, r2
 8005e18:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d113      	bne.n	8005e48 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	f003 0320 	and.w	r3, r3, #32
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00e      	beq.n	8005e48 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	f003 0320 	and.w	r3, r3, #32
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d009      	beq.n	8005e48 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 8114 	beq.w	8006066 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	4798      	blx	r3
      }
      return;
 8005e46:	e10e      	b.n	8006066 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f000 80d6 	beq.w	8005ffc <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d105      	bne.n	8005e66 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f000 80cb 	beq.w	8005ffc <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00e      	beq.n	8005e8e <HAL_UART_IRQHandler+0x9e>
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d009      	beq.n	8005e8e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e86:	f043 0201 	orr.w	r2, r3, #1
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00e      	beq.n	8005eb6 <HAL_UART_IRQHandler+0xc6>
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f003 0301 	and.w	r3, r3, #1
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d009      	beq.n	8005eb6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005eae:	f043 0204 	orr.w	r2, r3, #4
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	f003 0304 	and.w	r3, r3, #4
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00e      	beq.n	8005ede <HAL_UART_IRQHandler+0xee>
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d009      	beq.n	8005ede <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2204      	movs	r2, #4
 8005ed0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ed6:	f043 0202 	orr.w	r2, r3, #2
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	f003 0308 	and.w	r3, r3, #8
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d013      	beq.n	8005f10 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	f003 0320 	and.w	r3, r3, #32
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d104      	bne.n	8005efc <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d009      	beq.n	8005f10 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2208      	movs	r2, #8
 8005f02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f08:	f043 0208 	orr.w	r2, r3, #8
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00f      	beq.n	8005f3a <HAL_UART_IRQHandler+0x14a>
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00a      	beq.n	8005f3a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f32:	f043 0220 	orr.w	r2, r3, #32
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f000 8093 	beq.w	800606a <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	f003 0320 	and.w	r3, r3, #32
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00c      	beq.n	8005f68 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	f003 0320 	and.w	r3, r3, #32
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d007      	beq.n	8005f68 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d003      	beq.n	8005f68 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f6c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f78:	2b40      	cmp	r3, #64	; 0x40
 8005f7a:	d004      	beq.n	8005f86 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d031      	beq.n	8005fea <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 fd87 	bl	8006a9a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f96:	2b40      	cmp	r3, #64	; 0x40
 8005f98:	d123      	bne.n	8005fe2 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	6812      	ldr	r2, [r2, #0]
 8005fa2:	6892      	ldr	r2, [r2, #8]
 8005fa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fa8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d013      	beq.n	8005fda <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fb6:	4a30      	ldr	r2, [pc, #192]	; (8006078 <HAL_UART_IRQHandler+0x288>)
 8005fb8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7fb fc46 	bl	8001850 <HAL_DMA_Abort_IT>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d016      	beq.n	8005ff8 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005fd4:	4610      	mov	r0, r2
 8005fd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd8:	e00e      	b.n	8005ff8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f872 	bl	80060c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe0:	e00a      	b.n	8005ff8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f86e 	bl	80060c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe8:	e006      	b.n	8005ff8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f86a 	bl	80060c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8005ff6:	e038      	b.n	800606a <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff8:	bf00      	nop
    return;
 8005ffa:	e036      	b.n	800606a <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00d      	beq.n	8006022 <HAL_UART_IRQHandler+0x232>
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d008      	beq.n	8006022 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006018:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fe56 	bl	8006ccc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006020:	e026      	b.n	8006070 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00d      	beq.n	8006048 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006032:	2b00      	cmp	r3, #0
 8006034:	d008      	beq.n	8006048 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800603a:	2b00      	cmp	r3, #0
 800603c:	d017      	beq.n	800606e <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	4798      	blx	r3
    }
    return;
 8006046:	e012      	b.n	800606e <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00e      	beq.n	8006070 <HAL_UART_IRQHandler+0x280>
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006058:	2b00      	cmp	r3, #0
 800605a:	d009      	beq.n	8006070 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 fe1c 	bl	8006c9a <UART_EndTransmit_IT>
    return;
 8006062:	bf00      	nop
 8006064:	e004      	b.n	8006070 <HAL_UART_IRQHandler+0x280>
      return;
 8006066:	bf00      	nop
 8006068:	e002      	b.n	8006070 <HAL_UART_IRQHandler+0x280>
    return;
 800606a:	bf00      	nop
 800606c:	e000      	b.n	8006070 <HAL_UART_IRQHandler+0x280>
    return;
 800606e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006070:	3720      	adds	r7, #32
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	08006c45 	.word	0x08006c45

0800607c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	bc80      	pop	{r7}
 800608c:	4770      	bx	lr

0800608e <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800608e:	b480      	push	{r7}
 8006090:	b083      	sub	sp, #12
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006096:	bf00      	nop
 8006098:	370c      	adds	r7, #12
 800609a:	46bd      	mov	sp, r7
 800609c:	bc80      	pop	{r7}
 800609e:	4770      	bx	lr

080060a0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bc80      	pop	{r7}
 80060b0:	4770      	bx	lr

080060b2 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80060ba:	bf00      	nop
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	bc80      	pop	{r7}
 80060c2:	4770      	bx	lr

080060c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bc80      	pop	{r7}
 80060d4:	4770      	bx	lr

080060d6 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b083      	sub	sp, #12
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80060de:	bf00      	nop
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bc80      	pop	{r7}
 80060e6:	4770      	bx	lr

080060e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80060ec:	b08a      	sub	sp, #40	; 0x28
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80060f2:	2300      	movs	r3, #0
 80060f4:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80060f6:	2300      	movs	r3, #0
 80060f8:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80060fa:	2300      	movs	r3, #0
 80060fc:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	689a      	ldr	r2, [r3, #8]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	431a      	orrs	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	431a      	orrs	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	69db      	ldr	r3, [r3, #28]
 8006112:	4313      	orrs	r3, r2
 8006114:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6819      	ldr	r1, [r3, #0]
 8006120:	4bb7      	ldr	r3, [pc, #732]	; (8006400 <UART_SetConfig+0x318>)
 8006122:	400b      	ands	r3, r1
 8006124:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006126:	430b      	orrs	r3, r1
 8006128:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	6812      	ldr	r2, [r2, #0]
 8006132:	6852      	ldr	r2, [r2, #4]
 8006134:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	68d2      	ldr	r2, [r2, #12]
 800613c:	430a      	orrs	r2, r1
 800613e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4aae      	ldr	r2, [pc, #696]	; (8006404 <UART_SetConfig+0x31c>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d004      	beq.n	800615a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006156:	4313      	orrs	r3, r2
 8006158:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	6812      	ldr	r2, [r2, #0]
 8006162:	6892      	ldr	r2, [r2, #8]
 8006164:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8006168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800616a:	430a      	orrs	r2, r1
 800616c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4aa5      	ldr	r2, [pc, #660]	; (8006408 <UART_SetConfig+0x320>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d126      	bne.n	80061c6 <UART_SetConfig+0xde>
 8006178:	4ba4      	ldr	r3, [pc, #656]	; (800640c <UART_SetConfig+0x324>)
 800617a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800617e:	f003 0303 	and.w	r3, r3, #3
 8006182:	2b03      	cmp	r3, #3
 8006184:	d81a      	bhi.n	80061bc <UART_SetConfig+0xd4>
 8006186:	a201      	add	r2, pc, #4	; (adr r2, 800618c <UART_SetConfig+0xa4>)
 8006188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618c:	0800619d 	.word	0x0800619d
 8006190:	080061ad 	.word	0x080061ad
 8006194:	080061a5 	.word	0x080061a5
 8006198:	080061b5 	.word	0x080061b5
 800619c:	2301      	movs	r3, #1
 800619e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061a2:	e105      	b.n	80063b0 <UART_SetConfig+0x2c8>
 80061a4:	2302      	movs	r3, #2
 80061a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061aa:	e101      	b.n	80063b0 <UART_SetConfig+0x2c8>
 80061ac:	2304      	movs	r3, #4
 80061ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061b2:	e0fd      	b.n	80063b0 <UART_SetConfig+0x2c8>
 80061b4:	2308      	movs	r3, #8
 80061b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061ba:	e0f9      	b.n	80063b0 <UART_SetConfig+0x2c8>
 80061bc:	2310      	movs	r3, #16
 80061be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061c2:	bf00      	nop
 80061c4:	e0f4      	b.n	80063b0 <UART_SetConfig+0x2c8>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a91      	ldr	r2, [pc, #580]	; (8006410 <UART_SetConfig+0x328>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d138      	bne.n	8006242 <UART_SetConfig+0x15a>
 80061d0:	4b8e      	ldr	r3, [pc, #568]	; (800640c <UART_SetConfig+0x324>)
 80061d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d6:	f003 030c 	and.w	r3, r3, #12
 80061da:	2b0c      	cmp	r3, #12
 80061dc:	d82c      	bhi.n	8006238 <UART_SetConfig+0x150>
 80061de:	a201      	add	r2, pc, #4	; (adr r2, 80061e4 <UART_SetConfig+0xfc>)
 80061e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e4:	08006219 	.word	0x08006219
 80061e8:	08006239 	.word	0x08006239
 80061ec:	08006239 	.word	0x08006239
 80061f0:	08006239 	.word	0x08006239
 80061f4:	08006229 	.word	0x08006229
 80061f8:	08006239 	.word	0x08006239
 80061fc:	08006239 	.word	0x08006239
 8006200:	08006239 	.word	0x08006239
 8006204:	08006221 	.word	0x08006221
 8006208:	08006239 	.word	0x08006239
 800620c:	08006239 	.word	0x08006239
 8006210:	08006239 	.word	0x08006239
 8006214:	08006231 	.word	0x08006231
 8006218:	2300      	movs	r3, #0
 800621a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800621e:	e0c7      	b.n	80063b0 <UART_SetConfig+0x2c8>
 8006220:	2302      	movs	r3, #2
 8006222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006226:	e0c3      	b.n	80063b0 <UART_SetConfig+0x2c8>
 8006228:	2304      	movs	r3, #4
 800622a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800622e:	e0bf      	b.n	80063b0 <UART_SetConfig+0x2c8>
 8006230:	2308      	movs	r3, #8
 8006232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006236:	e0bb      	b.n	80063b0 <UART_SetConfig+0x2c8>
 8006238:	2310      	movs	r3, #16
 800623a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800623e:	bf00      	nop
 8006240:	e0b6      	b.n	80063b0 <UART_SetConfig+0x2c8>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a73      	ldr	r2, [pc, #460]	; (8006414 <UART_SetConfig+0x32c>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d125      	bne.n	8006298 <UART_SetConfig+0x1b0>
 800624c:	4b6f      	ldr	r3, [pc, #444]	; (800640c <UART_SetConfig+0x324>)
 800624e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006252:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006256:	2b10      	cmp	r3, #16
 8006258:	d011      	beq.n	800627e <UART_SetConfig+0x196>
 800625a:	2b10      	cmp	r3, #16
 800625c:	d802      	bhi.n	8006264 <UART_SetConfig+0x17c>
 800625e:	2b00      	cmp	r3, #0
 8006260:	d005      	beq.n	800626e <UART_SetConfig+0x186>
 8006262:	e014      	b.n	800628e <UART_SetConfig+0x1a6>
 8006264:	2b20      	cmp	r3, #32
 8006266:	d006      	beq.n	8006276 <UART_SetConfig+0x18e>
 8006268:	2b30      	cmp	r3, #48	; 0x30
 800626a:	d00c      	beq.n	8006286 <UART_SetConfig+0x19e>
 800626c:	e00f      	b.n	800628e <UART_SetConfig+0x1a6>
 800626e:	2300      	movs	r3, #0
 8006270:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006274:	e09c      	b.n	80063b0 <UART_SetConfig+0x2c8>
 8006276:	2302      	movs	r3, #2
 8006278:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800627c:	e098      	b.n	80063b0 <UART_SetConfig+0x2c8>
 800627e:	2304      	movs	r3, #4
 8006280:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006284:	e094      	b.n	80063b0 <UART_SetConfig+0x2c8>
 8006286:	2308      	movs	r3, #8
 8006288:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800628c:	e090      	b.n	80063b0 <UART_SetConfig+0x2c8>
 800628e:	2310      	movs	r3, #16
 8006290:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006294:	bf00      	nop
 8006296:	e08b      	b.n	80063b0 <UART_SetConfig+0x2c8>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a5e      	ldr	r2, [pc, #376]	; (8006418 <UART_SetConfig+0x330>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d125      	bne.n	80062ee <UART_SetConfig+0x206>
 80062a2:	4b5a      	ldr	r3, [pc, #360]	; (800640c <UART_SetConfig+0x324>)
 80062a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80062ac:	2b40      	cmp	r3, #64	; 0x40
 80062ae:	d011      	beq.n	80062d4 <UART_SetConfig+0x1ec>
 80062b0:	2b40      	cmp	r3, #64	; 0x40
 80062b2:	d802      	bhi.n	80062ba <UART_SetConfig+0x1d2>
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d005      	beq.n	80062c4 <UART_SetConfig+0x1dc>
 80062b8:	e014      	b.n	80062e4 <UART_SetConfig+0x1fc>
 80062ba:	2b80      	cmp	r3, #128	; 0x80
 80062bc:	d006      	beq.n	80062cc <UART_SetConfig+0x1e4>
 80062be:	2bc0      	cmp	r3, #192	; 0xc0
 80062c0:	d00c      	beq.n	80062dc <UART_SetConfig+0x1f4>
 80062c2:	e00f      	b.n	80062e4 <UART_SetConfig+0x1fc>
 80062c4:	2300      	movs	r3, #0
 80062c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ca:	e071      	b.n	80063b0 <UART_SetConfig+0x2c8>
 80062cc:	2302      	movs	r3, #2
 80062ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062d2:	e06d      	b.n	80063b0 <UART_SetConfig+0x2c8>
 80062d4:	2304      	movs	r3, #4
 80062d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062da:	e069      	b.n	80063b0 <UART_SetConfig+0x2c8>
 80062dc:	2308      	movs	r3, #8
 80062de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062e2:	e065      	b.n	80063b0 <UART_SetConfig+0x2c8>
 80062e4:	2310      	movs	r3, #16
 80062e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ea:	bf00      	nop
 80062ec:	e060      	b.n	80063b0 <UART_SetConfig+0x2c8>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a4a      	ldr	r2, [pc, #296]	; (800641c <UART_SetConfig+0x334>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d129      	bne.n	800634c <UART_SetConfig+0x264>
 80062f8:	4b44      	ldr	r3, [pc, #272]	; (800640c <UART_SetConfig+0x324>)
 80062fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006306:	d014      	beq.n	8006332 <UART_SetConfig+0x24a>
 8006308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800630c:	d802      	bhi.n	8006314 <UART_SetConfig+0x22c>
 800630e:	2b00      	cmp	r3, #0
 8006310:	d007      	beq.n	8006322 <UART_SetConfig+0x23a>
 8006312:	e016      	b.n	8006342 <UART_SetConfig+0x25a>
 8006314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006318:	d007      	beq.n	800632a <UART_SetConfig+0x242>
 800631a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800631e:	d00c      	beq.n	800633a <UART_SetConfig+0x252>
 8006320:	e00f      	b.n	8006342 <UART_SetConfig+0x25a>
 8006322:	2300      	movs	r3, #0
 8006324:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006328:	e042      	b.n	80063b0 <UART_SetConfig+0x2c8>
 800632a:	2302      	movs	r3, #2
 800632c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006330:	e03e      	b.n	80063b0 <UART_SetConfig+0x2c8>
 8006332:	2304      	movs	r3, #4
 8006334:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006338:	e03a      	b.n	80063b0 <UART_SetConfig+0x2c8>
 800633a:	2308      	movs	r3, #8
 800633c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006340:	e036      	b.n	80063b0 <UART_SetConfig+0x2c8>
 8006342:	2310      	movs	r3, #16
 8006344:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006348:	bf00      	nop
 800634a:	e031      	b.n	80063b0 <UART_SetConfig+0x2c8>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a2c      	ldr	r2, [pc, #176]	; (8006404 <UART_SetConfig+0x31c>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d129      	bne.n	80063aa <UART_SetConfig+0x2c2>
 8006356:	4b2d      	ldr	r3, [pc, #180]	; (800640c <UART_SetConfig+0x324>)
 8006358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800635c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006364:	d014      	beq.n	8006390 <UART_SetConfig+0x2a8>
 8006366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800636a:	d802      	bhi.n	8006372 <UART_SetConfig+0x28a>
 800636c:	2b00      	cmp	r3, #0
 800636e:	d007      	beq.n	8006380 <UART_SetConfig+0x298>
 8006370:	e016      	b.n	80063a0 <UART_SetConfig+0x2b8>
 8006372:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006376:	d007      	beq.n	8006388 <UART_SetConfig+0x2a0>
 8006378:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800637c:	d00c      	beq.n	8006398 <UART_SetConfig+0x2b0>
 800637e:	e00f      	b.n	80063a0 <UART_SetConfig+0x2b8>
 8006380:	2300      	movs	r3, #0
 8006382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006386:	e013      	b.n	80063b0 <UART_SetConfig+0x2c8>
 8006388:	2302      	movs	r3, #2
 800638a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800638e:	e00f      	b.n	80063b0 <UART_SetConfig+0x2c8>
 8006390:	2304      	movs	r3, #4
 8006392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006396:	e00b      	b.n	80063b0 <UART_SetConfig+0x2c8>
 8006398:	2308      	movs	r3, #8
 800639a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800639e:	e007      	b.n	80063b0 <UART_SetConfig+0x2c8>
 80063a0:	2310      	movs	r3, #16
 80063a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063a6:	bf00      	nop
 80063a8:	e002      	b.n	80063b0 <UART_SetConfig+0x2c8>
 80063aa:	2310      	movs	r3, #16
 80063ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a13      	ldr	r2, [pc, #76]	; (8006404 <UART_SetConfig+0x31c>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	f040 80f1 	bne.w	800659e <UART_SetConfig+0x4b6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80063bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063c0:	2b08      	cmp	r3, #8
 80063c2:	d837      	bhi.n	8006434 <UART_SetConfig+0x34c>
 80063c4:	a201      	add	r2, pc, #4	; (adr r2, 80063cc <UART_SetConfig+0x2e4>)
 80063c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ca:	bf00      	nop
 80063cc:	080063f1 	.word	0x080063f1
 80063d0:	08006435 	.word	0x08006435
 80063d4:	080063f9 	.word	0x080063f9
 80063d8:	08006435 	.word	0x08006435
 80063dc:	08006425 	.word	0x08006425
 80063e0:	08006435 	.word	0x08006435
 80063e4:	08006435 	.word	0x08006435
 80063e8:	08006435 	.word	0x08006435
 80063ec:	0800642d 	.word	0x0800642d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80063f0:	f7fc fcb2 	bl	8002d58 <HAL_RCC_GetPCLK1Freq>
 80063f4:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80063f6:	e020      	b.n	800643a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80063f8:	4b09      	ldr	r3, [pc, #36]	; (8006420 <UART_SetConfig+0x338>)
 80063fa:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80063fc:	e01d      	b.n	800643a <UART_SetConfig+0x352>
 80063fe:	bf00      	nop
 8006400:	efff69f3 	.word	0xefff69f3
 8006404:	40008000 	.word	0x40008000
 8006408:	40013800 	.word	0x40013800
 800640c:	40021000 	.word	0x40021000
 8006410:	40004400 	.word	0x40004400
 8006414:	40004800 	.word	0x40004800
 8006418:	40004c00 	.word	0x40004c00
 800641c:	40005000 	.word	0x40005000
 8006420:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8006424:	f7fc fc04 	bl	8002c30 <HAL_RCC_GetSysClockFreq>
 8006428:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800642a:	e006      	b.n	800643a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800642c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006430:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006432:	e002      	b.n	800643a <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	76fb      	strb	r3, [r7, #27]
        break;
 8006438:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 81ab 	beq.w	8006798 <UART_SetConfig+0x6b0>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	685a      	ldr	r2, [r3, #4]
 8006446:	4613      	mov	r3, r2
 8006448:	005b      	lsls	r3, r3, #1
 800644a:	441a      	add	r2, r3
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	429a      	cmp	r2, r3
 8006450:	d805      	bhi.n	800645e <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	429a      	cmp	r2, r3
 800645c:	d202      	bcs.n	8006464 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	76fb      	strb	r3, [r7, #27]
 8006462:	e199      	b.n	8006798 <UART_SetConfig+0x6b0>
      }
      else
      {
        switch (clocksource)
 8006464:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006468:	2b08      	cmp	r3, #8
 800646a:	f200 8085 	bhi.w	8006578 <UART_SetConfig+0x490>
 800646e:	a201      	add	r2, pc, #4	; (adr r2, 8006474 <UART_SetConfig+0x38c>)
 8006470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006474:	08006499 	.word	0x08006499
 8006478:	08006579 	.word	0x08006579
 800647c:	080064db 	.word	0x080064db
 8006480:	08006579 	.word	0x08006579
 8006484:	0800650f 	.word	0x0800650f
 8006488:	08006579 	.word	0x08006579
 800648c:	08006579 	.word	0x08006579
 8006490:	08006579 	.word	0x08006579
 8006494:	0800654f 	.word	0x0800654f
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8006498:	f7fc fc5e 	bl	8002d58 <HAL_RCC_GetPCLK1Freq>
 800649c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	f04f 0400 	mov.w	r4, #0
 80064a4:	ea4f 2904 	mov.w	r9, r4, lsl #8
 80064a8:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 80064ac:	ea4f 2803 	mov.w	r8, r3, lsl #8
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	085b      	lsrs	r3, r3, #1
 80064b6:	f04f 0400 	mov.w	r4, #0
 80064ba:	eb18 0003 	adds.w	r0, r8, r3
 80064be:	eb49 0104 	adc.w	r1, r9, r4
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f04f 0400 	mov.w	r4, #0
 80064ca:	461a      	mov	r2, r3
 80064cc:	4623      	mov	r3, r4
 80064ce:	f7fa fbe7 	bl	8000ca0 <__aeabi_uldivmod>
 80064d2:	4603      	mov	r3, r0
 80064d4:	460c      	mov	r4, r1
 80064d6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80064d8:	e051      	b.n	800657e <UART_SetConfig+0x496>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	085b      	lsrs	r3, r3, #1
 80064e0:	f04f 0400 	mov.w	r4, #0
 80064e4:	49aa      	ldr	r1, [pc, #680]	; (8006790 <UART_SetConfig+0x6a8>)
 80064e6:	f04f 0200 	mov.w	r2, #0
 80064ea:	eb13 0801 	adds.w	r8, r3, r1
 80064ee:	eb44 0902 	adc.w	r9, r4, r2
 80064f2:	4640      	mov	r0, r8
 80064f4:	4649      	mov	r1, r9
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f04f 0400 	mov.w	r4, #0
 80064fe:	461a      	mov	r2, r3
 8006500:	4623      	mov	r3, r4
 8006502:	f7fa fbcd 	bl	8000ca0 <__aeabi_uldivmod>
 8006506:	4603      	mov	r3, r0
 8006508:	460c      	mov	r4, r1
 800650a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800650c:	e037      	b.n	800657e <UART_SetConfig+0x496>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800650e:	f7fc fb8f 	bl	8002c30 <HAL_RCC_GetSysClockFreq>
 8006512:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	461a      	mov	r2, r3
 8006518:	f04f 0300 	mov.w	r3, #0
 800651c:	021d      	lsls	r5, r3, #8
 800651e:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 8006522:	0214      	lsls	r4, r2, #8
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	085b      	lsrs	r3, r3, #1
 800652a:	461a      	mov	r2, r3
 800652c:	f04f 0300 	mov.w	r3, #0
 8006530:	18a0      	adds	r0, r4, r2
 8006532:	eb45 0103 	adc.w	r1, r5, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f04f 0400 	mov.w	r4, #0
 800653e:	461a      	mov	r2, r3
 8006540:	4623      	mov	r3, r4
 8006542:	f7fa fbad 	bl	8000ca0 <__aeabi_uldivmod>
 8006546:	4603      	mov	r3, r0
 8006548:	460c      	mov	r4, r1
 800654a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800654c:	e017      	b.n	800657e <UART_SetConfig+0x496>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	085b      	lsrs	r3, r3, #1
 8006554:	f04f 0400 	mov.w	r4, #0
 8006558:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800655c:	f144 0100 	adc.w	r1, r4, #0
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f04f 0400 	mov.w	r4, #0
 8006568:	461a      	mov	r2, r3
 800656a:	4623      	mov	r3, r4
 800656c:	f7fa fb98 	bl	8000ca0 <__aeabi_uldivmod>
 8006570:	4603      	mov	r3, r0
 8006572:	460c      	mov	r4, r1
 8006574:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006576:	e002      	b.n	800657e <UART_SetConfig+0x496>
          default:
            ret = HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	76fb      	strb	r3, [r7, #27]
            break;
 800657c:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006584:	d308      	bcc.n	8006598 <UART_SetConfig+0x4b0>
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800658c:	d204      	bcs.n	8006598 <UART_SetConfig+0x4b0>
        {
          huart->Instance->BRR = usartdiv;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	69fa      	ldr	r2, [r7, #28]
 8006594:	60da      	str	r2, [r3, #12]
 8006596:	e0ff      	b.n	8006798 <UART_SetConfig+0x6b0>
        }
        else
        {
          ret = HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	76fb      	strb	r3, [r7, #27]
 800659c:	e0fc      	b.n	8006798 <UART_SetConfig+0x6b0>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	69db      	ldr	r3, [r3, #28]
 80065a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065a6:	f040 8083 	bne.w	80066b0 <UART_SetConfig+0x5c8>
  {
    switch (clocksource)
 80065aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065ae:	2b08      	cmp	r3, #8
 80065b0:	d85e      	bhi.n	8006670 <UART_SetConfig+0x588>
 80065b2:	a201      	add	r2, pc, #4	; (adr r2, 80065b8 <UART_SetConfig+0x4d0>)
 80065b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b8:	080065dd 	.word	0x080065dd
 80065bc:	080065fd 	.word	0x080065fd
 80065c0:	0800661d 	.word	0x0800661d
 80065c4:	08006671 	.word	0x08006671
 80065c8:	08006639 	.word	0x08006639
 80065cc:	08006671 	.word	0x08006671
 80065d0:	08006671 	.word	0x08006671
 80065d4:	08006671 	.word	0x08006671
 80065d8:	08006659 	.word	0x08006659
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065dc:	f7fc fbbc 	bl	8002d58 <HAL_RCC_GetPCLK1Freq>
 80065e0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	005a      	lsls	r2, r3, #1
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	085b      	lsrs	r3, r3, #1
 80065ec:	441a      	add	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80065fa:	e03c      	b.n	8006676 <UART_SetConfig+0x58e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065fc:	f7fc fbc2 	bl	8002d84 <HAL_RCC_GetPCLK2Freq>
 8006600:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	005a      	lsls	r2, r3, #1
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	085b      	lsrs	r3, r3, #1
 800660c:	441a      	add	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	fbb2 f3f3 	udiv	r3, r2, r3
 8006616:	b29b      	uxth	r3, r3
 8006618:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800661a:	e02c      	b.n	8006676 <UART_SetConfig+0x58e>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	085b      	lsrs	r3, r3, #1
 8006622:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8006626:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	6852      	ldr	r2, [r2, #4]
 800662e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006632:	b29b      	uxth	r3, r3
 8006634:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006636:	e01e      	b.n	8006676 <UART_SetConfig+0x58e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006638:	f7fc fafa 	bl	8002c30 <HAL_RCC_GetSysClockFreq>
 800663c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	005a      	lsls	r2, r3, #1
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	085b      	lsrs	r3, r3, #1
 8006648:	441a      	add	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006652:	b29b      	uxth	r3, r3
 8006654:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006656:	e00e      	b.n	8006676 <UART_SetConfig+0x58e>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	085b      	lsrs	r3, r3, #1
 800665e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	fbb2 f3f3 	udiv	r3, r2, r3
 800666a:	b29b      	uxth	r3, r3
 800666c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800666e:	e002      	b.n	8006676 <UART_SetConfig+0x58e>
      default:
        ret = HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	76fb      	strb	r3, [r7, #27]
        break;
 8006674:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	2b0f      	cmp	r3, #15
 800667a:	d916      	bls.n	80066aa <UART_SetConfig+0x5c2>
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006682:	d212      	bcs.n	80066aa <UART_SetConfig+0x5c2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	b29b      	uxth	r3, r3
 8006688:	f023 030f 	bic.w	r3, r3, #15
 800668c:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	085b      	lsrs	r3, r3, #1
 8006692:	b29b      	uxth	r3, r3
 8006694:	f003 0307 	and.w	r3, r3, #7
 8006698:	b29a      	uxth	r2, r3
 800669a:	89fb      	ldrh	r3, [r7, #14]
 800669c:	4313      	orrs	r3, r2
 800669e:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	89fa      	ldrh	r2, [r7, #14]
 80066a6:	60da      	str	r2, [r3, #12]
 80066a8:	e076      	b.n	8006798 <UART_SetConfig+0x6b0>
    }
    else
    {
      ret = HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	76fb      	strb	r3, [r7, #27]
 80066ae:	e073      	b.n	8006798 <UART_SetConfig+0x6b0>
    }
  }
  else
  {
    switch (clocksource)
 80066b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066b4:	2b08      	cmp	r3, #8
 80066b6:	d85c      	bhi.n	8006772 <UART_SetConfig+0x68a>
 80066b8:	a201      	add	r2, pc, #4	; (adr r2, 80066c0 <UART_SetConfig+0x5d8>)
 80066ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066be:	bf00      	nop
 80066c0:	080066e5 	.word	0x080066e5
 80066c4:	08006703 	.word	0x08006703
 80066c8:	08006721 	.word	0x08006721
 80066cc:	08006773 	.word	0x08006773
 80066d0:	0800673d 	.word	0x0800673d
 80066d4:	08006773 	.word	0x08006773
 80066d8:	08006773 	.word	0x08006773
 80066dc:	08006773 	.word	0x08006773
 80066e0:	0800675b 	.word	0x0800675b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066e4:	f7fc fb38 	bl	8002d58 <HAL_RCC_GetPCLK1Freq>
 80066e8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	085a      	lsrs	r2, r3, #1
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	441a      	add	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006700:	e03a      	b.n	8006778 <UART_SetConfig+0x690>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006702:	f7fc fb3f 	bl	8002d84 <HAL_RCC_GetPCLK2Freq>
 8006706:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	085a      	lsrs	r2, r3, #1
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	441a      	add	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	fbb2 f3f3 	udiv	r3, r2, r3
 800671a:	b29b      	uxth	r3, r3
 800671c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800671e:	e02b      	b.n	8006778 <UART_SetConfig+0x690>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	085b      	lsrs	r3, r3, #1
 8006726:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800672a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	6852      	ldr	r2, [r2, #4]
 8006732:	fbb3 f3f2 	udiv	r3, r3, r2
 8006736:	b29b      	uxth	r3, r3
 8006738:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800673a:	e01d      	b.n	8006778 <UART_SetConfig+0x690>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800673c:	f7fc fa78 	bl	8002c30 <HAL_RCC_GetSysClockFreq>
 8006740:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	085a      	lsrs	r2, r3, #1
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	441a      	add	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	fbb2 f3f3 	udiv	r3, r2, r3
 8006754:	b29b      	uxth	r3, r3
 8006756:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006758:	e00e      	b.n	8006778 <UART_SetConfig+0x690>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	085b      	lsrs	r3, r3, #1
 8006760:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	fbb2 f3f3 	udiv	r3, r2, r3
 800676c:	b29b      	uxth	r3, r3
 800676e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006770:	e002      	b.n	8006778 <UART_SetConfig+0x690>
      default:
        ret = HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	76fb      	strb	r3, [r7, #27]
        break;
 8006776:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	2b0f      	cmp	r3, #15
 800677c:	d90a      	bls.n	8006794 <UART_SetConfig+0x6ac>
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006784:	d206      	bcs.n	8006794 <UART_SetConfig+0x6ac>
    {
      huart->Instance->BRR = usartdiv;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	69fa      	ldr	r2, [r7, #28]
 800678c:	60da      	str	r2, [r3, #12]
 800678e:	e003      	b.n	8006798 <UART_SetConfig+0x6b0>
 8006790:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80067a4:	7efb      	ldrb	r3, [r7, #27]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3728      	adds	r7, #40	; 0x28
 80067aa:	46bd      	mov	sp, r7
 80067ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080067b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067bc:	f003 0301 	and.w	r3, r3, #1
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00a      	beq.n	80067da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	6812      	ldr	r2, [r2, #0]
 80067cc:	6852      	ldr	r2, [r2, #4]
 80067ce:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80067d6:	430a      	orrs	r2, r1
 80067d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067de:	f003 0302 	and.w	r3, r3, #2
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00a      	beq.n	80067fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	6812      	ldr	r2, [r2, #0]
 80067ee:	6852      	ldr	r2, [r2, #4]
 80067f0:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80067f8:	430a      	orrs	r2, r1
 80067fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006800:	f003 0304 	and.w	r3, r3, #4
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00a      	beq.n	800681e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	6812      	ldr	r2, [r2, #0]
 8006810:	6852      	ldr	r2, [r2, #4]
 8006812:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800681a:	430a      	orrs	r2, r1
 800681c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006822:	f003 0308 	and.w	r3, r3, #8
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00a      	beq.n	8006840 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	6812      	ldr	r2, [r2, #0]
 8006832:	6852      	ldr	r2, [r2, #4]
 8006834:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800683c:	430a      	orrs	r2, r1
 800683e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006844:	f003 0310 	and.w	r3, r3, #16
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00a      	beq.n	8006862 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	6812      	ldr	r2, [r2, #0]
 8006854:	6892      	ldr	r2, [r2, #8]
 8006856:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800685e:	430a      	orrs	r2, r1
 8006860:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006866:	f003 0320 	and.w	r3, r3, #32
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00a      	beq.n	8006884 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	6812      	ldr	r2, [r2, #0]
 8006876:	6892      	ldr	r2, [r2, #8]
 8006878:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006880:	430a      	orrs	r2, r1
 8006882:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800688c:	2b00      	cmp	r3, #0
 800688e:	d01a      	beq.n	80068c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	6812      	ldr	r2, [r2, #0]
 8006898:	6852      	ldr	r2, [r2, #4]
 800689a:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80068a2:	430a      	orrs	r2, r1
 80068a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068ae:	d10a      	bne.n	80068c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	6812      	ldr	r2, [r2, #0]
 80068b8:	6852      	ldr	r2, [r2, #4]
 80068ba:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80068c2:	430a      	orrs	r2, r1
 80068c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00a      	beq.n	80068e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	6812      	ldr	r2, [r2, #0]
 80068da:	6852      	ldr	r2, [r2, #4]
 80068dc:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80068e4:	430a      	orrs	r2, r1
 80068e6:	605a      	str	r2, [r3, #4]
  }
}
 80068e8:	bf00      	nop
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bc80      	pop	{r7}
 80068f0:	4770      	bx	lr

080068f2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b086      	sub	sp, #24
 80068f6:	af02      	add	r7, sp, #8
 80068f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006900:	f7fa fbc2 	bl	8001088 <HAL_GetTick>
 8006904:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0308 	and.w	r3, r3, #8
 8006910:	2b08      	cmp	r3, #8
 8006912:	d10e      	bne.n	8006932 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006914:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006918:	9300      	str	r3, [sp, #0]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f82a 	bl	800697c <UART_WaitOnFlagUntilTimeout>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e020      	b.n	8006974 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0304 	and.w	r3, r3, #4
 800693c:	2b04      	cmp	r3, #4
 800693e:	d10e      	bne.n	800695e <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006940:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f814 	bl	800697c <UART_WaitOnFlagUntilTimeout>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e00a      	b.n	8006974 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2220      	movs	r2, #32
 8006962:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2220      	movs	r2, #32
 8006968:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	603b      	str	r3, [r7, #0]
 8006988:	4613      	mov	r3, r2
 800698a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800698c:	e05d      	b.n	8006a4a <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006994:	d059      	beq.n	8006a4a <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006996:	f7fa fb77 	bl	8001088 <HAL_GetTick>
 800699a:	4602      	mov	r2, r0
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	1ad2      	subs	r2, r2, r3
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d802      	bhi.n	80069ac <UART_WaitOnFlagUntilTimeout+0x30>
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d11b      	bne.n	80069e4 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	6812      	ldr	r2, [r2, #0]
 80069b4:	6812      	ldr	r2, [r2, #0]
 80069b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80069ba:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	6812      	ldr	r2, [r2, #0]
 80069c4:	6892      	ldr	r2, [r2, #8]
 80069c6:	f022 0201 	bic.w	r2, r2, #1
 80069ca:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2220      	movs	r2, #32
 80069d0:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2220      	movs	r2, #32
 80069d6:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80069e0:	2303      	movs	r3, #3
 80069e2:	e042      	b.n	8006a6a <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0304 	and.w	r3, r3, #4
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d02b      	beq.n	8006a4a <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a00:	d123      	bne.n	8006a4a <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a0a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	6812      	ldr	r2, [r2, #0]
 8006a14:	6812      	ldr	r2, [r2, #0]
 8006a16:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a1a:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	6812      	ldr	r2, [r2, #0]
 8006a24:	6892      	ldr	r2, [r2, #8]
 8006a26:	f022 0201 	bic.w	r2, r2, #1
 8006a2a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2220      	movs	r2, #32
 8006a30:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2220      	movs	r2, #32
 8006a36:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2220      	movs	r2, #32
 8006a3c:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e00f      	b.n	8006a6a <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	69da      	ldr	r2, [r3, #28]
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	401a      	ands	r2, r3
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	bf0c      	ite	eq
 8006a5a:	2301      	moveq	r3, #1
 8006a5c:	2300      	movne	r3, #0
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	461a      	mov	r2, r3
 8006a62:	79fb      	ldrb	r3, [r7, #7]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d092      	beq.n	800698e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006a72:	b480      	push	{r7}
 8006a74:	b083      	sub	sp, #12
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	6812      	ldr	r2, [r2, #0]
 8006a82:	6812      	ldr	r2, [r2, #0]
 8006a84:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006a88:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2220      	movs	r2, #32
 8006a8e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006a90:	bf00      	nop
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bc80      	pop	{r7}
 8006a98:	4770      	bx	lr

08006a9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b083      	sub	sp, #12
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	6812      	ldr	r2, [r2, #0]
 8006aaa:	6812      	ldr	r2, [r2, #0]
 8006aac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006ab0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	6812      	ldr	r2, [r2, #0]
 8006aba:	6892      	ldr	r2, [r2, #8]
 8006abc:	f022 0201 	bic.w	r2, r2, #1
 8006ac0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2220      	movs	r2, #32
 8006ac6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006ace:	bf00      	nop
 8006ad0:	370c      	adds	r7, #12
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bc80      	pop	{r7}
 8006ad6:	4770      	bx	lr

08006ad8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0320 	and.w	r3, r3, #32
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d114      	bne.n	8006b1e <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	6812      	ldr	r2, [r2, #0]
 8006b04:	6892      	ldr	r2, [r2, #8]
 8006b06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b0a:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	6812      	ldr	r2, [r2, #0]
 8006b14:	6812      	ldr	r2, [r2, #0]
 8006b16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b1a:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b1c:	e002      	b.n	8006b24 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f7ff faac 	bl	800607c <HAL_UART_TxCpltCallback>
}
 8006b24:	bf00      	nop
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b38:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f7ff faa7 	bl	800608e <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b40:	bf00      	nop
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b54:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 0320 	and.w	r3, r3, #32
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d11e      	bne.n	8006ba2 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	6812      	ldr	r2, [r2, #0]
 8006b74:	6812      	ldr	r2, [r2, #0]
 8006b76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b7a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	6812      	ldr	r2, [r2, #0]
 8006b84:	6892      	ldr	r2, [r2, #8]
 8006b86:	f022 0201 	bic.w	r2, r2, #1
 8006b8a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	6812      	ldr	r2, [r2, #0]
 8006b94:	6892      	ldr	r2, [r2, #8]
 8006b96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b9a:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2220      	movs	r2, #32
 8006ba0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f7ff fa7c 	bl	80060a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ba8:	bf00      	nop
 8006baa:	3710      	adds	r7, #16
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bbc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f7ff fa77 	bl	80060b2 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bc4:	bf00      	nop
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bde:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006be4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf0:	2b80      	cmp	r3, #128	; 0x80
 8006bf2:	d109      	bne.n	8006c08 <UART_DMAError+0x3c>
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	2b21      	cmp	r3, #33	; 0x21
 8006bf8:	d106      	bne.n	8006c08 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006c02:	6978      	ldr	r0, [r7, #20]
 8006c04:	f7ff ff35 	bl	8006a72 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c12:	2b40      	cmp	r3, #64	; 0x40
 8006c14:	d109      	bne.n	8006c2a <UART_DMAError+0x5e>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2b22      	cmp	r3, #34	; 0x22
 8006c1a:	d106      	bne.n	8006c2a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006c24:	6978      	ldr	r0, [r7, #20]
 8006c26:	f7ff ff38 	bl	8006a9a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c2e:	f043 0210 	orr.w	r2, r3, #16
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c36:	6978      	ldr	r0, [r7, #20]
 8006c38:	f7ff fa44 	bl	80060c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c3c:	bf00      	nop
 8006c3e:	3718      	adds	r7, #24
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	f7ff fa2e 	bl	80060c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c68:	bf00      	nop
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <UART_DMATxOnlyAbortCallback>:
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c7c:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0U;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2220      	movs	r2, #32
 8006c8a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f7ff fa22 	bl	80060d6 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c92:	bf00      	nop
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b082      	sub	sp, #8
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	6812      	ldr	r2, [r2, #0]
 8006caa:	6812      	ldr	r2, [r2, #0]
 8006cac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cb0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2220      	movs	r2, #32
 8006cb6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7ff f9dc 	bl	800607c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cc4:	bf00      	nop
 8006cc6:	3708      	adds	r7, #8
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006cd4:	bf00      	nop
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bc80      	pop	{r7}
 8006cdc:	4770      	bx	lr
	...

08006ce0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef MX_TIM2_Init(void)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b098      	sub	sp, #96	; 0x60
 8006ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006ce6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006cea:	2200      	movs	r2, #0
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	605a      	str	r2, [r3, #4]
 8006cf0:	609a      	str	r2, [r3, #8]
 8006cf2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8006cf4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	601a      	str	r2, [r3, #0]
 8006cfc:	605a      	str	r2, [r3, #4]
 8006cfe:	609a      	str	r2, [r3, #8]
 8006d00:	60da      	str	r2, [r3, #12]
 8006d02:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006d04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006d08:	2200      	movs	r2, #0
 8006d0a:	601a      	str	r2, [r3, #0]
 8006d0c:	605a      	str	r2, [r3, #4]
 8006d0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006d10:	f107 0314 	add.w	r3, r7, #20
 8006d14:	2200      	movs	r2, #0
 8006d16:	601a      	str	r2, [r3, #0]
 8006d18:	605a      	str	r2, [r3, #4]
 8006d1a:	609a      	str	r2, [r3, #8]
 8006d1c:	60da      	str	r2, [r3, #12]
 8006d1e:	611a      	str	r2, [r3, #16]
 8006d20:	615a      	str	r2, [r3, #20]
 8006d22:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8006d24:	1d3b      	adds	r3, r7, #4
 8006d26:	2200      	movs	r2, #0
 8006d28:	601a      	str	r2, [r3, #0]
 8006d2a:	605a      	str	r2, [r3, #4]
 8006d2c:	609a      	str	r2, [r3, #8]
 8006d2e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006d30:	4b46      	ldr	r3, [pc, #280]	; (8006e4c <MX_TIM2_Init+0x16c>)
 8006d32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006d36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8006d38:	4b44      	ldr	r3, [pc, #272]	; (8006e4c <MX_TIM2_Init+0x16c>)
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d3e:	4b43      	ldr	r3, [pc, #268]	; (8006e4c <MX_TIM2_Init+0x16c>)
 8006d40:	2200      	movs	r2, #0
 8006d42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536;
 8006d44:	4b41      	ldr	r3, [pc, #260]	; (8006e4c <MX_TIM2_Init+0x16c>)
 8006d46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006d4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006d4c:	4b3f      	ldr	r3, [pc, #252]	; (8006e4c <MX_TIM2_Init+0x16c>)
 8006d4e:	2200      	movs	r2, #0
 8006d50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006d52:	4b3e      	ldr	r3, [pc, #248]	; (8006e4c <MX_TIM2_Init+0x16c>)
 8006d54:	2200      	movs	r2, #0
 8006d56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006d58:	483c      	ldr	r0, [pc, #240]	; (8006e4c <MX_TIM2_Init+0x16c>)
 8006d5a:	f7fd f860 	bl	8003e1e <HAL_TIM_Base_Init>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d001      	beq.n	8006d68 <MX_TIM2_Init+0x88>
  {
	  return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e06d      	b.n	8006e44 <MX_TIM2_Init+0x164>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d6c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006d6e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006d72:	4619      	mov	r1, r3
 8006d74:	4835      	ldr	r0, [pc, #212]	; (8006e4c <MX_TIM2_Init+0x16c>)
 8006d76:	f7fd fc6b 	bl	8004650 <HAL_TIM_ConfigClockSource>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d001      	beq.n	8006d84 <MX_TIM2_Init+0xa4>
  {
   return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e05f      	b.n	8006e44 <MX_TIM2_Init+0x164>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8006d84:	4831      	ldr	r0, [pc, #196]	; (8006e4c <MX_TIM2_Init+0x16c>)
 8006d86:	f7fd f923 	bl	8003fd0 <HAL_TIM_OC_Init>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d001      	beq.n	8006d94 <MX_TIM2_Init+0xb4>
  {
   return HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e057      	b.n	8006e44 <MX_TIM2_Init+0x164>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8006d94:	482d      	ldr	r0, [pc, #180]	; (8006e4c <MX_TIM2_Init+0x16c>)
 8006d96:	f7fd f9ed 	bl	8004174 <HAL_TIM_IC_Init>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d001      	beq.n	8006da4 <MX_TIM2_Init+0xc4>
  {
   return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e04f      	b.n	8006e44 <MX_TIM2_Init+0x164>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8006da4:	2304      	movs	r3, #4
 8006da6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8006da8:	2360      	movs	r3, #96	; 0x60
 8006daa:	643b      	str	r3, [r7, #64]	; 0x40
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8006dac:	2300      	movs	r3, #0
 8006dae:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.TriggerFilter = 0;
 8006db0:	2300      	movs	r3, #0
 8006db2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig) != HAL_OK)
 8006db4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006db8:	4619      	mov	r1, r3
 8006dba:	4824      	ldr	r0, [pc, #144]	; (8006e4c <MX_TIM2_Init+0x16c>)
 8006dbc:	f7fd fd01 	bl	80047c2 <HAL_TIM_SlaveConfigSynchro>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d001      	beq.n	8006dca <MX_TIM2_Init+0xea>
  {
   return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e03c      	b.n	8006e44 <MX_TIM2_Init+0x164>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006dd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	481c      	ldr	r0, [pc, #112]	; (8006e4c <MX_TIM2_Init+0x16c>)
 8006dda:	f7fe fb2b 	bl	8005434 <HAL_TIMEx_MasterConfigSynchronization>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d001      	beq.n	8006de8 <MX_TIM2_Init+0x108>
  {
   return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e02d      	b.n	8006e44 <MX_TIM2_Init+0x164>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8006de8:	2300      	movs	r3, #0
 8006dea:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = CCR1_VAL;
 8006dec:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8006df0:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8006df2:	2302      	movs	r3, #2
 8006df4:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006df6:	2300      	movs	r3, #0
 8006df8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006dfa:	f107 0314 	add.w	r3, r7, #20
 8006dfe:	2200      	movs	r2, #0
 8006e00:	4619      	mov	r1, r3
 8006e02:	4812      	ldr	r0, [pc, #72]	; (8006e4c <MX_TIM2_Init+0x16c>)
 8006e04:	f7fd fb0a 	bl	800441c <HAL_TIM_OC_ConfigChannel>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <MX_TIM2_Init+0x132>
  {
   return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e018      	b.n	8006e44 <MX_TIM2_Init+0x164>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8006e12:	2300      	movs	r3, #0
 8006e14:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8006e16:	2301      	movs	r3, #1
 8006e18:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8006e22:	1d3b      	adds	r3, r7, #4
 8006e24:	2204      	movs	r2, #4
 8006e26:	4619      	mov	r1, r3
 8006e28:	4808      	ldr	r0, [pc, #32]	; (8006e4c <MX_TIM2_Init+0x16c>)
 8006e2a:	f7fd fb75 	bl	8004518 <HAL_TIM_IC_ConfigChannel>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d001      	beq.n	8006e38 <MX_TIM2_Init+0x158>
  {
   return HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	e005      	b.n	8006e44 <MX_TIM2_Init+0x164>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  __HAL_TIM_CLEAR_IT(&htim2,TIM_IT_UPDATE);
 8006e38:	4b04      	ldr	r3, [pc, #16]	; (8006e4c <MX_TIM2_Init+0x16c>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f06f 0201 	mvn.w	r2, #1
 8006e40:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM2_Init 2 */
  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3760      	adds	r7, #96	; 0x60
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	2000109c 	.word	0x2000109c

08006e50 <MX_UART4_Init>:
  * @param None
  * @retval HAL_StatusTypeDef
  */

HAL_StatusTypeDef MX_UART4_Init(void)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8006e54:	4b14      	ldr	r3, [pc, #80]	; (8006ea8 <MX_UART4_Init+0x58>)
 8006e56:	4a15      	ldr	r2, [pc, #84]	; (8006eac <MX_UART4_Init+0x5c>)
 8006e58:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8006e5a:	4b13      	ldr	r3, [pc, #76]	; (8006ea8 <MX_UART4_Init+0x58>)
 8006e5c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006e60:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8006e62:	4b11      	ldr	r3, [pc, #68]	; (8006ea8 <MX_UART4_Init+0x58>)
 8006e64:	2200      	movs	r2, #0
 8006e66:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8006e68:	4b0f      	ldr	r3, [pc, #60]	; (8006ea8 <MX_UART4_Init+0x58>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8006e6e:	4b0e      	ldr	r3, [pc, #56]	; (8006ea8 <MX_UART4_Init+0x58>)
 8006e70:	2200      	movs	r2, #0
 8006e72:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8006e74:	4b0c      	ldr	r3, [pc, #48]	; (8006ea8 <MX_UART4_Init+0x58>)
 8006e76:	220c      	movs	r2, #12
 8006e78:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006e7a:	4b0b      	ldr	r3, [pc, #44]	; (8006ea8 <MX_UART4_Init+0x58>)
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8006e80:	4b09      	ldr	r3, [pc, #36]	; (8006ea8 <MX_UART4_Init+0x58>)
 8006e82:	2200      	movs	r2, #0
 8006e84:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006e86:	4b08      	ldr	r3, [pc, #32]	; (8006ea8 <MX_UART4_Init+0x58>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	621a      	str	r2, [r3, #32]

  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006e8c:	4b06      	ldr	r3, [pc, #24]	; (8006ea8 <MX_UART4_Init+0x58>)
 8006e8e:	2200      	movs	r2, #0
 8006e90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8006e92:	4805      	ldr	r0, [pc, #20]	; (8006ea8 <MX_UART4_Init+0x58>)
 8006e94:	f7fe fb6f 	bl	8005576 <HAL_UART_Init>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d001      	beq.n	8006ea2 <MX_UART4_Init+0x52>
  {
   return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e000      	b.n	8006ea4 <MX_UART4_Init+0x54>
  }

  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	2000101c 	.word	0x2000101c
 8006eac:	40004c00 	.word	0x40004c00

08006eb0 <MX_DMA_Init>:
  *@pram None
  *@retval HAL_StatusTypeDef
  */

static HAL_StatusTypeDef MX_DMA_Init(void)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
	 * This piece of code is designed to completely reset the peripheral registers
	 * if an unwanted reset causes the DMA to keep the previous register settings and
	 * state. This causes unwanted interrupts in the program that are a nightmare to clear
	 */
	//for DMA RX channel
	if(DMA2_Channel5->CCR != 0)
 8006eb6:	4b44      	ldr	r3, [pc, #272]	; (8006fc8 <MX_DMA_Init+0x118>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00d      	beq.n	8006eda <MX_DMA_Init+0x2a>
 	{
 		  //clear channel to reset state
 		  hdma_uart4_rx.Instance = DMA2_Channel5;
 8006ebe:	4b43      	ldr	r3, [pc, #268]	; (8006fcc <MX_DMA_Init+0x11c>)
 8006ec0:	4a41      	ldr	r2, [pc, #260]	; (8006fc8 <MX_DMA_Init+0x118>)
 8006ec2:	601a      	str	r2, [r3, #0]
 		  hdma_uart4_rx.DmaBaseAddress->ISR = DMA2->ISR;
 8006ec4:	4b41      	ldr	r3, [pc, #260]	; (8006fcc <MX_DMA_Init+0x11c>)
 8006ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec8:	4a41      	ldr	r2, [pc, #260]	; (8006fd0 <MX_DMA_Init+0x120>)
 8006eca:	6812      	ldr	r2, [r2, #0]
 8006ecc:	601a      	str	r2, [r3, #0]
 		  hdma_uart4_rx.ChannelIndex = 5;
 8006ece:	4b3f      	ldr	r3, [pc, #252]	; (8006fcc <MX_DMA_Init+0x11c>)
 8006ed0:	2205      	movs	r2, #5
 8006ed2:	645a      	str	r2, [r3, #68]	; 0x44
 		  HAL_DMA_DeInit(&hdma_uart4_rx);
 8006ed4:	483d      	ldr	r0, [pc, #244]	; (8006fcc <MX_DMA_Init+0x11c>)
 8006ed6:	f7fa fb49 	bl	800156c <HAL_DMA_DeInit>
 	  }
	//for DMA TX channel
	if(DMA2_Channel3->CCR != 0)
 8006eda:	4b3e      	ldr	r3, [pc, #248]	; (8006fd4 <MX_DMA_Init+0x124>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00d      	beq.n	8006efe <MX_DMA_Init+0x4e>
	{
		hdma_uart4_tx.Instance = DMA2_Channel3;
 8006ee2:	4b3d      	ldr	r3, [pc, #244]	; (8006fd8 <MX_DMA_Init+0x128>)
 8006ee4:	4a3b      	ldr	r2, [pc, #236]	; (8006fd4 <MX_DMA_Init+0x124>)
 8006ee6:	601a      	str	r2, [r3, #0]
		hdma_uart4_tx.DmaBaseAddress->ISR = DMA2->ISR;
 8006ee8:	4b3b      	ldr	r3, [pc, #236]	; (8006fd8 <MX_DMA_Init+0x128>)
 8006eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eec:	4a38      	ldr	r2, [pc, #224]	; (8006fd0 <MX_DMA_Init+0x120>)
 8006eee:	6812      	ldr	r2, [r2, #0]
 8006ef0:	601a      	str	r2, [r3, #0]
		hdma_uart4_tx.ChannelIndex = 3;
 8006ef2:	4b39      	ldr	r3, [pc, #228]	; (8006fd8 <MX_DMA_Init+0x128>)
 8006ef4:	2203      	movs	r2, #3
 8006ef6:	645a      	str	r2, [r3, #68]	; 0x44
		HAL_DMA_DeInit(&hdma_uart4_tx);
 8006ef8:	4837      	ldr	r0, [pc, #220]	; (8006fd8 <MX_DMA_Init+0x128>)
 8006efa:	f7fa fb37 	bl	800156c <HAL_DMA_DeInit>
	}
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006efe:	4a37      	ldr	r2, [pc, #220]	; (8006fdc <MX_DMA_Init+0x12c>)
 8006f00:	4b36      	ldr	r3, [pc, #216]	; (8006fdc <MX_DMA_Init+0x12c>)
 8006f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f04:	f043 0302 	orr.w	r3, r3, #2
 8006f08:	6493      	str	r3, [r2, #72]	; 0x48
 8006f0a:	4b34      	ldr	r3, [pc, #208]	; (8006fdc <MX_DMA_Init+0x12c>)
 8006f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f0e:	f003 0302 	and.w	r3, r3, #2
 8006f12:	607b      	str	r3, [r7, #4]
 8006f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006f16:	4a31      	ldr	r2, [pc, #196]	; (8006fdc <MX_DMA_Init+0x12c>)
 8006f18:	4b30      	ldr	r3, [pc, #192]	; (8006fdc <MX_DMA_Init+0x12c>)
 8006f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f1c:	f043 0301 	orr.w	r3, r3, #1
 8006f20:	6493      	str	r3, [r2, #72]	; 0x48
 8006f22:	4b2e      	ldr	r3, [pc, #184]	; (8006fdc <MX_DMA_Init+0x12c>)
 8006f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	603b      	str	r3, [r7, #0]
 8006f2c:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 8006f2e:	4b2c      	ldr	r3, [pc, #176]	; (8006fe0 <MX_DMA_Init+0x130>)
 8006f30:	4a2c      	ldr	r2, [pc, #176]	; (8006fe4 <MX_DMA_Init+0x134>)
 8006f32:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel1.Init.Request = DMA_REQUEST_0;
 8006f34:	4b2a      	ldr	r3, [pc, #168]	; (8006fe0 <MX_DMA_Init+0x130>)
 8006f36:	2200      	movs	r2, #0
 8006f38:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8006f3a:	4b29      	ldr	r3, [pc, #164]	; (8006fe0 <MX_DMA_Init+0x130>)
 8006f3c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006f40:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8006f42:	4b27      	ldr	r3, [pc, #156]	; (8006fe0 <MX_DMA_Init+0x130>)
 8006f44:	2240      	movs	r2, #64	; 0x40
 8006f46:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 8006f48:	4b25      	ldr	r3, [pc, #148]	; (8006fe0 <MX_DMA_Init+0x130>)
 8006f4a:	2280      	movs	r2, #128	; 0x80
 8006f4c:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006f4e:	4b24      	ldr	r3, [pc, #144]	; (8006fe0 <MX_DMA_Init+0x130>)
 8006f50:	2200      	movs	r2, #0
 8006f52:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006f54:	4b22      	ldr	r3, [pc, #136]	; (8006fe0 <MX_DMA_Init+0x130>)
 8006f56:	2200      	movs	r2, #0
 8006f58:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 8006f5a:	4b21      	ldr	r3, [pc, #132]	; (8006fe0 <MX_DMA_Init+0x130>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 8006f60:	4b1f      	ldr	r3, [pc, #124]	; (8006fe0 <MX_DMA_Init+0x130>)
 8006f62:	2200      	movs	r2, #0
 8006f64:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 8006f66:	481e      	ldr	r0, [pc, #120]	; (8006fe0 <MX_DMA_Init+0x130>)
 8006f68:	f7fa fa48 	bl	80013fc <HAL_DMA_Init>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d001      	beq.n	8006f76 <MX_DMA_Init+0xc6>
  {
    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e024      	b.n	8006fc0 <MX_DMA_Init+0x110>
  }

  /* DMA interrupt init */
  CLEAR_REG(hdma_uart4_rx.DmaBaseAddress->ISR);
 8006f76:	4b15      	ldr	r3, [pc, #84]	; (8006fcc <MX_DMA_Init+0x11c>)
 8006f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	601a      	str	r2, [r3, #0]
  CLEAR_REG(hdma_uart4_tx.DmaBaseAddress->ISR);
 8006f7e:	4b16      	ldr	r3, [pc, #88]	; (8006fd8 <MX_DMA_Init+0x128>)
 8006f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f82:	2200      	movs	r2, #0
 8006f84:	601a      	str	r2, [r3, #0]
  CLEAR_REG(hdma_memtomem_dma1_channel1.DmaBaseAddress->ISR);
 8006f86:	4b16      	ldr	r3, [pc, #88]	; (8006fe0 <MX_DMA_Init+0x130>)
 8006f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	601a      	str	r2, [r3, #0]

  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8006f8e:	2200      	movs	r2, #0
 8006f90:	2100      	movs	r1, #0
 8006f92:	200b      	movs	r0, #11
 8006f94:	f7fa f9d9 	bl	800134a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006f98:	200b      	movs	r0, #11
 8006f9a:	f7fa f9f2 	bl	8001382 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	203a      	movs	r0, #58	; 0x3a
 8006fa4:	f7fa f9d1 	bl	800134a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8006fa8:	203a      	movs	r0, #58	; 0x3a
 8006faa:	f7fa f9ea 	bl	8001382 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8006fae:	2200      	movs	r2, #0
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	203c      	movs	r0, #60	; 0x3c
 8006fb4:	f7fa f9c9 	bl	800134a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8006fb8:	203c      	movs	r0, #60	; 0x3c
 8006fba:	f7fa f9e2 	bl	8001382 <HAL_NVIC_EnableIRQ>
  return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3708      	adds	r7, #8
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	40020458 	.word	0x40020458
 8006fcc:	2000074c 	.word	0x2000074c
 8006fd0:	40020400 	.word	0x40020400
 8006fd4:	40020430 	.word	0x40020430
 8006fd8:	200018e0 	.word	0x200018e0
 8006fdc:	40021000 	.word	0x40021000
 8006fe0:	200007d0 	.word	0x200007d0
 8006fe4:	40020008 	.word	0x40020008

08006fe8 <GPS_Log_Begin>:
//}

//======================= 5. Utility Function Definitions ===============================

void GPS_Log_Begin(void)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	af00      	add	r7, sp, #0
	  __HAL_UART_ENABLE_IT(&huart4,UART_IT_IDLE);
 8006fec:	4b1d      	ldr	r3, [pc, #116]	; (8007064 <GPS_Log_Begin+0x7c>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a1c      	ldr	r2, [pc, #112]	; (8007064 <GPS_Log_Begin+0x7c>)
 8006ff2:	6812      	ldr	r2, [r2, #0]
 8006ff4:	6812      	ldr	r2, [r2, #0]
 8006ff6:	f042 0210 	orr.w	r2, r2, #16
 8006ffa:	601a      	str	r2, [r3, #0]
	  __HAL_DMA_ENABLE_IT(huart4.hdmarx, DMA_IT_TC);
 8006ffc:	4b19      	ldr	r3, [pc, #100]	; (8007064 <GPS_Log_Begin+0x7c>)
 8006ffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a18      	ldr	r2, [pc, #96]	; (8007064 <GPS_Log_Begin+0x7c>)
 8007004:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007006:	6812      	ldr	r2, [r2, #0]
 8007008:	6812      	ldr	r2, [r2, #0]
 800700a:	f042 0202 	orr.w	r2, r2, #2
 800700e:	601a      	str	r2, [r3, #0]
	  if(__HAL_TIM_GET_FLAG(&htim2,TIM_FLAG_CC1) == SET)
 8007010:	4b15      	ldr	r3, [pc, #84]	; (8007068 <GPS_Log_Begin+0x80>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	f003 0302 	and.w	r3, r3, #2
 800701a:	2b02      	cmp	r3, #2
 800701c:	d104      	bne.n	8007028 <GPS_Log_Begin+0x40>
	  {
	   __HAL_TIM_CLEAR_FLAG(&htim2,TIM_FLAG_CC1);
 800701e:	4b12      	ldr	r3, [pc, #72]	; (8007068 <GPS_Log_Begin+0x80>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f06f 0202 	mvn.w	r2, #2
 8007026:	611a      	str	r2, [r3, #16]
	  }
	  M2M_Txfer_Cplt = 0;
 8007028:	4b10      	ldr	r3, [pc, #64]	; (800706c <GPS_Log_Begin+0x84>)
 800702a:	2200      	movs	r2, #0
 800702c:	701a      	strb	r2, [r3, #0]
	  __HAL_TIM_ENABLE_IT(&htim2,TIM_IT_CC1);
 800702e:	4b0e      	ldr	r3, [pc, #56]	; (8007068 <GPS_Log_Begin+0x80>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a0d      	ldr	r2, [pc, #52]	; (8007068 <GPS_Log_Begin+0x80>)
 8007034:	6812      	ldr	r2, [r2, #0]
 8007036:	68d2      	ldr	r2, [r2, #12]
 8007038:	f042 0202 	orr.w	r2, r2, #2
 800703c:	60da      	str	r2, [r3, #12]
	  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 800703e:	2100      	movs	r1, #0
 8007040:	4809      	ldr	r0, [pc, #36]	; (8007068 <GPS_Log_Begin+0x80>)
 8007042:	f7fc fff9 	bl	8004038 <HAL_TIM_OC_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim2);
 8007046:	4808      	ldr	r0, [pc, #32]	; (8007068 <GPS_Log_Begin+0x80>)
 8007048:	f7fc ff6e 	bl	8003f28 <HAL_TIM_Base_Start_IT>
	  HAL_UART_Receive_DMA(&huart4,DMA_RX_Buffer,DMA_RX_BUFFER_SIZE);
 800704c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007050:	4907      	ldr	r1, [pc, #28]	; (8007070 <GPS_Log_Begin+0x88>)
 8007052:	4804      	ldr	r0, [pc, #16]	; (8007064 <GPS_Log_Begin+0x7c>)
 8007054:	f7fe fcee 	bl	8005a34 <HAL_UART_Receive_DMA>
	  log_gps = SET;
 8007058:	4b06      	ldr	r3, [pc, #24]	; (8007074 <GPS_Log_Begin+0x8c>)
 800705a:	2201      	movs	r2, #1
 800705c:	701a      	strb	r2, [r3, #0]
}
 800705e:	bf00      	nop
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	2000101c 	.word	0x2000101c
 8007068:	2000109c 	.word	0x2000109c
 800706c:	20000818 	.word	0x20000818
 8007070:	2000081c 	.word	0x2000081c
 8007074:	20002128 	.word	0x20002128

08007078 <GPS_Log_Stop>:

void GPS_Log_Stop(void)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	af00      	add	r7, sp, #0
	  log_gps = RESET;
 800707c:	4b06      	ldr	r3, [pc, #24]	; (8007098 <GPS_Log_Stop+0x20>)
 800707e:	2200      	movs	r2, #0
 8007080:	701a      	strb	r2, [r3, #0]
	  packet_full = 0;
 8007082:	4b06      	ldr	r3, [pc, #24]	; (800709c <GPS_Log_Stop+0x24>)
 8007084:	2200      	movs	r2, #0
 8007086:	701a      	strb	r2, [r3, #0]
	  HAL_UART_DMAStop(&huart4);
 8007088:	4805      	ldr	r0, [pc, #20]	; (80070a0 <GPS_Log_Stop+0x28>)
 800708a:	f7fe fdef 	bl	8005c6c <HAL_UART_DMAStop>
	  HAL_TIM_Base_Stop(&htim2);
 800708e:	4805      	ldr	r0, [pc, #20]	; (80070a4 <GPS_Log_Stop+0x2c>)
 8007090:	f7fc ff20 	bl	8003ed4 <HAL_TIM_Base_Stop>

}
 8007094:	bf00      	nop
 8007096:	bd80      	pop	{r7, pc}
 8007098:	20002128 	.word	0x20002128
 800709c:	200007c4 	.word	0x200007c4
 80070a0:	2000101c 	.word	0x2000101c
 80070a4:	2000109c 	.word	0x2000109c

080070a8 <Clear_Buffer>:

void  Clear_Buffer(uint8_t *buffer,uint32_t size)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
	memset(buffer,0,size);
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	2100      	movs	r1, #0
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f002 fe9d 	bl	8009df6 <memset>
}
 80070bc:	bf00      	nop
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <is_valid>:

uint8_t is_valid(char* nmeamsg)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b088      	sub	sp, #32
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
	uint8_t flag = 0;
 80070cc:	2300      	movs	r3, #0
 80070ce:	77fb      	strb	r3, [r7, #31]

	char msg[4] = {0};
 80070d0:	2300      	movs	r3, #0
 80070d2:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 80070d4:	2300      	movs	r3, #0
 80070d6:	61bb      	str	r3, [r7, #24]
 80070d8:	e00d      	b.n	80070f6 <is_valid+0x32>
	{
		msg[i] = *(nmeamsg+2+i);
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	3302      	adds	r3, #2
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	4413      	add	r3, r2
 80070e2:	7819      	ldrb	r1, [r3, #0]
 80070e4:	f107 020c 	add.w	r2, r7, #12
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	4413      	add	r3, r2
 80070ec:	460a      	mov	r2, r1
 80070ee:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; ++i)
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	3301      	adds	r3, #1
 80070f4:	61bb      	str	r3, [r7, #24]
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	ddee      	ble.n	80070da <is_valid+0x16>
	}
	if((strcmp((char*)msg,"GLL") != 0))
 80070fc:	f107 030c 	add.w	r3, r7, #12
 8007100:	492c      	ldr	r1, [pc, #176]	; (80071b4 <is_valid+0xf0>)
 8007102:	4618      	mov	r0, r3
 8007104:	f7f9 f864 	bl	80001d0 <strcmp>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d019      	beq.n	8007142 <is_valid+0x7e>
	{

		if (strcmp((char*)msg,"ZDA") != 0)
 800710e:	f107 030c 	add.w	r3, r7, #12
 8007112:	4929      	ldr	r1, [pc, #164]	; (80071b8 <is_valid+0xf4>)
 8007114:	4618      	mov	r0, r3
 8007116:	f7f9 f85b 	bl	80001d0 <strcmp>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00d      	beq.n	800713c <is_valid+0x78>
		{
			if(strcmp((char*)msg,"GSA") != 0)
 8007120:	f107 030c 	add.w	r3, r7, #12
 8007124:	4925      	ldr	r1, [pc, #148]	; (80071bc <is_valid+0xf8>)
 8007126:	4618      	mov	r0, r3
 8007128:	f7f9 f852 	bl	80001d0 <strcmp>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d001      	beq.n	8007136 <is_valid+0x72>
			{
				return -1;
 8007132:	23ff      	movs	r3, #255	; 0xff
 8007134:	e039      	b.n	80071aa <is_valid+0xe6>
			}
			else
			{
				flag = 2;
 8007136:	2302      	movs	r3, #2
 8007138:	77fb      	strb	r3, [r7, #31]
 800713a:	e004      	b.n	8007146 <is_valid+0x82>
			}
		}else
		{
			flag = 3;
 800713c:	2303      	movs	r3, #3
 800713e:	77fb      	strb	r3, [r7, #31]
 8007140:	e001      	b.n	8007146 <is_valid+0x82>
		}

	}
	else
	{
		flag = 1;
 8007142:	2301      	movs	r3, #1
 8007144:	77fb      	strb	r3, [r7, #31]
	}
	/* check sum */
	uint16_t checksum = 0;
 8007146:	2300      	movs	r3, #0
 8007148:	82fb      	strh	r3, [r7, #22]
	while(*nmeamsg != '*')
 800714a:	e008      	b.n	800715e <is_valid+0x9a>
	{
		checksum^= *nmeamsg;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	b29a      	uxth	r2, r3
 8007152:	8afb      	ldrh	r3, [r7, #22]
 8007154:	4053      	eors	r3, r2
 8007156:	82fb      	strh	r3, [r7, #22]
		nmeamsg++;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	3301      	adds	r3, #1
 800715c:	607b      	str	r3, [r7, #4]
	while(*nmeamsg != '*')
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	2b2a      	cmp	r3, #42	; 0x2a
 8007164:	d1f2      	bne.n	800714c <is_valid+0x88>
	}
	uint8_t h = char_to_hex(*(++nmeamsg))*16;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	3301      	adds	r3, #1
 800716a:	607b      	str	r3, [r7, #4]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	4618      	mov	r0, r3
 8007172:	f000 f825 	bl	80071c0 <char_to_hex>
 8007176:	4603      	mov	r3, r0
 8007178:	011b      	lsls	r3, r3, #4
 800717a:	757b      	strb	r3, [r7, #21]
	uint8_t l = char_to_hex(*(++nmeamsg));
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	3301      	adds	r3, #1
 8007180:	607b      	str	r3, [r7, #4]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	4618      	mov	r0, r3
 8007188:	f000 f81a 	bl	80071c0 <char_to_hex>
 800718c:	4603      	mov	r3, r0
 800718e:	753b      	strb	r3, [r7, #20]
	uint16_t checkbyte= h+l;
 8007190:	7d7b      	ldrb	r3, [r7, #21]
 8007192:	b29a      	uxth	r2, r3
 8007194:	7d3b      	ldrb	r3, [r7, #20]
 8007196:	b29b      	uxth	r3, r3
 8007198:	4413      	add	r3, r2
 800719a:	827b      	strh	r3, [r7, #18]

	if(!(checksum == checkbyte))
 800719c:	8afa      	ldrh	r2, [r7, #22]
 800719e:	8a7b      	ldrh	r3, [r7, #18]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d001      	beq.n	80071a8 <is_valid+0xe4>
	{
		return -1;
 80071a4:	23ff      	movs	r3, #255	; 0xff
 80071a6:	e000      	b.n	80071aa <is_valid+0xe6>
	}

	return flag;
 80071a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3720      	adds	r7, #32
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	08010770 	.word	0x08010770
 80071b8:	08010774 	.word	0x08010774
 80071bc:	08010778 	.word	0x08010778

080071c0 <char_to_hex>:
/*
 * Flag keeps track of successful coordinate retrievals
 */

uint8_t char_to_hex(char c)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	4603      	mov	r3, r0
 80071c8:	71fb      	strb	r3, [r7, #7]
	if(c == '\0')
 80071ca:	79fb      	ldrb	r3, [r7, #7]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d101      	bne.n	80071d4 <char_to_hex+0x14>
	{
		return 0;
 80071d0:	2300      	movs	r3, #0
 80071d2:	e01e      	b.n	8007212 <char_to_hex+0x52>
	}
	if ((c >='0') &&(c <='9'))
 80071d4:	79fb      	ldrb	r3, [r7, #7]
 80071d6:	2b2f      	cmp	r3, #47	; 0x2f
 80071d8:	d906      	bls.n	80071e8 <char_to_hex+0x28>
 80071da:	79fb      	ldrb	r3, [r7, #7]
 80071dc:	2b39      	cmp	r3, #57	; 0x39
 80071de:	d803      	bhi.n	80071e8 <char_to_hex+0x28>
	{
		return (uint8_t)c - 48;
 80071e0:	79fb      	ldrb	r3, [r7, #7]
 80071e2:	3b30      	subs	r3, #48	; 0x30
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	e014      	b.n	8007212 <char_to_hex+0x52>
	}
	if((c >='a') &&(c <='f'))
 80071e8:	79fb      	ldrb	r3, [r7, #7]
 80071ea:	2b60      	cmp	r3, #96	; 0x60
 80071ec:	d906      	bls.n	80071fc <char_to_hex+0x3c>
 80071ee:	79fb      	ldrb	r3, [r7, #7]
 80071f0:	2b66      	cmp	r3, #102	; 0x66
 80071f2:	d803      	bhi.n	80071fc <char_to_hex+0x3c>
	{
		return (uint8_t)c - 87;
 80071f4:	79fb      	ldrb	r3, [r7, #7]
 80071f6:	3b57      	subs	r3, #87	; 0x57
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	e00a      	b.n	8007212 <char_to_hex+0x52>
	}
	if((c >='A') &&(c <='F'))
 80071fc:	79fb      	ldrb	r3, [r7, #7]
 80071fe:	2b40      	cmp	r3, #64	; 0x40
 8007200:	d906      	bls.n	8007210 <char_to_hex+0x50>
 8007202:	79fb      	ldrb	r3, [r7, #7]
 8007204:	2b46      	cmp	r3, #70	; 0x46
 8007206:	d803      	bhi.n	8007210 <char_to_hex+0x50>
	{
		return (uint8_t)c - 55;
 8007208:	79fb      	ldrb	r3, [r7, #7]
 800720a:	3b37      	subs	r3, #55	; 0x37
 800720c:	b2db      	uxtb	r3, r3
 800720e:	e000      	b.n	8007212 <char_to_hex+0x52>
	}
	return -1; //invalid charachter
 8007210:	23ff      	movs	r3, #255	; 0xff
}
 8007212:	4618      	mov	r0, r3
 8007214:	370c      	adds	r7, #12
 8007216:	46bd      	mov	sp, r7
 8007218:	bc80      	pop	{r7}
 800721a:	4770      	bx	lr

0800721c <parse_ZDA>:
 * Parser Functions:
 * Extract key data from NMEA message strings.
 */

uint8_t parse_ZDA(char* ZDAstring)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b088      	sub	sp, #32
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
	time_t t;
	struct tm *timepointer;

	t = time(NULL);
 8007224:	2000      	movs	r0, #0
 8007226:	f004 f847 	bl	800b2b8 <time>
 800722a:	4603      	mov	r3, r0
 800722c:	60fb      	str	r3, [r7, #12]
	timepointer = localtime(&t);
 800722e:	f107 030c 	add.w	r3, r7, #12
 8007232:	4618      	mov	r0, r3
 8007234:	f002 fac0 	bl	80097b8 <localtime>
 8007238:	61b8      	str	r0, [r7, #24]
	/* Get UTC time*/
	while(*ZDAstring++ != ',');
 800723a:	bf00      	nop
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	1c5a      	adds	r2, r3, #1
 8007240:	607a      	str	r2, [r7, #4]
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	2b2c      	cmp	r3, #44	; 0x2c
 8007246:	d1f9      	bne.n	800723c <parse_ZDA+0x20>
	char* temp = ZDAstring++;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	1c5a      	adds	r2, r3, #1
 800724c:	607a      	str	r2, [r7, #4]
 800724e:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < strlen(ZDAstring); ++i)
 8007250:	2300      	movs	r3, #0
 8007252:	61fb      	str	r3, [r7, #28]
 8007254:	e011      	b.n	800727a <parse_ZDA+0x5e>
	{
		if ((ZDAstring[i]==',')&&(ZDAstring[i+1] == ','))
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	4413      	add	r3, r2
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	2b2c      	cmp	r3, #44	; 0x2c
 8007260:	d108      	bne.n	8007274 <parse_ZDA+0x58>
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	3301      	adds	r3, #1
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	4413      	add	r3, r2
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	2b2c      	cmp	r3, #44	; 0x2c
 800726e:	d101      	bne.n	8007274 <parse_ZDA+0x58>
		{
			/* Data is invalid*/
			return -1;
 8007270:	23ff      	movs	r3, #255	; 0xff
 8007272:	e094      	b.n	800739e <parse_ZDA+0x182>
	for (int i = 0; i < strlen(ZDAstring); ++i)
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	3301      	adds	r3, #1
 8007278:	61fb      	str	r3, [r7, #28]
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f7f8 ffb2 	bl	80001e4 <strlen>
 8007280:	4602      	mov	r2, r0
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	429a      	cmp	r2, r3
 8007286:	d8e6      	bhi.n	8007256 <parse_ZDA+0x3a>
		}
	}
	timepointer->tm_hour = (temp[0]-48)*10+ (temp[1]-48)+2;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007290:	4613      	mov	r3, r2
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	4413      	add	r3, r2
 8007296:	005b      	lsls	r3, r3, #1
 8007298:	461a      	mov	r2, r3
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	3301      	adds	r3, #1
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	3b30      	subs	r3, #48	; 0x30
 80072a2:	4413      	add	r3, r2
 80072a4:	1c9a      	adds	r2, r3, #2
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	609a      	str	r2, [r3, #8]
	timepointer->tm_min = (temp[2]-48)*10+ (temp[3]-48)-1;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	3302      	adds	r3, #2
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80072b4:	4613      	mov	r3, r2
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	4413      	add	r3, r2
 80072ba:	005b      	lsls	r3, r3, #1
 80072bc:	461a      	mov	r2, r3
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	3303      	adds	r3, #3
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	3b30      	subs	r3, #48	; 0x30
 80072c6:	4413      	add	r3, r2
 80072c8:	1e5a      	subs	r2, r3, #1
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	605a      	str	r2, [r3, #4]
	timepointer->tm_sec = (temp[4]-48)*10+ (temp[5]-48) -1 ;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	3304      	adds	r3, #4
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80072d8:	4613      	mov	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	4413      	add	r3, r2
 80072de:	005b      	lsls	r3, r3, #1
 80072e0:	461a      	mov	r2, r3
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	3305      	adds	r3, #5
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	3b30      	subs	r3, #48	; 0x30
 80072ea:	4413      	add	r3, r2
 80072ec:	1e5a      	subs	r2, r3, #1
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	601a      	str	r2, [r3, #0]
	while(*ZDAstring++ != ',');
 80072f2:	bf00      	nop
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	1c5a      	adds	r2, r3, #1
 80072f8:	607a      	str	r2, [r7, #4]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	2b2c      	cmp	r3, #44	; 0x2c
 80072fe:	d1f9      	bne.n	80072f4 <parse_ZDA+0xd8>
	temp = ZDAstring;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	617b      	str	r3, [r7, #20]
	timepointer->tm_mday = (temp[0]-48)*10+ (temp[1]-48);
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800730c:	4613      	mov	r3, r2
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	4413      	add	r3, r2
 8007312:	005b      	lsls	r3, r3, #1
 8007314:	461a      	mov	r2, r3
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	3301      	adds	r3, #1
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	3b30      	subs	r3, #48	; 0x30
 800731e:	441a      	add	r2, r3
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	60da      	str	r2, [r3, #12]
	timepointer->tm_mon = (temp[3]-48)*10+ (temp[4]-48)-1;
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	3303      	adds	r3, #3
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800732e:	4613      	mov	r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4413      	add	r3, r2
 8007334:	005b      	lsls	r3, r3, #1
 8007336:	461a      	mov	r2, r3
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	3304      	adds	r3, #4
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	3b30      	subs	r3, #48	; 0x30
 8007340:	4413      	add	r3, r2
 8007342:	1e5a      	subs	r2, r3, #1
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	611a      	str	r2, [r3, #16]
	timepointer->tm_year = (temp[6]-48)*1000 +(temp[7]-48)*100 + (temp[8]-48)*10 +(temp[9]-48)-1900;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	3306      	adds	r3, #6
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	3b30      	subs	r3, #48	; 0x30
 8007350:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007354:	fb02 f203 	mul.w	r2, r2, r3
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	3307      	adds	r3, #7
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	3b30      	subs	r3, #48	; 0x30
 8007360:	2164      	movs	r1, #100	; 0x64
 8007362:	fb01 f303 	mul.w	r3, r1, r3
 8007366:	18d1      	adds	r1, r2, r3
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	3308      	adds	r3, #8
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007372:	4613      	mov	r3, r2
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	4413      	add	r3, r2
 8007378:	005b      	lsls	r3, r3, #1
 800737a:	18ca      	adds	r2, r1, r3
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	3309      	adds	r3, #9
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	3b30      	subs	r3, #48	; 0x30
 8007384:	4413      	add	r3, r2
 8007386:	f2a3 726c 	subw	r2, r3, #1900	; 0x76c
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	615a      	str	r2, [r3, #20]
	time_t result;

	 result = mktime(timepointer);
 800738e:	69b8      	ldr	r0, [r7, #24]
 8007390:	f002 fe1a 	bl	8009fc8 <mktime>
 8007394:	6138      	str	r0, [r7, #16]
	 eTime =  result;
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	4a03      	ldr	r2, [pc, #12]	; (80073a8 <parse_ZDA+0x18c>)
 800739a:	6013      	str	r3, [r2, #0]
	return 0;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3720      	adds	r7, #32
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	200007c0 	.word	0x200007c0

080073ac <Parse_GLL>:

uint8_t Parse_GLL(char* GLLstring)
{
 80073ac:	b5b0      	push	{r4, r5, r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
	/* Extract latitude*/
	uint8_t flag = 0;
 80073b4:	2300      	movs	r3, #0
 80073b6:	75fb      	strb	r3, [r7, #23]
	GLLstring+= 6;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	3306      	adds	r3, #6
 80073bc:	607b      	str	r3, [r7, #4]
	char* temp = GLLstring;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	613b      	str	r3, [r7, #16]
	uint8_t count = 0;
 80073c2:	2300      	movs	r3, #0
 80073c4:	75bb      	strb	r3, [r7, #22]
	while(*GLLstring++ != ',')
 80073c6:	e002      	b.n	80073ce <Parse_GLL+0x22>
	{
		count++;
 80073c8:	7dbb      	ldrb	r3, [r7, #22]
 80073ca:	3301      	adds	r3, #1
 80073cc:	75bb      	strb	r3, [r7, #22]
	while(*GLLstring++ != ',')
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	1c5a      	adds	r2, r3, #1
 80073d2:	607a      	str	r2, [r7, #4]
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	2b2c      	cmp	r3, #44	; 0x2c
 80073d8:	d1f6      	bne.n	80073c8 <Parse_GLL+0x1c>
	}
	if((count > 0))
 80073da:	7dbb      	ldrb	r3, [r7, #22]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d02e      	beq.n	800743e <Parse_GLL+0x92>
	{
		temp[count] = '\0';
 80073e0:	7dbb      	ldrb	r3, [r7, #22]
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	4413      	add	r3, r2
 80073e6:	2200      	movs	r2, #0
 80073e8:	701a      	strb	r2, [r3, #0]
		int8_t sign = 1 -2*( temp[++count] =='S');
 80073ea:	7dbb      	ldrb	r3, [r7, #22]
 80073ec:	3301      	adds	r3, #1
 80073ee:	75bb      	strb	r3, [r7, #22]
 80073f0:	7dbb      	ldrb	r3, [r7, #22]
 80073f2:	693a      	ldr	r2, [r7, #16]
 80073f4:	4413      	add	r3, r2
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	2b53      	cmp	r3, #83	; 0x53
 80073fa:	d102      	bne.n	8007402 <Parse_GLL+0x56>
 80073fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007400:	e000      	b.n	8007404 <Parse_GLL+0x58>
 8007402:	2301      	movs	r3, #1
 8007404:	73fb      	strb	r3, [r7, #15]
		GPS_coord.lat = sign*atof(temp);
 8007406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800740a:	4618      	mov	r0, r3
 800740c:	f7f9 f89a 	bl	8000544 <__aeabi_i2d>
 8007410:	4604      	mov	r4, r0
 8007412:	460d      	mov	r5, r1
 8007414:	6938      	ldr	r0, [r7, #16]
 8007416:	f002 f9a1 	bl	800975c <atof>
 800741a:	4602      	mov	r2, r0
 800741c:	460b      	mov	r3, r1
 800741e:	4620      	mov	r0, r4
 8007420:	4629      	mov	r1, r5
 8007422:	f7f9 f8f5 	bl	8000610 <__aeabi_dmul>
 8007426:	4603      	mov	r3, r0
 8007428:	460c      	mov	r4, r1
 800742a:	4618      	mov	r0, r3
 800742c:	4621      	mov	r1, r4
 800742e:	f7f9 fbe7 	bl	8000c00 <__aeabi_d2f>
 8007432:	4602      	mov	r2, r0
 8007434:	4b28      	ldr	r3, [pc, #160]	; (80074d8 <Parse_GLL+0x12c>)
 8007436:	601a      	str	r2, [r3, #0]
		flag++;
 8007438:	7dfb      	ldrb	r3, [r7, #23]
 800743a:	3301      	adds	r3, #1
 800743c:	75fb      	strb	r3, [r7, #23]
	}

	/* Extract longitude */
	while(*GLLstring++ !=',');
 800743e:	bf00      	nop
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	1c5a      	adds	r2, r3, #1
 8007444:	607a      	str	r2, [r7, #4]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	2b2c      	cmp	r3, #44	; 0x2c
 800744a:	d1f9      	bne.n	8007440 <Parse_GLL+0x94>
	temp = GLLstring;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	613b      	str	r3, [r7, #16]
	count = 0;
 8007450:	2300      	movs	r3, #0
 8007452:	75bb      	strb	r3, [r7, #22]
	while(*GLLstring++ != ',')
 8007454:	e002      	b.n	800745c <Parse_GLL+0xb0>
	{
			count++;
 8007456:	7dbb      	ldrb	r3, [r7, #22]
 8007458:	3301      	adds	r3, #1
 800745a:	75bb      	strb	r3, [r7, #22]
	while(*GLLstring++ != ',')
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	1c5a      	adds	r2, r3, #1
 8007460:	607a      	str	r2, [r7, #4]
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	2b2c      	cmp	r3, #44	; 0x2c
 8007466:	d1f6      	bne.n	8007456 <Parse_GLL+0xaa>
	}
	if((count > 0))
 8007468:	7dbb      	ldrb	r3, [r7, #22]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d02e      	beq.n	80074cc <Parse_GLL+0x120>
	{
			temp[count] = '\0';
 800746e:	7dbb      	ldrb	r3, [r7, #22]
 8007470:	693a      	ldr	r2, [r7, #16]
 8007472:	4413      	add	r3, r2
 8007474:	2200      	movs	r2, #0
 8007476:	701a      	strb	r2, [r3, #0]
			int8_t sign = 1 -2*( temp[++count] =='W');
 8007478:	7dbb      	ldrb	r3, [r7, #22]
 800747a:	3301      	adds	r3, #1
 800747c:	75bb      	strb	r3, [r7, #22]
 800747e:	7dbb      	ldrb	r3, [r7, #22]
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	4413      	add	r3, r2
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	2b57      	cmp	r3, #87	; 0x57
 8007488:	d102      	bne.n	8007490 <Parse_GLL+0xe4>
 800748a:	f04f 33ff 	mov.w	r3, #4294967295
 800748e:	e000      	b.n	8007492 <Parse_GLL+0xe6>
 8007490:	2301      	movs	r3, #1
 8007492:	73bb      	strb	r3, [r7, #14]
			GPS_coord.longi = sign*atof(temp);
 8007494:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007498:	4618      	mov	r0, r3
 800749a:	f7f9 f853 	bl	8000544 <__aeabi_i2d>
 800749e:	4604      	mov	r4, r0
 80074a0:	460d      	mov	r5, r1
 80074a2:	6938      	ldr	r0, [r7, #16]
 80074a4:	f002 f95a 	bl	800975c <atof>
 80074a8:	4602      	mov	r2, r0
 80074aa:	460b      	mov	r3, r1
 80074ac:	4620      	mov	r0, r4
 80074ae:	4629      	mov	r1, r5
 80074b0:	f7f9 f8ae 	bl	8000610 <__aeabi_dmul>
 80074b4:	4603      	mov	r3, r0
 80074b6:	460c      	mov	r4, r1
 80074b8:	4618      	mov	r0, r3
 80074ba:	4621      	mov	r1, r4
 80074bc:	f7f9 fba0 	bl	8000c00 <__aeabi_d2f>
 80074c0:	4602      	mov	r2, r0
 80074c2:	4b05      	ldr	r3, [pc, #20]	; (80074d8 <Parse_GLL+0x12c>)
 80074c4:	605a      	str	r2, [r3, #4]
			flag++;
 80074c6:	7dfb      	ldrb	r3, [r7, #23]
 80074c8:	3301      	adds	r3, #1
 80074ca:	75fb      	strb	r3, [r7, #23]

	}

return flag;
 80074cc:	7dfb      	ldrb	r3, [r7, #23]

}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3718      	adds	r7, #24
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bdb0      	pop	{r4, r5, r7, pc}
 80074d6:	bf00      	nop
 80074d8:	200007c8 	.word	0x200007c8

080074dc <parse_GSA>:

uint8_t parse_GSA(char* GSA_string)
{
 80074dc:	b480      	push	{r7}
 80074de:	b089      	sub	sp, #36	; 0x24
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
	/* Isolate Dilation of Precisions*/
	uint8_t count = 0;
 80074e4:	2300      	movs	r3, #0
 80074e6:	77fb      	strb	r3, [r7, #31]
	char* t = GSA_string;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	61bb      	str	r3, [r7, #24]
	while(count < 2)
 80074ec:	e008      	b.n	8007500 <parse_GSA+0x24>
	{
		if(*t++==',')count++;
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	1c5a      	adds	r2, r3, #1
 80074f2:	61ba      	str	r2, [r7, #24]
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	2b2c      	cmp	r3, #44	; 0x2c
 80074f8:	d102      	bne.n	8007500 <parse_GSA+0x24>
 80074fa:	7ffb      	ldrb	r3, [r7, #31]
 80074fc:	3301      	adds	r3, #1
 80074fe:	77fb      	strb	r3, [r7, #31]
	while(count < 2)
 8007500:	7ffb      	ldrb	r3, [r7, #31]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d9f3      	bls.n	80074ee <parse_GSA+0x12>
	}
	diag.fix_type = (*t++-48);
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	1c5a      	adds	r2, r3, #1
 800750a:	61ba      	str	r2, [r7, #24]
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	3b30      	subs	r3, #48	; 0x30
 8007510:	b2da      	uxtb	r2, r3
 8007512:	4b45      	ldr	r3, [pc, #276]	; (8007628 <parse_GSA+0x14c>)
 8007514:	71da      	strb	r2, [r3, #7]

	//field 3 - 15 indicate satelites
	uint8_t numsats = 0;
 8007516:	2300      	movs	r3, #0
 8007518:	75fb      	strb	r3, [r7, #23]
	uint8_t numfields = 0;
 800751a:	2300      	movs	r3, #0
 800751c:	75bb      	strb	r3, [r7, #22]
	while(numfields < 12)
 800751e:	e015      	b.n	800754c <parse_GSA+0x70>
	{
		uint8_t count = 0;
 8007520:	2300      	movs	r3, #0
 8007522:	757b      	strb	r3, [r7, #21]
		while(*++t !=',')count++;
 8007524:	e002      	b.n	800752c <parse_GSA+0x50>
 8007526:	7d7b      	ldrb	r3, [r7, #21]
 8007528:	3301      	adds	r3, #1
 800752a:	757b      	strb	r3, [r7, #21]
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	3301      	adds	r3, #1
 8007530:	61bb      	str	r3, [r7, #24]
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	2b2c      	cmp	r3, #44	; 0x2c
 8007538:	d1f5      	bne.n	8007526 <parse_GSA+0x4a>
		if(count > 0)
 800753a:	7d7b      	ldrb	r3, [r7, #21]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d002      	beq.n	8007546 <parse_GSA+0x6a>
		{
			numsats++;
 8007540:	7dfb      	ldrb	r3, [r7, #23]
 8007542:	3301      	adds	r3, #1
 8007544:	75fb      	strb	r3, [r7, #23]
		}
		numfields++;
 8007546:	7dbb      	ldrb	r3, [r7, #22]
 8007548:	3301      	adds	r3, #1
 800754a:	75bb      	strb	r3, [r7, #22]
	while(numfields < 12)
 800754c:	7dbb      	ldrb	r3, [r7, #22]
 800754e:	2b0b      	cmp	r3, #11
 8007550:	d9e6      	bls.n	8007520 <parse_GSA+0x44>

	}
	diag.num_sats = numsats;
 8007552:	4a35      	ldr	r2, [pc, #212]	; (8007628 <parse_GSA+0x14c>)
 8007554:	7dfb      	ldrb	r3, [r7, #23]
 8007556:	7193      	strb	r3, [r2, #6]
	DOP_t dop[3] = {0};
 8007558:	f107 0308 	add.w	r3, r7, #8
 800755c:	2200      	movs	r2, #0
 800755e:	601a      	str	r2, [r3, #0]
 8007560:	809a      	strh	r2, [r3, #4]
	for (int i = 0; i < 3; ++i)
 8007562:	2300      	movs	r3, #0
 8007564:	613b      	str	r3, [r7, #16]
 8007566:	e043      	b.n	80075f0 <parse_GSA+0x114>
	{
		//get digit
		while(*++t != '.')
		{
			dop[i].digit = dop[i].digit*10 +(*t-48);
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	005b      	lsls	r3, r3, #1
 800756c:	f107 0220 	add.w	r2, r7, #32
 8007570:	4413      	add	r3, r2
 8007572:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8007576:	461a      	mov	r2, r3
 8007578:	0092      	lsls	r2, r2, #2
 800757a:	4413      	add	r3, r2
 800757c:	005b      	lsls	r3, r3, #1
 800757e:	b2da      	uxtb	r2, r3
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	4413      	add	r3, r2
 8007586:	b2db      	uxtb	r3, r3
 8007588:	3b30      	subs	r3, #48	; 0x30
 800758a:	b2da      	uxtb	r2, r3
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	005b      	lsls	r3, r3, #1
 8007590:	f107 0120 	add.w	r1, r7, #32
 8007594:	440b      	add	r3, r1
 8007596:	f803 2c18 	strb.w	r2, [r3, #-24]
		while(*++t != '.')
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	3301      	adds	r3, #1
 800759e:	61bb      	str	r3, [r7, #24]
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	2b2e      	cmp	r3, #46	; 0x2e
 80075a6:	d1df      	bne.n	8007568 <parse_GSA+0x8c>
		}
		while(*++t != ',')
 80075a8:	e018      	b.n	80075dc <parse_GSA+0x100>
		{
			dop[i].precision = dop[i].precision*10+(*t-48);
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	005b      	lsls	r3, r3, #1
 80075ae:	f107 0220 	add.w	r2, r7, #32
 80075b2:	4413      	add	r3, r2
 80075b4:	f813 3c17 	ldrb.w	r3, [r3, #-23]
 80075b8:	461a      	mov	r2, r3
 80075ba:	0092      	lsls	r2, r2, #2
 80075bc:	4413      	add	r3, r2
 80075be:	005b      	lsls	r3, r3, #1
 80075c0:	b2da      	uxtb	r2, r3
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	4413      	add	r3, r2
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	3b30      	subs	r3, #48	; 0x30
 80075cc:	b2da      	uxtb	r2, r3
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	005b      	lsls	r3, r3, #1
 80075d2:	f107 0120 	add.w	r1, r7, #32
 80075d6:	440b      	add	r3, r1
 80075d8:	f803 2c17 	strb.w	r2, [r3, #-23]
		while(*++t != ',')
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	3301      	adds	r3, #1
 80075e0:	61bb      	str	r3, [r7, #24]
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	2b2c      	cmp	r3, #44	; 0x2c
 80075e8:	d1df      	bne.n	80075aa <parse_GSA+0xce>
	for (int i = 0; i < 3; ++i)
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	3301      	adds	r3, #1
 80075ee:	613b      	str	r3, [r7, #16]
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	ddd1      	ble.n	800759a <parse_GSA+0xbe>
	}
	/*
	 * If successful, add to diagnostic struct
	 *
	 */
diag.HDOP = dop[0];
 80075f6:	4b0c      	ldr	r3, [pc, #48]	; (8007628 <parse_GSA+0x14c>)
 80075f8:	3302      	adds	r3, #2
 80075fa:	f107 0208 	add.w	r2, r7, #8
 80075fe:	8812      	ldrh	r2, [r2, #0]
 8007600:	801a      	strh	r2, [r3, #0]
diag.PDOP = dop[1];
 8007602:	4b09      	ldr	r3, [pc, #36]	; (8007628 <parse_GSA+0x14c>)
 8007604:	461a      	mov	r2, r3
 8007606:	f107 030a 	add.w	r3, r7, #10
 800760a:	881b      	ldrh	r3, [r3, #0]
 800760c:	8013      	strh	r3, [r2, #0]
diag.VDOP = dop[2];
 800760e:	4b06      	ldr	r3, [pc, #24]	; (8007628 <parse_GSA+0x14c>)
 8007610:	3304      	adds	r3, #4
 8007612:	f107 020c 	add.w	r2, r7, #12
 8007616:	8812      	ldrh	r2, [r2, #0]
 8007618:	801a      	strh	r2, [r3, #0]
	return 0;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3724      	adds	r7, #36	; 0x24
 8007620:	46bd      	mov	sp, r7
 8007622:	bc80      	pop	{r7}
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	200007b4 	.word	0x200007b4

0800762c <init_GPS>:

//================== 5. Peripheral Function Definitions ===============================

GPS_Init_msg_t init_GPS(GPS_Handle_Typedef *hgps)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]

	if(MX_DMA_Init() != HAL_OK)  return GPS_Init_Periph_Config_Error;
 8007634:	f7ff fc3c 	bl	8006eb0 <MX_DMA_Init>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d001      	beq.n	8007642 <init_GPS+0x16>
 800763e:	2306      	movs	r3, #6
 8007640:	e074      	b.n	800772c <init_GPS+0x100>
	if(MX_UART4_Init() != HAL_OK) return GPS_Init_Periph_Config_Error;
 8007642:	f7ff fc05 	bl	8006e50 <MX_UART4_Init>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d001      	beq.n	8007650 <init_GPS+0x24>
 800764c:	2306      	movs	r3, #6
 800764e:	e06d      	b.n	800772c <init_GPS+0x100>
	if(MX_TIM2_Init() != HAL_OK) return GPS_Init_Periph_Config_Error;
 8007650:	f7ff fb46 	bl	8006ce0 <MX_TIM2_Init>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d001      	beq.n	800765e <init_GPS+0x32>
 800765a:	2306      	movs	r3, #6
 800765c:	e066      	b.n	800772c <init_GPS+0x100>

	/* attach handlers to gps instances*/
	hgps->gps_huart = &huart4;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4a34      	ldr	r2, [pc, #208]	; (8007734 <init_GPS+0x108>)
 8007662:	601a      	str	r2, [r3, #0]
	hgps->gps_htim  = &htim2;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a34      	ldr	r2, [pc, #208]	; (8007738 <init_GPS+0x10c>)
 8007668:	609a      	str	r2, [r3, #8]
	hgps->gps_hdmamem = &hdma_memtomem_dma1_channel1;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a33      	ldr	r2, [pc, #204]	; (800773c <init_GPS+0x110>)
 800766e:	605a      	str	r2, [r3, #4]

	/* Attach pointers to data buffer */
	hgps->GPS_Tx_Buffer = DMA_TX_Buffer;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a33      	ldr	r2, [pc, #204]	; (8007740 <init_GPS+0x114>)
 8007674:	611a      	str	r2, [r3, #16]
	hgps->GPS_Rx_Buffer = DMA_RX_Buffer;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4a32      	ldr	r2, [pc, #200]	; (8007744 <init_GPS+0x118>)
 800767a:	60da      	str	r2, [r3, #12]
	hgps->GPS_Mem_Buffer = GNSS_Buffer;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a32      	ldr	r2, [pc, #200]	; (8007748 <init_GPS+0x11c>)
 8007680:	615a      	str	r2, [r3, #20]

	//poll a byte to see if reciever online
	uint8_t test_byte;
	if(HAL_UART_Receive(hgps->gps_huart,&test_byte,1,250) != HAL_OK)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6818      	ldr	r0, [r3, #0]
 8007686:	f107 010e 	add.w	r1, r7, #14
 800768a:	23fa      	movs	r3, #250	; 0xfa
 800768c:	2201      	movs	r2, #1
 800768e:	f7fe f888 	bl	80057a2 <HAL_UART_Receive>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d001      	beq.n	800769c <init_GPS+0x70>
	{
		return GPS_Init_Offline_Error;
 8007698:	2307      	movs	r3, #7
 800769a:	e047      	b.n	800772c <init_GPS+0x100>
	}
	UBX_MSG_t GPS_Acknowledgement_State = UBX_Send_Ack(hgps);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f93d 	bl	800791c <UBX_Send_Ack>
 80076a2:	4603      	mov	r3, r0
 80076a4:	73fb      	strb	r3, [r7, #15]
	if(GPS_Acknowledgement_State == UBX_ACK_ACK)
 80076a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d115      	bne.n	80076da <init_GPS+0xae>
	{
		Clear_Buffer(hgps->GPS_Tx_Buffer,DMA_TX_BUFFER_SIZE);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7ff fcf6 	bl	80070a8 <Clear_Buffer>
		Clear_Buffer(hgps->GPS_Mem_Buffer,GNSS_BUFFER_SIZE);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	695b      	ldr	r3, [r3, #20]
 80076c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80076c4:	4618      	mov	r0, r3
 80076c6:	f7ff fcef 	bl	80070a8 <Clear_Buffer>
		if( UBX_Configure_Baudrate(hgps) != UBX_ACK_ACK)
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 fa56 	bl	8007b7c <UBX_Configure_Baudrate>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d021      	beq.n	800771a <init_GPS+0xee>
		{
			return GPS_Init_Baud_Config_Error;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e028      	b.n	800772c <init_GPS+0x100>
		}

	}else if(GPS_Acknowledgement_State == UBX_TIMEOUT_Rx)
 80076da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076de:	f113 0f03 	cmn.w	r3, #3
 80076e2:	d113      	bne.n	800770c <init_GPS+0xe0>
		/*
		 * If Not recieving Ack-Ack on 115200, it could be possible that the device is
		 * already configured. change baud rate and try again
		 */
		//configure baud rate to 115200 and try again
		if(USART_Set_Baudrate(hgps,115200) == HAL_OK)
 80076e4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 f89d 	bl	8007828 <USART_Set_Baudrate>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d104      	bne.n	80076fe <init_GPS+0xd2>
		{
			GPS_Acknowledgement_State = UBX_Send_Ack(hgps);
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 f911 	bl	800791c <UBX_Send_Ack>
 80076fa:	4603      	mov	r3, r0
 80076fc:	73fb      	strb	r3, [r7, #15]
		}
		if(GPS_Acknowledgement_State == UBX_TIMEOUT_Rx)
 80076fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007702:	f113 0f03 	cmn.w	r3, #3
 8007706:	d108      	bne.n	800771a <init_GPS+0xee>
		{
			return GPS_Init_Ack_Error;
 8007708:	2302      	movs	r3, #2
 800770a:	e00f      	b.n	800772c <init_GPS+0x100>
		}


	}else if(GPS_Acknowledgement_State == UBX_TIMEOUT_Tx)
 800770c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007710:	f113 0f02 	cmn.w	r3, #2
 8007714:	d101      	bne.n	800771a <init_GPS+0xee>
	{
		return GPS_Init_Ack_Tx_Error;
 8007716:	2305      	movs	r3, #5
 8007718:	e008      	b.n	800772c <init_GPS+0x100>
	}
	//configure message buffer
	if( UBX_Configure_Messages(hgps) != UBX_OK )
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fa78 	bl	8007c10 <UBX_Configure_Messages>
 8007720:	4603      	mov	r3, r0
 8007722:	2b02      	cmp	r3, #2
 8007724:	d001      	beq.n	800772a <init_GPS+0xfe>
	{
		return GPS_Init_MSG_Config_Error;
 8007726:	2304      	movs	r3, #4
 8007728:	e000      	b.n	800772c <init_GPS+0x100>
	}
	return GPS_Init_OK;
 800772a:	2301      	movs	r3, #1
}
 800772c:	4618      	mov	r0, r3
 800772e:	3710      	adds	r7, #16
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	2000101c 	.word	0x2000101c
 8007738:	2000109c 	.word	0x2000109c
 800773c:	200007d0 	.word	0x200007d0
 8007740:	20001928 	.word	0x20001928
 8007744:	2000081c 	.word	0x2000081c
 8007748:	200010dc 	.word	0x200010dc

0800774c <deinit_GPS>:

GPS_Init_msg_t deinit_GPS(GPS_Handle_Typedef* hgps)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
	/* Deinit Timer */
	if(hgps->gps_htim->Instance != GPS_TIM_PORT)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800775e:	d004      	beq.n	800776a <deinit_GPS+0x1e>
	{
		hgps->gps_htim->Instance = GPS_TIM_PORT;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007768:	601a      	str	r2, [r3, #0]
	}
	//Disable Timer
	HAL_TIM_Base_Stop_IT(hgps->gps_htim);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	4618      	mov	r0, r3
 8007770:	f7fc fc04 	bl	8003f7c <HAL_TIM_Base_Stop_IT>
	if(HAL_TIM_Base_DeInit(hgps->gps_htim) != HAL_OK)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	4618      	mov	r0, r3
 800777a:	f7fc fb7b 	bl	8003e74 <HAL_TIM_Base_DeInit>
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d001      	beq.n	8007788 <deinit_GPS+0x3c>
	{
		return GPS_Init_Periph_Config_Error;
 8007784:	2306      	movs	r3, #6
 8007786:	e046      	b.n	8007816 <deinit_GPS+0xca>
	}
	//detach instance
	hgps->gps_htim = NULL;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	609a      	str	r2, [r3, #8]
	/* De init UART*/
	if(hgps->gps_huart->Instance != GPS_UART_PORT)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a22      	ldr	r2, [pc, #136]	; (8007820 <deinit_GPS+0xd4>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d003      	beq.n	80077a2 <deinit_GPS+0x56>
	{
		hgps->gps_huart->Instance = GPS_UART_PORT;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a20      	ldr	r2, [pc, #128]	; (8007820 <deinit_GPS+0xd4>)
 80077a0:	601a      	str	r2, [r3, #0]
	}
	if(HAL_UART_DeInit(hgps->gps_huart) != HAL_OK)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7fd ff33 	bl	8005612 <HAL_UART_DeInit>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d001      	beq.n	80077b6 <deinit_GPS+0x6a>
	{
		return GPS_Init_Periph_Config_Error;
 80077b2:	2306      	movs	r3, #6
 80077b4:	e02f      	b.n	8007816 <deinit_GPS+0xca>
	}
	hgps->gps_huart = NULL;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	601a      	str	r2, [r3, #0]
	/* De init DMA Memory Stream*/
	if(hgps->gps_hdmamem->Instance != DMA1_Channel1)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a18      	ldr	r2, [pc, #96]	; (8007824 <deinit_GPS+0xd8>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d003      	beq.n	80077d0 <deinit_GPS+0x84>
	{
		hgps->gps_hdmamem->Instance = DMA1_Channel1;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	4a15      	ldr	r2, [pc, #84]	; (8007824 <deinit_GPS+0xd8>)
 80077ce:	601a      	str	r2, [r3, #0]
	}
	if(HAL_DMA_DeInit(hgps->gps_hdmamem) != HAL_OK)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7f9 fec9 	bl	800156c <HAL_DMA_DeInit>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d001      	beq.n	80077e4 <deinit_GPS+0x98>
	{
		return GPS_Init_Periph_Config_Error;
 80077e0:	2306      	movs	r3, #6
 80077e2:	e018      	b.n	8007816 <deinit_GPS+0xca>
	}
	hgps->gps_hdmamem = NULL;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	605a      	str	r2, [r3, #4]

	/* Clear memory buffers*/
	Clear_Buffer(hgps->GPS_Rx_Buffer,DMA_RX_BUFFER_SIZE);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7ff fc58 	bl	80070a8 <Clear_Buffer>
	Clear_Buffer(hgps->GPS_Tx_Buffer,DMA_TX_BUFFER_SIZE);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007800:	4618      	mov	r0, r3
 8007802:	f7ff fc51 	bl	80070a8 <Clear_Buffer>
	Clear_Buffer(hgps->GPS_Mem_Buffer,GNSS_BUFFER_SIZE);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	695b      	ldr	r3, [r3, #20]
 800780a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800780e:	4618      	mov	r0, r3
 8007810:	f7ff fc4a 	bl	80070a8 <Clear_Buffer>


	return GPS_Init_OK;
 8007814:	2301      	movs	r3, #1
}
 8007816:	4618      	mov	r0, r3
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	40004c00 	.word	0x40004c00
 8007824:	40020008 	.word	0x40020008

08007828 <USART_Set_Baudrate>:

HAL_StatusTypeDef USART_Set_Baudrate(GPS_Handle_Typedef* hgps,uint32_t baud)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
	//disable UART peripheral and change baud rate
 	 hgps->gps_huart->Instance->CR1 &= ~USART_CR1_UE;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	6812      	ldr	r2, [r2, #0]
 800783c:	6812      	ldr	r2, [r2, #0]
 800783e:	6812      	ldr	r2, [r2, #0]
 8007840:	f022 0201 	bic.w	r2, r2, #1
 8007844:	601a      	str	r2, [r3, #0]
 	 hgps->gps_huart->Init.BaudRate = baud;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	683a      	ldr	r2, [r7, #0]
 800784c:	605a      	str	r2, [r3, #4]
	 if(HAL_UART_Init(hgps->gps_huart) != HAL_OK)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4618      	mov	r0, r3
 8007854:	f7fd fe8f 	bl	8005576 <HAL_UART_Init>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d001      	beq.n	8007862 <USART_Set_Baudrate+0x3a>
	 {
		return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e056      	b.n	8007910 <USART_Set_Baudrate+0xe8>
	 }
	 hgps->gps_huart->Instance->CR1 |= USART_CR1_UE;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	6812      	ldr	r2, [r2, #0]
 800786c:	6812      	ldr	r2, [r2, #0]
 800786e:	6812      	ldr	r2, [r2, #0]
 8007870:	f042 0201 	orr.w	r2, r2, #1
 8007874:	601a      	str	r2, [r3, #0]
	 //clear all errors
	 //clear framing error
	 if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_FE) == SET)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	69db      	ldr	r3, [r3, #28]
 800787e:	f003 0302 	and.w	r3, r3, #2
 8007882:	2b02      	cmp	r3, #2
 8007884:	d104      	bne.n	8007890 <USART_Set_Baudrate+0x68>
	 {
	 	__HAL_UART_CLEAR_FEFLAG(hgps->gps_huart);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2202      	movs	r2, #2
 800788e:	621a      	str	r2, [r3, #32]
	 }
	 //clear noise error
	 if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_NE) == SET)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	69db      	ldr	r3, [r3, #28]
 8007898:	f003 0304 	and.w	r3, r3, #4
 800789c:	2b04      	cmp	r3, #4
 800789e:	d104      	bne.n	80078aa <USART_Set_Baudrate+0x82>
	 {
	 	__HAL_UART_CLEAR_NEFLAG(hgps->gps_huart);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2204      	movs	r2, #4
 80078a8:	621a      	str	r2, [r3, #32]
	 }
	 //clear overun error
	 if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_ORE) == SET)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	69db      	ldr	r3, [r3, #28]
 80078b2:	f003 0308 	and.w	r3, r3, #8
 80078b6:	2b08      	cmp	r3, #8
 80078b8:	d10a      	bne.n	80078d0 <USART_Set_Baudrate+0xa8>
	 {
	 	uint8_t temp = hgps->gps_huart->Instance->RDR;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	73fb      	strb	r3, [r7, #15]
	 	(void)temp;
	 	__HAL_UART_CLEAR_OREFLAG(hgps->gps_huart);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2208      	movs	r2, #8
 80078ce:	621a      	str	r2, [r3, #32]
	 }
	 //clear parity errors
	 if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_PE) == SET)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	69db      	ldr	r3, [r3, #28]
 80078d8:	f003 0301 	and.w	r3, r3, #1
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d104      	bne.n	80078ea <USART_Set_Baudrate+0xc2>
	 {
	 	__HAL_UART_CLEAR_PEFLAG(hgps->gps_huart);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2201      	movs	r2, #1
 80078e8:	621a      	str	r2, [r3, #32]
	 }
	 //clear hanging idle flag
	 if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_IDLE) == SET)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	f003 0310 	and.w	r3, r3, #16
 80078f6:	2b10      	cmp	r3, #16
 80078f8:	d104      	bne.n	8007904 <USART_Set_Baudrate+0xdc>
	 {
	  	__HAL_UART_CLEAR_IDLEFLAG(hgps->gps_huart);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2210      	movs	r2, #16
 8007902:	621a      	str	r2, [r3, #32]
     }
	 //increase Timeout value to allow for longer waits
	 __HAL_TIM_SET_COMPARE(hgps->gps_htim,TIM_CHANNEL_1,576000);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a03      	ldr	r2, [pc, #12]	; (8007918 <USART_Set_Baudrate+0xf0>)
 800790c:	635a      	str	r2, [r3, #52]	; 0x34
	 return HAL_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3710      	adds	r7, #16
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	0008ca00 	.word	0x0008ca00

0800791c <UBX_Send_Ack>:

//======================= 6. UBX Function Definitions =================================

UBX_MSG_t UBX_Send_Ack(GPS_Handle_Typedef *hgps)
{
 800791c:	b5b0      	push	{r4, r5, r7, lr}
 800791e:	b092      	sub	sp, #72	; 0x48
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]

	 uint8_t ubx_ack_string[] = {0xB5 ,0x62 ,0x06 ,0x09 ,0x0D ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0xFF ,0xFF ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x17 ,0x31 ,0xBF };
 8007924:	4b90      	ldr	r3, [pc, #576]	; (8007b68 <UBX_Send_Ack+0x24c>)
 8007926:	f107 0418 	add.w	r4, r7, #24
 800792a:	461d      	mov	r5, r3
 800792c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800792e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007930:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007934:	6020      	str	r0, [r4, #0]
 8007936:	3404      	adds	r4, #4
 8007938:	7021      	strb	r1, [r4, #0]
	 int size = (sizeof(ubx_ack_string)/sizeof(*ubx_ack_string));
 800793a:	2315      	movs	r3, #21
 800793c:	63bb      	str	r3, [r7, #56]	; 0x38
	 for (int i = 0; i < size ; ++i)
 800793e:	2300      	movs	r3, #0
 8007940:	647b      	str	r3, [r7, #68]	; 0x44
 8007942:	e00c      	b.n	800795e <UBX_Send_Ack+0x42>
	 {
	  	hgps->GPS_Tx_Buffer[i] = ubx_ack_string[i];
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	691a      	ldr	r2, [r3, #16]
 8007948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800794a:	4413      	add	r3, r2
 800794c:	f107 0118 	add.w	r1, r7, #24
 8007950:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007952:	440a      	add	r2, r1
 8007954:	7812      	ldrb	r2, [r2, #0]
 8007956:	701a      	strb	r2, [r3, #0]
	 for (int i = 0; i < size ; ++i)
 8007958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800795a:	3301      	adds	r3, #1
 800795c:	647b      	str	r3, [r7, #68]	; 0x44
 800795e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007962:	429a      	cmp	r2, r3
 8007964:	dbee      	blt.n	8007944 <UBX_Send_Ack+0x28>
	 }
	 TX_Cplt = 0;
 8007966:	4b81      	ldr	r3, [pc, #516]	; (8007b6c <UBX_Send_Ack+0x250>)
 8007968:	2200      	movs	r2, #0
 800796a:	701a      	strb	r2, [r3, #0]
	 if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_TC))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	69db      	ldr	r3, [r3, #28]
 8007974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007978:	2b40      	cmp	r3, #64	; 0x40
 800797a:	d104      	bne.n	8007986 <UBX_Send_Ack+0x6a>
	 {
		 __HAL_UART_CLEAR_FLAG(hgps->gps_huart,UART_FLAG_TC);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2240      	movs	r2, #64	; 0x40
 8007984:	621a      	str	r2, [r3, #32]
	 }
	 __HAL_UART_ENABLE_IT(hgps->gps_huart,UART_IT_TC);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	6812      	ldr	r2, [r2, #0]
 8007990:	6812      	ldr	r2, [r2, #0]
 8007992:	6812      	ldr	r2, [r2, #0]
 8007994:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007998:	601a      	str	r2, [r3, #0]
	 if( HAL_UART_Transmit_DMA(hgps->gps_huart,hgps->GPS_Tx_Buffer, size) == HAL_OK)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6818      	ldr	r0, [r3, #0]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079a4:	b292      	uxth	r2, r2
 80079a6:	4619      	mov	r1, r3
 80079a8:	f7fd ffc8 	bl	800593c <HAL_UART_Transmit_DMA>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d15a      	bne.n	8007a68 <UBX_Send_Ack+0x14c>
	 {
	  //begin DMA Reception
	 while(TX_Cplt != SET);
 80079b2:	bf00      	nop
 80079b4:	4b6d      	ldr	r3, [pc, #436]	; (8007b6c <UBX_Send_Ack+0x250>)
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d1fb      	bne.n	80079b4 <UBX_Send_Ack+0x98>
	 TX_Cplt = 0; //clear flag
 80079bc:	4b6b      	ldr	r3, [pc, #428]	; (8007b6c <UBX_Send_Ack+0x250>)
 80079be:	2200      	movs	r2, #0
 80079c0:	701a      	strb	r2, [r3, #0]
	 __HAL_UART_ENABLE_IT(hgps->gps_huart,UART_IT_IDLE);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	6812      	ldr	r2, [r2, #0]
 80079cc:	6812      	ldr	r2, [r2, #0]
 80079ce:	6812      	ldr	r2, [r2, #0]
 80079d0:	f042 0210 	orr.w	r2, r2, #16
 80079d4:	601a      	str	r2, [r3, #0]
	 __HAL_DMA_ENABLE_IT(hgps->gps_huart->hdmarx, DMA_IT_TC);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	6812      	ldr	r2, [r2, #0]
 80079e2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80079e4:	6812      	ldr	r2, [r2, #0]
 80079e6:	6812      	ldr	r2, [r2, #0]
 80079e8:	f042 0202 	orr.w	r2, r2, #2
 80079ec:	601a      	str	r2, [r3, #0]
	 if(__HAL_TIM_GET_FLAG(hgps->gps_htim,TIM_FLAG_CC1) == SET)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	f003 0302 	and.w	r3, r3, #2
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d105      	bne.n	8007a0a <UBX_Send_Ack+0xee>
	 {
		 __HAL_TIM_CLEAR_FLAG(hgps->gps_htim,TIM_FLAG_CC1);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f06f 0202 	mvn.w	r2, #2
 8007a08:	611a      	str	r2, [r3, #16]
	 }
	 M2M_Txfer_Cplt = 0;
 8007a0a:	4b59      	ldr	r3, [pc, #356]	; (8007b70 <UBX_Send_Ack+0x254>)
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	701a      	strb	r2, [r3, #0]
	 HAL_UART_Receive_DMA(hgps->gps_huart,hgps->GPS_Rx_Buffer, DMA_RX_BUFFER_SIZE);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6818      	ldr	r0, [r3, #0]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	f7fe f809 	bl	8005a34 <HAL_UART_Receive_DMA>

	 __HAL_TIM_ENABLE_IT(hgps->gps_htim,TIM_IT_CC1);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	6892      	ldr	r2, [r2, #8]
 8007a2c:	6812      	ldr	r2, [r2, #0]
 8007a2e:	68d2      	ldr	r2, [r2, #12]
 8007a30:	f042 0202 	orr.w	r2, r2, #2
 8007a34:	60da      	str	r2, [r3, #12]
	 HAL_TIM_OC_Start_IT(hgps->gps_htim, TIM_CHANNEL_1);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f7fc fafb 	bl	8004038 <HAL_TIM_OC_Start_IT>
	 HAL_TIM_Base_Start_IT(hgps->gps_htim);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7fc fa6e 	bl	8003f28 <HAL_TIM_Base_Start_IT>
	 }
	  while(M2M_Txfer_Cplt != SET)
 8007a4c:	e00c      	b.n	8007a68 <UBX_Send_Ack+0x14c>
	  {
		  //TODO: SET DEVICE TO LOW POWER MODE WHILE DMA TRASNFER OCCURS
		  //Check for either receiver time out or peripheral timeout event
		  if(M2M_Txfer_Cplt == HAL_TIMEOUT)
 8007a4e:	4b48      	ldr	r3, [pc, #288]	; (8007b70 <UBX_Send_Ack+0x254>)
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	2b03      	cmp	r3, #3
 8007a54:	d108      	bne.n	8007a68 <UBX_Send_Ack+0x14c>
		  {
			  TIM_IDLE_Timeout = RESET;
 8007a56:	4b47      	ldr	r3, [pc, #284]	; (8007b74 <UBX_Send_Ack+0x258>)
 8007a58:	2200      	movs	r2, #0
 8007a5a:	701a      	strb	r2, [r3, #0]
			  M2M_Txfer_Cplt = RESET;
 8007a5c:	4b44      	ldr	r3, [pc, #272]	; (8007b70 <UBX_Send_Ack+0x254>)
 8007a5e:	2200      	movs	r2, #0
 8007a60:	701a      	strb	r2, [r3, #0]
			  return UBX_TIMEOUT_Rx;
 8007a62:	f06f 0302 	mvn.w	r3, #2
 8007a66:	e07a      	b.n	8007b5e <UBX_Send_Ack+0x242>
	  while(M2M_Txfer_Cplt != SET)
 8007a68:	4b41      	ldr	r3, [pc, #260]	; (8007b70 <UBX_Send_Ack+0x254>)
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d1ee      	bne.n	8007a4e <UBX_Send_Ack+0x132>
		  }
	  }
	  M2M_Txfer_Cplt = RESET;
 8007a70:	4b3f      	ldr	r3, [pc, #252]	; (8007b70 <UBX_Send_Ack+0x254>)
 8007a72:	2200      	movs	r2, #0
 8007a74:	701a      	strb	r2, [r3, #0]
	  char val = (char) 0xB5;
 8007a76:	23b5      	movs	r3, #181	; 0xb5
 8007a78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  int index = (int)(strchr((char*)GNSS_Buffer,val))-(int)GNSS_Buffer;
 8007a7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a80:	4619      	mov	r1, r3
 8007a82:	483d      	ldr	r0, [pc, #244]	; (8007b78 <UBX_Send_Ack+0x25c>)
 8007a84:	f002 fd8c 	bl	800a5a0 <strchr>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	4b3a      	ldr	r3, [pc, #232]	; (8007b78 <UBX_Send_Ack+0x25c>)
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	633b      	str	r3, [r7, #48]	; 0x30
	  UBX_MSG_t GPS_Acknowledgement_State;
	  if((index < 0) || (index >GNSS_BUFFER_SIZE))
 8007a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	db60      	blt.n	8007b5a <UBX_Send_Ack+0x23e>
 8007a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a9e:	dc5c      	bgt.n	8007b5a <UBX_Send_Ack+0x23e>
	  {

	  }else{
	  uint8_t msg[10] = {0};
 8007aa0:	f107 030c 	add.w	r3, r7, #12
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	601a      	str	r2, [r3, #0]
 8007aa8:	605a      	str	r2, [r3, #4]
 8007aaa:	811a      	strh	r2, [r3, #8]
	  memcpy(msg,&hgps->GPS_Mem_Buffer[index],10);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	695a      	ldr	r2, [r3, #20]
 8007ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab2:	441a      	add	r2, r3
 8007ab4:	f107 030c 	add.w	r3, r7, #12
 8007ab8:	6810      	ldr	r0, [r2, #0]
 8007aba:	6851      	ldr	r1, [r2, #4]
 8007abc:	c303      	stmia	r3!, {r0, r1}
 8007abe:	8912      	ldrh	r2, [r2, #8]
 8007ac0:	801a      	strh	r2, [r3, #0]

	  uint16_t header = ((uint16_t)msg[0]<<8) | ((uint16_t)msg[1]);
 8007ac2:	7b3b      	ldrb	r3, [r7, #12]
 8007ac4:	021b      	lsls	r3, r3, #8
 8007ac6:	b21a      	sxth	r2, r3
 8007ac8:	7b7b      	ldrb	r3, [r7, #13]
 8007aca:	b21b      	sxth	r3, r3
 8007acc:	4313      	orrs	r3, r2
 8007ace:	b21b      	sxth	r3, r3
 8007ad0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	  if(header == 0xb562)
 8007ad2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007ad4:	f24b 5262 	movw	r2, #46434	; 0xb562
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d13e      	bne.n	8007b5a <UBX_Send_Ack+0x23e>
	  {
	 	 uint8_t ck_A =0, ck_B =0;
 8007adc:	2300      	movs	r3, #0
 8007ade:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	 	 for (int i = 2; i < 8; ++i)
 8007ae8:	2302      	movs	r3, #2
 8007aea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007aec:	e013      	b.n	8007b16 <UBX_Send_Ack+0x1fa>
	 	 {
	 	 	ck_A += (uint8_t)msg[i];
 8007aee:	f107 020c 	add.w	r2, r7, #12
 8007af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007af4:	4413      	add	r3, r2
 8007af6:	781a      	ldrb	r2, [r3, #0]
 8007af8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8007afc:	4413      	add	r3, r2
 8007afe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	 	 	ck_B += ck_A;
 8007b02:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8007b06:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8007b0a:	4413      	add	r3, r2
 8007b0c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	 	 for (int i = 2; i < 8; ++i)
 8007b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b12:	3301      	adds	r3, #1
 8007b14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b18:	2b07      	cmp	r3, #7
 8007b1a:	dde8      	ble.n	8007aee <UBX_Send_Ack+0x1d2>
	 	 }
	 	 if((ck_A == msg[8])&& (ck_B == msg[9]))
 8007b1c:	7d3b      	ldrb	r3, [r7, #20]
 8007b1e:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d116      	bne.n	8007b54 <UBX_Send_Ack+0x238>
 8007b26:	7d7b      	ldrb	r3, [r7, #21]
 8007b28:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d111      	bne.n	8007b54 <UBX_Send_Ack+0x238>
	 	 {
	 	 	//acknowledgement
	 	 	if(msg[2] == 0x05)
 8007b30:	7bbb      	ldrb	r3, [r7, #14]
 8007b32:	2b05      	cmp	r3, #5
 8007b34:	d111      	bne.n	8007b5a <UBX_Send_Ack+0x23e>
	 	 	{
	 		 	switch (msg[3])
 8007b36:	7bfb      	ldrb	r3, [r7, #15]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d002      	beq.n	8007b42 <UBX_Send_Ack+0x226>
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d004      	beq.n	8007b4a <UBX_Send_Ack+0x22e>
	 	 	if(msg[2] == 0x05)
 8007b40:	e00b      	b.n	8007b5a <UBX_Send_Ack+0x23e>
	 		 	{
	 		 		case 0:
	 		 			GPS_Acknowledgement_State = UBX_ACK_NACK;
 8007b42:	2300      	movs	r3, #0
 8007b44:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	 		 			break;
 8007b48:	e003      	b.n	8007b52 <UBX_Send_Ack+0x236>
	 		 		case 1:
	 		 			GPS_Acknowledgement_State = UBX_ACK_ACK;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	 		 			break;
 8007b50:	bf00      	nop
	 	 	if(msg[2] == 0x05)
 8007b52:	e002      	b.n	8007b5a <UBX_Send_Ack+0x23e>
	 		 		}
	 		 	}
	 		 }
	 		 else
	 		 {
	 		 	GPS_Acknowledgement_State = UBX_ERROR;
 8007b54:	23ff      	movs	r3, #255	; 0xff
 8007b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	 		 }
	 	 }
	  }
	  return GPS_Acknowledgement_State;
 8007b5a:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3748      	adds	r7, #72	; 0x48
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bdb0      	pop	{r4, r5, r7, pc}
 8007b66:	bf00      	nop
 8007b68:	0801077c 	.word	0x0801077c
 8007b6c:	200018dc 	.word	0x200018dc
 8007b70:	20000818 	.word	0x20000818
 8007b74:	200007bc 	.word	0x200007bc
 8007b78:	200010dc 	.word	0x200010dc

08007b7c <UBX_Configure_Baudrate>:

UBX_MSG_t UBX_Configure_Baudrate(GPS_Handle_Typedef* hgps)
{
 8007b7c:	b5b0      	push	{r4, r5, r7, lr}
 8007b7e:	b08a      	sub	sp, #40	; 0x28
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]

	//GPS is configured for 9600, change baud to 115200
	uint8_t ubx_baude_rate_config[] = {0xB5,0x62,0x06,0x00,0x14,0x00,0x01,0x00,0x00,0x00,0xD0,0x08,0x00,0x00,0x00,0xC2,0x01,0x00,0x07,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0xC0,0x7E};
 8007b84:	4b20      	ldr	r3, [pc, #128]	; (8007c08 <UBX_Configure_Baudrate+0x8c>)
 8007b86:	f107 0408 	add.w	r4, r7, #8
 8007b8a:	461d      	mov	r5, r3
 8007b8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007b94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint32_t size =  sizeof(ubx_baude_rate_config)/sizeof(ubx_baude_rate_config[0]);
 8007b98:	231c      	movs	r3, #28
 8007b9a:	627b      	str	r3, [r7, #36]	; 0x24
	memcpy(hgps->GPS_Tx_Buffer,ubx_baude_rate_config,size);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	f107 0108 	add.w	r1, r7, #8
 8007ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f002 f91a 	bl	8009de0 <memcpy>
	if(HAL_UART_Transmit_DMA(hgps->gps_huart,hgps->GPS_Tx_Buffer,size) == HAL_OK)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6818      	ldr	r0, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bb6:	b292      	uxth	r2, r2
 8007bb8:	4619      	mov	r1, r3
 8007bba:	f7fd febf 	bl	800593c <HAL_UART_Transmit_DMA>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d11b      	bne.n	8007bfc <UBX_Configure_Baudrate+0x80>
	{
		 while(TX_Cplt != SET);
 8007bc4:	bf00      	nop
 8007bc6:	4b11      	ldr	r3, [pc, #68]	; (8007c0c <UBX_Configure_Baudrate+0x90>)
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d1fb      	bne.n	8007bc6 <UBX_Configure_Baudrate+0x4a>
		 Clear_Buffer(hgps->GPS_Tx_Buffer,DMA_TX_BUFFER_SIZE);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7ff fa66 	bl	80070a8 <Clear_Buffer>
		 if(USART_Set_Baudrate(hgps,115200) != HAL_OK)
 8007bdc:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f7ff fe21 	bl	8007828 <USART_Set_Baudrate>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d002      	beq.n	8007bf2 <UBX_Configure_Baudrate+0x76>
		 {
			 return UBX_ERROR;
 8007bec:	f04f 33ff 	mov.w	r3, #4294967295
 8007bf0:	e006      	b.n	8007c00 <UBX_Configure_Baudrate+0x84>
		 }
		 return UBX_Send_Ack(hgps);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f7ff fe92 	bl	800791c <UBX_Send_Ack>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	e001      	b.n	8007c00 <UBX_Configure_Baudrate+0x84>
	}
	return UBX_TIMEOUT_Tx;
 8007bfc:	f06f 0301 	mvn.w	r3, #1
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3728      	adds	r7, #40	; 0x28
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bdb0      	pop	{r4, r5, r7, pc}
 8007c08:	08010794 	.word	0x08010794
 8007c0c:	200018dc 	.word	0x200018dc

08007c10 <UBX_Configure_Messages>:

UBX_MSG_t UBX_Configure_Messages(GPS_Handle_Typedef *hgps)
{
 8007c10:	b5b0      	push	{r4, r5, r7, lr}
 8007c12:	b0a8      	sub	sp, #160	; 0xa0
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
	//clear all active/useless messages
	uint8_t NMEA_Clear_buffer[] = {0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x0A, 0x00, 0x04, 0x23, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x09, 0x00, 0x03, 0x21, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x00, 0x00, 0xFA, 0x0F, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x0D, 0x00, 0x07, 0x29, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x06, 0x00, 0x00, 0x1B, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x07, 0x00, 0x01, 0x1D, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x03, 0x00, 0xFD, 0x15, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x04, 0x00, 0xFE, 0x17, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x0F, 0x00, 0x09, 0x2D, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x05, 0x00, 0xFF, 0x19} ;
 8007c18:	4a3d      	ldr	r2, [pc, #244]	; (8007d10 <UBX_Configure_Messages+0x100>)
 8007c1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007c1e:	4611      	mov	r1, r2
 8007c20:	226e      	movs	r2, #110	; 0x6e
 8007c22:	4618      	mov	r0, r3
 8007c24:	f002 f8dc 	bl	8009de0 <memcpy>
	uint32_t size = sizeof(NMEA_Clear_buffer)/sizeof(NMEA_Clear_buffer[0]);
 8007c28:	236e      	movs	r3, #110	; 0x6e
 8007c2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	 if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_TC))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	69db      	ldr	r3, [r3, #28]
 8007c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c3a:	2b40      	cmp	r3, #64	; 0x40
 8007c3c:	d104      	bne.n	8007c48 <UBX_Configure_Messages+0x38>
	 {
		__HAL_UART_CLEAR_FLAG(hgps->gps_huart,UART_FLAG_TC);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2240      	movs	r2, #64	; 0x40
 8007c46:	621a      	str	r2, [r3, #32]
	 }
	__HAL_UART_ENABLE_IT(hgps->gps_huart,UART_IT_TC);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	6812      	ldr	r2, [r2, #0]
 8007c52:	6812      	ldr	r2, [r2, #0]
 8007c54:	6812      	ldr	r2, [r2, #0]
 8007c56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c5a:	601a      	str	r2, [r3, #0]
	if(HAL_UART_Transmit_DMA(hgps->gps_huart,NMEA_Clear_buffer,size) != HAL_OK)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8007c64:	b292      	uxth	r2, r2
 8007c66:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7fd fe66 	bl	800593c <HAL_UART_Transmit_DMA>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d002      	beq.n	8007c7c <UBX_Configure_Messages+0x6c>
	{
		return UBX_ERROR;
 8007c76:	f04f 33ff 	mov.w	r3, #4294967295
 8007c7a:	e044      	b.n	8007d06 <UBX_Configure_Messages+0xf6>
	}
	while(TX_Cplt != SET);
 8007c7c:	bf00      	nop
 8007c7e:	4b25      	ldr	r3, [pc, #148]	; (8007d14 <UBX_Configure_Messages+0x104>)
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d1fb      	bne.n	8007c7e <UBX_Configure_Messages+0x6e>
	TX_Cplt = 0;
 8007c86:	4b23      	ldr	r3, [pc, #140]	; (8007d14 <UBX_Configure_Messages+0x104>)
 8007c88:	2200      	movs	r2, #0
 8007c8a:	701a      	strb	r2, [r3, #0]
	(void)NMEA_Clear_buffer;
	//enable messages GLL ZDA GSA
	uint8_t NMEA_msgs[] = {0xB5,0x62,0x06,0x01,0x03,0x00,0xF0,0x01,0x01,0xFC,0x12,0xB5,0x62,0x06,0x01,0x03,0x00,0xF0,0x02,0x01,0xFD,0x14,0xB5,0x62,0x06,0x01,0x03,0x00,0xF0,0x08,0x01,0x03,0x20};
 8007c8c:	4b22      	ldr	r3, [pc, #136]	; (8007d18 <UBX_Configure_Messages+0x108>)
 8007c8e:	f107 0408 	add.w	r4, r7, #8
 8007c92:	461d      	mov	r5, r3
 8007c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c9c:	682b      	ldr	r3, [r5, #0]
 8007c9e:	7023      	strb	r3, [r4, #0]
	size = sizeof(NMEA_msgs)/sizeof(NMEA_msgs[0]);
 8007ca0:	2321      	movs	r3, #33	; 0x21
 8007ca2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	 if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_TC))
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	69db      	ldr	r3, [r3, #28]
 8007cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cb2:	2b40      	cmp	r3, #64	; 0x40
 8007cb4:	d104      	bne.n	8007cc0 <UBX_Configure_Messages+0xb0>
	 {
		 __HAL_UART_CLEAR_FLAG(hgps->gps_huart,UART_FLAG_TC);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2240      	movs	r2, #64	; 0x40
 8007cbe:	621a      	str	r2, [r3, #32]
	 }
	 __HAL_UART_ENABLE_IT(hgps->gps_huart,UART_IT_TC);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	6812      	ldr	r2, [r2, #0]
 8007cca:	6812      	ldr	r2, [r2, #0]
 8007ccc:	6812      	ldr	r2, [r2, #0]
 8007cce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cd2:	601a      	str	r2, [r3, #0]
	if(HAL_UART_Transmit_DMA(hgps->gps_huart,NMEA_msgs,size) == HAL_OK)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8007cdc:	b292      	uxth	r2, r2
 8007cde:	f107 0108 	add.w	r1, r7, #8
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7fd fe2a 	bl	800593c <HAL_UART_Transmit_DMA>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d109      	bne.n	8007d02 <UBX_Configure_Messages+0xf2>
	{
		while(TX_Cplt != SET);
 8007cee:	bf00      	nop
 8007cf0:	4b08      	ldr	r3, [pc, #32]	; (8007d14 <UBX_Configure_Messages+0x104>)
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d1fb      	bne.n	8007cf0 <UBX_Configure_Messages+0xe0>
		TX_Cplt = 0;
 8007cf8:	4b06      	ldr	r3, [pc, #24]	; (8007d14 <UBX_Configure_Messages+0x104>)
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	701a      	strb	r2, [r3, #0]
		return UBX_OK;
 8007cfe:	2302      	movs	r3, #2
 8007d00:	e001      	b.n	8007d06 <UBX_Configure_Messages+0xf6>
	}

	return UBX_ERROR;
 8007d02:	f04f 33ff 	mov.w	r3, #4294967295

}
 8007d06:	4618      	mov	r0, r3
 8007d08:	37a0      	adds	r7, #160	; 0xa0
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	080107b0 	.word	0x080107b0
 8007d14:	200018dc 	.word	0x200018dc
 8007d18:	08010820 	.word	0x08010820

08007d1c <USART_TIM_RTO_Handler>:

//================ 7. IRQ Handlers Functions Prototypes ===============================

void USART_TIM_RTO_Handler(TIM_HandleTypeDef *htim)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
	if(__HAL_TIM_GET_IT_SOURCE(htim,TIM_IT_CC1))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	f003 0302 	and.w	r3, r3, #2
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d10a      	bne.n	8007d48 <USART_TIM_RTO_Handler+0x2c>
	{

		//clear interrupt
		__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1|TIM_IT_UPDATE);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f06f 0203 	mvn.w	r2, #3
 8007d3a:	611a      	str	r2, [r3, #16]
		//set reciever timeout flag
		TIM_IDLE_Timeout = 1;
 8007d3c:	4b04      	ldr	r3, [pc, #16]	; (8007d50 <USART_TIM_RTO_Handler+0x34>)
 8007d3e:	2201      	movs	r2, #1
 8007d40:	701a      	strb	r2, [r3, #0]
		//disable timer
		HAL_TIM_Base_Stop_IT(htim);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f7fc f91a 	bl	8003f7c <HAL_TIM_Base_Stop_IT>
	}
}
 8007d48:	bf00      	nop
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	200007bc 	.word	0x200007bc

08007d54 <DMA_GNSS_MEM_IRQHandler>:

void DMA_GNSS_MEM_IRQHandler(GPS_Handle_Typedef *hgps)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]

		M2M_Txfer_Cplt = SET;
 8007d5c:	4b63      	ldr	r3, [pc, #396]	; (8007eec <DMA_GNSS_MEM_IRQHandler+0x198>)
 8007d5e:	2201      	movs	r2, #1
 8007d60:	701a      	strb	r2, [r3, #0]
		if(log_gps)
 8007d62:	4b63      	ldr	r3, [pc, #396]	; (8007ef0 <DMA_GNSS_MEM_IRQHandler+0x19c>)
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f000 80bb 	beq.w	8007ee2 <DMA_GNSS_MEM_IRQHandler+0x18e>
		{
			Clear_Buffer(hgps->GPS_Rx_Buffer,DMA_RX_BUFFER_SIZE);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7ff f997 	bl	80070a8 <Clear_Buffer>
			//reset pointer
			char* msg = strtok((char*)GNSS_Buffer, "$");
 8007d7a:	495e      	ldr	r1, [pc, #376]	; (8007ef4 <DMA_GNSS_MEM_IRQHandler+0x1a0>)
 8007d7c:	485e      	ldr	r0, [pc, #376]	; (8007ef8 <DMA_GNSS_MEM_IRQHandler+0x1a4>)
 8007d7e:	f003 fa45 	bl	800b20c <strtok>
 8007d82:	60f8      	str	r0, [r7, #12]
				while(msg != NULL)
 8007d84:	e042      	b.n	8007e0c <DMA_GNSS_MEM_IRQHandler+0xb8>
				{
					switch(is_valid(msg))
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f7ff f99c 	bl	80070c4 <is_valid>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	d012      	beq.n	8007db8 <DMA_GNSS_MEM_IRQHandler+0x64>
 8007d92:	2b03      	cmp	r3, #3
 8007d94:	d01e      	beq.n	8007dd4 <DMA_GNSS_MEM_IRQHandler+0x80>
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d000      	beq.n	8007d9c <DMA_GNSS_MEM_IRQHandler+0x48>
				    		packet_full |= 0b100;
				    	}
				    	break;
					  default:
						// invalid case
						break;
 8007d9a:	e02e      	b.n	8007dfa <DMA_GNSS_MEM_IRQHandler+0xa6>
						if(Parse_GLL(msg) == 2)
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f7ff fb05 	bl	80073ac <Parse_GLL>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	d123      	bne.n	8007df0 <DMA_GNSS_MEM_IRQHandler+0x9c>
							packet_full |= 0b1;
 8007da8:	4b54      	ldr	r3, [pc, #336]	; (8007efc <DMA_GNSS_MEM_IRQHandler+0x1a8>)
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	f043 0301 	orr.w	r3, r3, #1
 8007db0:	b2da      	uxtb	r2, r3
 8007db2:	4b52      	ldr	r3, [pc, #328]	; (8007efc <DMA_GNSS_MEM_IRQHandler+0x1a8>)
 8007db4:	701a      	strb	r2, [r3, #0]
						break;
 8007db6:	e01b      	b.n	8007df0 <DMA_GNSS_MEM_IRQHandler+0x9c>
						if(parse_GSA(msg) == 0)
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	f7ff fb8f 	bl	80074dc <parse_GSA>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d117      	bne.n	8007df4 <DMA_GNSS_MEM_IRQHandler+0xa0>
							packet_full |= 0b10;
 8007dc4:	4b4d      	ldr	r3, [pc, #308]	; (8007efc <DMA_GNSS_MEM_IRQHandler+0x1a8>)
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	f043 0302 	orr.w	r3, r3, #2
 8007dcc:	b2da      	uxtb	r2, r3
 8007dce:	4b4b      	ldr	r3, [pc, #300]	; (8007efc <DMA_GNSS_MEM_IRQHandler+0x1a8>)
 8007dd0:	701a      	strb	r2, [r3, #0]
						break;
 8007dd2:	e00f      	b.n	8007df4 <DMA_GNSS_MEM_IRQHandler+0xa0>
				    	if(parse_ZDA(msg) == 0)
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f7ff fa21 	bl	800721c <parse_ZDA>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d10b      	bne.n	8007df8 <DMA_GNSS_MEM_IRQHandler+0xa4>
				    		packet_full |= 0b100;
 8007de0:	4b46      	ldr	r3, [pc, #280]	; (8007efc <DMA_GNSS_MEM_IRQHandler+0x1a8>)
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	f043 0304 	orr.w	r3, r3, #4
 8007de8:	b2da      	uxtb	r2, r3
 8007dea:	4b44      	ldr	r3, [pc, #272]	; (8007efc <DMA_GNSS_MEM_IRQHandler+0x1a8>)
 8007dec:	701a      	strb	r2, [r3, #0]
				    	break;
 8007dee:	e003      	b.n	8007df8 <DMA_GNSS_MEM_IRQHandler+0xa4>
						break;
 8007df0:	bf00      	nop
 8007df2:	e002      	b.n	8007dfa <DMA_GNSS_MEM_IRQHandler+0xa6>
						break;
 8007df4:	bf00      	nop
 8007df6:	e000      	b.n	8007dfa <DMA_GNSS_MEM_IRQHandler+0xa6>
				    	break;
 8007df8:	bf00      	nop
					}
					if(packet_full == 7)
 8007dfa:	4b40      	ldr	r3, [pc, #256]	; (8007efc <DMA_GNSS_MEM_IRQHandler+0x1a8>)
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	2b07      	cmp	r3, #7
 8007e00:	d008      	beq.n	8007e14 <DMA_GNSS_MEM_IRQHandler+0xc0>
					{
						break;
					}
					msg = strtok(NULL,"$");
 8007e02:	493c      	ldr	r1, [pc, #240]	; (8007ef4 <DMA_GNSS_MEM_IRQHandler+0x1a0>)
 8007e04:	2000      	movs	r0, #0
 8007e06:	f003 fa01 	bl	800b20c <strtok>
 8007e0a:	60f8      	str	r0, [r7, #12]
				while(msg != NULL)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1b9      	bne.n	8007d86 <DMA_GNSS_MEM_IRQHandler+0x32>
 8007e12:	e000      	b.n	8007e16 <DMA_GNSS_MEM_IRQHandler+0xc2>
						break;
 8007e14:	bf00      	nop
				}
			if(__HAL_TIM_GET_IT_SOURCE(hgps->gps_htim,TIM_IT_CC1))
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	f003 0302 	and.w	r3, r3, #2
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d10a      	bne.n	8007e3c <DMA_GNSS_MEM_IRQHandler+0xe8>
			{
				__HAL_TIM_CLEAR_FLAG(hgps->gps_htim,TIM_FLAG_CC1);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f06f 0202 	mvn.w	r2, #2
 8007e30:	611a      	str	r2, [r3, #16]
				hgps->gps_htim->Instance->CNT = 0;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	625a      	str	r2, [r3, #36]	; 0x24
			}
			hgps->gps_huart->hdmarx->DmaBaseAddress->IFCR = 0x3FU << hgps->gps_huart->hdmarx->ChannelIndex; // clear all interrupts
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	6812      	ldr	r2, [r2, #0]
 8007e48:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007e4a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007e4c:	213f      	movs	r1, #63	; 0x3f
 8007e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8007e52:	605a      	str	r2, [r3, #4]
			hgps->gps_huart->hdmarx->Instance->CMAR = (uint32_t)hgps->GPS_Rx_Buffer; //reset the pointer
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	68d2      	ldr	r2, [r2, #12]
 8007e60:	60da      	str	r2, [r3, #12]
			hgps->gps_huart->hdmarx->Instance->CNDTR = DMA_RX_BUFFER_SIZE; //set the number of bytes to expect
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e6e:	605a      	str	r2, [r3, #4]
			__HAL_UART_CLEAR_IDLEFLAG(hgps->gps_huart);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2210      	movs	r2, #16
 8007e78:	621a      	str	r2, [r3, #32]
			__HAL_UART_ENABLE_IT(hgps->gps_huart, UART_IT_IDLE);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	6812      	ldr	r2, [r2, #0]
 8007e84:	6812      	ldr	r2, [r2, #0]
 8007e86:	6812      	ldr	r2, [r2, #0]
 8007e88:	f042 0210 	orr.w	r2, r2, #16
 8007e8c:	601a      	str	r2, [r3, #0]
			if(packet_full != 7)
 8007e8e:	4b1b      	ldr	r3, [pc, #108]	; (8007efc <DMA_GNSS_MEM_IRQHandler+0x1a8>)
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	2b07      	cmp	r3, #7
 8007e94:	d025      	beq.n	8007ee2 <DMA_GNSS_MEM_IRQHandler+0x18e>
			{

				__HAL_TIM_ENABLE_IT(hgps->gps_htim,TIM_IT_CC1);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	6892      	ldr	r2, [r2, #8]
 8007ea0:	6812      	ldr	r2, [r2, #0]
 8007ea2:	68d2      	ldr	r2, [r2, #12]
 8007ea4:	f042 0202 	orr.w	r2, r2, #2
 8007ea8:	60da      	str	r2, [r3, #12]
				HAL_TIM_OC_Start_IT(hgps->gps_htim, TIM_CHANNEL_1);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	2100      	movs	r1, #0
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f7fc f8c1 	bl	8004038 <HAL_TIM_OC_Start_IT>
				HAL_TIM_Base_Start_IT(hgps->gps_htim);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7fc f834 	bl	8003f28 <HAL_TIM_Base_Start_IT>
				__HAL_DMA_ENABLE(hgps->gps_huart->hdmarx);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	6812      	ldr	r2, [r2, #0]
 8007ecc:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007ece:	6812      	ldr	r2, [r2, #0]
 8007ed0:	6812      	ldr	r2, [r2, #0]
 8007ed2:	f042 0201 	orr.w	r2, r2, #1
 8007ed6:	601a      	str	r2, [r3, #0]
				HAL_UART_DMAResume(hgps->gps_huart);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7fd fe80 	bl	8005be2 <HAL_UART_DMAResume>
			}
		}

}
 8007ee2:	bf00      	nop
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	20000818 	.word	0x20000818
 8007ef0:	20002128 	.word	0x20002128
 8007ef4:	08010844 	.word	0x08010844
 8007ef8:	200010dc 	.word	0x200010dc
 8007efc:	200007c4 	.word	0x200007c4

08007f00 <DMA_GNSS_Periph_IRQHandler>:

void DMA_GNSS_Periph_IRQHandler(GPS_Handle_Typedef *hgps)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
	if(__HAL_DMA_GET_IT_SOURCE(hgps->gps_huart->hdmarx,DMA_IT_TC))
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 0302 	and.w	r3, r3, #2
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d046      	beq.n	8007fa8 <DMA_GNSS_Periph_IRQHandler+0xa8>
	{
		__HAL_DMA_CLEAR_FLAG(hgps->gps_huart->hdmarx,DMA_FLAG_TC5);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	461a      	mov	r2, r3
 8007f24:	4b42      	ldr	r3, [pc, #264]	; (8008030 <DMA_GNSS_Periph_IRQHandler+0x130>)
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d904      	bls.n	8007f34 <DMA_GNSS_Periph_IRQHandler+0x34>
 8007f2a:	4b42      	ldr	r3, [pc, #264]	; (8008034 <DMA_GNSS_Periph_IRQHandler+0x134>)
 8007f2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007f30:	605a      	str	r2, [r3, #4]
 8007f32:	e003      	b.n	8007f3c <DMA_GNSS_Periph_IRQHandler+0x3c>
 8007f34:	4b40      	ldr	r3, [pc, #256]	; (8008038 <DMA_GNSS_Periph_IRQHandler+0x138>)
 8007f36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007f3a:	605a      	str	r2, [r3, #4]
		//stop timer and reset flag
		HAL_TIM_Base_Stop(hgps->gps_htim);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	4618      	mov	r0, r3
 8007f42:	f7fb ffc7 	bl	8003ed4 <HAL_TIM_Base_Stop>
		__HAL_TIM_DISABLE_IT(hgps->gps_htim,TIM_IT_CC1);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	6892      	ldr	r2, [r2, #8]
 8007f50:	6812      	ldr	r2, [r2, #0]
 8007f52:	68d2      	ldr	r2, [r2, #12]
 8007f54:	f022 0202 	bic.w	r2, r2, #2
 8007f58:	60da      	str	r2, [r3, #12]
		if(__HAL_TIM_GET_FLAG(hgps->gps_htim,TIM_FLAG_CC1))
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	f003 0302 	and.w	r3, r3, #2
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d105      	bne.n	8007f76 <DMA_GNSS_Periph_IRQHandler+0x76>
		{
			__HAL_TIM_CLEAR_FLAG(hgps->gps_htim,TIM_FLAG_CC1);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f06f 0202 	mvn.w	r2, #2
 8007f74:	611a      	str	r2, [r3, #16]
		}
		TIM_IDLE_Timeout = RESET;
 8007f76:	4b31      	ldr	r3, [pc, #196]	; (800803c <DMA_GNSS_Periph_IRQHandler+0x13c>)
 8007f78:	2200      	movs	r2, #0
 8007f7a:	701a      	strb	r2, [r3, #0]

		//begin a Memory to Memory PEripheral transfer
		__HAL_DMA_ENABLE_IT(hgps->gps_hdmamem,DMA_IT_TC);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	6852      	ldr	r2, [r2, #4]
 8007f86:	6812      	ldr	r2, [r2, #0]
 8007f88:	6812      	ldr	r2, [r2, #0]
 8007f8a:	f042 0202 	orr.w	r2, r2, #2
 8007f8e:	601a      	str	r2, [r3, #0]
		HAL_DMA_Start(hgps->gps_hdmamem,(uint32_t)hgps->GPS_Rx_Buffer,(uint32_t)hgps->GPS_Mem_Buffer,DMA_RX_BUFFER_SIZE);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6858      	ldr	r0, [r3, #4]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	4619      	mov	r1, r3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	695b      	ldr	r3, [r3, #20]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007fa4:	f7f9 fb74 	bl	8001690 <HAL_DMA_Start>
	}
		//in errata sheet Upon a data transfer error in a DMA channel x, both the specific TEIFx and the global GIFx
		//	flags are raised and the channel x is normally automatically disabled. However, if in the
		//	same clock cycle the software clears the GIFx flag (by setting the CGIFx bit of the
		//	DMA_IFCR register), the automatic channel disable fails and the TEIFx flag is not raised.
	if(__HAL_DMA_GET_IT_SOURCE(hgps->gps_hdmamem,DMA_IT_HT))
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f003 0304 	and.w	r3, r3, #4
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d017      	beq.n	8007fe8 <DMA_GNSS_Periph_IRQHandler+0xe8>
	{
		__HAL_DMA_CLEAR_FLAG(hgps->gps_hdmamem,DMA_IT_HT);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	4b1b      	ldr	r3, [pc, #108]	; (8008030 <DMA_GNSS_Periph_IRQHandler+0x130>)
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d903      	bls.n	8007fce <DMA_GNSS_Periph_IRQHandler+0xce>
 8007fc6:	4b1b      	ldr	r3, [pc, #108]	; (8008034 <DMA_GNSS_Periph_IRQHandler+0x134>)
 8007fc8:	2204      	movs	r2, #4
 8007fca:	605a      	str	r2, [r3, #4]
 8007fcc:	e002      	b.n	8007fd4 <DMA_GNSS_Periph_IRQHandler+0xd4>
 8007fce:	4b1a      	ldr	r3, [pc, #104]	; (8008038 <DMA_GNSS_Periph_IRQHandler+0x138>)
 8007fd0:	2204      	movs	r2, #4
 8007fd2:	605a      	str	r2, [r3, #4]
		__HAL_DMA_DISABLE_IT(hgps->gps_hdmamem,DMA_IT_HT);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	6852      	ldr	r2, [r2, #4]
 8007fde:	6812      	ldr	r2, [r2, #0]
 8007fe0:	6812      	ldr	r2, [r2, #0]
 8007fe2:	f022 0204 	bic.w	r2, r2, #4
 8007fe6:	601a      	str	r2, [r3, #0]
	}
	if(__HAL_DMA_GET_IT_SOURCE(hgps->gps_hdmamem,DMA_IT_TE))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f003 0308 	and.w	r3, r3, #8
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d017      	beq.n	8008028 <DMA_GNSS_Periph_IRQHandler+0x128>
	{
		__HAL_DMA_CLEAR_FLAG(hgps->gps_hdmamem,DMA_IT_TE);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	461a      	mov	r2, r3
 8008000:	4b0b      	ldr	r3, [pc, #44]	; (8008030 <DMA_GNSS_Periph_IRQHandler+0x130>)
 8008002:	429a      	cmp	r2, r3
 8008004:	d903      	bls.n	800800e <DMA_GNSS_Periph_IRQHandler+0x10e>
 8008006:	4b0b      	ldr	r3, [pc, #44]	; (8008034 <DMA_GNSS_Periph_IRQHandler+0x134>)
 8008008:	2208      	movs	r2, #8
 800800a:	605a      	str	r2, [r3, #4]
 800800c:	e002      	b.n	8008014 <DMA_GNSS_Periph_IRQHandler+0x114>
 800800e:	4b0a      	ldr	r3, [pc, #40]	; (8008038 <DMA_GNSS_Periph_IRQHandler+0x138>)
 8008010:	2208      	movs	r2, #8
 8008012:	605a      	str	r2, [r3, #4]
		__HAL_DMA_DISABLE_IT(hgps->gps_hdmamem,DMA_IT_TE);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	6852      	ldr	r2, [r2, #4]
 800801e:	6812      	ldr	r2, [r2, #0]
 8008020:	6812      	ldr	r2, [r2, #0]
 8008022:	f022 0208 	bic.w	r2, r2, #8
 8008026:	601a      	str	r2, [r3, #0]
	}
}
 8008028:	bf00      	nop
 800802a:	3708      	adds	r7, #8
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	40020080 	.word	0x40020080
 8008034:	40020400 	.word	0x40020400
 8008038:	40020000 	.word	0x40020000
 800803c:	200007bc 	.word	0x200007bc

08008040 <USART_GPS_IRQHandler>:

void USART_GPS_IRQHandler(GPS_Handle_Typedef *hgps)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
	if(__HAL_UART_GET_IT_SOURCE(hgps->gps_huart,UART_IT_IDLE))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 0310 	and.w	r3, r3, #16
 8008054:	2b00      	cmp	r3, #0
 8008056:	d064      	beq.n	8008122 <USART_GPS_IRQHandler+0xe2>
	{
		uint32_t temp = hgps->gps_huart->Instance->ISR;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	69db      	ldr	r3, [r3, #28]
 8008060:	60fb      	str	r3, [r7, #12]
		temp = hgps->gps_huart->Instance->RDR;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800806a:	b29b      	uxth	r3, r3
 800806c:	60fb      	str	r3, [r7, #12]
		 * 		   disable Periph-Mem stream and
		 * 		   begin Mem - Mem transfer of known data
		 *
		 */
		//check flag in TIM2
		if(TIM_IDLE_Timeout == SET)
 800806e:	4b5f      	ldr	r3, [pc, #380]	; (80081ec <USART_GPS_IRQHandler+0x1ac>)
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	2b01      	cmp	r3, #1
 8008074:	d150      	bne.n	8008118 <USART_GPS_IRQHandler+0xd8>
		{
			gnss_length = DMA_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(hgps->gps_huart->hdmarx);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8008084:	461a      	mov	r2, r3
 8008086:	4b5a      	ldr	r3, [pc, #360]	; (80081f0 <USART_GPS_IRQHandler+0x1b0>)
 8008088:	601a      	str	r2, [r3, #0]
			//Disable DMA and unlink from UART
			if(log_gps)
 800808a:	4b5a      	ldr	r3, [pc, #360]	; (80081f4 <USART_GPS_IRQHandler+0x1b4>)
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d012      	beq.n	80080b8 <USART_GPS_IRQHandler+0x78>
			{
				HAL_UART_DMAPause(hgps->gps_huart);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4618      	mov	r0, r3
 8008098:	f7fd fd50 	bl	8005b3c <HAL_UART_DMAPause>
				hgps->gps_huart->hdmarx->Instance->CCR &= ~DMA_CCR_EN;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	6812      	ldr	r2, [r2, #0]
 80080a8:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80080aa:	6812      	ldr	r2, [r2, #0]
 80080ac:	6812      	ldr	r2, [r2, #0]
 80080ae:	f022 0201 	bic.w	r2, r2, #1
 80080b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("nop");
 80080b4:	bf00      	nop
 80080b6:	e004      	b.n	80080c2 <USART_GPS_IRQHandler+0x82>
				__NOP();

			}else
			{
				HAL_UART_DMAStop(hgps->gps_huart);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4618      	mov	r0, r3
 80080be:	f7fd fdd5 	bl	8005c6c <HAL_UART_DMAStop>
			}
			//Timeout case: USART has recieved no data, Reciever timeout

			if(gnss_length > 0)
 80080c2:	4b4b      	ldr	r3, [pc, #300]	; (80081f0 <USART_GPS_IRQHandler+0x1b0>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	dd16      	ble.n	80080f8 <USART_GPS_IRQHandler+0xb8>
			{
				//begin transfer from mem to mem
				__HAL_DMA_ENABLE_IT(hgps->gps_hdmamem,DMA_IT_TC);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	6852      	ldr	r2, [r2, #4]
 80080d4:	6812      	ldr	r2, [r2, #0]
 80080d6:	6812      	ldr	r2, [r2, #0]
 80080d8:	f042 0202 	orr.w	r2, r2, #2
 80080dc:	601a      	str	r2, [r3, #0]
				HAL_DMA_Start(hgps->gps_hdmamem,(uint32_t)hgps->GPS_Rx_Buffer,(uint32_t)hgps->GPS_Mem_Buffer,gnss_length);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6858      	ldr	r0, [r3, #4]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	4619      	mov	r1, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	695b      	ldr	r3, [r3, #20]
 80080ec:	461a      	mov	r2, r3
 80080ee:	4b40      	ldr	r3, [pc, #256]	; (80081f0 <USART_GPS_IRQHandler+0x1b0>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f7f9 facd 	bl	8001690 <HAL_DMA_Start>
 80080f6:	e002      	b.n	80080fe <USART_GPS_IRQHandler+0xbe>
			/*
			 * Case 2: gnss_length == 0;
			 *
			 * Reciever has recieved no data and has thus timed out.
			 */
				M2M_Txfer_Cplt = HAL_TIMEOUT;
 80080f8:	4b3f      	ldr	r3, [pc, #252]	; (80081f8 <USART_GPS_IRQHandler+0x1b8>)
 80080fa:	2203      	movs	r2, #3
 80080fc:	701a      	strb	r2, [r3, #0]
			}
			//clear tim flag
			TIM_IDLE_Timeout = 0;
 80080fe:	4b3b      	ldr	r3, [pc, #236]	; (80081ec <USART_GPS_IRQHandler+0x1ac>)
 8008100:	2200      	movs	r2, #0
 8008102:	701a      	strb	r2, [r3, #0]
			__HAL_UART_DISABLE_IT(hgps->gps_huart,UART_IT_IDLE);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	6812      	ldr	r2, [r2, #0]
 800810e:	6812      	ldr	r2, [r2, #0]
 8008110:	6812      	ldr	r2, [r2, #0]
 8008112:	f022 0210 	bic.w	r2, r2, #16
 8008116:	601a      	str	r2, [r3, #0]
		}

		__HAL_UART_CLEAR_FLAG(hgps->gps_huart,UART_FLAG_IDLE);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2210      	movs	r2, #16
 8008120:	621a      	str	r2, [r3, #32]
	} if(__HAL_UART_GET_IT_SOURCE(hgps->gps_huart,UART_IT_TC))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800812e:	2b00      	cmp	r3, #0
 8008130:	d016      	beq.n	8008160 <USART_GPS_IRQHandler+0x120>
	{

		HAL_UART_AbortTransmit_IT(hgps->gps_huart);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4618      	mov	r0, r3
 8008138:	f7fd fe04 	bl	8005d44 <HAL_UART_AbortTransmit_IT>
		__HAL_UART_CLEAR_FLAG(hgps->gps_huart,UART_FLAG_IDLE);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2210      	movs	r2, #16
 8008144:	621a      	str	r2, [r3, #32]
		__HAL_UART_DISABLE_IT(hgps->gps_huart,UART_IT_IDLE);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	6812      	ldr	r2, [r2, #0]
 8008150:	6812      	ldr	r2, [r2, #0]
 8008152:	6812      	ldr	r2, [r2, #0]
 8008154:	f022 0210 	bic.w	r2, r2, #16
 8008158:	601a      	str	r2, [r3, #0]
		TX_Cplt = 1;
 800815a:	4b28      	ldr	r3, [pc, #160]	; (80081fc <USART_GPS_IRQHandler+0x1bc>)
 800815c:	2201      	movs	r2, #1
 800815e:	701a      	strb	r2, [r3, #0]

	}
	// additional error handling
	if(__HAL_UART_GET_IT_SOURCE(hgps->gps_huart,UART_IT_ERR))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	f003 0301 	and.w	r3, r3, #1
 800816c:	2b00      	cmp	r3, #0
 800816e:	d039      	beq.n	80081e4 <USART_GPS_IRQHandler+0x1a4>
	{
		//clear framing error
		if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_FE) == SET)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	69db      	ldr	r3, [r3, #28]
 8008178:	f003 0302 	and.w	r3, r3, #2
 800817c:	2b02      	cmp	r3, #2
 800817e:	d104      	bne.n	800818a <USART_GPS_IRQHandler+0x14a>
		{
			__HAL_UART_CLEAR_FEFLAG(hgps->gps_huart);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2202      	movs	r2, #2
 8008188:	621a      	str	r2, [r3, #32]
		}
		//clear noise error
		if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_NE) == SET)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	69db      	ldr	r3, [r3, #28]
 8008192:	f003 0304 	and.w	r3, r3, #4
 8008196:	2b04      	cmp	r3, #4
 8008198:	d104      	bne.n	80081a4 <USART_GPS_IRQHandler+0x164>
		{
			__HAL_UART_CLEAR_NEFLAG(hgps->gps_huart);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2204      	movs	r2, #4
 80081a2:	621a      	str	r2, [r3, #32]
		}
		//clear overun error
		if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_ORE) == SET)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	69db      	ldr	r3, [r3, #28]
 80081ac:	f003 0308 	and.w	r3, r3, #8
 80081b0:	2b08      	cmp	r3, #8
 80081b2:	d10a      	bne.n	80081ca <USART_GPS_IRQHandler+0x18a>
		{
			uint8_t temp = hgps->gps_huart->Instance->RDR;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80081bc:	b29b      	uxth	r3, r3
 80081be:	72fb      	strb	r3, [r7, #11]
			(void)temp;
			__HAL_UART_CLEAR_OREFLAG(hgps->gps_huart);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2208      	movs	r2, #8
 80081c8:	621a      	str	r2, [r3, #32]
		}
		//clear parity errors
		if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_PE) == SET)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	69db      	ldr	r3, [r3, #28]
 80081d2:	f003 0301 	and.w	r3, r3, #1
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d104      	bne.n	80081e4 <USART_GPS_IRQHandler+0x1a4>
		{
			__HAL_UART_CLEAR_PEFLAG(hgps->gps_huart);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2201      	movs	r2, #1
 80081e2:	621a      	str	r2, [r3, #32]
		}
	}
}
 80081e4:	bf00      	nop
 80081e6:	3710      	adds	r7, #16
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	200007bc 	.word	0x200007bc
 80081f0:	20000794 	.word	0x20000794
 80081f4:	20002128 	.word	0x20002128
 80081f8:	20000818 	.word	0x20000818
 80081fc:	200018dc 	.word	0x200018dc

08008200 <Init_Debug>:

#include "Sharc_Frame.h"


HAL_StatusTypeDef Init_Debug(void)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af00      	add	r7, sp, #0
	// set up clock output on GPIO Pin A8 for testing
#ifdef DEBUG_HSE_OUTPUT_ENABLE
	//configure pin
	/*Configure GPIO pin : PA8 */
	 GPIO_InitTypeDef GPIO_InitStruct;
	 GPIO_InitStruct.Pin = GPIO_PIN_8;
 8008206:	f44f 7380 	mov.w	r3, #256	; 0x100
 800820a:	607b      	str	r3, [r7, #4]
	 GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800820c:	2302      	movs	r3, #2
 800820e:	60bb      	str	r3, [r7, #8]
	 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008210:	2300      	movs	r3, #0
 8008212:	60fb      	str	r3, [r7, #12]
	 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008214:	2300      	movs	r3, #0
 8008216:	613b      	str	r3, [r7, #16]
	 GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008218:	2300      	movs	r3, #0
 800821a:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800821c:	1d3b      	adds	r3, r7, #4
 800821e:	4619      	mov	r1, r3
 8008220:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008224:	f7f9 fc3e 	bl	8001aa4 <HAL_GPIO_Init>
	 //map clock output to PIN PA8
	 HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8008228:	2200      	movs	r2, #0
 800822a:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800822e:	2000      	movs	r0, #0
 8008230:	f7fa fcca 	bl	8002bc8 <HAL_RCC_MCOConfig>
#endif
	//initialise USART 2 for USB comms
#ifdef DEBUG_USART_ENABLE
	  huart2.Instance = USART2;
 8008234:	4b26      	ldr	r3, [pc, #152]	; (80082d0 <Init_Debug+0xd0>)
 8008236:	4a27      	ldr	r2, [pc, #156]	; (80082d4 <Init_Debug+0xd4>)
 8008238:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 800823a:	4b25      	ldr	r3, [pc, #148]	; (80082d0 <Init_Debug+0xd0>)
 800823c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008240:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008242:	4b23      	ldr	r3, [pc, #140]	; (80082d0 <Init_Debug+0xd0>)
 8008244:	2200      	movs	r2, #0
 8008246:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8008248:	4b21      	ldr	r3, [pc, #132]	; (80082d0 <Init_Debug+0xd0>)
 800824a:	2200      	movs	r2, #0
 800824c:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 800824e:	4b20      	ldr	r3, [pc, #128]	; (80082d0 <Init_Debug+0xd0>)
 8008250:	2200      	movs	r2, #0
 8008252:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8008254:	4b1e      	ldr	r3, [pc, #120]	; (80082d0 <Init_Debug+0xd0>)
 8008256:	220c      	movs	r2, #12
 8008258:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800825a:	4b1d      	ldr	r3, [pc, #116]	; (80082d0 <Init_Debug+0xd0>)
 800825c:	2200      	movs	r2, #0
 800825e:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008260:	4b1b      	ldr	r3, [pc, #108]	; (80082d0 <Init_Debug+0xd0>)
 8008262:	2200      	movs	r2, #0
 8008264:	61da      	str	r2, [r3, #28]
	  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008266:	4b1a      	ldr	r3, [pc, #104]	; (80082d0 <Init_Debug+0xd0>)
 8008268:	2200      	movs	r2, #0
 800826a:	621a      	str	r2, [r3, #32]
	  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800826c:	4b18      	ldr	r3, [pc, #96]	; (80082d0 <Init_Debug+0xd0>)
 800826e:	2200      	movs	r2, #0
 8008270:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008272:	4817      	ldr	r0, [pc, #92]	; (80082d0 <Init_Debug+0xd0>)
 8008274:	f7fd f97f 	bl	8005576 <HAL_UART_Init>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d001      	beq.n	8008282 <Init_Debug+0x82>
	  {
	    return HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	e022      	b.n	80082c8 <Init_Debug+0xc8>
	  }
	  setbuf(stdout, NULL);
 8008282:	4b15      	ldr	r3, [pc, #84]	; (80082d8 <Init_Debug+0xd8>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	2100      	movs	r1, #0
 800828a:	4618      	mov	r0, r3
 800828c:	f002 f8b4 	bl	800a3f8 <setbuf>
#endif

#ifdef DEBUG_LED1_ENABLE
	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8008290:	2200      	movs	r2, #0
 8008292:	2120      	movs	r1, #32
 8008294:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008298:	f7f9 fe9e 	bl	8001fd8 <HAL_GPIO_WritePin>
	  /*Configure GPIO pin : PD2 */
	  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800829c:	2304      	movs	r3, #4
 800829e:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80082a0:	2303      	movs	r3, #3
 80082a2:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082a4:	2300      	movs	r3, #0
 80082a6:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80082a8:	1d3b      	adds	r3, r7, #4
 80082aa:	4619      	mov	r1, r3
 80082ac:	480b      	ldr	r0, [pc, #44]	; (80082dc <Init_Debug+0xdc>)
 80082ae:	f7f9 fbf9 	bl	8001aa4 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,SET);
 80082b2:	2201      	movs	r2, #1
 80082b4:	2120      	movs	r1, #32
 80082b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80082ba:	f7f9 fe8d 	bl	8001fd8 <HAL_GPIO_WritePin>
#endif

#ifdef DEBUG_LP_ENABLE
	  HAL_DBGMCU_EnableDBGStandbyMode();	//enable for shutdown mode
 80082be:	f7f8 ff1d 	bl	80010fc <HAL_DBGMCU_EnableDBGStandbyMode>
	  HAL_DBGMCU_EnableDBGStopMode();
 80082c2:	f7f8 ff0d 	bl	80010e0 <HAL_DBGMCU_EnableDBGStopMode>

#endif

	  return HAL_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3718      	adds	r7, #24
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	20002148 	.word	0x20002148
 80082d4:	40004400 	.word	0x40004400
 80082d8:	20000010 	.word	0x20000010
 80082dc:	48000c00 	.word	0x48000c00

080082e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
HAL_StatusTypeDef SystemClock_Config(void)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b0b8      	sub	sp, #224	; 0xe0
 80082e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80082e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80082ea:	2244      	movs	r2, #68	; 0x44
 80082ec:	2100      	movs	r1, #0
 80082ee:	4618      	mov	r0, r3
 80082f0:	f001 fd81 	bl	8009df6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80082f4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80082f8:	2200      	movs	r2, #0
 80082fa:	601a      	str	r2, [r3, #0]
 80082fc:	605a      	str	r2, [r3, #4]
 80082fe:	609a      	str	r2, [r3, #8]
 8008300:	60da      	str	r2, [r3, #12]
 8008302:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008304:	463b      	mov	r3, r7
 8008306:	2288      	movs	r2, #136	; 0x88
 8008308:	2100      	movs	r1, #0
 800830a:	4618      	mov	r0, r3
 800830c:	f001 fd73 	bl	8009df6 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8008310:	f7f9 fe92 	bl	8002038 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8008314:	4a3c      	ldr	r2, [pc, #240]	; (8008408 <SystemClock_Config+0x128>)
 8008316:	4b3c      	ldr	r3, [pc, #240]	; (8008408 <SystemClock_Config+0x128>)
 8008318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800831c:	f023 0318 	bic.w	r3, r3, #24
 8008320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8008324:	2316      	movs	r3, #22
 8008326:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800832a:	2301      	movs	r3, #1
 800832c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008330:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008334:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008338:	2310      	movs	r3, #16
 800833a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800833e:	2301      	movs	r3, #1
 8008340:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8008344:	2300      	movs	r3, #0
 8008346:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800834a:	2360      	movs	r3, #96	; 0x60
 800834c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008350:	2302      	movs	r3, #2
 8008352:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8008356:	2301      	movs	r3, #1
 8008358:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800835c:	2301      	movs	r3, #1
 800835e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 26;
 8008362:	231a      	movs	r3, #26
 8008364:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8008368:	2307      	movs	r3, #7
 800836a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800836e:	2302      	movs	r3, #2
 8008370:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8008374:	2302      	movs	r3, #2
 8008376:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800837a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800837e:	4618      	mov	r0, r3
 8008380:	f7f9 ff5a 	bl	8002238 <HAL_RCC_OscConfig>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d001      	beq.n	800838e <SystemClock_Config+0xae>
  {
    return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e037      	b.n	80083fe <SystemClock_Config+0x11e>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800838e:	230f      	movs	r3, #15
 8008390:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008394:	2303      	movs	r3, #3
 8008396:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800839a:	2380      	movs	r3, #128	; 0x80
 800839c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80083a0:	2300      	movs	r3, #0
 80083a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80083a6:	2300      	movs	r3, #0
 80083a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80083ac:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80083b0:	2101      	movs	r1, #1
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7fa fb26 	bl	8002a04 <HAL_RCC_ClockConfig>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d001      	beq.n	80083c2 <SystemClock_Config+0xe2>
  {
    return HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	e01d      	b.n	80083fe <SystemClock_Config+0x11e>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2;
 80083c2:	f04f 1302 	mov.w	r3, #131074	; 0x20002
 80083c6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 80083c8:	2308      	movs	r3, #8
 80083ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80083cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80083d4:	463b      	mov	r3, r7
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7fa fd4a 	bl	8002e70 <HAL_RCCEx_PeriphCLKConfig>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d001      	beq.n	80083e6 <SystemClock_Config+0x106>
  {
    return HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	e00b      	b.n	80083fe <SystemClock_Config+0x11e>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80083e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80083ea:	f7f9 fe9b 	bl	8002124 <HAL_PWREx_ControlVoltageScaling>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d001      	beq.n	80083f8 <SystemClock_Config+0x118>
  {
    return HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	e002      	b.n	80083fe <SystemClock_Config+0x11e>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80083f8:	f7fb f820 	bl	800343c <HAL_RCCEx_EnableMSIPLLMode>
  return HAL_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	37e0      	adds	r7, #224	; 0xe0
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	40021000 	.word	0x40021000

0800840c <Go_To_Sleep>:

HAL_StatusTypeDef Go_To_Sleep(PWR_MODE_t mode, uint32_t seconds)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	4603      	mov	r3, r0
 8008414:	6039      	str	r1, [r7, #0]
 8008416:	71fb      	strb	r3, [r7, #7]
	//reset wake up pin interrupt
	__HAL_RCC_PWR_CLK_ENABLE();
 8008418:	4a16      	ldr	r2, [pc, #88]	; (8008474 <Go_To_Sleep+0x68>)
 800841a:	4b16      	ldr	r3, [pc, #88]	; (8008474 <Go_To_Sleep+0x68>)
 800841c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800841e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008422:	6593      	str	r3, [r2, #88]	; 0x58
 8008424:	4b13      	ldr	r3, [pc, #76]	; (8008474 <Go_To_Sleep+0x68>)
 8008426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800842c:	60fb      	str	r3, [r7, #12]
 800842e:	68fb      	ldr	r3, [r7, #12]
	/* Enable Wake Up timer in interrupt mode */
	//set alarm
	if(seconds > 0)
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00b      	beq.n	800844e <Go_To_Sleep+0x42>
	{
	 if(HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,(seconds-1),RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	3b01      	subs	r3, #1
 800843a:	2204      	movs	r2, #4
 800843c:	4619      	mov	r1, r3
 800843e:	480e      	ldr	r0, [pc, #56]	; (8008478 <Go_To_Sleep+0x6c>)
 8008440:	f7fb fc2a 	bl	8003c98 <HAL_RTCEx_SetWakeUpTimer_IT>
 8008444:	4603      	mov	r3, r0
 8008446:	2b00      	cmp	r3, #0
 8008448:	d001      	beq.n	800844e <Go_To_Sleep+0x42>
	  {
		 return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e00d      	b.n	800846a <Go_To_Sleep+0x5e>
	  }
	}
	 HAL_PWREx_EnableInternalWakeUpLine();
 800844e:	f7f9 febd 	bl	80021cc <HAL_PWREx_EnableInternalWakeUpLine>
	 //if shutdown mode enabled
	 if(mode == SHUTDOWN)
 8008452:	79fb      	ldrb	r3, [r7, #7]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d102      	bne.n	800845e <Go_To_Sleep+0x52>
	 {
		 HAL_PWREx_EnterSHUTDOWNMode();
 8008458:	f7f9 fed4 	bl	8002204 <HAL_PWREx_EnterSHUTDOWNMode>
 800845c:	e004      	b.n	8008468 <Go_To_Sleep+0x5c>
	 }
	 else if(mode == STDBY)
 800845e:	79fb      	ldrb	r3, [r7, #7]
 8008460:	2b01      	cmp	r3, #1
 8008462:	d101      	bne.n	8008468 <Go_To_Sleep+0x5c>
	 {
		 HAL_PWR_EnterSTANDBYMode();
 8008464:	f7f9 fe38 	bl	80020d8 <HAL_PWR_EnterSTANDBYMode>
	 }
	 return HAL_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	40021000 	.word	0x40021000
 8008478:	200021cc 	.word	0x200021cc

0800847c <set_WUP_Pin>:
	return HAL_OK;
}


void set_WUP_Pin(uint32_t Pin, PinMode_typedef mode)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b090      	sub	sp, #64	; 0x40
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	460b      	mov	r3, r1
 8008486:	70fb      	strb	r3, [r7, #3]

	GPIO_TypeDef *Pin_Port;
	IRQn_Type WUP_IRQn;
	GPIO_InitTypeDef GPIO_InitStruct;
	switch (Pin) {
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	3b01      	subs	r3, #1
 800848c:	2b0f      	cmp	r3, #15
 800848e:	f200 808a 	bhi.w	80085a6 <set_WUP_Pin+0x12a>
 8008492:	a201      	add	r2, pc, #4	; (adr r2, 8008498 <set_WUP_Pin+0x1c>)
 8008494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008498:	080084d9 	.word	0x080084d9
 800849c:	08008503 	.word	0x08008503
 80084a0:	080085a7 	.word	0x080085a7
 80084a4:	0800852d 	.word	0x0800852d
 80084a8:	080085a7 	.word	0x080085a7
 80084ac:	080085a7 	.word	0x080085a7
 80084b0:	080085a7 	.word	0x080085a7
 80084b4:	08008555 	.word	0x08008555
 80084b8:	080085a7 	.word	0x080085a7
 80084bc:	080085a7 	.word	0x080085a7
 80084c0:	080085a7 	.word	0x080085a7
 80084c4:	080085a7 	.word	0x080085a7
 80084c8:	080085a7 	.word	0x080085a7
 80084cc:	080085a7 	.word	0x080085a7
 80084d0:	080085a7 	.word	0x080085a7
 80084d4:	0800857f 	.word	0x0800857f
		case PWR_WAKEUP_PIN1:
			__HAL_RCC_GPIOA_CLK_ENABLE();
 80084d8:	4a69      	ldr	r2, [pc, #420]	; (8008680 <set_WUP_Pin+0x204>)
 80084da:	4b69      	ldr	r3, [pc, #420]	; (8008680 <set_WUP_Pin+0x204>)
 80084dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084de:	f043 0301 	orr.w	r3, r3, #1
 80084e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80084e4:	4b66      	ldr	r3, [pc, #408]	; (8008680 <set_WUP_Pin+0x204>)
 80084e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084e8:	f003 0301 	and.w	r3, r3, #1
 80084ec:	623b      	str	r3, [r7, #32]
 80084ee:	6a3b      	ldr	r3, [r7, #32]
			Pin_Port = GPIOA;
 80084f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80084f4:	63fb      	str	r3, [r7, #60]	; 0x3c
			GPIO_InitStruct.Pin = GPIO_PIN_0;
 80084f6:	2301      	movs	r3, #1
 80084f8:	627b      	str	r3, [r7, #36]	; 0x24
			WUP_IRQn = EXTI0_IRQn;
 80084fa:	2306      	movs	r3, #6
 80084fc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			break;
 8008500:	e052      	b.n	80085a8 <set_WUP_Pin+0x12c>
		case PWR_WAKEUP_PIN2:
			__HAL_RCC_GPIOC_CLK_ENABLE();
 8008502:	4a5f      	ldr	r2, [pc, #380]	; (8008680 <set_WUP_Pin+0x204>)
 8008504:	4b5e      	ldr	r3, [pc, #376]	; (8008680 <set_WUP_Pin+0x204>)
 8008506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008508:	f043 0304 	orr.w	r3, r3, #4
 800850c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800850e:	4b5c      	ldr	r3, [pc, #368]	; (8008680 <set_WUP_Pin+0x204>)
 8008510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008512:	f003 0304 	and.w	r3, r3, #4
 8008516:	61fb      	str	r3, [r7, #28]
 8008518:	69fb      	ldr	r3, [r7, #28]
			Pin_Port = GPIOC;
 800851a:	4b5a      	ldr	r3, [pc, #360]	; (8008684 <set_WUP_Pin+0x208>)
 800851c:	63fb      	str	r3, [r7, #60]	; 0x3c
			GPIO_InitStruct.Pin = GPIO_PIN_13;
 800851e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008522:	627b      	str	r3, [r7, #36]	; 0x24
			WUP_IRQn = EXTI15_10_IRQn;
 8008524:	2328      	movs	r3, #40	; 0x28
 8008526:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			break;
 800852a:	e03d      	b.n	80085a8 <set_WUP_Pin+0x12c>
		case PWR_WAKEUP_PIN3:
			__HAL_RCC_GPIOE_CLK_ENABLE();
 800852c:	4a54      	ldr	r2, [pc, #336]	; (8008680 <set_WUP_Pin+0x204>)
 800852e:	4b54      	ldr	r3, [pc, #336]	; (8008680 <set_WUP_Pin+0x204>)
 8008530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008532:	f043 0310 	orr.w	r3, r3, #16
 8008536:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008538:	4b51      	ldr	r3, [pc, #324]	; (8008680 <set_WUP_Pin+0x204>)
 800853a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800853c:	f003 0310 	and.w	r3, r3, #16
 8008540:	61bb      	str	r3, [r7, #24]
 8008542:	69bb      	ldr	r3, [r7, #24]
			Pin_Port = GPIOE;
 8008544:	4b50      	ldr	r3, [pc, #320]	; (8008688 <set_WUP_Pin+0x20c>)
 8008546:	63fb      	str	r3, [r7, #60]	; 0x3c
			GPIO_InitStruct.Pin = GPIO_PIN_6;
 8008548:	2340      	movs	r3, #64	; 0x40
 800854a:	627b      	str	r3, [r7, #36]	; 0x24
			WUP_IRQn = EXTI9_5_IRQn;
 800854c:	2317      	movs	r3, #23
 800854e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			break;
 8008552:	e029      	b.n	80085a8 <set_WUP_Pin+0x12c>
		case PWR_WAKEUP_PIN4:
			__HAL_RCC_GPIOA_CLK_ENABLE();
 8008554:	4a4a      	ldr	r2, [pc, #296]	; (8008680 <set_WUP_Pin+0x204>)
 8008556:	4b4a      	ldr	r3, [pc, #296]	; (8008680 <set_WUP_Pin+0x204>)
 8008558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800855a:	f043 0301 	orr.w	r3, r3, #1
 800855e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008560:	4b47      	ldr	r3, [pc, #284]	; (8008680 <set_WUP_Pin+0x204>)
 8008562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008564:	f003 0301 	and.w	r3, r3, #1
 8008568:	617b      	str	r3, [r7, #20]
 800856a:	697b      	ldr	r3, [r7, #20]
			GPIO_InitStruct.Pin = GPIO_PIN_2;
 800856c:	2304      	movs	r3, #4
 800856e:	627b      	str	r3, [r7, #36]	; 0x24
			Pin_Port = GPIOA;
 8008570:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008574:	63fb      	str	r3, [r7, #60]	; 0x3c
			WUP_IRQn = EXTI2_IRQn;
 8008576:	2308      	movs	r3, #8
 8008578:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			break;
 800857c:	e014      	b.n	80085a8 <set_WUP_Pin+0x12c>
		case PWR_WAKEUP_PIN5:
			__HAL_RCC_GPIOC_CLK_ENABLE();
 800857e:	4a40      	ldr	r2, [pc, #256]	; (8008680 <set_WUP_Pin+0x204>)
 8008580:	4b3f      	ldr	r3, [pc, #252]	; (8008680 <set_WUP_Pin+0x204>)
 8008582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008584:	f043 0304 	orr.w	r3, r3, #4
 8008588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800858a:	4b3d      	ldr	r3, [pc, #244]	; (8008680 <set_WUP_Pin+0x204>)
 800858c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800858e:	f003 0304 	and.w	r3, r3, #4
 8008592:	613b      	str	r3, [r7, #16]
 8008594:	693b      	ldr	r3, [r7, #16]
			Pin_Port = GPIOC;
 8008596:	4b3b      	ldr	r3, [pc, #236]	; (8008684 <set_WUP_Pin+0x208>)
 8008598:	63fb      	str	r3, [r7, #60]	; 0x3c
			GPIO_InitStruct.Pin = GPIO_PIN_5;
 800859a:	2320      	movs	r3, #32
 800859c:	627b      	str	r3, [r7, #36]	; 0x24
			WUP_IRQn = EXTI9_5_IRQn;
 800859e:	2317      	movs	r3, #23
 80085a0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			break;
 80085a4:	e000      	b.n	80085a8 <set_WUP_Pin+0x12c>
		default:
			break;
 80085a6:	bf00      	nop
	}
	//configure pin for exti map


	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80085a8:	4b38      	ldr	r3, [pc, #224]	; (800868c <set_WUP_Pin+0x210>)
 80085aa:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085ac:	2300      	movs	r3, #0
 80085ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80085b0:	2302      	movs	r3, #2
 80085b2:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(Pin_Port,&GPIO_InitStruct);
 80085b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085b8:	4619      	mov	r1, r3
 80085ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80085bc:	f7f9 fa72 	bl	8001aa4 <HAL_GPIO_Init>
	//set NVIC interrupt
    HAL_NVIC_SetPriority(WUP_IRQn, 0x0F, 0);
 80085c0:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80085c4:	2200      	movs	r2, #0
 80085c6:	210f      	movs	r1, #15
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7f8 febe 	bl	800134a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(WUP_IRQn);
 80085ce:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7f8 fed5 	bl	8001382 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_ClearPendingIRQ(WUP_IRQn);
 80085d8:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80085dc:	4618      	mov	r0, r3
 80085de:	f7f8 fefe 	bl	80013de <HAL_NVIC_ClearPendingIRQ>
    //enable wup in PWR register
    __HAL_RCC_PWR_CLK_ENABLE();
 80085e2:	4a27      	ldr	r2, [pc, #156]	; (8008680 <set_WUP_Pin+0x204>)
 80085e4:	4b26      	ldr	r3, [pc, #152]	; (8008680 <set_WUP_Pin+0x204>)
 80085e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085ec:	6593      	str	r3, [r2, #88]	; 0x58
 80085ee:	4b24      	ldr	r3, [pc, #144]	; (8008680 <set_WUP_Pin+0x204>)
 80085f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085f6:	60fb      	str	r3, [r7, #12]
 80085f8:	68fb      	ldr	r3, [r7, #12]
    if(mode == MODE_WUP)
 80085fa:	78fb      	ldrb	r3, [r7, #3]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d11e      	bne.n	800863e <set_WUP_Pin+0x1c2>
    {
    	__HAL_RCC_PWR_CLK_ENABLE();
 8008600:	4a1f      	ldr	r2, [pc, #124]	; (8008680 <set_WUP_Pin+0x204>)
 8008602:	4b1f      	ldr	r3, [pc, #124]	; (8008680 <set_WUP_Pin+0x204>)
 8008604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800860a:	6593      	str	r3, [r2, #88]	; 0x58
 800860c:	4b1c      	ldr	r3, [pc, #112]	; (8008680 <set_WUP_Pin+0x204>)
 800860e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008614:	60bb      	str	r3, [r7, #8]
 8008616:	68bb      	ldr	r3, [r7, #8]
    	HAL_PWR_EnableWakeUpPin(Pin);
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f7f9 fd29 	bl	8002070 <HAL_PWR_EnableWakeUpPin>
    	//clear unwanted interrupts
    	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF1);
 800861e:	4b1c      	ldr	r3, [pc, #112]	; (8008690 <set_WUP_Pin+0x214>)
 8008620:	2201      	movs	r2, #1
 8008622:	619a      	str	r2, [r3, #24]
    	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF2);
 8008624:	4b1a      	ldr	r3, [pc, #104]	; (8008690 <set_WUP_Pin+0x214>)
 8008626:	2202      	movs	r2, #2
 8008628:	619a      	str	r2, [r3, #24]
    	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF3);
 800862a:	4b19      	ldr	r3, [pc, #100]	; (8008690 <set_WUP_Pin+0x214>)
 800862c:	2204      	movs	r2, #4
 800862e:	619a      	str	r2, [r3, #24]
    	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF4);
 8008630:	4b17      	ldr	r3, [pc, #92]	; (8008690 <set_WUP_Pin+0x214>)
 8008632:	2208      	movs	r2, #8
 8008634:	619a      	str	r2, [r3, #24]
    	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF5);
 8008636:	4b16      	ldr	r3, [pc, #88]	; (8008690 <set_WUP_Pin+0x214>)
 8008638:	2210      	movs	r2, #16
 800863a:	619a      	str	r2, [r3, #24]
 800863c:	e015      	b.n	800866a <set_WUP_Pin+0x1ee>

    }else if (mode == MODE_EXTI)
 800863e:	78fb      	ldrb	r3, [r7, #3]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d112      	bne.n	800866a <set_WUP_Pin+0x1ee>
    {
    	HAL_PWR_DisableWakeUpPin(Pin);
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f7f9 fd33 	bl	80020b0 <HAL_PWR_DisableWakeUpPin>
    	__HAL_GPIO_EXTI_CLEAR_IT(EXTI_LINE_5);
 800864a:	4b12      	ldr	r3, [pc, #72]	; (8008694 <set_WUP_Pin+0x218>)
 800864c:	4a12      	ldr	r2, [pc, #72]	; (8008698 <set_WUP_Pin+0x21c>)
 800864e:	615a      	str	r2, [r3, #20]
    	__HAL_GPIO_EXTI_CLEAR_IT(EXTI_LINE_13);
 8008650:	4b10      	ldr	r3, [pc, #64]	; (8008694 <set_WUP_Pin+0x218>)
 8008652:	4a12      	ldr	r2, [pc, #72]	; (800869c <set_WUP_Pin+0x220>)
 8008654:	615a      	str	r2, [r3, #20]
    	__HAL_GPIO_EXTI_CLEAR_IT(EXTI_LINE_0);
 8008656:	4b0f      	ldr	r3, [pc, #60]	; (8008694 <set_WUP_Pin+0x218>)
 8008658:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 800865c:	615a      	str	r2, [r3, #20]
    	__HAL_GPIO_EXTI_CLEAR_IT(EXTI_LINE_2);
 800865e:	4b0d      	ldr	r3, [pc, #52]	; (8008694 <set_WUP_Pin+0x218>)
 8008660:	4a0f      	ldr	r2, [pc, #60]	; (80086a0 <set_WUP_Pin+0x224>)
 8008662:	615a      	str	r2, [r3, #20]
    	__HAL_GPIO_EXTI_CLEAR_IT(EXTI_LINE_6);
 8008664:	4b0b      	ldr	r3, [pc, #44]	; (8008694 <set_WUP_Pin+0x218>)
 8008666:	4a0f      	ldr	r2, [pc, #60]	; (80086a4 <set_WUP_Pin+0x228>)
 8008668:	615a      	str	r2, [r3, #20]
    }

	__HAL_RCC_PWR_CLK_DISABLE();
 800866a:	4a05      	ldr	r2, [pc, #20]	; (8008680 <set_WUP_Pin+0x204>)
 800866c:	4b04      	ldr	r3, [pc, #16]	; (8008680 <set_WUP_Pin+0x204>)
 800866e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008670:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008674:	6593      	str	r3, [r2, #88]	; 0x58
}
 8008676:	bf00      	nop
 8008678:	3740      	adds	r7, #64	; 0x40
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	40021000 	.word	0x40021000
 8008684:	48000800 	.word	0x48000800
 8008688:	48001000 	.word	0x48001000
 800868c:	10110000 	.word	0x10110000
 8008690:	40007000 	.word	0x40007000
 8008694:	40010400 	.word	0x40010400
 8008698:	16000005 	.word	0x16000005
 800869c:	1600000d 	.word	0x1600000d
 80086a0:	16000002 	.word	0x16000002
 80086a4:	16000006 	.word	0x16000006

080086a8 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*) &ch,1,0xFFFF);
 80086b0:	1d39      	adds	r1, r7, #4
 80086b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80086b6:	2201      	movs	r2, #1
 80086b8:	4803      	ldr	r0, [pc, #12]	; (80086c8 <__io_putchar+0x20>)
 80086ba:	f7fc ffdf 	bl	800567c <HAL_UART_Transmit>
	return ch;
 80086be:	687b      	ldr	r3, [r7, #4]
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	20002148 	.word	0x20002148

080086cc <GPIO_Set_Pin_LP>:

void GPIO_Set_Pin_LP(void)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b08a      	sub	sp, #40	; 0x28
 80086d0:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086d2:	f107 0314 	add.w	r3, r7, #20
 80086d6:	2200      	movs	r2, #0
 80086d8:	601a      	str	r2, [r3, #0]
 80086da:	605a      	str	r2, [r3, #4]
 80086dc:	609a      	str	r2, [r3, #8]
 80086de:	60da      	str	r2, [r3, #12]
 80086e0:	611a      	str	r2, [r3, #16]
	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80086e2:	4a3e      	ldr	r2, [pc, #248]	; (80087dc <GPIO_Set_Pin_LP+0x110>)
 80086e4:	4b3d      	ldr	r3, [pc, #244]	; (80087dc <GPIO_Set_Pin_LP+0x110>)
 80086e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086e8:	f043 0304 	orr.w	r3, r3, #4
 80086ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80086ee:	4b3b      	ldr	r3, [pc, #236]	; (80087dc <GPIO_Set_Pin_LP+0x110>)
 80086f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086f2:	f003 0304 	and.w	r3, r3, #4
 80086f6:	613b      	str	r3, [r7, #16]
 80086f8:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 80086fa:	4a38      	ldr	r2, [pc, #224]	; (80087dc <GPIO_Set_Pin_LP+0x110>)
 80086fc:	4b37      	ldr	r3, [pc, #220]	; (80087dc <GPIO_Set_Pin_LP+0x110>)
 80086fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008706:	4b35      	ldr	r3, [pc, #212]	; (80087dc <GPIO_Set_Pin_LP+0x110>)
 8008708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800870a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800870e:	60fb      	str	r3, [r7, #12]
 8008710:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008712:	4a32      	ldr	r2, [pc, #200]	; (80087dc <GPIO_Set_Pin_LP+0x110>)
 8008714:	4b31      	ldr	r3, [pc, #196]	; (80087dc <GPIO_Set_Pin_LP+0x110>)
 8008716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008718:	f043 0301 	orr.w	r3, r3, #1
 800871c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800871e:	4b2f      	ldr	r3, [pc, #188]	; (80087dc <GPIO_Set_Pin_LP+0x110>)
 8008720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008722:	f003 0301 	and.w	r3, r3, #1
 8008726:	60bb      	str	r3, [r7, #8]
 8008728:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800872a:	4a2c      	ldr	r2, [pc, #176]	; (80087dc <GPIO_Set_Pin_LP+0x110>)
 800872c:	4b2b      	ldr	r3, [pc, #172]	; (80087dc <GPIO_Set_Pin_LP+0x110>)
 800872e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008730:	f043 0302 	orr.w	r3, r3, #2
 8008734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008736:	4b29      	ldr	r3, [pc, #164]	; (80087dc <GPIO_Set_Pin_LP+0x110>)
 8008738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800873a:	f003 0302 	and.w	r3, r3, #2
 800873e:	607b      	str	r3, [r7, #4]
 8008740:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008742:	4a26      	ldr	r2, [pc, #152]	; (80087dc <GPIO_Set_Pin_LP+0x110>)
 8008744:	4b25      	ldr	r3, [pc, #148]	; (80087dc <GPIO_Set_Pin_LP+0x110>)
 8008746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008748:	f043 0308 	orr.w	r3, r3, #8
 800874c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800874e:	4b23      	ldr	r3, [pc, #140]	; (80087dc <GPIO_Set_Pin_LP+0x110>)
 8008750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008752:	f003 0308 	and.w	r3, r3, #8
 8008756:	603b      	str	r3, [r7, #0]
 8008758:	683b      	ldr	r3, [r7, #0]
	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800875a:	2200      	movs	r2, #0
 800875c:	2120      	movs	r1, #32
 800875e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008762:	f7f9 fc39 	bl	8001fd8 <HAL_GPIO_WritePin>
	  /*Configure GPIO pins : PC13 PC0 PC1 PC2
	                           PC3 PC4 PC5 PC6
	                           PC7 PC8 PC9 PC10
	                           PC11 PC12 */
	  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8008766:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800876a:	617b      	str	r3, [r7, #20]
	                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
	                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
	                          |GPIO_PIN_11|GPIO_PIN_12;
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800876c:	2303      	movs	r3, #3
 800876e:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008770:	2300      	movs	r3, #0
 8008772:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008774:	f107 0314 	add.w	r3, r7, #20
 8008778:	4619      	mov	r1, r3
 800877a:	4819      	ldr	r0, [pc, #100]	; (80087e0 <GPIO_Set_Pin_LP+0x114>)
 800877c:	f7f9 f992 	bl	8001aa4 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PA0 PA1 PA4 PA6
	                           PA7 PA9 PA10 PA11
	                           PA12 PA15 */
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 8008780:	f649 63d3 	movw	r3, #40659	; 0x9ed3
 8008784:	617b      	str	r3, [r7, #20]
	                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
	                          |GPIO_PIN_12|GPIO_PIN_15;
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008786:	2303      	movs	r3, #3
 8008788:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800878a:	2300      	movs	r3, #0
 800878c:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800878e:	f107 0314 	add.w	r3, r7, #20
 8008792:	4619      	mov	r1, r3
 8008794:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008798:	f7f9 f984 	bl	8001aa4 <HAL_GPIO_Init>

	  /*Configure GPIO pin : LD2_Pin */
	  GPIO_InitStruct.Pin = LD2_Pin;
 800879c:	2320      	movs	r3, #32
 800879e:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80087a0:	2301      	movs	r3, #1
 80087a2:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087a4:	2300      	movs	r3, #0
 80087a6:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087a8:	2300      	movs	r3, #0
 80087aa:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80087ac:	f107 0314 	add.w	r3, r7, #20
 80087b0:	4619      	mov	r1, r3
 80087b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80087b6:	f7f9 f975 	bl	8001aa4 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PB0 PB1 PB2 PB10
	                           PB11 PB12 PB13 PB14
	                           PB15 PB3 PB4 PB5
	                           PB6 PB7 PB8 PB9 */
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80087ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80087be:	617b      	str	r3, [r7, #20]
	                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
	                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
	                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80087c0:	2303      	movs	r3, #3
 80087c2:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087c4:	2300      	movs	r3, #0
 80087c6:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80087c8:	f107 0314 	add.w	r3, r7, #20
 80087cc:	4619      	mov	r1, r3
 80087ce:	4805      	ldr	r0, [pc, #20]	; (80087e4 <GPIO_Set_Pin_LP+0x118>)
 80087d0:	f7f9 f968 	bl	8001aa4 <HAL_GPIO_Init>

}
 80087d4:	bf00      	nop
 80087d6:	3728      	adds	r7, #40	; 0x28
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	40021000 	.word	0x40021000
 80087e0:	48000800 	.word	0x48000800
 80087e4:	48000400 	.word	0x48000400

080087e8 <EXTI15_10_IRQHandler>:
/*
 * @brief: EXTI IRQ Handler for Wake Up Pin 2 (PC13)
 */

void EXTI15_10_IRQHandler(void)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
	if(__HAL_GPIO_EXTI_GET_FLAG(EXTI_IRIDIUM_RING_WAKE_PIN))
 80087ee:	4b13      	ldr	r3, [pc, #76]	; (800883c <EXTI15_10_IRQHandler+0x54>)
 80087f0:	695b      	ldr	r3, [r3, #20]
 80087f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d01b      	beq.n	8008832 <EXTI15_10_IRQHandler+0x4a>
	{
		__HAL_GPIO_EXTI_CLEAR_FLAG(EXTI_IRIDIUM_RING_WAKE_PIN);
 80087fa:	4b10      	ldr	r3, [pc, #64]	; (800883c <EXTI15_10_IRQHandler+0x54>)
 80087fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008800:	615a      	str	r2, [r3, #20]
		//interrupt source from PWR WAKE PIN 2 == IRIDIUM Recieve Event

		//ROUTINE START
		printf("Incoming Message from Satellite detected while awake: Receiving...");
 8008802:	480f      	ldr	r0, [pc, #60]	; (8008840 <EXTI15_10_IRQHandler+0x58>)
 8008804:	f001 fd68 	bl	800a2d8 <printf>
		for (int i = 0; i < 10; ++i)
 8008808:	2300      	movs	r3, #0
 800880a:	607b      	str	r3, [r7, #4]
 800880c:	e00b      	b.n	8008826 <EXTI15_10_IRQHandler+0x3e>
		{
			HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 800880e:	2120      	movs	r1, #32
 8008810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008814:	f7f9 fbf7 	bl	8002006 <HAL_GPIO_TogglePin>
			HAL_Delay(500);
 8008818:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800881c:	f7f8 fc3e 	bl	800109c <HAL_Delay>
		for (int i = 0; i < 10; ++i)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	3301      	adds	r3, #1
 8008824:	607b      	str	r3, [r7, #4]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2b09      	cmp	r3, #9
 800882a:	ddf0      	ble.n	800880e <EXTI15_10_IRQHandler+0x26>
		}
		printf("Message Recieved!\r\n");
 800882c:	4805      	ldr	r0, [pc, #20]	; (8008844 <EXTI15_10_IRQHandler+0x5c>)
 800882e:	f001 fdcb 	bl	800a3c8 <puts>
		//ROUTINE END

	}
}
 8008832:	bf00      	nop
 8008834:	3708      	adds	r7, #8
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	40010400 	.word	0x40010400
 8008840:	0801085c 	.word	0x0801085c
 8008844:	080108a0 	.word	0x080108a0

08008848 <EXTI9_5_IRQHandler>:

/*
 * @brief: EXTI IRQ Handler for Wake Up Pin 5 (PC5)
 */
void EXTI9_5_IRQHandler(void)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
	if(__HAL_GPIO_EXTI_GET_FLAG(EXTI_IMU_EVENT_WAKE_PIN))
 800884e:	4b12      	ldr	r3, [pc, #72]	; (8008898 <EXTI9_5_IRQHandler+0x50>)
 8008850:	695b      	ldr	r3, [r3, #20]
 8008852:	f003 0320 	and.w	r3, r3, #32
 8008856:	2b00      	cmp	r3, #0
 8008858:	d019      	beq.n	800888e <EXTI9_5_IRQHandler+0x46>
	{
		__HAL_GPIO_EXTI_CLEAR_FLAG(EXTI_IMU_EVENT_WAKE_PIN);
 800885a:	4b0f      	ldr	r3, [pc, #60]	; (8008898 <EXTI9_5_IRQHandler+0x50>)
 800885c:	2220      	movs	r2, #32
 800885e:	615a      	str	r2, [r3, #20]

		//ROUTINE START

		 printf("IMU Event Detected while awake: Sampling...");
 8008860:	480e      	ldr	r0, [pc, #56]	; (800889c <EXTI9_5_IRQHandler+0x54>)
 8008862:	f001 fd39 	bl	800a2d8 <printf>
		for (int i = 0; i < 50; ++i)
 8008866:	2300      	movs	r3, #0
 8008868:	607b      	str	r3, [r7, #4]
 800886a:	e00a      	b.n	8008882 <EXTI9_5_IRQHandler+0x3a>
		{
			HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 800886c:	2120      	movs	r1, #32
 800886e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008872:	f7f9 fbc8 	bl	8002006 <HAL_GPIO_TogglePin>
		 	HAL_Delay(100);
 8008876:	2064      	movs	r0, #100	; 0x64
 8008878:	f7f8 fc10 	bl	800109c <HAL_Delay>
		for (int i = 0; i < 50; ++i)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	3301      	adds	r3, #1
 8008880:	607b      	str	r3, [r7, #4]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2b31      	cmp	r3, #49	; 0x31
 8008886:	ddf1      	ble.n	800886c <EXTI9_5_IRQHandler+0x24>
		}
		printf("Done\r\n");
 8008888:	4805      	ldr	r0, [pc, #20]	; (80088a0 <EXTI9_5_IRQHandler+0x58>)
 800888a:	f001 fd9d 	bl	800a3c8 <puts>
		//ROUTINE END

	}
}
 800888e:	bf00      	nop
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	40010400 	.word	0x40010400
 800889c:	080108b4 	.word	0x080108b4
 80088a0:	080108e0 	.word	0x080108e0

080088a4 <POR_Handler>:
/*
 * @brief: Power On Reset Handler for BUOY (CASE: NRST Line Pulled low)
 */
void POR_Handler(void)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	af00      	add	r7, sp, #0
	  //clear flags
	  __HAL_RCC_CLEAR_RESET_FLAGS();
 80088a8:	4a14      	ldr	r2, [pc, #80]	; (80088fc <POR_Handler+0x58>)
 80088aa:	4b14      	ldr	r3, [pc, #80]	; (80088fc <POR_Handler+0x58>)
 80088ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80088b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	  //clear the back up registers
	  HAL_PWR_EnableBkUpAccess();
 80088b8:	f7f9 fbbe 	bl	8002038 <HAL_PWR_EnableBkUpAccess>
	  __HAL_RCC_BACKUPRESET_FORCE();
 80088bc:	4a0f      	ldr	r2, [pc, #60]	; (80088fc <POR_Handler+0x58>)
 80088be:	4b0f      	ldr	r3, [pc, #60]	; (80088fc <POR_Handler+0x58>)
 80088c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	  __HAL_RCC_BACKUPRESET_RELEASE();
 80088cc:	4a0b      	ldr	r2, [pc, #44]	; (80088fc <POR_Handler+0x58>)
 80088ce:	4b0b      	ldr	r3, [pc, #44]	; (80088fc <POR_Handler+0x58>)
 80088d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	  HAL_PWR_DisableBkUpAccess();
 80088dc:	f7f9 fbba 	bl	8002054 <HAL_PWR_DisableBkUpAccess>
	  SystemClock_Config();
 80088e0:	f7ff fcfe 	bl	80082e0 <SystemClock_Config>
	  //deactivate and disable wake up timers
	  HAL_PWREx_DisableInternalWakeUpLine();
 80088e4:	f7f9 fc80 	bl	80021e8 <HAL_PWREx_DisableInternalWakeUpLine>
	  /* Clear PWR wake up Flag */
	 __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80088e8:	4b05      	ldr	r3, [pc, #20]	; (8008900 <POR_Handler+0x5c>)
 80088ea:	221f      	movs	r2, #31
 80088ec:	619a      	str	r2, [r3, #24]
	 __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 80088ee:	4b04      	ldr	r3, [pc, #16]	; (8008900 <POR_Handler+0x5c>)
 80088f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80088f4:	619a      	str	r2, [r3, #24]
	  //reinitialise the clock
}
 80088f6:	bf00      	nop
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	40021000 	.word	0x40021000
 8008900:	40007000 	.word	0x40007000

08008904 <BOR_Handler>:
/*
 * @brief: Brown Out Reset Handler for BUOY (case Vbat < Vbrownoutthreshold)
 */
void BOR_Handler(void)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
	  //clear flags
	  __HAL_RCC_CLEAR_RESET_FLAGS();
 800890a:	4a11      	ldr	r2, [pc, #68]	; (8008950 <BOR_Handler+0x4c>)
 800890c:	4b10      	ldr	r3, [pc, #64]	; (8008950 <BOR_Handler+0x4c>)
 800890e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008912:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008916:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	  // transmit log to PC

	  char* msg= "Warning! Device encountered a Brown Out. Exiting Program...\r\n";
 800891a:	4b0e      	ldr	r3, [pc, #56]	; (8008954 <BOR_Handler+0x50>)
 800891c:	607b      	str	r3, [r7, #4]
	  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),100);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f7f7 fc60 	bl	80001e4 <strlen>
 8008924:	4603      	mov	r3, r0
 8008926:	b29a      	uxth	r2, r3
 8008928:	2364      	movs	r3, #100	; 0x64
 800892a:	6879      	ldr	r1, [r7, #4]
 800892c:	480a      	ldr	r0, [pc, #40]	; (8008958 <BOR_Handler+0x54>)
 800892e:	f7fc fea5 	bl	800567c <HAL_UART_Transmit>
	  //perform system reset
	  POR_Handler();
 8008932:	f7ff ffb7 	bl	80088a4 <POR_Handler>
	  HAL_NVIC_SystemReset();
 8008936:	f7f8 fd40 	bl	80013ba <HAL_NVIC_SystemReset>
	  /*
	   * Failure to perform system reset causes device to enter an infinite loop
	   */
	  while(1)
	  {
		  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 800893a:	2120      	movs	r1, #32
 800893c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008940:	f7f9 fb61 	bl	8002006 <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 8008944:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008948:	f7f8 fba8 	bl	800109c <HAL_Delay>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 800894c:	e7f5      	b.n	800893a <BOR_Handler+0x36>
 800894e:	bf00      	nop
 8008950:	40021000 	.word	0x40021000
 8008954:	080108e8 	.word	0x080108e8
 8008958:	20002148 	.word	0x20002148

0800895c <main>:
 **
 **===========================================================================
 **/

int main(void)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
//======================== 1. SYSTEM INIT & CLOCK CONFIG ========================//

	HAL_Init();				//Init Flash prefetch, systick timer, NVIC and LL functions
 8008962:	f7f8 fb25 	bl	8000fb0 <HAL_Init>
	SystemClock_Config();	//configure clock
 8008966:	f7ff fcbb 	bl	80082e0 <SystemClock_Config>
	GPIO_Set_Pin_LP();		//Configure all unused GPIO pins to low Power mode
 800896a:	f7ff feaf 	bl	80086cc <GPIO_Set_Pin_LP>
	Init_Debug();			// initialize debug peripherals
 800896e:	f7ff fc47 	bl	8008200 <Init_Debug>

/*
 * When system powers on, check for any asynchronous resets that
 * may have occured. Use this area to add in any reset handling
 */
	if(__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == SET)
 8008972:	4b9b      	ldr	r3, [pc, #620]	; (8008be0 <main+0x284>)
 8008974:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008978:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800897c:	2b00      	cmp	r3, #0
 800897e:	d001      	beq.n	8008984 <main+0x28>
	{
	  BOR_Handler();
 8008980:	f7ff ffc0 	bl	8008904 <BOR_Handler>
	}
	uint8_t flag = __HAL_RCC_GET_PORRST_FLAG();
 8008984:	4b96      	ldr	r3, [pc, #600]	; (8008be0 <main+0x284>)
 8008986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800898a:	0e9b      	lsrs	r3, r3, #26
 800898c:	f003 0305 	and.w	r3, r3, #5
 8008990:	2b00      	cmp	r3, #0
 8008992:	d001      	beq.n	8008998 <main+0x3c>
 8008994:	2301      	movs	r3, #1
 8008996:	e000      	b.n	800899a <main+0x3e>
 8008998:	2300      	movs	r3, #0
 800899a:	73fb      	strb	r3, [r7, #15]
	if(flag  == SET)
 800899c:	7bfb      	ldrb	r3, [r7, #15]
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d104      	bne.n	80089ac <main+0x50>
	{
	  printf("Software Reset Detected. Initializing main program...\r\n");
 80089a2:	4890      	ldr	r0, [pc, #576]	; (8008be4 <main+0x288>)
 80089a4:	f001 fd10 	bl	800a3c8 <puts>
	  POR_Handler();
 80089a8:	f7ff ff7c 	bl	80088a4 <POR_Handler>
	   * If an interrupt occurred while the device was sleeping, check the
	   * flags to determine if this occurred
	   */

	  //check for interrupts on wake up pins during deep sleep
	  __HAL_RCC_PWR_CLK_ENABLE();
 80089ac:	4a8c      	ldr	r2, [pc, #560]	; (8008be0 <main+0x284>)
 80089ae:	4b8c      	ldr	r3, [pc, #560]	; (8008be0 <main+0x284>)
 80089b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089b6:	6593      	str	r3, [r2, #88]	; 0x58
 80089b8:	4b89      	ldr	r3, [pc, #548]	; (8008be0 <main+0x284>)
 80089ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089c0:	60bb      	str	r3, [r7, #8]
 80089c2:	68bb      	ldr	r3, [r7, #8]
	  if(__HAL_PWR_GET_FLAG(IMU_EVENT_WAKE_FLAG)|| __HAL_PWR_GET_FLAG(IRIDIUM_RING_WAKE_FLAG))
 80089c4:	4b88      	ldr	r3, [pc, #544]	; (8008be8 <main+0x28c>)
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	f003 0310 	and.w	r3, r3, #16
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d105      	bne.n	80089dc <main+0x80>
 80089d0:	4b85      	ldr	r3, [pc, #532]	; (8008be8 <main+0x28c>)
 80089d2:	691b      	ldr	r3, [r3, #16]
 80089d4:	f003 0302 	and.w	r3, r3, #2
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d039      	beq.n	8008a50 <main+0xf4>
	  {
		  Current_State = __GET_PREV_STATE();			//get previous state from back up reg
 80089dc:	4b83      	ldr	r3, [pc, #524]	; (8008bec <main+0x290>)
 80089de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089e0:	b2da      	uxtb	r2, r3
 80089e2:	4b83      	ldr	r3, [pc, #524]	; (8008bf0 <main+0x294>)
 80089e4:	701a      	strb	r2, [r3, #0]
		  if(__HAL_PWR_GET_FLAG(IMU_EVENT_WAKE_FLAG))
 80089e6:	4b80      	ldr	r3, [pc, #512]	; (8008be8 <main+0x28c>)
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	f003 0310 	and.w	r3, r3, #16
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d004      	beq.n	80089fc <main+0xa0>
		  {
			  __HAL_PWR_CLEAR_FLAG(IMU_EVENT_WAKE_FLAG);	//clear  flag in PWR SR
 80089f2:	4b7d      	ldr	r3, [pc, #500]	; (8008be8 <main+0x28c>)
 80089f4:	2210      	movs	r2, #16
 80089f6:	619a      	str	r2, [r3, #24]
			  Routine_ASYNC_IMU_EVENT();				//Perform IMU Event Detection Routine
 80089f8:	f000 f976 	bl	8008ce8 <Routine_ASYNC_IMU_EVENT>
		  }
		  if(__HAL_PWR_GET_FLAG(IRIDIUM_RING_WAKE_FLAG))	//clear  flag in PWR SR
 80089fc:	4b7a      	ldr	r3, [pc, #488]	; (8008be8 <main+0x28c>)
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	f003 0302 	and.w	r3, r3, #2
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d004      	beq.n	8008a12 <main+0xb6>
		  {
			__HAL_PWR_CLEAR_FLAG(IRIDIUM_RING_WAKE_FLAG);
 8008a08:	4b77      	ldr	r3, [pc, #476]	; (8008be8 <main+0x28c>)
 8008a0a:	2202      	movs	r2, #2
 8008a0c:	619a      	str	r2, [r3, #24]
			Routine_ASYNC_IRIDIUM_RX();
 8008a0e:	f000 f98d 	bl	8008d2c <Routine_ASYNC_IRIDIUM_RX>

		  }
		  if(Current_State == STATE_SLEEP)				//return to sleep if Interrupt event handled before wake up
 8008a12:	4b77      	ldr	r3, [pc, #476]	; (8008bf0 <main+0x294>)
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	2b03      	cmp	r3, #3
 8008a18:	d10f      	bne.n	8008a3a <main+0xde>
		  {

			  printf("System Going Back To Sleep\r\n"); 	//check how long device was asleep for
 8008a1a:	4876      	ldr	r0, [pc, #472]	; (8008bf4 <main+0x298>)
 8008a1c:	f001 fcd4 	bl	800a3c8 <puts>
			  set_WUP_Pin(IMU_EVENT_WAKE_PIN, MODE_WUP);	//reenable wake up pins
 8008a20:	2100      	movs	r1, #0
 8008a22:	2010      	movs	r0, #16
 8008a24:	f7ff fd2a 	bl	800847c <set_WUP_Pin>
			  set_WUP_Pin(IRIDIUM_RING_WAKE_PIN, MODE_WUP);
 8008a28:	2100      	movs	r1, #0
 8008a2a:	2002      	movs	r0, #2
 8008a2c:	f7ff fd26 	bl	800847c <set_WUP_Pin>
			  Go_To_Sleep(STDBY,10);						//return to sleep
 8008a30:	210a      	movs	r1, #10
 8008a32:	2001      	movs	r0, #1
 8008a34:	f7ff fcea 	bl	800840c <Go_To_Sleep>
 8008a38:	e00a      	b.n	8008a50 <main+0xf4>
		  }
		  	 else
		  {

		  	  printf("Going Back to Main Loop:\r\n");		//if come from wake mode
 8008a3a:	486f      	ldr	r0, [pc, #444]	; (8008bf8 <main+0x29c>)
 8008a3c:	f001 fcc4 	bl	800a3c8 <puts>
			  __SET_CURRENT_STATE(STATE_ASYNCINT);
 8008a40:	4a6a      	ldr	r2, [pc, #424]	; (8008bec <main+0x290>)
 8008a42:	4b6a      	ldr	r3, [pc, #424]	; (8008bec <main+0x290>)
 8008a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008a4a:	f043 0307 	orr.w	r3, r3, #7
 8008a4e:	6513      	str	r3, [r2, #80]	; 0x50
	   * states are defined in the enum Buoy_State_typedef. The state check block performs the following routine
	   *
	   */

	  //enable access to back up registers
	  switch(__GET_PREV_STATE())
 8008a50:	4b66      	ldr	r3, [pc, #408]	; (8008bec <main+0x290>)
 8008a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	3b01      	subs	r3, #1
 8008a58:	2b06      	cmp	r3, #6
 8008a5a:	d867      	bhi.n	8008b2c <main+0x1d0>
 8008a5c:	a201      	add	r2, pc, #4	; (adr r2, 8008a64 <main+0x108>)
 8008a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a62:	bf00      	nop
 8008a64:	08008a81 	.word	0x08008a81
 8008a68:	08008a89 	.word	0x08008a89
 8008a6c:	08008ae3 	.word	0x08008ae3
 8008a70:	08008b2d 	.word	0x08008b2d
 8008a74:	08008b2d 	.word	0x08008b2d
 8008a78:	08008b13 	.word	0x08008b13
 8008a7c:	08008a81 	.word	0x08008a81
	  {
	  	 case STATE_ASYNCINT:
	  	 case STATE_RESET:
	  	 //system encountered a power on reset, put peripherals here
	  	 Current_State = STATE_SAMPLE;
 8008a80:	4b5b      	ldr	r3, [pc, #364]	; (8008bf0 <main+0x294>)
 8008a82:	2202      	movs	r2, #2
 8008a84:	701a      	strb	r2, [r3, #0]
	  	 break;
 8008a86:	e054      	b.n	8008b32 <main+0x1d6>

	  	 case STATE_SAMPLE:
	  	 //check how many samples have been recorded by the Buoy
	  	 sample_count = __GET_SAMPLE_COUNT();
 8008a88:	4b58      	ldr	r3, [pc, #352]	; (8008bec <main+0x290>)
 8008a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a8c:	0a1b      	lsrs	r3, r3, #8
 8008a8e:	b2da      	uxtb	r2, r3
 8008a90:	4b5a      	ldr	r3, [pc, #360]	; (8008bfc <main+0x2a0>)
 8008a92:	701a      	strb	r2, [r3, #0]
	  	 if(sample_count > 3)
 8008a94:	4b59      	ldr	r3, [pc, #356]	; (8008bfc <main+0x2a0>)
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	2b03      	cmp	r3, #3
 8008a9a:	d903      	bls.n	8008aa4 <main+0x148>
	  	 {
	  		 //set next Buoy State to Transmit
	  		 Current_State = STATE_TRANSMIT;
 8008a9c:	4b54      	ldr	r3, [pc, #336]	; (8008bf0 <main+0x294>)
 8008a9e:	2206      	movs	r2, #6
 8008aa0:	701a      	strb	r2, [r3, #0]
	  		 Current_State = STATE_SLEEP;
	  		 __HAL_RCC_PWR_CLK_ENABLE();
	  		 __SET_CURRENT_STATE(Current_State);
	  		 __HAL_RCC_PWR_CLK_DISABLE();
	  	 }
	  	 break;
 8008aa2:	e046      	b.n	8008b32 <main+0x1d6>
	  		 Current_State = STATE_SLEEP;
 8008aa4:	4b52      	ldr	r3, [pc, #328]	; (8008bf0 <main+0x294>)
 8008aa6:	2203      	movs	r2, #3
 8008aa8:	701a      	strb	r2, [r3, #0]
	  		 __HAL_RCC_PWR_CLK_ENABLE();
 8008aaa:	4a4d      	ldr	r2, [pc, #308]	; (8008be0 <main+0x284>)
 8008aac:	4b4c      	ldr	r3, [pc, #304]	; (8008be0 <main+0x284>)
 8008aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8008ab6:	4b4a      	ldr	r3, [pc, #296]	; (8008be0 <main+0x284>)
 8008ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008abe:	607b      	str	r3, [r7, #4]
 8008ac0:	687b      	ldr	r3, [r7, #4]
	  		 __SET_CURRENT_STATE(Current_State);
 8008ac2:	4a4a      	ldr	r2, [pc, #296]	; (8008bec <main+0x290>)
 8008ac4:	4b49      	ldr	r3, [pc, #292]	; (8008bec <main+0x290>)
 8008ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ac8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008acc:	4948      	ldr	r1, [pc, #288]	; (8008bf0 <main+0x294>)
 8008ace:	7809      	ldrb	r1, [r1, #0]
 8008ad0:	430b      	orrs	r3, r1
 8008ad2:	6513      	str	r3, [r2, #80]	; 0x50
	  		 __HAL_RCC_PWR_CLK_DISABLE();
 8008ad4:	4a42      	ldr	r2, [pc, #264]	; (8008be0 <main+0x284>)
 8008ad6:	4b42      	ldr	r3, [pc, #264]	; (8008be0 <main+0x284>)
 8008ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ade:	6593      	str	r3, [r2, #88]	; 0x58
	  	 break;
 8008ae0:	e027      	b.n	8008b32 <main+0x1d6>

	  	 case STATE_SLEEP:
	  	hrtc.Instance = RTC;					 //attach RTC instance to handler
 8008ae2:	4b47      	ldr	r3, [pc, #284]	; (8008c00 <main+0x2a4>)
 8008ae4:	4a41      	ldr	r2, [pc, #260]	; (8008bec <main+0x290>)
 8008ae6:	601a      	str	r2, [r3, #0]
	  	HAL_PWREx_DisableInternalWakeUpLine();	 //clear wake up pending interrupt from internal wake up
 8008ae8:	f7f9 fb7e 	bl	80021e8 <HAL_PWREx_DisableInternalWakeUpLine>
	  	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);		 //clear pending interrupt from ext wake up pins
 8008aec:	4b3e      	ldr	r3, [pc, #248]	; (8008be8 <main+0x28c>)
 8008aee:	221f      	movs	r2, #31
 8008af0:	619a      	str	r2, [r3, #24]
	  	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8008af2:	4b3d      	ldr	r3, [pc, #244]	; (8008be8 <main+0x28c>)
 8008af4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008af8:	619a      	str	r2, [r3, #24]
		set_WUP_Pin(IMU_EVENT_WAKE_PIN,MODE_EXTI); 	  	//reconfigure wake up pins
 8008afa:	2101      	movs	r1, #1
 8008afc:	2010      	movs	r0, #16
 8008afe:	f7ff fcbd 	bl	800847c <set_WUP_Pin>
		set_WUP_Pin(IRIDIUM_RING_WAKE_PIN,MODE_EXTI);  	  	//set Current State to Sample
 8008b02:	2101      	movs	r1, #1
 8008b04:	2002      	movs	r0, #2
 8008b06:	f7ff fcb9 	bl	800847c <set_WUP_Pin>
	  	Current_State = STATE_SAMPLE;
 8008b0a:	4b39      	ldr	r3, [pc, #228]	; (8008bf0 <main+0x294>)
 8008b0c:	2202      	movs	r2, #2
 8008b0e:	701a      	strb	r2, [r3, #0]
	  	 break;
 8008b10:	e00f      	b.n	8008b32 <main+0x1d6>

	  	 case STATE_TRANSMIT:
	  	 Current_State = STATE_SLEEP;
 8008b12:	4b37      	ldr	r3, [pc, #220]	; (8008bf0 <main+0x294>)
 8008b14:	2203      	movs	r2, #3
 8008b16:	701a      	strb	r2, [r3, #0]
  		 __SET_CURRENT_STATE(Current_State);
 8008b18:	4a34      	ldr	r2, [pc, #208]	; (8008bec <main+0x290>)
 8008b1a:	4b34      	ldr	r3, [pc, #208]	; (8008bec <main+0x290>)
 8008b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b1e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008b22:	4933      	ldr	r1, [pc, #204]	; (8008bf0 <main+0x294>)
 8008b24:	7809      	ldrb	r1, [r1, #0]
 8008b26:	430b      	orrs	r3, r1
 8008b28:	6513      	str	r3, [r2, #80]	; 0x50
	  	 break;
 8008b2a:	e002      	b.n	8008b32 <main+0x1d6>

	  	 //default case: reset state
	  	 default:
	  	 Current_State = STATE_RESET;
 8008b2c:	4b30      	ldr	r3, [pc, #192]	; (8008bf0 <main+0x294>)
 8008b2e:	2201      	movs	r2, #1
 8008b30:	701a      	strb	r2, [r3, #0]
	  }
	  __HAL_RCC_PWR_CLK_DISABLE();
 8008b32:	4a2b      	ldr	r2, [pc, #172]	; (8008be0 <main+0x284>)
 8008b34:	4b2a      	ldr	r3, [pc, #168]	; (8008be0 <main+0x284>)
 8008b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b3c:	6593      	str	r3, [r2, #88]	; 0x58

	  /*
	   * Place Routine code Here
	   */
	  // SLEEP STATE
	  if(Current_State == STATE_SLEEP)
 8008b3e:	4b2c      	ldr	r3, [pc, #176]	; (8008bf0 <main+0x294>)
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	2b03      	cmp	r3, #3
 8008b44:	d102      	bne.n	8008b4c <main+0x1f0>
	  {
		  Routine_STATE_SLEEP();
 8008b46:	f000 f933 	bl	8008db0 <Routine_STATE_SLEEP>
 8008b4a:	e013      	b.n	8008b74 <main+0x218>
	  }
	  //RESET STATE
	  else if(Current_State == STATE_RESET)
 8008b4c:	4b28      	ldr	r3, [pc, #160]	; (8008bf0 <main+0x294>)
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d102      	bne.n	8008b5a <main+0x1fe>
	  {
		  Routine_STATE_RESET();
 8008b54:	f000 f90e 	bl	8008d74 <Routine_STATE_RESET>
 8008b58:	e00c      	b.n	8008b74 <main+0x218>
	  }
	  //SAMPLE STATE
	  else if(Current_State == STATE_SAMPLE)
 8008b5a:	4b25      	ldr	r3, [pc, #148]	; (8008bf0 <main+0x294>)
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	2b02      	cmp	r3, #2
 8008b60:	d102      	bne.n	8008b68 <main+0x20c>
	  {
		  Routine_STATE_SAMPLE();
 8008b62:	f000 f93f 	bl	8008de4 <Routine_STATE_SAMPLE>
 8008b66:	e005      	b.n	8008b74 <main+0x218>
	  }
	  //TRANSMIT STATE
	  else if(Current_State == STATE_TRANSMIT)
 8008b68:	4b21      	ldr	r3, [pc, #132]	; (8008bf0 <main+0x294>)
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	2b06      	cmp	r3, #6
 8008b6e:	d101      	bne.n	8008b74 <main+0x218>
	  {
		  Routine_STATE_TRANSMIT();
 8008b70:	f000 fa84 	bl	800907c <Routine_STATE_TRANSMIT>

//========================= 6. END OF ROUTINE FUNCTION ==========================//
	  /*
	   * After each routine has run, save state to the back up registers
	   */
	  __HAL_RCC_PWR_CLK_ENABLE();
 8008b74:	4a1a      	ldr	r2, [pc, #104]	; (8008be0 <main+0x284>)
 8008b76:	4b1a      	ldr	r3, [pc, #104]	; (8008be0 <main+0x284>)
 8008b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b7e:	6593      	str	r3, [r2, #88]	; 0x58
 8008b80:	4b17      	ldr	r3, [pc, #92]	; (8008be0 <main+0x284>)
 8008b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b88:	603b      	str	r3, [r7, #0]
 8008b8a:	683b      	ldr	r3, [r7, #0]
	  if(Current_State == STATE_SAMPLE)			//increment sample counter after each sampe
 8008b8c:	4b18      	ldr	r3, [pc, #96]	; (8008bf0 <main+0x294>)
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	d114      	bne.n	8008bbe <main+0x262>
	  {
		  sample_count = __GET_SAMPLE_COUNT();
 8008b94:	4b15      	ldr	r3, [pc, #84]	; (8008bec <main+0x290>)
 8008b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b98:	0a1b      	lsrs	r3, r3, #8
 8008b9a:	b2da      	uxtb	r2, r3
 8008b9c:	4b17      	ldr	r3, [pc, #92]	; (8008bfc <main+0x2a0>)
 8008b9e:	701a      	strb	r2, [r3, #0]
		  __SET_SAMPLE_COUNT(++sample_count);
 8008ba0:	4912      	ldr	r1, [pc, #72]	; (8008bec <main+0x290>)
 8008ba2:	4b12      	ldr	r3, [pc, #72]	; (8008bec <main+0x290>)
 8008ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	4a14      	ldr	r2, [pc, #80]	; (8008bfc <main+0x2a0>)
 8008baa:	7812      	ldrb	r2, [r2, #0]
 8008bac:	3201      	adds	r2, #1
 8008bae:	b2d0      	uxtb	r0, r2
 8008bb0:	4a12      	ldr	r2, [pc, #72]	; (8008bfc <main+0x2a0>)
 8008bb2:	7010      	strb	r0, [r2, #0]
 8008bb4:	4a11      	ldr	r2, [pc, #68]	; (8008bfc <main+0x2a0>)
 8008bb6:	7812      	ldrb	r2, [r2, #0]
 8008bb8:	0212      	lsls	r2, r2, #8
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	650b      	str	r3, [r1, #80]	; 0x50
	  }
	  __SET_CURRENT_STATE(Current_State);	    //write value to back up register
 8008bbe:	4a0b      	ldr	r2, [pc, #44]	; (8008bec <main+0x290>)
 8008bc0:	4b0a      	ldr	r3, [pc, #40]	; (8008bec <main+0x290>)
 8008bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bc4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008bc8:	4909      	ldr	r1, [pc, #36]	; (8008bf0 <main+0x294>)
 8008bca:	7809      	ldrb	r1, [r1, #0]
 8008bcc:	430b      	orrs	r3, r1
 8008bce:	6513      	str	r3, [r2, #80]	; 0x50
	  __HAL_RCC_PWR_CLK_DISABLE();
 8008bd0:	4a03      	ldr	r2, [pc, #12]	; (8008be0 <main+0x284>)
 8008bd2:	4b03      	ldr	r3, [pc, #12]	; (8008be0 <main+0x284>)
 8008bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bda:	6593      	str	r3, [r2, #88]	; 0x58
	  __HAL_RCC_PWR_CLK_ENABLE();
 8008bdc:	e6e6      	b.n	80089ac <main+0x50>
 8008bde:	bf00      	nop
 8008be0:	40021000 	.word	0x40021000
 8008be4:	08010928 	.word	0x08010928
 8008be8:	40007000 	.word	0x40007000
 8008bec:	40002800 	.word	0x40002800
 8008bf0:	200021c8 	.word	0x200021c8
 8008bf4:	08010960 	.word	0x08010960
 8008bf8:	0801097c 	.word	0x0801097c
 8008bfc:	20002141 	.word	0x20002141
 8008c00:	200021cc 	.word	0x200021cc

08008c04 <MX_RTC_Init>:
//==================== 7. Configuration & Initialization Functions ====================//

/* Private functions */

static void MX_RTC_Init(void)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b086      	sub	sp, #24
 8008c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8008c0a:	1d3b      	adds	r3, r7, #4
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	601a      	str	r2, [r3, #0]
 8008c10:	605a      	str	r2, [r3, #4]
 8008c12:	609a      	str	r2, [r3, #8]
 8008c14:	60da      	str	r2, [r3, #12]
 8008c16:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8008c18:	2300      	movs	r3, #0
 8008c1a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8008c1c:	4b2d      	ldr	r3, [pc, #180]	; (8008cd4 <MX_RTC_Init+0xd0>)
 8008c1e:	4a2e      	ldr	r2, [pc, #184]	; (8008cd8 <MX_RTC_Init+0xd4>)
 8008c20:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8008c22:	4b2c      	ldr	r3, [pc, #176]	; (8008cd4 <MX_RTC_Init+0xd0>)
 8008c24:	2200      	movs	r2, #0
 8008c26:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8008c28:	4b2a      	ldr	r3, [pc, #168]	; (8008cd4 <MX_RTC_Init+0xd0>)
 8008c2a:	227f      	movs	r2, #127	; 0x7f
 8008c2c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8008c2e:	4b29      	ldr	r3, [pc, #164]	; (8008cd4 <MX_RTC_Init+0xd0>)
 8008c30:	22ff      	movs	r2, #255	; 0xff
 8008c32:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008c34:	4b27      	ldr	r3, [pc, #156]	; (8008cd4 <MX_RTC_Init+0xd0>)
 8008c36:	2200      	movs	r2, #0
 8008c38:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008c3a:	4b26      	ldr	r3, [pc, #152]	; (8008cd4 <MX_RTC_Init+0xd0>)
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008c40:	4b24      	ldr	r3, [pc, #144]	; (8008cd4 <MX_RTC_Init+0xd0>)
 8008c42:	2200      	movs	r2, #0
 8008c44:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008c46:	4b23      	ldr	r3, [pc, #140]	; (8008cd4 <MX_RTC_Init+0xd0>)
 8008c48:	2200      	movs	r2, #0
 8008c4a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008c4c:	4821      	ldr	r0, [pc, #132]	; (8008cd4 <MX_RTC_Init+0xd0>)
 8008c4e:	f7fa fdcd 	bl	80037ec <HAL_RTC_Init>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d001      	beq.n	8008c5c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8008c58:	f000 f840 	bl	8008cdc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 12;
 8008c5c:	230c      	movs	r3, #12
 8008c5e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 57;
 8008c60:	2339      	movs	r3, #57	; 0x39
 8008c62:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8008c64:	2300      	movs	r3, #0
 8008c66:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8008c70:	1d3b      	adds	r3, r7, #4
 8008c72:	2200      	movs	r2, #0
 8008c74:	4619      	mov	r1, r3
 8008c76:	4817      	ldr	r0, [pc, #92]	; (8008cd4 <MX_RTC_Init+0xd0>)
 8008c78:	f7fa fe33 	bl	80038e2 <HAL_RTC_SetTime>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d001      	beq.n	8008c86 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8008c82:	f000 f82b 	bl	8008cdc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8008c86:	2305      	movs	r3, #5
 8008c88:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8008c8a:	2305      	movs	r3, #5
 8008c8c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 8;
 8008c8e:	2308      	movs	r3, #8
 8008c90:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8008c92:	2300      	movs	r3, #0
 8008c94:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8008c96:	463b      	mov	r3, r7
 8008c98:	2200      	movs	r2, #0
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	480d      	ldr	r0, [pc, #52]	; (8008cd4 <MX_RTC_Init+0xd0>)
 8008c9e:	f7fa febd 	bl	8003a1c <HAL_RTC_SetDate>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d001      	beq.n	8008cac <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8008ca8:	f000 f818 	bl	8008cdc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  //Configure RTC_Wake up time for range 250ms - 36 Hours
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc,RTC_FLAG_WUTF))
 8008cac:	4b09      	ldr	r3, [pc, #36]	; (8008cd4 <MX_RTC_Init+0xd0>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d008      	beq.n	8008ccc <MX_RTC_Init+0xc8>
  {
	  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc,RTC_FLAG_WUTF);
 8008cba:	4b06      	ldr	r3, [pc, #24]	; (8008cd4 <MX_RTC_Init+0xd0>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a05      	ldr	r2, [pc, #20]	; (8008cd4 <MX_RTC_Init+0xd0>)
 8008cc0:	6812      	ldr	r2, [r2, #0]
 8008cc2:	68d2      	ldr	r2, [r2, #12]
 8008cc4:	b2d2      	uxtb	r2, r2
 8008cc6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8008cca:	60da      	str	r2, [r3, #12]
  }

  /* USER CODE END RTC_Init 2 */

}
 8008ccc:	bf00      	nop
 8008cce:	3718      	adds	r7, #24
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	200021cc 	.word	0x200021cc
 8008cd8:	40002800 	.word	0x40002800

08008cdc <Error_Handler>:
//====================================== 7. END ======================================//

//==================================== 8. Handlers ===================================//

void Error_Handler(void)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008ce0:	bf00      	nop
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bc80      	pop	{r7}
 8008ce6:	4770      	bx	lr

08008ce8 <Routine_ASYNC_IMU_EVENT>:
//===================================== 8. END ======================================//

//=============================== 9. Routines =======================================//

static void Routine_ASYNC_IMU_EVENT(void)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
	 printf("IMU Event Detected: Sampling...");
 8008cee:	480d      	ldr	r0, [pc, #52]	; (8008d24 <Routine_ASYNC_IMU_EVENT+0x3c>)
 8008cf0:	f001 faf2 	bl	800a2d8 <printf>
	 for (int i = 0; i < 50; ++i)
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	607b      	str	r3, [r7, #4]
 8008cf8:	e00a      	b.n	8008d10 <Routine_ASYNC_IMU_EVENT+0x28>
	 {
	 	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8008cfa:	2120      	movs	r1, #32
 8008cfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008d00:	f7f9 f981 	bl	8002006 <HAL_GPIO_TogglePin>
	 	HAL_Delay(100);
 8008d04:	2064      	movs	r0, #100	; 0x64
 8008d06:	f7f8 f9c9 	bl	800109c <HAL_Delay>
	 for (int i = 0; i < 50; ++i)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	607b      	str	r3, [r7, #4]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2b31      	cmp	r3, #49	; 0x31
 8008d14:	ddf1      	ble.n	8008cfa <Routine_ASYNC_IMU_EVENT+0x12>
	 }
	 printf("Done\r\n");
 8008d16:	4804      	ldr	r0, [pc, #16]	; (8008d28 <Routine_ASYNC_IMU_EVENT+0x40>)
 8008d18:	f001 fb56 	bl	800a3c8 <puts>
}
 8008d1c:	bf00      	nop
 8008d1e:	3708      	adds	r7, #8
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	08010998 	.word	0x08010998
 8008d28:	080109b8 	.word	0x080109b8

08008d2c <Routine_ASYNC_IRIDIUM_RX>:

static void Routine_ASYNC_IRIDIUM_RX(void)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
	printf("Incoming Message from Satellite: Receiving...");
 8008d32:	480e      	ldr	r0, [pc, #56]	; (8008d6c <Routine_ASYNC_IRIDIUM_RX+0x40>)
 8008d34:	f001 fad0 	bl	800a2d8 <printf>
	for (int i = 0; i < 10; ++i)
 8008d38:	2300      	movs	r3, #0
 8008d3a:	607b      	str	r3, [r7, #4]
 8008d3c:	e00b      	b.n	8008d56 <Routine_ASYNC_IRIDIUM_RX+0x2a>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8008d3e:	2120      	movs	r1, #32
 8008d40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008d44:	f7f9 f95f 	bl	8002006 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8008d48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008d4c:	f7f8 f9a6 	bl	800109c <HAL_Delay>
	for (int i = 0; i < 10; ++i)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	3301      	adds	r3, #1
 8008d54:	607b      	str	r3, [r7, #4]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2b09      	cmp	r3, #9
 8008d5a:	ddf0      	ble.n	8008d3e <Routine_ASYNC_IRIDIUM_RX+0x12>
	}
	printf("Message Received!\r\n");
 8008d5c:	4804      	ldr	r0, [pc, #16]	; (8008d70 <Routine_ASYNC_IRIDIUM_RX+0x44>)
 8008d5e:	f001 fb33 	bl	800a3c8 <puts>
}
 8008d62:	bf00      	nop
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	080109c0 	.word	0x080109c0
 8008d70:	080109f0 	.word	0x080109f0

08008d74 <Routine_STATE_RESET>:

static void Routine_STATE_RESET(void)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	af00      	add	r7, sp, #0
	 //initialise RTC
	 MX_RTC_Init();
 8008d78:	f7ff ff44 	bl	8008c04 <MX_RTC_Init>
	 //Enable Interrupt pins as EXTI Outputs
	 set_WUP_Pin(IRIDIUM_RING_WAKE_PIN,MODE_EXTI);
 8008d7c:	2101      	movs	r1, #1
 8008d7e:	2002      	movs	r0, #2
 8008d80:	f7ff fb7c 	bl	800847c <set_WUP_Pin>
	 set_WUP_Pin(IMU_EVENT_WAKE_PIN,MODE_EXTI);
 8008d84:	2101      	movs	r1, #1
 8008d86:	2010      	movs	r0, #16
 8008d88:	f7ff fb78 	bl	800847c <set_WUP_Pin>
	 printf("All Systems Online!\r\n");
 8008d8c:	4806      	ldr	r0, [pc, #24]	; (8008da8 <Routine_STATE_RESET+0x34>)
 8008d8e:	f001 fb1b 	bl	800a3c8 <puts>
	 printf("Current State: RESET \t Next State: SAMPLE\r\n");
 8008d92:	4806      	ldr	r0, [pc, #24]	; (8008dac <Routine_STATE_RESET+0x38>)
 8008d94:	f001 fb18 	bl	800a3c8 <puts>
	 HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,SET);
 8008d98:	2201      	movs	r2, #1
 8008d9a:	2120      	movs	r1, #32
 8008d9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008da0:	f7f9 f91a 	bl	8001fd8 <HAL_GPIO_WritePin>


}
 8008da4:	bf00      	nop
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	08010a04 	.word	0x08010a04
 8008dac:	08010a1c 	.word	0x08010a1c

08008db0 <Routine_STATE_SLEEP>:

static void Routine_STATE_SLEEP(void)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	af00      	add	r7, sp, #0
	  printf("Current State: SLEEP \t Next State: SAMPLE\r\n");
 8008db4:	4809      	ldr	r0, [pc, #36]	; (8008ddc <Routine_STATE_SLEEP+0x2c>)
 8008db6:	f001 fb07 	bl	800a3c8 <puts>
	  printf("Good Night! \r\n");
 8008dba:	4809      	ldr	r0, [pc, #36]	; (8008de0 <Routine_STATE_SLEEP+0x30>)
 8008dbc:	f001 fb04 	bl	800a3c8 <puts>
	  set_WUP_Pin(IRIDIUM_RING_WAKE_PIN,MODE_WUP);
 8008dc0:	2100      	movs	r1, #0
 8008dc2:	2002      	movs	r0, #2
 8008dc4:	f7ff fb5a 	bl	800847c <set_WUP_Pin>
	  set_WUP_Pin(IMU_EVENT_WAKE_PIN,MODE_WUP);
 8008dc8:	2100      	movs	r1, #0
 8008dca:	2010      	movs	r0, #16
 8008dcc:	f7ff fb56 	bl	800847c <set_WUP_Pin>
	  Go_To_Sleep(STDBY,10);
 8008dd0:	210a      	movs	r1, #10
 8008dd2:	2001      	movs	r0, #1
 8008dd4:	f7ff fb1a 	bl	800840c <Go_To_Sleep>
}
 8008dd8:	bf00      	nop
 8008dda:	bd80      	pop	{r7, pc}
 8008ddc:	08010a48 	.word	0x08010a48
 8008de0:	08010a74 	.word	0x08010a74

08008de4 <Routine_STATE_SAMPLE>:

static void Routine_STATE_SAMPLE(void)
{
 8008de4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008de8:	b09f      	sub	sp, #124	; 0x7c
 8008dea:	af04      	add	r7, sp, #16
	  //GPS  Init Routine

	  sample_count = __GET_SAMPLE_COUNT();
 8008dec:	4b93      	ldr	r3, [pc, #588]	; (800903c <Routine_STATE_SAMPLE+0x258>)
 8008dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008df0:	0a1b      	lsrs	r3, r3, #8
 8008df2:	b2da      	uxtb	r2, r3
 8008df4:	4b92      	ldr	r3, [pc, #584]	; (8009040 <Routine_STATE_SAMPLE+0x25c>)
 8008df6:	701a      	strb	r2, [r3, #0]
	  if(sample_count < 3)
 8008df8:	4b91      	ldr	r3, [pc, #580]	; (8009040 <Routine_STATE_SAMPLE+0x25c>)
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	2b02      	cmp	r3, #2
 8008dfe:	d803      	bhi.n	8008e08 <Routine_STATE_SAMPLE+0x24>
	  {
		  printf("Current State: SAMPLE \t Next State: SLEEP\r\n");
 8008e00:	4890      	ldr	r0, [pc, #576]	; (8009044 <Routine_STATE_SAMPLE+0x260>)
 8008e02:	f001 fae1 	bl	800a3c8 <puts>
 8008e06:	e002      	b.n	8008e0e <Routine_STATE_SAMPLE+0x2a>
	  } else
	  {
		  printf("Current State: SAMPLE \t Next State: TRANS\r\n");
 8008e08:	488f      	ldr	r0, [pc, #572]	; (8009048 <Routine_STATE_SAMPLE+0x264>)
 8008e0a:	f001 fadd 	bl	800a3c8 <puts>
	  }
	  //TODO: SAMPLE SENSORS:
	  /* Attempt to initialize sensor within a number of retries */
	  uint8_t retries = 0;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	  do
	  {
		  //initialise gps peripherals and begin comms on sensor instance
		  if(init_GPS(&hgps)== GPS_Init_OK)
 8008e14:	488d      	ldr	r0, [pc, #564]	; (800904c <Routine_STATE_SAMPLE+0x268>)
 8008e16:	f7fe fc09 	bl	800762c <init_GPS>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d106      	bne.n	8008e2e <Routine_STATE_SAMPLE+0x4a>
		  {
			 printf("GPS Online! Acquiring Signal...\r\n");
 8008e20:	488b      	ldr	r0, [pc, #556]	; (8009050 <Routine_STATE_SAMPLE+0x26c>)
 8008e22:	f001 fad1 	bl	800a3c8 <puts>
			 GPS_On = 1;
 8008e26:	4b8b      	ldr	r3, [pc, #556]	; (8009054 <Routine_STATE_SAMPLE+0x270>)
 8008e28:	2201      	movs	r2, #1
 8008e2a:	701a      	strb	r2, [r3, #0]
			 break;
 8008e2c:	e00b      	b.n	8008e46 <Routine_STATE_SAMPLE+0x62>
		  }
		deinit_GPS(&hgps);
 8008e2e:	4887      	ldr	r0, [pc, #540]	; (800904c <Routine_STATE_SAMPLE+0x268>)
 8008e30:	f7fe fc8c 	bl	800774c <deinit_GPS>
		retries++;
 8008e34:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008e38:	3301      	adds	r3, #1
 8008e3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	  }
	  while (retries < GPS_INIT_RETRIES);
 8008e3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008e42:	2b63      	cmp	r3, #99	; 0x63
 8008e44:	d9e6      	bls.n	8008e14 <Routine_STATE_SAMPLE+0x30>

	  // Sample Routine

	  if(GPS_On)
 8008e46:	4b83      	ldr	r3, [pc, #524]	; (8009054 <Routine_STATE_SAMPLE+0x270>)
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	f000 80eb 	beq.w	8009026 <Routine_STATE_SAMPLE+0x242>
	  {
		  GPS_Data_t Gdata[5];
		  for (uint8_t i = 0; i < 5; ++i)
 8008e50:	2300      	movs	r3, #0
 8008e52:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8008e56:	e0e0      	b.n	800901a <Routine_STATE_SAMPLE+0x236>
		  {
			  GPS_Log_Begin();
 8008e58:	f7fe f8c6 	bl	8006fe8 <GPS_Log_Begin>
			  while(packet_full != 7);
 8008e5c:	bf00      	nop
 8008e5e:	4b7e      	ldr	r3, [pc, #504]	; (8009058 <Routine_STATE_SAMPLE+0x274>)
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	2b07      	cmp	r3, #7
 8008e64:	d1fb      	bne.n	8008e5e <Routine_STATE_SAMPLE+0x7a>
			  GPS_Log_Stop();
 8008e66:	f7fe f907 	bl	8007078 <GPS_Log_Stop>
			  printf("Logging Data...\r\n");
 8008e6a:	487c      	ldr	r0, [pc, #496]	; (800905c <Routine_STATE_SAMPLE+0x278>)
 8008e6c:	f001 faac 	bl	800a3c8 <puts>
			  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,SET);
 8008e70:	2201      	movs	r2, #1
 8008e72:	2120      	movs	r1, #32
 8008e74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008e78:	f7f9 f8ae 	bl	8001fd8 <HAL_GPIO_WritePin>
			  Gdata[i].coordinates = GPS_coord;
 8008e7c:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8008e80:	4613      	mov	r3, r2
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	4413      	add	r3, r2
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8008e8c:	4413      	add	r3, r2
 8008e8e:	3b68      	subs	r3, #104	; 0x68
 8008e90:	4a73      	ldr	r2, [pc, #460]	; (8009060 <Routine_STATE_SAMPLE+0x27c>)
 8008e92:	3304      	adds	r3, #4
 8008e94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008e98:	e883 0003 	stmia.w	r3, {r0, r1}
			  Gdata[i].Etime = eTime;
 8008e9c:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8008ea0:	4b70      	ldr	r3, [pc, #448]	; (8009064 <Routine_STATE_SAMPLE+0x280>)
 8008ea2:	6819      	ldr	r1, [r3, #0]
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	009b      	lsls	r3, r3, #2
 8008ea8:	4413      	add	r3, r2
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8008eb0:	4413      	add	r3, r2
 8008eb2:	3b68      	subs	r3, #104	; 0x68
 8008eb4:	6019      	str	r1, [r3, #0]
			  Gdata[i].diag = diag;
 8008eb6:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8008eba:	4613      	mov	r3, r2
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	4413      	add	r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8008ec6:	4413      	add	r3, r2
 8008ec8:	3b60      	subs	r3, #96	; 0x60
 8008eca:	4a67      	ldr	r2, [pc, #412]	; (8009068 <Routine_STATE_SAMPLE+0x284>)
 8008ecc:	3304      	adds	r3, #4
 8008ece:	6810      	ldr	r0, [r2, #0]
 8008ed0:	6851      	ldr	r1, [r2, #4]
 8008ed2:	c303      	stmia	r3!, {r0, r1}
			  printf("local time: %lu, position: %f Lat, %f long\r\n", Gdata[i].Etime, Gdata[i].coordinates.lat, Gdata[i].coordinates.longi);
 8008ed4:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8008ed8:	4613      	mov	r3, r2
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	4413      	add	r3, r2
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8008ee4:	4413      	add	r3, r2
 8008ee6:	3b68      	subs	r3, #104	; 0x68
 8008ee8:	681d      	ldr	r5, [r3, #0]
 8008eea:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8008eee:	4613      	mov	r3, r2
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	4413      	add	r3, r2
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8008efa:	4413      	add	r3, r2
 8008efc:	3b64      	subs	r3, #100	; 0x64
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4618      	mov	r0, r3
 8008f02:	f7f7 fb31 	bl	8000568 <__aeabi_f2d>
 8008f06:	4680      	mov	r8, r0
 8008f08:	4689      	mov	r9, r1
 8008f0a:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8008f0e:	4613      	mov	r3, r2
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	4413      	add	r3, r2
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8008f1a:	4413      	add	r3, r2
 8008f1c:	3b60      	subs	r3, #96	; 0x60
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4618      	mov	r0, r3
 8008f22:	f7f7 fb21 	bl	8000568 <__aeabi_f2d>
 8008f26:	4603      	mov	r3, r0
 8008f28:	460c      	mov	r4, r1
 8008f2a:	e88d 0018 	stmia.w	sp, {r3, r4}
 8008f2e:	4642      	mov	r2, r8
 8008f30:	464b      	mov	r3, r9
 8008f32:	4629      	mov	r1, r5
 8008f34:	484d      	ldr	r0, [pc, #308]	; (800906c <Routine_STATE_SAMPLE+0x288>)
 8008f36:	f001 f9cf 	bl	800a2d8 <printf>
			  printf("HDOP = %d.%d, \t PDOP = %d.%d, VDOP = %d.%d\r\n",  Gdata[i].diag.HDOP.digit, Gdata[i].diag.HDOP.precision,  Gdata[i].diag.PDOP.digit, Gdata[i].diag.PDOP.precision,  Gdata[i].diag.VDOP.digit, Gdata[i].diag.VDOP.precision);
 8008f3a:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8008f3e:	4613      	mov	r3, r2
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	4413      	add	r3, r2
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8008f4a:	4413      	add	r3, r2
 8008f4c:	3b5a      	subs	r3, #90	; 0x5a
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	461c      	mov	r4, r3
 8008f52:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8008f56:	4613      	mov	r3, r2
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	4413      	add	r3, r2
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8008f62:	4413      	add	r3, r2
 8008f64:	3b59      	subs	r3, #89	; 0x59
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	461d      	mov	r5, r3
 8008f6a:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8008f6e:	4613      	mov	r3, r2
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	4413      	add	r3, r2
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8008f7a:	4413      	add	r3, r2
 8008f7c:	3b5c      	subs	r3, #92	; 0x5c
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	461e      	mov	r6, r3
 8008f82:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8008f86:	4613      	mov	r3, r2
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	4413      	add	r3, r2
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8008f92:	4413      	add	r3, r2
 8008f94:	3b5b      	subs	r3, #91	; 0x5b
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	4619      	mov	r1, r3
 8008f9a:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	4413      	add	r3, r2
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8008faa:	4413      	add	r3, r2
 8008fac:	3b58      	subs	r3, #88	; 0x58
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	4413      	add	r3, r2
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8008fc2:	4413      	add	r3, r2
 8008fc4:	3b57      	subs	r3, #87	; 0x57
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	9302      	str	r3, [sp, #8]
 8008fca:	9001      	str	r0, [sp, #4]
 8008fcc:	9100      	str	r1, [sp, #0]
 8008fce:	4633      	mov	r3, r6
 8008fd0:	462a      	mov	r2, r5
 8008fd2:	4621      	mov	r1, r4
 8008fd4:	4826      	ldr	r0, [pc, #152]	; (8009070 <Routine_STATE_SAMPLE+0x28c>)
 8008fd6:	f001 f97f 	bl	800a2d8 <printf>
			  printf("Number of Satellites %d, Fix Type = %d\r\n", Gdata[i].diag.num_sats, Gdata[i].diag.fix_type);
 8008fda:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8008fde:	4613      	mov	r3, r2
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	4413      	add	r3, r2
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8008fea:	4413      	add	r3, r2
 8008fec:	3b56      	subs	r3, #86	; 0x56
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	4413      	add	r3, r2
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8009002:	4413      	add	r3, r2
 8009004:	3b55      	subs	r3, #85	; 0x55
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	461a      	mov	r2, r3
 800900a:	481a      	ldr	r0, [pc, #104]	; (8009074 <Routine_STATE_SAMPLE+0x290>)
 800900c:	f001 f964 	bl	800a2d8 <printf>
		  for (uint8_t i = 0; i < 5; ++i)
 8009010:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8009014:	3301      	adds	r3, #1
 8009016:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800901a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800901e:	2b04      	cmp	r3, #4
 8009020:	f67f af1a 	bls.w	8008e58 <Routine_STATE_SAMPLE+0x74>
 8009024:	e002      	b.n	800902c <Routine_STATE_SAMPLE+0x248>
		  }
	  }else
	  {
		  printf("Error GPS Not Found!\r\n");
 8009026:	4814      	ldr	r0, [pc, #80]	; (8009078 <Routine_STATE_SAMPLE+0x294>)
 8009028:	f001 f9ce 	bl	800a3c8 <puts>
	  }
	  //de-init GPS
	  deinit_GPS(&hgps);
 800902c:	4807      	ldr	r0, [pc, #28]	; (800904c <Routine_STATE_SAMPLE+0x268>)
 800902e:	f7fe fb8d 	bl	800774c <deinit_GPS>
}
 8009032:	bf00      	nop
 8009034:	376c      	adds	r7, #108	; 0x6c
 8009036:	46bd      	mov	sp, r7
 8009038:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800903c:	40002800 	.word	0x40002800
 8009040:	20002141 	.word	0x20002141
 8009044:	08010a84 	.word	0x08010a84
 8009048:	08010ab0 	.word	0x08010ab0
 800904c:	20000798 	.word	0x20000798
 8009050:	08010adc 	.word	0x08010adc
 8009054:	200006e4 	.word	0x200006e4
 8009058:	200007c4 	.word	0x200007c4
 800905c:	08010b00 	.word	0x08010b00
 8009060:	200007c8 	.word	0x200007c8
 8009064:	200007c0 	.word	0x200007c0
 8009068:	200007b4 	.word	0x200007b4
 800906c:	08010b14 	.word	0x08010b14
 8009070:	08010b44 	.word	0x08010b44
 8009074:	08010b74 	.word	0x08010b74
 8009078:	08010ba0 	.word	0x08010ba0

0800907c <Routine_STATE_TRANSMIT>:

static void Routine_STATE_TRANSMIT(void)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
	  printf("Current State: TRANS \t Next State: SLEEP\r\n");
 8009082:	4817      	ldr	r0, [pc, #92]	; (80090e0 <Routine_STATE_TRANSMIT+0x64>)
 8009084:	f001 f9a0 	bl	800a3c8 <puts>
	  printf("Transmitting Package...");
 8009088:	4816      	ldr	r0, [pc, #88]	; (80090e4 <Routine_STATE_TRANSMIT+0x68>)
 800908a:	f001 f925 	bl	800a2d8 <printf>
	  for (int var = 0; var < 6; ++var)
 800908e:	2300      	movs	r3, #0
 8009090:	607b      	str	r3, [r7, #4]
 8009092:	e015      	b.n	80090c0 <Routine_STATE_TRANSMIT+0x44>
	  {
		  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,SET);
 8009094:	2201      	movs	r2, #1
 8009096:	2120      	movs	r1, #32
 8009098:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800909c:	f7f8 ff9c 	bl	8001fd8 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 80090a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80090a4:	f7f7 fffa 	bl	800109c <HAL_Delay>
		  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,RESET);
 80090a8:	2200      	movs	r2, #0
 80090aa:	2120      	movs	r1, #32
 80090ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80090b0:	f7f8 ff92 	bl	8001fd8 <HAL_GPIO_WritePin>
		  HAL_Delay(250);
 80090b4:	20fa      	movs	r0, #250	; 0xfa
 80090b6:	f7f7 fff1 	bl	800109c <HAL_Delay>
	  for (int var = 0; var < 6; ++var)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	3301      	adds	r3, #1
 80090be:	607b      	str	r3, [r7, #4]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2b05      	cmp	r3, #5
 80090c4:	dde6      	ble.n	8009094 <Routine_STATE_TRANSMIT+0x18>
	  }
	  printf("Done!\r\n");
 80090c6:	4808      	ldr	r0, [pc, #32]	; (80090e8 <Routine_STATE_TRANSMIT+0x6c>)
 80090c8:	f001 f97e 	bl	800a3c8 <puts>
	  //reset sample count
	  __SET_SAMPLE_COUNT(0);
 80090cc:	4a07      	ldr	r2, [pc, #28]	; (80090ec <Routine_STATE_TRANSMIT+0x70>)
 80090ce:	4b07      	ldr	r3, [pc, #28]	; (80090ec <Routine_STATE_TRANSMIT+0x70>)
 80090d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	6513      	str	r3, [r2, #80]	; 0x50
}
 80090d6:	bf00      	nop
 80090d8:	3708      	adds	r7, #8
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	08010bb8 	.word	0x08010bb8
 80090e4:	08010be4 	.word	0x08010be4
 80090e8:	08010bfc 	.word	0x08010bfc
 80090ec:	40002800 	.word	0x40002800

080090f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80090f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009128 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80090f4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80090f6:	e003      	b.n	8009100 <LoopCopyDataInit>

080090f8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80090f8:	4b0c      	ldr	r3, [pc, #48]	; (800912c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80090fa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80090fc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80090fe:	3104      	adds	r1, #4

08009100 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8009100:	480b      	ldr	r0, [pc, #44]	; (8009130 <LoopForever+0xa>)
	ldr	r3, =_edata
 8009102:	4b0c      	ldr	r3, [pc, #48]	; (8009134 <LoopForever+0xe>)
	adds	r2, r0, r1
 8009104:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8009106:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8009108:	d3f6      	bcc.n	80090f8 <CopyDataInit>
	ldr	r2, =_sbss
 800910a:	4a0b      	ldr	r2, [pc, #44]	; (8009138 <LoopForever+0x12>)
	b	LoopFillZerobss
 800910c:	e002      	b.n	8009114 <LoopFillZerobss>

0800910e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800910e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8009110:	f842 3b04 	str.w	r3, [r2], #4

08009114 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8009114:	4b09      	ldr	r3, [pc, #36]	; (800913c <LoopForever+0x16>)
	cmp	r2, r3
 8009116:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8009118:	d3f9      	bcc.n	800910e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800911a:	f000 faf3 	bl	8009704 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800911e:	f000 fb27 	bl	8009770 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8009122:	f7ff fc1b 	bl	800895c <main>

08009126 <LoopForever>:

LoopForever:
    b LoopForever
 8009126:	e7fe      	b.n	8009126 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8009128:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800912c:	080110a8 	.word	0x080110a8
	ldr	r0, =_sdata
 8009130:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8009134:	200006c8 	.word	0x200006c8
	ldr	r2, =_sbss
 8009138:	200006c8 	.word	0x200006c8
	ldr	r3, = _ebss
 800913c:	20002200 	.word	0x20002200

08009140 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009140:	e7fe      	b.n	8009140 <ADC1_2_IRQHandler>
	...

08009144 <HAL_MspInit>:
  * @brief  Initialize the Global MSP.
  * @param  None
  * @retval None
  */
void HAL_MspInit(void)
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
  /* NOTE : This function is generated automatically by STM32CubeMX and eventually  
            modified by the user
   */ 
	  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800914a:	4a0e      	ldr	r2, [pc, #56]	; (8009184 <HAL_MspInit+0x40>)
 800914c:	4b0d      	ldr	r3, [pc, #52]	; (8009184 <HAL_MspInit+0x40>)
 800914e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009150:	f043 0301 	orr.w	r3, r3, #1
 8009154:	6613      	str	r3, [r2, #96]	; 0x60
 8009156:	4b0b      	ldr	r3, [pc, #44]	; (8009184 <HAL_MspInit+0x40>)
 8009158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800915a:	f003 0301 	and.w	r3, r3, #1
 800915e:	607b      	str	r3, [r7, #4]
 8009160:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_PWR_CLK_ENABLE();
 8009162:	4a08      	ldr	r2, [pc, #32]	; (8009184 <HAL_MspInit+0x40>)
 8009164:	4b07      	ldr	r3, [pc, #28]	; (8009184 <HAL_MspInit+0x40>)
 8009166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800916c:	6593      	str	r3, [r2, #88]	; 0x58
 800916e:	4b05      	ldr	r3, [pc, #20]	; (8009184 <HAL_MspInit+0x40>)
 8009170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009176:	603b      	str	r3, [r7, #0]
 8009178:	683b      	ldr	r3, [r7, #0]
}
 800917a:	bf00      	nop
 800917c:	370c      	adds	r7, #12
 800917e:	46bd      	mov	sp, r7
 8009180:	bc80      	pop	{r7}
 8009182:	4770      	bx	lr
 8009184:	40021000 	.word	0x40021000

08009188 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a0b      	ldr	r2, [pc, #44]	; (80091c4 <HAL_RTC_MspInit+0x3c>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d10f      	bne.n	80091ba <HAL_RTC_MspInit+0x32>
  {
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800919a:	4a0b      	ldr	r2, [pc, #44]	; (80091c8 <HAL_RTC_MspInit+0x40>)
 800919c:	4b0a      	ldr	r3, [pc, #40]	; (80091c8 <HAL_RTC_MspInit+0x40>)
 800919e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80091aa:	2200      	movs	r2, #0
 80091ac:	2100      	movs	r1, #0
 80091ae:	2003      	movs	r0, #3
 80091b0:	f7f8 f8cb 	bl	800134a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80091b4:	2003      	movs	r0, #3
 80091b6:	f7f8 f8e4 	bl	8001382 <HAL_NVIC_EnableIRQ>

  }

}
 80091ba:	bf00      	nop
 80091bc:	3708      	adds	r7, #8
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	40002800 	.word	0x40002800
 80091c8:	40021000 	.word	0x40021000

080091cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b08c      	sub	sp, #48	; 0x30
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091d4:	f107 031c 	add.w	r3, r7, #28
 80091d8:	2200      	movs	r2, #0
 80091da:	601a      	str	r2, [r3, #0]
 80091dc:	605a      	str	r2, [r3, #4]
 80091de:	609a      	str	r2, [r3, #8]
 80091e0:	60da      	str	r2, [r3, #12]
 80091e2:	611a      	str	r2, [r3, #16]
  // Debug USART Peripheral
  if(huart->Instance==USART2)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a65      	ldr	r2, [pc, #404]	; (8009380 <HAL_UART_MspInit+0x1b4>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d130      	bne.n	8009250 <HAL_UART_MspInit+0x84>
  {

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80091ee:	4a65      	ldr	r2, [pc, #404]	; (8009384 <HAL_UART_MspInit+0x1b8>)
 80091f0:	4b64      	ldr	r3, [pc, #400]	; (8009384 <HAL_UART_MspInit+0x1b8>)
 80091f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091f8:	6593      	str	r3, [r2, #88]	; 0x58
 80091fa:	4b62      	ldr	r3, [pc, #392]	; (8009384 <HAL_UART_MspInit+0x1b8>)
 80091fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009202:	61bb      	str	r3, [r7, #24]
 8009204:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009206:	4a5f      	ldr	r2, [pc, #380]	; (8009384 <HAL_UART_MspInit+0x1b8>)
 8009208:	4b5e      	ldr	r3, [pc, #376]	; (8009384 <HAL_UART_MspInit+0x1b8>)
 800920a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800920c:	f043 0301 	orr.w	r3, r3, #1
 8009210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009212:	4b5c      	ldr	r3, [pc, #368]	; (8009384 <HAL_UART_MspInit+0x1b8>)
 8009214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009216:	f003 0301 	and.w	r3, r3, #1
 800921a:	617b      	str	r3, [r7, #20]
 800921c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800921e:	230c      	movs	r3, #12
 8009220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009222:	2302      	movs	r3, #2
 8009224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009226:	2300      	movs	r3, #0
 8009228:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800922a:	2303      	movs	r3, #3
 800922c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800922e:	2307      	movs	r3, #7
 8009230:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009232:	f107 031c 	add.w	r3, r7, #28
 8009236:	4619      	mov	r1, r3
 8009238:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800923c:	f7f8 fc32 	bl	8001aa4 <HAL_GPIO_Init>
    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8009240:	2200      	movs	r2, #0
 8009242:	2100      	movs	r1, #0
 8009244:	2026      	movs	r0, #38	; 0x26
 8009246:	f7f8 f880 	bl	800134a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800924a:	2026      	movs	r0, #38	; 0x26
 800924c:	f7f8 f899 	bl	8001382 <HAL_NVIC_EnableIRQ>
  }

  //GPS UART Init
  if(huart->Instance==UART4)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a4c      	ldr	r2, [pc, #304]	; (8009388 <HAL_UART_MspInit+0x1bc>)
 8009256:	4293      	cmp	r3, r2
 8009258:	f040 808d 	bne.w	8009376 <HAL_UART_MspInit+0x1aa>
  {

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800925c:	4a49      	ldr	r2, [pc, #292]	; (8009384 <HAL_UART_MspInit+0x1b8>)
 800925e:	4b49      	ldr	r3, [pc, #292]	; (8009384 <HAL_UART_MspInit+0x1b8>)
 8009260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009262:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009266:	6593      	str	r3, [r2, #88]	; 0x58
 8009268:	4b46      	ldr	r3, [pc, #280]	; (8009384 <HAL_UART_MspInit+0x1b8>)
 800926a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800926c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009270:	613b      	str	r3, [r7, #16]
 8009272:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009274:	4a43      	ldr	r2, [pc, #268]	; (8009384 <HAL_UART_MspInit+0x1b8>)
 8009276:	4b43      	ldr	r3, [pc, #268]	; (8009384 <HAL_UART_MspInit+0x1b8>)
 8009278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800927a:	f043 0304 	orr.w	r3, r3, #4
 800927e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009280:	4b40      	ldr	r3, [pc, #256]	; (8009384 <HAL_UART_MspInit+0x1b8>)
 8009282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009284:	f003 0304 	and.w	r3, r3, #4
 8009288:	60fb      	str	r3, [r7, #12]
 800928a:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 800928c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009292:	2302      	movs	r3, #2
 8009294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009296:	2300      	movs	r3, #0
 8009298:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800929a:	2303      	movs	r3, #3
 800929c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800929e:	2308      	movs	r3, #8
 80092a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80092a2:	f107 031c 	add.w	r3, r7, #28
 80092a6:	4619      	mov	r1, r3
 80092a8:	4838      	ldr	r0, [pc, #224]	; (800938c <HAL_UART_MspInit+0x1c0>)
 80092aa:	f7f8 fbfb 	bl	8001aa4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 80092ae:	4b38      	ldr	r3, [pc, #224]	; (8009390 <HAL_UART_MspInit+0x1c4>)
 80092b0:	4a38      	ldr	r2, [pc, #224]	; (8009394 <HAL_UART_MspInit+0x1c8>)
 80092b2:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 80092b4:	4b36      	ldr	r3, [pc, #216]	; (8009390 <HAL_UART_MspInit+0x1c4>)
 80092b6:	2202      	movs	r2, #2
 80092b8:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80092ba:	4b35      	ldr	r3, [pc, #212]	; (8009390 <HAL_UART_MspInit+0x1c4>)
 80092bc:	2200      	movs	r2, #0
 80092be:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80092c0:	4b33      	ldr	r3, [pc, #204]	; (8009390 <HAL_UART_MspInit+0x1c4>)
 80092c2:	2200      	movs	r2, #0
 80092c4:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80092c6:	4b32      	ldr	r3, [pc, #200]	; (8009390 <HAL_UART_MspInit+0x1c4>)
 80092c8:	2280      	movs	r2, #128	; 0x80
 80092ca:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80092cc:	4b30      	ldr	r3, [pc, #192]	; (8009390 <HAL_UART_MspInit+0x1c4>)
 80092ce:	2200      	movs	r2, #0
 80092d0:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80092d2:	4b2f      	ldr	r3, [pc, #188]	; (8009390 <HAL_UART_MspInit+0x1c4>)
 80092d4:	2200      	movs	r2, #0
 80092d6:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80092d8:	4b2d      	ldr	r3, [pc, #180]	; (8009390 <HAL_UART_MspInit+0x1c4>)
 80092da:	2200      	movs	r2, #0
 80092dc:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80092de:	4b2c      	ldr	r3, [pc, #176]	; (8009390 <HAL_UART_MspInit+0x1c4>)
 80092e0:	2200      	movs	r2, #0
 80092e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80092e4:	482a      	ldr	r0, [pc, #168]	; (8009390 <HAL_UART_MspInit+0x1c4>)
 80092e6:	f7f8 f889 	bl	80013fc <HAL_DMA_Init>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d000      	beq.n	80092f2 <HAL_UART_MspInit+0x126>
 80092f0:	bf00      	nop
    {
      __NOP();
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4a26      	ldr	r2, [pc, #152]	; (8009390 <HAL_UART_MspInit+0x1c4>)
 80092f6:	66da      	str	r2, [r3, #108]	; 0x6c
 80092f8:	4a25      	ldr	r2, [pc, #148]	; (8009390 <HAL_UART_MspInit+0x1c4>)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel3;
 80092fe:	4b26      	ldr	r3, [pc, #152]	; (8009398 <HAL_UART_MspInit+0x1cc>)
 8009300:	4a26      	ldr	r2, [pc, #152]	; (800939c <HAL_UART_MspInit+0x1d0>)
 8009302:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_2;
 8009304:	4b24      	ldr	r3, [pc, #144]	; (8009398 <HAL_UART_MspInit+0x1cc>)
 8009306:	2202      	movs	r2, #2
 8009308:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800930a:	4b23      	ldr	r3, [pc, #140]	; (8009398 <HAL_UART_MspInit+0x1cc>)
 800930c:	2210      	movs	r2, #16
 800930e:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009310:	4b21      	ldr	r3, [pc, #132]	; (8009398 <HAL_UART_MspInit+0x1cc>)
 8009312:	2200      	movs	r2, #0
 8009314:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009316:	4b20      	ldr	r3, [pc, #128]	; (8009398 <HAL_UART_MspInit+0x1cc>)
 8009318:	2280      	movs	r2, #128	; 0x80
 800931a:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800931c:	4b1e      	ldr	r3, [pc, #120]	; (8009398 <HAL_UART_MspInit+0x1cc>)
 800931e:	2200      	movs	r2, #0
 8009320:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009322:	4b1d      	ldr	r3, [pc, #116]	; (8009398 <HAL_UART_MspInit+0x1cc>)
 8009324:	2200      	movs	r2, #0
 8009326:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8009328:	4b1b      	ldr	r3, [pc, #108]	; (8009398 <HAL_UART_MspInit+0x1cc>)
 800932a:	2200      	movs	r2, #0
 800932c:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800932e:	4b1a      	ldr	r3, [pc, #104]	; (8009398 <HAL_UART_MspInit+0x1cc>)
 8009330:	2200      	movs	r2, #0
 8009332:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8009334:	4818      	ldr	r0, [pc, #96]	; (8009398 <HAL_UART_MspInit+0x1cc>)
 8009336:	f7f8 f861 	bl	80013fc <HAL_DMA_Init>
 800933a:	4603      	mov	r3, r0
 800933c:	2b00      	cmp	r3, #0
 800933e:	d000      	beq.n	8009342 <HAL_UART_MspInit+0x176>
 8009340:	bf00      	nop
    {
      __NOP();
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	4a14      	ldr	r2, [pc, #80]	; (8009398 <HAL_UART_MspInit+0x1cc>)
 8009346:	669a      	str	r2, [r3, #104]	; 0x68
 8009348:	4a13      	ldr	r2, [pc, #76]	; (8009398 <HAL_UART_MspInit+0x1cc>)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4 interrupt Init */

	CLEAR_REG(huart->Instance->CR1);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	2200      	movs	r2, #0
 8009354:	601a      	str	r2, [r3, #0]
	CLEAR_REG(huart->Instance->CR2);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2200      	movs	r2, #0
 800935c:	605a      	str	r2, [r3, #4]
	CLEAR_REG(huart->Instance->CR3);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2200      	movs	r2, #0
 8009364:	609a      	str	r2, [r3, #8]

    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8009366:	2200      	movs	r2, #0
 8009368:	2100      	movs	r1, #0
 800936a:	2034      	movs	r0, #52	; 0x34
 800936c:	f7f7 ffed 	bl	800134a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8009370:	2034      	movs	r0, #52	; 0x34
 8009372:	f7f8 f806 	bl	8001382 <HAL_NVIC_EnableIRQ>
  }
}
 8009376:	bf00      	nop
 8009378:	3730      	adds	r7, #48	; 0x30
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	40004400 	.word	0x40004400
 8009384:	40021000 	.word	0x40021000
 8009388:	40004c00 	.word	0x40004c00
 800938c:	48000800 	.word	0x48000800
 8009390:	2000074c 	.word	0x2000074c
 8009394:	40020458 	.word	0x40020458
 8009398:	200018e0 	.word	0x200018e0
 800939c:	40020430 	.word	0x40020430

080093a0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  //Serial Output UART Deinit
  if(huart->Instance==USART2)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a18      	ldr	r2, [pc, #96]	; (8009410 <HAL_UART_MspDeInit+0x70>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d10d      	bne.n	80093ce <HAL_UART_MspDeInit+0x2e>
  {

    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 80093b2:	4a18      	ldr	r2, [pc, #96]	; (8009414 <HAL_UART_MspDeInit+0x74>)
 80093b4:	4b17      	ldr	r3, [pc, #92]	; (8009414 <HAL_UART_MspDeInit+0x74>)
 80093b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80093bc:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80093be:	210c      	movs	r1, #12
 80093c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80093c4:	f7f8 fd16 	bl	8001df4 <HAL_GPIO_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80093c8:	2026      	movs	r0, #38	; 0x26
 80093ca:	f7f7 ffe8 	bl	800139e <HAL_NVIC_DisableIRQ>

  }
  //GPS UART Deinit
  if(huart->Instance==UART4)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a11      	ldr	r2, [pc, #68]	; (8009418 <HAL_UART_MspDeInit+0x78>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d117      	bne.n	8009408 <HAL_UART_MspDeInit+0x68>
  {

    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 80093d8:	4a0e      	ldr	r2, [pc, #56]	; (8009414 <HAL_UART_MspDeInit+0x74>)
 80093da:	4b0e      	ldr	r3, [pc, #56]	; (8009414 <HAL_UART_MspDeInit+0x74>)
 80093dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093de:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80093e2:	6593      	str	r3, [r2, #88]	; 0x58

    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPS_TX_Pin|GPS_RX_Pin);
 80093e4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80093e8:	480c      	ldr	r0, [pc, #48]	; (800941c <HAL_UART_MspDeInit+0x7c>)
 80093ea:	f7f8 fd03 	bl	8001df4 <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7f8 f8ba 	bl	800156c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7f8 f8b5 	bl	800156c <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8009402:	2034      	movs	r0, #52	; 0x34
 8009404:	f7f7 ffcb 	bl	800139e <HAL_NVIC_DisableIRQ>

  }

}
 8009408:	bf00      	nop
 800940a:	3708      	adds	r7, #8
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}
 8009410:	40004400 	.word	0x40004400
 8009414:	40021000 	.word	0x40021000
 8009418:	40004c00 	.word	0x40004c00
 800941c:	48000800 	.word	0x48000800

08009420 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b08a      	sub	sp, #40	; 0x28
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009428:	f107 0314 	add.w	r3, r7, #20
 800942c:	2200      	movs	r2, #0
 800942e:	601a      	str	r2, [r3, #0]
 8009430:	605a      	str	r2, [r3, #4]
 8009432:	609a      	str	r2, [r3, #8]
 8009434:	60da      	str	r2, [r3, #12]
 8009436:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009440:	d130      	bne.n	80094a4 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009442:	4a1a      	ldr	r2, [pc, #104]	; (80094ac <HAL_TIM_Base_MspInit+0x8c>)
 8009444:	4b19      	ldr	r3, [pc, #100]	; (80094ac <HAL_TIM_Base_MspInit+0x8c>)
 8009446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009448:	f043 0301 	orr.w	r3, r3, #1
 800944c:	6593      	str	r3, [r2, #88]	; 0x58
 800944e:	4b17      	ldr	r3, [pc, #92]	; (80094ac <HAL_TIM_Base_MspInit+0x8c>)
 8009450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009452:	f003 0301 	and.w	r3, r3, #1
 8009456:	613b      	str	r3, [r7, #16]
 8009458:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800945a:	4a14      	ldr	r2, [pc, #80]	; (80094ac <HAL_TIM_Base_MspInit+0x8c>)
 800945c:	4b13      	ldr	r3, [pc, #76]	; (80094ac <HAL_TIM_Base_MspInit+0x8c>)
 800945e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009460:	f043 0301 	orr.w	r3, r3, #1
 8009464:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009466:	4b11      	ldr	r3, [pc, #68]	; (80094ac <HAL_TIM_Base_MspInit+0x8c>)
 8009468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800946a:	f003 0301 	and.w	r3, r3, #1
 800946e:	60fb      	str	r3, [r7, #12]
 8009470:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8009472:	2302      	movs	r3, #2
 8009474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009476:	2302      	movs	r3, #2
 8009478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800947a:	2300      	movs	r3, #0
 800947c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800947e:	2300      	movs	r3, #0
 8009480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009482:	2301      	movs	r3, #1
 8009484:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009486:	f107 0314 	add.w	r3, r7, #20
 800948a:	4619      	mov	r1, r3
 800948c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009490:	f7f8 fb08 	bl	8001aa4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8009494:	2200      	movs	r2, #0
 8009496:	2100      	movs	r1, #0
 8009498:	201c      	movs	r0, #28
 800949a:	f7f7 ff56 	bl	800134a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800949e:	201c      	movs	r0, #28
 80094a0:	f7f7 ff6f 	bl	8001382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80094a4:	bf00      	nop
 80094a6:	3728      	adds	r7, #40	; 0x28
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	40021000 	.word	0x40021000

080094b0 <HAL_TIM_Base_MspDeInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b082      	sub	sp, #8
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094c0:	d10d      	bne.n	80094de <HAL_TIM_Base_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspDeInit 0 */

  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 80094c2:	4a09      	ldr	r2, [pc, #36]	; (80094e8 <HAL_TIM_Base_MspDeInit+0x38>)
 80094c4:	4b08      	ldr	r3, [pc, #32]	; (80094e8 <HAL_TIM_Base_MspDeInit+0x38>)
 80094c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094c8:	f023 0301 	bic.w	r3, r3, #1
 80094cc:	6593      	str	r3, [r2, #88]	; 0x58

    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1);
 80094ce:	2102      	movs	r1, #2
 80094d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80094d4:	f7f8 fc8e 	bl	8001df4 <HAL_GPIO_DeInit>

    /* TIM2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 80094d8:	201c      	movs	r0, #28
 80094da:	f7f7 ff60 	bl	800139e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM2_MspDeInit 1 */

  /* USER CODE END TIM2_MspDeInit 1 */
  }

}
 80094de:	bf00      	nop
 80094e0:	3708      	adds	r7, #8
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	40021000 	.word	0x40021000

080094ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80094ec:	b480      	push	{r7}
 80094ee:	af00      	add	r7, sp, #0
  /* USER CODE NonMaskableInt_IRQn 0 */


}
 80094f0:	bf00      	nop
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bc80      	pop	{r7}
 80094f6:	4770      	bx	lr

080094f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80094f8:	b480      	push	{r7}
 80094fa:	af00      	add	r7, sp, #0
  /* USER CODE HardFault_IRQn 0 */


  while (1)
 80094fc:	e7fe      	b.n	80094fc <HardFault_Handler+0x4>

080094fe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80094fe:	b480      	push	{r7}
 8009500:	af00      	add	r7, sp, #0
  /* USER CODE MemoryManagement_IRQn 0 */


  while (1)
 8009502:	e7fe      	b.n	8009502 <MemManage_Handler+0x4>

08009504 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009504:	b480      	push	{r7}
 8009506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */


  while (1)
 8009508:	e7fe      	b.n	8009508 <BusFault_Handler+0x4>

0800950a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800950a:	b480      	push	{r7}
 800950c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */


  while (1)
 800950e:	e7fe      	b.n	800950e <UsageFault_Handler+0x4>

08009510 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009510:	b480      	push	{r7}
 8009512:	af00      	add	r7, sp, #0
  /* USER CODE SVCall_IRQn 0 */


}
 8009514:	bf00      	nop
 8009516:	46bd      	mov	sp, r7
 8009518:	bc80      	pop	{r7}
 800951a:	4770      	bx	lr

0800951c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800951c:	b480      	push	{r7}
 800951e:	af00      	add	r7, sp, #0
  /* USER CODE DebugMonitor_IRQn 0 */


}
 8009520:	bf00      	nop
 8009522:	46bd      	mov	sp, r7
 8009524:	bc80      	pop	{r7}
 8009526:	4770      	bx	lr

08009528 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009528:	b480      	push	{r7}
 800952a:	af00      	add	r7, sp, #0
  /* USER CODE PendSV_IRQn 0 */


}
 800952c:	bf00      	nop
 800952e:	46bd      	mov	sp, r7
 8009530:	bc80      	pop	{r7}
 8009532:	4770      	bx	lr

08009534 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  HAL_IncTick();
 8009538:	f7f7 fd94 	bl	8001064 <HAL_IncTick>

}
 800953c:	bf00      	nop
 800953e:	bd80      	pop	{r7, pc}

08009540 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	af00      	add	r7, sp, #0
  /* USER CODE RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8009544:	4802      	ldr	r0, [pc, #8]	; (8009550 <RTC_WKUP_IRQHandler+0x10>)
 8009546:	f7fa fc3b 	bl	8003dc0 <HAL_RTCEx_WakeUpTimerIRQHandler>

}
 800954a:	bf00      	nop
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	200021cc 	.word	0x200021cc

08009554 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	af00      	add	r7, sp, #0
  /* USER CODE USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009558:	4802      	ldr	r0, [pc, #8]	; (8009564 <USART2_IRQHandler+0x10>)
 800955a:	f7fc fc49 	bl	8005df0 <HAL_UART_IRQHandler>

}
 800955e:	bf00      	nop
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	20002148 	.word	0x20002148

08009568 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	af00      	add	r7, sp, #0
  /* USER CODE TIM2_IRQn 0 */
  USART_TIM_RTO_Handler(&htim2); //custom call back function
 800956c:	4803      	ldr	r0, [pc, #12]	; (800957c <TIM2_IRQHandler+0x14>)
 800956e:	f7fe fbd5 	bl	8007d1c <USART_TIM_RTO_Handler>

  HAL_TIM_IRQHandler(&htim2);	 //HAL default handler
 8009572:	4802      	ldr	r0, [pc, #8]	; (800957c <TIM2_IRQHandler+0x14>)
 8009574:	f7fa fe32 	bl	80041dc <HAL_TIM_IRQHandler>

}
 8009578:	bf00      	nop
 800957a:	bd80      	pop	{r7, pc}
 800957c:	2000109c 	.word	0x2000109c

08009580 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	af00      	add	r7, sp, #0
  /* USER CODE UART4_IRQn 0 */
	USART_GPS_IRQHandler(&hgps); //custom user Call Back function
 8009584:	4802      	ldr	r0, [pc, #8]	; (8009590 <UART4_IRQHandler+0x10>)
 8009586:	f7fe fd5b 	bl	8008040 <USART_GPS_IRQHandler>

}
 800958a:	bf00      	nop
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	20000798 	.word	0x20000798

08009594 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8009598:	4802      	ldr	r0, [pc, #8]	; (80095a4 <DMA2_Channel3_IRQHandler+0x10>)
 800959a:	f7f8 f99a 	bl	80018d2 <HAL_DMA_IRQHandler>

}
 800959e:	bf00      	nop
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	200018e0 	.word	0x200018e0

080095a8 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	af00      	add	r7, sp, #0
  /* USER CODE DMA2_Channel5_IRQn 0 */
  DMA_GNSS_Periph_IRQHandler(&hgps);
 80095ac:	4802      	ldr	r0, [pc, #8]	; (80095b8 <DMA2_Channel5_IRQHandler+0x10>)
 80095ae:	f7fe fca7 	bl	8007f00 <DMA_GNSS_Periph_IRQHandler>

}
 80095b2:	bf00      	nop
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	20000798 	.word	0x20000798

080095bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	af00      	add	r7, sp, #0
  /* USER CODE DMA1_Channel1_IRQn 0 */

  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel1);
 80095c0:	4803      	ldr	r0, [pc, #12]	; (80095d0 <DMA1_Channel1_IRQHandler+0x14>)
 80095c2:	f7f8 f986 	bl	80018d2 <HAL_DMA_IRQHandler>
  DMA_GNSS_MEM_IRQHandler(&hgps);
 80095c6:	4803      	ldr	r0, [pc, #12]	; (80095d4 <DMA1_Channel1_IRQHandler+0x18>)
 80095c8:	f7fe fbc4 	bl	8007d54 <DMA_GNSS_MEM_IRQHandler>

}
 80095cc:	bf00      	nop
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	200007d0 	.word	0x200007d0
 80095d4:	20000798 	.word	0x20000798

080095d8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80095d8:	b590      	push	{r4, r7, lr}
 80095da:	b087      	sub	sp, #28
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	60b9      	str	r1, [r7, #8]
 80095e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80095e4:	2300      	movs	r3, #0
 80095e6:	617b      	str	r3, [r7, #20]
 80095e8:	e00a      	b.n	8009600 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80095ea:	68bc      	ldr	r4, [r7, #8]
 80095ec:	1c63      	adds	r3, r4, #1
 80095ee:	60bb      	str	r3, [r7, #8]
 80095f0:	f3af 8000 	nop.w
 80095f4:	4603      	mov	r3, r0
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	3301      	adds	r3, #1
 80095fe:	617b      	str	r3, [r7, #20]
 8009600:	697a      	ldr	r2, [r7, #20]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	429a      	cmp	r2, r3
 8009606:	dbf0      	blt.n	80095ea <_read+0x12>
	}

return len;
 8009608:	687b      	ldr	r3, [r7, #4]
}
 800960a:	4618      	mov	r0, r3
 800960c:	371c      	adds	r7, #28
 800960e:	46bd      	mov	sp, r7
 8009610:	bd90      	pop	{r4, r7, pc}

08009612 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009612:	b580      	push	{r7, lr}
 8009614:	b086      	sub	sp, #24
 8009616:	af00      	add	r7, sp, #0
 8009618:	60f8      	str	r0, [r7, #12]
 800961a:	60b9      	str	r1, [r7, #8]
 800961c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800961e:	2300      	movs	r3, #0
 8009620:	617b      	str	r3, [r7, #20]
 8009622:	e009      	b.n	8009638 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	1c5a      	adds	r2, r3, #1
 8009628:	60ba      	str	r2, [r7, #8]
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	4618      	mov	r0, r3
 800962e:	f7ff f83b 	bl	80086a8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	3301      	adds	r3, #1
 8009636:	617b      	str	r3, [r7, #20]
 8009638:	697a      	ldr	r2, [r7, #20]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	429a      	cmp	r2, r3
 800963e:	dbf1      	blt.n	8009624 <_write+0x12>
	}
	return len;
 8009640:	687b      	ldr	r3, [r7, #4]
}
 8009642:	4618      	mov	r0, r3
 8009644:	3718      	adds	r7, #24
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
	...

0800964c <_sbrk>:

caddr_t _sbrk(int incr)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009654:	4b11      	ldr	r3, [pc, #68]	; (800969c <_sbrk+0x50>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d102      	bne.n	8009662 <_sbrk+0x16>
		heap_end = &end;
 800965c:	4b0f      	ldr	r3, [pc, #60]	; (800969c <_sbrk+0x50>)
 800965e:	4a10      	ldr	r2, [pc, #64]	; (80096a0 <_sbrk+0x54>)
 8009660:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8009662:	4b0e      	ldr	r3, [pc, #56]	; (800969c <_sbrk+0x50>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8009668:	4b0c      	ldr	r3, [pc, #48]	; (800969c <_sbrk+0x50>)
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	4413      	add	r3, r2
 8009670:	466a      	mov	r2, sp
 8009672:	4293      	cmp	r3, r2
 8009674:	d907      	bls.n	8009686 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8009676:	f000 f875 	bl	8009764 <__errno>
 800967a:	4602      	mov	r2, r0
 800967c:	230c      	movs	r3, #12
 800967e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8009680:	f04f 33ff 	mov.w	r3, #4294967295
 8009684:	e006      	b.n	8009694 <_sbrk+0x48>
	}

	heap_end += incr;
 8009686:	4b05      	ldr	r3, [pc, #20]	; (800969c <_sbrk+0x50>)
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	4413      	add	r3, r2
 800968e:	4a03      	ldr	r2, [pc, #12]	; (800969c <_sbrk+0x50>)
 8009690:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8009692:	68fb      	ldr	r3, [r7, #12]
}
 8009694:	4618      	mov	r0, r3
 8009696:	3710      	adds	r7, #16
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}
 800969c:	200006ec 	.word	0x200006ec
 80096a0:	20002200 	.word	0x20002200

080096a4 <_close>:

int _close(int file)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
	return -1;
 80096ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bc80      	pop	{r7}
 80096b8:	4770      	bx	lr

080096ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80096ba:	b480      	push	{r7}
 80096bc:	b083      	sub	sp, #12
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
 80096c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80096ca:	605a      	str	r2, [r3, #4]
	return 0;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	370c      	adds	r7, #12
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bc80      	pop	{r7}
 80096d6:	4770      	bx	lr

080096d8 <_isatty>:

int _isatty(int file)
{
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
	return 1;
 80096e0:	2301      	movs	r3, #1
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	370c      	adds	r7, #12
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bc80      	pop	{r7}
 80096ea:	4770      	bx	lr

080096ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b085      	sub	sp, #20
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	607a      	str	r2, [r7, #4]
	return 0;
 80096f8:	2300      	movs	r3, #0
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3714      	adds	r7, #20
 80096fe:	46bd      	mov	sp, r7
 8009700:	bc80      	pop	{r7}
 8009702:	4770      	bx	lr

08009704 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8009704:	b480      	push	{r7}
 8009706:	af00      	add	r7, sp, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8009708:	4a12      	ldr	r2, [pc, #72]	; (8009754 <SystemInit+0x50>)
 800970a:	4b12      	ldr	r3, [pc, #72]	; (8009754 <SystemInit+0x50>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f043 0301 	orr.w	r3, r3, #1
 8009712:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8009714:	4b0f      	ldr	r3, [pc, #60]	; (8009754 <SystemInit+0x50>)
 8009716:	2200      	movs	r2, #0
 8009718:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800971a:	4a0e      	ldr	r2, [pc, #56]	; (8009754 <SystemInit+0x50>)
 800971c:	4b0d      	ldr	r3, [pc, #52]	; (8009754 <SystemInit+0x50>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8009724:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8009728:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800972a:	4b0a      	ldr	r3, [pc, #40]	; (8009754 <SystemInit+0x50>)
 800972c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009730:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8009732:	4a08      	ldr	r2, [pc, #32]	; (8009754 <SystemInit+0x50>)
 8009734:	4b07      	ldr	r3, [pc, #28]	; (8009754 <SystemInit+0x50>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800973c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800973e:	4b05      	ldr	r3, [pc, #20]	; (8009754 <SystemInit+0x50>)
 8009740:	2200      	movs	r2, #0
 8009742:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009744:	4b04      	ldr	r3, [pc, #16]	; (8009758 <SystemInit+0x54>)
 8009746:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800974a:	609a      	str	r2, [r3, #8]
#endif
}
 800974c:	bf00      	nop
 800974e:	46bd      	mov	sp, r7
 8009750:	bc80      	pop	{r7}
 8009752:	4770      	bx	lr
 8009754:	40021000 	.word	0x40021000
 8009758:	e000ed00 	.word	0xe000ed00

0800975c <atof>:
 800975c:	2100      	movs	r1, #0
 800975e:	f001 bd43 	b.w	800b1e8 <strtod>
	...

08009764 <__errno>:
 8009764:	4b01      	ldr	r3, [pc, #4]	; (800976c <__errno+0x8>)
 8009766:	6818      	ldr	r0, [r3, #0]
 8009768:	4770      	bx	lr
 800976a:	bf00      	nop
 800976c:	20000010 	.word	0x20000010

08009770 <__libc_init_array>:
 8009770:	b570      	push	{r4, r5, r6, lr}
 8009772:	4e0d      	ldr	r6, [pc, #52]	; (80097a8 <__libc_init_array+0x38>)
 8009774:	4c0d      	ldr	r4, [pc, #52]	; (80097ac <__libc_init_array+0x3c>)
 8009776:	1ba4      	subs	r4, r4, r6
 8009778:	10a4      	asrs	r4, r4, #2
 800977a:	2500      	movs	r5, #0
 800977c:	42a5      	cmp	r5, r4
 800977e:	d109      	bne.n	8009794 <__libc_init_array+0x24>
 8009780:	4e0b      	ldr	r6, [pc, #44]	; (80097b0 <__libc_init_array+0x40>)
 8009782:	4c0c      	ldr	r4, [pc, #48]	; (80097b4 <__libc_init_array+0x44>)
 8009784:	f006 ffe8 	bl	8010758 <_init>
 8009788:	1ba4      	subs	r4, r4, r6
 800978a:	10a4      	asrs	r4, r4, #2
 800978c:	2500      	movs	r5, #0
 800978e:	42a5      	cmp	r5, r4
 8009790:	d105      	bne.n	800979e <__libc_init_array+0x2e>
 8009792:	bd70      	pop	{r4, r5, r6, pc}
 8009794:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009798:	4798      	blx	r3
 800979a:	3501      	adds	r5, #1
 800979c:	e7ee      	b.n	800977c <__libc_init_array+0xc>
 800979e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80097a2:	4798      	blx	r3
 80097a4:	3501      	adds	r5, #1
 80097a6:	e7f2      	b.n	800978e <__libc_init_array+0x1e>
 80097a8:	080110a0 	.word	0x080110a0
 80097ac:	080110a0 	.word	0x080110a0
 80097b0:	080110a0 	.word	0x080110a0
 80097b4:	080110a4 	.word	0x080110a4

080097b8 <localtime>:
 80097b8:	b538      	push	{r3, r4, r5, lr}
 80097ba:	4b07      	ldr	r3, [pc, #28]	; (80097d8 <localtime+0x20>)
 80097bc:	681c      	ldr	r4, [r3, #0]
 80097be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80097c0:	4605      	mov	r5, r0
 80097c2:	b91b      	cbnz	r3, 80097cc <localtime+0x14>
 80097c4:	2024      	movs	r0, #36	; 0x24
 80097c6:	f000 f8ed 	bl	80099a4 <malloc>
 80097ca:	63e0      	str	r0, [r4, #60]	; 0x3c
 80097cc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80097ce:	4628      	mov	r0, r5
 80097d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097d4:	f000 b802 	b.w	80097dc <localtime_r>
 80097d8:	20000010 	.word	0x20000010

080097dc <localtime_r>:
 80097dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097e0:	460c      	mov	r4, r1
 80097e2:	4680      	mov	r8, r0
 80097e4:	f004 feae 	bl	800e544 <__gettzinfo>
 80097e8:	4621      	mov	r1, r4
 80097ea:	4607      	mov	r7, r0
 80097ec:	4640      	mov	r0, r8
 80097ee:	f004 fead 	bl	800e54c <gmtime_r>
 80097f2:	6946      	ldr	r6, [r0, #20]
 80097f4:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80097f8:	07b3      	lsls	r3, r6, #30
 80097fa:	4604      	mov	r4, r0
 80097fc:	d105      	bne.n	800980a <localtime_r+0x2e>
 80097fe:	2264      	movs	r2, #100	; 0x64
 8009800:	fb96 f3f2 	sdiv	r3, r6, r2
 8009804:	fb02 6313 	mls	r3, r2, r3, r6
 8009808:	b9fb      	cbnz	r3, 800984a <localtime_r+0x6e>
 800980a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800980e:	fb96 f5f3 	sdiv	r5, r6, r3
 8009812:	fb03 6515 	mls	r5, r3, r5, r6
 8009816:	fab5 f585 	clz	r5, r5
 800981a:	096d      	lsrs	r5, r5, #5
 800981c:	4b5f      	ldr	r3, [pc, #380]	; (800999c <localtime_r+0x1c0>)
 800981e:	2230      	movs	r2, #48	; 0x30
 8009820:	fb02 3505 	mla	r5, r2, r5, r3
 8009824:	f001 fe04 	bl	800b430 <__tz_lock>
 8009828:	f001 fe0e 	bl	800b448 <_tzset_unlocked>
 800982c:	4b5c      	ldr	r3, [pc, #368]	; (80099a0 <localtime_r+0x1c4>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	b1e3      	cbz	r3, 800986c <localtime_r+0x90>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	429e      	cmp	r6, r3
 8009836:	d10a      	bne.n	800984e <localtime_r+0x72>
 8009838:	6839      	ldr	r1, [r7, #0]
 800983a:	f8d8 3000 	ldr.w	r3, [r8]
 800983e:	69fa      	ldr	r2, [r7, #28]
 8009840:	b969      	cbnz	r1, 800985e <localtime_r+0x82>
 8009842:	4293      	cmp	r3, r2
 8009844:	db0d      	blt.n	8009862 <localtime_r+0x86>
 8009846:	2301      	movs	r3, #1
 8009848:	e010      	b.n	800986c <localtime_r+0x90>
 800984a:	2501      	movs	r5, #1
 800984c:	e7e6      	b.n	800981c <localtime_r+0x40>
 800984e:	4630      	mov	r0, r6
 8009850:	f001 fd46 	bl	800b2e0 <__tzcalc_limits>
 8009854:	2800      	cmp	r0, #0
 8009856:	d1ef      	bne.n	8009838 <localtime_r+0x5c>
 8009858:	f04f 33ff 	mov.w	r3, #4294967295
 800985c:	e006      	b.n	800986c <localtime_r+0x90>
 800985e:	4293      	cmp	r3, r2
 8009860:	db55      	blt.n	800990e <localtime_r+0x132>
 8009862:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009864:	4293      	cmp	r3, r2
 8009866:	bfac      	ite	ge
 8009868:	2300      	movge	r3, #0
 800986a:	2301      	movlt	r3, #1
 800986c:	6223      	str	r3, [r4, #32]
 800986e:	6a23      	ldr	r3, [r4, #32]
 8009870:	2b01      	cmp	r3, #1
 8009872:	bf0c      	ite	eq
 8009874:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 8009876:	6a39      	ldrne	r1, [r7, #32]
 8009878:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800987c:	203c      	movs	r0, #60	; 0x3c
 800987e:	fb91 f6f3 	sdiv	r6, r1, r3
 8009882:	fb03 1316 	mls	r3, r3, r6, r1
 8009886:	6861      	ldr	r1, [r4, #4]
 8009888:	fb93 f2f0 	sdiv	r2, r3, r0
 800988c:	fb00 3012 	mls	r0, r0, r2, r3
 8009890:	6823      	ldr	r3, [r4, #0]
 8009892:	1a89      	subs	r1, r1, r2
 8009894:	68a2      	ldr	r2, [r4, #8]
 8009896:	6061      	str	r1, [r4, #4]
 8009898:	1a1b      	subs	r3, r3, r0
 800989a:	1b92      	subs	r2, r2, r6
 800989c:	2b3b      	cmp	r3, #59	; 0x3b
 800989e:	6023      	str	r3, [r4, #0]
 80098a0:	60a2      	str	r2, [r4, #8]
 80098a2:	dd36      	ble.n	8009912 <localtime_r+0x136>
 80098a4:	3101      	adds	r1, #1
 80098a6:	6061      	str	r1, [r4, #4]
 80098a8:	3b3c      	subs	r3, #60	; 0x3c
 80098aa:	6023      	str	r3, [r4, #0]
 80098ac:	6863      	ldr	r3, [r4, #4]
 80098ae:	2b3b      	cmp	r3, #59	; 0x3b
 80098b0:	dd35      	ble.n	800991e <localtime_r+0x142>
 80098b2:	3201      	adds	r2, #1
 80098b4:	60a2      	str	r2, [r4, #8]
 80098b6:	3b3c      	subs	r3, #60	; 0x3c
 80098b8:	6063      	str	r3, [r4, #4]
 80098ba:	68a3      	ldr	r3, [r4, #8]
 80098bc:	2b17      	cmp	r3, #23
 80098be:	dd34      	ble.n	800992a <localtime_r+0x14e>
 80098c0:	69e2      	ldr	r2, [r4, #28]
 80098c2:	3201      	adds	r2, #1
 80098c4:	61e2      	str	r2, [r4, #28]
 80098c6:	69a2      	ldr	r2, [r4, #24]
 80098c8:	3201      	adds	r2, #1
 80098ca:	2a06      	cmp	r2, #6
 80098cc:	bfc8      	it	gt
 80098ce:	2200      	movgt	r2, #0
 80098d0:	61a2      	str	r2, [r4, #24]
 80098d2:	68e2      	ldr	r2, [r4, #12]
 80098d4:	3b18      	subs	r3, #24
 80098d6:	3201      	adds	r2, #1
 80098d8:	60a3      	str	r3, [r4, #8]
 80098da:	6923      	ldr	r3, [r4, #16]
 80098dc:	60e2      	str	r2, [r4, #12]
 80098de:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80098e2:	428a      	cmp	r2, r1
 80098e4:	dd0e      	ble.n	8009904 <localtime_r+0x128>
 80098e6:	3301      	adds	r3, #1
 80098e8:	2b0c      	cmp	r3, #12
 80098ea:	bf0c      	ite	eq
 80098ec:	6963      	ldreq	r3, [r4, #20]
 80098ee:	6123      	strne	r3, [r4, #16]
 80098f0:	eba2 0201 	sub.w	r2, r2, r1
 80098f4:	60e2      	str	r2, [r4, #12]
 80098f6:	bf01      	itttt	eq
 80098f8:	3301      	addeq	r3, #1
 80098fa:	2200      	moveq	r2, #0
 80098fc:	6122      	streq	r2, [r4, #16]
 80098fe:	6163      	streq	r3, [r4, #20]
 8009900:	bf08      	it	eq
 8009902:	61e2      	streq	r2, [r4, #28]
 8009904:	f001 fd9a 	bl	800b43c <__tz_unlock>
 8009908:	4620      	mov	r0, r4
 800990a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800990e:	2300      	movs	r3, #0
 8009910:	e7ac      	b.n	800986c <localtime_r+0x90>
 8009912:	2b00      	cmp	r3, #0
 8009914:	daca      	bge.n	80098ac <localtime_r+0xd0>
 8009916:	3901      	subs	r1, #1
 8009918:	6061      	str	r1, [r4, #4]
 800991a:	333c      	adds	r3, #60	; 0x3c
 800991c:	e7c5      	b.n	80098aa <localtime_r+0xce>
 800991e:	2b00      	cmp	r3, #0
 8009920:	dacb      	bge.n	80098ba <localtime_r+0xde>
 8009922:	3a01      	subs	r2, #1
 8009924:	60a2      	str	r2, [r4, #8]
 8009926:	333c      	adds	r3, #60	; 0x3c
 8009928:	e7c6      	b.n	80098b8 <localtime_r+0xdc>
 800992a:	2b00      	cmp	r3, #0
 800992c:	daea      	bge.n	8009904 <localtime_r+0x128>
 800992e:	69e2      	ldr	r2, [r4, #28]
 8009930:	3a01      	subs	r2, #1
 8009932:	61e2      	str	r2, [r4, #28]
 8009934:	69a2      	ldr	r2, [r4, #24]
 8009936:	3a01      	subs	r2, #1
 8009938:	bf48      	it	mi
 800993a:	2206      	movmi	r2, #6
 800993c:	61a2      	str	r2, [r4, #24]
 800993e:	68e2      	ldr	r2, [r4, #12]
 8009940:	3318      	adds	r3, #24
 8009942:	3a01      	subs	r2, #1
 8009944:	60e2      	str	r2, [r4, #12]
 8009946:	60a3      	str	r3, [r4, #8]
 8009948:	2a00      	cmp	r2, #0
 800994a:	d1db      	bne.n	8009904 <localtime_r+0x128>
 800994c:	6923      	ldr	r3, [r4, #16]
 800994e:	3b01      	subs	r3, #1
 8009950:	d405      	bmi.n	800995e <localtime_r+0x182>
 8009952:	6123      	str	r3, [r4, #16]
 8009954:	6923      	ldr	r3, [r4, #16]
 8009956:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800995a:	60e3      	str	r3, [r4, #12]
 800995c:	e7d2      	b.n	8009904 <localtime_r+0x128>
 800995e:	230b      	movs	r3, #11
 8009960:	6123      	str	r3, [r4, #16]
 8009962:	6963      	ldr	r3, [r4, #20]
 8009964:	1e5a      	subs	r2, r3, #1
 8009966:	f012 0f03 	tst.w	r2, #3
 800996a:	6162      	str	r2, [r4, #20]
 800996c:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 8009970:	d105      	bne.n	800997e <localtime_r+0x1a2>
 8009972:	2164      	movs	r1, #100	; 0x64
 8009974:	fb92 f3f1 	sdiv	r3, r2, r1
 8009978:	fb01 2313 	mls	r3, r1, r3, r2
 800997c:	b963      	cbnz	r3, 8009998 <localtime_r+0x1bc>
 800997e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009982:	fb92 f3f1 	sdiv	r3, r2, r1
 8009986:	fb01 2313 	mls	r3, r1, r3, r2
 800998a:	fab3 f383 	clz	r3, r3
 800998e:	095b      	lsrs	r3, r3, #5
 8009990:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8009994:	61e3      	str	r3, [r4, #28]
 8009996:	e7dd      	b.n	8009954 <localtime_r+0x178>
 8009998:	2301      	movs	r3, #1
 800999a:	e7f9      	b.n	8009990 <localtime_r+0x1b4>
 800999c:	08010cb0 	.word	0x08010cb0
 80099a0:	20000740 	.word	0x20000740

080099a4 <malloc>:
 80099a4:	4b02      	ldr	r3, [pc, #8]	; (80099b0 <malloc+0xc>)
 80099a6:	4601      	mov	r1, r0
 80099a8:	6818      	ldr	r0, [r3, #0]
 80099aa:	f000 b80b 	b.w	80099c4 <_malloc_r>
 80099ae:	bf00      	nop
 80099b0:	20000010 	.word	0x20000010

080099b4 <free>:
 80099b4:	4b02      	ldr	r3, [pc, #8]	; (80099c0 <free+0xc>)
 80099b6:	4601      	mov	r1, r0
 80099b8:	6818      	ldr	r0, [r3, #0]
 80099ba:	f004 b823 	b.w	800da04 <_free_r>
 80099be:	bf00      	nop
 80099c0:	20000010 	.word	0x20000010

080099c4 <_malloc_r>:
 80099c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c8:	f101 040b 	add.w	r4, r1, #11
 80099cc:	2c16      	cmp	r4, #22
 80099ce:	4681      	mov	r9, r0
 80099d0:	d907      	bls.n	80099e2 <_malloc_r+0x1e>
 80099d2:	f034 0407 	bics.w	r4, r4, #7
 80099d6:	d505      	bpl.n	80099e4 <_malloc_r+0x20>
 80099d8:	230c      	movs	r3, #12
 80099da:	f8c9 3000 	str.w	r3, [r9]
 80099de:	2600      	movs	r6, #0
 80099e0:	e131      	b.n	8009c46 <_malloc_r+0x282>
 80099e2:	2410      	movs	r4, #16
 80099e4:	428c      	cmp	r4, r1
 80099e6:	d3f7      	bcc.n	80099d8 <_malloc_r+0x14>
 80099e8:	4648      	mov	r0, r9
 80099ea:	f000 fc69 	bl	800a2c0 <__malloc_lock>
 80099ee:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80099f2:	4d9c      	ldr	r5, [pc, #624]	; (8009c64 <_malloc_r+0x2a0>)
 80099f4:	d236      	bcs.n	8009a64 <_malloc_r+0xa0>
 80099f6:	f104 0208 	add.w	r2, r4, #8
 80099fa:	442a      	add	r2, r5
 80099fc:	f1a2 0108 	sub.w	r1, r2, #8
 8009a00:	6856      	ldr	r6, [r2, #4]
 8009a02:	428e      	cmp	r6, r1
 8009a04:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8009a08:	d102      	bne.n	8009a10 <_malloc_r+0x4c>
 8009a0a:	68d6      	ldr	r6, [r2, #12]
 8009a0c:	42b2      	cmp	r2, r6
 8009a0e:	d010      	beq.n	8009a32 <_malloc_r+0x6e>
 8009a10:	6873      	ldr	r3, [r6, #4]
 8009a12:	68f2      	ldr	r2, [r6, #12]
 8009a14:	68b1      	ldr	r1, [r6, #8]
 8009a16:	f023 0303 	bic.w	r3, r3, #3
 8009a1a:	60ca      	str	r2, [r1, #12]
 8009a1c:	4433      	add	r3, r6
 8009a1e:	6091      	str	r1, [r2, #8]
 8009a20:	685a      	ldr	r2, [r3, #4]
 8009a22:	f042 0201 	orr.w	r2, r2, #1
 8009a26:	605a      	str	r2, [r3, #4]
 8009a28:	4648      	mov	r0, r9
 8009a2a:	f000 fc4f 	bl	800a2cc <__malloc_unlock>
 8009a2e:	3608      	adds	r6, #8
 8009a30:	e109      	b.n	8009c46 <_malloc_r+0x282>
 8009a32:	3302      	adds	r3, #2
 8009a34:	4a8c      	ldr	r2, [pc, #560]	; (8009c68 <_malloc_r+0x2a4>)
 8009a36:	692e      	ldr	r6, [r5, #16]
 8009a38:	4296      	cmp	r6, r2
 8009a3a:	4611      	mov	r1, r2
 8009a3c:	d06d      	beq.n	8009b1a <_malloc_r+0x156>
 8009a3e:	6870      	ldr	r0, [r6, #4]
 8009a40:	f020 0003 	bic.w	r0, r0, #3
 8009a44:	1b07      	subs	r7, r0, r4
 8009a46:	2f0f      	cmp	r7, #15
 8009a48:	dd47      	ble.n	8009ada <_malloc_r+0x116>
 8009a4a:	1933      	adds	r3, r6, r4
 8009a4c:	f044 0401 	orr.w	r4, r4, #1
 8009a50:	6074      	str	r4, [r6, #4]
 8009a52:	616b      	str	r3, [r5, #20]
 8009a54:	612b      	str	r3, [r5, #16]
 8009a56:	60da      	str	r2, [r3, #12]
 8009a58:	609a      	str	r2, [r3, #8]
 8009a5a:	f047 0201 	orr.w	r2, r7, #1
 8009a5e:	605a      	str	r2, [r3, #4]
 8009a60:	5037      	str	r7, [r6, r0]
 8009a62:	e7e1      	b.n	8009a28 <_malloc_r+0x64>
 8009a64:	0a63      	lsrs	r3, r4, #9
 8009a66:	d02a      	beq.n	8009abe <_malloc_r+0xfa>
 8009a68:	2b04      	cmp	r3, #4
 8009a6a:	d812      	bhi.n	8009a92 <_malloc_r+0xce>
 8009a6c:	09a3      	lsrs	r3, r4, #6
 8009a6e:	3338      	adds	r3, #56	; 0x38
 8009a70:	1c5a      	adds	r2, r3, #1
 8009a72:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8009a76:	f1a2 0008 	sub.w	r0, r2, #8
 8009a7a:	6856      	ldr	r6, [r2, #4]
 8009a7c:	4286      	cmp	r6, r0
 8009a7e:	d006      	beq.n	8009a8e <_malloc_r+0xca>
 8009a80:	6872      	ldr	r2, [r6, #4]
 8009a82:	f022 0203 	bic.w	r2, r2, #3
 8009a86:	1b11      	subs	r1, r2, r4
 8009a88:	290f      	cmp	r1, #15
 8009a8a:	dd1c      	ble.n	8009ac6 <_malloc_r+0x102>
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	3301      	adds	r3, #1
 8009a90:	e7d0      	b.n	8009a34 <_malloc_r+0x70>
 8009a92:	2b14      	cmp	r3, #20
 8009a94:	d801      	bhi.n	8009a9a <_malloc_r+0xd6>
 8009a96:	335b      	adds	r3, #91	; 0x5b
 8009a98:	e7ea      	b.n	8009a70 <_malloc_r+0xac>
 8009a9a:	2b54      	cmp	r3, #84	; 0x54
 8009a9c:	d802      	bhi.n	8009aa4 <_malloc_r+0xe0>
 8009a9e:	0b23      	lsrs	r3, r4, #12
 8009aa0:	336e      	adds	r3, #110	; 0x6e
 8009aa2:	e7e5      	b.n	8009a70 <_malloc_r+0xac>
 8009aa4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8009aa8:	d802      	bhi.n	8009ab0 <_malloc_r+0xec>
 8009aaa:	0be3      	lsrs	r3, r4, #15
 8009aac:	3377      	adds	r3, #119	; 0x77
 8009aae:	e7df      	b.n	8009a70 <_malloc_r+0xac>
 8009ab0:	f240 5254 	movw	r2, #1364	; 0x554
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d804      	bhi.n	8009ac2 <_malloc_r+0xfe>
 8009ab8:	0ca3      	lsrs	r3, r4, #18
 8009aba:	337c      	adds	r3, #124	; 0x7c
 8009abc:	e7d8      	b.n	8009a70 <_malloc_r+0xac>
 8009abe:	233f      	movs	r3, #63	; 0x3f
 8009ac0:	e7d6      	b.n	8009a70 <_malloc_r+0xac>
 8009ac2:	237e      	movs	r3, #126	; 0x7e
 8009ac4:	e7d4      	b.n	8009a70 <_malloc_r+0xac>
 8009ac6:	2900      	cmp	r1, #0
 8009ac8:	68f1      	ldr	r1, [r6, #12]
 8009aca:	db04      	blt.n	8009ad6 <_malloc_r+0x112>
 8009acc:	68b3      	ldr	r3, [r6, #8]
 8009ace:	60d9      	str	r1, [r3, #12]
 8009ad0:	608b      	str	r3, [r1, #8]
 8009ad2:	18b3      	adds	r3, r6, r2
 8009ad4:	e7a4      	b.n	8009a20 <_malloc_r+0x5c>
 8009ad6:	460e      	mov	r6, r1
 8009ad8:	e7d0      	b.n	8009a7c <_malloc_r+0xb8>
 8009ada:	2f00      	cmp	r7, #0
 8009adc:	616a      	str	r2, [r5, #20]
 8009ade:	612a      	str	r2, [r5, #16]
 8009ae0:	db05      	blt.n	8009aee <_malloc_r+0x12a>
 8009ae2:	4430      	add	r0, r6
 8009ae4:	6843      	ldr	r3, [r0, #4]
 8009ae6:	f043 0301 	orr.w	r3, r3, #1
 8009aea:	6043      	str	r3, [r0, #4]
 8009aec:	e79c      	b.n	8009a28 <_malloc_r+0x64>
 8009aee:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009af2:	d244      	bcs.n	8009b7e <_malloc_r+0x1ba>
 8009af4:	08c0      	lsrs	r0, r0, #3
 8009af6:	1087      	asrs	r7, r0, #2
 8009af8:	2201      	movs	r2, #1
 8009afa:	fa02 f707 	lsl.w	r7, r2, r7
 8009afe:	686a      	ldr	r2, [r5, #4]
 8009b00:	3001      	adds	r0, #1
 8009b02:	433a      	orrs	r2, r7
 8009b04:	606a      	str	r2, [r5, #4]
 8009b06:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8009b0a:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8009b0e:	60b7      	str	r7, [r6, #8]
 8009b10:	3a08      	subs	r2, #8
 8009b12:	60f2      	str	r2, [r6, #12]
 8009b14:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8009b18:	60fe      	str	r6, [r7, #12]
 8009b1a:	2001      	movs	r0, #1
 8009b1c:	109a      	asrs	r2, r3, #2
 8009b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8009b22:	6868      	ldr	r0, [r5, #4]
 8009b24:	4282      	cmp	r2, r0
 8009b26:	f200 80a1 	bhi.w	8009c6c <_malloc_r+0x2a8>
 8009b2a:	4202      	tst	r2, r0
 8009b2c:	d106      	bne.n	8009b3c <_malloc_r+0x178>
 8009b2e:	f023 0303 	bic.w	r3, r3, #3
 8009b32:	0052      	lsls	r2, r2, #1
 8009b34:	4202      	tst	r2, r0
 8009b36:	f103 0304 	add.w	r3, r3, #4
 8009b3a:	d0fa      	beq.n	8009b32 <_malloc_r+0x16e>
 8009b3c:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8009b40:	46e0      	mov	r8, ip
 8009b42:	469e      	mov	lr, r3
 8009b44:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8009b48:	4546      	cmp	r6, r8
 8009b4a:	d153      	bne.n	8009bf4 <_malloc_r+0x230>
 8009b4c:	f10e 0e01 	add.w	lr, lr, #1
 8009b50:	f01e 0f03 	tst.w	lr, #3
 8009b54:	f108 0808 	add.w	r8, r8, #8
 8009b58:	d1f4      	bne.n	8009b44 <_malloc_r+0x180>
 8009b5a:	0798      	lsls	r0, r3, #30
 8009b5c:	d179      	bne.n	8009c52 <_malloc_r+0x28e>
 8009b5e:	686b      	ldr	r3, [r5, #4]
 8009b60:	ea23 0302 	bic.w	r3, r3, r2
 8009b64:	606b      	str	r3, [r5, #4]
 8009b66:	6868      	ldr	r0, [r5, #4]
 8009b68:	0052      	lsls	r2, r2, #1
 8009b6a:	4282      	cmp	r2, r0
 8009b6c:	d87e      	bhi.n	8009c6c <_malloc_r+0x2a8>
 8009b6e:	2a00      	cmp	r2, #0
 8009b70:	d07c      	beq.n	8009c6c <_malloc_r+0x2a8>
 8009b72:	4673      	mov	r3, lr
 8009b74:	4202      	tst	r2, r0
 8009b76:	d1e1      	bne.n	8009b3c <_malloc_r+0x178>
 8009b78:	3304      	adds	r3, #4
 8009b7a:	0052      	lsls	r2, r2, #1
 8009b7c:	e7fa      	b.n	8009b74 <_malloc_r+0x1b0>
 8009b7e:	0a42      	lsrs	r2, r0, #9
 8009b80:	2a04      	cmp	r2, #4
 8009b82:	d815      	bhi.n	8009bb0 <_malloc_r+0x1ec>
 8009b84:	0982      	lsrs	r2, r0, #6
 8009b86:	3238      	adds	r2, #56	; 0x38
 8009b88:	1c57      	adds	r7, r2, #1
 8009b8a:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8009b8e:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8009b92:	45be      	cmp	lr, r7
 8009b94:	d126      	bne.n	8009be4 <_malloc_r+0x220>
 8009b96:	2001      	movs	r0, #1
 8009b98:	1092      	asrs	r2, r2, #2
 8009b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8009b9e:	6868      	ldr	r0, [r5, #4]
 8009ba0:	4310      	orrs	r0, r2
 8009ba2:	6068      	str	r0, [r5, #4]
 8009ba4:	f8c6 e00c 	str.w	lr, [r6, #12]
 8009ba8:	60b7      	str	r7, [r6, #8]
 8009baa:	f8ce 6008 	str.w	r6, [lr, #8]
 8009bae:	e7b3      	b.n	8009b18 <_malloc_r+0x154>
 8009bb0:	2a14      	cmp	r2, #20
 8009bb2:	d801      	bhi.n	8009bb8 <_malloc_r+0x1f4>
 8009bb4:	325b      	adds	r2, #91	; 0x5b
 8009bb6:	e7e7      	b.n	8009b88 <_malloc_r+0x1c4>
 8009bb8:	2a54      	cmp	r2, #84	; 0x54
 8009bba:	d802      	bhi.n	8009bc2 <_malloc_r+0x1fe>
 8009bbc:	0b02      	lsrs	r2, r0, #12
 8009bbe:	326e      	adds	r2, #110	; 0x6e
 8009bc0:	e7e2      	b.n	8009b88 <_malloc_r+0x1c4>
 8009bc2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8009bc6:	d802      	bhi.n	8009bce <_malloc_r+0x20a>
 8009bc8:	0bc2      	lsrs	r2, r0, #15
 8009bca:	3277      	adds	r2, #119	; 0x77
 8009bcc:	e7dc      	b.n	8009b88 <_malloc_r+0x1c4>
 8009bce:	f240 5754 	movw	r7, #1364	; 0x554
 8009bd2:	42ba      	cmp	r2, r7
 8009bd4:	bf9a      	itte	ls
 8009bd6:	0c82      	lsrls	r2, r0, #18
 8009bd8:	327c      	addls	r2, #124	; 0x7c
 8009bda:	227e      	movhi	r2, #126	; 0x7e
 8009bdc:	e7d4      	b.n	8009b88 <_malloc_r+0x1c4>
 8009bde:	68bf      	ldr	r7, [r7, #8]
 8009be0:	45be      	cmp	lr, r7
 8009be2:	d004      	beq.n	8009bee <_malloc_r+0x22a>
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	f022 0203 	bic.w	r2, r2, #3
 8009bea:	4290      	cmp	r0, r2
 8009bec:	d3f7      	bcc.n	8009bde <_malloc_r+0x21a>
 8009bee:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8009bf2:	e7d7      	b.n	8009ba4 <_malloc_r+0x1e0>
 8009bf4:	6870      	ldr	r0, [r6, #4]
 8009bf6:	68f7      	ldr	r7, [r6, #12]
 8009bf8:	f020 0003 	bic.w	r0, r0, #3
 8009bfc:	eba0 0a04 	sub.w	sl, r0, r4
 8009c00:	f1ba 0f0f 	cmp.w	sl, #15
 8009c04:	dd10      	ble.n	8009c28 <_malloc_r+0x264>
 8009c06:	68b2      	ldr	r2, [r6, #8]
 8009c08:	1933      	adds	r3, r6, r4
 8009c0a:	f044 0401 	orr.w	r4, r4, #1
 8009c0e:	6074      	str	r4, [r6, #4]
 8009c10:	60d7      	str	r7, [r2, #12]
 8009c12:	60ba      	str	r2, [r7, #8]
 8009c14:	f04a 0201 	orr.w	r2, sl, #1
 8009c18:	616b      	str	r3, [r5, #20]
 8009c1a:	612b      	str	r3, [r5, #16]
 8009c1c:	60d9      	str	r1, [r3, #12]
 8009c1e:	6099      	str	r1, [r3, #8]
 8009c20:	605a      	str	r2, [r3, #4]
 8009c22:	f846 a000 	str.w	sl, [r6, r0]
 8009c26:	e6ff      	b.n	8009a28 <_malloc_r+0x64>
 8009c28:	f1ba 0f00 	cmp.w	sl, #0
 8009c2c:	db0f      	blt.n	8009c4e <_malloc_r+0x28a>
 8009c2e:	4430      	add	r0, r6
 8009c30:	6843      	ldr	r3, [r0, #4]
 8009c32:	f043 0301 	orr.w	r3, r3, #1
 8009c36:	6043      	str	r3, [r0, #4]
 8009c38:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8009c3c:	4648      	mov	r0, r9
 8009c3e:	60df      	str	r7, [r3, #12]
 8009c40:	60bb      	str	r3, [r7, #8]
 8009c42:	f000 fb43 	bl	800a2cc <__malloc_unlock>
 8009c46:	4630      	mov	r0, r6
 8009c48:	b003      	add	sp, #12
 8009c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c4e:	463e      	mov	r6, r7
 8009c50:	e77a      	b.n	8009b48 <_malloc_r+0x184>
 8009c52:	f85c 0908 	ldr.w	r0, [ip], #-8
 8009c56:	4584      	cmp	ip, r0
 8009c58:	f103 33ff 	add.w	r3, r3, #4294967295
 8009c5c:	f43f af7d 	beq.w	8009b5a <_malloc_r+0x196>
 8009c60:	e781      	b.n	8009b66 <_malloc_r+0x1a2>
 8009c62:	bf00      	nop
 8009c64:	20000104 	.word	0x20000104
 8009c68:	2000010c 	.word	0x2000010c
 8009c6c:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8009c70:	f8db 6004 	ldr.w	r6, [fp, #4]
 8009c74:	f026 0603 	bic.w	r6, r6, #3
 8009c78:	42b4      	cmp	r4, r6
 8009c7a:	d803      	bhi.n	8009c84 <_malloc_r+0x2c0>
 8009c7c:	1b33      	subs	r3, r6, r4
 8009c7e:	2b0f      	cmp	r3, #15
 8009c80:	f300 8096 	bgt.w	8009db0 <_malloc_r+0x3ec>
 8009c84:	4a4f      	ldr	r2, [pc, #316]	; (8009dc4 <_malloc_r+0x400>)
 8009c86:	6817      	ldr	r7, [r2, #0]
 8009c88:	4a4f      	ldr	r2, [pc, #316]	; (8009dc8 <_malloc_r+0x404>)
 8009c8a:	6811      	ldr	r1, [r2, #0]
 8009c8c:	3710      	adds	r7, #16
 8009c8e:	3101      	adds	r1, #1
 8009c90:	eb0b 0306 	add.w	r3, fp, r6
 8009c94:	4427      	add	r7, r4
 8009c96:	d005      	beq.n	8009ca4 <_malloc_r+0x2e0>
 8009c98:	494c      	ldr	r1, [pc, #304]	; (8009dcc <_malloc_r+0x408>)
 8009c9a:	3901      	subs	r1, #1
 8009c9c:	440f      	add	r7, r1
 8009c9e:	3101      	adds	r1, #1
 8009ca0:	4249      	negs	r1, r1
 8009ca2:	400f      	ands	r7, r1
 8009ca4:	4639      	mov	r1, r7
 8009ca6:	4648      	mov	r0, r9
 8009ca8:	9201      	str	r2, [sp, #4]
 8009caa:	9300      	str	r3, [sp, #0]
 8009cac:	f000 fb94 	bl	800a3d8 <_sbrk_r>
 8009cb0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009cb4:	4680      	mov	r8, r0
 8009cb6:	d056      	beq.n	8009d66 <_malloc_r+0x3a2>
 8009cb8:	9b00      	ldr	r3, [sp, #0]
 8009cba:	9a01      	ldr	r2, [sp, #4]
 8009cbc:	4283      	cmp	r3, r0
 8009cbe:	d901      	bls.n	8009cc4 <_malloc_r+0x300>
 8009cc0:	45ab      	cmp	fp, r5
 8009cc2:	d150      	bne.n	8009d66 <_malloc_r+0x3a2>
 8009cc4:	4842      	ldr	r0, [pc, #264]	; (8009dd0 <_malloc_r+0x40c>)
 8009cc6:	6801      	ldr	r1, [r0, #0]
 8009cc8:	4543      	cmp	r3, r8
 8009cca:	eb07 0e01 	add.w	lr, r7, r1
 8009cce:	f8c0 e000 	str.w	lr, [r0]
 8009cd2:	4940      	ldr	r1, [pc, #256]	; (8009dd4 <_malloc_r+0x410>)
 8009cd4:	4682      	mov	sl, r0
 8009cd6:	d113      	bne.n	8009d00 <_malloc_r+0x33c>
 8009cd8:	420b      	tst	r3, r1
 8009cda:	d111      	bne.n	8009d00 <_malloc_r+0x33c>
 8009cdc:	68ab      	ldr	r3, [r5, #8]
 8009cde:	443e      	add	r6, r7
 8009ce0:	f046 0601 	orr.w	r6, r6, #1
 8009ce4:	605e      	str	r6, [r3, #4]
 8009ce6:	4a3c      	ldr	r2, [pc, #240]	; (8009dd8 <_malloc_r+0x414>)
 8009ce8:	f8da 3000 	ldr.w	r3, [sl]
 8009cec:	6811      	ldr	r1, [r2, #0]
 8009cee:	428b      	cmp	r3, r1
 8009cf0:	bf88      	it	hi
 8009cf2:	6013      	strhi	r3, [r2, #0]
 8009cf4:	4a39      	ldr	r2, [pc, #228]	; (8009ddc <_malloc_r+0x418>)
 8009cf6:	6811      	ldr	r1, [r2, #0]
 8009cf8:	428b      	cmp	r3, r1
 8009cfa:	bf88      	it	hi
 8009cfc:	6013      	strhi	r3, [r2, #0]
 8009cfe:	e032      	b.n	8009d66 <_malloc_r+0x3a2>
 8009d00:	6810      	ldr	r0, [r2, #0]
 8009d02:	3001      	adds	r0, #1
 8009d04:	bf1b      	ittet	ne
 8009d06:	eba8 0303 	subne.w	r3, r8, r3
 8009d0a:	4473      	addne	r3, lr
 8009d0c:	f8c2 8000 	streq.w	r8, [r2]
 8009d10:	f8ca 3000 	strne.w	r3, [sl]
 8009d14:	f018 0007 	ands.w	r0, r8, #7
 8009d18:	bf1c      	itt	ne
 8009d1a:	f1c0 0008 	rsbne	r0, r0, #8
 8009d1e:	4480      	addne	r8, r0
 8009d20:	4b2a      	ldr	r3, [pc, #168]	; (8009dcc <_malloc_r+0x408>)
 8009d22:	4447      	add	r7, r8
 8009d24:	4418      	add	r0, r3
 8009d26:	400f      	ands	r7, r1
 8009d28:	1bc7      	subs	r7, r0, r7
 8009d2a:	4639      	mov	r1, r7
 8009d2c:	4648      	mov	r0, r9
 8009d2e:	f000 fb53 	bl	800a3d8 <_sbrk_r>
 8009d32:	1c43      	adds	r3, r0, #1
 8009d34:	bf08      	it	eq
 8009d36:	4640      	moveq	r0, r8
 8009d38:	f8da 3000 	ldr.w	r3, [sl]
 8009d3c:	f8c5 8008 	str.w	r8, [r5, #8]
 8009d40:	bf08      	it	eq
 8009d42:	2700      	moveq	r7, #0
 8009d44:	eba0 0008 	sub.w	r0, r0, r8
 8009d48:	443b      	add	r3, r7
 8009d4a:	4407      	add	r7, r0
 8009d4c:	f047 0701 	orr.w	r7, r7, #1
 8009d50:	45ab      	cmp	fp, r5
 8009d52:	f8ca 3000 	str.w	r3, [sl]
 8009d56:	f8c8 7004 	str.w	r7, [r8, #4]
 8009d5a:	d0c4      	beq.n	8009ce6 <_malloc_r+0x322>
 8009d5c:	2e0f      	cmp	r6, #15
 8009d5e:	d810      	bhi.n	8009d82 <_malloc_r+0x3be>
 8009d60:	2301      	movs	r3, #1
 8009d62:	f8c8 3004 	str.w	r3, [r8, #4]
 8009d66:	68ab      	ldr	r3, [r5, #8]
 8009d68:	685a      	ldr	r2, [r3, #4]
 8009d6a:	f022 0203 	bic.w	r2, r2, #3
 8009d6e:	4294      	cmp	r4, r2
 8009d70:	eba2 0304 	sub.w	r3, r2, r4
 8009d74:	d801      	bhi.n	8009d7a <_malloc_r+0x3b6>
 8009d76:	2b0f      	cmp	r3, #15
 8009d78:	dc1a      	bgt.n	8009db0 <_malloc_r+0x3ec>
 8009d7a:	4648      	mov	r0, r9
 8009d7c:	f000 faa6 	bl	800a2cc <__malloc_unlock>
 8009d80:	e62d      	b.n	80099de <_malloc_r+0x1a>
 8009d82:	f8db 3004 	ldr.w	r3, [fp, #4]
 8009d86:	3e0c      	subs	r6, #12
 8009d88:	f026 0607 	bic.w	r6, r6, #7
 8009d8c:	f003 0301 	and.w	r3, r3, #1
 8009d90:	4333      	orrs	r3, r6
 8009d92:	f8cb 3004 	str.w	r3, [fp, #4]
 8009d96:	eb0b 0306 	add.w	r3, fp, r6
 8009d9a:	2205      	movs	r2, #5
 8009d9c:	2e0f      	cmp	r6, #15
 8009d9e:	605a      	str	r2, [r3, #4]
 8009da0:	609a      	str	r2, [r3, #8]
 8009da2:	d9a0      	bls.n	8009ce6 <_malloc_r+0x322>
 8009da4:	f10b 0108 	add.w	r1, fp, #8
 8009da8:	4648      	mov	r0, r9
 8009daa:	f003 fe2b 	bl	800da04 <_free_r>
 8009dae:	e79a      	b.n	8009ce6 <_malloc_r+0x322>
 8009db0:	68ae      	ldr	r6, [r5, #8]
 8009db2:	f044 0201 	orr.w	r2, r4, #1
 8009db6:	4434      	add	r4, r6
 8009db8:	f043 0301 	orr.w	r3, r3, #1
 8009dbc:	6072      	str	r2, [r6, #4]
 8009dbe:	60ac      	str	r4, [r5, #8]
 8009dc0:	6063      	str	r3, [r4, #4]
 8009dc2:	e631      	b.n	8009a28 <_malloc_r+0x64>
 8009dc4:	20000720 	.word	0x20000720
 8009dc8:	2000050c 	.word	0x2000050c
 8009dcc:	00000080 	.word	0x00000080
 8009dd0:	200006f0 	.word	0x200006f0
 8009dd4:	0000007f 	.word	0x0000007f
 8009dd8:	20000718 	.word	0x20000718
 8009ddc:	2000071c 	.word	0x2000071c

08009de0 <memcpy>:
 8009de0:	b510      	push	{r4, lr}
 8009de2:	1e43      	subs	r3, r0, #1
 8009de4:	440a      	add	r2, r1
 8009de6:	4291      	cmp	r1, r2
 8009de8:	d100      	bne.n	8009dec <memcpy+0xc>
 8009dea:	bd10      	pop	{r4, pc}
 8009dec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009df0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009df4:	e7f7      	b.n	8009de6 <memcpy+0x6>

08009df6 <memset>:
 8009df6:	4402      	add	r2, r0
 8009df8:	4603      	mov	r3, r0
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d100      	bne.n	8009e00 <memset+0xa>
 8009dfe:	4770      	bx	lr
 8009e00:	f803 1b01 	strb.w	r1, [r3], #1
 8009e04:	e7f9      	b.n	8009dfa <memset+0x4>
	...

08009e08 <validate_structure>:
 8009e08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e0a:	6801      	ldr	r1, [r0, #0]
 8009e0c:	293b      	cmp	r1, #59	; 0x3b
 8009e0e:	4604      	mov	r4, r0
 8009e10:	d911      	bls.n	8009e36 <validate_structure+0x2e>
 8009e12:	223c      	movs	r2, #60	; 0x3c
 8009e14:	4668      	mov	r0, sp
 8009e16:	f002 fd85 	bl	800c924 <div>
 8009e1a:	9a01      	ldr	r2, [sp, #4]
 8009e1c:	6863      	ldr	r3, [r4, #4]
 8009e1e:	9900      	ldr	r1, [sp, #0]
 8009e20:	2a00      	cmp	r2, #0
 8009e22:	440b      	add	r3, r1
 8009e24:	6063      	str	r3, [r4, #4]
 8009e26:	bfbb      	ittet	lt
 8009e28:	323c      	addlt	r2, #60	; 0x3c
 8009e2a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009e2e:	6022      	strge	r2, [r4, #0]
 8009e30:	6022      	strlt	r2, [r4, #0]
 8009e32:	bfb8      	it	lt
 8009e34:	6063      	strlt	r3, [r4, #4]
 8009e36:	6861      	ldr	r1, [r4, #4]
 8009e38:	293b      	cmp	r1, #59	; 0x3b
 8009e3a:	d911      	bls.n	8009e60 <validate_structure+0x58>
 8009e3c:	223c      	movs	r2, #60	; 0x3c
 8009e3e:	4668      	mov	r0, sp
 8009e40:	f002 fd70 	bl	800c924 <div>
 8009e44:	9a01      	ldr	r2, [sp, #4]
 8009e46:	68a3      	ldr	r3, [r4, #8]
 8009e48:	9900      	ldr	r1, [sp, #0]
 8009e4a:	2a00      	cmp	r2, #0
 8009e4c:	440b      	add	r3, r1
 8009e4e:	60a3      	str	r3, [r4, #8]
 8009e50:	bfbb      	ittet	lt
 8009e52:	323c      	addlt	r2, #60	; 0x3c
 8009e54:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009e58:	6062      	strge	r2, [r4, #4]
 8009e5a:	6062      	strlt	r2, [r4, #4]
 8009e5c:	bfb8      	it	lt
 8009e5e:	60a3      	strlt	r3, [r4, #8]
 8009e60:	68a1      	ldr	r1, [r4, #8]
 8009e62:	2917      	cmp	r1, #23
 8009e64:	d911      	bls.n	8009e8a <validate_structure+0x82>
 8009e66:	2218      	movs	r2, #24
 8009e68:	4668      	mov	r0, sp
 8009e6a:	f002 fd5b 	bl	800c924 <div>
 8009e6e:	9a01      	ldr	r2, [sp, #4]
 8009e70:	68e3      	ldr	r3, [r4, #12]
 8009e72:	9900      	ldr	r1, [sp, #0]
 8009e74:	2a00      	cmp	r2, #0
 8009e76:	440b      	add	r3, r1
 8009e78:	60e3      	str	r3, [r4, #12]
 8009e7a:	bfbb      	ittet	lt
 8009e7c:	3218      	addlt	r2, #24
 8009e7e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009e82:	60a2      	strge	r2, [r4, #8]
 8009e84:	60a2      	strlt	r2, [r4, #8]
 8009e86:	bfb8      	it	lt
 8009e88:	60e3      	strlt	r3, [r4, #12]
 8009e8a:	6921      	ldr	r1, [r4, #16]
 8009e8c:	290b      	cmp	r1, #11
 8009e8e:	d911      	bls.n	8009eb4 <validate_structure+0xac>
 8009e90:	220c      	movs	r2, #12
 8009e92:	4668      	mov	r0, sp
 8009e94:	f002 fd46 	bl	800c924 <div>
 8009e98:	9a01      	ldr	r2, [sp, #4]
 8009e9a:	6963      	ldr	r3, [r4, #20]
 8009e9c:	9900      	ldr	r1, [sp, #0]
 8009e9e:	2a00      	cmp	r2, #0
 8009ea0:	440b      	add	r3, r1
 8009ea2:	6163      	str	r3, [r4, #20]
 8009ea4:	bfbb      	ittet	lt
 8009ea6:	320c      	addlt	r2, #12
 8009ea8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009eac:	6122      	strge	r2, [r4, #16]
 8009eae:	6122      	strlt	r2, [r4, #16]
 8009eb0:	bfb8      	it	lt
 8009eb2:	6163      	strlt	r3, [r4, #20]
 8009eb4:	6963      	ldr	r3, [r4, #20]
 8009eb6:	0799      	lsls	r1, r3, #30
 8009eb8:	d143      	bne.n	8009f42 <validate_structure+0x13a>
 8009eba:	2164      	movs	r1, #100	; 0x64
 8009ebc:	fb93 f2f1 	sdiv	r2, r3, r1
 8009ec0:	fb01 3212 	mls	r2, r1, r2, r3
 8009ec4:	2a00      	cmp	r2, #0
 8009ec6:	d13e      	bne.n	8009f46 <validate_structure+0x13e>
 8009ec8:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8009ecc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009ed0:	fb93 f2f1 	sdiv	r2, r3, r1
 8009ed4:	fb01 3312 	mls	r3, r1, r2, r3
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	bf14      	ite	ne
 8009edc:	231c      	movne	r3, #28
 8009ede:	231d      	moveq	r3, #29
 8009ee0:	68e2      	ldr	r2, [r4, #12]
 8009ee2:	2a00      	cmp	r2, #0
 8009ee4:	dd31      	ble.n	8009f4a <validate_structure+0x142>
 8009ee6:	4f37      	ldr	r7, [pc, #220]	; (8009fc4 <validate_structure+0x1bc>)
 8009ee8:	2602      	movs	r6, #2
 8009eea:	f04f 0e00 	mov.w	lr, #0
 8009eee:	2064      	movs	r0, #100	; 0x64
 8009ef0:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8009ef4:	6921      	ldr	r1, [r4, #16]
 8009ef6:	68e2      	ldr	r2, [r4, #12]
 8009ef8:	2901      	cmp	r1, #1
 8009efa:	d05d      	beq.n	8009fb8 <validate_structure+0x1b0>
 8009efc:	f857 c021 	ldr.w	ip, [r7, r1, lsl #2]
 8009f00:	4562      	cmp	r2, ip
 8009f02:	dd2c      	ble.n	8009f5e <validate_structure+0x156>
 8009f04:	3101      	adds	r1, #1
 8009f06:	eba2 020c 	sub.w	r2, r2, ip
 8009f0a:	290c      	cmp	r1, #12
 8009f0c:	60e2      	str	r2, [r4, #12]
 8009f0e:	6121      	str	r1, [r4, #16]
 8009f10:	d1f0      	bne.n	8009ef4 <validate_structure+0xec>
 8009f12:	6963      	ldr	r3, [r4, #20]
 8009f14:	f8c4 e010 	str.w	lr, [r4, #16]
 8009f18:	1c5a      	adds	r2, r3, #1
 8009f1a:	0791      	lsls	r1, r2, #30
 8009f1c:	6162      	str	r2, [r4, #20]
 8009f1e:	d147      	bne.n	8009fb0 <validate_structure+0x1a8>
 8009f20:	fb92 f1f0 	sdiv	r1, r2, r0
 8009f24:	fb00 2211 	mls	r2, r0, r1, r2
 8009f28:	2a00      	cmp	r2, #0
 8009f2a:	d143      	bne.n	8009fb4 <validate_structure+0x1ac>
 8009f2c:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8009f30:	fb93 f2f5 	sdiv	r2, r3, r5
 8009f34:	fb05 3312 	mls	r3, r5, r2, r3
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	bf14      	ite	ne
 8009f3c:	231c      	movne	r3, #28
 8009f3e:	231d      	moveq	r3, #29
 8009f40:	e7d8      	b.n	8009ef4 <validate_structure+0xec>
 8009f42:	231c      	movs	r3, #28
 8009f44:	e7cc      	b.n	8009ee0 <validate_structure+0xd8>
 8009f46:	231d      	movs	r3, #29
 8009f48:	e7ca      	b.n	8009ee0 <validate_structure+0xd8>
 8009f4a:	4f1e      	ldr	r7, [pc, #120]	; (8009fc4 <validate_structure+0x1bc>)
 8009f4c:	260b      	movs	r6, #11
 8009f4e:	2064      	movs	r0, #100	; 0x64
 8009f50:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8009f54:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8009f58:	f1be 0f00 	cmp.w	lr, #0
 8009f5c:	dd01      	ble.n	8009f62 <validate_structure+0x15a>
 8009f5e:	b003      	add	sp, #12
 8009f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f62:	6921      	ldr	r1, [r4, #16]
 8009f64:	3901      	subs	r1, #1
 8009f66:	6121      	str	r1, [r4, #16]
 8009f68:	3101      	adds	r1, #1
 8009f6a:	d114      	bne.n	8009f96 <validate_structure+0x18e>
 8009f6c:	6963      	ldr	r3, [r4, #20]
 8009f6e:	6126      	str	r6, [r4, #16]
 8009f70:	1e59      	subs	r1, r3, #1
 8009f72:	078a      	lsls	r2, r1, #30
 8009f74:	6161      	str	r1, [r4, #20]
 8009f76:	d117      	bne.n	8009fa8 <validate_structure+0x1a0>
 8009f78:	fb91 f2f0 	sdiv	r2, r1, r0
 8009f7c:	fb00 1112 	mls	r1, r0, r2, r1
 8009f80:	b9a1      	cbnz	r1, 8009fac <validate_structure+0x1a4>
 8009f82:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8009f86:	fb93 f2f5 	sdiv	r2, r3, r5
 8009f8a:	fb05 3312 	mls	r3, r5, r2, r3
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	bf14      	ite	ne
 8009f92:	231c      	movne	r3, #28
 8009f94:	231d      	moveq	r3, #29
 8009f96:	6922      	ldr	r2, [r4, #16]
 8009f98:	2a01      	cmp	r2, #1
 8009f9a:	bf14      	ite	ne
 8009f9c:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8009fa0:	461a      	moveq	r2, r3
 8009fa2:	4472      	add	r2, lr
 8009fa4:	60e2      	str	r2, [r4, #12]
 8009fa6:	e7d5      	b.n	8009f54 <validate_structure+0x14c>
 8009fa8:	231c      	movs	r3, #28
 8009faa:	e7f4      	b.n	8009f96 <validate_structure+0x18e>
 8009fac:	231d      	movs	r3, #29
 8009fae:	e7f2      	b.n	8009f96 <validate_structure+0x18e>
 8009fb0:	231c      	movs	r3, #28
 8009fb2:	e79f      	b.n	8009ef4 <validate_structure+0xec>
 8009fb4:	231d      	movs	r3, #29
 8009fb6:	e79d      	b.n	8009ef4 <validate_structure+0xec>
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	dad0      	bge.n	8009f5e <validate_structure+0x156>
 8009fbc:	1ad2      	subs	r2, r2, r3
 8009fbe:	60e2      	str	r2, [r4, #12]
 8009fc0:	6126      	str	r6, [r4, #16]
 8009fc2:	e797      	b.n	8009ef4 <validate_structure+0xec>
 8009fc4:	08010c50 	.word	0x08010c50

08009fc8 <mktime>:
 8009fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fcc:	4681      	mov	r9, r0
 8009fce:	f004 fab9 	bl	800e544 <__gettzinfo>
 8009fd2:	4680      	mov	r8, r0
 8009fd4:	4648      	mov	r0, r9
 8009fd6:	f7ff ff17 	bl	8009e08 <validate_structure>
 8009fda:	e899 0081 	ldmia.w	r9, {r0, r7}
 8009fde:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009fe2:	4ab4      	ldr	r2, [pc, #720]	; (800a2b4 <mktime+0x2ec>)
 8009fe4:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8009fe8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009fec:	253c      	movs	r5, #60	; 0x3c
 8009fee:	fb05 0707 	mla	r7, r5, r7, r0
 8009ff2:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8009ff6:	f44f 6561 	mov.w	r5, #3600	; 0xe10
 8009ffa:	3c01      	subs	r4, #1
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	fb05 7000 	mla	r0, r5, r0, r7
 800a002:	4414      	add	r4, r2
 800a004:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800a008:	dd11      	ble.n	800a02e <mktime+0x66>
 800a00a:	0799      	lsls	r1, r3, #30
 800a00c:	d10f      	bne.n	800a02e <mktime+0x66>
 800a00e:	2164      	movs	r1, #100	; 0x64
 800a010:	fb93 f2f1 	sdiv	r2, r3, r1
 800a014:	fb01 3212 	mls	r2, r1, r2, r3
 800a018:	b942      	cbnz	r2, 800a02c <mktime+0x64>
 800a01a:	f203 756c 	addw	r5, r3, #1900	; 0x76c
 800a01e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800a022:	fb95 f2f1 	sdiv	r2, r5, r1
 800a026:	fb01 5212 	mls	r2, r1, r2, r5
 800a02a:	b902      	cbnz	r2, 800a02e <mktime+0x66>
 800a02c:	3401      	adds	r4, #1
 800a02e:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
 800a032:	3210      	adds	r2, #16
 800a034:	f644 6120 	movw	r1, #20000	; 0x4e20
 800a038:	428a      	cmp	r2, r1
 800a03a:	f8c9 401c 	str.w	r4, [r9, #28]
 800a03e:	f200 812d 	bhi.w	800a29c <mktime+0x2d4>
 800a042:	2b46      	cmp	r3, #70	; 0x46
 800a044:	dd70      	ble.n	800a128 <mktime+0x160>
 800a046:	2546      	movs	r5, #70	; 0x46
 800a048:	f240 176d 	movw	r7, #365	; 0x16d
 800a04c:	2164      	movs	r1, #100	; 0x64
 800a04e:	f44f 76c8 	mov.w	r6, #400	; 0x190
 800a052:	07aa      	lsls	r2, r5, #30
 800a054:	d162      	bne.n	800a11c <mktime+0x154>
 800a056:	fb95 f2f1 	sdiv	r2, r5, r1
 800a05a:	fb01 5212 	mls	r2, r1, r2, r5
 800a05e:	2a00      	cmp	r2, #0
 800a060:	d15f      	bne.n	800a122 <mktime+0x15a>
 800a062:	f205 7e6c 	addw	lr, r5, #1900	; 0x76c
 800a066:	fb9e f2f6 	sdiv	r2, lr, r6
 800a06a:	fb06 e212 	mls	r2, r6, r2, lr
 800a06e:	2a00      	cmp	r2, #0
 800a070:	bf14      	ite	ne
 800a072:	463a      	movne	r2, r7
 800a074:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800a078:	3501      	adds	r5, #1
 800a07a:	42ab      	cmp	r3, r5
 800a07c:	4414      	add	r4, r2
 800a07e:	d1e8      	bne.n	800a052 <mktime+0x8a>
 800a080:	4f8d      	ldr	r7, [pc, #564]	; (800a2b8 <mktime+0x2f0>)
 800a082:	fb07 0704 	mla	r7, r7, r4, r0
 800a086:	f001 f9d3 	bl	800b430 <__tz_lock>
 800a08a:	f001 f9dd 	bl	800b448 <_tzset_unlocked>
 800a08e:	4b8b      	ldr	r3, [pc, #556]	; (800a2bc <mktime+0x2f4>)
 800a090:	681e      	ldr	r6, [r3, #0]
 800a092:	2e00      	cmp	r6, #0
 800a094:	f000 810a 	beq.w	800a2ac <mktime+0x2e4>
 800a098:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800a09c:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	bfa8      	it	ge
 800a0a4:	2301      	movge	r3, #1
 800a0a6:	469a      	mov	sl, r3
 800a0a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a0ac:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800a0b0:	4298      	cmp	r0, r3
 800a0b2:	d17c      	bne.n	800a1ae <mktime+0x1e6>
 800a0b4:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 800a0b8:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800a0bc:	f8d8 003c 	ldr.w	r0, [r8, #60]	; 0x3c
 800a0c0:	f8d8 101c 	ldr.w	r1, [r8, #28]
 800a0c4:	1ad6      	subs	r6, r2, r3
 800a0c6:	42b7      	cmp	r7, r6
 800a0c8:	eba1 0100 	sub.w	r1, r1, r0
 800a0cc:	da76      	bge.n	800a1bc <mktime+0x1f4>
 800a0ce:	f8d8 2000 	ldr.w	r2, [r8]
 800a0d2:	2a00      	cmp	r2, #0
 800a0d4:	d076      	beq.n	800a1c4 <mktime+0x1fc>
 800a0d6:	428f      	cmp	r7, r1
 800a0d8:	f2c0 80e3 	blt.w	800a2a2 <mktime+0x2da>
 800a0dc:	42b7      	cmp	r7, r6
 800a0de:	bfac      	ite	ge
 800a0e0:	2600      	movge	r6, #0
 800a0e2:	2601      	movlt	r6, #1
 800a0e4:	f1ba 0f00 	cmp.w	sl, #0
 800a0e8:	da72      	bge.n	800a1d0 <mktime+0x208>
 800a0ea:	2e01      	cmp	r6, #1
 800a0ec:	f040 80de 	bne.w	800a2ac <mktime+0x2e4>
 800a0f0:	f8d8 503c 	ldr.w	r5, [r8, #60]	; 0x3c
 800a0f4:	2601      	movs	r6, #1
 800a0f6:	443d      	add	r5, r7
 800a0f8:	f001 f9a0 	bl	800b43c <__tz_unlock>
 800a0fc:	3404      	adds	r4, #4
 800a0fe:	2307      	movs	r3, #7
 800a100:	fb94 f3f3 	sdiv	r3, r4, r3
 800a104:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800a108:	1ae4      	subs	r4, r4, r3
 800a10a:	bf48      	it	mi
 800a10c:	3407      	addmi	r4, #7
 800a10e:	f8c9 6020 	str.w	r6, [r9, #32]
 800a112:	f8c9 4018 	str.w	r4, [r9, #24]
 800a116:	4628      	mov	r0, r5
 800a118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a11c:	f240 126d 	movw	r2, #365	; 0x16d
 800a120:	e7aa      	b.n	800a078 <mktime+0xb0>
 800a122:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800a126:	e7a7      	b.n	800a078 <mktime+0xb0>
 800a128:	d01e      	beq.n	800a168 <mktime+0x1a0>
 800a12a:	2245      	movs	r2, #69	; 0x45
 800a12c:	f240 176d 	movw	r7, #365	; 0x16d
 800a130:	2564      	movs	r5, #100	; 0x64
 800a132:	f44f 76c8 	mov.w	r6, #400	; 0x190
 800a136:	429a      	cmp	r2, r3
 800a138:	dc18      	bgt.n	800a16c <mktime+0x1a4>
 800a13a:	079d      	lsls	r5, r3, #30
 800a13c:	d131      	bne.n	800a1a2 <mktime+0x1da>
 800a13e:	2164      	movs	r1, #100	; 0x64
 800a140:	fb93 f2f1 	sdiv	r2, r3, r1
 800a144:	fb01 3212 	mls	r2, r1, r2, r3
 800a148:	bb72      	cbnz	r2, 800a1a8 <mktime+0x1e0>
 800a14a:	f203 756c 	addw	r5, r3, #1900	; 0x76c
 800a14e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800a152:	fb95 f2f1 	sdiv	r2, r5, r1
 800a156:	fb01 5212 	mls	r2, r1, r2, r5
 800a15a:	2a00      	cmp	r2, #0
 800a15c:	f240 126d 	movw	r2, #365	; 0x16d
 800a160:	bf08      	it	eq
 800a162:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800a166:	1aa4      	subs	r4, r4, r2
 800a168:	461d      	mov	r5, r3
 800a16a:	e789      	b.n	800a080 <mktime+0xb8>
 800a16c:	0791      	lsls	r1, r2, #30
 800a16e:	d112      	bne.n	800a196 <mktime+0x1ce>
 800a170:	fb92 f1f5 	sdiv	r1, r2, r5
 800a174:	fb05 2111 	mls	r1, r5, r1, r2
 800a178:	b981      	cbnz	r1, 800a19c <mktime+0x1d4>
 800a17a:	f202 7e6c 	addw	lr, r2, #1900	; 0x76c
 800a17e:	fb9e f1f6 	sdiv	r1, lr, r6
 800a182:	fb06 e111 	mls	r1, r6, r1, lr
 800a186:	2900      	cmp	r1, #0
 800a188:	bf14      	ite	ne
 800a18a:	4639      	movne	r1, r7
 800a18c:	f44f 71b7 	moveq.w	r1, #366	; 0x16e
 800a190:	1a64      	subs	r4, r4, r1
 800a192:	3a01      	subs	r2, #1
 800a194:	e7cf      	b.n	800a136 <mktime+0x16e>
 800a196:	f240 116d 	movw	r1, #365	; 0x16d
 800a19a:	e7f9      	b.n	800a190 <mktime+0x1c8>
 800a19c:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 800a1a0:	e7f6      	b.n	800a190 <mktime+0x1c8>
 800a1a2:	f240 126d 	movw	r2, #365	; 0x16d
 800a1a6:	e7de      	b.n	800a166 <mktime+0x19e>
 800a1a8:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800a1ac:	e7db      	b.n	800a166 <mktime+0x19e>
 800a1ae:	f001 f897 	bl	800b2e0 <__tzcalc_limits>
 800a1b2:	2800      	cmp	r0, #0
 800a1b4:	f47f af7e 	bne.w	800a0b4 <mktime+0xec>
 800a1b8:	4656      	mov	r6, sl
 800a1ba:	e796      	b.n	800a0ea <mktime+0x122>
 800a1bc:	1a12      	subs	r2, r2, r0
 800a1be:	4297      	cmp	r7, r2
 800a1c0:	dbfa      	blt.n	800a1b8 <mktime+0x1f0>
 800a1c2:	e784      	b.n	800a0ce <mktime+0x106>
 800a1c4:	428f      	cmp	r7, r1
 800a1c6:	db89      	blt.n	800a0dc <mktime+0x114>
 800a1c8:	f1ba 0f00 	cmp.w	sl, #0
 800a1cc:	db90      	blt.n	800a0f0 <mktime+0x128>
 800a1ce:	2601      	movs	r6, #1
 800a1d0:	ea8a 0a06 	eor.w	sl, sl, r6
 800a1d4:	f1ba 0f01 	cmp.w	sl, #1
 800a1d8:	d187      	bne.n	800a0ea <mktime+0x122>
 800a1da:	1a1b      	subs	r3, r3, r0
 800a1dc:	b906      	cbnz	r6, 800a1e0 <mktime+0x218>
 800a1de:	425b      	negs	r3, r3
 800a1e0:	f8d9 2000 	ldr.w	r2, [r9]
 800a1e4:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 800a1e8:	441a      	add	r2, r3
 800a1ea:	f8c9 2000 	str.w	r2, [r9]
 800a1ee:	4648      	mov	r0, r9
 800a1f0:	441f      	add	r7, r3
 800a1f2:	f7ff fe09 	bl	8009e08 <validate_structure>
 800a1f6:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800a1fa:	ebb3 030a 	subs.w	r3, r3, sl
 800a1fe:	f43f af74 	beq.w	800a0ea <mktime+0x122>
 800a202:	2b01      	cmp	r3, #1
 800a204:	dc21      	bgt.n	800a24a <mktime+0x282>
 800a206:	1c98      	adds	r0, r3, #2
 800a208:	bfd8      	it	le
 800a20a:	2301      	movle	r3, #1
 800a20c:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800a210:	441c      	add	r4, r3
 800a212:	189b      	adds	r3, r3, r2
 800a214:	d522      	bpl.n	800a25c <mktime+0x294>
 800a216:	1e6a      	subs	r2, r5, #1
 800a218:	0791      	lsls	r1, r2, #30
 800a21a:	d119      	bne.n	800a250 <mktime+0x288>
 800a21c:	2164      	movs	r1, #100	; 0x64
 800a21e:	fb92 f3f1 	sdiv	r3, r2, r1
 800a222:	fb01 2313 	mls	r3, r1, r3, r2
 800a226:	b9b3      	cbnz	r3, 800a256 <mktime+0x28e>
 800a228:	f205 756b 	addw	r5, r5, #1899	; 0x76b
 800a22c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a230:	fb95 f3f2 	sdiv	r3, r5, r2
 800a234:	fb02 5513 	mls	r5, r2, r3, r5
 800a238:	2d00      	cmp	r5, #0
 800a23a:	f240 136d 	movw	r3, #365	; 0x16d
 800a23e:	bf18      	it	ne
 800a240:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800a244:	f8c9 301c 	str.w	r3, [r9, #28]
 800a248:	e74f      	b.n	800a0ea <mktime+0x122>
 800a24a:	f04f 33ff 	mov.w	r3, #4294967295
 800a24e:	e7dd      	b.n	800a20c <mktime+0x244>
 800a250:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800a254:	e7f6      	b.n	800a244 <mktime+0x27c>
 800a256:	f240 136d 	movw	r3, #365	; 0x16d
 800a25a:	e7f3      	b.n	800a244 <mktime+0x27c>
 800a25c:	07aa      	lsls	r2, r5, #30
 800a25e:	d117      	bne.n	800a290 <mktime+0x2c8>
 800a260:	2164      	movs	r1, #100	; 0x64
 800a262:	fb95 f2f1 	sdiv	r2, r5, r1
 800a266:	fb01 5212 	mls	r2, r1, r2, r5
 800a26a:	b9a2      	cbnz	r2, 800a296 <mktime+0x2ce>
 800a26c:	f205 756c 	addw	r5, r5, #1900	; 0x76c
 800a270:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800a274:	fb95 f2f1 	sdiv	r2, r5, r1
 800a278:	fb01 5512 	mls	r5, r1, r2, r5
 800a27c:	2d00      	cmp	r5, #0
 800a27e:	f240 126d 	movw	r2, #365	; 0x16d
 800a282:	bf08      	it	eq
 800a284:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800a288:	429a      	cmp	r2, r3
 800a28a:	bfd8      	it	le
 800a28c:	1a9b      	suble	r3, r3, r2
 800a28e:	e7d9      	b.n	800a244 <mktime+0x27c>
 800a290:	f240 126d 	movw	r2, #365	; 0x16d
 800a294:	e7f8      	b.n	800a288 <mktime+0x2c0>
 800a296:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800a29a:	e7f5      	b.n	800a288 <mktime+0x2c0>
 800a29c:	f04f 35ff 	mov.w	r5, #4294967295
 800a2a0:	e739      	b.n	800a116 <mktime+0x14e>
 800a2a2:	f1ba 0f00 	cmp.w	sl, #0
 800a2a6:	f04f 0600 	mov.w	r6, #0
 800a2aa:	da91      	bge.n	800a1d0 <mktime+0x208>
 800a2ac:	f8d8 5020 	ldr.w	r5, [r8, #32]
 800a2b0:	443d      	add	r5, r7
 800a2b2:	e721      	b.n	800a0f8 <mktime+0x130>
 800a2b4:	08010c80 	.word	0x08010c80
 800a2b8:	00015180 	.word	0x00015180
 800a2bc:	20000740 	.word	0x20000740

0800a2c0 <__malloc_lock>:
 800a2c0:	4801      	ldr	r0, [pc, #4]	; (800a2c8 <__malloc_lock+0x8>)
 800a2c2:	f004 ba10 	b.w	800e6e6 <__retarget_lock_acquire_recursive>
 800a2c6:	bf00      	nop
 800a2c8:	200021f4 	.word	0x200021f4

0800a2cc <__malloc_unlock>:
 800a2cc:	4801      	ldr	r0, [pc, #4]	; (800a2d4 <__malloc_unlock+0x8>)
 800a2ce:	f004 ba0c 	b.w	800e6ea <__retarget_lock_release_recursive>
 800a2d2:	bf00      	nop
 800a2d4:	200021f4 	.word	0x200021f4

0800a2d8 <printf>:
 800a2d8:	b40f      	push	{r0, r1, r2, r3}
 800a2da:	4b0a      	ldr	r3, [pc, #40]	; (800a304 <printf+0x2c>)
 800a2dc:	b513      	push	{r0, r1, r4, lr}
 800a2de:	681c      	ldr	r4, [r3, #0]
 800a2e0:	b124      	cbz	r4, 800a2ec <printf+0x14>
 800a2e2:	69a3      	ldr	r3, [r4, #24]
 800a2e4:	b913      	cbnz	r3, 800a2ec <printf+0x14>
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	f003 fab6 	bl	800d858 <__sinit>
 800a2ec:	ab05      	add	r3, sp, #20
 800a2ee:	9a04      	ldr	r2, [sp, #16]
 800a2f0:	68a1      	ldr	r1, [r4, #8]
 800a2f2:	9301      	str	r3, [sp, #4]
 800a2f4:	4620      	mov	r0, r4
 800a2f6:	f001 fa2f 	bl	800b758 <_vfprintf_r>
 800a2fa:	b002      	add	sp, #8
 800a2fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a300:	b004      	add	sp, #16
 800a302:	4770      	bx	lr
 800a304:	20000010 	.word	0x20000010

0800a308 <_puts_r>:
 800a308:	b530      	push	{r4, r5, lr}
 800a30a:	4605      	mov	r5, r0
 800a30c:	b089      	sub	sp, #36	; 0x24
 800a30e:	4608      	mov	r0, r1
 800a310:	460c      	mov	r4, r1
 800a312:	f7f5 ff67 	bl	80001e4 <strlen>
 800a316:	4b28      	ldr	r3, [pc, #160]	; (800a3b8 <_puts_r+0xb0>)
 800a318:	9306      	str	r3, [sp, #24]
 800a31a:	2301      	movs	r3, #1
 800a31c:	9005      	str	r0, [sp, #20]
 800a31e:	9307      	str	r3, [sp, #28]
 800a320:	4418      	add	r0, r3
 800a322:	ab04      	add	r3, sp, #16
 800a324:	9301      	str	r3, [sp, #4]
 800a326:	2302      	movs	r3, #2
 800a328:	9404      	str	r4, [sp, #16]
 800a32a:	9003      	str	r0, [sp, #12]
 800a32c:	9302      	str	r3, [sp, #8]
 800a32e:	b125      	cbz	r5, 800a33a <_puts_r+0x32>
 800a330:	69ab      	ldr	r3, [r5, #24]
 800a332:	b913      	cbnz	r3, 800a33a <_puts_r+0x32>
 800a334:	4628      	mov	r0, r5
 800a336:	f003 fa8f 	bl	800d858 <__sinit>
 800a33a:	69ab      	ldr	r3, [r5, #24]
 800a33c:	68ac      	ldr	r4, [r5, #8]
 800a33e:	b913      	cbnz	r3, 800a346 <_puts_r+0x3e>
 800a340:	4628      	mov	r0, r5
 800a342:	f003 fa89 	bl	800d858 <__sinit>
 800a346:	4b1d      	ldr	r3, [pc, #116]	; (800a3bc <_puts_r+0xb4>)
 800a348:	429c      	cmp	r4, r3
 800a34a:	d12a      	bne.n	800a3a2 <_puts_r+0x9a>
 800a34c:	686c      	ldr	r4, [r5, #4]
 800a34e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a350:	07db      	lsls	r3, r3, #31
 800a352:	d405      	bmi.n	800a360 <_puts_r+0x58>
 800a354:	89a3      	ldrh	r3, [r4, #12]
 800a356:	0598      	lsls	r0, r3, #22
 800a358:	d402      	bmi.n	800a360 <_puts_r+0x58>
 800a35a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a35c:	f004 f9c3 	bl	800e6e6 <__retarget_lock_acquire_recursive>
 800a360:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a364:	0499      	lsls	r1, r3, #18
 800a366:	d406      	bmi.n	800a376 <_puts_r+0x6e>
 800a368:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a36c:	81a3      	strh	r3, [r4, #12]
 800a36e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a370:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a374:	6663      	str	r3, [r4, #100]	; 0x64
 800a376:	4628      	mov	r0, r5
 800a378:	aa01      	add	r2, sp, #4
 800a37a:	4621      	mov	r1, r4
 800a37c:	f003 fbfe 	bl	800db7c <__sfvwrite_r>
 800a380:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a382:	2800      	cmp	r0, #0
 800a384:	bf14      	ite	ne
 800a386:	f04f 35ff 	movne.w	r5, #4294967295
 800a38a:	250a      	moveq	r5, #10
 800a38c:	07da      	lsls	r2, r3, #31
 800a38e:	d405      	bmi.n	800a39c <_puts_r+0x94>
 800a390:	89a3      	ldrh	r3, [r4, #12]
 800a392:	059b      	lsls	r3, r3, #22
 800a394:	d402      	bmi.n	800a39c <_puts_r+0x94>
 800a396:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a398:	f004 f9a7 	bl	800e6ea <__retarget_lock_release_recursive>
 800a39c:	4628      	mov	r0, r5
 800a39e:	b009      	add	sp, #36	; 0x24
 800a3a0:	bd30      	pop	{r4, r5, pc}
 800a3a2:	4b07      	ldr	r3, [pc, #28]	; (800a3c0 <_puts_r+0xb8>)
 800a3a4:	429c      	cmp	r4, r3
 800a3a6:	d101      	bne.n	800a3ac <_puts_r+0xa4>
 800a3a8:	68ac      	ldr	r4, [r5, #8]
 800a3aa:	e7d0      	b.n	800a34e <_puts_r+0x46>
 800a3ac:	4b05      	ldr	r3, [pc, #20]	; (800a3c4 <_puts_r+0xbc>)
 800a3ae:	429c      	cmp	r4, r3
 800a3b0:	bf08      	it	eq
 800a3b2:	68ec      	ldreq	r4, [r5, #12]
 800a3b4:	e7cb      	b.n	800a34e <_puts_r+0x46>
 800a3b6:	bf00      	nop
 800a3b8:	08010d10 	.word	0x08010d10
 800a3bc:	08010e28 	.word	0x08010e28
 800a3c0:	08010e48 	.word	0x08010e48
 800a3c4:	08010e08 	.word	0x08010e08

0800a3c8 <puts>:
 800a3c8:	4b02      	ldr	r3, [pc, #8]	; (800a3d4 <puts+0xc>)
 800a3ca:	4601      	mov	r1, r0
 800a3cc:	6818      	ldr	r0, [r3, #0]
 800a3ce:	f7ff bf9b 	b.w	800a308 <_puts_r>
 800a3d2:	bf00      	nop
 800a3d4:	20000010 	.word	0x20000010

0800a3d8 <_sbrk_r>:
 800a3d8:	b538      	push	{r3, r4, r5, lr}
 800a3da:	4c06      	ldr	r4, [pc, #24]	; (800a3f4 <_sbrk_r+0x1c>)
 800a3dc:	2300      	movs	r3, #0
 800a3de:	4605      	mov	r5, r0
 800a3e0:	4608      	mov	r0, r1
 800a3e2:	6023      	str	r3, [r4, #0]
 800a3e4:	f7ff f932 	bl	800964c <_sbrk>
 800a3e8:	1c43      	adds	r3, r0, #1
 800a3ea:	d102      	bne.n	800a3f2 <_sbrk_r+0x1a>
 800a3ec:	6823      	ldr	r3, [r4, #0]
 800a3ee:	b103      	cbz	r3, 800a3f2 <_sbrk_r+0x1a>
 800a3f0:	602b      	str	r3, [r5, #0]
 800a3f2:	bd38      	pop	{r3, r4, r5, pc}
 800a3f4:	200021fc 	.word	0x200021fc

0800a3f8 <setbuf>:
 800a3f8:	2900      	cmp	r1, #0
 800a3fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3fe:	bf0c      	ite	eq
 800a400:	2202      	moveq	r2, #2
 800a402:	2200      	movne	r2, #0
 800a404:	f000 b800 	b.w	800a408 <setvbuf>

0800a408 <setvbuf>:
 800a408:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a40c:	461d      	mov	r5, r3
 800a40e:	4b60      	ldr	r3, [pc, #384]	; (800a590 <setvbuf+0x188>)
 800a410:	681e      	ldr	r6, [r3, #0]
 800a412:	4604      	mov	r4, r0
 800a414:	460f      	mov	r7, r1
 800a416:	4690      	mov	r8, r2
 800a418:	b126      	cbz	r6, 800a424 <setvbuf+0x1c>
 800a41a:	69b3      	ldr	r3, [r6, #24]
 800a41c:	b913      	cbnz	r3, 800a424 <setvbuf+0x1c>
 800a41e:	4630      	mov	r0, r6
 800a420:	f003 fa1a 	bl	800d858 <__sinit>
 800a424:	4b5b      	ldr	r3, [pc, #364]	; (800a594 <setvbuf+0x18c>)
 800a426:	429c      	cmp	r4, r3
 800a428:	d166      	bne.n	800a4f8 <setvbuf+0xf0>
 800a42a:	6874      	ldr	r4, [r6, #4]
 800a42c:	f1b8 0f02 	cmp.w	r8, #2
 800a430:	d006      	beq.n	800a440 <setvbuf+0x38>
 800a432:	f1b8 0f01 	cmp.w	r8, #1
 800a436:	f200 80a7 	bhi.w	800a588 <setvbuf+0x180>
 800a43a:	2d00      	cmp	r5, #0
 800a43c:	f2c0 80a4 	blt.w	800a588 <setvbuf+0x180>
 800a440:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a442:	07da      	lsls	r2, r3, #31
 800a444:	d405      	bmi.n	800a452 <setvbuf+0x4a>
 800a446:	89a3      	ldrh	r3, [r4, #12]
 800a448:	059b      	lsls	r3, r3, #22
 800a44a:	d402      	bmi.n	800a452 <setvbuf+0x4a>
 800a44c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a44e:	f004 f94a 	bl	800e6e6 <__retarget_lock_acquire_recursive>
 800a452:	4621      	mov	r1, r4
 800a454:	4630      	mov	r0, r6
 800a456:	f003 f96b 	bl	800d730 <_fflush_r>
 800a45a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a45c:	b141      	cbz	r1, 800a470 <setvbuf+0x68>
 800a45e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a462:	4299      	cmp	r1, r3
 800a464:	d002      	beq.n	800a46c <setvbuf+0x64>
 800a466:	4630      	mov	r0, r6
 800a468:	f003 facc 	bl	800da04 <_free_r>
 800a46c:	2300      	movs	r3, #0
 800a46e:	6363      	str	r3, [r4, #52]	; 0x34
 800a470:	2300      	movs	r3, #0
 800a472:	61a3      	str	r3, [r4, #24]
 800a474:	6063      	str	r3, [r4, #4]
 800a476:	89a3      	ldrh	r3, [r4, #12]
 800a478:	0618      	lsls	r0, r3, #24
 800a47a:	d503      	bpl.n	800a484 <setvbuf+0x7c>
 800a47c:	6921      	ldr	r1, [r4, #16]
 800a47e:	4630      	mov	r0, r6
 800a480:	f003 fac0 	bl	800da04 <_free_r>
 800a484:	89a3      	ldrh	r3, [r4, #12]
 800a486:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800a48a:	f023 0303 	bic.w	r3, r3, #3
 800a48e:	f1b8 0f02 	cmp.w	r8, #2
 800a492:	81a3      	strh	r3, [r4, #12]
 800a494:	d072      	beq.n	800a57c <setvbuf+0x174>
 800a496:	ab01      	add	r3, sp, #4
 800a498:	466a      	mov	r2, sp
 800a49a:	4621      	mov	r1, r4
 800a49c:	4630      	mov	r0, r6
 800a49e:	f004 f925 	bl	800e6ec <__swhatbuf_r>
 800a4a2:	89a3      	ldrh	r3, [r4, #12]
 800a4a4:	4318      	orrs	r0, r3
 800a4a6:	81a0      	strh	r0, [r4, #12]
 800a4a8:	2d00      	cmp	r5, #0
 800a4aa:	d12f      	bne.n	800a50c <setvbuf+0x104>
 800a4ac:	9d00      	ldr	r5, [sp, #0]
 800a4ae:	4628      	mov	r0, r5
 800a4b0:	f7ff fa78 	bl	80099a4 <malloc>
 800a4b4:	4607      	mov	r7, r0
 800a4b6:	2800      	cmp	r0, #0
 800a4b8:	d162      	bne.n	800a580 <setvbuf+0x178>
 800a4ba:	f8dd 9000 	ldr.w	r9, [sp]
 800a4be:	45a9      	cmp	r9, r5
 800a4c0:	d150      	bne.n	800a564 <setvbuf+0x15c>
 800a4c2:	f04f 35ff 	mov.w	r5, #4294967295
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	60a2      	str	r2, [r4, #8]
 800a4ca:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800a4ce:	6022      	str	r2, [r4, #0]
 800a4d0:	6122      	str	r2, [r4, #16]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4d8:	6162      	str	r2, [r4, #20]
 800a4da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a4dc:	f043 0302 	orr.w	r3, r3, #2
 800a4e0:	07d1      	lsls	r1, r2, #31
 800a4e2:	81a3      	strh	r3, [r4, #12]
 800a4e4:	d404      	bmi.n	800a4f0 <setvbuf+0xe8>
 800a4e6:	059b      	lsls	r3, r3, #22
 800a4e8:	d402      	bmi.n	800a4f0 <setvbuf+0xe8>
 800a4ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4ec:	f004 f8fd 	bl	800e6ea <__retarget_lock_release_recursive>
 800a4f0:	4628      	mov	r0, r5
 800a4f2:	b003      	add	sp, #12
 800a4f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4f8:	4b27      	ldr	r3, [pc, #156]	; (800a598 <setvbuf+0x190>)
 800a4fa:	429c      	cmp	r4, r3
 800a4fc:	d101      	bne.n	800a502 <setvbuf+0xfa>
 800a4fe:	68b4      	ldr	r4, [r6, #8]
 800a500:	e794      	b.n	800a42c <setvbuf+0x24>
 800a502:	4b26      	ldr	r3, [pc, #152]	; (800a59c <setvbuf+0x194>)
 800a504:	429c      	cmp	r4, r3
 800a506:	bf08      	it	eq
 800a508:	68f4      	ldreq	r4, [r6, #12]
 800a50a:	e78f      	b.n	800a42c <setvbuf+0x24>
 800a50c:	2f00      	cmp	r7, #0
 800a50e:	d0ce      	beq.n	800a4ae <setvbuf+0xa6>
 800a510:	69b3      	ldr	r3, [r6, #24]
 800a512:	b913      	cbnz	r3, 800a51a <setvbuf+0x112>
 800a514:	4630      	mov	r0, r6
 800a516:	f003 f99f 	bl	800d858 <__sinit>
 800a51a:	9b00      	ldr	r3, [sp, #0]
 800a51c:	6127      	str	r7, [r4, #16]
 800a51e:	429d      	cmp	r5, r3
 800a520:	bf18      	it	ne
 800a522:	89a3      	ldrhne	r3, [r4, #12]
 800a524:	6027      	str	r7, [r4, #0]
 800a526:	bf1c      	itt	ne
 800a528:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
 800a52c:	81a3      	strhne	r3, [r4, #12]
 800a52e:	f1b8 0f01 	cmp.w	r8, #1
 800a532:	bf08      	it	eq
 800a534:	89a3      	ldrheq	r3, [r4, #12]
 800a536:	6165      	str	r5, [r4, #20]
 800a538:	bf04      	itt	eq
 800a53a:	f043 0301 	orreq.w	r3, r3, #1
 800a53e:	81a3      	strheq	r3, [r4, #12]
 800a540:	89a3      	ldrh	r3, [r4, #12]
 800a542:	f013 0208 	ands.w	r2, r3, #8
 800a546:	d01d      	beq.n	800a584 <setvbuf+0x17c>
 800a548:	07da      	lsls	r2, r3, #31
 800a54a:	bf41      	itttt	mi
 800a54c:	2200      	movmi	r2, #0
 800a54e:	426d      	negmi	r5, r5
 800a550:	60a2      	strmi	r2, [r4, #8]
 800a552:	61a5      	strmi	r5, [r4, #24]
 800a554:	bf58      	it	pl
 800a556:	60a5      	strpl	r5, [r4, #8]
 800a558:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800a55a:	f015 0501 	ands.w	r5, r5, #1
 800a55e:	d0c2      	beq.n	800a4e6 <setvbuf+0xde>
 800a560:	2500      	movs	r5, #0
 800a562:	e7c5      	b.n	800a4f0 <setvbuf+0xe8>
 800a564:	4648      	mov	r0, r9
 800a566:	f7ff fa1d 	bl	80099a4 <malloc>
 800a56a:	4607      	mov	r7, r0
 800a56c:	2800      	cmp	r0, #0
 800a56e:	d0a8      	beq.n	800a4c2 <setvbuf+0xba>
 800a570:	89a3      	ldrh	r3, [r4, #12]
 800a572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a576:	81a3      	strh	r3, [r4, #12]
 800a578:	464d      	mov	r5, r9
 800a57a:	e7c9      	b.n	800a510 <setvbuf+0x108>
 800a57c:	2500      	movs	r5, #0
 800a57e:	e7a2      	b.n	800a4c6 <setvbuf+0xbe>
 800a580:	46a9      	mov	r9, r5
 800a582:	e7f5      	b.n	800a570 <setvbuf+0x168>
 800a584:	60a2      	str	r2, [r4, #8]
 800a586:	e7e7      	b.n	800a558 <setvbuf+0x150>
 800a588:	f04f 35ff 	mov.w	r5, #4294967295
 800a58c:	e7b0      	b.n	800a4f0 <setvbuf+0xe8>
 800a58e:	bf00      	nop
 800a590:	20000010 	.word	0x20000010
 800a594:	08010e28 	.word	0x08010e28
 800a598:	08010e48 	.word	0x08010e48
 800a59c:	08010e08 	.word	0x08010e08

0800a5a0 <strchr>:
 800a5a0:	b2c9      	uxtb	r1, r1
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5a8:	b11a      	cbz	r2, 800a5b2 <strchr+0x12>
 800a5aa:	4291      	cmp	r1, r2
 800a5ac:	d1f9      	bne.n	800a5a2 <strchr+0x2>
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	4770      	bx	lr
 800a5b2:	2900      	cmp	r1, #0
 800a5b4:	bf0c      	ite	eq
 800a5b6:	4618      	moveq	r0, r3
 800a5b8:	2000      	movne	r0, #0
 800a5ba:	4770      	bx	lr

0800a5bc <sulp>:
 800a5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5c0:	460f      	mov	r7, r1
 800a5c2:	4690      	mov	r8, r2
 800a5c4:	f004 fbea 	bl	800ed9c <__ulp>
 800a5c8:	4604      	mov	r4, r0
 800a5ca:	460d      	mov	r5, r1
 800a5cc:	f1b8 0f00 	cmp.w	r8, #0
 800a5d0:	d011      	beq.n	800a5f6 <sulp+0x3a>
 800a5d2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a5d6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	dd0b      	ble.n	800a5f6 <sulp+0x3a>
 800a5de:	051b      	lsls	r3, r3, #20
 800a5e0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a5e4:	2400      	movs	r4, #0
 800a5e6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a5ea:	4622      	mov	r2, r4
 800a5ec:	462b      	mov	r3, r5
 800a5ee:	f7f6 f80f 	bl	8000610 <__aeabi_dmul>
 800a5f2:	4604      	mov	r4, r0
 800a5f4:	460d      	mov	r5, r1
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	4629      	mov	r1, r5
 800a5fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800a600 <_strtod_l>:
 800a600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a604:	4699      	mov	r9, r3
 800a606:	b09f      	sub	sp, #124	; 0x7c
 800a608:	2300      	movs	r3, #0
 800a60a:	4680      	mov	r8, r0
 800a60c:	4648      	mov	r0, r9
 800a60e:	460c      	mov	r4, r1
 800a610:	9215      	str	r2, [sp, #84]	; 0x54
 800a612:	931a      	str	r3, [sp, #104]	; 0x68
 800a614:	f004 f854 	bl	800e6c0 <__localeconv_l>
 800a618:	4607      	mov	r7, r0
 800a61a:	6800      	ldr	r0, [r0, #0]
 800a61c:	f7f5 fde2 	bl	80001e4 <strlen>
 800a620:	f04f 0a00 	mov.w	sl, #0
 800a624:	4605      	mov	r5, r0
 800a626:	f04f 0b00 	mov.w	fp, #0
 800a62a:	9419      	str	r4, [sp, #100]	; 0x64
 800a62c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a62e:	781a      	ldrb	r2, [r3, #0]
 800a630:	2a0d      	cmp	r2, #13
 800a632:	d833      	bhi.n	800a69c <_strtod_l+0x9c>
 800a634:	2a09      	cmp	r2, #9
 800a636:	d237      	bcs.n	800a6a8 <_strtod_l+0xa8>
 800a638:	2a00      	cmp	r2, #0
 800a63a:	d03f      	beq.n	800a6bc <_strtod_l+0xbc>
 800a63c:	2300      	movs	r3, #0
 800a63e:	9309      	str	r3, [sp, #36]	; 0x24
 800a640:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800a642:	7833      	ldrb	r3, [r6, #0]
 800a644:	2b30      	cmp	r3, #48	; 0x30
 800a646:	f040 8101 	bne.w	800a84c <_strtod_l+0x24c>
 800a64a:	7873      	ldrb	r3, [r6, #1]
 800a64c:	2b58      	cmp	r3, #88	; 0x58
 800a64e:	d001      	beq.n	800a654 <_strtod_l+0x54>
 800a650:	2b78      	cmp	r3, #120	; 0x78
 800a652:	d16b      	bne.n	800a72c <_strtod_l+0x12c>
 800a654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a656:	9301      	str	r3, [sp, #4]
 800a658:	ab1a      	add	r3, sp, #104	; 0x68
 800a65a:	9300      	str	r3, [sp, #0]
 800a65c:	f8cd 9008 	str.w	r9, [sp, #8]
 800a660:	ab1b      	add	r3, sp, #108	; 0x6c
 800a662:	4aaa      	ldr	r2, [pc, #680]	; (800a90c <_strtod_l+0x30c>)
 800a664:	a919      	add	r1, sp, #100	; 0x64
 800a666:	4640      	mov	r0, r8
 800a668:	f003 fc3e 	bl	800dee8 <__gethex>
 800a66c:	f010 0407 	ands.w	r4, r0, #7
 800a670:	4605      	mov	r5, r0
 800a672:	d005      	beq.n	800a680 <_strtod_l+0x80>
 800a674:	2c06      	cmp	r4, #6
 800a676:	d12b      	bne.n	800a6d0 <_strtod_l+0xd0>
 800a678:	3601      	adds	r6, #1
 800a67a:	2300      	movs	r3, #0
 800a67c:	9619      	str	r6, [sp, #100]	; 0x64
 800a67e:	9309      	str	r3, [sp, #36]	; 0x24
 800a680:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a682:	2b00      	cmp	r3, #0
 800a684:	f040 8599 	bne.w	800b1ba <_strtod_l+0xbba>
 800a688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a68a:	b1e3      	cbz	r3, 800a6c6 <_strtod_l+0xc6>
 800a68c:	4652      	mov	r2, sl
 800a68e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a692:	4610      	mov	r0, r2
 800a694:	4619      	mov	r1, r3
 800a696:	b01f      	add	sp, #124	; 0x7c
 800a698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a69c:	2a2b      	cmp	r2, #43	; 0x2b
 800a69e:	d006      	beq.n	800a6ae <_strtod_l+0xae>
 800a6a0:	2a2d      	cmp	r2, #45	; 0x2d
 800a6a2:	d013      	beq.n	800a6cc <_strtod_l+0xcc>
 800a6a4:	2a20      	cmp	r2, #32
 800a6a6:	d1c9      	bne.n	800a63c <_strtod_l+0x3c>
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	9319      	str	r3, [sp, #100]	; 0x64
 800a6ac:	e7be      	b.n	800a62c <_strtod_l+0x2c>
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	9209      	str	r2, [sp, #36]	; 0x24
 800a6b2:	1c5a      	adds	r2, r3, #1
 800a6b4:	9219      	str	r2, [sp, #100]	; 0x64
 800a6b6:	785b      	ldrb	r3, [r3, #1]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d1c1      	bne.n	800a640 <_strtod_l+0x40>
 800a6bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6be:	9419      	str	r4, [sp, #100]	; 0x64
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	f040 8578 	bne.w	800b1b6 <_strtod_l+0xbb6>
 800a6c6:	4652      	mov	r2, sl
 800a6c8:	465b      	mov	r3, fp
 800a6ca:	e7e2      	b.n	800a692 <_strtod_l+0x92>
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	e7ef      	b.n	800a6b0 <_strtod_l+0xb0>
 800a6d0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a6d2:	b13a      	cbz	r2, 800a6e4 <_strtod_l+0xe4>
 800a6d4:	2135      	movs	r1, #53	; 0x35
 800a6d6:	a81c      	add	r0, sp, #112	; 0x70
 800a6d8:	f004 fc4d 	bl	800ef76 <__copybits>
 800a6dc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a6de:	4640      	mov	r0, r8
 800a6e0:	f004 f8d0 	bl	800e884 <_Bfree>
 800a6e4:	3c01      	subs	r4, #1
 800a6e6:	2c04      	cmp	r4, #4
 800a6e8:	d808      	bhi.n	800a6fc <_strtod_l+0xfc>
 800a6ea:	e8df f004 	tbb	[pc, r4]
 800a6ee:	030c      	.short	0x030c
 800a6f0:	1a17      	.short	0x1a17
 800a6f2:	0c          	.byte	0x0c
 800a6f3:	00          	.byte	0x00
 800a6f4:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 800a6f8:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 800a6fc:	0729      	lsls	r1, r5, #28
 800a6fe:	d5bf      	bpl.n	800a680 <_strtod_l+0x80>
 800a700:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a704:	e7bc      	b.n	800a680 <_strtod_l+0x80>
 800a706:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a708:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a70a:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 800a70e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a712:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a716:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a71a:	e7ef      	b.n	800a6fc <_strtod_l+0xfc>
 800a71c:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 800a918 <_strtod_l+0x318>
 800a720:	e7ec      	b.n	800a6fc <_strtod_l+0xfc>
 800a722:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a726:	f04f 3aff 	mov.w	sl, #4294967295
 800a72a:	e7e7      	b.n	800a6fc <_strtod_l+0xfc>
 800a72c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a72e:	1c5a      	adds	r2, r3, #1
 800a730:	9219      	str	r2, [sp, #100]	; 0x64
 800a732:	785b      	ldrb	r3, [r3, #1]
 800a734:	2b30      	cmp	r3, #48	; 0x30
 800a736:	d0f9      	beq.n	800a72c <_strtod_l+0x12c>
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d0a1      	beq.n	800a680 <_strtod_l+0x80>
 800a73c:	2301      	movs	r3, #1
 800a73e:	9308      	str	r3, [sp, #32]
 800a740:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a742:	930a      	str	r3, [sp, #40]	; 0x28
 800a744:	2300      	movs	r3, #0
 800a746:	9305      	str	r3, [sp, #20]
 800a748:	9306      	str	r3, [sp, #24]
 800a74a:	9304      	str	r3, [sp, #16]
 800a74c:	220a      	movs	r2, #10
 800a74e:	9819      	ldr	r0, [sp, #100]	; 0x64
 800a750:	7806      	ldrb	r6, [r0, #0]
 800a752:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a756:	b2d9      	uxtb	r1, r3
 800a758:	2909      	cmp	r1, #9
 800a75a:	d979      	bls.n	800a850 <_strtod_l+0x250>
 800a75c:	462a      	mov	r2, r5
 800a75e:	6839      	ldr	r1, [r7, #0]
 800a760:	f004 fe3b 	bl	800f3da <strncmp>
 800a764:	2800      	cmp	r0, #0
 800a766:	f000 8085 	beq.w	800a874 <_strtod_l+0x274>
 800a76a:	2000      	movs	r0, #0
 800a76c:	9d04      	ldr	r5, [sp, #16]
 800a76e:	4633      	mov	r3, r6
 800a770:	4602      	mov	r2, r0
 800a772:	4601      	mov	r1, r0
 800a774:	2b65      	cmp	r3, #101	; 0x65
 800a776:	d002      	beq.n	800a77e <_strtod_l+0x17e>
 800a778:	2b45      	cmp	r3, #69	; 0x45
 800a77a:	f040 80ef 	bne.w	800a95c <_strtod_l+0x35c>
 800a77e:	b925      	cbnz	r5, 800a78a <_strtod_l+0x18a>
 800a780:	b910      	cbnz	r0, 800a788 <_strtod_l+0x188>
 800a782:	9b08      	ldr	r3, [sp, #32]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d099      	beq.n	800a6bc <_strtod_l+0xbc>
 800a788:	2500      	movs	r5, #0
 800a78a:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800a78c:	1c63      	adds	r3, r4, #1
 800a78e:	9319      	str	r3, [sp, #100]	; 0x64
 800a790:	7863      	ldrb	r3, [r4, #1]
 800a792:	2b2b      	cmp	r3, #43	; 0x2b
 800a794:	f000 80cf 	beq.w	800a936 <_strtod_l+0x336>
 800a798:	2b2d      	cmp	r3, #45	; 0x2d
 800a79a:	f000 80d2 	beq.w	800a942 <_strtod_l+0x342>
 800a79e:	2600      	movs	r6, #0
 800a7a0:	9607      	str	r6, [sp, #28]
 800a7a2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800a7a6:	2e09      	cmp	r6, #9
 800a7a8:	f200 80d7 	bhi.w	800a95a <_strtod_l+0x35a>
 800a7ac:	2b30      	cmp	r3, #48	; 0x30
 800a7ae:	f000 80ca 	beq.w	800a946 <_strtod_l+0x346>
 800a7b2:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 800a7b6:	2e08      	cmp	r6, #8
 800a7b8:	f200 80d0 	bhi.w	800a95c <_strtod_l+0x35c>
 800a7bc:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a7c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a7c2:	f04f 0c0a 	mov.w	ip, #10
 800a7c6:	461f      	mov	r7, r3
 800a7c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a7ca:	1c5e      	adds	r6, r3, #1
 800a7cc:	9619      	str	r6, [sp, #100]	; 0x64
 800a7ce:	785b      	ldrb	r3, [r3, #1]
 800a7d0:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
 800a7d4:	f1b9 0f09 	cmp.w	r9, #9
 800a7d8:	f240 80ba 	bls.w	800a950 <_strtod_l+0x350>
 800a7dc:	1bf6      	subs	r6, r6, r7
 800a7de:	2e08      	cmp	r6, #8
 800a7e0:	f644 691f 	movw	r9, #19999	; 0x4e1f
 800a7e4:	dc02      	bgt.n	800a7ec <_strtod_l+0x1ec>
 800a7e6:	45f1      	cmp	r9, lr
 800a7e8:	bfa8      	it	ge
 800a7ea:	46f1      	movge	r9, lr
 800a7ec:	9e07      	ldr	r6, [sp, #28]
 800a7ee:	b10e      	cbz	r6, 800a7f4 <_strtod_l+0x1f4>
 800a7f0:	f1c9 0900 	rsb	r9, r9, #0
 800a7f4:	2d00      	cmp	r5, #0
 800a7f6:	f040 80d7 	bne.w	800a9a8 <_strtod_l+0x3a8>
 800a7fa:	2800      	cmp	r0, #0
 800a7fc:	f47f af40 	bne.w	800a680 <_strtod_l+0x80>
 800a800:	9a08      	ldr	r2, [sp, #32]
 800a802:	2a00      	cmp	r2, #0
 800a804:	f47f af3c 	bne.w	800a680 <_strtod_l+0x80>
 800a808:	2900      	cmp	r1, #0
 800a80a:	f47f af57 	bne.w	800a6bc <_strtod_l+0xbc>
 800a80e:	2b4e      	cmp	r3, #78	; 0x4e
 800a810:	f000 80ad 	beq.w	800a96e <_strtod_l+0x36e>
 800a814:	f300 80a5 	bgt.w	800a962 <_strtod_l+0x362>
 800a818:	2b49      	cmp	r3, #73	; 0x49
 800a81a:	f47f af4f 	bne.w	800a6bc <_strtod_l+0xbc>
 800a81e:	493c      	ldr	r1, [pc, #240]	; (800a910 <_strtod_l+0x310>)
 800a820:	a819      	add	r0, sp, #100	; 0x64
 800a822:	f003 fd91 	bl	800e348 <__match>
 800a826:	2800      	cmp	r0, #0
 800a828:	f43f af48 	beq.w	800a6bc <_strtod_l+0xbc>
 800a82c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a82e:	4939      	ldr	r1, [pc, #228]	; (800a914 <_strtod_l+0x314>)
 800a830:	3b01      	subs	r3, #1
 800a832:	a819      	add	r0, sp, #100	; 0x64
 800a834:	9319      	str	r3, [sp, #100]	; 0x64
 800a836:	f003 fd87 	bl	800e348 <__match>
 800a83a:	b910      	cbnz	r0, 800a842 <_strtod_l+0x242>
 800a83c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a83e:	3301      	adds	r3, #1
 800a840:	9319      	str	r3, [sp, #100]	; 0x64
 800a842:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 800a918 <_strtod_l+0x318>
 800a846:	f04f 0a00 	mov.w	sl, #0
 800a84a:	e719      	b.n	800a680 <_strtod_l+0x80>
 800a84c:	2300      	movs	r3, #0
 800a84e:	e776      	b.n	800a73e <_strtod_l+0x13e>
 800a850:	9904      	ldr	r1, [sp, #16]
 800a852:	2908      	cmp	r1, #8
 800a854:	bfd5      	itete	le
 800a856:	9906      	ldrle	r1, [sp, #24]
 800a858:	9905      	ldrgt	r1, [sp, #20]
 800a85a:	fb02 3301 	mlale	r3, r2, r1, r3
 800a85e:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a862:	bfd4      	ite	le
 800a864:	9306      	strle	r3, [sp, #24]
 800a866:	9305      	strgt	r3, [sp, #20]
 800a868:	9b04      	ldr	r3, [sp, #16]
 800a86a:	3001      	adds	r0, #1
 800a86c:	3301      	adds	r3, #1
 800a86e:	9304      	str	r3, [sp, #16]
 800a870:	9019      	str	r0, [sp, #100]	; 0x64
 800a872:	e76c      	b.n	800a74e <_strtod_l+0x14e>
 800a874:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a876:	195a      	adds	r2, r3, r5
 800a878:	9219      	str	r2, [sp, #100]	; 0x64
 800a87a:	9a04      	ldr	r2, [sp, #16]
 800a87c:	5d5b      	ldrb	r3, [r3, r5]
 800a87e:	2a00      	cmp	r2, #0
 800a880:	d154      	bne.n	800a92c <_strtod_l+0x32c>
 800a882:	4610      	mov	r0, r2
 800a884:	2b30      	cmp	r3, #48	; 0x30
 800a886:	d02a      	beq.n	800a8de <_strtod_l+0x2de>
 800a888:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a88c:	2a08      	cmp	r2, #8
 800a88e:	f200 8499 	bhi.w	800b1c4 <_strtod_l+0xbc4>
 800a892:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a894:	920a      	str	r2, [sp, #40]	; 0x28
 800a896:	4602      	mov	r2, r0
 800a898:	2000      	movs	r0, #0
 800a89a:	4605      	mov	r5, r0
 800a89c:	3b30      	subs	r3, #48	; 0x30
 800a89e:	f100 0101 	add.w	r1, r0, #1
 800a8a2:	d011      	beq.n	800a8c8 <_strtod_l+0x2c8>
 800a8a4:	440a      	add	r2, r1
 800a8a6:	eb00 0c05 	add.w	ip, r0, r5
 800a8aa:	4629      	mov	r1, r5
 800a8ac:	260a      	movs	r6, #10
 800a8ae:	4561      	cmp	r1, ip
 800a8b0:	d11b      	bne.n	800a8ea <_strtod_l+0x2ea>
 800a8b2:	4428      	add	r0, r5
 800a8b4:	2808      	cmp	r0, #8
 800a8b6:	f100 0501 	add.w	r5, r0, #1
 800a8ba:	dc2f      	bgt.n	800a91c <_strtod_l+0x31c>
 800a8bc:	9806      	ldr	r0, [sp, #24]
 800a8be:	210a      	movs	r1, #10
 800a8c0:	fb01 3300 	mla	r3, r1, r0, r3
 800a8c4:	9306      	str	r3, [sp, #24]
 800a8c6:	2100      	movs	r1, #0
 800a8c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a8ca:	1c58      	adds	r0, r3, #1
 800a8cc:	9019      	str	r0, [sp, #100]	; 0x64
 800a8ce:	785b      	ldrb	r3, [r3, #1]
 800a8d0:	4608      	mov	r0, r1
 800a8d2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a8d6:	2909      	cmp	r1, #9
 800a8d8:	d9e0      	bls.n	800a89c <_strtod_l+0x29c>
 800a8da:	2101      	movs	r1, #1
 800a8dc:	e74a      	b.n	800a774 <_strtod_l+0x174>
 800a8de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a8e0:	1c5a      	adds	r2, r3, #1
 800a8e2:	9219      	str	r2, [sp, #100]	; 0x64
 800a8e4:	3001      	adds	r0, #1
 800a8e6:	785b      	ldrb	r3, [r3, #1]
 800a8e8:	e7cc      	b.n	800a884 <_strtod_l+0x284>
 800a8ea:	3101      	adds	r1, #1
 800a8ec:	f101 3eff 	add.w	lr, r1, #4294967295
 800a8f0:	f1be 0f08 	cmp.w	lr, #8
 800a8f4:	dc03      	bgt.n	800a8fe <_strtod_l+0x2fe>
 800a8f6:	9f06      	ldr	r7, [sp, #24]
 800a8f8:	4377      	muls	r7, r6
 800a8fa:	9706      	str	r7, [sp, #24]
 800a8fc:	e7d7      	b.n	800a8ae <_strtod_l+0x2ae>
 800a8fe:	2910      	cmp	r1, #16
 800a900:	bfde      	ittt	le
 800a902:	9f05      	ldrle	r7, [sp, #20]
 800a904:	4377      	mulle	r7, r6
 800a906:	9705      	strle	r7, [sp, #20]
 800a908:	e7d1      	b.n	800a8ae <_strtod_l+0x2ae>
 800a90a:	bf00      	nop
 800a90c:	08010d14 	.word	0x08010d14
 800a910:	08010da9 	.word	0x08010da9
 800a914:	08010dfb 	.word	0x08010dfb
 800a918:	7ff00000 	.word	0x7ff00000
 800a91c:	2d10      	cmp	r5, #16
 800a91e:	bfdf      	itttt	le
 800a920:	9805      	ldrle	r0, [sp, #20]
 800a922:	210a      	movle	r1, #10
 800a924:	fb01 3300 	mlale	r3, r1, r0, r3
 800a928:	9305      	strle	r3, [sp, #20]
 800a92a:	e7cc      	b.n	800a8c6 <_strtod_l+0x2c6>
 800a92c:	4602      	mov	r2, r0
 800a92e:	9d04      	ldr	r5, [sp, #16]
 800a930:	e7cf      	b.n	800a8d2 <_strtod_l+0x2d2>
 800a932:	2101      	movs	r1, #1
 800a934:	e724      	b.n	800a780 <_strtod_l+0x180>
 800a936:	2300      	movs	r3, #0
 800a938:	9307      	str	r3, [sp, #28]
 800a93a:	1ca3      	adds	r3, r4, #2
 800a93c:	9319      	str	r3, [sp, #100]	; 0x64
 800a93e:	78a3      	ldrb	r3, [r4, #2]
 800a940:	e72f      	b.n	800a7a2 <_strtod_l+0x1a2>
 800a942:	2301      	movs	r3, #1
 800a944:	e7f8      	b.n	800a938 <_strtod_l+0x338>
 800a946:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a948:	1c5e      	adds	r6, r3, #1
 800a94a:	9619      	str	r6, [sp, #100]	; 0x64
 800a94c:	785b      	ldrb	r3, [r3, #1]
 800a94e:	e72d      	b.n	800a7ac <_strtod_l+0x1ac>
 800a950:	fb0c 3e0e 	mla	lr, ip, lr, r3
 800a954:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a958:	e736      	b.n	800a7c8 <_strtod_l+0x1c8>
 800a95a:	9419      	str	r4, [sp, #100]	; 0x64
 800a95c:	f04f 0900 	mov.w	r9, #0
 800a960:	e748      	b.n	800a7f4 <_strtod_l+0x1f4>
 800a962:	2b69      	cmp	r3, #105	; 0x69
 800a964:	f43f af5b 	beq.w	800a81e <_strtod_l+0x21e>
 800a968:	2b6e      	cmp	r3, #110	; 0x6e
 800a96a:	f47f aea7 	bne.w	800a6bc <_strtod_l+0xbc>
 800a96e:	498c      	ldr	r1, [pc, #560]	; (800aba0 <_strtod_l+0x5a0>)
 800a970:	a819      	add	r0, sp, #100	; 0x64
 800a972:	f003 fce9 	bl	800e348 <__match>
 800a976:	2800      	cmp	r0, #0
 800a978:	f43f aea0 	beq.w	800a6bc <_strtod_l+0xbc>
 800a97c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a97e:	781b      	ldrb	r3, [r3, #0]
 800a980:	2b28      	cmp	r3, #40	; 0x28
 800a982:	d10e      	bne.n	800a9a2 <_strtod_l+0x3a2>
 800a984:	aa1c      	add	r2, sp, #112	; 0x70
 800a986:	4987      	ldr	r1, [pc, #540]	; (800aba4 <_strtod_l+0x5a4>)
 800a988:	a819      	add	r0, sp, #100	; 0x64
 800a98a:	f003 fcf0 	bl	800e36e <__hexnan>
 800a98e:	2805      	cmp	r0, #5
 800a990:	d107      	bne.n	800a9a2 <_strtod_l+0x3a2>
 800a992:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a994:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 800a998:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a99c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a9a0:	e66e      	b.n	800a680 <_strtod_l+0x80>
 800a9a2:	f8df b210 	ldr.w	fp, [pc, #528]	; 800abb4 <_strtod_l+0x5b4>
 800a9a6:	e74e      	b.n	800a846 <_strtod_l+0x246>
 800a9a8:	9b04      	ldr	r3, [sp, #16]
 800a9aa:	9806      	ldr	r0, [sp, #24]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	bf08      	it	eq
 800a9b0:	462b      	moveq	r3, r5
 800a9b2:	2d10      	cmp	r5, #16
 800a9b4:	462c      	mov	r4, r5
 800a9b6:	eba9 0902 	sub.w	r9, r9, r2
 800a9ba:	bfa8      	it	ge
 800a9bc:	2410      	movge	r4, #16
 800a9be:	9304      	str	r3, [sp, #16]
 800a9c0:	f7f5 fdb0 	bl	8000524 <__aeabi_ui2d>
 800a9c4:	2c09      	cmp	r4, #9
 800a9c6:	4682      	mov	sl, r0
 800a9c8:	468b      	mov	fp, r1
 800a9ca:	dd13      	ble.n	800a9f4 <_strtod_l+0x3f4>
 800a9cc:	4b76      	ldr	r3, [pc, #472]	; (800aba8 <_strtod_l+0x5a8>)
 800a9ce:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a9d2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a9d6:	f7f5 fe1b 	bl	8000610 <__aeabi_dmul>
 800a9da:	4606      	mov	r6, r0
 800a9dc:	9805      	ldr	r0, [sp, #20]
 800a9de:	460f      	mov	r7, r1
 800a9e0:	f7f5 fda0 	bl	8000524 <__aeabi_ui2d>
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	4630      	mov	r0, r6
 800a9ea:	4639      	mov	r1, r7
 800a9ec:	f7f5 fc5e 	bl	80002ac <__adddf3>
 800a9f0:	4682      	mov	sl, r0
 800a9f2:	468b      	mov	fp, r1
 800a9f4:	2d0f      	cmp	r5, #15
 800a9f6:	dc36      	bgt.n	800aa66 <_strtod_l+0x466>
 800a9f8:	f1b9 0f00 	cmp.w	r9, #0
 800a9fc:	f43f ae40 	beq.w	800a680 <_strtod_l+0x80>
 800aa00:	dd24      	ble.n	800aa4c <_strtod_l+0x44c>
 800aa02:	f1b9 0f16 	cmp.w	r9, #22
 800aa06:	dc0b      	bgt.n	800aa20 <_strtod_l+0x420>
 800aa08:	4d67      	ldr	r5, [pc, #412]	; (800aba8 <_strtod_l+0x5a8>)
 800aa0a:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 800aa0e:	e9d9 0100 	ldrd	r0, r1, [r9]
 800aa12:	4652      	mov	r2, sl
 800aa14:	465b      	mov	r3, fp
 800aa16:	f7f5 fdfb 	bl	8000610 <__aeabi_dmul>
 800aa1a:	4682      	mov	sl, r0
 800aa1c:	468b      	mov	fp, r1
 800aa1e:	e62f      	b.n	800a680 <_strtod_l+0x80>
 800aa20:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800aa24:	4599      	cmp	r9, r3
 800aa26:	dc1e      	bgt.n	800aa66 <_strtod_l+0x466>
 800aa28:	4c5f      	ldr	r4, [pc, #380]	; (800aba8 <_strtod_l+0x5a8>)
 800aa2a:	f1c5 050f 	rsb	r5, r5, #15
 800aa2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800aa32:	eba9 0505 	sub.w	r5, r9, r5
 800aa36:	4652      	mov	r2, sl
 800aa38:	465b      	mov	r3, fp
 800aa3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa3e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800aa42:	f7f5 fde5 	bl	8000610 <__aeabi_dmul>
 800aa46:	e9d4 2300 	ldrd	r2, r3, [r4]
 800aa4a:	e7e4      	b.n	800aa16 <_strtod_l+0x416>
 800aa4c:	f119 0f16 	cmn.w	r9, #22
 800aa50:	db09      	blt.n	800aa66 <_strtod_l+0x466>
 800aa52:	4d55      	ldr	r5, [pc, #340]	; (800aba8 <_strtod_l+0x5a8>)
 800aa54:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
 800aa58:	e9d9 2300 	ldrd	r2, r3, [r9]
 800aa5c:	4650      	mov	r0, sl
 800aa5e:	4659      	mov	r1, fp
 800aa60:	f7f5 ff00 	bl	8000864 <__aeabi_ddiv>
 800aa64:	e7d9      	b.n	800aa1a <_strtod_l+0x41a>
 800aa66:	1b2c      	subs	r4, r5, r4
 800aa68:	444c      	add	r4, r9
 800aa6a:	2c00      	cmp	r4, #0
 800aa6c:	dd73      	ble.n	800ab56 <_strtod_l+0x556>
 800aa6e:	f014 030f 	ands.w	r3, r4, #15
 800aa72:	d00a      	beq.n	800aa8a <_strtod_l+0x48a>
 800aa74:	494c      	ldr	r1, [pc, #304]	; (800aba8 <_strtod_l+0x5a8>)
 800aa76:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aa7a:	4652      	mov	r2, sl
 800aa7c:	465b      	mov	r3, fp
 800aa7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa82:	f7f5 fdc5 	bl	8000610 <__aeabi_dmul>
 800aa86:	4682      	mov	sl, r0
 800aa88:	468b      	mov	fp, r1
 800aa8a:	f034 040f 	bics.w	r4, r4, #15
 800aa8e:	d054      	beq.n	800ab3a <_strtod_l+0x53a>
 800aa90:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 800aa94:	dd27      	ble.n	800aae6 <_strtod_l+0x4e6>
 800aa96:	f04f 0900 	mov.w	r9, #0
 800aa9a:	f8cd 9010 	str.w	r9, [sp, #16]
 800aa9e:	f8cd 901c 	str.w	r9, [sp, #28]
 800aaa2:	f8cd 9018 	str.w	r9, [sp, #24]
 800aaa6:	2322      	movs	r3, #34	; 0x22
 800aaa8:	f8df b10c 	ldr.w	fp, [pc, #268]	; 800abb8 <_strtod_l+0x5b8>
 800aaac:	f8c8 3000 	str.w	r3, [r8]
 800aab0:	f04f 0a00 	mov.w	sl, #0
 800aab4:	9b07      	ldr	r3, [sp, #28]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	f43f ade2 	beq.w	800a680 <_strtod_l+0x80>
 800aabc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800aabe:	4640      	mov	r0, r8
 800aac0:	f003 fee0 	bl	800e884 <_Bfree>
 800aac4:	9906      	ldr	r1, [sp, #24]
 800aac6:	4640      	mov	r0, r8
 800aac8:	f003 fedc 	bl	800e884 <_Bfree>
 800aacc:	9904      	ldr	r1, [sp, #16]
 800aace:	4640      	mov	r0, r8
 800aad0:	f003 fed8 	bl	800e884 <_Bfree>
 800aad4:	9907      	ldr	r1, [sp, #28]
 800aad6:	4640      	mov	r0, r8
 800aad8:	f003 fed4 	bl	800e884 <_Bfree>
 800aadc:	4649      	mov	r1, r9
 800aade:	4640      	mov	r0, r8
 800aae0:	f003 fed0 	bl	800e884 <_Bfree>
 800aae4:	e5cc      	b.n	800a680 <_strtod_l+0x80>
 800aae6:	2300      	movs	r3, #0
 800aae8:	4e30      	ldr	r6, [pc, #192]	; (800abac <_strtod_l+0x5ac>)
 800aaea:	1124      	asrs	r4, r4, #4
 800aaec:	4650      	mov	r0, sl
 800aaee:	4659      	mov	r1, fp
 800aaf0:	461f      	mov	r7, r3
 800aaf2:	2c01      	cmp	r4, #1
 800aaf4:	dc24      	bgt.n	800ab40 <_strtod_l+0x540>
 800aaf6:	b10b      	cbz	r3, 800aafc <_strtod_l+0x4fc>
 800aaf8:	4682      	mov	sl, r0
 800aafa:	468b      	mov	fp, r1
 800aafc:	4b2b      	ldr	r3, [pc, #172]	; (800abac <_strtod_l+0x5ac>)
 800aafe:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ab02:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ab06:	4652      	mov	r2, sl
 800ab08:	465b      	mov	r3, fp
 800ab0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab0e:	f7f5 fd7f 	bl	8000610 <__aeabi_dmul>
 800ab12:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ab16:	468b      	mov	fp, r1
 800ab18:	460a      	mov	r2, r1
 800ab1a:	0d1b      	lsrs	r3, r3, #20
 800ab1c:	4924      	ldr	r1, [pc, #144]	; (800abb0 <_strtod_l+0x5b0>)
 800ab1e:	051b      	lsls	r3, r3, #20
 800ab20:	428b      	cmp	r3, r1
 800ab22:	4682      	mov	sl, r0
 800ab24:	d8b7      	bhi.n	800aa96 <_strtod_l+0x496>
 800ab26:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ab2a:	428b      	cmp	r3, r1
 800ab2c:	bf86      	itte	hi
 800ab2e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	; 800abbc <_strtod_l+0x5bc>
 800ab32:	f04f 3aff 	movhi.w	sl, #4294967295
 800ab36:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	9305      	str	r3, [sp, #20]
 800ab3e:	e070      	b.n	800ac22 <_strtod_l+0x622>
 800ab40:	07e2      	lsls	r2, r4, #31
 800ab42:	d504      	bpl.n	800ab4e <_strtod_l+0x54e>
 800ab44:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ab48:	f7f5 fd62 	bl	8000610 <__aeabi_dmul>
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	3701      	adds	r7, #1
 800ab50:	1064      	asrs	r4, r4, #1
 800ab52:	3608      	adds	r6, #8
 800ab54:	e7cd      	b.n	800aaf2 <_strtod_l+0x4f2>
 800ab56:	d0f0      	beq.n	800ab3a <_strtod_l+0x53a>
 800ab58:	4264      	negs	r4, r4
 800ab5a:	f014 020f 	ands.w	r2, r4, #15
 800ab5e:	d00a      	beq.n	800ab76 <_strtod_l+0x576>
 800ab60:	4b11      	ldr	r3, [pc, #68]	; (800aba8 <_strtod_l+0x5a8>)
 800ab62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab66:	4650      	mov	r0, sl
 800ab68:	4659      	mov	r1, fp
 800ab6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab6e:	f7f5 fe79 	bl	8000864 <__aeabi_ddiv>
 800ab72:	4682      	mov	sl, r0
 800ab74:	468b      	mov	fp, r1
 800ab76:	1124      	asrs	r4, r4, #4
 800ab78:	d0df      	beq.n	800ab3a <_strtod_l+0x53a>
 800ab7a:	2c1f      	cmp	r4, #31
 800ab7c:	dd20      	ble.n	800abc0 <_strtod_l+0x5c0>
 800ab7e:	f04f 0900 	mov.w	r9, #0
 800ab82:	f8cd 9010 	str.w	r9, [sp, #16]
 800ab86:	f8cd 901c 	str.w	r9, [sp, #28]
 800ab8a:	f8cd 9018 	str.w	r9, [sp, #24]
 800ab8e:	2322      	movs	r3, #34	; 0x22
 800ab90:	f04f 0a00 	mov.w	sl, #0
 800ab94:	f04f 0b00 	mov.w	fp, #0
 800ab98:	f8c8 3000 	str.w	r3, [r8]
 800ab9c:	e78a      	b.n	800aab4 <_strtod_l+0x4b4>
 800ab9e:	bf00      	nop
 800aba0:	08010db1 	.word	0x08010db1
 800aba4:	08010d28 	.word	0x08010d28
 800aba8:	08010ea0 	.word	0x08010ea0
 800abac:	08010e78 	.word	0x08010e78
 800abb0:	7ca00000 	.word	0x7ca00000
 800abb4:	fff80000 	.word	0xfff80000
 800abb8:	7ff00000 	.word	0x7ff00000
 800abbc:	7fefffff 	.word	0x7fefffff
 800abc0:	f014 0310 	ands.w	r3, r4, #16
 800abc4:	bf18      	it	ne
 800abc6:	236a      	movne	r3, #106	; 0x6a
 800abc8:	4e9f      	ldr	r6, [pc, #636]	; (800ae48 <_strtod_l+0x848>)
 800abca:	9305      	str	r3, [sp, #20]
 800abcc:	4650      	mov	r0, sl
 800abce:	4659      	mov	r1, fp
 800abd0:	2300      	movs	r3, #0
 800abd2:	2c00      	cmp	r4, #0
 800abd4:	f300 8106 	bgt.w	800ade4 <_strtod_l+0x7e4>
 800abd8:	b10b      	cbz	r3, 800abde <_strtod_l+0x5de>
 800abda:	4682      	mov	sl, r0
 800abdc:	468b      	mov	fp, r1
 800abde:	9b05      	ldr	r3, [sp, #20]
 800abe0:	b1bb      	cbz	r3, 800ac12 <_strtod_l+0x612>
 800abe2:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800abe6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800abea:	2b00      	cmp	r3, #0
 800abec:	4659      	mov	r1, fp
 800abee:	dd10      	ble.n	800ac12 <_strtod_l+0x612>
 800abf0:	2b1f      	cmp	r3, #31
 800abf2:	f340 8101 	ble.w	800adf8 <_strtod_l+0x7f8>
 800abf6:	2b34      	cmp	r3, #52	; 0x34
 800abf8:	bfde      	ittt	le
 800abfa:	3b20      	suble	r3, #32
 800abfc:	f04f 32ff 	movle.w	r2, #4294967295
 800ac00:	fa02 f303 	lslle.w	r3, r2, r3
 800ac04:	f04f 0a00 	mov.w	sl, #0
 800ac08:	bfcc      	ite	gt
 800ac0a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ac0e:	ea03 0b01 	andle.w	fp, r3, r1
 800ac12:	2200      	movs	r2, #0
 800ac14:	2300      	movs	r3, #0
 800ac16:	4650      	mov	r0, sl
 800ac18:	4659      	mov	r1, fp
 800ac1a:	f7f5 ff61 	bl	8000ae0 <__aeabi_dcmpeq>
 800ac1e:	2800      	cmp	r0, #0
 800ac20:	d1ad      	bne.n	800ab7e <_strtod_l+0x57e>
 800ac22:	9b06      	ldr	r3, [sp, #24]
 800ac24:	9300      	str	r3, [sp, #0]
 800ac26:	9a04      	ldr	r2, [sp, #16]
 800ac28:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ac2a:	462b      	mov	r3, r5
 800ac2c:	4640      	mov	r0, r8
 800ac2e:	f003 fe7b 	bl	800e928 <__s2b>
 800ac32:	9007      	str	r0, [sp, #28]
 800ac34:	2800      	cmp	r0, #0
 800ac36:	f43f af2e 	beq.w	800aa96 <_strtod_l+0x496>
 800ac3a:	f1b9 0f00 	cmp.w	r9, #0
 800ac3e:	f1c9 0300 	rsb	r3, r9, #0
 800ac42:	bfa8      	it	ge
 800ac44:	2300      	movge	r3, #0
 800ac46:	930e      	str	r3, [sp, #56]	; 0x38
 800ac48:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
 800ac4c:	f04f 0900 	mov.w	r9, #0
 800ac50:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac52:	f8cd 9010 	str.w	r9, [sp, #16]
 800ac56:	9b07      	ldr	r3, [sp, #28]
 800ac58:	4640      	mov	r0, r8
 800ac5a:	6859      	ldr	r1, [r3, #4]
 800ac5c:	f003 fdde 	bl	800e81c <_Balloc>
 800ac60:	9006      	str	r0, [sp, #24]
 800ac62:	2800      	cmp	r0, #0
 800ac64:	f43f af1f 	beq.w	800aaa6 <_strtod_l+0x4a6>
 800ac68:	9b07      	ldr	r3, [sp, #28]
 800ac6a:	691a      	ldr	r2, [r3, #16]
 800ac6c:	3202      	adds	r2, #2
 800ac6e:	f103 010c 	add.w	r1, r3, #12
 800ac72:	0092      	lsls	r2, r2, #2
 800ac74:	300c      	adds	r0, #12
 800ac76:	f7ff f8b3 	bl	8009de0 <memcpy>
 800ac7a:	ab1c      	add	r3, sp, #112	; 0x70
 800ac7c:	9301      	str	r3, [sp, #4]
 800ac7e:	ab1b      	add	r3, sp, #108	; 0x6c
 800ac80:	9300      	str	r3, [sp, #0]
 800ac82:	4652      	mov	r2, sl
 800ac84:	465b      	mov	r3, fp
 800ac86:	4640      	mov	r0, r8
 800ac88:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800ac8c:	f004 f8fc 	bl	800ee88 <__d2b>
 800ac90:	901a      	str	r0, [sp, #104]	; 0x68
 800ac92:	2800      	cmp	r0, #0
 800ac94:	f43f af07 	beq.w	800aaa6 <_strtod_l+0x4a6>
 800ac98:	2101      	movs	r1, #1
 800ac9a:	4640      	mov	r0, r8
 800ac9c:	f003 fed0 	bl	800ea40 <__i2b>
 800aca0:	9004      	str	r0, [sp, #16]
 800aca2:	4603      	mov	r3, r0
 800aca4:	2800      	cmp	r0, #0
 800aca6:	f43f aefe 	beq.w	800aaa6 <_strtod_l+0x4a6>
 800acaa:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800acac:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800acae:	2d00      	cmp	r5, #0
 800acb0:	bfab      	itete	ge
 800acb2:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800acb4:	9b0f      	ldrlt	r3, [sp, #60]	; 0x3c
 800acb6:	9c0f      	ldrge	r4, [sp, #60]	; 0x3c
 800acb8:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800acba:	bfac      	ite	ge
 800acbc:	195e      	addge	r6, r3, r5
 800acbe:	1b5c      	sublt	r4, r3, r5
 800acc0:	9b05      	ldr	r3, [sp, #20]
 800acc2:	1aed      	subs	r5, r5, r3
 800acc4:	4415      	add	r5, r2
 800acc6:	4b61      	ldr	r3, [pc, #388]	; (800ae4c <_strtod_l+0x84c>)
 800acc8:	3d01      	subs	r5, #1
 800acca:	429d      	cmp	r5, r3
 800accc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800acd0:	f280 80a4 	bge.w	800ae1c <_strtod_l+0x81c>
 800acd4:	1b5b      	subs	r3, r3, r5
 800acd6:	2b1f      	cmp	r3, #31
 800acd8:	eba2 0203 	sub.w	r2, r2, r3
 800acdc:	f04f 0701 	mov.w	r7, #1
 800ace0:	f300 8091 	bgt.w	800ae06 <_strtod_l+0x806>
 800ace4:	fa07 f303 	lsl.w	r3, r7, r3
 800ace8:	9314      	str	r3, [sp, #80]	; 0x50
 800acea:	2500      	movs	r5, #0
 800acec:	18b7      	adds	r7, r6, r2
 800acee:	9b05      	ldr	r3, [sp, #20]
 800acf0:	42be      	cmp	r6, r7
 800acf2:	4414      	add	r4, r2
 800acf4:	441c      	add	r4, r3
 800acf6:	4633      	mov	r3, r6
 800acf8:	bfa8      	it	ge
 800acfa:	463b      	movge	r3, r7
 800acfc:	42a3      	cmp	r3, r4
 800acfe:	bfa8      	it	ge
 800ad00:	4623      	movge	r3, r4
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	bfc2      	ittt	gt
 800ad06:	1aff      	subgt	r7, r7, r3
 800ad08:	1ae4      	subgt	r4, r4, r3
 800ad0a:	1af6      	subgt	r6, r6, r3
 800ad0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad0e:	b1bb      	cbz	r3, 800ad40 <_strtod_l+0x740>
 800ad10:	461a      	mov	r2, r3
 800ad12:	9904      	ldr	r1, [sp, #16]
 800ad14:	4640      	mov	r0, r8
 800ad16:	f003 ff29 	bl	800eb6c <__pow5mult>
 800ad1a:	9004      	str	r0, [sp, #16]
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	f43f aec2 	beq.w	800aaa6 <_strtod_l+0x4a6>
 800ad22:	4601      	mov	r1, r0
 800ad24:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ad26:	4640      	mov	r0, r8
 800ad28:	f003 fe93 	bl	800ea52 <__multiply>
 800ad2c:	9008      	str	r0, [sp, #32]
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	f43f aeb9 	beq.w	800aaa6 <_strtod_l+0x4a6>
 800ad34:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ad36:	4640      	mov	r0, r8
 800ad38:	f003 fda4 	bl	800e884 <_Bfree>
 800ad3c:	9b08      	ldr	r3, [sp, #32]
 800ad3e:	931a      	str	r3, [sp, #104]	; 0x68
 800ad40:	2f00      	cmp	r7, #0
 800ad42:	dc6f      	bgt.n	800ae24 <_strtod_l+0x824>
 800ad44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d175      	bne.n	800ae36 <_strtod_l+0x836>
 800ad4a:	2c00      	cmp	r4, #0
 800ad4c:	dd08      	ble.n	800ad60 <_strtod_l+0x760>
 800ad4e:	4622      	mov	r2, r4
 800ad50:	9906      	ldr	r1, [sp, #24]
 800ad52:	4640      	mov	r0, r8
 800ad54:	f003 ff58 	bl	800ec08 <__lshift>
 800ad58:	9006      	str	r0, [sp, #24]
 800ad5a:	2800      	cmp	r0, #0
 800ad5c:	f43f aea3 	beq.w	800aaa6 <_strtod_l+0x4a6>
 800ad60:	2e00      	cmp	r6, #0
 800ad62:	dd08      	ble.n	800ad76 <_strtod_l+0x776>
 800ad64:	4632      	mov	r2, r6
 800ad66:	9904      	ldr	r1, [sp, #16]
 800ad68:	4640      	mov	r0, r8
 800ad6a:	f003 ff4d 	bl	800ec08 <__lshift>
 800ad6e:	9004      	str	r0, [sp, #16]
 800ad70:	2800      	cmp	r0, #0
 800ad72:	f43f ae98 	beq.w	800aaa6 <_strtod_l+0x4a6>
 800ad76:	9a06      	ldr	r2, [sp, #24]
 800ad78:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ad7a:	4640      	mov	r0, r8
 800ad7c:	f003 ffaf 	bl	800ecde <__mdiff>
 800ad80:	4681      	mov	r9, r0
 800ad82:	2800      	cmp	r0, #0
 800ad84:	f43f ae8f 	beq.w	800aaa6 <_strtod_l+0x4a6>
 800ad88:	2400      	movs	r4, #0
 800ad8a:	68c3      	ldr	r3, [r0, #12]
 800ad8c:	9904      	ldr	r1, [sp, #16]
 800ad8e:	60c4      	str	r4, [r0, #12]
 800ad90:	9308      	str	r3, [sp, #32]
 800ad92:	f003 ff8a 	bl	800ecaa <__mcmp>
 800ad96:	42a0      	cmp	r0, r4
 800ad98:	da5a      	bge.n	800ae50 <_strtod_l+0x850>
 800ad9a:	9b08      	ldr	r3, [sp, #32]
 800ad9c:	b9f3      	cbnz	r3, 800addc <_strtod_l+0x7dc>
 800ad9e:	f1ba 0f00 	cmp.w	sl, #0
 800ada2:	d11b      	bne.n	800addc <_strtod_l+0x7dc>
 800ada4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ada8:	b9c3      	cbnz	r3, 800addc <_strtod_l+0x7dc>
 800adaa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800adae:	0d1b      	lsrs	r3, r3, #20
 800adb0:	051b      	lsls	r3, r3, #20
 800adb2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800adb6:	d911      	bls.n	800addc <_strtod_l+0x7dc>
 800adb8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800adbc:	b91b      	cbnz	r3, 800adc6 <_strtod_l+0x7c6>
 800adbe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	dd0a      	ble.n	800addc <_strtod_l+0x7dc>
 800adc6:	4649      	mov	r1, r9
 800adc8:	2201      	movs	r2, #1
 800adca:	4640      	mov	r0, r8
 800adcc:	f003 ff1c 	bl	800ec08 <__lshift>
 800add0:	9904      	ldr	r1, [sp, #16]
 800add2:	4681      	mov	r9, r0
 800add4:	f003 ff69 	bl	800ecaa <__mcmp>
 800add8:	2800      	cmp	r0, #0
 800adda:	dc6a      	bgt.n	800aeb2 <_strtod_l+0x8b2>
 800addc:	9b05      	ldr	r3, [sp, #20]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d174      	bne.n	800aecc <_strtod_l+0x8cc>
 800ade2:	e66b      	b.n	800aabc <_strtod_l+0x4bc>
 800ade4:	07e2      	lsls	r2, r4, #31
 800ade6:	d504      	bpl.n	800adf2 <_strtod_l+0x7f2>
 800ade8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800adec:	f7f5 fc10 	bl	8000610 <__aeabi_dmul>
 800adf0:	2301      	movs	r3, #1
 800adf2:	1064      	asrs	r4, r4, #1
 800adf4:	3608      	adds	r6, #8
 800adf6:	e6ec      	b.n	800abd2 <_strtod_l+0x5d2>
 800adf8:	f04f 32ff 	mov.w	r2, #4294967295
 800adfc:	fa02 f303 	lsl.w	r3, r2, r3
 800ae00:	ea03 0a0a 	and.w	sl, r3, sl
 800ae04:	e705      	b.n	800ac12 <_strtod_l+0x612>
 800ae06:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800ae0a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800ae0e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800ae12:	35e2      	adds	r5, #226	; 0xe2
 800ae14:	fa07 f505 	lsl.w	r5, r7, r5
 800ae18:	9714      	str	r7, [sp, #80]	; 0x50
 800ae1a:	e767      	b.n	800acec <_strtod_l+0x6ec>
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	2500      	movs	r5, #0
 800ae20:	9314      	str	r3, [sp, #80]	; 0x50
 800ae22:	e763      	b.n	800acec <_strtod_l+0x6ec>
 800ae24:	463a      	mov	r2, r7
 800ae26:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ae28:	4640      	mov	r0, r8
 800ae2a:	f003 feed 	bl	800ec08 <__lshift>
 800ae2e:	901a      	str	r0, [sp, #104]	; 0x68
 800ae30:	2800      	cmp	r0, #0
 800ae32:	d187      	bne.n	800ad44 <_strtod_l+0x744>
 800ae34:	e637      	b.n	800aaa6 <_strtod_l+0x4a6>
 800ae36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ae38:	9906      	ldr	r1, [sp, #24]
 800ae3a:	4640      	mov	r0, r8
 800ae3c:	f003 fe96 	bl	800eb6c <__pow5mult>
 800ae40:	9006      	str	r0, [sp, #24]
 800ae42:	2800      	cmp	r0, #0
 800ae44:	d181      	bne.n	800ad4a <_strtod_l+0x74a>
 800ae46:	e62e      	b.n	800aaa6 <_strtod_l+0x4a6>
 800ae48:	08010d40 	.word	0x08010d40
 800ae4c:	fffffc02 	.word	0xfffffc02
 800ae50:	f040 8086 	bne.w	800af60 <_strtod_l+0x960>
 800ae54:	9a08      	ldr	r2, [sp, #32]
 800ae56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae5a:	b332      	cbz	r2, 800aeaa <_strtod_l+0x8aa>
 800ae5c:	4aac      	ldr	r2, [pc, #688]	; (800b110 <_strtod_l+0xb10>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	4659      	mov	r1, fp
 800ae62:	d152      	bne.n	800af0a <_strtod_l+0x90a>
 800ae64:	9b05      	ldr	r3, [sp, #20]
 800ae66:	4650      	mov	r0, sl
 800ae68:	b1d3      	cbz	r3, 800aea0 <_strtod_l+0x8a0>
 800ae6a:	4aaa      	ldr	r2, [pc, #680]	; (800b114 <_strtod_l+0xb14>)
 800ae6c:	400a      	ands	r2, r1
 800ae6e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ae72:	f04f 34ff 	mov.w	r4, #4294967295
 800ae76:	d816      	bhi.n	800aea6 <_strtod_l+0x8a6>
 800ae78:	0d12      	lsrs	r2, r2, #20
 800ae7a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ae7e:	fa04 f303 	lsl.w	r3, r4, r3
 800ae82:	4283      	cmp	r3, r0
 800ae84:	d141      	bne.n	800af0a <_strtod_l+0x90a>
 800ae86:	4aa4      	ldr	r2, [pc, #656]	; (800b118 <_strtod_l+0xb18>)
 800ae88:	4291      	cmp	r1, r2
 800ae8a:	d102      	bne.n	800ae92 <_strtod_l+0x892>
 800ae8c:	3301      	adds	r3, #1
 800ae8e:	f43f ae0a 	beq.w	800aaa6 <_strtod_l+0x4a6>
 800ae92:	4ba0      	ldr	r3, [pc, #640]	; (800b114 <_strtod_l+0xb14>)
 800ae94:	400b      	ands	r3, r1
 800ae96:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ae9a:	f04f 0a00 	mov.w	sl, #0
 800ae9e:	e79d      	b.n	800addc <_strtod_l+0x7dc>
 800aea0:	f04f 33ff 	mov.w	r3, #4294967295
 800aea4:	e7ed      	b.n	800ae82 <_strtod_l+0x882>
 800aea6:	4623      	mov	r3, r4
 800aea8:	e7eb      	b.n	800ae82 <_strtod_l+0x882>
 800aeaa:	bb73      	cbnz	r3, 800af0a <_strtod_l+0x90a>
 800aeac:	f1ba 0f00 	cmp.w	sl, #0
 800aeb0:	d12b      	bne.n	800af0a <_strtod_l+0x90a>
 800aeb2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aeb6:	9a05      	ldr	r2, [sp, #20]
 800aeb8:	0d1b      	lsrs	r3, r3, #20
 800aeba:	051b      	lsls	r3, r3, #20
 800aebc:	b1e2      	cbz	r2, 800aef8 <_strtod_l+0x8f8>
 800aebe:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800aec2:	dc19      	bgt.n	800aef8 <_strtod_l+0x8f8>
 800aec4:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 800aec8:	f77f ae61 	ble.w	800ab8e <_strtod_l+0x58e>
 800aecc:	4b93      	ldr	r3, [pc, #588]	; (800b11c <_strtod_l+0xb1c>)
 800aece:	930d      	str	r3, [sp, #52]	; 0x34
 800aed0:	2300      	movs	r3, #0
 800aed2:	930c      	str	r3, [sp, #48]	; 0x30
 800aed4:	4650      	mov	r0, sl
 800aed6:	4659      	mov	r1, fp
 800aed8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800aedc:	f7f5 fb98 	bl	8000610 <__aeabi_dmul>
 800aee0:	4682      	mov	sl, r0
 800aee2:	468b      	mov	fp, r1
 800aee4:	2900      	cmp	r1, #0
 800aee6:	f47f ade9 	bne.w	800aabc <_strtod_l+0x4bc>
 800aeea:	2800      	cmp	r0, #0
 800aeec:	f47f ade6 	bne.w	800aabc <_strtod_l+0x4bc>
 800aef0:	2322      	movs	r3, #34	; 0x22
 800aef2:	f8c8 3000 	str.w	r3, [r8]
 800aef6:	e5e1      	b.n	800aabc <_strtod_l+0x4bc>
 800aef8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800aefc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800af00:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800af04:	f04f 3aff 	mov.w	sl, #4294967295
 800af08:	e768      	b.n	800addc <_strtod_l+0x7dc>
 800af0a:	b19d      	cbz	r5, 800af34 <_strtod_l+0x934>
 800af0c:	ea15 0f0b 	tst.w	r5, fp
 800af10:	f43f af64 	beq.w	800addc <_strtod_l+0x7dc>
 800af14:	9b08      	ldr	r3, [sp, #32]
 800af16:	9a05      	ldr	r2, [sp, #20]
 800af18:	4650      	mov	r0, sl
 800af1a:	4659      	mov	r1, fp
 800af1c:	b173      	cbz	r3, 800af3c <_strtod_l+0x93c>
 800af1e:	f7ff fb4d 	bl	800a5bc <sulp>
 800af22:	4602      	mov	r2, r0
 800af24:	460b      	mov	r3, r1
 800af26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800af2a:	f7f5 f9bf 	bl	80002ac <__adddf3>
 800af2e:	4682      	mov	sl, r0
 800af30:	468b      	mov	fp, r1
 800af32:	e753      	b.n	800addc <_strtod_l+0x7dc>
 800af34:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800af36:	ea13 0f0a 	tst.w	r3, sl
 800af3a:	e7e9      	b.n	800af10 <_strtod_l+0x910>
 800af3c:	f7ff fb3e 	bl	800a5bc <sulp>
 800af40:	4602      	mov	r2, r0
 800af42:	460b      	mov	r3, r1
 800af44:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800af48:	f7f5 f9ae 	bl	80002a8 <__aeabi_dsub>
 800af4c:	2200      	movs	r2, #0
 800af4e:	2300      	movs	r3, #0
 800af50:	4682      	mov	sl, r0
 800af52:	468b      	mov	fp, r1
 800af54:	f7f5 fdc4 	bl	8000ae0 <__aeabi_dcmpeq>
 800af58:	2800      	cmp	r0, #0
 800af5a:	f47f ae18 	bne.w	800ab8e <_strtod_l+0x58e>
 800af5e:	e73d      	b.n	800addc <_strtod_l+0x7dc>
 800af60:	9904      	ldr	r1, [sp, #16]
 800af62:	4648      	mov	r0, r9
 800af64:	f003 ffdf 	bl	800ef26 <__ratio>
 800af68:	2200      	movs	r2, #0
 800af6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800af6e:	4606      	mov	r6, r0
 800af70:	460f      	mov	r7, r1
 800af72:	f7f5 fdc9 	bl	8000b08 <__aeabi_dcmple>
 800af76:	2800      	cmp	r0, #0
 800af78:	d070      	beq.n	800b05c <_strtod_l+0xa5c>
 800af7a:	9b08      	ldr	r3, [sp, #32]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d043      	beq.n	800b008 <_strtod_l+0xa08>
 800af80:	4f67      	ldr	r7, [pc, #412]	; (800b120 <_strtod_l+0xb20>)
 800af82:	2600      	movs	r6, #0
 800af84:	4d66      	ldr	r5, [pc, #408]	; (800b120 <_strtod_l+0xb20>)
 800af86:	4b63      	ldr	r3, [pc, #396]	; (800b114 <_strtod_l+0xb14>)
 800af88:	ea0b 0303 	and.w	r3, fp, r3
 800af8c:	9314      	str	r3, [sp, #80]	; 0x50
 800af8e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800af90:	4b64      	ldr	r3, [pc, #400]	; (800b124 <_strtod_l+0xb24>)
 800af92:	429a      	cmp	r2, r3
 800af94:	f040 80ce 	bne.w	800b134 <_strtod_l+0xb34>
 800af98:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800af9c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800afa0:	4650      	mov	r0, sl
 800afa2:	4659      	mov	r1, fp
 800afa4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800afa8:	f003 fef8 	bl	800ed9c <__ulp>
 800afac:	4602      	mov	r2, r0
 800afae:	460b      	mov	r3, r1
 800afb0:	4630      	mov	r0, r6
 800afb2:	4639      	mov	r1, r7
 800afb4:	f7f5 fb2c 	bl	8000610 <__aeabi_dmul>
 800afb8:	4652      	mov	r2, sl
 800afba:	465b      	mov	r3, fp
 800afbc:	f7f5 f976 	bl	80002ac <__adddf3>
 800afc0:	4a54      	ldr	r2, [pc, #336]	; (800b114 <_strtod_l+0xb14>)
 800afc2:	4b59      	ldr	r3, [pc, #356]	; (800b128 <_strtod_l+0xb28>)
 800afc4:	400a      	ands	r2, r1
 800afc6:	429a      	cmp	r2, r3
 800afc8:	4682      	mov	sl, r0
 800afca:	d95d      	bls.n	800b088 <_strtod_l+0xa88>
 800afcc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800afce:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d103      	bne.n	800afde <_strtod_l+0x9de>
 800afd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afd8:	3301      	adds	r3, #1
 800afda:	f43f ad64 	beq.w	800aaa6 <_strtod_l+0x4a6>
 800afde:	f8df b138 	ldr.w	fp, [pc, #312]	; 800b118 <_strtod_l+0xb18>
 800afe2:	f04f 3aff 	mov.w	sl, #4294967295
 800afe6:	991a      	ldr	r1, [sp, #104]	; 0x68
 800afe8:	4640      	mov	r0, r8
 800afea:	f003 fc4b 	bl	800e884 <_Bfree>
 800afee:	9906      	ldr	r1, [sp, #24]
 800aff0:	4640      	mov	r0, r8
 800aff2:	f003 fc47 	bl	800e884 <_Bfree>
 800aff6:	9904      	ldr	r1, [sp, #16]
 800aff8:	4640      	mov	r0, r8
 800affa:	f003 fc43 	bl	800e884 <_Bfree>
 800affe:	4649      	mov	r1, r9
 800b000:	4640      	mov	r0, r8
 800b002:	f003 fc3f 	bl	800e884 <_Bfree>
 800b006:	e626      	b.n	800ac56 <_strtod_l+0x656>
 800b008:	f1ba 0f00 	cmp.w	sl, #0
 800b00c:	d118      	bne.n	800b040 <_strtod_l+0xa40>
 800b00e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b012:	b9e3      	cbnz	r3, 800b04e <_strtod_l+0xa4e>
 800b014:	2200      	movs	r2, #0
 800b016:	4b42      	ldr	r3, [pc, #264]	; (800b120 <_strtod_l+0xb20>)
 800b018:	4630      	mov	r0, r6
 800b01a:	4639      	mov	r1, r7
 800b01c:	f7f5 fd6a 	bl	8000af4 <__aeabi_dcmplt>
 800b020:	b9c8      	cbnz	r0, 800b056 <_strtod_l+0xa56>
 800b022:	2200      	movs	r2, #0
 800b024:	4b41      	ldr	r3, [pc, #260]	; (800b12c <_strtod_l+0xb2c>)
 800b026:	4630      	mov	r0, r6
 800b028:	4639      	mov	r1, r7
 800b02a:	f7f5 faf1 	bl	8000610 <__aeabi_dmul>
 800b02e:	4604      	mov	r4, r0
 800b030:	460d      	mov	r5, r1
 800b032:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b036:	9416      	str	r4, [sp, #88]	; 0x58
 800b038:	9317      	str	r3, [sp, #92]	; 0x5c
 800b03a:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800b03e:	e7a2      	b.n	800af86 <_strtod_l+0x986>
 800b040:	f1ba 0f01 	cmp.w	sl, #1
 800b044:	d103      	bne.n	800b04e <_strtod_l+0xa4e>
 800b046:	f1bb 0f00 	cmp.w	fp, #0
 800b04a:	f43f ada0 	beq.w	800ab8e <_strtod_l+0x58e>
 800b04e:	2600      	movs	r6, #0
 800b050:	4f37      	ldr	r7, [pc, #220]	; (800b130 <_strtod_l+0xb30>)
 800b052:	2400      	movs	r4, #0
 800b054:	e796      	b.n	800af84 <_strtod_l+0x984>
 800b056:	9c08      	ldr	r4, [sp, #32]
 800b058:	4d34      	ldr	r5, [pc, #208]	; (800b12c <_strtod_l+0xb2c>)
 800b05a:	e7ea      	b.n	800b032 <_strtod_l+0xa32>
 800b05c:	4b33      	ldr	r3, [pc, #204]	; (800b12c <_strtod_l+0xb2c>)
 800b05e:	2200      	movs	r2, #0
 800b060:	4630      	mov	r0, r6
 800b062:	4639      	mov	r1, r7
 800b064:	f7f5 fad4 	bl	8000610 <__aeabi_dmul>
 800b068:	9b08      	ldr	r3, [sp, #32]
 800b06a:	4604      	mov	r4, r0
 800b06c:	460d      	mov	r5, r1
 800b06e:	b933      	cbnz	r3, 800b07e <_strtod_l+0xa7e>
 800b070:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b074:	9010      	str	r0, [sp, #64]	; 0x40
 800b076:	9311      	str	r3, [sp, #68]	; 0x44
 800b078:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b07c:	e783      	b.n	800af86 <_strtod_l+0x986>
 800b07e:	4602      	mov	r2, r0
 800b080:	460b      	mov	r3, r1
 800b082:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b086:	e7f7      	b.n	800b078 <_strtod_l+0xa78>
 800b088:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
 800b08c:	9b05      	ldr	r3, [sp, #20]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d1a9      	bne.n	800afe6 <_strtod_l+0x9e6>
 800b092:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b096:	0d1b      	lsrs	r3, r3, #20
 800b098:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b09a:	051b      	lsls	r3, r3, #20
 800b09c:	429a      	cmp	r2, r3
 800b09e:	465e      	mov	r6, fp
 800b0a0:	d1a1      	bne.n	800afe6 <_strtod_l+0x9e6>
 800b0a2:	4629      	mov	r1, r5
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	f7f5 fd63 	bl	8000b70 <__aeabi_d2iz>
 800b0aa:	f7f5 fa4b 	bl	8000544 <__aeabi_i2d>
 800b0ae:	460b      	mov	r3, r1
 800b0b0:	4602      	mov	r2, r0
 800b0b2:	4629      	mov	r1, r5
 800b0b4:	4620      	mov	r0, r4
 800b0b6:	f7f5 f8f7 	bl	80002a8 <__aeabi_dsub>
 800b0ba:	9b08      	ldr	r3, [sp, #32]
 800b0bc:	4604      	mov	r4, r0
 800b0be:	460d      	mov	r5, r1
 800b0c0:	b933      	cbnz	r3, 800b0d0 <_strtod_l+0xad0>
 800b0c2:	f1ba 0f00 	cmp.w	sl, #0
 800b0c6:	d103      	bne.n	800b0d0 <_strtod_l+0xad0>
 800b0c8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b0cc:	2e00      	cmp	r6, #0
 800b0ce:	d06c      	beq.n	800b1aa <_strtod_l+0xbaa>
 800b0d0:	a30b      	add	r3, pc, #44	; (adr r3, 800b100 <_strtod_l+0xb00>)
 800b0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d6:	4620      	mov	r0, r4
 800b0d8:	4629      	mov	r1, r5
 800b0da:	f7f5 fd0b 	bl	8000af4 <__aeabi_dcmplt>
 800b0de:	2800      	cmp	r0, #0
 800b0e0:	f47f acec 	bne.w	800aabc <_strtod_l+0x4bc>
 800b0e4:	a308      	add	r3, pc, #32	; (adr r3, 800b108 <_strtod_l+0xb08>)
 800b0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	4629      	mov	r1, r5
 800b0ee:	f7f5 fd1f 	bl	8000b30 <__aeabi_dcmpgt>
 800b0f2:	2800      	cmp	r0, #0
 800b0f4:	f43f af77 	beq.w	800afe6 <_strtod_l+0x9e6>
 800b0f8:	e4e0      	b.n	800aabc <_strtod_l+0x4bc>
 800b0fa:	bf00      	nop
 800b0fc:	f3af 8000 	nop.w
 800b100:	94a03595 	.word	0x94a03595
 800b104:	3fdfffff 	.word	0x3fdfffff
 800b108:	35afe535 	.word	0x35afe535
 800b10c:	3fe00000 	.word	0x3fe00000
 800b110:	000fffff 	.word	0x000fffff
 800b114:	7ff00000 	.word	0x7ff00000
 800b118:	7fefffff 	.word	0x7fefffff
 800b11c:	39500000 	.word	0x39500000
 800b120:	3ff00000 	.word	0x3ff00000
 800b124:	7fe00000 	.word	0x7fe00000
 800b128:	7c9fffff 	.word	0x7c9fffff
 800b12c:	3fe00000 	.word	0x3fe00000
 800b130:	bff00000 	.word	0xbff00000
 800b134:	9b05      	ldr	r3, [sp, #20]
 800b136:	b313      	cbz	r3, 800b17e <_strtod_l+0xb7e>
 800b138:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b13a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b13e:	d81e      	bhi.n	800b17e <_strtod_l+0xb7e>
 800b140:	a325      	add	r3, pc, #148	; (adr r3, 800b1d8 <_strtod_l+0xbd8>)
 800b142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b146:	4620      	mov	r0, r4
 800b148:	4629      	mov	r1, r5
 800b14a:	f7f5 fcdd 	bl	8000b08 <__aeabi_dcmple>
 800b14e:	b190      	cbz	r0, 800b176 <_strtod_l+0xb76>
 800b150:	4629      	mov	r1, r5
 800b152:	4620      	mov	r0, r4
 800b154:	f7f5 fd34 	bl	8000bc0 <__aeabi_d2uiz>
 800b158:	2800      	cmp	r0, #0
 800b15a:	bf08      	it	eq
 800b15c:	2001      	moveq	r0, #1
 800b15e:	f7f5 f9e1 	bl	8000524 <__aeabi_ui2d>
 800b162:	9b08      	ldr	r3, [sp, #32]
 800b164:	4604      	mov	r4, r0
 800b166:	460d      	mov	r5, r1
 800b168:	b9d3      	cbnz	r3, 800b1a0 <_strtod_l+0xba0>
 800b16a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b16e:	9012      	str	r0, [sp, #72]	; 0x48
 800b170:	9313      	str	r3, [sp, #76]	; 0x4c
 800b172:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800b176:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b178:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800b17c:	1a9f      	subs	r7, r3, r2
 800b17e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b182:	f003 fe0b 	bl	800ed9c <__ulp>
 800b186:	4602      	mov	r2, r0
 800b188:	460b      	mov	r3, r1
 800b18a:	4630      	mov	r0, r6
 800b18c:	4639      	mov	r1, r7
 800b18e:	f7f5 fa3f 	bl	8000610 <__aeabi_dmul>
 800b192:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b196:	f7f5 f889 	bl	80002ac <__adddf3>
 800b19a:	4682      	mov	sl, r0
 800b19c:	468b      	mov	fp, r1
 800b19e:	e775      	b.n	800b08c <_strtod_l+0xa8c>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	460b      	mov	r3, r1
 800b1a4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800b1a8:	e7e3      	b.n	800b172 <_strtod_l+0xb72>
 800b1aa:	a30d      	add	r3, pc, #52	; (adr r3, 800b1e0 <_strtod_l+0xbe0>)
 800b1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b0:	f7f5 fca0 	bl	8000af4 <__aeabi_dcmplt>
 800b1b4:	e79d      	b.n	800b0f2 <_strtod_l+0xaf2>
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	9309      	str	r3, [sp, #36]	; 0x24
 800b1ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b1bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b1be:	6013      	str	r3, [r2, #0]
 800b1c0:	f7ff ba62 	b.w	800a688 <_strtod_l+0x88>
 800b1c4:	2b65      	cmp	r3, #101	; 0x65
 800b1c6:	f04f 0200 	mov.w	r2, #0
 800b1ca:	f43f abb2 	beq.w	800a932 <_strtod_l+0x332>
 800b1ce:	4615      	mov	r5, r2
 800b1d0:	2101      	movs	r1, #1
 800b1d2:	f7ff bad1 	b.w	800a778 <_strtod_l+0x178>
 800b1d6:	bf00      	nop
 800b1d8:	ffc00000 	.word	0xffc00000
 800b1dc:	41dfffff 	.word	0x41dfffff
 800b1e0:	94a03595 	.word	0x94a03595
 800b1e4:	3fcfffff 	.word	0x3fcfffff

0800b1e8 <strtod>:
 800b1e8:	4b06      	ldr	r3, [pc, #24]	; (800b204 <strtod+0x1c>)
 800b1ea:	4a07      	ldr	r2, [pc, #28]	; (800b208 <strtod+0x20>)
 800b1ec:	b410      	push	{r4}
 800b1ee:	681c      	ldr	r4, [r3, #0]
 800b1f0:	6a23      	ldr	r3, [r4, #32]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	bf08      	it	eq
 800b1f6:	4613      	moveq	r3, r2
 800b1f8:	460a      	mov	r2, r1
 800b1fa:	4601      	mov	r1, r0
 800b1fc:	4620      	mov	r0, r4
 800b1fe:	bc10      	pop	{r4}
 800b200:	f7ff b9fe 	b.w	800a600 <_strtod_l>
 800b204:	20000010 	.word	0x20000010
 800b208:	2000055c 	.word	0x2000055c

0800b20c <strtok>:
 800b20c:	4b14      	ldr	r3, [pc, #80]	; (800b260 <strtok+0x54>)
 800b20e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b212:	681d      	ldr	r5, [r3, #0]
 800b214:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
 800b218:	4606      	mov	r6, r0
 800b21a:	460f      	mov	r7, r1
 800b21c:	b9bc      	cbnz	r4, 800b24e <strtok+0x42>
 800b21e:	2050      	movs	r0, #80	; 0x50
 800b220:	f7fe fbc0 	bl	80099a4 <malloc>
 800b224:	f8c5 00e8 	str.w	r0, [r5, #232]	; 0xe8
 800b228:	6004      	str	r4, [r0, #0]
 800b22a:	6044      	str	r4, [r0, #4]
 800b22c:	6084      	str	r4, [r0, #8]
 800b22e:	60c4      	str	r4, [r0, #12]
 800b230:	6104      	str	r4, [r0, #16]
 800b232:	6144      	str	r4, [r0, #20]
 800b234:	6184      	str	r4, [r0, #24]
 800b236:	6284      	str	r4, [r0, #40]	; 0x28
 800b238:	62c4      	str	r4, [r0, #44]	; 0x2c
 800b23a:	6304      	str	r4, [r0, #48]	; 0x30
 800b23c:	6344      	str	r4, [r0, #52]	; 0x34
 800b23e:	6384      	str	r4, [r0, #56]	; 0x38
 800b240:	63c4      	str	r4, [r0, #60]	; 0x3c
 800b242:	6404      	str	r4, [r0, #64]	; 0x40
 800b244:	6444      	str	r4, [r0, #68]	; 0x44
 800b246:	6484      	str	r4, [r0, #72]	; 0x48
 800b248:	64c4      	str	r4, [r0, #76]	; 0x4c
 800b24a:	7704      	strb	r4, [r0, #28]
 800b24c:	6244      	str	r4, [r0, #36]	; 0x24
 800b24e:	f8d5 20e8 	ldr.w	r2, [r5, #232]	; 0xe8
 800b252:	4639      	mov	r1, r7
 800b254:	4630      	mov	r0, r6
 800b256:	2301      	movs	r3, #1
 800b258:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b25c:	f000 b802 	b.w	800b264 <__strtok_r>
 800b260:	20000010 	.word	0x20000010

0800b264 <__strtok_r>:
 800b264:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b266:	b918      	cbnz	r0, 800b270 <__strtok_r+0xc>
 800b268:	6810      	ldr	r0, [r2, #0]
 800b26a:	b908      	cbnz	r0, 800b270 <__strtok_r+0xc>
 800b26c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b26e:	4620      	mov	r0, r4
 800b270:	4604      	mov	r4, r0
 800b272:	460f      	mov	r7, r1
 800b274:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b278:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b27c:	b91e      	cbnz	r6, 800b286 <__strtok_r+0x22>
 800b27e:	b965      	cbnz	r5, 800b29a <__strtok_r+0x36>
 800b280:	6015      	str	r5, [r2, #0]
 800b282:	4628      	mov	r0, r5
 800b284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b286:	42b5      	cmp	r5, r6
 800b288:	d1f6      	bne.n	800b278 <__strtok_r+0x14>
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d1ef      	bne.n	800b26e <__strtok_r+0xa>
 800b28e:	6014      	str	r4, [r2, #0]
 800b290:	7003      	strb	r3, [r0, #0]
 800b292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b294:	461c      	mov	r4, r3
 800b296:	e00c      	b.n	800b2b2 <__strtok_r+0x4e>
 800b298:	b915      	cbnz	r5, 800b2a0 <__strtok_r+0x3c>
 800b29a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b29e:	460e      	mov	r6, r1
 800b2a0:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b2a4:	42ab      	cmp	r3, r5
 800b2a6:	d1f7      	bne.n	800b298 <__strtok_r+0x34>
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d0f3      	beq.n	800b294 <__strtok_r+0x30>
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b2b2:	6014      	str	r4, [r2, #0]
 800b2b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800b2b8 <time>:
 800b2b8:	b513      	push	{r0, r1, r4, lr}
 800b2ba:	4b08      	ldr	r3, [pc, #32]	; (800b2dc <time+0x24>)
 800b2bc:	4604      	mov	r4, r0
 800b2be:	2200      	movs	r2, #0
 800b2c0:	6818      	ldr	r0, [r3, #0]
 800b2c2:	4669      	mov	r1, sp
 800b2c4:	f003 f92c 	bl	800e520 <_gettimeofday_r>
 800b2c8:	2800      	cmp	r0, #0
 800b2ca:	bfbc      	itt	lt
 800b2cc:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2d0:	9300      	strlt	r3, [sp, #0]
 800b2d2:	9800      	ldr	r0, [sp, #0]
 800b2d4:	b104      	cbz	r4, 800b2d8 <time+0x20>
 800b2d6:	6020      	str	r0, [r4, #0]
 800b2d8:	b002      	add	sp, #8
 800b2da:	bd10      	pop	{r4, pc}
 800b2dc:	20000010 	.word	0x20000010

0800b2e0 <__tzcalc_limits>:
 800b2e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e4:	4604      	mov	r4, r0
 800b2e6:	f003 f92d 	bl	800e544 <__gettzinfo>
 800b2ea:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800b2ee:	429c      	cmp	r4, r3
 800b2f0:	f340 8098 	ble.w	800b424 <__tzcalc_limits+0x144>
 800b2f4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 800b2f8:	18e3      	adds	r3, r4, r3
 800b2fa:	109b      	asrs	r3, r3, #2
 800b2fc:	f240 126d 	movw	r2, #365	; 0x16d
 800b300:	f2a4 75b2 	subw	r5, r4, #1970	; 0x7b2
 800b304:	fb02 3505 	mla	r5, r2, r5, r3
 800b308:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800b30c:	f2a4 736d 	subw	r3, r4, #1901	; 0x76d
 800b310:	fb93 f3f2 	sdiv	r3, r3, r2
 800b314:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 800b318:	441d      	add	r5, r3
 800b31a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800b31e:	18a2      	adds	r2, r4, r2
 800b320:	fb94 f7f3 	sdiv	r7, r4, r3
 800b324:	fb92 f2f3 	sdiv	r2, r2, r3
 800b328:	fb03 4717 	mls	r7, r3, r7, r4
 800b32c:	f100 0338 	add.w	r3, r0, #56	; 0x38
 800b330:	4415      	add	r5, r2
 800b332:	fab7 fe87 	clz	lr, r7
 800b336:	2264      	movs	r2, #100	; 0x64
 800b338:	9301      	str	r3, [sp, #4]
 800b33a:	f004 0303 	and.w	r3, r4, #3
 800b33e:	fb94 f6f2 	sdiv	r6, r4, r2
 800b342:	6044      	str	r4, [r0, #4]
 800b344:	fb02 4616 	mls	r6, r2, r6, r4
 800b348:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 800b34c:	4601      	mov	r1, r0
 800b34e:	9300      	str	r3, [sp, #0]
 800b350:	f06f 4c40 	mvn.w	ip, #3221225472	; 0xc0000000
 800b354:	7a0b      	ldrb	r3, [r1, #8]
 800b356:	2b4a      	cmp	r3, #74	; 0x4a
 800b358:	d123      	bne.n	800b3a2 <__tzcalc_limits+0xc2>
 800b35a:	694c      	ldr	r4, [r1, #20]
 800b35c:	9a00      	ldr	r2, [sp, #0]
 800b35e:	192b      	adds	r3, r5, r4
 800b360:	b902      	cbnz	r2, 800b364 <__tzcalc_limits+0x84>
 800b362:	b906      	cbnz	r6, 800b366 <__tzcalc_limits+0x86>
 800b364:	b9df      	cbnz	r7, 800b39e <__tzcalc_limits+0xbe>
 800b366:	2c3b      	cmp	r4, #59	; 0x3b
 800b368:	bfd4      	ite	le
 800b36a:	2400      	movle	r4, #0
 800b36c:	2401      	movgt	r4, #1
 800b36e:	441c      	add	r4, r3
 800b370:	3c01      	subs	r4, #1
 800b372:	4b2d      	ldr	r3, [pc, #180]	; (800b428 <__tzcalc_limits+0x148>)
 800b374:	698a      	ldr	r2, [r1, #24]
 800b376:	fb03 2404 	mla	r4, r3, r4, r2
 800b37a:	6a0b      	ldr	r3, [r1, #32]
 800b37c:	441c      	add	r4, r3
 800b37e:	f841 4f1c 	str.w	r4, [r1, #28]!
 800b382:	9b01      	ldr	r3, [sp, #4]
 800b384:	428b      	cmp	r3, r1
 800b386:	d1e5      	bne.n	800b354 <__tzcalc_limits+0x74>
 800b388:	69c3      	ldr	r3, [r0, #28]
 800b38a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800b38c:	4293      	cmp	r3, r2
 800b38e:	bfac      	ite	ge
 800b390:	2300      	movge	r3, #0
 800b392:	2301      	movlt	r3, #1
 800b394:	6003      	str	r3, [r0, #0]
 800b396:	2001      	movs	r0, #1
 800b398:	b003      	add	sp, #12
 800b39a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b39e:	2400      	movs	r4, #0
 800b3a0:	e7e5      	b.n	800b36e <__tzcalc_limits+0x8e>
 800b3a2:	2b44      	cmp	r3, #68	; 0x44
 800b3a4:	d102      	bne.n	800b3ac <__tzcalc_limits+0xcc>
 800b3a6:	694b      	ldr	r3, [r1, #20]
 800b3a8:	18ec      	adds	r4, r5, r3
 800b3aa:	e7e2      	b.n	800b372 <__tzcalc_limits+0x92>
 800b3ac:	9b00      	ldr	r3, [sp, #0]
 800b3ae:	bb7b      	cbnz	r3, 800b410 <__tzcalc_limits+0x130>
 800b3b0:	2e00      	cmp	r6, #0
 800b3b2:	bf0c      	ite	eq
 800b3b4:	46f0      	moveq	r8, lr
 800b3b6:	f04f 0801 	movne.w	r8, #1
 800b3ba:	4b1c      	ldr	r3, [pc, #112]	; (800b42c <__tzcalc_limits+0x14c>)
 800b3bc:	68cc      	ldr	r4, [r1, #12]
 800b3be:	2230      	movs	r2, #48	; 0x30
 800b3c0:	fb02 3808 	mla	r8, r2, r8, r3
 800b3c4:	f1a8 0a04 	sub.w	sl, r8, #4
 800b3c8:	462b      	mov	r3, r5
 800b3ca:	f04f 0901 	mov.w	r9, #1
 800b3ce:	45a1      	cmp	r9, r4
 800b3d0:	db20      	blt.n	800b414 <__tzcalc_limits+0x134>
 800b3d2:	2c01      	cmp	r4, #1
 800b3d4:	bfb8      	it	lt
 800b3d6:	2401      	movlt	r4, #1
 800b3d8:	46a1      	mov	r9, r4
 800b3da:	f103 0b04 	add.w	fp, r3, #4
 800b3de:	2207      	movs	r2, #7
 800b3e0:	694c      	ldr	r4, [r1, #20]
 800b3e2:	fb9b faf2 	sdiv	sl, fp, r2
 800b3e6:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 800b3ea:	ebab 0a0a 	sub.w	sl, fp, sl
 800b3ee:	ebb4 0a0a 	subs.w	sl, r4, sl
 800b3f2:	690c      	ldr	r4, [r1, #16]
 800b3f4:	44e1      	add	r9, ip
 800b3f6:	f104 34ff 	add.w	r4, r4, #4294967295
 800b3fa:	bf48      	it	mi
 800b3fc:	4492      	addmi	sl, r2
 800b3fe:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800b402:	f858 8029 	ldr.w	r8, [r8, r9, lsl #2]
 800b406:	4454      	add	r4, sl
 800b408:	4544      	cmp	r4, r8
 800b40a:	da09      	bge.n	800b420 <__tzcalc_limits+0x140>
 800b40c:	441c      	add	r4, r3
 800b40e:	e7b0      	b.n	800b372 <__tzcalc_limits+0x92>
 800b410:	46f0      	mov	r8, lr
 800b412:	e7d2      	b.n	800b3ba <__tzcalc_limits+0xda>
 800b414:	f85a bf04 	ldr.w	fp, [sl, #4]!
 800b418:	f109 0901 	add.w	r9, r9, #1
 800b41c:	445b      	add	r3, fp
 800b41e:	e7d6      	b.n	800b3ce <__tzcalc_limits+0xee>
 800b420:	3c07      	subs	r4, #7
 800b422:	e7f1      	b.n	800b408 <__tzcalc_limits+0x128>
 800b424:	2000      	movs	r0, #0
 800b426:	e7b7      	b.n	800b398 <__tzcalc_limits+0xb8>
 800b428:	00015180 	.word	0x00015180
 800b42c:	08010cb0 	.word	0x08010cb0

0800b430 <__tz_lock>:
 800b430:	4801      	ldr	r0, [pc, #4]	; (800b438 <__tz_lock+0x8>)
 800b432:	f003 b957 	b.w	800e6e4 <__retarget_lock_acquire>
 800b436:	bf00      	nop
 800b438:	200021f7 	.word	0x200021f7

0800b43c <__tz_unlock>:
 800b43c:	4801      	ldr	r0, [pc, #4]	; (800b444 <__tz_unlock+0x8>)
 800b43e:	f003 b953 	b.w	800e6e8 <__retarget_lock_release>
 800b442:	bf00      	nop
 800b444:	200021f7 	.word	0x200021f7

0800b448 <_tzset_unlocked>:
 800b448:	4b01      	ldr	r3, [pc, #4]	; (800b450 <_tzset_unlocked+0x8>)
 800b44a:	6818      	ldr	r0, [r3, #0]
 800b44c:	f000 b802 	b.w	800b454 <_tzset_unlocked_r>
 800b450:	20000010 	.word	0x20000010

0800b454 <_tzset_unlocked_r>:
 800b454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b458:	b08d      	sub	sp, #52	; 0x34
 800b45a:	4607      	mov	r7, r0
 800b45c:	f003 f872 	bl	800e544 <__gettzinfo>
 800b460:	49b1      	ldr	r1, [pc, #708]	; (800b728 <_tzset_unlocked_r+0x2d4>)
 800b462:	4eb2      	ldr	r6, [pc, #712]	; (800b72c <_tzset_unlocked_r+0x2d8>)
 800b464:	4605      	mov	r5, r0
 800b466:	4638      	mov	r0, r7
 800b468:	f003 f852 	bl	800e510 <_getenv_r>
 800b46c:	4604      	mov	r4, r0
 800b46e:	b970      	cbnz	r0, 800b48e <_tzset_unlocked_r+0x3a>
 800b470:	4baf      	ldr	r3, [pc, #700]	; (800b730 <_tzset_unlocked_r+0x2dc>)
 800b472:	4ab0      	ldr	r2, [pc, #704]	; (800b734 <_tzset_unlocked_r+0x2e0>)
 800b474:	6018      	str	r0, [r3, #0]
 800b476:	4bb0      	ldr	r3, [pc, #704]	; (800b738 <_tzset_unlocked_r+0x2e4>)
 800b478:	6018      	str	r0, [r3, #0]
 800b47a:	4bb0      	ldr	r3, [pc, #704]	; (800b73c <_tzset_unlocked_r+0x2e8>)
 800b47c:	6830      	ldr	r0, [r6, #0]
 800b47e:	601a      	str	r2, [r3, #0]
 800b480:	605a      	str	r2, [r3, #4]
 800b482:	f7fe fa97 	bl	80099b4 <free>
 800b486:	6034      	str	r4, [r6, #0]
 800b488:	b00d      	add	sp, #52	; 0x34
 800b48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b48e:	6831      	ldr	r1, [r6, #0]
 800b490:	2900      	cmp	r1, #0
 800b492:	d160      	bne.n	800b556 <_tzset_unlocked_r+0x102>
 800b494:	6830      	ldr	r0, [r6, #0]
 800b496:	f7fe fa8d 	bl	80099b4 <free>
 800b49a:	4620      	mov	r0, r4
 800b49c:	f7f4 fea2 	bl	80001e4 <strlen>
 800b4a0:	1c41      	adds	r1, r0, #1
 800b4a2:	4638      	mov	r0, r7
 800b4a4:	f7fe fa8e 	bl	80099c4 <_malloc_r>
 800b4a8:	6030      	str	r0, [r6, #0]
 800b4aa:	2800      	cmp	r0, #0
 800b4ac:	d158      	bne.n	800b560 <_tzset_unlocked_r+0x10c>
 800b4ae:	7823      	ldrb	r3, [r4, #0]
 800b4b0:	4aa3      	ldr	r2, [pc, #652]	; (800b740 <_tzset_unlocked_r+0x2ec>)
 800b4b2:	49a4      	ldr	r1, [pc, #656]	; (800b744 <_tzset_unlocked_r+0x2f0>)
 800b4b4:	2b3a      	cmp	r3, #58	; 0x3a
 800b4b6:	bf08      	it	eq
 800b4b8:	3401      	addeq	r4, #1
 800b4ba:	ae0a      	add	r6, sp, #40	; 0x28
 800b4bc:	4633      	mov	r3, r6
 800b4be:	4620      	mov	r0, r4
 800b4c0:	f003 ff14 	bl	800f2ec <siscanf>
 800b4c4:	2800      	cmp	r0, #0
 800b4c6:	dddf      	ble.n	800b488 <_tzset_unlocked_r+0x34>
 800b4c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4ca:	18e7      	adds	r7, r4, r3
 800b4cc:	5ce3      	ldrb	r3, [r4, r3]
 800b4ce:	2b2d      	cmp	r3, #45	; 0x2d
 800b4d0:	d14a      	bne.n	800b568 <_tzset_unlocked_r+0x114>
 800b4d2:	3701      	adds	r7, #1
 800b4d4:	f04f 34ff 	mov.w	r4, #4294967295
 800b4d8:	f10d 0a20 	add.w	sl, sp, #32
 800b4dc:	f10d 0b1e 	add.w	fp, sp, #30
 800b4e0:	f04f 0800 	mov.w	r8, #0
 800b4e4:	9603      	str	r6, [sp, #12]
 800b4e6:	f8cd a008 	str.w	sl, [sp, #8]
 800b4ea:	9601      	str	r6, [sp, #4]
 800b4ec:	f8cd b000 	str.w	fp, [sp]
 800b4f0:	4633      	mov	r3, r6
 800b4f2:	aa07      	add	r2, sp, #28
 800b4f4:	4994      	ldr	r1, [pc, #592]	; (800b748 <_tzset_unlocked_r+0x2f4>)
 800b4f6:	f8ad 801e 	strh.w	r8, [sp, #30]
 800b4fa:	4638      	mov	r0, r7
 800b4fc:	f8ad 8020 	strh.w	r8, [sp, #32]
 800b500:	f003 fef4 	bl	800f2ec <siscanf>
 800b504:	4540      	cmp	r0, r8
 800b506:	ddbf      	ble.n	800b488 <_tzset_unlocked_r+0x34>
 800b508:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800b50c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800b510:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800b754 <_tzset_unlocked_r+0x300>
 800b514:	213c      	movs	r1, #60	; 0x3c
 800b516:	fb01 2203 	mla	r2, r1, r3, r2
 800b51a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800b51e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800b522:	fb01 2303 	mla	r3, r1, r3, r2
 800b526:	435c      	muls	r4, r3
 800b528:	622c      	str	r4, [r5, #32]
 800b52a:	4c84      	ldr	r4, [pc, #528]	; (800b73c <_tzset_unlocked_r+0x2e8>)
 800b52c:	4b84      	ldr	r3, [pc, #528]	; (800b740 <_tzset_unlocked_r+0x2ec>)
 800b52e:	6023      	str	r3, [r4, #0]
 800b530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b532:	4984      	ldr	r1, [pc, #528]	; (800b744 <_tzset_unlocked_r+0x2f0>)
 800b534:	441f      	add	r7, r3
 800b536:	464a      	mov	r2, r9
 800b538:	4633      	mov	r3, r6
 800b53a:	4638      	mov	r0, r7
 800b53c:	f003 fed6 	bl	800f2ec <siscanf>
 800b540:	4540      	cmp	r0, r8
 800b542:	dc16      	bgt.n	800b572 <_tzset_unlocked_r+0x11e>
 800b544:	6823      	ldr	r3, [r4, #0]
 800b546:	6063      	str	r3, [r4, #4]
 800b548:	4b79      	ldr	r3, [pc, #484]	; (800b730 <_tzset_unlocked_r+0x2dc>)
 800b54a:	6a2a      	ldr	r2, [r5, #32]
 800b54c:	601a      	str	r2, [r3, #0]
 800b54e:	4b7a      	ldr	r3, [pc, #488]	; (800b738 <_tzset_unlocked_r+0x2e4>)
 800b550:	f8c3 8000 	str.w	r8, [r3]
 800b554:	e798      	b.n	800b488 <_tzset_unlocked_r+0x34>
 800b556:	f7f4 fe3b 	bl	80001d0 <strcmp>
 800b55a:	2800      	cmp	r0, #0
 800b55c:	d094      	beq.n	800b488 <_tzset_unlocked_r+0x34>
 800b55e:	e799      	b.n	800b494 <_tzset_unlocked_r+0x40>
 800b560:	4621      	mov	r1, r4
 800b562:	f003 ff32 	bl	800f3ca <strcpy>
 800b566:	e7a2      	b.n	800b4ae <_tzset_unlocked_r+0x5a>
 800b568:	2b2b      	cmp	r3, #43	; 0x2b
 800b56a:	bf08      	it	eq
 800b56c:	3701      	addeq	r7, #1
 800b56e:	2401      	movs	r4, #1
 800b570:	e7b2      	b.n	800b4d8 <_tzset_unlocked_r+0x84>
 800b572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b574:	f8c4 9004 	str.w	r9, [r4, #4]
 800b578:	18fc      	adds	r4, r7, r3
 800b57a:	5cfb      	ldrb	r3, [r7, r3]
 800b57c:	2b2d      	cmp	r3, #45	; 0x2d
 800b57e:	f040 8092 	bne.w	800b6a6 <_tzset_unlocked_r+0x252>
 800b582:	3401      	adds	r4, #1
 800b584:	f04f 37ff 	mov.w	r7, #4294967295
 800b588:	2300      	movs	r3, #0
 800b58a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b58e:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b592:	f8ad 3020 	strh.w	r3, [sp, #32]
 800b596:	930a      	str	r3, [sp, #40]	; 0x28
 800b598:	9603      	str	r6, [sp, #12]
 800b59a:	f8cd a008 	str.w	sl, [sp, #8]
 800b59e:	9601      	str	r6, [sp, #4]
 800b5a0:	f8cd b000 	str.w	fp, [sp]
 800b5a4:	4633      	mov	r3, r6
 800b5a6:	aa07      	add	r2, sp, #28
 800b5a8:	4967      	ldr	r1, [pc, #412]	; (800b748 <_tzset_unlocked_r+0x2f4>)
 800b5aa:	4620      	mov	r0, r4
 800b5ac:	f003 fe9e 	bl	800f2ec <siscanf>
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	dc7d      	bgt.n	800b6b0 <_tzset_unlocked_r+0x25c>
 800b5b4:	6a2b      	ldr	r3, [r5, #32]
 800b5b6:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800b5ba:	63eb      	str	r3, [r5, #60]	; 0x3c
 800b5bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5be:	462f      	mov	r7, r5
 800b5c0:	441c      	add	r4, r3
 800b5c2:	f04f 0900 	mov.w	r9, #0
 800b5c6:	7823      	ldrb	r3, [r4, #0]
 800b5c8:	2b2c      	cmp	r3, #44	; 0x2c
 800b5ca:	bf08      	it	eq
 800b5cc:	3401      	addeq	r4, #1
 800b5ce:	f894 8000 	ldrb.w	r8, [r4]
 800b5d2:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800b5d6:	d17b      	bne.n	800b6d0 <_tzset_unlocked_r+0x27c>
 800b5d8:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800b5dc:	9302      	str	r3, [sp, #8]
 800b5de:	ab09      	add	r3, sp, #36	; 0x24
 800b5e0:	9300      	str	r3, [sp, #0]
 800b5e2:	9603      	str	r6, [sp, #12]
 800b5e4:	9601      	str	r6, [sp, #4]
 800b5e6:	4633      	mov	r3, r6
 800b5e8:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800b5ec:	4957      	ldr	r1, [pc, #348]	; (800b74c <_tzset_unlocked_r+0x2f8>)
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	f003 fe7c 	bl	800f2ec <siscanf>
 800b5f4:	2803      	cmp	r0, #3
 800b5f6:	f47f af47 	bne.w	800b488 <_tzset_unlocked_r+0x34>
 800b5fa:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800b5fe:	1e4b      	subs	r3, r1, #1
 800b600:	2b0b      	cmp	r3, #11
 800b602:	f63f af41 	bhi.w	800b488 <_tzset_unlocked_r+0x34>
 800b606:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800b60a:	1e53      	subs	r3, r2, #1
 800b60c:	2b04      	cmp	r3, #4
 800b60e:	f63f af3b 	bhi.w	800b488 <_tzset_unlocked_r+0x34>
 800b612:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800b616:	2b06      	cmp	r3, #6
 800b618:	f63f af36 	bhi.w	800b488 <_tzset_unlocked_r+0x34>
 800b61c:	f887 8008 	strb.w	r8, [r7, #8]
 800b620:	60f9      	str	r1, [r7, #12]
 800b622:	613a      	str	r2, [r7, #16]
 800b624:	617b      	str	r3, [r7, #20]
 800b626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b628:	eb04 0803 	add.w	r8, r4, r3
 800b62c:	2302      	movs	r3, #2
 800b62e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b632:	2300      	movs	r3, #0
 800b634:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b638:	f8ad 3020 	strh.w	r3, [sp, #32]
 800b63c:	930a      	str	r3, [sp, #40]	; 0x28
 800b63e:	f898 3000 	ldrb.w	r3, [r8]
 800b642:	2b2f      	cmp	r3, #47	; 0x2f
 800b644:	d10b      	bne.n	800b65e <_tzset_unlocked_r+0x20a>
 800b646:	9603      	str	r6, [sp, #12]
 800b648:	f8cd a008 	str.w	sl, [sp, #8]
 800b64c:	9601      	str	r6, [sp, #4]
 800b64e:	f8cd b000 	str.w	fp, [sp]
 800b652:	4633      	mov	r3, r6
 800b654:	aa07      	add	r2, sp, #28
 800b656:	493e      	ldr	r1, [pc, #248]	; (800b750 <_tzset_unlocked_r+0x2fc>)
 800b658:	4640      	mov	r0, r8
 800b65a:	f003 fe47 	bl	800f2ec <siscanf>
 800b65e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800b662:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800b666:	213c      	movs	r1, #60	; 0x3c
 800b668:	fb01 2203 	mla	r2, r1, r3, r2
 800b66c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800b670:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800b674:	fb01 2303 	mla	r3, r1, r3, r2
 800b678:	61bb      	str	r3, [r7, #24]
 800b67a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b67c:	f109 0901 	add.w	r9, r9, #1
 800b680:	f1b9 0f02 	cmp.w	r9, #2
 800b684:	4444      	add	r4, r8
 800b686:	f107 071c 	add.w	r7, r7, #28
 800b68a:	d19c      	bne.n	800b5c6 <_tzset_unlocked_r+0x172>
 800b68c:	6868      	ldr	r0, [r5, #4]
 800b68e:	f7ff fe27 	bl	800b2e0 <__tzcalc_limits>
 800b692:	4b27      	ldr	r3, [pc, #156]	; (800b730 <_tzset_unlocked_r+0x2dc>)
 800b694:	6a2a      	ldr	r2, [r5, #32]
 800b696:	601a      	str	r2, [r3, #0]
 800b698:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800b69a:	1a9b      	subs	r3, r3, r2
 800b69c:	4a26      	ldr	r2, [pc, #152]	; (800b738 <_tzset_unlocked_r+0x2e4>)
 800b69e:	bf18      	it	ne
 800b6a0:	2301      	movne	r3, #1
 800b6a2:	6013      	str	r3, [r2, #0]
 800b6a4:	e6f0      	b.n	800b488 <_tzset_unlocked_r+0x34>
 800b6a6:	2b2b      	cmp	r3, #43	; 0x2b
 800b6a8:	bf08      	it	eq
 800b6aa:	3401      	addeq	r4, #1
 800b6ac:	2701      	movs	r7, #1
 800b6ae:	e76b      	b.n	800b588 <_tzset_unlocked_r+0x134>
 800b6b0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800b6b4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800b6b8:	213c      	movs	r1, #60	; 0x3c
 800b6ba:	fb01 2203 	mla	r2, r1, r3, r2
 800b6be:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800b6c2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800b6c6:	fb01 2303 	mla	r3, r1, r3, r2
 800b6ca:	435f      	muls	r7, r3
 800b6cc:	63ef      	str	r7, [r5, #60]	; 0x3c
 800b6ce:	e775      	b.n	800b5bc <_tzset_unlocked_r+0x168>
 800b6d0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800b6d4:	bf06      	itte	eq
 800b6d6:	3401      	addeq	r4, #1
 800b6d8:	4643      	moveq	r3, r8
 800b6da:	2344      	movne	r3, #68	; 0x44
 800b6dc:	220a      	movs	r2, #10
 800b6de:	a90b      	add	r1, sp, #44	; 0x2c
 800b6e0:	4620      	mov	r0, r4
 800b6e2:	9305      	str	r3, [sp, #20]
 800b6e4:	f003 ff1a 	bl	800f51c <strtoul>
 800b6e8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800b6ec:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800b6f0:	4544      	cmp	r4, r8
 800b6f2:	9b05      	ldr	r3, [sp, #20]
 800b6f4:	d114      	bne.n	800b720 <_tzset_unlocked_r+0x2cc>
 800b6f6:	234d      	movs	r3, #77	; 0x4d
 800b6f8:	f1b9 0f00 	cmp.w	r9, #0
 800b6fc:	d107      	bne.n	800b70e <_tzset_unlocked_r+0x2ba>
 800b6fe:	722b      	strb	r3, [r5, #8]
 800b700:	2303      	movs	r3, #3
 800b702:	60eb      	str	r3, [r5, #12]
 800b704:	2302      	movs	r3, #2
 800b706:	612b      	str	r3, [r5, #16]
 800b708:	f8c5 9014 	str.w	r9, [r5, #20]
 800b70c:	e78e      	b.n	800b62c <_tzset_unlocked_r+0x1d8>
 800b70e:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 800b712:	230b      	movs	r3, #11
 800b714:	62ab      	str	r3, [r5, #40]	; 0x28
 800b716:	2301      	movs	r3, #1
 800b718:	62eb      	str	r3, [r5, #44]	; 0x2c
 800b71a:	2300      	movs	r3, #0
 800b71c:	632b      	str	r3, [r5, #48]	; 0x30
 800b71e:	e785      	b.n	800b62c <_tzset_unlocked_r+0x1d8>
 800b720:	b280      	uxth	r0, r0
 800b722:	723b      	strb	r3, [r7, #8]
 800b724:	6178      	str	r0, [r7, #20]
 800b726:	e781      	b.n	800b62c <_tzset_unlocked_r+0x1d8>
 800b728:	08010d68 	.word	0x08010d68
 800b72c:	2000073c 	.word	0x2000073c
 800b730:	20000744 	.word	0x20000744
 800b734:	08010d6b 	.word	0x08010d6b
 800b738:	20000740 	.word	0x20000740
 800b73c:	20000514 	.word	0x20000514
 800b740:	2000072f 	.word	0x2000072f
 800b744:	08010d6f 	.word	0x08010d6f
 800b748:	08010d92 	.word	0x08010d92
 800b74c:	08010d7e 	.word	0x08010d7e
 800b750:	08010d91 	.word	0x08010d91
 800b754:	20000724 	.word	0x20000724

0800b758 <_vfprintf_r>:
 800b758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b75c:	b0bf      	sub	sp, #252	; 0xfc
 800b75e:	460d      	mov	r5, r1
 800b760:	4616      	mov	r6, r2
 800b762:	461c      	mov	r4, r3
 800b764:	461f      	mov	r7, r3
 800b766:	4681      	mov	r9, r0
 800b768:	f002 ffac 	bl	800e6c4 <_localeconv_r>
 800b76c:	6803      	ldr	r3, [r0, #0]
 800b76e:	9311      	str	r3, [sp, #68]	; 0x44
 800b770:	4618      	mov	r0, r3
 800b772:	f7f4 fd37 	bl	80001e4 <strlen>
 800b776:	900b      	str	r0, [sp, #44]	; 0x2c
 800b778:	f1b9 0f00 	cmp.w	r9, #0
 800b77c:	d005      	beq.n	800b78a <_vfprintf_r+0x32>
 800b77e:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800b782:	b913      	cbnz	r3, 800b78a <_vfprintf_r+0x32>
 800b784:	4648      	mov	r0, r9
 800b786:	f002 f867 	bl	800d858 <__sinit>
 800b78a:	4b90      	ldr	r3, [pc, #576]	; (800b9cc <_vfprintf_r+0x274>)
 800b78c:	429d      	cmp	r5, r3
 800b78e:	d12c      	bne.n	800b7ea <_vfprintf_r+0x92>
 800b790:	f8d9 5004 	ldr.w	r5, [r9, #4]
 800b794:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b796:	07d8      	lsls	r0, r3, #31
 800b798:	d405      	bmi.n	800b7a6 <_vfprintf_r+0x4e>
 800b79a:	89ab      	ldrh	r3, [r5, #12]
 800b79c:	0599      	lsls	r1, r3, #22
 800b79e:	d402      	bmi.n	800b7a6 <_vfprintf_r+0x4e>
 800b7a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7a2:	f002 ffa0 	bl	800e6e6 <__retarget_lock_acquire_recursive>
 800b7a6:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 800b7aa:	049a      	lsls	r2, r3, #18
 800b7ac:	d406      	bmi.n	800b7bc <_vfprintf_r+0x64>
 800b7ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b7b2:	81ab      	strh	r3, [r5, #12]
 800b7b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b7ba:	666b      	str	r3, [r5, #100]	; 0x64
 800b7bc:	89ab      	ldrh	r3, [r5, #12]
 800b7be:	071b      	lsls	r3, r3, #28
 800b7c0:	d501      	bpl.n	800b7c6 <_vfprintf_r+0x6e>
 800b7c2:	692b      	ldr	r3, [r5, #16]
 800b7c4:	b9eb      	cbnz	r3, 800b802 <_vfprintf_r+0xaa>
 800b7c6:	4629      	mov	r1, r5
 800b7c8:	4648      	mov	r0, r9
 800b7ca:	f001 f83d 	bl	800c848 <__swsetup_r>
 800b7ce:	b1c0      	cbz	r0, 800b802 <_vfprintf_r+0xaa>
 800b7d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7d2:	07d8      	lsls	r0, r3, #31
 800b7d4:	d405      	bmi.n	800b7e2 <_vfprintf_r+0x8a>
 800b7d6:	89ab      	ldrh	r3, [r5, #12]
 800b7d8:	0599      	lsls	r1, r3, #22
 800b7da:	d402      	bmi.n	800b7e2 <_vfprintf_r+0x8a>
 800b7dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7de:	f002 ff84 	bl	800e6ea <__retarget_lock_release_recursive>
 800b7e2:	f04f 33ff 	mov.w	r3, #4294967295
 800b7e6:	930c      	str	r3, [sp, #48]	; 0x30
 800b7e8:	e023      	b.n	800b832 <_vfprintf_r+0xda>
 800b7ea:	4b79      	ldr	r3, [pc, #484]	; (800b9d0 <_vfprintf_r+0x278>)
 800b7ec:	429d      	cmp	r5, r3
 800b7ee:	d102      	bne.n	800b7f6 <_vfprintf_r+0x9e>
 800b7f0:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800b7f4:	e7ce      	b.n	800b794 <_vfprintf_r+0x3c>
 800b7f6:	4b77      	ldr	r3, [pc, #476]	; (800b9d4 <_vfprintf_r+0x27c>)
 800b7f8:	429d      	cmp	r5, r3
 800b7fa:	bf08      	it	eq
 800b7fc:	f8d9 500c 	ldreq.w	r5, [r9, #12]
 800b800:	e7c8      	b.n	800b794 <_vfprintf_r+0x3c>
 800b802:	89ab      	ldrh	r3, [r5, #12]
 800b804:	f003 021a 	and.w	r2, r3, #26
 800b808:	2a0a      	cmp	r2, #10
 800b80a:	d116      	bne.n	800b83a <_vfprintf_r+0xe2>
 800b80c:	f9b5 200e 	ldrsh.w	r2, [r5, #14]
 800b810:	2a00      	cmp	r2, #0
 800b812:	db12      	blt.n	800b83a <_vfprintf_r+0xe2>
 800b814:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 800b816:	07d2      	lsls	r2, r2, #31
 800b818:	d404      	bmi.n	800b824 <_vfprintf_r+0xcc>
 800b81a:	059f      	lsls	r7, r3, #22
 800b81c:	d402      	bmi.n	800b824 <_vfprintf_r+0xcc>
 800b81e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b820:	f002 ff63 	bl	800e6ea <__retarget_lock_release_recursive>
 800b824:	4623      	mov	r3, r4
 800b826:	4632      	mov	r2, r6
 800b828:	4629      	mov	r1, r5
 800b82a:	4648      	mov	r0, r9
 800b82c:	f000 ffcc 	bl	800c7c8 <__sbprintf>
 800b830:	900c      	str	r0, [sp, #48]	; 0x30
 800b832:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b834:	b03f      	add	sp, #252	; 0xfc
 800b836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b83a:	2300      	movs	r3, #0
 800b83c:	ac2e      	add	r4, sp, #184	; 0xb8
 800b83e:	9421      	str	r4, [sp, #132]	; 0x84
 800b840:	9323      	str	r3, [sp, #140]	; 0x8c
 800b842:	9322      	str	r3, [sp, #136]	; 0x88
 800b844:	9609      	str	r6, [sp, #36]	; 0x24
 800b846:	9307      	str	r3, [sp, #28]
 800b848:	930e      	str	r3, [sp, #56]	; 0x38
 800b84a:	930f      	str	r3, [sp, #60]	; 0x3c
 800b84c:	9315      	str	r3, [sp, #84]	; 0x54
 800b84e:	9314      	str	r3, [sp, #80]	; 0x50
 800b850:	930c      	str	r3, [sp, #48]	; 0x30
 800b852:	9312      	str	r3, [sp, #72]	; 0x48
 800b854:	9313      	str	r3, [sp, #76]	; 0x4c
 800b856:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b858:	4633      	mov	r3, r6
 800b85a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b85e:	b112      	cbz	r2, 800b866 <_vfprintf_r+0x10e>
 800b860:	2a25      	cmp	r2, #37	; 0x25
 800b862:	f040 8084 	bne.w	800b96e <_vfprintf_r+0x216>
 800b866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b868:	ebb6 0803 	subs.w	r8, r6, r3
 800b86c:	d00d      	beq.n	800b88a <_vfprintf_r+0x132>
 800b86e:	e884 0108 	stmia.w	r4, {r3, r8}
 800b872:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b874:	4443      	add	r3, r8
 800b876:	9323      	str	r3, [sp, #140]	; 0x8c
 800b878:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b87a:	3301      	adds	r3, #1
 800b87c:	2b07      	cmp	r3, #7
 800b87e:	9322      	str	r3, [sp, #136]	; 0x88
 800b880:	dc77      	bgt.n	800b972 <_vfprintf_r+0x21a>
 800b882:	3408      	adds	r4, #8
 800b884:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b886:	4443      	add	r3, r8
 800b888:	930c      	str	r3, [sp, #48]	; 0x30
 800b88a:	7833      	ldrb	r3, [r6, #0]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	f000 8741 	beq.w	800c714 <_vfprintf_r+0xfbc>
 800b892:	2300      	movs	r3, #0
 800b894:	3601      	adds	r6, #1
 800b896:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800b89a:	461a      	mov	r2, r3
 800b89c:	f04f 3bff 	mov.w	fp, #4294967295
 800b8a0:	930d      	str	r3, [sp, #52]	; 0x34
 800b8a2:	469a      	mov	sl, r3
 800b8a4:	200a      	movs	r0, #10
 800b8a6:	1c71      	adds	r1, r6, #1
 800b8a8:	9109      	str	r1, [sp, #36]	; 0x24
 800b8aa:	7831      	ldrb	r1, [r6, #0]
 800b8ac:	9106      	str	r1, [sp, #24]
 800b8ae:	9906      	ldr	r1, [sp, #24]
 800b8b0:	3920      	subs	r1, #32
 800b8b2:	2958      	cmp	r1, #88	; 0x58
 800b8b4:	f200 8426 	bhi.w	800c104 <_vfprintf_r+0x9ac>
 800b8b8:	e8df f011 	tbh	[pc, r1, lsl #1]
 800b8bc:	042400b0 	.word	0x042400b0
 800b8c0:	00b50424 	.word	0x00b50424
 800b8c4:	04240424 	.word	0x04240424
 800b8c8:	04240424 	.word	0x04240424
 800b8cc:	04240424 	.word	0x04240424
 800b8d0:	006500b8 	.word	0x006500b8
 800b8d4:	00c10424 	.word	0x00c10424
 800b8d8:	042400c4 	.word	0x042400c4
 800b8dc:	00e400e1 	.word	0x00e400e1
 800b8e0:	00e400e4 	.word	0x00e400e4
 800b8e4:	00e400e4 	.word	0x00e400e4
 800b8e8:	00e400e4 	.word	0x00e400e4
 800b8ec:	00e400e4 	.word	0x00e400e4
 800b8f0:	04240424 	.word	0x04240424
 800b8f4:	04240424 	.word	0x04240424
 800b8f8:	04240424 	.word	0x04240424
 800b8fc:	04240424 	.word	0x04240424
 800b900:	04240424 	.word	0x04240424
 800b904:	012e0118 	.word	0x012e0118
 800b908:	012e0424 	.word	0x012e0424
 800b90c:	04240424 	.word	0x04240424
 800b910:	04240424 	.word	0x04240424
 800b914:	042400f7 	.word	0x042400f7
 800b918:	034b0424 	.word	0x034b0424
 800b91c:	04240424 	.word	0x04240424
 800b920:	04240424 	.word	0x04240424
 800b924:	03b20424 	.word	0x03b20424
 800b928:	04240424 	.word	0x04240424
 800b92c:	0424008e 	.word	0x0424008e
 800b930:	04240424 	.word	0x04240424
 800b934:	04240424 	.word	0x04240424
 800b938:	04240424 	.word	0x04240424
 800b93c:	04240424 	.word	0x04240424
 800b940:	010a0424 	.word	0x010a0424
 800b944:	012e006b 	.word	0x012e006b
 800b948:	012e012e 	.word	0x012e012e
 800b94c:	006b00fa 	.word	0x006b00fa
 800b950:	04240424 	.word	0x04240424
 800b954:	042400fd 	.word	0x042400fd
 800b958:	034d032b 	.word	0x034d032b
 800b95c:	01040381 	.word	0x01040381
 800b960:	03920424 	.word	0x03920424
 800b964:	03b40424 	.word	0x03b40424
 800b968:	04240424 	.word	0x04240424
 800b96c:	03ce      	.short	0x03ce
 800b96e:	461e      	mov	r6, r3
 800b970:	e772      	b.n	800b858 <_vfprintf_r+0x100>
 800b972:	aa21      	add	r2, sp, #132	; 0x84
 800b974:	4629      	mov	r1, r5
 800b976:	4648      	mov	r0, r9
 800b978:	f004 fa41 	bl	800fdfe <__sprint_r>
 800b97c:	2800      	cmp	r0, #0
 800b97e:	f040 86a5 	bne.w	800c6cc <_vfprintf_r+0xf74>
 800b982:	ac2e      	add	r4, sp, #184	; 0xb8
 800b984:	e77e      	b.n	800b884 <_vfprintf_r+0x12c>
 800b986:	2301      	movs	r3, #1
 800b988:	222b      	movs	r2, #43	; 0x2b
 800b98a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b98c:	e78b      	b.n	800b8a6 <_vfprintf_r+0x14e>
 800b98e:	460f      	mov	r7, r1
 800b990:	e7fb      	b.n	800b98a <_vfprintf_r+0x232>
 800b992:	b10b      	cbz	r3, 800b998 <_vfprintf_r+0x240>
 800b994:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800b998:	f01a 0f20 	tst.w	sl, #32
 800b99c:	f000 80ac 	beq.w	800baf8 <_vfprintf_r+0x3a0>
 800b9a0:	3707      	adds	r7, #7
 800b9a2:	f027 0707 	bic.w	r7, r7, #7
 800b9a6:	f107 0308 	add.w	r3, r7, #8
 800b9aa:	e9d7 6700 	ldrd	r6, r7, [r7]
 800b9ae:	9308      	str	r3, [sp, #32]
 800b9b0:	2e00      	cmp	r6, #0
 800b9b2:	f177 0300 	sbcs.w	r3, r7, #0
 800b9b6:	da06      	bge.n	800b9c6 <_vfprintf_r+0x26e>
 800b9b8:	4276      	negs	r6, r6
 800b9ba:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800b9be:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800b9c2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	e2d4      	b.n	800bf74 <_vfprintf_r+0x81c>
 800b9ca:	bf00      	nop
 800b9cc:	08010e28 	.word	0x08010e28
 800b9d0:	08010e48 	.word	0x08010e48
 800b9d4:	08010e08 	.word	0x08010e08
 800b9d8:	b10b      	cbz	r3, 800b9de <_vfprintf_r+0x286>
 800b9da:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800b9de:	4ba3      	ldr	r3, [pc, #652]	; (800bc6c <_vfprintf_r+0x514>)
 800b9e0:	9315      	str	r3, [sp, #84]	; 0x54
 800b9e2:	f01a 0f20 	tst.w	sl, #32
 800b9e6:	f000 833c 	beq.w	800c062 <_vfprintf_r+0x90a>
 800b9ea:	3707      	adds	r7, #7
 800b9ec:	f027 0707 	bic.w	r7, r7, #7
 800b9f0:	f107 0308 	add.w	r3, r7, #8
 800b9f4:	e9d7 6700 	ldrd	r6, r7, [r7]
 800b9f8:	9308      	str	r3, [sp, #32]
 800b9fa:	f01a 0f01 	tst.w	sl, #1
 800b9fe:	d00b      	beq.n	800ba18 <_vfprintf_r+0x2c0>
 800ba00:	ea56 0307 	orrs.w	r3, r6, r7
 800ba04:	d008      	beq.n	800ba18 <_vfprintf_r+0x2c0>
 800ba06:	2330      	movs	r3, #48	; 0x30
 800ba08:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 800ba0c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800ba10:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
 800ba14:	f04a 0a02 	orr.w	sl, sl, #2
 800ba18:	2302      	movs	r3, #2
 800ba1a:	e2a8      	b.n	800bf6e <_vfprintf_r+0x816>
 800ba1c:	2a00      	cmp	r2, #0
 800ba1e:	d1b4      	bne.n	800b98a <_vfprintf_r+0x232>
 800ba20:	2301      	movs	r3, #1
 800ba22:	2220      	movs	r2, #32
 800ba24:	e7b1      	b.n	800b98a <_vfprintf_r+0x232>
 800ba26:	f04a 0a01 	orr.w	sl, sl, #1
 800ba2a:	e7ae      	b.n	800b98a <_vfprintf_r+0x232>
 800ba2c:	683e      	ldr	r6, [r7, #0]
 800ba2e:	960d      	str	r6, [sp, #52]	; 0x34
 800ba30:	2e00      	cmp	r6, #0
 800ba32:	f107 0104 	add.w	r1, r7, #4
 800ba36:	daaa      	bge.n	800b98e <_vfprintf_r+0x236>
 800ba38:	4276      	negs	r6, r6
 800ba3a:	960d      	str	r6, [sp, #52]	; 0x34
 800ba3c:	460f      	mov	r7, r1
 800ba3e:	f04a 0a04 	orr.w	sl, sl, #4
 800ba42:	e7a2      	b.n	800b98a <_vfprintf_r+0x232>
 800ba44:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba46:	1c4e      	adds	r6, r1, #1
 800ba48:	7809      	ldrb	r1, [r1, #0]
 800ba4a:	9106      	str	r1, [sp, #24]
 800ba4c:	292a      	cmp	r1, #42	; 0x2a
 800ba4e:	d010      	beq.n	800ba72 <_vfprintf_r+0x31a>
 800ba50:	f04f 0b00 	mov.w	fp, #0
 800ba54:	9609      	str	r6, [sp, #36]	; 0x24
 800ba56:	9906      	ldr	r1, [sp, #24]
 800ba58:	3930      	subs	r1, #48	; 0x30
 800ba5a:	2909      	cmp	r1, #9
 800ba5c:	f63f af27 	bhi.w	800b8ae <_vfprintf_r+0x156>
 800ba60:	fb00 1b0b 	mla	fp, r0, fp, r1
 800ba64:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba66:	460e      	mov	r6, r1
 800ba68:	f816 1b01 	ldrb.w	r1, [r6], #1
 800ba6c:	9106      	str	r1, [sp, #24]
 800ba6e:	9609      	str	r6, [sp, #36]	; 0x24
 800ba70:	e7f1      	b.n	800ba56 <_vfprintf_r+0x2fe>
 800ba72:	6839      	ldr	r1, [r7, #0]
 800ba74:	9609      	str	r6, [sp, #36]	; 0x24
 800ba76:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
 800ba7a:	3704      	adds	r7, #4
 800ba7c:	e785      	b.n	800b98a <_vfprintf_r+0x232>
 800ba7e:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800ba82:	e782      	b.n	800b98a <_vfprintf_r+0x232>
 800ba84:	2100      	movs	r1, #0
 800ba86:	910d      	str	r1, [sp, #52]	; 0x34
 800ba88:	9906      	ldr	r1, [sp, #24]
 800ba8a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800ba8c:	3930      	subs	r1, #48	; 0x30
 800ba8e:	fb00 1106 	mla	r1, r0, r6, r1
 800ba92:	910d      	str	r1, [sp, #52]	; 0x34
 800ba94:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba96:	460e      	mov	r6, r1
 800ba98:	f816 1b01 	ldrb.w	r1, [r6], #1
 800ba9c:	9106      	str	r1, [sp, #24]
 800ba9e:	9906      	ldr	r1, [sp, #24]
 800baa0:	9609      	str	r6, [sp, #36]	; 0x24
 800baa2:	3930      	subs	r1, #48	; 0x30
 800baa4:	2909      	cmp	r1, #9
 800baa6:	d9ef      	bls.n	800ba88 <_vfprintf_r+0x330>
 800baa8:	e701      	b.n	800b8ae <_vfprintf_r+0x156>
 800baaa:	f04a 0a08 	orr.w	sl, sl, #8
 800baae:	e76c      	b.n	800b98a <_vfprintf_r+0x232>
 800bab0:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
 800bab4:	e769      	b.n	800b98a <_vfprintf_r+0x232>
 800bab6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bab8:	7809      	ldrb	r1, [r1, #0]
 800baba:	296c      	cmp	r1, #108	; 0x6c
 800babc:	d105      	bne.n	800baca <_vfprintf_r+0x372>
 800babe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bac0:	3101      	adds	r1, #1
 800bac2:	9109      	str	r1, [sp, #36]	; 0x24
 800bac4:	f04a 0a20 	orr.w	sl, sl, #32
 800bac8:	e75f      	b.n	800b98a <_vfprintf_r+0x232>
 800baca:	f04a 0a10 	orr.w	sl, sl, #16
 800bace:	e75c      	b.n	800b98a <_vfprintf_r+0x232>
 800bad0:	1d3b      	adds	r3, r7, #4
 800bad2:	9308      	str	r3, [sp, #32]
 800bad4:	2600      	movs	r6, #0
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 800badc:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 800bae0:	f04f 0b01 	mov.w	fp, #1
 800bae4:	960a      	str	r6, [sp, #40]	; 0x28
 800bae6:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 800baea:	e11f      	b.n	800bd2c <_vfprintf_r+0x5d4>
 800baec:	b10b      	cbz	r3, 800baf2 <_vfprintf_r+0x39a>
 800baee:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800baf2:	f04a 0a10 	orr.w	sl, sl, #16
 800baf6:	e74f      	b.n	800b998 <_vfprintf_r+0x240>
 800baf8:	f01a 0f10 	tst.w	sl, #16
 800bafc:	f107 0304 	add.w	r3, r7, #4
 800bb00:	d003      	beq.n	800bb0a <_vfprintf_r+0x3b2>
 800bb02:	683e      	ldr	r6, [r7, #0]
 800bb04:	9308      	str	r3, [sp, #32]
 800bb06:	17f7      	asrs	r7, r6, #31
 800bb08:	e752      	b.n	800b9b0 <_vfprintf_r+0x258>
 800bb0a:	683e      	ldr	r6, [r7, #0]
 800bb0c:	9308      	str	r3, [sp, #32]
 800bb0e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800bb12:	bf18      	it	ne
 800bb14:	b236      	sxthne	r6, r6
 800bb16:	e7f6      	b.n	800bb06 <_vfprintf_r+0x3ae>
 800bb18:	b10b      	cbz	r3, 800bb1e <_vfprintf_r+0x3c6>
 800bb1a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800bb1e:	3707      	adds	r7, #7
 800bb20:	f027 0707 	bic.w	r7, r7, #7
 800bb24:	f107 0308 	add.w	r3, r7, #8
 800bb28:	9308      	str	r3, [sp, #32]
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	930e      	str	r3, [sp, #56]	; 0x38
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb34:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800bb36:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 800bb3a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb3e:	4b4c      	ldr	r3, [pc, #304]	; (800bc70 <_vfprintf_r+0x518>)
 800bb40:	4638      	mov	r0, r7
 800bb42:	4631      	mov	r1, r6
 800bb44:	f7f4 fffe 	bl	8000b44 <__aeabi_dcmpun>
 800bb48:	2800      	cmp	r0, #0
 800bb4a:	f040 85f0 	bne.w	800c72e <_vfprintf_r+0xfd6>
 800bb4e:	f04f 32ff 	mov.w	r2, #4294967295
 800bb52:	4b47      	ldr	r3, [pc, #284]	; (800bc70 <_vfprintf_r+0x518>)
 800bb54:	4638      	mov	r0, r7
 800bb56:	4631      	mov	r1, r6
 800bb58:	f7f4 ffd6 	bl	8000b08 <__aeabi_dcmple>
 800bb5c:	2800      	cmp	r0, #0
 800bb5e:	f040 85e6 	bne.w	800c72e <_vfprintf_r+0xfd6>
 800bb62:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bb64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bb66:	980e      	ldr	r0, [sp, #56]	; 0x38
 800bb68:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bb6a:	f7f4 ffc3 	bl	8000af4 <__aeabi_dcmplt>
 800bb6e:	b110      	cbz	r0, 800bb76 <_vfprintf_r+0x41e>
 800bb70:	232d      	movs	r3, #45	; 0x2d
 800bb72:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800bb76:	4b3f      	ldr	r3, [pc, #252]	; (800bc74 <_vfprintf_r+0x51c>)
 800bb78:	4a3f      	ldr	r2, [pc, #252]	; (800bc78 <_vfprintf_r+0x520>)
 800bb7a:	9906      	ldr	r1, [sp, #24]
 800bb7c:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 800bb80:	2947      	cmp	r1, #71	; 0x47
 800bb82:	bfcc      	ite	gt
 800bb84:	4690      	movgt	r8, r2
 800bb86:	4698      	movle	r8, r3
 800bb88:	f04f 0b03 	mov.w	fp, #3
 800bb8c:	2600      	movs	r6, #0
 800bb8e:	960a      	str	r6, [sp, #40]	; 0x28
 800bb90:	e0cc      	b.n	800bd2c <_vfprintf_r+0x5d4>
 800bb92:	f1bb 3fff 	cmp.w	fp, #4294967295
 800bb96:	d026      	beq.n	800bbe6 <_vfprintf_r+0x48e>
 800bb98:	9b06      	ldr	r3, [sp, #24]
 800bb9a:	f023 0320 	bic.w	r3, r3, #32
 800bb9e:	2b47      	cmp	r3, #71	; 0x47
 800bba0:	d104      	bne.n	800bbac <_vfprintf_r+0x454>
 800bba2:	f1bb 0f00 	cmp.w	fp, #0
 800bba6:	bf08      	it	eq
 800bba8:	f04f 0b01 	moveq.w	fp, #1
 800bbac:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 800bbb0:	9317      	str	r3, [sp, #92]	; 0x5c
 800bbb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bbb4:	1e1f      	subs	r7, r3, #0
 800bbb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bbb8:	930a      	str	r3, [sp, #40]	; 0x28
 800bbba:	bfbd      	ittte	lt
 800bbbc:	463b      	movlt	r3, r7
 800bbbe:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800bbc2:	9310      	strlt	r3, [sp, #64]	; 0x40
 800bbc4:	2300      	movge	r3, #0
 800bbc6:	bfb8      	it	lt
 800bbc8:	232d      	movlt	r3, #45	; 0x2d
 800bbca:	9316      	str	r3, [sp, #88]	; 0x58
 800bbcc:	9b06      	ldr	r3, [sp, #24]
 800bbce:	bfa8      	it	ge
 800bbd0:	9710      	strge	r7, [sp, #64]	; 0x40
 800bbd2:	f023 0720 	bic.w	r7, r3, #32
 800bbd6:	2f46      	cmp	r7, #70	; 0x46
 800bbd8:	d008      	beq.n	800bbec <_vfprintf_r+0x494>
 800bbda:	2f45      	cmp	r7, #69	; 0x45
 800bbdc:	d143      	bne.n	800bc66 <_vfprintf_r+0x50e>
 800bbde:	f10b 0601 	add.w	r6, fp, #1
 800bbe2:	2302      	movs	r3, #2
 800bbe4:	e004      	b.n	800bbf0 <_vfprintf_r+0x498>
 800bbe6:	f04f 0b06 	mov.w	fp, #6
 800bbea:	e7df      	b.n	800bbac <_vfprintf_r+0x454>
 800bbec:	465e      	mov	r6, fp
 800bbee:	2303      	movs	r3, #3
 800bbf0:	aa1f      	add	r2, sp, #124	; 0x7c
 800bbf2:	9204      	str	r2, [sp, #16]
 800bbf4:	aa1c      	add	r2, sp, #112	; 0x70
 800bbf6:	9203      	str	r2, [sp, #12]
 800bbf8:	aa1b      	add	r2, sp, #108	; 0x6c
 800bbfa:	9202      	str	r2, [sp, #8]
 800bbfc:	e88d 0048 	stmia.w	sp, {r3, r6}
 800bc00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bc04:	4648      	mov	r0, r9
 800bc06:	f000 ff2f 	bl	800ca68 <_dtoa_r>
 800bc0a:	2f47      	cmp	r7, #71	; 0x47
 800bc0c:	4680      	mov	r8, r0
 800bc0e:	d103      	bne.n	800bc18 <_vfprintf_r+0x4c0>
 800bc10:	f01a 0f01 	tst.w	sl, #1
 800bc14:	f000 8598 	beq.w	800c748 <_vfprintf_r+0xff0>
 800bc18:	eb08 0306 	add.w	r3, r8, r6
 800bc1c:	2f46      	cmp	r7, #70	; 0x46
 800bc1e:	9307      	str	r3, [sp, #28]
 800bc20:	d111      	bne.n	800bc46 <_vfprintf_r+0x4ee>
 800bc22:	f898 3000 	ldrb.w	r3, [r8]
 800bc26:	2b30      	cmp	r3, #48	; 0x30
 800bc28:	d109      	bne.n	800bc3e <_vfprintf_r+0x4e6>
 800bc2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bc2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bc2e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bc30:	9910      	ldr	r1, [sp, #64]	; 0x40
 800bc32:	f7f4 ff55 	bl	8000ae0 <__aeabi_dcmpeq>
 800bc36:	b910      	cbnz	r0, 800bc3e <_vfprintf_r+0x4e6>
 800bc38:	f1c6 0601 	rsb	r6, r6, #1
 800bc3c:	961b      	str	r6, [sp, #108]	; 0x6c
 800bc3e:	9a07      	ldr	r2, [sp, #28]
 800bc40:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc42:	441a      	add	r2, r3
 800bc44:	9207      	str	r2, [sp, #28]
 800bc46:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bc48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bc4a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bc4c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800bc4e:	f7f4 ff47 	bl	8000ae0 <__aeabi_dcmpeq>
 800bc52:	b998      	cbnz	r0, 800bc7c <_vfprintf_r+0x524>
 800bc54:	2230      	movs	r2, #48	; 0x30
 800bc56:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bc58:	9907      	ldr	r1, [sp, #28]
 800bc5a:	4299      	cmp	r1, r3
 800bc5c:	d910      	bls.n	800bc80 <_vfprintf_r+0x528>
 800bc5e:	1c59      	adds	r1, r3, #1
 800bc60:	911f      	str	r1, [sp, #124]	; 0x7c
 800bc62:	701a      	strb	r2, [r3, #0]
 800bc64:	e7f7      	b.n	800bc56 <_vfprintf_r+0x4fe>
 800bc66:	465e      	mov	r6, fp
 800bc68:	e7bb      	b.n	800bbe2 <_vfprintf_r+0x48a>
 800bc6a:	bf00      	nop
 800bc6c:	08010db4 	.word	0x08010db4
 800bc70:	7fefffff 	.word	0x7fefffff
 800bc74:	08010da4 	.word	0x08010da4
 800bc78:	08010da8 	.word	0x08010da8
 800bc7c:	9b07      	ldr	r3, [sp, #28]
 800bc7e:	931f      	str	r3, [sp, #124]	; 0x7c
 800bc80:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bc82:	2f47      	cmp	r7, #71	; 0x47
 800bc84:	eba3 0308 	sub.w	r3, r3, r8
 800bc88:	9307      	str	r3, [sp, #28]
 800bc8a:	f040 80fb 	bne.w	800be84 <_vfprintf_r+0x72c>
 800bc8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc90:	1cde      	adds	r6, r3, #3
 800bc92:	db02      	blt.n	800bc9a <_vfprintf_r+0x542>
 800bc94:	459b      	cmp	fp, r3
 800bc96:	f280 8124 	bge.w	800bee2 <_vfprintf_r+0x78a>
 800bc9a:	9b06      	ldr	r3, [sp, #24]
 800bc9c:	3b02      	subs	r3, #2
 800bc9e:	9306      	str	r3, [sp, #24]
 800bca0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800bca2:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800bca6:	f88d 1074 	strb.w	r1, [sp, #116]	; 0x74
 800bcaa:	1e53      	subs	r3, r2, #1
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	931b      	str	r3, [sp, #108]	; 0x6c
 800bcb0:	bfb6      	itet	lt
 800bcb2:	f1c2 0301 	rsblt	r3, r2, #1
 800bcb6:	222b      	movge	r2, #43	; 0x2b
 800bcb8:	222d      	movlt	r2, #45	; 0x2d
 800bcba:	2b09      	cmp	r3, #9
 800bcbc:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 800bcc0:	f340 80fe 	ble.w	800bec0 <_vfprintf_r+0x768>
 800bcc4:	f10d 0283 	add.w	r2, sp, #131	; 0x83
 800bcc8:	260a      	movs	r6, #10
 800bcca:	fb93 f0f6 	sdiv	r0, r3, r6
 800bcce:	fb06 3310 	mls	r3, r6, r0, r3
 800bcd2:	3330      	adds	r3, #48	; 0x30
 800bcd4:	2809      	cmp	r0, #9
 800bcd6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bcda:	f102 31ff 	add.w	r1, r2, #4294967295
 800bcde:	4603      	mov	r3, r0
 800bce0:	f300 80e7 	bgt.w	800beb2 <_vfprintf_r+0x75a>
 800bce4:	3330      	adds	r3, #48	; 0x30
 800bce6:	f801 3c01 	strb.w	r3, [r1, #-1]
 800bcea:	3a02      	subs	r2, #2
 800bcec:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 800bcf0:	f10d 0083 	add.w	r0, sp, #131	; 0x83
 800bcf4:	4282      	cmp	r2, r0
 800bcf6:	4619      	mov	r1, r3
 800bcf8:	f0c0 80dd 	bcc.w	800beb6 <_vfprintf_r+0x75e>
 800bcfc:	9a07      	ldr	r2, [sp, #28]
 800bcfe:	ab1d      	add	r3, sp, #116	; 0x74
 800bd00:	1acb      	subs	r3, r1, r3
 800bd02:	2a01      	cmp	r2, #1
 800bd04:	9314      	str	r3, [sp, #80]	; 0x50
 800bd06:	eb03 0b02 	add.w	fp, r3, r2
 800bd0a:	dc03      	bgt.n	800bd14 <_vfprintf_r+0x5bc>
 800bd0c:	f01a 0301 	ands.w	r3, sl, #1
 800bd10:	930a      	str	r3, [sp, #40]	; 0x28
 800bd12:	d003      	beq.n	800bd1c <_vfprintf_r+0x5c4>
 800bd14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd16:	449b      	add	fp, r3
 800bd18:	2300      	movs	r3, #0
 800bd1a:	930a      	str	r3, [sp, #40]	; 0x28
 800bd1c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bd1e:	b113      	cbz	r3, 800bd26 <_vfprintf_r+0x5ce>
 800bd20:	232d      	movs	r3, #45	; 0x2d
 800bd22:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800bd26:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 800bd2a:	2600      	movs	r6, #0
 800bd2c:	455e      	cmp	r6, fp
 800bd2e:	4633      	mov	r3, r6
 800bd30:	bfb8      	it	lt
 800bd32:	465b      	movlt	r3, fp
 800bd34:	9310      	str	r3, [sp, #64]	; 0x40
 800bd36:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 800bd3a:	b113      	cbz	r3, 800bd42 <_vfprintf_r+0x5ea>
 800bd3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bd3e:	3301      	adds	r3, #1
 800bd40:	9310      	str	r3, [sp, #64]	; 0x40
 800bd42:	f01a 0302 	ands.w	r3, sl, #2
 800bd46:	9316      	str	r3, [sp, #88]	; 0x58
 800bd48:	bf1e      	ittt	ne
 800bd4a:	9b10      	ldrne	r3, [sp, #64]	; 0x40
 800bd4c:	3302      	addne	r3, #2
 800bd4e:	9310      	strne	r3, [sp, #64]	; 0x40
 800bd50:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800bd54:	9317      	str	r3, [sp, #92]	; 0x5c
 800bd56:	d114      	bne.n	800bd82 <_vfprintf_r+0x62a>
 800bd58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd5a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bd5c:	1a9f      	subs	r7, r3, r2
 800bd5e:	2f00      	cmp	r7, #0
 800bd60:	dd0f      	ble.n	800bd82 <_vfprintf_r+0x62a>
 800bd62:	4bac      	ldr	r3, [pc, #688]	; (800c014 <_vfprintf_r+0x8bc>)
 800bd64:	6023      	str	r3, [r4, #0]
 800bd66:	2f10      	cmp	r7, #16
 800bd68:	f300 81de 	bgt.w	800c128 <_vfprintf_r+0x9d0>
 800bd6c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bd6e:	6067      	str	r7, [r4, #4]
 800bd70:	441f      	add	r7, r3
 800bd72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bd74:	9723      	str	r7, [sp, #140]	; 0x8c
 800bd76:	3301      	adds	r3, #1
 800bd78:	2b07      	cmp	r3, #7
 800bd7a:	9322      	str	r3, [sp, #136]	; 0x88
 800bd7c:	f300 81eb 	bgt.w	800c156 <_vfprintf_r+0x9fe>
 800bd80:	3408      	adds	r4, #8
 800bd82:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 800bd86:	b173      	cbz	r3, 800bda6 <_vfprintf_r+0x64e>
 800bd88:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 800bd8c:	6023      	str	r3, [r4, #0]
 800bd8e:	2301      	movs	r3, #1
 800bd90:	6063      	str	r3, [r4, #4]
 800bd92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bd94:	3301      	adds	r3, #1
 800bd96:	9323      	str	r3, [sp, #140]	; 0x8c
 800bd98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bd9a:	3301      	adds	r3, #1
 800bd9c:	2b07      	cmp	r3, #7
 800bd9e:	9322      	str	r3, [sp, #136]	; 0x88
 800bda0:	f300 81e3 	bgt.w	800c16a <_vfprintf_r+0xa12>
 800bda4:	3408      	adds	r4, #8
 800bda6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bda8:	b16b      	cbz	r3, 800bdc6 <_vfprintf_r+0x66e>
 800bdaa:	ab1a      	add	r3, sp, #104	; 0x68
 800bdac:	6023      	str	r3, [r4, #0]
 800bdae:	2302      	movs	r3, #2
 800bdb0:	6063      	str	r3, [r4, #4]
 800bdb2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bdb4:	3302      	adds	r3, #2
 800bdb6:	9323      	str	r3, [sp, #140]	; 0x8c
 800bdb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bdba:	3301      	adds	r3, #1
 800bdbc:	2b07      	cmp	r3, #7
 800bdbe:	9322      	str	r3, [sp, #136]	; 0x88
 800bdc0:	f300 81dd 	bgt.w	800c17e <_vfprintf_r+0xa26>
 800bdc4:	3408      	adds	r4, #8
 800bdc6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bdc8:	2b80      	cmp	r3, #128	; 0x80
 800bdca:	d114      	bne.n	800bdf6 <_vfprintf_r+0x69e>
 800bdcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bdd0:	1a9f      	subs	r7, r3, r2
 800bdd2:	2f00      	cmp	r7, #0
 800bdd4:	dd0f      	ble.n	800bdf6 <_vfprintf_r+0x69e>
 800bdd6:	4b90      	ldr	r3, [pc, #576]	; (800c018 <_vfprintf_r+0x8c0>)
 800bdd8:	6023      	str	r3, [r4, #0]
 800bdda:	2f10      	cmp	r7, #16
 800bddc:	f300 81d9 	bgt.w	800c192 <_vfprintf_r+0xa3a>
 800bde0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bde2:	6067      	str	r7, [r4, #4]
 800bde4:	441f      	add	r7, r3
 800bde6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bde8:	9723      	str	r7, [sp, #140]	; 0x8c
 800bdea:	3301      	adds	r3, #1
 800bdec:	2b07      	cmp	r3, #7
 800bdee:	9322      	str	r3, [sp, #136]	; 0x88
 800bdf0:	f300 81e6 	bgt.w	800c1c0 <_vfprintf_r+0xa68>
 800bdf4:	3408      	adds	r4, #8
 800bdf6:	eba6 060b 	sub.w	r6, r6, fp
 800bdfa:	2e00      	cmp	r6, #0
 800bdfc:	dd0f      	ble.n	800be1e <_vfprintf_r+0x6c6>
 800bdfe:	4f86      	ldr	r7, [pc, #536]	; (800c018 <_vfprintf_r+0x8c0>)
 800be00:	6027      	str	r7, [r4, #0]
 800be02:	2e10      	cmp	r6, #16
 800be04:	f300 81e6 	bgt.w	800c1d4 <_vfprintf_r+0xa7c>
 800be08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800be0a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800be0c:	6066      	str	r6, [r4, #4]
 800be0e:	3301      	adds	r3, #1
 800be10:	4406      	add	r6, r0
 800be12:	2b07      	cmp	r3, #7
 800be14:	9623      	str	r6, [sp, #140]	; 0x8c
 800be16:	9322      	str	r3, [sp, #136]	; 0x88
 800be18:	f300 81f3 	bgt.w	800c202 <_vfprintf_r+0xaaa>
 800be1c:	3408      	adds	r4, #8
 800be1e:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800be22:	f040 81f8 	bne.w	800c216 <_vfprintf_r+0xabe>
 800be26:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800be28:	e884 0900 	stmia.w	r4, {r8, fp}
 800be2c:	445b      	add	r3, fp
 800be2e:	9323      	str	r3, [sp, #140]	; 0x8c
 800be30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800be32:	3301      	adds	r3, #1
 800be34:	2b07      	cmp	r3, #7
 800be36:	9322      	str	r3, [sp, #136]	; 0x88
 800be38:	f340 8428 	ble.w	800c68c <_vfprintf_r+0xf34>
 800be3c:	aa21      	add	r2, sp, #132	; 0x84
 800be3e:	4629      	mov	r1, r5
 800be40:	4648      	mov	r0, r9
 800be42:	f003 ffdc 	bl	800fdfe <__sprint_r>
 800be46:	2800      	cmp	r0, #0
 800be48:	f040 8440 	bne.w	800c6cc <_vfprintf_r+0xf74>
 800be4c:	ac2e      	add	r4, sp, #184	; 0xb8
 800be4e:	f01a 0f04 	tst.w	sl, #4
 800be52:	f040 841e 	bne.w	800c692 <_vfprintf_r+0xf3a>
 800be56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800be5a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800be5c:	428a      	cmp	r2, r1
 800be5e:	bfac      	ite	ge
 800be60:	189b      	addge	r3, r3, r2
 800be62:	185b      	addlt	r3, r3, r1
 800be64:	930c      	str	r3, [sp, #48]	; 0x30
 800be66:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800be68:	b13b      	cbz	r3, 800be7a <_vfprintf_r+0x722>
 800be6a:	aa21      	add	r2, sp, #132	; 0x84
 800be6c:	4629      	mov	r1, r5
 800be6e:	4648      	mov	r0, r9
 800be70:	f003 ffc5 	bl	800fdfe <__sprint_r>
 800be74:	2800      	cmp	r0, #0
 800be76:	f040 8429 	bne.w	800c6cc <_vfprintf_r+0xf74>
 800be7a:	2300      	movs	r3, #0
 800be7c:	9322      	str	r3, [sp, #136]	; 0x88
 800be7e:	9f08      	ldr	r7, [sp, #32]
 800be80:	ac2e      	add	r4, sp, #184	; 0xb8
 800be82:	e4e8      	b.n	800b856 <_vfprintf_r+0xfe>
 800be84:	9b06      	ldr	r3, [sp, #24]
 800be86:	2b65      	cmp	r3, #101	; 0x65
 800be88:	f77f af0a 	ble.w	800bca0 <_vfprintf_r+0x548>
 800be8c:	9b06      	ldr	r3, [sp, #24]
 800be8e:	2b66      	cmp	r3, #102	; 0x66
 800be90:	d127      	bne.n	800bee2 <_vfprintf_r+0x78a>
 800be92:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800be94:	2b00      	cmp	r3, #0
 800be96:	dd1b      	ble.n	800bed0 <_vfprintf_r+0x778>
 800be98:	f1bb 0f00 	cmp.w	fp, #0
 800be9c:	d102      	bne.n	800bea4 <_vfprintf_r+0x74c>
 800be9e:	f01a 0f01 	tst.w	sl, #1
 800bea2:	d002      	beq.n	800beaa <_vfprintf_r+0x752>
 800bea4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bea6:	4413      	add	r3, r2
 800bea8:	445b      	add	r3, fp
 800beaa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800beac:	920a      	str	r2, [sp, #40]	; 0x28
 800beae:	469b      	mov	fp, r3
 800beb0:	e734      	b.n	800bd1c <_vfprintf_r+0x5c4>
 800beb2:	460a      	mov	r2, r1
 800beb4:	e709      	b.n	800bcca <_vfprintf_r+0x572>
 800beb6:	f812 1b01 	ldrb.w	r1, [r2], #1
 800beba:	f803 1b01 	strb.w	r1, [r3], #1
 800bebe:	e719      	b.n	800bcf4 <_vfprintf_r+0x59c>
 800bec0:	2230      	movs	r2, #48	; 0x30
 800bec2:	4413      	add	r3, r2
 800bec4:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 800bec8:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 800becc:	a91e      	add	r1, sp, #120	; 0x78
 800bece:	e715      	b.n	800bcfc <_vfprintf_r+0x5a4>
 800bed0:	f1bb 0f00 	cmp.w	fp, #0
 800bed4:	d102      	bne.n	800bedc <_vfprintf_r+0x784>
 800bed6:	f01a 0f01 	tst.w	sl, #1
 800beda:	d016      	beq.n	800bf0a <_vfprintf_r+0x7b2>
 800bedc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bede:	3301      	adds	r3, #1
 800bee0:	e7e2      	b.n	800bea8 <_vfprintf_r+0x750>
 800bee2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800bee4:	9b07      	ldr	r3, [sp, #28]
 800bee6:	429a      	cmp	r2, r3
 800bee8:	db07      	blt.n	800befa <_vfprintf_r+0x7a2>
 800beea:	f01a 0f01 	tst.w	sl, #1
 800beee:	d00e      	beq.n	800bf0e <_vfprintf_r+0x7b6>
 800bef0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bef2:	4413      	add	r3, r2
 800bef4:	2267      	movs	r2, #103	; 0x67
 800bef6:	9206      	str	r2, [sp, #24]
 800bef8:	e7d7      	b.n	800beaa <_vfprintf_r+0x752>
 800befa:	9b07      	ldr	r3, [sp, #28]
 800befc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800befe:	2a00      	cmp	r2, #0
 800bf00:	440b      	add	r3, r1
 800bf02:	dcf7      	bgt.n	800bef4 <_vfprintf_r+0x79c>
 800bf04:	f1c2 0201 	rsb	r2, r2, #1
 800bf08:	e7f3      	b.n	800bef2 <_vfprintf_r+0x79a>
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	e7cd      	b.n	800beaa <_vfprintf_r+0x752>
 800bf0e:	4613      	mov	r3, r2
 800bf10:	e7f0      	b.n	800bef4 <_vfprintf_r+0x79c>
 800bf12:	b10b      	cbz	r3, 800bf18 <_vfprintf_r+0x7c0>
 800bf14:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800bf18:	f01a 0f20 	tst.w	sl, #32
 800bf1c:	f107 0304 	add.w	r3, r7, #4
 800bf20:	d008      	beq.n	800bf34 <_vfprintf_r+0x7dc>
 800bf22:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bf24:	683a      	ldr	r2, [r7, #0]
 800bf26:	17cf      	asrs	r7, r1, #31
 800bf28:	4608      	mov	r0, r1
 800bf2a:	4639      	mov	r1, r7
 800bf2c:	e9c2 0100 	strd	r0, r1, [r2]
 800bf30:	461f      	mov	r7, r3
 800bf32:	e490      	b.n	800b856 <_vfprintf_r+0xfe>
 800bf34:	f01a 0f10 	tst.w	sl, #16
 800bf38:	d003      	beq.n	800bf42 <_vfprintf_r+0x7ea>
 800bf3a:	683a      	ldr	r2, [r7, #0]
 800bf3c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bf3e:	6011      	str	r1, [r2, #0]
 800bf40:	e7f6      	b.n	800bf30 <_vfprintf_r+0x7d8>
 800bf42:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800bf46:	d0f8      	beq.n	800bf3a <_vfprintf_r+0x7e2>
 800bf48:	683a      	ldr	r2, [r7, #0]
 800bf4a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 800bf4e:	8011      	strh	r1, [r2, #0]
 800bf50:	e7ee      	b.n	800bf30 <_vfprintf_r+0x7d8>
 800bf52:	f04a 0a10 	orr.w	sl, sl, #16
 800bf56:	f01a 0320 	ands.w	r3, sl, #32
 800bf5a:	d022      	beq.n	800bfa2 <_vfprintf_r+0x84a>
 800bf5c:	3707      	adds	r7, #7
 800bf5e:	f027 0707 	bic.w	r7, r7, #7
 800bf62:	f107 0308 	add.w	r3, r7, #8
 800bf66:	e9d7 6700 	ldrd	r6, r7, [r7]
 800bf6a:	9308      	str	r3, [sp, #32]
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	2200      	movs	r2, #0
 800bf70:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800bf74:	f1bb 3fff 	cmp.w	fp, #4294967295
 800bf78:	f000 83eb 	beq.w	800c752 <_vfprintf_r+0xffa>
 800bf7c:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800bf80:	920a      	str	r2, [sp, #40]	; 0x28
 800bf82:	ea56 0207 	orrs.w	r2, r6, r7
 800bf86:	f040 83ea 	bne.w	800c75e <_vfprintf_r+0x1006>
 800bf8a:	f1bb 0f00 	cmp.w	fp, #0
 800bf8e:	f000 80ac 	beq.w	800c0ea <_vfprintf_r+0x992>
 800bf92:	2b01      	cmp	r3, #1
 800bf94:	d078      	beq.n	800c088 <_vfprintf_r+0x930>
 800bf96:	2b02      	cmp	r3, #2
 800bf98:	f000 8093 	beq.w	800c0c2 <_vfprintf_r+0x96a>
 800bf9c:	2600      	movs	r6, #0
 800bf9e:	2700      	movs	r7, #0
 800bfa0:	e3e3      	b.n	800c76a <_vfprintf_r+0x1012>
 800bfa2:	1d3a      	adds	r2, r7, #4
 800bfa4:	f01a 0110 	ands.w	r1, sl, #16
 800bfa8:	9208      	str	r2, [sp, #32]
 800bfaa:	d002      	beq.n	800bfb2 <_vfprintf_r+0x85a>
 800bfac:	683e      	ldr	r6, [r7, #0]
 800bfae:	2700      	movs	r7, #0
 800bfb0:	e7dd      	b.n	800bf6e <_vfprintf_r+0x816>
 800bfb2:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800bfb6:	d0f9      	beq.n	800bfac <_vfprintf_r+0x854>
 800bfb8:	883e      	ldrh	r6, [r7, #0]
 800bfba:	2700      	movs	r7, #0
 800bfbc:	e7d6      	b.n	800bf6c <_vfprintf_r+0x814>
 800bfbe:	1d3b      	adds	r3, r7, #4
 800bfc0:	9308      	str	r3, [sp, #32]
 800bfc2:	2330      	movs	r3, #48	; 0x30
 800bfc4:	2278      	movs	r2, #120	; 0x78
 800bfc6:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 800bfca:	4b14      	ldr	r3, [pc, #80]	; (800c01c <_vfprintf_r+0x8c4>)
 800bfcc:	683e      	ldr	r6, [r7, #0]
 800bfce:	9315      	str	r3, [sp, #84]	; 0x54
 800bfd0:	2700      	movs	r7, #0
 800bfd2:	f04a 0a02 	orr.w	sl, sl, #2
 800bfd6:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 800bfda:	2302      	movs	r3, #2
 800bfdc:	9206      	str	r2, [sp, #24]
 800bfde:	e7c6      	b.n	800bf6e <_vfprintf_r+0x816>
 800bfe0:	1d3b      	adds	r3, r7, #4
 800bfe2:	2600      	movs	r6, #0
 800bfe4:	f1bb 3fff 	cmp.w	fp, #4294967295
 800bfe8:	9308      	str	r3, [sp, #32]
 800bfea:	f8d7 8000 	ldr.w	r8, [r7]
 800bfee:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 800bff2:	d00a      	beq.n	800c00a <_vfprintf_r+0x8b2>
 800bff4:	465a      	mov	r2, fp
 800bff6:	4631      	mov	r1, r6
 800bff8:	4640      	mov	r0, r8
 800bffa:	f7f4 f901 	bl	8000200 <memchr>
 800bffe:	2800      	cmp	r0, #0
 800c000:	f000 8090 	beq.w	800c124 <_vfprintf_r+0x9cc>
 800c004:	eba0 0b08 	sub.w	fp, r0, r8
 800c008:	e5c1      	b.n	800bb8e <_vfprintf_r+0x436>
 800c00a:	4640      	mov	r0, r8
 800c00c:	f7f4 f8ea 	bl	80001e4 <strlen>
 800c010:	4683      	mov	fp, r0
 800c012:	e5bc      	b.n	800bb8e <_vfprintf_r+0x436>
 800c014:	08010dd8 	.word	0x08010dd8
 800c018:	08010de8 	.word	0x08010de8
 800c01c:	08010dc5 	.word	0x08010dc5
 800c020:	f04a 0a10 	orr.w	sl, sl, #16
 800c024:	f01a 0f20 	tst.w	sl, #32
 800c028:	d009      	beq.n	800c03e <_vfprintf_r+0x8e6>
 800c02a:	3707      	adds	r7, #7
 800c02c:	f027 0707 	bic.w	r7, r7, #7
 800c030:	f107 0308 	add.w	r3, r7, #8
 800c034:	e9d7 6700 	ldrd	r6, r7, [r7]
 800c038:	9308      	str	r3, [sp, #32]
 800c03a:	2301      	movs	r3, #1
 800c03c:	e797      	b.n	800bf6e <_vfprintf_r+0x816>
 800c03e:	1d3b      	adds	r3, r7, #4
 800c040:	f01a 0f10 	tst.w	sl, #16
 800c044:	9308      	str	r3, [sp, #32]
 800c046:	d001      	beq.n	800c04c <_vfprintf_r+0x8f4>
 800c048:	683e      	ldr	r6, [r7, #0]
 800c04a:	e003      	b.n	800c054 <_vfprintf_r+0x8fc>
 800c04c:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800c050:	d0fa      	beq.n	800c048 <_vfprintf_r+0x8f0>
 800c052:	883e      	ldrh	r6, [r7, #0]
 800c054:	2700      	movs	r7, #0
 800c056:	e7f0      	b.n	800c03a <_vfprintf_r+0x8e2>
 800c058:	b10b      	cbz	r3, 800c05e <_vfprintf_r+0x906>
 800c05a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800c05e:	4ba3      	ldr	r3, [pc, #652]	; (800c2ec <_vfprintf_r+0xb94>)
 800c060:	e4be      	b.n	800b9e0 <_vfprintf_r+0x288>
 800c062:	1d3b      	adds	r3, r7, #4
 800c064:	f01a 0f10 	tst.w	sl, #16
 800c068:	9308      	str	r3, [sp, #32]
 800c06a:	d001      	beq.n	800c070 <_vfprintf_r+0x918>
 800c06c:	683e      	ldr	r6, [r7, #0]
 800c06e:	e003      	b.n	800c078 <_vfprintf_r+0x920>
 800c070:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800c074:	d0fa      	beq.n	800c06c <_vfprintf_r+0x914>
 800c076:	883e      	ldrh	r6, [r7, #0]
 800c078:	2700      	movs	r7, #0
 800c07a:	e4be      	b.n	800b9fa <_vfprintf_r+0x2a2>
 800c07c:	4643      	mov	r3, r8
 800c07e:	e375      	b.n	800c76c <_vfprintf_r+0x1014>
 800c080:	2f00      	cmp	r7, #0
 800c082:	bf08      	it	eq
 800c084:	2e0a      	cmpeq	r6, #10
 800c086:	d205      	bcs.n	800c094 <_vfprintf_r+0x93c>
 800c088:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 800c08c:	3630      	adds	r6, #48	; 0x30
 800c08e:	f808 6d41 	strb.w	r6, [r8, #-65]!
 800c092:	e386      	b.n	800c7a2 <_vfprintf_r+0x104a>
 800c094:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 800c098:	4630      	mov	r0, r6
 800c09a:	4639      	mov	r1, r7
 800c09c:	220a      	movs	r2, #10
 800c09e:	2300      	movs	r3, #0
 800c0a0:	f7f4 fdfe 	bl	8000ca0 <__aeabi_uldivmod>
 800c0a4:	3230      	adds	r2, #48	; 0x30
 800c0a6:	f808 2d01 	strb.w	r2, [r8, #-1]!
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	4630      	mov	r0, r6
 800c0ae:	4639      	mov	r1, r7
 800c0b0:	220a      	movs	r2, #10
 800c0b2:	f7f4 fdf5 	bl	8000ca0 <__aeabi_uldivmod>
 800c0b6:	4606      	mov	r6, r0
 800c0b8:	460f      	mov	r7, r1
 800c0ba:	ea56 0307 	orrs.w	r3, r6, r7
 800c0be:	d1eb      	bne.n	800c098 <_vfprintf_r+0x940>
 800c0c0:	e36f      	b.n	800c7a2 <_vfprintf_r+0x104a>
 800c0c2:	2600      	movs	r6, #0
 800c0c4:	2700      	movs	r7, #0
 800c0c6:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 800c0ca:	f006 030f 	and.w	r3, r6, #15
 800c0ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c0d0:	5cd3      	ldrb	r3, [r2, r3]
 800c0d2:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800c0d6:	0933      	lsrs	r3, r6, #4
 800c0d8:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800c0dc:	093a      	lsrs	r2, r7, #4
 800c0de:	461e      	mov	r6, r3
 800c0e0:	4617      	mov	r7, r2
 800c0e2:	ea56 0307 	orrs.w	r3, r6, r7
 800c0e6:	d1f0      	bne.n	800c0ca <_vfprintf_r+0x972>
 800c0e8:	e35b      	b.n	800c7a2 <_vfprintf_r+0x104a>
 800c0ea:	b943      	cbnz	r3, 800c0fe <_vfprintf_r+0x9a6>
 800c0ec:	f01a 0f01 	tst.w	sl, #1
 800c0f0:	d005      	beq.n	800c0fe <_vfprintf_r+0x9a6>
 800c0f2:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 800c0f6:	2330      	movs	r3, #48	; 0x30
 800c0f8:	f808 3d41 	strb.w	r3, [r8, #-65]!
 800c0fc:	e351      	b.n	800c7a2 <_vfprintf_r+0x104a>
 800c0fe:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 800c102:	e34e      	b.n	800c7a2 <_vfprintf_r+0x104a>
 800c104:	b10b      	cbz	r3, 800c10a <_vfprintf_r+0x9b2>
 800c106:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800c10a:	9b06      	ldr	r3, [sp, #24]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	f000 8301 	beq.w	800c714 <_vfprintf_r+0xfbc>
 800c112:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800c116:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 800c11a:	2600      	movs	r6, #0
 800c11c:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 800c120:	9708      	str	r7, [sp, #32]
 800c122:	e4dd      	b.n	800bae0 <_vfprintf_r+0x388>
 800c124:	4606      	mov	r6, r0
 800c126:	e532      	b.n	800bb8e <_vfprintf_r+0x436>
 800c128:	2310      	movs	r3, #16
 800c12a:	6063      	str	r3, [r4, #4]
 800c12c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c12e:	3310      	adds	r3, #16
 800c130:	9323      	str	r3, [sp, #140]	; 0x8c
 800c132:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c134:	3301      	adds	r3, #1
 800c136:	2b07      	cmp	r3, #7
 800c138:	9322      	str	r3, [sp, #136]	; 0x88
 800c13a:	dc02      	bgt.n	800c142 <_vfprintf_r+0x9ea>
 800c13c:	3408      	adds	r4, #8
 800c13e:	3f10      	subs	r7, #16
 800c140:	e60f      	b.n	800bd62 <_vfprintf_r+0x60a>
 800c142:	aa21      	add	r2, sp, #132	; 0x84
 800c144:	4629      	mov	r1, r5
 800c146:	4648      	mov	r0, r9
 800c148:	f003 fe59 	bl	800fdfe <__sprint_r>
 800c14c:	2800      	cmp	r0, #0
 800c14e:	f040 82bd 	bne.w	800c6cc <_vfprintf_r+0xf74>
 800c152:	ac2e      	add	r4, sp, #184	; 0xb8
 800c154:	e7f3      	b.n	800c13e <_vfprintf_r+0x9e6>
 800c156:	aa21      	add	r2, sp, #132	; 0x84
 800c158:	4629      	mov	r1, r5
 800c15a:	4648      	mov	r0, r9
 800c15c:	f003 fe4f 	bl	800fdfe <__sprint_r>
 800c160:	2800      	cmp	r0, #0
 800c162:	f040 82b3 	bne.w	800c6cc <_vfprintf_r+0xf74>
 800c166:	ac2e      	add	r4, sp, #184	; 0xb8
 800c168:	e60b      	b.n	800bd82 <_vfprintf_r+0x62a>
 800c16a:	aa21      	add	r2, sp, #132	; 0x84
 800c16c:	4629      	mov	r1, r5
 800c16e:	4648      	mov	r0, r9
 800c170:	f003 fe45 	bl	800fdfe <__sprint_r>
 800c174:	2800      	cmp	r0, #0
 800c176:	f040 82a9 	bne.w	800c6cc <_vfprintf_r+0xf74>
 800c17a:	ac2e      	add	r4, sp, #184	; 0xb8
 800c17c:	e613      	b.n	800bda6 <_vfprintf_r+0x64e>
 800c17e:	aa21      	add	r2, sp, #132	; 0x84
 800c180:	4629      	mov	r1, r5
 800c182:	4648      	mov	r0, r9
 800c184:	f003 fe3b 	bl	800fdfe <__sprint_r>
 800c188:	2800      	cmp	r0, #0
 800c18a:	f040 829f 	bne.w	800c6cc <_vfprintf_r+0xf74>
 800c18e:	ac2e      	add	r4, sp, #184	; 0xb8
 800c190:	e619      	b.n	800bdc6 <_vfprintf_r+0x66e>
 800c192:	2310      	movs	r3, #16
 800c194:	6063      	str	r3, [r4, #4]
 800c196:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c198:	3310      	adds	r3, #16
 800c19a:	9323      	str	r3, [sp, #140]	; 0x8c
 800c19c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c19e:	3301      	adds	r3, #1
 800c1a0:	2b07      	cmp	r3, #7
 800c1a2:	9322      	str	r3, [sp, #136]	; 0x88
 800c1a4:	dc02      	bgt.n	800c1ac <_vfprintf_r+0xa54>
 800c1a6:	3408      	adds	r4, #8
 800c1a8:	3f10      	subs	r7, #16
 800c1aa:	e614      	b.n	800bdd6 <_vfprintf_r+0x67e>
 800c1ac:	aa21      	add	r2, sp, #132	; 0x84
 800c1ae:	4629      	mov	r1, r5
 800c1b0:	4648      	mov	r0, r9
 800c1b2:	f003 fe24 	bl	800fdfe <__sprint_r>
 800c1b6:	2800      	cmp	r0, #0
 800c1b8:	f040 8288 	bne.w	800c6cc <_vfprintf_r+0xf74>
 800c1bc:	ac2e      	add	r4, sp, #184	; 0xb8
 800c1be:	e7f3      	b.n	800c1a8 <_vfprintf_r+0xa50>
 800c1c0:	aa21      	add	r2, sp, #132	; 0x84
 800c1c2:	4629      	mov	r1, r5
 800c1c4:	4648      	mov	r0, r9
 800c1c6:	f003 fe1a 	bl	800fdfe <__sprint_r>
 800c1ca:	2800      	cmp	r0, #0
 800c1cc:	f040 827e 	bne.w	800c6cc <_vfprintf_r+0xf74>
 800c1d0:	ac2e      	add	r4, sp, #184	; 0xb8
 800c1d2:	e610      	b.n	800bdf6 <_vfprintf_r+0x69e>
 800c1d4:	2310      	movs	r3, #16
 800c1d6:	6063      	str	r3, [r4, #4]
 800c1d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c1da:	3310      	adds	r3, #16
 800c1dc:	9323      	str	r3, [sp, #140]	; 0x8c
 800c1de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c1e0:	3301      	adds	r3, #1
 800c1e2:	2b07      	cmp	r3, #7
 800c1e4:	9322      	str	r3, [sp, #136]	; 0x88
 800c1e6:	dc02      	bgt.n	800c1ee <_vfprintf_r+0xa96>
 800c1e8:	3408      	adds	r4, #8
 800c1ea:	3e10      	subs	r6, #16
 800c1ec:	e608      	b.n	800be00 <_vfprintf_r+0x6a8>
 800c1ee:	aa21      	add	r2, sp, #132	; 0x84
 800c1f0:	4629      	mov	r1, r5
 800c1f2:	4648      	mov	r0, r9
 800c1f4:	f003 fe03 	bl	800fdfe <__sprint_r>
 800c1f8:	2800      	cmp	r0, #0
 800c1fa:	f040 8267 	bne.w	800c6cc <_vfprintf_r+0xf74>
 800c1fe:	ac2e      	add	r4, sp, #184	; 0xb8
 800c200:	e7f3      	b.n	800c1ea <_vfprintf_r+0xa92>
 800c202:	aa21      	add	r2, sp, #132	; 0x84
 800c204:	4629      	mov	r1, r5
 800c206:	4648      	mov	r0, r9
 800c208:	f003 fdf9 	bl	800fdfe <__sprint_r>
 800c20c:	2800      	cmp	r0, #0
 800c20e:	f040 825d 	bne.w	800c6cc <_vfprintf_r+0xf74>
 800c212:	ac2e      	add	r4, sp, #184	; 0xb8
 800c214:	e603      	b.n	800be1e <_vfprintf_r+0x6c6>
 800c216:	9b06      	ldr	r3, [sp, #24]
 800c218:	2b65      	cmp	r3, #101	; 0x65
 800c21a:	f340 81b1 	ble.w	800c580 <_vfprintf_r+0xe28>
 800c21e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c220:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c222:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c224:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c226:	f7f4 fc5b 	bl	8000ae0 <__aeabi_dcmpeq>
 800c22a:	2800      	cmp	r0, #0
 800c22c:	d064      	beq.n	800c2f8 <_vfprintf_r+0xba0>
 800c22e:	4b30      	ldr	r3, [pc, #192]	; (800c2f0 <_vfprintf_r+0xb98>)
 800c230:	6023      	str	r3, [r4, #0]
 800c232:	2301      	movs	r3, #1
 800c234:	6063      	str	r3, [r4, #4]
 800c236:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c238:	3301      	adds	r3, #1
 800c23a:	9323      	str	r3, [sp, #140]	; 0x8c
 800c23c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c23e:	3301      	adds	r3, #1
 800c240:	2b07      	cmp	r3, #7
 800c242:	9322      	str	r3, [sp, #136]	; 0x88
 800c244:	dc26      	bgt.n	800c294 <_vfprintf_r+0xb3c>
 800c246:	3408      	adds	r4, #8
 800c248:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c24a:	9a07      	ldr	r2, [sp, #28]
 800c24c:	4293      	cmp	r3, r2
 800c24e:	db03      	blt.n	800c258 <_vfprintf_r+0xb00>
 800c250:	f01a 0f01 	tst.w	sl, #1
 800c254:	f43f adfb 	beq.w	800be4e <_vfprintf_r+0x6f6>
 800c258:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c25a:	6023      	str	r3, [r4, #0]
 800c25c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c25e:	6063      	str	r3, [r4, #4]
 800c260:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c262:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c264:	4413      	add	r3, r2
 800c266:	9323      	str	r3, [sp, #140]	; 0x8c
 800c268:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c26a:	3301      	adds	r3, #1
 800c26c:	2b07      	cmp	r3, #7
 800c26e:	9322      	str	r3, [sp, #136]	; 0x88
 800c270:	dc1a      	bgt.n	800c2a8 <_vfprintf_r+0xb50>
 800c272:	3408      	adds	r4, #8
 800c274:	9b07      	ldr	r3, [sp, #28]
 800c276:	1e5e      	subs	r6, r3, #1
 800c278:	2e00      	cmp	r6, #0
 800c27a:	f77f ade8 	ble.w	800be4e <_vfprintf_r+0x6f6>
 800c27e:	4f1d      	ldr	r7, [pc, #116]	; (800c2f4 <_vfprintf_r+0xb9c>)
 800c280:	f04f 0810 	mov.w	r8, #16
 800c284:	2e10      	cmp	r6, #16
 800c286:	6027      	str	r7, [r4, #0]
 800c288:	dc18      	bgt.n	800c2bc <_vfprintf_r+0xb64>
 800c28a:	6066      	str	r6, [r4, #4]
 800c28c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c28e:	441e      	add	r6, r3
 800c290:	9623      	str	r6, [sp, #140]	; 0x8c
 800c292:	e5cd      	b.n	800be30 <_vfprintf_r+0x6d8>
 800c294:	aa21      	add	r2, sp, #132	; 0x84
 800c296:	4629      	mov	r1, r5
 800c298:	4648      	mov	r0, r9
 800c29a:	f003 fdb0 	bl	800fdfe <__sprint_r>
 800c29e:	2800      	cmp	r0, #0
 800c2a0:	f040 8214 	bne.w	800c6cc <_vfprintf_r+0xf74>
 800c2a4:	ac2e      	add	r4, sp, #184	; 0xb8
 800c2a6:	e7cf      	b.n	800c248 <_vfprintf_r+0xaf0>
 800c2a8:	aa21      	add	r2, sp, #132	; 0x84
 800c2aa:	4629      	mov	r1, r5
 800c2ac:	4648      	mov	r0, r9
 800c2ae:	f003 fda6 	bl	800fdfe <__sprint_r>
 800c2b2:	2800      	cmp	r0, #0
 800c2b4:	f040 820a 	bne.w	800c6cc <_vfprintf_r+0xf74>
 800c2b8:	ac2e      	add	r4, sp, #184	; 0xb8
 800c2ba:	e7db      	b.n	800c274 <_vfprintf_r+0xb1c>
 800c2bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c2be:	f8c4 8004 	str.w	r8, [r4, #4]
 800c2c2:	3310      	adds	r3, #16
 800c2c4:	9323      	str	r3, [sp, #140]	; 0x8c
 800c2c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c2c8:	3301      	adds	r3, #1
 800c2ca:	2b07      	cmp	r3, #7
 800c2cc:	9322      	str	r3, [sp, #136]	; 0x88
 800c2ce:	dc02      	bgt.n	800c2d6 <_vfprintf_r+0xb7e>
 800c2d0:	3408      	adds	r4, #8
 800c2d2:	3e10      	subs	r6, #16
 800c2d4:	e7d6      	b.n	800c284 <_vfprintf_r+0xb2c>
 800c2d6:	aa21      	add	r2, sp, #132	; 0x84
 800c2d8:	4629      	mov	r1, r5
 800c2da:	4648      	mov	r0, r9
 800c2dc:	f003 fd8f 	bl	800fdfe <__sprint_r>
 800c2e0:	2800      	cmp	r0, #0
 800c2e2:	f040 81f3 	bne.w	800c6cc <_vfprintf_r+0xf74>
 800c2e6:	ac2e      	add	r4, sp, #184	; 0xb8
 800c2e8:	e7f3      	b.n	800c2d2 <_vfprintf_r+0xb7a>
 800c2ea:	bf00      	nop
 800c2ec:	08010dc5 	.word	0x08010dc5
 800c2f0:	08010dd6 	.word	0x08010dd6
 800c2f4:	08010de8 	.word	0x08010de8
 800c2f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	dc7b      	bgt.n	800c3f6 <_vfprintf_r+0xc9e>
 800c2fe:	4b9e      	ldr	r3, [pc, #632]	; (800c578 <_vfprintf_r+0xe20>)
 800c300:	6023      	str	r3, [r4, #0]
 800c302:	2301      	movs	r3, #1
 800c304:	6063      	str	r3, [r4, #4]
 800c306:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c308:	3301      	adds	r3, #1
 800c30a:	9323      	str	r3, [sp, #140]	; 0x8c
 800c30c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c30e:	3301      	adds	r3, #1
 800c310:	2b07      	cmp	r3, #7
 800c312:	9322      	str	r3, [sp, #136]	; 0x88
 800c314:	dc45      	bgt.n	800c3a2 <_vfprintf_r+0xc4a>
 800c316:	3408      	adds	r4, #8
 800c318:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c31a:	b92b      	cbnz	r3, 800c328 <_vfprintf_r+0xbd0>
 800c31c:	9b07      	ldr	r3, [sp, #28]
 800c31e:	b91b      	cbnz	r3, 800c328 <_vfprintf_r+0xbd0>
 800c320:	f01a 0f01 	tst.w	sl, #1
 800c324:	f43f ad93 	beq.w	800be4e <_vfprintf_r+0x6f6>
 800c328:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c32a:	6023      	str	r3, [r4, #0]
 800c32c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c32e:	6063      	str	r3, [r4, #4]
 800c330:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c332:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c334:	4413      	add	r3, r2
 800c336:	9323      	str	r3, [sp, #140]	; 0x8c
 800c338:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c33a:	3301      	adds	r3, #1
 800c33c:	2b07      	cmp	r3, #7
 800c33e:	9322      	str	r3, [sp, #136]	; 0x88
 800c340:	dc39      	bgt.n	800c3b6 <_vfprintf_r+0xc5e>
 800c342:	f104 0308 	add.w	r3, r4, #8
 800c346:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800c348:	2e00      	cmp	r6, #0
 800c34a:	da19      	bge.n	800c380 <_vfprintf_r+0xc28>
 800c34c:	4f8b      	ldr	r7, [pc, #556]	; (800c57c <_vfprintf_r+0xe24>)
 800c34e:	4276      	negs	r6, r6
 800c350:	2410      	movs	r4, #16
 800c352:	2e10      	cmp	r6, #16
 800c354:	601f      	str	r7, [r3, #0]
 800c356:	dc38      	bgt.n	800c3ca <_vfprintf_r+0xc72>
 800c358:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800c35a:	605e      	str	r6, [r3, #4]
 800c35c:	4416      	add	r6, r2
 800c35e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c360:	9623      	str	r6, [sp, #140]	; 0x8c
 800c362:	3201      	adds	r2, #1
 800c364:	2a07      	cmp	r2, #7
 800c366:	f103 0308 	add.w	r3, r3, #8
 800c36a:	9222      	str	r2, [sp, #136]	; 0x88
 800c36c:	dd08      	ble.n	800c380 <_vfprintf_r+0xc28>
 800c36e:	aa21      	add	r2, sp, #132	; 0x84
 800c370:	4629      	mov	r1, r5
 800c372:	4648      	mov	r0, r9
 800c374:	f003 fd43 	bl	800fdfe <__sprint_r>
 800c378:	2800      	cmp	r0, #0
 800c37a:	f040 81a7 	bne.w	800c6cc <_vfprintf_r+0xf74>
 800c37e:	ab2e      	add	r3, sp, #184	; 0xb8
 800c380:	9a07      	ldr	r2, [sp, #28]
 800c382:	605a      	str	r2, [r3, #4]
 800c384:	9907      	ldr	r1, [sp, #28]
 800c386:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800c388:	f8c3 8000 	str.w	r8, [r3]
 800c38c:	440a      	add	r2, r1
 800c38e:	9223      	str	r2, [sp, #140]	; 0x8c
 800c390:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c392:	3201      	adds	r2, #1
 800c394:	2a07      	cmp	r2, #7
 800c396:	9222      	str	r2, [sp, #136]	; 0x88
 800c398:	f73f ad50 	bgt.w	800be3c <_vfprintf_r+0x6e4>
 800c39c:	f103 0408 	add.w	r4, r3, #8
 800c3a0:	e555      	b.n	800be4e <_vfprintf_r+0x6f6>
 800c3a2:	aa21      	add	r2, sp, #132	; 0x84
 800c3a4:	4629      	mov	r1, r5
 800c3a6:	4648      	mov	r0, r9
 800c3a8:	f003 fd29 	bl	800fdfe <__sprint_r>
 800c3ac:	2800      	cmp	r0, #0
 800c3ae:	f040 818d 	bne.w	800c6cc <_vfprintf_r+0xf74>
 800c3b2:	ac2e      	add	r4, sp, #184	; 0xb8
 800c3b4:	e7b0      	b.n	800c318 <_vfprintf_r+0xbc0>
 800c3b6:	aa21      	add	r2, sp, #132	; 0x84
 800c3b8:	4629      	mov	r1, r5
 800c3ba:	4648      	mov	r0, r9
 800c3bc:	f003 fd1f 	bl	800fdfe <__sprint_r>
 800c3c0:	2800      	cmp	r0, #0
 800c3c2:	f040 8183 	bne.w	800c6cc <_vfprintf_r+0xf74>
 800c3c6:	ab2e      	add	r3, sp, #184	; 0xb8
 800c3c8:	e7bd      	b.n	800c346 <_vfprintf_r+0xbee>
 800c3ca:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800c3cc:	605c      	str	r4, [r3, #4]
 800c3ce:	3210      	adds	r2, #16
 800c3d0:	9223      	str	r2, [sp, #140]	; 0x8c
 800c3d2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c3d4:	3201      	adds	r2, #1
 800c3d6:	2a07      	cmp	r2, #7
 800c3d8:	9222      	str	r2, [sp, #136]	; 0x88
 800c3da:	dc02      	bgt.n	800c3e2 <_vfprintf_r+0xc8a>
 800c3dc:	3308      	adds	r3, #8
 800c3de:	3e10      	subs	r6, #16
 800c3e0:	e7b7      	b.n	800c352 <_vfprintf_r+0xbfa>
 800c3e2:	aa21      	add	r2, sp, #132	; 0x84
 800c3e4:	4629      	mov	r1, r5
 800c3e6:	4648      	mov	r0, r9
 800c3e8:	f003 fd09 	bl	800fdfe <__sprint_r>
 800c3ec:	2800      	cmp	r0, #0
 800c3ee:	f040 816d 	bne.w	800c6cc <_vfprintf_r+0xf74>
 800c3f2:	ab2e      	add	r3, sp, #184	; 0xb8
 800c3f4:	e7f3      	b.n	800c3de <_vfprintf_r+0xc86>
 800c3f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3f8:	9a07      	ldr	r2, [sp, #28]
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	bfa8      	it	ge
 800c3fe:	4613      	movge	r3, r2
 800c400:	2b00      	cmp	r3, #0
 800c402:	461e      	mov	r6, r3
 800c404:	dd0b      	ble.n	800c41e <_vfprintf_r+0xcc6>
 800c406:	6063      	str	r3, [r4, #4]
 800c408:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c40a:	f8c4 8000 	str.w	r8, [r4]
 800c40e:	4433      	add	r3, r6
 800c410:	9323      	str	r3, [sp, #140]	; 0x8c
 800c412:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c414:	3301      	adds	r3, #1
 800c416:	2b07      	cmp	r3, #7
 800c418:	9322      	str	r3, [sp, #136]	; 0x88
 800c41a:	dc63      	bgt.n	800c4e4 <_vfprintf_r+0xd8c>
 800c41c:	3408      	adds	r4, #8
 800c41e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c420:	2e00      	cmp	r6, #0
 800c422:	bfa8      	it	ge
 800c424:	1b9b      	subge	r3, r3, r6
 800c426:	2b00      	cmp	r3, #0
 800c428:	461e      	mov	r6, r3
 800c42a:	dd0f      	ble.n	800c44c <_vfprintf_r+0xcf4>
 800c42c:	4f53      	ldr	r7, [pc, #332]	; (800c57c <_vfprintf_r+0xe24>)
 800c42e:	f04f 0b10 	mov.w	fp, #16
 800c432:	2e10      	cmp	r6, #16
 800c434:	6027      	str	r7, [r4, #0]
 800c436:	dc5f      	bgt.n	800c4f8 <_vfprintf_r+0xda0>
 800c438:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c43a:	6066      	str	r6, [r4, #4]
 800c43c:	441e      	add	r6, r3
 800c43e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c440:	9623      	str	r6, [sp, #140]	; 0x8c
 800c442:	3301      	adds	r3, #1
 800c444:	2b07      	cmp	r3, #7
 800c446:	9322      	str	r3, [sp, #136]	; 0x88
 800c448:	dc6d      	bgt.n	800c526 <_vfprintf_r+0xdce>
 800c44a:	3408      	adds	r4, #8
 800c44c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c44e:	9a07      	ldr	r2, [sp, #28]
 800c450:	4293      	cmp	r3, r2
 800c452:	db02      	blt.n	800c45a <_vfprintf_r+0xd02>
 800c454:	f01a 0f01 	tst.w	sl, #1
 800c458:	d00d      	beq.n	800c476 <_vfprintf_r+0xd1e>
 800c45a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c45c:	6023      	str	r3, [r4, #0]
 800c45e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c460:	6063      	str	r3, [r4, #4]
 800c462:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c464:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c466:	4413      	add	r3, r2
 800c468:	9323      	str	r3, [sp, #140]	; 0x8c
 800c46a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c46c:	3301      	adds	r3, #1
 800c46e:	2b07      	cmp	r3, #7
 800c470:	9322      	str	r3, [sp, #136]	; 0x88
 800c472:	dc62      	bgt.n	800c53a <_vfprintf_r+0xde2>
 800c474:	3408      	adds	r4, #8
 800c476:	9b07      	ldr	r3, [sp, #28]
 800c478:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c47a:	1a9e      	subs	r6, r3, r2
 800c47c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c47e:	9a07      	ldr	r2, [sp, #28]
 800c480:	1ad3      	subs	r3, r2, r3
 800c482:	429e      	cmp	r6, r3
 800c484:	bfa8      	it	ge
 800c486:	461e      	movge	r6, r3
 800c488:	2e00      	cmp	r6, #0
 800c48a:	dd0c      	ble.n	800c4a6 <_vfprintf_r+0xd4e>
 800c48c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c48e:	4443      	add	r3, r8
 800c490:	e884 0048 	stmia.w	r4, {r3, r6}
 800c494:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c496:	4433      	add	r3, r6
 800c498:	9323      	str	r3, [sp, #140]	; 0x8c
 800c49a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c49c:	3301      	adds	r3, #1
 800c49e:	2b07      	cmp	r3, #7
 800c4a0:	9322      	str	r3, [sp, #136]	; 0x88
 800c4a2:	dc54      	bgt.n	800c54e <_vfprintf_r+0xdf6>
 800c4a4:	3408      	adds	r4, #8
 800c4a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c4a8:	9a07      	ldr	r2, [sp, #28]
 800c4aa:	2e00      	cmp	r6, #0
 800c4ac:	eba2 0303 	sub.w	r3, r2, r3
 800c4b0:	bfac      	ite	ge
 800c4b2:	1b9e      	subge	r6, r3, r6
 800c4b4:	461e      	movlt	r6, r3
 800c4b6:	2e00      	cmp	r6, #0
 800c4b8:	f77f acc9 	ble.w	800be4e <_vfprintf_r+0x6f6>
 800c4bc:	4f2f      	ldr	r7, [pc, #188]	; (800c57c <_vfprintf_r+0xe24>)
 800c4be:	f04f 0810 	mov.w	r8, #16
 800c4c2:	2e10      	cmp	r6, #16
 800c4c4:	6027      	str	r7, [r4, #0]
 800c4c6:	f77f aee0 	ble.w	800c28a <_vfprintf_r+0xb32>
 800c4ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c4cc:	f8c4 8004 	str.w	r8, [r4, #4]
 800c4d0:	3310      	adds	r3, #16
 800c4d2:	9323      	str	r3, [sp, #140]	; 0x8c
 800c4d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	2b07      	cmp	r3, #7
 800c4da:	9322      	str	r3, [sp, #136]	; 0x88
 800c4dc:	dc41      	bgt.n	800c562 <_vfprintf_r+0xe0a>
 800c4de:	3408      	adds	r4, #8
 800c4e0:	3e10      	subs	r6, #16
 800c4e2:	e7ee      	b.n	800c4c2 <_vfprintf_r+0xd6a>
 800c4e4:	aa21      	add	r2, sp, #132	; 0x84
 800c4e6:	4629      	mov	r1, r5
 800c4e8:	4648      	mov	r0, r9
 800c4ea:	f003 fc88 	bl	800fdfe <__sprint_r>
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	f040 80ec 	bne.w	800c6cc <_vfprintf_r+0xf74>
 800c4f4:	ac2e      	add	r4, sp, #184	; 0xb8
 800c4f6:	e792      	b.n	800c41e <_vfprintf_r+0xcc6>
 800c4f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c4fa:	f8c4 b004 	str.w	fp, [r4, #4]
 800c4fe:	3310      	adds	r3, #16
 800c500:	9323      	str	r3, [sp, #140]	; 0x8c
 800c502:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c504:	3301      	adds	r3, #1
 800c506:	2b07      	cmp	r3, #7
 800c508:	9322      	str	r3, [sp, #136]	; 0x88
 800c50a:	dc02      	bgt.n	800c512 <_vfprintf_r+0xdba>
 800c50c:	3408      	adds	r4, #8
 800c50e:	3e10      	subs	r6, #16
 800c510:	e78f      	b.n	800c432 <_vfprintf_r+0xcda>
 800c512:	aa21      	add	r2, sp, #132	; 0x84
 800c514:	4629      	mov	r1, r5
 800c516:	4648      	mov	r0, r9
 800c518:	f003 fc71 	bl	800fdfe <__sprint_r>
 800c51c:	2800      	cmp	r0, #0
 800c51e:	f040 80d5 	bne.w	800c6cc <_vfprintf_r+0xf74>
 800c522:	ac2e      	add	r4, sp, #184	; 0xb8
 800c524:	e7f3      	b.n	800c50e <_vfprintf_r+0xdb6>
 800c526:	aa21      	add	r2, sp, #132	; 0x84
 800c528:	4629      	mov	r1, r5
 800c52a:	4648      	mov	r0, r9
 800c52c:	f003 fc67 	bl	800fdfe <__sprint_r>
 800c530:	2800      	cmp	r0, #0
 800c532:	f040 80cb 	bne.w	800c6cc <_vfprintf_r+0xf74>
 800c536:	ac2e      	add	r4, sp, #184	; 0xb8
 800c538:	e788      	b.n	800c44c <_vfprintf_r+0xcf4>
 800c53a:	aa21      	add	r2, sp, #132	; 0x84
 800c53c:	4629      	mov	r1, r5
 800c53e:	4648      	mov	r0, r9
 800c540:	f003 fc5d 	bl	800fdfe <__sprint_r>
 800c544:	2800      	cmp	r0, #0
 800c546:	f040 80c1 	bne.w	800c6cc <_vfprintf_r+0xf74>
 800c54a:	ac2e      	add	r4, sp, #184	; 0xb8
 800c54c:	e793      	b.n	800c476 <_vfprintf_r+0xd1e>
 800c54e:	aa21      	add	r2, sp, #132	; 0x84
 800c550:	4629      	mov	r1, r5
 800c552:	4648      	mov	r0, r9
 800c554:	f003 fc53 	bl	800fdfe <__sprint_r>
 800c558:	2800      	cmp	r0, #0
 800c55a:	f040 80b7 	bne.w	800c6cc <_vfprintf_r+0xf74>
 800c55e:	ac2e      	add	r4, sp, #184	; 0xb8
 800c560:	e7a1      	b.n	800c4a6 <_vfprintf_r+0xd4e>
 800c562:	aa21      	add	r2, sp, #132	; 0x84
 800c564:	4629      	mov	r1, r5
 800c566:	4648      	mov	r0, r9
 800c568:	f003 fc49 	bl	800fdfe <__sprint_r>
 800c56c:	2800      	cmp	r0, #0
 800c56e:	f040 80ad 	bne.w	800c6cc <_vfprintf_r+0xf74>
 800c572:	ac2e      	add	r4, sp, #184	; 0xb8
 800c574:	e7b4      	b.n	800c4e0 <_vfprintf_r+0xd88>
 800c576:	bf00      	nop
 800c578:	08010dd6 	.word	0x08010dd6
 800c57c:	08010de8 	.word	0x08010de8
 800c580:	9b07      	ldr	r3, [sp, #28]
 800c582:	2b01      	cmp	r3, #1
 800c584:	dc02      	bgt.n	800c58c <_vfprintf_r+0xe34>
 800c586:	f01a 0f01 	tst.w	sl, #1
 800c58a:	d076      	beq.n	800c67a <_vfprintf_r+0xf22>
 800c58c:	2301      	movs	r3, #1
 800c58e:	6063      	str	r3, [r4, #4]
 800c590:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c592:	f8c4 8000 	str.w	r8, [r4]
 800c596:	3301      	adds	r3, #1
 800c598:	9323      	str	r3, [sp, #140]	; 0x8c
 800c59a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c59c:	3301      	adds	r3, #1
 800c59e:	2b07      	cmp	r3, #7
 800c5a0:	9322      	str	r3, [sp, #136]	; 0x88
 800c5a2:	dc36      	bgt.n	800c612 <_vfprintf_r+0xeba>
 800c5a4:	3408      	adds	r4, #8
 800c5a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c5a8:	6023      	str	r3, [r4, #0]
 800c5aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5ac:	6063      	str	r3, [r4, #4]
 800c5ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c5b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c5b2:	4413      	add	r3, r2
 800c5b4:	9323      	str	r3, [sp, #140]	; 0x8c
 800c5b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c5b8:	3301      	adds	r3, #1
 800c5ba:	2b07      	cmp	r3, #7
 800c5bc:	9322      	str	r3, [sp, #136]	; 0x88
 800c5be:	dc31      	bgt.n	800c624 <_vfprintf_r+0xecc>
 800c5c0:	3408      	adds	r4, #8
 800c5c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c5c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c5c6:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c5c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c5ca:	f7f4 fa89 	bl	8000ae0 <__aeabi_dcmpeq>
 800c5ce:	9b07      	ldr	r3, [sp, #28]
 800c5d0:	1e5e      	subs	r6, r3, #1
 800c5d2:	2800      	cmp	r0, #0
 800c5d4:	d12f      	bne.n	800c636 <_vfprintf_r+0xede>
 800c5d6:	f108 0301 	add.w	r3, r8, #1
 800c5da:	e884 0048 	stmia.w	r4, {r3, r6}
 800c5de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c5e0:	9a07      	ldr	r2, [sp, #28]
 800c5e2:	3b01      	subs	r3, #1
 800c5e4:	4413      	add	r3, r2
 800c5e6:	9323      	str	r3, [sp, #140]	; 0x8c
 800c5e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c5ea:	3301      	adds	r3, #1
 800c5ec:	2b07      	cmp	r3, #7
 800c5ee:	9322      	str	r3, [sp, #136]	; 0x88
 800c5f0:	dd4a      	ble.n	800c688 <_vfprintf_r+0xf30>
 800c5f2:	aa21      	add	r2, sp, #132	; 0x84
 800c5f4:	4629      	mov	r1, r5
 800c5f6:	4648      	mov	r0, r9
 800c5f8:	f003 fc01 	bl	800fdfe <__sprint_r>
 800c5fc:	2800      	cmp	r0, #0
 800c5fe:	d165      	bne.n	800c6cc <_vfprintf_r+0xf74>
 800c600:	ac2e      	add	r4, sp, #184	; 0xb8
 800c602:	ab1d      	add	r3, sp, #116	; 0x74
 800c604:	6023      	str	r3, [r4, #0]
 800c606:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c608:	6063      	str	r3, [r4, #4]
 800c60a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c60c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c60e:	4413      	add	r3, r2
 800c610:	e40d      	b.n	800be2e <_vfprintf_r+0x6d6>
 800c612:	aa21      	add	r2, sp, #132	; 0x84
 800c614:	4629      	mov	r1, r5
 800c616:	4648      	mov	r0, r9
 800c618:	f003 fbf1 	bl	800fdfe <__sprint_r>
 800c61c:	2800      	cmp	r0, #0
 800c61e:	d155      	bne.n	800c6cc <_vfprintf_r+0xf74>
 800c620:	ac2e      	add	r4, sp, #184	; 0xb8
 800c622:	e7c0      	b.n	800c5a6 <_vfprintf_r+0xe4e>
 800c624:	aa21      	add	r2, sp, #132	; 0x84
 800c626:	4629      	mov	r1, r5
 800c628:	4648      	mov	r0, r9
 800c62a:	f003 fbe8 	bl	800fdfe <__sprint_r>
 800c62e:	2800      	cmp	r0, #0
 800c630:	d14c      	bne.n	800c6cc <_vfprintf_r+0xf74>
 800c632:	ac2e      	add	r4, sp, #184	; 0xb8
 800c634:	e7c5      	b.n	800c5c2 <_vfprintf_r+0xe6a>
 800c636:	2e00      	cmp	r6, #0
 800c638:	dde3      	ble.n	800c602 <_vfprintf_r+0xeaa>
 800c63a:	4f5f      	ldr	r7, [pc, #380]	; (800c7b8 <_vfprintf_r+0x1060>)
 800c63c:	f04f 0810 	mov.w	r8, #16
 800c640:	2e10      	cmp	r6, #16
 800c642:	6027      	str	r7, [r4, #0]
 800c644:	dc04      	bgt.n	800c650 <_vfprintf_r+0xef8>
 800c646:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c648:	6066      	str	r6, [r4, #4]
 800c64a:	441e      	add	r6, r3
 800c64c:	9623      	str	r6, [sp, #140]	; 0x8c
 800c64e:	e7cb      	b.n	800c5e8 <_vfprintf_r+0xe90>
 800c650:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c652:	f8c4 8004 	str.w	r8, [r4, #4]
 800c656:	3310      	adds	r3, #16
 800c658:	9323      	str	r3, [sp, #140]	; 0x8c
 800c65a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c65c:	3301      	adds	r3, #1
 800c65e:	2b07      	cmp	r3, #7
 800c660:	9322      	str	r3, [sp, #136]	; 0x88
 800c662:	dc02      	bgt.n	800c66a <_vfprintf_r+0xf12>
 800c664:	3408      	adds	r4, #8
 800c666:	3e10      	subs	r6, #16
 800c668:	e7ea      	b.n	800c640 <_vfprintf_r+0xee8>
 800c66a:	aa21      	add	r2, sp, #132	; 0x84
 800c66c:	4629      	mov	r1, r5
 800c66e:	4648      	mov	r0, r9
 800c670:	f003 fbc5 	bl	800fdfe <__sprint_r>
 800c674:	bb50      	cbnz	r0, 800c6cc <_vfprintf_r+0xf74>
 800c676:	ac2e      	add	r4, sp, #184	; 0xb8
 800c678:	e7f5      	b.n	800c666 <_vfprintf_r+0xf0e>
 800c67a:	2301      	movs	r3, #1
 800c67c:	6063      	str	r3, [r4, #4]
 800c67e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c680:	f8c4 8000 	str.w	r8, [r4]
 800c684:	3301      	adds	r3, #1
 800c686:	e7ae      	b.n	800c5e6 <_vfprintf_r+0xe8e>
 800c688:	3408      	adds	r4, #8
 800c68a:	e7ba      	b.n	800c602 <_vfprintf_r+0xeaa>
 800c68c:	3408      	adds	r4, #8
 800c68e:	f7ff bbde 	b.w	800be4e <_vfprintf_r+0x6f6>
 800c692:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c694:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c696:	1a9e      	subs	r6, r3, r2
 800c698:	2e00      	cmp	r6, #0
 800c69a:	f77f abdc 	ble.w	800be56 <_vfprintf_r+0x6fe>
 800c69e:	2710      	movs	r7, #16
 800c6a0:	4b46      	ldr	r3, [pc, #280]	; (800c7bc <_vfprintf_r+0x1064>)
 800c6a2:	6023      	str	r3, [r4, #0]
 800c6a4:	2e10      	cmp	r6, #16
 800c6a6:	dc20      	bgt.n	800c6ea <_vfprintf_r+0xf92>
 800c6a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c6aa:	6066      	str	r6, [r4, #4]
 800c6ac:	441e      	add	r6, r3
 800c6ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c6b0:	9623      	str	r6, [sp, #140]	; 0x8c
 800c6b2:	3301      	adds	r3, #1
 800c6b4:	2b07      	cmp	r3, #7
 800c6b6:	9322      	str	r3, [sp, #136]	; 0x88
 800c6b8:	f77f abcd 	ble.w	800be56 <_vfprintf_r+0x6fe>
 800c6bc:	aa21      	add	r2, sp, #132	; 0x84
 800c6be:	4629      	mov	r1, r5
 800c6c0:	4648      	mov	r0, r9
 800c6c2:	f003 fb9c 	bl	800fdfe <__sprint_r>
 800c6c6:	2800      	cmp	r0, #0
 800c6c8:	f43f abc5 	beq.w	800be56 <_vfprintf_r+0x6fe>
 800c6cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6ce:	07d9      	lsls	r1, r3, #31
 800c6d0:	d405      	bmi.n	800c6de <_vfprintf_r+0xf86>
 800c6d2:	89ab      	ldrh	r3, [r5, #12]
 800c6d4:	059a      	lsls	r2, r3, #22
 800c6d6:	d402      	bmi.n	800c6de <_vfprintf_r+0xf86>
 800c6d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6da:	f002 f806 	bl	800e6ea <__retarget_lock_release_recursive>
 800c6de:	89ab      	ldrh	r3, [r5, #12]
 800c6e0:	065b      	lsls	r3, r3, #25
 800c6e2:	f57f a8a6 	bpl.w	800b832 <_vfprintf_r+0xda>
 800c6e6:	f7ff b87c 	b.w	800b7e2 <_vfprintf_r+0x8a>
 800c6ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c6ec:	6067      	str	r7, [r4, #4]
 800c6ee:	3310      	adds	r3, #16
 800c6f0:	9323      	str	r3, [sp, #140]	; 0x8c
 800c6f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c6f4:	3301      	adds	r3, #1
 800c6f6:	2b07      	cmp	r3, #7
 800c6f8:	9322      	str	r3, [sp, #136]	; 0x88
 800c6fa:	dc02      	bgt.n	800c702 <_vfprintf_r+0xfaa>
 800c6fc:	3408      	adds	r4, #8
 800c6fe:	3e10      	subs	r6, #16
 800c700:	e7ce      	b.n	800c6a0 <_vfprintf_r+0xf48>
 800c702:	aa21      	add	r2, sp, #132	; 0x84
 800c704:	4629      	mov	r1, r5
 800c706:	4648      	mov	r0, r9
 800c708:	f003 fb79 	bl	800fdfe <__sprint_r>
 800c70c:	2800      	cmp	r0, #0
 800c70e:	d1dd      	bne.n	800c6cc <_vfprintf_r+0xf74>
 800c710:	ac2e      	add	r4, sp, #184	; 0xb8
 800c712:	e7f4      	b.n	800c6fe <_vfprintf_r+0xfa6>
 800c714:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c716:	b913      	cbnz	r3, 800c71e <_vfprintf_r+0xfc6>
 800c718:	2300      	movs	r3, #0
 800c71a:	9322      	str	r3, [sp, #136]	; 0x88
 800c71c:	e7d6      	b.n	800c6cc <_vfprintf_r+0xf74>
 800c71e:	aa21      	add	r2, sp, #132	; 0x84
 800c720:	4629      	mov	r1, r5
 800c722:	4648      	mov	r0, r9
 800c724:	f003 fb6b 	bl	800fdfe <__sprint_r>
 800c728:	2800      	cmp	r0, #0
 800c72a:	d0f5      	beq.n	800c718 <_vfprintf_r+0xfc0>
 800c72c:	e7ce      	b.n	800c6cc <_vfprintf_r+0xf74>
 800c72e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c730:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c732:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c734:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c736:	f7f4 fa05 	bl	8000b44 <__aeabi_dcmpun>
 800c73a:	2800      	cmp	r0, #0
 800c73c:	f43f aa29 	beq.w	800bb92 <_vfprintf_r+0x43a>
 800c740:	4b1f      	ldr	r3, [pc, #124]	; (800c7c0 <_vfprintf_r+0x1068>)
 800c742:	4a20      	ldr	r2, [pc, #128]	; (800c7c4 <_vfprintf_r+0x106c>)
 800c744:	f7ff ba19 	b.w	800bb7a <_vfprintf_r+0x422>
 800c748:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c74a:	1a1b      	subs	r3, r3, r0
 800c74c:	9307      	str	r3, [sp, #28]
 800c74e:	f7ff ba9e 	b.w	800bc8e <_vfprintf_r+0x536>
 800c752:	ea56 0207 	orrs.w	r2, r6, r7
 800c756:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800c75a:	f43f ac1a 	beq.w	800bf92 <_vfprintf_r+0x83a>
 800c75e:	2b01      	cmp	r3, #1
 800c760:	f43f ac8e 	beq.w	800c080 <_vfprintf_r+0x928>
 800c764:	2b02      	cmp	r3, #2
 800c766:	f43f acae 	beq.w	800c0c6 <_vfprintf_r+0x96e>
 800c76a:	ab2e      	add	r3, sp, #184	; 0xb8
 800c76c:	08f1      	lsrs	r1, r6, #3
 800c76e:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800c772:	08f8      	lsrs	r0, r7, #3
 800c774:	f006 0207 	and.w	r2, r6, #7
 800c778:	4607      	mov	r7, r0
 800c77a:	460e      	mov	r6, r1
 800c77c:	3230      	adds	r2, #48	; 0x30
 800c77e:	ea56 0107 	orrs.w	r1, r6, r7
 800c782:	f103 38ff 	add.w	r8, r3, #4294967295
 800c786:	f803 2c01 	strb.w	r2, [r3, #-1]
 800c78a:	f47f ac77 	bne.w	800c07c <_vfprintf_r+0x924>
 800c78e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c790:	07c8      	lsls	r0, r1, #31
 800c792:	d506      	bpl.n	800c7a2 <_vfprintf_r+0x104a>
 800c794:	2a30      	cmp	r2, #48	; 0x30
 800c796:	d004      	beq.n	800c7a2 <_vfprintf_r+0x104a>
 800c798:	2230      	movs	r2, #48	; 0x30
 800c79a:	f808 2c01 	strb.w	r2, [r8, #-1]
 800c79e:	f1a3 0802 	sub.w	r8, r3, #2
 800c7a2:	ab2e      	add	r3, sp, #184	; 0xb8
 800c7a4:	465e      	mov	r6, fp
 800c7a6:	eba3 0b08 	sub.w	fp, r3, r8
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c7b0:	930a      	str	r3, [sp, #40]	; 0x28
 800c7b2:	f7ff babb 	b.w	800bd2c <_vfprintf_r+0x5d4>
 800c7b6:	bf00      	nop
 800c7b8:	08010de8 	.word	0x08010de8
 800c7bc:	08010dd8 	.word	0x08010dd8
 800c7c0:	08010dac 	.word	0x08010dac
 800c7c4:	08010db0 	.word	0x08010db0

0800c7c8 <__sbprintf>:
 800c7c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7ca:	460c      	mov	r4, r1
 800c7cc:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 800c7d0:	461f      	mov	r7, r3
 800c7d2:	8989      	ldrh	r1, [r1, #12]
 800c7d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c7d6:	9319      	str	r3, [sp, #100]	; 0x64
 800c7d8:	89e3      	ldrh	r3, [r4, #14]
 800c7da:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c7de:	f021 0102 	bic.w	r1, r1, #2
 800c7e2:	6a23      	ldr	r3, [r4, #32]
 800c7e4:	f8ad 100c 	strh.w	r1, [sp, #12]
 800c7e8:	9308      	str	r3, [sp, #32]
 800c7ea:	a91a      	add	r1, sp, #104	; 0x68
 800c7ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c7ee:	930a      	str	r3, [sp, #40]	; 0x28
 800c7f0:	4615      	mov	r5, r2
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	4606      	mov	r6, r0
 800c7f6:	9100      	str	r1, [sp, #0]
 800c7f8:	9104      	str	r1, [sp, #16]
 800c7fa:	a816      	add	r0, sp, #88	; 0x58
 800c7fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c800:	9102      	str	r1, [sp, #8]
 800c802:	9105      	str	r1, [sp, #20]
 800c804:	9306      	str	r3, [sp, #24]
 800c806:	f001 ff6b 	bl	800e6e0 <__retarget_lock_init_recursive>
 800c80a:	462a      	mov	r2, r5
 800c80c:	463b      	mov	r3, r7
 800c80e:	4669      	mov	r1, sp
 800c810:	4630      	mov	r0, r6
 800c812:	f7fe ffa1 	bl	800b758 <_vfprintf_r>
 800c816:	1e05      	subs	r5, r0, #0
 800c818:	db07      	blt.n	800c82a <__sbprintf+0x62>
 800c81a:	4669      	mov	r1, sp
 800c81c:	4630      	mov	r0, r6
 800c81e:	f000 ff87 	bl	800d730 <_fflush_r>
 800c822:	2800      	cmp	r0, #0
 800c824:	bf18      	it	ne
 800c826:	f04f 35ff 	movne.w	r5, #4294967295
 800c82a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800c82e:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c830:	065b      	lsls	r3, r3, #25
 800c832:	bf42      	ittt	mi
 800c834:	89a3      	ldrhmi	r3, [r4, #12]
 800c836:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800c83a:	81a3      	strhmi	r3, [r4, #12]
 800c83c:	f001 ff51 	bl	800e6e2 <__retarget_lock_close_recursive>
 800c840:	4628      	mov	r0, r5
 800c842:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 800c846:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c848 <__swsetup_r>:
 800c848:	4b32      	ldr	r3, [pc, #200]	; (800c914 <__swsetup_r+0xcc>)
 800c84a:	b570      	push	{r4, r5, r6, lr}
 800c84c:	681d      	ldr	r5, [r3, #0]
 800c84e:	4606      	mov	r6, r0
 800c850:	460c      	mov	r4, r1
 800c852:	b125      	cbz	r5, 800c85e <__swsetup_r+0x16>
 800c854:	69ab      	ldr	r3, [r5, #24]
 800c856:	b913      	cbnz	r3, 800c85e <__swsetup_r+0x16>
 800c858:	4628      	mov	r0, r5
 800c85a:	f000 fffd 	bl	800d858 <__sinit>
 800c85e:	4b2e      	ldr	r3, [pc, #184]	; (800c918 <__swsetup_r+0xd0>)
 800c860:	429c      	cmp	r4, r3
 800c862:	d10f      	bne.n	800c884 <__swsetup_r+0x3c>
 800c864:	686c      	ldr	r4, [r5, #4]
 800c866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c86a:	b29a      	uxth	r2, r3
 800c86c:	0715      	lsls	r5, r2, #28
 800c86e:	d42c      	bmi.n	800c8ca <__swsetup_r+0x82>
 800c870:	06d0      	lsls	r0, r2, #27
 800c872:	d411      	bmi.n	800c898 <__swsetup_r+0x50>
 800c874:	2209      	movs	r2, #9
 800c876:	6032      	str	r2, [r6, #0]
 800c878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c87c:	81a3      	strh	r3, [r4, #12]
 800c87e:	f04f 30ff 	mov.w	r0, #4294967295
 800c882:	bd70      	pop	{r4, r5, r6, pc}
 800c884:	4b25      	ldr	r3, [pc, #148]	; (800c91c <__swsetup_r+0xd4>)
 800c886:	429c      	cmp	r4, r3
 800c888:	d101      	bne.n	800c88e <__swsetup_r+0x46>
 800c88a:	68ac      	ldr	r4, [r5, #8]
 800c88c:	e7eb      	b.n	800c866 <__swsetup_r+0x1e>
 800c88e:	4b24      	ldr	r3, [pc, #144]	; (800c920 <__swsetup_r+0xd8>)
 800c890:	429c      	cmp	r4, r3
 800c892:	bf08      	it	eq
 800c894:	68ec      	ldreq	r4, [r5, #12]
 800c896:	e7e6      	b.n	800c866 <__swsetup_r+0x1e>
 800c898:	0751      	lsls	r1, r2, #29
 800c89a:	d512      	bpl.n	800c8c2 <__swsetup_r+0x7a>
 800c89c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c89e:	b141      	cbz	r1, 800c8b2 <__swsetup_r+0x6a>
 800c8a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8a4:	4299      	cmp	r1, r3
 800c8a6:	d002      	beq.n	800c8ae <__swsetup_r+0x66>
 800c8a8:	4630      	mov	r0, r6
 800c8aa:	f001 f8ab 	bl	800da04 <_free_r>
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	6363      	str	r3, [r4, #52]	; 0x34
 800c8b2:	89a3      	ldrh	r3, [r4, #12]
 800c8b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c8b8:	81a3      	strh	r3, [r4, #12]
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	6063      	str	r3, [r4, #4]
 800c8be:	6923      	ldr	r3, [r4, #16]
 800c8c0:	6023      	str	r3, [r4, #0]
 800c8c2:	89a3      	ldrh	r3, [r4, #12]
 800c8c4:	f043 0308 	orr.w	r3, r3, #8
 800c8c8:	81a3      	strh	r3, [r4, #12]
 800c8ca:	6923      	ldr	r3, [r4, #16]
 800c8cc:	b94b      	cbnz	r3, 800c8e2 <__swsetup_r+0x9a>
 800c8ce:	89a3      	ldrh	r3, [r4, #12]
 800c8d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c8d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8d8:	d003      	beq.n	800c8e2 <__swsetup_r+0x9a>
 800c8da:	4621      	mov	r1, r4
 800c8dc:	4630      	mov	r0, r6
 800c8de:	f001 ff31 	bl	800e744 <__smakebuf_r>
 800c8e2:	89a2      	ldrh	r2, [r4, #12]
 800c8e4:	f012 0301 	ands.w	r3, r2, #1
 800c8e8:	d00c      	beq.n	800c904 <__swsetup_r+0xbc>
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	60a3      	str	r3, [r4, #8]
 800c8ee:	6963      	ldr	r3, [r4, #20]
 800c8f0:	425b      	negs	r3, r3
 800c8f2:	61a3      	str	r3, [r4, #24]
 800c8f4:	6923      	ldr	r3, [r4, #16]
 800c8f6:	b953      	cbnz	r3, 800c90e <__swsetup_r+0xc6>
 800c8f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8fc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c900:	d1ba      	bne.n	800c878 <__swsetup_r+0x30>
 800c902:	bd70      	pop	{r4, r5, r6, pc}
 800c904:	0792      	lsls	r2, r2, #30
 800c906:	bf58      	it	pl
 800c908:	6963      	ldrpl	r3, [r4, #20]
 800c90a:	60a3      	str	r3, [r4, #8]
 800c90c:	e7f2      	b.n	800c8f4 <__swsetup_r+0xac>
 800c90e:	2000      	movs	r0, #0
 800c910:	e7f7      	b.n	800c902 <__swsetup_r+0xba>
 800c912:	bf00      	nop
 800c914:	20000010 	.word	0x20000010
 800c918:	08010e28 	.word	0x08010e28
 800c91c:	08010e48 	.word	0x08010e48
 800c920:	08010e08 	.word	0x08010e08

0800c924 <div>:
 800c924:	2900      	cmp	r1, #0
 800c926:	b510      	push	{r4, lr}
 800c928:	fb91 f4f2 	sdiv	r4, r1, r2
 800c92c:	fb02 1314 	mls	r3, r2, r4, r1
 800c930:	db06      	blt.n	800c940 <div+0x1c>
 800c932:	2b00      	cmp	r3, #0
 800c934:	da01      	bge.n	800c93a <div+0x16>
 800c936:	3401      	adds	r4, #1
 800c938:	1a9b      	subs	r3, r3, r2
 800c93a:	6004      	str	r4, [r0, #0]
 800c93c:	6043      	str	r3, [r0, #4]
 800c93e:	bd10      	pop	{r4, pc}
 800c940:	2b00      	cmp	r3, #0
 800c942:	bfc4      	itt	gt
 800c944:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800c948:	189b      	addgt	r3, r3, r2
 800c94a:	e7f6      	b.n	800c93a <div+0x16>

0800c94c <quorem>:
 800c94c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c950:	6903      	ldr	r3, [r0, #16]
 800c952:	690c      	ldr	r4, [r1, #16]
 800c954:	429c      	cmp	r4, r3
 800c956:	4680      	mov	r8, r0
 800c958:	f300 8082 	bgt.w	800ca60 <quorem+0x114>
 800c95c:	3c01      	subs	r4, #1
 800c95e:	f101 0714 	add.w	r7, r1, #20
 800c962:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800c966:	f100 0614 	add.w	r6, r0, #20
 800c96a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c96e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c972:	eb06 030e 	add.w	r3, r6, lr
 800c976:	3501      	adds	r5, #1
 800c978:	eb07 090e 	add.w	r9, r7, lr
 800c97c:	9301      	str	r3, [sp, #4]
 800c97e:	fbb0 f5f5 	udiv	r5, r0, r5
 800c982:	b395      	cbz	r5, 800c9ea <quorem+0x9e>
 800c984:	f04f 0a00 	mov.w	sl, #0
 800c988:	4638      	mov	r0, r7
 800c98a:	46b4      	mov	ip, r6
 800c98c:	46d3      	mov	fp, sl
 800c98e:	f850 2b04 	ldr.w	r2, [r0], #4
 800c992:	b293      	uxth	r3, r2
 800c994:	fb05 a303 	mla	r3, r5, r3, sl
 800c998:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c99c:	b29b      	uxth	r3, r3
 800c99e:	ebab 0303 	sub.w	r3, fp, r3
 800c9a2:	0c12      	lsrs	r2, r2, #16
 800c9a4:	f8bc b000 	ldrh.w	fp, [ip]
 800c9a8:	fb05 a202 	mla	r2, r5, r2, sl
 800c9ac:	fa13 f38b 	uxtah	r3, r3, fp
 800c9b0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c9b4:	fa1f fb82 	uxth.w	fp, r2
 800c9b8:	f8dc 2000 	ldr.w	r2, [ip]
 800c9bc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c9c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c9c4:	b29b      	uxth	r3, r3
 800c9c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c9ca:	4581      	cmp	r9, r0
 800c9cc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c9d0:	f84c 3b04 	str.w	r3, [ip], #4
 800c9d4:	d2db      	bcs.n	800c98e <quorem+0x42>
 800c9d6:	f856 300e 	ldr.w	r3, [r6, lr]
 800c9da:	b933      	cbnz	r3, 800c9ea <quorem+0x9e>
 800c9dc:	9b01      	ldr	r3, [sp, #4]
 800c9de:	3b04      	subs	r3, #4
 800c9e0:	429e      	cmp	r6, r3
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	d330      	bcc.n	800ca48 <quorem+0xfc>
 800c9e6:	f8c8 4010 	str.w	r4, [r8, #16]
 800c9ea:	4640      	mov	r0, r8
 800c9ec:	f002 f95d 	bl	800ecaa <__mcmp>
 800c9f0:	2800      	cmp	r0, #0
 800c9f2:	db25      	blt.n	800ca40 <quorem+0xf4>
 800c9f4:	3501      	adds	r5, #1
 800c9f6:	4630      	mov	r0, r6
 800c9f8:	f04f 0e00 	mov.w	lr, #0
 800c9fc:	f857 2b04 	ldr.w	r2, [r7], #4
 800ca00:	f8d0 c000 	ldr.w	ip, [r0]
 800ca04:	b293      	uxth	r3, r2
 800ca06:	ebae 0303 	sub.w	r3, lr, r3
 800ca0a:	0c12      	lsrs	r2, r2, #16
 800ca0c:	fa13 f38c 	uxtah	r3, r3, ip
 800ca10:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ca14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ca18:	b29b      	uxth	r3, r3
 800ca1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca1e:	45b9      	cmp	r9, r7
 800ca20:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800ca24:	f840 3b04 	str.w	r3, [r0], #4
 800ca28:	d2e8      	bcs.n	800c9fc <quorem+0xb0>
 800ca2a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800ca2e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800ca32:	b92a      	cbnz	r2, 800ca40 <quorem+0xf4>
 800ca34:	3b04      	subs	r3, #4
 800ca36:	429e      	cmp	r6, r3
 800ca38:	461a      	mov	r2, r3
 800ca3a:	d30b      	bcc.n	800ca54 <quorem+0x108>
 800ca3c:	f8c8 4010 	str.w	r4, [r8, #16]
 800ca40:	4628      	mov	r0, r5
 800ca42:	b003      	add	sp, #12
 800ca44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca48:	6812      	ldr	r2, [r2, #0]
 800ca4a:	3b04      	subs	r3, #4
 800ca4c:	2a00      	cmp	r2, #0
 800ca4e:	d1ca      	bne.n	800c9e6 <quorem+0x9a>
 800ca50:	3c01      	subs	r4, #1
 800ca52:	e7c5      	b.n	800c9e0 <quorem+0x94>
 800ca54:	6812      	ldr	r2, [r2, #0]
 800ca56:	3b04      	subs	r3, #4
 800ca58:	2a00      	cmp	r2, #0
 800ca5a:	d1ef      	bne.n	800ca3c <quorem+0xf0>
 800ca5c:	3c01      	subs	r4, #1
 800ca5e:	e7ea      	b.n	800ca36 <quorem+0xea>
 800ca60:	2000      	movs	r0, #0
 800ca62:	e7ee      	b.n	800ca42 <quorem+0xf6>
 800ca64:	0000      	movs	r0, r0
	...

0800ca68 <_dtoa_r>:
 800ca68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca6c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ca6e:	b095      	sub	sp, #84	; 0x54
 800ca70:	4604      	mov	r4, r0
 800ca72:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800ca74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ca78:	b93e      	cbnz	r6, 800ca8a <_dtoa_r+0x22>
 800ca7a:	2010      	movs	r0, #16
 800ca7c:	f7fc ff92 	bl	80099a4 <malloc>
 800ca80:	6260      	str	r0, [r4, #36]	; 0x24
 800ca82:	6046      	str	r6, [r0, #4]
 800ca84:	6086      	str	r6, [r0, #8]
 800ca86:	6006      	str	r6, [r0, #0]
 800ca88:	60c6      	str	r6, [r0, #12]
 800ca8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca8c:	6819      	ldr	r1, [r3, #0]
 800ca8e:	b151      	cbz	r1, 800caa6 <_dtoa_r+0x3e>
 800ca90:	685a      	ldr	r2, [r3, #4]
 800ca92:	604a      	str	r2, [r1, #4]
 800ca94:	2301      	movs	r3, #1
 800ca96:	4093      	lsls	r3, r2
 800ca98:	608b      	str	r3, [r1, #8]
 800ca9a:	4620      	mov	r0, r4
 800ca9c:	f001 fef2 	bl	800e884 <_Bfree>
 800caa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800caa2:	2200      	movs	r2, #0
 800caa4:	601a      	str	r2, [r3, #0]
 800caa6:	9b03      	ldr	r3, [sp, #12]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	bfbf      	itttt	lt
 800caac:	2301      	movlt	r3, #1
 800caae:	602b      	strlt	r3, [r5, #0]
 800cab0:	9b03      	ldrlt	r3, [sp, #12]
 800cab2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cab6:	bfb2      	itee	lt
 800cab8:	9303      	strlt	r3, [sp, #12]
 800caba:	2300      	movge	r3, #0
 800cabc:	602b      	strge	r3, [r5, #0]
 800cabe:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800cac2:	4ba9      	ldr	r3, [pc, #676]	; (800cd68 <_dtoa_r+0x300>)
 800cac4:	ea33 0309 	bics.w	r3, r3, r9
 800cac8:	d11b      	bne.n	800cb02 <_dtoa_r+0x9a>
 800caca:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cacc:	f242 730f 	movw	r3, #9999	; 0x270f
 800cad0:	6013      	str	r3, [r2, #0]
 800cad2:	9b02      	ldr	r3, [sp, #8]
 800cad4:	b923      	cbnz	r3, 800cae0 <_dtoa_r+0x78>
 800cad6:	f3c9 0013 	ubfx	r0, r9, #0, #20
 800cada:	2800      	cmp	r0, #0
 800cadc:	f000 8581 	beq.w	800d5e2 <_dtoa_r+0xb7a>
 800cae0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cae2:	b953      	cbnz	r3, 800cafa <_dtoa_r+0x92>
 800cae4:	4ba1      	ldr	r3, [pc, #644]	; (800cd6c <_dtoa_r+0x304>)
 800cae6:	e021      	b.n	800cb2c <_dtoa_r+0xc4>
 800cae8:	4ba1      	ldr	r3, [pc, #644]	; (800cd70 <_dtoa_r+0x308>)
 800caea:	9306      	str	r3, [sp, #24]
 800caec:	3308      	adds	r3, #8
 800caee:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800caf0:	6013      	str	r3, [r2, #0]
 800caf2:	9806      	ldr	r0, [sp, #24]
 800caf4:	b015      	add	sp, #84	; 0x54
 800caf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cafa:	4b9c      	ldr	r3, [pc, #624]	; (800cd6c <_dtoa_r+0x304>)
 800cafc:	9306      	str	r3, [sp, #24]
 800cafe:	3303      	adds	r3, #3
 800cb00:	e7f5      	b.n	800caee <_dtoa_r+0x86>
 800cb02:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cb06:	2200      	movs	r2, #0
 800cb08:	2300      	movs	r3, #0
 800cb0a:	4630      	mov	r0, r6
 800cb0c:	4639      	mov	r1, r7
 800cb0e:	f7f3 ffe7 	bl	8000ae0 <__aeabi_dcmpeq>
 800cb12:	4680      	mov	r8, r0
 800cb14:	b160      	cbz	r0, 800cb30 <_dtoa_r+0xc8>
 800cb16:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cb18:	2301      	movs	r3, #1
 800cb1a:	6013      	str	r3, [r2, #0]
 800cb1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	f000 855c 	beq.w	800d5dc <_dtoa_r+0xb74>
 800cb24:	4b93      	ldr	r3, [pc, #588]	; (800cd74 <_dtoa_r+0x30c>)
 800cb26:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800cb28:	6013      	str	r3, [r2, #0]
 800cb2a:	3b01      	subs	r3, #1
 800cb2c:	9306      	str	r3, [sp, #24]
 800cb2e:	e7e0      	b.n	800caf2 <_dtoa_r+0x8a>
 800cb30:	ab12      	add	r3, sp, #72	; 0x48
 800cb32:	9301      	str	r3, [sp, #4]
 800cb34:	ab13      	add	r3, sp, #76	; 0x4c
 800cb36:	9300      	str	r3, [sp, #0]
 800cb38:	4632      	mov	r2, r6
 800cb3a:	463b      	mov	r3, r7
 800cb3c:	4620      	mov	r0, r4
 800cb3e:	f002 f9a3 	bl	800ee88 <__d2b>
 800cb42:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cb46:	4682      	mov	sl, r0
 800cb48:	2d00      	cmp	r5, #0
 800cb4a:	d07c      	beq.n	800cc46 <_dtoa_r+0x1de>
 800cb4c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cb50:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800cb54:	4630      	mov	r0, r6
 800cb56:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800cb5a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cb5e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800cb62:	2200      	movs	r2, #0
 800cb64:	4b84      	ldr	r3, [pc, #528]	; (800cd78 <_dtoa_r+0x310>)
 800cb66:	f7f3 fb9f 	bl	80002a8 <__aeabi_dsub>
 800cb6a:	a379      	add	r3, pc, #484	; (adr r3, 800cd50 <_dtoa_r+0x2e8>)
 800cb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb70:	f7f3 fd4e 	bl	8000610 <__aeabi_dmul>
 800cb74:	a378      	add	r3, pc, #480	; (adr r3, 800cd58 <_dtoa_r+0x2f0>)
 800cb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb7a:	f7f3 fb97 	bl	80002ac <__adddf3>
 800cb7e:	4606      	mov	r6, r0
 800cb80:	4628      	mov	r0, r5
 800cb82:	460f      	mov	r7, r1
 800cb84:	f7f3 fcde 	bl	8000544 <__aeabi_i2d>
 800cb88:	a375      	add	r3, pc, #468	; (adr r3, 800cd60 <_dtoa_r+0x2f8>)
 800cb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb8e:	f7f3 fd3f 	bl	8000610 <__aeabi_dmul>
 800cb92:	4602      	mov	r2, r0
 800cb94:	460b      	mov	r3, r1
 800cb96:	4630      	mov	r0, r6
 800cb98:	4639      	mov	r1, r7
 800cb9a:	f7f3 fb87 	bl	80002ac <__adddf3>
 800cb9e:	4606      	mov	r6, r0
 800cba0:	460f      	mov	r7, r1
 800cba2:	f7f3 ffe5 	bl	8000b70 <__aeabi_d2iz>
 800cba6:	2200      	movs	r2, #0
 800cba8:	4683      	mov	fp, r0
 800cbaa:	2300      	movs	r3, #0
 800cbac:	4630      	mov	r0, r6
 800cbae:	4639      	mov	r1, r7
 800cbb0:	f7f3 ffa0 	bl	8000af4 <__aeabi_dcmplt>
 800cbb4:	b158      	cbz	r0, 800cbce <_dtoa_r+0x166>
 800cbb6:	4658      	mov	r0, fp
 800cbb8:	f7f3 fcc4 	bl	8000544 <__aeabi_i2d>
 800cbbc:	4602      	mov	r2, r0
 800cbbe:	460b      	mov	r3, r1
 800cbc0:	4630      	mov	r0, r6
 800cbc2:	4639      	mov	r1, r7
 800cbc4:	f7f3 ff8c 	bl	8000ae0 <__aeabi_dcmpeq>
 800cbc8:	b908      	cbnz	r0, 800cbce <_dtoa_r+0x166>
 800cbca:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cbce:	f1bb 0f16 	cmp.w	fp, #22
 800cbd2:	d857      	bhi.n	800cc84 <_dtoa_r+0x21c>
 800cbd4:	4969      	ldr	r1, [pc, #420]	; (800cd7c <_dtoa_r+0x314>)
 800cbd6:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800cbda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cbde:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cbe2:	f7f3 ffa5 	bl	8000b30 <__aeabi_dcmpgt>
 800cbe6:	2800      	cmp	r0, #0
 800cbe8:	d04e      	beq.n	800cc88 <_dtoa_r+0x220>
 800cbea:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cbee:	2300      	movs	r3, #0
 800cbf0:	930d      	str	r3, [sp, #52]	; 0x34
 800cbf2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cbf4:	1b5d      	subs	r5, r3, r5
 800cbf6:	1e6b      	subs	r3, r5, #1
 800cbf8:	9307      	str	r3, [sp, #28]
 800cbfa:	bf43      	ittte	mi
 800cbfc:	2300      	movmi	r3, #0
 800cbfe:	f1c5 0801 	rsbmi	r8, r5, #1
 800cc02:	9307      	strmi	r3, [sp, #28]
 800cc04:	f04f 0800 	movpl.w	r8, #0
 800cc08:	f1bb 0f00 	cmp.w	fp, #0
 800cc0c:	db3e      	blt.n	800cc8c <_dtoa_r+0x224>
 800cc0e:	9b07      	ldr	r3, [sp, #28]
 800cc10:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800cc14:	445b      	add	r3, fp
 800cc16:	9307      	str	r3, [sp, #28]
 800cc18:	2300      	movs	r3, #0
 800cc1a:	9308      	str	r3, [sp, #32]
 800cc1c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cc1e:	2b09      	cmp	r3, #9
 800cc20:	f200 80b0 	bhi.w	800cd84 <_dtoa_r+0x31c>
 800cc24:	2b05      	cmp	r3, #5
 800cc26:	bfc4      	itt	gt
 800cc28:	3b04      	subgt	r3, #4
 800cc2a:	931e      	strgt	r3, [sp, #120]	; 0x78
 800cc2c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cc2e:	f1a3 0302 	sub.w	r3, r3, #2
 800cc32:	bfcc      	ite	gt
 800cc34:	2600      	movgt	r6, #0
 800cc36:	2601      	movle	r6, #1
 800cc38:	2b03      	cmp	r3, #3
 800cc3a:	f200 80af 	bhi.w	800cd9c <_dtoa_r+0x334>
 800cc3e:	e8df f003 	tbb	[pc, r3]
 800cc42:	8583      	.short	0x8583
 800cc44:	772d      	.short	0x772d
 800cc46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cc48:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800cc4a:	441d      	add	r5, r3
 800cc4c:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cc50:	2b20      	cmp	r3, #32
 800cc52:	dd11      	ble.n	800cc78 <_dtoa_r+0x210>
 800cc54:	9a02      	ldr	r2, [sp, #8]
 800cc56:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800cc5a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800cc5e:	fa22 f000 	lsr.w	r0, r2, r0
 800cc62:	fa09 f303 	lsl.w	r3, r9, r3
 800cc66:	4318      	orrs	r0, r3
 800cc68:	f7f3 fc5c 	bl	8000524 <__aeabi_ui2d>
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800cc72:	3d01      	subs	r5, #1
 800cc74:	9310      	str	r3, [sp, #64]	; 0x40
 800cc76:	e774      	b.n	800cb62 <_dtoa_r+0xfa>
 800cc78:	f1c3 0020 	rsb	r0, r3, #32
 800cc7c:	9b02      	ldr	r3, [sp, #8]
 800cc7e:	fa03 f000 	lsl.w	r0, r3, r0
 800cc82:	e7f1      	b.n	800cc68 <_dtoa_r+0x200>
 800cc84:	2301      	movs	r3, #1
 800cc86:	e7b3      	b.n	800cbf0 <_dtoa_r+0x188>
 800cc88:	900d      	str	r0, [sp, #52]	; 0x34
 800cc8a:	e7b2      	b.n	800cbf2 <_dtoa_r+0x18a>
 800cc8c:	f1cb 0300 	rsb	r3, fp, #0
 800cc90:	9308      	str	r3, [sp, #32]
 800cc92:	2300      	movs	r3, #0
 800cc94:	eba8 080b 	sub.w	r8, r8, fp
 800cc98:	930c      	str	r3, [sp, #48]	; 0x30
 800cc9a:	e7bf      	b.n	800cc1c <_dtoa_r+0x1b4>
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	9309      	str	r3, [sp, #36]	; 0x24
 800cca0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	dd7d      	ble.n	800cda2 <_dtoa_r+0x33a>
 800cca6:	9304      	str	r3, [sp, #16]
 800cca8:	4699      	mov	r9, r3
 800ccaa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ccac:	2200      	movs	r2, #0
 800ccae:	606a      	str	r2, [r5, #4]
 800ccb0:	2104      	movs	r1, #4
 800ccb2:	f101 0214 	add.w	r2, r1, #20
 800ccb6:	429a      	cmp	r2, r3
 800ccb8:	d978      	bls.n	800cdac <_dtoa_r+0x344>
 800ccba:	6869      	ldr	r1, [r5, #4]
 800ccbc:	4620      	mov	r0, r4
 800ccbe:	f001 fdad 	bl	800e81c <_Balloc>
 800ccc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ccc4:	6028      	str	r0, [r5, #0]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	9306      	str	r3, [sp, #24]
 800ccca:	f1b9 0f0e 	cmp.w	r9, #14
 800ccce:	f200 80ee 	bhi.w	800ceae <_dtoa_r+0x446>
 800ccd2:	2e00      	cmp	r6, #0
 800ccd4:	f000 80eb 	beq.w	800ceae <_dtoa_r+0x446>
 800ccd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ccdc:	f1bb 0f00 	cmp.w	fp, #0
 800cce0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800cce4:	dd77      	ble.n	800cdd6 <_dtoa_r+0x36e>
 800cce6:	4a25      	ldr	r2, [pc, #148]	; (800cd7c <_dtoa_r+0x314>)
 800cce8:	f00b 030f 	and.w	r3, fp, #15
 800ccec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ccf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf4:	ea4f 162b 	mov.w	r6, fp, asr #4
 800ccf8:	06f0      	lsls	r0, r6, #27
 800ccfa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ccfe:	d55a      	bpl.n	800cdb6 <_dtoa_r+0x34e>
 800cd00:	4b1f      	ldr	r3, [pc, #124]	; (800cd80 <_dtoa_r+0x318>)
 800cd02:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800cd06:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cd0a:	f7f3 fdab 	bl	8000864 <__aeabi_ddiv>
 800cd0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd12:	f006 060f 	and.w	r6, r6, #15
 800cd16:	2503      	movs	r5, #3
 800cd18:	4f19      	ldr	r7, [pc, #100]	; (800cd80 <_dtoa_r+0x318>)
 800cd1a:	2e00      	cmp	r6, #0
 800cd1c:	d14d      	bne.n	800cdba <_dtoa_r+0x352>
 800cd1e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cd22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd26:	f7f3 fd9d 	bl	8000864 <__aeabi_ddiv>
 800cd2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd2e:	e06c      	b.n	800ce0a <_dtoa_r+0x3a2>
 800cd30:	2301      	movs	r3, #1
 800cd32:	9309      	str	r3, [sp, #36]	; 0x24
 800cd34:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cd36:	445b      	add	r3, fp
 800cd38:	f103 0901 	add.w	r9, r3, #1
 800cd3c:	9304      	str	r3, [sp, #16]
 800cd3e:	464b      	mov	r3, r9
 800cd40:	2b01      	cmp	r3, #1
 800cd42:	bfb8      	it	lt
 800cd44:	2301      	movlt	r3, #1
 800cd46:	e7b0      	b.n	800ccaa <_dtoa_r+0x242>
 800cd48:	2300      	movs	r3, #0
 800cd4a:	e7a8      	b.n	800cc9e <_dtoa_r+0x236>
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	e7f0      	b.n	800cd32 <_dtoa_r+0x2ca>
 800cd50:	636f4361 	.word	0x636f4361
 800cd54:	3fd287a7 	.word	0x3fd287a7
 800cd58:	8b60c8b3 	.word	0x8b60c8b3
 800cd5c:	3fc68a28 	.word	0x3fc68a28
 800cd60:	509f79fb 	.word	0x509f79fb
 800cd64:	3fd34413 	.word	0x3fd34413
 800cd68:	7ff00000 	.word	0x7ff00000
 800cd6c:	08010e01 	.word	0x08010e01
 800cd70:	08010df8 	.word	0x08010df8
 800cd74:	08010dd7 	.word	0x08010dd7
 800cd78:	3ff80000 	.word	0x3ff80000
 800cd7c:	08010ea0 	.word	0x08010ea0
 800cd80:	08010e78 	.word	0x08010e78
 800cd84:	2601      	movs	r6, #1
 800cd86:	2300      	movs	r3, #0
 800cd88:	931e      	str	r3, [sp, #120]	; 0x78
 800cd8a:	9609      	str	r6, [sp, #36]	; 0x24
 800cd8c:	f04f 33ff 	mov.w	r3, #4294967295
 800cd90:	9304      	str	r3, [sp, #16]
 800cd92:	4699      	mov	r9, r3
 800cd94:	2200      	movs	r2, #0
 800cd96:	2312      	movs	r3, #18
 800cd98:	921f      	str	r2, [sp, #124]	; 0x7c
 800cd9a:	e786      	b.n	800ccaa <_dtoa_r+0x242>
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	9309      	str	r3, [sp, #36]	; 0x24
 800cda0:	e7f4      	b.n	800cd8c <_dtoa_r+0x324>
 800cda2:	2301      	movs	r3, #1
 800cda4:	9304      	str	r3, [sp, #16]
 800cda6:	4699      	mov	r9, r3
 800cda8:	461a      	mov	r2, r3
 800cdaa:	e7f5      	b.n	800cd98 <_dtoa_r+0x330>
 800cdac:	686a      	ldr	r2, [r5, #4]
 800cdae:	3201      	adds	r2, #1
 800cdb0:	606a      	str	r2, [r5, #4]
 800cdb2:	0049      	lsls	r1, r1, #1
 800cdb4:	e77d      	b.n	800ccb2 <_dtoa_r+0x24a>
 800cdb6:	2502      	movs	r5, #2
 800cdb8:	e7ae      	b.n	800cd18 <_dtoa_r+0x2b0>
 800cdba:	07f1      	lsls	r1, r6, #31
 800cdbc:	d508      	bpl.n	800cdd0 <_dtoa_r+0x368>
 800cdbe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cdc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdc6:	f7f3 fc23 	bl	8000610 <__aeabi_dmul>
 800cdca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800cdce:	3501      	adds	r5, #1
 800cdd0:	1076      	asrs	r6, r6, #1
 800cdd2:	3708      	adds	r7, #8
 800cdd4:	e7a1      	b.n	800cd1a <_dtoa_r+0x2b2>
 800cdd6:	f000 80a5 	beq.w	800cf24 <_dtoa_r+0x4bc>
 800cdda:	f1cb 0600 	rsb	r6, fp, #0
 800cdde:	4ba3      	ldr	r3, [pc, #652]	; (800d06c <_dtoa_r+0x604>)
 800cde0:	4fa3      	ldr	r7, [pc, #652]	; (800d070 <_dtoa_r+0x608>)
 800cde2:	f006 020f 	and.w	r2, r6, #15
 800cde6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cdea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800cdf2:	f7f3 fc0d 	bl	8000610 <__aeabi_dmul>
 800cdf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cdfa:	1136      	asrs	r6, r6, #4
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	2502      	movs	r5, #2
 800ce00:	2e00      	cmp	r6, #0
 800ce02:	f040 8084 	bne.w	800cf0e <_dtoa_r+0x4a6>
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d18f      	bne.n	800cd2a <_dtoa_r+0x2c2>
 800ce0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	f000 808b 	beq.w	800cf28 <_dtoa_r+0x4c0>
 800ce12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ce16:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ce1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ce1e:	2200      	movs	r2, #0
 800ce20:	4b94      	ldr	r3, [pc, #592]	; (800d074 <_dtoa_r+0x60c>)
 800ce22:	f7f3 fe67 	bl	8000af4 <__aeabi_dcmplt>
 800ce26:	2800      	cmp	r0, #0
 800ce28:	d07e      	beq.n	800cf28 <_dtoa_r+0x4c0>
 800ce2a:	f1b9 0f00 	cmp.w	r9, #0
 800ce2e:	d07b      	beq.n	800cf28 <_dtoa_r+0x4c0>
 800ce30:	9b04      	ldr	r3, [sp, #16]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	dd37      	ble.n	800cea6 <_dtoa_r+0x43e>
 800ce36:	2200      	movs	r2, #0
 800ce38:	4b8f      	ldr	r3, [pc, #572]	; (800d078 <_dtoa_r+0x610>)
 800ce3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ce3e:	f7f3 fbe7 	bl	8000610 <__aeabi_dmul>
 800ce42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce46:	9e04      	ldr	r6, [sp, #16]
 800ce48:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ce4c:	3501      	adds	r5, #1
 800ce4e:	4628      	mov	r0, r5
 800ce50:	f7f3 fb78 	bl	8000544 <__aeabi_i2d>
 800ce54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ce58:	f7f3 fbda 	bl	8000610 <__aeabi_dmul>
 800ce5c:	4b87      	ldr	r3, [pc, #540]	; (800d07c <_dtoa_r+0x614>)
 800ce5e:	2200      	movs	r2, #0
 800ce60:	f7f3 fa24 	bl	80002ac <__adddf3>
 800ce64:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ce68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce6a:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 800ce6e:	950b      	str	r5, [sp, #44]	; 0x2c
 800ce70:	2e00      	cmp	r6, #0
 800ce72:	d15c      	bne.n	800cf2e <_dtoa_r+0x4c6>
 800ce74:	2200      	movs	r2, #0
 800ce76:	4b82      	ldr	r3, [pc, #520]	; (800d080 <_dtoa_r+0x618>)
 800ce78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce7c:	f7f3 fa14 	bl	80002a8 <__aeabi_dsub>
 800ce80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce82:	462b      	mov	r3, r5
 800ce84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce88:	f7f3 fe52 	bl	8000b30 <__aeabi_dcmpgt>
 800ce8c:	2800      	cmp	r0, #0
 800ce8e:	f040 82f7 	bne.w	800d480 <_dtoa_r+0xa18>
 800ce92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce94:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ce98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce9c:	f7f3 fe2a 	bl	8000af4 <__aeabi_dcmplt>
 800cea0:	2800      	cmp	r0, #0
 800cea2:	f040 82eb 	bne.w	800d47c <_dtoa_r+0xa14>
 800cea6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ceaa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ceae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	f2c0 8151 	blt.w	800d158 <_dtoa_r+0x6f0>
 800ceb6:	f1bb 0f0e 	cmp.w	fp, #14
 800ceba:	f300 814d 	bgt.w	800d158 <_dtoa_r+0x6f0>
 800cebe:	4b6b      	ldr	r3, [pc, #428]	; (800d06c <_dtoa_r+0x604>)
 800cec0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cecc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cece:	2b00      	cmp	r3, #0
 800ced0:	f280 80da 	bge.w	800d088 <_dtoa_r+0x620>
 800ced4:	f1b9 0f00 	cmp.w	r9, #0
 800ced8:	f300 80d6 	bgt.w	800d088 <_dtoa_r+0x620>
 800cedc:	f040 82cd 	bne.w	800d47a <_dtoa_r+0xa12>
 800cee0:	2200      	movs	r2, #0
 800cee2:	4b67      	ldr	r3, [pc, #412]	; (800d080 <_dtoa_r+0x618>)
 800cee4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cee8:	f7f3 fb92 	bl	8000610 <__aeabi_dmul>
 800ceec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cef0:	f7f3 fe14 	bl	8000b1c <__aeabi_dcmpge>
 800cef4:	464e      	mov	r6, r9
 800cef6:	464f      	mov	r7, r9
 800cef8:	2800      	cmp	r0, #0
 800cefa:	f040 82a4 	bne.w	800d446 <_dtoa_r+0x9de>
 800cefe:	9b06      	ldr	r3, [sp, #24]
 800cf00:	9a06      	ldr	r2, [sp, #24]
 800cf02:	1c5d      	adds	r5, r3, #1
 800cf04:	2331      	movs	r3, #49	; 0x31
 800cf06:	7013      	strb	r3, [r2, #0]
 800cf08:	f10b 0b01 	add.w	fp, fp, #1
 800cf0c:	e29f      	b.n	800d44e <_dtoa_r+0x9e6>
 800cf0e:	07f2      	lsls	r2, r6, #31
 800cf10:	d505      	bpl.n	800cf1e <_dtoa_r+0x4b6>
 800cf12:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf16:	f7f3 fb7b 	bl	8000610 <__aeabi_dmul>
 800cf1a:	3501      	adds	r5, #1
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	1076      	asrs	r6, r6, #1
 800cf20:	3708      	adds	r7, #8
 800cf22:	e76d      	b.n	800ce00 <_dtoa_r+0x398>
 800cf24:	2502      	movs	r5, #2
 800cf26:	e770      	b.n	800ce0a <_dtoa_r+0x3a2>
 800cf28:	465f      	mov	r7, fp
 800cf2a:	464e      	mov	r6, r9
 800cf2c:	e78f      	b.n	800ce4e <_dtoa_r+0x3e6>
 800cf2e:	9a06      	ldr	r2, [sp, #24]
 800cf30:	4b4e      	ldr	r3, [pc, #312]	; (800d06c <_dtoa_r+0x604>)
 800cf32:	4432      	add	r2, r6
 800cf34:	9211      	str	r2, [sp, #68]	; 0x44
 800cf36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf38:	1e71      	subs	r1, r6, #1
 800cf3a:	2a00      	cmp	r2, #0
 800cf3c:	d048      	beq.n	800cfd0 <_dtoa_r+0x568>
 800cf3e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800cf42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf46:	2000      	movs	r0, #0
 800cf48:	494e      	ldr	r1, [pc, #312]	; (800d084 <_dtoa_r+0x61c>)
 800cf4a:	f7f3 fc8b 	bl	8000864 <__aeabi_ddiv>
 800cf4e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cf52:	f7f3 f9a9 	bl	80002a8 <__aeabi_dsub>
 800cf56:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800cf5a:	9d06      	ldr	r5, [sp, #24]
 800cf5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf60:	f7f3 fe06 	bl	8000b70 <__aeabi_d2iz>
 800cf64:	4606      	mov	r6, r0
 800cf66:	f7f3 faed 	bl	8000544 <__aeabi_i2d>
 800cf6a:	4602      	mov	r2, r0
 800cf6c:	460b      	mov	r3, r1
 800cf6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf72:	f7f3 f999 	bl	80002a8 <__aeabi_dsub>
 800cf76:	3630      	adds	r6, #48	; 0x30
 800cf78:	f805 6b01 	strb.w	r6, [r5], #1
 800cf7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cf80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf84:	f7f3 fdb6 	bl	8000af4 <__aeabi_dcmplt>
 800cf88:	2800      	cmp	r0, #0
 800cf8a:	d165      	bne.n	800d058 <_dtoa_r+0x5f0>
 800cf8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf90:	2000      	movs	r0, #0
 800cf92:	4938      	ldr	r1, [pc, #224]	; (800d074 <_dtoa_r+0x60c>)
 800cf94:	f7f3 f988 	bl	80002a8 <__aeabi_dsub>
 800cf98:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cf9c:	f7f3 fdaa 	bl	8000af4 <__aeabi_dcmplt>
 800cfa0:	2800      	cmp	r0, #0
 800cfa2:	f040 80b9 	bne.w	800d118 <_dtoa_r+0x6b0>
 800cfa6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cfa8:	429d      	cmp	r5, r3
 800cfaa:	f43f af7c 	beq.w	800cea6 <_dtoa_r+0x43e>
 800cfae:	2200      	movs	r2, #0
 800cfb0:	4b31      	ldr	r3, [pc, #196]	; (800d078 <_dtoa_r+0x610>)
 800cfb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cfb6:	f7f3 fb2b 	bl	8000610 <__aeabi_dmul>
 800cfba:	2200      	movs	r2, #0
 800cfbc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800cfc0:	4b2d      	ldr	r3, [pc, #180]	; (800d078 <_dtoa_r+0x610>)
 800cfc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfc6:	f7f3 fb23 	bl	8000610 <__aeabi_dmul>
 800cfca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfce:	e7c5      	b.n	800cf5c <_dtoa_r+0x4f4>
 800cfd0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800cfd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfd8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cfdc:	f7f3 fb18 	bl	8000610 <__aeabi_dmul>
 800cfe0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800cfe4:	9d06      	ldr	r5, [sp, #24]
 800cfe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfea:	f7f3 fdc1 	bl	8000b70 <__aeabi_d2iz>
 800cfee:	4606      	mov	r6, r0
 800cff0:	f7f3 faa8 	bl	8000544 <__aeabi_i2d>
 800cff4:	3630      	adds	r6, #48	; 0x30
 800cff6:	4602      	mov	r2, r0
 800cff8:	460b      	mov	r3, r1
 800cffa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cffe:	f7f3 f953 	bl	80002a8 <__aeabi_dsub>
 800d002:	f805 6b01 	strb.w	r6, [r5], #1
 800d006:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d008:	42ab      	cmp	r3, r5
 800d00a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d00e:	f04f 0200 	mov.w	r2, #0
 800d012:	d125      	bne.n	800d060 <_dtoa_r+0x5f8>
 800d014:	4b1b      	ldr	r3, [pc, #108]	; (800d084 <_dtoa_r+0x61c>)
 800d016:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d01a:	f7f3 f947 	bl	80002ac <__adddf3>
 800d01e:	4602      	mov	r2, r0
 800d020:	460b      	mov	r3, r1
 800d022:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d026:	f7f3 fd83 	bl	8000b30 <__aeabi_dcmpgt>
 800d02a:	2800      	cmp	r0, #0
 800d02c:	d174      	bne.n	800d118 <_dtoa_r+0x6b0>
 800d02e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d032:	2000      	movs	r0, #0
 800d034:	4913      	ldr	r1, [pc, #76]	; (800d084 <_dtoa_r+0x61c>)
 800d036:	f7f3 f937 	bl	80002a8 <__aeabi_dsub>
 800d03a:	4602      	mov	r2, r0
 800d03c:	460b      	mov	r3, r1
 800d03e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d042:	f7f3 fd57 	bl	8000af4 <__aeabi_dcmplt>
 800d046:	2800      	cmp	r0, #0
 800d048:	f43f af2d 	beq.w	800cea6 <_dtoa_r+0x43e>
 800d04c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d050:	2b30      	cmp	r3, #48	; 0x30
 800d052:	f105 32ff 	add.w	r2, r5, #4294967295
 800d056:	d001      	beq.n	800d05c <_dtoa_r+0x5f4>
 800d058:	46bb      	mov	fp, r7
 800d05a:	e04c      	b.n	800d0f6 <_dtoa_r+0x68e>
 800d05c:	4615      	mov	r5, r2
 800d05e:	e7f5      	b.n	800d04c <_dtoa_r+0x5e4>
 800d060:	4b05      	ldr	r3, [pc, #20]	; (800d078 <_dtoa_r+0x610>)
 800d062:	f7f3 fad5 	bl	8000610 <__aeabi_dmul>
 800d066:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d06a:	e7bc      	b.n	800cfe6 <_dtoa_r+0x57e>
 800d06c:	08010ea0 	.word	0x08010ea0
 800d070:	08010e78 	.word	0x08010e78
 800d074:	3ff00000 	.word	0x3ff00000
 800d078:	40240000 	.word	0x40240000
 800d07c:	401c0000 	.word	0x401c0000
 800d080:	40140000 	.word	0x40140000
 800d084:	3fe00000 	.word	0x3fe00000
 800d088:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d08c:	9d06      	ldr	r5, [sp, #24]
 800d08e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d092:	4630      	mov	r0, r6
 800d094:	4639      	mov	r1, r7
 800d096:	f7f3 fbe5 	bl	8000864 <__aeabi_ddiv>
 800d09a:	f7f3 fd69 	bl	8000b70 <__aeabi_d2iz>
 800d09e:	4680      	mov	r8, r0
 800d0a0:	f7f3 fa50 	bl	8000544 <__aeabi_i2d>
 800d0a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d0a8:	f7f3 fab2 	bl	8000610 <__aeabi_dmul>
 800d0ac:	4602      	mov	r2, r0
 800d0ae:	460b      	mov	r3, r1
 800d0b0:	4630      	mov	r0, r6
 800d0b2:	4639      	mov	r1, r7
 800d0b4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800d0b8:	f7f3 f8f6 	bl	80002a8 <__aeabi_dsub>
 800d0bc:	f805 6b01 	strb.w	r6, [r5], #1
 800d0c0:	9e06      	ldr	r6, [sp, #24]
 800d0c2:	1bae      	subs	r6, r5, r6
 800d0c4:	45b1      	cmp	r9, r6
 800d0c6:	4602      	mov	r2, r0
 800d0c8:	460b      	mov	r3, r1
 800d0ca:	d138      	bne.n	800d13e <_dtoa_r+0x6d6>
 800d0cc:	f7f3 f8ee 	bl	80002ac <__adddf3>
 800d0d0:	4606      	mov	r6, r0
 800d0d2:	460f      	mov	r7, r1
 800d0d4:	4602      	mov	r2, r0
 800d0d6:	460b      	mov	r3, r1
 800d0d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d0dc:	f7f3 fd0a 	bl	8000af4 <__aeabi_dcmplt>
 800d0e0:	b9c8      	cbnz	r0, 800d116 <_dtoa_r+0x6ae>
 800d0e2:	4632      	mov	r2, r6
 800d0e4:	463b      	mov	r3, r7
 800d0e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d0ea:	f7f3 fcf9 	bl	8000ae0 <__aeabi_dcmpeq>
 800d0ee:	b110      	cbz	r0, 800d0f6 <_dtoa_r+0x68e>
 800d0f0:	f018 0f01 	tst.w	r8, #1
 800d0f4:	d10f      	bne.n	800d116 <_dtoa_r+0x6ae>
 800d0f6:	4651      	mov	r1, sl
 800d0f8:	4620      	mov	r0, r4
 800d0fa:	f001 fbc3 	bl	800e884 <_Bfree>
 800d0fe:	2300      	movs	r3, #0
 800d100:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d102:	702b      	strb	r3, [r5, #0]
 800d104:	f10b 0301 	add.w	r3, fp, #1
 800d108:	6013      	str	r3, [r2, #0]
 800d10a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	f43f acf0 	beq.w	800caf2 <_dtoa_r+0x8a>
 800d112:	601d      	str	r5, [r3, #0]
 800d114:	e4ed      	b.n	800caf2 <_dtoa_r+0x8a>
 800d116:	465f      	mov	r7, fp
 800d118:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d11c:	2a39      	cmp	r2, #57	; 0x39
 800d11e:	f105 33ff 	add.w	r3, r5, #4294967295
 800d122:	d106      	bne.n	800d132 <_dtoa_r+0x6ca>
 800d124:	9a06      	ldr	r2, [sp, #24]
 800d126:	429a      	cmp	r2, r3
 800d128:	d107      	bne.n	800d13a <_dtoa_r+0x6d2>
 800d12a:	2330      	movs	r3, #48	; 0x30
 800d12c:	7013      	strb	r3, [r2, #0]
 800d12e:	3701      	adds	r7, #1
 800d130:	4613      	mov	r3, r2
 800d132:	781a      	ldrb	r2, [r3, #0]
 800d134:	3201      	adds	r2, #1
 800d136:	701a      	strb	r2, [r3, #0]
 800d138:	e78e      	b.n	800d058 <_dtoa_r+0x5f0>
 800d13a:	461d      	mov	r5, r3
 800d13c:	e7ec      	b.n	800d118 <_dtoa_r+0x6b0>
 800d13e:	2200      	movs	r2, #0
 800d140:	4bb4      	ldr	r3, [pc, #720]	; (800d414 <_dtoa_r+0x9ac>)
 800d142:	f7f3 fa65 	bl	8000610 <__aeabi_dmul>
 800d146:	2200      	movs	r2, #0
 800d148:	2300      	movs	r3, #0
 800d14a:	4606      	mov	r6, r0
 800d14c:	460f      	mov	r7, r1
 800d14e:	f7f3 fcc7 	bl	8000ae0 <__aeabi_dcmpeq>
 800d152:	2800      	cmp	r0, #0
 800d154:	d09b      	beq.n	800d08e <_dtoa_r+0x626>
 800d156:	e7ce      	b.n	800d0f6 <_dtoa_r+0x68e>
 800d158:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d15a:	2a00      	cmp	r2, #0
 800d15c:	f000 8129 	beq.w	800d3b2 <_dtoa_r+0x94a>
 800d160:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d162:	2a01      	cmp	r2, #1
 800d164:	f300 810e 	bgt.w	800d384 <_dtoa_r+0x91c>
 800d168:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d16a:	2a00      	cmp	r2, #0
 800d16c:	f000 8106 	beq.w	800d37c <_dtoa_r+0x914>
 800d170:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d174:	9e08      	ldr	r6, [sp, #32]
 800d176:	4645      	mov	r5, r8
 800d178:	9a07      	ldr	r2, [sp, #28]
 800d17a:	2101      	movs	r1, #1
 800d17c:	441a      	add	r2, r3
 800d17e:	4620      	mov	r0, r4
 800d180:	4498      	add	r8, r3
 800d182:	9207      	str	r2, [sp, #28]
 800d184:	f001 fc5c 	bl	800ea40 <__i2b>
 800d188:	4607      	mov	r7, r0
 800d18a:	2d00      	cmp	r5, #0
 800d18c:	dd0b      	ble.n	800d1a6 <_dtoa_r+0x73e>
 800d18e:	9b07      	ldr	r3, [sp, #28]
 800d190:	2b00      	cmp	r3, #0
 800d192:	dd08      	ble.n	800d1a6 <_dtoa_r+0x73e>
 800d194:	42ab      	cmp	r3, r5
 800d196:	9a07      	ldr	r2, [sp, #28]
 800d198:	bfa8      	it	ge
 800d19a:	462b      	movge	r3, r5
 800d19c:	eba8 0803 	sub.w	r8, r8, r3
 800d1a0:	1aed      	subs	r5, r5, r3
 800d1a2:	1ad3      	subs	r3, r2, r3
 800d1a4:	9307      	str	r3, [sp, #28]
 800d1a6:	9b08      	ldr	r3, [sp, #32]
 800d1a8:	b1fb      	cbz	r3, 800d1ea <_dtoa_r+0x782>
 800d1aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	f000 8104 	beq.w	800d3ba <_dtoa_r+0x952>
 800d1b2:	2e00      	cmp	r6, #0
 800d1b4:	dd11      	ble.n	800d1da <_dtoa_r+0x772>
 800d1b6:	4639      	mov	r1, r7
 800d1b8:	4632      	mov	r2, r6
 800d1ba:	4620      	mov	r0, r4
 800d1bc:	f001 fcd6 	bl	800eb6c <__pow5mult>
 800d1c0:	4652      	mov	r2, sl
 800d1c2:	4601      	mov	r1, r0
 800d1c4:	4607      	mov	r7, r0
 800d1c6:	4620      	mov	r0, r4
 800d1c8:	f001 fc43 	bl	800ea52 <__multiply>
 800d1cc:	4651      	mov	r1, sl
 800d1ce:	900a      	str	r0, [sp, #40]	; 0x28
 800d1d0:	4620      	mov	r0, r4
 800d1d2:	f001 fb57 	bl	800e884 <_Bfree>
 800d1d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1d8:	469a      	mov	sl, r3
 800d1da:	9b08      	ldr	r3, [sp, #32]
 800d1dc:	1b9a      	subs	r2, r3, r6
 800d1de:	d004      	beq.n	800d1ea <_dtoa_r+0x782>
 800d1e0:	4651      	mov	r1, sl
 800d1e2:	4620      	mov	r0, r4
 800d1e4:	f001 fcc2 	bl	800eb6c <__pow5mult>
 800d1e8:	4682      	mov	sl, r0
 800d1ea:	2101      	movs	r1, #1
 800d1ec:	4620      	mov	r0, r4
 800d1ee:	f001 fc27 	bl	800ea40 <__i2b>
 800d1f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	4606      	mov	r6, r0
 800d1f8:	f340 80e1 	ble.w	800d3be <_dtoa_r+0x956>
 800d1fc:	461a      	mov	r2, r3
 800d1fe:	4601      	mov	r1, r0
 800d200:	4620      	mov	r0, r4
 800d202:	f001 fcb3 	bl	800eb6c <__pow5mult>
 800d206:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d208:	2b01      	cmp	r3, #1
 800d20a:	4606      	mov	r6, r0
 800d20c:	f340 80da 	ble.w	800d3c4 <_dtoa_r+0x95c>
 800d210:	2300      	movs	r3, #0
 800d212:	9308      	str	r3, [sp, #32]
 800d214:	6933      	ldr	r3, [r6, #16]
 800d216:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d21a:	6918      	ldr	r0, [r3, #16]
 800d21c:	f001 fbc2 	bl	800e9a4 <__hi0bits>
 800d220:	f1c0 0020 	rsb	r0, r0, #32
 800d224:	9b07      	ldr	r3, [sp, #28]
 800d226:	4418      	add	r0, r3
 800d228:	f010 001f 	ands.w	r0, r0, #31
 800d22c:	f000 80f0 	beq.w	800d410 <_dtoa_r+0x9a8>
 800d230:	f1c0 0320 	rsb	r3, r0, #32
 800d234:	2b04      	cmp	r3, #4
 800d236:	f340 80e2 	ble.w	800d3fe <_dtoa_r+0x996>
 800d23a:	9b07      	ldr	r3, [sp, #28]
 800d23c:	f1c0 001c 	rsb	r0, r0, #28
 800d240:	4480      	add	r8, r0
 800d242:	4405      	add	r5, r0
 800d244:	4403      	add	r3, r0
 800d246:	9307      	str	r3, [sp, #28]
 800d248:	f1b8 0f00 	cmp.w	r8, #0
 800d24c:	dd05      	ble.n	800d25a <_dtoa_r+0x7f2>
 800d24e:	4651      	mov	r1, sl
 800d250:	4642      	mov	r2, r8
 800d252:	4620      	mov	r0, r4
 800d254:	f001 fcd8 	bl	800ec08 <__lshift>
 800d258:	4682      	mov	sl, r0
 800d25a:	9b07      	ldr	r3, [sp, #28]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	dd05      	ble.n	800d26c <_dtoa_r+0x804>
 800d260:	4631      	mov	r1, r6
 800d262:	461a      	mov	r2, r3
 800d264:	4620      	mov	r0, r4
 800d266:	f001 fccf 	bl	800ec08 <__lshift>
 800d26a:	4606      	mov	r6, r0
 800d26c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d26e:	2b00      	cmp	r3, #0
 800d270:	f000 80d2 	beq.w	800d418 <_dtoa_r+0x9b0>
 800d274:	4631      	mov	r1, r6
 800d276:	4650      	mov	r0, sl
 800d278:	f001 fd17 	bl	800ecaa <__mcmp>
 800d27c:	2800      	cmp	r0, #0
 800d27e:	f280 80cb 	bge.w	800d418 <_dtoa_r+0x9b0>
 800d282:	2300      	movs	r3, #0
 800d284:	4651      	mov	r1, sl
 800d286:	220a      	movs	r2, #10
 800d288:	4620      	mov	r0, r4
 800d28a:	f001 fb12 	bl	800e8b2 <__multadd>
 800d28e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d290:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d294:	4682      	mov	sl, r0
 800d296:	2b00      	cmp	r3, #0
 800d298:	f000 81aa 	beq.w	800d5f0 <_dtoa_r+0xb88>
 800d29c:	2300      	movs	r3, #0
 800d29e:	4639      	mov	r1, r7
 800d2a0:	220a      	movs	r2, #10
 800d2a2:	4620      	mov	r0, r4
 800d2a4:	f001 fb05 	bl	800e8b2 <__multadd>
 800d2a8:	9b04      	ldr	r3, [sp, #16]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	4607      	mov	r7, r0
 800d2ae:	dc03      	bgt.n	800d2b8 <_dtoa_r+0x850>
 800d2b0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d2b2:	2b02      	cmp	r3, #2
 800d2b4:	f300 80b8 	bgt.w	800d428 <_dtoa_r+0x9c0>
 800d2b8:	2d00      	cmp	r5, #0
 800d2ba:	dd05      	ble.n	800d2c8 <_dtoa_r+0x860>
 800d2bc:	4639      	mov	r1, r7
 800d2be:	462a      	mov	r2, r5
 800d2c0:	4620      	mov	r0, r4
 800d2c2:	f001 fca1 	bl	800ec08 <__lshift>
 800d2c6:	4607      	mov	r7, r0
 800d2c8:	9b08      	ldr	r3, [sp, #32]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	f000 8110 	beq.w	800d4f0 <_dtoa_r+0xa88>
 800d2d0:	6879      	ldr	r1, [r7, #4]
 800d2d2:	4620      	mov	r0, r4
 800d2d4:	f001 faa2 	bl	800e81c <_Balloc>
 800d2d8:	693a      	ldr	r2, [r7, #16]
 800d2da:	3202      	adds	r2, #2
 800d2dc:	4605      	mov	r5, r0
 800d2de:	0092      	lsls	r2, r2, #2
 800d2e0:	f107 010c 	add.w	r1, r7, #12
 800d2e4:	300c      	adds	r0, #12
 800d2e6:	f7fc fd7b 	bl	8009de0 <memcpy>
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	4629      	mov	r1, r5
 800d2ee:	4620      	mov	r0, r4
 800d2f0:	f001 fc8a 	bl	800ec08 <__lshift>
 800d2f4:	9b02      	ldr	r3, [sp, #8]
 800d2f6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800d2fa:	9707      	str	r7, [sp, #28]
 800d2fc:	f003 0301 	and.w	r3, r3, #1
 800d300:	4607      	mov	r7, r0
 800d302:	9308      	str	r3, [sp, #32]
 800d304:	4631      	mov	r1, r6
 800d306:	4650      	mov	r0, sl
 800d308:	f7ff fb20 	bl	800c94c <quorem>
 800d30c:	9907      	ldr	r1, [sp, #28]
 800d30e:	4605      	mov	r5, r0
 800d310:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d314:	4650      	mov	r0, sl
 800d316:	f001 fcc8 	bl	800ecaa <__mcmp>
 800d31a:	463a      	mov	r2, r7
 800d31c:	9002      	str	r0, [sp, #8]
 800d31e:	4631      	mov	r1, r6
 800d320:	4620      	mov	r0, r4
 800d322:	f001 fcdc 	bl	800ecde <__mdiff>
 800d326:	68c3      	ldr	r3, [r0, #12]
 800d328:	4602      	mov	r2, r0
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	f040 80e2 	bne.w	800d4f4 <_dtoa_r+0xa8c>
 800d330:	4601      	mov	r1, r0
 800d332:	9009      	str	r0, [sp, #36]	; 0x24
 800d334:	4650      	mov	r0, sl
 800d336:	f001 fcb8 	bl	800ecaa <__mcmp>
 800d33a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d33c:	4603      	mov	r3, r0
 800d33e:	4611      	mov	r1, r2
 800d340:	4620      	mov	r0, r4
 800d342:	9309      	str	r3, [sp, #36]	; 0x24
 800d344:	f001 fa9e 	bl	800e884 <_Bfree>
 800d348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	f040 80d4 	bne.w	800d4f8 <_dtoa_r+0xa90>
 800d350:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d352:	2a00      	cmp	r2, #0
 800d354:	f040 80d0 	bne.w	800d4f8 <_dtoa_r+0xa90>
 800d358:	9a08      	ldr	r2, [sp, #32]
 800d35a:	2a00      	cmp	r2, #0
 800d35c:	f040 80cc 	bne.w	800d4f8 <_dtoa_r+0xa90>
 800d360:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d364:	f000 80e8 	beq.w	800d538 <_dtoa_r+0xad0>
 800d368:	9b02      	ldr	r3, [sp, #8]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	dd01      	ble.n	800d372 <_dtoa_r+0x90a>
 800d36e:	f105 0931 	add.w	r9, r5, #49	; 0x31
 800d372:	f108 0501 	add.w	r5, r8, #1
 800d376:	f888 9000 	strb.w	r9, [r8]
 800d37a:	e06a      	b.n	800d452 <_dtoa_r+0x9ea>
 800d37c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d37e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d382:	e6f7      	b.n	800d174 <_dtoa_r+0x70c>
 800d384:	9b08      	ldr	r3, [sp, #32]
 800d386:	f109 36ff 	add.w	r6, r9, #4294967295
 800d38a:	42b3      	cmp	r3, r6
 800d38c:	bfbf      	itttt	lt
 800d38e:	9b08      	ldrlt	r3, [sp, #32]
 800d390:	9608      	strlt	r6, [sp, #32]
 800d392:	1af2      	sublt	r2, r6, r3
 800d394:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800d396:	bfb7      	itett	lt
 800d398:	189b      	addlt	r3, r3, r2
 800d39a:	1b9e      	subge	r6, r3, r6
 800d39c:	930c      	strlt	r3, [sp, #48]	; 0x30
 800d39e:	2600      	movlt	r6, #0
 800d3a0:	f1b9 0f00 	cmp.w	r9, #0
 800d3a4:	bfb9      	ittee	lt
 800d3a6:	eba8 0509 	sublt.w	r5, r8, r9
 800d3aa:	2300      	movlt	r3, #0
 800d3ac:	4645      	movge	r5, r8
 800d3ae:	464b      	movge	r3, r9
 800d3b0:	e6e2      	b.n	800d178 <_dtoa_r+0x710>
 800d3b2:	9e08      	ldr	r6, [sp, #32]
 800d3b4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d3b6:	4645      	mov	r5, r8
 800d3b8:	e6e7      	b.n	800d18a <_dtoa_r+0x722>
 800d3ba:	9a08      	ldr	r2, [sp, #32]
 800d3bc:	e710      	b.n	800d1e0 <_dtoa_r+0x778>
 800d3be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d3c0:	2b01      	cmp	r3, #1
 800d3c2:	dc18      	bgt.n	800d3f6 <_dtoa_r+0x98e>
 800d3c4:	9b02      	ldr	r3, [sp, #8]
 800d3c6:	b9b3      	cbnz	r3, 800d3f6 <_dtoa_r+0x98e>
 800d3c8:	9b03      	ldr	r3, [sp, #12]
 800d3ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d3ce:	b9a3      	cbnz	r3, 800d3fa <_dtoa_r+0x992>
 800d3d0:	9b03      	ldr	r3, [sp, #12]
 800d3d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d3d6:	0d1b      	lsrs	r3, r3, #20
 800d3d8:	051b      	lsls	r3, r3, #20
 800d3da:	b12b      	cbz	r3, 800d3e8 <_dtoa_r+0x980>
 800d3dc:	9b07      	ldr	r3, [sp, #28]
 800d3de:	3301      	adds	r3, #1
 800d3e0:	9307      	str	r3, [sp, #28]
 800d3e2:	f108 0801 	add.w	r8, r8, #1
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	9308      	str	r3, [sp, #32]
 800d3ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	f47f af11 	bne.w	800d214 <_dtoa_r+0x7ac>
 800d3f2:	2001      	movs	r0, #1
 800d3f4:	e716      	b.n	800d224 <_dtoa_r+0x7bc>
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	e7f6      	b.n	800d3e8 <_dtoa_r+0x980>
 800d3fa:	9b02      	ldr	r3, [sp, #8]
 800d3fc:	e7f4      	b.n	800d3e8 <_dtoa_r+0x980>
 800d3fe:	f43f af23 	beq.w	800d248 <_dtoa_r+0x7e0>
 800d402:	9a07      	ldr	r2, [sp, #28]
 800d404:	331c      	adds	r3, #28
 800d406:	441a      	add	r2, r3
 800d408:	4498      	add	r8, r3
 800d40a:	441d      	add	r5, r3
 800d40c:	4613      	mov	r3, r2
 800d40e:	e71a      	b.n	800d246 <_dtoa_r+0x7de>
 800d410:	4603      	mov	r3, r0
 800d412:	e7f6      	b.n	800d402 <_dtoa_r+0x99a>
 800d414:	40240000 	.word	0x40240000
 800d418:	f1b9 0f00 	cmp.w	r9, #0
 800d41c:	dc33      	bgt.n	800d486 <_dtoa_r+0xa1e>
 800d41e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d420:	2b02      	cmp	r3, #2
 800d422:	dd30      	ble.n	800d486 <_dtoa_r+0xa1e>
 800d424:	f8cd 9010 	str.w	r9, [sp, #16]
 800d428:	9b04      	ldr	r3, [sp, #16]
 800d42a:	b963      	cbnz	r3, 800d446 <_dtoa_r+0x9de>
 800d42c:	4631      	mov	r1, r6
 800d42e:	2205      	movs	r2, #5
 800d430:	4620      	mov	r0, r4
 800d432:	f001 fa3e 	bl	800e8b2 <__multadd>
 800d436:	4601      	mov	r1, r0
 800d438:	4606      	mov	r6, r0
 800d43a:	4650      	mov	r0, sl
 800d43c:	f001 fc35 	bl	800ecaa <__mcmp>
 800d440:	2800      	cmp	r0, #0
 800d442:	f73f ad5c 	bgt.w	800cefe <_dtoa_r+0x496>
 800d446:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d448:	9d06      	ldr	r5, [sp, #24]
 800d44a:	ea6f 0b03 	mvn.w	fp, r3
 800d44e:	2300      	movs	r3, #0
 800d450:	9307      	str	r3, [sp, #28]
 800d452:	4631      	mov	r1, r6
 800d454:	4620      	mov	r0, r4
 800d456:	f001 fa15 	bl	800e884 <_Bfree>
 800d45a:	2f00      	cmp	r7, #0
 800d45c:	f43f ae4b 	beq.w	800d0f6 <_dtoa_r+0x68e>
 800d460:	9b07      	ldr	r3, [sp, #28]
 800d462:	b12b      	cbz	r3, 800d470 <_dtoa_r+0xa08>
 800d464:	42bb      	cmp	r3, r7
 800d466:	d003      	beq.n	800d470 <_dtoa_r+0xa08>
 800d468:	4619      	mov	r1, r3
 800d46a:	4620      	mov	r0, r4
 800d46c:	f001 fa0a 	bl	800e884 <_Bfree>
 800d470:	4639      	mov	r1, r7
 800d472:	4620      	mov	r0, r4
 800d474:	f001 fa06 	bl	800e884 <_Bfree>
 800d478:	e63d      	b.n	800d0f6 <_dtoa_r+0x68e>
 800d47a:	2600      	movs	r6, #0
 800d47c:	4637      	mov	r7, r6
 800d47e:	e7e2      	b.n	800d446 <_dtoa_r+0x9de>
 800d480:	46bb      	mov	fp, r7
 800d482:	4637      	mov	r7, r6
 800d484:	e53b      	b.n	800cefe <_dtoa_r+0x496>
 800d486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d488:	f8cd 9010 	str.w	r9, [sp, #16]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	f47f af13 	bne.w	800d2b8 <_dtoa_r+0x850>
 800d492:	9d06      	ldr	r5, [sp, #24]
 800d494:	4631      	mov	r1, r6
 800d496:	4650      	mov	r0, sl
 800d498:	f7ff fa58 	bl	800c94c <quorem>
 800d49c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d4a0:	f805 9b01 	strb.w	r9, [r5], #1
 800d4a4:	9b06      	ldr	r3, [sp, #24]
 800d4a6:	9a04      	ldr	r2, [sp, #16]
 800d4a8:	1aeb      	subs	r3, r5, r3
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	f300 8083 	bgt.w	800d5b6 <_dtoa_r+0xb4e>
 800d4b0:	9b06      	ldr	r3, [sp, #24]
 800d4b2:	2a01      	cmp	r2, #1
 800d4b4:	bfac      	ite	ge
 800d4b6:	189b      	addge	r3, r3, r2
 800d4b8:	3301      	addlt	r3, #1
 800d4ba:	4698      	mov	r8, r3
 800d4bc:	2300      	movs	r3, #0
 800d4be:	9307      	str	r3, [sp, #28]
 800d4c0:	4651      	mov	r1, sl
 800d4c2:	2201      	movs	r2, #1
 800d4c4:	4620      	mov	r0, r4
 800d4c6:	f001 fb9f 	bl	800ec08 <__lshift>
 800d4ca:	4631      	mov	r1, r6
 800d4cc:	4682      	mov	sl, r0
 800d4ce:	f001 fbec 	bl	800ecaa <__mcmp>
 800d4d2:	2800      	cmp	r0, #0
 800d4d4:	dc35      	bgt.n	800d542 <_dtoa_r+0xada>
 800d4d6:	d102      	bne.n	800d4de <_dtoa_r+0xa76>
 800d4d8:	f019 0f01 	tst.w	r9, #1
 800d4dc:	d131      	bne.n	800d542 <_dtoa_r+0xada>
 800d4de:	4645      	mov	r5, r8
 800d4e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d4e4:	2b30      	cmp	r3, #48	; 0x30
 800d4e6:	f105 32ff 	add.w	r2, r5, #4294967295
 800d4ea:	d1b2      	bne.n	800d452 <_dtoa_r+0x9ea>
 800d4ec:	4615      	mov	r5, r2
 800d4ee:	e7f7      	b.n	800d4e0 <_dtoa_r+0xa78>
 800d4f0:	4638      	mov	r0, r7
 800d4f2:	e6ff      	b.n	800d2f4 <_dtoa_r+0x88c>
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	e722      	b.n	800d33e <_dtoa_r+0x8d6>
 800d4f8:	9a02      	ldr	r2, [sp, #8]
 800d4fa:	2a00      	cmp	r2, #0
 800d4fc:	db04      	blt.n	800d508 <_dtoa_r+0xaa0>
 800d4fe:	d129      	bne.n	800d554 <_dtoa_r+0xaec>
 800d500:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d502:	bb3a      	cbnz	r2, 800d554 <_dtoa_r+0xaec>
 800d504:	9a08      	ldr	r2, [sp, #32]
 800d506:	bb2a      	cbnz	r2, 800d554 <_dtoa_r+0xaec>
 800d508:	2b00      	cmp	r3, #0
 800d50a:	f77f af32 	ble.w	800d372 <_dtoa_r+0x90a>
 800d50e:	4651      	mov	r1, sl
 800d510:	2201      	movs	r2, #1
 800d512:	4620      	mov	r0, r4
 800d514:	f001 fb78 	bl	800ec08 <__lshift>
 800d518:	4631      	mov	r1, r6
 800d51a:	4682      	mov	sl, r0
 800d51c:	f001 fbc5 	bl	800ecaa <__mcmp>
 800d520:	2800      	cmp	r0, #0
 800d522:	dc05      	bgt.n	800d530 <_dtoa_r+0xac8>
 800d524:	f47f af25 	bne.w	800d372 <_dtoa_r+0x90a>
 800d528:	f019 0f01 	tst.w	r9, #1
 800d52c:	f43f af21 	beq.w	800d372 <_dtoa_r+0x90a>
 800d530:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d534:	f47f af1b 	bne.w	800d36e <_dtoa_r+0x906>
 800d538:	2339      	movs	r3, #57	; 0x39
 800d53a:	f888 3000 	strb.w	r3, [r8]
 800d53e:	f108 0801 	add.w	r8, r8, #1
 800d542:	4645      	mov	r5, r8
 800d544:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d548:	2b39      	cmp	r3, #57	; 0x39
 800d54a:	f105 32ff 	add.w	r2, r5, #4294967295
 800d54e:	d03a      	beq.n	800d5c6 <_dtoa_r+0xb5e>
 800d550:	3301      	adds	r3, #1
 800d552:	e03f      	b.n	800d5d4 <_dtoa_r+0xb6c>
 800d554:	2b00      	cmp	r3, #0
 800d556:	f108 0501 	add.w	r5, r8, #1
 800d55a:	dd05      	ble.n	800d568 <_dtoa_r+0xb00>
 800d55c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d560:	d0ea      	beq.n	800d538 <_dtoa_r+0xad0>
 800d562:	f109 0901 	add.w	r9, r9, #1
 800d566:	e706      	b.n	800d376 <_dtoa_r+0x90e>
 800d568:	9b06      	ldr	r3, [sp, #24]
 800d56a:	9a04      	ldr	r2, [sp, #16]
 800d56c:	f805 9c01 	strb.w	r9, [r5, #-1]
 800d570:	1aeb      	subs	r3, r5, r3
 800d572:	4293      	cmp	r3, r2
 800d574:	46a8      	mov	r8, r5
 800d576:	d0a3      	beq.n	800d4c0 <_dtoa_r+0xa58>
 800d578:	4651      	mov	r1, sl
 800d57a:	2300      	movs	r3, #0
 800d57c:	220a      	movs	r2, #10
 800d57e:	4620      	mov	r0, r4
 800d580:	f001 f997 	bl	800e8b2 <__multadd>
 800d584:	9b07      	ldr	r3, [sp, #28]
 800d586:	9907      	ldr	r1, [sp, #28]
 800d588:	42bb      	cmp	r3, r7
 800d58a:	4682      	mov	sl, r0
 800d58c:	f04f 0300 	mov.w	r3, #0
 800d590:	f04f 020a 	mov.w	r2, #10
 800d594:	4620      	mov	r0, r4
 800d596:	d104      	bne.n	800d5a2 <_dtoa_r+0xb3a>
 800d598:	f001 f98b 	bl	800e8b2 <__multadd>
 800d59c:	9007      	str	r0, [sp, #28]
 800d59e:	4607      	mov	r7, r0
 800d5a0:	e6b0      	b.n	800d304 <_dtoa_r+0x89c>
 800d5a2:	f001 f986 	bl	800e8b2 <__multadd>
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	9007      	str	r0, [sp, #28]
 800d5aa:	220a      	movs	r2, #10
 800d5ac:	4639      	mov	r1, r7
 800d5ae:	4620      	mov	r0, r4
 800d5b0:	f001 f97f 	bl	800e8b2 <__multadd>
 800d5b4:	e7f3      	b.n	800d59e <_dtoa_r+0xb36>
 800d5b6:	4651      	mov	r1, sl
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	220a      	movs	r2, #10
 800d5bc:	4620      	mov	r0, r4
 800d5be:	f001 f978 	bl	800e8b2 <__multadd>
 800d5c2:	4682      	mov	sl, r0
 800d5c4:	e766      	b.n	800d494 <_dtoa_r+0xa2c>
 800d5c6:	9b06      	ldr	r3, [sp, #24]
 800d5c8:	4293      	cmp	r3, r2
 800d5ca:	d105      	bne.n	800d5d8 <_dtoa_r+0xb70>
 800d5cc:	9a06      	ldr	r2, [sp, #24]
 800d5ce:	f10b 0b01 	add.w	fp, fp, #1
 800d5d2:	2331      	movs	r3, #49	; 0x31
 800d5d4:	7013      	strb	r3, [r2, #0]
 800d5d6:	e73c      	b.n	800d452 <_dtoa_r+0x9ea>
 800d5d8:	4615      	mov	r5, r2
 800d5da:	e7b3      	b.n	800d544 <_dtoa_r+0xadc>
 800d5dc:	4b09      	ldr	r3, [pc, #36]	; (800d604 <_dtoa_r+0xb9c>)
 800d5de:	f7ff baa5 	b.w	800cb2c <_dtoa_r+0xc4>
 800d5e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	f47f aa7f 	bne.w	800cae8 <_dtoa_r+0x80>
 800d5ea:	4b07      	ldr	r3, [pc, #28]	; (800d608 <_dtoa_r+0xba0>)
 800d5ec:	f7ff ba9e 	b.w	800cb2c <_dtoa_r+0xc4>
 800d5f0:	9b04      	ldr	r3, [sp, #16]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	f73f af4d 	bgt.w	800d492 <_dtoa_r+0xa2a>
 800d5f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d5fa:	2b02      	cmp	r3, #2
 800d5fc:	f77f af49 	ble.w	800d492 <_dtoa_r+0xa2a>
 800d600:	e712      	b.n	800d428 <_dtoa_r+0x9c0>
 800d602:	bf00      	nop
 800d604:	08010dd6 	.word	0x08010dd6
 800d608:	08010df8 	.word	0x08010df8

0800d60c <__sflush_r>:
 800d60c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d610:	b293      	uxth	r3, r2
 800d612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d616:	4605      	mov	r5, r0
 800d618:	0718      	lsls	r0, r3, #28
 800d61a:	460c      	mov	r4, r1
 800d61c:	d461      	bmi.n	800d6e2 <__sflush_r+0xd6>
 800d61e:	684b      	ldr	r3, [r1, #4]
 800d620:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d624:	2b00      	cmp	r3, #0
 800d626:	818a      	strh	r2, [r1, #12]
 800d628:	dc05      	bgt.n	800d636 <__sflush_r+0x2a>
 800d62a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	dc02      	bgt.n	800d636 <__sflush_r+0x2a>
 800d630:	2000      	movs	r0, #0
 800d632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d636:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d638:	2e00      	cmp	r6, #0
 800d63a:	d0f9      	beq.n	800d630 <__sflush_r+0x24>
 800d63c:	2300      	movs	r3, #0
 800d63e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d642:	682f      	ldr	r7, [r5, #0]
 800d644:	602b      	str	r3, [r5, #0]
 800d646:	d037      	beq.n	800d6b8 <__sflush_r+0xac>
 800d648:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d64a:	89a3      	ldrh	r3, [r4, #12]
 800d64c:	075a      	lsls	r2, r3, #29
 800d64e:	d505      	bpl.n	800d65c <__sflush_r+0x50>
 800d650:	6863      	ldr	r3, [r4, #4]
 800d652:	1ac0      	subs	r0, r0, r3
 800d654:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d656:	b10b      	cbz	r3, 800d65c <__sflush_r+0x50>
 800d658:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d65a:	1ac0      	subs	r0, r0, r3
 800d65c:	2300      	movs	r3, #0
 800d65e:	4602      	mov	r2, r0
 800d660:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d662:	6a21      	ldr	r1, [r4, #32]
 800d664:	4628      	mov	r0, r5
 800d666:	47b0      	blx	r6
 800d668:	1c43      	adds	r3, r0, #1
 800d66a:	89a3      	ldrh	r3, [r4, #12]
 800d66c:	d106      	bne.n	800d67c <__sflush_r+0x70>
 800d66e:	6829      	ldr	r1, [r5, #0]
 800d670:	291d      	cmp	r1, #29
 800d672:	d84f      	bhi.n	800d714 <__sflush_r+0x108>
 800d674:	4a2d      	ldr	r2, [pc, #180]	; (800d72c <__sflush_r+0x120>)
 800d676:	40ca      	lsrs	r2, r1
 800d678:	07d6      	lsls	r6, r2, #31
 800d67a:	d54b      	bpl.n	800d714 <__sflush_r+0x108>
 800d67c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d680:	b21b      	sxth	r3, r3
 800d682:	2200      	movs	r2, #0
 800d684:	6062      	str	r2, [r4, #4]
 800d686:	04d9      	lsls	r1, r3, #19
 800d688:	6922      	ldr	r2, [r4, #16]
 800d68a:	81a3      	strh	r3, [r4, #12]
 800d68c:	6022      	str	r2, [r4, #0]
 800d68e:	d504      	bpl.n	800d69a <__sflush_r+0x8e>
 800d690:	1c42      	adds	r2, r0, #1
 800d692:	d101      	bne.n	800d698 <__sflush_r+0x8c>
 800d694:	682b      	ldr	r3, [r5, #0]
 800d696:	b903      	cbnz	r3, 800d69a <__sflush_r+0x8e>
 800d698:	6560      	str	r0, [r4, #84]	; 0x54
 800d69a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d69c:	602f      	str	r7, [r5, #0]
 800d69e:	2900      	cmp	r1, #0
 800d6a0:	d0c6      	beq.n	800d630 <__sflush_r+0x24>
 800d6a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6a6:	4299      	cmp	r1, r3
 800d6a8:	d002      	beq.n	800d6b0 <__sflush_r+0xa4>
 800d6aa:	4628      	mov	r0, r5
 800d6ac:	f000 f9aa 	bl	800da04 <_free_r>
 800d6b0:	2000      	movs	r0, #0
 800d6b2:	6360      	str	r0, [r4, #52]	; 0x34
 800d6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6b8:	6a21      	ldr	r1, [r4, #32]
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	4628      	mov	r0, r5
 800d6be:	47b0      	blx	r6
 800d6c0:	1c41      	adds	r1, r0, #1
 800d6c2:	d1c2      	bne.n	800d64a <__sflush_r+0x3e>
 800d6c4:	682b      	ldr	r3, [r5, #0]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d0bf      	beq.n	800d64a <__sflush_r+0x3e>
 800d6ca:	2b1d      	cmp	r3, #29
 800d6cc:	d001      	beq.n	800d6d2 <__sflush_r+0xc6>
 800d6ce:	2b16      	cmp	r3, #22
 800d6d0:	d101      	bne.n	800d6d6 <__sflush_r+0xca>
 800d6d2:	602f      	str	r7, [r5, #0]
 800d6d4:	e7ac      	b.n	800d630 <__sflush_r+0x24>
 800d6d6:	89a3      	ldrh	r3, [r4, #12]
 800d6d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6dc:	81a3      	strh	r3, [r4, #12]
 800d6de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6e2:	690f      	ldr	r7, [r1, #16]
 800d6e4:	2f00      	cmp	r7, #0
 800d6e6:	d0a3      	beq.n	800d630 <__sflush_r+0x24>
 800d6e8:	079b      	lsls	r3, r3, #30
 800d6ea:	680e      	ldr	r6, [r1, #0]
 800d6ec:	bf08      	it	eq
 800d6ee:	694b      	ldreq	r3, [r1, #20]
 800d6f0:	600f      	str	r7, [r1, #0]
 800d6f2:	bf18      	it	ne
 800d6f4:	2300      	movne	r3, #0
 800d6f6:	eba6 0807 	sub.w	r8, r6, r7
 800d6fa:	608b      	str	r3, [r1, #8]
 800d6fc:	f1b8 0f00 	cmp.w	r8, #0
 800d700:	dd96      	ble.n	800d630 <__sflush_r+0x24>
 800d702:	4643      	mov	r3, r8
 800d704:	463a      	mov	r2, r7
 800d706:	6a21      	ldr	r1, [r4, #32]
 800d708:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d70a:	4628      	mov	r0, r5
 800d70c:	47b0      	blx	r6
 800d70e:	2800      	cmp	r0, #0
 800d710:	dc07      	bgt.n	800d722 <__sflush_r+0x116>
 800d712:	89a3      	ldrh	r3, [r4, #12]
 800d714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d718:	81a3      	strh	r3, [r4, #12]
 800d71a:	f04f 30ff 	mov.w	r0, #4294967295
 800d71e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d722:	4407      	add	r7, r0
 800d724:	eba8 0800 	sub.w	r8, r8, r0
 800d728:	e7e8      	b.n	800d6fc <__sflush_r+0xf0>
 800d72a:	bf00      	nop
 800d72c:	20400001 	.word	0x20400001

0800d730 <_fflush_r>:
 800d730:	b538      	push	{r3, r4, r5, lr}
 800d732:	690b      	ldr	r3, [r1, #16]
 800d734:	4605      	mov	r5, r0
 800d736:	460c      	mov	r4, r1
 800d738:	b913      	cbnz	r3, 800d740 <_fflush_r+0x10>
 800d73a:	2500      	movs	r5, #0
 800d73c:	4628      	mov	r0, r5
 800d73e:	bd38      	pop	{r3, r4, r5, pc}
 800d740:	b118      	cbz	r0, 800d74a <_fflush_r+0x1a>
 800d742:	6983      	ldr	r3, [r0, #24]
 800d744:	b90b      	cbnz	r3, 800d74a <_fflush_r+0x1a>
 800d746:	f000 f887 	bl	800d858 <__sinit>
 800d74a:	4b14      	ldr	r3, [pc, #80]	; (800d79c <_fflush_r+0x6c>)
 800d74c:	429c      	cmp	r4, r3
 800d74e:	d11b      	bne.n	800d788 <_fflush_r+0x58>
 800d750:	686c      	ldr	r4, [r5, #4]
 800d752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d0ef      	beq.n	800d73a <_fflush_r+0xa>
 800d75a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d75c:	07d0      	lsls	r0, r2, #31
 800d75e:	d404      	bmi.n	800d76a <_fflush_r+0x3a>
 800d760:	0599      	lsls	r1, r3, #22
 800d762:	d402      	bmi.n	800d76a <_fflush_r+0x3a>
 800d764:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d766:	f000 ffbe 	bl	800e6e6 <__retarget_lock_acquire_recursive>
 800d76a:	4628      	mov	r0, r5
 800d76c:	4621      	mov	r1, r4
 800d76e:	f7ff ff4d 	bl	800d60c <__sflush_r>
 800d772:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d774:	07da      	lsls	r2, r3, #31
 800d776:	4605      	mov	r5, r0
 800d778:	d4e0      	bmi.n	800d73c <_fflush_r+0xc>
 800d77a:	89a3      	ldrh	r3, [r4, #12]
 800d77c:	059b      	lsls	r3, r3, #22
 800d77e:	d4dd      	bmi.n	800d73c <_fflush_r+0xc>
 800d780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d782:	f000 ffb2 	bl	800e6ea <__retarget_lock_release_recursive>
 800d786:	e7d9      	b.n	800d73c <_fflush_r+0xc>
 800d788:	4b05      	ldr	r3, [pc, #20]	; (800d7a0 <_fflush_r+0x70>)
 800d78a:	429c      	cmp	r4, r3
 800d78c:	d101      	bne.n	800d792 <_fflush_r+0x62>
 800d78e:	68ac      	ldr	r4, [r5, #8]
 800d790:	e7df      	b.n	800d752 <_fflush_r+0x22>
 800d792:	4b04      	ldr	r3, [pc, #16]	; (800d7a4 <_fflush_r+0x74>)
 800d794:	429c      	cmp	r4, r3
 800d796:	bf08      	it	eq
 800d798:	68ec      	ldreq	r4, [r5, #12]
 800d79a:	e7da      	b.n	800d752 <_fflush_r+0x22>
 800d79c:	08010e28 	.word	0x08010e28
 800d7a0:	08010e48 	.word	0x08010e48
 800d7a4:	08010e08 	.word	0x08010e08

0800d7a8 <_cleanup_r>:
 800d7a8:	4901      	ldr	r1, [pc, #4]	; (800d7b0 <_cleanup_r+0x8>)
 800d7aa:	f000 bb35 	b.w	800de18 <_fwalk_reent>
 800d7ae:	bf00      	nop
 800d7b0:	0800ff3d 	.word	0x0800ff3d

0800d7b4 <std.isra.0>:
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	b510      	push	{r4, lr}
 800d7b8:	4604      	mov	r4, r0
 800d7ba:	6003      	str	r3, [r0, #0]
 800d7bc:	6043      	str	r3, [r0, #4]
 800d7be:	6083      	str	r3, [r0, #8]
 800d7c0:	8181      	strh	r1, [r0, #12]
 800d7c2:	6643      	str	r3, [r0, #100]	; 0x64
 800d7c4:	81c2      	strh	r2, [r0, #14]
 800d7c6:	6103      	str	r3, [r0, #16]
 800d7c8:	6143      	str	r3, [r0, #20]
 800d7ca:	6183      	str	r3, [r0, #24]
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	2208      	movs	r2, #8
 800d7d0:	305c      	adds	r0, #92	; 0x5c
 800d7d2:	f7fc fb10 	bl	8009df6 <memset>
 800d7d6:	4b05      	ldr	r3, [pc, #20]	; (800d7ec <std.isra.0+0x38>)
 800d7d8:	6263      	str	r3, [r4, #36]	; 0x24
 800d7da:	4b05      	ldr	r3, [pc, #20]	; (800d7f0 <std.isra.0+0x3c>)
 800d7dc:	62a3      	str	r3, [r4, #40]	; 0x28
 800d7de:	4b05      	ldr	r3, [pc, #20]	; (800d7f4 <std.isra.0+0x40>)
 800d7e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d7e2:	4b05      	ldr	r3, [pc, #20]	; (800d7f8 <std.isra.0+0x44>)
 800d7e4:	6224      	str	r4, [r4, #32]
 800d7e6:	6323      	str	r3, [r4, #48]	; 0x30
 800d7e8:	bd10      	pop	{r4, pc}
 800d7ea:	bf00      	nop
 800d7ec:	0800f341 	.word	0x0800f341
 800d7f0:	0800f367 	.word	0x0800f367
 800d7f4:	0800f39f 	.word	0x0800f39f
 800d7f8:	0800f3c3 	.word	0x0800f3c3

0800d7fc <__sfmoreglue>:
 800d7fc:	b570      	push	{r4, r5, r6, lr}
 800d7fe:	1e4a      	subs	r2, r1, #1
 800d800:	2568      	movs	r5, #104	; 0x68
 800d802:	4355      	muls	r5, r2
 800d804:	460e      	mov	r6, r1
 800d806:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d80a:	f7fc f8db 	bl	80099c4 <_malloc_r>
 800d80e:	4604      	mov	r4, r0
 800d810:	b140      	cbz	r0, 800d824 <__sfmoreglue+0x28>
 800d812:	2100      	movs	r1, #0
 800d814:	e880 0042 	stmia.w	r0, {r1, r6}
 800d818:	300c      	adds	r0, #12
 800d81a:	60a0      	str	r0, [r4, #8]
 800d81c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d820:	f7fc fae9 	bl	8009df6 <memset>
 800d824:	4620      	mov	r0, r4
 800d826:	bd70      	pop	{r4, r5, r6, pc}

0800d828 <__sfp_lock_acquire>:
 800d828:	4801      	ldr	r0, [pc, #4]	; (800d830 <__sfp_lock_acquire+0x8>)
 800d82a:	f000 bf5c 	b.w	800e6e6 <__retarget_lock_acquire_recursive>
 800d82e:	bf00      	nop
 800d830:	200021f8 	.word	0x200021f8

0800d834 <__sfp_lock_release>:
 800d834:	4801      	ldr	r0, [pc, #4]	; (800d83c <__sfp_lock_release+0x8>)
 800d836:	f000 bf58 	b.w	800e6ea <__retarget_lock_release_recursive>
 800d83a:	bf00      	nop
 800d83c:	200021f8 	.word	0x200021f8

0800d840 <__sinit_lock_acquire>:
 800d840:	4801      	ldr	r0, [pc, #4]	; (800d848 <__sinit_lock_acquire+0x8>)
 800d842:	f000 bf50 	b.w	800e6e6 <__retarget_lock_acquire_recursive>
 800d846:	bf00      	nop
 800d848:	200021f3 	.word	0x200021f3

0800d84c <__sinit_lock_release>:
 800d84c:	4801      	ldr	r0, [pc, #4]	; (800d854 <__sinit_lock_release+0x8>)
 800d84e:	f000 bf4c 	b.w	800e6ea <__retarget_lock_release_recursive>
 800d852:	bf00      	nop
 800d854:	200021f3 	.word	0x200021f3

0800d858 <__sinit>:
 800d858:	b510      	push	{r4, lr}
 800d85a:	4604      	mov	r4, r0
 800d85c:	f7ff fff0 	bl	800d840 <__sinit_lock_acquire>
 800d860:	69a3      	ldr	r3, [r4, #24]
 800d862:	b11b      	cbz	r3, 800d86c <__sinit+0x14>
 800d864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d868:	f7ff bff0 	b.w	800d84c <__sinit_lock_release>
 800d86c:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 800d870:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 800d874:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800d878:	4b12      	ldr	r3, [pc, #72]	; (800d8c4 <__sinit+0x6c>)
 800d87a:	4a13      	ldr	r2, [pc, #76]	; (800d8c8 <__sinit+0x70>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	62a2      	str	r2, [r4, #40]	; 0x28
 800d880:	429c      	cmp	r4, r3
 800d882:	bf04      	itt	eq
 800d884:	2301      	moveq	r3, #1
 800d886:	61a3      	streq	r3, [r4, #24]
 800d888:	4620      	mov	r0, r4
 800d88a:	f000 f81f 	bl	800d8cc <__sfp>
 800d88e:	6060      	str	r0, [r4, #4]
 800d890:	4620      	mov	r0, r4
 800d892:	f000 f81b 	bl	800d8cc <__sfp>
 800d896:	60a0      	str	r0, [r4, #8]
 800d898:	4620      	mov	r0, r4
 800d89a:	f000 f817 	bl	800d8cc <__sfp>
 800d89e:	2200      	movs	r2, #0
 800d8a0:	60e0      	str	r0, [r4, #12]
 800d8a2:	2104      	movs	r1, #4
 800d8a4:	6860      	ldr	r0, [r4, #4]
 800d8a6:	f7ff ff85 	bl	800d7b4 <std.isra.0>
 800d8aa:	2201      	movs	r2, #1
 800d8ac:	2109      	movs	r1, #9
 800d8ae:	68a0      	ldr	r0, [r4, #8]
 800d8b0:	f7ff ff80 	bl	800d7b4 <std.isra.0>
 800d8b4:	2202      	movs	r2, #2
 800d8b6:	2112      	movs	r1, #18
 800d8b8:	68e0      	ldr	r0, [r4, #12]
 800d8ba:	f7ff ff7b 	bl	800d7b4 <std.isra.0>
 800d8be:	2301      	movs	r3, #1
 800d8c0:	61a3      	str	r3, [r4, #24]
 800d8c2:	e7cf      	b.n	800d864 <__sinit+0xc>
 800d8c4:	08010c4c 	.word	0x08010c4c
 800d8c8:	0800d7a9 	.word	0x0800d7a9

0800d8cc <__sfp>:
 800d8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ce:	4607      	mov	r7, r0
 800d8d0:	f7ff ffaa 	bl	800d828 <__sfp_lock_acquire>
 800d8d4:	4b1f      	ldr	r3, [pc, #124]	; (800d954 <__sfp+0x88>)
 800d8d6:	681e      	ldr	r6, [r3, #0]
 800d8d8:	69b3      	ldr	r3, [r6, #24]
 800d8da:	b913      	cbnz	r3, 800d8e2 <__sfp+0x16>
 800d8dc:	4630      	mov	r0, r6
 800d8de:	f7ff ffbb 	bl	800d858 <__sinit>
 800d8e2:	36d8      	adds	r6, #216	; 0xd8
 800d8e4:	68b4      	ldr	r4, [r6, #8]
 800d8e6:	6873      	ldr	r3, [r6, #4]
 800d8e8:	3b01      	subs	r3, #1
 800d8ea:	d503      	bpl.n	800d8f4 <__sfp+0x28>
 800d8ec:	6833      	ldr	r3, [r6, #0]
 800d8ee:	b133      	cbz	r3, 800d8fe <__sfp+0x32>
 800d8f0:	6836      	ldr	r6, [r6, #0]
 800d8f2:	e7f7      	b.n	800d8e4 <__sfp+0x18>
 800d8f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d8f8:	b17d      	cbz	r5, 800d91a <__sfp+0x4e>
 800d8fa:	3468      	adds	r4, #104	; 0x68
 800d8fc:	e7f4      	b.n	800d8e8 <__sfp+0x1c>
 800d8fe:	2104      	movs	r1, #4
 800d900:	4638      	mov	r0, r7
 800d902:	f7ff ff7b 	bl	800d7fc <__sfmoreglue>
 800d906:	4604      	mov	r4, r0
 800d908:	6030      	str	r0, [r6, #0]
 800d90a:	2800      	cmp	r0, #0
 800d90c:	d1f0      	bne.n	800d8f0 <__sfp+0x24>
 800d90e:	f7ff ff91 	bl	800d834 <__sfp_lock_release>
 800d912:	230c      	movs	r3, #12
 800d914:	603b      	str	r3, [r7, #0]
 800d916:	4620      	mov	r0, r4
 800d918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d91a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d91e:	81e3      	strh	r3, [r4, #14]
 800d920:	2301      	movs	r3, #1
 800d922:	81a3      	strh	r3, [r4, #12]
 800d924:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d928:	6665      	str	r5, [r4, #100]	; 0x64
 800d92a:	f000 fed9 	bl	800e6e0 <__retarget_lock_init_recursive>
 800d92e:	f7ff ff81 	bl	800d834 <__sfp_lock_release>
 800d932:	6025      	str	r5, [r4, #0]
 800d934:	60a5      	str	r5, [r4, #8]
 800d936:	6065      	str	r5, [r4, #4]
 800d938:	6125      	str	r5, [r4, #16]
 800d93a:	6165      	str	r5, [r4, #20]
 800d93c:	61a5      	str	r5, [r4, #24]
 800d93e:	2208      	movs	r2, #8
 800d940:	4629      	mov	r1, r5
 800d942:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d946:	f7fc fa56 	bl	8009df6 <memset>
 800d94a:	6365      	str	r5, [r4, #52]	; 0x34
 800d94c:	63a5      	str	r5, [r4, #56]	; 0x38
 800d94e:	64a5      	str	r5, [r4, #72]	; 0x48
 800d950:	64e5      	str	r5, [r4, #76]	; 0x4c
 800d952:	e7e0      	b.n	800d916 <__sfp+0x4a>
 800d954:	08010c4c 	.word	0x08010c4c

0800d958 <_malloc_trim_r>:
 800d958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d95c:	4f25      	ldr	r7, [pc, #148]	; (800d9f4 <_malloc_trim_r+0x9c>)
 800d95e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800da00 <_malloc_trim_r+0xa8>
 800d962:	4689      	mov	r9, r1
 800d964:	4606      	mov	r6, r0
 800d966:	f7fc fcab 	bl	800a2c0 <__malloc_lock>
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	685d      	ldr	r5, [r3, #4]
 800d96e:	f1a8 0411 	sub.w	r4, r8, #17
 800d972:	f025 0503 	bic.w	r5, r5, #3
 800d976:	eba4 0409 	sub.w	r4, r4, r9
 800d97a:	442c      	add	r4, r5
 800d97c:	fbb4 f4f8 	udiv	r4, r4, r8
 800d980:	3c01      	subs	r4, #1
 800d982:	fb08 f404 	mul.w	r4, r8, r4
 800d986:	4544      	cmp	r4, r8
 800d988:	da05      	bge.n	800d996 <_malloc_trim_r+0x3e>
 800d98a:	4630      	mov	r0, r6
 800d98c:	f7fc fc9e 	bl	800a2cc <__malloc_unlock>
 800d990:	2000      	movs	r0, #0
 800d992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d996:	2100      	movs	r1, #0
 800d998:	4630      	mov	r0, r6
 800d99a:	f7fc fd1d 	bl	800a3d8 <_sbrk_r>
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	442b      	add	r3, r5
 800d9a2:	4298      	cmp	r0, r3
 800d9a4:	d1f1      	bne.n	800d98a <_malloc_trim_r+0x32>
 800d9a6:	4261      	negs	r1, r4
 800d9a8:	4630      	mov	r0, r6
 800d9aa:	f7fc fd15 	bl	800a3d8 <_sbrk_r>
 800d9ae:	3001      	adds	r0, #1
 800d9b0:	d110      	bne.n	800d9d4 <_malloc_trim_r+0x7c>
 800d9b2:	2100      	movs	r1, #0
 800d9b4:	4630      	mov	r0, r6
 800d9b6:	f7fc fd0f 	bl	800a3d8 <_sbrk_r>
 800d9ba:	68ba      	ldr	r2, [r7, #8]
 800d9bc:	1a83      	subs	r3, r0, r2
 800d9be:	2b0f      	cmp	r3, #15
 800d9c0:	dde3      	ble.n	800d98a <_malloc_trim_r+0x32>
 800d9c2:	490d      	ldr	r1, [pc, #52]	; (800d9f8 <_malloc_trim_r+0xa0>)
 800d9c4:	6809      	ldr	r1, [r1, #0]
 800d9c6:	1a40      	subs	r0, r0, r1
 800d9c8:	490c      	ldr	r1, [pc, #48]	; (800d9fc <_malloc_trim_r+0xa4>)
 800d9ca:	f043 0301 	orr.w	r3, r3, #1
 800d9ce:	6008      	str	r0, [r1, #0]
 800d9d0:	6053      	str	r3, [r2, #4]
 800d9d2:	e7da      	b.n	800d98a <_malloc_trim_r+0x32>
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	4a09      	ldr	r2, [pc, #36]	; (800d9fc <_malloc_trim_r+0xa4>)
 800d9d8:	1b2d      	subs	r5, r5, r4
 800d9da:	f045 0501 	orr.w	r5, r5, #1
 800d9de:	605d      	str	r5, [r3, #4]
 800d9e0:	6813      	ldr	r3, [r2, #0]
 800d9e2:	4630      	mov	r0, r6
 800d9e4:	1b1c      	subs	r4, r3, r4
 800d9e6:	6014      	str	r4, [r2, #0]
 800d9e8:	f7fc fc70 	bl	800a2cc <__malloc_unlock>
 800d9ec:	2001      	movs	r0, #1
 800d9ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9f2:	bf00      	nop
 800d9f4:	20000104 	.word	0x20000104
 800d9f8:	2000050c 	.word	0x2000050c
 800d9fc:	200006f0 	.word	0x200006f0
 800da00:	00000080 	.word	0x00000080

0800da04 <_free_r>:
 800da04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da08:	4604      	mov	r4, r0
 800da0a:	4688      	mov	r8, r1
 800da0c:	2900      	cmp	r1, #0
 800da0e:	f000 80ab 	beq.w	800db68 <_free_r+0x164>
 800da12:	f7fc fc55 	bl	800a2c0 <__malloc_lock>
 800da16:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800da1a:	4d54      	ldr	r5, [pc, #336]	; (800db6c <_free_r+0x168>)
 800da1c:	f022 0001 	bic.w	r0, r2, #1
 800da20:	f1a8 0308 	sub.w	r3, r8, #8
 800da24:	181f      	adds	r7, r3, r0
 800da26:	68a9      	ldr	r1, [r5, #8]
 800da28:	687e      	ldr	r6, [r7, #4]
 800da2a:	428f      	cmp	r7, r1
 800da2c:	f026 0603 	bic.w	r6, r6, #3
 800da30:	f002 0201 	and.w	r2, r2, #1
 800da34:	d11b      	bne.n	800da6e <_free_r+0x6a>
 800da36:	4430      	add	r0, r6
 800da38:	b93a      	cbnz	r2, 800da4a <_free_r+0x46>
 800da3a:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800da3e:	1a9b      	subs	r3, r3, r2
 800da40:	4410      	add	r0, r2
 800da42:	6899      	ldr	r1, [r3, #8]
 800da44:	68da      	ldr	r2, [r3, #12]
 800da46:	60ca      	str	r2, [r1, #12]
 800da48:	6091      	str	r1, [r2, #8]
 800da4a:	f040 0201 	orr.w	r2, r0, #1
 800da4e:	605a      	str	r2, [r3, #4]
 800da50:	60ab      	str	r3, [r5, #8]
 800da52:	4b47      	ldr	r3, [pc, #284]	; (800db70 <_free_r+0x16c>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	4298      	cmp	r0, r3
 800da58:	d304      	bcc.n	800da64 <_free_r+0x60>
 800da5a:	4b46      	ldr	r3, [pc, #280]	; (800db74 <_free_r+0x170>)
 800da5c:	4620      	mov	r0, r4
 800da5e:	6819      	ldr	r1, [r3, #0]
 800da60:	f7ff ff7a 	bl	800d958 <_malloc_trim_r>
 800da64:	4620      	mov	r0, r4
 800da66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da6a:	f7fc bc2f 	b.w	800a2cc <__malloc_unlock>
 800da6e:	607e      	str	r6, [r7, #4]
 800da70:	2a00      	cmp	r2, #0
 800da72:	d139      	bne.n	800dae8 <_free_r+0xe4>
 800da74:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800da78:	1a5b      	subs	r3, r3, r1
 800da7a:	4408      	add	r0, r1
 800da7c:	6899      	ldr	r1, [r3, #8]
 800da7e:	f105 0e08 	add.w	lr, r5, #8
 800da82:	4571      	cmp	r1, lr
 800da84:	d032      	beq.n	800daec <_free_r+0xe8>
 800da86:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800da8a:	f8c1 e00c 	str.w	lr, [r1, #12]
 800da8e:	f8ce 1008 	str.w	r1, [lr, #8]
 800da92:	19b9      	adds	r1, r7, r6
 800da94:	6849      	ldr	r1, [r1, #4]
 800da96:	07c9      	lsls	r1, r1, #31
 800da98:	d40a      	bmi.n	800dab0 <_free_r+0xac>
 800da9a:	4430      	add	r0, r6
 800da9c:	68b9      	ldr	r1, [r7, #8]
 800da9e:	bb3a      	cbnz	r2, 800daf0 <_free_r+0xec>
 800daa0:	4e35      	ldr	r6, [pc, #212]	; (800db78 <_free_r+0x174>)
 800daa2:	42b1      	cmp	r1, r6
 800daa4:	d124      	bne.n	800daf0 <_free_r+0xec>
 800daa6:	616b      	str	r3, [r5, #20]
 800daa8:	612b      	str	r3, [r5, #16]
 800daaa:	2201      	movs	r2, #1
 800daac:	60d9      	str	r1, [r3, #12]
 800daae:	6099      	str	r1, [r3, #8]
 800dab0:	f040 0101 	orr.w	r1, r0, #1
 800dab4:	6059      	str	r1, [r3, #4]
 800dab6:	5018      	str	r0, [r3, r0]
 800dab8:	2a00      	cmp	r2, #0
 800daba:	d1d3      	bne.n	800da64 <_free_r+0x60>
 800dabc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800dac0:	d21a      	bcs.n	800daf8 <_free_r+0xf4>
 800dac2:	08c0      	lsrs	r0, r0, #3
 800dac4:	1081      	asrs	r1, r0, #2
 800dac6:	2201      	movs	r2, #1
 800dac8:	408a      	lsls	r2, r1
 800daca:	6869      	ldr	r1, [r5, #4]
 800dacc:	3001      	adds	r0, #1
 800dace:	430a      	orrs	r2, r1
 800dad0:	606a      	str	r2, [r5, #4]
 800dad2:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800dad6:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800dada:	6099      	str	r1, [r3, #8]
 800dadc:	3a08      	subs	r2, #8
 800dade:	60da      	str	r2, [r3, #12]
 800dae0:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800dae4:	60cb      	str	r3, [r1, #12]
 800dae6:	e7bd      	b.n	800da64 <_free_r+0x60>
 800dae8:	2200      	movs	r2, #0
 800daea:	e7d2      	b.n	800da92 <_free_r+0x8e>
 800daec:	2201      	movs	r2, #1
 800daee:	e7d0      	b.n	800da92 <_free_r+0x8e>
 800daf0:	68fe      	ldr	r6, [r7, #12]
 800daf2:	60ce      	str	r6, [r1, #12]
 800daf4:	60b1      	str	r1, [r6, #8]
 800daf6:	e7db      	b.n	800dab0 <_free_r+0xac>
 800daf8:	0a42      	lsrs	r2, r0, #9
 800dafa:	2a04      	cmp	r2, #4
 800dafc:	d813      	bhi.n	800db26 <_free_r+0x122>
 800dafe:	0982      	lsrs	r2, r0, #6
 800db00:	3238      	adds	r2, #56	; 0x38
 800db02:	1c51      	adds	r1, r2, #1
 800db04:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800db08:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800db0c:	428e      	cmp	r6, r1
 800db0e:	d124      	bne.n	800db5a <_free_r+0x156>
 800db10:	2001      	movs	r0, #1
 800db12:	1092      	asrs	r2, r2, #2
 800db14:	fa00 f202 	lsl.w	r2, r0, r2
 800db18:	6868      	ldr	r0, [r5, #4]
 800db1a:	4302      	orrs	r2, r0
 800db1c:	606a      	str	r2, [r5, #4]
 800db1e:	60de      	str	r6, [r3, #12]
 800db20:	6099      	str	r1, [r3, #8]
 800db22:	60b3      	str	r3, [r6, #8]
 800db24:	e7de      	b.n	800dae4 <_free_r+0xe0>
 800db26:	2a14      	cmp	r2, #20
 800db28:	d801      	bhi.n	800db2e <_free_r+0x12a>
 800db2a:	325b      	adds	r2, #91	; 0x5b
 800db2c:	e7e9      	b.n	800db02 <_free_r+0xfe>
 800db2e:	2a54      	cmp	r2, #84	; 0x54
 800db30:	d802      	bhi.n	800db38 <_free_r+0x134>
 800db32:	0b02      	lsrs	r2, r0, #12
 800db34:	326e      	adds	r2, #110	; 0x6e
 800db36:	e7e4      	b.n	800db02 <_free_r+0xfe>
 800db38:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800db3c:	d802      	bhi.n	800db44 <_free_r+0x140>
 800db3e:	0bc2      	lsrs	r2, r0, #15
 800db40:	3277      	adds	r2, #119	; 0x77
 800db42:	e7de      	b.n	800db02 <_free_r+0xfe>
 800db44:	f240 5154 	movw	r1, #1364	; 0x554
 800db48:	428a      	cmp	r2, r1
 800db4a:	bf9a      	itte	ls
 800db4c:	0c82      	lsrls	r2, r0, #18
 800db4e:	327c      	addls	r2, #124	; 0x7c
 800db50:	227e      	movhi	r2, #126	; 0x7e
 800db52:	e7d6      	b.n	800db02 <_free_r+0xfe>
 800db54:	6889      	ldr	r1, [r1, #8]
 800db56:	428e      	cmp	r6, r1
 800db58:	d004      	beq.n	800db64 <_free_r+0x160>
 800db5a:	684a      	ldr	r2, [r1, #4]
 800db5c:	f022 0203 	bic.w	r2, r2, #3
 800db60:	4290      	cmp	r0, r2
 800db62:	d3f7      	bcc.n	800db54 <_free_r+0x150>
 800db64:	68ce      	ldr	r6, [r1, #12]
 800db66:	e7da      	b.n	800db1e <_free_r+0x11a>
 800db68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db6c:	20000104 	.word	0x20000104
 800db70:	20000510 	.word	0x20000510
 800db74:	20000720 	.word	0x20000720
 800db78:	2000010c 	.word	0x2000010c

0800db7c <__sfvwrite_r>:
 800db7c:	6893      	ldr	r3, [r2, #8]
 800db7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db82:	4607      	mov	r7, r0
 800db84:	460c      	mov	r4, r1
 800db86:	4690      	mov	r8, r2
 800db88:	b91b      	cbnz	r3, 800db92 <__sfvwrite_r+0x16>
 800db8a:	2000      	movs	r0, #0
 800db8c:	b003      	add	sp, #12
 800db8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db92:	898b      	ldrh	r3, [r1, #12]
 800db94:	0718      	lsls	r0, r3, #28
 800db96:	d526      	bpl.n	800dbe6 <__sfvwrite_r+0x6a>
 800db98:	690b      	ldr	r3, [r1, #16]
 800db9a:	b323      	cbz	r3, 800dbe6 <__sfvwrite_r+0x6a>
 800db9c:	89a3      	ldrh	r3, [r4, #12]
 800db9e:	f8d8 6000 	ldr.w	r6, [r8]
 800dba2:	f013 0902 	ands.w	r9, r3, #2
 800dba6:	d02d      	beq.n	800dc04 <__sfvwrite_r+0x88>
 800dba8:	f04f 0a00 	mov.w	sl, #0
 800dbac:	f8df b264 	ldr.w	fp, [pc, #612]	; 800de14 <__sfvwrite_r+0x298>
 800dbb0:	46d1      	mov	r9, sl
 800dbb2:	f1b9 0f00 	cmp.w	r9, #0
 800dbb6:	d01f      	beq.n	800dbf8 <__sfvwrite_r+0x7c>
 800dbb8:	45d9      	cmp	r9, fp
 800dbba:	464b      	mov	r3, r9
 800dbbc:	4652      	mov	r2, sl
 800dbbe:	bf28      	it	cs
 800dbc0:	465b      	movcs	r3, fp
 800dbc2:	6a21      	ldr	r1, [r4, #32]
 800dbc4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800dbc6:	4638      	mov	r0, r7
 800dbc8:	47a8      	blx	r5
 800dbca:	2800      	cmp	r0, #0
 800dbcc:	f340 8089 	ble.w	800dce2 <__sfvwrite_r+0x166>
 800dbd0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dbd4:	4482      	add	sl, r0
 800dbd6:	eba9 0900 	sub.w	r9, r9, r0
 800dbda:	1a18      	subs	r0, r3, r0
 800dbdc:	f8c8 0008 	str.w	r0, [r8, #8]
 800dbe0:	2800      	cmp	r0, #0
 800dbe2:	d1e6      	bne.n	800dbb2 <__sfvwrite_r+0x36>
 800dbe4:	e7d1      	b.n	800db8a <__sfvwrite_r+0xe>
 800dbe6:	4621      	mov	r1, r4
 800dbe8:	4638      	mov	r0, r7
 800dbea:	f7fe fe2d 	bl	800c848 <__swsetup_r>
 800dbee:	2800      	cmp	r0, #0
 800dbf0:	d0d4      	beq.n	800db9c <__sfvwrite_r+0x20>
 800dbf2:	f04f 30ff 	mov.w	r0, #4294967295
 800dbf6:	e7c9      	b.n	800db8c <__sfvwrite_r+0x10>
 800dbf8:	f8d6 a000 	ldr.w	sl, [r6]
 800dbfc:	f8d6 9004 	ldr.w	r9, [r6, #4]
 800dc00:	3608      	adds	r6, #8
 800dc02:	e7d6      	b.n	800dbb2 <__sfvwrite_r+0x36>
 800dc04:	f013 0301 	ands.w	r3, r3, #1
 800dc08:	d043      	beq.n	800dc92 <__sfvwrite_r+0x116>
 800dc0a:	4648      	mov	r0, r9
 800dc0c:	46ca      	mov	sl, r9
 800dc0e:	46cb      	mov	fp, r9
 800dc10:	f1bb 0f00 	cmp.w	fp, #0
 800dc14:	f000 80d9 	beq.w	800ddca <__sfvwrite_r+0x24e>
 800dc18:	b950      	cbnz	r0, 800dc30 <__sfvwrite_r+0xb4>
 800dc1a:	465a      	mov	r2, fp
 800dc1c:	210a      	movs	r1, #10
 800dc1e:	4650      	mov	r0, sl
 800dc20:	f7f2 faee 	bl	8000200 <memchr>
 800dc24:	2800      	cmp	r0, #0
 800dc26:	f000 80d5 	beq.w	800ddd4 <__sfvwrite_r+0x258>
 800dc2a:	3001      	adds	r0, #1
 800dc2c:	eba0 090a 	sub.w	r9, r0, sl
 800dc30:	6820      	ldr	r0, [r4, #0]
 800dc32:	6921      	ldr	r1, [r4, #16]
 800dc34:	6962      	ldr	r2, [r4, #20]
 800dc36:	45d9      	cmp	r9, fp
 800dc38:	464b      	mov	r3, r9
 800dc3a:	bf28      	it	cs
 800dc3c:	465b      	movcs	r3, fp
 800dc3e:	4288      	cmp	r0, r1
 800dc40:	f240 80cb 	bls.w	800ddda <__sfvwrite_r+0x25e>
 800dc44:	68a5      	ldr	r5, [r4, #8]
 800dc46:	4415      	add	r5, r2
 800dc48:	42ab      	cmp	r3, r5
 800dc4a:	f340 80c6 	ble.w	800ddda <__sfvwrite_r+0x25e>
 800dc4e:	4651      	mov	r1, sl
 800dc50:	462a      	mov	r2, r5
 800dc52:	f000 fdc9 	bl	800e7e8 <memmove>
 800dc56:	6823      	ldr	r3, [r4, #0]
 800dc58:	442b      	add	r3, r5
 800dc5a:	6023      	str	r3, [r4, #0]
 800dc5c:	4621      	mov	r1, r4
 800dc5e:	4638      	mov	r0, r7
 800dc60:	f7ff fd66 	bl	800d730 <_fflush_r>
 800dc64:	2800      	cmp	r0, #0
 800dc66:	d13c      	bne.n	800dce2 <__sfvwrite_r+0x166>
 800dc68:	ebb9 0905 	subs.w	r9, r9, r5
 800dc6c:	f040 80cf 	bne.w	800de0e <__sfvwrite_r+0x292>
 800dc70:	4621      	mov	r1, r4
 800dc72:	4638      	mov	r0, r7
 800dc74:	f7ff fd5c 	bl	800d730 <_fflush_r>
 800dc78:	2800      	cmp	r0, #0
 800dc7a:	d132      	bne.n	800dce2 <__sfvwrite_r+0x166>
 800dc7c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dc80:	44aa      	add	sl, r5
 800dc82:	ebab 0b05 	sub.w	fp, fp, r5
 800dc86:	1b5d      	subs	r5, r3, r5
 800dc88:	f8c8 5008 	str.w	r5, [r8, #8]
 800dc8c:	2d00      	cmp	r5, #0
 800dc8e:	d1bf      	bne.n	800dc10 <__sfvwrite_r+0x94>
 800dc90:	e77b      	b.n	800db8a <__sfvwrite_r+0xe>
 800dc92:	4699      	mov	r9, r3
 800dc94:	469a      	mov	sl, r3
 800dc96:	f1ba 0f00 	cmp.w	sl, #0
 800dc9a:	d027      	beq.n	800dcec <__sfvwrite_r+0x170>
 800dc9c:	89a2      	ldrh	r2, [r4, #12]
 800dc9e:	68a5      	ldr	r5, [r4, #8]
 800dca0:	0591      	lsls	r1, r2, #22
 800dca2:	d565      	bpl.n	800dd70 <__sfvwrite_r+0x1f4>
 800dca4:	45aa      	cmp	sl, r5
 800dca6:	d33b      	bcc.n	800dd20 <__sfvwrite_r+0x1a4>
 800dca8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dcac:	d036      	beq.n	800dd1c <__sfvwrite_r+0x1a0>
 800dcae:	6921      	ldr	r1, [r4, #16]
 800dcb0:	6823      	ldr	r3, [r4, #0]
 800dcb2:	1a5b      	subs	r3, r3, r1
 800dcb4:	9301      	str	r3, [sp, #4]
 800dcb6:	6963      	ldr	r3, [r4, #20]
 800dcb8:	2002      	movs	r0, #2
 800dcba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800dcbe:	fb93 fbf0 	sdiv	fp, r3, r0
 800dcc2:	9b01      	ldr	r3, [sp, #4]
 800dcc4:	1c58      	adds	r0, r3, #1
 800dcc6:	4450      	add	r0, sl
 800dcc8:	4583      	cmp	fp, r0
 800dcca:	bf38      	it	cc
 800dccc:	4683      	movcc	fp, r0
 800dcce:	0553      	lsls	r3, r2, #21
 800dcd0:	d53e      	bpl.n	800dd50 <__sfvwrite_r+0x1d4>
 800dcd2:	4659      	mov	r1, fp
 800dcd4:	4638      	mov	r0, r7
 800dcd6:	f7fb fe75 	bl	80099c4 <_malloc_r>
 800dcda:	4605      	mov	r5, r0
 800dcdc:	b950      	cbnz	r0, 800dcf4 <__sfvwrite_r+0x178>
 800dcde:	230c      	movs	r3, #12
 800dce0:	603b      	str	r3, [r7, #0]
 800dce2:	89a3      	ldrh	r3, [r4, #12]
 800dce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dce8:	81a3      	strh	r3, [r4, #12]
 800dcea:	e782      	b.n	800dbf2 <__sfvwrite_r+0x76>
 800dcec:	e896 0600 	ldmia.w	r6, {r9, sl}
 800dcf0:	3608      	adds	r6, #8
 800dcf2:	e7d0      	b.n	800dc96 <__sfvwrite_r+0x11a>
 800dcf4:	9a01      	ldr	r2, [sp, #4]
 800dcf6:	6921      	ldr	r1, [r4, #16]
 800dcf8:	f7fc f872 	bl	8009de0 <memcpy>
 800dcfc:	89a2      	ldrh	r2, [r4, #12]
 800dcfe:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800dd02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800dd06:	81a2      	strh	r2, [r4, #12]
 800dd08:	9b01      	ldr	r3, [sp, #4]
 800dd0a:	6125      	str	r5, [r4, #16]
 800dd0c:	441d      	add	r5, r3
 800dd0e:	ebab 0303 	sub.w	r3, fp, r3
 800dd12:	6025      	str	r5, [r4, #0]
 800dd14:	f8c4 b014 	str.w	fp, [r4, #20]
 800dd18:	4655      	mov	r5, sl
 800dd1a:	60a3      	str	r3, [r4, #8]
 800dd1c:	45aa      	cmp	sl, r5
 800dd1e:	d200      	bcs.n	800dd22 <__sfvwrite_r+0x1a6>
 800dd20:	4655      	mov	r5, sl
 800dd22:	462a      	mov	r2, r5
 800dd24:	4649      	mov	r1, r9
 800dd26:	6820      	ldr	r0, [r4, #0]
 800dd28:	f000 fd5e 	bl	800e7e8 <memmove>
 800dd2c:	68a3      	ldr	r3, [r4, #8]
 800dd2e:	1b5b      	subs	r3, r3, r5
 800dd30:	60a3      	str	r3, [r4, #8]
 800dd32:	6823      	ldr	r3, [r4, #0]
 800dd34:	441d      	add	r5, r3
 800dd36:	6025      	str	r5, [r4, #0]
 800dd38:	4655      	mov	r5, sl
 800dd3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dd3e:	44a9      	add	r9, r5
 800dd40:	ebaa 0a05 	sub.w	sl, sl, r5
 800dd44:	1b5d      	subs	r5, r3, r5
 800dd46:	f8c8 5008 	str.w	r5, [r8, #8]
 800dd4a:	2d00      	cmp	r5, #0
 800dd4c:	d1a3      	bne.n	800dc96 <__sfvwrite_r+0x11a>
 800dd4e:	e71c      	b.n	800db8a <__sfvwrite_r+0xe>
 800dd50:	465a      	mov	r2, fp
 800dd52:	4638      	mov	r0, r7
 800dd54:	f001 f94a 	bl	800efec <_realloc_r>
 800dd58:	4605      	mov	r5, r0
 800dd5a:	2800      	cmp	r0, #0
 800dd5c:	d1d4      	bne.n	800dd08 <__sfvwrite_r+0x18c>
 800dd5e:	6921      	ldr	r1, [r4, #16]
 800dd60:	4638      	mov	r0, r7
 800dd62:	f7ff fe4f 	bl	800da04 <_free_r>
 800dd66:	89a3      	ldrh	r3, [r4, #12]
 800dd68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd6c:	81a3      	strh	r3, [r4, #12]
 800dd6e:	e7b6      	b.n	800dcde <__sfvwrite_r+0x162>
 800dd70:	6820      	ldr	r0, [r4, #0]
 800dd72:	6923      	ldr	r3, [r4, #16]
 800dd74:	4298      	cmp	r0, r3
 800dd76:	d802      	bhi.n	800dd7e <__sfvwrite_r+0x202>
 800dd78:	6962      	ldr	r2, [r4, #20]
 800dd7a:	4592      	cmp	sl, r2
 800dd7c:	d215      	bcs.n	800ddaa <__sfvwrite_r+0x22e>
 800dd7e:	4555      	cmp	r5, sl
 800dd80:	bf28      	it	cs
 800dd82:	4655      	movcs	r5, sl
 800dd84:	462a      	mov	r2, r5
 800dd86:	4649      	mov	r1, r9
 800dd88:	f000 fd2e 	bl	800e7e8 <memmove>
 800dd8c:	68a3      	ldr	r3, [r4, #8]
 800dd8e:	6822      	ldr	r2, [r4, #0]
 800dd90:	1b5b      	subs	r3, r3, r5
 800dd92:	442a      	add	r2, r5
 800dd94:	60a3      	str	r3, [r4, #8]
 800dd96:	6022      	str	r2, [r4, #0]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d1ce      	bne.n	800dd3a <__sfvwrite_r+0x1be>
 800dd9c:	4621      	mov	r1, r4
 800dd9e:	4638      	mov	r0, r7
 800dda0:	f7ff fcc6 	bl	800d730 <_fflush_r>
 800dda4:	2800      	cmp	r0, #0
 800dda6:	d0c8      	beq.n	800dd3a <__sfvwrite_r+0x1be>
 800dda8:	e79b      	b.n	800dce2 <__sfvwrite_r+0x166>
 800ddaa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ddae:	4553      	cmp	r3, sl
 800ddb0:	bf28      	it	cs
 800ddb2:	4653      	movcs	r3, sl
 800ddb4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800ddb6:	fb93 f3f2 	sdiv	r3, r3, r2
 800ddba:	6a21      	ldr	r1, [r4, #32]
 800ddbc:	4353      	muls	r3, r2
 800ddbe:	4638      	mov	r0, r7
 800ddc0:	464a      	mov	r2, r9
 800ddc2:	47a8      	blx	r5
 800ddc4:	1e05      	subs	r5, r0, #0
 800ddc6:	dcb8      	bgt.n	800dd3a <__sfvwrite_r+0x1be>
 800ddc8:	e78b      	b.n	800dce2 <__sfvwrite_r+0x166>
 800ddca:	e896 0c00 	ldmia.w	r6, {sl, fp}
 800ddce:	2000      	movs	r0, #0
 800ddd0:	3608      	adds	r6, #8
 800ddd2:	e71d      	b.n	800dc10 <__sfvwrite_r+0x94>
 800ddd4:	f10b 0901 	add.w	r9, fp, #1
 800ddd8:	e72a      	b.n	800dc30 <__sfvwrite_r+0xb4>
 800ddda:	4293      	cmp	r3, r2
 800dddc:	db09      	blt.n	800ddf2 <__sfvwrite_r+0x276>
 800ddde:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800dde0:	6a21      	ldr	r1, [r4, #32]
 800dde2:	4613      	mov	r3, r2
 800dde4:	4638      	mov	r0, r7
 800dde6:	4652      	mov	r2, sl
 800dde8:	47a8      	blx	r5
 800ddea:	1e05      	subs	r5, r0, #0
 800ddec:	f73f af3c 	bgt.w	800dc68 <__sfvwrite_r+0xec>
 800ddf0:	e777      	b.n	800dce2 <__sfvwrite_r+0x166>
 800ddf2:	461a      	mov	r2, r3
 800ddf4:	4651      	mov	r1, sl
 800ddf6:	9301      	str	r3, [sp, #4]
 800ddf8:	f000 fcf6 	bl	800e7e8 <memmove>
 800ddfc:	9b01      	ldr	r3, [sp, #4]
 800ddfe:	68a2      	ldr	r2, [r4, #8]
 800de00:	1ad2      	subs	r2, r2, r3
 800de02:	60a2      	str	r2, [r4, #8]
 800de04:	6822      	ldr	r2, [r4, #0]
 800de06:	441a      	add	r2, r3
 800de08:	6022      	str	r2, [r4, #0]
 800de0a:	461d      	mov	r5, r3
 800de0c:	e72c      	b.n	800dc68 <__sfvwrite_r+0xec>
 800de0e:	2001      	movs	r0, #1
 800de10:	e734      	b.n	800dc7c <__sfvwrite_r+0x100>
 800de12:	bf00      	nop
 800de14:	7ffffc00 	.word	0x7ffffc00

0800de18 <_fwalk_reent>:
 800de18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de1c:	4680      	mov	r8, r0
 800de1e:	4689      	mov	r9, r1
 800de20:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 800de24:	2600      	movs	r6, #0
 800de26:	b914      	cbnz	r4, 800de2e <_fwalk_reent+0x16>
 800de28:	4630      	mov	r0, r6
 800de2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de2e:	68a5      	ldr	r5, [r4, #8]
 800de30:	6867      	ldr	r7, [r4, #4]
 800de32:	3f01      	subs	r7, #1
 800de34:	d501      	bpl.n	800de3a <_fwalk_reent+0x22>
 800de36:	6824      	ldr	r4, [r4, #0]
 800de38:	e7f5      	b.n	800de26 <_fwalk_reent+0xe>
 800de3a:	89ab      	ldrh	r3, [r5, #12]
 800de3c:	2b01      	cmp	r3, #1
 800de3e:	d907      	bls.n	800de50 <_fwalk_reent+0x38>
 800de40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800de44:	3301      	adds	r3, #1
 800de46:	d003      	beq.n	800de50 <_fwalk_reent+0x38>
 800de48:	4629      	mov	r1, r5
 800de4a:	4640      	mov	r0, r8
 800de4c:	47c8      	blx	r9
 800de4e:	4306      	orrs	r6, r0
 800de50:	3568      	adds	r5, #104	; 0x68
 800de52:	e7ee      	b.n	800de32 <_fwalk_reent+0x1a>

0800de54 <rshift>:
 800de54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de56:	6906      	ldr	r6, [r0, #16]
 800de58:	114b      	asrs	r3, r1, #5
 800de5a:	42b3      	cmp	r3, r6
 800de5c:	f100 0514 	add.w	r5, r0, #20
 800de60:	da2b      	bge.n	800deba <rshift+0x66>
 800de62:	f011 011f 	ands.w	r1, r1, #31
 800de66:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 800de6a:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 800de6e:	d108      	bne.n	800de82 <rshift+0x2e>
 800de70:	4629      	mov	r1, r5
 800de72:	42b2      	cmp	r2, r6
 800de74:	460b      	mov	r3, r1
 800de76:	d210      	bcs.n	800de9a <rshift+0x46>
 800de78:	f852 3b04 	ldr.w	r3, [r2], #4
 800de7c:	f841 3b04 	str.w	r3, [r1], #4
 800de80:	e7f7      	b.n	800de72 <rshift+0x1e>
 800de82:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800de86:	f1c1 0e20 	rsb	lr, r1, #32
 800de8a:	3204      	adds	r2, #4
 800de8c:	40cc      	lsrs	r4, r1
 800de8e:	462b      	mov	r3, r5
 800de90:	42b2      	cmp	r2, r6
 800de92:	d308      	bcc.n	800dea6 <rshift+0x52>
 800de94:	601c      	str	r4, [r3, #0]
 800de96:	b104      	cbz	r4, 800de9a <rshift+0x46>
 800de98:	3304      	adds	r3, #4
 800de9a:	1b5b      	subs	r3, r3, r5
 800de9c:	109b      	asrs	r3, r3, #2
 800de9e:	6103      	str	r3, [r0, #16]
 800dea0:	b903      	cbnz	r3, 800dea4 <rshift+0x50>
 800dea2:	6143      	str	r3, [r0, #20]
 800dea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dea6:	6817      	ldr	r7, [r2, #0]
 800dea8:	fa07 f70e 	lsl.w	r7, r7, lr
 800deac:	433c      	orrs	r4, r7
 800deae:	f843 4b04 	str.w	r4, [r3], #4
 800deb2:	f852 4b04 	ldr.w	r4, [r2], #4
 800deb6:	40cc      	lsrs	r4, r1
 800deb8:	e7ea      	b.n	800de90 <rshift+0x3c>
 800deba:	462b      	mov	r3, r5
 800debc:	e7ed      	b.n	800de9a <rshift+0x46>

0800debe <__hexdig_fun>:
 800debe:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800dec2:	2b09      	cmp	r3, #9
 800dec4:	d802      	bhi.n	800decc <__hexdig_fun+0xe>
 800dec6:	3820      	subs	r0, #32
 800dec8:	b2c0      	uxtb	r0, r0
 800deca:	4770      	bx	lr
 800decc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ded0:	2b05      	cmp	r3, #5
 800ded2:	d801      	bhi.n	800ded8 <__hexdig_fun+0x1a>
 800ded4:	3847      	subs	r0, #71	; 0x47
 800ded6:	e7f7      	b.n	800dec8 <__hexdig_fun+0xa>
 800ded8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800dedc:	2b05      	cmp	r3, #5
 800dede:	d801      	bhi.n	800dee4 <__hexdig_fun+0x26>
 800dee0:	3827      	subs	r0, #39	; 0x27
 800dee2:	e7f1      	b.n	800dec8 <__hexdig_fun+0xa>
 800dee4:	2000      	movs	r0, #0
 800dee6:	4770      	bx	lr

0800dee8 <__gethex>:
 800dee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deec:	b08b      	sub	sp, #44	; 0x2c
 800deee:	468a      	mov	sl, r1
 800def0:	9002      	str	r0, [sp, #8]
 800def2:	9816      	ldr	r0, [sp, #88]	; 0x58
 800def4:	9306      	str	r3, [sp, #24]
 800def6:	4690      	mov	r8, r2
 800def8:	f000 fbe2 	bl	800e6c0 <__localeconv_l>
 800defc:	6803      	ldr	r3, [r0, #0]
 800defe:	9303      	str	r3, [sp, #12]
 800df00:	4618      	mov	r0, r3
 800df02:	f7f2 f96f 	bl	80001e4 <strlen>
 800df06:	9b03      	ldr	r3, [sp, #12]
 800df08:	9001      	str	r0, [sp, #4]
 800df0a:	4403      	add	r3, r0
 800df0c:	f04f 0b00 	mov.w	fp, #0
 800df10:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800df14:	9307      	str	r3, [sp, #28]
 800df16:	f8da 3000 	ldr.w	r3, [sl]
 800df1a:	3302      	adds	r3, #2
 800df1c:	461f      	mov	r7, r3
 800df1e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800df22:	2830      	cmp	r0, #48	; 0x30
 800df24:	d06c      	beq.n	800e000 <__gethex+0x118>
 800df26:	f7ff ffca 	bl	800debe <__hexdig_fun>
 800df2a:	4604      	mov	r4, r0
 800df2c:	2800      	cmp	r0, #0
 800df2e:	d16a      	bne.n	800e006 <__gethex+0x11e>
 800df30:	9a01      	ldr	r2, [sp, #4]
 800df32:	9903      	ldr	r1, [sp, #12]
 800df34:	4638      	mov	r0, r7
 800df36:	f001 fa50 	bl	800f3da <strncmp>
 800df3a:	2800      	cmp	r0, #0
 800df3c:	d166      	bne.n	800e00c <__gethex+0x124>
 800df3e:	9b01      	ldr	r3, [sp, #4]
 800df40:	5cf8      	ldrb	r0, [r7, r3]
 800df42:	18fe      	adds	r6, r7, r3
 800df44:	f7ff ffbb 	bl	800debe <__hexdig_fun>
 800df48:	2800      	cmp	r0, #0
 800df4a:	d062      	beq.n	800e012 <__gethex+0x12a>
 800df4c:	4633      	mov	r3, r6
 800df4e:	7818      	ldrb	r0, [r3, #0]
 800df50:	2830      	cmp	r0, #48	; 0x30
 800df52:	461f      	mov	r7, r3
 800df54:	f103 0301 	add.w	r3, r3, #1
 800df58:	d0f9      	beq.n	800df4e <__gethex+0x66>
 800df5a:	f7ff ffb0 	bl	800debe <__hexdig_fun>
 800df5e:	fab0 f580 	clz	r5, r0
 800df62:	096d      	lsrs	r5, r5, #5
 800df64:	4634      	mov	r4, r6
 800df66:	f04f 0b01 	mov.w	fp, #1
 800df6a:	463a      	mov	r2, r7
 800df6c:	4616      	mov	r6, r2
 800df6e:	3201      	adds	r2, #1
 800df70:	7830      	ldrb	r0, [r6, #0]
 800df72:	f7ff ffa4 	bl	800debe <__hexdig_fun>
 800df76:	2800      	cmp	r0, #0
 800df78:	d1f8      	bne.n	800df6c <__gethex+0x84>
 800df7a:	9a01      	ldr	r2, [sp, #4]
 800df7c:	9903      	ldr	r1, [sp, #12]
 800df7e:	4630      	mov	r0, r6
 800df80:	f001 fa2b 	bl	800f3da <strncmp>
 800df84:	b950      	cbnz	r0, 800df9c <__gethex+0xb4>
 800df86:	b954      	cbnz	r4, 800df9e <__gethex+0xb6>
 800df88:	9b01      	ldr	r3, [sp, #4]
 800df8a:	18f4      	adds	r4, r6, r3
 800df8c:	4622      	mov	r2, r4
 800df8e:	4616      	mov	r6, r2
 800df90:	3201      	adds	r2, #1
 800df92:	7830      	ldrb	r0, [r6, #0]
 800df94:	f7ff ff93 	bl	800debe <__hexdig_fun>
 800df98:	2800      	cmp	r0, #0
 800df9a:	d1f8      	bne.n	800df8e <__gethex+0xa6>
 800df9c:	b10c      	cbz	r4, 800dfa2 <__gethex+0xba>
 800df9e:	1ba4      	subs	r4, r4, r6
 800dfa0:	00a4      	lsls	r4, r4, #2
 800dfa2:	7833      	ldrb	r3, [r6, #0]
 800dfa4:	2b50      	cmp	r3, #80	; 0x50
 800dfa6:	d001      	beq.n	800dfac <__gethex+0xc4>
 800dfa8:	2b70      	cmp	r3, #112	; 0x70
 800dfaa:	d140      	bne.n	800e02e <__gethex+0x146>
 800dfac:	7873      	ldrb	r3, [r6, #1]
 800dfae:	2b2b      	cmp	r3, #43	; 0x2b
 800dfb0:	d035      	beq.n	800e01e <__gethex+0x136>
 800dfb2:	2b2d      	cmp	r3, #45	; 0x2d
 800dfb4:	d02f      	beq.n	800e016 <__gethex+0x12e>
 800dfb6:	1c71      	adds	r1, r6, #1
 800dfb8:	f04f 0900 	mov.w	r9, #0
 800dfbc:	7808      	ldrb	r0, [r1, #0]
 800dfbe:	f7ff ff7e 	bl	800debe <__hexdig_fun>
 800dfc2:	1e43      	subs	r3, r0, #1
 800dfc4:	b2db      	uxtb	r3, r3
 800dfc6:	2b18      	cmp	r3, #24
 800dfc8:	d831      	bhi.n	800e02e <__gethex+0x146>
 800dfca:	f1a0 0210 	sub.w	r2, r0, #16
 800dfce:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dfd2:	f7ff ff74 	bl	800debe <__hexdig_fun>
 800dfd6:	1e43      	subs	r3, r0, #1
 800dfd8:	b2db      	uxtb	r3, r3
 800dfda:	2b18      	cmp	r3, #24
 800dfdc:	d922      	bls.n	800e024 <__gethex+0x13c>
 800dfde:	f1b9 0f00 	cmp.w	r9, #0
 800dfe2:	d000      	beq.n	800dfe6 <__gethex+0xfe>
 800dfe4:	4252      	negs	r2, r2
 800dfe6:	4414      	add	r4, r2
 800dfe8:	f8ca 1000 	str.w	r1, [sl]
 800dfec:	b30d      	cbz	r5, 800e032 <__gethex+0x14a>
 800dfee:	f1bb 0f00 	cmp.w	fp, #0
 800dff2:	bf14      	ite	ne
 800dff4:	2700      	movne	r7, #0
 800dff6:	2706      	moveq	r7, #6
 800dff8:	4638      	mov	r0, r7
 800dffa:	b00b      	add	sp, #44	; 0x2c
 800dffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e000:	f10b 0b01 	add.w	fp, fp, #1
 800e004:	e78a      	b.n	800df1c <__gethex+0x34>
 800e006:	2500      	movs	r5, #0
 800e008:	462c      	mov	r4, r5
 800e00a:	e7ae      	b.n	800df6a <__gethex+0x82>
 800e00c:	463e      	mov	r6, r7
 800e00e:	2501      	movs	r5, #1
 800e010:	e7c7      	b.n	800dfa2 <__gethex+0xba>
 800e012:	4604      	mov	r4, r0
 800e014:	e7fb      	b.n	800e00e <__gethex+0x126>
 800e016:	f04f 0901 	mov.w	r9, #1
 800e01a:	1cb1      	adds	r1, r6, #2
 800e01c:	e7ce      	b.n	800dfbc <__gethex+0xd4>
 800e01e:	f04f 0900 	mov.w	r9, #0
 800e022:	e7fa      	b.n	800e01a <__gethex+0x132>
 800e024:	230a      	movs	r3, #10
 800e026:	fb03 0202 	mla	r2, r3, r2, r0
 800e02a:	3a10      	subs	r2, #16
 800e02c:	e7cf      	b.n	800dfce <__gethex+0xe6>
 800e02e:	4631      	mov	r1, r6
 800e030:	e7da      	b.n	800dfe8 <__gethex+0x100>
 800e032:	1bf3      	subs	r3, r6, r7
 800e034:	3b01      	subs	r3, #1
 800e036:	4629      	mov	r1, r5
 800e038:	2b07      	cmp	r3, #7
 800e03a:	dc49      	bgt.n	800e0d0 <__gethex+0x1e8>
 800e03c:	9802      	ldr	r0, [sp, #8]
 800e03e:	f000 fbed 	bl	800e81c <_Balloc>
 800e042:	9b01      	ldr	r3, [sp, #4]
 800e044:	f100 0914 	add.w	r9, r0, #20
 800e048:	f04f 0b00 	mov.w	fp, #0
 800e04c:	f1c3 0301 	rsb	r3, r3, #1
 800e050:	4605      	mov	r5, r0
 800e052:	f8cd 9010 	str.w	r9, [sp, #16]
 800e056:	46da      	mov	sl, fp
 800e058:	9308      	str	r3, [sp, #32]
 800e05a:	42b7      	cmp	r7, r6
 800e05c:	d33b      	bcc.n	800e0d6 <__gethex+0x1ee>
 800e05e:	9804      	ldr	r0, [sp, #16]
 800e060:	f840 ab04 	str.w	sl, [r0], #4
 800e064:	eba0 0009 	sub.w	r0, r0, r9
 800e068:	1080      	asrs	r0, r0, #2
 800e06a:	6128      	str	r0, [r5, #16]
 800e06c:	0147      	lsls	r7, r0, #5
 800e06e:	4650      	mov	r0, sl
 800e070:	f000 fc98 	bl	800e9a4 <__hi0bits>
 800e074:	f8d8 6000 	ldr.w	r6, [r8]
 800e078:	1a3f      	subs	r7, r7, r0
 800e07a:	42b7      	cmp	r7, r6
 800e07c:	dd64      	ble.n	800e148 <__gethex+0x260>
 800e07e:	1bbf      	subs	r7, r7, r6
 800e080:	4639      	mov	r1, r7
 800e082:	4628      	mov	r0, r5
 800e084:	f000 ff91 	bl	800efaa <__any_on>
 800e088:	4682      	mov	sl, r0
 800e08a:	b178      	cbz	r0, 800e0ac <__gethex+0x1c4>
 800e08c:	1e7b      	subs	r3, r7, #1
 800e08e:	1159      	asrs	r1, r3, #5
 800e090:	f003 021f 	and.w	r2, r3, #31
 800e094:	f04f 0a01 	mov.w	sl, #1
 800e098:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e09c:	fa0a f202 	lsl.w	r2, sl, r2
 800e0a0:	420a      	tst	r2, r1
 800e0a2:	d003      	beq.n	800e0ac <__gethex+0x1c4>
 800e0a4:	4553      	cmp	r3, sl
 800e0a6:	dc46      	bgt.n	800e136 <__gethex+0x24e>
 800e0a8:	f04f 0a02 	mov.w	sl, #2
 800e0ac:	4639      	mov	r1, r7
 800e0ae:	4628      	mov	r0, r5
 800e0b0:	f7ff fed0 	bl	800de54 <rshift>
 800e0b4:	443c      	add	r4, r7
 800e0b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e0ba:	429c      	cmp	r4, r3
 800e0bc:	dd52      	ble.n	800e164 <__gethex+0x27c>
 800e0be:	4629      	mov	r1, r5
 800e0c0:	9802      	ldr	r0, [sp, #8]
 800e0c2:	f000 fbdf 	bl	800e884 <_Bfree>
 800e0c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	6013      	str	r3, [r2, #0]
 800e0cc:	27a3      	movs	r7, #163	; 0xa3
 800e0ce:	e793      	b.n	800dff8 <__gethex+0x110>
 800e0d0:	3101      	adds	r1, #1
 800e0d2:	105b      	asrs	r3, r3, #1
 800e0d4:	e7b0      	b.n	800e038 <__gethex+0x150>
 800e0d6:	1e73      	subs	r3, r6, #1
 800e0d8:	9305      	str	r3, [sp, #20]
 800e0da:	9a07      	ldr	r2, [sp, #28]
 800e0dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e0e0:	4293      	cmp	r3, r2
 800e0e2:	d018      	beq.n	800e116 <__gethex+0x22e>
 800e0e4:	f1bb 0f20 	cmp.w	fp, #32
 800e0e8:	d107      	bne.n	800e0fa <__gethex+0x212>
 800e0ea:	9b04      	ldr	r3, [sp, #16]
 800e0ec:	f8c3 a000 	str.w	sl, [r3]
 800e0f0:	3304      	adds	r3, #4
 800e0f2:	f04f 0a00 	mov.w	sl, #0
 800e0f6:	9304      	str	r3, [sp, #16]
 800e0f8:	46d3      	mov	fp, sl
 800e0fa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e0fe:	f7ff fede 	bl	800debe <__hexdig_fun>
 800e102:	f000 000f 	and.w	r0, r0, #15
 800e106:	fa00 f00b 	lsl.w	r0, r0, fp
 800e10a:	ea4a 0a00 	orr.w	sl, sl, r0
 800e10e:	f10b 0b04 	add.w	fp, fp, #4
 800e112:	9b05      	ldr	r3, [sp, #20]
 800e114:	e00d      	b.n	800e132 <__gethex+0x24a>
 800e116:	9b05      	ldr	r3, [sp, #20]
 800e118:	9a08      	ldr	r2, [sp, #32]
 800e11a:	4413      	add	r3, r2
 800e11c:	429f      	cmp	r7, r3
 800e11e:	d8e1      	bhi.n	800e0e4 <__gethex+0x1fc>
 800e120:	4618      	mov	r0, r3
 800e122:	9a01      	ldr	r2, [sp, #4]
 800e124:	9903      	ldr	r1, [sp, #12]
 800e126:	9309      	str	r3, [sp, #36]	; 0x24
 800e128:	f001 f957 	bl	800f3da <strncmp>
 800e12c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e12e:	2800      	cmp	r0, #0
 800e130:	d1d8      	bne.n	800e0e4 <__gethex+0x1fc>
 800e132:	461e      	mov	r6, r3
 800e134:	e791      	b.n	800e05a <__gethex+0x172>
 800e136:	1eb9      	subs	r1, r7, #2
 800e138:	4628      	mov	r0, r5
 800e13a:	f000 ff36 	bl	800efaa <__any_on>
 800e13e:	2800      	cmp	r0, #0
 800e140:	d0b2      	beq.n	800e0a8 <__gethex+0x1c0>
 800e142:	f04f 0a03 	mov.w	sl, #3
 800e146:	e7b1      	b.n	800e0ac <__gethex+0x1c4>
 800e148:	da09      	bge.n	800e15e <__gethex+0x276>
 800e14a:	1bf7      	subs	r7, r6, r7
 800e14c:	4629      	mov	r1, r5
 800e14e:	463a      	mov	r2, r7
 800e150:	9802      	ldr	r0, [sp, #8]
 800e152:	f000 fd59 	bl	800ec08 <__lshift>
 800e156:	1be4      	subs	r4, r4, r7
 800e158:	4605      	mov	r5, r0
 800e15a:	f100 0914 	add.w	r9, r0, #20
 800e15e:	f04f 0a00 	mov.w	sl, #0
 800e162:	e7a8      	b.n	800e0b6 <__gethex+0x1ce>
 800e164:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e168:	4284      	cmp	r4, r0
 800e16a:	da6a      	bge.n	800e242 <__gethex+0x35a>
 800e16c:	1b04      	subs	r4, r0, r4
 800e16e:	42a6      	cmp	r6, r4
 800e170:	dc2e      	bgt.n	800e1d0 <__gethex+0x2e8>
 800e172:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e176:	2b02      	cmp	r3, #2
 800e178:	d022      	beq.n	800e1c0 <__gethex+0x2d8>
 800e17a:	2b03      	cmp	r3, #3
 800e17c:	d024      	beq.n	800e1c8 <__gethex+0x2e0>
 800e17e:	2b01      	cmp	r3, #1
 800e180:	d115      	bne.n	800e1ae <__gethex+0x2c6>
 800e182:	42a6      	cmp	r6, r4
 800e184:	d113      	bne.n	800e1ae <__gethex+0x2c6>
 800e186:	2e01      	cmp	r6, #1
 800e188:	dc0b      	bgt.n	800e1a2 <__gethex+0x2ba>
 800e18a:	9a06      	ldr	r2, [sp, #24]
 800e18c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e190:	6013      	str	r3, [r2, #0]
 800e192:	2301      	movs	r3, #1
 800e194:	612b      	str	r3, [r5, #16]
 800e196:	f8c9 3000 	str.w	r3, [r9]
 800e19a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e19c:	2762      	movs	r7, #98	; 0x62
 800e19e:	601d      	str	r5, [r3, #0]
 800e1a0:	e72a      	b.n	800dff8 <__gethex+0x110>
 800e1a2:	1e71      	subs	r1, r6, #1
 800e1a4:	4628      	mov	r0, r5
 800e1a6:	f000 ff00 	bl	800efaa <__any_on>
 800e1aa:	2800      	cmp	r0, #0
 800e1ac:	d1ed      	bne.n	800e18a <__gethex+0x2a2>
 800e1ae:	4629      	mov	r1, r5
 800e1b0:	9802      	ldr	r0, [sp, #8]
 800e1b2:	f000 fb67 	bl	800e884 <_Bfree>
 800e1b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	6013      	str	r3, [r2, #0]
 800e1bc:	2750      	movs	r7, #80	; 0x50
 800e1be:	e71b      	b.n	800dff8 <__gethex+0x110>
 800e1c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d0e1      	beq.n	800e18a <__gethex+0x2a2>
 800e1c6:	e7f2      	b.n	800e1ae <__gethex+0x2c6>
 800e1c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d1dd      	bne.n	800e18a <__gethex+0x2a2>
 800e1ce:	e7ee      	b.n	800e1ae <__gethex+0x2c6>
 800e1d0:	1e67      	subs	r7, r4, #1
 800e1d2:	f1ba 0f00 	cmp.w	sl, #0
 800e1d6:	d131      	bne.n	800e23c <__gethex+0x354>
 800e1d8:	b127      	cbz	r7, 800e1e4 <__gethex+0x2fc>
 800e1da:	4639      	mov	r1, r7
 800e1dc:	4628      	mov	r0, r5
 800e1de:	f000 fee4 	bl	800efaa <__any_on>
 800e1e2:	4682      	mov	sl, r0
 800e1e4:	117a      	asrs	r2, r7, #5
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	f007 071f 	and.w	r7, r7, #31
 800e1ec:	fa03 f707 	lsl.w	r7, r3, r7
 800e1f0:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800e1f4:	4621      	mov	r1, r4
 800e1f6:	421f      	tst	r7, r3
 800e1f8:	4628      	mov	r0, r5
 800e1fa:	bf18      	it	ne
 800e1fc:	f04a 0a02 	orrne.w	sl, sl, #2
 800e200:	1b36      	subs	r6, r6, r4
 800e202:	f7ff fe27 	bl	800de54 <rshift>
 800e206:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800e20a:	2702      	movs	r7, #2
 800e20c:	f1ba 0f00 	cmp.w	sl, #0
 800e210:	d045      	beq.n	800e29e <__gethex+0x3b6>
 800e212:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e216:	2b02      	cmp	r3, #2
 800e218:	d015      	beq.n	800e246 <__gethex+0x35e>
 800e21a:	2b03      	cmp	r3, #3
 800e21c:	d017      	beq.n	800e24e <__gethex+0x366>
 800e21e:	2b01      	cmp	r3, #1
 800e220:	d109      	bne.n	800e236 <__gethex+0x34e>
 800e222:	f01a 0f02 	tst.w	sl, #2
 800e226:	d006      	beq.n	800e236 <__gethex+0x34e>
 800e228:	f8d9 3000 	ldr.w	r3, [r9]
 800e22c:	ea4a 0a03 	orr.w	sl, sl, r3
 800e230:	f01a 0f01 	tst.w	sl, #1
 800e234:	d10e      	bne.n	800e254 <__gethex+0x36c>
 800e236:	f047 0710 	orr.w	r7, r7, #16
 800e23a:	e030      	b.n	800e29e <__gethex+0x3b6>
 800e23c:	f04f 0a01 	mov.w	sl, #1
 800e240:	e7d0      	b.n	800e1e4 <__gethex+0x2fc>
 800e242:	2701      	movs	r7, #1
 800e244:	e7e2      	b.n	800e20c <__gethex+0x324>
 800e246:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e248:	f1c3 0301 	rsb	r3, r3, #1
 800e24c:	9315      	str	r3, [sp, #84]	; 0x54
 800e24e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e250:	2b00      	cmp	r3, #0
 800e252:	d0f0      	beq.n	800e236 <__gethex+0x34e>
 800e254:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800e258:	f105 0314 	add.w	r3, r5, #20
 800e25c:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800e260:	eb03 010a 	add.w	r1, r3, sl
 800e264:	2000      	movs	r0, #0
 800e266:	681a      	ldr	r2, [r3, #0]
 800e268:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e26c:	d01c      	beq.n	800e2a8 <__gethex+0x3c0>
 800e26e:	3201      	adds	r2, #1
 800e270:	601a      	str	r2, [r3, #0]
 800e272:	2f02      	cmp	r7, #2
 800e274:	f105 0314 	add.w	r3, r5, #20
 800e278:	d138      	bne.n	800e2ec <__gethex+0x404>
 800e27a:	f8d8 2000 	ldr.w	r2, [r8]
 800e27e:	3a01      	subs	r2, #1
 800e280:	4296      	cmp	r6, r2
 800e282:	d10a      	bne.n	800e29a <__gethex+0x3b2>
 800e284:	1171      	asrs	r1, r6, #5
 800e286:	2201      	movs	r2, #1
 800e288:	f006 061f 	and.w	r6, r6, #31
 800e28c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e290:	fa02 f606 	lsl.w	r6, r2, r6
 800e294:	421e      	tst	r6, r3
 800e296:	bf18      	it	ne
 800e298:	4617      	movne	r7, r2
 800e29a:	f047 0720 	orr.w	r7, r7, #32
 800e29e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e2a0:	601d      	str	r5, [r3, #0]
 800e2a2:	9b06      	ldr	r3, [sp, #24]
 800e2a4:	601c      	str	r4, [r3, #0]
 800e2a6:	e6a7      	b.n	800dff8 <__gethex+0x110>
 800e2a8:	f843 0b04 	str.w	r0, [r3], #4
 800e2ac:	4299      	cmp	r1, r3
 800e2ae:	d8da      	bhi.n	800e266 <__gethex+0x37e>
 800e2b0:	68ab      	ldr	r3, [r5, #8]
 800e2b2:	4599      	cmp	r9, r3
 800e2b4:	db12      	blt.n	800e2dc <__gethex+0x3f4>
 800e2b6:	6869      	ldr	r1, [r5, #4]
 800e2b8:	9802      	ldr	r0, [sp, #8]
 800e2ba:	3101      	adds	r1, #1
 800e2bc:	f000 faae 	bl	800e81c <_Balloc>
 800e2c0:	692a      	ldr	r2, [r5, #16]
 800e2c2:	3202      	adds	r2, #2
 800e2c4:	f105 010c 	add.w	r1, r5, #12
 800e2c8:	4683      	mov	fp, r0
 800e2ca:	0092      	lsls	r2, r2, #2
 800e2cc:	300c      	adds	r0, #12
 800e2ce:	f7fb fd87 	bl	8009de0 <memcpy>
 800e2d2:	4629      	mov	r1, r5
 800e2d4:	9802      	ldr	r0, [sp, #8]
 800e2d6:	f000 fad5 	bl	800e884 <_Bfree>
 800e2da:	465d      	mov	r5, fp
 800e2dc:	692b      	ldr	r3, [r5, #16]
 800e2de:	1c5a      	adds	r2, r3, #1
 800e2e0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e2e4:	612a      	str	r2, [r5, #16]
 800e2e6:	2201      	movs	r2, #1
 800e2e8:	615a      	str	r2, [r3, #20]
 800e2ea:	e7c2      	b.n	800e272 <__gethex+0x38a>
 800e2ec:	692a      	ldr	r2, [r5, #16]
 800e2ee:	4591      	cmp	r9, r2
 800e2f0:	da0b      	bge.n	800e30a <__gethex+0x422>
 800e2f2:	2101      	movs	r1, #1
 800e2f4:	4628      	mov	r0, r5
 800e2f6:	f7ff fdad 	bl	800de54 <rshift>
 800e2fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e2fe:	3401      	adds	r4, #1
 800e300:	429c      	cmp	r4, r3
 800e302:	f73f aedc 	bgt.w	800e0be <__gethex+0x1d6>
 800e306:	2701      	movs	r7, #1
 800e308:	e7c7      	b.n	800e29a <__gethex+0x3b2>
 800e30a:	f016 061f 	ands.w	r6, r6, #31
 800e30e:	d0fa      	beq.n	800e306 <__gethex+0x41e>
 800e310:	449a      	add	sl, r3
 800e312:	f1c6 0620 	rsb	r6, r6, #32
 800e316:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800e31a:	f000 fb43 	bl	800e9a4 <__hi0bits>
 800e31e:	42b0      	cmp	r0, r6
 800e320:	dbe7      	blt.n	800e2f2 <__gethex+0x40a>
 800e322:	e7f0      	b.n	800e306 <__gethex+0x41e>

0800e324 <L_shift>:
 800e324:	f1c2 0208 	rsb	r2, r2, #8
 800e328:	0092      	lsls	r2, r2, #2
 800e32a:	b570      	push	{r4, r5, r6, lr}
 800e32c:	f1c2 0620 	rsb	r6, r2, #32
 800e330:	6843      	ldr	r3, [r0, #4]
 800e332:	6804      	ldr	r4, [r0, #0]
 800e334:	fa03 f506 	lsl.w	r5, r3, r6
 800e338:	432c      	orrs	r4, r5
 800e33a:	40d3      	lsrs	r3, r2
 800e33c:	6004      	str	r4, [r0, #0]
 800e33e:	f840 3f04 	str.w	r3, [r0, #4]!
 800e342:	4288      	cmp	r0, r1
 800e344:	d3f4      	bcc.n	800e330 <L_shift+0xc>
 800e346:	bd70      	pop	{r4, r5, r6, pc}

0800e348 <__match>:
 800e348:	b530      	push	{r4, r5, lr}
 800e34a:	6803      	ldr	r3, [r0, #0]
 800e34c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e350:	3301      	adds	r3, #1
 800e352:	b914      	cbnz	r4, 800e35a <__match+0x12>
 800e354:	6003      	str	r3, [r0, #0]
 800e356:	2001      	movs	r0, #1
 800e358:	bd30      	pop	{r4, r5, pc}
 800e35a:	781a      	ldrb	r2, [r3, #0]
 800e35c:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e360:	2d19      	cmp	r5, #25
 800e362:	bf98      	it	ls
 800e364:	3220      	addls	r2, #32
 800e366:	42a2      	cmp	r2, r4
 800e368:	d0f0      	beq.n	800e34c <__match+0x4>
 800e36a:	2000      	movs	r0, #0
 800e36c:	bd30      	pop	{r4, r5, pc}

0800e36e <__hexnan>:
 800e36e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e372:	680b      	ldr	r3, [r1, #0]
 800e374:	6801      	ldr	r1, [r0, #0]
 800e376:	115f      	asrs	r7, r3, #5
 800e378:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800e37c:	f013 031f 	ands.w	r3, r3, #31
 800e380:	b087      	sub	sp, #28
 800e382:	bf18      	it	ne
 800e384:	3704      	addne	r7, #4
 800e386:	2500      	movs	r5, #0
 800e388:	1f3e      	subs	r6, r7, #4
 800e38a:	4682      	mov	sl, r0
 800e38c:	4690      	mov	r8, r2
 800e38e:	9302      	str	r3, [sp, #8]
 800e390:	f847 5c04 	str.w	r5, [r7, #-4]
 800e394:	46b1      	mov	r9, r6
 800e396:	4634      	mov	r4, r6
 800e398:	9501      	str	r5, [sp, #4]
 800e39a:	46ab      	mov	fp, r5
 800e39c:	784a      	ldrb	r2, [r1, #1]
 800e39e:	1c4b      	adds	r3, r1, #1
 800e3a0:	9303      	str	r3, [sp, #12]
 800e3a2:	b342      	cbz	r2, 800e3f6 <__hexnan+0x88>
 800e3a4:	4610      	mov	r0, r2
 800e3a6:	9105      	str	r1, [sp, #20]
 800e3a8:	9204      	str	r2, [sp, #16]
 800e3aa:	f7ff fd88 	bl	800debe <__hexdig_fun>
 800e3ae:	2800      	cmp	r0, #0
 800e3b0:	d143      	bne.n	800e43a <__hexnan+0xcc>
 800e3b2:	9a04      	ldr	r2, [sp, #16]
 800e3b4:	9905      	ldr	r1, [sp, #20]
 800e3b6:	2a20      	cmp	r2, #32
 800e3b8:	d818      	bhi.n	800e3ec <__hexnan+0x7e>
 800e3ba:	9b01      	ldr	r3, [sp, #4]
 800e3bc:	459b      	cmp	fp, r3
 800e3be:	dd13      	ble.n	800e3e8 <__hexnan+0x7a>
 800e3c0:	454c      	cmp	r4, r9
 800e3c2:	d206      	bcs.n	800e3d2 <__hexnan+0x64>
 800e3c4:	2d07      	cmp	r5, #7
 800e3c6:	dc04      	bgt.n	800e3d2 <__hexnan+0x64>
 800e3c8:	462a      	mov	r2, r5
 800e3ca:	4649      	mov	r1, r9
 800e3cc:	4620      	mov	r0, r4
 800e3ce:	f7ff ffa9 	bl	800e324 <L_shift>
 800e3d2:	4544      	cmp	r4, r8
 800e3d4:	d944      	bls.n	800e460 <__hexnan+0xf2>
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	f1a4 0904 	sub.w	r9, r4, #4
 800e3dc:	f844 3c04 	str.w	r3, [r4, #-4]
 800e3e0:	f8cd b004 	str.w	fp, [sp, #4]
 800e3e4:	464c      	mov	r4, r9
 800e3e6:	461d      	mov	r5, r3
 800e3e8:	9903      	ldr	r1, [sp, #12]
 800e3ea:	e7d7      	b.n	800e39c <__hexnan+0x2e>
 800e3ec:	2a29      	cmp	r2, #41	; 0x29
 800e3ee:	d14a      	bne.n	800e486 <__hexnan+0x118>
 800e3f0:	3102      	adds	r1, #2
 800e3f2:	f8ca 1000 	str.w	r1, [sl]
 800e3f6:	f1bb 0f00 	cmp.w	fp, #0
 800e3fa:	d044      	beq.n	800e486 <__hexnan+0x118>
 800e3fc:	454c      	cmp	r4, r9
 800e3fe:	d206      	bcs.n	800e40e <__hexnan+0xa0>
 800e400:	2d07      	cmp	r5, #7
 800e402:	dc04      	bgt.n	800e40e <__hexnan+0xa0>
 800e404:	462a      	mov	r2, r5
 800e406:	4649      	mov	r1, r9
 800e408:	4620      	mov	r0, r4
 800e40a:	f7ff ff8b 	bl	800e324 <L_shift>
 800e40e:	4544      	cmp	r4, r8
 800e410:	d928      	bls.n	800e464 <__hexnan+0xf6>
 800e412:	4643      	mov	r3, r8
 800e414:	f854 2b04 	ldr.w	r2, [r4], #4
 800e418:	f843 2b04 	str.w	r2, [r3], #4
 800e41c:	42a6      	cmp	r6, r4
 800e41e:	d2f9      	bcs.n	800e414 <__hexnan+0xa6>
 800e420:	2200      	movs	r2, #0
 800e422:	f843 2b04 	str.w	r2, [r3], #4
 800e426:	429e      	cmp	r6, r3
 800e428:	d2fb      	bcs.n	800e422 <__hexnan+0xb4>
 800e42a:	6833      	ldr	r3, [r6, #0]
 800e42c:	b91b      	cbnz	r3, 800e436 <__hexnan+0xc8>
 800e42e:	4546      	cmp	r6, r8
 800e430:	d127      	bne.n	800e482 <__hexnan+0x114>
 800e432:	2301      	movs	r3, #1
 800e434:	6033      	str	r3, [r6, #0]
 800e436:	2005      	movs	r0, #5
 800e438:	e026      	b.n	800e488 <__hexnan+0x11a>
 800e43a:	3501      	adds	r5, #1
 800e43c:	2d08      	cmp	r5, #8
 800e43e:	f10b 0b01 	add.w	fp, fp, #1
 800e442:	dd06      	ble.n	800e452 <__hexnan+0xe4>
 800e444:	4544      	cmp	r4, r8
 800e446:	d9cf      	bls.n	800e3e8 <__hexnan+0x7a>
 800e448:	2300      	movs	r3, #0
 800e44a:	f844 3c04 	str.w	r3, [r4, #-4]
 800e44e:	2501      	movs	r5, #1
 800e450:	3c04      	subs	r4, #4
 800e452:	6822      	ldr	r2, [r4, #0]
 800e454:	f000 000f 	and.w	r0, r0, #15
 800e458:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e45c:	6020      	str	r0, [r4, #0]
 800e45e:	e7c3      	b.n	800e3e8 <__hexnan+0x7a>
 800e460:	2508      	movs	r5, #8
 800e462:	e7c1      	b.n	800e3e8 <__hexnan+0x7a>
 800e464:	9b02      	ldr	r3, [sp, #8]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d0df      	beq.n	800e42a <__hexnan+0xbc>
 800e46a:	f04f 32ff 	mov.w	r2, #4294967295
 800e46e:	f1c3 0320 	rsb	r3, r3, #32
 800e472:	fa22 f303 	lsr.w	r3, r2, r3
 800e476:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800e47a:	401a      	ands	r2, r3
 800e47c:	f847 2c04 	str.w	r2, [r7, #-4]
 800e480:	e7d3      	b.n	800e42a <__hexnan+0xbc>
 800e482:	3e04      	subs	r6, #4
 800e484:	e7d1      	b.n	800e42a <__hexnan+0xbc>
 800e486:	2004      	movs	r0, #4
 800e488:	b007      	add	sp, #28
 800e48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800e490 <_findenv_r>:
 800e490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e494:	4606      	mov	r6, r0
 800e496:	468a      	mov	sl, r1
 800e498:	4617      	mov	r7, r2
 800e49a:	f001 fd43 	bl	800ff24 <__env_lock>
 800e49e:	4b1b      	ldr	r3, [pc, #108]	; (800e50c <_findenv_r+0x7c>)
 800e4a0:	f8d3 8000 	ldr.w	r8, [r3]
 800e4a4:	4699      	mov	r9, r3
 800e4a6:	f1b8 0f00 	cmp.w	r8, #0
 800e4aa:	d007      	beq.n	800e4bc <_findenv_r+0x2c>
 800e4ac:	4654      	mov	r4, sl
 800e4ae:	4623      	mov	r3, r4
 800e4b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4b4:	b332      	cbz	r2, 800e504 <_findenv_r+0x74>
 800e4b6:	2a3d      	cmp	r2, #61	; 0x3d
 800e4b8:	461c      	mov	r4, r3
 800e4ba:	d1f8      	bne.n	800e4ae <_findenv_r+0x1e>
 800e4bc:	4630      	mov	r0, r6
 800e4be:	f001 fd37 	bl	800ff30 <__env_unlock>
 800e4c2:	2000      	movs	r0, #0
 800e4c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4c8:	f108 0804 	add.w	r8, r8, #4
 800e4cc:	f8d8 0000 	ldr.w	r0, [r8]
 800e4d0:	2800      	cmp	r0, #0
 800e4d2:	d0f3      	beq.n	800e4bc <_findenv_r+0x2c>
 800e4d4:	4622      	mov	r2, r4
 800e4d6:	4651      	mov	r1, sl
 800e4d8:	f000 ff7f 	bl	800f3da <strncmp>
 800e4dc:	2800      	cmp	r0, #0
 800e4de:	d1f3      	bne.n	800e4c8 <_findenv_r+0x38>
 800e4e0:	f8d8 3000 	ldr.w	r3, [r8]
 800e4e4:	191d      	adds	r5, r3, r4
 800e4e6:	5d1b      	ldrb	r3, [r3, r4]
 800e4e8:	2b3d      	cmp	r3, #61	; 0x3d
 800e4ea:	d1ed      	bne.n	800e4c8 <_findenv_r+0x38>
 800e4ec:	f8d9 3000 	ldr.w	r3, [r9]
 800e4f0:	eba8 0303 	sub.w	r3, r8, r3
 800e4f4:	109b      	asrs	r3, r3, #2
 800e4f6:	4630      	mov	r0, r6
 800e4f8:	603b      	str	r3, [r7, #0]
 800e4fa:	f001 fd19 	bl	800ff30 <__env_unlock>
 800e4fe:	1c68      	adds	r0, r5, #1
 800e500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e504:	eba4 040a 	sub.w	r4, r4, sl
 800e508:	e7e0      	b.n	800e4cc <_findenv_r+0x3c>
 800e50a:	bf00      	nop
 800e50c:	20000008 	.word	0x20000008

0800e510 <_getenv_r>:
 800e510:	b507      	push	{r0, r1, r2, lr}
 800e512:	aa01      	add	r2, sp, #4
 800e514:	f7ff ffbc 	bl	800e490 <_findenv_r>
 800e518:	b003      	add	sp, #12
 800e51a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800e520 <_gettimeofday_r>:
 800e520:	b538      	push	{r3, r4, r5, lr}
 800e522:	4c07      	ldr	r4, [pc, #28]	; (800e540 <_gettimeofday_r+0x20>)
 800e524:	2300      	movs	r3, #0
 800e526:	4605      	mov	r5, r0
 800e528:	4608      	mov	r0, r1
 800e52a:	4611      	mov	r1, r2
 800e52c:	6023      	str	r3, [r4, #0]
 800e52e:	f002 f90b 	bl	8010748 <_gettimeofday>
 800e532:	1c43      	adds	r3, r0, #1
 800e534:	d102      	bne.n	800e53c <_gettimeofday_r+0x1c>
 800e536:	6823      	ldr	r3, [r4, #0]
 800e538:	b103      	cbz	r3, 800e53c <_gettimeofday_r+0x1c>
 800e53a:	602b      	str	r3, [r5, #0]
 800e53c:	bd38      	pop	{r3, r4, r5, pc}
 800e53e:	bf00      	nop
 800e540:	200021fc 	.word	0x200021fc

0800e544 <__gettzinfo>:
 800e544:	4800      	ldr	r0, [pc, #0]	; (800e548 <__gettzinfo+0x4>)
 800e546:	4770      	bx	lr
 800e548:	2000051c 	.word	0x2000051c

0800e54c <gmtime_r>:
 800e54c:	6802      	ldr	r2, [r0, #0]
 800e54e:	4848      	ldr	r0, [pc, #288]	; (800e670 <gmtime_r+0x124>)
 800e550:	fb92 f3f0 	sdiv	r3, r2, r0
 800e554:	fb00 2013 	mls	r0, r0, r3, r2
 800e558:	2800      	cmp	r0, #0
 800e55a:	bfb8      	it	lt
 800e55c:	f500 30a8 	addlt.w	r0, r0, #86016	; 0x15000
 800e560:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e562:	bfb8      	it	lt
 800e564:	f500 70c0 	addlt.w	r0, r0, #384	; 0x180
 800e568:	f44f 6461 	mov.w	r4, #3600	; 0xe10
 800e56c:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 800e570:	fb90 f2f4 	sdiv	r2, r0, r4
 800e574:	fb04 0012 	mls	r0, r4, r2, r0
 800e578:	f04f 043c 	mov.w	r4, #60	; 0x3c
 800e57c:	bfac      	ite	ge
 800e57e:	f603 236c 	addwge	r3, r3, #2668	; 0xa6c
 800e582:	f603 236b 	addwlt	r3, r3, #2667	; 0xa6b
 800e586:	608a      	str	r2, [r1, #8]
 800e588:	fb90 f2f4 	sdiv	r2, r0, r4
 800e58c:	fb04 0012 	mls	r0, r4, r2, r0
 800e590:	604a      	str	r2, [r1, #4]
 800e592:	6008      	str	r0, [r1, #0]
 800e594:	2207      	movs	r2, #7
 800e596:	1cd8      	adds	r0, r3, #3
 800e598:	fb90 f2f2 	sdiv	r2, r0, r2
 800e59c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800e5a0:	1a82      	subs	r2, r0, r2
 800e5a2:	618a      	str	r2, [r1, #24]
 800e5a4:	4a33      	ldr	r2, [pc, #204]	; (800e674 <gmtime_r+0x128>)
 800e5a6:	4c34      	ldr	r4, [pc, #208]	; (800e678 <gmtime_r+0x12c>)
 800e5a8:	fb93 f4f4 	sdiv	r4, r3, r4
 800e5ac:	fb02 3304 	mla	r3, r2, r4, r3
 800e5b0:	f648 60ac 	movw	r0, #36524	; 0x8eac
 800e5b4:	fbb3 f0f0 	udiv	r0, r3, r0
 800e5b8:	4418      	add	r0, r3
 800e5ba:	f240 57b4 	movw	r7, #1460	; 0x5b4
 800e5be:	fbb3 f2f7 	udiv	r2, r3, r7
 800e5c2:	1a80      	subs	r0, r0, r2
 800e5c4:	4a2d      	ldr	r2, [pc, #180]	; (800e67c <gmtime_r+0x130>)
 800e5c6:	fbb3 f2f2 	udiv	r2, r3, r2
 800e5ca:	1a82      	subs	r2, r0, r2
 800e5cc:	f648 6094 	movw	r0, #36500	; 0x8e94
 800e5d0:	fbb2 f0f0 	udiv	r0, r2, r0
 800e5d4:	4403      	add	r3, r0
 800e5d6:	f240 166d 	movw	r6, #365	; 0x16d
 800e5da:	fbb2 f5f6 	udiv	r5, r2, r6
 800e5de:	fbb2 f2f7 	udiv	r2, r2, r7
 800e5e2:	1a9a      	subs	r2, r3, r2
 800e5e4:	fb06 2315 	mls	r3, r6, r5, r2
 800e5e8:	2099      	movs	r0, #153	; 0x99
 800e5ea:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800e5ee:	1c5e      	adds	r6, r3, #1
 800e5f0:	3202      	adds	r2, #2
 800e5f2:	fbb2 f2f0 	udiv	r2, r2, r0
 800e5f6:	2a0a      	cmp	r2, #10
 800e5f8:	fb00 f002 	mul.w	r0, r0, r2
 800e5fc:	f100 0002 	add.w	r0, r0, #2
 800e600:	f04f 0705 	mov.w	r7, #5
 800e604:	fbb0 f0f7 	udiv	r0, r0, r7
 800e608:	eba6 0000 	sub.w	r0, r6, r0
 800e60c:	bf34      	ite	cc
 800e60e:	2602      	movcc	r6, #2
 800e610:	f06f 0609 	mvncs.w	r6, #9
 800e614:	4416      	add	r6, r2
 800e616:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800e61a:	fb02 5404 	mla	r4, r2, r4, r5
 800e61e:	2e01      	cmp	r6, #1
 800e620:	bf98      	it	ls
 800e622:	3401      	addls	r4, #1
 800e624:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800e628:	d30b      	bcc.n	800e642 <gmtime_r+0xf6>
 800e62a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800e62e:	61cb      	str	r3, [r1, #28]
 800e630:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
 800e634:	2300      	movs	r3, #0
 800e636:	60c8      	str	r0, [r1, #12]
 800e638:	614c      	str	r4, [r1, #20]
 800e63a:	610e      	str	r6, [r1, #16]
 800e63c:	620b      	str	r3, [r1, #32]
 800e63e:	4608      	mov	r0, r1
 800e640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e642:	07aa      	lsls	r2, r5, #30
 800e644:	d105      	bne.n	800e652 <gmtime_r+0x106>
 800e646:	2764      	movs	r7, #100	; 0x64
 800e648:	fbb5 f2f7 	udiv	r2, r5, r7
 800e64c:	fb07 5212 	mls	r2, r7, r2, r5
 800e650:	b95a      	cbnz	r2, 800e66a <gmtime_r+0x11e>
 800e652:	f44f 77c8 	mov.w	r7, #400	; 0x190
 800e656:	fbb5 f2f7 	udiv	r2, r5, r7
 800e65a:	fb07 5212 	mls	r2, r7, r2, r5
 800e65e:	fab2 f282 	clz	r2, r2
 800e662:	0952      	lsrs	r2, r2, #5
 800e664:	333b      	adds	r3, #59	; 0x3b
 800e666:	4413      	add	r3, r2
 800e668:	e7e1      	b.n	800e62e <gmtime_r+0xe2>
 800e66a:	2201      	movs	r2, #1
 800e66c:	e7fa      	b.n	800e664 <gmtime_r+0x118>
 800e66e:	bf00      	nop
 800e670:	00015180 	.word	0x00015180
 800e674:	fffdc54f 	.word	0xfffdc54f
 800e678:	00023ab1 	.word	0x00023ab1
 800e67c:	00023ab0 	.word	0x00023ab0

0800e680 <__locale_mb_cur_max>:
 800e680:	4b04      	ldr	r3, [pc, #16]	; (800e694 <__locale_mb_cur_max+0x14>)
 800e682:	4a05      	ldr	r2, [pc, #20]	; (800e698 <__locale_mb_cur_max+0x18>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	6a1b      	ldr	r3, [r3, #32]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	bf08      	it	eq
 800e68c:	4613      	moveq	r3, r2
 800e68e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800e692:	4770      	bx	lr
 800e694:	20000010 	.word	0x20000010
 800e698:	2000055c 	.word	0x2000055c

0800e69c <__locale_ctype_ptr_l>:
 800e69c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800e6a0:	4770      	bx	lr
	...

0800e6a4 <__locale_ctype_ptr>:
 800e6a4:	4b04      	ldr	r3, [pc, #16]	; (800e6b8 <__locale_ctype_ptr+0x14>)
 800e6a6:	4a05      	ldr	r2, [pc, #20]	; (800e6bc <__locale_ctype_ptr+0x18>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	6a1b      	ldr	r3, [r3, #32]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	bf08      	it	eq
 800e6b0:	4613      	moveq	r3, r2
 800e6b2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800e6b6:	4770      	bx	lr
 800e6b8:	20000010 	.word	0x20000010
 800e6bc:	2000055c 	.word	0x2000055c

0800e6c0 <__localeconv_l>:
 800e6c0:	30f0      	adds	r0, #240	; 0xf0
 800e6c2:	4770      	bx	lr

0800e6c4 <_localeconv_r>:
 800e6c4:	4b04      	ldr	r3, [pc, #16]	; (800e6d8 <_localeconv_r+0x14>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	6a18      	ldr	r0, [r3, #32]
 800e6ca:	4b04      	ldr	r3, [pc, #16]	; (800e6dc <_localeconv_r+0x18>)
 800e6cc:	2800      	cmp	r0, #0
 800e6ce:	bf08      	it	eq
 800e6d0:	4618      	moveq	r0, r3
 800e6d2:	30f0      	adds	r0, #240	; 0xf0
 800e6d4:	4770      	bx	lr
 800e6d6:	bf00      	nop
 800e6d8:	20000010 	.word	0x20000010
 800e6dc:	2000055c 	.word	0x2000055c

0800e6e0 <__retarget_lock_init_recursive>:
 800e6e0:	4770      	bx	lr

0800e6e2 <__retarget_lock_close_recursive>:
 800e6e2:	4770      	bx	lr

0800e6e4 <__retarget_lock_acquire>:
 800e6e4:	4770      	bx	lr

0800e6e6 <__retarget_lock_acquire_recursive>:
 800e6e6:	4770      	bx	lr

0800e6e8 <__retarget_lock_release>:
 800e6e8:	4770      	bx	lr

0800e6ea <__retarget_lock_release_recursive>:
 800e6ea:	4770      	bx	lr

0800e6ec <__swhatbuf_r>:
 800e6ec:	b570      	push	{r4, r5, r6, lr}
 800e6ee:	460e      	mov	r6, r1
 800e6f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6f4:	2900      	cmp	r1, #0
 800e6f6:	b090      	sub	sp, #64	; 0x40
 800e6f8:	4614      	mov	r4, r2
 800e6fa:	461d      	mov	r5, r3
 800e6fc:	da09      	bge.n	800e712 <__swhatbuf_r+0x26>
 800e6fe:	89b3      	ldrh	r3, [r6, #12]
 800e700:	2200      	movs	r2, #0
 800e702:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800e706:	602a      	str	r2, [r5, #0]
 800e708:	d116      	bne.n	800e738 <__swhatbuf_r+0x4c>
 800e70a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e70e:	6023      	str	r3, [r4, #0]
 800e710:	e015      	b.n	800e73e <__swhatbuf_r+0x52>
 800e712:	aa01      	add	r2, sp, #4
 800e714:	f001 fce8 	bl	80100e8 <_fstat_r>
 800e718:	2800      	cmp	r0, #0
 800e71a:	dbf0      	blt.n	800e6fe <__swhatbuf_r+0x12>
 800e71c:	9a02      	ldr	r2, [sp, #8]
 800e71e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e722:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e726:	425a      	negs	r2, r3
 800e728:	415a      	adcs	r2, r3
 800e72a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e72e:	602a      	str	r2, [r5, #0]
 800e730:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800e734:	6023      	str	r3, [r4, #0]
 800e736:	e002      	b.n	800e73e <__swhatbuf_r+0x52>
 800e738:	2340      	movs	r3, #64	; 0x40
 800e73a:	6023      	str	r3, [r4, #0]
 800e73c:	4610      	mov	r0, r2
 800e73e:	b010      	add	sp, #64	; 0x40
 800e740:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e744 <__smakebuf_r>:
 800e744:	898b      	ldrh	r3, [r1, #12]
 800e746:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e748:	079d      	lsls	r5, r3, #30
 800e74a:	4606      	mov	r6, r0
 800e74c:	460c      	mov	r4, r1
 800e74e:	d507      	bpl.n	800e760 <__smakebuf_r+0x1c>
 800e750:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e754:	6023      	str	r3, [r4, #0]
 800e756:	6123      	str	r3, [r4, #16]
 800e758:	2301      	movs	r3, #1
 800e75a:	6163      	str	r3, [r4, #20]
 800e75c:	b002      	add	sp, #8
 800e75e:	bd70      	pop	{r4, r5, r6, pc}
 800e760:	ab01      	add	r3, sp, #4
 800e762:	466a      	mov	r2, sp
 800e764:	f7ff ffc2 	bl	800e6ec <__swhatbuf_r>
 800e768:	9900      	ldr	r1, [sp, #0]
 800e76a:	4605      	mov	r5, r0
 800e76c:	4630      	mov	r0, r6
 800e76e:	f7fb f929 	bl	80099c4 <_malloc_r>
 800e772:	b948      	cbnz	r0, 800e788 <__smakebuf_r+0x44>
 800e774:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e778:	059a      	lsls	r2, r3, #22
 800e77a:	d4ef      	bmi.n	800e75c <__smakebuf_r+0x18>
 800e77c:	f023 0303 	bic.w	r3, r3, #3
 800e780:	f043 0302 	orr.w	r3, r3, #2
 800e784:	81a3      	strh	r3, [r4, #12]
 800e786:	e7e3      	b.n	800e750 <__smakebuf_r+0xc>
 800e788:	4b0d      	ldr	r3, [pc, #52]	; (800e7c0 <__smakebuf_r+0x7c>)
 800e78a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e78c:	89a3      	ldrh	r3, [r4, #12]
 800e78e:	6020      	str	r0, [r4, #0]
 800e790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e794:	81a3      	strh	r3, [r4, #12]
 800e796:	9b00      	ldr	r3, [sp, #0]
 800e798:	6163      	str	r3, [r4, #20]
 800e79a:	9b01      	ldr	r3, [sp, #4]
 800e79c:	6120      	str	r0, [r4, #16]
 800e79e:	b15b      	cbz	r3, 800e7b8 <__smakebuf_r+0x74>
 800e7a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7a4:	4630      	mov	r0, r6
 800e7a6:	f001 fcb1 	bl	801010c <_isatty_r>
 800e7aa:	b128      	cbz	r0, 800e7b8 <__smakebuf_r+0x74>
 800e7ac:	89a3      	ldrh	r3, [r4, #12]
 800e7ae:	f023 0303 	bic.w	r3, r3, #3
 800e7b2:	f043 0301 	orr.w	r3, r3, #1
 800e7b6:	81a3      	strh	r3, [r4, #12]
 800e7b8:	89a3      	ldrh	r3, [r4, #12]
 800e7ba:	431d      	orrs	r5, r3
 800e7bc:	81a5      	strh	r5, [r4, #12]
 800e7be:	e7cd      	b.n	800e75c <__smakebuf_r+0x18>
 800e7c0:	0800d7a9 	.word	0x0800d7a9

0800e7c4 <__ascii_mbtowc>:
 800e7c4:	b082      	sub	sp, #8
 800e7c6:	b901      	cbnz	r1, 800e7ca <__ascii_mbtowc+0x6>
 800e7c8:	a901      	add	r1, sp, #4
 800e7ca:	b142      	cbz	r2, 800e7de <__ascii_mbtowc+0x1a>
 800e7cc:	b14b      	cbz	r3, 800e7e2 <__ascii_mbtowc+0x1e>
 800e7ce:	7813      	ldrb	r3, [r2, #0]
 800e7d0:	600b      	str	r3, [r1, #0]
 800e7d2:	7812      	ldrb	r2, [r2, #0]
 800e7d4:	1c10      	adds	r0, r2, #0
 800e7d6:	bf18      	it	ne
 800e7d8:	2001      	movne	r0, #1
 800e7da:	b002      	add	sp, #8
 800e7dc:	4770      	bx	lr
 800e7de:	4610      	mov	r0, r2
 800e7e0:	e7fb      	b.n	800e7da <__ascii_mbtowc+0x16>
 800e7e2:	f06f 0001 	mvn.w	r0, #1
 800e7e6:	e7f8      	b.n	800e7da <__ascii_mbtowc+0x16>

0800e7e8 <memmove>:
 800e7e8:	4288      	cmp	r0, r1
 800e7ea:	b510      	push	{r4, lr}
 800e7ec:	eb01 0302 	add.w	r3, r1, r2
 800e7f0:	d803      	bhi.n	800e7fa <memmove+0x12>
 800e7f2:	1e42      	subs	r2, r0, #1
 800e7f4:	4299      	cmp	r1, r3
 800e7f6:	d10c      	bne.n	800e812 <memmove+0x2a>
 800e7f8:	bd10      	pop	{r4, pc}
 800e7fa:	4298      	cmp	r0, r3
 800e7fc:	d2f9      	bcs.n	800e7f2 <memmove+0xa>
 800e7fe:	1881      	adds	r1, r0, r2
 800e800:	1ad2      	subs	r2, r2, r3
 800e802:	42d3      	cmn	r3, r2
 800e804:	d100      	bne.n	800e808 <memmove+0x20>
 800e806:	bd10      	pop	{r4, pc}
 800e808:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e80c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e810:	e7f7      	b.n	800e802 <memmove+0x1a>
 800e812:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e816:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e81a:	e7eb      	b.n	800e7f4 <memmove+0xc>

0800e81c <_Balloc>:
 800e81c:	b570      	push	{r4, r5, r6, lr}
 800e81e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e820:	4604      	mov	r4, r0
 800e822:	460e      	mov	r6, r1
 800e824:	b93d      	cbnz	r5, 800e836 <_Balloc+0x1a>
 800e826:	2010      	movs	r0, #16
 800e828:	f7fb f8bc 	bl	80099a4 <malloc>
 800e82c:	6260      	str	r0, [r4, #36]	; 0x24
 800e82e:	6045      	str	r5, [r0, #4]
 800e830:	6085      	str	r5, [r0, #8]
 800e832:	6005      	str	r5, [r0, #0]
 800e834:	60c5      	str	r5, [r0, #12]
 800e836:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e838:	68eb      	ldr	r3, [r5, #12]
 800e83a:	b183      	cbz	r3, 800e85e <_Balloc+0x42>
 800e83c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e83e:	68db      	ldr	r3, [r3, #12]
 800e840:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e844:	b9b8      	cbnz	r0, 800e876 <_Balloc+0x5a>
 800e846:	2101      	movs	r1, #1
 800e848:	fa01 f506 	lsl.w	r5, r1, r6
 800e84c:	1d6a      	adds	r2, r5, #5
 800e84e:	0092      	lsls	r2, r2, #2
 800e850:	4620      	mov	r0, r4
 800e852:	f001 fb29 	bl	800fea8 <_calloc_r>
 800e856:	b160      	cbz	r0, 800e872 <_Balloc+0x56>
 800e858:	6046      	str	r6, [r0, #4]
 800e85a:	6085      	str	r5, [r0, #8]
 800e85c:	e00e      	b.n	800e87c <_Balloc+0x60>
 800e85e:	2221      	movs	r2, #33	; 0x21
 800e860:	2104      	movs	r1, #4
 800e862:	4620      	mov	r0, r4
 800e864:	f001 fb20 	bl	800fea8 <_calloc_r>
 800e868:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e86a:	60e8      	str	r0, [r5, #12]
 800e86c:	68db      	ldr	r3, [r3, #12]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d1e4      	bne.n	800e83c <_Balloc+0x20>
 800e872:	2000      	movs	r0, #0
 800e874:	bd70      	pop	{r4, r5, r6, pc}
 800e876:	6802      	ldr	r2, [r0, #0]
 800e878:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800e87c:	2300      	movs	r3, #0
 800e87e:	6103      	str	r3, [r0, #16]
 800e880:	60c3      	str	r3, [r0, #12]
 800e882:	bd70      	pop	{r4, r5, r6, pc}

0800e884 <_Bfree>:
 800e884:	b570      	push	{r4, r5, r6, lr}
 800e886:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e888:	4606      	mov	r6, r0
 800e88a:	460d      	mov	r5, r1
 800e88c:	b93c      	cbnz	r4, 800e89e <_Bfree+0x1a>
 800e88e:	2010      	movs	r0, #16
 800e890:	f7fb f888 	bl	80099a4 <malloc>
 800e894:	6270      	str	r0, [r6, #36]	; 0x24
 800e896:	6044      	str	r4, [r0, #4]
 800e898:	6084      	str	r4, [r0, #8]
 800e89a:	6004      	str	r4, [r0, #0]
 800e89c:	60c4      	str	r4, [r0, #12]
 800e89e:	b13d      	cbz	r5, 800e8b0 <_Bfree+0x2c>
 800e8a0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e8a2:	686a      	ldr	r2, [r5, #4]
 800e8a4:	68db      	ldr	r3, [r3, #12]
 800e8a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e8aa:	6029      	str	r1, [r5, #0]
 800e8ac:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e8b0:	bd70      	pop	{r4, r5, r6, pc}

0800e8b2 <__multadd>:
 800e8b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8b6:	690d      	ldr	r5, [r1, #16]
 800e8b8:	461f      	mov	r7, r3
 800e8ba:	4606      	mov	r6, r0
 800e8bc:	460c      	mov	r4, r1
 800e8be:	f101 0e14 	add.w	lr, r1, #20
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	f8de 0000 	ldr.w	r0, [lr]
 800e8c8:	b281      	uxth	r1, r0
 800e8ca:	fb02 7101 	mla	r1, r2, r1, r7
 800e8ce:	0c0f      	lsrs	r7, r1, #16
 800e8d0:	0c00      	lsrs	r0, r0, #16
 800e8d2:	fb02 7000 	mla	r0, r2, r0, r7
 800e8d6:	b289      	uxth	r1, r1
 800e8d8:	3301      	adds	r3, #1
 800e8da:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e8de:	429d      	cmp	r5, r3
 800e8e0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e8e4:	f84e 1b04 	str.w	r1, [lr], #4
 800e8e8:	dcec      	bgt.n	800e8c4 <__multadd+0x12>
 800e8ea:	b1d7      	cbz	r7, 800e922 <__multadd+0x70>
 800e8ec:	68a3      	ldr	r3, [r4, #8]
 800e8ee:	429d      	cmp	r5, r3
 800e8f0:	db12      	blt.n	800e918 <__multadd+0x66>
 800e8f2:	6861      	ldr	r1, [r4, #4]
 800e8f4:	4630      	mov	r0, r6
 800e8f6:	3101      	adds	r1, #1
 800e8f8:	f7ff ff90 	bl	800e81c <_Balloc>
 800e8fc:	6922      	ldr	r2, [r4, #16]
 800e8fe:	3202      	adds	r2, #2
 800e900:	f104 010c 	add.w	r1, r4, #12
 800e904:	4680      	mov	r8, r0
 800e906:	0092      	lsls	r2, r2, #2
 800e908:	300c      	adds	r0, #12
 800e90a:	f7fb fa69 	bl	8009de0 <memcpy>
 800e90e:	4621      	mov	r1, r4
 800e910:	4630      	mov	r0, r6
 800e912:	f7ff ffb7 	bl	800e884 <_Bfree>
 800e916:	4644      	mov	r4, r8
 800e918:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e91c:	3501      	adds	r5, #1
 800e91e:	615f      	str	r7, [r3, #20]
 800e920:	6125      	str	r5, [r4, #16]
 800e922:	4620      	mov	r0, r4
 800e924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e928 <__s2b>:
 800e928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e92c:	460c      	mov	r4, r1
 800e92e:	4615      	mov	r5, r2
 800e930:	461f      	mov	r7, r3
 800e932:	2209      	movs	r2, #9
 800e934:	3308      	adds	r3, #8
 800e936:	4606      	mov	r6, r0
 800e938:	fb93 f3f2 	sdiv	r3, r3, r2
 800e93c:	2100      	movs	r1, #0
 800e93e:	2201      	movs	r2, #1
 800e940:	429a      	cmp	r2, r3
 800e942:	db20      	blt.n	800e986 <__s2b+0x5e>
 800e944:	4630      	mov	r0, r6
 800e946:	f7ff ff69 	bl	800e81c <_Balloc>
 800e94a:	9b08      	ldr	r3, [sp, #32]
 800e94c:	6143      	str	r3, [r0, #20]
 800e94e:	2d09      	cmp	r5, #9
 800e950:	f04f 0301 	mov.w	r3, #1
 800e954:	6103      	str	r3, [r0, #16]
 800e956:	dd19      	ble.n	800e98c <__s2b+0x64>
 800e958:	f104 0909 	add.w	r9, r4, #9
 800e95c:	46c8      	mov	r8, r9
 800e95e:	442c      	add	r4, r5
 800e960:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e964:	4601      	mov	r1, r0
 800e966:	3b30      	subs	r3, #48	; 0x30
 800e968:	220a      	movs	r2, #10
 800e96a:	4630      	mov	r0, r6
 800e96c:	f7ff ffa1 	bl	800e8b2 <__multadd>
 800e970:	45a0      	cmp	r8, r4
 800e972:	d1f5      	bne.n	800e960 <__s2b+0x38>
 800e974:	f1a5 0408 	sub.w	r4, r5, #8
 800e978:	444c      	add	r4, r9
 800e97a:	1b2d      	subs	r5, r5, r4
 800e97c:	1963      	adds	r3, r4, r5
 800e97e:	42bb      	cmp	r3, r7
 800e980:	db07      	blt.n	800e992 <__s2b+0x6a>
 800e982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e986:	0052      	lsls	r2, r2, #1
 800e988:	3101      	adds	r1, #1
 800e98a:	e7d9      	b.n	800e940 <__s2b+0x18>
 800e98c:	340a      	adds	r4, #10
 800e98e:	2509      	movs	r5, #9
 800e990:	e7f3      	b.n	800e97a <__s2b+0x52>
 800e992:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e996:	4601      	mov	r1, r0
 800e998:	3b30      	subs	r3, #48	; 0x30
 800e99a:	220a      	movs	r2, #10
 800e99c:	4630      	mov	r0, r6
 800e99e:	f7ff ff88 	bl	800e8b2 <__multadd>
 800e9a2:	e7eb      	b.n	800e97c <__s2b+0x54>

0800e9a4 <__hi0bits>:
 800e9a4:	0c02      	lsrs	r2, r0, #16
 800e9a6:	0412      	lsls	r2, r2, #16
 800e9a8:	4603      	mov	r3, r0
 800e9aa:	b9b2      	cbnz	r2, 800e9da <__hi0bits+0x36>
 800e9ac:	0403      	lsls	r3, r0, #16
 800e9ae:	2010      	movs	r0, #16
 800e9b0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e9b4:	bf04      	itt	eq
 800e9b6:	021b      	lsleq	r3, r3, #8
 800e9b8:	3008      	addeq	r0, #8
 800e9ba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e9be:	bf04      	itt	eq
 800e9c0:	011b      	lsleq	r3, r3, #4
 800e9c2:	3004      	addeq	r0, #4
 800e9c4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e9c8:	bf04      	itt	eq
 800e9ca:	009b      	lsleq	r3, r3, #2
 800e9cc:	3002      	addeq	r0, #2
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	db06      	blt.n	800e9e0 <__hi0bits+0x3c>
 800e9d2:	005b      	lsls	r3, r3, #1
 800e9d4:	d503      	bpl.n	800e9de <__hi0bits+0x3a>
 800e9d6:	3001      	adds	r0, #1
 800e9d8:	4770      	bx	lr
 800e9da:	2000      	movs	r0, #0
 800e9dc:	e7e8      	b.n	800e9b0 <__hi0bits+0xc>
 800e9de:	2020      	movs	r0, #32
 800e9e0:	4770      	bx	lr

0800e9e2 <__lo0bits>:
 800e9e2:	6803      	ldr	r3, [r0, #0]
 800e9e4:	f013 0207 	ands.w	r2, r3, #7
 800e9e8:	4601      	mov	r1, r0
 800e9ea:	d00b      	beq.n	800ea04 <__lo0bits+0x22>
 800e9ec:	07da      	lsls	r2, r3, #31
 800e9ee:	d423      	bmi.n	800ea38 <__lo0bits+0x56>
 800e9f0:	0798      	lsls	r0, r3, #30
 800e9f2:	bf49      	itett	mi
 800e9f4:	085b      	lsrmi	r3, r3, #1
 800e9f6:	089b      	lsrpl	r3, r3, #2
 800e9f8:	2001      	movmi	r0, #1
 800e9fa:	600b      	strmi	r3, [r1, #0]
 800e9fc:	bf5c      	itt	pl
 800e9fe:	600b      	strpl	r3, [r1, #0]
 800ea00:	2002      	movpl	r0, #2
 800ea02:	4770      	bx	lr
 800ea04:	b298      	uxth	r0, r3
 800ea06:	b9a8      	cbnz	r0, 800ea34 <__lo0bits+0x52>
 800ea08:	0c1b      	lsrs	r3, r3, #16
 800ea0a:	2010      	movs	r0, #16
 800ea0c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ea10:	bf04      	itt	eq
 800ea12:	0a1b      	lsreq	r3, r3, #8
 800ea14:	3008      	addeq	r0, #8
 800ea16:	071a      	lsls	r2, r3, #28
 800ea18:	bf04      	itt	eq
 800ea1a:	091b      	lsreq	r3, r3, #4
 800ea1c:	3004      	addeq	r0, #4
 800ea1e:	079a      	lsls	r2, r3, #30
 800ea20:	bf04      	itt	eq
 800ea22:	089b      	lsreq	r3, r3, #2
 800ea24:	3002      	addeq	r0, #2
 800ea26:	07da      	lsls	r2, r3, #31
 800ea28:	d402      	bmi.n	800ea30 <__lo0bits+0x4e>
 800ea2a:	085b      	lsrs	r3, r3, #1
 800ea2c:	d006      	beq.n	800ea3c <__lo0bits+0x5a>
 800ea2e:	3001      	adds	r0, #1
 800ea30:	600b      	str	r3, [r1, #0]
 800ea32:	4770      	bx	lr
 800ea34:	4610      	mov	r0, r2
 800ea36:	e7e9      	b.n	800ea0c <__lo0bits+0x2a>
 800ea38:	2000      	movs	r0, #0
 800ea3a:	4770      	bx	lr
 800ea3c:	2020      	movs	r0, #32
 800ea3e:	4770      	bx	lr

0800ea40 <__i2b>:
 800ea40:	b510      	push	{r4, lr}
 800ea42:	460c      	mov	r4, r1
 800ea44:	2101      	movs	r1, #1
 800ea46:	f7ff fee9 	bl	800e81c <_Balloc>
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	6144      	str	r4, [r0, #20]
 800ea4e:	6102      	str	r2, [r0, #16]
 800ea50:	bd10      	pop	{r4, pc}

0800ea52 <__multiply>:
 800ea52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea56:	4614      	mov	r4, r2
 800ea58:	690a      	ldr	r2, [r1, #16]
 800ea5a:	6923      	ldr	r3, [r4, #16]
 800ea5c:	429a      	cmp	r2, r3
 800ea5e:	bfb8      	it	lt
 800ea60:	460b      	movlt	r3, r1
 800ea62:	4689      	mov	r9, r1
 800ea64:	bfbc      	itt	lt
 800ea66:	46a1      	movlt	r9, r4
 800ea68:	461c      	movlt	r4, r3
 800ea6a:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ea6e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ea72:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800ea76:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ea7a:	eb07 060a 	add.w	r6, r7, sl
 800ea7e:	429e      	cmp	r6, r3
 800ea80:	bfc8      	it	gt
 800ea82:	3101      	addgt	r1, #1
 800ea84:	f7ff feca 	bl	800e81c <_Balloc>
 800ea88:	f100 0514 	add.w	r5, r0, #20
 800ea8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ea90:	462b      	mov	r3, r5
 800ea92:	2200      	movs	r2, #0
 800ea94:	4543      	cmp	r3, r8
 800ea96:	d316      	bcc.n	800eac6 <__multiply+0x74>
 800ea98:	f104 0214 	add.w	r2, r4, #20
 800ea9c:	f109 0114 	add.w	r1, r9, #20
 800eaa0:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800eaa4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800eaa8:	9301      	str	r3, [sp, #4]
 800eaaa:	9c01      	ldr	r4, [sp, #4]
 800eaac:	4294      	cmp	r4, r2
 800eaae:	4613      	mov	r3, r2
 800eab0:	d80c      	bhi.n	800eacc <__multiply+0x7a>
 800eab2:	2e00      	cmp	r6, #0
 800eab4:	dd03      	ble.n	800eabe <__multiply+0x6c>
 800eab6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d054      	beq.n	800eb68 <__multiply+0x116>
 800eabe:	6106      	str	r6, [r0, #16]
 800eac0:	b003      	add	sp, #12
 800eac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eac6:	f843 2b04 	str.w	r2, [r3], #4
 800eaca:	e7e3      	b.n	800ea94 <__multiply+0x42>
 800eacc:	f8b3 a000 	ldrh.w	sl, [r3]
 800ead0:	3204      	adds	r2, #4
 800ead2:	f1ba 0f00 	cmp.w	sl, #0
 800ead6:	d020      	beq.n	800eb1a <__multiply+0xc8>
 800ead8:	46ae      	mov	lr, r5
 800eada:	4689      	mov	r9, r1
 800eadc:	f04f 0c00 	mov.w	ip, #0
 800eae0:	f859 4b04 	ldr.w	r4, [r9], #4
 800eae4:	f8be b000 	ldrh.w	fp, [lr]
 800eae8:	b2a3      	uxth	r3, r4
 800eaea:	fb0a b303 	mla	r3, sl, r3, fp
 800eaee:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 800eaf2:	f8de 4000 	ldr.w	r4, [lr]
 800eaf6:	4463      	add	r3, ip
 800eaf8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800eafc:	fb0a c40b 	mla	r4, sl, fp, ip
 800eb00:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800eb04:	b29b      	uxth	r3, r3
 800eb06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800eb0a:	454f      	cmp	r7, r9
 800eb0c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800eb10:	f84e 3b04 	str.w	r3, [lr], #4
 800eb14:	d8e4      	bhi.n	800eae0 <__multiply+0x8e>
 800eb16:	f8ce c000 	str.w	ip, [lr]
 800eb1a:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800eb1e:	f1b9 0f00 	cmp.w	r9, #0
 800eb22:	d01f      	beq.n	800eb64 <__multiply+0x112>
 800eb24:	682b      	ldr	r3, [r5, #0]
 800eb26:	46ae      	mov	lr, r5
 800eb28:	468c      	mov	ip, r1
 800eb2a:	f04f 0a00 	mov.w	sl, #0
 800eb2e:	f8bc 4000 	ldrh.w	r4, [ip]
 800eb32:	f8be b002 	ldrh.w	fp, [lr, #2]
 800eb36:	fb09 b404 	mla	r4, r9, r4, fp
 800eb3a:	44a2      	add	sl, r4
 800eb3c:	b29b      	uxth	r3, r3
 800eb3e:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800eb42:	f84e 3b04 	str.w	r3, [lr], #4
 800eb46:	f85c 3b04 	ldr.w	r3, [ip], #4
 800eb4a:	f8be 4000 	ldrh.w	r4, [lr]
 800eb4e:	0c1b      	lsrs	r3, r3, #16
 800eb50:	fb09 4303 	mla	r3, r9, r3, r4
 800eb54:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 800eb58:	4567      	cmp	r7, ip
 800eb5a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eb5e:	d8e6      	bhi.n	800eb2e <__multiply+0xdc>
 800eb60:	f8ce 3000 	str.w	r3, [lr]
 800eb64:	3504      	adds	r5, #4
 800eb66:	e7a0      	b.n	800eaaa <__multiply+0x58>
 800eb68:	3e01      	subs	r6, #1
 800eb6a:	e7a2      	b.n	800eab2 <__multiply+0x60>

0800eb6c <__pow5mult>:
 800eb6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb70:	4615      	mov	r5, r2
 800eb72:	f012 0203 	ands.w	r2, r2, #3
 800eb76:	4606      	mov	r6, r0
 800eb78:	460f      	mov	r7, r1
 800eb7a:	d007      	beq.n	800eb8c <__pow5mult+0x20>
 800eb7c:	3a01      	subs	r2, #1
 800eb7e:	4c21      	ldr	r4, [pc, #132]	; (800ec04 <__pow5mult+0x98>)
 800eb80:	2300      	movs	r3, #0
 800eb82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eb86:	f7ff fe94 	bl	800e8b2 <__multadd>
 800eb8a:	4607      	mov	r7, r0
 800eb8c:	10ad      	asrs	r5, r5, #2
 800eb8e:	d035      	beq.n	800ebfc <__pow5mult+0x90>
 800eb90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800eb92:	b93c      	cbnz	r4, 800eba4 <__pow5mult+0x38>
 800eb94:	2010      	movs	r0, #16
 800eb96:	f7fa ff05 	bl	80099a4 <malloc>
 800eb9a:	6270      	str	r0, [r6, #36]	; 0x24
 800eb9c:	6044      	str	r4, [r0, #4]
 800eb9e:	6084      	str	r4, [r0, #8]
 800eba0:	6004      	str	r4, [r0, #0]
 800eba2:	60c4      	str	r4, [r0, #12]
 800eba4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800eba8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ebac:	b94c      	cbnz	r4, 800ebc2 <__pow5mult+0x56>
 800ebae:	f240 2171 	movw	r1, #625	; 0x271
 800ebb2:	4630      	mov	r0, r6
 800ebb4:	f7ff ff44 	bl	800ea40 <__i2b>
 800ebb8:	2300      	movs	r3, #0
 800ebba:	f8c8 0008 	str.w	r0, [r8, #8]
 800ebbe:	4604      	mov	r4, r0
 800ebc0:	6003      	str	r3, [r0, #0]
 800ebc2:	f04f 0800 	mov.w	r8, #0
 800ebc6:	07eb      	lsls	r3, r5, #31
 800ebc8:	d50a      	bpl.n	800ebe0 <__pow5mult+0x74>
 800ebca:	4639      	mov	r1, r7
 800ebcc:	4622      	mov	r2, r4
 800ebce:	4630      	mov	r0, r6
 800ebd0:	f7ff ff3f 	bl	800ea52 <__multiply>
 800ebd4:	4639      	mov	r1, r7
 800ebd6:	4681      	mov	r9, r0
 800ebd8:	4630      	mov	r0, r6
 800ebda:	f7ff fe53 	bl	800e884 <_Bfree>
 800ebde:	464f      	mov	r7, r9
 800ebe0:	106d      	asrs	r5, r5, #1
 800ebe2:	d00b      	beq.n	800ebfc <__pow5mult+0x90>
 800ebe4:	6820      	ldr	r0, [r4, #0]
 800ebe6:	b938      	cbnz	r0, 800ebf8 <__pow5mult+0x8c>
 800ebe8:	4622      	mov	r2, r4
 800ebea:	4621      	mov	r1, r4
 800ebec:	4630      	mov	r0, r6
 800ebee:	f7ff ff30 	bl	800ea52 <__multiply>
 800ebf2:	6020      	str	r0, [r4, #0]
 800ebf4:	f8c0 8000 	str.w	r8, [r0]
 800ebf8:	4604      	mov	r4, r0
 800ebfa:	e7e4      	b.n	800ebc6 <__pow5mult+0x5a>
 800ebfc:	4638      	mov	r0, r7
 800ebfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec02:	bf00      	nop
 800ec04:	08010f68 	.word	0x08010f68

0800ec08 <__lshift>:
 800ec08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec0c:	460c      	mov	r4, r1
 800ec0e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ec12:	6923      	ldr	r3, [r4, #16]
 800ec14:	6849      	ldr	r1, [r1, #4]
 800ec16:	eb0a 0903 	add.w	r9, sl, r3
 800ec1a:	68a3      	ldr	r3, [r4, #8]
 800ec1c:	4607      	mov	r7, r0
 800ec1e:	4616      	mov	r6, r2
 800ec20:	f109 0501 	add.w	r5, r9, #1
 800ec24:	42ab      	cmp	r3, r5
 800ec26:	db31      	blt.n	800ec8c <__lshift+0x84>
 800ec28:	4638      	mov	r0, r7
 800ec2a:	f7ff fdf7 	bl	800e81c <_Balloc>
 800ec2e:	2200      	movs	r2, #0
 800ec30:	4680      	mov	r8, r0
 800ec32:	f100 0314 	add.w	r3, r0, #20
 800ec36:	4611      	mov	r1, r2
 800ec38:	4552      	cmp	r2, sl
 800ec3a:	db2a      	blt.n	800ec92 <__lshift+0x8a>
 800ec3c:	6920      	ldr	r0, [r4, #16]
 800ec3e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ec42:	f104 0114 	add.w	r1, r4, #20
 800ec46:	f016 021f 	ands.w	r2, r6, #31
 800ec4a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800ec4e:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800ec52:	d022      	beq.n	800ec9a <__lshift+0x92>
 800ec54:	f1c2 0c20 	rsb	ip, r2, #32
 800ec58:	2000      	movs	r0, #0
 800ec5a:	680e      	ldr	r6, [r1, #0]
 800ec5c:	4096      	lsls	r6, r2
 800ec5e:	4330      	orrs	r0, r6
 800ec60:	f843 0b04 	str.w	r0, [r3], #4
 800ec64:	f851 0b04 	ldr.w	r0, [r1], #4
 800ec68:	458e      	cmp	lr, r1
 800ec6a:	fa20 f00c 	lsr.w	r0, r0, ip
 800ec6e:	d8f4      	bhi.n	800ec5a <__lshift+0x52>
 800ec70:	6018      	str	r0, [r3, #0]
 800ec72:	b108      	cbz	r0, 800ec78 <__lshift+0x70>
 800ec74:	f109 0502 	add.w	r5, r9, #2
 800ec78:	3d01      	subs	r5, #1
 800ec7a:	4638      	mov	r0, r7
 800ec7c:	f8c8 5010 	str.w	r5, [r8, #16]
 800ec80:	4621      	mov	r1, r4
 800ec82:	f7ff fdff 	bl	800e884 <_Bfree>
 800ec86:	4640      	mov	r0, r8
 800ec88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec8c:	3101      	adds	r1, #1
 800ec8e:	005b      	lsls	r3, r3, #1
 800ec90:	e7c8      	b.n	800ec24 <__lshift+0x1c>
 800ec92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ec96:	3201      	adds	r2, #1
 800ec98:	e7ce      	b.n	800ec38 <__lshift+0x30>
 800ec9a:	3b04      	subs	r3, #4
 800ec9c:	f851 2b04 	ldr.w	r2, [r1], #4
 800eca0:	f843 2f04 	str.w	r2, [r3, #4]!
 800eca4:	458e      	cmp	lr, r1
 800eca6:	d8f9      	bhi.n	800ec9c <__lshift+0x94>
 800eca8:	e7e6      	b.n	800ec78 <__lshift+0x70>

0800ecaa <__mcmp>:
 800ecaa:	6903      	ldr	r3, [r0, #16]
 800ecac:	690a      	ldr	r2, [r1, #16]
 800ecae:	1a9b      	subs	r3, r3, r2
 800ecb0:	b530      	push	{r4, r5, lr}
 800ecb2:	d10c      	bne.n	800ecce <__mcmp+0x24>
 800ecb4:	0092      	lsls	r2, r2, #2
 800ecb6:	3014      	adds	r0, #20
 800ecb8:	3114      	adds	r1, #20
 800ecba:	1884      	adds	r4, r0, r2
 800ecbc:	4411      	add	r1, r2
 800ecbe:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ecc2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ecc6:	4295      	cmp	r5, r2
 800ecc8:	d003      	beq.n	800ecd2 <__mcmp+0x28>
 800ecca:	d305      	bcc.n	800ecd8 <__mcmp+0x2e>
 800eccc:	2301      	movs	r3, #1
 800ecce:	4618      	mov	r0, r3
 800ecd0:	bd30      	pop	{r4, r5, pc}
 800ecd2:	42a0      	cmp	r0, r4
 800ecd4:	d3f3      	bcc.n	800ecbe <__mcmp+0x14>
 800ecd6:	e7fa      	b.n	800ecce <__mcmp+0x24>
 800ecd8:	f04f 33ff 	mov.w	r3, #4294967295
 800ecdc:	e7f7      	b.n	800ecce <__mcmp+0x24>

0800ecde <__mdiff>:
 800ecde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ece2:	460d      	mov	r5, r1
 800ece4:	4607      	mov	r7, r0
 800ece6:	4611      	mov	r1, r2
 800ece8:	4628      	mov	r0, r5
 800ecea:	4614      	mov	r4, r2
 800ecec:	f7ff ffdd 	bl	800ecaa <__mcmp>
 800ecf0:	1e06      	subs	r6, r0, #0
 800ecf2:	d108      	bne.n	800ed06 <__mdiff+0x28>
 800ecf4:	4631      	mov	r1, r6
 800ecf6:	4638      	mov	r0, r7
 800ecf8:	f7ff fd90 	bl	800e81c <_Balloc>
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	6103      	str	r3, [r0, #16]
 800ed00:	6146      	str	r6, [r0, #20]
 800ed02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed06:	bfa4      	itt	ge
 800ed08:	4623      	movge	r3, r4
 800ed0a:	462c      	movge	r4, r5
 800ed0c:	4638      	mov	r0, r7
 800ed0e:	6861      	ldr	r1, [r4, #4]
 800ed10:	bfa6      	itte	ge
 800ed12:	461d      	movge	r5, r3
 800ed14:	2600      	movge	r6, #0
 800ed16:	2601      	movlt	r6, #1
 800ed18:	f7ff fd80 	bl	800e81c <_Balloc>
 800ed1c:	692b      	ldr	r3, [r5, #16]
 800ed1e:	60c6      	str	r6, [r0, #12]
 800ed20:	6926      	ldr	r6, [r4, #16]
 800ed22:	f105 0914 	add.w	r9, r5, #20
 800ed26:	f104 0214 	add.w	r2, r4, #20
 800ed2a:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ed2e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ed32:	f100 0514 	add.w	r5, r0, #20
 800ed36:	f04f 0c00 	mov.w	ip, #0
 800ed3a:	f852 ab04 	ldr.w	sl, [r2], #4
 800ed3e:	f859 4b04 	ldr.w	r4, [r9], #4
 800ed42:	fa1c f18a 	uxtah	r1, ip, sl
 800ed46:	b2a3      	uxth	r3, r4
 800ed48:	1ac9      	subs	r1, r1, r3
 800ed4a:	0c23      	lsrs	r3, r4, #16
 800ed4c:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ed50:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ed54:	b289      	uxth	r1, r1
 800ed56:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800ed5a:	45c8      	cmp	r8, r9
 800ed5c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ed60:	4696      	mov	lr, r2
 800ed62:	f845 3b04 	str.w	r3, [r5], #4
 800ed66:	d8e8      	bhi.n	800ed3a <__mdiff+0x5c>
 800ed68:	45be      	cmp	lr, r7
 800ed6a:	d305      	bcc.n	800ed78 <__mdiff+0x9a>
 800ed6c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ed70:	b18b      	cbz	r3, 800ed96 <__mdiff+0xb8>
 800ed72:	6106      	str	r6, [r0, #16]
 800ed74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed78:	f85e 1b04 	ldr.w	r1, [lr], #4
 800ed7c:	fa1c f381 	uxtah	r3, ip, r1
 800ed80:	141a      	asrs	r2, r3, #16
 800ed82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ed86:	b29b      	uxth	r3, r3
 800ed88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ed8c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ed90:	f845 3b04 	str.w	r3, [r5], #4
 800ed94:	e7e8      	b.n	800ed68 <__mdiff+0x8a>
 800ed96:	3e01      	subs	r6, #1
 800ed98:	e7e8      	b.n	800ed6c <__mdiff+0x8e>
	...

0800ed9c <__ulp>:
 800ed9c:	4b10      	ldr	r3, [pc, #64]	; (800ede0 <__ulp+0x44>)
 800ed9e:	400b      	ands	r3, r1
 800eda0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	dd02      	ble.n	800edae <__ulp+0x12>
 800eda8:	2000      	movs	r0, #0
 800edaa:	4619      	mov	r1, r3
 800edac:	4770      	bx	lr
 800edae:	425b      	negs	r3, r3
 800edb0:	151b      	asrs	r3, r3, #20
 800edb2:	2b13      	cmp	r3, #19
 800edb4:	f04f 0000 	mov.w	r0, #0
 800edb8:	f04f 0100 	mov.w	r1, #0
 800edbc:	dc04      	bgt.n	800edc8 <__ulp+0x2c>
 800edbe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800edc2:	fa42 f103 	asr.w	r1, r2, r3
 800edc6:	4770      	bx	lr
 800edc8:	3b14      	subs	r3, #20
 800edca:	2b1e      	cmp	r3, #30
 800edcc:	f04f 0201 	mov.w	r2, #1
 800edd0:	bfda      	itte	le
 800edd2:	f1c3 031f 	rsble	r3, r3, #31
 800edd6:	fa02 f303 	lslle.w	r3, r2, r3
 800edda:	4613      	movgt	r3, r2
 800eddc:	4618      	mov	r0, r3
 800edde:	4770      	bx	lr
 800ede0:	7ff00000 	.word	0x7ff00000

0800ede4 <__b2d>:
 800ede4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ede8:	6907      	ldr	r7, [r0, #16]
 800edea:	f100 0914 	add.w	r9, r0, #20
 800edee:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800edf2:	f1a7 0804 	sub.w	r8, r7, #4
 800edf6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800edfa:	4630      	mov	r0, r6
 800edfc:	f7ff fdd2 	bl	800e9a4 <__hi0bits>
 800ee00:	f1c0 0320 	rsb	r3, r0, #32
 800ee04:	280a      	cmp	r0, #10
 800ee06:	600b      	str	r3, [r1, #0]
 800ee08:	491e      	ldr	r1, [pc, #120]	; (800ee84 <__b2d+0xa0>)
 800ee0a:	dc17      	bgt.n	800ee3c <__b2d+0x58>
 800ee0c:	f1c0 0e0b 	rsb	lr, r0, #11
 800ee10:	45c1      	cmp	r9, r8
 800ee12:	fa26 f30e 	lsr.w	r3, r6, lr
 800ee16:	bf38      	it	cc
 800ee18:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800ee1c:	ea43 0501 	orr.w	r5, r3, r1
 800ee20:	bf28      	it	cs
 800ee22:	2200      	movcs	r2, #0
 800ee24:	f100 0315 	add.w	r3, r0, #21
 800ee28:	fa06 f303 	lsl.w	r3, r6, r3
 800ee2c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ee30:	ea43 0402 	orr.w	r4, r3, r2
 800ee34:	4620      	mov	r0, r4
 800ee36:	4629      	mov	r1, r5
 800ee38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee3c:	45c1      	cmp	r9, r8
 800ee3e:	bf3a      	itte	cc
 800ee40:	f1a7 0808 	subcc.w	r8, r7, #8
 800ee44:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800ee48:	2200      	movcs	r2, #0
 800ee4a:	f1b0 030b 	subs.w	r3, r0, #11
 800ee4e:	d015      	beq.n	800ee7c <__b2d+0x98>
 800ee50:	409e      	lsls	r6, r3
 800ee52:	f1c3 0720 	rsb	r7, r3, #32
 800ee56:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800ee5a:	fa22 f107 	lsr.w	r1, r2, r7
 800ee5e:	45c8      	cmp	r8, r9
 800ee60:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800ee64:	ea46 0501 	orr.w	r5, r6, r1
 800ee68:	bf8c      	ite	hi
 800ee6a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800ee6e:	2100      	movls	r1, #0
 800ee70:	fa02 f003 	lsl.w	r0, r2, r3
 800ee74:	40f9      	lsrs	r1, r7
 800ee76:	ea40 0401 	orr.w	r4, r0, r1
 800ee7a:	e7db      	b.n	800ee34 <__b2d+0x50>
 800ee7c:	ea46 0501 	orr.w	r5, r6, r1
 800ee80:	4614      	mov	r4, r2
 800ee82:	e7d7      	b.n	800ee34 <__b2d+0x50>
 800ee84:	3ff00000 	.word	0x3ff00000

0800ee88 <__d2b>:
 800ee88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ee8c:	2101      	movs	r1, #1
 800ee8e:	461c      	mov	r4, r3
 800ee90:	4690      	mov	r8, r2
 800ee92:	9e08      	ldr	r6, [sp, #32]
 800ee94:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ee96:	f7ff fcc1 	bl	800e81c <_Balloc>
 800ee9a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800ee9e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800eea2:	4607      	mov	r7, r0
 800eea4:	bb34      	cbnz	r4, 800eef4 <__d2b+0x6c>
 800eea6:	9201      	str	r2, [sp, #4]
 800eea8:	f1b8 0f00 	cmp.w	r8, #0
 800eeac:	d027      	beq.n	800eefe <__d2b+0x76>
 800eeae:	a802      	add	r0, sp, #8
 800eeb0:	f840 8d08 	str.w	r8, [r0, #-8]!
 800eeb4:	f7ff fd95 	bl	800e9e2 <__lo0bits>
 800eeb8:	9900      	ldr	r1, [sp, #0]
 800eeba:	b1f0      	cbz	r0, 800eefa <__d2b+0x72>
 800eebc:	9a01      	ldr	r2, [sp, #4]
 800eebe:	f1c0 0320 	rsb	r3, r0, #32
 800eec2:	fa02 f303 	lsl.w	r3, r2, r3
 800eec6:	430b      	orrs	r3, r1
 800eec8:	40c2      	lsrs	r2, r0
 800eeca:	617b      	str	r3, [r7, #20]
 800eecc:	9201      	str	r2, [sp, #4]
 800eece:	9b01      	ldr	r3, [sp, #4]
 800eed0:	61bb      	str	r3, [r7, #24]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	bf14      	ite	ne
 800eed6:	2102      	movne	r1, #2
 800eed8:	2101      	moveq	r1, #1
 800eeda:	6139      	str	r1, [r7, #16]
 800eedc:	b1c4      	cbz	r4, 800ef10 <__d2b+0x88>
 800eede:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800eee2:	4404      	add	r4, r0
 800eee4:	6034      	str	r4, [r6, #0]
 800eee6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800eeea:	6028      	str	r0, [r5, #0]
 800eeec:	4638      	mov	r0, r7
 800eeee:	b002      	add	sp, #8
 800eef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eef4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800eef8:	e7d5      	b.n	800eea6 <__d2b+0x1e>
 800eefa:	6179      	str	r1, [r7, #20]
 800eefc:	e7e7      	b.n	800eece <__d2b+0x46>
 800eefe:	a801      	add	r0, sp, #4
 800ef00:	f7ff fd6f 	bl	800e9e2 <__lo0bits>
 800ef04:	9b01      	ldr	r3, [sp, #4]
 800ef06:	617b      	str	r3, [r7, #20]
 800ef08:	2101      	movs	r1, #1
 800ef0a:	6139      	str	r1, [r7, #16]
 800ef0c:	3020      	adds	r0, #32
 800ef0e:	e7e5      	b.n	800eedc <__d2b+0x54>
 800ef10:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ef14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ef18:	6030      	str	r0, [r6, #0]
 800ef1a:	6918      	ldr	r0, [r3, #16]
 800ef1c:	f7ff fd42 	bl	800e9a4 <__hi0bits>
 800ef20:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ef24:	e7e1      	b.n	800eeea <__d2b+0x62>

0800ef26 <__ratio>:
 800ef26:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800ef2a:	4688      	mov	r8, r1
 800ef2c:	4669      	mov	r1, sp
 800ef2e:	4681      	mov	r9, r0
 800ef30:	f7ff ff58 	bl	800ede4 <__b2d>
 800ef34:	460d      	mov	r5, r1
 800ef36:	4604      	mov	r4, r0
 800ef38:	a901      	add	r1, sp, #4
 800ef3a:	4640      	mov	r0, r8
 800ef3c:	f7ff ff52 	bl	800ede4 <__b2d>
 800ef40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ef44:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ef48:	9e00      	ldr	r6, [sp, #0]
 800ef4a:	1a9a      	subs	r2, r3, r2
 800ef4c:	9b01      	ldr	r3, [sp, #4]
 800ef4e:	1af3      	subs	r3, r6, r3
 800ef50:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	bfd6      	itet	le
 800ef58:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ef5c:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 800ef60:	eb01 5103 	addle.w	r1, r1, r3, lsl #20
 800ef64:	4602      	mov	r2, r0
 800ef66:	460b      	mov	r3, r1
 800ef68:	4620      	mov	r0, r4
 800ef6a:	4629      	mov	r1, r5
 800ef6c:	f7f1 fc7a 	bl	8000864 <__aeabi_ddiv>
 800ef70:	b002      	add	sp, #8
 800ef72:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

0800ef76 <__copybits>:
 800ef76:	3901      	subs	r1, #1
 800ef78:	b510      	push	{r4, lr}
 800ef7a:	1149      	asrs	r1, r1, #5
 800ef7c:	6914      	ldr	r4, [r2, #16]
 800ef7e:	3101      	adds	r1, #1
 800ef80:	f102 0314 	add.w	r3, r2, #20
 800ef84:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ef88:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ef8c:	42a3      	cmp	r3, r4
 800ef8e:	4602      	mov	r2, r0
 800ef90:	d303      	bcc.n	800ef9a <__copybits+0x24>
 800ef92:	2300      	movs	r3, #0
 800ef94:	428a      	cmp	r2, r1
 800ef96:	d305      	bcc.n	800efa4 <__copybits+0x2e>
 800ef98:	bd10      	pop	{r4, pc}
 800ef9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef9e:	f840 2b04 	str.w	r2, [r0], #4
 800efa2:	e7f3      	b.n	800ef8c <__copybits+0x16>
 800efa4:	f842 3b04 	str.w	r3, [r2], #4
 800efa8:	e7f4      	b.n	800ef94 <__copybits+0x1e>

0800efaa <__any_on>:
 800efaa:	f100 0214 	add.w	r2, r0, #20
 800efae:	6900      	ldr	r0, [r0, #16]
 800efb0:	114b      	asrs	r3, r1, #5
 800efb2:	4298      	cmp	r0, r3
 800efb4:	b510      	push	{r4, lr}
 800efb6:	db11      	blt.n	800efdc <__any_on+0x32>
 800efb8:	dd0a      	ble.n	800efd0 <__any_on+0x26>
 800efba:	f011 011f 	ands.w	r1, r1, #31
 800efbe:	d007      	beq.n	800efd0 <__any_on+0x26>
 800efc0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800efc4:	fa24 f001 	lsr.w	r0, r4, r1
 800efc8:	fa00 f101 	lsl.w	r1, r0, r1
 800efcc:	428c      	cmp	r4, r1
 800efce:	d10b      	bne.n	800efe8 <__any_on+0x3e>
 800efd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800efd4:	4293      	cmp	r3, r2
 800efd6:	d803      	bhi.n	800efe0 <__any_on+0x36>
 800efd8:	2000      	movs	r0, #0
 800efda:	bd10      	pop	{r4, pc}
 800efdc:	4603      	mov	r3, r0
 800efde:	e7f7      	b.n	800efd0 <__any_on+0x26>
 800efe0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800efe4:	2900      	cmp	r1, #0
 800efe6:	d0f5      	beq.n	800efd4 <__any_on+0x2a>
 800efe8:	2001      	movs	r0, #1
 800efea:	bd10      	pop	{r4, pc}

0800efec <_realloc_r>:
 800efec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eff0:	4682      	mov	sl, r0
 800eff2:	460c      	mov	r4, r1
 800eff4:	b929      	cbnz	r1, 800f002 <_realloc_r+0x16>
 800eff6:	4611      	mov	r1, r2
 800eff8:	b003      	add	sp, #12
 800effa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800effe:	f7fa bce1 	b.w	80099c4 <_malloc_r>
 800f002:	9201      	str	r2, [sp, #4]
 800f004:	f7fb f95c 	bl	800a2c0 <__malloc_lock>
 800f008:	9a01      	ldr	r2, [sp, #4]
 800f00a:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800f00e:	f102 080b 	add.w	r8, r2, #11
 800f012:	f1b8 0f16 	cmp.w	r8, #22
 800f016:	f1a4 0908 	sub.w	r9, r4, #8
 800f01a:	f025 0603 	bic.w	r6, r5, #3
 800f01e:	d90a      	bls.n	800f036 <_realloc_r+0x4a>
 800f020:	f038 0807 	bics.w	r8, r8, #7
 800f024:	d509      	bpl.n	800f03a <_realloc_r+0x4e>
 800f026:	230c      	movs	r3, #12
 800f028:	f8ca 3000 	str.w	r3, [sl]
 800f02c:	2700      	movs	r7, #0
 800f02e:	4638      	mov	r0, r7
 800f030:	b003      	add	sp, #12
 800f032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f036:	f04f 0810 	mov.w	r8, #16
 800f03a:	4590      	cmp	r8, r2
 800f03c:	d3f3      	bcc.n	800f026 <_realloc_r+0x3a>
 800f03e:	45b0      	cmp	r8, r6
 800f040:	f340 8145 	ble.w	800f2ce <_realloc_r+0x2e2>
 800f044:	4ba8      	ldr	r3, [pc, #672]	; (800f2e8 <_realloc_r+0x2fc>)
 800f046:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800f04a:	eb09 0106 	add.w	r1, r9, r6
 800f04e:	4571      	cmp	r1, lr
 800f050:	469b      	mov	fp, r3
 800f052:	684b      	ldr	r3, [r1, #4]
 800f054:	d005      	beq.n	800f062 <_realloc_r+0x76>
 800f056:	f023 0001 	bic.w	r0, r3, #1
 800f05a:	4408      	add	r0, r1
 800f05c:	6840      	ldr	r0, [r0, #4]
 800f05e:	07c7      	lsls	r7, r0, #31
 800f060:	d447      	bmi.n	800f0f2 <_realloc_r+0x106>
 800f062:	f023 0303 	bic.w	r3, r3, #3
 800f066:	4571      	cmp	r1, lr
 800f068:	eb06 0703 	add.w	r7, r6, r3
 800f06c:	d119      	bne.n	800f0a2 <_realloc_r+0xb6>
 800f06e:	f108 0010 	add.w	r0, r8, #16
 800f072:	4287      	cmp	r7, r0
 800f074:	db3f      	blt.n	800f0f6 <_realloc_r+0x10a>
 800f076:	eb09 0308 	add.w	r3, r9, r8
 800f07a:	eba7 0708 	sub.w	r7, r7, r8
 800f07e:	f047 0701 	orr.w	r7, r7, #1
 800f082:	f8cb 3008 	str.w	r3, [fp, #8]
 800f086:	605f      	str	r7, [r3, #4]
 800f088:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f08c:	f003 0301 	and.w	r3, r3, #1
 800f090:	ea43 0308 	orr.w	r3, r3, r8
 800f094:	f844 3c04 	str.w	r3, [r4, #-4]
 800f098:	4650      	mov	r0, sl
 800f09a:	f7fb f917 	bl	800a2cc <__malloc_unlock>
 800f09e:	4627      	mov	r7, r4
 800f0a0:	e7c5      	b.n	800f02e <_realloc_r+0x42>
 800f0a2:	45b8      	cmp	r8, r7
 800f0a4:	dc27      	bgt.n	800f0f6 <_realloc_r+0x10a>
 800f0a6:	68cb      	ldr	r3, [r1, #12]
 800f0a8:	688a      	ldr	r2, [r1, #8]
 800f0aa:	60d3      	str	r3, [r2, #12]
 800f0ac:	609a      	str	r2, [r3, #8]
 800f0ae:	eba7 0008 	sub.w	r0, r7, r8
 800f0b2:	280f      	cmp	r0, #15
 800f0b4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f0b8:	eb09 0207 	add.w	r2, r9, r7
 800f0bc:	f240 8109 	bls.w	800f2d2 <_realloc_r+0x2e6>
 800f0c0:	eb09 0108 	add.w	r1, r9, r8
 800f0c4:	f003 0301 	and.w	r3, r3, #1
 800f0c8:	ea43 0308 	orr.w	r3, r3, r8
 800f0cc:	f040 0001 	orr.w	r0, r0, #1
 800f0d0:	f8c9 3004 	str.w	r3, [r9, #4]
 800f0d4:	6048      	str	r0, [r1, #4]
 800f0d6:	6853      	ldr	r3, [r2, #4]
 800f0d8:	f043 0301 	orr.w	r3, r3, #1
 800f0dc:	6053      	str	r3, [r2, #4]
 800f0de:	3108      	adds	r1, #8
 800f0e0:	4650      	mov	r0, sl
 800f0e2:	f7fe fc8f 	bl	800da04 <_free_r>
 800f0e6:	4650      	mov	r0, sl
 800f0e8:	f7fb f8f0 	bl	800a2cc <__malloc_unlock>
 800f0ec:	f109 0708 	add.w	r7, r9, #8
 800f0f0:	e79d      	b.n	800f02e <_realloc_r+0x42>
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	4619      	mov	r1, r3
 800f0f6:	07e8      	lsls	r0, r5, #31
 800f0f8:	f100 8084 	bmi.w	800f204 <_realloc_r+0x218>
 800f0fc:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800f100:	eba9 0505 	sub.w	r5, r9, r5
 800f104:	6868      	ldr	r0, [r5, #4]
 800f106:	f020 0003 	bic.w	r0, r0, #3
 800f10a:	4430      	add	r0, r6
 800f10c:	2900      	cmp	r1, #0
 800f10e:	d076      	beq.n	800f1fe <_realloc_r+0x212>
 800f110:	4571      	cmp	r1, lr
 800f112:	d150      	bne.n	800f1b6 <_realloc_r+0x1ca>
 800f114:	4403      	add	r3, r0
 800f116:	f108 0110 	add.w	r1, r8, #16
 800f11a:	428b      	cmp	r3, r1
 800f11c:	db6f      	blt.n	800f1fe <_realloc_r+0x212>
 800f11e:	462f      	mov	r7, r5
 800f120:	68ea      	ldr	r2, [r5, #12]
 800f122:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800f126:	60ca      	str	r2, [r1, #12]
 800f128:	6091      	str	r1, [r2, #8]
 800f12a:	1f32      	subs	r2, r6, #4
 800f12c:	2a24      	cmp	r2, #36	; 0x24
 800f12e:	d83b      	bhi.n	800f1a8 <_realloc_r+0x1bc>
 800f130:	2a13      	cmp	r2, #19
 800f132:	d936      	bls.n	800f1a2 <_realloc_r+0x1b6>
 800f134:	6821      	ldr	r1, [r4, #0]
 800f136:	60a9      	str	r1, [r5, #8]
 800f138:	6861      	ldr	r1, [r4, #4]
 800f13a:	60e9      	str	r1, [r5, #12]
 800f13c:	2a1b      	cmp	r2, #27
 800f13e:	d81c      	bhi.n	800f17a <_realloc_r+0x18e>
 800f140:	f105 0210 	add.w	r2, r5, #16
 800f144:	f104 0108 	add.w	r1, r4, #8
 800f148:	6808      	ldr	r0, [r1, #0]
 800f14a:	6010      	str	r0, [r2, #0]
 800f14c:	6848      	ldr	r0, [r1, #4]
 800f14e:	6050      	str	r0, [r2, #4]
 800f150:	6889      	ldr	r1, [r1, #8]
 800f152:	6091      	str	r1, [r2, #8]
 800f154:	eb05 0208 	add.w	r2, r5, r8
 800f158:	eba3 0308 	sub.w	r3, r3, r8
 800f15c:	f043 0301 	orr.w	r3, r3, #1
 800f160:	f8cb 2008 	str.w	r2, [fp, #8]
 800f164:	6053      	str	r3, [r2, #4]
 800f166:	686b      	ldr	r3, [r5, #4]
 800f168:	f003 0301 	and.w	r3, r3, #1
 800f16c:	ea43 0308 	orr.w	r3, r3, r8
 800f170:	606b      	str	r3, [r5, #4]
 800f172:	4650      	mov	r0, sl
 800f174:	f7fb f8aa 	bl	800a2cc <__malloc_unlock>
 800f178:	e759      	b.n	800f02e <_realloc_r+0x42>
 800f17a:	68a1      	ldr	r1, [r4, #8]
 800f17c:	6129      	str	r1, [r5, #16]
 800f17e:	68e1      	ldr	r1, [r4, #12]
 800f180:	6169      	str	r1, [r5, #20]
 800f182:	2a24      	cmp	r2, #36	; 0x24
 800f184:	bf01      	itttt	eq
 800f186:	6922      	ldreq	r2, [r4, #16]
 800f188:	61aa      	streq	r2, [r5, #24]
 800f18a:	6960      	ldreq	r0, [r4, #20]
 800f18c:	61e8      	streq	r0, [r5, #28]
 800f18e:	bf19      	ittee	ne
 800f190:	f105 0218 	addne.w	r2, r5, #24
 800f194:	f104 0110 	addne.w	r1, r4, #16
 800f198:	f105 0220 	addeq.w	r2, r5, #32
 800f19c:	f104 0118 	addeq.w	r1, r4, #24
 800f1a0:	e7d2      	b.n	800f148 <_realloc_r+0x15c>
 800f1a2:	463a      	mov	r2, r7
 800f1a4:	4621      	mov	r1, r4
 800f1a6:	e7cf      	b.n	800f148 <_realloc_r+0x15c>
 800f1a8:	4621      	mov	r1, r4
 800f1aa:	4638      	mov	r0, r7
 800f1ac:	9301      	str	r3, [sp, #4]
 800f1ae:	f7ff fb1b 	bl	800e7e8 <memmove>
 800f1b2:	9b01      	ldr	r3, [sp, #4]
 800f1b4:	e7ce      	b.n	800f154 <_realloc_r+0x168>
 800f1b6:	18c7      	adds	r7, r0, r3
 800f1b8:	45b8      	cmp	r8, r7
 800f1ba:	dc20      	bgt.n	800f1fe <_realloc_r+0x212>
 800f1bc:	68cb      	ldr	r3, [r1, #12]
 800f1be:	688a      	ldr	r2, [r1, #8]
 800f1c0:	60d3      	str	r3, [r2, #12]
 800f1c2:	609a      	str	r2, [r3, #8]
 800f1c4:	4628      	mov	r0, r5
 800f1c6:	68eb      	ldr	r3, [r5, #12]
 800f1c8:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800f1cc:	60d3      	str	r3, [r2, #12]
 800f1ce:	609a      	str	r2, [r3, #8]
 800f1d0:	1f32      	subs	r2, r6, #4
 800f1d2:	2a24      	cmp	r2, #36	; 0x24
 800f1d4:	d842      	bhi.n	800f25c <_realloc_r+0x270>
 800f1d6:	2a13      	cmp	r2, #19
 800f1d8:	d93e      	bls.n	800f258 <_realloc_r+0x26c>
 800f1da:	6823      	ldr	r3, [r4, #0]
 800f1dc:	60ab      	str	r3, [r5, #8]
 800f1de:	6863      	ldr	r3, [r4, #4]
 800f1e0:	60eb      	str	r3, [r5, #12]
 800f1e2:	2a1b      	cmp	r2, #27
 800f1e4:	d824      	bhi.n	800f230 <_realloc_r+0x244>
 800f1e6:	f105 0010 	add.w	r0, r5, #16
 800f1ea:	f104 0308 	add.w	r3, r4, #8
 800f1ee:	681a      	ldr	r2, [r3, #0]
 800f1f0:	6002      	str	r2, [r0, #0]
 800f1f2:	685a      	ldr	r2, [r3, #4]
 800f1f4:	6042      	str	r2, [r0, #4]
 800f1f6:	689b      	ldr	r3, [r3, #8]
 800f1f8:	6083      	str	r3, [r0, #8]
 800f1fa:	46a9      	mov	r9, r5
 800f1fc:	e757      	b.n	800f0ae <_realloc_r+0xc2>
 800f1fe:	4580      	cmp	r8, r0
 800f200:	4607      	mov	r7, r0
 800f202:	dddf      	ble.n	800f1c4 <_realloc_r+0x1d8>
 800f204:	4611      	mov	r1, r2
 800f206:	4650      	mov	r0, sl
 800f208:	f7fa fbdc 	bl	80099c4 <_malloc_r>
 800f20c:	4607      	mov	r7, r0
 800f20e:	2800      	cmp	r0, #0
 800f210:	d0af      	beq.n	800f172 <_realloc_r+0x186>
 800f212:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f216:	f023 0301 	bic.w	r3, r3, #1
 800f21a:	f1a0 0208 	sub.w	r2, r0, #8
 800f21e:	444b      	add	r3, r9
 800f220:	429a      	cmp	r2, r3
 800f222:	d11f      	bne.n	800f264 <_realloc_r+0x278>
 800f224:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800f228:	f027 0703 	bic.w	r7, r7, #3
 800f22c:	4437      	add	r7, r6
 800f22e:	e73e      	b.n	800f0ae <_realloc_r+0xc2>
 800f230:	68a3      	ldr	r3, [r4, #8]
 800f232:	612b      	str	r3, [r5, #16]
 800f234:	68e3      	ldr	r3, [r4, #12]
 800f236:	616b      	str	r3, [r5, #20]
 800f238:	2a24      	cmp	r2, #36	; 0x24
 800f23a:	bf01      	itttt	eq
 800f23c:	6923      	ldreq	r3, [r4, #16]
 800f23e:	61ab      	streq	r3, [r5, #24]
 800f240:	6962      	ldreq	r2, [r4, #20]
 800f242:	61ea      	streq	r2, [r5, #28]
 800f244:	bf19      	ittee	ne
 800f246:	f105 0018 	addne.w	r0, r5, #24
 800f24a:	f104 0310 	addne.w	r3, r4, #16
 800f24e:	f105 0020 	addeq.w	r0, r5, #32
 800f252:	f104 0318 	addeq.w	r3, r4, #24
 800f256:	e7ca      	b.n	800f1ee <_realloc_r+0x202>
 800f258:	4623      	mov	r3, r4
 800f25a:	e7c8      	b.n	800f1ee <_realloc_r+0x202>
 800f25c:	4621      	mov	r1, r4
 800f25e:	f7ff fac3 	bl	800e7e8 <memmove>
 800f262:	e7ca      	b.n	800f1fa <_realloc_r+0x20e>
 800f264:	1f32      	subs	r2, r6, #4
 800f266:	2a24      	cmp	r2, #36	; 0x24
 800f268:	d82d      	bhi.n	800f2c6 <_realloc_r+0x2da>
 800f26a:	2a13      	cmp	r2, #19
 800f26c:	d928      	bls.n	800f2c0 <_realloc_r+0x2d4>
 800f26e:	6823      	ldr	r3, [r4, #0]
 800f270:	6003      	str	r3, [r0, #0]
 800f272:	6863      	ldr	r3, [r4, #4]
 800f274:	6043      	str	r3, [r0, #4]
 800f276:	2a1b      	cmp	r2, #27
 800f278:	d80e      	bhi.n	800f298 <_realloc_r+0x2ac>
 800f27a:	f100 0308 	add.w	r3, r0, #8
 800f27e:	f104 0208 	add.w	r2, r4, #8
 800f282:	6811      	ldr	r1, [r2, #0]
 800f284:	6019      	str	r1, [r3, #0]
 800f286:	6851      	ldr	r1, [r2, #4]
 800f288:	6059      	str	r1, [r3, #4]
 800f28a:	6892      	ldr	r2, [r2, #8]
 800f28c:	609a      	str	r2, [r3, #8]
 800f28e:	4621      	mov	r1, r4
 800f290:	4650      	mov	r0, sl
 800f292:	f7fe fbb7 	bl	800da04 <_free_r>
 800f296:	e76c      	b.n	800f172 <_realloc_r+0x186>
 800f298:	68a3      	ldr	r3, [r4, #8]
 800f29a:	6083      	str	r3, [r0, #8]
 800f29c:	68e3      	ldr	r3, [r4, #12]
 800f29e:	60c3      	str	r3, [r0, #12]
 800f2a0:	2a24      	cmp	r2, #36	; 0x24
 800f2a2:	bf01      	itttt	eq
 800f2a4:	6923      	ldreq	r3, [r4, #16]
 800f2a6:	6103      	streq	r3, [r0, #16]
 800f2a8:	6961      	ldreq	r1, [r4, #20]
 800f2aa:	6141      	streq	r1, [r0, #20]
 800f2ac:	bf19      	ittee	ne
 800f2ae:	f100 0310 	addne.w	r3, r0, #16
 800f2b2:	f104 0210 	addne.w	r2, r4, #16
 800f2b6:	f100 0318 	addeq.w	r3, r0, #24
 800f2ba:	f104 0218 	addeq.w	r2, r4, #24
 800f2be:	e7e0      	b.n	800f282 <_realloc_r+0x296>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	4622      	mov	r2, r4
 800f2c4:	e7dd      	b.n	800f282 <_realloc_r+0x296>
 800f2c6:	4621      	mov	r1, r4
 800f2c8:	f7ff fa8e 	bl	800e7e8 <memmove>
 800f2cc:	e7df      	b.n	800f28e <_realloc_r+0x2a2>
 800f2ce:	4637      	mov	r7, r6
 800f2d0:	e6ed      	b.n	800f0ae <_realloc_r+0xc2>
 800f2d2:	f003 0301 	and.w	r3, r3, #1
 800f2d6:	431f      	orrs	r7, r3
 800f2d8:	f8c9 7004 	str.w	r7, [r9, #4]
 800f2dc:	6853      	ldr	r3, [r2, #4]
 800f2de:	f043 0301 	orr.w	r3, r3, #1
 800f2e2:	6053      	str	r3, [r2, #4]
 800f2e4:	e6ff      	b.n	800f0e6 <_realloc_r+0xfa>
 800f2e6:	bf00      	nop
 800f2e8:	20000104 	.word	0x20000104

0800f2ec <siscanf>:
 800f2ec:	b40e      	push	{r1, r2, r3}
 800f2ee:	b530      	push	{r4, r5, lr}
 800f2f0:	b09c      	sub	sp, #112	; 0x70
 800f2f2:	ac1f      	add	r4, sp, #124	; 0x7c
 800f2f4:	f44f 7201 	mov.w	r2, #516	; 0x204
 800f2f8:	f854 5b04 	ldr.w	r5, [r4], #4
 800f2fc:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f300:	9002      	str	r0, [sp, #8]
 800f302:	9006      	str	r0, [sp, #24]
 800f304:	f7f0 ff6e 	bl	80001e4 <strlen>
 800f308:	4b0b      	ldr	r3, [pc, #44]	; (800f338 <siscanf+0x4c>)
 800f30a:	9003      	str	r0, [sp, #12]
 800f30c:	9007      	str	r0, [sp, #28]
 800f30e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f310:	480a      	ldr	r0, [pc, #40]	; (800f33c <siscanf+0x50>)
 800f312:	9401      	str	r4, [sp, #4]
 800f314:	2300      	movs	r3, #0
 800f316:	930f      	str	r3, [sp, #60]	; 0x3c
 800f318:	9314      	str	r3, [sp, #80]	; 0x50
 800f31a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f31e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f322:	462a      	mov	r2, r5
 800f324:	4623      	mov	r3, r4
 800f326:	a902      	add	r1, sp, #8
 800f328:	6800      	ldr	r0, [r0, #0]
 800f32a:	f000 f99f 	bl	800f66c <__ssvfiscanf_r>
 800f32e:	b01c      	add	sp, #112	; 0x70
 800f330:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f334:	b003      	add	sp, #12
 800f336:	4770      	bx	lr
 800f338:	0800f363 	.word	0x0800f363
 800f33c:	20000010 	.word	0x20000010

0800f340 <__sread>:
 800f340:	b510      	push	{r4, lr}
 800f342:	460c      	mov	r4, r1
 800f344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f348:	f000 ff3c 	bl	80101c4 <_read_r>
 800f34c:	2800      	cmp	r0, #0
 800f34e:	bfab      	itete	ge
 800f350:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f352:	89a3      	ldrhlt	r3, [r4, #12]
 800f354:	181b      	addge	r3, r3, r0
 800f356:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f35a:	bfac      	ite	ge
 800f35c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f35e:	81a3      	strhlt	r3, [r4, #12]
 800f360:	bd10      	pop	{r4, pc}

0800f362 <__seofread>:
 800f362:	2000      	movs	r0, #0
 800f364:	4770      	bx	lr

0800f366 <__swrite>:
 800f366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f36a:	461f      	mov	r7, r3
 800f36c:	898b      	ldrh	r3, [r1, #12]
 800f36e:	05db      	lsls	r3, r3, #23
 800f370:	4605      	mov	r5, r0
 800f372:	460c      	mov	r4, r1
 800f374:	4616      	mov	r6, r2
 800f376:	d505      	bpl.n	800f384 <__swrite+0x1e>
 800f378:	2302      	movs	r3, #2
 800f37a:	2200      	movs	r2, #0
 800f37c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f380:	f000 fee2 	bl	8010148 <_lseek_r>
 800f384:	89a3      	ldrh	r3, [r4, #12]
 800f386:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f38a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f38e:	81a3      	strh	r3, [r4, #12]
 800f390:	4632      	mov	r2, r6
 800f392:	463b      	mov	r3, r7
 800f394:	4628      	mov	r0, r5
 800f396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f39a:	f000 bd73 	b.w	800fe84 <_write_r>

0800f39e <__sseek>:
 800f39e:	b510      	push	{r4, lr}
 800f3a0:	460c      	mov	r4, r1
 800f3a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3a6:	f000 fecf 	bl	8010148 <_lseek_r>
 800f3aa:	1c43      	adds	r3, r0, #1
 800f3ac:	89a3      	ldrh	r3, [r4, #12]
 800f3ae:	bf15      	itete	ne
 800f3b0:	6560      	strne	r0, [r4, #84]	; 0x54
 800f3b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f3b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f3ba:	81a3      	strheq	r3, [r4, #12]
 800f3bc:	bf18      	it	ne
 800f3be:	81a3      	strhne	r3, [r4, #12]
 800f3c0:	bd10      	pop	{r4, pc}

0800f3c2 <__sclose>:
 800f3c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3c6:	f000 bd9d 	b.w	800ff04 <_close_r>

0800f3ca <strcpy>:
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f3d0:	f803 2b01 	strb.w	r2, [r3], #1
 800f3d4:	2a00      	cmp	r2, #0
 800f3d6:	d1f9      	bne.n	800f3cc <strcpy+0x2>
 800f3d8:	4770      	bx	lr

0800f3da <strncmp>:
 800f3da:	b510      	push	{r4, lr}
 800f3dc:	b16a      	cbz	r2, 800f3fa <strncmp+0x20>
 800f3de:	3901      	subs	r1, #1
 800f3e0:	1884      	adds	r4, r0, r2
 800f3e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f3e6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f3ea:	4293      	cmp	r3, r2
 800f3ec:	d103      	bne.n	800f3f6 <strncmp+0x1c>
 800f3ee:	42a0      	cmp	r0, r4
 800f3f0:	d001      	beq.n	800f3f6 <strncmp+0x1c>
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d1f5      	bne.n	800f3e2 <strncmp+0x8>
 800f3f6:	1a98      	subs	r0, r3, r2
 800f3f8:	bd10      	pop	{r4, pc}
 800f3fa:	4610      	mov	r0, r2
 800f3fc:	bd10      	pop	{r4, pc}

0800f3fe <_strtoul_l.isra.0>:
 800f3fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f402:	4680      	mov	r8, r0
 800f404:	4689      	mov	r9, r1
 800f406:	4692      	mov	sl, r2
 800f408:	461e      	mov	r6, r3
 800f40a:	460f      	mov	r7, r1
 800f40c:	463d      	mov	r5, r7
 800f40e:	9808      	ldr	r0, [sp, #32]
 800f410:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f414:	f7ff f942 	bl	800e69c <__locale_ctype_ptr_l>
 800f418:	4420      	add	r0, r4
 800f41a:	7843      	ldrb	r3, [r0, #1]
 800f41c:	f013 0308 	ands.w	r3, r3, #8
 800f420:	d10a      	bne.n	800f438 <_strtoul_l.isra.0+0x3a>
 800f422:	2c2d      	cmp	r4, #45	; 0x2d
 800f424:	d10a      	bne.n	800f43c <_strtoul_l.isra.0+0x3e>
 800f426:	782c      	ldrb	r4, [r5, #0]
 800f428:	2301      	movs	r3, #1
 800f42a:	1cbd      	adds	r5, r7, #2
 800f42c:	b15e      	cbz	r6, 800f446 <_strtoul_l.isra.0+0x48>
 800f42e:	2e10      	cmp	r6, #16
 800f430:	d113      	bne.n	800f45a <_strtoul_l.isra.0+0x5c>
 800f432:	2c30      	cmp	r4, #48	; 0x30
 800f434:	d009      	beq.n	800f44a <_strtoul_l.isra.0+0x4c>
 800f436:	e010      	b.n	800f45a <_strtoul_l.isra.0+0x5c>
 800f438:	462f      	mov	r7, r5
 800f43a:	e7e7      	b.n	800f40c <_strtoul_l.isra.0+0xe>
 800f43c:	2c2b      	cmp	r4, #43	; 0x2b
 800f43e:	bf04      	itt	eq
 800f440:	782c      	ldrbeq	r4, [r5, #0]
 800f442:	1cbd      	addeq	r5, r7, #2
 800f444:	e7f2      	b.n	800f42c <_strtoul_l.isra.0+0x2e>
 800f446:	2c30      	cmp	r4, #48	; 0x30
 800f448:	d125      	bne.n	800f496 <_strtoul_l.isra.0+0x98>
 800f44a:	782a      	ldrb	r2, [r5, #0]
 800f44c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800f450:	2a58      	cmp	r2, #88	; 0x58
 800f452:	d14a      	bne.n	800f4ea <_strtoul_l.isra.0+0xec>
 800f454:	786c      	ldrb	r4, [r5, #1]
 800f456:	2610      	movs	r6, #16
 800f458:	3502      	adds	r5, #2
 800f45a:	f04f 31ff 	mov.w	r1, #4294967295
 800f45e:	2700      	movs	r7, #0
 800f460:	fbb1 f1f6 	udiv	r1, r1, r6
 800f464:	fb06 fe01 	mul.w	lr, r6, r1
 800f468:	ea6f 0e0e 	mvn.w	lr, lr
 800f46c:	4638      	mov	r0, r7
 800f46e:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 800f472:	2a09      	cmp	r2, #9
 800f474:	d811      	bhi.n	800f49a <_strtoul_l.isra.0+0x9c>
 800f476:	4614      	mov	r4, r2
 800f478:	42a6      	cmp	r6, r4
 800f47a:	dd1d      	ble.n	800f4b8 <_strtoul_l.isra.0+0xba>
 800f47c:	2f00      	cmp	r7, #0
 800f47e:	db18      	blt.n	800f4b2 <_strtoul_l.isra.0+0xb4>
 800f480:	4281      	cmp	r1, r0
 800f482:	d316      	bcc.n	800f4b2 <_strtoul_l.isra.0+0xb4>
 800f484:	d101      	bne.n	800f48a <_strtoul_l.isra.0+0x8c>
 800f486:	45a6      	cmp	lr, r4
 800f488:	db13      	blt.n	800f4b2 <_strtoul_l.isra.0+0xb4>
 800f48a:	fb00 4006 	mla	r0, r0, r6, r4
 800f48e:	2701      	movs	r7, #1
 800f490:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f494:	e7eb      	b.n	800f46e <_strtoul_l.isra.0+0x70>
 800f496:	260a      	movs	r6, #10
 800f498:	e7df      	b.n	800f45a <_strtoul_l.isra.0+0x5c>
 800f49a:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 800f49e:	2a19      	cmp	r2, #25
 800f4a0:	d801      	bhi.n	800f4a6 <_strtoul_l.isra.0+0xa8>
 800f4a2:	3c37      	subs	r4, #55	; 0x37
 800f4a4:	e7e8      	b.n	800f478 <_strtoul_l.isra.0+0x7a>
 800f4a6:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 800f4aa:	2a19      	cmp	r2, #25
 800f4ac:	d804      	bhi.n	800f4b8 <_strtoul_l.isra.0+0xba>
 800f4ae:	3c57      	subs	r4, #87	; 0x57
 800f4b0:	e7e2      	b.n	800f478 <_strtoul_l.isra.0+0x7a>
 800f4b2:	f04f 37ff 	mov.w	r7, #4294967295
 800f4b6:	e7eb      	b.n	800f490 <_strtoul_l.isra.0+0x92>
 800f4b8:	2f00      	cmp	r7, #0
 800f4ba:	da09      	bge.n	800f4d0 <_strtoul_l.isra.0+0xd2>
 800f4bc:	2322      	movs	r3, #34	; 0x22
 800f4be:	f8c8 3000 	str.w	r3, [r8]
 800f4c2:	f04f 30ff 	mov.w	r0, #4294967295
 800f4c6:	f1ba 0f00 	cmp.w	sl, #0
 800f4ca:	d107      	bne.n	800f4dc <_strtoul_l.isra.0+0xde>
 800f4cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4d0:	b103      	cbz	r3, 800f4d4 <_strtoul_l.isra.0+0xd6>
 800f4d2:	4240      	negs	r0, r0
 800f4d4:	f1ba 0f00 	cmp.w	sl, #0
 800f4d8:	d00c      	beq.n	800f4f4 <_strtoul_l.isra.0+0xf6>
 800f4da:	b127      	cbz	r7, 800f4e6 <_strtoul_l.isra.0+0xe8>
 800f4dc:	3d01      	subs	r5, #1
 800f4de:	f8ca 5000 	str.w	r5, [sl]
 800f4e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4e6:	464d      	mov	r5, r9
 800f4e8:	e7f9      	b.n	800f4de <_strtoul_l.isra.0+0xe0>
 800f4ea:	2430      	movs	r4, #48	; 0x30
 800f4ec:	2e00      	cmp	r6, #0
 800f4ee:	d1b4      	bne.n	800f45a <_strtoul_l.isra.0+0x5c>
 800f4f0:	2608      	movs	r6, #8
 800f4f2:	e7b2      	b.n	800f45a <_strtoul_l.isra.0+0x5c>
 800f4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f4f8 <_strtoul_r>:
 800f4f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f4fa:	4c06      	ldr	r4, [pc, #24]	; (800f514 <_strtoul_r+0x1c>)
 800f4fc:	4d06      	ldr	r5, [pc, #24]	; (800f518 <_strtoul_r+0x20>)
 800f4fe:	6824      	ldr	r4, [r4, #0]
 800f500:	6a24      	ldr	r4, [r4, #32]
 800f502:	2c00      	cmp	r4, #0
 800f504:	bf08      	it	eq
 800f506:	462c      	moveq	r4, r5
 800f508:	9400      	str	r4, [sp, #0]
 800f50a:	f7ff ff78 	bl	800f3fe <_strtoul_l.isra.0>
 800f50e:	b003      	add	sp, #12
 800f510:	bd30      	pop	{r4, r5, pc}
 800f512:	bf00      	nop
 800f514:	20000010 	.word	0x20000010
 800f518:	2000055c 	.word	0x2000055c

0800f51c <strtoul>:
 800f51c:	4b08      	ldr	r3, [pc, #32]	; (800f540 <strtoul+0x24>)
 800f51e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f520:	681c      	ldr	r4, [r3, #0]
 800f522:	4d08      	ldr	r5, [pc, #32]	; (800f544 <strtoul+0x28>)
 800f524:	6a23      	ldr	r3, [r4, #32]
 800f526:	2b00      	cmp	r3, #0
 800f528:	bf08      	it	eq
 800f52a:	462b      	moveq	r3, r5
 800f52c:	9300      	str	r3, [sp, #0]
 800f52e:	4613      	mov	r3, r2
 800f530:	460a      	mov	r2, r1
 800f532:	4601      	mov	r1, r0
 800f534:	4620      	mov	r0, r4
 800f536:	f7ff ff62 	bl	800f3fe <_strtoul_l.isra.0>
 800f53a:	b003      	add	sp, #12
 800f53c:	bd30      	pop	{r4, r5, pc}
 800f53e:	bf00      	nop
 800f540:	20000010 	.word	0x20000010
 800f544:	2000055c 	.word	0x2000055c

0800f548 <_sungetc_r>:
 800f548:	b538      	push	{r3, r4, r5, lr}
 800f54a:	1c4b      	adds	r3, r1, #1
 800f54c:	4614      	mov	r4, r2
 800f54e:	d103      	bne.n	800f558 <_sungetc_r+0x10>
 800f550:	f04f 35ff 	mov.w	r5, #4294967295
 800f554:	4628      	mov	r0, r5
 800f556:	bd38      	pop	{r3, r4, r5, pc}
 800f558:	8993      	ldrh	r3, [r2, #12]
 800f55a:	f023 0320 	bic.w	r3, r3, #32
 800f55e:	8193      	strh	r3, [r2, #12]
 800f560:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800f562:	6852      	ldr	r2, [r2, #4]
 800f564:	b2cd      	uxtb	r5, r1
 800f566:	b18b      	cbz	r3, 800f58c <_sungetc_r+0x44>
 800f568:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f56a:	429a      	cmp	r2, r3
 800f56c:	da08      	bge.n	800f580 <_sungetc_r+0x38>
 800f56e:	6823      	ldr	r3, [r4, #0]
 800f570:	1e5a      	subs	r2, r3, #1
 800f572:	6022      	str	r2, [r4, #0]
 800f574:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f578:	6863      	ldr	r3, [r4, #4]
 800f57a:	3301      	adds	r3, #1
 800f57c:	6063      	str	r3, [r4, #4]
 800f57e:	e7e9      	b.n	800f554 <_sungetc_r+0xc>
 800f580:	4621      	mov	r1, r4
 800f582:	f000 fc01 	bl	800fd88 <__submore>
 800f586:	2800      	cmp	r0, #0
 800f588:	d0f1      	beq.n	800f56e <_sungetc_r+0x26>
 800f58a:	e7e1      	b.n	800f550 <_sungetc_r+0x8>
 800f58c:	6921      	ldr	r1, [r4, #16]
 800f58e:	6823      	ldr	r3, [r4, #0]
 800f590:	b151      	cbz	r1, 800f5a8 <_sungetc_r+0x60>
 800f592:	4299      	cmp	r1, r3
 800f594:	d208      	bcs.n	800f5a8 <_sungetc_r+0x60>
 800f596:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800f59a:	428d      	cmp	r5, r1
 800f59c:	d104      	bne.n	800f5a8 <_sungetc_r+0x60>
 800f59e:	3b01      	subs	r3, #1
 800f5a0:	3201      	adds	r2, #1
 800f5a2:	6023      	str	r3, [r4, #0]
 800f5a4:	6062      	str	r2, [r4, #4]
 800f5a6:	e7d5      	b.n	800f554 <_sungetc_r+0xc>
 800f5a8:	63e3      	str	r3, [r4, #60]	; 0x3c
 800f5aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f5ae:	6363      	str	r3, [r4, #52]	; 0x34
 800f5b0:	2303      	movs	r3, #3
 800f5b2:	63a3      	str	r3, [r4, #56]	; 0x38
 800f5b4:	4623      	mov	r3, r4
 800f5b6:	6422      	str	r2, [r4, #64]	; 0x40
 800f5b8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f5bc:	6023      	str	r3, [r4, #0]
 800f5be:	2301      	movs	r3, #1
 800f5c0:	e7dc      	b.n	800f57c <_sungetc_r+0x34>

0800f5c2 <__ssrefill_r>:
 800f5c2:	b510      	push	{r4, lr}
 800f5c4:	460c      	mov	r4, r1
 800f5c6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f5c8:	b169      	cbz	r1, 800f5e6 <__ssrefill_r+0x24>
 800f5ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f5ce:	4299      	cmp	r1, r3
 800f5d0:	d001      	beq.n	800f5d6 <__ssrefill_r+0x14>
 800f5d2:	f7fe fa17 	bl	800da04 <_free_r>
 800f5d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f5d8:	6063      	str	r3, [r4, #4]
 800f5da:	2000      	movs	r0, #0
 800f5dc:	6360      	str	r0, [r4, #52]	; 0x34
 800f5de:	b113      	cbz	r3, 800f5e6 <__ssrefill_r+0x24>
 800f5e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f5e2:	6023      	str	r3, [r4, #0]
 800f5e4:	bd10      	pop	{r4, pc}
 800f5e6:	6923      	ldr	r3, [r4, #16]
 800f5e8:	6023      	str	r3, [r4, #0]
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	6063      	str	r3, [r4, #4]
 800f5ee:	89a3      	ldrh	r3, [r4, #12]
 800f5f0:	f043 0320 	orr.w	r3, r3, #32
 800f5f4:	81a3      	strh	r3, [r4, #12]
 800f5f6:	f04f 30ff 	mov.w	r0, #4294967295
 800f5fa:	bd10      	pop	{r4, pc}

0800f5fc <_sfread_r>:
 800f5fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f600:	4615      	mov	r5, r2
 800f602:	435d      	muls	r5, r3
 800f604:	4682      	mov	sl, r0
 800f606:	4691      	mov	r9, r2
 800f608:	4698      	mov	r8, r3
 800f60a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800f60c:	d029      	beq.n	800f662 <_sfread_r+0x66>
 800f60e:	460f      	mov	r7, r1
 800f610:	462e      	mov	r6, r5
 800f612:	f04f 0b00 	mov.w	fp, #0
 800f616:	6863      	ldr	r3, [r4, #4]
 800f618:	429e      	cmp	r6, r3
 800f61a:	d80c      	bhi.n	800f636 <_sfread_r+0x3a>
 800f61c:	4632      	mov	r2, r6
 800f61e:	6821      	ldr	r1, [r4, #0]
 800f620:	4638      	mov	r0, r7
 800f622:	f7fa fbdd 	bl	8009de0 <memcpy>
 800f626:	6863      	ldr	r3, [r4, #4]
 800f628:	6825      	ldr	r5, [r4, #0]
 800f62a:	1b9b      	subs	r3, r3, r6
 800f62c:	4435      	add	r5, r6
 800f62e:	6025      	str	r5, [r4, #0]
 800f630:	6063      	str	r3, [r4, #4]
 800f632:	4645      	mov	r5, r8
 800f634:	e015      	b.n	800f662 <_sfread_r+0x66>
 800f636:	461a      	mov	r2, r3
 800f638:	6821      	ldr	r1, [r4, #0]
 800f63a:	9301      	str	r3, [sp, #4]
 800f63c:	4638      	mov	r0, r7
 800f63e:	f7fa fbcf 	bl	8009de0 <memcpy>
 800f642:	9b01      	ldr	r3, [sp, #4]
 800f644:	6822      	ldr	r2, [r4, #0]
 800f646:	441a      	add	r2, r3
 800f648:	e884 0804 	stmia.w	r4, {r2, fp}
 800f64c:	4621      	mov	r1, r4
 800f64e:	4650      	mov	r0, sl
 800f650:	441f      	add	r7, r3
 800f652:	1af6      	subs	r6, r6, r3
 800f654:	f7ff ffb5 	bl	800f5c2 <__ssrefill_r>
 800f658:	2800      	cmp	r0, #0
 800f65a:	d0dc      	beq.n	800f616 <_sfread_r+0x1a>
 800f65c:	1bad      	subs	r5, r5, r6
 800f65e:	fbb5 f5f9 	udiv	r5, r5, r9
 800f662:	4628      	mov	r0, r5
 800f664:	b003      	add	sp, #12
 800f666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800f66c <__ssvfiscanf_r>:
 800f66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f670:	461e      	mov	r6, r3
 800f672:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800f676:	b0d7      	sub	sp, #348	; 0x15c
 800f678:	049c      	lsls	r4, r3, #18
 800f67a:	9003      	str	r0, [sp, #12]
 800f67c:	460d      	mov	r5, r1
 800f67e:	d406      	bmi.n	800f68e <__ssvfiscanf_r+0x22>
 800f680:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f684:	818b      	strh	r3, [r1, #12]
 800f686:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800f688:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f68c:	664b      	str	r3, [r1, #100]	; 0x64
 800f68e:	2300      	movs	r3, #0
 800f690:	9206      	str	r2, [sp, #24]
 800f692:	9305      	str	r3, [sp, #20]
 800f694:	4699      	mov	r9, r3
 800f696:	4698      	mov	r8, r3
 800f698:	9304      	str	r3, [sp, #16]
 800f69a:	9a06      	ldr	r2, [sp, #24]
 800f69c:	f812 3b01 	ldrb.w	r3, [r2], #1
 800f6a0:	9206      	str	r2, [sp, #24]
 800f6a2:	9309      	str	r3, [sp, #36]	; 0x24
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	f000 8099 	beq.w	800f7dc <__ssvfiscanf_r+0x170>
 800f6aa:	f7fe fffb 	bl	800e6a4 <__locale_ctype_ptr>
 800f6ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6b0:	4418      	add	r0, r3
 800f6b2:	7844      	ldrb	r4, [r0, #1]
 800f6b4:	f014 0408 	ands.w	r4, r4, #8
 800f6b8:	d019      	beq.n	800f6ee <__ssvfiscanf_r+0x82>
 800f6ba:	686b      	ldr	r3, [r5, #4]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	dd0f      	ble.n	800f6e0 <__ssvfiscanf_r+0x74>
 800f6c0:	f7fe fff0 	bl	800e6a4 <__locale_ctype_ptr>
 800f6c4:	682b      	ldr	r3, [r5, #0]
 800f6c6:	781a      	ldrb	r2, [r3, #0]
 800f6c8:	4410      	add	r0, r2
 800f6ca:	7842      	ldrb	r2, [r0, #1]
 800f6cc:	0710      	lsls	r0, r2, #28
 800f6ce:	d5e4      	bpl.n	800f69a <__ssvfiscanf_r+0x2e>
 800f6d0:	686a      	ldr	r2, [r5, #4]
 800f6d2:	3301      	adds	r3, #1
 800f6d4:	3a01      	subs	r2, #1
 800f6d6:	f108 0801 	add.w	r8, r8, #1
 800f6da:	606a      	str	r2, [r5, #4]
 800f6dc:	602b      	str	r3, [r5, #0]
 800f6de:	e7ec      	b.n	800f6ba <__ssvfiscanf_r+0x4e>
 800f6e0:	4629      	mov	r1, r5
 800f6e2:	9803      	ldr	r0, [sp, #12]
 800f6e4:	f7ff ff6d 	bl	800f5c2 <__ssrefill_r>
 800f6e8:	2800      	cmp	r0, #0
 800f6ea:	d0e9      	beq.n	800f6c0 <__ssvfiscanf_r+0x54>
 800f6ec:	e7d5      	b.n	800f69a <__ssvfiscanf_r+0x2e>
 800f6ee:	2b25      	cmp	r3, #37	; 0x25
 800f6f0:	d16a      	bne.n	800f7c8 <__ssvfiscanf_r+0x15c>
 800f6f2:	9b06      	ldr	r3, [sp, #24]
 800f6f4:	46a2      	mov	sl, r4
 800f6f6:	4627      	mov	r7, r4
 800f6f8:	220a      	movs	r2, #10
 800f6fa:	9906      	ldr	r1, [sp, #24]
 800f6fc:	781c      	ldrb	r4, [r3, #0]
 800f6fe:	3101      	adds	r1, #1
 800f700:	2c63      	cmp	r4, #99	; 0x63
 800f702:	9106      	str	r1, [sp, #24]
 800f704:	f000 80f8 	beq.w	800f8f8 <__ssvfiscanf_r+0x28c>
 800f708:	d82c      	bhi.n	800f764 <__ssvfiscanf_r+0xf8>
 800f70a:	2c39      	cmp	r4, #57	; 0x39
 800f70c:	d80a      	bhi.n	800f724 <__ssvfiscanf_r+0xb8>
 800f70e:	2c30      	cmp	r4, #48	; 0x30
 800f710:	f080 808c 	bcs.w	800f82c <__ssvfiscanf_r+0x1c0>
 800f714:	2c25      	cmp	r4, #37	; 0x25
 800f716:	d057      	beq.n	800f7c8 <__ssvfiscanf_r+0x15c>
 800f718:	2c2a      	cmp	r4, #42	; 0x2a
 800f71a:	d07d      	beq.n	800f818 <__ssvfiscanf_r+0x1ac>
 800f71c:	b954      	cbnz	r4, 800f734 <__ssvfiscanf_r+0xc8>
 800f71e:	f04f 33ff 	mov.w	r3, #4294967295
 800f722:	e06f      	b.n	800f804 <__ssvfiscanf_r+0x198>
 800f724:	2c4f      	cmp	r4, #79	; 0x4f
 800f726:	f000 8085 	beq.w	800f834 <__ssvfiscanf_r+0x1c8>
 800f72a:	d80e      	bhi.n	800f74a <__ssvfiscanf_r+0xde>
 800f72c:	2c44      	cmp	r4, #68	; 0x44
 800f72e:	d009      	beq.n	800f744 <__ssvfiscanf_r+0xd8>
 800f730:	2c4c      	cmp	r4, #76	; 0x4c
 800f732:	d02b      	beq.n	800f78c <__ssvfiscanf_r+0x120>
 800f734:	f7fe ffb6 	bl	800e6a4 <__locale_ctype_ptr>
 800f738:	4420      	add	r0, r4
 800f73a:	7843      	ldrb	r3, [r0, #1]
 800f73c:	f003 0303 	and.w	r3, r3, #3
 800f740:	2b01      	cmp	r3, #1
 800f742:	d118      	bne.n	800f776 <__ssvfiscanf_r+0x10a>
 800f744:	f04a 0a01 	orr.w	sl, sl, #1
 800f748:	e015      	b.n	800f776 <__ssvfiscanf_r+0x10a>
 800f74a:	2c58      	cmp	r4, #88	; 0x58
 800f74c:	d02f      	beq.n	800f7ae <__ssvfiscanf_r+0x142>
 800f74e:	2c5b      	cmp	r4, #91	; 0x5b
 800f750:	d1f0      	bne.n	800f734 <__ssvfiscanf_r+0xc8>
 800f752:	9906      	ldr	r1, [sp, #24]
 800f754:	a816      	add	r0, sp, #88	; 0x58
 800f756:	f000 fd47 	bl	80101e8 <__sccl>
 800f75a:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
 800f75e:	9006      	str	r0, [sp, #24]
 800f760:	2401      	movs	r4, #1
 800f762:	e074      	b.n	800f84e <__ssvfiscanf_r+0x1e2>
 800f764:	2c6e      	cmp	r4, #110	; 0x6e
 800f766:	f000 80cb 	beq.w	800f900 <__ssvfiscanf_r+0x294>
 800f76a:	d812      	bhi.n	800f792 <__ssvfiscanf_r+0x126>
 800f76c:	2c68      	cmp	r4, #104	; 0x68
 800f76e:	d05a      	beq.n	800f826 <__ssvfiscanf_r+0x1ba>
 800f770:	d803      	bhi.n	800f77a <__ssvfiscanf_r+0x10e>
 800f772:	2c64      	cmp	r4, #100	; 0x64
 800f774:	d1de      	bne.n	800f734 <__ssvfiscanf_r+0xc8>
 800f776:	4ba7      	ldr	r3, [pc, #668]	; (800fa14 <__ssvfiscanf_r+0x3a8>)
 800f778:	e064      	b.n	800f844 <__ssvfiscanf_r+0x1d8>
 800f77a:	2c69      	cmp	r4, #105	; 0x69
 800f77c:	d01e      	beq.n	800f7bc <__ssvfiscanf_r+0x150>
 800f77e:	2c6c      	cmp	r4, #108	; 0x6c
 800f780:	d1d8      	bne.n	800f734 <__ssvfiscanf_r+0xc8>
 800f782:	7859      	ldrb	r1, [r3, #1]
 800f784:	296c      	cmp	r1, #108	; 0x6c
 800f786:	d14b      	bne.n	800f820 <__ssvfiscanf_r+0x1b4>
 800f788:	3302      	adds	r3, #2
 800f78a:	9306      	str	r3, [sp, #24]
 800f78c:	f04a 0a02 	orr.w	sl, sl, #2
 800f790:	e044      	b.n	800f81c <__ssvfiscanf_r+0x1b0>
 800f792:	2c73      	cmp	r4, #115	; 0x73
 800f794:	d05a      	beq.n	800f84c <__ssvfiscanf_r+0x1e0>
 800f796:	d806      	bhi.n	800f7a6 <__ssvfiscanf_r+0x13a>
 800f798:	2c6f      	cmp	r4, #111	; 0x6f
 800f79a:	d04d      	beq.n	800f838 <__ssvfiscanf_r+0x1cc>
 800f79c:	2c70      	cmp	r4, #112	; 0x70
 800f79e:	d1c9      	bne.n	800f734 <__ssvfiscanf_r+0xc8>
 800f7a0:	f44a 7a08 	orr.w	sl, sl, #544	; 0x220
 800f7a4:	e005      	b.n	800f7b2 <__ssvfiscanf_r+0x146>
 800f7a6:	2c75      	cmp	r4, #117	; 0x75
 800f7a8:	d04b      	beq.n	800f842 <__ssvfiscanf_r+0x1d6>
 800f7aa:	2c78      	cmp	r4, #120	; 0x78
 800f7ac:	d1c2      	bne.n	800f734 <__ssvfiscanf_r+0xc8>
 800f7ae:	f44a 7a00 	orr.w	sl, sl, #512	; 0x200
 800f7b2:	4b99      	ldr	r3, [pc, #612]	; (800fa18 <__ssvfiscanf_r+0x3ac>)
 800f7b4:	9305      	str	r3, [sp, #20]
 800f7b6:	f04f 0910 	mov.w	r9, #16
 800f7ba:	e003      	b.n	800f7c4 <__ssvfiscanf_r+0x158>
 800f7bc:	4b95      	ldr	r3, [pc, #596]	; (800fa14 <__ssvfiscanf_r+0x3a8>)
 800f7be:	9305      	str	r3, [sp, #20]
 800f7c0:	f04f 0900 	mov.w	r9, #0
 800f7c4:	2403      	movs	r4, #3
 800f7c6:	e042      	b.n	800f84e <__ssvfiscanf_r+0x1e2>
 800f7c8:	686b      	ldr	r3, [r5, #4]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	dd0a      	ble.n	800f7e4 <__ssvfiscanf_r+0x178>
 800f7ce:	682b      	ldr	r3, [r5, #0]
 800f7d0:	9a06      	ldr	r2, [sp, #24]
 800f7d2:	7819      	ldrb	r1, [r3, #0]
 800f7d4:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800f7d8:	4291      	cmp	r1, r2
 800f7da:	d015      	beq.n	800f808 <__ssvfiscanf_r+0x19c>
 800f7dc:	9804      	ldr	r0, [sp, #16]
 800f7de:	b057      	add	sp, #348	; 0x15c
 800f7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7e4:	4629      	mov	r1, r5
 800f7e6:	9803      	ldr	r0, [sp, #12]
 800f7e8:	f7ff feeb 	bl	800f5c2 <__ssrefill_r>
 800f7ec:	2800      	cmp	r0, #0
 800f7ee:	d0ee      	beq.n	800f7ce <__ssvfiscanf_r+0x162>
 800f7f0:	9b04      	ldr	r3, [sp, #16]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d093      	beq.n	800f71e <__ssvfiscanf_r+0xb2>
 800f7f6:	89ab      	ldrh	r3, [r5, #12]
 800f7f8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f7fc:	9b04      	ldr	r3, [sp, #16]
 800f7fe:	bf18      	it	ne
 800f800:	f04f 33ff 	movne.w	r3, #4294967295
 800f804:	9304      	str	r3, [sp, #16]
 800f806:	e7e9      	b.n	800f7dc <__ssvfiscanf_r+0x170>
 800f808:	686a      	ldr	r2, [r5, #4]
 800f80a:	3301      	adds	r3, #1
 800f80c:	3a01      	subs	r2, #1
 800f80e:	606a      	str	r2, [r5, #4]
 800f810:	602b      	str	r3, [r5, #0]
 800f812:	f108 0801 	add.w	r8, r8, #1
 800f816:	e740      	b.n	800f69a <__ssvfiscanf_r+0x2e>
 800f818:	f04a 0a10 	orr.w	sl, sl, #16
 800f81c:	9b06      	ldr	r3, [sp, #24]
 800f81e:	e76c      	b.n	800f6fa <__ssvfiscanf_r+0x8e>
 800f820:	f04a 0a01 	orr.w	sl, sl, #1
 800f824:	e7fa      	b.n	800f81c <__ssvfiscanf_r+0x1b0>
 800f826:	f04a 0a04 	orr.w	sl, sl, #4
 800f82a:	e7f7      	b.n	800f81c <__ssvfiscanf_r+0x1b0>
 800f82c:	fb02 4707 	mla	r7, r2, r7, r4
 800f830:	3f30      	subs	r7, #48	; 0x30
 800f832:	e7f3      	b.n	800f81c <__ssvfiscanf_r+0x1b0>
 800f834:	f04a 0a01 	orr.w	sl, sl, #1
 800f838:	4b77      	ldr	r3, [pc, #476]	; (800fa18 <__ssvfiscanf_r+0x3ac>)
 800f83a:	9305      	str	r3, [sp, #20]
 800f83c:	f04f 0908 	mov.w	r9, #8
 800f840:	e7c0      	b.n	800f7c4 <__ssvfiscanf_r+0x158>
 800f842:	4b75      	ldr	r3, [pc, #468]	; (800fa18 <__ssvfiscanf_r+0x3ac>)
 800f844:	9305      	str	r3, [sp, #20]
 800f846:	f04f 090a 	mov.w	r9, #10
 800f84a:	e7bb      	b.n	800f7c4 <__ssvfiscanf_r+0x158>
 800f84c:	2402      	movs	r4, #2
 800f84e:	686b      	ldr	r3, [r5, #4]
 800f850:	2b00      	cmp	r3, #0
 800f852:	dd71      	ble.n	800f938 <__ssvfiscanf_r+0x2cc>
 800f854:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800f858:	d107      	bne.n	800f86a <__ssvfiscanf_r+0x1fe>
 800f85a:	f7fe ff23 	bl	800e6a4 <__locale_ctype_ptr>
 800f85e:	682b      	ldr	r3, [r5, #0]
 800f860:	781a      	ldrb	r2, [r3, #0]
 800f862:	4410      	add	r0, r2
 800f864:	7842      	ldrb	r2, [r0, #1]
 800f866:	0711      	lsls	r1, r2, #28
 800f868:	d46d      	bmi.n	800f946 <__ssvfiscanf_r+0x2da>
 800f86a:	2c02      	cmp	r4, #2
 800f86c:	f000 8113 	beq.w	800fa96 <__ssvfiscanf_r+0x42a>
 800f870:	2c03      	cmp	r4, #3
 800f872:	f000 81c7 	beq.w	800fc04 <__ssvfiscanf_r+0x598>
 800f876:	2c01      	cmp	r4, #1
 800f878:	f00a 0410 	and.w	r4, sl, #16
 800f87c:	f000 80ba 	beq.w	800f9f4 <__ssvfiscanf_r+0x388>
 800f880:	2f00      	cmp	r7, #0
 800f882:	bf08      	it	eq
 800f884:	2701      	moveq	r7, #1
 800f886:	f01a 0a01 	ands.w	sl, sl, #1
 800f88a:	f000 8087 	beq.w	800f99c <__ssvfiscanf_r+0x330>
 800f88e:	2208      	movs	r2, #8
 800f890:	2100      	movs	r1, #0
 800f892:	a80a      	add	r0, sp, #40	; 0x28
 800f894:	f7fa faaf 	bl	8009df6 <memset>
 800f898:	2c00      	cmp	r4, #0
 800f89a:	d166      	bne.n	800f96a <__ssvfiscanf_r+0x2fe>
 800f89c:	f8d6 b000 	ldr.w	fp, [r6]
 800f8a0:	3604      	adds	r6, #4
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	2f00      	cmp	r7, #0
 800f8a6:	d071      	beq.n	800f98c <__ssvfiscanf_r+0x320>
 800f8a8:	9307      	str	r3, [sp, #28]
 800f8aa:	f7fe fee9 	bl	800e680 <__locale_mb_cur_max>
 800f8ae:	9b07      	ldr	r3, [sp, #28]
 800f8b0:	4283      	cmp	r3, r0
 800f8b2:	d09d      	beq.n	800f7f0 <__ssvfiscanf_r+0x184>
 800f8b4:	682a      	ldr	r2, [r5, #0]
 800f8b6:	a80c      	add	r0, sp, #48	; 0x30
 800f8b8:	f812 1b01 	ldrb.w	r1, [r2], #1
 800f8bc:	54c1      	strb	r1, [r0, r3]
 800f8be:	f103 0a01 	add.w	sl, r3, #1
 800f8c2:	686b      	ldr	r3, [r5, #4]
 800f8c4:	3b01      	subs	r3, #1
 800f8c6:	e885 000c 	stmia.w	r5, {r2, r3}
 800f8ca:	ab0a      	add	r3, sp, #40	; 0x28
 800f8cc:	4602      	mov	r2, r0
 800f8ce:	9300      	str	r3, [sp, #0]
 800f8d0:	4659      	mov	r1, fp
 800f8d2:	4653      	mov	r3, sl
 800f8d4:	9803      	ldr	r0, [sp, #12]
 800f8d6:	f000 fc49 	bl	801016c <_mbrtowc_r>
 800f8da:	1c42      	adds	r2, r0, #1
 800f8dc:	d088      	beq.n	800f7f0 <__ssvfiscanf_r+0x184>
 800f8de:	2800      	cmp	r0, #0
 800f8e0:	d146      	bne.n	800f970 <__ssvfiscanf_r+0x304>
 800f8e2:	b90c      	cbnz	r4, 800f8e8 <__ssvfiscanf_r+0x27c>
 800f8e4:	f8cb 4000 	str.w	r4, [fp]
 800f8e8:	44d0      	add	r8, sl
 800f8ea:	3f01      	subs	r7, #1
 800f8ec:	b90c      	cbnz	r4, 800f8f2 <__ssvfiscanf_r+0x286>
 800f8ee:	f10b 0b04 	add.w	fp, fp, #4
 800f8f2:	f04f 0a00 	mov.w	sl, #0
 800f8f6:	e03d      	b.n	800f974 <__ssvfiscanf_r+0x308>
 800f8f8:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
 800f8fc:	2400      	movs	r4, #0
 800f8fe:	e7a6      	b.n	800f84e <__ssvfiscanf_r+0x1e2>
 800f900:	f01a 0f10 	tst.w	sl, #16
 800f904:	f47f aec9 	bne.w	800f69a <__ssvfiscanf_r+0x2e>
 800f908:	f01a 0f04 	tst.w	sl, #4
 800f90c:	6832      	ldr	r2, [r6, #0]
 800f90e:	f106 0304 	add.w	r3, r6, #4
 800f912:	d003      	beq.n	800f91c <__ssvfiscanf_r+0x2b0>
 800f914:	f8a2 8000 	strh.w	r8, [r2]
 800f918:	461e      	mov	r6, r3
 800f91a:	e6be      	b.n	800f69a <__ssvfiscanf_r+0x2e>
 800f91c:	f01a 0f01 	tst.w	sl, #1
 800f920:	d002      	beq.n	800f928 <__ssvfiscanf_r+0x2bc>
 800f922:	f8c2 8000 	str.w	r8, [r2]
 800f926:	e7f7      	b.n	800f918 <__ssvfiscanf_r+0x2ac>
 800f928:	f01a 0f02 	tst.w	sl, #2
 800f92c:	d0f9      	beq.n	800f922 <__ssvfiscanf_r+0x2b6>
 800f92e:	4640      	mov	r0, r8
 800f930:	17c1      	asrs	r1, r0, #31
 800f932:	e9c2 0100 	strd	r0, r1, [r2]
 800f936:	e7ef      	b.n	800f918 <__ssvfiscanf_r+0x2ac>
 800f938:	4629      	mov	r1, r5
 800f93a:	9803      	ldr	r0, [sp, #12]
 800f93c:	f7ff fe41 	bl	800f5c2 <__ssrefill_r>
 800f940:	2800      	cmp	r0, #0
 800f942:	d087      	beq.n	800f854 <__ssvfiscanf_r+0x1e8>
 800f944:	e754      	b.n	800f7f0 <__ssvfiscanf_r+0x184>
 800f946:	686a      	ldr	r2, [r5, #4]
 800f948:	3a01      	subs	r2, #1
 800f94a:	2a00      	cmp	r2, #0
 800f94c:	f108 0801 	add.w	r8, r8, #1
 800f950:	606a      	str	r2, [r5, #4]
 800f952:	dd02      	ble.n	800f95a <__ssvfiscanf_r+0x2ee>
 800f954:	3301      	adds	r3, #1
 800f956:	602b      	str	r3, [r5, #0]
 800f958:	e77f      	b.n	800f85a <__ssvfiscanf_r+0x1ee>
 800f95a:	4629      	mov	r1, r5
 800f95c:	9803      	ldr	r0, [sp, #12]
 800f95e:	f7ff fe30 	bl	800f5c2 <__ssrefill_r>
 800f962:	2800      	cmp	r0, #0
 800f964:	f43f af79 	beq.w	800f85a <__ssvfiscanf_r+0x1ee>
 800f968:	e742      	b.n	800f7f0 <__ssvfiscanf_r+0x184>
 800f96a:	f04f 0b00 	mov.w	fp, #0
 800f96e:	e798      	b.n	800f8a2 <__ssvfiscanf_r+0x236>
 800f970:	3002      	adds	r0, #2
 800f972:	d1b9      	bne.n	800f8e8 <__ssvfiscanf_r+0x27c>
 800f974:	686b      	ldr	r3, [r5, #4]
 800f976:	2b00      	cmp	r3, #0
 800f978:	dc0e      	bgt.n	800f998 <__ssvfiscanf_r+0x32c>
 800f97a:	4629      	mov	r1, r5
 800f97c:	9803      	ldr	r0, [sp, #12]
 800f97e:	f7ff fe20 	bl	800f5c2 <__ssrefill_r>
 800f982:	b148      	cbz	r0, 800f998 <__ssvfiscanf_r+0x32c>
 800f984:	f1ba 0f00 	cmp.w	sl, #0
 800f988:	f47f af32 	bne.w	800f7f0 <__ssvfiscanf_r+0x184>
 800f98c:	2c00      	cmp	r4, #0
 800f98e:	f47f ae84 	bne.w	800f69a <__ssvfiscanf_r+0x2e>
 800f992:	9b04      	ldr	r3, [sp, #16]
 800f994:	3301      	adds	r3, #1
 800f996:	e67f      	b.n	800f698 <__ssvfiscanf_r+0x2c>
 800f998:	4653      	mov	r3, sl
 800f99a:	e783      	b.n	800f8a4 <__ssvfiscanf_r+0x238>
 800f99c:	b1cc      	cbz	r4, 800f9d2 <__ssvfiscanf_r+0x366>
 800f99e:	4654      	mov	r4, sl
 800f9a0:	686b      	ldr	r3, [r5, #4]
 800f9a2:	682a      	ldr	r2, [r5, #0]
 800f9a4:	42bb      	cmp	r3, r7
 800f9a6:	da0e      	bge.n	800f9c6 <__ssvfiscanf_r+0x35a>
 800f9a8:	441c      	add	r4, r3
 800f9aa:	1aff      	subs	r7, r7, r3
 800f9ac:	4413      	add	r3, r2
 800f9ae:	602b      	str	r3, [r5, #0]
 800f9b0:	4629      	mov	r1, r5
 800f9b2:	9803      	ldr	r0, [sp, #12]
 800f9b4:	f7ff fe05 	bl	800f5c2 <__ssrefill_r>
 800f9b8:	2800      	cmp	r0, #0
 800f9ba:	d0f1      	beq.n	800f9a0 <__ssvfiscanf_r+0x334>
 800f9bc:	2c00      	cmp	r4, #0
 800f9be:	f43f af17 	beq.w	800f7f0 <__ssvfiscanf_r+0x184>
 800f9c2:	44a0      	add	r8, r4
 800f9c4:	e669      	b.n	800f69a <__ssvfiscanf_r+0x2e>
 800f9c6:	1bdb      	subs	r3, r3, r7
 800f9c8:	443c      	add	r4, r7
 800f9ca:	4417      	add	r7, r2
 800f9cc:	606b      	str	r3, [r5, #4]
 800f9ce:	602f      	str	r7, [r5, #0]
 800f9d0:	e7f7      	b.n	800f9c2 <__ssvfiscanf_r+0x356>
 800f9d2:	9500      	str	r5, [sp, #0]
 800f9d4:	463b      	mov	r3, r7
 800f9d6:	2201      	movs	r2, #1
 800f9d8:	6831      	ldr	r1, [r6, #0]
 800f9da:	9803      	ldr	r0, [sp, #12]
 800f9dc:	1d34      	adds	r4, r6, #4
 800f9de:	f7ff fe0d 	bl	800f5fc <_sfread_r>
 800f9e2:	2800      	cmp	r0, #0
 800f9e4:	f43f af04 	beq.w	800f7f0 <__ssvfiscanf_r+0x184>
 800f9e8:	4480      	add	r8, r0
 800f9ea:	9b04      	ldr	r3, [sp, #16]
 800f9ec:	3301      	adds	r3, #1
 800f9ee:	9304      	str	r3, [sp, #16]
 800f9f0:	4626      	mov	r6, r4
 800f9f2:	e652      	b.n	800f69a <__ssvfiscanf_r+0x2e>
 800f9f4:	2f00      	cmp	r7, #0
 800f9f6:	bf08      	it	eq
 800f9f8:	f04f 37ff 	moveq.w	r7, #4294967295
 800f9fc:	b1fc      	cbz	r4, 800fa3e <__ssvfiscanf_r+0x3d2>
 800f9fe:	2400      	movs	r4, #0
 800fa00:	f10d 0a58 	add.w	sl, sp, #88	; 0x58
 800fa04:	682b      	ldr	r3, [r5, #0]
 800fa06:	781a      	ldrb	r2, [r3, #0]
 800fa08:	f81a 2002 	ldrb.w	r2, [sl, r2]
 800fa0c:	b932      	cbnz	r2, 800fa1c <__ssvfiscanf_r+0x3b0>
 800fa0e:	2c00      	cmp	r4, #0
 800fa10:	d1d7      	bne.n	800f9c2 <__ssvfiscanf_r+0x356>
 800fa12:	e6e3      	b.n	800f7dc <__ssvfiscanf_r+0x170>
 800fa14:	08010349 	.word	0x08010349
 800fa18:	0800f4f9 	.word	0x0800f4f9
 800fa1c:	686a      	ldr	r2, [r5, #4]
 800fa1e:	3401      	adds	r4, #1
 800fa20:	3a01      	subs	r2, #1
 800fa22:	3301      	adds	r3, #1
 800fa24:	42a7      	cmp	r7, r4
 800fa26:	606a      	str	r2, [r5, #4]
 800fa28:	602b      	str	r3, [r5, #0]
 800fa2a:	d0ca      	beq.n	800f9c2 <__ssvfiscanf_r+0x356>
 800fa2c:	2a00      	cmp	r2, #0
 800fa2e:	dce9      	bgt.n	800fa04 <__ssvfiscanf_r+0x398>
 800fa30:	4629      	mov	r1, r5
 800fa32:	9803      	ldr	r0, [sp, #12]
 800fa34:	f7ff fdc5 	bl	800f5c2 <__ssrefill_r>
 800fa38:	2800      	cmp	r0, #0
 800fa3a:	d0e3      	beq.n	800fa04 <__ssvfiscanf_r+0x398>
 800fa3c:	e7c1      	b.n	800f9c2 <__ssvfiscanf_r+0x356>
 800fa3e:	6834      	ldr	r4, [r6, #0]
 800fa40:	f106 0a04 	add.w	sl, r6, #4
 800fa44:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
 800fa48:	4626      	mov	r6, r4
 800fa4a:	682b      	ldr	r3, [r5, #0]
 800fa4c:	781a      	ldrb	r2, [r3, #0]
 800fa4e:	f81b 2002 	ldrb.w	r2, [fp, r2]
 800fa52:	b1b2      	cbz	r2, 800fa82 <__ssvfiscanf_r+0x416>
 800fa54:	686a      	ldr	r2, [r5, #4]
 800fa56:	3a01      	subs	r2, #1
 800fa58:	606a      	str	r2, [r5, #4]
 800fa5a:	1c5a      	adds	r2, r3, #1
 800fa5c:	602a      	str	r2, [r5, #0]
 800fa5e:	781b      	ldrb	r3, [r3, #0]
 800fa60:	f806 3b01 	strb.w	r3, [r6], #1
 800fa64:	1bbb      	subs	r3, r7, r6
 800fa66:	42dc      	cmn	r4, r3
 800fa68:	d00b      	beq.n	800fa82 <__ssvfiscanf_r+0x416>
 800fa6a:	686b      	ldr	r3, [r5, #4]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	dcec      	bgt.n	800fa4a <__ssvfiscanf_r+0x3de>
 800fa70:	4629      	mov	r1, r5
 800fa72:	9803      	ldr	r0, [sp, #12]
 800fa74:	f7ff fda5 	bl	800f5c2 <__ssrefill_r>
 800fa78:	2800      	cmp	r0, #0
 800fa7a:	d0e6      	beq.n	800fa4a <__ssvfiscanf_r+0x3de>
 800fa7c:	42b4      	cmp	r4, r6
 800fa7e:	f43f aeb7 	beq.w	800f7f0 <__ssvfiscanf_r+0x184>
 800fa82:	1b34      	subs	r4, r6, r4
 800fa84:	f43f aeaa 	beq.w	800f7dc <__ssvfiscanf_r+0x170>
 800fa88:	2300      	movs	r3, #0
 800fa8a:	7033      	strb	r3, [r6, #0]
 800fa8c:	9b04      	ldr	r3, [sp, #16]
 800fa8e:	3301      	adds	r3, #1
 800fa90:	9304      	str	r3, [sp, #16]
 800fa92:	4656      	mov	r6, sl
 800fa94:	e795      	b.n	800f9c2 <__ssvfiscanf_r+0x356>
 800fa96:	2f00      	cmp	r7, #0
 800fa98:	bf08      	it	eq
 800fa9a:	f04f 37ff 	moveq.w	r7, #4294967295
 800fa9e:	f01a 0b01 	ands.w	fp, sl, #1
 800faa2:	f00a 0410 	and.w	r4, sl, #16
 800faa6:	d06a      	beq.n	800fb7e <__ssvfiscanf_r+0x512>
 800faa8:	2208      	movs	r2, #8
 800faaa:	2100      	movs	r1, #0
 800faac:	a80a      	add	r0, sp, #40	; 0x28
 800faae:	f7fa f9a2 	bl	8009df6 <memset>
 800fab2:	2c00      	cmp	r4, #0
 800fab4:	d13e      	bne.n	800fb34 <__ssvfiscanf_r+0x4c8>
 800fab6:	f8d6 a000 	ldr.w	sl, [r6]
 800faba:	3604      	adds	r6, #4
 800fabc:	2300      	movs	r3, #0
 800fabe:	9307      	str	r3, [sp, #28]
 800fac0:	f7fe fdf0 	bl	800e6a4 <__locale_ctype_ptr>
 800fac4:	682a      	ldr	r2, [r5, #0]
 800fac6:	7812      	ldrb	r2, [r2, #0]
 800fac8:	4410      	add	r0, r2
 800faca:	7842      	ldrb	r2, [r0, #1]
 800facc:	0711      	lsls	r1, r2, #28
 800face:	d42b      	bmi.n	800fb28 <__ssvfiscanf_r+0x4bc>
 800fad0:	9b07      	ldr	r3, [sp, #28]
 800fad2:	b34f      	cbz	r7, 800fb28 <__ssvfiscanf_r+0x4bc>
 800fad4:	9307      	str	r3, [sp, #28]
 800fad6:	f7fe fdd3 	bl	800e680 <__locale_mb_cur_max>
 800fada:	9b07      	ldr	r3, [sp, #28]
 800fadc:	4283      	cmp	r3, r0
 800fade:	f43f ae87 	beq.w	800f7f0 <__ssvfiscanf_r+0x184>
 800fae2:	682a      	ldr	r2, [r5, #0]
 800fae4:	a80c      	add	r0, sp, #48	; 0x30
 800fae6:	f812 1b01 	ldrb.w	r1, [r2], #1
 800faea:	54c1      	strb	r1, [r0, r3]
 800faec:	f103 0b01 	add.w	fp, r3, #1
 800faf0:	686b      	ldr	r3, [r5, #4]
 800faf2:	3b01      	subs	r3, #1
 800faf4:	e885 000c 	stmia.w	r5, {r2, r3}
 800faf8:	ab0a      	add	r3, sp, #40	; 0x28
 800fafa:	9300      	str	r3, [sp, #0]
 800fafc:	4602      	mov	r2, r0
 800fafe:	465b      	mov	r3, fp
 800fb00:	4651      	mov	r1, sl
 800fb02:	9803      	ldr	r0, [sp, #12]
 800fb04:	f000 fb32 	bl	801016c <_mbrtowc_r>
 800fb08:	1c43      	adds	r3, r0, #1
 800fb0a:	f43f ae71 	beq.w	800f7f0 <__ssvfiscanf_r+0x184>
 800fb0e:	b9a0      	cbnz	r0, 800fb3a <__ssvfiscanf_r+0x4ce>
 800fb10:	f8ca 0000 	str.w	r0, [sl]
 800fb14:	f8da 0000 	ldr.w	r0, [sl]
 800fb18:	f000 fb08 	bl	801012c <iswspace>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	b1c8      	cbz	r0, 800fb54 <__ssvfiscanf_r+0x4e8>
 800fb20:	af0c      	add	r7, sp, #48	; 0x30
 800fb22:	f1bb 0f00 	cmp.w	fp, #0
 800fb26:	d10c      	bne.n	800fb42 <__ssvfiscanf_r+0x4d6>
 800fb28:	2c00      	cmp	r4, #0
 800fb2a:	f47f adb6 	bne.w	800f69a <__ssvfiscanf_r+0x2e>
 800fb2e:	f8ca 4000 	str.w	r4, [sl]
 800fb32:	e72e      	b.n	800f992 <__ssvfiscanf_r+0x326>
 800fb34:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
 800fb38:	e7c0      	b.n	800fabc <__ssvfiscanf_r+0x450>
 800fb3a:	3002      	adds	r0, #2
 800fb3c:	d1ea      	bne.n	800fb14 <__ssvfiscanf_r+0x4a8>
 800fb3e:	465b      	mov	r3, fp
 800fb40:	e00e      	b.n	800fb60 <__ssvfiscanf_r+0x4f4>
 800fb42:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fb46:	462a      	mov	r2, r5
 800fb48:	f817 100b 	ldrb.w	r1, [r7, fp]
 800fb4c:	9803      	ldr	r0, [sp, #12]
 800fb4e:	f7ff fcfb 	bl	800f548 <_sungetc_r>
 800fb52:	e7e6      	b.n	800fb22 <__ssvfiscanf_r+0x4b6>
 800fb54:	44d8      	add	r8, fp
 800fb56:	3f01      	subs	r7, #1
 800fb58:	b914      	cbnz	r4, 800fb60 <__ssvfiscanf_r+0x4f4>
 800fb5a:	f10a 0a04 	add.w	sl, sl, #4
 800fb5e:	4623      	mov	r3, r4
 800fb60:	686a      	ldr	r2, [r5, #4]
 800fb62:	2a00      	cmp	r2, #0
 800fb64:	dcab      	bgt.n	800fabe <__ssvfiscanf_r+0x452>
 800fb66:	4629      	mov	r1, r5
 800fb68:	9803      	ldr	r0, [sp, #12]
 800fb6a:	9307      	str	r3, [sp, #28]
 800fb6c:	f7ff fd29 	bl	800f5c2 <__ssrefill_r>
 800fb70:	9b07      	ldr	r3, [sp, #28]
 800fb72:	2800      	cmp	r0, #0
 800fb74:	d0a3      	beq.n	800fabe <__ssvfiscanf_r+0x452>
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	f47f ae3a 	bne.w	800f7f0 <__ssvfiscanf_r+0x184>
 800fb7c:	e7d4      	b.n	800fb28 <__ssvfiscanf_r+0x4bc>
 800fb7e:	2c00      	cmp	r4, #0
 800fb80:	d136      	bne.n	800fbf0 <__ssvfiscanf_r+0x584>
 800fb82:	f8d6 a000 	ldr.w	sl, [r6]
 800fb86:	1d34      	adds	r4, r6, #4
 800fb88:	4656      	mov	r6, sl
 800fb8a:	f7fe fd8b 	bl	800e6a4 <__locale_ctype_ptr>
 800fb8e:	682a      	ldr	r2, [r5, #0]
 800fb90:	7813      	ldrb	r3, [r2, #0]
 800fb92:	4418      	add	r0, r3
 800fb94:	7843      	ldrb	r3, [r0, #1]
 800fb96:	071b      	lsls	r3, r3, #28
 800fb98:	d414      	bmi.n	800fbc4 <__ssvfiscanf_r+0x558>
 800fb9a:	686b      	ldr	r3, [r5, #4]
 800fb9c:	3b01      	subs	r3, #1
 800fb9e:	606b      	str	r3, [r5, #4]
 800fba0:	1c53      	adds	r3, r2, #1
 800fba2:	602b      	str	r3, [r5, #0]
 800fba4:	7813      	ldrb	r3, [r2, #0]
 800fba6:	f806 3b01 	strb.w	r3, [r6], #1
 800fbaa:	1bbb      	subs	r3, r7, r6
 800fbac:	eb1a 0f03 	cmn.w	sl, r3
 800fbb0:	d008      	beq.n	800fbc4 <__ssvfiscanf_r+0x558>
 800fbb2:	686b      	ldr	r3, [r5, #4]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	dce8      	bgt.n	800fb8a <__ssvfiscanf_r+0x51e>
 800fbb8:	4629      	mov	r1, r5
 800fbba:	9803      	ldr	r0, [sp, #12]
 800fbbc:	f7ff fd01 	bl	800f5c2 <__ssrefill_r>
 800fbc0:	2800      	cmp	r0, #0
 800fbc2:	d0e2      	beq.n	800fb8a <__ssvfiscanf_r+0x51e>
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	7033      	strb	r3, [r6, #0]
 800fbc8:	eba6 060a 	sub.w	r6, r6, sl
 800fbcc:	44b0      	add	r8, r6
 800fbce:	e70c      	b.n	800f9ea <__ssvfiscanf_r+0x37e>
 800fbd0:	686a      	ldr	r2, [r5, #4]
 800fbd2:	f10b 0b01 	add.w	fp, fp, #1
 800fbd6:	3a01      	subs	r2, #1
 800fbd8:	3301      	adds	r3, #1
 800fbda:	455f      	cmp	r7, fp
 800fbdc:	606a      	str	r2, [r5, #4]
 800fbde:	602b      	str	r3, [r5, #0]
 800fbe0:	d00e      	beq.n	800fc00 <__ssvfiscanf_r+0x594>
 800fbe2:	2a00      	cmp	r2, #0
 800fbe4:	dc04      	bgt.n	800fbf0 <__ssvfiscanf_r+0x584>
 800fbe6:	4629      	mov	r1, r5
 800fbe8:	9803      	ldr	r0, [sp, #12]
 800fbea:	f7ff fcea 	bl	800f5c2 <__ssrefill_r>
 800fbee:	b938      	cbnz	r0, 800fc00 <__ssvfiscanf_r+0x594>
 800fbf0:	f7fe fd58 	bl	800e6a4 <__locale_ctype_ptr>
 800fbf4:	682b      	ldr	r3, [r5, #0]
 800fbf6:	781a      	ldrb	r2, [r3, #0]
 800fbf8:	4410      	add	r0, r2
 800fbfa:	7842      	ldrb	r2, [r0, #1]
 800fbfc:	0712      	lsls	r2, r2, #28
 800fbfe:	d5e7      	bpl.n	800fbd0 <__ssvfiscanf_r+0x564>
 800fc00:	44d8      	add	r8, fp
 800fc02:	e54a      	b.n	800f69a <__ssvfiscanf_r+0x2e>
 800fc04:	1e7b      	subs	r3, r7, #1
 800fc06:	2b26      	cmp	r3, #38	; 0x26
 800fc08:	bf88      	it	hi
 800fc0a:	f1a7 0327 	subhi.w	r3, r7, #39	; 0x27
 800fc0e:	f44a 6458 	orr.w	r4, sl, #3456	; 0xd80
 800fc12:	bf8c      	ite	hi
 800fc14:	2727      	movhi	r7, #39	; 0x27
 800fc16:	2300      	movls	r3, #0
 800fc18:	f04f 0b00 	mov.w	fp, #0
 800fc1c:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 800fc20:	6829      	ldr	r1, [r5, #0]
 800fc22:	780a      	ldrb	r2, [r1, #0]
 800fc24:	2a39      	cmp	r2, #57	; 0x39
 800fc26:	d82d      	bhi.n	800fc84 <__ssvfiscanf_r+0x618>
 800fc28:	2a38      	cmp	r2, #56	; 0x38
 800fc2a:	d270      	bcs.n	800fd0e <__ssvfiscanf_r+0x6a2>
 800fc2c:	2a30      	cmp	r2, #48	; 0x30
 800fc2e:	d045      	beq.n	800fcbc <__ssvfiscanf_r+0x650>
 800fc30:	d867      	bhi.n	800fd02 <__ssvfiscanf_r+0x696>
 800fc32:	2a2b      	cmp	r2, #43	; 0x2b
 800fc34:	d072      	beq.n	800fd1c <__ssvfiscanf_r+0x6b0>
 800fc36:	2a2d      	cmp	r2, #45	; 0x2d
 800fc38:	d070      	beq.n	800fd1c <__ssvfiscanf_r+0x6b0>
 800fc3a:	05e3      	lsls	r3, r4, #23
 800fc3c:	d50f      	bpl.n	800fc5e <__ssvfiscanf_r+0x5f2>
 800fc3e:	ab0c      	add	r3, sp, #48	; 0x30
 800fc40:	459a      	cmp	sl, r3
 800fc42:	d908      	bls.n	800fc56 <__ssvfiscanf_r+0x5ea>
 800fc44:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
 800fc48:	9803      	ldr	r0, [sp, #12]
 800fc4a:	462a      	mov	r2, r5
 800fc4c:	f7ff fc7c 	bl	800f548 <_sungetc_r>
 800fc50:	f10a 37ff 	add.w	r7, sl, #4294967295
 800fc54:	46ba      	mov	sl, r7
 800fc56:	ab0c      	add	r3, sp, #48	; 0x30
 800fc58:	459a      	cmp	sl, r3
 800fc5a:	f43f adbf 	beq.w	800f7dc <__ssvfiscanf_r+0x170>
 800fc5e:	f014 0210 	ands.w	r2, r4, #16
 800fc62:	f040 8085 	bne.w	800fd70 <__ssvfiscanf_r+0x704>
 800fc66:	464b      	mov	r3, r9
 800fc68:	a90c      	add	r1, sp, #48	; 0x30
 800fc6a:	9803      	ldr	r0, [sp, #12]
 800fc6c:	9f05      	ldr	r7, [sp, #20]
 800fc6e:	f88a 2000 	strb.w	r2, [sl]
 800fc72:	47b8      	blx	r7
 800fc74:	f014 0f20 	tst.w	r4, #32
 800fc78:	f106 0304 	add.w	r3, r6, #4
 800fc7c:	d05c      	beq.n	800fd38 <__ssvfiscanf_r+0x6cc>
 800fc7e:	6832      	ldr	r2, [r6, #0]
 800fc80:	6010      	str	r0, [r2, #0]
 800fc82:	e05d      	b.n	800fd40 <__ssvfiscanf_r+0x6d4>
 800fc84:	2a58      	cmp	r2, #88	; 0x58
 800fc86:	d00d      	beq.n	800fca4 <__ssvfiscanf_r+0x638>
 800fc88:	d806      	bhi.n	800fc98 <__ssvfiscanf_r+0x62c>
 800fc8a:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
 800fc8e:	2805      	cmp	r0, #5
 800fc90:	d8d3      	bhi.n	800fc3a <__ssvfiscanf_r+0x5ce>
 800fc92:	f1b9 0f0a 	cmp.w	r9, #10
 800fc96:	e03f      	b.n	800fd18 <__ssvfiscanf_r+0x6ac>
 800fc98:	2a61      	cmp	r2, #97	; 0x61
 800fc9a:	d3ce      	bcc.n	800fc3a <__ssvfiscanf_r+0x5ce>
 800fc9c:	2a66      	cmp	r2, #102	; 0x66
 800fc9e:	d9f8      	bls.n	800fc92 <__ssvfiscanf_r+0x626>
 800fca0:	2a78      	cmp	r2, #120	; 0x78
 800fca2:	d1ca      	bne.n	800fc3a <__ssvfiscanf_r+0x5ce>
 800fca4:	f404 60c0 	and.w	r0, r4, #1536	; 0x600
 800fca8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800fcac:	d1c5      	bne.n	800fc3a <__ssvfiscanf_r+0x5ce>
 800fcae:	f424 7400 	bic.w	r4, r4, #512	; 0x200
 800fcb2:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
 800fcb6:	f04f 0910 	mov.w	r9, #16
 800fcba:	e00c      	b.n	800fcd6 <__ssvfiscanf_r+0x66a>
 800fcbc:	0520      	lsls	r0, r4, #20
 800fcbe:	d50a      	bpl.n	800fcd6 <__ssvfiscanf_r+0x66a>
 800fcc0:	f1b9 0f00 	cmp.w	r9, #0
 800fcc4:	d103      	bne.n	800fcce <__ssvfiscanf_r+0x662>
 800fcc6:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 800fcca:	f04f 0908 	mov.w	r9, #8
 800fcce:	0560      	lsls	r0, r4, #21
 800fcd0:	d506      	bpl.n	800fce0 <__ssvfiscanf_r+0x674>
 800fcd2:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
 800fcd6:	f88a 2000 	strb.w	r2, [sl]
 800fcda:	f10a 0a01 	add.w	sl, sl, #1
 800fcde:	e006      	b.n	800fcee <__ssvfiscanf_r+0x682>
 800fce0:	f424 7460 	bic.w	r4, r4, #896	; 0x380
 800fce4:	b10b      	cbz	r3, 800fcea <__ssvfiscanf_r+0x67e>
 800fce6:	3b01      	subs	r3, #1
 800fce8:	3701      	adds	r7, #1
 800fcea:	f10b 0b01 	add.w	fp, fp, #1
 800fcee:	686a      	ldr	r2, [r5, #4]
 800fcf0:	3a01      	subs	r2, #1
 800fcf2:	2a00      	cmp	r2, #0
 800fcf4:	606a      	str	r2, [r5, #4]
 800fcf6:	dd16      	ble.n	800fd26 <__ssvfiscanf_r+0x6ba>
 800fcf8:	3101      	adds	r1, #1
 800fcfa:	6029      	str	r1, [r5, #0]
 800fcfc:	3f01      	subs	r7, #1
 800fcfe:	d18f      	bne.n	800fc20 <__ssvfiscanf_r+0x5b4>
 800fd00:	e79b      	b.n	800fc3a <__ssvfiscanf_r+0x5ce>
 800fd02:	481f      	ldr	r0, [pc, #124]	; (800fd80 <__ssvfiscanf_r+0x714>)
 800fd04:	f930 9019 	ldrsh.w	r9, [r0, r9, lsl #1]
 800fd08:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
 800fd0c:	e7e3      	b.n	800fcd6 <__ssvfiscanf_r+0x66a>
 800fd0e:	481c      	ldr	r0, [pc, #112]	; (800fd80 <__ssvfiscanf_r+0x714>)
 800fd10:	f930 9019 	ldrsh.w	r9, [r0, r9, lsl #1]
 800fd14:	f1b9 0f08 	cmp.w	r9, #8
 800fd18:	dcf6      	bgt.n	800fd08 <__ssvfiscanf_r+0x69c>
 800fd1a:	e78e      	b.n	800fc3a <__ssvfiscanf_r+0x5ce>
 800fd1c:	0620      	lsls	r0, r4, #24
 800fd1e:	d58c      	bpl.n	800fc3a <__ssvfiscanf_r+0x5ce>
 800fd20:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 800fd24:	e7d7      	b.n	800fcd6 <__ssvfiscanf_r+0x66a>
 800fd26:	4629      	mov	r1, r5
 800fd28:	9803      	ldr	r0, [sp, #12]
 800fd2a:	9307      	str	r3, [sp, #28]
 800fd2c:	f7ff fc49 	bl	800f5c2 <__ssrefill_r>
 800fd30:	9b07      	ldr	r3, [sp, #28]
 800fd32:	2800      	cmp	r0, #0
 800fd34:	d0e2      	beq.n	800fcfc <__ssvfiscanf_r+0x690>
 800fd36:	e780      	b.n	800fc3a <__ssvfiscanf_r+0x5ce>
 800fd38:	0767      	lsls	r7, r4, #29
 800fd3a:	d503      	bpl.n	800fd44 <__ssvfiscanf_r+0x6d8>
 800fd3c:	6832      	ldr	r2, [r6, #0]
 800fd3e:	8010      	strh	r0, [r2, #0]
 800fd40:	461e      	mov	r6, r3
 800fd42:	e012      	b.n	800fd6a <__ssvfiscanf_r+0x6fe>
 800fd44:	f014 0201 	ands.w	r2, r4, #1
 800fd48:	d199      	bne.n	800fc7e <__ssvfiscanf_r+0x612>
 800fd4a:	07a1      	lsls	r1, r4, #30
 800fd4c:	d597      	bpl.n	800fc7e <__ssvfiscanf_r+0x612>
 800fd4e:	9b05      	ldr	r3, [sp, #20]
 800fd50:	9803      	ldr	r0, [sp, #12]
 800fd52:	4619      	mov	r1, r3
 800fd54:	4b0b      	ldr	r3, [pc, #44]	; (800fd84 <__ssvfiscanf_r+0x718>)
 800fd56:	4299      	cmp	r1, r3
 800fd58:	464b      	mov	r3, r9
 800fd5a:	a90c      	add	r1, sp, #48	; 0x30
 800fd5c:	d10d      	bne.n	800fd7a <__ssvfiscanf_r+0x70e>
 800fd5e:	f000 fc5b 	bl	8010618 <_strtoull_r>
 800fd62:	6833      	ldr	r3, [r6, #0]
 800fd64:	e9c3 0100 	strd	r0, r1, [r3]
 800fd68:	3604      	adds	r6, #4
 800fd6a:	9b04      	ldr	r3, [sp, #16]
 800fd6c:	3301      	adds	r3, #1
 800fd6e:	9304      	str	r3, [sp, #16]
 800fd70:	ab0c      	add	r3, sp, #48	; 0x30
 800fd72:	ebaa 0a03 	sub.w	sl, sl, r3
 800fd76:	44d3      	add	fp, sl
 800fd78:	e742      	b.n	800fc00 <__ssvfiscanf_r+0x594>
 800fd7a:	f000 fb9b 	bl	80104b4 <_strtoll_r>
 800fd7e:	e7f0      	b.n	800fd62 <__ssvfiscanf_r+0x6f6>
 800fd80:	08010f74 	.word	0x08010f74
 800fd84:	0800f4f9 	.word	0x0800f4f9

0800fd88 <__submore>:
 800fd88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd8c:	460c      	mov	r4, r1
 800fd8e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800fd90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fd94:	4299      	cmp	r1, r3
 800fd96:	d11e      	bne.n	800fdd6 <__submore+0x4e>
 800fd98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fd9c:	f7f9 fe12 	bl	80099c4 <_malloc_r>
 800fda0:	b918      	cbnz	r0, 800fdaa <__submore+0x22>
 800fda2:	f04f 30ff 	mov.w	r0, #4294967295
 800fda6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fdae:	63a3      	str	r3, [r4, #56]	; 0x38
 800fdb0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800fdb4:	6360      	str	r0, [r4, #52]	; 0x34
 800fdb6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800fdba:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800fdbe:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800fdc2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800fdc6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800fdca:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800fdce:	6020      	str	r0, [r4, #0]
 800fdd0:	2000      	movs	r0, #0
 800fdd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdd6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800fdd8:	0077      	lsls	r7, r6, #1
 800fdda:	463a      	mov	r2, r7
 800fddc:	f7ff f906 	bl	800efec <_realloc_r>
 800fde0:	4605      	mov	r5, r0
 800fde2:	2800      	cmp	r0, #0
 800fde4:	d0dd      	beq.n	800fda2 <__submore+0x1a>
 800fde6:	eb00 0806 	add.w	r8, r0, r6
 800fdea:	4601      	mov	r1, r0
 800fdec:	4632      	mov	r2, r6
 800fdee:	4640      	mov	r0, r8
 800fdf0:	f7f9 fff6 	bl	8009de0 <memcpy>
 800fdf4:	f8c4 8000 	str.w	r8, [r4]
 800fdf8:	6365      	str	r5, [r4, #52]	; 0x34
 800fdfa:	63a7      	str	r7, [r4, #56]	; 0x38
 800fdfc:	e7e8      	b.n	800fdd0 <__submore+0x48>

0800fdfe <__sprint_r>:
 800fdfe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe02:	6893      	ldr	r3, [r2, #8]
 800fe04:	4680      	mov	r8, r0
 800fe06:	460f      	mov	r7, r1
 800fe08:	4614      	mov	r4, r2
 800fe0a:	b91b      	cbnz	r3, 800fe14 <__sprint_r+0x16>
 800fe0c:	6053      	str	r3, [r2, #4]
 800fe0e:	4618      	mov	r0, r3
 800fe10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe14:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800fe16:	049d      	lsls	r5, r3, #18
 800fe18:	d523      	bpl.n	800fe62 <__sprint_r+0x64>
 800fe1a:	6815      	ldr	r5, [r2, #0]
 800fe1c:	68a0      	ldr	r0, [r4, #8]
 800fe1e:	3508      	adds	r5, #8
 800fe20:	b920      	cbnz	r0, 800fe2c <__sprint_r+0x2e>
 800fe22:	2300      	movs	r3, #0
 800fe24:	60a3      	str	r3, [r4, #8]
 800fe26:	6063      	str	r3, [r4, #4]
 800fe28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe2c:	f855 6c04 	ldr.w	r6, [r5, #-4]
 800fe30:	f855 bc08 	ldr.w	fp, [r5, #-8]
 800fe34:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800fe38:	f04f 0900 	mov.w	r9, #0
 800fe3c:	45ca      	cmp	sl, r9
 800fe3e:	dc05      	bgt.n	800fe4c <__sprint_r+0x4e>
 800fe40:	68a3      	ldr	r3, [r4, #8]
 800fe42:	f026 0603 	bic.w	r6, r6, #3
 800fe46:	1b9e      	subs	r6, r3, r6
 800fe48:	60a6      	str	r6, [r4, #8]
 800fe4a:	e7e7      	b.n	800fe1c <__sprint_r+0x1e>
 800fe4c:	463a      	mov	r2, r7
 800fe4e:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800fe52:	4640      	mov	r0, r8
 800fe54:	f000 f91f 	bl	8010096 <_fputwc_r>
 800fe58:	1c43      	adds	r3, r0, #1
 800fe5a:	d0e2      	beq.n	800fe22 <__sprint_r+0x24>
 800fe5c:	f109 0901 	add.w	r9, r9, #1
 800fe60:	e7ec      	b.n	800fe3c <__sprint_r+0x3e>
 800fe62:	f7fd fe8b 	bl	800db7c <__sfvwrite_r>
 800fe66:	e7dc      	b.n	800fe22 <__sprint_r+0x24>

0800fe68 <__ascii_wctomb>:
 800fe68:	b149      	cbz	r1, 800fe7e <__ascii_wctomb+0x16>
 800fe6a:	2aff      	cmp	r2, #255	; 0xff
 800fe6c:	bf85      	ittet	hi
 800fe6e:	238a      	movhi	r3, #138	; 0x8a
 800fe70:	6003      	strhi	r3, [r0, #0]
 800fe72:	700a      	strbls	r2, [r1, #0]
 800fe74:	f04f 30ff 	movhi.w	r0, #4294967295
 800fe78:	bf98      	it	ls
 800fe7a:	2001      	movls	r0, #1
 800fe7c:	4770      	bx	lr
 800fe7e:	4608      	mov	r0, r1
 800fe80:	4770      	bx	lr
	...

0800fe84 <_write_r>:
 800fe84:	b538      	push	{r3, r4, r5, lr}
 800fe86:	4c07      	ldr	r4, [pc, #28]	; (800fea4 <_write_r+0x20>)
 800fe88:	4605      	mov	r5, r0
 800fe8a:	4608      	mov	r0, r1
 800fe8c:	4611      	mov	r1, r2
 800fe8e:	2200      	movs	r2, #0
 800fe90:	6022      	str	r2, [r4, #0]
 800fe92:	461a      	mov	r2, r3
 800fe94:	f7f9 fbbd 	bl	8009612 <_write>
 800fe98:	1c43      	adds	r3, r0, #1
 800fe9a:	d102      	bne.n	800fea2 <_write_r+0x1e>
 800fe9c:	6823      	ldr	r3, [r4, #0]
 800fe9e:	b103      	cbz	r3, 800fea2 <_write_r+0x1e>
 800fea0:	602b      	str	r3, [r5, #0]
 800fea2:	bd38      	pop	{r3, r4, r5, pc}
 800fea4:	200021fc 	.word	0x200021fc

0800fea8 <_calloc_r>:
 800fea8:	b510      	push	{r4, lr}
 800feaa:	4351      	muls	r1, r2
 800feac:	f7f9 fd8a 	bl	80099c4 <_malloc_r>
 800feb0:	4604      	mov	r4, r0
 800feb2:	b198      	cbz	r0, 800fedc <_calloc_r+0x34>
 800feb4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800feb8:	f022 0203 	bic.w	r2, r2, #3
 800febc:	3a04      	subs	r2, #4
 800febe:	2a24      	cmp	r2, #36	; 0x24
 800fec0:	d81b      	bhi.n	800fefa <_calloc_r+0x52>
 800fec2:	2a13      	cmp	r2, #19
 800fec4:	d917      	bls.n	800fef6 <_calloc_r+0x4e>
 800fec6:	2100      	movs	r1, #0
 800fec8:	2a1b      	cmp	r2, #27
 800feca:	6001      	str	r1, [r0, #0]
 800fecc:	6041      	str	r1, [r0, #4]
 800fece:	d807      	bhi.n	800fee0 <_calloc_r+0x38>
 800fed0:	f100 0308 	add.w	r3, r0, #8
 800fed4:	2200      	movs	r2, #0
 800fed6:	601a      	str	r2, [r3, #0]
 800fed8:	605a      	str	r2, [r3, #4]
 800feda:	609a      	str	r2, [r3, #8]
 800fedc:	4620      	mov	r0, r4
 800fede:	bd10      	pop	{r4, pc}
 800fee0:	2a24      	cmp	r2, #36	; 0x24
 800fee2:	6081      	str	r1, [r0, #8]
 800fee4:	60c1      	str	r1, [r0, #12]
 800fee6:	bf11      	iteee	ne
 800fee8:	f100 0310 	addne.w	r3, r0, #16
 800feec:	6101      	streq	r1, [r0, #16]
 800feee:	f100 0318 	addeq.w	r3, r0, #24
 800fef2:	6141      	streq	r1, [r0, #20]
 800fef4:	e7ee      	b.n	800fed4 <_calloc_r+0x2c>
 800fef6:	4603      	mov	r3, r0
 800fef8:	e7ec      	b.n	800fed4 <_calloc_r+0x2c>
 800fefa:	2100      	movs	r1, #0
 800fefc:	f7f9 ff7b 	bl	8009df6 <memset>
 800ff00:	e7ec      	b.n	800fedc <_calloc_r+0x34>
	...

0800ff04 <_close_r>:
 800ff04:	b538      	push	{r3, r4, r5, lr}
 800ff06:	4c06      	ldr	r4, [pc, #24]	; (800ff20 <_close_r+0x1c>)
 800ff08:	2300      	movs	r3, #0
 800ff0a:	4605      	mov	r5, r0
 800ff0c:	4608      	mov	r0, r1
 800ff0e:	6023      	str	r3, [r4, #0]
 800ff10:	f7f9 fbc8 	bl	80096a4 <_close>
 800ff14:	1c43      	adds	r3, r0, #1
 800ff16:	d102      	bne.n	800ff1e <_close_r+0x1a>
 800ff18:	6823      	ldr	r3, [r4, #0]
 800ff1a:	b103      	cbz	r3, 800ff1e <_close_r+0x1a>
 800ff1c:	602b      	str	r3, [r5, #0]
 800ff1e:	bd38      	pop	{r3, r4, r5, pc}
 800ff20:	200021fc 	.word	0x200021fc

0800ff24 <__env_lock>:
 800ff24:	4801      	ldr	r0, [pc, #4]	; (800ff2c <__env_lock+0x8>)
 800ff26:	f7fe bbde 	b.w	800e6e6 <__retarget_lock_acquire_recursive>
 800ff2a:	bf00      	nop
 800ff2c:	200021f2 	.word	0x200021f2

0800ff30 <__env_unlock>:
 800ff30:	4801      	ldr	r0, [pc, #4]	; (800ff38 <__env_unlock+0x8>)
 800ff32:	f7fe bbda 	b.w	800e6ea <__retarget_lock_release_recursive>
 800ff36:	bf00      	nop
 800ff38:	200021f2 	.word	0x200021f2

0800ff3c <_fclose_r>:
 800ff3c:	b570      	push	{r4, r5, r6, lr}
 800ff3e:	4605      	mov	r5, r0
 800ff40:	460c      	mov	r4, r1
 800ff42:	b911      	cbnz	r1, 800ff4a <_fclose_r+0xe>
 800ff44:	2600      	movs	r6, #0
 800ff46:	4630      	mov	r0, r6
 800ff48:	bd70      	pop	{r4, r5, r6, pc}
 800ff4a:	b118      	cbz	r0, 800ff54 <_fclose_r+0x18>
 800ff4c:	6983      	ldr	r3, [r0, #24]
 800ff4e:	b90b      	cbnz	r3, 800ff54 <_fclose_r+0x18>
 800ff50:	f7fd fc82 	bl	800d858 <__sinit>
 800ff54:	4b2c      	ldr	r3, [pc, #176]	; (8010008 <_fclose_r+0xcc>)
 800ff56:	429c      	cmp	r4, r3
 800ff58:	d114      	bne.n	800ff84 <_fclose_r+0x48>
 800ff5a:	686c      	ldr	r4, [r5, #4]
 800ff5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff5e:	07d8      	lsls	r0, r3, #31
 800ff60:	d405      	bmi.n	800ff6e <_fclose_r+0x32>
 800ff62:	89a3      	ldrh	r3, [r4, #12]
 800ff64:	0599      	lsls	r1, r3, #22
 800ff66:	d402      	bmi.n	800ff6e <_fclose_r+0x32>
 800ff68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff6a:	f7fe fbbc 	bl	800e6e6 <__retarget_lock_acquire_recursive>
 800ff6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff72:	b98b      	cbnz	r3, 800ff98 <_fclose_r+0x5c>
 800ff74:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800ff76:	f016 0601 	ands.w	r6, r6, #1
 800ff7a:	d1e3      	bne.n	800ff44 <_fclose_r+0x8>
 800ff7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff7e:	f7fe fbb4 	bl	800e6ea <__retarget_lock_release_recursive>
 800ff82:	e7e0      	b.n	800ff46 <_fclose_r+0xa>
 800ff84:	4b21      	ldr	r3, [pc, #132]	; (801000c <_fclose_r+0xd0>)
 800ff86:	429c      	cmp	r4, r3
 800ff88:	d101      	bne.n	800ff8e <_fclose_r+0x52>
 800ff8a:	68ac      	ldr	r4, [r5, #8]
 800ff8c:	e7e6      	b.n	800ff5c <_fclose_r+0x20>
 800ff8e:	4b20      	ldr	r3, [pc, #128]	; (8010010 <_fclose_r+0xd4>)
 800ff90:	429c      	cmp	r4, r3
 800ff92:	bf08      	it	eq
 800ff94:	68ec      	ldreq	r4, [r5, #12]
 800ff96:	e7e1      	b.n	800ff5c <_fclose_r+0x20>
 800ff98:	4621      	mov	r1, r4
 800ff9a:	4628      	mov	r0, r5
 800ff9c:	f7fd fb36 	bl	800d60c <__sflush_r>
 800ffa0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ffa2:	4606      	mov	r6, r0
 800ffa4:	b133      	cbz	r3, 800ffb4 <_fclose_r+0x78>
 800ffa6:	6a21      	ldr	r1, [r4, #32]
 800ffa8:	4628      	mov	r0, r5
 800ffaa:	4798      	blx	r3
 800ffac:	2800      	cmp	r0, #0
 800ffae:	bfb8      	it	lt
 800ffb0:	f04f 36ff 	movlt.w	r6, #4294967295
 800ffb4:	89a3      	ldrh	r3, [r4, #12]
 800ffb6:	061a      	lsls	r2, r3, #24
 800ffb8:	d503      	bpl.n	800ffc2 <_fclose_r+0x86>
 800ffba:	6921      	ldr	r1, [r4, #16]
 800ffbc:	4628      	mov	r0, r5
 800ffbe:	f7fd fd21 	bl	800da04 <_free_r>
 800ffc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ffc4:	b141      	cbz	r1, 800ffd8 <_fclose_r+0x9c>
 800ffc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ffca:	4299      	cmp	r1, r3
 800ffcc:	d002      	beq.n	800ffd4 <_fclose_r+0x98>
 800ffce:	4628      	mov	r0, r5
 800ffd0:	f7fd fd18 	bl	800da04 <_free_r>
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	6363      	str	r3, [r4, #52]	; 0x34
 800ffd8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ffda:	b121      	cbz	r1, 800ffe6 <_fclose_r+0xaa>
 800ffdc:	4628      	mov	r0, r5
 800ffde:	f7fd fd11 	bl	800da04 <_free_r>
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	64a3      	str	r3, [r4, #72]	; 0x48
 800ffe6:	f7fd fc1f 	bl	800d828 <__sfp_lock_acquire>
 800ffea:	2300      	movs	r3, #0
 800ffec:	81a3      	strh	r3, [r4, #12]
 800ffee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fff0:	07db      	lsls	r3, r3, #31
 800fff2:	d402      	bmi.n	800fffa <_fclose_r+0xbe>
 800fff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fff6:	f7fe fb78 	bl	800e6ea <__retarget_lock_release_recursive>
 800fffa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fffc:	f7fe fb71 	bl	800e6e2 <__retarget_lock_close_recursive>
 8010000:	f7fd fc18 	bl	800d834 <__sfp_lock_release>
 8010004:	e79f      	b.n	800ff46 <_fclose_r+0xa>
 8010006:	bf00      	nop
 8010008:	08010e28 	.word	0x08010e28
 801000c:	08010e48 	.word	0x08010e48
 8010010:	08010e08 	.word	0x08010e08

08010014 <__fputwc>:
 8010014:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010018:	4680      	mov	r8, r0
 801001a:	460e      	mov	r6, r1
 801001c:	4614      	mov	r4, r2
 801001e:	f7fe fb2f 	bl	800e680 <__locale_mb_cur_max>
 8010022:	2801      	cmp	r0, #1
 8010024:	d11c      	bne.n	8010060 <__fputwc+0x4c>
 8010026:	1e73      	subs	r3, r6, #1
 8010028:	2bfe      	cmp	r3, #254	; 0xfe
 801002a:	d819      	bhi.n	8010060 <__fputwc+0x4c>
 801002c:	f88d 6004 	strb.w	r6, [sp, #4]
 8010030:	4605      	mov	r5, r0
 8010032:	2700      	movs	r7, #0
 8010034:	f10d 0904 	add.w	r9, sp, #4
 8010038:	42af      	cmp	r7, r5
 801003a:	d020      	beq.n	801007e <__fputwc+0x6a>
 801003c:	68a3      	ldr	r3, [r4, #8]
 801003e:	f817 1009 	ldrb.w	r1, [r7, r9]
 8010042:	3b01      	subs	r3, #1
 8010044:	2b00      	cmp	r3, #0
 8010046:	60a3      	str	r3, [r4, #8]
 8010048:	da04      	bge.n	8010054 <__fputwc+0x40>
 801004a:	69a2      	ldr	r2, [r4, #24]
 801004c:	4293      	cmp	r3, r2
 801004e:	db1a      	blt.n	8010086 <__fputwc+0x72>
 8010050:	290a      	cmp	r1, #10
 8010052:	d018      	beq.n	8010086 <__fputwc+0x72>
 8010054:	6823      	ldr	r3, [r4, #0]
 8010056:	1c5a      	adds	r2, r3, #1
 8010058:	6022      	str	r2, [r4, #0]
 801005a:	7019      	strb	r1, [r3, #0]
 801005c:	3701      	adds	r7, #1
 801005e:	e7eb      	b.n	8010038 <__fputwc+0x24>
 8010060:	4632      	mov	r2, r6
 8010062:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8010066:	a901      	add	r1, sp, #4
 8010068:	4640      	mov	r0, r8
 801006a:	f000 fb45 	bl	80106f8 <_wcrtomb_r>
 801006e:	1c42      	adds	r2, r0, #1
 8010070:	4605      	mov	r5, r0
 8010072:	d1de      	bne.n	8010032 <__fputwc+0x1e>
 8010074:	89a3      	ldrh	r3, [r4, #12]
 8010076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801007a:	81a3      	strh	r3, [r4, #12]
 801007c:	4606      	mov	r6, r0
 801007e:	4630      	mov	r0, r6
 8010080:	b003      	add	sp, #12
 8010082:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010086:	4622      	mov	r2, r4
 8010088:	4640      	mov	r0, r8
 801008a:	f000 fad7 	bl	801063c <__swbuf_r>
 801008e:	1c43      	adds	r3, r0, #1
 8010090:	d1e4      	bne.n	801005c <__fputwc+0x48>
 8010092:	4606      	mov	r6, r0
 8010094:	e7f3      	b.n	801007e <__fputwc+0x6a>

08010096 <_fputwc_r>:
 8010096:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8010098:	07db      	lsls	r3, r3, #31
 801009a:	b570      	push	{r4, r5, r6, lr}
 801009c:	4605      	mov	r5, r0
 801009e:	460e      	mov	r6, r1
 80100a0:	4614      	mov	r4, r2
 80100a2:	d405      	bmi.n	80100b0 <_fputwc_r+0x1a>
 80100a4:	8993      	ldrh	r3, [r2, #12]
 80100a6:	0598      	lsls	r0, r3, #22
 80100a8:	d402      	bmi.n	80100b0 <_fputwc_r+0x1a>
 80100aa:	6d90      	ldr	r0, [r2, #88]	; 0x58
 80100ac:	f7fe fb1b 	bl	800e6e6 <__retarget_lock_acquire_recursive>
 80100b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80100b4:	0499      	lsls	r1, r3, #18
 80100b6:	d406      	bmi.n	80100c6 <_fputwc_r+0x30>
 80100b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80100bc:	81a3      	strh	r3, [r4, #12]
 80100be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80100c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80100c4:	6663      	str	r3, [r4, #100]	; 0x64
 80100c6:	4622      	mov	r2, r4
 80100c8:	4628      	mov	r0, r5
 80100ca:	4631      	mov	r1, r6
 80100cc:	f7ff ffa2 	bl	8010014 <__fputwc>
 80100d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80100d2:	07da      	lsls	r2, r3, #31
 80100d4:	4605      	mov	r5, r0
 80100d6:	d405      	bmi.n	80100e4 <_fputwc_r+0x4e>
 80100d8:	89a3      	ldrh	r3, [r4, #12]
 80100da:	059b      	lsls	r3, r3, #22
 80100dc:	d402      	bmi.n	80100e4 <_fputwc_r+0x4e>
 80100de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100e0:	f7fe fb03 	bl	800e6ea <__retarget_lock_release_recursive>
 80100e4:	4628      	mov	r0, r5
 80100e6:	bd70      	pop	{r4, r5, r6, pc}

080100e8 <_fstat_r>:
 80100e8:	b538      	push	{r3, r4, r5, lr}
 80100ea:	4c07      	ldr	r4, [pc, #28]	; (8010108 <_fstat_r+0x20>)
 80100ec:	2300      	movs	r3, #0
 80100ee:	4605      	mov	r5, r0
 80100f0:	4608      	mov	r0, r1
 80100f2:	4611      	mov	r1, r2
 80100f4:	6023      	str	r3, [r4, #0]
 80100f6:	f7f9 fae0 	bl	80096ba <_fstat>
 80100fa:	1c43      	adds	r3, r0, #1
 80100fc:	d102      	bne.n	8010104 <_fstat_r+0x1c>
 80100fe:	6823      	ldr	r3, [r4, #0]
 8010100:	b103      	cbz	r3, 8010104 <_fstat_r+0x1c>
 8010102:	602b      	str	r3, [r5, #0]
 8010104:	bd38      	pop	{r3, r4, r5, pc}
 8010106:	bf00      	nop
 8010108:	200021fc 	.word	0x200021fc

0801010c <_isatty_r>:
 801010c:	b538      	push	{r3, r4, r5, lr}
 801010e:	4c06      	ldr	r4, [pc, #24]	; (8010128 <_isatty_r+0x1c>)
 8010110:	2300      	movs	r3, #0
 8010112:	4605      	mov	r5, r0
 8010114:	4608      	mov	r0, r1
 8010116:	6023      	str	r3, [r4, #0]
 8010118:	f7f9 fade 	bl	80096d8 <_isatty>
 801011c:	1c43      	adds	r3, r0, #1
 801011e:	d102      	bne.n	8010126 <_isatty_r+0x1a>
 8010120:	6823      	ldr	r3, [r4, #0]
 8010122:	b103      	cbz	r3, 8010126 <_isatty_r+0x1a>
 8010124:	602b      	str	r3, [r5, #0]
 8010126:	bd38      	pop	{r3, r4, r5, pc}
 8010128:	200021fc 	.word	0x200021fc

0801012c <iswspace>:
 801012c:	28ff      	cmp	r0, #255	; 0xff
 801012e:	b510      	push	{r4, lr}
 8010130:	4604      	mov	r4, r0
 8010132:	d806      	bhi.n	8010142 <iswspace+0x16>
 8010134:	f7fe fab6 	bl	800e6a4 <__locale_ctype_ptr>
 8010138:	4420      	add	r0, r4
 801013a:	7840      	ldrb	r0, [r0, #1]
 801013c:	f000 0008 	and.w	r0, r0, #8
 8010140:	bd10      	pop	{r4, pc}
 8010142:	2000      	movs	r0, #0
 8010144:	bd10      	pop	{r4, pc}
	...

08010148 <_lseek_r>:
 8010148:	b538      	push	{r3, r4, r5, lr}
 801014a:	4c07      	ldr	r4, [pc, #28]	; (8010168 <_lseek_r+0x20>)
 801014c:	4605      	mov	r5, r0
 801014e:	4608      	mov	r0, r1
 8010150:	4611      	mov	r1, r2
 8010152:	2200      	movs	r2, #0
 8010154:	6022      	str	r2, [r4, #0]
 8010156:	461a      	mov	r2, r3
 8010158:	f7f9 fac8 	bl	80096ec <_lseek>
 801015c:	1c43      	adds	r3, r0, #1
 801015e:	d102      	bne.n	8010166 <_lseek_r+0x1e>
 8010160:	6823      	ldr	r3, [r4, #0]
 8010162:	b103      	cbz	r3, 8010166 <_lseek_r+0x1e>
 8010164:	602b      	str	r3, [r5, #0]
 8010166:	bd38      	pop	{r3, r4, r5, pc}
 8010168:	200021fc 	.word	0x200021fc

0801016c <_mbrtowc_r>:
 801016c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801016e:	9d08      	ldr	r5, [sp, #32]
 8010170:	4c11      	ldr	r4, [pc, #68]	; (80101b8 <_mbrtowc_r+0x4c>)
 8010172:	4606      	mov	r6, r0
 8010174:	4617      	mov	r7, r2
 8010176:	b9a2      	cbnz	r2, 80101a2 <_mbrtowc_r+0x36>
 8010178:	6823      	ldr	r3, [r4, #0]
 801017a:	4a10      	ldr	r2, [pc, #64]	; (80101bc <_mbrtowc_r+0x50>)
 801017c:	6a1b      	ldr	r3, [r3, #32]
 801017e:	9500      	str	r5, [sp, #0]
 8010180:	2b00      	cmp	r3, #0
 8010182:	bf08      	it	eq
 8010184:	4613      	moveq	r3, r2
 8010186:	4a0e      	ldr	r2, [pc, #56]	; (80101c0 <_mbrtowc_r+0x54>)
 8010188:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
 801018c:	4639      	mov	r1, r7
 801018e:	2301      	movs	r3, #1
 8010190:	47a0      	blx	r4
 8010192:	1c43      	adds	r3, r0, #1
 8010194:	bf01      	itttt	eq
 8010196:	2300      	moveq	r3, #0
 8010198:	602b      	streq	r3, [r5, #0]
 801019a:	238a      	moveq	r3, #138	; 0x8a
 801019c:	6033      	streq	r3, [r6, #0]
 801019e:	b003      	add	sp, #12
 80101a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101a2:	6824      	ldr	r4, [r4, #0]
 80101a4:	4f05      	ldr	r7, [pc, #20]	; (80101bc <_mbrtowc_r+0x50>)
 80101a6:	6a24      	ldr	r4, [r4, #32]
 80101a8:	9500      	str	r5, [sp, #0]
 80101aa:	2c00      	cmp	r4, #0
 80101ac:	bf08      	it	eq
 80101ae:	463c      	moveq	r4, r7
 80101b0:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 80101b4:	e7ec      	b.n	8010190 <_mbrtowc_r+0x24>
 80101b6:	bf00      	nop
 80101b8:	20000010 	.word	0x20000010
 80101bc:	2000055c 	.word	0x2000055c
 80101c0:	08010d11 	.word	0x08010d11

080101c4 <_read_r>:
 80101c4:	b538      	push	{r3, r4, r5, lr}
 80101c6:	4c07      	ldr	r4, [pc, #28]	; (80101e4 <_read_r+0x20>)
 80101c8:	4605      	mov	r5, r0
 80101ca:	4608      	mov	r0, r1
 80101cc:	4611      	mov	r1, r2
 80101ce:	2200      	movs	r2, #0
 80101d0:	6022      	str	r2, [r4, #0]
 80101d2:	461a      	mov	r2, r3
 80101d4:	f7f9 fa00 	bl	80095d8 <_read>
 80101d8:	1c43      	adds	r3, r0, #1
 80101da:	d102      	bne.n	80101e2 <_read_r+0x1e>
 80101dc:	6823      	ldr	r3, [r4, #0]
 80101de:	b103      	cbz	r3, 80101e2 <_read_r+0x1e>
 80101e0:	602b      	str	r3, [r5, #0]
 80101e2:	bd38      	pop	{r3, r4, r5, pc}
 80101e4:	200021fc 	.word	0x200021fc

080101e8 <__sccl>:
 80101e8:	b570      	push	{r4, r5, r6, lr}
 80101ea:	780b      	ldrb	r3, [r1, #0]
 80101ec:	2b5e      	cmp	r3, #94	; 0x5e
 80101ee:	bf13      	iteet	ne
 80101f0:	1c4a      	addne	r2, r1, #1
 80101f2:	1c8a      	addeq	r2, r1, #2
 80101f4:	784b      	ldrbeq	r3, [r1, #1]
 80101f6:	2100      	movne	r1, #0
 80101f8:	bf08      	it	eq
 80101fa:	2101      	moveq	r1, #1
 80101fc:	1e44      	subs	r4, r0, #1
 80101fe:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8010202:	f804 1f01 	strb.w	r1, [r4, #1]!
 8010206:	42a5      	cmp	r5, r4
 8010208:	d1fb      	bne.n	8010202 <__sccl+0x1a>
 801020a:	b913      	cbnz	r3, 8010212 <__sccl+0x2a>
 801020c:	3a01      	subs	r2, #1
 801020e:	4610      	mov	r0, r2
 8010210:	bd70      	pop	{r4, r5, r6, pc}
 8010212:	f081 0401 	eor.w	r4, r1, #1
 8010216:	54c4      	strb	r4, [r0, r3]
 8010218:	4611      	mov	r1, r2
 801021a:	780d      	ldrb	r5, [r1, #0]
 801021c:	2d2d      	cmp	r5, #45	; 0x2d
 801021e:	f101 0201 	add.w	r2, r1, #1
 8010222:	d006      	beq.n	8010232 <__sccl+0x4a>
 8010224:	2d5d      	cmp	r5, #93	; 0x5d
 8010226:	d0f2      	beq.n	801020e <__sccl+0x26>
 8010228:	b90d      	cbnz	r5, 801022e <__sccl+0x46>
 801022a:	460a      	mov	r2, r1
 801022c:	e7ef      	b.n	801020e <__sccl+0x26>
 801022e:	462b      	mov	r3, r5
 8010230:	e7f1      	b.n	8010216 <__sccl+0x2e>
 8010232:	784e      	ldrb	r6, [r1, #1]
 8010234:	2e5d      	cmp	r6, #93	; 0x5d
 8010236:	d0fa      	beq.n	801022e <__sccl+0x46>
 8010238:	42b3      	cmp	r3, r6
 801023a:	dcf8      	bgt.n	801022e <__sccl+0x46>
 801023c:	3102      	adds	r1, #2
 801023e:	3301      	adds	r3, #1
 8010240:	429e      	cmp	r6, r3
 8010242:	54c4      	strb	r4, [r0, r3]
 8010244:	dcfb      	bgt.n	801023e <__sccl+0x56>
 8010246:	e7e8      	b.n	801021a <__sccl+0x32>

08010248 <_strtol_l.isra.0>:
 8010248:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801024c:	4680      	mov	r8, r0
 801024e:	4689      	mov	r9, r1
 8010250:	4692      	mov	sl, r2
 8010252:	461f      	mov	r7, r3
 8010254:	468b      	mov	fp, r1
 8010256:	465d      	mov	r5, fp
 8010258:	980a      	ldr	r0, [sp, #40]	; 0x28
 801025a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801025e:	f7fe fa1d 	bl	800e69c <__locale_ctype_ptr_l>
 8010262:	4420      	add	r0, r4
 8010264:	7846      	ldrb	r6, [r0, #1]
 8010266:	f016 0608 	ands.w	r6, r6, #8
 801026a:	d10b      	bne.n	8010284 <_strtol_l.isra.0+0x3c>
 801026c:	2c2d      	cmp	r4, #45	; 0x2d
 801026e:	d10b      	bne.n	8010288 <_strtol_l.isra.0+0x40>
 8010270:	782c      	ldrb	r4, [r5, #0]
 8010272:	2601      	movs	r6, #1
 8010274:	f10b 0502 	add.w	r5, fp, #2
 8010278:	b167      	cbz	r7, 8010294 <_strtol_l.isra.0+0x4c>
 801027a:	2f10      	cmp	r7, #16
 801027c:	d114      	bne.n	80102a8 <_strtol_l.isra.0+0x60>
 801027e:	2c30      	cmp	r4, #48	; 0x30
 8010280:	d00a      	beq.n	8010298 <_strtol_l.isra.0+0x50>
 8010282:	e011      	b.n	80102a8 <_strtol_l.isra.0+0x60>
 8010284:	46ab      	mov	fp, r5
 8010286:	e7e6      	b.n	8010256 <_strtol_l.isra.0+0xe>
 8010288:	2c2b      	cmp	r4, #43	; 0x2b
 801028a:	bf04      	itt	eq
 801028c:	782c      	ldrbeq	r4, [r5, #0]
 801028e:	f10b 0502 	addeq.w	r5, fp, #2
 8010292:	e7f1      	b.n	8010278 <_strtol_l.isra.0+0x30>
 8010294:	2c30      	cmp	r4, #48	; 0x30
 8010296:	d127      	bne.n	80102e8 <_strtol_l.isra.0+0xa0>
 8010298:	782b      	ldrb	r3, [r5, #0]
 801029a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801029e:	2b58      	cmp	r3, #88	; 0x58
 80102a0:	d14b      	bne.n	801033a <_strtol_l.isra.0+0xf2>
 80102a2:	786c      	ldrb	r4, [r5, #1]
 80102a4:	2710      	movs	r7, #16
 80102a6:	3502      	adds	r5, #2
 80102a8:	2e00      	cmp	r6, #0
 80102aa:	bf0c      	ite	eq
 80102ac:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80102b0:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80102b4:	2200      	movs	r2, #0
 80102b6:	fbb1 fef7 	udiv	lr, r1, r7
 80102ba:	4610      	mov	r0, r2
 80102bc:	fb07 1c1e 	mls	ip, r7, lr, r1
 80102c0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80102c4:	2b09      	cmp	r3, #9
 80102c6:	d811      	bhi.n	80102ec <_strtol_l.isra.0+0xa4>
 80102c8:	461c      	mov	r4, r3
 80102ca:	42a7      	cmp	r7, r4
 80102cc:	dd1d      	ble.n	801030a <_strtol_l.isra.0+0xc2>
 80102ce:	1c53      	adds	r3, r2, #1
 80102d0:	d007      	beq.n	80102e2 <_strtol_l.isra.0+0x9a>
 80102d2:	4586      	cmp	lr, r0
 80102d4:	d316      	bcc.n	8010304 <_strtol_l.isra.0+0xbc>
 80102d6:	d101      	bne.n	80102dc <_strtol_l.isra.0+0x94>
 80102d8:	45a4      	cmp	ip, r4
 80102da:	db13      	blt.n	8010304 <_strtol_l.isra.0+0xbc>
 80102dc:	fb00 4007 	mla	r0, r0, r7, r4
 80102e0:	2201      	movs	r2, #1
 80102e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80102e6:	e7eb      	b.n	80102c0 <_strtol_l.isra.0+0x78>
 80102e8:	270a      	movs	r7, #10
 80102ea:	e7dd      	b.n	80102a8 <_strtol_l.isra.0+0x60>
 80102ec:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80102f0:	2b19      	cmp	r3, #25
 80102f2:	d801      	bhi.n	80102f8 <_strtol_l.isra.0+0xb0>
 80102f4:	3c37      	subs	r4, #55	; 0x37
 80102f6:	e7e8      	b.n	80102ca <_strtol_l.isra.0+0x82>
 80102f8:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80102fc:	2b19      	cmp	r3, #25
 80102fe:	d804      	bhi.n	801030a <_strtol_l.isra.0+0xc2>
 8010300:	3c57      	subs	r4, #87	; 0x57
 8010302:	e7e2      	b.n	80102ca <_strtol_l.isra.0+0x82>
 8010304:	f04f 32ff 	mov.w	r2, #4294967295
 8010308:	e7eb      	b.n	80102e2 <_strtol_l.isra.0+0x9a>
 801030a:	1c53      	adds	r3, r2, #1
 801030c:	d108      	bne.n	8010320 <_strtol_l.isra.0+0xd8>
 801030e:	2322      	movs	r3, #34	; 0x22
 8010310:	f8c8 3000 	str.w	r3, [r8]
 8010314:	4608      	mov	r0, r1
 8010316:	f1ba 0f00 	cmp.w	sl, #0
 801031a:	d107      	bne.n	801032c <_strtol_l.isra.0+0xe4>
 801031c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010320:	b106      	cbz	r6, 8010324 <_strtol_l.isra.0+0xdc>
 8010322:	4240      	negs	r0, r0
 8010324:	f1ba 0f00 	cmp.w	sl, #0
 8010328:	d00c      	beq.n	8010344 <_strtol_l.isra.0+0xfc>
 801032a:	b122      	cbz	r2, 8010336 <_strtol_l.isra.0+0xee>
 801032c:	3d01      	subs	r5, #1
 801032e:	f8ca 5000 	str.w	r5, [sl]
 8010332:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010336:	464d      	mov	r5, r9
 8010338:	e7f9      	b.n	801032e <_strtol_l.isra.0+0xe6>
 801033a:	2430      	movs	r4, #48	; 0x30
 801033c:	2f00      	cmp	r7, #0
 801033e:	d1b3      	bne.n	80102a8 <_strtol_l.isra.0+0x60>
 8010340:	2708      	movs	r7, #8
 8010342:	e7b1      	b.n	80102a8 <_strtol_l.isra.0+0x60>
 8010344:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010348 <_strtol_r>:
 8010348:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801034a:	4c06      	ldr	r4, [pc, #24]	; (8010364 <_strtol_r+0x1c>)
 801034c:	4d06      	ldr	r5, [pc, #24]	; (8010368 <_strtol_r+0x20>)
 801034e:	6824      	ldr	r4, [r4, #0]
 8010350:	6a24      	ldr	r4, [r4, #32]
 8010352:	2c00      	cmp	r4, #0
 8010354:	bf08      	it	eq
 8010356:	462c      	moveq	r4, r5
 8010358:	9400      	str	r4, [sp, #0]
 801035a:	f7ff ff75 	bl	8010248 <_strtol_l.isra.0>
 801035e:	b003      	add	sp, #12
 8010360:	bd30      	pop	{r4, r5, pc}
 8010362:	bf00      	nop
 8010364:	20000010 	.word	0x20000010
 8010368:	2000055c 	.word	0x2000055c

0801036c <_strtoll_l.isra.0>:
 801036c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010370:	b087      	sub	sp, #28
 8010372:	4688      	mov	r8, r1
 8010374:	9005      	str	r0, [sp, #20]
 8010376:	4693      	mov	fp, r2
 8010378:	461f      	mov	r7, r3
 801037a:	4689      	mov	r9, r1
 801037c:	464d      	mov	r5, r9
 801037e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010380:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010384:	f7fe f98a 	bl	800e69c <__locale_ctype_ptr_l>
 8010388:	4420      	add	r0, r4
 801038a:	7846      	ldrb	r6, [r0, #1]
 801038c:	f016 0608 	ands.w	r6, r6, #8
 8010390:	d10b      	bne.n	80103aa <_strtoll_l.isra.0+0x3e>
 8010392:	2c2d      	cmp	r4, #45	; 0x2d
 8010394:	d10b      	bne.n	80103ae <_strtoll_l.isra.0+0x42>
 8010396:	782c      	ldrb	r4, [r5, #0]
 8010398:	2601      	movs	r6, #1
 801039a:	f109 0502 	add.w	r5, r9, #2
 801039e:	b167      	cbz	r7, 80103ba <_strtoll_l.isra.0+0x4e>
 80103a0:	2f10      	cmp	r7, #16
 80103a2:	d114      	bne.n	80103ce <_strtoll_l.isra.0+0x62>
 80103a4:	2c30      	cmp	r4, #48	; 0x30
 80103a6:	d00a      	beq.n	80103be <_strtoll_l.isra.0+0x52>
 80103a8:	e011      	b.n	80103ce <_strtoll_l.isra.0+0x62>
 80103aa:	46a9      	mov	r9, r5
 80103ac:	e7e6      	b.n	801037c <_strtoll_l.isra.0+0x10>
 80103ae:	2c2b      	cmp	r4, #43	; 0x2b
 80103b0:	bf04      	itt	eq
 80103b2:	782c      	ldrbeq	r4, [r5, #0]
 80103b4:	f109 0502 	addeq.w	r5, r9, #2
 80103b8:	e7f1      	b.n	801039e <_strtoll_l.isra.0+0x32>
 80103ba:	2c30      	cmp	r4, #48	; 0x30
 80103bc:	d144      	bne.n	8010448 <_strtoll_l.isra.0+0xdc>
 80103be:	782b      	ldrb	r3, [r5, #0]
 80103c0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80103c4:	2b58      	cmp	r3, #88	; 0x58
 80103c6:	d170      	bne.n	80104aa <_strtoll_l.isra.0+0x13e>
 80103c8:	786c      	ldrb	r4, [r5, #1]
 80103ca:	2710      	movs	r7, #16
 80103cc:	3502      	adds	r5, #2
 80103ce:	2e00      	cmp	r6, #0
 80103d0:	d03c      	beq.n	801044c <_strtoll_l.isra.0+0xe0>
 80103d2:	f04f 0a00 	mov.w	sl, #0
 80103d6:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 80103da:	463a      	mov	r2, r7
 80103dc:	17fb      	asrs	r3, r7, #31
 80103de:	4650      	mov	r0, sl
 80103e0:	4649      	mov	r1, r9
 80103e2:	e9cd 2300 	strd	r2, r3, [sp]
 80103e6:	f7f0 fc5b 	bl	8000ca0 <__aeabi_uldivmod>
 80103ea:	17fb      	asrs	r3, r7, #31
 80103ec:	9204      	str	r2, [sp, #16]
 80103ee:	4650      	mov	r0, sl
 80103f0:	463a      	mov	r2, r7
 80103f2:	4649      	mov	r1, r9
 80103f4:	f7f0 fc54 	bl	8000ca0 <__aeabi_uldivmod>
 80103f8:	2300      	movs	r3, #0
 80103fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80103fe:	2000      	movs	r0, #0
 8010400:	2100      	movs	r1, #0
 8010402:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8010406:	2a09      	cmp	r2, #9
 8010408:	d825      	bhi.n	8010456 <_strtoll_l.isra.0+0xea>
 801040a:	4614      	mov	r4, r2
 801040c:	42a7      	cmp	r7, r4
 801040e:	dd31      	ble.n	8010474 <_strtoll_l.isra.0+0x108>
 8010410:	1c5a      	adds	r2, r3, #1
 8010412:	d016      	beq.n	8010442 <_strtoll_l.isra.0+0xd6>
 8010414:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010418:	428b      	cmp	r3, r1
 801041a:	bf08      	it	eq
 801041c:	4282      	cmpeq	r2, r0
 801041e:	d326      	bcc.n	801046e <_strtoll_l.isra.0+0x102>
 8010420:	d102      	bne.n	8010428 <_strtoll_l.isra.0+0xbc>
 8010422:	9b04      	ldr	r3, [sp, #16]
 8010424:	42a3      	cmp	r3, r4
 8010426:	db22      	blt.n	801046e <_strtoll_l.isra.0+0x102>
 8010428:	9b00      	ldr	r3, [sp, #0]
 801042a:	9a01      	ldr	r2, [sp, #4]
 801042c:	434b      	muls	r3, r1
 801042e:	fb00 3302 	mla	r3, r0, r2, r3
 8010432:	9a00      	ldr	r2, [sp, #0]
 8010434:	fba2 0100 	umull	r0, r1, r2, r0
 8010438:	4419      	add	r1, r3
 801043a:	1900      	adds	r0, r0, r4
 801043c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8010440:	2301      	movs	r3, #1
 8010442:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010446:	e7dc      	b.n	8010402 <_strtoll_l.isra.0+0x96>
 8010448:	270a      	movs	r7, #10
 801044a:	e7c0      	b.n	80103ce <_strtoll_l.isra.0+0x62>
 801044c:	f04f 3aff 	mov.w	sl, #4294967295
 8010450:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8010454:	e7c1      	b.n	80103da <_strtoll_l.isra.0+0x6e>
 8010456:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 801045a:	2a19      	cmp	r2, #25
 801045c:	d801      	bhi.n	8010462 <_strtoll_l.isra.0+0xf6>
 801045e:	3c37      	subs	r4, #55	; 0x37
 8010460:	e7d4      	b.n	801040c <_strtoll_l.isra.0+0xa0>
 8010462:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8010466:	2a19      	cmp	r2, #25
 8010468:	d804      	bhi.n	8010474 <_strtoll_l.isra.0+0x108>
 801046a:	3c57      	subs	r4, #87	; 0x57
 801046c:	e7ce      	b.n	801040c <_strtoll_l.isra.0+0xa0>
 801046e:	f04f 33ff 	mov.w	r3, #4294967295
 8010472:	e7e6      	b.n	8010442 <_strtoll_l.isra.0+0xd6>
 8010474:	1c5a      	adds	r2, r3, #1
 8010476:	d10a      	bne.n	801048e <_strtoll_l.isra.0+0x122>
 8010478:	9a05      	ldr	r2, [sp, #20]
 801047a:	2322      	movs	r3, #34	; 0x22
 801047c:	6013      	str	r3, [r2, #0]
 801047e:	4650      	mov	r0, sl
 8010480:	4649      	mov	r1, r9
 8010482:	f1bb 0f00 	cmp.w	fp, #0
 8010486:	d10a      	bne.n	801049e <_strtoll_l.isra.0+0x132>
 8010488:	b007      	add	sp, #28
 801048a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801048e:	b116      	cbz	r6, 8010496 <_strtoll_l.isra.0+0x12a>
 8010490:	4240      	negs	r0, r0
 8010492:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010496:	f1bb 0f00 	cmp.w	fp, #0
 801049a:	d0f5      	beq.n	8010488 <_strtoll_l.isra.0+0x11c>
 801049c:	b11b      	cbz	r3, 80104a6 <_strtoll_l.isra.0+0x13a>
 801049e:	3d01      	subs	r5, #1
 80104a0:	f8cb 5000 	str.w	r5, [fp]
 80104a4:	e7f0      	b.n	8010488 <_strtoll_l.isra.0+0x11c>
 80104a6:	4645      	mov	r5, r8
 80104a8:	e7fa      	b.n	80104a0 <_strtoll_l.isra.0+0x134>
 80104aa:	2430      	movs	r4, #48	; 0x30
 80104ac:	2f00      	cmp	r7, #0
 80104ae:	d18e      	bne.n	80103ce <_strtoll_l.isra.0+0x62>
 80104b0:	2708      	movs	r7, #8
 80104b2:	e78c      	b.n	80103ce <_strtoll_l.isra.0+0x62>

080104b4 <_strtoll_r>:
 80104b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80104b6:	4c06      	ldr	r4, [pc, #24]	; (80104d0 <_strtoll_r+0x1c>)
 80104b8:	4d06      	ldr	r5, [pc, #24]	; (80104d4 <_strtoll_r+0x20>)
 80104ba:	6824      	ldr	r4, [r4, #0]
 80104bc:	6a24      	ldr	r4, [r4, #32]
 80104be:	2c00      	cmp	r4, #0
 80104c0:	bf08      	it	eq
 80104c2:	462c      	moveq	r4, r5
 80104c4:	9400      	str	r4, [sp, #0]
 80104c6:	f7ff ff51 	bl	801036c <_strtoll_l.isra.0>
 80104ca:	b003      	add	sp, #12
 80104cc:	bd30      	pop	{r4, r5, pc}
 80104ce:	bf00      	nop
 80104d0:	20000010 	.word	0x20000010
 80104d4:	2000055c 	.word	0x2000055c

080104d8 <_strtoull_l.isra.0>:
 80104d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104dc:	b085      	sub	sp, #20
 80104de:	4688      	mov	r8, r1
 80104e0:	9003      	str	r0, [sp, #12]
 80104e2:	4691      	mov	r9, r2
 80104e4:	461f      	mov	r7, r3
 80104e6:	468b      	mov	fp, r1
 80104e8:	465d      	mov	r5, fp
 80104ea:	980e      	ldr	r0, [sp, #56]	; 0x38
 80104ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80104f0:	f7fe f8d4 	bl	800e69c <__locale_ctype_ptr_l>
 80104f4:	4420      	add	r0, r4
 80104f6:	7846      	ldrb	r6, [r0, #1]
 80104f8:	f016 0608 	ands.w	r6, r6, #8
 80104fc:	d10b      	bne.n	8010516 <_strtoull_l.isra.0+0x3e>
 80104fe:	2c2d      	cmp	r4, #45	; 0x2d
 8010500:	d10b      	bne.n	801051a <_strtoull_l.isra.0+0x42>
 8010502:	782c      	ldrb	r4, [r5, #0]
 8010504:	2601      	movs	r6, #1
 8010506:	f10b 0502 	add.w	r5, fp, #2
 801050a:	b167      	cbz	r7, 8010526 <_strtoull_l.isra.0+0x4e>
 801050c:	2f10      	cmp	r7, #16
 801050e:	d114      	bne.n	801053a <_strtoull_l.isra.0+0x62>
 8010510:	2c30      	cmp	r4, #48	; 0x30
 8010512:	d00a      	beq.n	801052a <_strtoull_l.isra.0+0x52>
 8010514:	e011      	b.n	801053a <_strtoull_l.isra.0+0x62>
 8010516:	46ab      	mov	fp, r5
 8010518:	e7e6      	b.n	80104e8 <_strtoull_l.isra.0+0x10>
 801051a:	2c2b      	cmp	r4, #43	; 0x2b
 801051c:	bf04      	itt	eq
 801051e:	782c      	ldrbeq	r4, [r5, #0]
 8010520:	f10b 0502 	addeq.w	r5, fp, #2
 8010524:	e7f1      	b.n	801050a <_strtoull_l.isra.0+0x32>
 8010526:	2c30      	cmp	r4, #48	; 0x30
 8010528:	d141      	bne.n	80105ae <_strtoull_l.isra.0+0xd6>
 801052a:	782b      	ldrb	r3, [r5, #0]
 801052c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010530:	2b58      	cmp	r3, #88	; 0x58
 8010532:	d16c      	bne.n	801060e <_strtoull_l.isra.0+0x136>
 8010534:	786c      	ldrb	r4, [r5, #1]
 8010536:	2710      	movs	r7, #16
 8010538:	3502      	adds	r5, #2
 801053a:	ea4f 7be7 	mov.w	fp, r7, asr #31
 801053e:	463a      	mov	r2, r7
 8010540:	465b      	mov	r3, fp
 8010542:	f04f 30ff 	mov.w	r0, #4294967295
 8010546:	f04f 31ff 	mov.w	r1, #4294967295
 801054a:	f7f0 fba9 	bl	8000ca0 <__aeabi_uldivmod>
 801054e:	463a      	mov	r2, r7
 8010550:	e9cd 0100 	strd	r0, r1, [sp]
 8010554:	465b      	mov	r3, fp
 8010556:	f04f 30ff 	mov.w	r0, #4294967295
 801055a:	f04f 31ff 	mov.w	r1, #4294967295
 801055e:	f7f0 fb9f 	bl	8000ca0 <__aeabi_uldivmod>
 8010562:	46ba      	mov	sl, r7
 8010564:	4694      	mov	ip, r2
 8010566:	2300      	movs	r3, #0
 8010568:	2000      	movs	r0, #0
 801056a:	2100      	movs	r1, #0
 801056c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010570:	f1be 0f09 	cmp.w	lr, #9
 8010574:	d81d      	bhi.n	80105b2 <_strtoull_l.isra.0+0xda>
 8010576:	4674      	mov	r4, lr
 8010578:	42a7      	cmp	r7, r4
 801057a:	dd2b      	ble.n	80105d4 <_strtoull_l.isra.0+0xfc>
 801057c:	2b00      	cmp	r3, #0
 801057e:	db26      	blt.n	80105ce <_strtoull_l.isra.0+0xf6>
 8010580:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010584:	428b      	cmp	r3, r1
 8010586:	bf08      	it	eq
 8010588:	4282      	cmpeq	r2, r0
 801058a:	d320      	bcc.n	80105ce <_strtoull_l.isra.0+0xf6>
 801058c:	d101      	bne.n	8010592 <_strtoull_l.isra.0+0xba>
 801058e:	45a4      	cmp	ip, r4
 8010590:	db1d      	blt.n	80105ce <_strtoull_l.isra.0+0xf6>
 8010592:	fb0a f301 	mul.w	r3, sl, r1
 8010596:	fb00 330b 	mla	r3, r0, fp, r3
 801059a:	fbaa 0100 	umull	r0, r1, sl, r0
 801059e:	4419      	add	r1, r3
 80105a0:	1900      	adds	r0, r0, r4
 80105a2:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80105a6:	2301      	movs	r3, #1
 80105a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80105ac:	e7de      	b.n	801056c <_strtoull_l.isra.0+0x94>
 80105ae:	270a      	movs	r7, #10
 80105b0:	e7c3      	b.n	801053a <_strtoull_l.isra.0+0x62>
 80105b2:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80105b6:	f1be 0f19 	cmp.w	lr, #25
 80105ba:	d801      	bhi.n	80105c0 <_strtoull_l.isra.0+0xe8>
 80105bc:	3c37      	subs	r4, #55	; 0x37
 80105be:	e7db      	b.n	8010578 <_strtoull_l.isra.0+0xa0>
 80105c0:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80105c4:	f1be 0f19 	cmp.w	lr, #25
 80105c8:	d804      	bhi.n	80105d4 <_strtoull_l.isra.0+0xfc>
 80105ca:	3c57      	subs	r4, #87	; 0x57
 80105cc:	e7d4      	b.n	8010578 <_strtoull_l.isra.0+0xa0>
 80105ce:	f04f 33ff 	mov.w	r3, #4294967295
 80105d2:	e7e9      	b.n	80105a8 <_strtoull_l.isra.0+0xd0>
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	da0c      	bge.n	80105f2 <_strtoull_l.isra.0+0x11a>
 80105d8:	9a03      	ldr	r2, [sp, #12]
 80105da:	2322      	movs	r3, #34	; 0x22
 80105dc:	6013      	str	r3, [r2, #0]
 80105de:	f04f 30ff 	mov.w	r0, #4294967295
 80105e2:	f04f 31ff 	mov.w	r1, #4294967295
 80105e6:	f1b9 0f00 	cmp.w	r9, #0
 80105ea:	d10a      	bne.n	8010602 <_strtoull_l.isra.0+0x12a>
 80105ec:	b005      	add	sp, #20
 80105ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105f2:	b116      	cbz	r6, 80105fa <_strtoull_l.isra.0+0x122>
 80105f4:	4240      	negs	r0, r0
 80105f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80105fa:	f1b9 0f00 	cmp.w	r9, #0
 80105fe:	d0f5      	beq.n	80105ec <_strtoull_l.isra.0+0x114>
 8010600:	b11b      	cbz	r3, 801060a <_strtoull_l.isra.0+0x132>
 8010602:	3d01      	subs	r5, #1
 8010604:	f8c9 5000 	str.w	r5, [r9]
 8010608:	e7f0      	b.n	80105ec <_strtoull_l.isra.0+0x114>
 801060a:	4645      	mov	r5, r8
 801060c:	e7fa      	b.n	8010604 <_strtoull_l.isra.0+0x12c>
 801060e:	2430      	movs	r4, #48	; 0x30
 8010610:	2f00      	cmp	r7, #0
 8010612:	d192      	bne.n	801053a <_strtoull_l.isra.0+0x62>
 8010614:	2708      	movs	r7, #8
 8010616:	e790      	b.n	801053a <_strtoull_l.isra.0+0x62>

08010618 <_strtoull_r>:
 8010618:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801061a:	4c06      	ldr	r4, [pc, #24]	; (8010634 <_strtoull_r+0x1c>)
 801061c:	4d06      	ldr	r5, [pc, #24]	; (8010638 <_strtoull_r+0x20>)
 801061e:	6824      	ldr	r4, [r4, #0]
 8010620:	6a24      	ldr	r4, [r4, #32]
 8010622:	2c00      	cmp	r4, #0
 8010624:	bf08      	it	eq
 8010626:	462c      	moveq	r4, r5
 8010628:	9400      	str	r4, [sp, #0]
 801062a:	f7ff ff55 	bl	80104d8 <_strtoull_l.isra.0>
 801062e:	b003      	add	sp, #12
 8010630:	bd30      	pop	{r4, r5, pc}
 8010632:	bf00      	nop
 8010634:	20000010 	.word	0x20000010
 8010638:	2000055c 	.word	0x2000055c

0801063c <__swbuf_r>:
 801063c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801063e:	460e      	mov	r6, r1
 8010640:	4614      	mov	r4, r2
 8010642:	4605      	mov	r5, r0
 8010644:	b118      	cbz	r0, 801064e <__swbuf_r+0x12>
 8010646:	6983      	ldr	r3, [r0, #24]
 8010648:	b90b      	cbnz	r3, 801064e <__swbuf_r+0x12>
 801064a:	f7fd f905 	bl	800d858 <__sinit>
 801064e:	4b27      	ldr	r3, [pc, #156]	; (80106ec <__swbuf_r+0xb0>)
 8010650:	429c      	cmp	r4, r3
 8010652:	d12f      	bne.n	80106b4 <__swbuf_r+0x78>
 8010654:	686c      	ldr	r4, [r5, #4]
 8010656:	69a3      	ldr	r3, [r4, #24]
 8010658:	60a3      	str	r3, [r4, #8]
 801065a:	89a3      	ldrh	r3, [r4, #12]
 801065c:	0719      	lsls	r1, r3, #28
 801065e:	d533      	bpl.n	80106c8 <__swbuf_r+0x8c>
 8010660:	6923      	ldr	r3, [r4, #16]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d030      	beq.n	80106c8 <__swbuf_r+0x8c>
 8010666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801066a:	b2f6      	uxtb	r6, r6
 801066c:	049a      	lsls	r2, r3, #18
 801066e:	4637      	mov	r7, r6
 8010670:	d534      	bpl.n	80106dc <__swbuf_r+0xa0>
 8010672:	6923      	ldr	r3, [r4, #16]
 8010674:	6820      	ldr	r0, [r4, #0]
 8010676:	1ac0      	subs	r0, r0, r3
 8010678:	6963      	ldr	r3, [r4, #20]
 801067a:	4298      	cmp	r0, r3
 801067c:	db04      	blt.n	8010688 <__swbuf_r+0x4c>
 801067e:	4621      	mov	r1, r4
 8010680:	4628      	mov	r0, r5
 8010682:	f7fd f855 	bl	800d730 <_fflush_r>
 8010686:	bb28      	cbnz	r0, 80106d4 <__swbuf_r+0x98>
 8010688:	68a3      	ldr	r3, [r4, #8]
 801068a:	3b01      	subs	r3, #1
 801068c:	60a3      	str	r3, [r4, #8]
 801068e:	6823      	ldr	r3, [r4, #0]
 8010690:	1c5a      	adds	r2, r3, #1
 8010692:	6022      	str	r2, [r4, #0]
 8010694:	701e      	strb	r6, [r3, #0]
 8010696:	6963      	ldr	r3, [r4, #20]
 8010698:	3001      	adds	r0, #1
 801069a:	4298      	cmp	r0, r3
 801069c:	d004      	beq.n	80106a8 <__swbuf_r+0x6c>
 801069e:	89a3      	ldrh	r3, [r4, #12]
 80106a0:	07db      	lsls	r3, r3, #31
 80106a2:	d519      	bpl.n	80106d8 <__swbuf_r+0x9c>
 80106a4:	2e0a      	cmp	r6, #10
 80106a6:	d117      	bne.n	80106d8 <__swbuf_r+0x9c>
 80106a8:	4621      	mov	r1, r4
 80106aa:	4628      	mov	r0, r5
 80106ac:	f7fd f840 	bl	800d730 <_fflush_r>
 80106b0:	b190      	cbz	r0, 80106d8 <__swbuf_r+0x9c>
 80106b2:	e00f      	b.n	80106d4 <__swbuf_r+0x98>
 80106b4:	4b0e      	ldr	r3, [pc, #56]	; (80106f0 <__swbuf_r+0xb4>)
 80106b6:	429c      	cmp	r4, r3
 80106b8:	d101      	bne.n	80106be <__swbuf_r+0x82>
 80106ba:	68ac      	ldr	r4, [r5, #8]
 80106bc:	e7cb      	b.n	8010656 <__swbuf_r+0x1a>
 80106be:	4b0d      	ldr	r3, [pc, #52]	; (80106f4 <__swbuf_r+0xb8>)
 80106c0:	429c      	cmp	r4, r3
 80106c2:	bf08      	it	eq
 80106c4:	68ec      	ldreq	r4, [r5, #12]
 80106c6:	e7c6      	b.n	8010656 <__swbuf_r+0x1a>
 80106c8:	4621      	mov	r1, r4
 80106ca:	4628      	mov	r0, r5
 80106cc:	f7fc f8bc 	bl	800c848 <__swsetup_r>
 80106d0:	2800      	cmp	r0, #0
 80106d2:	d0c8      	beq.n	8010666 <__swbuf_r+0x2a>
 80106d4:	f04f 37ff 	mov.w	r7, #4294967295
 80106d8:	4638      	mov	r0, r7
 80106da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80106e0:	81a3      	strh	r3, [r4, #12]
 80106e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80106e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80106e8:	6663      	str	r3, [r4, #100]	; 0x64
 80106ea:	e7c2      	b.n	8010672 <__swbuf_r+0x36>
 80106ec:	08010e28 	.word	0x08010e28
 80106f0:	08010e48 	.word	0x08010e48
 80106f4:	08010e08 	.word	0x08010e08

080106f8 <_wcrtomb_r>:
 80106f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106fa:	4605      	mov	r5, r0
 80106fc:	b085      	sub	sp, #20
 80106fe:	461e      	mov	r6, r3
 8010700:	460f      	mov	r7, r1
 8010702:	4c0f      	ldr	r4, [pc, #60]	; (8010740 <_wcrtomb_r+0x48>)
 8010704:	b991      	cbnz	r1, 801072c <_wcrtomb_r+0x34>
 8010706:	6822      	ldr	r2, [r4, #0]
 8010708:	490e      	ldr	r1, [pc, #56]	; (8010744 <_wcrtomb_r+0x4c>)
 801070a:	6a12      	ldr	r2, [r2, #32]
 801070c:	2a00      	cmp	r2, #0
 801070e:	bf08      	it	eq
 8010710:	460a      	moveq	r2, r1
 8010712:	a901      	add	r1, sp, #4
 8010714:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8010718:	463a      	mov	r2, r7
 801071a:	47a0      	blx	r4
 801071c:	1c43      	adds	r3, r0, #1
 801071e:	bf01      	itttt	eq
 8010720:	2300      	moveq	r3, #0
 8010722:	6033      	streq	r3, [r6, #0]
 8010724:	238a      	moveq	r3, #138	; 0x8a
 8010726:	602b      	streq	r3, [r5, #0]
 8010728:	b005      	add	sp, #20
 801072a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801072c:	6824      	ldr	r4, [r4, #0]
 801072e:	4f05      	ldr	r7, [pc, #20]	; (8010744 <_wcrtomb_r+0x4c>)
 8010730:	6a24      	ldr	r4, [r4, #32]
 8010732:	2c00      	cmp	r4, #0
 8010734:	bf08      	it	eq
 8010736:	463c      	moveq	r4, r7
 8010738:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 801073c:	e7ed      	b.n	801071a <_wcrtomb_r+0x22>
 801073e:	bf00      	nop
 8010740:	20000010 	.word	0x20000010
 8010744:	2000055c 	.word	0x2000055c

08010748 <_gettimeofday>:
 8010748:	4b02      	ldr	r3, [pc, #8]	; (8010754 <_gettimeofday+0xc>)
 801074a:	2258      	movs	r2, #88	; 0x58
 801074c:	601a      	str	r2, [r3, #0]
 801074e:	f04f 30ff 	mov.w	r0, #4294967295
 8010752:	4770      	bx	lr
 8010754:	200021fc 	.word	0x200021fc

08010758 <_init>:
 8010758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801075a:	bf00      	nop
 801075c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801075e:	bc08      	pop	{r3}
 8010760:	469e      	mov	lr, r3
 8010762:	4770      	bx	lr

08010764 <_fini>:
 8010764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010766:	bf00      	nop
 8010768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801076a:	bc08      	pop	{r3}
 801076c:	469e      	mov	lr, r3
 801076e:	4770      	bx	lr
