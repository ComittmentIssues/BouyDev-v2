
Buoy_Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b78  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  08005d00  08005d00  00015d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006090  08006090  00016090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006098  08006098  00016098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800609c  0800609c  0001609c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000510  20000000  080060a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram2         00000000  10000000  10000000  00020510  2**0
                  CONTENTS
  8 .bss          00000170  20000510  20000510  00020510  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  20000680  20000680  00020510  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020510  2**0
                  CONTENTS, READONLY
 11 .debug_info   000149b6  00000000  00000000  00020540  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000026f9  00000000  00000000  00034ef6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000011c8  00000000  00000000  000375f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001090  00000000  00000000  000387b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007e4e  00000000  00000000  00039848  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005a34  00000000  00000000  00041696  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000470ca  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005180  00000000  00000000  00047148  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000510 	.word	0x20000510
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005ce8 	.word	0x08005ce8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000514 	.word	0x20000514
 80001c4:	08005ce8 	.word	0x08005ce8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b97a 	b.w	80004e4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	468c      	mov	ip, r1
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	9e08      	ldr	r6, [sp, #32]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d151      	bne.n	80002bc <__udivmoddi4+0xb4>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d96d      	bls.n	80002fa <__udivmoddi4+0xf2>
 800021e:	fab2 fe82 	clz	lr, r2
 8000222:	f1be 0f00 	cmp.w	lr, #0
 8000226:	d00b      	beq.n	8000240 <__udivmoddi4+0x38>
 8000228:	f1ce 0c20 	rsb	ip, lr, #32
 800022c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000230:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000234:	fa02 f70e 	lsl.w	r7, r2, lr
 8000238:	ea4c 0c05 	orr.w	ip, ip, r5
 800023c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000240:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000244:	0c25      	lsrs	r5, r4, #16
 8000246:	fbbc f8fa 	udiv	r8, ip, sl
 800024a:	fa1f f987 	uxth.w	r9, r7
 800024e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000252:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000256:	fb08 f309 	mul.w	r3, r8, r9
 800025a:	42ab      	cmp	r3, r5
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x6c>
 800025e:	19ed      	adds	r5, r5, r7
 8000260:	f108 32ff 	add.w	r2, r8, #4294967295
 8000264:	f080 8123 	bcs.w	80004ae <__udivmoddi4+0x2a6>
 8000268:	42ab      	cmp	r3, r5
 800026a:	f240 8120 	bls.w	80004ae <__udivmoddi4+0x2a6>
 800026e:	f1a8 0802 	sub.w	r8, r8, #2
 8000272:	443d      	add	r5, r7
 8000274:	1aed      	subs	r5, r5, r3
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb5 f0fa 	udiv	r0, r5, sl
 800027c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000280:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000284:	fb00 f909 	mul.w	r9, r0, r9
 8000288:	45a1      	cmp	r9, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x98>
 800028c:	19e4      	adds	r4, r4, r7
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000292:	f080 810a 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 8000296:	45a1      	cmp	r9, r4
 8000298:	f240 8107 	bls.w	80004aa <__udivmoddi4+0x2a2>
 800029c:	3802      	subs	r0, #2
 800029e:	443c      	add	r4, r7
 80002a0:	eba4 0409 	sub.w	r4, r4, r9
 80002a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a8:	2100      	movs	r1, #0
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	d061      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80002b2:	2300      	movs	r3, #0
 80002b4:	6034      	str	r4, [r6, #0]
 80002b6:	6073      	str	r3, [r6, #4]
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	428b      	cmp	r3, r1
 80002be:	d907      	bls.n	80002d0 <__udivmoddi4+0xc8>
 80002c0:	2e00      	cmp	r6, #0
 80002c2:	d054      	beq.n	800036e <__udivmoddi4+0x166>
 80002c4:	2100      	movs	r1, #0
 80002c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ca:	4608      	mov	r0, r1
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	fab3 f183 	clz	r1, r3
 80002d4:	2900      	cmp	r1, #0
 80002d6:	f040 808e 	bne.w	80003f6 <__udivmoddi4+0x1ee>
 80002da:	42ab      	cmp	r3, r5
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xdc>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80fa 	bhi.w	80004d8 <__udivmoddi4+0x2d0>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb65 0503 	sbc.w	r5, r5, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	46ac      	mov	ip, r5
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d03f      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	b912      	cbnz	r2, 8000302 <__udivmoddi4+0xfa>
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000302:	fab7 fe87 	clz	lr, r7
 8000306:	f1be 0f00 	cmp.w	lr, #0
 800030a:	d134      	bne.n	8000376 <__udivmoddi4+0x16e>
 800030c:	1beb      	subs	r3, r5, r7
 800030e:	0c3a      	lsrs	r2, r7, #16
 8000310:	fa1f fc87 	uxth.w	ip, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb3 f8f2 	udiv	r8, r3, r2
 800031a:	0c25      	lsrs	r5, r4, #16
 800031c:	fb02 3318 	mls	r3, r2, r8, r3
 8000320:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000324:	fb0c f308 	mul.w	r3, ip, r8
 8000328:	42ab      	cmp	r3, r5
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x134>
 800032c:	19ed      	adds	r5, r5, r7
 800032e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x132>
 8000334:	42ab      	cmp	r3, r5
 8000336:	f200 80d1 	bhi.w	80004dc <__udivmoddi4+0x2d4>
 800033a:	4680      	mov	r8, r0
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb5 f0f2 	udiv	r0, r5, r2
 8000344:	fb02 5510 	mls	r5, r2, r0, r5
 8000348:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800034c:	fb0c fc00 	mul.w	ip, ip, r0
 8000350:	45a4      	cmp	ip, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x15c>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x15a>
 800035c:	45a4      	cmp	ip, r4
 800035e:	f200 80b8 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 040c 	sub.w	r4, r4, ip
 8000368:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800036c:	e79d      	b.n	80002aa <__udivmoddi4+0xa2>
 800036e:	4631      	mov	r1, r6
 8000370:	4630      	mov	r0, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	f1ce 0420 	rsb	r4, lr, #32
 800037a:	fa05 f30e 	lsl.w	r3, r5, lr
 800037e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000382:	fa20 f804 	lsr.w	r8, r0, r4
 8000386:	0c3a      	lsrs	r2, r7, #16
 8000388:	fa25 f404 	lsr.w	r4, r5, r4
 800038c:	ea48 0803 	orr.w	r8, r8, r3
 8000390:	fbb4 f1f2 	udiv	r1, r4, r2
 8000394:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000398:	fb02 4411 	mls	r4, r2, r1, r4
 800039c:	fa1f fc87 	uxth.w	ip, r7
 80003a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a4:	fb01 f30c 	mul.w	r3, r1, ip
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ae:	d909      	bls.n	80003c4 <__udivmoddi4+0x1bc>
 80003b0:	19ed      	adds	r5, r5, r7
 80003b2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b6:	f080 808a 	bcs.w	80004ce <__udivmoddi4+0x2c6>
 80003ba:	42ab      	cmp	r3, r5
 80003bc:	f240 8087 	bls.w	80004ce <__udivmoddi4+0x2c6>
 80003c0:	3902      	subs	r1, #2
 80003c2:	443d      	add	r5, r7
 80003c4:	1aeb      	subs	r3, r5, r3
 80003c6:	fa1f f588 	uxth.w	r5, r8
 80003ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ce:	fb02 3310 	mls	r3, r2, r0, r3
 80003d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d6:	fb00 f30c 	mul.w	r3, r0, ip
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1e6>
 80003de:	19ed      	adds	r5, r5, r7
 80003e0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e4:	d26f      	bcs.n	80004c6 <__udivmoddi4+0x2be>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	d96d      	bls.n	80004c6 <__udivmoddi4+0x2be>
 80003ea:	3802      	subs	r0, #2
 80003ec:	443d      	add	r5, r7
 80003ee:	1aeb      	subs	r3, r5, r3
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	e78f      	b.n	8000316 <__udivmoddi4+0x10e>
 80003f6:	f1c1 0720 	rsb	r7, r1, #32
 80003fa:	fa22 f807 	lsr.w	r8, r2, r7
 80003fe:	408b      	lsls	r3, r1
 8000400:	fa05 f401 	lsl.w	r4, r5, r1
 8000404:	ea48 0303 	orr.w	r3, r8, r3
 8000408:	fa20 fe07 	lsr.w	lr, r0, r7
 800040c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000410:	40fd      	lsrs	r5, r7
 8000412:	ea4e 0e04 	orr.w	lr, lr, r4
 8000416:	fbb5 f9fc 	udiv	r9, r5, ip
 800041a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000422:	fa1f f883 	uxth.w	r8, r3
 8000426:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800042a:	fb09 f408 	mul.w	r4, r9, r8
 800042e:	42ac      	cmp	r4, r5
 8000430:	fa02 f201 	lsl.w	r2, r2, r1
 8000434:	fa00 fa01 	lsl.w	sl, r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x244>
 800043a:	18ed      	adds	r5, r5, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d243      	bcs.n	80004ca <__udivmoddi4+0x2c2>
 8000442:	42ac      	cmp	r4, r5
 8000444:	d941      	bls.n	80004ca <__udivmoddi4+0x2c2>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	441d      	add	r5, r3
 800044c:	1b2d      	subs	r5, r5, r4
 800044e:	fa1f fe8e 	uxth.w	lr, lr
 8000452:	fbb5 f0fc 	udiv	r0, r5, ip
 8000456:	fb0c 5510 	mls	r5, ip, r0, r5
 800045a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45a0      	cmp	r8, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x26e>
 8000466:	18e4      	adds	r4, r4, r3
 8000468:	f100 35ff 	add.w	r5, r0, #4294967295
 800046c:	d229      	bcs.n	80004c2 <__udivmoddi4+0x2ba>
 800046e:	45a0      	cmp	r8, r4
 8000470:	d927      	bls.n	80004c2 <__udivmoddi4+0x2ba>
 8000472:	3802      	subs	r0, #2
 8000474:	441c      	add	r4, r3
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba4 0408 	sub.w	r4, r4, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454c      	cmp	r4, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	464d      	mov	r5, r9
 8000488:	d315      	bcc.n	80004b6 <__udivmoddi4+0x2ae>
 800048a:	d012      	beq.n	80004b2 <__udivmoddi4+0x2aa>
 800048c:	b156      	cbz	r6, 80004a4 <__udivmoddi4+0x29c>
 800048e:	ebba 030e 	subs.w	r3, sl, lr
 8000492:	eb64 0405 	sbc.w	r4, r4, r5
 8000496:	fa04 f707 	lsl.w	r7, r4, r7
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431f      	orrs	r7, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	6037      	str	r7, [r6, #0]
 80004a2:	6074      	str	r4, [r6, #4]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	4618      	mov	r0, r3
 80004ac:	e6f8      	b.n	80002a0 <__udivmoddi4+0x98>
 80004ae:	4690      	mov	r8, r2
 80004b0:	e6e0      	b.n	8000274 <__udivmoddi4+0x6c>
 80004b2:	45c2      	cmp	sl, r8
 80004b4:	d2ea      	bcs.n	800048c <__udivmoddi4+0x284>
 80004b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ba:	eb69 0503 	sbc.w	r5, r9, r3
 80004be:	3801      	subs	r0, #1
 80004c0:	e7e4      	b.n	800048c <__udivmoddi4+0x284>
 80004c2:	4628      	mov	r0, r5
 80004c4:	e7d7      	b.n	8000476 <__udivmoddi4+0x26e>
 80004c6:	4640      	mov	r0, r8
 80004c8:	e791      	b.n	80003ee <__udivmoddi4+0x1e6>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e7be      	b.n	800044c <__udivmoddi4+0x244>
 80004ce:	4601      	mov	r1, r0
 80004d0:	e778      	b.n	80003c4 <__udivmoddi4+0x1bc>
 80004d2:	3802      	subs	r0, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	e745      	b.n	8000364 <__udivmoddi4+0x15c>
 80004d8:	4608      	mov	r0, r1
 80004da:	e708      	b.n	80002ee <__udivmoddi4+0xe6>
 80004dc:	f1a8 0802 	sub.w	r8, r8, #2
 80004e0:	443d      	add	r5, r7
 80004e2:	e72b      	b.n	800033c <__udivmoddi4+0x134>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004ee:	2300      	movs	r3, #0
 80004f0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f2:	4a0c      	ldr	r2, [pc, #48]	; (8000524 <HAL_Init+0x3c>)
 80004f4:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <HAL_Init+0x3c>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004fe:	2003      	movs	r0, #3
 8000500:	f000 f948 	bl	8000794 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000504:	2000      	movs	r0, #0
 8000506:	f002 fcd1 	bl	8002eac <HAL_InitTick>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d002      	beq.n	8000516 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000510:	2301      	movs	r3, #1
 8000512:	71fb      	strb	r3, [r7, #7]
 8000514:	e001      	b.n	800051a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000516:	f004 f95f 	bl	80047d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800051a:	79fb      	ldrb	r3, [r7, #7]
}
 800051c:	4618      	mov	r0, r3
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40022000 	.word	0x40022000

08000528 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800052c:	4b05      	ldr	r3, [pc, #20]	; (8000544 <HAL_IncTick+0x1c>)
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	4b05      	ldr	r3, [pc, #20]	; (8000548 <HAL_IncTick+0x20>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4413      	add	r3, r2
 8000536:	4a03      	ldr	r2, [pc, #12]	; (8000544 <HAL_IncTick+0x1c>)
 8000538:	6013      	str	r3, [r2, #0]
}
 800053a:	bf00      	nop
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	20000564 	.word	0x20000564
 8000548:	20000004 	.word	0x20000004

0800054c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return uwTick;
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <HAL_GetTick+0x14>)
 8000552:	681b      	ldr	r3, [r3, #0]
}
 8000554:	4618      	mov	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20000564 	.word	0x20000564

08000564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800056c:	f7ff ffee 	bl	800054c <HAL_GetTick>
 8000570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800057c:	d004      	beq.n	8000588 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <HAL_Delay+0x40>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	68fa      	ldr	r2, [r7, #12]
 8000584:	4413      	add	r3, r2
 8000586:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000588:	bf00      	nop
 800058a:	f7ff ffdf 	bl	800054c <HAL_GetTick>
 800058e:	4602      	mov	r2, r0
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	1ad2      	subs	r2, r2, r3
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	429a      	cmp	r2, r3
 8000598:	d3f7      	bcc.n	800058a <HAL_Delay+0x26>
  {
  }
}
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000004 	.word	0x20000004

080005a8 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP0/STOP1/STOP2 modes.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80005ac:	4a05      	ldr	r2, [pc, #20]	; (80005c4 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80005ae:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	f043 0302 	orr.w	r3, r3, #2
 80005b6:	6053      	str	r3, [r2, #4]
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	e0042000 	.word	0xe0042000

080005c8 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80005cc:	4a05      	ldr	r2, [pc, #20]	; (80005e4 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 80005ce:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	f043 0304 	orr.w	r3, r3, #4
 80005d6:	6053      	str	r3, [r2, #4]
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	e0042000 	.word	0xe0042000

080005e8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f003 0307 	and.w	r3, r3, #7
 80005f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <NVIC_SetPriorityGrouping+0x44>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005fe:	68ba      	ldr	r2, [r7, #8]
 8000600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000604:	4013      	ands	r3, r2
 8000606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800061a:	4a04      	ldr	r2, [pc, #16]	; (800062c <NVIC_SetPriorityGrouping+0x44>)
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	60d3      	str	r3, [r2, #12]
}
 8000620:	bf00      	nop
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000634:	4b04      	ldr	r3, [pc, #16]	; (8000648 <NVIC_GetPriorityGrouping+0x18>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	0a1b      	lsrs	r3, r3, #8
 800063a:	f003 0307 	and.w	r3, r3, #7
}
 800063e:	4618      	mov	r0, r3
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000656:	4909      	ldr	r1, [pc, #36]	; (800067c <NVIC_EnableIRQ+0x30>)
 8000658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065c:	095b      	lsrs	r3, r3, #5
 800065e:	79fa      	ldrb	r2, [r7, #7]
 8000660:	f002 021f 	and.w	r2, r2, #31
 8000664:	2001      	movs	r0, #1
 8000666:	fa00 f202 	lsl.w	r2, r0, r2
 800066a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	e000e100 	.word	0xe000e100

08000680 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800068a:	4909      	ldr	r1, [pc, #36]	; (80006b0 <NVIC_ClearPendingIRQ+0x30>)
 800068c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000690:	095b      	lsrs	r3, r3, #5
 8000692:	79fa      	ldrb	r2, [r7, #7]
 8000694:	f002 021f 	and.w	r2, r2, #31
 8000698:	2001      	movs	r0, #1
 800069a:	fa00 f202 	lsl.w	r2, r0, r2
 800069e:	3360      	adds	r3, #96	; 0x60
 80006a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	e000e100 	.word	0xe000e100

080006b4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	6039      	str	r1, [r7, #0]
 80006be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80006c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	da0b      	bge.n	80006e0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c8:	490d      	ldr	r1, [pc, #52]	; (8000700 <NVIC_SetPriority+0x4c>)
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	f003 030f 	and.w	r3, r3, #15
 80006d0:	3b04      	subs	r3, #4
 80006d2:	683a      	ldr	r2, [r7, #0]
 80006d4:	b2d2      	uxtb	r2, r2
 80006d6:	0112      	lsls	r2, r2, #4
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	440b      	add	r3, r1
 80006dc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006de:	e009      	b.n	80006f4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e0:	4908      	ldr	r1, [pc, #32]	; (8000704 <NVIC_SetPriority+0x50>)
 80006e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e6:	683a      	ldr	r2, [r7, #0]
 80006e8:	b2d2      	uxtb	r2, r2
 80006ea:	0112      	lsls	r2, r2, #4
 80006ec:	b2d2      	uxtb	r2, r2
 80006ee:	440b      	add	r3, r1
 80006f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006f4:	bf00      	nop
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	e000ed00 	.word	0xe000ed00
 8000704:	e000e100 	.word	0xe000e100

08000708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000708:	b480      	push	{r7}
 800070a:	b089      	sub	sp, #36	; 0x24
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	f003 0307 	and.w	r3, r3, #7
 800071a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	f1c3 0307 	rsb	r3, r3, #7
 8000722:	2b04      	cmp	r3, #4
 8000724:	bf28      	it	cs
 8000726:	2304      	movcs	r3, #4
 8000728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	3304      	adds	r3, #4
 800072e:	2b06      	cmp	r3, #6
 8000730:	d902      	bls.n	8000738 <NVIC_EncodePriority+0x30>
 8000732:	69fb      	ldr	r3, [r7, #28]
 8000734:	3b03      	subs	r3, #3
 8000736:	e000      	b.n	800073a <NVIC_EncodePriority+0x32>
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	2201      	movs	r2, #1
 800073e:	69bb      	ldr	r3, [r7, #24]
 8000740:	fa02 f303 	lsl.w	r3, r2, r3
 8000744:	1e5a      	subs	r2, r3, #1
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	401a      	ands	r2, r3
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800074e:	2101      	movs	r1, #1
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	fa01 f303 	lsl.w	r3, r1, r3
 8000756:	1e59      	subs	r1, r3, #1
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800075c:	4313      	orrs	r3, r2
         );
}
 800075e:	4618      	mov	r0, r3
 8000760:	3724      	adds	r7, #36	; 0x24
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
	...

0800076c <NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000770:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000774:	4905      	ldr	r1, [pc, #20]	; (800078c <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <NVIC_SystemReset+0x20>)
 8000778:	68db      	ldr	r3, [r3, #12]
 800077a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800077e:	4b04      	ldr	r3, [pc, #16]	; (8000790 <NVIC_SystemReset+0x24>)
 8000780:	4313      	orrs	r3, r2
 8000782:	60cb      	str	r3, [r1, #12]
 8000784:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8000788:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800078a:	e7fd      	b.n	8000788 <NVIC_SystemReset+0x1c>
 800078c:	e000ed00 	.word	0xe000ed00
 8000790:	05fa0004 	.word	0x05fa0004

08000794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff ff23 	bl	80005e8 <NVIC_SetPriorityGrouping>
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b086      	sub	sp, #24
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4603      	mov	r3, r0
 80007b2:	60b9      	str	r1, [r7, #8]
 80007b4:	607a      	str	r2, [r7, #4]
 80007b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007bc:	f7ff ff38 	bl	8000630 <NVIC_GetPriorityGrouping>
 80007c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	68b9      	ldr	r1, [r7, #8]
 80007c6:	6978      	ldr	r0, [r7, #20]
 80007c8:	f7ff ff9e 	bl	8000708 <NVIC_EncodePriority>
 80007cc:	4602      	mov	r2, r0
 80007ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ff6d 	bl	80006b4 <NVIC_SetPriority>
}
 80007da:	bf00      	nop
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff2b 	bl	800064c <NVIC_EnableIRQ>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8000802:	f7ff ffb3 	bl	800076c <NVIC_SystemReset>
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}

0800080a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
 8000810:	4603      	mov	r3, r0
 8000812:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8000814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ff31 	bl	8000680 <NVIC_ClearPendingIRQ>
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000828:	b480      	push	{r7}
 800082a:	b087      	sub	sp, #28
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000836:	e17f      	b.n	8000b38 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	2101      	movs	r1, #1
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	fa01 f303 	lsl.w	r3, r1, r3
 8000844:	4013      	ands	r3, r2
 8000846:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b00      	cmp	r3, #0
 800084c:	f000 8171 	beq.w	8000b32 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d00b      	beq.n	8000870 <HAL_GPIO_Init+0x48>
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	2b02      	cmp	r3, #2
 800085e:	d007      	beq.n	8000870 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000864:	2b11      	cmp	r3, #17
 8000866:	d003      	beq.n	8000870 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	2b12      	cmp	r3, #18
 800086e:	d130      	bne.n	80008d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	689b      	ldr	r3, [r3, #8]
 8000874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	2203      	movs	r2, #3
 800087c:	fa02 f303 	lsl.w	r3, r2, r3
 8000880:	43db      	mvns	r3, r3
 8000882:	693a      	ldr	r2, [r7, #16]
 8000884:	4013      	ands	r3, r2
 8000886:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	68da      	ldr	r2, [r3, #12]
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	fa02 f303 	lsl.w	r3, r2, r3
 8000894:	693a      	ldr	r2, [r7, #16]
 8000896:	4313      	orrs	r3, r2
 8000898:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	693a      	ldr	r2, [r7, #16]
 800089e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008a6:	2201      	movs	r2, #1
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	43db      	mvns	r3, r3
 80008b0:	693a      	ldr	r2, [r7, #16]
 80008b2:	4013      	ands	r3, r2
 80008b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	091b      	lsrs	r3, r3, #4
 80008bc:	f003 0201 	and.w	r2, r3, #1
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	f003 0303 	and.w	r3, r3, #3
 80008da:	2b03      	cmp	r3, #3
 80008dc:	d118      	bne.n	8000910 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80008e4:	2201      	movs	r2, #1
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	43db      	mvns	r3, r3
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	4013      	ands	r3, r2
 80008f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	08db      	lsrs	r3, r3, #3
 80008fa:	f003 0201 	and.w	r2, r3, #1
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	fa02 f303 	lsl.w	r3, r2, r3
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	4313      	orrs	r3, r2
 8000908:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	693a      	ldr	r2, [r7, #16]
 800090e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	2203      	movs	r2, #3
 800091c:	fa02 f303 	lsl.w	r3, r2, r3
 8000920:	43db      	mvns	r3, r3
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	4013      	ands	r3, r2
 8000926:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	689a      	ldr	r2, [r3, #8]
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	4313      	orrs	r3, r2
 8000938:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	693a      	ldr	r2, [r7, #16]
 800093e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	2b02      	cmp	r3, #2
 8000946:	d003      	beq.n	8000950 <HAL_GPIO_Init+0x128>
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	2b12      	cmp	r3, #18
 800094e:	d123      	bne.n	8000998 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	08da      	lsrs	r2, r3, #3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3208      	adds	r2, #8
 8000958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800095c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	f003 0307 	and.w	r3, r3, #7
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	220f      	movs	r2, #15
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	43db      	mvns	r3, r3
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	4013      	ands	r3, r2
 8000972:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	691a      	ldr	r2, [r3, #16]
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	f003 0307 	and.w	r3, r3, #7
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	4313      	orrs	r3, r2
 8000988:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	08da      	lsrs	r2, r3, #3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	3208      	adds	r2, #8
 8000992:	6939      	ldr	r1, [r7, #16]
 8000994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	2203      	movs	r2, #3
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	43db      	mvns	r3, r3
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	4013      	ands	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	f003 0203 	and.w	r2, r3, #3
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	4313      	orrs	r3, r2
 80009c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	f000 80ac 	beq.w	8000b32 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009da:	4a5e      	ldr	r2, [pc, #376]	; (8000b54 <HAL_GPIO_Init+0x32c>)
 80009dc:	4b5d      	ldr	r3, [pc, #372]	; (8000b54 <HAL_GPIO_Init+0x32c>)
 80009de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6613      	str	r3, [r2, #96]	; 0x60
 80009e6:	4b5b      	ldr	r3, [pc, #364]	; (8000b54 <HAL_GPIO_Init+0x32c>)
 80009e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009f2:	4a59      	ldr	r2, [pc, #356]	; (8000b58 <HAL_GPIO_Init+0x330>)
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	089b      	lsrs	r3, r3, #2
 80009f8:	3302      	adds	r3, #2
 80009fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	f003 0303 	and.w	r3, r3, #3
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	220f      	movs	r2, #15
 8000a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0e:	43db      	mvns	r3, r3
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	4013      	ands	r3, r2
 8000a14:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a1c:	d025      	beq.n	8000a6a <HAL_GPIO_Init+0x242>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a4e      	ldr	r2, [pc, #312]	; (8000b5c <HAL_GPIO_Init+0x334>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d01f      	beq.n	8000a66 <HAL_GPIO_Init+0x23e>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a4d      	ldr	r2, [pc, #308]	; (8000b60 <HAL_GPIO_Init+0x338>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d019      	beq.n	8000a62 <HAL_GPIO_Init+0x23a>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a4c      	ldr	r2, [pc, #304]	; (8000b64 <HAL_GPIO_Init+0x33c>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d013      	beq.n	8000a5e <HAL_GPIO_Init+0x236>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a4b      	ldr	r2, [pc, #300]	; (8000b68 <HAL_GPIO_Init+0x340>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d00d      	beq.n	8000a5a <HAL_GPIO_Init+0x232>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a4a      	ldr	r2, [pc, #296]	; (8000b6c <HAL_GPIO_Init+0x344>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d007      	beq.n	8000a56 <HAL_GPIO_Init+0x22e>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a49      	ldr	r2, [pc, #292]	; (8000b70 <HAL_GPIO_Init+0x348>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d101      	bne.n	8000a52 <HAL_GPIO_Init+0x22a>
 8000a4e:	2306      	movs	r3, #6
 8000a50:	e00c      	b.n	8000a6c <HAL_GPIO_Init+0x244>
 8000a52:	2307      	movs	r3, #7
 8000a54:	e00a      	b.n	8000a6c <HAL_GPIO_Init+0x244>
 8000a56:	2305      	movs	r3, #5
 8000a58:	e008      	b.n	8000a6c <HAL_GPIO_Init+0x244>
 8000a5a:	2304      	movs	r3, #4
 8000a5c:	e006      	b.n	8000a6c <HAL_GPIO_Init+0x244>
 8000a5e:	2303      	movs	r3, #3
 8000a60:	e004      	b.n	8000a6c <HAL_GPIO_Init+0x244>
 8000a62:	2302      	movs	r3, #2
 8000a64:	e002      	b.n	8000a6c <HAL_GPIO_Init+0x244>
 8000a66:	2301      	movs	r3, #1
 8000a68:	e000      	b.n	8000a6c <HAL_GPIO_Init+0x244>
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	697a      	ldr	r2, [r7, #20]
 8000a6e:	f002 0203 	and.w	r2, r2, #3
 8000a72:	0092      	lsls	r2, r2, #2
 8000a74:	4093      	lsls	r3, r2
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a7c:	4936      	ldr	r1, [pc, #216]	; (8000b58 <HAL_GPIO_Init+0x330>)
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	089b      	lsrs	r3, r3, #2
 8000a82:	3302      	adds	r3, #2
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a8a:	4b3a      	ldr	r3, [pc, #232]	; (8000b74 <HAL_GPIO_Init+0x34c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	43db      	mvns	r3, r3
 8000a94:	693a      	ldr	r2, [r7, #16]
 8000a96:	4013      	ands	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d003      	beq.n	8000aae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000aae:	4a31      	ldr	r2, [pc, #196]	; (8000b74 <HAL_GPIO_Init+0x34c>)
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000ab4:	4b2f      	ldr	r3, [pc, #188]	; (8000b74 <HAL_GPIO_Init+0x34c>)
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	43db      	mvns	r3, r3
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d003      	beq.n	8000ad8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ad0:	693a      	ldr	r2, [r7, #16]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ad8:	4a26      	ldr	r2, [pc, #152]	; (8000b74 <HAL_GPIO_Init+0x34c>)
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ade:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <HAL_GPIO_Init+0x34c>)
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	43db      	mvns	r3, r3
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	4013      	ands	r3, r2
 8000aec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d003      	beq.n	8000b02 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	4313      	orrs	r3, r2
 8000b00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b02:	4a1c      	ldr	r2, [pc, #112]	; (8000b74 <HAL_GPIO_Init+0x34c>)
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b08:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <HAL_GPIO_Init+0x34c>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	43db      	mvns	r3, r3
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4013      	ands	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d003      	beq.n	8000b2c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b2c:	4a11      	ldr	r2, [pc, #68]	; (8000b74 <HAL_GPIO_Init+0x34c>)
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	3301      	adds	r3, #1
 8000b36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f47f ae78 	bne.w	8000838 <HAL_GPIO_Init+0x10>
  }
}
 8000b48:	bf00      	nop
 8000b4a:	371c      	adds	r7, #28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	40021000 	.word	0x40021000
 8000b58:	40010000 	.word	0x40010000
 8000b5c:	48000400 	.word	0x48000400
 8000b60:	48000800 	.word	0x48000800
 8000b64:	48000c00 	.word	0x48000c00
 8000b68:	48001000 	.word	0x48001000
 8000b6c:	48001400 	.word	0x48001400
 8000b70:	48001800 	.word	0x48001800
 8000b74:	40010400 	.word	0x40010400

08000b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	807b      	strh	r3, [r7, #2]
 8000b84:	4613      	mov	r3, r2
 8000b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b88:	787b      	ldrb	r3, [r7, #1]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d003      	beq.n	8000b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b8e:	887a      	ldrh	r2, [r7, #2]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b94:	e002      	b.n	8000b9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b96:	887a      	ldrh	r2, [r7, #2]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	695a      	ldr	r2, [r3, #20]
 8000bb8:	887b      	ldrh	r3, [r7, #2]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d003      	beq.n	8000bc8 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bc0:	887a      	ldrh	r2, [r7, #2]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000bc6:	e002      	b.n	8000bce <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bc8:	887a      	ldrh	r2, [r7, #2]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	619a      	str	r2, [r3, #24]
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000be0:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000be2:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bea:	6013      	str	r3, [r2, #0]
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	40007000 	.word	0x40007000

08000bfc <HAL_PWR_DisableBkUpAccess>:
  * @brief Disable access to the backup domain
  *        (RTC registers, RTC backup data registers).
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8000c00:	4a05      	ldr	r2, [pc, #20]	; (8000c18 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8000c02:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c0a:	6013      	str	r3, [r2, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	40007000 	.word	0x40007000

08000c1c <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8000c24:	490c      	ldr	r1, [pc, #48]	; (8000c58 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8000c28:	68da      	ldr	r2, [r3, #12]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	f003 031f 	and.w	r3, r3, #31
 8000c30:	43db      	mvns	r3, r3
 8000c32:	401a      	ands	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	095b      	lsrs	r3, r3, #5
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	60cb      	str	r3, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 8000c3c:	4906      	ldr	r1, [pc, #24]	; (8000c58 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8000c40:	689a      	ldr	r2, [r3, #8]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	f003 031f 	and.w	r3, r3, #31
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	608b      	str	r3, [r1, #8]


}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	40007000 	.word	0x40007000

08000c5c <HAL_PWR_DisableWakeUpPin>:
  *         This parameter can be one of the following values:
  *           @arg @ref PWR_WAKEUP_PIN1, PWR_WAKEUP_PIN2, PWR_WAKEUP_PIN3, PWR_WAKEUP_PIN4, PWR_WAKEUP_PIN5
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 8000c64:	4907      	ldr	r1, [pc, #28]	; (8000c84 <HAL_PWR_DisableWakeUpPin+0x28>)
 8000c66:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <HAL_PWR_DisableWakeUpPin+0x28>)
 8000c68:	689a      	ldr	r2, [r3, #8]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	f003 031f 	and.w	r3, r3, #31
 8000c70:	43db      	mvns	r3, r3
 8000c72:	4013      	ands	r3, r2
 8000c74:	608b      	str	r3, [r1, #8]
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40007000 	.word	0x40007000

08000c88 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8000c8c:	4a09      	ldr	r2, [pc, #36]	; (8000cb4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f023 0307 	bic.w	r3, r3, #7
 8000c96:	f043 0303 	orr.w	r3, r3, #3
 8000c9a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000c9c:	4a06      	ldr	r2, [pc, #24]	; (8000cb8 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8000ca0:	691b      	ldr	r3, [r3, #16]
 8000ca2:	f043 0304 	orr.w	r3, r3, #4
 8000ca6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfi");
 8000ca8:	bf30      	wfi
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	40007000 	.word	0x40007000
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	40007000 	.word	0x40007000

08000cd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ce6:	d130      	bne.n	8000d4a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ce8:	4b23      	ldr	r3, [pc, #140]	; (8000d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000cf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cf4:	d038      	beq.n	8000d68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cf6:	4a20      	ldr	r2, [pc, #128]	; (8000d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cf8:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d04:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d06:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2232      	movs	r2, #50	; 0x32
 8000d0c:	fb02 f303 	mul.w	r3, r2, r3
 8000d10:	4a1b      	ldr	r2, [pc, #108]	; (8000d80 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000d12:	fba2 2303 	umull	r2, r3, r2, r3
 8000d16:	0c9b      	lsrs	r3, r3, #18
 8000d18:	3301      	adds	r3, #1
 8000d1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d1c:	e002      	b.n	8000d24 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d24:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d26:	695b      	ldr	r3, [r3, #20]
 8000d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d30:	d102      	bne.n	8000d38 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d1f2      	bne.n	8000d1e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d38:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d3a:	695b      	ldr	r3, [r3, #20]
 8000d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d44:	d110      	bne.n	8000d68 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000d46:	2303      	movs	r3, #3
 8000d48:	e00f      	b.n	8000d6a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d56:	d007      	beq.n	8000d68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d58:	4a07      	ldr	r2, [pc, #28]	; (8000d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d5a:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d66:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40007000 	.word	0x40007000
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	431bde83 	.word	0x431bde83

08000d84 <HAL_PWREx_EnableInternalWakeUpLine>:
/**
  * @brief Enable Internal Wake-up Line.
  * @retval None
  */
void HAL_PWREx_EnableInternalWakeUpLine(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_EIWF);
 8000d88:	4a05      	ldr	r2, [pc, #20]	; (8000da0 <HAL_PWREx_EnableInternalWakeUpLine+0x1c>)
 8000d8a:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <HAL_PWREx_EnableInternalWakeUpLine+0x1c>)
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d92:	6093      	str	r3, [r2, #8]
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40007000 	.word	0x40007000

08000da4 <HAL_PWREx_DisableInternalWakeUpLine>:
/**
  * @brief Disable Internal Wake-up Line.
  * @retval None
  */
void HAL_PWREx_DisableInternalWakeUpLine(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_EIWF);
 8000da8:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <HAL_PWREx_DisableInternalWakeUpLine+0x1c>)
 8000daa:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <HAL_PWREx_DisableInternalWakeUpLine+0x1c>)
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000db2:	6093      	str	r3, [r2, #8]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40007000 	.word	0x40007000

08000dc4 <HAL_PWREx_EnterSHUTDOWNMode>:
  *        The BOR is not available.
  * @note  The I/Os can be configured either with a pull-up or pull-down or can be kept in analog state.
  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0

  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_SHUTDOWN);
 8000dc8:	4a09      	ldr	r2, [pc, #36]	; (8000df0 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f023 0307 	bic.w	r3, r3, #7
 8000dd2:	f043 0304 	orr.w	r3, r3, #4
 8000dd6:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000dd8:	4a06      	ldr	r2, [pc, #24]	; (8000df4 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8000ddc:	691b      	ldr	r3, [r3, #16]
 8000dde:	f043 0304 	orr.w	r3, r3, #4
 8000de2:	6113      	str	r3, [r2, #16]
 8000de4:	bf30      	wfi
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	40007000 	.word	0x40007000
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d101      	bne.n	8000e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e3d4      	b.n	80015b4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e0a:	4ba1      	ldr	r3, [pc, #644]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	f003 030c 	and.w	r3, r3, #12
 8000e12:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e14:	4b9e      	ldr	r3, [pc, #632]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	f003 0303 	and.w	r3, r3, #3
 8000e1c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f003 0310 	and.w	r3, r3, #16
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	f000 80e4 	beq.w	8000ff4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d007      	beq.n	8000e42 <HAL_RCC_OscConfig+0x4a>
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	2b0c      	cmp	r3, #12
 8000e36:	f040 808b 	bne.w	8000f50 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	f040 8087 	bne.w	8000f50 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e42:	4b93      	ldr	r3, [pc, #588]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d005      	beq.n	8000e5a <HAL_RCC_OscConfig+0x62>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d101      	bne.n	8000e5a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e3ac      	b.n	80015b4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6a1a      	ldr	r2, [r3, #32]
 8000e5e:	4b8c      	ldr	r3, [pc, #560]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0308 	and.w	r3, r3, #8
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d004      	beq.n	8000e74 <HAL_RCC_OscConfig+0x7c>
 8000e6a:	4b89      	ldr	r3, [pc, #548]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e72:	e005      	b.n	8000e80 <HAL_RCC_OscConfig+0x88>
 8000e74:	4b86      	ldr	r3, [pc, #536]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8000e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e7a:	091b      	lsrs	r3, r3, #4
 8000e7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d923      	bls.n	8000ecc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6a1b      	ldr	r3, [r3, #32]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f000 fda5 	bl	80019d8 <RCC_SetFlashLatencyFromMSIRange>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	e38d      	b.n	80015b4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e98:	4a7d      	ldr	r2, [pc, #500]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8000e9a:	4b7d      	ldr	r3, [pc, #500]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f043 0308 	orr.w	r3, r3, #8
 8000ea2:	6013      	str	r3, [r2, #0]
 8000ea4:	497a      	ldr	r1, [pc, #488]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8000ea6:	4b7a      	ldr	r3, [pc, #488]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6a1b      	ldr	r3, [r3, #32]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000eb6:	4976      	ldr	r1, [pc, #472]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8000eb8:	4b75      	ldr	r3, [pc, #468]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	69db      	ldr	r3, [r3, #28]
 8000ec4:	021b      	lsls	r3, r3, #8
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	604b      	str	r3, [r1, #4]
 8000eca:	e025      	b.n	8000f18 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ecc:	4a70      	ldr	r2, [pc, #448]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8000ece:	4b70      	ldr	r3, [pc, #448]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f043 0308 	orr.w	r3, r3, #8
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	496d      	ldr	r1, [pc, #436]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8000eda:	4b6d      	ldr	r3, [pc, #436]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6a1b      	ldr	r3, [r3, #32]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000eea:	4969      	ldr	r1, [pc, #420]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8000eec:	4b68      	ldr	r3, [pc, #416]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	69db      	ldr	r3, [r3, #28]
 8000ef8:	021b      	lsls	r3, r3, #8
 8000efa:	4313      	orrs	r3, r2
 8000efc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d109      	bne.n	8000f18 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6a1b      	ldr	r3, [r3, #32]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f000 fd65 	bl	80019d8 <RCC_SetFlashLatencyFromMSIRange>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e34d      	b.n	80015b4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f18:	f000 fc6a 	bl	80017f0 <HAL_RCC_GetSysClockFreq>
 8000f1c:	4601      	mov	r1, r0
 8000f1e:	4b5c      	ldr	r3, [pc, #368]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	091b      	lsrs	r3, r3, #4
 8000f24:	f003 030f 	and.w	r3, r3, #15
 8000f28:	4a5a      	ldr	r2, [pc, #360]	; (8001094 <HAL_RCC_OscConfig+0x29c>)
 8000f2a:	5cd3      	ldrb	r3, [r2, r3]
 8000f2c:	f003 031f 	and.w	r3, r3, #31
 8000f30:	fa21 f303 	lsr.w	r3, r1, r3
 8000f34:	4a58      	ldr	r2, [pc, #352]	; (8001098 <HAL_RCC_OscConfig+0x2a0>)
 8000f36:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f38:	4b58      	ldr	r3, [pc, #352]	; (800109c <HAL_RCC_OscConfig+0x2a4>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f001 ffb5 	bl	8002eac <HAL_InitTick>
 8000f42:	4603      	mov	r3, r0
 8000f44:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d052      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	e331      	b.n	80015b4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d032      	beq.n	8000fbe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f58:	4a4d      	ldr	r2, [pc, #308]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8000f5a:	4b4d      	ldr	r3, [pc, #308]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f64:	f7ff faf2 	bl	800054c <HAL_GetTick>
 8000f68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f6a:	e008      	b.n	8000f7e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f6c:	f7ff faee 	bl	800054c <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d901      	bls.n	8000f7e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e31a      	b.n	80015b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f7e:	4b44      	ldr	r3, [pc, #272]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d0f0      	beq.n	8000f6c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f8a:	4a41      	ldr	r2, [pc, #260]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8000f8c:	4b40      	ldr	r3, [pc, #256]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f043 0308 	orr.w	r3, r3, #8
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	493e      	ldr	r1, [pc, #248]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8000f98:	4b3d      	ldr	r3, [pc, #244]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a1b      	ldr	r3, [r3, #32]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fa8:	4939      	ldr	r1, [pc, #228]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8000faa:	4b39      	ldr	r3, [pc, #228]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	604b      	str	r3, [r1, #4]
 8000fbc:	e01a      	b.n	8000ff4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000fbe:	4a34      	ldr	r2, [pc, #208]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8000fc0:	4b33      	ldr	r3, [pc, #204]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f023 0301 	bic.w	r3, r3, #1
 8000fc8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fca:	f7ff fabf 	bl	800054c <HAL_GetTick>
 8000fce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000fd0:	e008      	b.n	8000fe4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fd2:	f7ff fabb 	bl	800054c <HAL_GetTick>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d901      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e2e7      	b.n	80015b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000fe4:	4b2a      	ldr	r3, [pc, #168]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1f0      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x1da>
 8000ff0:	e000      	b.n	8000ff4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ff2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d074      	beq.n	80010ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	2b08      	cmp	r3, #8
 8001004:	d005      	beq.n	8001012 <HAL_RCC_OscConfig+0x21a>
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	2b0c      	cmp	r3, #12
 800100a:	d10e      	bne.n	800102a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	2b03      	cmp	r3, #3
 8001010:	d10b      	bne.n	800102a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001012:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d064      	beq.n	80010e8 <HAL_RCC_OscConfig+0x2f0>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d160      	bne.n	80010e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e2c4      	b.n	80015b4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001032:	d106      	bne.n	8001042 <HAL_RCC_OscConfig+0x24a>
 8001034:	4a16      	ldr	r2, [pc, #88]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8001036:	4b16      	ldr	r3, [pc, #88]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800103e:	6013      	str	r3, [r2, #0]
 8001040:	e01d      	b.n	800107e <HAL_RCC_OscConfig+0x286>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800104a:	d10c      	bne.n	8001066 <HAL_RCC_OscConfig+0x26e>
 800104c:	4a10      	ldr	r2, [pc, #64]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001056:	6013      	str	r3, [r2, #0]
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 800105a:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	e00b      	b.n	800107e <HAL_RCC_OscConfig+0x286>
 8001066:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001070:	6013      	str	r3, [r2, #0]
 8001072:	4a07      	ldr	r2, [pc, #28]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_RCC_OscConfig+0x298>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800107c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d01c      	beq.n	80010c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001086:	f7ff fa61 	bl	800054c <HAL_GetTick>
 800108a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800108c:	e011      	b.n	80010b2 <HAL_RCC_OscConfig+0x2ba>
 800108e:	bf00      	nop
 8001090:	40021000 	.word	0x40021000
 8001094:	08005fe4 	.word	0x08005fe4
 8001098:	20000008 	.word	0x20000008
 800109c:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010a0:	f7ff fa54 	bl	800054c <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b64      	cmp	r3, #100	; 0x64
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e280      	b.n	80015b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010b2:	4baf      	ldr	r3, [pc, #700]	; (8001370 <HAL_RCC_OscConfig+0x578>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d0f0      	beq.n	80010a0 <HAL_RCC_OscConfig+0x2a8>
 80010be:	e014      	b.n	80010ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c0:	f7ff fa44 	bl	800054c <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010c8:	f7ff fa40 	bl	800054c <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b64      	cmp	r3, #100	; 0x64
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e26c      	b.n	80015b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010da:	4ba5      	ldr	r3, [pc, #660]	; (8001370 <HAL_RCC_OscConfig+0x578>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1f0      	bne.n	80010c8 <HAL_RCC_OscConfig+0x2d0>
 80010e6:	e000      	b.n	80010ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d060      	beq.n	80011b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	2b04      	cmp	r3, #4
 80010fa:	d005      	beq.n	8001108 <HAL_RCC_OscConfig+0x310>
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	2b0c      	cmp	r3, #12
 8001100:	d119      	bne.n	8001136 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d116      	bne.n	8001136 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001108:	4b99      	ldr	r3, [pc, #612]	; (8001370 <HAL_RCC_OscConfig+0x578>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001110:	2b00      	cmp	r3, #0
 8001112:	d005      	beq.n	8001120 <HAL_RCC_OscConfig+0x328>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d101      	bne.n	8001120 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e249      	b.n	80015b4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001120:	4993      	ldr	r1, [pc, #588]	; (8001370 <HAL_RCC_OscConfig+0x578>)
 8001122:	4b93      	ldr	r3, [pc, #588]	; (8001370 <HAL_RCC_OscConfig+0x578>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	061b      	lsls	r3, r3, #24
 8001130:	4313      	orrs	r3, r2
 8001132:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001134:	e040      	b.n	80011b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d023      	beq.n	8001186 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800113e:	4a8c      	ldr	r2, [pc, #560]	; (8001370 <HAL_RCC_OscConfig+0x578>)
 8001140:	4b8b      	ldr	r3, [pc, #556]	; (8001370 <HAL_RCC_OscConfig+0x578>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800114a:	f7ff f9ff 	bl	800054c <HAL_GetTick>
 800114e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001150:	e008      	b.n	8001164 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001152:	f7ff f9fb 	bl	800054c <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d901      	bls.n	8001164 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e227      	b.n	80015b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001164:	4b82      	ldr	r3, [pc, #520]	; (8001370 <HAL_RCC_OscConfig+0x578>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800116c:	2b00      	cmp	r3, #0
 800116e:	d0f0      	beq.n	8001152 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001170:	497f      	ldr	r1, [pc, #508]	; (8001370 <HAL_RCC_OscConfig+0x578>)
 8001172:	4b7f      	ldr	r3, [pc, #508]	; (8001370 <HAL_RCC_OscConfig+0x578>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	061b      	lsls	r3, r3, #24
 8001180:	4313      	orrs	r3, r2
 8001182:	604b      	str	r3, [r1, #4]
 8001184:	e018      	b.n	80011b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001186:	4a7a      	ldr	r2, [pc, #488]	; (8001370 <HAL_RCC_OscConfig+0x578>)
 8001188:	4b79      	ldr	r3, [pc, #484]	; (8001370 <HAL_RCC_OscConfig+0x578>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001192:	f7ff f9db 	bl	800054c <HAL_GetTick>
 8001196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001198:	e008      	b.n	80011ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800119a:	f7ff f9d7 	bl	800054c <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e203      	b.n	80015b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011ac:	4b70      	ldr	r3, [pc, #448]	; (8001370 <HAL_RCC_OscConfig+0x578>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1f0      	bne.n	800119a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0308 	and.w	r3, r3, #8
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d03c      	beq.n	800123e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	695b      	ldr	r3, [r3, #20]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d01c      	beq.n	8001206 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011cc:	4a68      	ldr	r2, [pc, #416]	; (8001370 <HAL_RCC_OscConfig+0x578>)
 80011ce:	4b68      	ldr	r3, [pc, #416]	; (8001370 <HAL_RCC_OscConfig+0x578>)
 80011d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011dc:	f7ff f9b6 	bl	800054c <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011e4:	f7ff f9b2 	bl	800054c <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e1de      	b.n	80015b4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011f6:	4b5e      	ldr	r3, [pc, #376]	; (8001370 <HAL_RCC_OscConfig+0x578>)
 80011f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0ef      	beq.n	80011e4 <HAL_RCC_OscConfig+0x3ec>
 8001204:	e01b      	b.n	800123e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001206:	4a5a      	ldr	r2, [pc, #360]	; (8001370 <HAL_RCC_OscConfig+0x578>)
 8001208:	4b59      	ldr	r3, [pc, #356]	; (8001370 <HAL_RCC_OscConfig+0x578>)
 800120a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800120e:	f023 0301 	bic.w	r3, r3, #1
 8001212:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001216:	f7ff f999 	bl	800054c <HAL_GetTick>
 800121a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800121c:	e008      	b.n	8001230 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800121e:	f7ff f995 	bl	800054c <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e1c1      	b.n	80015b4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001230:	4b4f      	ldr	r3, [pc, #316]	; (8001370 <HAL_RCC_OscConfig+0x578>)
 8001232:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1ef      	bne.n	800121e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	2b00      	cmp	r3, #0
 8001248:	f000 80a6 	beq.w	8001398 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800124c:	2300      	movs	r3, #0
 800124e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001250:	4b47      	ldr	r3, [pc, #284]	; (8001370 <HAL_RCC_OscConfig+0x578>)
 8001252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d10d      	bne.n	8001278 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800125c:	4a44      	ldr	r2, [pc, #272]	; (8001370 <HAL_RCC_OscConfig+0x578>)
 800125e:	4b44      	ldr	r3, [pc, #272]	; (8001370 <HAL_RCC_OscConfig+0x578>)
 8001260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001266:	6593      	str	r3, [r2, #88]	; 0x58
 8001268:	4b41      	ldr	r3, [pc, #260]	; (8001370 <HAL_RCC_OscConfig+0x578>)
 800126a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001274:	2301      	movs	r3, #1
 8001276:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001278:	4b3e      	ldr	r3, [pc, #248]	; (8001374 <HAL_RCC_OscConfig+0x57c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001280:	2b00      	cmp	r3, #0
 8001282:	d118      	bne.n	80012b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001284:	4a3b      	ldr	r2, [pc, #236]	; (8001374 <HAL_RCC_OscConfig+0x57c>)
 8001286:	4b3b      	ldr	r3, [pc, #236]	; (8001374 <HAL_RCC_OscConfig+0x57c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800128e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001290:	f7ff f95c 	bl	800054c <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001298:	f7ff f958 	bl	800054c <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e184      	b.n	80015b4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012aa:	4b32      	ldr	r3, [pc, #200]	; (8001374 <HAL_RCC_OscConfig+0x57c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0f0      	beq.n	8001298 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d108      	bne.n	80012d0 <HAL_RCC_OscConfig+0x4d8>
 80012be:	4a2c      	ldr	r2, [pc, #176]	; (8001370 <HAL_RCC_OscConfig+0x578>)
 80012c0:	4b2b      	ldr	r3, [pc, #172]	; (8001370 <HAL_RCC_OscConfig+0x578>)
 80012c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012ce:	e024      	b.n	800131a <HAL_RCC_OscConfig+0x522>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	2b05      	cmp	r3, #5
 80012d6:	d110      	bne.n	80012fa <HAL_RCC_OscConfig+0x502>
 80012d8:	4a25      	ldr	r2, [pc, #148]	; (8001370 <HAL_RCC_OscConfig+0x578>)
 80012da:	4b25      	ldr	r3, [pc, #148]	; (8001370 <HAL_RCC_OscConfig+0x578>)
 80012dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012e0:	f043 0304 	orr.w	r3, r3, #4
 80012e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012e8:	4a21      	ldr	r2, [pc, #132]	; (8001370 <HAL_RCC_OscConfig+0x578>)
 80012ea:	4b21      	ldr	r3, [pc, #132]	; (8001370 <HAL_RCC_OscConfig+0x578>)
 80012ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012f8:	e00f      	b.n	800131a <HAL_RCC_OscConfig+0x522>
 80012fa:	4a1d      	ldr	r2, [pc, #116]	; (8001370 <HAL_RCC_OscConfig+0x578>)
 80012fc:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <HAL_RCC_OscConfig+0x578>)
 80012fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001302:	f023 0301 	bic.w	r3, r3, #1
 8001306:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800130a:	4a19      	ldr	r2, [pc, #100]	; (8001370 <HAL_RCC_OscConfig+0x578>)
 800130c:	4b18      	ldr	r3, [pc, #96]	; (8001370 <HAL_RCC_OscConfig+0x578>)
 800130e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001312:	f023 0304 	bic.w	r3, r3, #4
 8001316:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d016      	beq.n	8001350 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001322:	f7ff f913 	bl	800054c <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001328:	e00a      	b.n	8001340 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800132a:	f7ff f90f 	bl	800054c <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	f241 3288 	movw	r2, #5000	; 0x1388
 8001338:	4293      	cmp	r3, r2
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e139      	b.n	80015b4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001340:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <HAL_RCC_OscConfig+0x578>)
 8001342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0ed      	beq.n	800132a <HAL_RCC_OscConfig+0x532>
 800134e:	e01a      	b.n	8001386 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001350:	f7ff f8fc 	bl	800054c <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001356:	e00f      	b.n	8001378 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001358:	f7ff f8f8 	bl	800054c <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	f241 3288 	movw	r2, #5000	; 0x1388
 8001366:	4293      	cmp	r3, r2
 8001368:	d906      	bls.n	8001378 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e122      	b.n	80015b4 <HAL_RCC_OscConfig+0x7bc>
 800136e:	bf00      	nop
 8001370:	40021000 	.word	0x40021000
 8001374:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001378:	4b90      	ldr	r3, [pc, #576]	; (80015bc <HAL_RCC_OscConfig+0x7c4>)
 800137a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1e8      	bne.n	8001358 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001386:	7ffb      	ldrb	r3, [r7, #31]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d105      	bne.n	8001398 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800138c:	4a8b      	ldr	r2, [pc, #556]	; (80015bc <HAL_RCC_OscConfig+0x7c4>)
 800138e:	4b8b      	ldr	r3, [pc, #556]	; (80015bc <HAL_RCC_OscConfig+0x7c4>)
 8001390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001392:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001396:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139c:	2b00      	cmp	r3, #0
 800139e:	f000 8108 	beq.w	80015b2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	f040 80d0 	bne.w	800154c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80013ac:	4b83      	ldr	r3, [pc, #524]	; (80015bc <HAL_RCC_OscConfig+0x7c4>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	f003 0203 	and.w	r2, r3, #3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013bc:	429a      	cmp	r2, r3
 80013be:	d130      	bne.n	8001422 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	3b01      	subs	r3, #1
 80013cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d127      	bne.n	8001422 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013de:	429a      	cmp	r2, r3
 80013e0:	d11f      	bne.n	8001422 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80013ec:	2a07      	cmp	r2, #7
 80013ee:	bf14      	ite	ne
 80013f0:	2201      	movne	r2, #1
 80013f2:	2200      	moveq	r2, #0
 80013f4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d113      	bne.n	8001422 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001404:	085b      	lsrs	r3, r3, #1
 8001406:	3b01      	subs	r3, #1
 8001408:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800140a:	429a      	cmp	r2, r3
 800140c:	d109      	bne.n	8001422 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	085b      	lsrs	r3, r3, #1
 800141a:	3b01      	subs	r3, #1
 800141c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800141e:	429a      	cmp	r2, r3
 8001420:	d06e      	beq.n	8001500 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	2b0c      	cmp	r3, #12
 8001426:	d069      	beq.n	80014fc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001428:	4b64      	ldr	r3, [pc, #400]	; (80015bc <HAL_RCC_OscConfig+0x7c4>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d105      	bne.n	8001440 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001434:	4b61      	ldr	r3, [pc, #388]	; (80015bc <HAL_RCC_OscConfig+0x7c4>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e0b7      	b.n	80015b4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001444:	4a5d      	ldr	r2, [pc, #372]	; (80015bc <HAL_RCC_OscConfig+0x7c4>)
 8001446:	4b5d      	ldr	r3, [pc, #372]	; (80015bc <HAL_RCC_OscConfig+0x7c4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800144e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001450:	f7ff f87c 	bl	800054c <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001458:	f7ff f878 	bl	800054c <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e0a4      	b.n	80015b4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800146a:	4b54      	ldr	r3, [pc, #336]	; (80015bc <HAL_RCC_OscConfig+0x7c4>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f0      	bne.n	8001458 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001476:	4851      	ldr	r0, [pc, #324]	; (80015bc <HAL_RCC_OscConfig+0x7c4>)
 8001478:	4b50      	ldr	r3, [pc, #320]	; (80015bc <HAL_RCC_OscConfig+0x7c4>)
 800147a:	68da      	ldr	r2, [r3, #12]
 800147c:	4b50      	ldr	r3, [pc, #320]	; (80015c0 <HAL_RCC_OscConfig+0x7c8>)
 800147e:	4013      	ands	r3, r2
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001488:	3a01      	subs	r2, #1
 800148a:	0112      	lsls	r2, r2, #4
 800148c:	4311      	orrs	r1, r2
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001492:	0212      	lsls	r2, r2, #8
 8001494:	4311      	orrs	r1, r2
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800149a:	0852      	lsrs	r2, r2, #1
 800149c:	3a01      	subs	r2, #1
 800149e:	0552      	lsls	r2, r2, #21
 80014a0:	4311      	orrs	r1, r2
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014a6:	0852      	lsrs	r2, r2, #1
 80014a8:	3a01      	subs	r2, #1
 80014aa:	0652      	lsls	r2, r2, #25
 80014ac:	4311      	orrs	r1, r2
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80014b2:	0912      	lsrs	r2, r2, #4
 80014b4:	0452      	lsls	r2, r2, #17
 80014b6:	430a      	orrs	r2, r1
 80014b8:	4313      	orrs	r3, r2
 80014ba:	60c3      	str	r3, [r0, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80014bc:	4a3f      	ldr	r2, [pc, #252]	; (80015bc <HAL_RCC_OscConfig+0x7c4>)
 80014be:	4b3f      	ldr	r3, [pc, #252]	; (80015bc <HAL_RCC_OscConfig+0x7c4>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014c8:	4a3c      	ldr	r2, [pc, #240]	; (80015bc <HAL_RCC_OscConfig+0x7c4>)
 80014ca:	4b3c      	ldr	r3, [pc, #240]	; (80015bc <HAL_RCC_OscConfig+0x7c4>)
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014d4:	f7ff f83a 	bl	800054c <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014dc:	f7ff f836 	bl	800054c <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e062      	b.n	80015b4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014ee:	4b33      	ldr	r3, [pc, #204]	; (80015bc <HAL_RCC_OscConfig+0x7c4>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0f0      	beq.n	80014dc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014fa:	e05a      	b.n	80015b2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e059      	b.n	80015b4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001500:	4b2e      	ldr	r3, [pc, #184]	; (80015bc <HAL_RCC_OscConfig+0x7c4>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d152      	bne.n	80015b2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800150c:	4a2b      	ldr	r2, [pc, #172]	; (80015bc <HAL_RCC_OscConfig+0x7c4>)
 800150e:	4b2b      	ldr	r3, [pc, #172]	; (80015bc <HAL_RCC_OscConfig+0x7c4>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001516:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001518:	4a28      	ldr	r2, [pc, #160]	; (80015bc <HAL_RCC_OscConfig+0x7c4>)
 800151a:	4b28      	ldr	r3, [pc, #160]	; (80015bc <HAL_RCC_OscConfig+0x7c4>)
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001522:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001524:	f7ff f812 	bl	800054c <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800152c:	f7ff f80e 	bl	800054c <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e03a      	b.n	80015b4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800153e:	4b1f      	ldr	r3, [pc, #124]	; (80015bc <HAL_RCC_OscConfig+0x7c4>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0f0      	beq.n	800152c <HAL_RCC_OscConfig+0x734>
 800154a:	e032      	b.n	80015b2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	2b0c      	cmp	r3, #12
 8001550:	d02d      	beq.n	80015ae <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001552:	4a1a      	ldr	r2, [pc, #104]	; (80015bc <HAL_RCC_OscConfig+0x7c4>)
 8001554:	4b19      	ldr	r3, [pc, #100]	; (80015bc <HAL_RCC_OscConfig+0x7c4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800155c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800155e:	4b17      	ldr	r3, [pc, #92]	; (80015bc <HAL_RCC_OscConfig+0x7c4>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d105      	bne.n	8001576 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800156a:	4a14      	ldr	r2, [pc, #80]	; (80015bc <HAL_RCC_OscConfig+0x7c4>)
 800156c:	4b13      	ldr	r3, [pc, #76]	; (80015bc <HAL_RCC_OscConfig+0x7c4>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	f023 0303 	bic.w	r3, r3, #3
 8001574:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001576:	4a11      	ldr	r2, [pc, #68]	; (80015bc <HAL_RCC_OscConfig+0x7c4>)
 8001578:	4b10      	ldr	r3, [pc, #64]	; (80015bc <HAL_RCC_OscConfig+0x7c4>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001580:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001584:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001586:	f7fe ffe1 	bl	800054c <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800158e:	f7fe ffdd 	bl	800054c <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e009      	b.n	80015b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_RCC_OscConfig+0x7c4>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1f0      	bne.n	800158e <HAL_RCC_OscConfig+0x796>
 80015ac:	e001      	b.n	80015b2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3720      	adds	r7, #32
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40021000 	.word	0x40021000
 80015c0:	f99d808c 	.word	0xf99d808c

080015c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e0c8      	b.n	800176a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015d8:	4b66      	ldr	r3, [pc, #408]	; (8001774 <HAL_RCC_ClockConfig+0x1b0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0207 	and.w	r2, r3, #7
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d210      	bcs.n	8001608 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015e6:	4963      	ldr	r1, [pc, #396]	; (8001774 <HAL_RCC_ClockConfig+0x1b0>)
 80015e8:	4b62      	ldr	r3, [pc, #392]	; (8001774 <HAL_RCC_ClockConfig+0x1b0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f023 0207 	bic.w	r2, r3, #7
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015f6:	4b5f      	ldr	r3, [pc, #380]	; (8001774 <HAL_RCC_ClockConfig+0x1b0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0207 	and.w	r2, r3, #7
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	429a      	cmp	r2, r3
 8001602:	d001      	beq.n	8001608 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e0b0      	b.n	800176a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	2b00      	cmp	r3, #0
 8001612:	d04c      	beq.n	80016ae <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b03      	cmp	r3, #3
 800161a:	d107      	bne.n	800162c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800161c:	4b56      	ldr	r3, [pc, #344]	; (8001778 <HAL_RCC_ClockConfig+0x1b4>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d121      	bne.n	800166c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e09e      	b.n	800176a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b02      	cmp	r3, #2
 8001632:	d107      	bne.n	8001644 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001634:	4b50      	ldr	r3, [pc, #320]	; (8001778 <HAL_RCC_ClockConfig+0x1b4>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d115      	bne.n	800166c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e092      	b.n	800176a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d107      	bne.n	800165c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800164c:	4b4a      	ldr	r3, [pc, #296]	; (8001778 <HAL_RCC_ClockConfig+0x1b4>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d109      	bne.n	800166c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e086      	b.n	800176a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800165c:	4b46      	ldr	r3, [pc, #280]	; (8001778 <HAL_RCC_ClockConfig+0x1b4>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e07e      	b.n	800176a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800166c:	4942      	ldr	r1, [pc, #264]	; (8001778 <HAL_RCC_ClockConfig+0x1b4>)
 800166e:	4b42      	ldr	r3, [pc, #264]	; (8001778 <HAL_RCC_ClockConfig+0x1b4>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f023 0203 	bic.w	r2, r3, #3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	4313      	orrs	r3, r2
 800167c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800167e:	f7fe ff65 	bl	800054c <HAL_GetTick>
 8001682:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001684:	e00a      	b.n	800169c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001686:	f7fe ff61 	bl	800054c <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	f241 3288 	movw	r2, #5000	; 0x1388
 8001694:	4293      	cmp	r3, r2
 8001696:	d901      	bls.n	800169c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e066      	b.n	800176a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169c:	4b36      	ldr	r3, [pc, #216]	; (8001778 <HAL_RCC_ClockConfig+0x1b4>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f003 020c 	and.w	r2, r3, #12
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d1eb      	bne.n	8001686 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d008      	beq.n	80016cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016ba:	492f      	ldr	r1, [pc, #188]	; (8001778 <HAL_RCC_ClockConfig+0x1b4>)
 80016bc:	4b2e      	ldr	r3, [pc, #184]	; (8001778 <HAL_RCC_ClockConfig+0x1b4>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016cc:	4b29      	ldr	r3, [pc, #164]	; (8001774 <HAL_RCC_ClockConfig+0x1b0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0207 	and.w	r2, r3, #7
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d910      	bls.n	80016fc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016da:	4926      	ldr	r1, [pc, #152]	; (8001774 <HAL_RCC_ClockConfig+0x1b0>)
 80016dc:	4b25      	ldr	r3, [pc, #148]	; (8001774 <HAL_RCC_ClockConfig+0x1b0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f023 0207 	bic.w	r2, r3, #7
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ea:	4b22      	ldr	r3, [pc, #136]	; (8001774 <HAL_RCC_ClockConfig+0x1b0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0207 	and.w	r2, r3, #7
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e036      	b.n	800176a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	d008      	beq.n	800171a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001708:	491b      	ldr	r1, [pc, #108]	; (8001778 <HAL_RCC_ClockConfig+0x1b4>)
 800170a:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <HAL_RCC_ClockConfig+0x1b4>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	4313      	orrs	r3, r2
 8001718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0308 	and.w	r3, r3, #8
 8001722:	2b00      	cmp	r3, #0
 8001724:	d009      	beq.n	800173a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001726:	4914      	ldr	r1, [pc, #80]	; (8001778 <HAL_RCC_ClockConfig+0x1b4>)
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <HAL_RCC_ClockConfig+0x1b4>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	4313      	orrs	r3, r2
 8001738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800173a:	f000 f859 	bl	80017f0 <HAL_RCC_GetSysClockFreq>
 800173e:	4601      	mov	r1, r0
 8001740:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <HAL_RCC_ClockConfig+0x1b4>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	091b      	lsrs	r3, r3, #4
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	4a0c      	ldr	r2, [pc, #48]	; (800177c <HAL_RCC_ClockConfig+0x1b8>)
 800174c:	5cd3      	ldrb	r3, [r2, r3]
 800174e:	f003 031f 	and.w	r3, r3, #31
 8001752:	fa21 f303 	lsr.w	r3, r1, r3
 8001756:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <HAL_RCC_ClockConfig+0x1bc>)
 8001758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <HAL_RCC_ClockConfig+0x1c0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f001 fba4 	bl	8002eac <HAL_InitTick>
 8001764:	4603      	mov	r3, r0
 8001766:	72fb      	strb	r3, [r7, #11]

  return status;
 8001768:	7afb      	ldrb	r3, [r7, #11]
}
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40022000 	.word	0x40022000
 8001778:	40021000 	.word	0x40021000
 800177c:	08005fe4 	.word	0x08005fe4
 8001780:	20000008 	.word	0x20000008
 8001784:	20000000 	.word	0x20000000

08001788 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	; 0x28
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8001794:	4a15      	ldr	r2, [pc, #84]	; (80017ec <HAL_RCC_MCOConfig+0x64>)
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <HAL_RCC_MCOConfig+0x64>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_RCC_MCOConfig+0x64>)
 80017a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	693b      	ldr	r3, [r7, #16]

  /* Configue the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 80017ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017b6:	2302      	movs	r3, #2
 80017b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80017be:	2300      	movs	r3, #0
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	4619      	mov	r1, r3
 80017c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017cc:	f7ff f82c 	bl	8000828 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 80017d0:	4806      	ldr	r0, [pc, #24]	; (80017ec <HAL_RCC_MCOConfig+0x64>)
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_RCC_MCOConfig+0x64>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 80017da:	68b9      	ldr	r1, [r7, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	430b      	orrs	r3, r1
 80017e0:	4313      	orrs	r3, r2
 80017e2:	6083      	str	r3, [r0, #8]
}
 80017e4:	bf00      	nop
 80017e6:	3728      	adds	r7, #40	; 0x28
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40021000 	.word	0x40021000

080017f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b089      	sub	sp, #36	; 0x24
 80017f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
 80017fa:	2300      	movs	r3, #0
 80017fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017fe:	4b3d      	ldr	r3, [pc, #244]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 030c 	and.w	r3, r3, #12
 8001806:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001808:	4b3a      	ldr	r3, [pc, #232]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x104>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	f003 0303 	and.w	r3, r3, #3
 8001810:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d005      	beq.n	8001824 <HAL_RCC_GetSysClockFreq+0x34>
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	2b0c      	cmp	r3, #12
 800181c:	d121      	bne.n	8001862 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d11e      	bne.n	8001862 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001824:	4b33      	ldr	r3, [pc, #204]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0308 	and.w	r3, r3, #8
 800182c:	2b00      	cmp	r3, #0
 800182e:	d107      	bne.n	8001840 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001830:	4b30      	ldr	r3, [pc, #192]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001836:	0a1b      	lsrs	r3, r3, #8
 8001838:	f003 030f 	and.w	r3, r3, #15
 800183c:	61fb      	str	r3, [r7, #28]
 800183e:	e005      	b.n	800184c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001840:	4b2c      	ldr	r3, [pc, #176]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	091b      	lsrs	r3, r3, #4
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800184c:	4a2a      	ldr	r2, [pc, #168]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001854:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d10d      	bne.n	8001878 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001860:	e00a      	b.n	8001878 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	2b04      	cmp	r3, #4
 8001866:	d102      	bne.n	800186e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001868:	4b24      	ldr	r3, [pc, #144]	; (80018fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800186a:	61bb      	str	r3, [r7, #24]
 800186c:	e004      	b.n	8001878 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	2b08      	cmp	r3, #8
 8001872:	d101      	bne.n	8001878 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001874:	4b22      	ldr	r3, [pc, #136]	; (8001900 <HAL_RCC_GetSysClockFreq+0x110>)
 8001876:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	2b0c      	cmp	r3, #12
 800187c:	d133      	bne.n	80018e6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800187e:	4b1d      	ldr	r3, [pc, #116]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	2b02      	cmp	r3, #2
 800188c:	d002      	beq.n	8001894 <HAL_RCC_GetSysClockFreq+0xa4>
 800188e:	2b03      	cmp	r3, #3
 8001890:	d003      	beq.n	800189a <HAL_RCC_GetSysClockFreq+0xaa>
 8001892:	e005      	b.n	80018a0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001894:	4b19      	ldr	r3, [pc, #100]	; (80018fc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001896:	617b      	str	r3, [r7, #20]
      break;
 8001898:	e005      	b.n	80018a6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800189a:	4b19      	ldr	r3, [pc, #100]	; (8001900 <HAL_RCC_GetSysClockFreq+0x110>)
 800189c:	617b      	str	r3, [r7, #20]
      break;
 800189e:	e002      	b.n	80018a6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	617b      	str	r3, [r7, #20]
      break;
 80018a4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018a6:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x104>)
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	091b      	lsrs	r3, r3, #4
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	3301      	adds	r3, #1
 80018b2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80018b4:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x104>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	0a1b      	lsrs	r3, r3, #8
 80018ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	fb02 f203 	mul.w	r2, r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ca:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018cc:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x104>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	0e5b      	lsrs	r3, r3, #25
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	3301      	adds	r3, #1
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80018e6:	69bb      	ldr	r3, [r7, #24]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3724      	adds	r7, #36	; 0x24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	40021000 	.word	0x40021000
 80018f8:	08005ffc 	.word	0x08005ffc
 80018fc:	00f42400 	.word	0x00f42400
 8001900:	007a1200 	.word	0x007a1200

08001904 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <HAL_RCC_GetHCLKFreq+0x14>)
 800190a:	681b      	ldr	r3, [r3, #0]
}
 800190c:	4618      	mov	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20000008 	.word	0x20000008

0800191c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001920:	f7ff fff0 	bl	8001904 <HAL_RCC_GetHCLKFreq>
 8001924:	4601      	mov	r1, r0
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	0a1b      	lsrs	r3, r3, #8
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	4a04      	ldr	r2, [pc, #16]	; (8001944 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001932:	5cd3      	ldrb	r3, [r2, r3]
 8001934:	f003 031f 	and.w	r3, r3, #31
 8001938:	fa21 f303 	lsr.w	r3, r1, r3
}
 800193c:	4618      	mov	r0, r3
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40021000 	.word	0x40021000
 8001944:	08005ff4 	.word	0x08005ff4

08001948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800194c:	f7ff ffda 	bl	8001904 <HAL_RCC_GetHCLKFreq>
 8001950:	4601      	mov	r1, r0
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	0adb      	lsrs	r3, r3, #11
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	4a04      	ldr	r2, [pc, #16]	; (8001970 <HAL_RCC_GetPCLK2Freq+0x28>)
 800195e:	5cd3      	ldrb	r3, [r2, r3]
 8001960:	f003 031f 	and.w	r3, r3, #31
 8001964:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001968:	4618      	mov	r0, r3
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40021000 	.word	0x40021000
 8001970:	08005ff4 	.word	0x08005ff4

08001974 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	220f      	movs	r2, #15
 8001982:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <HAL_RCC_GetClockConfig+0x5c>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 0203 	and.w	r2, r3, #3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <HAL_RCC_GetClockConfig+0x5c>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <HAL_RCC_GetClockConfig+0x5c>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HAL_RCC_GetClockConfig+0x5c>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	08db      	lsrs	r3, r3, #3
 80019ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80019b6:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <HAL_RCC_GetClockConfig+0x60>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0207 	and.w	r2, r3, #7
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	601a      	str	r2, [r3, #0]
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40021000 	.word	0x40021000
 80019d4:	40022000 	.word	0x40022000

080019d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80019e0:	2300      	movs	r3, #0
 80019e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80019e4:	4b2a      	ldr	r3, [pc, #168]	; (8001a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80019f0:	f7ff f964 	bl	8000cbc <HAL_PWREx_GetVoltageRange>
 80019f4:	6178      	str	r0, [r7, #20]
 80019f6:	e014      	b.n	8001a22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019f8:	4a25      	ldr	r2, [pc, #148]	; (8001a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019fa:	4b25      	ldr	r3, [pc, #148]	; (8001a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a02:	6593      	str	r3, [r2, #88]	; 0x58
 8001a04:	4b22      	ldr	r3, [pc, #136]	; (8001a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a10:	f7ff f954 	bl	8000cbc <HAL_PWREx_GetVoltageRange>
 8001a14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a16:	4a1e      	ldr	r2, [pc, #120]	; (8001a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a18:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a20:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a28:	d10b      	bne.n	8001a42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b80      	cmp	r3, #128	; 0x80
 8001a2e:	d919      	bls.n	8001a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2ba0      	cmp	r3, #160	; 0xa0
 8001a34:	d902      	bls.n	8001a3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a36:	2302      	movs	r3, #2
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	e013      	b.n	8001a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	e010      	b.n	8001a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b80      	cmp	r3, #128	; 0x80
 8001a46:	d902      	bls.n	8001a4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a48:	2303      	movs	r3, #3
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	e00a      	b.n	8001a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b80      	cmp	r3, #128	; 0x80
 8001a52:	d102      	bne.n	8001a5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a54:	2302      	movs	r3, #2
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	e004      	b.n	8001a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b70      	cmp	r3, #112	; 0x70
 8001a5e:	d101      	bne.n	8001a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a60:	2301      	movs	r3, #1
 8001a62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a64:	490b      	ldr	r1, [pc, #44]	; (8001a94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f023 0207 	bic.w	r2, r3, #7
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a74:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0207 	and.w	r2, r3, #7
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d001      	beq.n	8001a86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40022000 	.word	0x40022000

08001a98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d03f      	beq.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ab8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001abc:	d01c      	beq.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001abe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ac2:	d802      	bhi.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00e      	beq.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001ac8:	e01f      	b.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001aca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ace:	d003      	beq.n	8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001ad0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ad4:	d01c      	beq.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001ad6:	e018      	b.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ad8:	4a85      	ldr	r2, [pc, #532]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ada:	4b85      	ldr	r3, [pc, #532]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ae4:	e015      	b.n	8001b12 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	2100      	movs	r1, #0
 8001aec:	4618      	mov	r0, r3
 8001aee:	f000 fac9 	bl	8002084 <RCCEx_PLLSAI1_Config>
 8001af2:	4603      	mov	r3, r0
 8001af4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001af6:	e00c      	b.n	8001b12 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3320      	adds	r3, #32
 8001afc:	2100      	movs	r1, #0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 fbb0 	bl	8002264 <RCCEx_PLLSAI2_Config>
 8001b04:	4603      	mov	r3, r0
 8001b06:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001b08:	e003      	b.n	8001b12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	74fb      	strb	r3, [r7, #19]
      break;
 8001b0e:	e000      	b.n	8001b12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001b10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001b12:	7cfb      	ldrb	r3, [r7, #19]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d10b      	bne.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b18:	4975      	ldr	r1, [pc, #468]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b1a:	4b75      	ldr	r3, [pc, #468]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b20:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001b2e:	e001      	b.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b30:	7cfb      	ldrb	r3, [r7, #19]
 8001b32:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d03f      	beq.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b48:	d01c      	beq.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001b4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b4e:	d802      	bhi.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d00e      	beq.n	8001b72 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001b54:	e01f      	b.n	8001b96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001b56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b5a:	d003      	beq.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001b5c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001b60:	d01c      	beq.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001b62:	e018      	b.n	8001b96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001b64:	4a62      	ldr	r2, [pc, #392]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b66:	4b62      	ldr	r3, [pc, #392]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b6e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001b70:	e015      	b.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3304      	adds	r3, #4
 8001b76:	2100      	movs	r1, #0
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 fa83 	bl	8002084 <RCCEx_PLLSAI1_Config>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001b82:	e00c      	b.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3320      	adds	r3, #32
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 fb6a 	bl	8002264 <RCCEx_PLLSAI2_Config>
 8001b90:	4603      	mov	r3, r0
 8001b92:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001b94:	e003      	b.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	74fb      	strb	r3, [r7, #19]
      break;
 8001b9a:	e000      	b.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001b9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001b9e:	7cfb      	ldrb	r3, [r7, #19]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d10b      	bne.n	8001bbc <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ba4:	4952      	ldr	r1, [pc, #328]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ba6:	4b52      	ldr	r3, [pc, #328]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001bba:	e001      	b.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001bbc:	7cfb      	ldrb	r3, [r7, #19]
 8001bbe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 80a0 	beq.w	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001bd2:	4b47      	ldr	r3, [pc, #284]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001be2:	2300      	movs	r3, #0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d00d      	beq.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001be8:	4a41      	ldr	r2, [pc, #260]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001bea:	4b41      	ldr	r3, [pc, #260]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	6593      	str	r3, [r2, #88]	; 0x58
 8001bf4:	4b3e      	ldr	r3, [pc, #248]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c00:	2301      	movs	r3, #1
 8001c02:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c04:	4a3b      	ldr	r2, [pc, #236]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001c06:	4b3b      	ldr	r3, [pc, #236]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c10:	f7fe fc9c 	bl	800054c <HAL_GetTick>
 8001c14:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001c16:	e009      	b.n	8001c2c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c18:	f7fe fc98 	bl	800054c <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d902      	bls.n	8001c2c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	74fb      	strb	r3, [r7, #19]
        break;
 8001c2a:	e005      	b.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001c2c:	4b31      	ldr	r3, [pc, #196]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0ef      	beq.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001c38:	7cfb      	ldrb	r3, [r7, #19]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d15c      	bne.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c3e:	4b2c      	ldr	r3, [pc, #176]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c48:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d01f      	beq.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d019      	beq.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001c5c:	4b24      	ldr	r3, [pc, #144]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001c68:	4a21      	ldr	r2, [pc, #132]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c6a:	4b21      	ldr	r3, [pc, #132]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001c78:	4a1d      	ldr	r2, [pc, #116]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c7a:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001c88:	4a19      	ldr	r2, [pc, #100]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d016      	beq.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9a:	f7fe fc57 	bl	800054c <HAL_GetTick>
 8001c9e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ca0:	e00b      	b.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca2:	f7fe fc53 	bl	800054c <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d902      	bls.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	74fb      	strb	r3, [r7, #19]
            break;
 8001cb8:	e006      	b.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cba:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0ec      	beq.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8001cc8:	7cfb      	ldrb	r3, [r7, #19]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10c      	bne.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cce:	4908      	ldr	r1, [pc, #32]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001cd0:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001ce6:	e009      	b.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ce8:	7cfb      	ldrb	r3, [r7, #19]
 8001cea:	74bb      	strb	r3, [r7, #18]
 8001cec:	e006      	b.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x264>
 8001cee:	bf00      	nop
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001cf8:	7cfb      	ldrb	r3, [r7, #19]
 8001cfa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cfc:	7c7b      	ldrb	r3, [r7, #17]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d105      	bne.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d02:	4a9e      	ldr	r2, [pc, #632]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d04:	4b9d      	ldr	r3, [pc, #628]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d0c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00a      	beq.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d1a:	4998      	ldr	r1, [pc, #608]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d1c:	4b97      	ldr	r3, [pc, #604]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d22:	f023 0203 	bic.w	r2, r3, #3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00a      	beq.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d3c:	498f      	ldr	r1, [pc, #572]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d3e:	4b8f      	ldr	r3, [pc, #572]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d44:	f023 020c 	bic.w	r2, r3, #12
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00a      	beq.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d5e:	4987      	ldr	r1, [pc, #540]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d60:	4b86      	ldr	r3, [pc, #536]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d66:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d00a      	beq.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001d80:	497e      	ldr	r1, [pc, #504]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d82:	4b7e      	ldr	r3, [pc, #504]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d88:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d90:	4313      	orrs	r3, r2
 8001d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0310 	and.w	r3, r3, #16
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00a      	beq.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001da2:	4976      	ldr	r1, [pc, #472]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001da4:	4b75      	ldr	r3, [pc, #468]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001daa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001db2:	4313      	orrs	r3, r2
 8001db4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0320 	and.w	r3, r3, #32
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d00a      	beq.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001dc4:	496d      	ldr	r1, [pc, #436]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001dc6:	4b6d      	ldr	r3, [pc, #436]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dcc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00a      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001de6:	4965      	ldr	r1, [pc, #404]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001de8:	4b64      	ldr	r3, [pc, #400]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dee:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df6:	4313      	orrs	r3, r2
 8001df8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d00a      	beq.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001e08:	495c      	ldr	r1, [pc, #368]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e0a:	4b5c      	ldr	r3, [pc, #368]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00a      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e2a:	4954      	ldr	r1, [pc, #336]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e2c:	4b53      	ldr	r3, [pc, #332]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e32:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00a      	beq.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e4c:	494b      	ldr	r1, [pc, #300]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e4e:	4b4b      	ldr	r3, [pc, #300]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00a      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e6e:	4943      	ldr	r1, [pc, #268]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e70:	4b42      	ldr	r3, [pc, #264]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d028      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e90:	493a      	ldr	r1, [pc, #232]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e92:	4b3a      	ldr	r3, [pc, #232]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e98:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001eaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001eae:	d106      	bne.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001eb0:	4a32      	ldr	r2, [pc, #200]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001eb2:	4b32      	ldr	r3, [pc, #200]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001eba:	60d3      	str	r3, [r2, #12]
 8001ebc:	e011      	b.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ec2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ec6:	d10c      	bne.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3304      	adds	r3, #4
 8001ecc:	2101      	movs	r1, #1
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 f8d8 	bl	8002084 <RCCEx_PLLSAI1_Config>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001ed8:	7cfb      	ldrb	r3, [r7, #19]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8001ede:	7cfb      	ldrb	r3, [r7, #19]
 8001ee0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d028      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001eee:	4923      	ldr	r1, [pc, #140]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ef0:	4b22      	ldr	r3, [pc, #136]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efe:	4313      	orrs	r3, r2
 8001f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f0c:	d106      	bne.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f0e:	4a1b      	ldr	r2, [pc, #108]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f10:	4b1a      	ldr	r3, [pc, #104]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f18:	60d3      	str	r3, [r2, #12]
 8001f1a:	e011      	b.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f24:	d10c      	bne.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3304      	adds	r3, #4
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f000 f8a9 	bl	8002084 <RCCEx_PLLSAI1_Config>
 8001f32:	4603      	mov	r3, r0
 8001f34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001f36:	7cfb      	ldrb	r3, [r7, #19]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8001f3c:	7cfb      	ldrb	r3, [r7, #19]
 8001f3e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d02b      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001f4c:	490b      	ldr	r1, [pc, #44]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f54:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f6a:	d109      	bne.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f6c:	4a03      	ldr	r2, [pc, #12]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f6e:	4b03      	ldr	r3, [pc, #12]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f76:	60d3      	str	r3, [r2, #12]
 8001f78:	e014      	b.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8001f7a:	bf00      	nop
 8001f7c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f88:	d10c      	bne.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	2101      	movs	r1, #1
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 f877 	bl	8002084 <RCCEx_PLLSAI1_Config>
 8001f96:	4603      	mov	r3, r0
 8001f98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001f9a:	7cfb      	ldrb	r3, [r7, #19]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8001fa0:	7cfb      	ldrb	r3, [r7, #19]
 8001fa2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d02f      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001fb0:	492b      	ldr	r1, [pc, #172]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001fb2:	4b2b      	ldr	r3, [pc, #172]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001fca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001fce:	d10d      	bne.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3304      	adds	r3, #4
 8001fd4:	2102      	movs	r1, #2
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 f854 	bl	8002084 <RCCEx_PLLSAI1_Config>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001fe0:	7cfb      	ldrb	r3, [r7, #19]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d014      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8001fe6:	7cfb      	ldrb	r3, [r7, #19]
 8001fe8:	74bb      	strb	r3, [r7, #18]
 8001fea:	e011      	b.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ff4:	d10c      	bne.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3320      	adds	r3, #32
 8001ffa:	2102      	movs	r1, #2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f000 f931 	bl	8002264 <RCCEx_PLLSAI2_Config>
 8002002:	4603      	mov	r3, r0
 8002004:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002006:	7cfb      	ldrb	r3, [r7, #19]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800200c:	7cfb      	ldrb	r3, [r7, #19]
 800200e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00a      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800201c:	4910      	ldr	r1, [pc, #64]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800201e:	4b10      	ldr	r3, [pc, #64]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002024:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800202c:	4313      	orrs	r3, r2
 800202e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00b      	beq.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800203e:	4908      	ldr	r1, [pc, #32]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002040:	4b07      	ldr	r3, [pc, #28]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002046:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002050:	4313      	orrs	r3, r2
 8002052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002056:	7cbb      	ldrb	r3, [r7, #18]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40021000 	.word	0x40021000

08002064 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002068:	4a05      	ldr	r2, [pc, #20]	; (8002080 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800206a:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f043 0304 	orr.w	r3, r3, #4
 8002072:	6013      	str	r3, [r2, #0]
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	40021000 	.word	0x40021000

08002084 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800208e:	2300      	movs	r3, #0
 8002090:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002092:	4b73      	ldr	r3, [pc, #460]	; (8002260 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d018      	beq.n	80020d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800209e:	4b70      	ldr	r3, [pc, #448]	; (8002260 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	f003 0203 	and.w	r2, r3, #3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d10d      	bne.n	80020ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
       ||
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d009      	beq.n	80020ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80020b6:	4b6a      	ldr	r3, [pc, #424]	; (8002260 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	091b      	lsrs	r3, r3, #4
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	1c5a      	adds	r2, r3, #1
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
       ||
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d044      	beq.n	8002154 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	73fb      	strb	r3, [r7, #15]
 80020ce:	e041      	b.n	8002154 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d00c      	beq.n	80020f2 <RCCEx_PLLSAI1_Config+0x6e>
 80020d8:	2b03      	cmp	r3, #3
 80020da:	d013      	beq.n	8002104 <RCCEx_PLLSAI1_Config+0x80>
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d120      	bne.n	8002122 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80020e0:	4b5f      	ldr	r3, [pc, #380]	; (8002260 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d11d      	bne.n	8002128 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020f0:	e01a      	b.n	8002128 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80020f2:	4b5b      	ldr	r3, [pc, #364]	; (8002260 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d116      	bne.n	800212c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002102:	e013      	b.n	800212c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002104:	4b56      	ldr	r3, [pc, #344]	; (8002260 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10f      	bne.n	8002130 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002110:	4b53      	ldr	r3, [pc, #332]	; (8002260 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d109      	bne.n	8002130 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002120:	e006      	b.n	8002130 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	73fb      	strb	r3, [r7, #15]
      break;
 8002126:	e004      	b.n	8002132 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002128:	bf00      	nop
 800212a:	e002      	b.n	8002132 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800212c:	bf00      	nop
 800212e:	e000      	b.n	8002132 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002130:	bf00      	nop
    }

    if(status == HAL_OK)
 8002132:	7bfb      	ldrb	r3, [r7, #15]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10d      	bne.n	8002154 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002138:	4849      	ldr	r0, [pc, #292]	; (8002260 <RCCEx_PLLSAI1_Config+0x1dc>)
 800213a:	4b49      	ldr	r3, [pc, #292]	; (8002260 <RCCEx_PLLSAI1_Config+0x1dc>)
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6819      	ldr	r1, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	3b01      	subs	r3, #1
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	430b      	orrs	r3, r1
 8002150:	4313      	orrs	r3, r2
 8002152:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d17d      	bne.n	8002256 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800215a:	4a41      	ldr	r2, [pc, #260]	; (8002260 <RCCEx_PLLSAI1_Config+0x1dc>)
 800215c:	4b40      	ldr	r3, [pc, #256]	; (8002260 <RCCEx_PLLSAI1_Config+0x1dc>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002164:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002166:	f7fe f9f1 	bl	800054c <HAL_GetTick>
 800216a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800216c:	e009      	b.n	8002182 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800216e:	f7fe f9ed 	bl	800054c <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d902      	bls.n	8002182 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	73fb      	strb	r3, [r7, #15]
        break;
 8002180:	e005      	b.n	800218e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002182:	4b37      	ldr	r3, [pc, #220]	; (8002260 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1ef      	bne.n	800216e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800218e:	7bfb      	ldrb	r3, [r7, #15]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d160      	bne.n	8002256 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d111      	bne.n	80021be <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800219a:	4831      	ldr	r0, [pc, #196]	; (8002260 <RCCEx_PLLSAI1_Config+0x1dc>)
 800219c:	4b30      	ldr	r3, [pc, #192]	; (8002260 <RCCEx_PLLSAI1_Config+0x1dc>)
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80021a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	6892      	ldr	r2, [r2, #8]
 80021ac:	0211      	lsls	r1, r2, #8
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	68d2      	ldr	r2, [r2, #12]
 80021b2:	0912      	lsrs	r2, r2, #4
 80021b4:	0452      	lsls	r2, r2, #17
 80021b6:	430a      	orrs	r2, r1
 80021b8:	4313      	orrs	r3, r2
 80021ba:	6103      	str	r3, [r0, #16]
 80021bc:	e027      	b.n	800220e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d112      	bne.n	80021ea <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80021c4:	4826      	ldr	r0, [pc, #152]	; (8002260 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021c6:	4b26      	ldr	r3, [pc, #152]	; (8002260 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80021ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6892      	ldr	r2, [r2, #8]
 80021d6:	0211      	lsls	r1, r2, #8
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6912      	ldr	r2, [r2, #16]
 80021dc:	0852      	lsrs	r2, r2, #1
 80021de:	3a01      	subs	r2, #1
 80021e0:	0552      	lsls	r2, r2, #21
 80021e2:	430a      	orrs	r2, r1
 80021e4:	4313      	orrs	r3, r2
 80021e6:	6103      	str	r3, [r0, #16]
 80021e8:	e011      	b.n	800220e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80021ea:	481d      	ldr	r0, [pc, #116]	; (8002260 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021ec:	4b1c      	ldr	r3, [pc, #112]	; (8002260 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80021f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6892      	ldr	r2, [r2, #8]
 80021fc:	0211      	lsls	r1, r2, #8
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6952      	ldr	r2, [r2, #20]
 8002202:	0852      	lsrs	r2, r2, #1
 8002204:	3a01      	subs	r2, #1
 8002206:	0652      	lsls	r2, r2, #25
 8002208:	430a      	orrs	r2, r1
 800220a:	4313      	orrs	r3, r2
 800220c:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800220e:	4a14      	ldr	r2, [pc, #80]	; (8002260 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002210:	4b13      	ldr	r3, [pc, #76]	; (8002260 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002218:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221a:	f7fe f997 	bl	800054c <HAL_GetTick>
 800221e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002220:	e009      	b.n	8002236 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002222:	f7fe f993 	bl	800054c <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d902      	bls.n	8002236 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	73fb      	strb	r3, [r7, #15]
          break;
 8002234:	e005      	b.n	8002242 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002236:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0ef      	beq.n	8002222 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002242:	7bfb      	ldrb	r3, [r7, #15]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d106      	bne.n	8002256 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002248:	4905      	ldr	r1, [pc, #20]	; (8002260 <RCCEx_PLLSAI1_Config+0x1dc>)
 800224a:	4b05      	ldr	r3, [pc, #20]	; (8002260 <RCCEx_PLLSAI1_Config+0x1dc>)
 800224c:	691a      	ldr	r2, [r3, #16]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	4313      	orrs	r3, r2
 8002254:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002256:	7bfb      	ldrb	r3, [r7, #15]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40021000 	.word	0x40021000

08002264 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800226e:	2300      	movs	r3, #0
 8002270:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002272:	4b68      	ldr	r3, [pc, #416]	; (8002414 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d018      	beq.n	80022b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800227e:	4b65      	ldr	r3, [pc, #404]	; (8002414 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	f003 0203 	and.w	r2, r3, #3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d10d      	bne.n	80022aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
       ||
 8002292:	2b00      	cmp	r3, #0
 8002294:	d009      	beq.n	80022aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002296:	4b5f      	ldr	r3, [pc, #380]	; (8002414 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	091b      	lsrs	r3, r3, #4
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
       ||
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d044      	beq.n	8002334 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	73fb      	strb	r3, [r7, #15]
 80022ae:	e041      	b.n	8002334 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d00c      	beq.n	80022d2 <RCCEx_PLLSAI2_Config+0x6e>
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	d013      	beq.n	80022e4 <RCCEx_PLLSAI2_Config+0x80>
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d120      	bne.n	8002302 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80022c0:	4b54      	ldr	r3, [pc, #336]	; (8002414 <RCCEx_PLLSAI2_Config+0x1b0>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d11d      	bne.n	8002308 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022d0:	e01a      	b.n	8002308 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80022d2:	4b50      	ldr	r3, [pc, #320]	; (8002414 <RCCEx_PLLSAI2_Config+0x1b0>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d116      	bne.n	800230c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022e2:	e013      	b.n	800230c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80022e4:	4b4b      	ldr	r3, [pc, #300]	; (8002414 <RCCEx_PLLSAI2_Config+0x1b0>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10f      	bne.n	8002310 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022f0:	4b48      	ldr	r3, [pc, #288]	; (8002414 <RCCEx_PLLSAI2_Config+0x1b0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d109      	bne.n	8002310 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002300:	e006      	b.n	8002310 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	73fb      	strb	r3, [r7, #15]
      break;
 8002306:	e004      	b.n	8002312 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002308:	bf00      	nop
 800230a:	e002      	b.n	8002312 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800230c:	bf00      	nop
 800230e:	e000      	b.n	8002312 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002310:	bf00      	nop
    }

    if(status == HAL_OK)
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d10d      	bne.n	8002334 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002318:	483e      	ldr	r0, [pc, #248]	; (8002414 <RCCEx_PLLSAI2_Config+0x1b0>)
 800231a:	4b3e      	ldr	r3, [pc, #248]	; (8002414 <RCCEx_PLLSAI2_Config+0x1b0>)
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6819      	ldr	r1, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	3b01      	subs	r3, #1
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	430b      	orrs	r3, r1
 8002330:	4313      	orrs	r3, r2
 8002332:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002334:	7bfb      	ldrb	r3, [r7, #15]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d167      	bne.n	800240a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800233a:	4a36      	ldr	r2, [pc, #216]	; (8002414 <RCCEx_PLLSAI2_Config+0x1b0>)
 800233c:	4b35      	ldr	r3, [pc, #212]	; (8002414 <RCCEx_PLLSAI2_Config+0x1b0>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002344:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002346:	f7fe f901 	bl	800054c <HAL_GetTick>
 800234a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800234c:	e009      	b.n	8002362 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800234e:	f7fe f8fd 	bl	800054c <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d902      	bls.n	8002362 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	73fb      	strb	r3, [r7, #15]
        break;
 8002360:	e005      	b.n	800236e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002362:	4b2c      	ldr	r3, [pc, #176]	; (8002414 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1ef      	bne.n	800234e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d14a      	bne.n	800240a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d111      	bne.n	800239e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800237a:	4826      	ldr	r0, [pc, #152]	; (8002414 <RCCEx_PLLSAI2_Config+0x1b0>)
 800237c:	4b25      	ldr	r3, [pc, #148]	; (8002414 <RCCEx_PLLSAI2_Config+0x1b0>)
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002384:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6892      	ldr	r2, [r2, #8]
 800238c:	0211      	lsls	r1, r2, #8
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68d2      	ldr	r2, [r2, #12]
 8002392:	0912      	lsrs	r2, r2, #4
 8002394:	0452      	lsls	r2, r2, #17
 8002396:	430a      	orrs	r2, r1
 8002398:	4313      	orrs	r3, r2
 800239a:	6143      	str	r3, [r0, #20]
 800239c:	e011      	b.n	80023c2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800239e:	481d      	ldr	r0, [pc, #116]	; (8002414 <RCCEx_PLLSAI2_Config+0x1b0>)
 80023a0:	4b1c      	ldr	r3, [pc, #112]	; (8002414 <RCCEx_PLLSAI2_Config+0x1b0>)
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80023a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6892      	ldr	r2, [r2, #8]
 80023b0:	0211      	lsls	r1, r2, #8
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6912      	ldr	r2, [r2, #16]
 80023b6:	0852      	lsrs	r2, r2, #1
 80023b8:	3a01      	subs	r2, #1
 80023ba:	0652      	lsls	r2, r2, #25
 80023bc:	430a      	orrs	r2, r1
 80023be:	4313      	orrs	r3, r2
 80023c0:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80023c2:	4a14      	ldr	r2, [pc, #80]	; (8002414 <RCCEx_PLLSAI2_Config+0x1b0>)
 80023c4:	4b13      	ldr	r3, [pc, #76]	; (8002414 <RCCEx_PLLSAI2_Config+0x1b0>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023cc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ce:	f7fe f8bd 	bl	800054c <HAL_GetTick>
 80023d2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80023d4:	e009      	b.n	80023ea <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80023d6:	f7fe f8b9 	bl	800054c <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d902      	bls.n	80023ea <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	73fb      	strb	r3, [r7, #15]
          break;
 80023e8:	e005      	b.n	80023f6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80023ea:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <RCCEx_PLLSAI2_Config+0x1b0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0ef      	beq.n	80023d6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d106      	bne.n	800240a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80023fc:	4905      	ldr	r1, [pc, #20]	; (8002414 <RCCEx_PLLSAI2_Config+0x1b0>)
 80023fe:	4b05      	ldr	r3, [pc, #20]	; (8002414 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002400:	695a      	ldr	r2, [r3, #20]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	4313      	orrs	r3, r2
 8002408:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800240a:	7bfb      	ldrb	r3, [r7, #15]
}
 800240c:	4618      	mov	r0, r3
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40021000 	.word	0x40021000

08002418 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d06c      	beq.n	8002504 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d106      	bne.n	8002444 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f002 f9ee 	bl	8004820 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2202      	movs	r2, #2
 8002448:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	22ca      	movs	r2, #202	; 0xca
 8002452:	625a      	str	r2, [r3, #36]	; 0x24
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2253      	movs	r2, #83	; 0x53
 800245a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 f9a0 	bl	80027a2 <RTC_EnterInitMode>
 8002462:	4603      	mov	r3, r0
 8002464:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d14b      	bne.n	8002504 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800247a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800247e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	6891      	ldr	r1, [r2, #8]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6850      	ldr	r0, [r2, #4]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6912      	ldr	r2, [r2, #16]
 8002492:	4310      	orrs	r0, r2
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6992      	ldr	r2, [r2, #24]
 8002498:	4302      	orrs	r2, r0
 800249a:	430a      	orrs	r2, r1
 800249c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	68d2      	ldr	r2, [r2, #12]
 80024a6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6812      	ldr	r2, [r2, #0]
 80024b0:	6911      	ldr	r1, [r2, #16]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6892      	ldr	r2, [r2, #8]
 80024b6:	0412      	lsls	r2, r2, #16
 80024b8:	430a      	orrs	r2, r1
 80024ba:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 f9a3 	bl	8002808 <RTC_ExitInitMode>
 80024c2:	4603      	mov	r3, r0
 80024c4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d11b      	bne.n	8002504 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80024d6:	f022 0203 	bic.w	r2, r2, #3
 80024da:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	69d0      	ldr	r0, [r2, #28]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6952      	ldr	r2, [r2, #20]
 80024ee:	4302      	orrs	r2, r0
 80024f0:	430a      	orrs	r2, r1
 80024f2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	22ff      	movs	r2, #255	; 0xff
 80024fa:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8002504:	7bfb      	ldrb	r3, [r7, #15]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800250e:	b590      	push	{r4, r7, lr}
 8002510:	b087      	sub	sp, #28
 8002512:	af00      	add	r7, sp, #0
 8002514:	60f8      	str	r0, [r7, #12]
 8002516:	60b9      	str	r1, [r7, #8]
 8002518:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_RTC_SetTime+0x1a>
 8002524:	2302      	movs	r3, #2
 8002526:	e08b      	b.n	8002640 <HAL_RTC_SetTime+0x132>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	22ca      	movs	r2, #202	; 0xca
 800253e:	625a      	str	r2, [r3, #36]	; 0x24
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2253      	movs	r2, #83	; 0x53
 8002546:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 f92a 	bl	80027a2 <RTC_EnterInitMode>
 800254e:	4603      	mov	r3, r0
 8002550:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002552:	7cfb      	ldrb	r3, [r7, #19]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d163      	bne.n	8002620 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d126      	bne.n	80025ac <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002568:	2b00      	cmp	r3, #0
 800256a:	d102      	bne.n	8002572 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	2200      	movs	r2, #0
 8002570:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f000 f984 	bl	8002884 <RTC_ByteToBcd2>
 800257c:	4603      	mov	r3, r0
 800257e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	785b      	ldrb	r3, [r3, #1]
 8002584:	4618      	mov	r0, r3
 8002586:	f000 f97d 	bl	8002884 <RTC_ByteToBcd2>
 800258a:	4603      	mov	r3, r0
 800258c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800258e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	789b      	ldrb	r3, [r3, #2]
 8002594:	4618      	mov	r0, r3
 8002596:	f000 f975 	bl	8002884 <RTC_ByteToBcd2>
 800259a:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800259c:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	78db      	ldrb	r3, [r3, #3]
 80025a4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80025a6:	4313      	orrs	r3, r2
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	e018      	b.n	80025de <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d102      	bne.n	80025c0 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2200      	movs	r2, #0
 80025be:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	785b      	ldrb	r3, [r3, #1]
 80025ca:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80025cc:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80025d2:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	78db      	ldrb	r3, [r3, #3]
 80025d8:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80025da:	4313      	orrs	r3, r2
 80025dc:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80025e8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80025ec:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	6892      	ldr	r2, [r2, #8]
 80025f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025fc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	6812      	ldr	r2, [r2, #0]
 8002606:	6891      	ldr	r1, [r2, #8]
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	68d0      	ldr	r0, [r2, #12]
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	6912      	ldr	r2, [r2, #16]
 8002610:	4302      	orrs	r2, r0
 8002612:	430a      	orrs	r2, r1
 8002614:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 f8f6 	bl	8002808 <RTC_ExitInitMode>
 800261c:	4603      	mov	r3, r0
 800261e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	22ff      	movs	r2, #255	; 0xff
 8002626:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002628:	7cfb      	ldrb	r3, [r7, #19]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d103      	bne.n	8002636 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800263e:	7cfb      	ldrb	r3, [r7, #19]
}
 8002640:	4618      	mov	r0, r3
 8002642:	371c      	adds	r7, #28
 8002644:	46bd      	mov	sp, r7
 8002646:	bd90      	pop	{r4, r7, pc}

08002648 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002648:	b590      	push	{r4, r7, lr}
 800264a:	b087      	sub	sp, #28
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f893 3020 	ldrb.w	r3, [r3, #32]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d101      	bne.n	8002662 <HAL_RTC_SetDate+0x1a>
 800265e:	2302      	movs	r3, #2
 8002660:	e075      	b.n	800274e <HAL_RTC_SetDate+0x106>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2202      	movs	r2, #2
 800266e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10e      	bne.n	8002696 <HAL_RTC_SetDate+0x4e>
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	785b      	ldrb	r3, [r3, #1]
 800267c:	f003 0310 	and.w	r3, r3, #16
 8002680:	2b00      	cmp	r3, #0
 8002682:	d008      	beq.n	8002696 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	785b      	ldrb	r3, [r3, #1]
 8002688:	f023 0310 	bic.w	r3, r3, #16
 800268c:	b2db      	uxtb	r3, r3
 800268e:	330a      	adds	r3, #10
 8002690:	b2da      	uxtb	r2, r3
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d11c      	bne.n	80026d6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	78db      	ldrb	r3, [r3, #3]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f000 f8ef 	bl	8002884 <RTC_ByteToBcd2>
 80026a6:	4603      	mov	r3, r0
 80026a8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	785b      	ldrb	r3, [r3, #1]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 f8e8 	bl	8002884 <RTC_ByteToBcd2>
 80026b4:	4603      	mov	r3, r0
 80026b6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80026b8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	789b      	ldrb	r3, [r3, #2]
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 f8e0 	bl	8002884 <RTC_ByteToBcd2>
 80026c4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80026c6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80026d0:	4313      	orrs	r3, r2
 80026d2:	617b      	str	r3, [r7, #20]
 80026d4:	e00e      	b.n	80026f4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	78db      	ldrb	r3, [r3, #3]
 80026da:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	785b      	ldrb	r3, [r3, #1]
 80026e0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80026e2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80026e8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80026f0:	4313      	orrs	r3, r2
 80026f2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	22ca      	movs	r2, #202	; 0xca
 80026fa:	625a      	str	r2, [r3, #36]	; 0x24
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2253      	movs	r2, #83	; 0x53
 8002702:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f000 f84c 	bl	80027a2 <RTC_EnterInitMode>
 800270a:	4603      	mov	r3, r0
 800270c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800270e:	7cfb      	ldrb	r3, [r7, #19]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10c      	bne.n	800272e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800271e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002722:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 f86f 	bl	8002808 <RTC_ExitInitMode>
 800272a:	4603      	mov	r3, r0
 800272c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	22ff      	movs	r2, #255	; 0xff
 8002734:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002736:	7cfb      	ldrb	r3, [r7, #19]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d103      	bne.n	8002744 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800274c:	7cfb      	ldrb	r3, [r7, #19]
}
 800274e:	4618      	mov	r0, r3
 8002750:	371c      	adds	r7, #28
 8002752:	46bd      	mov	sp, r7
 8002754:	bd90      	pop	{r4, r7, pc}

08002756 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b084      	sub	sp, #16
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6812      	ldr	r2, [r2, #0]
 8002766:	68d2      	ldr	r2, [r2, #12]
 8002768:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800276c:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800276e:	f7fd feed 	bl	800054c <HAL_GetTick>
 8002772:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002774:	e009      	b.n	800278a <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002776:	f7fd fee9 	bl	800054c <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002784:	d901      	bls.n	800278a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e007      	b.n	800279a <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f003 0320 	and.w	r3, r3, #32
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0ee      	beq.n	8002776 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b084      	sub	sp, #16
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d120      	bne.n	80027fe <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f04f 32ff 	mov.w	r2, #4294967295
 80027c4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80027c6:	f7fd fec1 	bl	800054c <HAL_GetTick>
 80027ca:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80027cc:	e00d      	b.n	80027ea <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80027ce:	f7fd febd 	bl	800054c <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027dc:	d905      	bls.n	80027ea <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2203      	movs	r2, #3
 80027e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d102      	bne.n	80027fe <RTC_EnterInitMode+0x5c>
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	2b03      	cmp	r3, #3
 80027fc:	d1e7      	bne.n	80027ce <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8002814:	4a1a      	ldr	r2, [pc, #104]	; (8002880 <RTC_ExitInitMode+0x78>)
 8002816:	4b1a      	ldr	r3, [pc, #104]	; (8002880 <RTC_ExitInitMode+0x78>)
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800281e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002820:	4b17      	ldr	r3, [pc, #92]	; (8002880 <RTC_ExitInitMode+0x78>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 0320 	and.w	r3, r3, #32
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10c      	bne.n	8002846 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f7ff ff92 	bl	8002756 <HAL_RTC_WaitForSynchro>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d01e      	beq.n	8002876 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2203      	movs	r2, #3
 800283c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	73fb      	strb	r3, [r7, #15]
 8002844:	e017      	b.n	8002876 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002846:	4a0e      	ldr	r2, [pc, #56]	; (8002880 <RTC_ExitInitMode+0x78>)
 8002848:	4b0d      	ldr	r3, [pc, #52]	; (8002880 <RTC_ExitInitMode+0x78>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f023 0320 	bic.w	r3, r3, #32
 8002850:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff ff7f 	bl	8002756 <HAL_RTC_WaitForSynchro>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d005      	beq.n	800286a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2203      	movs	r2, #3
 8002862:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800286a:	4a05      	ldr	r2, [pc, #20]	; (8002880 <RTC_ExitInitMode+0x78>)
 800286c:	4b04      	ldr	r3, [pc, #16]	; (8002880 <RTC_ExitInitMode+0x78>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f043 0320 	orr.w	r3, r3, #32
 8002874:	6093      	str	r3, [r2, #8]
  }

  return status;
 8002876:	7bfb      	ldrb	r3, [r7, #15]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40002800 	.word	0x40002800

08002884 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800288e:	2300      	movs	r3, #0
 8002890:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8002896:	e005      	b.n	80028a4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	3301      	adds	r3, #1
 800289c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800289e:	7afb      	ldrb	r3, [r7, #11]
 80028a0:	3b0a      	subs	r3, #10
 80028a2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80028a4:	7afb      	ldrb	r3, [r7, #11]
 80028a6:	2b09      	cmp	r3, #9
 80028a8:	d8f6      	bhi.n	8002898 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	7afb      	ldrb	r3, [r7, #11]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	b2db      	uxtb	r3, r3
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d101      	bne.n	80028de <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80028da:	2302      	movs	r3, #2
 80028dc:	e07f      	b.n	80029de <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2202      	movs	r2, #2
 80028ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	22ca      	movs	r2, #202	; 0xca
 80028f4:	625a      	str	r2, [r3, #36]	; 0x24
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2253      	movs	r2, #83	; 0x53
 80028fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	6812      	ldr	r2, [r2, #0]
 8002906:	6892      	ldr	r2, [r2, #8]
 8002908:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800290c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	6812      	ldr	r2, [r2, #0]
 8002916:	68d2      	ldr	r2, [r2, #12]
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800291e:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292a:	2b00      	cmp	r3, #0
 800292c:	d120      	bne.n	8002970 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 800292e:	f7fd fe0d 	bl	800054c <HAL_GetTick>
 8002932:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8002934:	e015      	b.n	8002962 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002936:	f7fd fe09 	bl	800054c <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002944:	d90d      	bls.n	8002962 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	22ff      	movs	r2, #255	; 0xff
 800294c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2203      	movs	r2, #3
 8002952:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e03d      	b.n	80029de <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0e2      	beq.n	8002936 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	6892      	ldr	r2, [r2, #8]
 8002982:	f022 0107 	bic.w	r1, r2, #7
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	430a      	orrs	r2, r1
 800298a:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800298c:	4a16      	ldr	r2, [pc, #88]	; (80029e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800298e:	4b16      	ldr	r3, [pc, #88]	; (80029e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002996:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002998:	4a13      	ldr	r2, [pc, #76]	; (80029e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800299a:	4b13      	ldr	r3, [pc, #76]	; (80029e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029a2:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	6812      	ldr	r2, [r2, #0]
 80029ac:	6892      	ldr	r2, [r2, #8]
 80029ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029b2:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	6892      	ldr	r2, [r2, #8]
 80029be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029c2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	22ff      	movs	r2, #255	; 0xff
 80029ca:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40010400 	.word	0x40010400

080029ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e01d      	b.n	8002a3a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d106      	bne.n	8002a18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f815 	bl	8002a42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3304      	adds	r3, #4
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4610      	mov	r0, r2
 8002a2c:	f000 f986 	bl	8002d3c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
	...

08002a58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6812      	ldr	r2, [r2, #0]
 8002a68:	68d2      	ldr	r2, [r2, #12]
 8002a6a:	f042 0201 	orr.w	r2, r2, #1
 8002a6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <HAL_TIM_Base_Start_IT+0x50>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2b06      	cmp	r3, #6
 8002a80:	d00b      	beq.n	8002a9a <HAL_TIM_Base_Start_IT+0x42>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a88:	d007      	beq.n	8002a9a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6812      	ldr	r2, [r2, #0]
 8002a92:	6812      	ldr	r2, [r2, #0]
 8002a94:	f042 0201 	orr.w	r2, r2, #1
 8002a98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	00010007 	.word	0x00010007

08002aac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d122      	bne.n	8002b08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d11b      	bne.n	8002b08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0202 	mvn.w	r2, #2
 8002ad8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f905 	bl	8002cfe <HAL_TIM_IC_CaptureCallback>
 8002af4:	e005      	b.n	8002b02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f8f7 	bl	8002cea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f908 	bl	8002d12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d122      	bne.n	8002b5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d11b      	bne.n	8002b5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f06f 0204 	mvn.w	r2, #4
 8002b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2202      	movs	r2, #2
 8002b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f8db 	bl	8002cfe <HAL_TIM_IC_CaptureCallback>
 8002b48:	e005      	b.n	8002b56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f8cd 	bl	8002cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f8de 	bl	8002d12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d122      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d11b      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f06f 0208 	mvn.w	r2, #8
 8002b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2204      	movs	r2, #4
 8002b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f8b1 	bl	8002cfe <HAL_TIM_IC_CaptureCallback>
 8002b9c:	e005      	b.n	8002baa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f8a3 	bl	8002cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f8b4 	bl	8002d12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	2b10      	cmp	r3, #16
 8002bbc:	d122      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	2b10      	cmp	r3, #16
 8002bca:	d11b      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0210 	mvn.w	r2, #16
 8002bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2208      	movs	r2, #8
 8002bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f887 	bl	8002cfe <HAL_TIM_IC_CaptureCallback>
 8002bf0:	e005      	b.n	8002bfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f879 	bl	8002cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f88a 	bl	8002d12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d10e      	bne.n	8002c30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d107      	bne.n	8002c30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f06f 0201 	mvn.w	r2, #1
 8002c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f9a2 	bl	8002f74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3a:	2b80      	cmp	r3, #128	; 0x80
 8002c3c:	d10e      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c48:	2b80      	cmp	r3, #128	; 0x80
 8002c4a:	d107      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f914 	bl	8002e84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c6a:	d10e      	bne.n	8002c8a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c76:	2b80      	cmp	r3, #128	; 0x80
 8002c78:	d107      	bne.n	8002c8a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 f907 	bl	8002e98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c94:	2b40      	cmp	r3, #64	; 0x40
 8002c96:	d10e      	bne.n	8002cb6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca2:	2b40      	cmp	r3, #64	; 0x40
 8002ca4:	d107      	bne.n	8002cb6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f838 	bl	8002d26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	f003 0320 	and.w	r3, r3, #32
 8002cc0:	2b20      	cmp	r3, #32
 8002cc2:	d10e      	bne.n	8002ce2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f003 0320 	and.w	r3, r3, #32
 8002cce:	2b20      	cmp	r3, #32
 8002cd0:	d107      	bne.n	8002ce2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f06f 0220 	mvn.w	r2, #32
 8002cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 f8c7 	bl	8002e70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ce2:	bf00      	nop
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
	...

08002d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a40      	ldr	r2, [pc, #256]	; (8002e50 <TIM_Base_SetConfig+0x114>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d013      	beq.n	8002d7c <TIM_Base_SetConfig+0x40>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d5a:	d00f      	beq.n	8002d7c <TIM_Base_SetConfig+0x40>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a3d      	ldr	r2, [pc, #244]	; (8002e54 <TIM_Base_SetConfig+0x118>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d00b      	beq.n	8002d7c <TIM_Base_SetConfig+0x40>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a3c      	ldr	r2, [pc, #240]	; (8002e58 <TIM_Base_SetConfig+0x11c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d007      	beq.n	8002d7c <TIM_Base_SetConfig+0x40>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a3b      	ldr	r2, [pc, #236]	; (8002e5c <TIM_Base_SetConfig+0x120>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d003      	beq.n	8002d7c <TIM_Base_SetConfig+0x40>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a3a      	ldr	r2, [pc, #232]	; (8002e60 <TIM_Base_SetConfig+0x124>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d108      	bne.n	8002d8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a2f      	ldr	r2, [pc, #188]	; (8002e50 <TIM_Base_SetConfig+0x114>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d01f      	beq.n	8002dd6 <TIM_Base_SetConfig+0x9a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d9c:	d01b      	beq.n	8002dd6 <TIM_Base_SetConfig+0x9a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a2c      	ldr	r2, [pc, #176]	; (8002e54 <TIM_Base_SetConfig+0x118>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d017      	beq.n	8002dd6 <TIM_Base_SetConfig+0x9a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a2b      	ldr	r2, [pc, #172]	; (8002e58 <TIM_Base_SetConfig+0x11c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d013      	beq.n	8002dd6 <TIM_Base_SetConfig+0x9a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a2a      	ldr	r2, [pc, #168]	; (8002e5c <TIM_Base_SetConfig+0x120>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d00f      	beq.n	8002dd6 <TIM_Base_SetConfig+0x9a>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a29      	ldr	r2, [pc, #164]	; (8002e60 <TIM_Base_SetConfig+0x124>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d00b      	beq.n	8002dd6 <TIM_Base_SetConfig+0x9a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a28      	ldr	r2, [pc, #160]	; (8002e64 <TIM_Base_SetConfig+0x128>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d007      	beq.n	8002dd6 <TIM_Base_SetConfig+0x9a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a27      	ldr	r2, [pc, #156]	; (8002e68 <TIM_Base_SetConfig+0x12c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d003      	beq.n	8002dd6 <TIM_Base_SetConfig+0x9a>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a26      	ldr	r2, [pc, #152]	; (8002e6c <TIM_Base_SetConfig+0x130>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d108      	bne.n	8002de8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ddc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a10      	ldr	r2, [pc, #64]	; (8002e50 <TIM_Base_SetConfig+0x114>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d00f      	beq.n	8002e34 <TIM_Base_SetConfig+0xf8>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a12      	ldr	r2, [pc, #72]	; (8002e60 <TIM_Base_SetConfig+0x124>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d00b      	beq.n	8002e34 <TIM_Base_SetConfig+0xf8>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a11      	ldr	r2, [pc, #68]	; (8002e64 <TIM_Base_SetConfig+0x128>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d007      	beq.n	8002e34 <TIM_Base_SetConfig+0xf8>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a10      	ldr	r2, [pc, #64]	; (8002e68 <TIM_Base_SetConfig+0x12c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d003      	beq.n	8002e34 <TIM_Base_SetConfig+0xf8>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a0f      	ldr	r2, [pc, #60]	; (8002e6c <TIM_Base_SetConfig+0x130>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d103      	bne.n	8002e3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	615a      	str	r2, [r3, #20]
}
 8002e42:	bf00      	nop
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	40012c00 	.word	0x40012c00
 8002e54:	40000400 	.word	0x40000400
 8002e58:	40000800 	.word	0x40000800
 8002e5c:	40000c00 	.word	0x40000c00
 8002e60:	40013400 	.word	0x40013400
 8002e64:	40014000 	.word	0x40014000
 8002e68:	40014400 	.word	0x40014400
 8002e6c:	40014800 	.word	0x40014800

08002e70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08c      	sub	sp, #48	; 0x30
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  
  /* Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	2036      	movs	r0, #54	; 0x36
 8002ec2:	f7fd fc72 	bl	80007aa <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ec6:	2036      	movs	r0, #54	; 0x36
 8002ec8:	f7fd fc8b 	bl	80007e2 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002ecc:	4a25      	ldr	r2, [pc, #148]	; (8002f64 <HAL_InitTick+0xb8>)
 8002ece:	4b25      	ldr	r3, [pc, #148]	; (8002f64 <HAL_InitTick+0xb8>)
 8002ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed2:	f043 0310 	orr.w	r3, r3, #16
 8002ed6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ed8:	4b22      	ldr	r3, [pc, #136]	; (8002f64 <HAL_InitTick+0xb8>)
 8002eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002edc:	f003 0310 	and.w	r3, r3, #16
 8002ee0:	60bb      	str	r3, [r7, #8]
 8002ee2:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ee4:	f107 020c 	add.w	r2, r7, #12
 8002ee8:	f107 0310 	add.w	r3, r7, #16
 8002eec:	4611      	mov	r1, r2
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fe fd40 	bl	8001974 <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 8002ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d103      	bne.n	8002f06 <HAL_InitTick+0x5a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002efe:	f7fe fd0d 	bl	800191c <HAL_RCC_GetPCLK1Freq>
 8002f02:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002f04:	e004      	b.n	8002f10 <HAL_InitTick+0x64>
  }
  else
  {
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002f06:	f7fe fd09 	bl	800191c <HAL_RCC_GetPCLK1Freq>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f12:	4a15      	ldr	r2, [pc, #84]	; (8002f68 <HAL_InitTick+0xbc>)
 8002f14:	fba2 2303 	umull	r2, r3, r2, r3
 8002f18:	0c9b      	lsrs	r3, r3, #18
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 8002f1e:	4b13      	ldr	r3, [pc, #76]	; (8002f6c <HAL_InitTick+0xc0>)
 8002f20:	4a13      	ldr	r2, [pc, #76]	; (8002f70 <HAL_InitTick+0xc4>)
 8002f22:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8002f24:	4b11      	ldr	r3, [pc, #68]	; (8002f6c <HAL_InitTick+0xc0>)
 8002f26:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f2a:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 8002f2c:	4a0f      	ldr	r2, [pc, #60]	; (8002f6c <HAL_InitTick+0xc0>)
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0;
 8002f32:	4b0e      	ldr	r3, [pc, #56]	; (8002f6c <HAL_InitTick+0xc0>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f38:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <HAL_InitTick+0xc0>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	609a      	str	r2, [r3, #8]
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f3e:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <HAL_InitTick+0xc0>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	619a      	str	r2, [r3, #24]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8002f44:	4809      	ldr	r0, [pc, #36]	; (8002f6c <HAL_InitTick+0xc0>)
 8002f46:	f7ff fd51 	bl	80029ec <HAL_TIM_Base_Init>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d104      	bne.n	8002f5a <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 8002f50:	4806      	ldr	r0, [pc, #24]	; (8002f6c <HAL_InitTick+0xc0>)
 8002f52:	f7ff fd81 	bl	8002a58 <HAL_TIM_Base_Start_IT>
 8002f56:	4603      	mov	r3, r0
 8002f58:	e000      	b.n	8002f5c <HAL_InitTick+0xb0>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3730      	adds	r7, #48	; 0x30
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40021000 	.word	0x40021000
 8002f68:	431bde83 	.word	0x431bde83
 8002f6c:	20000568 	.word	0x20000568
 8002f70:	40001000 	.word	0x40001000

08002f74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  HAL_IncTick();
 8002f7c:	f7fd fad4 	bl	8000528 <HAL_IncTick>
}
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 8002f8c:	4802      	ldr	r0, [pc, #8]	; (8002f98 <TIM6_DAC_IRQHandler+0x10>)
 8002f8e:	f7ff fd8d 	bl	8002aac <HAL_TIM_IRQHandler>
}
 8002f92:	bf00      	nop
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	20000568 	.word	0x20000568

08002f9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e040      	b.n	8003030 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d106      	bne.n	8002fc4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f001 fc50 	bl	8004864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2224      	movs	r2, #36	; 0x24
 8002fc8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6812      	ldr	r2, [r2, #0]
 8002fd2:	6812      	ldr	r2, [r2, #0]
 8002fd4:	f022 0201 	bic.w	r2, r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f8c0 	bl	8003160 <UART_SetConfig>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d101      	bne.n	8002fea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e022      	b.n	8003030 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 fc18 	bl	8003828 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6812      	ldr	r2, [r2, #0]
 8003000:	6852      	ldr	r2, [r2, #4]
 8003002:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003006:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6812      	ldr	r2, [r2, #0]
 8003010:	6892      	ldr	r2, [r2, #8]
 8003012:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003016:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6812      	ldr	r2, [r2, #0]
 8003020:	6812      	ldr	r2, [r2, #0]
 8003022:	f042 0201 	orr.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 fc9f 	bl	800396c <UART_CheckIdleState>
 800302e:	4603      	mov	r3, r0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b08a      	sub	sp, #40	; 0x28
 800303c:	af02      	add	r7, sp, #8
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	4613      	mov	r3, r2
 8003046:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800304c:	2b20      	cmp	r3, #32
 800304e:	f040 8081 	bne.w	8003154 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d002      	beq.n	800305e <HAL_UART_Transmit+0x26>
 8003058:	88fb      	ldrh	r3, [r7, #6]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e079      	b.n	8003156 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003068:	2b01      	cmp	r3, #1
 800306a:	d101      	bne.n	8003070 <HAL_UART_Transmit+0x38>
 800306c:	2302      	movs	r3, #2
 800306e:	e072      	b.n	8003156 <HAL_UART_Transmit+0x11e>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2221      	movs	r2, #33	; 0x21
 8003082:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003084:	f7fd fa62 	bl	800054c <HAL_GetTick>
 8003088:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	88fa      	ldrh	r2, [r7, #6]
 800308e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	88fa      	ldrh	r2, [r7, #6]
 8003096:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a2:	d108      	bne.n	80030b6 <HAL_UART_Transmit+0x7e>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d104      	bne.n	80030b6 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	61bb      	str	r3, [r7, #24]
 80030b4:	e003      	b.n	80030be <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030ba:	2300      	movs	r3, #0
 80030bc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80030c6:	e02d      	b.n	8003124 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	2200      	movs	r2, #0
 80030d0:	2180      	movs	r1, #128	; 0x80
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 fc8f 	bl	80039f6 <UART_WaitOnFlagUntilTimeout>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e039      	b.n	8003156 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10b      	bne.n	8003100 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	8812      	ldrh	r2, [r2, #0]
 80030f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030f4:	b292      	uxth	r2, r2
 80030f6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	3302      	adds	r3, #2
 80030fc:	61bb      	str	r3, [r7, #24]
 80030fe:	e008      	b.n	8003112 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	69fa      	ldr	r2, [r7, #28]
 8003106:	7812      	ldrb	r2, [r2, #0]
 8003108:	b292      	uxth	r2, r2
 800310a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	3301      	adds	r3, #1
 8003110:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003118:	b29b      	uxth	r3, r3
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800312a:	b29b      	uxth	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1cb      	bne.n	80030c8 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	2200      	movs	r2, #0
 8003138:	2140      	movs	r1, #64	; 0x40
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 fc5b 	bl	80039f6 <UART_WaitOnFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e005      	b.n	8003156 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2220      	movs	r2, #32
 800314e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003150:	2300      	movs	r3, #0
 8003152:	e000      	b.n	8003156 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003154:	2302      	movs	r3, #2
  }
}
 8003156:	4618      	mov	r0, r3
 8003158:	3720      	adds	r7, #32
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
	...

08003160 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003160:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003164:	b08a      	sub	sp, #40	; 0x28
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800316a:	2300      	movs	r3, #0
 800316c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800316e:	2300      	movs	r3, #0
 8003170:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	4313      	orrs	r3, r2
 800318c:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6819      	ldr	r1, [r3, #0]
 8003198:	4bb7      	ldr	r3, [pc, #732]	; (8003478 <UART_SetConfig+0x318>)
 800319a:	400b      	ands	r3, r1
 800319c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800319e:	430b      	orrs	r3, r1
 80031a0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6812      	ldr	r2, [r2, #0]
 80031aa:	6852      	ldr	r2, [r2, #4]
 80031ac:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	68d2      	ldr	r2, [r2, #12]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4aae      	ldr	r2, [pc, #696]	; (800347c <UART_SetConfig+0x31c>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d004      	beq.n	80031d2 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ce:	4313      	orrs	r3, r2
 80031d0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6812      	ldr	r2, [r2, #0]
 80031da:	6892      	ldr	r2, [r2, #8]
 80031dc:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 80031e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e2:	430a      	orrs	r2, r1
 80031e4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4aa5      	ldr	r2, [pc, #660]	; (8003480 <UART_SetConfig+0x320>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d126      	bne.n	800323e <UART_SetConfig+0xde>
 80031f0:	4ba4      	ldr	r3, [pc, #656]	; (8003484 <UART_SetConfig+0x324>)
 80031f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	2b03      	cmp	r3, #3
 80031fc:	d81a      	bhi.n	8003234 <UART_SetConfig+0xd4>
 80031fe:	a201      	add	r2, pc, #4	; (adr r2, 8003204 <UART_SetConfig+0xa4>)
 8003200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003204:	08003215 	.word	0x08003215
 8003208:	08003225 	.word	0x08003225
 800320c:	0800321d 	.word	0x0800321d
 8003210:	0800322d 	.word	0x0800322d
 8003214:	2301      	movs	r3, #1
 8003216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800321a:	e105      	b.n	8003428 <UART_SetConfig+0x2c8>
 800321c:	2302      	movs	r3, #2
 800321e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003222:	e101      	b.n	8003428 <UART_SetConfig+0x2c8>
 8003224:	2304      	movs	r3, #4
 8003226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800322a:	e0fd      	b.n	8003428 <UART_SetConfig+0x2c8>
 800322c:	2308      	movs	r3, #8
 800322e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003232:	e0f9      	b.n	8003428 <UART_SetConfig+0x2c8>
 8003234:	2310      	movs	r3, #16
 8003236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800323a:	bf00      	nop
 800323c:	e0f4      	b.n	8003428 <UART_SetConfig+0x2c8>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a91      	ldr	r2, [pc, #580]	; (8003488 <UART_SetConfig+0x328>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d138      	bne.n	80032ba <UART_SetConfig+0x15a>
 8003248:	4b8e      	ldr	r3, [pc, #568]	; (8003484 <UART_SetConfig+0x324>)
 800324a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324e:	f003 030c 	and.w	r3, r3, #12
 8003252:	2b0c      	cmp	r3, #12
 8003254:	d82c      	bhi.n	80032b0 <UART_SetConfig+0x150>
 8003256:	a201      	add	r2, pc, #4	; (adr r2, 800325c <UART_SetConfig+0xfc>)
 8003258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325c:	08003291 	.word	0x08003291
 8003260:	080032b1 	.word	0x080032b1
 8003264:	080032b1 	.word	0x080032b1
 8003268:	080032b1 	.word	0x080032b1
 800326c:	080032a1 	.word	0x080032a1
 8003270:	080032b1 	.word	0x080032b1
 8003274:	080032b1 	.word	0x080032b1
 8003278:	080032b1 	.word	0x080032b1
 800327c:	08003299 	.word	0x08003299
 8003280:	080032b1 	.word	0x080032b1
 8003284:	080032b1 	.word	0x080032b1
 8003288:	080032b1 	.word	0x080032b1
 800328c:	080032a9 	.word	0x080032a9
 8003290:	2300      	movs	r3, #0
 8003292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003296:	e0c7      	b.n	8003428 <UART_SetConfig+0x2c8>
 8003298:	2302      	movs	r3, #2
 800329a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800329e:	e0c3      	b.n	8003428 <UART_SetConfig+0x2c8>
 80032a0:	2304      	movs	r3, #4
 80032a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032a6:	e0bf      	b.n	8003428 <UART_SetConfig+0x2c8>
 80032a8:	2308      	movs	r3, #8
 80032aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ae:	e0bb      	b.n	8003428 <UART_SetConfig+0x2c8>
 80032b0:	2310      	movs	r3, #16
 80032b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032b6:	bf00      	nop
 80032b8:	e0b6      	b.n	8003428 <UART_SetConfig+0x2c8>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a73      	ldr	r2, [pc, #460]	; (800348c <UART_SetConfig+0x32c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d125      	bne.n	8003310 <UART_SetConfig+0x1b0>
 80032c4:	4b6f      	ldr	r3, [pc, #444]	; (8003484 <UART_SetConfig+0x324>)
 80032c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80032ce:	2b10      	cmp	r3, #16
 80032d0:	d011      	beq.n	80032f6 <UART_SetConfig+0x196>
 80032d2:	2b10      	cmp	r3, #16
 80032d4:	d802      	bhi.n	80032dc <UART_SetConfig+0x17c>
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d005      	beq.n	80032e6 <UART_SetConfig+0x186>
 80032da:	e014      	b.n	8003306 <UART_SetConfig+0x1a6>
 80032dc:	2b20      	cmp	r3, #32
 80032de:	d006      	beq.n	80032ee <UART_SetConfig+0x18e>
 80032e0:	2b30      	cmp	r3, #48	; 0x30
 80032e2:	d00c      	beq.n	80032fe <UART_SetConfig+0x19e>
 80032e4:	e00f      	b.n	8003306 <UART_SetConfig+0x1a6>
 80032e6:	2300      	movs	r3, #0
 80032e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ec:	e09c      	b.n	8003428 <UART_SetConfig+0x2c8>
 80032ee:	2302      	movs	r3, #2
 80032f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032f4:	e098      	b.n	8003428 <UART_SetConfig+0x2c8>
 80032f6:	2304      	movs	r3, #4
 80032f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032fc:	e094      	b.n	8003428 <UART_SetConfig+0x2c8>
 80032fe:	2308      	movs	r3, #8
 8003300:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003304:	e090      	b.n	8003428 <UART_SetConfig+0x2c8>
 8003306:	2310      	movs	r3, #16
 8003308:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800330c:	bf00      	nop
 800330e:	e08b      	b.n	8003428 <UART_SetConfig+0x2c8>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a5e      	ldr	r2, [pc, #376]	; (8003490 <UART_SetConfig+0x330>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d125      	bne.n	8003366 <UART_SetConfig+0x206>
 800331a:	4b5a      	ldr	r3, [pc, #360]	; (8003484 <UART_SetConfig+0x324>)
 800331c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003320:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003324:	2b40      	cmp	r3, #64	; 0x40
 8003326:	d011      	beq.n	800334c <UART_SetConfig+0x1ec>
 8003328:	2b40      	cmp	r3, #64	; 0x40
 800332a:	d802      	bhi.n	8003332 <UART_SetConfig+0x1d2>
 800332c:	2b00      	cmp	r3, #0
 800332e:	d005      	beq.n	800333c <UART_SetConfig+0x1dc>
 8003330:	e014      	b.n	800335c <UART_SetConfig+0x1fc>
 8003332:	2b80      	cmp	r3, #128	; 0x80
 8003334:	d006      	beq.n	8003344 <UART_SetConfig+0x1e4>
 8003336:	2bc0      	cmp	r3, #192	; 0xc0
 8003338:	d00c      	beq.n	8003354 <UART_SetConfig+0x1f4>
 800333a:	e00f      	b.n	800335c <UART_SetConfig+0x1fc>
 800333c:	2300      	movs	r3, #0
 800333e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003342:	e071      	b.n	8003428 <UART_SetConfig+0x2c8>
 8003344:	2302      	movs	r3, #2
 8003346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800334a:	e06d      	b.n	8003428 <UART_SetConfig+0x2c8>
 800334c:	2304      	movs	r3, #4
 800334e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003352:	e069      	b.n	8003428 <UART_SetConfig+0x2c8>
 8003354:	2308      	movs	r3, #8
 8003356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800335a:	e065      	b.n	8003428 <UART_SetConfig+0x2c8>
 800335c:	2310      	movs	r3, #16
 800335e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003362:	bf00      	nop
 8003364:	e060      	b.n	8003428 <UART_SetConfig+0x2c8>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a4a      	ldr	r2, [pc, #296]	; (8003494 <UART_SetConfig+0x334>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d129      	bne.n	80033c4 <UART_SetConfig+0x264>
 8003370:	4b44      	ldr	r3, [pc, #272]	; (8003484 <UART_SetConfig+0x324>)
 8003372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800337a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800337e:	d014      	beq.n	80033aa <UART_SetConfig+0x24a>
 8003380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003384:	d802      	bhi.n	800338c <UART_SetConfig+0x22c>
 8003386:	2b00      	cmp	r3, #0
 8003388:	d007      	beq.n	800339a <UART_SetConfig+0x23a>
 800338a:	e016      	b.n	80033ba <UART_SetConfig+0x25a>
 800338c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003390:	d007      	beq.n	80033a2 <UART_SetConfig+0x242>
 8003392:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003396:	d00c      	beq.n	80033b2 <UART_SetConfig+0x252>
 8003398:	e00f      	b.n	80033ba <UART_SetConfig+0x25a>
 800339a:	2300      	movs	r3, #0
 800339c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033a0:	e042      	b.n	8003428 <UART_SetConfig+0x2c8>
 80033a2:	2302      	movs	r3, #2
 80033a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033a8:	e03e      	b.n	8003428 <UART_SetConfig+0x2c8>
 80033aa:	2304      	movs	r3, #4
 80033ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033b0:	e03a      	b.n	8003428 <UART_SetConfig+0x2c8>
 80033b2:	2308      	movs	r3, #8
 80033b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033b8:	e036      	b.n	8003428 <UART_SetConfig+0x2c8>
 80033ba:	2310      	movs	r3, #16
 80033bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033c0:	bf00      	nop
 80033c2:	e031      	b.n	8003428 <UART_SetConfig+0x2c8>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a2c      	ldr	r2, [pc, #176]	; (800347c <UART_SetConfig+0x31c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d129      	bne.n	8003422 <UART_SetConfig+0x2c2>
 80033ce:	4b2d      	ldr	r3, [pc, #180]	; (8003484 <UART_SetConfig+0x324>)
 80033d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80033d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033dc:	d014      	beq.n	8003408 <UART_SetConfig+0x2a8>
 80033de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e2:	d802      	bhi.n	80033ea <UART_SetConfig+0x28a>
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d007      	beq.n	80033f8 <UART_SetConfig+0x298>
 80033e8:	e016      	b.n	8003418 <UART_SetConfig+0x2b8>
 80033ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033ee:	d007      	beq.n	8003400 <UART_SetConfig+0x2a0>
 80033f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033f4:	d00c      	beq.n	8003410 <UART_SetConfig+0x2b0>
 80033f6:	e00f      	b.n	8003418 <UART_SetConfig+0x2b8>
 80033f8:	2300      	movs	r3, #0
 80033fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033fe:	e013      	b.n	8003428 <UART_SetConfig+0x2c8>
 8003400:	2302      	movs	r3, #2
 8003402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003406:	e00f      	b.n	8003428 <UART_SetConfig+0x2c8>
 8003408:	2304      	movs	r3, #4
 800340a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800340e:	e00b      	b.n	8003428 <UART_SetConfig+0x2c8>
 8003410:	2308      	movs	r3, #8
 8003412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003416:	e007      	b.n	8003428 <UART_SetConfig+0x2c8>
 8003418:	2310      	movs	r3, #16
 800341a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800341e:	bf00      	nop
 8003420:	e002      	b.n	8003428 <UART_SetConfig+0x2c8>
 8003422:	2310      	movs	r3, #16
 8003424:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a13      	ldr	r2, [pc, #76]	; (800347c <UART_SetConfig+0x31c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	f040 80f1 	bne.w	8003616 <UART_SetConfig+0x4b6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003434:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003438:	2b08      	cmp	r3, #8
 800343a:	d837      	bhi.n	80034ac <UART_SetConfig+0x34c>
 800343c:	a201      	add	r2, pc, #4	; (adr r2, 8003444 <UART_SetConfig+0x2e4>)
 800343e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003442:	bf00      	nop
 8003444:	08003469 	.word	0x08003469
 8003448:	080034ad 	.word	0x080034ad
 800344c:	08003471 	.word	0x08003471
 8003450:	080034ad 	.word	0x080034ad
 8003454:	0800349d 	.word	0x0800349d
 8003458:	080034ad 	.word	0x080034ad
 800345c:	080034ad 	.word	0x080034ad
 8003460:	080034ad 	.word	0x080034ad
 8003464:	080034a5 	.word	0x080034a5
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003468:	f7fe fa58 	bl	800191c <HAL_RCC_GetPCLK1Freq>
 800346c:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800346e:	e020      	b.n	80034b2 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003470:	4b09      	ldr	r3, [pc, #36]	; (8003498 <UART_SetConfig+0x338>)
 8003472:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003474:	e01d      	b.n	80034b2 <UART_SetConfig+0x352>
 8003476:	bf00      	nop
 8003478:	efff69f3 	.word	0xefff69f3
 800347c:	40008000 	.word	0x40008000
 8003480:	40013800 	.word	0x40013800
 8003484:	40021000 	.word	0x40021000
 8003488:	40004400 	.word	0x40004400
 800348c:	40004800 	.word	0x40004800
 8003490:	40004c00 	.word	0x40004c00
 8003494:	40005000 	.word	0x40005000
 8003498:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800349c:	f7fe f9a8 	bl	80017f0 <HAL_RCC_GetSysClockFreq>
 80034a0:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80034a2:	e006      	b.n	80034b2 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80034a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034a8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80034aa:	e002      	b.n	80034b2 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	76fb      	strb	r3, [r7, #27]
        break;
 80034b0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 81ab 	beq.w	8003810 <UART_SetConfig+0x6b0>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	441a      	add	r2, r3
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d805      	bhi.n	80034d6 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d202      	bcs.n	80034dc <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	76fb      	strb	r3, [r7, #27]
 80034da:	e199      	b.n	8003810 <UART_SetConfig+0x6b0>
      }
      else
      {
        switch (clocksource)
 80034dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	f200 8085 	bhi.w	80035f0 <UART_SetConfig+0x490>
 80034e6:	a201      	add	r2, pc, #4	; (adr r2, 80034ec <UART_SetConfig+0x38c>)
 80034e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ec:	08003511 	.word	0x08003511
 80034f0:	080035f1 	.word	0x080035f1
 80034f4:	08003553 	.word	0x08003553
 80034f8:	080035f1 	.word	0x080035f1
 80034fc:	08003587 	.word	0x08003587
 8003500:	080035f1 	.word	0x080035f1
 8003504:	080035f1 	.word	0x080035f1
 8003508:	080035f1 	.word	0x080035f1
 800350c:	080035c7 	.word	0x080035c7
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8003510:	f7fe fa04 	bl	800191c <HAL_RCC_GetPCLK1Freq>
 8003514:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	f04f 0400 	mov.w	r4, #0
 800351c:	ea4f 2904 	mov.w	r9, r4, lsl #8
 8003520:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 8003524:	ea4f 2803 	mov.w	r8, r3, lsl #8
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	085b      	lsrs	r3, r3, #1
 800352e:	f04f 0400 	mov.w	r4, #0
 8003532:	eb18 0003 	adds.w	r0, r8, r3
 8003536:	eb49 0104 	adc.w	r1, r9, r4
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f04f 0400 	mov.w	r4, #0
 8003542:	461a      	mov	r2, r3
 8003544:	4623      	mov	r3, r4
 8003546:	f7fc fe47 	bl	80001d8 <__aeabi_uldivmod>
 800354a:	4603      	mov	r3, r0
 800354c:	460c      	mov	r4, r1
 800354e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003550:	e051      	b.n	80035f6 <UART_SetConfig+0x496>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	085b      	lsrs	r3, r3, #1
 8003558:	f04f 0400 	mov.w	r4, #0
 800355c:	49aa      	ldr	r1, [pc, #680]	; (8003808 <UART_SetConfig+0x6a8>)
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	eb13 0801 	adds.w	r8, r3, r1
 8003566:	eb44 0902 	adc.w	r9, r4, r2
 800356a:	4640      	mov	r0, r8
 800356c:	4649      	mov	r1, r9
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f04f 0400 	mov.w	r4, #0
 8003576:	461a      	mov	r2, r3
 8003578:	4623      	mov	r3, r4
 800357a:	f7fc fe2d 	bl	80001d8 <__aeabi_uldivmod>
 800357e:	4603      	mov	r3, r0
 8003580:	460c      	mov	r4, r1
 8003582:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003584:	e037      	b.n	80035f6 <UART_SetConfig+0x496>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8003586:	f7fe f933 	bl	80017f0 <HAL_RCC_GetSysClockFreq>
 800358a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	461a      	mov	r2, r3
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	021d      	lsls	r5, r3, #8
 8003596:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 800359a:	0214      	lsls	r4, r2, #8
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	085b      	lsrs	r3, r3, #1
 80035a2:	461a      	mov	r2, r3
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	18a0      	adds	r0, r4, r2
 80035aa:	eb45 0103 	adc.w	r1, r5, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f04f 0400 	mov.w	r4, #0
 80035b6:	461a      	mov	r2, r3
 80035b8:	4623      	mov	r3, r4
 80035ba:	f7fc fe0d 	bl	80001d8 <__aeabi_uldivmod>
 80035be:	4603      	mov	r3, r0
 80035c0:	460c      	mov	r4, r1
 80035c2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80035c4:	e017      	b.n	80035f6 <UART_SetConfig+0x496>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	085b      	lsrs	r3, r3, #1
 80035cc:	f04f 0400 	mov.w	r4, #0
 80035d0:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80035d4:	f144 0100 	adc.w	r1, r4, #0
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f04f 0400 	mov.w	r4, #0
 80035e0:	461a      	mov	r2, r3
 80035e2:	4623      	mov	r3, r4
 80035e4:	f7fc fdf8 	bl	80001d8 <__aeabi_uldivmod>
 80035e8:	4603      	mov	r3, r0
 80035ea:	460c      	mov	r4, r1
 80035ec:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80035ee:	e002      	b.n	80035f6 <UART_SetConfig+0x496>
          default:
            ret = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	76fb      	strb	r3, [r7, #27]
            break;
 80035f4:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035fc:	d308      	bcc.n	8003610 <UART_SetConfig+0x4b0>
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003604:	d204      	bcs.n	8003610 <UART_SetConfig+0x4b0>
        {
          huart->Instance->BRR = usartdiv;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	69fa      	ldr	r2, [r7, #28]
 800360c:	60da      	str	r2, [r3, #12]
 800360e:	e0ff      	b.n	8003810 <UART_SetConfig+0x6b0>
        }
        else
        {
          ret = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	76fb      	strb	r3, [r7, #27]
 8003614:	e0fc      	b.n	8003810 <UART_SetConfig+0x6b0>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800361e:	f040 8083 	bne.w	8003728 <UART_SetConfig+0x5c8>
  {
    switch (clocksource)
 8003622:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003626:	2b08      	cmp	r3, #8
 8003628:	d85e      	bhi.n	80036e8 <UART_SetConfig+0x588>
 800362a:	a201      	add	r2, pc, #4	; (adr r2, 8003630 <UART_SetConfig+0x4d0>)
 800362c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003630:	08003655 	.word	0x08003655
 8003634:	08003675 	.word	0x08003675
 8003638:	08003695 	.word	0x08003695
 800363c:	080036e9 	.word	0x080036e9
 8003640:	080036b1 	.word	0x080036b1
 8003644:	080036e9 	.word	0x080036e9
 8003648:	080036e9 	.word	0x080036e9
 800364c:	080036e9 	.word	0x080036e9
 8003650:	080036d1 	.word	0x080036d1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003654:	f7fe f962 	bl	800191c <HAL_RCC_GetPCLK1Freq>
 8003658:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	005a      	lsls	r2, r3, #1
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	085b      	lsrs	r3, r3, #1
 8003664:	441a      	add	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	fbb2 f3f3 	udiv	r3, r2, r3
 800366e:	b29b      	uxth	r3, r3
 8003670:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003672:	e03c      	b.n	80036ee <UART_SetConfig+0x58e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003674:	f7fe f968 	bl	8001948 <HAL_RCC_GetPCLK2Freq>
 8003678:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	005a      	lsls	r2, r3, #1
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	085b      	lsrs	r3, r3, #1
 8003684:	441a      	add	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	fbb2 f3f3 	udiv	r3, r2, r3
 800368e:	b29b      	uxth	r3, r3
 8003690:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003692:	e02c      	b.n	80036ee <UART_SetConfig+0x58e>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	085b      	lsrs	r3, r3, #1
 800369a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800369e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6852      	ldr	r2, [r2, #4]
 80036a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80036ae:	e01e      	b.n	80036ee <UART_SetConfig+0x58e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036b0:	f7fe f89e 	bl	80017f0 <HAL_RCC_GetSysClockFreq>
 80036b4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	005a      	lsls	r2, r3, #1
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	085b      	lsrs	r3, r3, #1
 80036c0:	441a      	add	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80036ce:	e00e      	b.n	80036ee <UART_SetConfig+0x58e>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	085b      	lsrs	r3, r3, #1
 80036d6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80036e6:	e002      	b.n	80036ee <UART_SetConfig+0x58e>
      default:
        ret = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	76fb      	strb	r3, [r7, #27]
        break;
 80036ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	2b0f      	cmp	r3, #15
 80036f2:	d916      	bls.n	8003722 <UART_SetConfig+0x5c2>
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036fa:	d212      	bcs.n	8003722 <UART_SetConfig+0x5c2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	b29b      	uxth	r3, r3
 8003700:	f023 030f 	bic.w	r3, r3, #15
 8003704:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	085b      	lsrs	r3, r3, #1
 800370a:	b29b      	uxth	r3, r3
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	b29a      	uxth	r2, r3
 8003712:	89fb      	ldrh	r3, [r7, #14]
 8003714:	4313      	orrs	r3, r2
 8003716:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	89fa      	ldrh	r2, [r7, #14]
 800371e:	60da      	str	r2, [r3, #12]
 8003720:	e076      	b.n	8003810 <UART_SetConfig+0x6b0>
    }
    else
    {
      ret = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	76fb      	strb	r3, [r7, #27]
 8003726:	e073      	b.n	8003810 <UART_SetConfig+0x6b0>
    }
  }
  else
  {
    switch (clocksource)
 8003728:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800372c:	2b08      	cmp	r3, #8
 800372e:	d85c      	bhi.n	80037ea <UART_SetConfig+0x68a>
 8003730:	a201      	add	r2, pc, #4	; (adr r2, 8003738 <UART_SetConfig+0x5d8>)
 8003732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003736:	bf00      	nop
 8003738:	0800375d 	.word	0x0800375d
 800373c:	0800377b 	.word	0x0800377b
 8003740:	08003799 	.word	0x08003799
 8003744:	080037eb 	.word	0x080037eb
 8003748:	080037b5 	.word	0x080037b5
 800374c:	080037eb 	.word	0x080037eb
 8003750:	080037eb 	.word	0x080037eb
 8003754:	080037eb 	.word	0x080037eb
 8003758:	080037d3 	.word	0x080037d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800375c:	f7fe f8de 	bl	800191c <HAL_RCC_GetPCLK1Freq>
 8003760:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	085a      	lsrs	r2, r3, #1
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	441a      	add	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	fbb2 f3f3 	udiv	r3, r2, r3
 8003774:	b29b      	uxth	r3, r3
 8003776:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003778:	e03a      	b.n	80037f0 <UART_SetConfig+0x690>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800377a:	f7fe f8e5 	bl	8001948 <HAL_RCC_GetPCLK2Freq>
 800377e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	085a      	lsrs	r2, r3, #1
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	441a      	add	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003792:	b29b      	uxth	r3, r3
 8003794:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003796:	e02b      	b.n	80037f0 <UART_SetConfig+0x690>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	085b      	lsrs	r3, r3, #1
 800379e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80037a2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6852      	ldr	r2, [r2, #4]
 80037aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80037b2:	e01d      	b.n	80037f0 <UART_SetConfig+0x690>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037b4:	f7fe f81c 	bl	80017f0 <HAL_RCC_GetSysClockFreq>
 80037b8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	085a      	lsrs	r2, r3, #1
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	441a      	add	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80037d0:	e00e      	b.n	80037f0 <UART_SetConfig+0x690>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	085b      	lsrs	r3, r3, #1
 80037d8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80037e8:	e002      	b.n	80037f0 <UART_SetConfig+0x690>
      default:
        ret = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	76fb      	strb	r3, [r7, #27]
        break;
 80037ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	2b0f      	cmp	r3, #15
 80037f4:	d90a      	bls.n	800380c <UART_SetConfig+0x6ac>
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037fc:	d206      	bcs.n	800380c <UART_SetConfig+0x6ac>
    {
      huart->Instance->BRR = usartdiv;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	69fa      	ldr	r2, [r7, #28]
 8003804:	60da      	str	r2, [r3, #12]
 8003806:	e003      	b.n	8003810 <UART_SetConfig+0x6b0>
 8003808:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800381c:	7efb      	ldrb	r3, [r7, #27]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3728      	adds	r7, #40	; 0x28
 8003822:	46bd      	mov	sp, r7
 8003824:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003828 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00a      	beq.n	8003852 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6812      	ldr	r2, [r2, #0]
 8003844:	6852      	ldr	r2, [r2, #4]
 8003846:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800384e:	430a      	orrs	r2, r1
 8003850:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00a      	beq.n	8003874 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6812      	ldr	r2, [r2, #0]
 8003866:	6852      	ldr	r2, [r2, #4]
 8003868:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003870:	430a      	orrs	r2, r1
 8003872:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00a      	beq.n	8003896 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6812      	ldr	r2, [r2, #0]
 8003888:	6852      	ldr	r2, [r2, #4]
 800388a:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003892:	430a      	orrs	r2, r1
 8003894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00a      	beq.n	80038b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6812      	ldr	r2, [r2, #0]
 80038aa:	6852      	ldr	r2, [r2, #4]
 80038ac:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038b4:	430a      	orrs	r2, r1
 80038b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	f003 0310 	and.w	r3, r3, #16
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00a      	beq.n	80038da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6812      	ldr	r2, [r2, #0]
 80038cc:	6892      	ldr	r2, [r2, #8]
 80038ce:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038d6:	430a      	orrs	r2, r1
 80038d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	f003 0320 	and.w	r3, r3, #32
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00a      	beq.n	80038fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6812      	ldr	r2, [r2, #0]
 80038ee:	6892      	ldr	r2, [r2, #8]
 80038f0:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80038f8:	430a      	orrs	r2, r1
 80038fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003904:	2b00      	cmp	r3, #0
 8003906:	d01a      	beq.n	800393e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	6852      	ldr	r2, [r2, #4]
 8003912:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800391a:	430a      	orrs	r2, r1
 800391c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003926:	d10a      	bne.n	800393e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6812      	ldr	r2, [r2, #0]
 8003930:	6852      	ldr	r2, [r2, #4]
 8003932:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800393a:	430a      	orrs	r2, r1
 800393c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00a      	beq.n	8003960 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6812      	ldr	r2, [r2, #0]
 8003952:	6852      	ldr	r2, [r2, #4]
 8003954:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800395c:	430a      	orrs	r2, r1
 800395e:	605a      	str	r2, [r3, #4]
  }
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af02      	add	r7, sp, #8
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800397a:	f7fc fde7 	bl	800054c <HAL_GetTick>
 800397e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b08      	cmp	r3, #8
 800398c:	d10e      	bne.n	80039ac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800398e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f82a 	bl	80039f6 <UART_WaitOnFlagUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e020      	b.n	80039ee <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0304 	and.w	r3, r3, #4
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d10e      	bne.n	80039d8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 f814 	bl	80039f6 <UART_WaitOnFlagUntilTimeout>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e00a      	b.n	80039ee <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2220      	movs	r2, #32
 80039dc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2220      	movs	r2, #32
 80039e2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b084      	sub	sp, #16
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	60f8      	str	r0, [r7, #12]
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	603b      	str	r3, [r7, #0]
 8003a02:	4613      	mov	r3, r2
 8003a04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a06:	e05d      	b.n	8003ac4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0e:	d059      	beq.n	8003ac4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a10:	f7fc fd9c 	bl	800054c <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	1ad2      	subs	r2, r2, r3
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d802      	bhi.n	8003a26 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d11b      	bne.n	8003a5e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	6812      	ldr	r2, [r2, #0]
 8003a2e:	6812      	ldr	r2, [r2, #0]
 8003a30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a34:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	6812      	ldr	r2, [r2, #0]
 8003a3e:	6892      	ldr	r2, [r2, #8]
 8003a40:	f022 0201 	bic.w	r2, r2, #1
 8003a44:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e042      	b.n	8003ae4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0304 	and.w	r3, r3, #4
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d02b      	beq.n	8003ac4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a7a:	d123      	bne.n	8003ac4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a84:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	6812      	ldr	r2, [r2, #0]
 8003a8e:	6812      	ldr	r2, [r2, #0]
 8003a90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a94:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	6812      	ldr	r2, [r2, #0]
 8003a9e:	6892      	ldr	r2, [r2, #8]
 8003aa0:	f022 0201 	bic.w	r2, r2, #1
 8003aa4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e00f      	b.n	8003ae4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	69da      	ldr	r2, [r3, #28]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	401a      	ands	r2, r3
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	bf0c      	ite	eq
 8003ad4:	2301      	moveq	r3, #1
 8003ad6:	2300      	movne	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	461a      	mov	r2, r3
 8003adc:	79fb      	ldrb	r3, [r7, #7]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d092      	beq.n	8003a08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <Init_Debug>:

#include "Sharc_Frame.h"


HAL_StatusTypeDef Init_Debug(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
	// set up clock output on GPIO Pin A8 for testing
#ifdef DEBUG_HSE_OUTPUT_ENABLE
	//configure pin
	/*Configure GPIO pin : PA8 */
	 GPIO_InitTypeDef GPIO_InitStruct;
	 GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003af2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003af6:	607b      	str	r3, [r7, #4]
	 GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af8:	2302      	movs	r3, #2
 8003afa:	60bb      	str	r3, [r7, #8]
	 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afc:	2300      	movs	r3, #0
 8003afe:	60fb      	str	r3, [r7, #12]
	 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b00:	2300      	movs	r3, #0
 8003b02:	613b      	str	r3, [r7, #16]
	 GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003b04:	2300      	movs	r3, #0
 8003b06:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b08:	1d3b      	adds	r3, r7, #4
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b10:	f7fc fe8a 	bl	8000828 <HAL_GPIO_Init>
	 //map clock output to PIN PA8
	 HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8003b14:	2200      	movs	r2, #0
 8003b16:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8003b1a:	2000      	movs	r0, #0
 8003b1c:	f7fd fe34 	bl	8001788 <HAL_RCC_MCOConfig>
#endif
	//initialise USART 2 for USB comms
#ifdef DEBUG_USART_ENABLE
	  huart2.Instance = USART2;
 8003b20:	4b26      	ldr	r3, [pc, #152]	; (8003bbc <Init_Debug+0xd0>)
 8003b22:	4a27      	ldr	r2, [pc, #156]	; (8003bc0 <Init_Debug+0xd4>)
 8003b24:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 8003b26:	4b25      	ldr	r3, [pc, #148]	; (8003bbc <Init_Debug+0xd0>)
 8003b28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b2c:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b2e:	4b23      	ldr	r3, [pc, #140]	; (8003bbc <Init_Debug+0xd0>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b34:	4b21      	ldr	r3, [pc, #132]	; (8003bbc <Init_Debug+0xd0>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8003b3a:	4b20      	ldr	r3, [pc, #128]	; (8003bbc <Init_Debug+0xd0>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b40:	4b1e      	ldr	r3, [pc, #120]	; (8003bbc <Init_Debug+0xd0>)
 8003b42:	220c      	movs	r2, #12
 8003b44:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b46:	4b1d      	ldr	r3, [pc, #116]	; (8003bbc <Init_Debug+0xd0>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b4c:	4b1b      	ldr	r3, [pc, #108]	; (8003bbc <Init_Debug+0xd0>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	61da      	str	r2, [r3, #28]
	  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b52:	4b1a      	ldr	r3, [pc, #104]	; (8003bbc <Init_Debug+0xd0>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	621a      	str	r2, [r3, #32]
	  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b58:	4b18      	ldr	r3, [pc, #96]	; (8003bbc <Init_Debug+0xd0>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b5e:	4817      	ldr	r0, [pc, #92]	; (8003bbc <Init_Debug+0xd0>)
 8003b60:	f7ff fa1c 	bl	8002f9c <HAL_UART_Init>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <Init_Debug+0x82>
	  {
	    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e022      	b.n	8003bb4 <Init_Debug+0xc8>
	  }
	  setbuf(stdout, NULL);
 8003b6e:	4b15      	ldr	r3, [pc, #84]	; (8003bc4 <Init_Debug+0xd8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	2100      	movs	r1, #0
 8003b76:	4618      	mov	r0, r3
 8003b78:	f001 f9a2 	bl	8004ec0 <setbuf>
#endif

#ifdef DEBUG_LED1_ENABLE
	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	2120      	movs	r1, #32
 8003b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b84:	f7fc fff8 	bl	8000b78 <HAL_GPIO_WritePin>
	  /*Configure GPIO pin : PD2 */
	  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003b88:	2304      	movs	r3, #4
 8003b8a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b90:	2300      	movs	r3, #0
 8003b92:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b94:	1d3b      	adds	r3, r7, #4
 8003b96:	4619      	mov	r1, r3
 8003b98:	480b      	ldr	r0, [pc, #44]	; (8003bc8 <Init_Debug+0xdc>)
 8003b9a:	f7fc fe45 	bl	8000828 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,SET);
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	2120      	movs	r1, #32
 8003ba2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ba6:	f7fc ffe7 	bl	8000b78 <HAL_GPIO_WritePin>
#endif

#ifdef DEBUG_LP_ENABLE
	  HAL_DBGMCU_EnableDBGStandbyMode();	//enable for shutdown mode
 8003baa:	f7fc fd0d 	bl	80005c8 <HAL_DBGMCU_EnableDBGStandbyMode>
	  HAL_DBGMCU_EnableDBGStopMode();
 8003bae:	f7fc fcfb 	bl	80005a8 <HAL_DBGMCU_EnableDBGStopMode>

#endif

	  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	200005c8 	.word	0x200005c8
 8003bc0:	40004400 	.word	0x40004400
 8003bc4:	2000000c 	.word	0x2000000c
 8003bc8:	48000c00 	.word	0x48000c00

08003bcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
HAL_StatusTypeDef SystemClock_Config(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b0b8      	sub	sp, #224	; 0xe0
 8003bd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003bd2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003bd6:	2244      	movs	r2, #68	; 0x44
 8003bd8:	2100      	movs	r1, #0
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f001 f968 	bl	8004eb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003be0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003be4:	2200      	movs	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	605a      	str	r2, [r3, #4]
 8003bea:	609a      	str	r2, [r3, #8]
 8003bec:	60da      	str	r2, [r3, #12]
 8003bee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003bf0:	463b      	mov	r3, r7
 8003bf2:	2288      	movs	r2, #136	; 0x88
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f001 f95a 	bl	8004eb0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003bfc:	f7fc ffee 	bl	8000bdc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003c00:	4a3c      	ldr	r2, [pc, #240]	; (8003cf4 <SystemClock_Config+0x128>)
 8003c02:	4b3c      	ldr	r3, [pc, #240]	; (8003cf4 <SystemClock_Config+0x128>)
 8003c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c08:	f023 0318 	bic.w	r3, r3, #24
 8003c0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8003c10:	2316      	movs	r3, #22
 8003c12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003c16:	2301      	movs	r3, #1
 8003c18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003c24:	2310      	movs	r3, #16
 8003c26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003c30:	2300      	movs	r3, #0
 8003c32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003c36:	2360      	movs	r3, #96	; 0x60
 8003c38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003c42:	2301      	movs	r3, #1
 8003c44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 26;
 8003c4e:	231a      	movs	r3, #26
 8003c50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003c54:	2307      	movs	r3, #7
 8003c56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003c60:	2302      	movs	r3, #2
 8003c62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c66:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7fd f8c4 	bl	8000df8 <HAL_RCC_OscConfig>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <SystemClock_Config+0xae>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e037      	b.n	8003cea <SystemClock_Config+0x11e>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c7a:	230f      	movs	r3, #15
 8003c7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c80:	2303      	movs	r3, #3
 8003c82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8003c86:	2380      	movs	r3, #128	; 0x80
 8003c88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c92:	2300      	movs	r3, #0
 8003c94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003c98:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003c9c:	2101      	movs	r1, #1
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7fd fc90 	bl	80015c4 <HAL_RCC_ClockConfig>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <SystemClock_Config+0xe2>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e01d      	b.n	8003cea <SystemClock_Config+0x11e>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2;
 8003cae:	f04f 1302 	mov.w	r3, #131074	; 0x20002
 8003cb2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 8003cb4:	2308      	movs	r3, #8
 8003cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003cb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cc0:	463b      	mov	r3, r7
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fd fee8 	bl	8001a98 <HAL_RCCEx_PeriphCLKConfig>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <SystemClock_Config+0x106>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e00b      	b.n	8003cea <SystemClock_Config+0x11e>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003cd2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003cd6:	f7fc ffff 	bl	8000cd8 <HAL_PWREx_ControlVoltageScaling>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <SystemClock_Config+0x118>
  {
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e002      	b.n	8003cea <SystemClock_Config+0x11e>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8003ce4:	f7fe f9be 	bl	8002064 <HAL_RCCEx_EnableMSIPLLMode>
  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	37e0      	adds	r7, #224	; 0xe0
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40021000 	.word	0x40021000

08003cf8 <Go_To_Sleep>:

HAL_StatusTypeDef Go_To_Sleep(PWR_MODE_t mode, uint32_t seconds)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	6039      	str	r1, [r7, #0]
 8003d02:	71fb      	strb	r3, [r7, #7]
	//reset wake up pin interrupt
	__HAL_RCC_PWR_CLK_ENABLE();
 8003d04:	4a16      	ldr	r2, [pc, #88]	; (8003d60 <Go_To_Sleep+0x68>)
 8003d06:	4b16      	ldr	r3, [pc, #88]	; (8003d60 <Go_To_Sleep+0x68>)
 8003d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d0e:	6593      	str	r3, [r2, #88]	; 0x58
 8003d10:	4b13      	ldr	r3, [pc, #76]	; (8003d60 <Go_To_Sleep+0x68>)
 8003d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d18:	60fb      	str	r3, [r7, #12]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
	/* Enable Wake Up timer in interrupt mode */
	//set alarm
	if(seconds > 0)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00b      	beq.n	8003d3a <Go_To_Sleep+0x42>
	{
	 if(HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,(seconds-1),RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	3b01      	subs	r3, #1
 8003d26:	2204      	movs	r2, #4
 8003d28:	4619      	mov	r1, r3
 8003d2a:	480e      	ldr	r0, [pc, #56]	; (8003d64 <Go_To_Sleep+0x6c>)
 8003d2c:	f7fe fdca 	bl	80028c4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <Go_To_Sleep+0x42>
	  {
		 return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e00d      	b.n	8003d56 <Go_To_Sleep+0x5e>
	  }
	}
	 HAL_PWREx_EnableInternalWakeUpLine();
 8003d3a:	f7fd f823 	bl	8000d84 <HAL_PWREx_EnableInternalWakeUpLine>
	 //if shutdown mode enabled
	 if(mode == SHUTDOWN)
 8003d3e:	79fb      	ldrb	r3, [r7, #7]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d102      	bne.n	8003d4a <Go_To_Sleep+0x52>
	 {
		 HAL_PWREx_EnterSHUTDOWNMode();
 8003d44:	f7fd f83e 	bl	8000dc4 <HAL_PWREx_EnterSHUTDOWNMode>
 8003d48:	e004      	b.n	8003d54 <Go_To_Sleep+0x5c>
	 }
	 else if(mode == STDBY)
 8003d4a:	79fb      	ldrb	r3, [r7, #7]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d101      	bne.n	8003d54 <Go_To_Sleep+0x5c>
	 {
		 HAL_PWR_EnterSTANDBYMode();
 8003d50:	f7fc ff9a 	bl	8000c88 <HAL_PWR_EnterSTANDBYMode>
	 }
	 return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	40021000 	.word	0x40021000
 8003d64:	2000064c 	.word	0x2000064c

08003d68 <set_WUP_Pin>:
	return HAL_OK;
}


void set_WUP_Pin(uint32_t Pin, PinMode_typedef mode)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b090      	sub	sp, #64	; 0x40
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	460b      	mov	r3, r1
 8003d72:	70fb      	strb	r3, [r7, #3]

	GPIO_TypeDef *Pin_Port;
	IRQn_Type WUP_IRQn;
	GPIO_InitTypeDef GPIO_InitStruct;
	switch (Pin) {
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	2b0f      	cmp	r3, #15
 8003d7a:	f200 808a 	bhi.w	8003e92 <set_WUP_Pin+0x12a>
 8003d7e:	a201      	add	r2, pc, #4	; (adr r2, 8003d84 <set_WUP_Pin+0x1c>)
 8003d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d84:	08003dc5 	.word	0x08003dc5
 8003d88:	08003def 	.word	0x08003def
 8003d8c:	08003e93 	.word	0x08003e93
 8003d90:	08003e19 	.word	0x08003e19
 8003d94:	08003e93 	.word	0x08003e93
 8003d98:	08003e93 	.word	0x08003e93
 8003d9c:	08003e93 	.word	0x08003e93
 8003da0:	08003e41 	.word	0x08003e41
 8003da4:	08003e93 	.word	0x08003e93
 8003da8:	08003e93 	.word	0x08003e93
 8003dac:	08003e93 	.word	0x08003e93
 8003db0:	08003e93 	.word	0x08003e93
 8003db4:	08003e93 	.word	0x08003e93
 8003db8:	08003e93 	.word	0x08003e93
 8003dbc:	08003e93 	.word	0x08003e93
 8003dc0:	08003e6b 	.word	0x08003e6b
		case PWR_WAKEUP_PIN1:
			__HAL_RCC_GPIOA_CLK_ENABLE();
 8003dc4:	4a61      	ldr	r2, [pc, #388]	; (8003f4c <set_WUP_Pin+0x1e4>)
 8003dc6:	4b61      	ldr	r3, [pc, #388]	; (8003f4c <set_WUP_Pin+0x1e4>)
 8003dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dca:	f043 0301 	orr.w	r3, r3, #1
 8003dce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003dd0:	4b5e      	ldr	r3, [pc, #376]	; (8003f4c <set_WUP_Pin+0x1e4>)
 8003dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	623b      	str	r3, [r7, #32]
 8003dda:	6a3b      	ldr	r3, [r7, #32]
			Pin_Port = GPIOA;
 8003ddc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003de0:	63fb      	str	r3, [r7, #60]	; 0x3c
			GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003de2:	2301      	movs	r3, #1
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24
			WUP_IRQn = EXTI0_IRQn;
 8003de6:	2306      	movs	r3, #6
 8003de8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			break;
 8003dec:	e052      	b.n	8003e94 <set_WUP_Pin+0x12c>
		case PWR_WAKEUP_PIN2:
			__HAL_RCC_GPIOC_CLK_ENABLE();
 8003dee:	4a57      	ldr	r2, [pc, #348]	; (8003f4c <set_WUP_Pin+0x1e4>)
 8003df0:	4b56      	ldr	r3, [pc, #344]	; (8003f4c <set_WUP_Pin+0x1e4>)
 8003df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df4:	f043 0304 	orr.w	r3, r3, #4
 8003df8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003dfa:	4b54      	ldr	r3, [pc, #336]	; (8003f4c <set_WUP_Pin+0x1e4>)
 8003dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dfe:	f003 0304 	and.w	r3, r3, #4
 8003e02:	61fb      	str	r3, [r7, #28]
 8003e04:	69fb      	ldr	r3, [r7, #28]
			Pin_Port = GPIOC;
 8003e06:	4b52      	ldr	r3, [pc, #328]	; (8003f50 <set_WUP_Pin+0x1e8>)
 8003e08:	63fb      	str	r3, [r7, #60]	; 0x3c
			GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003e0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
			WUP_IRQn = EXTI15_10_IRQn;
 8003e10:	2328      	movs	r3, #40	; 0x28
 8003e12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			break;
 8003e16:	e03d      	b.n	8003e94 <set_WUP_Pin+0x12c>
		case PWR_WAKEUP_PIN3:
			__HAL_RCC_GPIOE_CLK_ENABLE();
 8003e18:	4a4c      	ldr	r2, [pc, #304]	; (8003f4c <set_WUP_Pin+0x1e4>)
 8003e1a:	4b4c      	ldr	r3, [pc, #304]	; (8003f4c <set_WUP_Pin+0x1e4>)
 8003e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e1e:	f043 0310 	orr.w	r3, r3, #16
 8003e22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e24:	4b49      	ldr	r3, [pc, #292]	; (8003f4c <set_WUP_Pin+0x1e4>)
 8003e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e28:	f003 0310 	and.w	r3, r3, #16
 8003e2c:	61bb      	str	r3, [r7, #24]
 8003e2e:	69bb      	ldr	r3, [r7, #24]
			Pin_Port = GPIOE;
 8003e30:	4b48      	ldr	r3, [pc, #288]	; (8003f54 <set_WUP_Pin+0x1ec>)
 8003e32:	63fb      	str	r3, [r7, #60]	; 0x3c
			GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003e34:	2340      	movs	r3, #64	; 0x40
 8003e36:	627b      	str	r3, [r7, #36]	; 0x24
			WUP_IRQn = EXTI9_5_IRQn;
 8003e38:	2317      	movs	r3, #23
 8003e3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			break;
 8003e3e:	e029      	b.n	8003e94 <set_WUP_Pin+0x12c>
		case PWR_WAKEUP_PIN4:
			__HAL_RCC_GPIOA_CLK_ENABLE();
 8003e40:	4a42      	ldr	r2, [pc, #264]	; (8003f4c <set_WUP_Pin+0x1e4>)
 8003e42:	4b42      	ldr	r3, [pc, #264]	; (8003f4c <set_WUP_Pin+0x1e4>)
 8003e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e46:	f043 0301 	orr.w	r3, r3, #1
 8003e4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e4c:	4b3f      	ldr	r3, [pc, #252]	; (8003f4c <set_WUP_Pin+0x1e4>)
 8003e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	617b      	str	r3, [r7, #20]
 8003e56:	697b      	ldr	r3, [r7, #20]
			GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003e58:	2304      	movs	r3, #4
 8003e5a:	627b      	str	r3, [r7, #36]	; 0x24
			Pin_Port = GPIOA;
 8003e5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e60:	63fb      	str	r3, [r7, #60]	; 0x3c
			WUP_IRQn = EXTI2_IRQn;
 8003e62:	2308      	movs	r3, #8
 8003e64:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			break;
 8003e68:	e014      	b.n	8003e94 <set_WUP_Pin+0x12c>
		case PWR_WAKEUP_PIN5:
			__HAL_RCC_GPIOC_CLK_ENABLE();
 8003e6a:	4a38      	ldr	r2, [pc, #224]	; (8003f4c <set_WUP_Pin+0x1e4>)
 8003e6c:	4b37      	ldr	r3, [pc, #220]	; (8003f4c <set_WUP_Pin+0x1e4>)
 8003e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e70:	f043 0304 	orr.w	r3, r3, #4
 8003e74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e76:	4b35      	ldr	r3, [pc, #212]	; (8003f4c <set_WUP_Pin+0x1e4>)
 8003e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e7a:	f003 0304 	and.w	r3, r3, #4
 8003e7e:	613b      	str	r3, [r7, #16]
 8003e80:	693b      	ldr	r3, [r7, #16]
			Pin_Port = GPIOC;
 8003e82:	4b33      	ldr	r3, [pc, #204]	; (8003f50 <set_WUP_Pin+0x1e8>)
 8003e84:	63fb      	str	r3, [r7, #60]	; 0x3c
			GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003e86:	2320      	movs	r3, #32
 8003e88:	627b      	str	r3, [r7, #36]	; 0x24
			WUP_IRQn = EXTI9_5_IRQn;
 8003e8a:	2317      	movs	r3, #23
 8003e8c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			break;
 8003e90:	e000      	b.n	8003e94 <set_WUP_Pin+0x12c>
		default:
			break;
 8003e92:	bf00      	nop
	}
	//configure pin for exti map


	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e94:	4b30      	ldr	r3, [pc, #192]	; (8003f58 <set_WUP_Pin+0x1f0>)
 8003e96:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(Pin_Port,&GPIO_InitStruct);
 8003ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003ea8:	f7fc fcbe 	bl	8000828 <HAL_GPIO_Init>
	//set NVIC interrupt
    HAL_NVIC_SetPriority(WUP_IRQn, 0x0F, 0);
 8003eac:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	210f      	movs	r1, #15
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7fc fc78 	bl	80007aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(WUP_IRQn);
 8003eba:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fc fc8f 	bl	80007e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_ClearPendingIRQ(WUP_IRQn);
 8003ec4:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7fc fc9e 	bl	800080a <HAL_NVIC_ClearPendingIRQ>
    //enable wup in PWR register
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ece:	4a1f      	ldr	r2, [pc, #124]	; (8003f4c <set_WUP_Pin+0x1e4>)
 8003ed0:	4b1e      	ldr	r3, [pc, #120]	; (8003f4c <set_WUP_Pin+0x1e4>)
 8003ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed8:	6593      	str	r3, [r2, #88]	; 0x58
 8003eda:	4b1c      	ldr	r3, [pc, #112]	; (8003f4c <set_WUP_Pin+0x1e4>)
 8003edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
    if(mode == MODE_WUP)
 8003ee6:	78fb      	ldrb	r3, [r7, #3]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10f      	bne.n	8003f0c <set_WUP_Pin+0x1a4>
    {
    	__HAL_RCC_PWR_CLK_ENABLE();
 8003eec:	4a17      	ldr	r2, [pc, #92]	; (8003f4c <set_WUP_Pin+0x1e4>)
 8003eee:	4b17      	ldr	r3, [pc, #92]	; (8003f4c <set_WUP_Pin+0x1e4>)
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ef6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ef8:	4b14      	ldr	r3, [pc, #80]	; (8003f4c <set_WUP_Pin+0x1e4>)
 8003efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f00:	60bb      	str	r3, [r7, #8]
 8003f02:	68bb      	ldr	r3, [r7, #8]
    	HAL_PWR_EnableWakeUpPin(Pin);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7fc fe89 	bl	8000c1c <HAL_PWR_EnableWakeUpPin>
 8003f0a:	e005      	b.n	8003f18 <set_WUP_Pin+0x1b0>

    }else if (mode == MODE_EXTI)
 8003f0c:	78fb      	ldrb	r3, [r7, #3]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d102      	bne.n	8003f18 <set_WUP_Pin+0x1b0>
    {
    	HAL_PWR_DisableWakeUpPin(Pin);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7fc fea2 	bl	8000c5c <HAL_PWR_DisableWakeUpPin>
    }
	//clear unwanted interrupts
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF1);
 8003f18:	4b10      	ldr	r3, [pc, #64]	; (8003f5c <set_WUP_Pin+0x1f4>)
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	619a      	str	r2, [r3, #24]
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF2);
 8003f1e:	4b0f      	ldr	r3, [pc, #60]	; (8003f5c <set_WUP_Pin+0x1f4>)
 8003f20:	2202      	movs	r2, #2
 8003f22:	619a      	str	r2, [r3, #24]
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF3);
 8003f24:	4b0d      	ldr	r3, [pc, #52]	; (8003f5c <set_WUP_Pin+0x1f4>)
 8003f26:	2204      	movs	r2, #4
 8003f28:	619a      	str	r2, [r3, #24]
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF4);
 8003f2a:	4b0c      	ldr	r3, [pc, #48]	; (8003f5c <set_WUP_Pin+0x1f4>)
 8003f2c:	2208      	movs	r2, #8
 8003f2e:	619a      	str	r2, [r3, #24]
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF5);
 8003f30:	4b0a      	ldr	r3, [pc, #40]	; (8003f5c <set_WUP_Pin+0x1f4>)
 8003f32:	2210      	movs	r2, #16
 8003f34:	619a      	str	r2, [r3, #24]
	__HAL_RCC_PWR_CLK_DISABLE();
 8003f36:	4a05      	ldr	r2, [pc, #20]	; (8003f4c <set_WUP_Pin+0x1e4>)
 8003f38:	4b04      	ldr	r3, [pc, #16]	; (8003f4c <set_WUP_Pin+0x1e4>)
 8003f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f40:	6593      	str	r3, [r2, #88]	; 0x58
}
 8003f42:	bf00      	nop
 8003f44:	3740      	adds	r7, #64	; 0x40
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	48000800 	.word	0x48000800
 8003f54:	48001000 	.word	0x48001000
 8003f58:	10110000 	.word	0x10110000
 8003f5c:	40007000 	.word	0x40007000

08003f60 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*) &ch,1,0xFFFF);
 8003f68:	1d39      	adds	r1, r7, #4
 8003f6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f6e:	2201      	movs	r2, #1
 8003f70:	4803      	ldr	r0, [pc, #12]	; (8003f80 <__io_putchar+0x20>)
 8003f72:	f7ff f861 	bl	8003038 <HAL_UART_Transmit>
	return ch;
 8003f76:	687b      	ldr	r3, [r7, #4]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	200005c8 	.word	0x200005c8

08003f84 <GPIO_Set_Pin_LP>:

void GPIO_Set_Pin_LP(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b08a      	sub	sp, #40	; 0x28
 8003f88:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f8a:	f107 0314 	add.w	r3, r7, #20
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	605a      	str	r2, [r3, #4]
 8003f94:	609a      	str	r2, [r3, #8]
 8003f96:	60da      	str	r2, [r3, #12]
 8003f98:	611a      	str	r2, [r3, #16]
	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f9a:	4a3e      	ldr	r2, [pc, #248]	; (8004094 <GPIO_Set_Pin_LP+0x110>)
 8003f9c:	4b3d      	ldr	r3, [pc, #244]	; (8004094 <GPIO_Set_Pin_LP+0x110>)
 8003f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa0:	f043 0304 	orr.w	r3, r3, #4
 8003fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fa6:	4b3b      	ldr	r3, [pc, #236]	; (8004094 <GPIO_Set_Pin_LP+0x110>)
 8003fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003faa:	f003 0304 	and.w	r3, r3, #4
 8003fae:	613b      	str	r3, [r7, #16]
 8003fb0:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003fb2:	4a38      	ldr	r2, [pc, #224]	; (8004094 <GPIO_Set_Pin_LP+0x110>)
 8003fb4:	4b37      	ldr	r3, [pc, #220]	; (8004094 <GPIO_Set_Pin_LP+0x110>)
 8003fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fbe:	4b35      	ldr	r3, [pc, #212]	; (8004094 <GPIO_Set_Pin_LP+0x110>)
 8003fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fca:	4a32      	ldr	r2, [pc, #200]	; (8004094 <GPIO_Set_Pin_LP+0x110>)
 8003fcc:	4b31      	ldr	r3, [pc, #196]	; (8004094 <GPIO_Set_Pin_LP+0x110>)
 8003fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd0:	f043 0301 	orr.w	r3, r3, #1
 8003fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fd6:	4b2f      	ldr	r3, [pc, #188]	; (8004094 <GPIO_Set_Pin_LP+0x110>)
 8003fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	60bb      	str	r3, [r7, #8]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fe2:	4a2c      	ldr	r2, [pc, #176]	; (8004094 <GPIO_Set_Pin_LP+0x110>)
 8003fe4:	4b2b      	ldr	r3, [pc, #172]	; (8004094 <GPIO_Set_Pin_LP+0x110>)
 8003fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe8:	f043 0302 	orr.w	r3, r3, #2
 8003fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fee:	4b29      	ldr	r3, [pc, #164]	; (8004094 <GPIO_Set_Pin_LP+0x110>)
 8003ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	607b      	str	r3, [r7, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ffa:	4a26      	ldr	r2, [pc, #152]	; (8004094 <GPIO_Set_Pin_LP+0x110>)
 8003ffc:	4b25      	ldr	r3, [pc, #148]	; (8004094 <GPIO_Set_Pin_LP+0x110>)
 8003ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004000:	f043 0308 	orr.w	r3, r3, #8
 8004004:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004006:	4b23      	ldr	r3, [pc, #140]	; (8004094 <GPIO_Set_Pin_LP+0x110>)
 8004008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800400a:	f003 0308 	and.w	r3, r3, #8
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	683b      	ldr	r3, [r7, #0]
	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004012:	2200      	movs	r2, #0
 8004014:	2120      	movs	r1, #32
 8004016:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800401a:	f7fc fdad 	bl	8000b78 <HAL_GPIO_WritePin>
	  /*Configure GPIO pins : PC13 PC0 PC1 PC2
	                           PC3 PC4 PC5 PC6
	                           PC7 PC8 PC9 PC10
	                           PC11 PC12 */
	  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 800401e:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8004022:	617b      	str	r3, [r7, #20]
	                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
	                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
	                          |GPIO_PIN_11|GPIO_PIN_12;
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004024:	2303      	movs	r3, #3
 8004026:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004028:	2300      	movs	r3, #0
 800402a:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800402c:	f107 0314 	add.w	r3, r7, #20
 8004030:	4619      	mov	r1, r3
 8004032:	4819      	ldr	r0, [pc, #100]	; (8004098 <GPIO_Set_Pin_LP+0x114>)
 8004034:	f7fc fbf8 	bl	8000828 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PA0 PA1 PA4 PA6
	                           PA7 PA9 PA10 PA11
	                           PA12 PA15 */
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 8004038:	f649 63d3 	movw	r3, #40659	; 0x9ed3
 800403c:	617b      	str	r3, [r7, #20]
	                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
	                          |GPIO_PIN_12|GPIO_PIN_15;
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800403e:	2303      	movs	r3, #3
 8004040:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004042:	2300      	movs	r3, #0
 8004044:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004046:	f107 0314 	add.w	r3, r7, #20
 800404a:	4619      	mov	r1, r3
 800404c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004050:	f7fc fbea 	bl	8000828 <HAL_GPIO_Init>

	  /*Configure GPIO pin : LD2_Pin */
	  GPIO_InitStruct.Pin = LD2_Pin;
 8004054:	2320      	movs	r3, #32
 8004056:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004058:	2301      	movs	r3, #1
 800405a:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800405c:	2300      	movs	r3, #0
 800405e:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004060:	2300      	movs	r3, #0
 8004062:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004064:	f107 0314 	add.w	r3, r7, #20
 8004068:	4619      	mov	r1, r3
 800406a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800406e:	f7fc fbdb 	bl	8000828 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PB0 PB1 PB2 PB10
	                           PB11 PB12 PB13 PB14
	                           PB15 PB3 PB4 PB5
	                           PB6 PB7 PB8 PB9 */
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8004072:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004076:	617b      	str	r3, [r7, #20]
	                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
	                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
	                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004078:	2303      	movs	r3, #3
 800407a:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800407c:	2300      	movs	r3, #0
 800407e:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004080:	f107 0314 	add.w	r3, r7, #20
 8004084:	4619      	mov	r1, r3
 8004086:	4805      	ldr	r0, [pc, #20]	; (800409c <GPIO_Set_Pin_LP+0x118>)
 8004088:	f7fc fbce 	bl	8000828 <HAL_GPIO_Init>

}
 800408c:	bf00      	nop
 800408e:	3728      	adds	r7, #40	; 0x28
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	40021000 	.word	0x40021000
 8004098:	48000800 	.word	0x48000800
 800409c:	48000400 	.word	0x48000400

080040a0 <EXTI9_5_IRQHandler>:
/*
 * @brief: EXTI IRQ Handler for Wake Up Pin 2 (PC13)
 */

void EXTI9_5_IRQHandler(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
	if(__HAL_GPIO_EXTI_GET_FLAG(EXTI_IRIDIUM_RING_WAKE_PIN))
 80040a6:	4b13      	ldr	r3, [pc, #76]	; (80040f4 <EXTI9_5_IRQHandler+0x54>)
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d01b      	beq.n	80040ea <EXTI9_5_IRQHandler+0x4a>
	{
		__HAL_GPIO_EXTI_CLEAR_FLAG(EXTI_IRIDIUM_RING_WAKE_PIN);
 80040b2:	4b10      	ldr	r3, [pc, #64]	; (80040f4 <EXTI9_5_IRQHandler+0x54>)
 80040b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80040b8:	615a      	str	r2, [r3, #20]
		//interrupt source from PWR WAKE PIN 2 == IRIDIUM Recieve Event

		//ROUTINE START
		printf("Incoming Message from Satellite detected while awake: Receiving...");
 80040ba:	480f      	ldr	r0, [pc, #60]	; (80040f8 <EXTI9_5_IRQHandler+0x58>)
 80040bc:	f000 fe58 	bl	8004d70 <iprintf>
		for (int i = 0; i < 10; ++i)
 80040c0:	2300      	movs	r3, #0
 80040c2:	607b      	str	r3, [r7, #4]
 80040c4:	e00b      	b.n	80040de <EXTI9_5_IRQHandler+0x3e>
		{
			HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80040c6:	2120      	movs	r1, #32
 80040c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040cc:	f7fc fd6c 	bl	8000ba8 <HAL_GPIO_TogglePin>
			HAL_Delay(500);
 80040d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80040d4:	f7fc fa46 	bl	8000564 <HAL_Delay>
		for (int i = 0; i < 10; ++i)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	3301      	adds	r3, #1
 80040dc:	607b      	str	r3, [r7, #4]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b09      	cmp	r3, #9
 80040e2:	ddf0      	ble.n	80040c6 <EXTI9_5_IRQHandler+0x26>
		}
		printf("Message Recieved!\r\n");
 80040e4:	4805      	ldr	r0, [pc, #20]	; (80040fc <EXTI9_5_IRQHandler+0x5c>)
 80040e6:	f000 fe8d 	bl	8004e04 <puts>
		//ROUTINE END

	}
}
 80040ea:	bf00      	nop
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	40010400 	.word	0x40010400
 80040f8:	08005d14 	.word	0x08005d14
 80040fc:	08005d58 	.word	0x08005d58

08004100 <EXTI15_10_IRQHandler>:

/*
 * @brief: EXTI IRQ Handler for Wake Up Pin 5 (PC15)
 */
void EXTI15_10_IRQHandler(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
	if(__HAL_GPIO_EXTI_GET_FLAG(EXTI_IRIDIUM_RING_WAKE_PIN))
 8004106:	4b14      	ldr	r3, [pc, #80]	; (8004158 <EXTI15_10_IRQHandler+0x58>)
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d01d      	beq.n	800414e <EXTI15_10_IRQHandler+0x4e>
	{
		__HAL_GPIO_EXTI_CLEAR_FLAG(EXTI_IRIDIUM_RING_WAKE_PIN);
 8004112:	4b11      	ldr	r3, [pc, #68]	; (8004158 <EXTI15_10_IRQHandler+0x58>)
 8004114:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004118:	615a      	str	r2, [r3, #20]

		//ROUTINE START
		__HAL_PWR_CLEAR_FLAG(IMU_EVENT_WAKE_FLAG);
 800411a:	4b10      	ldr	r3, [pc, #64]	; (800415c <EXTI15_10_IRQHandler+0x5c>)
 800411c:	2210      	movs	r2, #16
 800411e:	619a      	str	r2, [r3, #24]
		 printf("IMU Event Detected while awake: Sampling...");
 8004120:	480f      	ldr	r0, [pc, #60]	; (8004160 <EXTI15_10_IRQHandler+0x60>)
 8004122:	f000 fe25 	bl	8004d70 <iprintf>
		for (int i = 0; i < 50; ++i)
 8004126:	2300      	movs	r3, #0
 8004128:	607b      	str	r3, [r7, #4]
 800412a:	e00a      	b.n	8004142 <EXTI15_10_IRQHandler+0x42>
		{
			HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 800412c:	2120      	movs	r1, #32
 800412e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004132:	f7fc fd39 	bl	8000ba8 <HAL_GPIO_TogglePin>
		 	HAL_Delay(100);
 8004136:	2064      	movs	r0, #100	; 0x64
 8004138:	f7fc fa14 	bl	8000564 <HAL_Delay>
		for (int i = 0; i < 50; ++i)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3301      	adds	r3, #1
 8004140:	607b      	str	r3, [r7, #4]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b31      	cmp	r3, #49	; 0x31
 8004146:	ddf1      	ble.n	800412c <EXTI15_10_IRQHandler+0x2c>
		}
		printf("Done\r\n");
 8004148:	4806      	ldr	r0, [pc, #24]	; (8004164 <EXTI15_10_IRQHandler+0x64>)
 800414a:	f000 fe5b 	bl	8004e04 <puts>
		//ROUTINE END

	}
}
 800414e:	bf00      	nop
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	40010400 	.word	0x40010400
 800415c:	40007000 	.word	0x40007000
 8004160:	08005d6c 	.word	0x08005d6c
 8004164:	08005d98 	.word	0x08005d98

08004168 <POR_Handler>:
/*
 * @brief: Power On Reset Handler for BUOY (CASE: NRST Line Pulled low)
 */
void POR_Handler(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
	  //clear flags
	  __HAL_RCC_CLEAR_RESET_FLAGS();
 800416c:	4a14      	ldr	r2, [pc, #80]	; (80041c0 <POR_Handler+0x58>)
 800416e:	4b14      	ldr	r3, [pc, #80]	; (80041c0 <POR_Handler+0x58>)
 8004170:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004174:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004178:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	  //clear the back up registers
	  HAL_PWR_EnableBkUpAccess();
 800417c:	f7fc fd2e 	bl	8000bdc <HAL_PWR_EnableBkUpAccess>
	  __HAL_RCC_BACKUPRESET_FORCE();
 8004180:	4a0f      	ldr	r2, [pc, #60]	; (80041c0 <POR_Handler+0x58>)
 8004182:	4b0f      	ldr	r3, [pc, #60]	; (80041c0 <POR_Handler+0x58>)
 8004184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800418c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	  __HAL_RCC_BACKUPRESET_RELEASE();
 8004190:	4a0b      	ldr	r2, [pc, #44]	; (80041c0 <POR_Handler+0x58>)
 8004192:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <POR_Handler+0x58>)
 8004194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800419c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	  HAL_PWR_DisableBkUpAccess();
 80041a0:	f7fc fd2c 	bl	8000bfc <HAL_PWR_DisableBkUpAccess>
	  SystemClock_Config();
 80041a4:	f7ff fd12 	bl	8003bcc <SystemClock_Config>
	  //deactivate and disable wake up timers
	  HAL_PWREx_DisableInternalWakeUpLine();
 80041a8:	f7fc fdfc 	bl	8000da4 <HAL_PWREx_DisableInternalWakeUpLine>
	  /* Clear PWR wake up Flag */
	 __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80041ac:	4b05      	ldr	r3, [pc, #20]	; (80041c4 <POR_Handler+0x5c>)
 80041ae:	221f      	movs	r2, #31
 80041b0:	619a      	str	r2, [r3, #24]
	 __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 80041b2:	4b04      	ldr	r3, [pc, #16]	; (80041c4 <POR_Handler+0x5c>)
 80041b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041b8:	619a      	str	r2, [r3, #24]
	  //reinitialise the clock
}
 80041ba:	bf00      	nop
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	40021000 	.word	0x40021000
 80041c4:	40007000 	.word	0x40007000

080041c8 <BOR_Handler>:
/*
 * @brief: Brown Out Reset Handler for BUOY (case Vbat < Vbrownoutthreshold)
 */
void BOR_Handler(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
	  //clear flags
	  __HAL_RCC_CLEAR_RESET_FLAGS();
 80041ce:	4a11      	ldr	r2, [pc, #68]	; (8004214 <BOR_Handler+0x4c>)
 80041d0:	4b10      	ldr	r3, [pc, #64]	; (8004214 <BOR_Handler+0x4c>)
 80041d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	  // transmit log to PC

	  char* msg= "Warning! Device encountered a Brown Out. Exiting Program...\r\n";
 80041de:	4b0e      	ldr	r3, [pc, #56]	; (8004218 <BOR_Handler+0x50>)
 80041e0:	607b      	str	r3, [r7, #4]
	  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),100);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7fb fff0 	bl	80001c8 <strlen>
 80041e8:	4603      	mov	r3, r0
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	2364      	movs	r3, #100	; 0x64
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	480a      	ldr	r0, [pc, #40]	; (800421c <BOR_Handler+0x54>)
 80041f2:	f7fe ff21 	bl	8003038 <HAL_UART_Transmit>
	  //perform system reset
	  POR_Handler();
 80041f6:	f7ff ffb7 	bl	8004168 <POR_Handler>
	  HAL_NVIC_SystemReset();
 80041fa:	f7fc fb00 	bl	80007fe <HAL_NVIC_SystemReset>
	  /*
	   * Failure to perform system reset causes device to enter an infinite loop
	   */
	  while(1)
	  {
		  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80041fe:	2120      	movs	r1, #32
 8004200:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004204:	f7fc fcd0 	bl	8000ba8 <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 8004208:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800420c:	f7fc f9aa 	bl	8000564 <HAL_Delay>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8004210:	e7f5      	b.n	80041fe <BOR_Handler+0x36>
 8004212:	bf00      	nop
 8004214:	40021000 	.word	0x40021000
 8004218:	08005da0 	.word	0x08005da0
 800421c:	200005c8 	.word	0x200005c8

08004220 <main>:
 **
 **===========================================================================
 **/

int main(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
//======================== 1. SYSTEM INIT & CLOCK CONFIG ========================//

	HAL_Init();				//Init Flash prefetch, systick timer, NVIC and LL functions
 8004226:	f7fc f95f 	bl	80004e8 <HAL_Init>
	SystemClock_Config();	//configure clock
 800422a:	f7ff fccf 	bl	8003bcc <SystemClock_Config>
	GPIO_Set_Pin_LP();		//Configure all unused GPIO pins to low Power mode
 800422e:	f7ff fea9 	bl	8003f84 <GPIO_Set_Pin_LP>
	Init_Debug();			// initialize debug peripherals
 8004232:	f7ff fc5b 	bl	8003aec <Init_Debug>

/*
 * When system powers on, check for any asynchronous resets that
 * may have occured. Use this area to add in any reset handling
 */
	if(__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == SET)
 8004236:	4b9b      	ldr	r3, [pc, #620]	; (80044a4 <main+0x284>)
 8004238:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800423c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <main+0x28>
	{
	  BOR_Handler();
 8004244:	f7ff ffc0 	bl	80041c8 <BOR_Handler>
	}
	uint8_t flag = __HAL_RCC_GET_PORRST_FLAG();
 8004248:	4b96      	ldr	r3, [pc, #600]	; (80044a4 <main+0x284>)
 800424a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800424e:	0e9b      	lsrs	r3, r3, #26
 8004250:	f003 0305 	and.w	r3, r3, #5
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <main+0x3c>
 8004258:	2301      	movs	r3, #1
 800425a:	e000      	b.n	800425e <main+0x3e>
 800425c:	2300      	movs	r3, #0
 800425e:	73fb      	strb	r3, [r7, #15]
	if(flag  == SET)
 8004260:	7bfb      	ldrb	r3, [r7, #15]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d104      	bne.n	8004270 <main+0x50>
	{
	  printf("Software Reset Detected. Initializing main program...\r\n");
 8004266:	4890      	ldr	r0, [pc, #576]	; (80044a8 <main+0x288>)
 8004268:	f000 fdcc 	bl	8004e04 <puts>
	  POR_Handler();
 800426c:	f7ff ff7c 	bl	8004168 <POR_Handler>
	   * If an interrupt occurred while the device was sleeping, check the
	   * flags to determine if this occurred
	   */

	  //check for interrupts on wake up pins during deep sleep
	  __HAL_RCC_PWR_CLK_ENABLE();
 8004270:	4a8c      	ldr	r2, [pc, #560]	; (80044a4 <main+0x284>)
 8004272:	4b8c      	ldr	r3, [pc, #560]	; (80044a4 <main+0x284>)
 8004274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800427a:	6593      	str	r3, [r2, #88]	; 0x58
 800427c:	4b89      	ldr	r3, [pc, #548]	; (80044a4 <main+0x284>)
 800427e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004284:	60bb      	str	r3, [r7, #8]
 8004286:	68bb      	ldr	r3, [r7, #8]
	  if(__HAL_PWR_GET_FLAG(IMU_EVENT_WAKE_FLAG)|| __HAL_PWR_GET_FLAG(IRIDIUM_RING_WAKE_FLAG))
 8004288:	4b88      	ldr	r3, [pc, #544]	; (80044ac <main+0x28c>)
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	f003 0310 	and.w	r3, r3, #16
 8004290:	2b00      	cmp	r3, #0
 8004292:	d105      	bne.n	80042a0 <main+0x80>
 8004294:	4b85      	ldr	r3, [pc, #532]	; (80044ac <main+0x28c>)
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d039      	beq.n	8004314 <main+0xf4>
	  {
		  Current_State = __GET_PREV_STATE();			//get previous state from back up reg
 80042a0:	4b83      	ldr	r3, [pc, #524]	; (80044b0 <main+0x290>)
 80042a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	4b83      	ldr	r3, [pc, #524]	; (80044b4 <main+0x294>)
 80042a8:	701a      	strb	r2, [r3, #0]
		  if(__HAL_PWR_GET_FLAG(IMU_EVENT_WAKE_FLAG))
 80042aa:	4b80      	ldr	r3, [pc, #512]	; (80044ac <main+0x28c>)
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	f003 0310 	and.w	r3, r3, #16
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d004      	beq.n	80042c0 <main+0xa0>
		  {
			  __HAL_PWR_CLEAR_FLAG(IMU_EVENT_WAKE_FLAG);	//clear  flag in PWR SR
 80042b6:	4b7d      	ldr	r3, [pc, #500]	; (80044ac <main+0x28c>)
 80042b8:	2210      	movs	r2, #16
 80042ba:	619a      	str	r2, [r3, #24]
			  Routine_ASYNC_IMU_EVENT();				//Perform IMU Event Detection Routine
 80042bc:	f000 f978 	bl	80045b0 <Routine_ASYNC_IMU_EVENT>
		  }
		  if(__HAL_PWR_GET_FLAG(IRIDIUM_RING_WAKE_FLAG))	//clear  flag in PWR SR
 80042c0:	4b7a      	ldr	r3, [pc, #488]	; (80044ac <main+0x28c>)
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d004      	beq.n	80042d6 <main+0xb6>
		  {
			__HAL_PWR_CLEAR_FLAG(IRIDIUM_RING_WAKE_FLAG);
 80042cc:	4b77      	ldr	r3, [pc, #476]	; (80044ac <main+0x28c>)
 80042ce:	2202      	movs	r2, #2
 80042d0:	619a      	str	r2, [r3, #24]
			Routine_ASYNC_IRIDIUM_RX();
 80042d2:	f000 f98f 	bl	80045f4 <Routine_ASYNC_IRIDIUM_RX>

		  }
		  if(Current_State == STATE_SLEEP)				//return to sleep if Interrupt event handled before wake up
 80042d6:	4b77      	ldr	r3, [pc, #476]	; (80044b4 <main+0x294>)
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	2b03      	cmp	r3, #3
 80042dc:	d10f      	bne.n	80042fe <main+0xde>
		  {

			  printf("System Going Back To Sleep\r\n"); 	//check how long device was asleep for
 80042de:	4876      	ldr	r0, [pc, #472]	; (80044b8 <main+0x298>)
 80042e0:	f000 fd90 	bl	8004e04 <puts>
			  set_WUP_Pin(IMU_EVENT_WAKE_PIN, MODE_WUP);	//reenable wake up pins
 80042e4:	2100      	movs	r1, #0
 80042e6:	2010      	movs	r0, #16
 80042e8:	f7ff fd3e 	bl	8003d68 <set_WUP_Pin>
			  set_WUP_Pin(IRIDIUM_RING_WAKE_PIN, MODE_WUP);
 80042ec:	2100      	movs	r1, #0
 80042ee:	2002      	movs	r0, #2
 80042f0:	f7ff fd3a 	bl	8003d68 <set_WUP_Pin>
			  Go_To_Sleep(STDBY,10);						//return to sleep
 80042f4:	210a      	movs	r1, #10
 80042f6:	2001      	movs	r0, #1
 80042f8:	f7ff fcfe 	bl	8003cf8 <Go_To_Sleep>
 80042fc:	e00a      	b.n	8004314 <main+0xf4>
		  }
		  	 else
		  {

		  	  printf("Going Back to Main Loop:\r\n");		//if come from wake mode
 80042fe:	486f      	ldr	r0, [pc, #444]	; (80044bc <main+0x29c>)
 8004300:	f000 fd80 	bl	8004e04 <puts>
			  __SET_CURRENT_STATE(STATE_ASYNCINT);
 8004304:	4a6a      	ldr	r2, [pc, #424]	; (80044b0 <main+0x290>)
 8004306:	4b6a      	ldr	r3, [pc, #424]	; (80044b0 <main+0x290>)
 8004308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800430a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800430e:	f043 0307 	orr.w	r3, r3, #7
 8004312:	6513      	str	r3, [r2, #80]	; 0x50
	   * states are defined in the enum Buoy_State_typedef. The state check block performs the following routine
	   *
	   */

	  //enable access to back up registers
	  switch(__GET_PREV_STATE())
 8004314:	4b66      	ldr	r3, [pc, #408]	; (80044b0 <main+0x290>)
 8004316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004318:	b2db      	uxtb	r3, r3
 800431a:	3b01      	subs	r3, #1
 800431c:	2b06      	cmp	r3, #6
 800431e:	d867      	bhi.n	80043f0 <main+0x1d0>
 8004320:	a201      	add	r2, pc, #4	; (adr r2, 8004328 <main+0x108>)
 8004322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004326:	bf00      	nop
 8004328:	08004345 	.word	0x08004345
 800432c:	0800434d 	.word	0x0800434d
 8004330:	080043a7 	.word	0x080043a7
 8004334:	080043f1 	.word	0x080043f1
 8004338:	080043f1 	.word	0x080043f1
 800433c:	080043d7 	.word	0x080043d7
 8004340:	08004345 	.word	0x08004345
	  {
	  	 case STATE_ASYNCINT:
	  	 case STATE_RESET:
	  	 //system encountered a power on reset, put peripherals here
	  	 Current_State = STATE_SAMPLE;
 8004344:	4b5b      	ldr	r3, [pc, #364]	; (80044b4 <main+0x294>)
 8004346:	2202      	movs	r2, #2
 8004348:	701a      	strb	r2, [r3, #0]
	  	 break;
 800434a:	e054      	b.n	80043f6 <main+0x1d6>

	  	 case STATE_SAMPLE:
	  	 //check how many samples have been recorded by the Buoy
	  	 sample_count = __GET_SAMPLE_COUNT();
 800434c:	4b58      	ldr	r3, [pc, #352]	; (80044b0 <main+0x290>)
 800434e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004350:	0a1b      	lsrs	r3, r3, #8
 8004352:	b2da      	uxtb	r2, r3
 8004354:	4b5a      	ldr	r3, [pc, #360]	; (80044c0 <main+0x2a0>)
 8004356:	701a      	strb	r2, [r3, #0]
	  	 if(sample_count > 3)
 8004358:	4b59      	ldr	r3, [pc, #356]	; (80044c0 <main+0x2a0>)
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	2b03      	cmp	r3, #3
 800435e:	d903      	bls.n	8004368 <main+0x148>
	  	 {
	  		 //set next Buoy State to Transmit
	  		 Current_State = STATE_TRANSMIT;
 8004360:	4b54      	ldr	r3, [pc, #336]	; (80044b4 <main+0x294>)
 8004362:	2206      	movs	r2, #6
 8004364:	701a      	strb	r2, [r3, #0]
	  		 Current_State = STATE_SLEEP;
	  		 __HAL_RCC_PWR_CLK_ENABLE();
	  		 __SET_CURRENT_STATE(Current_State);
	  		 __HAL_RCC_PWR_CLK_DISABLE();
	  	 }
	  	 break;
 8004366:	e046      	b.n	80043f6 <main+0x1d6>
	  		 Current_State = STATE_SLEEP;
 8004368:	4b52      	ldr	r3, [pc, #328]	; (80044b4 <main+0x294>)
 800436a:	2203      	movs	r2, #3
 800436c:	701a      	strb	r2, [r3, #0]
	  		 __HAL_RCC_PWR_CLK_ENABLE();
 800436e:	4a4d      	ldr	r2, [pc, #308]	; (80044a4 <main+0x284>)
 8004370:	4b4c      	ldr	r3, [pc, #304]	; (80044a4 <main+0x284>)
 8004372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004378:	6593      	str	r3, [r2, #88]	; 0x58
 800437a:	4b4a      	ldr	r3, [pc, #296]	; (80044a4 <main+0x284>)
 800437c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004382:	607b      	str	r3, [r7, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
	  		 __SET_CURRENT_STATE(Current_State);
 8004386:	4a4a      	ldr	r2, [pc, #296]	; (80044b0 <main+0x290>)
 8004388:	4b49      	ldr	r3, [pc, #292]	; (80044b0 <main+0x290>)
 800438a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800438c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004390:	4948      	ldr	r1, [pc, #288]	; (80044b4 <main+0x294>)
 8004392:	7809      	ldrb	r1, [r1, #0]
 8004394:	430b      	orrs	r3, r1
 8004396:	6513      	str	r3, [r2, #80]	; 0x50
	  		 __HAL_RCC_PWR_CLK_DISABLE();
 8004398:	4a42      	ldr	r2, [pc, #264]	; (80044a4 <main+0x284>)
 800439a:	4b42      	ldr	r3, [pc, #264]	; (80044a4 <main+0x284>)
 800439c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800439e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043a2:	6593      	str	r3, [r2, #88]	; 0x58
	  	 break;
 80043a4:	e027      	b.n	80043f6 <main+0x1d6>

	  	 case STATE_SLEEP:
	  	hrtc.Instance = RTC;					 //attach RTC instance to handler
 80043a6:	4b47      	ldr	r3, [pc, #284]	; (80044c4 <main+0x2a4>)
 80043a8:	4a41      	ldr	r2, [pc, #260]	; (80044b0 <main+0x290>)
 80043aa:	601a      	str	r2, [r3, #0]
	  	HAL_PWREx_DisableInternalWakeUpLine();	 //clear wake up pending interrupt from internal wake up
 80043ac:	f7fc fcfa 	bl	8000da4 <HAL_PWREx_DisableInternalWakeUpLine>
	  	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);		 //clear pending interrupt from ext wake up pins
 80043b0:	4b3e      	ldr	r3, [pc, #248]	; (80044ac <main+0x28c>)
 80043b2:	221f      	movs	r2, #31
 80043b4:	619a      	str	r2, [r3, #24]
	  	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 80043b6:	4b3d      	ldr	r3, [pc, #244]	; (80044ac <main+0x28c>)
 80043b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043bc:	619a      	str	r2, [r3, #24]
		set_WUP_Pin(IMU_EVENT_WAKE_PIN,MODE_EXTI); 	  	//reconfigure wake up pins
 80043be:	2101      	movs	r1, #1
 80043c0:	2010      	movs	r0, #16
 80043c2:	f7ff fcd1 	bl	8003d68 <set_WUP_Pin>
		set_WUP_Pin(IRIDIUM_RING_WAKE_PIN,MODE_EXTI);  	  	//set Current State to Sample
 80043c6:	2101      	movs	r1, #1
 80043c8:	2002      	movs	r0, #2
 80043ca:	f7ff fccd 	bl	8003d68 <set_WUP_Pin>
	  	Current_State = STATE_SAMPLE;
 80043ce:	4b39      	ldr	r3, [pc, #228]	; (80044b4 <main+0x294>)
 80043d0:	2202      	movs	r2, #2
 80043d2:	701a      	strb	r2, [r3, #0]
	  	 break;
 80043d4:	e00f      	b.n	80043f6 <main+0x1d6>

	  	 case STATE_TRANSMIT:
	  	 Current_State = STATE_SLEEP;
 80043d6:	4b37      	ldr	r3, [pc, #220]	; (80044b4 <main+0x294>)
 80043d8:	2203      	movs	r2, #3
 80043da:	701a      	strb	r2, [r3, #0]
  		 __SET_CURRENT_STATE(Current_State);
 80043dc:	4a34      	ldr	r2, [pc, #208]	; (80044b0 <main+0x290>)
 80043de:	4b34      	ldr	r3, [pc, #208]	; (80044b0 <main+0x290>)
 80043e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80043e6:	4933      	ldr	r1, [pc, #204]	; (80044b4 <main+0x294>)
 80043e8:	7809      	ldrb	r1, [r1, #0]
 80043ea:	430b      	orrs	r3, r1
 80043ec:	6513      	str	r3, [r2, #80]	; 0x50
	  	 break;
 80043ee:	e002      	b.n	80043f6 <main+0x1d6>

	  	 //default case: reset state
	  	 default:
	  	 Current_State = STATE_RESET;
 80043f0:	4b30      	ldr	r3, [pc, #192]	; (80044b4 <main+0x294>)
 80043f2:	2201      	movs	r2, #1
 80043f4:	701a      	strb	r2, [r3, #0]
	  }
	  __HAL_RCC_PWR_CLK_DISABLE();
 80043f6:	4a2b      	ldr	r2, [pc, #172]	; (80044a4 <main+0x284>)
 80043f8:	4b2a      	ldr	r3, [pc, #168]	; (80044a4 <main+0x284>)
 80043fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004400:	6593      	str	r3, [r2, #88]	; 0x58

	  /*
	   * Place Routine code Here
	   */
	  // SLEEP STATE
	  if(Current_State == STATE_SLEEP)
 8004402:	4b2c      	ldr	r3, [pc, #176]	; (80044b4 <main+0x294>)
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	2b03      	cmp	r3, #3
 8004408:	d102      	bne.n	8004410 <main+0x1f0>
	  {
		  Routine_STATE_SLEEP();
 800440a:	f000 f935 	bl	8004678 <Routine_STATE_SLEEP>
 800440e:	e013      	b.n	8004438 <main+0x218>
	  }
	  //RESET STATE
	  else if(Current_State == STATE_RESET)
 8004410:	4b28      	ldr	r3, [pc, #160]	; (80044b4 <main+0x294>)
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d102      	bne.n	800441e <main+0x1fe>
	  {
		  Routine_STATE_RESET();
 8004418:	f000 f910 	bl	800463c <Routine_STATE_RESET>
 800441c:	e00c      	b.n	8004438 <main+0x218>
	  }
	  //SAMPLE STATE
	  else if(Current_State == STATE_SAMPLE)
 800441e:	4b25      	ldr	r3, [pc, #148]	; (80044b4 <main+0x294>)
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b02      	cmp	r3, #2
 8004424:	d102      	bne.n	800442c <main+0x20c>
	  {
		  Routine_STATE_SAMPLE();
 8004426:	f000 f941 	bl	80046ac <Routine_STATE_SAMPLE>
 800442a:	e005      	b.n	8004438 <main+0x218>
	  }
	  //TRANSMIT STATE
	  else if(Current_State == STATE_TRANSMIT)
 800442c:	4b21      	ldr	r3, [pc, #132]	; (80044b4 <main+0x294>)
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	2b06      	cmp	r3, #6
 8004432:	d101      	bne.n	8004438 <main+0x218>
	  {
		  Routine_STATE_TRANSMIT();
 8004434:	f000 f96c 	bl	8004710 <Routine_STATE_TRANSMIT>

	  //========================= 6. END OF ROUTINE FUNCTION ==========================//
	  /*
	   * After each routine has run, save state to the back up registers
	   */
	  __HAL_RCC_PWR_CLK_ENABLE();
 8004438:	4a1a      	ldr	r2, [pc, #104]	; (80044a4 <main+0x284>)
 800443a:	4b1a      	ldr	r3, [pc, #104]	; (80044a4 <main+0x284>)
 800443c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004442:	6593      	str	r3, [r2, #88]	; 0x58
 8004444:	4b17      	ldr	r3, [pc, #92]	; (80044a4 <main+0x284>)
 8004446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444c:	603b      	str	r3, [r7, #0]
 800444e:	683b      	ldr	r3, [r7, #0]
	  if(Current_State == STATE_SAMPLE)			//increment sample counter after each sampe
 8004450:	4b18      	ldr	r3, [pc, #96]	; (80044b4 <main+0x294>)
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	2b02      	cmp	r3, #2
 8004456:	d114      	bne.n	8004482 <main+0x262>
	  {
		  sample_count = __GET_SAMPLE_COUNT();
 8004458:	4b15      	ldr	r3, [pc, #84]	; (80044b0 <main+0x290>)
 800445a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800445c:	0a1b      	lsrs	r3, r3, #8
 800445e:	b2da      	uxtb	r2, r3
 8004460:	4b17      	ldr	r3, [pc, #92]	; (80044c0 <main+0x2a0>)
 8004462:	701a      	strb	r2, [r3, #0]
		  __SET_SAMPLE_COUNT(++sample_count);
 8004464:	4912      	ldr	r1, [pc, #72]	; (80044b0 <main+0x290>)
 8004466:	4b12      	ldr	r3, [pc, #72]	; (80044b0 <main+0x290>)
 8004468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800446a:	b2db      	uxtb	r3, r3
 800446c:	4a14      	ldr	r2, [pc, #80]	; (80044c0 <main+0x2a0>)
 800446e:	7812      	ldrb	r2, [r2, #0]
 8004470:	3201      	adds	r2, #1
 8004472:	b2d0      	uxtb	r0, r2
 8004474:	4a12      	ldr	r2, [pc, #72]	; (80044c0 <main+0x2a0>)
 8004476:	7010      	strb	r0, [r2, #0]
 8004478:	4a11      	ldr	r2, [pc, #68]	; (80044c0 <main+0x2a0>)
 800447a:	7812      	ldrb	r2, [r2, #0]
 800447c:	0212      	lsls	r2, r2, #8
 800447e:	4313      	orrs	r3, r2
 8004480:	650b      	str	r3, [r1, #80]	; 0x50
	  }
	  __SET_CURRENT_STATE(Current_State);	    //write value to back up register
 8004482:	4a0b      	ldr	r2, [pc, #44]	; (80044b0 <main+0x290>)
 8004484:	4b0a      	ldr	r3, [pc, #40]	; (80044b0 <main+0x290>)
 8004486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004488:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800448c:	4909      	ldr	r1, [pc, #36]	; (80044b4 <main+0x294>)
 800448e:	7809      	ldrb	r1, [r1, #0]
 8004490:	430b      	orrs	r3, r1
 8004492:	6513      	str	r3, [r2, #80]	; 0x50
	  __HAL_RCC_PWR_CLK_DISABLE();
 8004494:	4a03      	ldr	r2, [pc, #12]	; (80044a4 <main+0x284>)
 8004496:	4b03      	ldr	r3, [pc, #12]	; (80044a4 <main+0x284>)
 8004498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800449e:	6593      	str	r3, [r2, #88]	; 0x58
	  __HAL_RCC_PWR_CLK_ENABLE();
 80044a0:	e6e6      	b.n	8004270 <main+0x50>
 80044a2:	bf00      	nop
 80044a4:	40021000 	.word	0x40021000
 80044a8:	08005de0 	.word	0x08005de0
 80044ac:	40007000 	.word	0x40007000
 80044b0:	40002800 	.word	0x40002800
 80044b4:	20000648 	.word	0x20000648
 80044b8:	08005e18 	.word	0x08005e18
 80044bc:	08005e34 	.word	0x08005e34
 80044c0:	200005bd 	.word	0x200005bd
 80044c4:	2000064c 	.word	0x2000064c

080044c8 <MX_RTC_Init>:
//==================== 7. Configuration & Initialization Functions ====================//

/* Private functions */

static void MX_RTC_Init(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80044ce:	1d3b      	adds	r3, r7, #4
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	605a      	str	r2, [r3, #4]
 80044d6:	609a      	str	r2, [r3, #8]
 80044d8:	60da      	str	r2, [r3, #12]
 80044da:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80044dc:	2300      	movs	r3, #0
 80044de:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80044e0:	4b2d      	ldr	r3, [pc, #180]	; (8004598 <MX_RTC_Init+0xd0>)
 80044e2:	4a2e      	ldr	r2, [pc, #184]	; (800459c <MX_RTC_Init+0xd4>)
 80044e4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80044e6:	4b2c      	ldr	r3, [pc, #176]	; (8004598 <MX_RTC_Init+0xd0>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80044ec:	4b2a      	ldr	r3, [pc, #168]	; (8004598 <MX_RTC_Init+0xd0>)
 80044ee:	227f      	movs	r2, #127	; 0x7f
 80044f0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80044f2:	4b29      	ldr	r3, [pc, #164]	; (8004598 <MX_RTC_Init+0xd0>)
 80044f4:	22ff      	movs	r2, #255	; 0xff
 80044f6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80044f8:	4b27      	ldr	r3, [pc, #156]	; (8004598 <MX_RTC_Init+0xd0>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80044fe:	4b26      	ldr	r3, [pc, #152]	; (8004598 <MX_RTC_Init+0xd0>)
 8004500:	2200      	movs	r2, #0
 8004502:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004504:	4b24      	ldr	r3, [pc, #144]	; (8004598 <MX_RTC_Init+0xd0>)
 8004506:	2200      	movs	r2, #0
 8004508:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800450a:	4b23      	ldr	r3, [pc, #140]	; (8004598 <MX_RTC_Init+0xd0>)
 800450c:	2200      	movs	r2, #0
 800450e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004510:	4821      	ldr	r0, [pc, #132]	; (8004598 <MX_RTC_Init+0xd0>)
 8004512:	f7fd ff81 	bl	8002418 <HAL_RTC_Init>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800451c:	f000 f840 	bl	80045a0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 12;
 8004520:	230c      	movs	r3, #12
 8004522:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 57;
 8004524:	2339      	movs	r3, #57	; 0x39
 8004526:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8004528:	2300      	movs	r3, #0
 800452a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800452c:	2300      	movs	r3, #0
 800452e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004530:	2300      	movs	r3, #0
 8004532:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8004534:	1d3b      	adds	r3, r7, #4
 8004536:	2200      	movs	r2, #0
 8004538:	4619      	mov	r1, r3
 800453a:	4817      	ldr	r0, [pc, #92]	; (8004598 <MX_RTC_Init+0xd0>)
 800453c:	f7fd ffe7 	bl	800250e <HAL_RTC_SetTime>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8004546:	f000 f82b 	bl	80045a0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 800454a:	2305      	movs	r3, #5
 800454c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 800454e:	2305      	movs	r3, #5
 8004550:	707b      	strb	r3, [r7, #1]
  sDate.Date = 8;
 8004552:	2308      	movs	r3, #8
 8004554:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8004556:	2300      	movs	r3, #0
 8004558:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800455a:	463b      	mov	r3, r7
 800455c:	2200      	movs	r2, #0
 800455e:	4619      	mov	r1, r3
 8004560:	480d      	ldr	r0, [pc, #52]	; (8004598 <MX_RTC_Init+0xd0>)
 8004562:	f7fe f871 	bl	8002648 <HAL_RTC_SetDate>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 800456c:	f000 f818 	bl	80045a0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  //Configure RTC_Wake up time for range 250ms - 36 Hours
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc,RTC_FLAG_WUTF))
 8004570:	4b09      	ldr	r3, [pc, #36]	; (8004598 <MX_RTC_Init+0xd0>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800457a:	2b00      	cmp	r3, #0
 800457c:	d008      	beq.n	8004590 <MX_RTC_Init+0xc8>
  {
	  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc,RTC_FLAG_WUTF);
 800457e:	4b06      	ldr	r3, [pc, #24]	; (8004598 <MX_RTC_Init+0xd0>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a05      	ldr	r2, [pc, #20]	; (8004598 <MX_RTC_Init+0xd0>)
 8004584:	6812      	ldr	r2, [r2, #0]
 8004586:	68d2      	ldr	r2, [r2, #12]
 8004588:	b2d2      	uxtb	r2, r2
 800458a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800458e:	60da      	str	r2, [r3, #12]
  }

  /* USER CODE END RTC_Init 2 */

}
 8004590:	bf00      	nop
 8004592:	3718      	adds	r7, #24
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	2000064c 	.word	0x2000064c
 800459c:	40002800 	.word	0x40002800

080045a0 <Error_Handler>:
//====================================== 7. END ======================================//

//==================================== 8. Handlers ===================================//

void Error_Handler(void)
{
 80045a0:	b480      	push	{r7}
 80045a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80045a4:	bf00      	nop
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
	...

080045b0 <Routine_ASYNC_IMU_EVENT>:
//===================================== 8. END ======================================//

//=============================== 9. Routines =======================================//

static void Routine_ASYNC_IMU_EVENT(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
	 printf("IMU Event Detected: Sampling...");
 80045b6:	480d      	ldr	r0, [pc, #52]	; (80045ec <Routine_ASYNC_IMU_EVENT+0x3c>)
 80045b8:	f000 fbda 	bl	8004d70 <iprintf>
	 for (int i = 0; i < 50; ++i)
 80045bc:	2300      	movs	r3, #0
 80045be:	607b      	str	r3, [r7, #4]
 80045c0:	e00a      	b.n	80045d8 <Routine_ASYNC_IMU_EVENT+0x28>
	 {
	 	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80045c2:	2120      	movs	r1, #32
 80045c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045c8:	f7fc faee 	bl	8000ba8 <HAL_GPIO_TogglePin>
	 	HAL_Delay(100);
 80045cc:	2064      	movs	r0, #100	; 0x64
 80045ce:	f7fb ffc9 	bl	8000564 <HAL_Delay>
	 for (int i = 0; i < 50; ++i)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	3301      	adds	r3, #1
 80045d6:	607b      	str	r3, [r7, #4]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b31      	cmp	r3, #49	; 0x31
 80045dc:	ddf1      	ble.n	80045c2 <Routine_ASYNC_IMU_EVENT+0x12>
	 }
	 printf("Done\r\n");
 80045de:	4804      	ldr	r0, [pc, #16]	; (80045f0 <Routine_ASYNC_IMU_EVENT+0x40>)
 80045e0:	f000 fc10 	bl	8004e04 <puts>
}
 80045e4:	bf00      	nop
 80045e6:	3708      	adds	r7, #8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	08005e50 	.word	0x08005e50
 80045f0:	08005e70 	.word	0x08005e70

080045f4 <Routine_ASYNC_IRIDIUM_RX>:

static void Routine_ASYNC_IRIDIUM_RX(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
	printf("Incoming Message from Satellite: Receiving...");
 80045fa:	480e      	ldr	r0, [pc, #56]	; (8004634 <Routine_ASYNC_IRIDIUM_RX+0x40>)
 80045fc:	f000 fbb8 	bl	8004d70 <iprintf>
	for (int i = 0; i < 10; ++i)
 8004600:	2300      	movs	r3, #0
 8004602:	607b      	str	r3, [r7, #4]
 8004604:	e00b      	b.n	800461e <Routine_ASYNC_IRIDIUM_RX+0x2a>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8004606:	2120      	movs	r1, #32
 8004608:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800460c:	f7fc facc 	bl	8000ba8 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8004610:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004614:	f7fb ffa6 	bl	8000564 <HAL_Delay>
	for (int i = 0; i < 10; ++i)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3301      	adds	r3, #1
 800461c:	607b      	str	r3, [r7, #4]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b09      	cmp	r3, #9
 8004622:	ddf0      	ble.n	8004606 <Routine_ASYNC_IRIDIUM_RX+0x12>
	}
	printf("Message Received!\r\n");
 8004624:	4804      	ldr	r0, [pc, #16]	; (8004638 <Routine_ASYNC_IRIDIUM_RX+0x44>)
 8004626:	f000 fbed 	bl	8004e04 <puts>
}
 800462a:	bf00      	nop
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	08005e78 	.word	0x08005e78
 8004638:	08005ea8 	.word	0x08005ea8

0800463c <Routine_STATE_RESET>:

static void Routine_STATE_RESET(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	af00      	add	r7, sp, #0
	 //initialise RTC
	 MX_RTC_Init();
 8004640:	f7ff ff42 	bl	80044c8 <MX_RTC_Init>

	 set_WUP_Pin(IRIDIUM_RING_WAKE_PIN,MODE_WUP);
 8004644:	2100      	movs	r1, #0
 8004646:	2002      	movs	r0, #2
 8004648:	f7ff fb8e 	bl	8003d68 <set_WUP_Pin>
	 set_WUP_Pin(IMU_EVENT_WAKE_PIN,MODE_WUP);
 800464c:	2100      	movs	r1, #0
 800464e:	2010      	movs	r0, #16
 8004650:	f7ff fb8a 	bl	8003d68 <set_WUP_Pin>
	 printf("All Systems Online!\r\n");
 8004654:	4806      	ldr	r0, [pc, #24]	; (8004670 <Routine_STATE_RESET+0x34>)
 8004656:	f000 fbd5 	bl	8004e04 <puts>
	 printf("Current State: RESET \t Next State: SAMPLE\r\n");
 800465a:	4806      	ldr	r0, [pc, #24]	; (8004674 <Routine_STATE_RESET+0x38>)
 800465c:	f000 fbd2 	bl	8004e04 <puts>
	 HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,SET);
 8004660:	2201      	movs	r2, #1
 8004662:	2120      	movs	r1, #32
 8004664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004668:	f7fc fa86 	bl	8000b78 <HAL_GPIO_WritePin>
	 //Enable Interrupt pins as EXTI Outputs
}
 800466c:	bf00      	nop
 800466e:	bd80      	pop	{r7, pc}
 8004670:	08005ebc 	.word	0x08005ebc
 8004674:	08005ed4 	.word	0x08005ed4

08004678 <Routine_STATE_SLEEP>:

static void Routine_STATE_SLEEP(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
	  printf("Current State: SLEEP \t Next State: SAMPLE\r\n");
 800467c:	4809      	ldr	r0, [pc, #36]	; (80046a4 <Routine_STATE_SLEEP+0x2c>)
 800467e:	f000 fbc1 	bl	8004e04 <puts>
	  printf("Good Night! \r\n");
 8004682:	4809      	ldr	r0, [pc, #36]	; (80046a8 <Routine_STATE_SLEEP+0x30>)
 8004684:	f000 fbbe 	bl	8004e04 <puts>
	  set_WUP_Pin(IRIDIUM_RING_WAKE_PIN,MODE_WUP);
 8004688:	2100      	movs	r1, #0
 800468a:	2002      	movs	r0, #2
 800468c:	f7ff fb6c 	bl	8003d68 <set_WUP_Pin>
	  set_WUP_Pin(IMU_EVENT_WAKE_PIN,MODE_WUP);
 8004690:	2100      	movs	r1, #0
 8004692:	2010      	movs	r0, #16
 8004694:	f7ff fb68 	bl	8003d68 <set_WUP_Pin>
	  Go_To_Sleep(STDBY,10);
 8004698:	210a      	movs	r1, #10
 800469a:	2001      	movs	r0, #1
 800469c:	f7ff fb2c 	bl	8003cf8 <Go_To_Sleep>
}
 80046a0:	bf00      	nop
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	08005f00 	.word	0x08005f00
 80046a8:	08005f2c 	.word	0x08005f2c

080046ac <Routine_STATE_SAMPLE>:

static void Routine_STATE_SAMPLE(void)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
	  sample_count = __GET_SAMPLE_COUNT();
 80046b2:	4b13      	ldr	r3, [pc, #76]	; (8004700 <Routine_STATE_SAMPLE+0x54>)
 80046b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b6:	0a1b      	lsrs	r3, r3, #8
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	4b12      	ldr	r3, [pc, #72]	; (8004704 <Routine_STATE_SAMPLE+0x58>)
 80046bc:	701a      	strb	r2, [r3, #0]
	  if(sample_count < 3)
 80046be:	4b11      	ldr	r3, [pc, #68]	; (8004704 <Routine_STATE_SAMPLE+0x58>)
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d803      	bhi.n	80046ce <Routine_STATE_SAMPLE+0x22>
	  {
		  printf("Current State: SAMPLE \t Next State: SLEEP\r\n");
 80046c6:	4810      	ldr	r0, [pc, #64]	; (8004708 <Routine_STATE_SAMPLE+0x5c>)
 80046c8:	f000 fb9c 	bl	8004e04 <puts>
 80046cc:	e002      	b.n	80046d4 <Routine_STATE_SAMPLE+0x28>
	  } else
	  {
		  printf("Current State: SAMPLE \t Next State: TRANS\r\n");
 80046ce:	480f      	ldr	r0, [pc, #60]	; (800470c <Routine_STATE_SAMPLE+0x60>)
 80046d0:	f000 fb98 	bl	8004e04 <puts>
	  }
	  //TODO: SAMPLE SENSORS:

	  //increment sample counter
	  //routine: Flash LED 3 times every 500 ms
	  for (int var = 0; var < 6; ++var)
 80046d4:	2300      	movs	r3, #0
 80046d6:	607b      	str	r3, [r7, #4]
 80046d8:	e00a      	b.n	80046f0 <Routine_STATE_SAMPLE+0x44>
	  {
		  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80046da:	2120      	movs	r1, #32
 80046dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046e0:	f7fc fa62 	bl	8000ba8 <HAL_GPIO_TogglePin>
		  HAL_Delay(250);
 80046e4:	20fa      	movs	r0, #250	; 0xfa
 80046e6:	f7fb ff3d 	bl	8000564 <HAL_Delay>
	  for (int var = 0; var < 6; ++var)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	3301      	adds	r3, #1
 80046ee:	607b      	str	r3, [r7, #4]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b05      	cmp	r3, #5
 80046f4:	ddf1      	ble.n	80046da <Routine_STATE_SAMPLE+0x2e>
	  }
}
 80046f6:	bf00      	nop
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40002800 	.word	0x40002800
 8004704:	200005bd 	.word	0x200005bd
 8004708:	08005f3c 	.word	0x08005f3c
 800470c:	08005f68 	.word	0x08005f68

08004710 <Routine_STATE_TRANSMIT>:

static void Routine_STATE_TRANSMIT(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
	  printf("Current State: TRANS \t Next State: SLEEP\r\n");
 8004716:	4817      	ldr	r0, [pc, #92]	; (8004774 <Routine_STATE_TRANSMIT+0x64>)
 8004718:	f000 fb74 	bl	8004e04 <puts>
	  printf("Transmitting Package...");
 800471c:	4816      	ldr	r0, [pc, #88]	; (8004778 <Routine_STATE_TRANSMIT+0x68>)
 800471e:	f000 fb27 	bl	8004d70 <iprintf>
	  for (int var = 0; var < 6; ++var)
 8004722:	2300      	movs	r3, #0
 8004724:	607b      	str	r3, [r7, #4]
 8004726:	e015      	b.n	8004754 <Routine_STATE_TRANSMIT+0x44>
	  {
		  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,SET);
 8004728:	2201      	movs	r2, #1
 800472a:	2120      	movs	r1, #32
 800472c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004730:	f7fc fa22 	bl	8000b78 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8004734:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004738:	f7fb ff14 	bl	8000564 <HAL_Delay>
		  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,RESET);
 800473c:	2200      	movs	r2, #0
 800473e:	2120      	movs	r1, #32
 8004740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004744:	f7fc fa18 	bl	8000b78 <HAL_GPIO_WritePin>
		  HAL_Delay(250);
 8004748:	20fa      	movs	r0, #250	; 0xfa
 800474a:	f7fb ff0b 	bl	8000564 <HAL_Delay>
	  for (int var = 0; var < 6; ++var)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	3301      	adds	r3, #1
 8004752:	607b      	str	r3, [r7, #4]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b05      	cmp	r3, #5
 8004758:	dde6      	ble.n	8004728 <Routine_STATE_TRANSMIT+0x18>
	  }
	  printf("Done!\r\n");
 800475a:	4808      	ldr	r0, [pc, #32]	; (800477c <Routine_STATE_TRANSMIT+0x6c>)
 800475c:	f000 fb52 	bl	8004e04 <puts>
	  //reset sample count
	  __SET_SAMPLE_COUNT(0);
 8004760:	4a07      	ldr	r2, [pc, #28]	; (8004780 <Routine_STATE_TRANSMIT+0x70>)
 8004762:	4b07      	ldr	r3, [pc, #28]	; (8004780 <Routine_STATE_TRANSMIT+0x70>)
 8004764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004766:	b2db      	uxtb	r3, r3
 8004768:	6513      	str	r3, [r2, #80]	; 0x50
}
 800476a:	bf00      	nop
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	08005f94 	.word	0x08005f94
 8004778:	08005fc0 	.word	0x08005fc0
 800477c:	08005fd8 	.word	0x08005fd8
 8004780:	40002800 	.word	0x40002800

08004784 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004784:	f8df d034 	ldr.w	sp, [pc, #52]	; 80047bc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004788:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800478a:	e003      	b.n	8004794 <LoopCopyDataInit>

0800478c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800478c:	4b0c      	ldr	r3, [pc, #48]	; (80047c0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800478e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004790:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004792:	3104      	adds	r1, #4

08004794 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004794:	480b      	ldr	r0, [pc, #44]	; (80047c4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004796:	4b0c      	ldr	r3, [pc, #48]	; (80047c8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004798:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800479a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800479c:	d3f6      	bcc.n	800478c <CopyDataInit>
	ldr	r2, =_sbss
 800479e:	4a0b      	ldr	r2, [pc, #44]	; (80047cc <LoopForever+0x12>)
	b	LoopFillZerobss
 80047a0:	e002      	b.n	80047a8 <LoopFillZerobss>

080047a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80047a2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80047a4:	f842 3b04 	str.w	r3, [r2], #4

080047a8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80047a8:	4b09      	ldr	r3, [pc, #36]	; (80047d0 <LoopForever+0x16>)
	cmp	r2, r3
 80047aa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80047ac:	d3f9      	bcc.n	80047a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80047ae:	f000 f933 	bl	8004a18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80047b2:	f000 fb59 	bl	8004e68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80047b6:	f7ff fd33 	bl	8004220 <main>

080047ba <LoopForever>:

LoopForever:
    b LoopForever
 80047ba:	e7fe      	b.n	80047ba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80047bc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80047c0:	080060a0 	.word	0x080060a0
	ldr	r0, =_sdata
 80047c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80047c8:	20000510 	.word	0x20000510
	ldr	r2, =_sbss
 80047cc:	20000510 	.word	0x20000510
	ldr	r3, = _ebss
 80047d0:	20000680 	.word	0x20000680

080047d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80047d4:	e7fe      	b.n	80047d4 <ADC1_2_IRQHandler>
	...

080047d8 <HAL_MspInit>:
  * @brief  Initialize the Global MSP.
  * @param  None
  * @retval None
  */
void HAL_MspInit(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
  /* NOTE : This function is generated automatically by STM32CubeMX and eventually  
            modified by the user
   */ 
	  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047de:	4a0f      	ldr	r2, [pc, #60]	; (800481c <HAL_MspInit+0x44>)
 80047e0:	4b0e      	ldr	r3, [pc, #56]	; (800481c <HAL_MspInit+0x44>)
 80047e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e4:	f043 0301 	orr.w	r3, r3, #1
 80047e8:	6613      	str	r3, [r2, #96]	; 0x60
 80047ea:	4b0c      	ldr	r3, [pc, #48]	; (800481c <HAL_MspInit+0x44>)
 80047ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	607b      	str	r3, [r7, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_PWR_CLK_ENABLE();
 80047f6:	4a09      	ldr	r2, [pc, #36]	; (800481c <HAL_MspInit+0x44>)
 80047f8:	4b08      	ldr	r3, [pc, #32]	; (800481c <HAL_MspInit+0x44>)
 80047fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004800:	6593      	str	r3, [r2, #88]	; 0x58
 8004802:	4b06      	ldr	r3, [pc, #24]	; (800481c <HAL_MspInit+0x44>)
 8004804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800480a:	603b      	str	r3, [r7, #0]
 800480c:	683b      	ldr	r3, [r7, #0]
}
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	40021000 	.word	0x40021000

08004820 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a0b      	ldr	r2, [pc, #44]	; (800485c <HAL_RTC_MspInit+0x3c>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d10f      	bne.n	8004852 <HAL_RTC_MspInit+0x32>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004832:	4a0b      	ldr	r2, [pc, #44]	; (8004860 <HAL_RTC_MspInit+0x40>)
 8004834:	4b0a      	ldr	r3, [pc, #40]	; (8004860 <HAL_RTC_MspInit+0x40>)
 8004836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800483e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8004842:	2200      	movs	r2, #0
 8004844:	2100      	movs	r1, #0
 8004846:	2003      	movs	r0, #3
 8004848:	f7fb ffaf 	bl	80007aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800484c:	2003      	movs	r0, #3
 800484e:	f7fb ffc8 	bl	80007e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004852:	bf00      	nop
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	40002800 	.word	0x40002800
 8004860:	40021000 	.word	0x40021000

08004864 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b08a      	sub	sp, #40	; 0x28
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800486c:	f107 0314 	add.w	r3, r7, #20
 8004870:	2200      	movs	r2, #0
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	605a      	str	r2, [r3, #4]
 8004876:	609a      	str	r2, [r3, #8]
 8004878:	60da      	str	r2, [r3, #12]
 800487a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a1b      	ldr	r2, [pc, #108]	; (80048f0 <HAL_UART_MspInit+0x8c>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d130      	bne.n	80048e8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004886:	4a1b      	ldr	r2, [pc, #108]	; (80048f4 <HAL_UART_MspInit+0x90>)
 8004888:	4b1a      	ldr	r3, [pc, #104]	; (80048f4 <HAL_UART_MspInit+0x90>)
 800488a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004890:	6593      	str	r3, [r2, #88]	; 0x58
 8004892:	4b18      	ldr	r3, [pc, #96]	; (80048f4 <HAL_UART_MspInit+0x90>)
 8004894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489a:	613b      	str	r3, [r7, #16]
 800489c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800489e:	4a15      	ldr	r2, [pc, #84]	; (80048f4 <HAL_UART_MspInit+0x90>)
 80048a0:	4b14      	ldr	r3, [pc, #80]	; (80048f4 <HAL_UART_MspInit+0x90>)
 80048a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048a4:	f043 0301 	orr.w	r3, r3, #1
 80048a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048aa:	4b12      	ldr	r3, [pc, #72]	; (80048f4 <HAL_UART_MspInit+0x90>)
 80048ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80048b6:	230c      	movs	r3, #12
 80048b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ba:	2302      	movs	r3, #2
 80048bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048be:	2300      	movs	r3, #0
 80048c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048c2:	2303      	movs	r3, #3
 80048c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80048c6:	2307      	movs	r3, #7
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048ca:	f107 0314 	add.w	r3, r7, #20
 80048ce:	4619      	mov	r1, r3
 80048d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048d4:	f7fb ffa8 	bl	8000828 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80048d8:	2200      	movs	r2, #0
 80048da:	2100      	movs	r1, #0
 80048dc:	2026      	movs	r0, #38	; 0x26
 80048de:	f7fb ff64 	bl	80007aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80048e2:	2026      	movs	r0, #38	; 0x26
 80048e4:	f7fb ff7d 	bl	80007e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80048e8:	bf00      	nop
 80048ea:	3728      	adds	r7, #40	; 0x28
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40004400 	.word	0x40004400
 80048f4:	40021000 	.word	0x40021000

080048f8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80048f8:	b590      	push	{r4, r7, lr}
 80048fa:	b087      	sub	sp, #28
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004904:	2300      	movs	r3, #0
 8004906:	617b      	str	r3, [r7, #20]
 8004908:	e00a      	b.n	8004920 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800490a:	68bc      	ldr	r4, [r7, #8]
 800490c:	1c63      	adds	r3, r4, #1
 800490e:	60bb      	str	r3, [r7, #8]
 8004910:	f3af 8000 	nop.w
 8004914:	4603      	mov	r3, r0
 8004916:	b2db      	uxtb	r3, r3
 8004918:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	3301      	adds	r3, #1
 800491e:	617b      	str	r3, [r7, #20]
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	429a      	cmp	r2, r3
 8004926:	dbf0      	blt.n	800490a <_read+0x12>
	}

return len;
 8004928:	687b      	ldr	r3, [r7, #4]
}
 800492a:	4618      	mov	r0, r3
 800492c:	371c      	adds	r7, #28
 800492e:	46bd      	mov	sp, r7
 8004930:	bd90      	pop	{r4, r7, pc}

08004932 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b086      	sub	sp, #24
 8004936:	af00      	add	r7, sp, #0
 8004938:	60f8      	str	r0, [r7, #12]
 800493a:	60b9      	str	r1, [r7, #8]
 800493c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800493e:	2300      	movs	r3, #0
 8004940:	617b      	str	r3, [r7, #20]
 8004942:	e009      	b.n	8004958 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	1c5a      	adds	r2, r3, #1
 8004948:	60ba      	str	r2, [r7, #8]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	4618      	mov	r0, r3
 800494e:	f7ff fb07 	bl	8003f60 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	3301      	adds	r3, #1
 8004956:	617b      	str	r3, [r7, #20]
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	429a      	cmp	r2, r3
 800495e:	dbf1      	blt.n	8004944 <_write+0x12>
	}
	return len;
 8004960:	687b      	ldr	r3, [r7, #4]
}
 8004962:	4618      	mov	r0, r3
 8004964:	3718      	adds	r7, #24
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
	...

0800496c <_sbrk>:

caddr_t _sbrk(int incr)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004974:	4b11      	ldr	r3, [pc, #68]	; (80049bc <_sbrk+0x50>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d102      	bne.n	8004982 <_sbrk+0x16>
		heap_end = &end;
 800497c:	4b0f      	ldr	r3, [pc, #60]	; (80049bc <_sbrk+0x50>)
 800497e:	4a10      	ldr	r2, [pc, #64]	; (80049c0 <_sbrk+0x54>)
 8004980:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004982:	4b0e      	ldr	r3, [pc, #56]	; (80049bc <_sbrk+0x50>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004988:	4b0c      	ldr	r3, [pc, #48]	; (80049bc <_sbrk+0x50>)
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4413      	add	r3, r2
 8004990:	466a      	mov	r2, sp
 8004992:	4293      	cmp	r3, r2
 8004994:	d907      	bls.n	80049a6 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8004996:	f000 fa61 	bl	8004e5c <__errno>
 800499a:	4602      	mov	r2, r0
 800499c:	230c      	movs	r3, #12
 800499e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80049a0:	f04f 33ff 	mov.w	r3, #4294967295
 80049a4:	e006      	b.n	80049b4 <_sbrk+0x48>
	}

	heap_end += incr;
 80049a6:	4b05      	ldr	r3, [pc, #20]	; (80049bc <_sbrk+0x50>)
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4413      	add	r3, r2
 80049ae:	4a03      	ldr	r2, [pc, #12]	; (80049bc <_sbrk+0x50>)
 80049b0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80049b2:	68fb      	ldr	r3, [r7, #12]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	2000052c 	.word	0x2000052c
 80049c0:	20000680 	.word	0x20000680

080049c4 <_close>:

int _close(int file)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
	return -1;
 80049cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80049ec:	605a      	str	r2, [r3, #4]
	return 0;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
	return 0;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
	...

08004a18 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a1c:	4a17      	ldr	r2, [pc, #92]	; (8004a7c <SystemInit+0x64>)
 8004a1e:	4b17      	ldr	r3, [pc, #92]	; (8004a7c <SystemInit+0x64>)
 8004a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004a2c:	4a14      	ldr	r2, [pc, #80]	; (8004a80 <SystemInit+0x68>)
 8004a2e:	4b14      	ldr	r3, [pc, #80]	; (8004a80 <SystemInit+0x68>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f043 0301 	orr.w	r3, r3, #1
 8004a36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004a38:	4b11      	ldr	r3, [pc, #68]	; (8004a80 <SystemInit+0x68>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004a3e:	4a10      	ldr	r2, [pc, #64]	; (8004a80 <SystemInit+0x68>)
 8004a40:	4b0f      	ldr	r3, [pc, #60]	; (8004a80 <SystemInit+0x68>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8004a48:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8004a4c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004a4e:	4b0c      	ldr	r3, [pc, #48]	; (8004a80 <SystemInit+0x68>)
 8004a50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a54:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004a56:	4a0a      	ldr	r2, [pc, #40]	; (8004a80 <SystemInit+0x68>)
 8004a58:	4b09      	ldr	r3, [pc, #36]	; (8004a80 <SystemInit+0x68>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a60:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004a62:	4b07      	ldr	r3, [pc, #28]	; (8004a80 <SystemInit+0x68>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004a68:	4b04      	ldr	r3, [pc, #16]	; (8004a7c <SystemInit+0x64>)
 8004a6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a6e:	609a      	str	r2, [r3, #8]
#endif
}
 8004a70:	bf00      	nop
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	e000ed00 	.word	0xe000ed00
 8004a80:	40021000 	.word	0x40021000

08004a84 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
	int div = 1;
 8004a90:	2301      	movs	r3, #1
 8004a92:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8004a94:	e004      	b.n	8004aa0 <ts_itoa+0x1c>
		div *= base;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	fb02 f303 	mul.w	r3, r2, r3
 8004a9e:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d2f3      	bcs.n	8004a96 <ts_itoa+0x12>

	while (div != 0)
 8004aae:	e029      	b.n	8004b04 <ts_itoa+0x80>
	{
		int num = d/div;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab8:	613b      	str	r3, [r7, #16]
		d = d%div;
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ac2:	fb02 f201 	mul.w	r2, r2, r1
 8004ac6:	1a9b      	subs	r3, r3, r2
 8004ac8:	60bb      	str	r3, [r7, #8]
		div /= base;
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	fb92 f3f3 	sdiv	r3, r2, r3
 8004ad2:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	2b09      	cmp	r3, #9
 8004ad8:	dd0a      	ble.n	8004af0 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	1c59      	adds	r1, r3, #1
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	6011      	str	r1, [r2, #0]
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	b2d2      	uxtb	r2, r2
 8004ae8:	3237      	adds	r2, #55	; 0x37
 8004aea:	b2d2      	uxtb	r2, r2
 8004aec:	701a      	strb	r2, [r3, #0]
 8004aee:	e009      	b.n	8004b04 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	1c59      	adds	r1, r3, #1
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	6011      	str	r1, [r2, #0]
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	b2d2      	uxtb	r2, r2
 8004afe:	3230      	adds	r2, #48	; 0x30
 8004b00:	b2d2      	uxtb	r2, r2
 8004b02:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1d2      	bne.n	8004ab0 <ts_itoa+0x2c>
	}
}
 8004b0a:	bf00      	nop
 8004b0c:	371c      	adds	r7, #28
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b088      	sub	sp, #32
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	60f8      	str	r0, [r7, #12]
 8004b1e:	60b9      	str	r1, [r7, #8]
 8004b20:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8004b26:	e07d      	b.n	8004c24 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	2b25      	cmp	r3, #37	; 0x25
 8004b2e:	d171      	bne.n	8004c14 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	3301      	adds	r3, #1
 8004b34:	60bb      	str	r3, [r7, #8]
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	2b64      	cmp	r3, #100	; 0x64
 8004b3c:	d01e      	beq.n	8004b7c <ts_formatstring+0x66>
 8004b3e:	2b64      	cmp	r3, #100	; 0x64
 8004b40:	dc06      	bgt.n	8004b50 <ts_formatstring+0x3a>
 8004b42:	2b58      	cmp	r3, #88	; 0x58
 8004b44:	d050      	beq.n	8004be8 <ts_formatstring+0xd2>
 8004b46:	2b63      	cmp	r3, #99	; 0x63
 8004b48:	d00e      	beq.n	8004b68 <ts_formatstring+0x52>
 8004b4a:	2b25      	cmp	r3, #37	; 0x25
 8004b4c:	d058      	beq.n	8004c00 <ts_formatstring+0xea>
 8004b4e:	e05d      	b.n	8004c0c <ts_formatstring+0xf6>
 8004b50:	2b73      	cmp	r3, #115	; 0x73
 8004b52:	d02b      	beq.n	8004bac <ts_formatstring+0x96>
 8004b54:	2b73      	cmp	r3, #115	; 0x73
 8004b56:	dc02      	bgt.n	8004b5e <ts_formatstring+0x48>
 8004b58:	2b69      	cmp	r3, #105	; 0x69
 8004b5a:	d00f      	beq.n	8004b7c <ts_formatstring+0x66>
 8004b5c:	e056      	b.n	8004c0c <ts_formatstring+0xf6>
 8004b5e:	2b75      	cmp	r3, #117	; 0x75
 8004b60:	d037      	beq.n	8004bd2 <ts_formatstring+0xbc>
 8004b62:	2b78      	cmp	r3, #120	; 0x78
 8004b64:	d040      	beq.n	8004be8 <ts_formatstring+0xd2>
 8004b66:	e051      	b.n	8004c0c <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	1c5a      	adds	r2, r3, #1
 8004b6c:	60fa      	str	r2, [r7, #12]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	1d11      	adds	r1, r2, #4
 8004b72:	6079      	str	r1, [r7, #4]
 8004b74:	6812      	ldr	r2, [r2, #0]
 8004b76:	b2d2      	uxtb	r2, r2
 8004b78:	701a      	strb	r2, [r3, #0]
				break;
 8004b7a:	e047      	b.n	8004c0c <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	1d1a      	adds	r2, r3, #4
 8004b80:	607a      	str	r2, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	da07      	bge.n	8004b9c <ts_formatstring+0x86>
					{
						val *= -1;
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	425b      	negs	r3, r3
 8004b90:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	1c5a      	adds	r2, r3, #1
 8004b96:	60fa      	str	r2, [r7, #12]
 8004b98:	222d      	movs	r2, #45	; 0x2d
 8004b9a:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8004b9c:	69f9      	ldr	r1, [r7, #28]
 8004b9e:	f107 030c 	add.w	r3, r7, #12
 8004ba2:	220a      	movs	r2, #10
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7ff ff6d 	bl	8004a84 <ts_itoa>
				}
				break;
 8004baa:	e02f      	b.n	8004c0c <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	1d1a      	adds	r2, r3, #4
 8004bb0:	607a      	str	r2, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8004bb6:	e007      	b.n	8004bc8 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	1c5a      	adds	r2, r3, #1
 8004bbc:	60fa      	str	r2, [r7, #12]
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	1c51      	adds	r1, r2, #1
 8004bc2:	61b9      	str	r1, [r7, #24]
 8004bc4:	7812      	ldrb	r2, [r2, #0]
 8004bc6:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1f3      	bne.n	8004bb8 <ts_formatstring+0xa2>
					}
				}
				break;
 8004bd0:	e01c      	b.n	8004c0c <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	1d1a      	adds	r2, r3, #4
 8004bd6:	607a      	str	r2, [r7, #4]
 8004bd8:	6819      	ldr	r1, [r3, #0]
 8004bda:	f107 030c 	add.w	r3, r7, #12
 8004bde:	220a      	movs	r2, #10
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7ff ff4f 	bl	8004a84 <ts_itoa>
				break;
 8004be6:	e011      	b.n	8004c0c <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	1d1a      	adds	r2, r3, #4
 8004bec:	607a      	str	r2, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	f107 030c 	add.w	r3, r7, #12
 8004bf6:	2210      	movs	r2, #16
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7ff ff43 	bl	8004a84 <ts_itoa>
				break;
 8004bfe:	e005      	b.n	8004c0c <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	1c5a      	adds	r2, r3, #1
 8004c04:	60fa      	str	r2, [r7, #12]
 8004c06:	2225      	movs	r2, #37	; 0x25
 8004c08:	701a      	strb	r2, [r3, #0]
				  break;
 8004c0a:	bf00      	nop
			}
			fmt++;
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	60bb      	str	r3, [r7, #8]
 8004c12:	e007      	b.n	8004c24 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	1c5a      	adds	r2, r3, #1
 8004c18:	60fa      	str	r2, [r7, #12]
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	1c51      	adds	r1, r2, #1
 8004c1e:	60b9      	str	r1, [r7, #8]
 8004c20:	7812      	ldrb	r2, [r2, #0]
 8004c22:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f47f af7d 	bne.w	8004b28 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	461a      	mov	r2, r3
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	1ad3      	subs	r3, r2, r3
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3720      	adds	r7, #32
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
	int length = 0;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 8004c52:	e081      	b.n	8004d58 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	2b25      	cmp	r3, #37	; 0x25
 8004c5a:	d177      	bne.n	8004d4c <ts_formatlength+0x108>
		{
			++fmt;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	3b58      	subs	r3, #88	; 0x58
 8004c68:	2b20      	cmp	r3, #32
 8004c6a:	d86a      	bhi.n	8004d42 <ts_formatlength+0xfe>
 8004c6c:	a201      	add	r2, pc, #4	; (adr r2, 8004c74 <ts_formatlength+0x30>)
 8004c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c72:	bf00      	nop
 8004c74:	08004d35 	.word	0x08004d35
 8004c78:	08004d43 	.word	0x08004d43
 8004c7c:	08004d43 	.word	0x08004d43
 8004c80:	08004d43 	.word	0x08004d43
 8004c84:	08004d43 	.word	0x08004d43
 8004c88:	08004d43 	.word	0x08004d43
 8004c8c:	08004d43 	.word	0x08004d43
 8004c90:	08004d43 	.word	0x08004d43
 8004c94:	08004d43 	.word	0x08004d43
 8004c98:	08004d43 	.word	0x08004d43
 8004c9c:	08004d43 	.word	0x08004d43
 8004ca0:	08004cf9 	.word	0x08004cf9
 8004ca4:	08004d07 	.word	0x08004d07
 8004ca8:	08004d43 	.word	0x08004d43
 8004cac:	08004d43 	.word	0x08004d43
 8004cb0:	08004d43 	.word	0x08004d43
 8004cb4:	08004d43 	.word	0x08004d43
 8004cb8:	08004d07 	.word	0x08004d07
 8004cbc:	08004d43 	.word	0x08004d43
 8004cc0:	08004d43 	.word	0x08004d43
 8004cc4:	08004d43 	.word	0x08004d43
 8004cc8:	08004d43 	.word	0x08004d43
 8004ccc:	08004d43 	.word	0x08004d43
 8004cd0:	08004d43 	.word	0x08004d43
 8004cd4:	08004d43 	.word	0x08004d43
 8004cd8:	08004d43 	.word	0x08004d43
 8004cdc:	08004d43 	.word	0x08004d43
 8004ce0:	08004d15 	.word	0x08004d15
 8004ce4:	08004d43 	.word	0x08004d43
 8004ce8:	08004d07 	.word	0x08004d07
 8004cec:	08004d43 	.word	0x08004d43
 8004cf0:	08004d43 	.word	0x08004d43
 8004cf4:	08004d35 	.word	0x08004d35
			{
			  case 'c':
		  		  va_arg(va, int);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	3304      	adds	r3, #4
 8004cfc:	603b      	str	r3, [r7, #0]
				  ++length;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	3301      	adds	r3, #1
 8004d02:	60fb      	str	r3, [r7, #12]
				  break;
 8004d04:	e025      	b.n	8004d52 <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	330b      	adds	r3, #11
 8004d0a:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	3304      	adds	r3, #4
 8004d10:	603b      	str	r3, [r7, #0]
				  break;
 8004d12:	e01e      	b.n	8004d52 <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	1d1a      	adds	r2, r3, #4
 8004d18:	603a      	str	r2, [r7, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 8004d1e:	e002      	b.n	8004d26 <ts_formatlength+0xe2>
			  			  ++length;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	3301      	adds	r3, #1
 8004d24:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	60ba      	str	r2, [r7, #8]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1f6      	bne.n	8004d20 <ts_formatlength+0xdc>
			  	  }
				  break;
 8004d32:	e00e      	b.n	8004d52 <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	3308      	adds	r3, #8
 8004d38:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	3304      	adds	r3, #4
 8004d3e:	603b      	str	r3, [r7, #0]
				  break;
 8004d40:	e007      	b.n	8004d52 <ts_formatlength+0x10e>
			  default:
				  ++length;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	3301      	adds	r3, #1
 8004d46:	60fb      	str	r3, [r7, #12]
				  break;
 8004d48:	bf00      	nop
 8004d4a:	e002      	b.n	8004d52 <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	3301      	adds	r3, #1
 8004d56:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f47f af79 	bne.w	8004c54 <ts_formatlength+0x10>
	}
	return length;
 8004d62:	68fb      	ldr	r3, [r7, #12]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 8004d70:	b40f      	push	{r0, r1, r2, r3}
 8004d72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
	int length = 0;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 8004d7e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004d82:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8004d84:	6839      	ldr	r1, [r7, #0]
 8004d86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d88:	f7ff ff5c 	bl	8004c44 <ts_formatlength>
 8004d8c:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 8004d8e:	466b      	mov	r3, sp
 8004d90:	461e      	mov	r6, r3
		char buf[length];
 8004d92:	68f9      	ldr	r1, [r7, #12]
 8004d94:	1e4b      	subs	r3, r1, #1
 8004d96:	60bb      	str	r3, [r7, #8]
 8004d98:	460b      	mov	r3, r1
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f04f 0300 	mov.w	r3, #0
 8004da0:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8004da4:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8004da8:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8004dac:	460b      	mov	r3, r1
 8004dae:	461a      	mov	r2, r3
 8004db0:	f04f 0300 	mov.w	r3, #0
 8004db4:	00dd      	lsls	r5, r3, #3
 8004db6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004dba:	00d4      	lsls	r4, r2, #3
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	3307      	adds	r3, #7
 8004dc0:	08db      	lsrs	r3, r3, #3
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	ebad 0d03 	sub.w	sp, sp, r3
 8004dc8:	466b      	mov	r3, sp
 8004dca:	3300      	adds	r3, #0
 8004dcc:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8004dce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004dd2:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7ff fe9b 	bl	8004b16 <ts_formatstring>
 8004de0:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	4619      	mov	r1, r3
 8004de8:	2001      	movs	r0, #1
 8004dea:	f7ff fda2 	bl	8004932 <_write>
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 8004df2:	68fb      	ldr	r3, [r7, #12]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004dfe:	b004      	add	sp, #16
 8004e00:	4770      	bx	lr
	...

08004e04 <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
	int length = strlen(s);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f7fb f9db 	bl	80001c8 <strlen>
 8004e12:	4603      	mov	r3, r0
 8004e14:	613b      	str	r3, [r7, #16]
	int numbytes = 0;
 8004e16:	2300      	movs	r3, #0
 8004e18:	60fb      	str	r3, [r7, #12]
	int res;

	numbytes = _write(1, (char*)s, length);
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	6879      	ldr	r1, [r7, #4]
 8004e1e:	2001      	movs	r0, #1
 8004e20:	f7ff fd87 	bl	8004932 <_write>
 8004e24:	60f8      	str	r0, [r7, #12]
	numbytes += _write(1, "\n", 1);
 8004e26:	2201      	movs	r2, #1
 8004e28:	490b      	ldr	r1, [pc, #44]	; (8004e58 <puts+0x54>)
 8004e2a:	2001      	movs	r0, #1
 8004e2c:	f7ff fd81 	bl	8004932 <_write>
 8004e30:	4602      	mov	r2, r0
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	4413      	add	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]

	if (numbytes == (length+1))
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d102      	bne.n	8004e48 <puts+0x44>
	{
		res = 0;
 8004e42:	2300      	movs	r3, #0
 8004e44:	617b      	str	r3, [r7, #20]
 8004e46:	e002      	b.n	8004e4e <puts+0x4a>
	}
	else
	{
		res = EOF;
 8004e48:	f04f 33ff 	mov.w	r3, #4294967295
 8004e4c:	617b      	str	r3, [r7, #20]
	}

	return res;
 8004e4e:	697b      	ldr	r3, [r7, #20]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3718      	adds	r7, #24
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	08005fe0 	.word	0x08005fe0

08004e5c <__errno>:
 8004e5c:	4b01      	ldr	r3, [pc, #4]	; (8004e64 <__errno+0x8>)
 8004e5e:	6818      	ldr	r0, [r3, #0]
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	2000000c 	.word	0x2000000c

08004e68 <__libc_init_array>:
 8004e68:	b570      	push	{r4, r5, r6, lr}
 8004e6a:	4e0d      	ldr	r6, [pc, #52]	; (8004ea0 <__libc_init_array+0x38>)
 8004e6c:	4c0d      	ldr	r4, [pc, #52]	; (8004ea4 <__libc_init_array+0x3c>)
 8004e6e:	1ba4      	subs	r4, r4, r6
 8004e70:	10a4      	asrs	r4, r4, #2
 8004e72:	2500      	movs	r5, #0
 8004e74:	42a5      	cmp	r5, r4
 8004e76:	d109      	bne.n	8004e8c <__libc_init_array+0x24>
 8004e78:	4e0b      	ldr	r6, [pc, #44]	; (8004ea8 <__libc_init_array+0x40>)
 8004e7a:	4c0c      	ldr	r4, [pc, #48]	; (8004eac <__libc_init_array+0x44>)
 8004e7c:	f000 ff34 	bl	8005ce8 <_init>
 8004e80:	1ba4      	subs	r4, r4, r6
 8004e82:	10a4      	asrs	r4, r4, #2
 8004e84:	2500      	movs	r5, #0
 8004e86:	42a5      	cmp	r5, r4
 8004e88:	d105      	bne.n	8004e96 <__libc_init_array+0x2e>
 8004e8a:	bd70      	pop	{r4, r5, r6, pc}
 8004e8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e90:	4798      	blx	r3
 8004e92:	3501      	adds	r5, #1
 8004e94:	e7ee      	b.n	8004e74 <__libc_init_array+0xc>
 8004e96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e9a:	4798      	blx	r3
 8004e9c:	3501      	adds	r5, #1
 8004e9e:	e7f2      	b.n	8004e86 <__libc_init_array+0x1e>
 8004ea0:	08006098 	.word	0x08006098
 8004ea4:	08006098 	.word	0x08006098
 8004ea8:	08006098 	.word	0x08006098
 8004eac:	0800609c 	.word	0x0800609c

08004eb0 <memset>:
 8004eb0:	4402      	add	r2, r0
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d100      	bne.n	8004eba <memset+0xa>
 8004eb8:	4770      	bx	lr
 8004eba:	f803 1b01 	strb.w	r1, [r3], #1
 8004ebe:	e7f9      	b.n	8004eb4 <memset+0x4>

08004ec0 <setbuf>:
 8004ec0:	2900      	cmp	r1, #0
 8004ec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ec6:	bf0c      	ite	eq
 8004ec8:	2202      	moveq	r2, #2
 8004eca:	2200      	movne	r2, #0
 8004ecc:	f000 b800 	b.w	8004ed0 <setvbuf>

08004ed0 <setvbuf>:
 8004ed0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004ed4:	461d      	mov	r5, r3
 8004ed6:	4b60      	ldr	r3, [pc, #384]	; (8005058 <setvbuf+0x188>)
 8004ed8:	681e      	ldr	r6, [r3, #0]
 8004eda:	4604      	mov	r4, r0
 8004edc:	460f      	mov	r7, r1
 8004ede:	4690      	mov	r8, r2
 8004ee0:	b126      	cbz	r6, 8004eec <setvbuf+0x1c>
 8004ee2:	69b3      	ldr	r3, [r6, #24]
 8004ee4:	b913      	cbnz	r3, 8004eec <setvbuf+0x1c>
 8004ee6:	4630      	mov	r0, r6
 8004ee8:	f000 f9e4 	bl	80052b4 <__sinit>
 8004eec:	4b5b      	ldr	r3, [pc, #364]	; (800505c <setvbuf+0x18c>)
 8004eee:	429c      	cmp	r4, r3
 8004ef0:	d166      	bne.n	8004fc0 <setvbuf+0xf0>
 8004ef2:	6874      	ldr	r4, [r6, #4]
 8004ef4:	f1b8 0f02 	cmp.w	r8, #2
 8004ef8:	d006      	beq.n	8004f08 <setvbuf+0x38>
 8004efa:	f1b8 0f01 	cmp.w	r8, #1
 8004efe:	f200 80a7 	bhi.w	8005050 <setvbuf+0x180>
 8004f02:	2d00      	cmp	r5, #0
 8004f04:	f2c0 80a4 	blt.w	8005050 <setvbuf+0x180>
 8004f08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f0a:	07da      	lsls	r2, r3, #31
 8004f0c:	d405      	bmi.n	8004f1a <setvbuf+0x4a>
 8004f0e:	89a3      	ldrh	r3, [r4, #12]
 8004f10:	059b      	lsls	r3, r3, #22
 8004f12:	d402      	bmi.n	8004f1a <setvbuf+0x4a>
 8004f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f16:	f000 fb7f 	bl	8005618 <__retarget_lock_acquire_recursive>
 8004f1a:	4621      	mov	r1, r4
 8004f1c:	4630      	mov	r0, r6
 8004f1e:	f000 f935 	bl	800518c <_fflush_r>
 8004f22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f24:	b141      	cbz	r1, 8004f38 <setvbuf+0x68>
 8004f26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f2a:	4299      	cmp	r1, r3
 8004f2c:	d002      	beq.n	8004f34 <setvbuf+0x64>
 8004f2e:	4630      	mov	r0, r6
 8004f30:	f000 fa96 	bl	8005460 <_free_r>
 8004f34:	2300      	movs	r3, #0
 8004f36:	6363      	str	r3, [r4, #52]	; 0x34
 8004f38:	2300      	movs	r3, #0
 8004f3a:	61a3      	str	r3, [r4, #24]
 8004f3c:	6063      	str	r3, [r4, #4]
 8004f3e:	89a3      	ldrh	r3, [r4, #12]
 8004f40:	0618      	lsls	r0, r3, #24
 8004f42:	d503      	bpl.n	8004f4c <setvbuf+0x7c>
 8004f44:	6921      	ldr	r1, [r4, #16]
 8004f46:	4630      	mov	r0, r6
 8004f48:	f000 fa8a 	bl	8005460 <_free_r>
 8004f4c:	89a3      	ldrh	r3, [r4, #12]
 8004f4e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004f52:	f023 0303 	bic.w	r3, r3, #3
 8004f56:	f1b8 0f02 	cmp.w	r8, #2
 8004f5a:	81a3      	strh	r3, [r4, #12]
 8004f5c:	d072      	beq.n	8005044 <setvbuf+0x174>
 8004f5e:	ab01      	add	r3, sp, #4
 8004f60:	466a      	mov	r2, sp
 8004f62:	4621      	mov	r1, r4
 8004f64:	4630      	mov	r0, r6
 8004f66:	f000 fb59 	bl	800561c <__swhatbuf_r>
 8004f6a:	89a3      	ldrh	r3, [r4, #12]
 8004f6c:	4318      	orrs	r0, r3
 8004f6e:	81a0      	strh	r0, [r4, #12]
 8004f70:	2d00      	cmp	r5, #0
 8004f72:	d12f      	bne.n	8004fd4 <setvbuf+0x104>
 8004f74:	9d00      	ldr	r5, [sp, #0]
 8004f76:	4628      	mov	r0, r5
 8004f78:	f000 fb7c 	bl	8005674 <malloc>
 8004f7c:	4607      	mov	r7, r0
 8004f7e:	2800      	cmp	r0, #0
 8004f80:	d162      	bne.n	8005048 <setvbuf+0x178>
 8004f82:	f8dd 9000 	ldr.w	r9, [sp]
 8004f86:	45a9      	cmp	r9, r5
 8004f88:	d150      	bne.n	800502c <setvbuf+0x15c>
 8004f8a:	f04f 35ff 	mov.w	r5, #4294967295
 8004f8e:	2200      	movs	r2, #0
 8004f90:	60a2      	str	r2, [r4, #8]
 8004f92:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004f96:	6022      	str	r2, [r4, #0]
 8004f98:	6122      	str	r2, [r4, #16]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fa0:	6162      	str	r2, [r4, #20]
 8004fa2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004fa4:	f043 0302 	orr.w	r3, r3, #2
 8004fa8:	07d1      	lsls	r1, r2, #31
 8004faa:	81a3      	strh	r3, [r4, #12]
 8004fac:	d404      	bmi.n	8004fb8 <setvbuf+0xe8>
 8004fae:	059b      	lsls	r3, r3, #22
 8004fb0:	d402      	bmi.n	8004fb8 <setvbuf+0xe8>
 8004fb2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fb4:	f000 fb31 	bl	800561a <__retarget_lock_release_recursive>
 8004fb8:	4628      	mov	r0, r5
 8004fba:	b003      	add	sp, #12
 8004fbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004fc0:	4b27      	ldr	r3, [pc, #156]	; (8005060 <setvbuf+0x190>)
 8004fc2:	429c      	cmp	r4, r3
 8004fc4:	d101      	bne.n	8004fca <setvbuf+0xfa>
 8004fc6:	68b4      	ldr	r4, [r6, #8]
 8004fc8:	e794      	b.n	8004ef4 <setvbuf+0x24>
 8004fca:	4b26      	ldr	r3, [pc, #152]	; (8005064 <setvbuf+0x194>)
 8004fcc:	429c      	cmp	r4, r3
 8004fce:	bf08      	it	eq
 8004fd0:	68f4      	ldreq	r4, [r6, #12]
 8004fd2:	e78f      	b.n	8004ef4 <setvbuf+0x24>
 8004fd4:	2f00      	cmp	r7, #0
 8004fd6:	d0ce      	beq.n	8004f76 <setvbuf+0xa6>
 8004fd8:	69b3      	ldr	r3, [r6, #24]
 8004fda:	b913      	cbnz	r3, 8004fe2 <setvbuf+0x112>
 8004fdc:	4630      	mov	r0, r6
 8004fde:	f000 f969 	bl	80052b4 <__sinit>
 8004fe2:	9b00      	ldr	r3, [sp, #0]
 8004fe4:	6127      	str	r7, [r4, #16]
 8004fe6:	429d      	cmp	r5, r3
 8004fe8:	bf18      	it	ne
 8004fea:	89a3      	ldrhne	r3, [r4, #12]
 8004fec:	6027      	str	r7, [r4, #0]
 8004fee:	bf1c      	itt	ne
 8004ff0:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
 8004ff4:	81a3      	strhne	r3, [r4, #12]
 8004ff6:	f1b8 0f01 	cmp.w	r8, #1
 8004ffa:	bf08      	it	eq
 8004ffc:	89a3      	ldrheq	r3, [r4, #12]
 8004ffe:	6165      	str	r5, [r4, #20]
 8005000:	bf04      	itt	eq
 8005002:	f043 0301 	orreq.w	r3, r3, #1
 8005006:	81a3      	strheq	r3, [r4, #12]
 8005008:	89a3      	ldrh	r3, [r4, #12]
 800500a:	f013 0208 	ands.w	r2, r3, #8
 800500e:	d01d      	beq.n	800504c <setvbuf+0x17c>
 8005010:	07da      	lsls	r2, r3, #31
 8005012:	bf41      	itttt	mi
 8005014:	2200      	movmi	r2, #0
 8005016:	426d      	negmi	r5, r5
 8005018:	60a2      	strmi	r2, [r4, #8]
 800501a:	61a5      	strmi	r5, [r4, #24]
 800501c:	bf58      	it	pl
 800501e:	60a5      	strpl	r5, [r4, #8]
 8005020:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005022:	f015 0501 	ands.w	r5, r5, #1
 8005026:	d0c2      	beq.n	8004fae <setvbuf+0xde>
 8005028:	2500      	movs	r5, #0
 800502a:	e7c5      	b.n	8004fb8 <setvbuf+0xe8>
 800502c:	4648      	mov	r0, r9
 800502e:	f000 fb21 	bl	8005674 <malloc>
 8005032:	4607      	mov	r7, r0
 8005034:	2800      	cmp	r0, #0
 8005036:	d0a8      	beq.n	8004f8a <setvbuf+0xba>
 8005038:	89a3      	ldrh	r3, [r4, #12]
 800503a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800503e:	81a3      	strh	r3, [r4, #12]
 8005040:	464d      	mov	r5, r9
 8005042:	e7c9      	b.n	8004fd8 <setvbuf+0x108>
 8005044:	2500      	movs	r5, #0
 8005046:	e7a2      	b.n	8004f8e <setvbuf+0xbe>
 8005048:	46a9      	mov	r9, r5
 800504a:	e7f5      	b.n	8005038 <setvbuf+0x168>
 800504c:	60a2      	str	r2, [r4, #8]
 800504e:	e7e7      	b.n	8005020 <setvbuf+0x150>
 8005050:	f04f 35ff 	mov.w	r5, #4294967295
 8005054:	e7b0      	b.n	8004fb8 <setvbuf+0xe8>
 8005056:	bf00      	nop
 8005058:	2000000c 	.word	0x2000000c
 800505c:	08006050 	.word	0x08006050
 8005060:	08006070 	.word	0x08006070
 8005064:	08006030 	.word	0x08006030

08005068 <__sflush_r>:
 8005068:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800506c:	b293      	uxth	r3, r2
 800506e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005072:	4605      	mov	r5, r0
 8005074:	0718      	lsls	r0, r3, #28
 8005076:	460c      	mov	r4, r1
 8005078:	d461      	bmi.n	800513e <__sflush_r+0xd6>
 800507a:	684b      	ldr	r3, [r1, #4]
 800507c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005080:	2b00      	cmp	r3, #0
 8005082:	818a      	strh	r2, [r1, #12]
 8005084:	dc05      	bgt.n	8005092 <__sflush_r+0x2a>
 8005086:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005088:	2b00      	cmp	r3, #0
 800508a:	dc02      	bgt.n	8005092 <__sflush_r+0x2a>
 800508c:	2000      	movs	r0, #0
 800508e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005092:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005094:	2e00      	cmp	r6, #0
 8005096:	d0f9      	beq.n	800508c <__sflush_r+0x24>
 8005098:	2300      	movs	r3, #0
 800509a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800509e:	682f      	ldr	r7, [r5, #0]
 80050a0:	602b      	str	r3, [r5, #0]
 80050a2:	d037      	beq.n	8005114 <__sflush_r+0xac>
 80050a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80050a6:	89a3      	ldrh	r3, [r4, #12]
 80050a8:	075a      	lsls	r2, r3, #29
 80050aa:	d505      	bpl.n	80050b8 <__sflush_r+0x50>
 80050ac:	6863      	ldr	r3, [r4, #4]
 80050ae:	1ac0      	subs	r0, r0, r3
 80050b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80050b2:	b10b      	cbz	r3, 80050b8 <__sflush_r+0x50>
 80050b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050b6:	1ac0      	subs	r0, r0, r3
 80050b8:	2300      	movs	r3, #0
 80050ba:	4602      	mov	r2, r0
 80050bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050be:	6a21      	ldr	r1, [r4, #32]
 80050c0:	4628      	mov	r0, r5
 80050c2:	47b0      	blx	r6
 80050c4:	1c43      	adds	r3, r0, #1
 80050c6:	89a3      	ldrh	r3, [r4, #12]
 80050c8:	d106      	bne.n	80050d8 <__sflush_r+0x70>
 80050ca:	6829      	ldr	r1, [r5, #0]
 80050cc:	291d      	cmp	r1, #29
 80050ce:	d84f      	bhi.n	8005170 <__sflush_r+0x108>
 80050d0:	4a2d      	ldr	r2, [pc, #180]	; (8005188 <__sflush_r+0x120>)
 80050d2:	40ca      	lsrs	r2, r1
 80050d4:	07d6      	lsls	r6, r2, #31
 80050d6:	d54b      	bpl.n	8005170 <__sflush_r+0x108>
 80050d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050dc:	b21b      	sxth	r3, r3
 80050de:	2200      	movs	r2, #0
 80050e0:	6062      	str	r2, [r4, #4]
 80050e2:	04d9      	lsls	r1, r3, #19
 80050e4:	6922      	ldr	r2, [r4, #16]
 80050e6:	81a3      	strh	r3, [r4, #12]
 80050e8:	6022      	str	r2, [r4, #0]
 80050ea:	d504      	bpl.n	80050f6 <__sflush_r+0x8e>
 80050ec:	1c42      	adds	r2, r0, #1
 80050ee:	d101      	bne.n	80050f4 <__sflush_r+0x8c>
 80050f0:	682b      	ldr	r3, [r5, #0]
 80050f2:	b903      	cbnz	r3, 80050f6 <__sflush_r+0x8e>
 80050f4:	6560      	str	r0, [r4, #84]	; 0x54
 80050f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050f8:	602f      	str	r7, [r5, #0]
 80050fa:	2900      	cmp	r1, #0
 80050fc:	d0c6      	beq.n	800508c <__sflush_r+0x24>
 80050fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005102:	4299      	cmp	r1, r3
 8005104:	d002      	beq.n	800510c <__sflush_r+0xa4>
 8005106:	4628      	mov	r0, r5
 8005108:	f000 f9aa 	bl	8005460 <_free_r>
 800510c:	2000      	movs	r0, #0
 800510e:	6360      	str	r0, [r4, #52]	; 0x34
 8005110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005114:	6a21      	ldr	r1, [r4, #32]
 8005116:	2301      	movs	r3, #1
 8005118:	4628      	mov	r0, r5
 800511a:	47b0      	blx	r6
 800511c:	1c41      	adds	r1, r0, #1
 800511e:	d1c2      	bne.n	80050a6 <__sflush_r+0x3e>
 8005120:	682b      	ldr	r3, [r5, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d0bf      	beq.n	80050a6 <__sflush_r+0x3e>
 8005126:	2b1d      	cmp	r3, #29
 8005128:	d001      	beq.n	800512e <__sflush_r+0xc6>
 800512a:	2b16      	cmp	r3, #22
 800512c:	d101      	bne.n	8005132 <__sflush_r+0xca>
 800512e:	602f      	str	r7, [r5, #0]
 8005130:	e7ac      	b.n	800508c <__sflush_r+0x24>
 8005132:	89a3      	ldrh	r3, [r4, #12]
 8005134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005138:	81a3      	strh	r3, [r4, #12]
 800513a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800513e:	690f      	ldr	r7, [r1, #16]
 8005140:	2f00      	cmp	r7, #0
 8005142:	d0a3      	beq.n	800508c <__sflush_r+0x24>
 8005144:	079b      	lsls	r3, r3, #30
 8005146:	680e      	ldr	r6, [r1, #0]
 8005148:	bf08      	it	eq
 800514a:	694b      	ldreq	r3, [r1, #20]
 800514c:	600f      	str	r7, [r1, #0]
 800514e:	bf18      	it	ne
 8005150:	2300      	movne	r3, #0
 8005152:	eba6 0807 	sub.w	r8, r6, r7
 8005156:	608b      	str	r3, [r1, #8]
 8005158:	f1b8 0f00 	cmp.w	r8, #0
 800515c:	dd96      	ble.n	800508c <__sflush_r+0x24>
 800515e:	4643      	mov	r3, r8
 8005160:	463a      	mov	r2, r7
 8005162:	6a21      	ldr	r1, [r4, #32]
 8005164:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005166:	4628      	mov	r0, r5
 8005168:	47b0      	blx	r6
 800516a:	2800      	cmp	r0, #0
 800516c:	dc07      	bgt.n	800517e <__sflush_r+0x116>
 800516e:	89a3      	ldrh	r3, [r4, #12]
 8005170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005174:	81a3      	strh	r3, [r4, #12]
 8005176:	f04f 30ff 	mov.w	r0, #4294967295
 800517a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800517e:	4407      	add	r7, r0
 8005180:	eba8 0800 	sub.w	r8, r8, r0
 8005184:	e7e8      	b.n	8005158 <__sflush_r+0xf0>
 8005186:	bf00      	nop
 8005188:	20400001 	.word	0x20400001

0800518c <_fflush_r>:
 800518c:	b538      	push	{r3, r4, r5, lr}
 800518e:	690b      	ldr	r3, [r1, #16]
 8005190:	4605      	mov	r5, r0
 8005192:	460c      	mov	r4, r1
 8005194:	b913      	cbnz	r3, 800519c <_fflush_r+0x10>
 8005196:	2500      	movs	r5, #0
 8005198:	4628      	mov	r0, r5
 800519a:	bd38      	pop	{r3, r4, r5, pc}
 800519c:	b118      	cbz	r0, 80051a6 <_fflush_r+0x1a>
 800519e:	6983      	ldr	r3, [r0, #24]
 80051a0:	b90b      	cbnz	r3, 80051a6 <_fflush_r+0x1a>
 80051a2:	f000 f887 	bl	80052b4 <__sinit>
 80051a6:	4b14      	ldr	r3, [pc, #80]	; (80051f8 <_fflush_r+0x6c>)
 80051a8:	429c      	cmp	r4, r3
 80051aa:	d11b      	bne.n	80051e4 <_fflush_r+0x58>
 80051ac:	686c      	ldr	r4, [r5, #4]
 80051ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d0ef      	beq.n	8005196 <_fflush_r+0xa>
 80051b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80051b8:	07d0      	lsls	r0, r2, #31
 80051ba:	d404      	bmi.n	80051c6 <_fflush_r+0x3a>
 80051bc:	0599      	lsls	r1, r3, #22
 80051be:	d402      	bmi.n	80051c6 <_fflush_r+0x3a>
 80051c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051c2:	f000 fa29 	bl	8005618 <__retarget_lock_acquire_recursive>
 80051c6:	4628      	mov	r0, r5
 80051c8:	4621      	mov	r1, r4
 80051ca:	f7ff ff4d 	bl	8005068 <__sflush_r>
 80051ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051d0:	07da      	lsls	r2, r3, #31
 80051d2:	4605      	mov	r5, r0
 80051d4:	d4e0      	bmi.n	8005198 <_fflush_r+0xc>
 80051d6:	89a3      	ldrh	r3, [r4, #12]
 80051d8:	059b      	lsls	r3, r3, #22
 80051da:	d4dd      	bmi.n	8005198 <_fflush_r+0xc>
 80051dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051de:	f000 fa1c 	bl	800561a <__retarget_lock_release_recursive>
 80051e2:	e7d9      	b.n	8005198 <_fflush_r+0xc>
 80051e4:	4b05      	ldr	r3, [pc, #20]	; (80051fc <_fflush_r+0x70>)
 80051e6:	429c      	cmp	r4, r3
 80051e8:	d101      	bne.n	80051ee <_fflush_r+0x62>
 80051ea:	68ac      	ldr	r4, [r5, #8]
 80051ec:	e7df      	b.n	80051ae <_fflush_r+0x22>
 80051ee:	4b04      	ldr	r3, [pc, #16]	; (8005200 <_fflush_r+0x74>)
 80051f0:	429c      	cmp	r4, r3
 80051f2:	bf08      	it	eq
 80051f4:	68ec      	ldreq	r4, [r5, #12]
 80051f6:	e7da      	b.n	80051ae <_fflush_r+0x22>
 80051f8:	08006050 	.word	0x08006050
 80051fc:	08006070 	.word	0x08006070
 8005200:	08006030 	.word	0x08006030

08005204 <_cleanup_r>:
 8005204:	4901      	ldr	r1, [pc, #4]	; (800520c <_cleanup_r+0x8>)
 8005206:	f000 b9e7 	b.w	80055d8 <_fwalk_reent>
 800520a:	bf00      	nop
 800520c:	08005ba5 	.word	0x08005ba5

08005210 <std.isra.0>:
 8005210:	2300      	movs	r3, #0
 8005212:	b510      	push	{r4, lr}
 8005214:	4604      	mov	r4, r0
 8005216:	6003      	str	r3, [r0, #0]
 8005218:	6043      	str	r3, [r0, #4]
 800521a:	6083      	str	r3, [r0, #8]
 800521c:	8181      	strh	r1, [r0, #12]
 800521e:	6643      	str	r3, [r0, #100]	; 0x64
 8005220:	81c2      	strh	r2, [r0, #14]
 8005222:	6103      	str	r3, [r0, #16]
 8005224:	6143      	str	r3, [r0, #20]
 8005226:	6183      	str	r3, [r0, #24]
 8005228:	4619      	mov	r1, r3
 800522a:	2208      	movs	r2, #8
 800522c:	305c      	adds	r0, #92	; 0x5c
 800522e:	f7ff fe3f 	bl	8004eb0 <memset>
 8005232:	4b05      	ldr	r3, [pc, #20]	; (8005248 <std.isra.0+0x38>)
 8005234:	6263      	str	r3, [r4, #36]	; 0x24
 8005236:	4b05      	ldr	r3, [pc, #20]	; (800524c <std.isra.0+0x3c>)
 8005238:	62a3      	str	r3, [r4, #40]	; 0x28
 800523a:	4b05      	ldr	r3, [pc, #20]	; (8005250 <std.isra.0+0x40>)
 800523c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800523e:	4b05      	ldr	r3, [pc, #20]	; (8005254 <std.isra.0+0x44>)
 8005240:	6224      	str	r4, [r4, #32]
 8005242:	6323      	str	r3, [r4, #48]	; 0x30
 8005244:	bd10      	pop	{r4, pc}
 8005246:	bf00      	nop
 8005248:	08005ad9 	.word	0x08005ad9
 800524c:	08005afb 	.word	0x08005afb
 8005250:	08005b33 	.word	0x08005b33
 8005254:	08005b57 	.word	0x08005b57

08005258 <__sfmoreglue>:
 8005258:	b570      	push	{r4, r5, r6, lr}
 800525a:	1e4a      	subs	r2, r1, #1
 800525c:	2568      	movs	r5, #104	; 0x68
 800525e:	4355      	muls	r5, r2
 8005260:	460e      	mov	r6, r1
 8005262:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005266:	f000 fa0d 	bl	8005684 <_malloc_r>
 800526a:	4604      	mov	r4, r0
 800526c:	b140      	cbz	r0, 8005280 <__sfmoreglue+0x28>
 800526e:	2100      	movs	r1, #0
 8005270:	e880 0042 	stmia.w	r0, {r1, r6}
 8005274:	300c      	adds	r0, #12
 8005276:	60a0      	str	r0, [r4, #8]
 8005278:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800527c:	f7ff fe18 	bl	8004eb0 <memset>
 8005280:	4620      	mov	r0, r4
 8005282:	bd70      	pop	{r4, r5, r6, pc}

08005284 <__sfp_lock_acquire>:
 8005284:	4801      	ldr	r0, [pc, #4]	; (800528c <__sfp_lock_acquire+0x8>)
 8005286:	f000 b9c7 	b.w	8005618 <__retarget_lock_acquire_recursive>
 800528a:	bf00      	nop
 800528c:	20000678 	.word	0x20000678

08005290 <__sfp_lock_release>:
 8005290:	4801      	ldr	r0, [pc, #4]	; (8005298 <__sfp_lock_release+0x8>)
 8005292:	f000 b9c2 	b.w	800561a <__retarget_lock_release_recursive>
 8005296:	bf00      	nop
 8005298:	20000678 	.word	0x20000678

0800529c <__sinit_lock_acquire>:
 800529c:	4801      	ldr	r0, [pc, #4]	; (80052a4 <__sinit_lock_acquire+0x8>)
 800529e:	f000 b9bb 	b.w	8005618 <__retarget_lock_acquire_recursive>
 80052a2:	bf00      	nop
 80052a4:	20000673 	.word	0x20000673

080052a8 <__sinit_lock_release>:
 80052a8:	4801      	ldr	r0, [pc, #4]	; (80052b0 <__sinit_lock_release+0x8>)
 80052aa:	f000 b9b6 	b.w	800561a <__retarget_lock_release_recursive>
 80052ae:	bf00      	nop
 80052b0:	20000673 	.word	0x20000673

080052b4 <__sinit>:
 80052b4:	b510      	push	{r4, lr}
 80052b6:	4604      	mov	r4, r0
 80052b8:	f7ff fff0 	bl	800529c <__sinit_lock_acquire>
 80052bc:	69a3      	ldr	r3, [r4, #24]
 80052be:	b11b      	cbz	r3, 80052c8 <__sinit+0x14>
 80052c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052c4:	f7ff bff0 	b.w	80052a8 <__sinit_lock_release>
 80052c8:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 80052cc:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 80052d0:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80052d4:	4b12      	ldr	r3, [pc, #72]	; (8005320 <__sinit+0x6c>)
 80052d6:	4a13      	ldr	r2, [pc, #76]	; (8005324 <__sinit+0x70>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	62a2      	str	r2, [r4, #40]	; 0x28
 80052dc:	429c      	cmp	r4, r3
 80052de:	bf04      	itt	eq
 80052e0:	2301      	moveq	r3, #1
 80052e2:	61a3      	streq	r3, [r4, #24]
 80052e4:	4620      	mov	r0, r4
 80052e6:	f000 f81f 	bl	8005328 <__sfp>
 80052ea:	6060      	str	r0, [r4, #4]
 80052ec:	4620      	mov	r0, r4
 80052ee:	f000 f81b 	bl	8005328 <__sfp>
 80052f2:	60a0      	str	r0, [r4, #8]
 80052f4:	4620      	mov	r0, r4
 80052f6:	f000 f817 	bl	8005328 <__sfp>
 80052fa:	2200      	movs	r2, #0
 80052fc:	60e0      	str	r0, [r4, #12]
 80052fe:	2104      	movs	r1, #4
 8005300:	6860      	ldr	r0, [r4, #4]
 8005302:	f7ff ff85 	bl	8005210 <std.isra.0>
 8005306:	2201      	movs	r2, #1
 8005308:	2109      	movs	r1, #9
 800530a:	68a0      	ldr	r0, [r4, #8]
 800530c:	f7ff ff80 	bl	8005210 <std.isra.0>
 8005310:	2202      	movs	r2, #2
 8005312:	2112      	movs	r1, #18
 8005314:	68e0      	ldr	r0, [r4, #12]
 8005316:	f7ff ff7b 	bl	8005210 <std.isra.0>
 800531a:	2301      	movs	r3, #1
 800531c:	61a3      	str	r3, [r4, #24]
 800531e:	e7cf      	b.n	80052c0 <__sinit+0xc>
 8005320:	0800602c 	.word	0x0800602c
 8005324:	08005205 	.word	0x08005205

08005328 <__sfp>:
 8005328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800532a:	4607      	mov	r7, r0
 800532c:	f7ff ffaa 	bl	8005284 <__sfp_lock_acquire>
 8005330:	4b1f      	ldr	r3, [pc, #124]	; (80053b0 <__sfp+0x88>)
 8005332:	681e      	ldr	r6, [r3, #0]
 8005334:	69b3      	ldr	r3, [r6, #24]
 8005336:	b913      	cbnz	r3, 800533e <__sfp+0x16>
 8005338:	4630      	mov	r0, r6
 800533a:	f7ff ffbb 	bl	80052b4 <__sinit>
 800533e:	36d8      	adds	r6, #216	; 0xd8
 8005340:	68b4      	ldr	r4, [r6, #8]
 8005342:	6873      	ldr	r3, [r6, #4]
 8005344:	3b01      	subs	r3, #1
 8005346:	d503      	bpl.n	8005350 <__sfp+0x28>
 8005348:	6833      	ldr	r3, [r6, #0]
 800534a:	b133      	cbz	r3, 800535a <__sfp+0x32>
 800534c:	6836      	ldr	r6, [r6, #0]
 800534e:	e7f7      	b.n	8005340 <__sfp+0x18>
 8005350:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005354:	b17d      	cbz	r5, 8005376 <__sfp+0x4e>
 8005356:	3468      	adds	r4, #104	; 0x68
 8005358:	e7f4      	b.n	8005344 <__sfp+0x1c>
 800535a:	2104      	movs	r1, #4
 800535c:	4638      	mov	r0, r7
 800535e:	f7ff ff7b 	bl	8005258 <__sfmoreglue>
 8005362:	4604      	mov	r4, r0
 8005364:	6030      	str	r0, [r6, #0]
 8005366:	2800      	cmp	r0, #0
 8005368:	d1f0      	bne.n	800534c <__sfp+0x24>
 800536a:	f7ff ff91 	bl	8005290 <__sfp_lock_release>
 800536e:	230c      	movs	r3, #12
 8005370:	603b      	str	r3, [r7, #0]
 8005372:	4620      	mov	r0, r4
 8005374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005376:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800537a:	81e3      	strh	r3, [r4, #14]
 800537c:	2301      	movs	r3, #1
 800537e:	81a3      	strh	r3, [r4, #12]
 8005380:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005384:	6665      	str	r5, [r4, #100]	; 0x64
 8005386:	f000 f945 	bl	8005614 <__retarget_lock_init_recursive>
 800538a:	f7ff ff81 	bl	8005290 <__sfp_lock_release>
 800538e:	6025      	str	r5, [r4, #0]
 8005390:	60a5      	str	r5, [r4, #8]
 8005392:	6065      	str	r5, [r4, #4]
 8005394:	6125      	str	r5, [r4, #16]
 8005396:	6165      	str	r5, [r4, #20]
 8005398:	61a5      	str	r5, [r4, #24]
 800539a:	2208      	movs	r2, #8
 800539c:	4629      	mov	r1, r5
 800539e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80053a2:	f7ff fd85 	bl	8004eb0 <memset>
 80053a6:	6365      	str	r5, [r4, #52]	; 0x34
 80053a8:	63a5      	str	r5, [r4, #56]	; 0x38
 80053aa:	64a5      	str	r5, [r4, #72]	; 0x48
 80053ac:	64e5      	str	r5, [r4, #76]	; 0x4c
 80053ae:	e7e0      	b.n	8005372 <__sfp+0x4a>
 80053b0:	0800602c 	.word	0x0800602c

080053b4 <_malloc_trim_r>:
 80053b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053b8:	4f25      	ldr	r7, [pc, #148]	; (8005450 <_malloc_trim_r+0x9c>)
 80053ba:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800545c <_malloc_trim_r+0xa8>
 80053be:	4689      	mov	r9, r1
 80053c0:	4606      	mov	r6, r0
 80053c2:	f000 fb6d 	bl	8005aa0 <__malloc_lock>
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	685d      	ldr	r5, [r3, #4]
 80053ca:	f1a8 0411 	sub.w	r4, r8, #17
 80053ce:	f025 0503 	bic.w	r5, r5, #3
 80053d2:	eba4 0409 	sub.w	r4, r4, r9
 80053d6:	442c      	add	r4, r5
 80053d8:	fbb4 f4f8 	udiv	r4, r4, r8
 80053dc:	3c01      	subs	r4, #1
 80053de:	fb08 f404 	mul.w	r4, r8, r4
 80053e2:	4544      	cmp	r4, r8
 80053e4:	da05      	bge.n	80053f2 <_malloc_trim_r+0x3e>
 80053e6:	4630      	mov	r0, r6
 80053e8:	f000 fb60 	bl	8005aac <__malloc_unlock>
 80053ec:	2000      	movs	r0, #0
 80053ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053f2:	2100      	movs	r1, #0
 80053f4:	4630      	mov	r0, r6
 80053f6:	f000 fb5f 	bl	8005ab8 <_sbrk_r>
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	442b      	add	r3, r5
 80053fe:	4298      	cmp	r0, r3
 8005400:	d1f1      	bne.n	80053e6 <_malloc_trim_r+0x32>
 8005402:	4261      	negs	r1, r4
 8005404:	4630      	mov	r0, r6
 8005406:	f000 fb57 	bl	8005ab8 <_sbrk_r>
 800540a:	3001      	adds	r0, #1
 800540c:	d110      	bne.n	8005430 <_malloc_trim_r+0x7c>
 800540e:	2100      	movs	r1, #0
 8005410:	4630      	mov	r0, r6
 8005412:	f000 fb51 	bl	8005ab8 <_sbrk_r>
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	1a83      	subs	r3, r0, r2
 800541a:	2b0f      	cmp	r3, #15
 800541c:	dde3      	ble.n	80053e6 <_malloc_trim_r+0x32>
 800541e:	490d      	ldr	r1, [pc, #52]	; (8005454 <_malloc_trim_r+0xa0>)
 8005420:	6809      	ldr	r1, [r1, #0]
 8005422:	1a40      	subs	r0, r0, r1
 8005424:	490c      	ldr	r1, [pc, #48]	; (8005458 <_malloc_trim_r+0xa4>)
 8005426:	f043 0301 	orr.w	r3, r3, #1
 800542a:	6008      	str	r0, [r1, #0]
 800542c:	6053      	str	r3, [r2, #4]
 800542e:	e7da      	b.n	80053e6 <_malloc_trim_r+0x32>
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	4a09      	ldr	r2, [pc, #36]	; (8005458 <_malloc_trim_r+0xa4>)
 8005434:	1b2d      	subs	r5, r5, r4
 8005436:	f045 0501 	orr.w	r5, r5, #1
 800543a:	605d      	str	r5, [r3, #4]
 800543c:	6813      	ldr	r3, [r2, #0]
 800543e:	4630      	mov	r0, r6
 8005440:	1b1c      	subs	r4, r3, r4
 8005442:	6014      	str	r4, [r2, #0]
 8005444:	f000 fb32 	bl	8005aac <__malloc_unlock>
 8005448:	2001      	movs	r0, #1
 800544a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800544e:	bf00      	nop
 8005450:	20000100 	.word	0x20000100
 8005454:	20000508 	.word	0x20000508
 8005458:	20000530 	.word	0x20000530
 800545c:	00000080 	.word	0x00000080

08005460 <_free_r>:
 8005460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005464:	4604      	mov	r4, r0
 8005466:	4688      	mov	r8, r1
 8005468:	2900      	cmp	r1, #0
 800546a:	f000 80ab 	beq.w	80055c4 <_free_r+0x164>
 800546e:	f000 fb17 	bl	8005aa0 <__malloc_lock>
 8005472:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8005476:	4d54      	ldr	r5, [pc, #336]	; (80055c8 <_free_r+0x168>)
 8005478:	f022 0001 	bic.w	r0, r2, #1
 800547c:	f1a8 0308 	sub.w	r3, r8, #8
 8005480:	181f      	adds	r7, r3, r0
 8005482:	68a9      	ldr	r1, [r5, #8]
 8005484:	687e      	ldr	r6, [r7, #4]
 8005486:	428f      	cmp	r7, r1
 8005488:	f026 0603 	bic.w	r6, r6, #3
 800548c:	f002 0201 	and.w	r2, r2, #1
 8005490:	d11b      	bne.n	80054ca <_free_r+0x6a>
 8005492:	4430      	add	r0, r6
 8005494:	b93a      	cbnz	r2, 80054a6 <_free_r+0x46>
 8005496:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800549a:	1a9b      	subs	r3, r3, r2
 800549c:	4410      	add	r0, r2
 800549e:	6899      	ldr	r1, [r3, #8]
 80054a0:	68da      	ldr	r2, [r3, #12]
 80054a2:	60ca      	str	r2, [r1, #12]
 80054a4:	6091      	str	r1, [r2, #8]
 80054a6:	f040 0201 	orr.w	r2, r0, #1
 80054aa:	605a      	str	r2, [r3, #4]
 80054ac:	60ab      	str	r3, [r5, #8]
 80054ae:	4b47      	ldr	r3, [pc, #284]	; (80055cc <_free_r+0x16c>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4298      	cmp	r0, r3
 80054b4:	d304      	bcc.n	80054c0 <_free_r+0x60>
 80054b6:	4b46      	ldr	r3, [pc, #280]	; (80055d0 <_free_r+0x170>)
 80054b8:	4620      	mov	r0, r4
 80054ba:	6819      	ldr	r1, [r3, #0]
 80054bc:	f7ff ff7a 	bl	80053b4 <_malloc_trim_r>
 80054c0:	4620      	mov	r0, r4
 80054c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054c6:	f000 baf1 	b.w	8005aac <__malloc_unlock>
 80054ca:	607e      	str	r6, [r7, #4]
 80054cc:	2a00      	cmp	r2, #0
 80054ce:	d139      	bne.n	8005544 <_free_r+0xe4>
 80054d0:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80054d4:	1a5b      	subs	r3, r3, r1
 80054d6:	4408      	add	r0, r1
 80054d8:	6899      	ldr	r1, [r3, #8]
 80054da:	f105 0e08 	add.w	lr, r5, #8
 80054de:	4571      	cmp	r1, lr
 80054e0:	d032      	beq.n	8005548 <_free_r+0xe8>
 80054e2:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80054e6:	f8c1 e00c 	str.w	lr, [r1, #12]
 80054ea:	f8ce 1008 	str.w	r1, [lr, #8]
 80054ee:	19b9      	adds	r1, r7, r6
 80054f0:	6849      	ldr	r1, [r1, #4]
 80054f2:	07c9      	lsls	r1, r1, #31
 80054f4:	d40a      	bmi.n	800550c <_free_r+0xac>
 80054f6:	4430      	add	r0, r6
 80054f8:	68b9      	ldr	r1, [r7, #8]
 80054fa:	bb3a      	cbnz	r2, 800554c <_free_r+0xec>
 80054fc:	4e35      	ldr	r6, [pc, #212]	; (80055d4 <_free_r+0x174>)
 80054fe:	42b1      	cmp	r1, r6
 8005500:	d124      	bne.n	800554c <_free_r+0xec>
 8005502:	616b      	str	r3, [r5, #20]
 8005504:	612b      	str	r3, [r5, #16]
 8005506:	2201      	movs	r2, #1
 8005508:	60d9      	str	r1, [r3, #12]
 800550a:	6099      	str	r1, [r3, #8]
 800550c:	f040 0101 	orr.w	r1, r0, #1
 8005510:	6059      	str	r1, [r3, #4]
 8005512:	5018      	str	r0, [r3, r0]
 8005514:	2a00      	cmp	r2, #0
 8005516:	d1d3      	bne.n	80054c0 <_free_r+0x60>
 8005518:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800551c:	d21a      	bcs.n	8005554 <_free_r+0xf4>
 800551e:	08c0      	lsrs	r0, r0, #3
 8005520:	1081      	asrs	r1, r0, #2
 8005522:	2201      	movs	r2, #1
 8005524:	408a      	lsls	r2, r1
 8005526:	6869      	ldr	r1, [r5, #4]
 8005528:	3001      	adds	r0, #1
 800552a:	430a      	orrs	r2, r1
 800552c:	606a      	str	r2, [r5, #4]
 800552e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8005532:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8005536:	6099      	str	r1, [r3, #8]
 8005538:	3a08      	subs	r2, #8
 800553a:	60da      	str	r2, [r3, #12]
 800553c:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8005540:	60cb      	str	r3, [r1, #12]
 8005542:	e7bd      	b.n	80054c0 <_free_r+0x60>
 8005544:	2200      	movs	r2, #0
 8005546:	e7d2      	b.n	80054ee <_free_r+0x8e>
 8005548:	2201      	movs	r2, #1
 800554a:	e7d0      	b.n	80054ee <_free_r+0x8e>
 800554c:	68fe      	ldr	r6, [r7, #12]
 800554e:	60ce      	str	r6, [r1, #12]
 8005550:	60b1      	str	r1, [r6, #8]
 8005552:	e7db      	b.n	800550c <_free_r+0xac>
 8005554:	0a42      	lsrs	r2, r0, #9
 8005556:	2a04      	cmp	r2, #4
 8005558:	d813      	bhi.n	8005582 <_free_r+0x122>
 800555a:	0982      	lsrs	r2, r0, #6
 800555c:	3238      	adds	r2, #56	; 0x38
 800555e:	1c51      	adds	r1, r2, #1
 8005560:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8005564:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8005568:	428e      	cmp	r6, r1
 800556a:	d124      	bne.n	80055b6 <_free_r+0x156>
 800556c:	2001      	movs	r0, #1
 800556e:	1092      	asrs	r2, r2, #2
 8005570:	fa00 f202 	lsl.w	r2, r0, r2
 8005574:	6868      	ldr	r0, [r5, #4]
 8005576:	4302      	orrs	r2, r0
 8005578:	606a      	str	r2, [r5, #4]
 800557a:	60de      	str	r6, [r3, #12]
 800557c:	6099      	str	r1, [r3, #8]
 800557e:	60b3      	str	r3, [r6, #8]
 8005580:	e7de      	b.n	8005540 <_free_r+0xe0>
 8005582:	2a14      	cmp	r2, #20
 8005584:	d801      	bhi.n	800558a <_free_r+0x12a>
 8005586:	325b      	adds	r2, #91	; 0x5b
 8005588:	e7e9      	b.n	800555e <_free_r+0xfe>
 800558a:	2a54      	cmp	r2, #84	; 0x54
 800558c:	d802      	bhi.n	8005594 <_free_r+0x134>
 800558e:	0b02      	lsrs	r2, r0, #12
 8005590:	326e      	adds	r2, #110	; 0x6e
 8005592:	e7e4      	b.n	800555e <_free_r+0xfe>
 8005594:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005598:	d802      	bhi.n	80055a0 <_free_r+0x140>
 800559a:	0bc2      	lsrs	r2, r0, #15
 800559c:	3277      	adds	r2, #119	; 0x77
 800559e:	e7de      	b.n	800555e <_free_r+0xfe>
 80055a0:	f240 5154 	movw	r1, #1364	; 0x554
 80055a4:	428a      	cmp	r2, r1
 80055a6:	bf9a      	itte	ls
 80055a8:	0c82      	lsrls	r2, r0, #18
 80055aa:	327c      	addls	r2, #124	; 0x7c
 80055ac:	227e      	movhi	r2, #126	; 0x7e
 80055ae:	e7d6      	b.n	800555e <_free_r+0xfe>
 80055b0:	6889      	ldr	r1, [r1, #8]
 80055b2:	428e      	cmp	r6, r1
 80055b4:	d004      	beq.n	80055c0 <_free_r+0x160>
 80055b6:	684a      	ldr	r2, [r1, #4]
 80055b8:	f022 0203 	bic.w	r2, r2, #3
 80055bc:	4290      	cmp	r0, r2
 80055be:	d3f7      	bcc.n	80055b0 <_free_r+0x150>
 80055c0:	68ce      	ldr	r6, [r1, #12]
 80055c2:	e7da      	b.n	800557a <_free_r+0x11a>
 80055c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055c8:	20000100 	.word	0x20000100
 80055cc:	2000050c 	.word	0x2000050c
 80055d0:	20000560 	.word	0x20000560
 80055d4:	20000108 	.word	0x20000108

080055d8 <_fwalk_reent>:
 80055d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055dc:	4680      	mov	r8, r0
 80055de:	4689      	mov	r9, r1
 80055e0:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 80055e4:	2600      	movs	r6, #0
 80055e6:	b914      	cbnz	r4, 80055ee <_fwalk_reent+0x16>
 80055e8:	4630      	mov	r0, r6
 80055ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055ee:	68a5      	ldr	r5, [r4, #8]
 80055f0:	6867      	ldr	r7, [r4, #4]
 80055f2:	3f01      	subs	r7, #1
 80055f4:	d501      	bpl.n	80055fa <_fwalk_reent+0x22>
 80055f6:	6824      	ldr	r4, [r4, #0]
 80055f8:	e7f5      	b.n	80055e6 <_fwalk_reent+0xe>
 80055fa:	89ab      	ldrh	r3, [r5, #12]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d907      	bls.n	8005610 <_fwalk_reent+0x38>
 8005600:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005604:	3301      	adds	r3, #1
 8005606:	d003      	beq.n	8005610 <_fwalk_reent+0x38>
 8005608:	4629      	mov	r1, r5
 800560a:	4640      	mov	r0, r8
 800560c:	47c8      	blx	r9
 800560e:	4306      	orrs	r6, r0
 8005610:	3568      	adds	r5, #104	; 0x68
 8005612:	e7ee      	b.n	80055f2 <_fwalk_reent+0x1a>

08005614 <__retarget_lock_init_recursive>:
 8005614:	4770      	bx	lr

08005616 <__retarget_lock_close_recursive>:
 8005616:	4770      	bx	lr

08005618 <__retarget_lock_acquire_recursive>:
 8005618:	4770      	bx	lr

0800561a <__retarget_lock_release_recursive>:
 800561a:	4770      	bx	lr

0800561c <__swhatbuf_r>:
 800561c:	b570      	push	{r4, r5, r6, lr}
 800561e:	460e      	mov	r6, r1
 8005620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005624:	2900      	cmp	r1, #0
 8005626:	b090      	sub	sp, #64	; 0x40
 8005628:	4614      	mov	r4, r2
 800562a:	461d      	mov	r5, r3
 800562c:	da09      	bge.n	8005642 <__swhatbuf_r+0x26>
 800562e:	89b3      	ldrh	r3, [r6, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005636:	602a      	str	r2, [r5, #0]
 8005638:	d116      	bne.n	8005668 <__swhatbuf_r+0x4c>
 800563a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800563e:	6023      	str	r3, [r4, #0]
 8005640:	e015      	b.n	800566e <__swhatbuf_r+0x52>
 8005642:	aa01      	add	r2, sp, #4
 8005644:	f000 fb1a 	bl	8005c7c <_fstat_r>
 8005648:	2800      	cmp	r0, #0
 800564a:	dbf0      	blt.n	800562e <__swhatbuf_r+0x12>
 800564c:	9a02      	ldr	r2, [sp, #8]
 800564e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005652:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005656:	425a      	negs	r2, r3
 8005658:	415a      	adcs	r2, r3
 800565a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800565e:	602a      	str	r2, [r5, #0]
 8005660:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005664:	6023      	str	r3, [r4, #0]
 8005666:	e002      	b.n	800566e <__swhatbuf_r+0x52>
 8005668:	2340      	movs	r3, #64	; 0x40
 800566a:	6023      	str	r3, [r4, #0]
 800566c:	4610      	mov	r0, r2
 800566e:	b010      	add	sp, #64	; 0x40
 8005670:	bd70      	pop	{r4, r5, r6, pc}
	...

08005674 <malloc>:
 8005674:	4b02      	ldr	r3, [pc, #8]	; (8005680 <malloc+0xc>)
 8005676:	4601      	mov	r1, r0
 8005678:	6818      	ldr	r0, [r3, #0]
 800567a:	f000 b803 	b.w	8005684 <_malloc_r>
 800567e:	bf00      	nop
 8005680:	2000000c 	.word	0x2000000c

08005684 <_malloc_r>:
 8005684:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005688:	f101 040b 	add.w	r4, r1, #11
 800568c:	2c16      	cmp	r4, #22
 800568e:	4681      	mov	r9, r0
 8005690:	d907      	bls.n	80056a2 <_malloc_r+0x1e>
 8005692:	f034 0407 	bics.w	r4, r4, #7
 8005696:	d505      	bpl.n	80056a4 <_malloc_r+0x20>
 8005698:	230c      	movs	r3, #12
 800569a:	f8c9 3000 	str.w	r3, [r9]
 800569e:	2600      	movs	r6, #0
 80056a0:	e131      	b.n	8005906 <_malloc_r+0x282>
 80056a2:	2410      	movs	r4, #16
 80056a4:	428c      	cmp	r4, r1
 80056a6:	d3f7      	bcc.n	8005698 <_malloc_r+0x14>
 80056a8:	4648      	mov	r0, r9
 80056aa:	f000 f9f9 	bl	8005aa0 <__malloc_lock>
 80056ae:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80056b2:	4d9c      	ldr	r5, [pc, #624]	; (8005924 <_malloc_r+0x2a0>)
 80056b4:	d236      	bcs.n	8005724 <_malloc_r+0xa0>
 80056b6:	f104 0208 	add.w	r2, r4, #8
 80056ba:	442a      	add	r2, r5
 80056bc:	f1a2 0108 	sub.w	r1, r2, #8
 80056c0:	6856      	ldr	r6, [r2, #4]
 80056c2:	428e      	cmp	r6, r1
 80056c4:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 80056c8:	d102      	bne.n	80056d0 <_malloc_r+0x4c>
 80056ca:	68d6      	ldr	r6, [r2, #12]
 80056cc:	42b2      	cmp	r2, r6
 80056ce:	d010      	beq.n	80056f2 <_malloc_r+0x6e>
 80056d0:	6873      	ldr	r3, [r6, #4]
 80056d2:	68f2      	ldr	r2, [r6, #12]
 80056d4:	68b1      	ldr	r1, [r6, #8]
 80056d6:	f023 0303 	bic.w	r3, r3, #3
 80056da:	60ca      	str	r2, [r1, #12]
 80056dc:	4433      	add	r3, r6
 80056de:	6091      	str	r1, [r2, #8]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	f042 0201 	orr.w	r2, r2, #1
 80056e6:	605a      	str	r2, [r3, #4]
 80056e8:	4648      	mov	r0, r9
 80056ea:	f000 f9df 	bl	8005aac <__malloc_unlock>
 80056ee:	3608      	adds	r6, #8
 80056f0:	e109      	b.n	8005906 <_malloc_r+0x282>
 80056f2:	3302      	adds	r3, #2
 80056f4:	4a8c      	ldr	r2, [pc, #560]	; (8005928 <_malloc_r+0x2a4>)
 80056f6:	692e      	ldr	r6, [r5, #16]
 80056f8:	4296      	cmp	r6, r2
 80056fa:	4611      	mov	r1, r2
 80056fc:	d06d      	beq.n	80057da <_malloc_r+0x156>
 80056fe:	6870      	ldr	r0, [r6, #4]
 8005700:	f020 0003 	bic.w	r0, r0, #3
 8005704:	1b07      	subs	r7, r0, r4
 8005706:	2f0f      	cmp	r7, #15
 8005708:	dd47      	ble.n	800579a <_malloc_r+0x116>
 800570a:	1933      	adds	r3, r6, r4
 800570c:	f044 0401 	orr.w	r4, r4, #1
 8005710:	6074      	str	r4, [r6, #4]
 8005712:	616b      	str	r3, [r5, #20]
 8005714:	612b      	str	r3, [r5, #16]
 8005716:	60da      	str	r2, [r3, #12]
 8005718:	609a      	str	r2, [r3, #8]
 800571a:	f047 0201 	orr.w	r2, r7, #1
 800571e:	605a      	str	r2, [r3, #4]
 8005720:	5037      	str	r7, [r6, r0]
 8005722:	e7e1      	b.n	80056e8 <_malloc_r+0x64>
 8005724:	0a63      	lsrs	r3, r4, #9
 8005726:	d02a      	beq.n	800577e <_malloc_r+0xfa>
 8005728:	2b04      	cmp	r3, #4
 800572a:	d812      	bhi.n	8005752 <_malloc_r+0xce>
 800572c:	09a3      	lsrs	r3, r4, #6
 800572e:	3338      	adds	r3, #56	; 0x38
 8005730:	1c5a      	adds	r2, r3, #1
 8005732:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005736:	f1a2 0008 	sub.w	r0, r2, #8
 800573a:	6856      	ldr	r6, [r2, #4]
 800573c:	4286      	cmp	r6, r0
 800573e:	d006      	beq.n	800574e <_malloc_r+0xca>
 8005740:	6872      	ldr	r2, [r6, #4]
 8005742:	f022 0203 	bic.w	r2, r2, #3
 8005746:	1b11      	subs	r1, r2, r4
 8005748:	290f      	cmp	r1, #15
 800574a:	dd1c      	ble.n	8005786 <_malloc_r+0x102>
 800574c:	3b01      	subs	r3, #1
 800574e:	3301      	adds	r3, #1
 8005750:	e7d0      	b.n	80056f4 <_malloc_r+0x70>
 8005752:	2b14      	cmp	r3, #20
 8005754:	d801      	bhi.n	800575a <_malloc_r+0xd6>
 8005756:	335b      	adds	r3, #91	; 0x5b
 8005758:	e7ea      	b.n	8005730 <_malloc_r+0xac>
 800575a:	2b54      	cmp	r3, #84	; 0x54
 800575c:	d802      	bhi.n	8005764 <_malloc_r+0xe0>
 800575e:	0b23      	lsrs	r3, r4, #12
 8005760:	336e      	adds	r3, #110	; 0x6e
 8005762:	e7e5      	b.n	8005730 <_malloc_r+0xac>
 8005764:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8005768:	d802      	bhi.n	8005770 <_malloc_r+0xec>
 800576a:	0be3      	lsrs	r3, r4, #15
 800576c:	3377      	adds	r3, #119	; 0x77
 800576e:	e7df      	b.n	8005730 <_malloc_r+0xac>
 8005770:	f240 5254 	movw	r2, #1364	; 0x554
 8005774:	4293      	cmp	r3, r2
 8005776:	d804      	bhi.n	8005782 <_malloc_r+0xfe>
 8005778:	0ca3      	lsrs	r3, r4, #18
 800577a:	337c      	adds	r3, #124	; 0x7c
 800577c:	e7d8      	b.n	8005730 <_malloc_r+0xac>
 800577e:	233f      	movs	r3, #63	; 0x3f
 8005780:	e7d6      	b.n	8005730 <_malloc_r+0xac>
 8005782:	237e      	movs	r3, #126	; 0x7e
 8005784:	e7d4      	b.n	8005730 <_malloc_r+0xac>
 8005786:	2900      	cmp	r1, #0
 8005788:	68f1      	ldr	r1, [r6, #12]
 800578a:	db04      	blt.n	8005796 <_malloc_r+0x112>
 800578c:	68b3      	ldr	r3, [r6, #8]
 800578e:	60d9      	str	r1, [r3, #12]
 8005790:	608b      	str	r3, [r1, #8]
 8005792:	18b3      	adds	r3, r6, r2
 8005794:	e7a4      	b.n	80056e0 <_malloc_r+0x5c>
 8005796:	460e      	mov	r6, r1
 8005798:	e7d0      	b.n	800573c <_malloc_r+0xb8>
 800579a:	2f00      	cmp	r7, #0
 800579c:	616a      	str	r2, [r5, #20]
 800579e:	612a      	str	r2, [r5, #16]
 80057a0:	db05      	blt.n	80057ae <_malloc_r+0x12a>
 80057a2:	4430      	add	r0, r6
 80057a4:	6843      	ldr	r3, [r0, #4]
 80057a6:	f043 0301 	orr.w	r3, r3, #1
 80057aa:	6043      	str	r3, [r0, #4]
 80057ac:	e79c      	b.n	80056e8 <_malloc_r+0x64>
 80057ae:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80057b2:	d244      	bcs.n	800583e <_malloc_r+0x1ba>
 80057b4:	08c0      	lsrs	r0, r0, #3
 80057b6:	1087      	asrs	r7, r0, #2
 80057b8:	2201      	movs	r2, #1
 80057ba:	fa02 f707 	lsl.w	r7, r2, r7
 80057be:	686a      	ldr	r2, [r5, #4]
 80057c0:	3001      	adds	r0, #1
 80057c2:	433a      	orrs	r2, r7
 80057c4:	606a      	str	r2, [r5, #4]
 80057c6:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80057ca:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 80057ce:	60b7      	str	r7, [r6, #8]
 80057d0:	3a08      	subs	r2, #8
 80057d2:	60f2      	str	r2, [r6, #12]
 80057d4:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 80057d8:	60fe      	str	r6, [r7, #12]
 80057da:	2001      	movs	r0, #1
 80057dc:	109a      	asrs	r2, r3, #2
 80057de:	fa00 f202 	lsl.w	r2, r0, r2
 80057e2:	6868      	ldr	r0, [r5, #4]
 80057e4:	4282      	cmp	r2, r0
 80057e6:	f200 80a1 	bhi.w	800592c <_malloc_r+0x2a8>
 80057ea:	4202      	tst	r2, r0
 80057ec:	d106      	bne.n	80057fc <_malloc_r+0x178>
 80057ee:	f023 0303 	bic.w	r3, r3, #3
 80057f2:	0052      	lsls	r2, r2, #1
 80057f4:	4202      	tst	r2, r0
 80057f6:	f103 0304 	add.w	r3, r3, #4
 80057fa:	d0fa      	beq.n	80057f2 <_malloc_r+0x16e>
 80057fc:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8005800:	46e0      	mov	r8, ip
 8005802:	469e      	mov	lr, r3
 8005804:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8005808:	4546      	cmp	r6, r8
 800580a:	d153      	bne.n	80058b4 <_malloc_r+0x230>
 800580c:	f10e 0e01 	add.w	lr, lr, #1
 8005810:	f01e 0f03 	tst.w	lr, #3
 8005814:	f108 0808 	add.w	r8, r8, #8
 8005818:	d1f4      	bne.n	8005804 <_malloc_r+0x180>
 800581a:	0798      	lsls	r0, r3, #30
 800581c:	d179      	bne.n	8005912 <_malloc_r+0x28e>
 800581e:	686b      	ldr	r3, [r5, #4]
 8005820:	ea23 0302 	bic.w	r3, r3, r2
 8005824:	606b      	str	r3, [r5, #4]
 8005826:	6868      	ldr	r0, [r5, #4]
 8005828:	0052      	lsls	r2, r2, #1
 800582a:	4282      	cmp	r2, r0
 800582c:	d87e      	bhi.n	800592c <_malloc_r+0x2a8>
 800582e:	2a00      	cmp	r2, #0
 8005830:	d07c      	beq.n	800592c <_malloc_r+0x2a8>
 8005832:	4673      	mov	r3, lr
 8005834:	4202      	tst	r2, r0
 8005836:	d1e1      	bne.n	80057fc <_malloc_r+0x178>
 8005838:	3304      	adds	r3, #4
 800583a:	0052      	lsls	r2, r2, #1
 800583c:	e7fa      	b.n	8005834 <_malloc_r+0x1b0>
 800583e:	0a42      	lsrs	r2, r0, #9
 8005840:	2a04      	cmp	r2, #4
 8005842:	d815      	bhi.n	8005870 <_malloc_r+0x1ec>
 8005844:	0982      	lsrs	r2, r0, #6
 8005846:	3238      	adds	r2, #56	; 0x38
 8005848:	1c57      	adds	r7, r2, #1
 800584a:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800584e:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8005852:	45be      	cmp	lr, r7
 8005854:	d126      	bne.n	80058a4 <_malloc_r+0x220>
 8005856:	2001      	movs	r0, #1
 8005858:	1092      	asrs	r2, r2, #2
 800585a:	fa00 f202 	lsl.w	r2, r0, r2
 800585e:	6868      	ldr	r0, [r5, #4]
 8005860:	4310      	orrs	r0, r2
 8005862:	6068      	str	r0, [r5, #4]
 8005864:	f8c6 e00c 	str.w	lr, [r6, #12]
 8005868:	60b7      	str	r7, [r6, #8]
 800586a:	f8ce 6008 	str.w	r6, [lr, #8]
 800586e:	e7b3      	b.n	80057d8 <_malloc_r+0x154>
 8005870:	2a14      	cmp	r2, #20
 8005872:	d801      	bhi.n	8005878 <_malloc_r+0x1f4>
 8005874:	325b      	adds	r2, #91	; 0x5b
 8005876:	e7e7      	b.n	8005848 <_malloc_r+0x1c4>
 8005878:	2a54      	cmp	r2, #84	; 0x54
 800587a:	d802      	bhi.n	8005882 <_malloc_r+0x1fe>
 800587c:	0b02      	lsrs	r2, r0, #12
 800587e:	326e      	adds	r2, #110	; 0x6e
 8005880:	e7e2      	b.n	8005848 <_malloc_r+0x1c4>
 8005882:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005886:	d802      	bhi.n	800588e <_malloc_r+0x20a>
 8005888:	0bc2      	lsrs	r2, r0, #15
 800588a:	3277      	adds	r2, #119	; 0x77
 800588c:	e7dc      	b.n	8005848 <_malloc_r+0x1c4>
 800588e:	f240 5754 	movw	r7, #1364	; 0x554
 8005892:	42ba      	cmp	r2, r7
 8005894:	bf9a      	itte	ls
 8005896:	0c82      	lsrls	r2, r0, #18
 8005898:	327c      	addls	r2, #124	; 0x7c
 800589a:	227e      	movhi	r2, #126	; 0x7e
 800589c:	e7d4      	b.n	8005848 <_malloc_r+0x1c4>
 800589e:	68bf      	ldr	r7, [r7, #8]
 80058a0:	45be      	cmp	lr, r7
 80058a2:	d004      	beq.n	80058ae <_malloc_r+0x22a>
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	f022 0203 	bic.w	r2, r2, #3
 80058aa:	4290      	cmp	r0, r2
 80058ac:	d3f7      	bcc.n	800589e <_malloc_r+0x21a>
 80058ae:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 80058b2:	e7d7      	b.n	8005864 <_malloc_r+0x1e0>
 80058b4:	6870      	ldr	r0, [r6, #4]
 80058b6:	68f7      	ldr	r7, [r6, #12]
 80058b8:	f020 0003 	bic.w	r0, r0, #3
 80058bc:	eba0 0a04 	sub.w	sl, r0, r4
 80058c0:	f1ba 0f0f 	cmp.w	sl, #15
 80058c4:	dd10      	ble.n	80058e8 <_malloc_r+0x264>
 80058c6:	68b2      	ldr	r2, [r6, #8]
 80058c8:	1933      	adds	r3, r6, r4
 80058ca:	f044 0401 	orr.w	r4, r4, #1
 80058ce:	6074      	str	r4, [r6, #4]
 80058d0:	60d7      	str	r7, [r2, #12]
 80058d2:	60ba      	str	r2, [r7, #8]
 80058d4:	f04a 0201 	orr.w	r2, sl, #1
 80058d8:	616b      	str	r3, [r5, #20]
 80058da:	612b      	str	r3, [r5, #16]
 80058dc:	60d9      	str	r1, [r3, #12]
 80058de:	6099      	str	r1, [r3, #8]
 80058e0:	605a      	str	r2, [r3, #4]
 80058e2:	f846 a000 	str.w	sl, [r6, r0]
 80058e6:	e6ff      	b.n	80056e8 <_malloc_r+0x64>
 80058e8:	f1ba 0f00 	cmp.w	sl, #0
 80058ec:	db0f      	blt.n	800590e <_malloc_r+0x28a>
 80058ee:	4430      	add	r0, r6
 80058f0:	6843      	ldr	r3, [r0, #4]
 80058f2:	f043 0301 	orr.w	r3, r3, #1
 80058f6:	6043      	str	r3, [r0, #4]
 80058f8:	f856 3f08 	ldr.w	r3, [r6, #8]!
 80058fc:	4648      	mov	r0, r9
 80058fe:	60df      	str	r7, [r3, #12]
 8005900:	60bb      	str	r3, [r7, #8]
 8005902:	f000 f8d3 	bl	8005aac <__malloc_unlock>
 8005906:	4630      	mov	r0, r6
 8005908:	b003      	add	sp, #12
 800590a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800590e:	463e      	mov	r6, r7
 8005910:	e77a      	b.n	8005808 <_malloc_r+0x184>
 8005912:	f85c 0908 	ldr.w	r0, [ip], #-8
 8005916:	4584      	cmp	ip, r0
 8005918:	f103 33ff 	add.w	r3, r3, #4294967295
 800591c:	f43f af7d 	beq.w	800581a <_malloc_r+0x196>
 8005920:	e781      	b.n	8005826 <_malloc_r+0x1a2>
 8005922:	bf00      	nop
 8005924:	20000100 	.word	0x20000100
 8005928:	20000108 	.word	0x20000108
 800592c:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8005930:	f8db 6004 	ldr.w	r6, [fp, #4]
 8005934:	f026 0603 	bic.w	r6, r6, #3
 8005938:	42b4      	cmp	r4, r6
 800593a:	d803      	bhi.n	8005944 <_malloc_r+0x2c0>
 800593c:	1b33      	subs	r3, r6, r4
 800593e:	2b0f      	cmp	r3, #15
 8005940:	f300 8096 	bgt.w	8005a70 <_malloc_r+0x3ec>
 8005944:	4a4f      	ldr	r2, [pc, #316]	; (8005a84 <_malloc_r+0x400>)
 8005946:	6817      	ldr	r7, [r2, #0]
 8005948:	4a4f      	ldr	r2, [pc, #316]	; (8005a88 <_malloc_r+0x404>)
 800594a:	6811      	ldr	r1, [r2, #0]
 800594c:	3710      	adds	r7, #16
 800594e:	3101      	adds	r1, #1
 8005950:	eb0b 0306 	add.w	r3, fp, r6
 8005954:	4427      	add	r7, r4
 8005956:	d005      	beq.n	8005964 <_malloc_r+0x2e0>
 8005958:	494c      	ldr	r1, [pc, #304]	; (8005a8c <_malloc_r+0x408>)
 800595a:	3901      	subs	r1, #1
 800595c:	440f      	add	r7, r1
 800595e:	3101      	adds	r1, #1
 8005960:	4249      	negs	r1, r1
 8005962:	400f      	ands	r7, r1
 8005964:	4639      	mov	r1, r7
 8005966:	4648      	mov	r0, r9
 8005968:	9201      	str	r2, [sp, #4]
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	f000 f8a4 	bl	8005ab8 <_sbrk_r>
 8005970:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005974:	4680      	mov	r8, r0
 8005976:	d056      	beq.n	8005a26 <_malloc_r+0x3a2>
 8005978:	9b00      	ldr	r3, [sp, #0]
 800597a:	9a01      	ldr	r2, [sp, #4]
 800597c:	4283      	cmp	r3, r0
 800597e:	d901      	bls.n	8005984 <_malloc_r+0x300>
 8005980:	45ab      	cmp	fp, r5
 8005982:	d150      	bne.n	8005a26 <_malloc_r+0x3a2>
 8005984:	4842      	ldr	r0, [pc, #264]	; (8005a90 <_malloc_r+0x40c>)
 8005986:	6801      	ldr	r1, [r0, #0]
 8005988:	4543      	cmp	r3, r8
 800598a:	eb07 0e01 	add.w	lr, r7, r1
 800598e:	f8c0 e000 	str.w	lr, [r0]
 8005992:	4940      	ldr	r1, [pc, #256]	; (8005a94 <_malloc_r+0x410>)
 8005994:	4682      	mov	sl, r0
 8005996:	d113      	bne.n	80059c0 <_malloc_r+0x33c>
 8005998:	420b      	tst	r3, r1
 800599a:	d111      	bne.n	80059c0 <_malloc_r+0x33c>
 800599c:	68ab      	ldr	r3, [r5, #8]
 800599e:	443e      	add	r6, r7
 80059a0:	f046 0601 	orr.w	r6, r6, #1
 80059a4:	605e      	str	r6, [r3, #4]
 80059a6:	4a3c      	ldr	r2, [pc, #240]	; (8005a98 <_malloc_r+0x414>)
 80059a8:	f8da 3000 	ldr.w	r3, [sl]
 80059ac:	6811      	ldr	r1, [r2, #0]
 80059ae:	428b      	cmp	r3, r1
 80059b0:	bf88      	it	hi
 80059b2:	6013      	strhi	r3, [r2, #0]
 80059b4:	4a39      	ldr	r2, [pc, #228]	; (8005a9c <_malloc_r+0x418>)
 80059b6:	6811      	ldr	r1, [r2, #0]
 80059b8:	428b      	cmp	r3, r1
 80059ba:	bf88      	it	hi
 80059bc:	6013      	strhi	r3, [r2, #0]
 80059be:	e032      	b.n	8005a26 <_malloc_r+0x3a2>
 80059c0:	6810      	ldr	r0, [r2, #0]
 80059c2:	3001      	adds	r0, #1
 80059c4:	bf1b      	ittet	ne
 80059c6:	eba8 0303 	subne.w	r3, r8, r3
 80059ca:	4473      	addne	r3, lr
 80059cc:	f8c2 8000 	streq.w	r8, [r2]
 80059d0:	f8ca 3000 	strne.w	r3, [sl]
 80059d4:	f018 0007 	ands.w	r0, r8, #7
 80059d8:	bf1c      	itt	ne
 80059da:	f1c0 0008 	rsbne	r0, r0, #8
 80059de:	4480      	addne	r8, r0
 80059e0:	4b2a      	ldr	r3, [pc, #168]	; (8005a8c <_malloc_r+0x408>)
 80059e2:	4447      	add	r7, r8
 80059e4:	4418      	add	r0, r3
 80059e6:	400f      	ands	r7, r1
 80059e8:	1bc7      	subs	r7, r0, r7
 80059ea:	4639      	mov	r1, r7
 80059ec:	4648      	mov	r0, r9
 80059ee:	f000 f863 	bl	8005ab8 <_sbrk_r>
 80059f2:	1c43      	adds	r3, r0, #1
 80059f4:	bf08      	it	eq
 80059f6:	4640      	moveq	r0, r8
 80059f8:	f8da 3000 	ldr.w	r3, [sl]
 80059fc:	f8c5 8008 	str.w	r8, [r5, #8]
 8005a00:	bf08      	it	eq
 8005a02:	2700      	moveq	r7, #0
 8005a04:	eba0 0008 	sub.w	r0, r0, r8
 8005a08:	443b      	add	r3, r7
 8005a0a:	4407      	add	r7, r0
 8005a0c:	f047 0701 	orr.w	r7, r7, #1
 8005a10:	45ab      	cmp	fp, r5
 8005a12:	f8ca 3000 	str.w	r3, [sl]
 8005a16:	f8c8 7004 	str.w	r7, [r8, #4]
 8005a1a:	d0c4      	beq.n	80059a6 <_malloc_r+0x322>
 8005a1c:	2e0f      	cmp	r6, #15
 8005a1e:	d810      	bhi.n	8005a42 <_malloc_r+0x3be>
 8005a20:	2301      	movs	r3, #1
 8005a22:	f8c8 3004 	str.w	r3, [r8, #4]
 8005a26:	68ab      	ldr	r3, [r5, #8]
 8005a28:	685a      	ldr	r2, [r3, #4]
 8005a2a:	f022 0203 	bic.w	r2, r2, #3
 8005a2e:	4294      	cmp	r4, r2
 8005a30:	eba2 0304 	sub.w	r3, r2, r4
 8005a34:	d801      	bhi.n	8005a3a <_malloc_r+0x3b6>
 8005a36:	2b0f      	cmp	r3, #15
 8005a38:	dc1a      	bgt.n	8005a70 <_malloc_r+0x3ec>
 8005a3a:	4648      	mov	r0, r9
 8005a3c:	f000 f836 	bl	8005aac <__malloc_unlock>
 8005a40:	e62d      	b.n	800569e <_malloc_r+0x1a>
 8005a42:	f8db 3004 	ldr.w	r3, [fp, #4]
 8005a46:	3e0c      	subs	r6, #12
 8005a48:	f026 0607 	bic.w	r6, r6, #7
 8005a4c:	f003 0301 	and.w	r3, r3, #1
 8005a50:	4333      	orrs	r3, r6
 8005a52:	f8cb 3004 	str.w	r3, [fp, #4]
 8005a56:	eb0b 0306 	add.w	r3, fp, r6
 8005a5a:	2205      	movs	r2, #5
 8005a5c:	2e0f      	cmp	r6, #15
 8005a5e:	605a      	str	r2, [r3, #4]
 8005a60:	609a      	str	r2, [r3, #8]
 8005a62:	d9a0      	bls.n	80059a6 <_malloc_r+0x322>
 8005a64:	f10b 0108 	add.w	r1, fp, #8
 8005a68:	4648      	mov	r0, r9
 8005a6a:	f7ff fcf9 	bl	8005460 <_free_r>
 8005a6e:	e79a      	b.n	80059a6 <_malloc_r+0x322>
 8005a70:	68ae      	ldr	r6, [r5, #8]
 8005a72:	f044 0201 	orr.w	r2, r4, #1
 8005a76:	4434      	add	r4, r6
 8005a78:	f043 0301 	orr.w	r3, r3, #1
 8005a7c:	6072      	str	r2, [r6, #4]
 8005a7e:	60ac      	str	r4, [r5, #8]
 8005a80:	6063      	str	r3, [r4, #4]
 8005a82:	e631      	b.n	80056e8 <_malloc_r+0x64>
 8005a84:	20000560 	.word	0x20000560
 8005a88:	20000508 	.word	0x20000508
 8005a8c:	00000080 	.word	0x00000080
 8005a90:	20000530 	.word	0x20000530
 8005a94:	0000007f 	.word	0x0000007f
 8005a98:	20000558 	.word	0x20000558
 8005a9c:	2000055c 	.word	0x2000055c

08005aa0 <__malloc_lock>:
 8005aa0:	4801      	ldr	r0, [pc, #4]	; (8005aa8 <__malloc_lock+0x8>)
 8005aa2:	f7ff bdb9 	b.w	8005618 <__retarget_lock_acquire_recursive>
 8005aa6:	bf00      	nop
 8005aa8:	20000674 	.word	0x20000674

08005aac <__malloc_unlock>:
 8005aac:	4801      	ldr	r0, [pc, #4]	; (8005ab4 <__malloc_unlock+0x8>)
 8005aae:	f7ff bdb4 	b.w	800561a <__retarget_lock_release_recursive>
 8005ab2:	bf00      	nop
 8005ab4:	20000674 	.word	0x20000674

08005ab8 <_sbrk_r>:
 8005ab8:	b538      	push	{r3, r4, r5, lr}
 8005aba:	4c06      	ldr	r4, [pc, #24]	; (8005ad4 <_sbrk_r+0x1c>)
 8005abc:	2300      	movs	r3, #0
 8005abe:	4605      	mov	r5, r0
 8005ac0:	4608      	mov	r0, r1
 8005ac2:	6023      	str	r3, [r4, #0]
 8005ac4:	f7fe ff52 	bl	800496c <_sbrk>
 8005ac8:	1c43      	adds	r3, r0, #1
 8005aca:	d102      	bne.n	8005ad2 <_sbrk_r+0x1a>
 8005acc:	6823      	ldr	r3, [r4, #0]
 8005ace:	b103      	cbz	r3, 8005ad2 <_sbrk_r+0x1a>
 8005ad0:	602b      	str	r3, [r5, #0]
 8005ad2:	bd38      	pop	{r3, r4, r5, pc}
 8005ad4:	2000067c 	.word	0x2000067c

08005ad8 <__sread>:
 8005ad8:	b510      	push	{r4, lr}
 8005ada:	460c      	mov	r4, r1
 8005adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ae0:	f000 f8f0 	bl	8005cc4 <_read_r>
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	bfab      	itete	ge
 8005ae8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005aea:	89a3      	ldrhlt	r3, [r4, #12]
 8005aec:	181b      	addge	r3, r3, r0
 8005aee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005af2:	bfac      	ite	ge
 8005af4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005af6:	81a3      	strhlt	r3, [r4, #12]
 8005af8:	bd10      	pop	{r4, pc}

08005afa <__swrite>:
 8005afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005afe:	461f      	mov	r7, r3
 8005b00:	898b      	ldrh	r3, [r1, #12]
 8005b02:	05db      	lsls	r3, r3, #23
 8005b04:	4605      	mov	r5, r0
 8005b06:	460c      	mov	r4, r1
 8005b08:	4616      	mov	r6, r2
 8005b0a:	d505      	bpl.n	8005b18 <__swrite+0x1e>
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b14:	f000 f8c4 	bl	8005ca0 <_lseek_r>
 8005b18:	89a3      	ldrh	r3, [r4, #12]
 8005b1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b22:	81a3      	strh	r3, [r4, #12]
 8005b24:	4632      	mov	r2, r6
 8005b26:	463b      	mov	r3, r7
 8005b28:	4628      	mov	r0, r5
 8005b2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b2e:	f000 b817 	b.w	8005b60 <_write_r>

08005b32 <__sseek>:
 8005b32:	b510      	push	{r4, lr}
 8005b34:	460c      	mov	r4, r1
 8005b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b3a:	f000 f8b1 	bl	8005ca0 <_lseek_r>
 8005b3e:	1c43      	adds	r3, r0, #1
 8005b40:	89a3      	ldrh	r3, [r4, #12]
 8005b42:	bf15      	itete	ne
 8005b44:	6560      	strne	r0, [r4, #84]	; 0x54
 8005b46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005b4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005b4e:	81a3      	strheq	r3, [r4, #12]
 8005b50:	bf18      	it	ne
 8005b52:	81a3      	strhne	r3, [r4, #12]
 8005b54:	bd10      	pop	{r4, pc}

08005b56 <__sclose>:
 8005b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b5a:	f000 b813 	b.w	8005b84 <_close_r>
	...

08005b60 <_write_r>:
 8005b60:	b538      	push	{r3, r4, r5, lr}
 8005b62:	4c07      	ldr	r4, [pc, #28]	; (8005b80 <_write_r+0x20>)
 8005b64:	4605      	mov	r5, r0
 8005b66:	4608      	mov	r0, r1
 8005b68:	4611      	mov	r1, r2
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	6022      	str	r2, [r4, #0]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	f7fe fedf 	bl	8004932 <_write>
 8005b74:	1c43      	adds	r3, r0, #1
 8005b76:	d102      	bne.n	8005b7e <_write_r+0x1e>
 8005b78:	6823      	ldr	r3, [r4, #0]
 8005b7a:	b103      	cbz	r3, 8005b7e <_write_r+0x1e>
 8005b7c:	602b      	str	r3, [r5, #0]
 8005b7e:	bd38      	pop	{r3, r4, r5, pc}
 8005b80:	2000067c 	.word	0x2000067c

08005b84 <_close_r>:
 8005b84:	b538      	push	{r3, r4, r5, lr}
 8005b86:	4c06      	ldr	r4, [pc, #24]	; (8005ba0 <_close_r+0x1c>)
 8005b88:	2300      	movs	r3, #0
 8005b8a:	4605      	mov	r5, r0
 8005b8c:	4608      	mov	r0, r1
 8005b8e:	6023      	str	r3, [r4, #0]
 8005b90:	f7fe ff18 	bl	80049c4 <_close>
 8005b94:	1c43      	adds	r3, r0, #1
 8005b96:	d102      	bne.n	8005b9e <_close_r+0x1a>
 8005b98:	6823      	ldr	r3, [r4, #0]
 8005b9a:	b103      	cbz	r3, 8005b9e <_close_r+0x1a>
 8005b9c:	602b      	str	r3, [r5, #0]
 8005b9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ba0:	2000067c 	.word	0x2000067c

08005ba4 <_fclose_r>:
 8005ba4:	b570      	push	{r4, r5, r6, lr}
 8005ba6:	4605      	mov	r5, r0
 8005ba8:	460c      	mov	r4, r1
 8005baa:	b911      	cbnz	r1, 8005bb2 <_fclose_r+0xe>
 8005bac:	2600      	movs	r6, #0
 8005bae:	4630      	mov	r0, r6
 8005bb0:	bd70      	pop	{r4, r5, r6, pc}
 8005bb2:	b118      	cbz	r0, 8005bbc <_fclose_r+0x18>
 8005bb4:	6983      	ldr	r3, [r0, #24]
 8005bb6:	b90b      	cbnz	r3, 8005bbc <_fclose_r+0x18>
 8005bb8:	f7ff fb7c 	bl	80052b4 <__sinit>
 8005bbc:	4b2c      	ldr	r3, [pc, #176]	; (8005c70 <_fclose_r+0xcc>)
 8005bbe:	429c      	cmp	r4, r3
 8005bc0:	d114      	bne.n	8005bec <_fclose_r+0x48>
 8005bc2:	686c      	ldr	r4, [r5, #4]
 8005bc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bc6:	07d8      	lsls	r0, r3, #31
 8005bc8:	d405      	bmi.n	8005bd6 <_fclose_r+0x32>
 8005bca:	89a3      	ldrh	r3, [r4, #12]
 8005bcc:	0599      	lsls	r1, r3, #22
 8005bce:	d402      	bmi.n	8005bd6 <_fclose_r+0x32>
 8005bd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bd2:	f7ff fd21 	bl	8005618 <__retarget_lock_acquire_recursive>
 8005bd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bda:	b98b      	cbnz	r3, 8005c00 <_fclose_r+0x5c>
 8005bdc:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8005bde:	f016 0601 	ands.w	r6, r6, #1
 8005be2:	d1e3      	bne.n	8005bac <_fclose_r+0x8>
 8005be4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005be6:	f7ff fd18 	bl	800561a <__retarget_lock_release_recursive>
 8005bea:	e7e0      	b.n	8005bae <_fclose_r+0xa>
 8005bec:	4b21      	ldr	r3, [pc, #132]	; (8005c74 <_fclose_r+0xd0>)
 8005bee:	429c      	cmp	r4, r3
 8005bf0:	d101      	bne.n	8005bf6 <_fclose_r+0x52>
 8005bf2:	68ac      	ldr	r4, [r5, #8]
 8005bf4:	e7e6      	b.n	8005bc4 <_fclose_r+0x20>
 8005bf6:	4b20      	ldr	r3, [pc, #128]	; (8005c78 <_fclose_r+0xd4>)
 8005bf8:	429c      	cmp	r4, r3
 8005bfa:	bf08      	it	eq
 8005bfc:	68ec      	ldreq	r4, [r5, #12]
 8005bfe:	e7e1      	b.n	8005bc4 <_fclose_r+0x20>
 8005c00:	4621      	mov	r1, r4
 8005c02:	4628      	mov	r0, r5
 8005c04:	f7ff fa30 	bl	8005068 <__sflush_r>
 8005c08:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005c0a:	4606      	mov	r6, r0
 8005c0c:	b133      	cbz	r3, 8005c1c <_fclose_r+0x78>
 8005c0e:	6a21      	ldr	r1, [r4, #32]
 8005c10:	4628      	mov	r0, r5
 8005c12:	4798      	blx	r3
 8005c14:	2800      	cmp	r0, #0
 8005c16:	bfb8      	it	lt
 8005c18:	f04f 36ff 	movlt.w	r6, #4294967295
 8005c1c:	89a3      	ldrh	r3, [r4, #12]
 8005c1e:	061a      	lsls	r2, r3, #24
 8005c20:	d503      	bpl.n	8005c2a <_fclose_r+0x86>
 8005c22:	6921      	ldr	r1, [r4, #16]
 8005c24:	4628      	mov	r0, r5
 8005c26:	f7ff fc1b 	bl	8005460 <_free_r>
 8005c2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c2c:	b141      	cbz	r1, 8005c40 <_fclose_r+0x9c>
 8005c2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c32:	4299      	cmp	r1, r3
 8005c34:	d002      	beq.n	8005c3c <_fclose_r+0x98>
 8005c36:	4628      	mov	r0, r5
 8005c38:	f7ff fc12 	bl	8005460 <_free_r>
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	6363      	str	r3, [r4, #52]	; 0x34
 8005c40:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005c42:	b121      	cbz	r1, 8005c4e <_fclose_r+0xaa>
 8005c44:	4628      	mov	r0, r5
 8005c46:	f7ff fc0b 	bl	8005460 <_free_r>
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	64a3      	str	r3, [r4, #72]	; 0x48
 8005c4e:	f7ff fb19 	bl	8005284 <__sfp_lock_acquire>
 8005c52:	2300      	movs	r3, #0
 8005c54:	81a3      	strh	r3, [r4, #12]
 8005c56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c58:	07db      	lsls	r3, r3, #31
 8005c5a:	d402      	bmi.n	8005c62 <_fclose_r+0xbe>
 8005c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c5e:	f7ff fcdc 	bl	800561a <__retarget_lock_release_recursive>
 8005c62:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c64:	f7ff fcd7 	bl	8005616 <__retarget_lock_close_recursive>
 8005c68:	f7ff fb12 	bl	8005290 <__sfp_lock_release>
 8005c6c:	e79f      	b.n	8005bae <_fclose_r+0xa>
 8005c6e:	bf00      	nop
 8005c70:	08006050 	.word	0x08006050
 8005c74:	08006070 	.word	0x08006070
 8005c78:	08006030 	.word	0x08006030

08005c7c <_fstat_r>:
 8005c7c:	b538      	push	{r3, r4, r5, lr}
 8005c7e:	4c07      	ldr	r4, [pc, #28]	; (8005c9c <_fstat_r+0x20>)
 8005c80:	2300      	movs	r3, #0
 8005c82:	4605      	mov	r5, r0
 8005c84:	4608      	mov	r0, r1
 8005c86:	4611      	mov	r1, r2
 8005c88:	6023      	str	r3, [r4, #0]
 8005c8a:	f7fe fea7 	bl	80049dc <_fstat>
 8005c8e:	1c43      	adds	r3, r0, #1
 8005c90:	d102      	bne.n	8005c98 <_fstat_r+0x1c>
 8005c92:	6823      	ldr	r3, [r4, #0]
 8005c94:	b103      	cbz	r3, 8005c98 <_fstat_r+0x1c>
 8005c96:	602b      	str	r3, [r5, #0]
 8005c98:	bd38      	pop	{r3, r4, r5, pc}
 8005c9a:	bf00      	nop
 8005c9c:	2000067c 	.word	0x2000067c

08005ca0 <_lseek_r>:
 8005ca0:	b538      	push	{r3, r4, r5, lr}
 8005ca2:	4c07      	ldr	r4, [pc, #28]	; (8005cc0 <_lseek_r+0x20>)
 8005ca4:	4605      	mov	r5, r0
 8005ca6:	4608      	mov	r0, r1
 8005ca8:	4611      	mov	r1, r2
 8005caa:	2200      	movs	r2, #0
 8005cac:	6022      	str	r2, [r4, #0]
 8005cae:	461a      	mov	r2, r3
 8005cb0:	f7fe fea4 	bl	80049fc <_lseek>
 8005cb4:	1c43      	adds	r3, r0, #1
 8005cb6:	d102      	bne.n	8005cbe <_lseek_r+0x1e>
 8005cb8:	6823      	ldr	r3, [r4, #0]
 8005cba:	b103      	cbz	r3, 8005cbe <_lseek_r+0x1e>
 8005cbc:	602b      	str	r3, [r5, #0]
 8005cbe:	bd38      	pop	{r3, r4, r5, pc}
 8005cc0:	2000067c 	.word	0x2000067c

08005cc4 <_read_r>:
 8005cc4:	b538      	push	{r3, r4, r5, lr}
 8005cc6:	4c07      	ldr	r4, [pc, #28]	; (8005ce4 <_read_r+0x20>)
 8005cc8:	4605      	mov	r5, r0
 8005cca:	4608      	mov	r0, r1
 8005ccc:	4611      	mov	r1, r2
 8005cce:	2200      	movs	r2, #0
 8005cd0:	6022      	str	r2, [r4, #0]
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	f7fe fe10 	bl	80048f8 <_read>
 8005cd8:	1c43      	adds	r3, r0, #1
 8005cda:	d102      	bne.n	8005ce2 <_read_r+0x1e>
 8005cdc:	6823      	ldr	r3, [r4, #0]
 8005cde:	b103      	cbz	r3, 8005ce2 <_read_r+0x1e>
 8005ce0:	602b      	str	r3, [r5, #0]
 8005ce2:	bd38      	pop	{r3, r4, r5, pc}
 8005ce4:	2000067c 	.word	0x2000067c

08005ce8 <_init>:
 8005ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cea:	bf00      	nop
 8005cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cee:	bc08      	pop	{r3}
 8005cf0:	469e      	mov	lr, r3
 8005cf2:	4770      	bx	lr

08005cf4 <_fini>:
 8005cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf6:	bf00      	nop
 8005cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cfa:	bc08      	pop	{r3}
 8005cfc:	469e      	mov	lr, r3
 8005cfe:	4770      	bx	lr
