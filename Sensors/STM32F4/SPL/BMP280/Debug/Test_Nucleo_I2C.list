
Test_Nucleo_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f58  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  080020e0  080020e0  000120e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  080020e4  080020e4  000120e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000014  20000000  080020e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  6 .bss          00000068  20000018  20000018  00020018  2**3
                  ALLOC
  7 ._user_heap_stack 00000400  20000080  20000080  00020018  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   000074ba  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000116b  00000000  00000000  000274fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000008b8  00000000  00000000  00028670  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000810  00000000  00000000  00028f28  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002d31  00000000  00000000  00029738  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002e79  00000000  00000000  0002c469  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002f2e2  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000026b4  00000000  00000000  0002f360  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080020c8 	.word	0x080020c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	080020c8 	.word	0x080020c8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2f>:
 800095c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000960:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000964:	bf24      	itt	cs
 8000966:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800096a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800096e:	d90d      	bls.n	800098c <__aeabi_d2f+0x30>
 8000970:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000974:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000978:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800097c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000980:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000984:	bf08      	it	eq
 8000986:	f020 0001 	biceq.w	r0, r0, #1
 800098a:	4770      	bx	lr
 800098c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000990:	d121      	bne.n	80009d6 <__aeabi_d2f+0x7a>
 8000992:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000996:	bfbc      	itt	lt
 8000998:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800099c:	4770      	bxlt	lr
 800099e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009a6:	f1c2 0218 	rsb	r2, r2, #24
 80009aa:	f1c2 0c20 	rsb	ip, r2, #32
 80009ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80009b2:	fa20 f002 	lsr.w	r0, r0, r2
 80009b6:	bf18      	it	ne
 80009b8:	f040 0001 	orrne.w	r0, r0, #1
 80009bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009c8:	ea40 000c 	orr.w	r0, r0, ip
 80009cc:	fa23 f302 	lsr.w	r3, r3, r2
 80009d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009d4:	e7cc      	b.n	8000970 <__aeabi_d2f+0x14>
 80009d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009da:	d107      	bne.n	80009ec <__aeabi_d2f+0x90>
 80009dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e0:	bf1e      	ittt	ne
 80009e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ea:	4770      	bxne	lr
 80009ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b087      	sub	sp, #28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	e076      	b.n	8000b06 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000a18:	2201      	movs	r2, #1
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000a2c:	68fa      	ldr	r2, [r7, #12]
 8000a2e:	693b      	ldr	r3, [r7, #16]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d165      	bne.n	8000b00 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	2103      	movs	r1, #3
 8000a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a42:	43db      	mvns	r3, r3
 8000a44:	401a      	ands	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	791b      	ldrb	r3, [r3, #4]
 8000a52:	4619      	mov	r1, r3
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5c:	431a      	orrs	r2, r3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	791b      	ldrb	r3, [r3, #4]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d003      	beq.n	8000a72 <GPIO_Init+0x76>
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	791b      	ldrb	r3, [r3, #4]
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d12e      	bne.n	8000ad0 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	689a      	ldr	r2, [r3, #8]
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	2103      	movs	r1, #3
 8000a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a80:	43db      	mvns	r3, r3
 8000a82:	401a      	ands	r2, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	689a      	ldr	r2, [r3, #8]
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	795b      	ldrb	r3, [r3, #5]
 8000a90:	4619      	mov	r1, r3
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9a:	431a      	orrs	r2, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	685a      	ldr	r2, [r3, #4]
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	2301      	movs	r3, #1
 8000aac:	408b      	lsls	r3, r1
 8000aae:	43db      	mvns	r3, r3
 8000ab0:	401a      	ands	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	683a      	ldr	r2, [r7, #0]
 8000abc:	7992      	ldrb	r2, [r2, #6]
 8000abe:	4611      	mov	r1, r2
 8000ac0:	697a      	ldr	r2, [r7, #20]
 8000ac2:	b292      	uxth	r2, r2
 8000ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ac8:	b292      	uxth	r2, r2
 8000aca:	431a      	orrs	r2, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	68da      	ldr	r2, [r3, #12]
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	2103      	movs	r1, #3
 8000adc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	401a      	ands	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	68da      	ldr	r2, [r3, #12]
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	79db      	ldrb	r3, [r3, #7]
 8000af0:	4619      	mov	r1, r3
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	fa01 f303 	lsl.w	r3, r1, r3
 8000afa:	431a      	orrs	r2, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	3301      	adds	r3, #1
 8000b04:	617b      	str	r3, [r7, #20]
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	2b0f      	cmp	r3, #15
 8000b0a:	d985      	bls.n	8000a18 <GPIO_Init+0x1c>
    }
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	371c      	adds	r7, #28
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	460b      	mov	r3, r1
 8000b22:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b24:	78fb      	ldrb	r3, [r7, #3]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d006      	beq.n	8000b38 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000b2a:	490a      	ldr	r1, [pc, #40]	; (8000b54 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000b2c:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000b2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000b36:	e006      	b.n	8000b46 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000b38:	4906      	ldr	r1, [pc, #24]	; (8000b54 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000b3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	43db      	mvns	r3, r3
 8000b42:	4013      	ands	r3, r2
 8000b44:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800

08000b58 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	881b      	ldrh	r3, [r3, #0]
 8000b6a:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000b6c:	89fb      	ldrh	r3, [r7, #14]
 8000b6e:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8000b72:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	881a      	ldrh	r2, [r3, #0]
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	885b      	ldrh	r3, [r3, #2]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000b84:	4313      	orrs	r3, r2
 8000b86:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000b94:	4313      	orrs	r3, r2
 8000b96:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000bac:	4313      	orrs	r3, r2
 8000bae:	b29a      	uxth	r2, r3
 8000bb0:	89fb      	ldrh	r3, [r7, #14]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	89fa      	ldrh	r2, [r7, #14]
 8000bba:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	8b9b      	ldrh	r3, [r3, #28]
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	8a1a      	ldrh	r2, [r3, #16]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	821a      	strh	r2, [r3, #16]
}
 8000bd4:	bf00      	nop
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2200      	movs	r2, #0
 8000bec:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2200      	movs	r2, #0
 8000c04:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2200      	movs	r2, #0
 8000c16:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2207      	movs	r2, #7
 8000c1c:	821a      	strh	r2, [r3, #16]
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b083      	sub	sp, #12
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
 8000c32:	460b      	mov	r3, r1
 8000c34:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000c36:	78fb      	ldrb	r3, [r7, #3]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d008      	beq.n	8000c4e <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8000c4c:	e007      	b.n	8000c5e <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	881b      	ldrh	r3, [r3, #0]
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	f023 0301 	bic.w	r3, r3, #1
 8000c58:	b29a      	uxth	r2, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	801a      	strh	r2, [r3, #0]
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
 8000c72:	460b      	mov	r3, r1
 8000c74:	807b      	strh	r3, [r7, #2]
 8000c76:	4613      	mov	r3, r2
 8000c78:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000c7a:	787b      	ldrb	r3, [r7, #1]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d008      	beq.n	8000c92 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	899b      	ldrh	r3, [r3, #12]
 8000c84:	b29a      	uxth	r2, r3
 8000c86:	887b      	ldrh	r3, [r7, #2]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000c90:	e009      	b.n	8000ca6 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	899b      	ldrh	r3, [r3, #12]
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	887b      	ldrh	r3, [r7, #2]
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	b29a      	uxth	r2, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	819a      	strh	r2, [r3, #12]
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b083      	sub	sp, #12
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
 8000cba:	460b      	mov	r3, r1
 8000cbc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000cbe:	887b      	ldrh	r3, [r7, #2]
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	b29a      	uxth	r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	821a      	strh	r2, [r3, #16]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <TIM2_IRQHandler>:
	Delay_Timer->ARR = arr_value;
	TIM_Cmd(Delay_Timer, ENABLE);
	TIM_ITConfig(Delay_Timer,TIM_IT_Update,ENABLE);
}
void Delay_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	//set timeout flag
	timeout = 1;
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <TIM2_IRQHandler+0x1c>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	601a      	str	r2, [r3, #0]
	//disable timer
	TIM_ClearITPendingBit(Delay_Timer, TIM_IT_Update);
 8000cde:	2101      	movs	r1, #1
 8000ce0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ce4:	f7ff ffe5 	bl	8000cb2 <TIM_ClearITPendingBit>
	Delay_Disable();
 8000ce8:	f000 f804 	bl	8000cf4 <Delay_Disable>
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000054 	.word	0x20000054

08000cf4 <Delay_Disable>:

void Delay_Disable(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	//turn off timer
	TIM_ITConfig(Delay_Timer,TIM_IT_Update,DISABLE);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d00:	f7ff ffb3 	bl	8000c6a <TIM_ITConfig>
	TIM_Cmd(Delay_Timer, DISABLE);
 8000d04:	2100      	movs	r1, #0
 8000d06:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d0a:	f7ff ff8e 	bl	8000c2a <TIM_Cmd>
	//clear counter
	assert_param(IS_TIM_ALL_PERIPH(Delay_Timer));
	Delay_Timer->CNT = 0;
 8000d0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d12:	2200      	movs	r2, #0
 8000d14:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	6039      	str	r1, [r7, #0]
 8000d26:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	da0b      	bge.n	8000d48 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000d30:	490d      	ldr	r1, [pc, #52]	; (8000d68 <NVIC_SetPriority+0x4c>)
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	f003 030f 	and.w	r3, r3, #15
 8000d38:	3b04      	subs	r3, #4
 8000d3a:	683a      	ldr	r2, [r7, #0]
 8000d3c:	b2d2      	uxtb	r2, r2
 8000d3e:	0112      	lsls	r2, r2, #4
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	440b      	add	r3, r1
 8000d44:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000d46:	e009      	b.n	8000d5c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000d48:	4908      	ldr	r1, [pc, #32]	; (8000d6c <NVIC_SetPriority+0x50>)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	683a      	ldr	r2, [r7, #0]
 8000d50:	b2d2      	uxtb	r2, r2
 8000d52:	0112      	lsls	r2, r2, #4
 8000d54:	b2d2      	uxtb	r2, r2
 8000d56:	440b      	add	r3, r1
 8000d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00
 8000d6c:	e000e100 	.word	0xe000e100

08000d70 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d7e:	d301      	bcc.n	8000d84 <SysTick_Config+0x14>
 8000d80:	2301      	movs	r3, #1
 8000d82:	e011      	b.n	8000da8 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000d84:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <SysTick_Config+0x40>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8000d90:	210f      	movs	r1, #15
 8000d92:	f04f 30ff 	mov.w	r0, #4294967295
 8000d96:	f7ff ffc1 	bl	8000d1c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000d9a:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <SysTick_Config+0x40>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da0:	4b03      	ldr	r3, [pc, #12]	; (8000db0 <SysTick_Config+0x40>)
 8000da2:	2207      	movs	r2, #7
 8000da4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000da6:	2300      	movs	r3, #0
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	e000e010 	.word	0xe000e010

08000db4 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
	init_LED();
 8000dba:	f000 f81f 	bl	8000dfc <init_LED>
	DelayInit();
 8000dbe:	f000 fd21 	bl	8001804 <DelayInit>
	if(BMP280_Begin())
 8000dc2:	f000 f88b 	bl	8000edc <BMP280_Begin>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d013      	beq.n	8000df4 <main+0x40>
	{
		//get calibration data
		BMP280_GetCoeff(&bmp);
 8000dcc:	480a      	ldr	r0, [pc, #40]	; (8000df8 <main+0x44>)
 8000dce:	f000 f947 	bl	8001060 <BMP280_GetCoeff>
		//configure ctrl measurement register
		BMP280_Configure_CTRLMEAS(BMP280_CTRLMEAS_OSRST_OS_1,BMP280_CTRLMEAS_OSRSP_OS_1,BMP280_CTRLMEAS_MODE_SLEEP);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2120      	movs	r1, #32
 8000dd6:	2004      	movs	r0, #4
 8000dd8:	f000 f8d4 	bl	8000f84 <BMP280_Configure_CTRLMEAS>
		//configure filter, i2c mode, odr
		BMP280_Configure_Config(BMP280_CONFIG_tsb_1000,BMP280_CONFIG_FILTER_COEFF_OFF,BMP280_CONFIG_SPI3_DIS);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2100      	movs	r1, #0
 8000de0:	20a0      	movs	r0, #160	; 0xa0
 8000de2:	f000 f90b 	bl	8000ffc <BMP280_Configure_Config>
		float temp,press;
		BMP280_Force_Measure(&temp,&press);
 8000de6:	463a      	mov	r2, r7
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f000 fcaf 	bl	8001750 <BMP280_Force_Measure>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000df2:	bf00      	nop
		__NOP();
	}
	while (1)
 8000df4:	e7fe      	b.n	8000df4 <main+0x40>
 8000df6:	bf00      	nop
 8000df8:	20000060 	.word	0x20000060

08000dfc <init_LED>:
	{

	}
}
void init_LED()
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 8000e02:	2101      	movs	r1, #1
 8000e04:	2001      	movs	r0, #1
 8000e06:	f7ff fe87 	bl	8000b18 <RCC_AHB1PeriphClockCmd>
	GPIO_InitTypeDef led;
	led.GPIO_Mode = GPIO_Mode_OUT;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	713b      	strb	r3, [r7, #4]
	led.GPIO_Pin = GPIO_Pin_5;
 8000e0e:	2320      	movs	r3, #32
 8000e10:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA,&led);
 8000e12:	463b      	mov	r3, r7
 8000e14:	4619      	mov	r1, r3
 8000e16:	4803      	ldr	r0, [pc, #12]	; (8000e24 <init_LED+0x28>)
 8000e18:	f7ff fdf0 	bl	80009fc <GPIO_Init>
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40020000 	.word	0x40020000

08000e28 <init_Control_pin>:

	//disable Slave
	SS_DISABLE;
}
void init_Control_pin(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE);
 8000e2e:	2101      	movs	r1, #1
 8000e30:	2002      	movs	r0, #2
 8000e32:	f7ff fe71 	bl	8000b18 <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8000e36:	2301      	movs	r3, #1
 8000e38:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	717b      	strb	r3, [r7, #5]
	GPIO_InitStruct.GPIO_Pin = (CS_Pin);
 8000e42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e46:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB,&GPIO_InitStruct);
 8000e48:	463b      	mov	r3, r7
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4803      	ldr	r0, [pc, #12]	; (8000e5c <init_Control_pin+0x34>)
 8000e4e:	f7ff fdd5 	bl	80009fc <GPIO_Init>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40020400 	.word	0x40020400

08000e60 <SPI_Transfer>:
uint8_t SPI_Transfer(uint8_t byte, SPI_TypeDef* SPIx)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	6039      	str	r1, [r7, #0]
 8000e6a:	71fb      	strb	r3, [r7, #7]
	//write Data to register
	SPIx->DR = byte;
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	819a      	strh	r2, [r3, #12]
	//TODO: Time out Condition
	while(!(SPIx->SR & SPI_SR_TXE));
 8000e74:	bf00      	nop
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	891b      	ldrh	r3, [r3, #8]
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	f003 0302 	and.w	r3, r3, #2
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d0f8      	beq.n	8000e76 <SPI_Transfer+0x16>
	//wait until data recieved
	while(!(SPIx->SR & (SPI_SR_RXNE)));
 8000e84:	bf00      	nop
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	891b      	ldrh	r3, [r3, #8]
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d0f8      	beq.n	8000e86 <SPI_Transfer+0x26>
	//wait for transfer to finish
	while(SPIx->SR & SPI_SR_BSY);
 8000e94:	bf00      	nop
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	891b      	ldrh	r3, [r3, #8]
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d1f8      	bne.n	8000e96 <SPI_Transfer+0x36>
	return (SPIx->DR&0xFF);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	899b      	ldrh	r3, [r3, #12]
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	b2db      	uxtb	r3, r3
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <BMP280_GetID>:
uint8_t BMP280_GetID(void)
{		int8_t data;
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
		BMP280_Read_Register(id,&data,1,SPI3);
 8000ebe:	1df9      	adds	r1, r7, #7
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <BMP280_GetID+0x20>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	20d0      	movs	r0, #208	; 0xd0
 8000ec6:	f000 f825 	bl	8000f14 <BMP280_Read_Register>
		return data;
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	b2db      	uxtb	r3, r3
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40003c00 	.word	0x40003c00

08000edc <BMP280_Begin>:

BMPStatus_t  BMP280_Begin(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	init_Control_pin();
 8000ee0:	f7ff ffa2 	bl	8000e28 <init_Control_pin>
	TM_SPI_Init(SPI3,TM_SPI_PinsPack_1);
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	480a      	ldr	r0, [pc, #40]	; (8000f10 <BMP280_Begin+0x34>)
 8000ee8:	f000 ff44 	bl	8001d74 <TM_SPI_Init>
	if (BMP280_GetID()== 0x58)
 8000eec:	f7ff ffe4 	bl	8000eb8 <BMP280_GetID>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b58      	cmp	r3, #88	; 0x58
 8000ef4:	d109      	bne.n	8000f0a <BMP280_Begin+0x2e>
	{
		BMP280_Write_Register(Sreset,BMP280_Soft_Reset,SPI3);
 8000ef6:	4a06      	ldr	r2, [pc, #24]	; (8000f10 <BMP280_Begin+0x34>)
 8000ef8:	21b6      	movs	r1, #182	; 0xb6
 8000efa:	20e0      	movs	r0, #224	; 0xe0
 8000efc:	f000 f968 	bl	80011d0 <BMP280_Write_Register>
		//TODO: 4ms delay
		DelayMs(4);
 8000f00:	2004      	movs	r0, #4
 8000f02:	f000 fca7 	bl	8001854 <DelayMs>
		return BMP_OK;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e000      	b.n	8000f0c <BMP280_Begin+0x30>
	}

	return BMP_ERROR;
 8000f0a:	2302      	movs	r3, #2
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40003c00 	.word	0x40003c00

08000f14 <BMP280_Read_Register>:

BMPStatus_t BMP280_Read_Register(uint8_t reg,int8_t* regdata,uint8_t len, SPI_TypeDef* SPIx)
{
 8000f14:	b590      	push	{r4, r7, lr}
 8000f16:	b087      	sub	sp, #28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607b      	str	r3, [r7, #4]
 8000f1e:	4603      	mov	r3, r0
 8000f20:	73fb      	strb	r3, [r7, #15]
 8000f22:	4613      	mov	r3, r2
 8000f24:	73bb      	strb	r3, [r7, #14]
	//signal device read by setting bit 7
	uint8_t RR = reg | 0x80;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f2c:	74fb      	strb	r3, [r7, #19]
	//SPI Transfer
	SS_ENABLE;
 8000f2e:	4a14      	ldr	r2, [pc, #80]	; (8000f80 <BMP280_Read_Register+0x6c>)
 8000f30:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <BMP280_Read_Register+0x6c>)
 8000f32:	695b      	ldr	r3, [r3, #20]
 8000f34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f38:	6153      	str	r3, [r2, #20]
	SPI_Transfer(RR,SPIx);
 8000f3a:	7cfb      	ldrb	r3, [r7, #19]
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff ff8e 	bl	8000e60 <SPI_Transfer>
	for (int i = 0; i < len; ++i)
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	e00c      	b.n	8000f64 <BMP280_Read_Register+0x50>
	{
		regdata[i] = SPI_Transfer(0xFF,SPIx);
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	68ba      	ldr	r2, [r7, #8]
 8000f4e:	18d4      	adds	r4, r2, r3
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	20ff      	movs	r0, #255	; 0xff
 8000f54:	f7ff ff84 	bl	8000e60 <SPI_Transfer>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	b25b      	sxtb	r3, r3
 8000f5c:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i < len; ++i)
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	3301      	adds	r3, #1
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	7bba      	ldrb	r2, [r7, #14]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	dcee      	bgt.n	8000f4a <BMP280_Read_Register+0x36>
	}
	SS_DISABLE;
 8000f6c:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <BMP280_Read_Register+0x6c>)
 8000f6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f72:	615a      	str	r2, [r3, #20]
	return BMP_OK;
 8000f74:	2301      	movs	r3, #1
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	371c      	adds	r7, #28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd90      	pop	{r4, r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40020400 	.word	0x40020400

08000f84 <BMP280_Configure_CTRLMEAS>:
BMPStatus_t BMP280_Configure_CTRLMEAS(uint8_t osrs_t,uint8_t osrs_p,uint8_t mode)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	460b      	mov	r3, r1
 8000f90:	71bb      	strb	r3, [r7, #6]
 8000f92:	4613      	mov	r3, r2
 8000f94:	717b      	strb	r3, [r7, #5]
	//combine settings into byte for register
	int8_t mcbyte,flag;
	BMP280_Read_Register(ctrl_meas,&mcbyte,1,SPI3);
 8000f96:	f107 010f 	add.w	r1, r7, #15
 8000f9a:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <BMP280_Configure_CTRLMEAS+0x74>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	20f4      	movs	r0, #244	; 0xf4
 8000fa0:	f7ff ffb8 	bl	8000f14 <BMP280_Read_Register>
	mcbyte |= (osrs_p | osrs_t |mode);
 8000fa4:	79ba      	ldrb	r2, [r7, #6]
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	797b      	ldrb	r3, [r7, #5]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	b25a      	sxtb	r2, r3
 8000fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	b25b      	sxtb	r3, r3
 8000fbc:	73fb      	strb	r3, [r7, #15]
	BMP280_Write_Register(ctrl_meas,mcbyte,SPI3);
 8000fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	4a0c      	ldr	r2, [pc, #48]	; (8000ff8 <BMP280_Configure_CTRLMEAS+0x74>)
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	20f4      	movs	r0, #244	; 0xf4
 8000fca:	f000 f901 	bl	80011d0 <BMP280_Write_Register>
	//verify register settings successful
	BMP280_Read_Register(ctrl_meas,&flag,1,SPI3);
 8000fce:	f107 010e 	add.w	r1, r7, #14
 8000fd2:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <BMP280_Configure_CTRLMEAS+0x74>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	20f4      	movs	r0, #244	; 0xf4
 8000fd8:	f7ff ff9c 	bl	8000f14 <BMP280_Read_Register>
	if(flag != mcbyte)
 8000fdc:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8000fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d001      	beq.n	8000fec <BMP280_Configure_CTRLMEAS+0x68>
	{
		return BMP_WRITE_ERROR;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e000      	b.n	8000fee <BMP280_Configure_CTRLMEAS+0x6a>
	}
	return BMP_OK;
 8000fec:	2301      	movs	r3, #1
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40003c00 	.word	0x40003c00

08000ffc <BMP280_Configure_Config>:

BMPStatus_t BMP280_Configure_Config(uint8_t tsb, uint8_t filter, uint8_t spi3en)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
 8001006:	460b      	mov	r3, r1
 8001008:	71bb      	strb	r3, [r7, #6]
 800100a:	4613      	mov	r3, r2
 800100c:	717b      	strb	r3, [r7, #5]
	int8_t flag,config_byte = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	73fb      	strb	r3, [r7, #15]
	config_byte |= tsb | filter |spi3en;
 8001012:	79fa      	ldrb	r2, [r7, #7]
 8001014:	79bb      	ldrb	r3, [r7, #6]
 8001016:	4313      	orrs	r3, r2
 8001018:	b2da      	uxtb	r2, r3
 800101a:	797b      	ldrb	r3, [r7, #5]
 800101c:	4313      	orrs	r3, r2
 800101e:	b2db      	uxtb	r3, r3
 8001020:	b25a      	sxtb	r2, r3
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	4313      	orrs	r3, r2
 8001026:	73fb      	strb	r3, [r7, #15]
	BMP280_Write_Register(config,config_byte,SPI3);
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	4a0c      	ldr	r2, [pc, #48]	; (800105c <BMP280_Configure_Config+0x60>)
 800102c:	4619      	mov	r1, r3
 800102e:	20f5      	movs	r0, #245	; 0xf5
 8001030:	f000 f8ce 	bl	80011d0 <BMP280_Write_Register>
	BMP280_Read_Register(config,&flag,1,SPI3);
 8001034:	f107 010e 	add.w	r1, r7, #14
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <BMP280_Configure_Config+0x60>)
 800103a:	2201      	movs	r2, #1
 800103c:	20f5      	movs	r0, #245	; 0xf5
 800103e:	f7ff ff69 	bl	8000f14 <BMP280_Read_Register>
	if(flag != config_byte)
 8001042:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001046:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800104a:	429a      	cmp	r2, r3
 800104c:	d001      	beq.n	8001052 <BMP280_Configure_Config+0x56>
		{
			return BMP_WRITE_ERROR;
 800104e:	2303      	movs	r3, #3
 8001050:	e000      	b.n	8001054 <BMP280_Configure_Config+0x58>
		}
	return BMP_OK;
 8001052:	2301      	movs	r3, #1
}
 8001054:	4618      	mov	r0, r3
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40003c00 	.word	0x40003c00

08001060 <BMP280_GetCoeff>:

BMPStatus_t BMP280_GetCoeff(BMP280_trim_t* bmpt)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	//start at base address

	int8_t trim[24]= {0};
 8001068:	f107 0308 	add.w	r3, r7, #8
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
 8001078:	615a      	str	r2, [r3, #20]
	BMP280_Read_Register(calib_0,trim,BMP280_CALIB_DATA_LEN,SPI3);
 800107a:	f107 0108 	add.w	r1, r7, #8
 800107e:	4b53      	ldr	r3, [pc, #332]	; (80011cc <BMP280_GetCoeff+0x16c>)
 8001080:	2218      	movs	r2, #24
 8001082:	2088      	movs	r0, #136	; 0x88
 8001084:	f7ff ff46 	bl	8000f14 <BMP280_Read_Register>
	/* Temperature trim parameter read out*/
	bmpt->dig_T1 = 			((uint8_t)trim[1]<<8) |((uint8_t)trim[0]);
 8001088:	f997 3009 	ldrsb.w	r3, [r7, #9]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	021b      	lsls	r3, r3, #8
 8001090:	b21a      	sxth	r2, r3
 8001092:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	b21b      	sxth	r3, r3
 800109a:	4313      	orrs	r3, r2
 800109c:	b21b      	sxth	r3, r3
 800109e:	b29a      	uxth	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	801a      	strh	r2, [r3, #0]
	bmpt->dig_T2 = (int16_t)((uint8_t)trim[3]<<8) |((uint8_t)trim[2]);
 80010a4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	b21b      	sxth	r3, r3
 80010b6:	4313      	orrs	r3, r2
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	805a      	strh	r2, [r3, #2]
	bmpt->dig_T3 = (int16_t)((int8_t)trim[5]<<8) |((int8_t)trim[4]);
 80010be:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	b21a      	sxth	r2, r3
 80010c6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	4313      	orrs	r3, r2
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	809a      	strh	r2, [r3, #4]
	/*Preaseure Measurement Readouts */
	bmpt->dig_P1 = 			((uint8_t)trim[7]<<8) |((uint8_t)trim[6]);
 80010d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	b21a      	sxth	r2, r3
 80010de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	80da      	strh	r2, [r3, #6]
	bmpt->dig_P2 = (int16_t)(((uint8_t)trim[9]<<8) |((uint8_t)trim[8]));
 80010f0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	021b      	lsls	r3, r3, #8
 80010f8:	b21a      	sxth	r2, r3
 80010fa:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	b21b      	sxth	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	b21a      	sxth	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	811a      	strh	r2, [r3, #8]
	bmpt->dig_P3 = (int16_t)(((uint8_t)trim[11]<<8)|((uint8_t)trim[10]));
 800110a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	021b      	lsls	r3, r3, #8
 8001112:	b21a      	sxth	r2, r3
 8001114:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	b21b      	sxth	r3, r3
 800111c:	4313      	orrs	r3, r2
 800111e:	b21a      	sxth	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	815a      	strh	r2, [r3, #10]
	bmpt->dig_P4 = (int16_t)(((uint8_t)trim[13]<<8)|((uint8_t)trim[12]));
 8001124:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001128:	b2db      	uxtb	r3, r3
 800112a:	021b      	lsls	r3, r3, #8
 800112c:	b21a      	sxth	r2, r3
 800112e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001132:	b2db      	uxtb	r3, r3
 8001134:	b21b      	sxth	r3, r3
 8001136:	4313      	orrs	r3, r2
 8001138:	b21a      	sxth	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	819a      	strh	r2, [r3, #12]
	bmpt->dig_P5 = (((uint8_t)trim[15]<<8)|((uint8_t)trim[14]));
 800113e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001142:	b2db      	uxtb	r3, r3
 8001144:	021b      	lsls	r3, r3, #8
 8001146:	b21a      	sxth	r2, r3
 8001148:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	b21b      	sxth	r3, r3
 8001150:	4313      	orrs	r3, r2
 8001152:	b21a      	sxth	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	81da      	strh	r2, [r3, #14]
	bmpt->dig_P6 = (int16_t)(((uint8_t)trim[17]<<8)|((uint8_t)trim[16]));
 8001158:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	021b      	lsls	r3, r3, #8
 8001160:	b21a      	sxth	r2, r3
 8001162:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8001166:	b2db      	uxtb	r3, r3
 8001168:	b21b      	sxth	r3, r3
 800116a:	4313      	orrs	r3, r2
 800116c:	b21a      	sxth	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	821a      	strh	r2, [r3, #16]
	bmpt->dig_P7 = (int16_t)(((uint8_t)trim[19]<<8)|((uint8_t)trim[18]));
 8001172:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001176:	b2db      	uxtb	r3, r3
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	b21a      	sxth	r2, r3
 800117c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	b21b      	sxth	r3, r3
 8001184:	4313      	orrs	r3, r2
 8001186:	b21a      	sxth	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	825a      	strh	r2, [r3, #18]
	bmpt->dig_P8 = (int16_t)(((uint8_t)trim[21]<<8)|((uint8_t)trim[20]));
 800118c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001190:	b2db      	uxtb	r3, r3
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	b21a      	sxth	r2, r3
 8001196:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	b21b      	sxth	r3, r3
 800119e:	4313      	orrs	r3, r2
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	829a      	strh	r2, [r3, #20]
	bmpt->dig_P9 = (int16_t)(((uint8_t)trim[23]<<8)|((uint8_t)trim[22]));
 80011a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	b21a      	sxth	r2, r3
 80011b0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	b21b      	sxth	r3, r3
 80011b8:	4313      	orrs	r3, r2
 80011ba:	b21a      	sxth	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	82da      	strh	r2, [r3, #22]
	return BMP_OK;
 80011c0:	2301      	movs	r3, #1
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3720      	adds	r7, #32
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40003c00 	.word	0x40003c00

080011d0 <BMP280_Write_Register>:
BMPStatus_t BMP280_Write_Register(uint8_t reg,uint8_t regdata,SPI_TypeDef* SPIx)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	603a      	str	r2, [r7, #0]
 80011da:	71fb      	strb	r3, [r7, #7]
 80011dc:	460b      	mov	r3, r1
 80011de:	71bb      	strb	r3, [r7, #6]
	//signal device write by setting bit 7 high
	uint8_t RR = reg & 0x7F;
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011e6:	73fb      	strb	r3, [r7, #15]
	SS_ENABLE;
 80011e8:	4a0c      	ldr	r2, [pc, #48]	; (800121c <BMP280_Write_Register+0x4c>)
 80011ea:	4b0c      	ldr	r3, [pc, #48]	; (800121c <BMP280_Write_Register+0x4c>)
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80011f2:	6153      	str	r3, [r2, #20]
	SPI_Transfer(RR,SPIx);
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	6839      	ldr	r1, [r7, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fe31 	bl	8000e60 <SPI_Transfer>
	SPI_Transfer(regdata&0xFF,SPI3);
 80011fe:	79bb      	ldrb	r3, [r7, #6]
 8001200:	4907      	ldr	r1, [pc, #28]	; (8001220 <BMP280_Write_Register+0x50>)
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff fe2c 	bl	8000e60 <SPI_Transfer>
	SS_DISABLE;
 8001208:	4b04      	ldr	r3, [pc, #16]	; (800121c <BMP280_Write_Register+0x4c>)
 800120a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800120e:	615a      	str	r2, [r3, #20]
	return BMP_OK;
 8001210:	2301      	movs	r3, #1
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40020400 	.word	0x40020400
 8001220:	40003c00 	.word	0x40003c00

08001224 <BMP280_GetTemp>:
 * @brief Returns the compensated Temperature in degrees celsius to
 * @param None
 * @retval double temp
 */
float BMP280_GetTemp(void)
{
 8001224:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001228:	b088      	sub	sp, #32
 800122a:	af00      	add	r7, sp, #0
	//perform a test read
	int8_t Ttemp[3];
	BMP280_Read_Register(temp_msb,Ttemp,3,SPI3);
 800122c:	1d39      	adds	r1, r7, #4
 800122e:	4b61      	ldr	r3, [pc, #388]	; (80013b4 <BMP280_GetTemp+0x190>)
 8001230:	2203      	movs	r2, #3
 8001232:	20fa      	movs	r0, #250	; 0xfa
 8001234:	f7ff fe6e 	bl	8000f14 <BMP280_Read_Register>
	int32_t T_val = ((Ttemp[0]&0xFF)<<16)|((Ttemp[1]&0xFF)<<8)|((Ttemp[2]&0xF0));
 8001238:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800123c:	041b      	lsls	r3, r3, #16
 800123e:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
 8001242:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001246:	021b      	lsls	r3, r3, #8
 8001248:	b29b      	uxth	r3, r3
 800124a:	431a      	orrs	r2, r3
 800124c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001250:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001254:	4313      	orrs	r3, r2
 8001256:	61fb      	str	r3, [r7, #28]
	T_val= T_val>> 4;
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	111b      	asrs	r3, r3, #4
 800125c:	61fb      	str	r3, [r7, #28]
	//compensate Temperature from datasheet
	double var1 = (((double)T_val)/16384.0 - ((double)bmp.dig_T1)/1024.0) * ((double)bmp.dig_T2);
 800125e:	69f8      	ldr	r0, [r7, #28]
 8001260:	f7ff f904 	bl	800046c <__aeabi_i2d>
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	4b53      	ldr	r3, [pc, #332]	; (80013b8 <BMP280_GetTemp+0x194>)
 800126a:	f7ff fa8f 	bl	800078c <__aeabi_ddiv>
 800126e:	4603      	mov	r3, r0
 8001270:	460c      	mov	r4, r1
 8001272:	4625      	mov	r5, r4
 8001274:	461c      	mov	r4, r3
 8001276:	4b51      	ldr	r3, [pc, #324]	; (80013bc <BMP280_GetTemp+0x198>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff f8e6 	bl	800044c <__aeabi_ui2d>
 8001280:	f04f 0200 	mov.w	r2, #0
 8001284:	4b4e      	ldr	r3, [pc, #312]	; (80013c0 <BMP280_GetTemp+0x19c>)
 8001286:	f7ff fa81 	bl	800078c <__aeabi_ddiv>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4620      	mov	r0, r4
 8001290:	4629      	mov	r1, r5
 8001292:	f7fe ff9d 	bl	80001d0 <__aeabi_dsub>
 8001296:	4603      	mov	r3, r0
 8001298:	460c      	mov	r4, r1
 800129a:	4625      	mov	r5, r4
 800129c:	461c      	mov	r4, r3
 800129e:	4b47      	ldr	r3, [pc, #284]	; (80013bc <BMP280_GetTemp+0x198>)
 80012a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f8e1 	bl	800046c <__aeabi_i2d>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4620      	mov	r0, r4
 80012b0:	4629      	mov	r1, r5
 80012b2:	f7ff f941 	bl	8000538 <__aeabi_dmul>
 80012b6:	4603      	mov	r3, r0
 80012b8:	460c      	mov	r4, r1
 80012ba:	e9c7 3404 	strd	r3, r4, [r7, #16]
	double var2 = ((((double)T_val)/131072.0 - ((double)bmp.dig_T1)/8192.0) * (((double)T_val)/131072.0 - ((double) bmp.dig_T1)/8192.0)) * ((double)bmp.dig_T3);
 80012be:	69f8      	ldr	r0, [r7, #28]
 80012c0:	f7ff f8d4 	bl	800046c <__aeabi_i2d>
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80012cc:	f7ff fa5e 	bl	800078c <__aeabi_ddiv>
 80012d0:	4603      	mov	r3, r0
 80012d2:	460c      	mov	r4, r1
 80012d4:	4625      	mov	r5, r4
 80012d6:	461c      	mov	r4, r3
 80012d8:	4b38      	ldr	r3, [pc, #224]	; (80013bc <BMP280_GetTemp+0x198>)
 80012da:	881b      	ldrh	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f8b5 	bl	800044c <__aeabi_ui2d>
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	4b37      	ldr	r3, [pc, #220]	; (80013c4 <BMP280_GetTemp+0x1a0>)
 80012e8:	f7ff fa50 	bl	800078c <__aeabi_ddiv>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4620      	mov	r0, r4
 80012f2:	4629      	mov	r1, r5
 80012f4:	f7fe ff6c 	bl	80001d0 <__aeabi_dsub>
 80012f8:	4603      	mov	r3, r0
 80012fa:	460c      	mov	r4, r1
 80012fc:	4625      	mov	r5, r4
 80012fe:	461c      	mov	r4, r3
 8001300:	69f8      	ldr	r0, [r7, #28]
 8001302:	f7ff f8b3 	bl	800046c <__aeabi_i2d>
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800130e:	f7ff fa3d 	bl	800078c <__aeabi_ddiv>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4690      	mov	r8, r2
 8001318:	4699      	mov	r9, r3
 800131a:	4b28      	ldr	r3, [pc, #160]	; (80013bc <BMP280_GetTemp+0x198>)
 800131c:	881b      	ldrh	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff f894 	bl	800044c <__aeabi_ui2d>
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	4b26      	ldr	r3, [pc, #152]	; (80013c4 <BMP280_GetTemp+0x1a0>)
 800132a:	f7ff fa2f 	bl	800078c <__aeabi_ddiv>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	4640      	mov	r0, r8
 8001334:	4649      	mov	r1, r9
 8001336:	f7fe ff4b 	bl	80001d0 <__aeabi_dsub>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4620      	mov	r0, r4
 8001340:	4629      	mov	r1, r5
 8001342:	f7ff f8f9 	bl	8000538 <__aeabi_dmul>
 8001346:	4603      	mov	r3, r0
 8001348:	460c      	mov	r4, r1
 800134a:	4625      	mov	r5, r4
 800134c:	461c      	mov	r4, r3
 800134e:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <BMP280_GetTemp+0x198>)
 8001350:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff f889 	bl	800046c <__aeabi_i2d>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	4620      	mov	r0, r4
 8001360:	4629      	mov	r1, r5
 8001362:	f7ff f8e9 	bl	8000538 <__aeabi_dmul>
 8001366:	4603      	mov	r3, r0
 8001368:	460c      	mov	r4, r1
 800136a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	t_fine = var1+var2; //for storage in global variable
 800136e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001372:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001376:	f7fe ff2d 	bl	80001d4 <__adddf3>
 800137a:	4603      	mov	r3, r0
 800137c:	460c      	mov	r4, r1
 800137e:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <BMP280_GetTemp+0x1a4>)
 8001380:	e882 0018 	stmia.w	r2, {r3, r4}
	return (t_fine)/5120.00;
 8001384:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <BMP280_GetTemp+0x1a4>)
 8001386:	e9d3 0100 	ldrd	r0, r1, [r3]
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <BMP280_GetTemp+0x1a8>)
 8001390:	f7ff f9fc 	bl	800078c <__aeabi_ddiv>
 8001394:	4603      	mov	r3, r0
 8001396:	460c      	mov	r4, r1
 8001398:	4618      	mov	r0, r3
 800139a:	4621      	mov	r1, r4
 800139c:	f7ff fade 	bl	800095c <__aeabi_d2f>
 80013a0:	4603      	mov	r3, r0
 80013a2:	ee07 3a90 	vmov	s15, r3

}
 80013a6:	eeb0 0a67 	vmov.f32	s0, s15
 80013aa:	3720      	adds	r7, #32
 80013ac:	46bd      	mov	sp, r7
 80013ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013b2:	bf00      	nop
 80013b4:	40003c00 	.word	0x40003c00
 80013b8:	40d00000 	.word	0x40d00000
 80013bc:	20000060 	.word	0x20000060
 80013c0:	40900000 	.word	0x40900000
 80013c4:	40c00000 	.word	0x40c00000
 80013c8:	20000078 	.word	0x20000078
 80013cc:	40b40000 	.word	0x40b40000

080013d0 <BMP280_GetPressure>:
 * 		  Note: xlsb bit is 4 bits long not 8
 * @param None
 * @retval float pressure
 */
float BMP280_GetPressure(void)
{
 80013d0:	b5b0      	push	{r4, r5, r7, lr}
 80013d2:	b08a      	sub	sp, #40	; 0x28
 80013d4:	af00      	add	r7, sp, #0
	//Calculate t_fine without returning temp val
	int8_t press[3];
	BMP280_Read_Register(press_msb,press,3,SPI3);
 80013d6:	1d39      	adds	r1, r7, #4
 80013d8:	4bc7      	ldr	r3, [pc, #796]	; (80016f8 <BMP280_GetPressure+0x328>)
 80013da:	2203      	movs	r2, #3
 80013dc:	20f7      	movs	r0, #247	; 0xf7
 80013de:	f7ff fd99 	bl	8000f14 <BMP280_Read_Register>
	//combine bytes into 20 bit word
	int32_t P_val = ((press[0]&0xFF)<<16|(press[1]&0xFF)<<8 |(press[2]&0xFF))>>4;
 80013e2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80013e6:	041b      	lsls	r3, r3, #16
 80013e8:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
 80013ec:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80013f0:	021b      	lsls	r3, r3, #8
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	431a      	orrs	r2, r3
 80013f6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	4313      	orrs	r3, r2
 80013fe:	111b      	asrs	r3, r3, #4
 8001400:	627b      	str	r3, [r7, #36]	; 0x24

	//Compensation formula
	double var1 = t_fine/2 - 64000;
 8001402:	4bbe      	ldr	r3, [pc, #760]	; (80016fc <BMP280_GetPressure+0x32c>)
 8001404:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001410:	f7ff f9bc 	bl	800078c <__aeabi_ddiv>
 8001414:	4603      	mov	r3, r0
 8001416:	460c      	mov	r4, r1
 8001418:	4618      	mov	r0, r3
 800141a:	4621      	mov	r1, r4
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	4bb7      	ldr	r3, [pc, #732]	; (8001700 <BMP280_GetPressure+0x330>)
 8001422:	f7fe fed5 	bl	80001d0 <__aeabi_dsub>
 8001426:	4603      	mov	r3, r0
 8001428:	460c      	mov	r4, r1
 800142a:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double var2 = var1*var1*((double)bmp.dig_P6)/32768.0;
 800142e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001432:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001436:	f7ff f87f 	bl	8000538 <__aeabi_dmul>
 800143a:	4603      	mov	r3, r0
 800143c:	460c      	mov	r4, r1
 800143e:	4625      	mov	r5, r4
 8001440:	461c      	mov	r4, r3
 8001442:	4bb0      	ldr	r3, [pc, #704]	; (8001704 <BMP280_GetPressure+0x334>)
 8001444:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f80f 	bl	800046c <__aeabi_i2d>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4620      	mov	r0, r4
 8001454:	4629      	mov	r1, r5
 8001456:	f7ff f86f 	bl	8000538 <__aeabi_dmul>
 800145a:	4603      	mov	r3, r0
 800145c:	460c      	mov	r4, r1
 800145e:	4618      	mov	r0, r3
 8001460:	4621      	mov	r1, r4
 8001462:	f04f 0200 	mov.w	r2, #0
 8001466:	4ba8      	ldr	r3, [pc, #672]	; (8001708 <BMP280_GetPressure+0x338>)
 8001468:	f7ff f990 	bl	800078c <__aeabi_ddiv>
 800146c:	4603      	mov	r3, r0
 800146e:	460c      	mov	r4, r1
 8001470:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var2 = var2+var1*((double) bmp.dig_P5)*2.0;
 8001474:	4ba3      	ldr	r3, [pc, #652]	; (8001704 <BMP280_GetPressure+0x334>)
 8001476:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800147a:	4618      	mov	r0, r3
 800147c:	f7fe fff6 	bl	800046c <__aeabi_i2d>
 8001480:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001484:	f7ff f858 	bl	8000538 <__aeabi_dmul>
 8001488:	4603      	mov	r3, r0
 800148a:	460c      	mov	r4, r1
 800148c:	4618      	mov	r0, r3
 800148e:	4621      	mov	r1, r4
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	f7fe fe9e 	bl	80001d4 <__adddf3>
 8001498:	4603      	mov	r3, r0
 800149a:	460c      	mov	r4, r1
 800149c:	461a      	mov	r2, r3
 800149e:	4623      	mov	r3, r4
 80014a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014a4:	f7fe fe96 	bl	80001d4 <__adddf3>
 80014a8:	4603      	mov	r3, r0
 80014aa:	460c      	mov	r4, r1
 80014ac:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var2 = (var2/4.0)+(((double)bmp.dig_P4)*65536.0);
 80014b0:	f04f 0200 	mov.w	r2, #0
 80014b4:	4b95      	ldr	r3, [pc, #596]	; (800170c <BMP280_GetPressure+0x33c>)
 80014b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014ba:	f7ff f967 	bl	800078c <__aeabi_ddiv>
 80014be:	4603      	mov	r3, r0
 80014c0:	460c      	mov	r4, r1
 80014c2:	4625      	mov	r5, r4
 80014c4:	461c      	mov	r4, r3
 80014c6:	4b8f      	ldr	r3, [pc, #572]	; (8001704 <BMP280_GetPressure+0x334>)
 80014c8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7fe ffcd 	bl	800046c <__aeabi_i2d>
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	4b8e      	ldr	r3, [pc, #568]	; (8001710 <BMP280_GetPressure+0x340>)
 80014d8:	f7ff f82e 	bl	8000538 <__aeabi_dmul>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	4620      	mov	r0, r4
 80014e2:	4629      	mov	r1, r5
 80014e4:	f7fe fe76 	bl	80001d4 <__adddf3>
 80014e8:	4603      	mov	r3, r0
 80014ea:	460c      	mov	r4, r1
 80014ec:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((double)bmp.dig_P3)*var1*var1/524288.0+((double)bmp.dig_P2*var1)/524288.0;
 80014f0:	4b84      	ldr	r3, [pc, #528]	; (8001704 <BMP280_GetPressure+0x334>)
 80014f2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7fe ffb8 	bl	800046c <__aeabi_i2d>
 80014fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001500:	f7ff f81a 	bl	8000538 <__aeabi_dmul>
 8001504:	4603      	mov	r3, r0
 8001506:	460c      	mov	r4, r1
 8001508:	4618      	mov	r0, r3
 800150a:	4621      	mov	r1, r4
 800150c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001510:	f7ff f812 	bl	8000538 <__aeabi_dmul>
 8001514:	4603      	mov	r3, r0
 8001516:	460c      	mov	r4, r1
 8001518:	4618      	mov	r0, r3
 800151a:	4621      	mov	r1, r4
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	4b7c      	ldr	r3, [pc, #496]	; (8001714 <BMP280_GetPressure+0x344>)
 8001522:	f7ff f933 	bl	800078c <__aeabi_ddiv>
 8001526:	4603      	mov	r3, r0
 8001528:	460c      	mov	r4, r1
 800152a:	4625      	mov	r5, r4
 800152c:	461c      	mov	r4, r3
 800152e:	4b75      	ldr	r3, [pc, #468]	; (8001704 <BMP280_GetPressure+0x334>)
 8001530:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001534:	4618      	mov	r0, r3
 8001536:	f7fe ff99 	bl	800046c <__aeabi_i2d>
 800153a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800153e:	f7fe fffb 	bl	8000538 <__aeabi_dmul>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4610      	mov	r0, r2
 8001548:	4619      	mov	r1, r3
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	4b71      	ldr	r3, [pc, #452]	; (8001714 <BMP280_GetPressure+0x344>)
 8001550:	f7ff f91c 	bl	800078c <__aeabi_ddiv>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4620      	mov	r0, r4
 800155a:	4629      	mov	r1, r5
 800155c:	f7fe fe3a 	bl	80001d4 <__adddf3>
 8001560:	4603      	mov	r3, r0
 8001562:	460c      	mov	r4, r1
 8001564:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = (1.0+var1/32768)*((double)bmp.dig_P1);
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	4b66      	ldr	r3, [pc, #408]	; (8001708 <BMP280_GetPressure+0x338>)
 800156e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001572:	f7ff f90b 	bl	800078c <__aeabi_ddiv>
 8001576:	4603      	mov	r3, r0
 8001578:	460c      	mov	r4, r1
 800157a:	4618      	mov	r0, r3
 800157c:	4621      	mov	r1, r4
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	4b65      	ldr	r3, [pc, #404]	; (8001718 <BMP280_GetPressure+0x348>)
 8001584:	f7fe fe26 	bl	80001d4 <__adddf3>
 8001588:	4603      	mov	r3, r0
 800158a:	460c      	mov	r4, r1
 800158c:	4625      	mov	r5, r4
 800158e:	461c      	mov	r4, r3
 8001590:	4b5c      	ldr	r3, [pc, #368]	; (8001704 <BMP280_GetPressure+0x334>)
 8001592:	88db      	ldrh	r3, [r3, #6]
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe ff59 	bl	800044c <__aeabi_ui2d>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4620      	mov	r0, r4
 80015a0:	4629      	mov	r1, r5
 80015a2:	f7fe ffc9 	bl	8000538 <__aeabi_dmul>
 80015a6:	4603      	mov	r3, r0
 80015a8:	460c      	mov	r4, r1
 80015aa:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double p = 1048576-(double)P_val;
 80015ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015b0:	f7fe ff5c 	bl	800046c <__aeabi_i2d>
 80015b4:	4603      	mov	r3, r0
 80015b6:	460c      	mov	r4, r1
 80015b8:	461a      	mov	r2, r3
 80015ba:	4623      	mov	r3, r4
 80015bc:	f04f 0000 	mov.w	r0, #0
 80015c0:	4956      	ldr	r1, [pc, #344]	; (800171c <BMP280_GetPressure+0x34c>)
 80015c2:	f7fe fe05 	bl	80001d0 <__aeabi_dsub>
 80015c6:	4603      	mov	r3, r0
 80015c8:	460c      	mov	r4, r1
 80015ca:	e9c7 3402 	strd	r3, r4, [r7, #8]
	p = (p-(var2/4096.0))*6250.0/var1;
 80015ce:	f04f 0200 	mov.w	r2, #0
 80015d2:	4b53      	ldr	r3, [pc, #332]	; (8001720 <BMP280_GetPressure+0x350>)
 80015d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015d8:	f7ff f8d8 	bl	800078c <__aeabi_ddiv>
 80015dc:	4603      	mov	r3, r0
 80015de:	460c      	mov	r4, r1
 80015e0:	461a      	mov	r2, r3
 80015e2:	4623      	mov	r3, r4
 80015e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015e8:	f7fe fdf2 	bl	80001d0 <__aeabi_dsub>
 80015ec:	4603      	mov	r3, r0
 80015ee:	460c      	mov	r4, r1
 80015f0:	4618      	mov	r0, r3
 80015f2:	4621      	mov	r1, r4
 80015f4:	a33e      	add	r3, pc, #248	; (adr r3, 80016f0 <BMP280_GetPressure+0x320>)
 80015f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fa:	f7fe ff9d 	bl	8000538 <__aeabi_dmul>
 80015fe:	4603      	mov	r3, r0
 8001600:	460c      	mov	r4, r1
 8001602:	4618      	mov	r0, r3
 8001604:	4621      	mov	r1, r4
 8001606:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800160a:	f7ff f8bf 	bl	800078c <__aeabi_ddiv>
 800160e:	4603      	mov	r3, r0
 8001610:	460c      	mov	r4, r1
 8001612:	e9c7 3402 	strd	r3, r4, [r7, #8]
	var1 = ((double)bmp.dig_P9)*p*p/2147483648.0;
 8001616:	4b3b      	ldr	r3, [pc, #236]	; (8001704 <BMP280_GetPressure+0x334>)
 8001618:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe ff25 	bl	800046c <__aeabi_i2d>
 8001622:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001626:	f7fe ff87 	bl	8000538 <__aeabi_dmul>
 800162a:	4603      	mov	r3, r0
 800162c:	460c      	mov	r4, r1
 800162e:	4618      	mov	r0, r3
 8001630:	4621      	mov	r1, r4
 8001632:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001636:	f7fe ff7f 	bl	8000538 <__aeabi_dmul>
 800163a:	4603      	mov	r3, r0
 800163c:	460c      	mov	r4, r1
 800163e:	4618      	mov	r0, r3
 8001640:	4621      	mov	r1, r4
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	4b37      	ldr	r3, [pc, #220]	; (8001724 <BMP280_GetPressure+0x354>)
 8001648:	f7ff f8a0 	bl	800078c <__aeabi_ddiv>
 800164c:	4603      	mov	r3, r0
 800164e:	460c      	mov	r4, r1
 8001650:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = p*((double)bmp.dig_P8)/32768.0;
 8001654:	4b2b      	ldr	r3, [pc, #172]	; (8001704 <BMP280_GetPressure+0x334>)
 8001656:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe ff06 	bl	800046c <__aeabi_i2d>
 8001660:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001664:	f7fe ff68 	bl	8000538 <__aeabi_dmul>
 8001668:	4603      	mov	r3, r0
 800166a:	460c      	mov	r4, r1
 800166c:	4618      	mov	r0, r3
 800166e:	4621      	mov	r1, r4
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	4b24      	ldr	r3, [pc, #144]	; (8001708 <BMP280_GetPressure+0x338>)
 8001676:	f7ff f889 	bl	800078c <__aeabi_ddiv>
 800167a:	4603      	mov	r3, r0
 800167c:	460c      	mov	r4, r1
 800167e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = p +(var1+var2+((double)bmp.dig_P7))/16.0;
 8001682:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001686:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800168a:	f7fe fda3 	bl	80001d4 <__adddf3>
 800168e:	4603      	mov	r3, r0
 8001690:	460c      	mov	r4, r1
 8001692:	4625      	mov	r5, r4
 8001694:	461c      	mov	r4, r3
 8001696:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <BMP280_GetPressure+0x334>)
 8001698:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe fee5 	bl	800046c <__aeabi_i2d>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	4620      	mov	r0, r4
 80016a8:	4629      	mov	r1, r5
 80016aa:	f7fe fd93 	bl	80001d4 <__adddf3>
 80016ae:	4603      	mov	r3, r0
 80016b0:	460c      	mov	r4, r1
 80016b2:	4618      	mov	r0, r3
 80016b4:	4621      	mov	r1, r4
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <BMP280_GetPressure+0x358>)
 80016bc:	f7ff f866 	bl	800078c <__aeabi_ddiv>
 80016c0:	4603      	mov	r3, r0
 80016c2:	460c      	mov	r4, r1
 80016c4:	461a      	mov	r2, r3
 80016c6:	4623      	mov	r3, r4
 80016c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016cc:	f7fe fd82 	bl	80001d4 <__adddf3>
 80016d0:	4603      	mov	r3, r0
 80016d2:	460c      	mov	r4, r1
 80016d4:	e9c7 3402 	strd	r3, r4, [r7, #8]

	return p;
 80016d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016dc:	f7ff f93e 	bl	800095c <__aeabi_d2f>
 80016e0:	4603      	mov	r3, r0
 80016e2:	ee07 3a90 	vmov	s15, r3
}
 80016e6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ea:	3728      	adds	r7, #40	; 0x28
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bdb0      	pop	{r4, r5, r7, pc}
 80016f0:	00000000 	.word	0x00000000
 80016f4:	40b86a00 	.word	0x40b86a00
 80016f8:	40003c00 	.word	0x40003c00
 80016fc:	20000078 	.word	0x20000078
 8001700:	40ef4000 	.word	0x40ef4000
 8001704:	20000060 	.word	0x20000060
 8001708:	40e00000 	.word	0x40e00000
 800170c:	40100000 	.word	0x40100000
 8001710:	40f00000 	.word	0x40f00000
 8001714:	41200000 	.word	0x41200000
 8001718:	3ff00000 	.word	0x3ff00000
 800171c:	41300000 	.word	0x41300000
 8001720:	40b00000 	.word	0x40b00000
 8001724:	41e00000 	.word	0x41e00000
 8001728:	40300000 	.word	0x40300000

0800172c <SysTick_Handler>:
// SysTick_Handler function will be called every 1 us
void SysTick_Handler()
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
    if (usTicks != 0)
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <SysTick_Handler+0x20>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d004      	beq.n	8001742 <SysTick_Handler+0x16>
    {
        usTicks--;
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <SysTick_Handler+0x20>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	3b01      	subs	r3, #1
 800173e:	4a03      	ldr	r2, [pc, #12]	; (800174c <SysTick_Handler+0x20>)
 8001740:	6013      	str	r3, [r2, #0]
    }
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	20000034 	.word	0x20000034

08001750 <BMP280_Force_Measure>:

BMPStatus_t BMP280_Force_Measure(float* temp,float* pressure)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
	int8_t mcbyte,flag;
	BMP280_Read_Register(ctrl_meas,&mcbyte,1,SPI3);
 800175a:	f107 010f 	add.w	r1, r7, #15
 800175e:	4b28      	ldr	r3, [pc, #160]	; (8001800 <BMP280_Force_Measure+0xb0>)
 8001760:	2201      	movs	r2, #1
 8001762:	20f4      	movs	r0, #244	; 0xf4
 8001764:	f7ff fbd6 	bl	8000f14 <BMP280_Read_Register>
	//check if in sleep
	if((mcbyte&0b11) != BMP280_CTRLMEAS_MODE_SLEEP)
 8001768:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d005      	beq.n	8001782 <BMP280_Force_Measure+0x32>
	{
		mcbyte &= 0b11111100; //clear mode
 8001776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177a:	f023 0303 	bic.w	r3, r3, #3
 800177e:	b25b      	sxtb	r3, r3
 8001780:	73fb      	strb	r3, [r7, #15]
	}
	mcbyte |= BMP280_CTRLMEAS_MODE_FORCED;
 8001782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	b25b      	sxtb	r3, r3
 800178c:	73fb      	strb	r3, [r7, #15]
	BMP280_Write_Register(ctrl_meas,mcbyte,SPI3);
 800178e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001792:	b2db      	uxtb	r3, r3
 8001794:	4a1a      	ldr	r2, [pc, #104]	; (8001800 <BMP280_Force_Measure+0xb0>)
 8001796:	4619      	mov	r1, r3
 8001798:	20f4      	movs	r0, #244	; 0xf4
 800179a:	f7ff fd19 	bl	80011d0 <BMP280_Write_Register>
	//verify register settings successful
	BMP280_Read_Register(ctrl_meas,&flag,1,SPI3);
 800179e:	f107 010e 	add.w	r1, r7, #14
 80017a2:	4b17      	ldr	r3, [pc, #92]	; (8001800 <BMP280_Force_Measure+0xb0>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	20f4      	movs	r0, #244	; 0xf4
 80017a8:	f7ff fbb4 	bl	8000f14 <BMP280_Read_Register>
	if(flag != mcbyte)
 80017ac:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80017b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d008      	beq.n	80017ca <BMP280_Force_Measure+0x7a>
	{
		return BMP_WRITE_ERROR;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e01c      	b.n	80017f6 <BMP280_Force_Measure+0xa6>
	}
	//wait for mode to return to sleep

	while((flag&0b11) != BMP280_CTRLMEAS_MODE_SLEEP)
	{
		BMP280_Read_Register(ctrl_meas,&flag,1,SPI3);
 80017bc:	f107 010e 	add.w	r1, r7, #14
 80017c0:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <BMP280_Force_Measure+0xb0>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	20f4      	movs	r0, #244	; 0xf4
 80017c6:	f7ff fba5 	bl	8000f14 <BMP280_Read_Register>
	while((flag&0b11) != BMP280_CTRLMEAS_MODE_SLEEP)
 80017ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1f1      	bne.n	80017bc <BMP280_Force_Measure+0x6c>
	}
	//read temp
	*temp = BMP280_GetTemp();
 80017d8:	f7ff fd24 	bl	8001224 <BMP280_GetTemp>
 80017dc:	eef0 7a40 	vmov.f32	s15, s0
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	edc3 7a00 	vstr	s15, [r3]
	*pressure = BMP280_GetPressure();
 80017e6:	f7ff fdf3 	bl	80013d0 <BMP280_GetPressure>
 80017ea:	eef0 7a40 	vmov.f32	s15, s0
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	edc3 7a00 	vstr	s15, [r3]
	return BMP_OK;
 80017f4:	2301      	movs	r3, #1
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40003c00 	.word	0x40003c00

08001804 <DelayInit>:
void DelayInit()
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
    // Update SystemCoreClock value
    SystemCoreClockUpdate();
 8001808:	f000 f8ba 	bl	8001980 <SystemCoreClockUpdate>
    // Configure the SysTick timer to overflow every 1 us
    SysTick_Config(SystemCoreClock / 1000000);
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <DelayInit+0x20>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a05      	ldr	r2, [pc, #20]	; (8001828 <DelayInit+0x24>)
 8001812:	fba2 2303 	umull	r2, r3, r2, r3
 8001816:	0c9b      	lsrs	r3, r3, #18
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff faa9 	bl	8000d70 <SysTick_Config>
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000000 	.word	0x20000000
 8001828:	431bde83 	.word	0x431bde83

0800182c <DelayUs>:

void DelayUs(uint32_t us)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
    // Reload us value
    usTicks = us;
 8001834:	4a06      	ldr	r2, [pc, #24]	; (8001850 <DelayUs+0x24>)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6013      	str	r3, [r2, #0]
    // Wait until usTick reach zero
    while (usTicks);
 800183a:	bf00      	nop
 800183c:	4b04      	ldr	r3, [pc, #16]	; (8001850 <DelayUs+0x24>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1fb      	bne.n	800183c <DelayUs+0x10>
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	20000034 	.word	0x20000034

08001854 <DelayMs>:

void DelayMs(uint32_t ms)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
    // Wait until ms reach zero
    while (ms--)
 800185c:	e003      	b.n	8001866 <DelayMs+0x12>
    {
        // Delay 1ms
        DelayUs(1000);
 800185e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001862:	f7ff ffe3 	bl	800182c <DelayUs>
    while (ms--)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	1e5a      	subs	r2, r3, #1
 800186a:	607a      	str	r2, [r7, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1f6      	bne.n	800185e <DelayMs+0xa>
    }
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001878:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800187a:	e003      	b.n	8001884 <LoopCopyDataInit>

0800187c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800187e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001880:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001882:	3104      	adds	r1, #4

08001884 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001884:	480a      	ldr	r0, [pc, #40]	; (80018b0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001888:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800188a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800188c:	d3f6      	bcc.n	800187c <CopyDataInit>
  ldr  r2, =_sbss
 800188e:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001890:	e002      	b.n	8001898 <LoopFillZerobss>

08001892 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001892:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001894:	f842 3b04 	str.w	r3, [r2], #4

08001898 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800189a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800189c:	d3f9      	bcc.n	8001892 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800189e:	f000 f839 	bl	8001914 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018a2:	f000 fbed 	bl	8002080 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018a6:	f7ff fa85 	bl	8000db4 <main>
  bx  lr    
 80018aa:	4770      	bx	lr
  ldr  r3, =_sidata
 80018ac:	080020e8 	.word	0x080020e8
  ldr  r0, =_sdata
 80018b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018b4:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 80018b8:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 80018bc:	20000080 	.word	0x20000080

080018c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018c0:	e7fe      	b.n	80018c0 <ADC_IRQHandler>

080018c2 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <HardFault_Handler+0x4>

080018d6 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80018da:	e7fe      	b.n	80018da <MemManage_Handler+0x4>

080018dc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <BusFault_Handler+0x4>

080018e2 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80018e6:	e7fe      	b.n	80018e6 <UsageFault_Handler+0x4>

080018e8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0
}
 80018fa:	bf00      	nop
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001918:	4a16      	ldr	r2, [pc, #88]	; (8001974 <SystemInit+0x60>)
 800191a:	4b16      	ldr	r3, [pc, #88]	; (8001974 <SystemInit+0x60>)
 800191c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001920:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001924:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
	
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001928:	4a13      	ldr	r2, [pc, #76]	; (8001978 <SystemInit+0x64>)
 800192a:	4b13      	ldr	r3, [pc, #76]	; (8001978 <SystemInit+0x64>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001934:	4b10      	ldr	r3, [pc, #64]	; (8001978 <SystemInit+0x64>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800193a:	4a0f      	ldr	r2, [pc, #60]	; (8001978 <SystemInit+0x64>)
 800193c:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <SystemInit+0x64>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001944:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001948:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800194a:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <SystemInit+0x64>)
 800194c:	4a0b      	ldr	r2, [pc, #44]	; (800197c <SystemInit+0x68>)
 800194e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001950:	4a09      	ldr	r2, [pc, #36]	; (8001978 <SystemInit+0x64>)
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <SystemInit+0x64>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800195a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <SystemInit+0x64>)
 800195e:	2200      	movs	r2, #0
 8001960:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001962:	f000 f889 	bl	8001a78 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001966:	4b03      	ldr	r3, [pc, #12]	; (8001974 <SystemInit+0x60>)
 8001968:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800196c:	609a      	str	r2, [r3, #8]
#endif
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	e000ed00 	.word	0xe000ed00
 8001978:	40023800 	.word	0x40023800
 800197c:	24003010 	.word	0x24003010

08001980 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001980:	b480      	push	{r7}
 8001982:	b087      	sub	sp, #28
 8001984:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	2302      	movs	r3, #2
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	2302      	movs	r3, #2
 8001998:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800199a:	4b32      	ldr	r3, [pc, #200]	; (8001a64 <SystemCoreClockUpdate+0xe4>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 030c 	and.w	r3, r3, #12
 80019a2:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d007      	beq.n	80019ba <SystemCoreClockUpdate+0x3a>
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d009      	beq.n	80019c2 <SystemCoreClockUpdate+0x42>
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d13d      	bne.n	8001a2e <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80019b2:	4b2d      	ldr	r3, [pc, #180]	; (8001a68 <SystemCoreClockUpdate+0xe8>)
 80019b4:	4a2d      	ldr	r2, [pc, #180]	; (8001a6c <SystemCoreClockUpdate+0xec>)
 80019b6:	601a      	str	r2, [r3, #0]
      break;
 80019b8:	e03d      	b.n	8001a36 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80019ba:	4b2b      	ldr	r3, [pc, #172]	; (8001a68 <SystemCoreClockUpdate+0xe8>)
 80019bc:	4a2c      	ldr	r2, [pc, #176]	; (8001a70 <SystemCoreClockUpdate+0xf0>)
 80019be:	601a      	str	r2, [r3, #0]
      break;
 80019c0:	e039      	b.n	8001a36 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80019c2:	4b28      	ldr	r3, [pc, #160]	; (8001a64 <SystemCoreClockUpdate+0xe4>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	0d9b      	lsrs	r3, r3, #22
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019ce:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <SystemCoreClockUpdate+0xe4>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019d6:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00c      	beq.n	80019f8 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80019de:	4a24      	ldr	r2, [pc, #144]	; (8001a70 <SystemCoreClockUpdate+0xf0>)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e6:	4a1f      	ldr	r2, [pc, #124]	; (8001a64 <SystemCoreClockUpdate+0xe4>)
 80019e8:	6852      	ldr	r2, [r2, #4]
 80019ea:	0992      	lsrs	r2, r2, #6
 80019ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019f0:	fb02 f303 	mul.w	r3, r2, r3
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	e00b      	b.n	8001a10 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80019f8:	4a1c      	ldr	r2, [pc, #112]	; (8001a6c <SystemCoreClockUpdate+0xec>)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a00:	4a18      	ldr	r2, [pc, #96]	; (8001a64 <SystemCoreClockUpdate+0xe4>)
 8001a02:	6852      	ldr	r2, [r2, #4]
 8001a04:	0992      	lsrs	r2, r2, #6
 8001a06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a0a:	fb02 f303 	mul.w	r3, r2, r3
 8001a0e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001a10:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <SystemCoreClockUpdate+0xe4>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	0c1b      	lsrs	r3, r3, #16
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a28:	4a0f      	ldr	r2, [pc, #60]	; (8001a68 <SystemCoreClockUpdate+0xe8>)
 8001a2a:	6013      	str	r3, [r2, #0]
      break;
 8001a2c:	e003      	b.n	8001a36 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <SystemCoreClockUpdate+0xe8>)
 8001a30:	4a0e      	ldr	r2, [pc, #56]	; (8001a6c <SystemCoreClockUpdate+0xec>)
 8001a32:	601a      	str	r2, [r3, #0]
      break;
 8001a34:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001a36:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <SystemCoreClockUpdate+0xe4>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	091b      	lsrs	r3, r3, #4
 8001a3c:	f003 030f 	and.w	r3, r3, #15
 8001a40:	4a0c      	ldr	r2, [pc, #48]	; (8001a74 <SystemCoreClockUpdate+0xf4>)
 8001a42:	5cd3      	ldrb	r3, [r2, r3]
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001a48:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <SystemCoreClockUpdate+0xe8>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a52:	4a05      	ldr	r2, [pc, #20]	; (8001a68 <SystemCoreClockUpdate+0xe8>)
 8001a54:	6013      	str	r3, [r2, #0]
}
 8001a56:	bf00      	nop
 8001a58:	371c      	adds	r7, #28
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	00f42400 	.word	0x00f42400
 8001a70:	007a1200 	.word	0x007a1200
 8001a74:	20000004 	.word	0x20000004

08001a78 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	607b      	str	r3, [r7, #4]
 8001a82:	2300      	movs	r3, #0
 8001a84:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001a86:	4a36      	ldr	r2, [pc, #216]	; (8001b60 <SetSysClock+0xe8>)
 8001a88:	4b35      	ldr	r3, [pc, #212]	; (8001b60 <SetSysClock+0xe8>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a90:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001a92:	4b33      	ldr	r3, [pc, #204]	; (8001b60 <SetSysClock+0xe8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d103      	bne.n	8001ab0 <SetSysClock+0x38>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001aae:	d1f0      	bne.n	8001a92 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001ab0:	4b2b      	ldr	r3, [pc, #172]	; (8001b60 <SetSysClock+0xe8>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d002      	beq.n	8001ac2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001abc:	2301      	movs	r3, #1
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	e001      	b.n	8001ac6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d142      	bne.n	8001b52 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001acc:	4a24      	ldr	r2, [pc, #144]	; (8001b60 <SetSysClock+0xe8>)
 8001ace:	4b24      	ldr	r3, [pc, #144]	; (8001b60 <SetSysClock+0xe8>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8001ad8:	4a22      	ldr	r2, [pc, #136]	; (8001b64 <SetSysClock+0xec>)
 8001ada:	4b22      	ldr	r3, [pc, #136]	; (8001b64 <SetSysClock+0xec>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae2:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001ae4:	4a1e      	ldr	r2, [pc, #120]	; (8001b60 <SetSysClock+0xe8>)
 8001ae6:	4b1e      	ldr	r3, [pc, #120]	; (8001b60 <SetSysClock+0xe8>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001aec:	4a1c      	ldr	r2, [pc, #112]	; (8001b60 <SetSysClock+0xe8>)
 8001aee:	4b1c      	ldr	r3, [pc, #112]	; (8001b60 <SetSysClock+0xe8>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001af6:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001af8:	4a19      	ldr	r2, [pc, #100]	; (8001b60 <SetSysClock+0xe8>)
 8001afa:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <SetSysClock+0xe8>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001b02:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001b04:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <SetSysClock+0xe8>)
 8001b06:	4a18      	ldr	r2, [pc, #96]	; (8001b68 <SetSysClock+0xf0>)
 8001b08:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001b0a:	4a15      	ldr	r2, [pc, #84]	; (8001b60 <SetSysClock+0xe8>)
 8001b0c:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <SetSysClock+0xe8>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b14:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001b16:	bf00      	nop
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <SetSysClock+0xe8>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0f9      	beq.n	8001b18 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001b24:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <SetSysClock+0xf4>)
 8001b26:	f240 6205 	movw	r2, #1541	; 0x605
 8001b2a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001b2c:	4a0c      	ldr	r2, [pc, #48]	; (8001b60 <SetSysClock+0xe8>)
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <SetSysClock+0xe8>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f023 0303 	bic.w	r3, r3, #3
 8001b36:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001b38:	4a09      	ldr	r2, [pc, #36]	; (8001b60 <SetSysClock+0xe8>)
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <SetSysClock+0xe8>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f043 0302 	orr.w	r3, r3, #2
 8001b42:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001b44:	bf00      	nop
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <SetSysClock+0xe8>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
 8001b4e:	2b08      	cmp	r3, #8
 8001b50:	d1f9      	bne.n	8001b46 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40007000 	.word	0x40007000
 8001b68:	07405408 	.word	0x07405408
 8001b6c:	40023c00 	.word	0x40023c00

08001b70 <TM_GPIO_InitAlternate>:
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
}

void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af02      	add	r7, sp, #8
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	4608      	mov	r0, r1
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4603      	mov	r3, r0
 8001b80:	807b      	strh	r3, [r7, #2]
 8001b82:	460b      	mov	r3, r1
 8001b84:	707b      	strb	r3, [r7, #1]
 8001b86:	4613      	mov	r3, r2
 8001b88:	703b      	strb	r3, [r7, #0]
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
 8001b8a:	887b      	ldrh	r3, [r7, #2]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d03e      	beq.n	8001c0e <TM_GPIO_InitAlternate+0x9e>
		return;
	}
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 f851 	bl	8001c38 <TM_GPIO_INT_EnableClock>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	e029      	b.n	8001bf0 <TM_GPIO_InitAlternate+0x80>
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 8001b9c:	887a      	ldrh	r2, [r7, #2]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	fa42 f303 	asr.w	r3, r2, r3
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d01d      	beq.n	8001be8 <TM_GPIO_InitAlternate+0x78>
			continue;
		}
		
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	08da      	lsrs	r2, r3, #3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	08d9      	lsrs	r1, r3, #3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3108      	adds	r1, #8
 8001bb8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001bbc:	68f9      	ldr	r1, [r7, #12]
 8001bbe:	f001 0107 	and.w	r1, r1, #7
 8001bc2:	0089      	lsls	r1, r1, #2
 8001bc4:	200f      	movs	r0, #15
 8001bc6:	fa00 f101 	lsl.w	r1, r0, r1
 8001bca:	43c9      	mvns	r1, r1
 8001bcc:	400b      	ands	r3, r1
 8001bce:	7f38      	ldrb	r0, [r7, #28]
 8001bd0:	68f9      	ldr	r1, [r7, #12]
 8001bd2:	f001 0107 	and.w	r1, r1, #7
 8001bd6:	0089      	lsls	r1, r1, #2
 8001bd8:	fa00 f101 	lsl.w	r1, r0, r1
 8001bdc:	4319      	orrs	r1, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3208      	adds	r2, #8
 8001be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001be6:	e000      	b.n	8001bea <TM_GPIO_InitAlternate+0x7a>
			continue;
 8001be8:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	3301      	adds	r3, #1
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2b0f      	cmp	r3, #15
 8001bf4:	d9d2      	bls.n	8001b9c <TM_GPIO_InitAlternate+0x2c>
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8001bf6:	787a      	ldrb	r2, [r7, #1]
 8001bf8:	8879      	ldrh	r1, [r7, #2]
 8001bfa:	7e3b      	ldrb	r3, [r7, #24]
 8001bfc:	9301      	str	r3, [sp, #4]
 8001bfe:	783b      	ldrb	r3, [r7, #0]
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	4613      	mov	r3, r2
 8001c04:	2202      	movs	r2, #2
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f82e 	bl	8001c68 <TM_GPIO_INT_Init>
 8001c0c:	e000      	b.n	8001c10 <TM_GPIO_InitAlternate+0xa0>
		return;
 8001c0e:	bf00      	nop
}
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 8001c24:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8001c28:	0a9b      	lsrs	r3, r3, #10
 8001c2a:	b29b      	uxth	r3, r3
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff ffe8 	bl	8001c16 <TM_GPIO_GetPortSource>
 8001c46:	4603      	mov	r3, r0
 8001c48:	461a      	mov	r2, r3
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	fa03 f102 	lsl.w	r1, r3, r2
 8001c50:	4a04      	ldr	r2, [pc, #16]	; (8001c64 <TM_GPIO_INT_EnableClock+0x2c>)
 8001c52:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <TM_GPIO_INT_EnableClock+0x2c>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	430b      	orrs	r3, r1
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40023800 	.word	0x40023800

08001c68 <TM_GPIO_INT_Init>:
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx) {
	/* Clear bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	4608      	mov	r0, r1
 8001c72:	4611      	mov	r1, r2
 8001c74:	461a      	mov	r2, r3
 8001c76:	4603      	mov	r3, r0
 8001c78:	807b      	strh	r3, [r7, #2]
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	707b      	strb	r3, [r7, #1]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7ff ffc7 	bl	8001c16 <TM_GPIO_GetPortSource>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	73bb      	strb	r3, [r7, #14]
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	73fb      	strb	r3, [r7, #15]
 8001c90:	e067      	b.n	8001d62 <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 8001c92:	887a      	ldrh	r2, [r7, #2]
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	fa42 f303 	asr.w	r3, r2, r3
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d05b      	beq.n	8001d5a <TM_GPIO_INT_Init+0xf2>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8001ca2:	7bbb      	ldrb	r3, [r7, #14]
 8001ca4:	7bba      	ldrb	r2, [r7, #14]
 8001ca6:	4932      	ldr	r1, [pc, #200]	; (8001d70 <TM_GPIO_INT_Init+0x108>)
 8001ca8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001cac:	b211      	sxth	r1, r2
 8001cae:	7bfa      	ldrb	r2, [r7, #15]
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cb6:	b212      	sxth	r2, r2
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	b212      	sxth	r2, r2
 8001cbc:	b291      	uxth	r1, r2
 8001cbe:	4a2c      	ldr	r2, [pc, #176]	; (8001d70 <TM_GPIO_INT_Init+0x108>)
 8001cc0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	7bfa      	ldrb	r2, [r7, #15]
 8001cca:	0052      	lsls	r2, r2, #1
 8001ccc:	2103      	movs	r1, #3
 8001cce:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd2:	43d2      	mvns	r2, r2
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	7e39      	ldrb	r1, [r7, #24]
 8001cd8:	7bfa      	ldrb	r2, [r7, #15]
 8001cda:	0052      	lsls	r2, r2, #1
 8001cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	7bfb      	ldrb	r3, [r7, #15]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	2103      	movs	r1, #3
 8001cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	7879      	ldrb	r1, [r7, #1]
 8001cfa:	7bfa      	ldrb	r2, [r7, #15]
 8001cfc:	0052      	lsls	r2, r2, #1
 8001cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8001d08:	787b      	ldrb	r3, [r7, #1]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d002      	beq.n	8001d14 <TM_GPIO_INT_Init+0xac>
 8001d0e:	787b      	ldrb	r3, [r7, #1]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d123      	bne.n	8001d5c <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	7bfa      	ldrb	r2, [r7, #15]
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d20:	b292      	uxth	r2, r2
 8001d22:	43d2      	mvns	r2, r2
 8001d24:	4013      	ands	r3, r2
 8001d26:	7839      	ldrb	r1, [r7, #0]
 8001d28:	7bfa      	ldrb	r2, [r7, #15]
 8001d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d2e:	b292      	uxth	r2, r2
 8001d30:	431a      	orrs	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	2103      	movs	r1, #3
 8001d40:	fa01 f303 	lsl.w	r3, r1, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	4013      	ands	r3, r2
 8001d48:	7f39      	ldrb	r1, [r7, #28]
 8001d4a:	7bfa      	ldrb	r2, [r7, #15]
 8001d4c:	0052      	lsls	r2, r2, #1
 8001d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	e000      	b.n	8001d5c <TM_GPIO_INT_Init+0xf4>
			continue;
 8001d5a:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	73fb      	strb	r3, [r7, #15]
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	2b0f      	cmp	r3, #15
 8001d66:	d994      	bls.n	8001c92 <TM_GPIO_INT_Init+0x2a>
		}
	}
}
 8001d68:	bf00      	nop
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000038 	.word	0x20000038

08001d74 <TM_SPI_Init>:
void TM_SPI3_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI4_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI5_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI6_INT_InitPins(TM_SPI_PinsPack_t pinspack);

void TM_SPI_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af02      	add	r7, sp, #8
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	70fb      	strb	r3, [r7, #3]
	/* Init with default settings */
#ifdef USE_SPI1
	if (SPIx == SPI1) {
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a18      	ldr	r2, [pc, #96]	; (8001de4 <TM_SPI_Init+0x70>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d10a      	bne.n	8001d9e <TM_SPI_Init+0x2a>
		TM_SPIx_Init(SPI1, pinspack, TM_SPI1_MODE, TM_SPI1_PRESCALER, TM_SPI1_MASTERSLAVE, TM_SPI1_FIRSTBIT);
 8001d88:	78f9      	ldrb	r1, [r7, #3]
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	9301      	str	r3, [sp, #4]
 8001d8e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	2320      	movs	r3, #32
 8001d96:	2200      	movs	r2, #0
 8001d98:	4812      	ldr	r0, [pc, #72]	; (8001de4 <TM_SPI_Init+0x70>)
 8001d9a:	f000 f835 	bl	8001e08 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI2
	if (SPIx == SPI2) {
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a11      	ldr	r2, [pc, #68]	; (8001de8 <TM_SPI_Init+0x74>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d10a      	bne.n	8001dbc <TM_SPI_Init+0x48>
		TM_SPIx_Init(SPI2, pinspack, TM_SPI2_MODE, TM_SPI2_PRESCALER, TM_SPI2_MASTERSLAVE, TM_SPI2_FIRSTBIT);
 8001da6:	78f9      	ldrb	r1, [r7, #3]
 8001da8:	2300      	movs	r3, #0
 8001daa:	9301      	str	r3, [sp, #4]
 8001dac:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	2320      	movs	r3, #32
 8001db4:	2200      	movs	r2, #0
 8001db6:	480c      	ldr	r0, [pc, #48]	; (8001de8 <TM_SPI_Init+0x74>)
 8001db8:	f000 f826 	bl	8001e08 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI3
	if (SPIx == SPI3) {
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a0b      	ldr	r2, [pc, #44]	; (8001dec <TM_SPI_Init+0x78>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d10a      	bne.n	8001dda <TM_SPI_Init+0x66>
		TM_SPIx_Init(SPI3, pinspack, TM_SPI3_MODE, TM_SPI3_PRESCALER, TM_SPI3_MASTERSLAVE, TM_SPI3_FIRSTBIT);
 8001dc4:	78f9      	ldrb	r1, [r7, #3]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	9301      	str	r3, [sp, #4]
 8001dca:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	2320      	movs	r3, #32
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	4805      	ldr	r0, [pc, #20]	; (8001dec <TM_SPI_Init+0x78>)
 8001dd6:	f000 f817 	bl	8001e08 <TM_SPIx_Init>
#ifdef USE_SPI6
	if (SPIx == SPI6) {
		TM_SPIx_Init(SPI6, pinspack, TM_SPI6_MODE, TM_SPI6_PRESCALER, TM_SPI6_MASTERSLAVE, TM_SPI6_FIRSTBIT);
	}
#endif
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40013000 	.word	0x40013000
 8001de8:	40003800 	.word	0x40003800
 8001dec:	40003c00 	.word	0x40003c00

08001df0 <TM_SPI_InitCustomPinsCallback>:
		/* Save data to buffer */
		dataIn[i] = SPIx->DR;
	}
}

__weak void TM_SPI_InitCustomPinsCallback(SPI_TypeDef* SPIx, uint16_t AlternateFunction) {
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	807b      	strh	r3, [r7, #2]
	/* Custom user function. */
	/* In case user needs functionality for custom pins, this function should be declared outside this library */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <TM_SPIx_Init>:

/* Private functions */
static void TM_SPIx_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack, TM_SPI_Mode_t SPI_Mode, uint16_t SPI_BaudRatePrescaler, uint16_t SPI_MasterSlave, uint16_t SPI_FirstBit) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b088      	sub	sp, #32
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	4608      	mov	r0, r1
 8001e12:	4611      	mov	r1, r2
 8001e14:	461a      	mov	r2, r3
 8001e16:	4603      	mov	r3, r0
 8001e18:	70fb      	strb	r3, [r7, #3]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	70bb      	strb	r3, [r7, #2]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	803b      	strh	r3, [r7, #0]
	SPI_InitTypeDef SPI_InitStruct;

	/* Set default settings */
	SPI_StructInit(&SPI_InitStruct);
 8001e22:	f107 030c 	add.w	r3, r7, #12
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe feda 	bl	8000be0 <SPI_StructInit>
#ifdef USE_SPI1	
	if (SPIx == SPI1) {
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a39      	ldr	r2, [pc, #228]	; (8001f14 <TM_SPIx_Init+0x10c>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d10b      	bne.n	8001e4c <TM_SPIx_Init+0x44>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8001e34:	4a38      	ldr	r2, [pc, #224]	; (8001f18 <TM_SPIx_Init+0x110>)
 8001e36:	4b38      	ldr	r3, [pc, #224]	; (8001f18 <TM_SPIx_Init+0x110>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e3e:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI1_INT_InitPins(pinspack);
 8001e40:	78fb      	ldrb	r3, [r7, #3]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 f86e 	bl	8001f24 <TM_SPI1_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI1_DATASIZE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI2
	if (SPIx == SPI2) {
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a33      	ldr	r2, [pc, #204]	; (8001f1c <TM_SPIx_Init+0x114>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d10b      	bne.n	8001e6c <TM_SPIx_Init+0x64>
		/* Enable SPI clock */
		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8001e54:	4a30      	ldr	r2, [pc, #192]	; (8001f18 <TM_SPIx_Init+0x110>)
 8001e56:	4b30      	ldr	r3, [pc, #192]	; (8001f18 <TM_SPIx_Init+0x110>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e5e:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Init pins */
		TM_SPI2_INT_InitPins(pinspack);
 8001e60:	78fb      	ldrb	r3, [r7, #3]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 f88e 	bl	8001f84 <TM_SPI2_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI2_DATASIZE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI3
	if (SPIx == SPI3) {
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a2c      	ldr	r2, [pc, #176]	; (8001f20 <TM_SPIx_Init+0x118>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d10b      	bne.n	8001e8c <TM_SPIx_Init+0x84>
		/* Enable SPI clock */
		RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 8001e74:	4a28      	ldr	r2, [pc, #160]	; (8001f18 <TM_SPIx_Init+0x110>)
 8001e76:	4b28      	ldr	r3, [pc, #160]	; (8001f18 <TM_SPIx_Init+0x110>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e7e:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Init pins */
		TM_SPI3_INT_InitPins(pinspack);
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f000 f8ca 	bl	800201c <TM_SPI3_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI3_DATASIZE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	823b      	strh	r3, [r7, #16]
		SPI_InitStruct.SPI_DataSize = TM_SPI6_DATASIZE;
	}
#endif

	/* Fill SPI settings */
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler;
 8001e8c:	883b      	ldrh	r3, [r7, #0]
 8001e8e:	833b      	strh	r3, [r7, #24]
	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001e90:	2300      	movs	r3, #0
 8001e92:	81bb      	strh	r3, [r7, #12]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit;
 8001e94:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001e96:	837b      	strh	r3, [r7, #26]
	SPI_InitStruct.SPI_Mode = SPI_MasterSlave;
 8001e98:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e9a:	81fb      	strh	r3, [r7, #14]
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8001e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ea0:	82fb      	strh	r3, [r7, #22]
	//SPI_InitStruct.SPI_DataSize = SPI_DataSize_16b;
	
	/* SPI mode */
	if (SPI_Mode == TM_SPI_Mode_0) {
 8001ea2:	78bb      	ldrb	r3, [r7, #2]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d104      	bne.n	8001eb2 <TM_SPIx_Init+0xaa>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8001eac:	2300      	movs	r3, #0
 8001eae:	82bb      	strh	r3, [r7, #20]
 8001eb0:	e016      	b.n	8001ee0 <TM_SPIx_Init+0xd8>
	} else if (SPI_Mode == TM_SPI_Mode_1) {
 8001eb2:	78bb      	ldrb	r3, [r7, #2]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d104      	bne.n	8001ec2 <TM_SPIx_Init+0xba>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_2Edge;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	82bb      	strh	r3, [r7, #20]
 8001ec0:	e00e      	b.n	8001ee0 <TM_SPIx_Init+0xd8>
	} else if (SPI_Mode == TM_SPI_Mode_2) {
 8001ec2:	78bb      	ldrb	r3, [r7, #2]
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d104      	bne.n	8001ed2 <TM_SPIx_Init+0xca>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_High;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	82bb      	strh	r3, [r7, #20]
 8001ed0:	e006      	b.n	8001ee0 <TM_SPIx_Init+0xd8>
	} else if (SPI_Mode == TM_SPI_Mode_3) {
 8001ed2:	78bb      	ldrb	r3, [r7, #2]
 8001ed4:	2b03      	cmp	r3, #3
 8001ed6:	d103      	bne.n	8001ee0 <TM_SPIx_Init+0xd8>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_High;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_2Edge;
 8001edc:	2301      	movs	r3, #1
 8001ede:	82bb      	strh	r3, [r7, #20]
	}
	
	/* Disable first */
	SPIx->CR1 &= ~SPI_CR1_SPE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	801a      	strh	r2, [r3, #0]
	
	/* Init SPI */
	SPI_Init(SPIx, &SPI_InitStruct);
 8001ef0:	f107 030c 	add.w	r3, r7, #12
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7fe fe2e 	bl	8000b58 <SPI_Init>
	
	/* Enable SPI */
	SPIx->CR1 |= SPI_CR1_SPE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	881b      	ldrh	r3, [r3, #0]
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	801a      	strh	r2, [r3, #0]
}
 8001f0c:	bf00      	nop
 8001f0e:	3720      	adds	r7, #32
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40013000 	.word	0x40013000
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40003800 	.word	0x40003800
 8001f20:	40003c00 	.word	0x40003c00

08001f24 <TM_SPI1_INT_InitPins>:

/* Private functions */
#ifdef USE_SPI1
void TM_SPI1_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af02      	add	r7, sp, #8
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOA)
	if (pinspack == TM_SPI_PinsPack_1) {
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d109      	bne.n	8001f48 <TM_SPI1_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI1);
 8001f34:	2305      	movs	r3, #5
 8001f36:	9301      	str	r3, [sp, #4]
 8001f38:	2303      	movs	r3, #3
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	2200      	movs	r2, #0
 8001f40:	21e0      	movs	r1, #224	; 0xe0
 8001f42:	480d      	ldr	r0, [pc, #52]	; (8001f78 <TM_SPI1_INT_InitPins+0x54>)
 8001f44:	f7ff fe14 	bl	8001b70 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_2) {
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d109      	bne.n	8001f62 <TM_SPI1_INT_InitPins+0x3e>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI1);
 8001f4e:	2305      	movs	r3, #5
 8001f50:	9301      	str	r3, [sp, #4]
 8001f52:	2303      	movs	r3, #3
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	2300      	movs	r3, #0
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2138      	movs	r1, #56	; 0x38
 8001f5c:	4807      	ldr	r0, [pc, #28]	; (8001f7c <TM_SPI1_INT_InitPins+0x58>)
 8001f5e:	f7ff fe07 	bl	8001b70 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	2b03      	cmp	r3, #3
 8001f66:	d103      	bne.n	8001f70 <TM_SPI1_INT_InitPins+0x4c>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI1, GPIO_AF_SPI1);
 8001f68:	2105      	movs	r1, #5
 8001f6a:	4805      	ldr	r0, [pc, #20]	; (8001f80 <TM_SPI1_INT_InitPins+0x5c>)
 8001f6c:	f7ff ff40 	bl	8001df0 <TM_SPI_InitCustomPinsCallback>
	}
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40020000 	.word	0x40020000
 8001f7c:	40020400 	.word	0x40020400
 8001f80:	40013000 	.word	0x40013000

08001f84 <TM_SPI2_INT_InitPins>:
#endif

#ifdef USE_SPI2
void TM_SPI2_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af02      	add	r7, sp, #8
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOB) && defined(GPIOC)
	if (pinspack == TM_SPI_PinsPack_1) {
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d114      	bne.n	8001fbe <TM_SPI2_INT_InitPins+0x3a>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8001f94:	2305      	movs	r3, #5
 8001f96:	9301      	str	r3, [sp, #4]
 8001f98:	2303      	movs	r3, #3
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fa4:	4819      	ldr	r0, [pc, #100]	; (800200c <TM_SPI2_INT_InitPins+0x88>)
 8001fa6:	f7ff fde3 	bl	8001b70 <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_2 | GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8001faa:	2305      	movs	r3, #5
 8001fac:	9301      	str	r3, [sp, #4]
 8001fae:	2303      	movs	r3, #3
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	210c      	movs	r1, #12
 8001fb8:	4815      	ldr	r0, [pc, #84]	; (8002010 <TM_SPI2_INT_InitPins+0x8c>)
 8001fba:	f7ff fdd9 	bl	8001b70 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_2) {
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d10a      	bne.n	8001fda <TM_SPI2_INT_InitPins+0x56>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8001fc4:	2305      	movs	r3, #5
 8001fc6:	9301      	str	r3, [sp, #4]
 8001fc8:	2303      	movs	r3, #3
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	2300      	movs	r3, #0
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001fd4:	480d      	ldr	r0, [pc, #52]	; (800200c <TM_SPI2_INT_InitPins+0x88>)
 8001fd6:	f7ff fdcb 	bl	8001b70 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOI)
	if (pinspack == TM_SPI_PinsPack_3) {
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d109      	bne.n	8001ff4 <TM_SPI2_INT_InitPins+0x70>
		TM_GPIO_InitAlternate(GPIOI, GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8001fe0:	2305      	movs	r3, #5
 8001fe2:	9301      	str	r3, [sp, #4]
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	2300      	movs	r3, #0
 8001fea:	2200      	movs	r2, #0
 8001fec:	210d      	movs	r1, #13
 8001fee:	4809      	ldr	r0, [pc, #36]	; (8002014 <TM_SPI2_INT_InitPins+0x90>)
 8001ff0:	f7ff fdbe 	bl	8001b70 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	2b03      	cmp	r3, #3
 8001ff8:	d103      	bne.n	8002002 <TM_SPI2_INT_InitPins+0x7e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI2, GPIO_AF_SPI2);
 8001ffa:	2105      	movs	r1, #5
 8001ffc:	4806      	ldr	r0, [pc, #24]	; (8002018 <TM_SPI2_INT_InitPins+0x94>)
 8001ffe:	f7ff fef7 	bl	8001df0 <TM_SPI_InitCustomPinsCallback>
	}
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40020400 	.word	0x40020400
 8002010:	40020800 	.word	0x40020800
 8002014:	40022000 	.word	0x40022000
 8002018:	40003800 	.word	0x40003800

0800201c <TM_SPI3_INT_InitPins>:
#endif

#ifdef USE_SPI3
void TM_SPI3_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af02      	add	r7, sp, #8
 8002022:	4603      	mov	r3, r0
 8002024:	71fb      	strb	r3, [r7, #7]
	/* Enable SPI pins */
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_1) {
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d109      	bne.n	8002040 <TM_SPI3_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI3);
 800202c:	2306      	movs	r3, #6
 800202e:	9301      	str	r3, [sp, #4]
 8002030:	2303      	movs	r3, #3
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	2300      	movs	r3, #0
 8002036:	2200      	movs	r2, #0
 8002038:	2138      	movs	r1, #56	; 0x38
 800203a:	480e      	ldr	r0, [pc, #56]	; (8002074 <TM_SPI3_INT_InitPins+0x58>)
 800203c:	f7ff fd98 	bl	8001b70 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOC)
	if (pinspack == TM_SPI_PinsPack_2) {
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d10a      	bne.n	800205c <TM_SPI3_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI3);
 8002046:	2306      	movs	r3, #6
 8002048:	9301      	str	r3, [sp, #4]
 800204a:	2303      	movs	r3, #3
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	2300      	movs	r3, #0
 8002050:	2200      	movs	r2, #0
 8002052:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002056:	4808      	ldr	r0, [pc, #32]	; (8002078 <TM_SPI3_INT_InitPins+0x5c>)
 8002058:	f7ff fd8a 	bl	8001b70 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	2b03      	cmp	r3, #3
 8002060:	d103      	bne.n	800206a <TM_SPI3_INT_InitPins+0x4e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI3, GPIO_AF_SPI3);
 8002062:	2106      	movs	r1, #6
 8002064:	4805      	ldr	r0, [pc, #20]	; (800207c <TM_SPI3_INT_InitPins+0x60>)
 8002066:	f7ff fec3 	bl	8001df0 <TM_SPI_InitCustomPinsCallback>
	}
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40020400 	.word	0x40020400
 8002078:	40020800 	.word	0x40020800
 800207c:	40003c00 	.word	0x40003c00

08002080 <__libc_init_array>:
 8002080:	b570      	push	{r4, r5, r6, lr}
 8002082:	4e0d      	ldr	r6, [pc, #52]	; (80020b8 <__libc_init_array+0x38>)
 8002084:	4c0d      	ldr	r4, [pc, #52]	; (80020bc <__libc_init_array+0x3c>)
 8002086:	1ba4      	subs	r4, r4, r6
 8002088:	10a4      	asrs	r4, r4, #2
 800208a:	2500      	movs	r5, #0
 800208c:	42a5      	cmp	r5, r4
 800208e:	d109      	bne.n	80020a4 <__libc_init_array+0x24>
 8002090:	4e0b      	ldr	r6, [pc, #44]	; (80020c0 <__libc_init_array+0x40>)
 8002092:	4c0c      	ldr	r4, [pc, #48]	; (80020c4 <__libc_init_array+0x44>)
 8002094:	f000 f818 	bl	80020c8 <_init>
 8002098:	1ba4      	subs	r4, r4, r6
 800209a:	10a4      	asrs	r4, r4, #2
 800209c:	2500      	movs	r5, #0
 800209e:	42a5      	cmp	r5, r4
 80020a0:	d105      	bne.n	80020ae <__libc_init_array+0x2e>
 80020a2:	bd70      	pop	{r4, r5, r6, pc}
 80020a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020a8:	4798      	blx	r3
 80020aa:	3501      	adds	r5, #1
 80020ac:	e7ee      	b.n	800208c <__libc_init_array+0xc>
 80020ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020b2:	4798      	blx	r3
 80020b4:	3501      	adds	r5, #1
 80020b6:	e7f2      	b.n	800209e <__libc_init_array+0x1e>
 80020b8:	080020e0 	.word	0x080020e0
 80020bc:	080020e0 	.word	0x080020e0
 80020c0:	080020e0 	.word	0x080020e0
 80020c4:	080020e4 	.word	0x080020e4

080020c8 <_init>:
 80020c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ca:	bf00      	nop
 80020cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ce:	bc08      	pop	{r3}
 80020d0:	469e      	mov	lr, r3
 80020d2:	4770      	bx	lr

080020d4 <_fini>:
 80020d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020d6:	bf00      	nop
 80020d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020da:	bc08      	pop	{r3}
 80020dc:	469e      	mov	lr, r3
 80020de:	4770      	bx	lr
