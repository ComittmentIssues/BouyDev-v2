
Test_Iridium_F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08001d74  08001d74  00011d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08001d78  08001d78  00011d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  20000000  08001d7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
  6 .bss          00000c0c  20000074  20000074  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000c80  20000c80  00020074  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   00008b59  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000167e  00000000  00000000  00028bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000009c8  00000000  00000000  0002a280  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008f0  00000000  00000000  0002ac48  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003691  00000000  00000000  0002b538  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003272  00000000  00000000  0002ebc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00031e3b  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002b94  00000000  00000000  00031eb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001d5c 	.word	0x08001d5c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	08001d5c 	.word	0x08001d5c

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001f4:	2300      	movs	r3, #0
 80001f6:	73fb      	strb	r3, [r7, #15]
 80001f8:	2300      	movs	r3, #0
 80001fa:	73bb      	strb	r3, [r7, #14]
 80001fc:	230f      	movs	r3, #15
 80001fe:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	78db      	ldrb	r3, [r3, #3]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d039      	beq.n	800027c <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000208:	4b27      	ldr	r3, [pc, #156]	; (80002a8 <NVIC_Init+0xbc>)
 800020a:	68db      	ldr	r3, [r3, #12]
 800020c:	43db      	mvns	r3, r3
 800020e:	0a1b      	lsrs	r3, r3, #8
 8000210:	b2db      	uxtb	r3, r3
 8000212:	f003 0307 	and.w	r3, r3, #7
 8000216:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000218:	7bfb      	ldrb	r3, [r7, #15]
 800021a:	f1c3 0304 	rsb	r3, r3, #4
 800021e:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000220:	7b7a      	ldrb	r2, [r7, #13]
 8000222:	7bfb      	ldrb	r3, [r7, #15]
 8000224:	fa42 f303 	asr.w	r3, r2, r3
 8000228:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	785b      	ldrb	r3, [r3, #1]
 800022e:	461a      	mov	r2, r3
 8000230:	7bbb      	ldrb	r3, [r7, #14]
 8000232:	fa02 f303 	lsl.w	r3, r2, r3
 8000236:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	789a      	ldrb	r2, [r3, #2]
 800023c:	7b7b      	ldrb	r3, [r7, #13]
 800023e:	4013      	ands	r3, r2
 8000240:	b2da      	uxtb	r2, r3
 8000242:	7bfb      	ldrb	r3, [r7, #15]
 8000244:	4313      	orrs	r3, r2
 8000246:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000248:	7bfb      	ldrb	r3, [r7, #15]
 800024a:	011b      	lsls	r3, r3, #4
 800024c:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800024e:	4a17      	ldr	r2, [pc, #92]	; (80002ac <NVIC_Init+0xc0>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	4413      	add	r3, r2
 8000256:	7bfa      	ldrb	r2, [r7, #15]
 8000258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800025c:	4a13      	ldr	r2, [pc, #76]	; (80002ac <NVIC_Init+0xc0>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	095b      	lsrs	r3, r3, #5
 8000264:	b2db      	uxtb	r3, r3
 8000266:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	f003 031f 	and.w	r3, r3, #31
 8000270:	2101      	movs	r1, #1
 8000272:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000276:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800027a:	e00f      	b.n	800029c <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800027c:	490b      	ldr	r1, [pc, #44]	; (80002ac <NVIC_Init+0xc0>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	095b      	lsrs	r3, r3, #5
 8000284:	b2db      	uxtb	r3, r3
 8000286:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	f003 031f 	and.w	r3, r3, #31
 8000290:	2201      	movs	r2, #1
 8000292:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000294:	f100 0320 	add.w	r3, r0, #32
 8000298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800029c:	bf00      	nop
 800029e:	3714      	adds	r7, #20
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr
 80002a8:	e000ed00 	.word	0xe000ed00
 80002ac:	e000e100 	.word	0xe000e100

080002b0 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f023 0201 	bic.w	r2, r3, #1
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2200      	movs	r2, #0
 80002ce:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2200      	movs	r2, #0
 80002d4:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2200      	movs	r2, #0
 80002da:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2200      	movs	r2, #0
 80002e0:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2221      	movs	r2, #33	; 0x21
 80002e6:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	4a46      	ldr	r2, [pc, #280]	; (8000404 <DMA_DeInit+0x154>)
 80002ec:	4293      	cmp	r3, r2
 80002ee:	d103      	bne.n	80002f8 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 80002f0:	4b45      	ldr	r3, [pc, #276]	; (8000408 <DMA_DeInit+0x158>)
 80002f2:	223d      	movs	r2, #61	; 0x3d
 80002f4:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80002f6:	e07e      	b.n	80003f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4a44      	ldr	r2, [pc, #272]	; (800040c <DMA_DeInit+0x15c>)
 80002fc:	4293      	cmp	r3, r2
 80002fe:	d104      	bne.n	800030a <DMA_DeInit+0x5a>
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8000300:	4b41      	ldr	r3, [pc, #260]	; (8000408 <DMA_DeInit+0x158>)
 8000302:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000306:	609a      	str	r2, [r3, #8]
}
 8000308:	e075      	b.n	80003f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	4a40      	ldr	r2, [pc, #256]	; (8000410 <DMA_DeInit+0x160>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d104      	bne.n	800031c <DMA_DeInit+0x6c>
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8000312:	4b3d      	ldr	r3, [pc, #244]	; (8000408 <DMA_DeInit+0x158>)
 8000314:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8000318:	609a      	str	r2, [r3, #8]
}
 800031a:	e06c      	b.n	80003f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	4a3d      	ldr	r2, [pc, #244]	; (8000414 <DMA_DeInit+0x164>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d104      	bne.n	800032e <DMA_DeInit+0x7e>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8000324:	4b38      	ldr	r3, [pc, #224]	; (8000408 <DMA_DeInit+0x158>)
 8000326:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800032a:	609a      	str	r2, [r3, #8]
}
 800032c:	e063      	b.n	80003f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a39      	ldr	r2, [pc, #228]	; (8000418 <DMA_DeInit+0x168>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d103      	bne.n	800033e <DMA_DeInit+0x8e>
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8000336:	4b34      	ldr	r3, [pc, #208]	; (8000408 <DMA_DeInit+0x158>)
 8000338:	4a38      	ldr	r2, [pc, #224]	; (800041c <DMA_DeInit+0x16c>)
 800033a:	60da      	str	r2, [r3, #12]
}
 800033c:	e05b      	b.n	80003f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4a37      	ldr	r2, [pc, #220]	; (8000420 <DMA_DeInit+0x170>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d103      	bne.n	800034e <DMA_DeInit+0x9e>
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8000346:	4b30      	ldr	r3, [pc, #192]	; (8000408 <DMA_DeInit+0x158>)
 8000348:	4a36      	ldr	r2, [pc, #216]	; (8000424 <DMA_DeInit+0x174>)
 800034a:	60da      	str	r2, [r3, #12]
}
 800034c:	e053      	b.n	80003f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4a35      	ldr	r2, [pc, #212]	; (8000428 <DMA_DeInit+0x178>)
 8000352:	4293      	cmp	r3, r2
 8000354:	d103      	bne.n	800035e <DMA_DeInit+0xae>
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8000356:	4b2c      	ldr	r3, [pc, #176]	; (8000408 <DMA_DeInit+0x158>)
 8000358:	4a34      	ldr	r2, [pc, #208]	; (800042c <DMA_DeInit+0x17c>)
 800035a:	60da      	str	r2, [r3, #12]
}
 800035c:	e04b      	b.n	80003f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4a33      	ldr	r2, [pc, #204]	; (8000430 <DMA_DeInit+0x180>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d104      	bne.n	8000370 <DMA_DeInit+0xc0>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8000366:	4b28      	ldr	r3, [pc, #160]	; (8000408 <DMA_DeInit+0x158>)
 8000368:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 800036c:	60da      	str	r2, [r3, #12]
}
 800036e:	e042      	b.n	80003f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a30      	ldr	r2, [pc, #192]	; (8000434 <DMA_DeInit+0x184>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d103      	bne.n	8000380 <DMA_DeInit+0xd0>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8000378:	4b2f      	ldr	r3, [pc, #188]	; (8000438 <DMA_DeInit+0x188>)
 800037a:	223d      	movs	r2, #61	; 0x3d
 800037c:	609a      	str	r2, [r3, #8]
}
 800037e:	e03a      	b.n	80003f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a2e      	ldr	r2, [pc, #184]	; (800043c <DMA_DeInit+0x18c>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d104      	bne.n	8000392 <DMA_DeInit+0xe2>
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8000388:	4b2b      	ldr	r3, [pc, #172]	; (8000438 <DMA_DeInit+0x188>)
 800038a:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800038e:	609a      	str	r2, [r3, #8]
}
 8000390:	e031      	b.n	80003f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4a2a      	ldr	r2, [pc, #168]	; (8000440 <DMA_DeInit+0x190>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d104      	bne.n	80003a4 <DMA_DeInit+0xf4>
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 800039a:	4b27      	ldr	r3, [pc, #156]	; (8000438 <DMA_DeInit+0x188>)
 800039c:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80003a0:	609a      	str	r2, [r3, #8]
}
 80003a2:	e028      	b.n	80003f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4a27      	ldr	r2, [pc, #156]	; (8000444 <DMA_DeInit+0x194>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d104      	bne.n	80003b6 <DMA_DeInit+0x106>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 80003ac:	4b22      	ldr	r3, [pc, #136]	; (8000438 <DMA_DeInit+0x188>)
 80003ae:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80003b2:	609a      	str	r2, [r3, #8]
}
 80003b4:	e01f      	b.n	80003f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4a23      	ldr	r2, [pc, #140]	; (8000448 <DMA_DeInit+0x198>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d103      	bne.n	80003c6 <DMA_DeInit+0x116>
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 80003be:	4b1e      	ldr	r3, [pc, #120]	; (8000438 <DMA_DeInit+0x188>)
 80003c0:	4a16      	ldr	r2, [pc, #88]	; (800041c <DMA_DeInit+0x16c>)
 80003c2:	60da      	str	r2, [r3, #12]
}
 80003c4:	e017      	b.n	80003f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4a20      	ldr	r2, [pc, #128]	; (800044c <DMA_DeInit+0x19c>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d103      	bne.n	80003d6 <DMA_DeInit+0x126>
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 80003ce:	4b1a      	ldr	r3, [pc, #104]	; (8000438 <DMA_DeInit+0x188>)
 80003d0:	4a14      	ldr	r2, [pc, #80]	; (8000424 <DMA_DeInit+0x174>)
 80003d2:	60da      	str	r2, [r3, #12]
}
 80003d4:	e00f      	b.n	80003f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream6)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a1d      	ldr	r2, [pc, #116]	; (8000450 <DMA_DeInit+0x1a0>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d103      	bne.n	80003e6 <DMA_DeInit+0x136>
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 80003de:	4b16      	ldr	r3, [pc, #88]	; (8000438 <DMA_DeInit+0x188>)
 80003e0:	4a12      	ldr	r2, [pc, #72]	; (800042c <DMA_DeInit+0x17c>)
 80003e2:	60da      	str	r2, [r3, #12]
}
 80003e4:	e007      	b.n	80003f6 <DMA_DeInit+0x146>
    if (DMAy_Streamx == DMA2_Stream7)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4a1a      	ldr	r2, [pc, #104]	; (8000454 <DMA_DeInit+0x1a4>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d103      	bne.n	80003f6 <DMA_DeInit+0x146>
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 80003ee:	4b12      	ldr	r3, [pc, #72]	; (8000438 <DMA_DeInit+0x188>)
 80003f0:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 80003f4:	60da      	str	r2, [r3, #12]
}
 80003f6:	bf00      	nop
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	40026010 	.word	0x40026010
 8000408:	40026000 	.word	0x40026000
 800040c:	40026028 	.word	0x40026028
 8000410:	40026040 	.word	0x40026040
 8000414:	40026058 	.word	0x40026058
 8000418:	40026070 	.word	0x40026070
 800041c:	2000003d 	.word	0x2000003d
 8000420:	40026088 	.word	0x40026088
 8000424:	20000f40 	.word	0x20000f40
 8000428:	400260a0 	.word	0x400260a0
 800042c:	203d0000 	.word	0x203d0000
 8000430:	400260b8 	.word	0x400260b8
 8000434:	40026410 	.word	0x40026410
 8000438:	40026400 	.word	0x40026400
 800043c:	40026428 	.word	0x40026428
 8000440:	40026440 	.word	0x40026440
 8000444:	40026458 	.word	0x40026458
 8000448:	40026470 	.word	0x40026470
 800044c:	40026488 	.word	0x40026488
 8000450:	400264a0 	.word	0x400264a0
 8000454:	400264b8 	.word	0x400264b8

08000458 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000458:	b480      	push	{r7}
 800045a:	b085      	sub	sp, #20
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000462:	2300      	movs	r3, #0
 8000464:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800046c:	68fa      	ldr	r2, [r7, #12]
 800046e:	4b25      	ldr	r3, [pc, #148]	; (8000504 <DMA_Init+0xac>)
 8000470:	4013      	ands	r3, r2
 8000472:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	68db      	ldr	r3, [r3, #12]
 800047c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000482:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800048e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	6a1b      	ldr	r3, [r3, #32]
 8000494:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800049a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004a0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80004a6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004ac:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80004ae:	68fa      	ldr	r2, [r7, #12]
 80004b0:	4313      	orrs	r3, r2
 80004b2:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	68fa      	ldr	r2, [r7, #12]
 80004b8:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	f023 0307 	bic.w	r3, r3, #7
 80004c6:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d0:	4313      	orrs	r3, r2
 80004d2:	68fa      	ldr	r2, [r7, #12]
 80004d4:	4313      	orrs	r3, r2
 80004d6:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	68fa      	ldr	r2, [r7, #12]
 80004dc:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	691a      	ldr	r2, [r3, #16]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	685a      	ldr	r2, [r3, #4]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	689a      	ldr	r2, [r3, #8]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	60da      	str	r2, [r3, #12]
}
 80004f6:	bf00      	nop
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	f01c803f 	.word	0xf01c803f

08000508 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	460b      	mov	r3, r1
 8000512:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000514:	78fb      	ldrb	r3, [r7, #3]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d006      	beq.n	8000528 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f043 0201 	orr.w	r2, r3, #1
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000526:	e005      	b.n	8000534 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f023 0201 	bic.w	r2, r3, #1
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	601a      	str	r2, [r3, #0]
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <DMA_GetCurrDataCounter>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	b29b      	uxth	r3, r3
}
 800054e:	4618      	mov	r0, r3
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr

0800055a <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800055a:	b480      	push	{r7}
 800055c:	b085      	sub	sp, #20
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8000562:	2300      	movs	r3, #0
 8000564:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	2b00      	cmp	r3, #0
 8000570:	d002      	beq.n	8000578 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000572:	2301      	movs	r3, #1
 8000574:	73fb      	strb	r3, [r7, #15]
 8000576:	e001      	b.n	800057c <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000578:	2300      	movs	r3, #0
 800057a:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800057c:	7bfb      	ldrb	r3, [r7, #15]
}
 800057e:	4618      	mov	r0, r3
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
	...

0800058c <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800058c:	b480      	push	{r7}
 800058e:	b087      	sub	sp, #28
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000596:	2300      	movs	r3, #0
 8000598:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4a15      	ldr	r2, [pc, #84]	; (80005f8 <DMA_GetFlagStatus+0x6c>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d802      	bhi.n	80005ac <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80005a6:	4b15      	ldr	r3, [pc, #84]	; (80005fc <DMA_GetFlagStatus+0x70>)
 80005a8:	613b      	str	r3, [r7, #16]
 80005aa:	e001      	b.n	80005b0 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80005ac:	4b14      	ldr	r3, [pc, #80]	; (8000600 <DMA_GetFlagStatus+0x74>)
 80005ae:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d003      	beq.n	80005c2 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 80005ba:	693b      	ldr	r3, [r7, #16]
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	e002      	b.n	80005c8 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 80005c2:	693b      	ldr	r3, [r7, #16]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80005ce:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80005d2:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80005d4:	68fa      	ldr	r2, [r7, #12]
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	4013      	ands	r3, r2
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d002      	beq.n	80005e4 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80005de:	2301      	movs	r3, #1
 80005e0:	75fb      	strb	r3, [r7, #23]
 80005e2:	e001      	b.n	80005e8 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 80005e4:	2300      	movs	r3, #0
 80005e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 80005e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	371c      	adds	r7, #28
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	4002640f 	.word	0x4002640f
 80005fc:	40026000 	.word	0x40026000
 8000600:	40026400 	.word	0x40026400

08000604 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	4613      	mov	r3, r2
 8000610:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000618:	2b00      	cmp	r3, #0
 800061a:	d00f      	beq.n	800063c <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d006      	beq.n	8000630 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	615a      	str	r2, [r3, #20]
 800062e:	e005      	b.n	800063c <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	695b      	ldr	r3, [r3, #20]
 8000634:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	2b80      	cmp	r3, #128	; 0x80
 8000640:	d014      	beq.n	800066c <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d008      	beq.n	800065a <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	f003 031e 	and.w	r3, r3, #30
 8000652:	431a      	orrs	r2, r3
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 8000658:	e008      	b.n	800066c <DMA_ITConfig+0x68>
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	f003 031e 	and.w	r3, r3, #30
 8000664:	43db      	mvns	r3, r3
 8000666:	401a      	ands	r2, r3
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	601a      	str	r2, [r3, #0]
}
 800066c:	bf00      	nop
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4a10      	ldr	r2, [pc, #64]	; (80006c8 <DMA_ClearITPendingBit+0x50>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d802      	bhi.n	8000690 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <DMA_ClearITPendingBit+0x54>)
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	e001      	b.n	8000694 <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <DMA_ClearITPendingBit+0x58>)
 8000692:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800069a:	2b00      	cmp	r3, #0
 800069c:	d007      	beq.n	80006ae <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80006a4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80006a8:	68fa      	ldr	r2, [r7, #12]
 80006aa:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 80006ac:	e006      	b.n	80006bc <DMA_ClearITPendingBit+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80006b4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80006b8:	68fa      	ldr	r2, [r7, #12]
 80006ba:	6093      	str	r3, [r2, #8]
}
 80006bc:	bf00      	nop
 80006be:	3714      	adds	r7, #20
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	4002640f 	.word	0x4002640f
 80006cc:	40026000 	.word	0x40026000
 80006d0:	40026400 	.word	0x40026400

080006d4 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 80006dc:	2300      	movs	r3, #0
 80006de:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <EXTI_GetITStatus+0x44>)
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4013      	ands	r3, r2
 80006ec:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80006ee:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <EXTI_GetITStatus+0x44>)
 80006f0:	695a      	ldr	r2, [r3, #20]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4013      	ands	r3, r2
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d005      	beq.n	8000706 <EXTI_GetITStatus+0x32>
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d002      	beq.n	8000706 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8000700:	2301      	movs	r3, #1
 8000702:	73fb      	strb	r3, [r7, #15]
 8000704:	e001      	b.n	800070a <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8000706:	2300      	movs	r3, #0
 8000708:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800070a:	7bfb      	ldrb	r3, [r7, #15]
}
 800070c:	4618      	mov	r0, r3
 800070e:	3714      	adds	r7, #20
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	40013c00 	.word	0x40013c00

0800071c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000724:	4a04      	ldr	r2, [pc, #16]	; (8000738 <EXTI_ClearITPendingBit+0x1c>)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6153      	str	r3, [r2, #20]
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	40013c00 	.word	0x40013c00

0800073c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800073c:	b480      	push	{r7}
 800073e:	b087      	sub	sp, #28
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
 8000756:	e076      	b.n	8000846 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000758:	2201      	movs	r2, #1
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	fa02 f303 	lsl.w	r3, r2, r3
 8000760:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	693b      	ldr	r3, [r7, #16]
 8000768:	4013      	ands	r3, r2
 800076a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800076c:	68fa      	ldr	r2, [r7, #12]
 800076e:	693b      	ldr	r3, [r7, #16]
 8000770:	429a      	cmp	r2, r3
 8000772:	d165      	bne.n	8000840 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	2103      	movs	r1, #3
 800077e:	fa01 f303 	lsl.w	r3, r1, r3
 8000782:	43db      	mvns	r3, r3
 8000784:	401a      	ands	r2, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	791b      	ldrb	r3, [r3, #4]
 8000792:	4619      	mov	r1, r3
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	fa01 f303 	lsl.w	r3, r1, r3
 800079c:	431a      	orrs	r2, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	791b      	ldrb	r3, [r3, #4]
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d003      	beq.n	80007b2 <GPIO_Init+0x76>
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	791b      	ldrb	r3, [r3, #4]
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d12e      	bne.n	8000810 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	689a      	ldr	r2, [r3, #8]
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	2103      	movs	r1, #3
 80007bc:	fa01 f303 	lsl.w	r3, r1, r3
 80007c0:	43db      	mvns	r3, r3
 80007c2:	401a      	ands	r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	689a      	ldr	r2, [r3, #8]
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	795b      	ldrb	r3, [r3, #5]
 80007d0:	4619      	mov	r1, r3
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	fa01 f303 	lsl.w	r3, r1, r3
 80007da:	431a      	orrs	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	685a      	ldr	r2, [r3, #4]
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	4619      	mov	r1, r3
 80007ea:	2301      	movs	r3, #1
 80007ec:	408b      	lsls	r3, r1
 80007ee:	43db      	mvns	r3, r3
 80007f0:	401a      	ands	r2, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	683a      	ldr	r2, [r7, #0]
 80007fc:	7992      	ldrb	r2, [r2, #6]
 80007fe:	4611      	mov	r1, r2
 8000800:	697a      	ldr	r2, [r7, #20]
 8000802:	b292      	uxth	r2, r2
 8000804:	fa01 f202 	lsl.w	r2, r1, r2
 8000808:	b292      	uxth	r2, r2
 800080a:	431a      	orrs	r2, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	68da      	ldr	r2, [r3, #12]
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	b29b      	uxth	r3, r3
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	2103      	movs	r1, #3
 800081c:	fa01 f303 	lsl.w	r3, r1, r3
 8000820:	43db      	mvns	r3, r3
 8000822:	401a      	ands	r2, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	68da      	ldr	r2, [r3, #12]
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	79db      	ldrb	r3, [r3, #7]
 8000830:	4619      	mov	r1, r3
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	fa01 f303 	lsl.w	r3, r1, r3
 800083a:	431a      	orrs	r2, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	3301      	adds	r3, #1
 8000844:	617b      	str	r3, [r7, #20]
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	2b0f      	cmp	r3, #15
 800084a:	d985      	bls.n	8000758 <GPIO_Init+0x1c>
    }
  }
}
 800084c:	bf00      	nop
 800084e:	371c      	adds	r7, #28
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	460b      	mov	r3, r1
 8000862:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000864:	2300      	movs	r3, #0
 8000866:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	691a      	ldr	r2, [r3, #16]
 800086c:	887b      	ldrh	r3, [r7, #2]
 800086e:	4013      	ands	r3, r2
 8000870:	2b00      	cmp	r3, #0
 8000872:	d002      	beq.n	800087a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000874:	2301      	movs	r3, #1
 8000876:	73fb      	strb	r3, [r7, #15]
 8000878:	e001      	b.n	800087e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800087a:	2300      	movs	r3, #0
 800087c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800087e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000880:	4618      	mov	r0, r3
 8000882:	3714      	adds	r7, #20
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	460b      	mov	r3, r1
 8000896:	807b      	strh	r3, [r7, #2]
 8000898:	4613      	mov	r3, r2
 800089a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800089c:	2300      	movs	r3, #0
 800089e:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80008a4:	787a      	ldrb	r2, [r7, #1]
 80008a6:	887b      	ldrh	r3, [r7, #2]
 80008a8:	f003 0307 	and.w	r3, r3, #7
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80008b4:	887b      	ldrh	r3, [r7, #2]
 80008b6:	08db      	lsrs	r3, r3, #3
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	4618      	mov	r0, r3
 80008bc:	887b      	ldrh	r3, [r7, #2]
 80008be:	08db      	lsrs	r3, r3, #3
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	461a      	mov	r2, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3208      	adds	r2, #8
 80008c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008cc:	887b      	ldrh	r3, [r7, #2]
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	210f      	movs	r1, #15
 80008d6:	fa01 f303 	lsl.w	r3, r1, r3
 80008da:	43db      	mvns	r3, r3
 80008dc:	ea02 0103 	and.w	r1, r2, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	f100 0208 	add.w	r2, r0, #8
 80008e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80008ea:	887b      	ldrh	r3, [r7, #2]
 80008ec:	08db      	lsrs	r3, r3, #3
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	461a      	mov	r2, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	3208      	adds	r2, #8
 80008f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000900:	887b      	ldrh	r3, [r7, #2]
 8000902:	08db      	lsrs	r3, r3, #3
 8000904:	b29b      	uxth	r3, r3
 8000906:	461a      	mov	r2, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3208      	adds	r2, #8
 800090c:	68b9      	ldr	r1, [r7, #8]
 800090e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000912:	bf00      	nop
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
	...

08000920 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000920:	b480      	push	{r7}
 8000922:	b089      	sub	sp, #36	; 0x24
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000928:	2300      	movs	r3, #0
 800092a:	61bb      	str	r3, [r7, #24]
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
 8000934:	2302      	movs	r3, #2
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	2302      	movs	r3, #2
 800093e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000940:	4b47      	ldr	r3, [pc, #284]	; (8000a60 <RCC_GetClocksFreq+0x140>)
 8000942:	689b      	ldr	r3, [r3, #8]
 8000944:	f003 030c 	and.w	r3, r3, #12
 8000948:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800094a:	69bb      	ldr	r3, [r7, #24]
 800094c:	2b04      	cmp	r3, #4
 800094e:	d007      	beq.n	8000960 <RCC_GetClocksFreq+0x40>
 8000950:	2b08      	cmp	r3, #8
 8000952:	d009      	beq.n	8000968 <RCC_GetClocksFreq+0x48>
 8000954:	2b00      	cmp	r3, #0
 8000956:	d13d      	bne.n	80009d4 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a42      	ldr	r2, [pc, #264]	; (8000a64 <RCC_GetClocksFreq+0x144>)
 800095c:	601a      	str	r2, [r3, #0]
      break;
 800095e:	e03d      	b.n	80009dc <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4a41      	ldr	r2, [pc, #260]	; (8000a68 <RCC_GetClocksFreq+0x148>)
 8000964:	601a      	str	r2, [r3, #0]
      break;
 8000966:	e039      	b.n	80009dc <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000968:	4b3d      	ldr	r3, [pc, #244]	; (8000a60 <RCC_GetClocksFreq+0x140>)
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	0d9b      	lsrs	r3, r3, #22
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000974:	4b3a      	ldr	r3, [pc, #232]	; (8000a60 <RCC_GetClocksFreq+0x140>)
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800097c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d00c      	beq.n	800099e <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000984:	4a38      	ldr	r2, [pc, #224]	; (8000a68 <RCC_GetClocksFreq+0x148>)
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	fbb2 f3f3 	udiv	r3, r2, r3
 800098c:	4a34      	ldr	r2, [pc, #208]	; (8000a60 <RCC_GetClocksFreq+0x140>)
 800098e:	6852      	ldr	r2, [r2, #4]
 8000990:	0992      	lsrs	r2, r2, #6
 8000992:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000996:	fb02 f303 	mul.w	r3, r2, r3
 800099a:	61fb      	str	r3, [r7, #28]
 800099c:	e00b      	b.n	80009b6 <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800099e:	4a31      	ldr	r2, [pc, #196]	; (8000a64 <RCC_GetClocksFreq+0x144>)
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a6:	4a2e      	ldr	r2, [pc, #184]	; (8000a60 <RCC_GetClocksFreq+0x140>)
 80009a8:	6852      	ldr	r2, [r2, #4]
 80009aa:	0992      	lsrs	r2, r2, #6
 80009ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80009b0:	fb02 f303 	mul.w	r3, r2, r3
 80009b4:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80009b6:	4b2a      	ldr	r3, [pc, #168]	; (8000a60 <RCC_GetClocksFreq+0x140>)
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	0c1b      	lsrs	r3, r3, #16
 80009bc:	f003 0303 	and.w	r3, r3, #3
 80009c0:	3301      	adds	r3, #1
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80009c6:	69fa      	ldr	r2, [r7, #28]
 80009c8:	693b      	ldr	r3, [r7, #16]
 80009ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	601a      	str	r2, [r3, #0]
      break;
 80009d2:	e003      	b.n	80009dc <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4a23      	ldr	r2, [pc, #140]	; (8000a64 <RCC_GetClocksFreq+0x144>)
 80009d8:	601a      	str	r2, [r3, #0]
      break;
 80009da:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80009dc:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <RCC_GetClocksFreq+0x140>)
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80009e4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80009e6:	69bb      	ldr	r3, [r7, #24]
 80009e8:	091b      	lsrs	r3, r3, #4
 80009ea:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80009ec:	4a1f      	ldr	r2, [pc, #124]	; (8000a6c <RCC_GetClocksFreq+0x14c>)
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	4413      	add	r3, r2
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	40da      	lsrs	r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000a04:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <RCC_GetClocksFreq+0x140>)
 8000a06:	689b      	ldr	r3, [r3, #8]
 8000a08:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000a0c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000a0e:	69bb      	ldr	r3, [r7, #24]
 8000a10:	0a9b      	lsrs	r3, r3, #10
 8000a12:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000a14:	4a15      	ldr	r2, [pc, #84]	; (8000a6c <RCC_GetClocksFreq+0x14c>)
 8000a16:	69bb      	ldr	r3, [r7, #24]
 8000a18:	4413      	add	r3, r2
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	685a      	ldr	r2, [r3, #4]
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	40da      	lsrs	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <RCC_GetClocksFreq+0x140>)
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000a34:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000a36:	69bb      	ldr	r3, [r7, #24]
 8000a38:	0b5b      	lsrs	r3, r3, #13
 8000a3a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000a3c:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <RCC_GetClocksFreq+0x14c>)
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	4413      	add	r3, r2
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	685a      	ldr	r2, [r3, #4]
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	40da      	lsrs	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	60da      	str	r2, [r3, #12]
}
 8000a54:	bf00      	nop
 8000a56:	3724      	adds	r7, #36	; 0x24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	40023800 	.word	0x40023800
 8000a64:	00f42400 	.word	0x00f42400
 8000a68:	007a1200 	.word	0x007a1200
 8000a6c:	20000000 	.word	0x20000000

08000a70 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a7c:	78fb      	ldrb	r3, [r7, #3]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d006      	beq.n	8000a90 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000a82:	490a      	ldr	r1, [pc, #40]	; (8000aac <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000a8e:	e006      	b.n	8000a9e <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000a90:	4906      	ldr	r1, [pc, #24]	; (8000aac <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	43db      	mvns	r3, r3
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800

08000ab0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	460b      	mov	r3, r1
 8000aba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000abc:	78fb      	ldrb	r3, [r7, #3]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d006      	beq.n	8000ad0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000ac2:	490a      	ldr	r1, [pc, #40]	; (8000aec <RCC_APB1PeriphClockCmd+0x3c>)
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <RCC_APB1PeriphClockCmd+0x3c>)
 8000ac6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000ace:	e006      	b.n	8000ade <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000ad0:	4906      	ldr	r1, [pc, #24]	; (8000aec <RCC_APB1PeriphClockCmd+0x3c>)
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <RCC_APB1PeriphClockCmd+0x3c>)
 8000ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	4013      	ands	r3, r2
 8000adc:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800

08000af0 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a29      	ldr	r2, [pc, #164]	; (8000bac <TIM_TimeBaseInit+0xbc>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d013      	beq.n	8000b34 <TIM_TimeBaseInit+0x44>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4a28      	ldr	r2, [pc, #160]	; (8000bb0 <TIM_TimeBaseInit+0xc0>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d00f      	beq.n	8000b34 <TIM_TimeBaseInit+0x44>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b1a:	d00b      	beq.n	8000b34 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a25      	ldr	r2, [pc, #148]	; (8000bb4 <TIM_TimeBaseInit+0xc4>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d007      	beq.n	8000b34 <TIM_TimeBaseInit+0x44>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a24      	ldr	r2, [pc, #144]	; (8000bb8 <TIM_TimeBaseInit+0xc8>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d003      	beq.n	8000b34 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a23      	ldr	r2, [pc, #140]	; (8000bbc <TIM_TimeBaseInit+0xcc>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d108      	bne.n	8000b46 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000b34:	89fb      	ldrh	r3, [r7, #14]
 8000b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b3a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	885a      	ldrh	r2, [r3, #2]
 8000b40:	89fb      	ldrh	r3, [r7, #14]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4a1d      	ldr	r2, [pc, #116]	; (8000bc0 <TIM_TimeBaseInit+0xd0>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d00c      	beq.n	8000b68 <TIM_TimeBaseInit+0x78>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4a1c      	ldr	r2, [pc, #112]	; (8000bc4 <TIM_TimeBaseInit+0xd4>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d008      	beq.n	8000b68 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000b56:	89fb      	ldrh	r3, [r7, #14]
 8000b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000b5c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	891a      	ldrh	r2, [r3, #8]
 8000b62:	89fb      	ldrh	r3, [r7, #14]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	89fa      	ldrh	r2, [r7, #14]
 8000b6c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685a      	ldr	r2, [r3, #4]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	881a      	ldrh	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <TIM_TimeBaseInit+0xbc>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d003      	beq.n	8000b8e <TIM_TimeBaseInit+0x9e>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4a09      	ldr	r2, [pc, #36]	; (8000bb0 <TIM_TimeBaseInit+0xc0>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d104      	bne.n	8000b98 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	7a9b      	ldrb	r3, [r3, #10]
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	829a      	strh	r2, [r3, #20]
}
 8000b9e:	bf00      	nop
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40010000 	.word	0x40010000
 8000bb0:	40010400 	.word	0x40010400
 8000bb4:	40000400 	.word	0x40000400
 8000bb8:	40000800 	.word	0x40000800
 8000bbc:	40000c00 	.word	0x40000c00
 8000bc0:	40001000 	.word	0x40001000
 8000bc4:	40001400 	.word	0x40001400

08000bc8 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000bd4:	78fb      	ldrb	r3, [r7, #3]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d008      	beq.n	8000bec <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8000bea:	e007      	b.n	8000bfc <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	f023 0301 	bic.w	r3, r3, #1
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	801a      	strh	r2, [r3, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	460b      	mov	r3, r1
 8000c12:	807b      	strh	r3, [r7, #2]
 8000c14:	4613      	mov	r3, r2
 8000c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000c18:	787b      	ldrb	r3, [r7, #1]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d008      	beq.n	8000c30 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	899b      	ldrh	r3, [r3, #12]
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	887b      	ldrh	r3, [r7, #2]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	b29a      	uxth	r2, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000c2e:	e009      	b.n	8000c44 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	899b      	ldrh	r3, [r3, #12]
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	887b      	ldrh	r3, [r7, #2]
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	819a      	strh	r2, [r3, #12]
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000c5c:	887b      	ldrh	r3, [r7, #2]
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	821a      	strh	r2, [r3, #16]
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
	...

08000c74 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	; 0x28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
 8000c82:	2300      	movs	r3, #0
 8000c84:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	8a1b      	ldrh	r3, [r3, #16]
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	88db      	ldrh	r3, [r3, #6]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	899b      	ldrh	r3, [r3, #12]
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbc:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000cc0:	f023 030c 	bic.w	r3, r3, #12
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	889a      	ldrh	r2, [r3, #4]
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	891b      	ldrh	r3, [r3, #8]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	461a      	mov	r2, r3
 8000cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	8a9b      	ldrh	r3, [r3, #20]
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	899b      	ldrh	r3, [r3, #12]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d02:	4313      	orrs	r3, r2
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000d0e:	f107 0308 	add.w	r3, r7, #8
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fe04 	bl	8000920 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a30      	ldr	r2, [pc, #192]	; (8000ddc <USART_Init+0x168>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d003      	beq.n	8000d28 <USART_Init+0xb4>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a2f      	ldr	r2, [pc, #188]	; (8000de0 <USART_Init+0x16c>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d102      	bne.n	8000d2e <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	623b      	str	r3, [r7, #32]
 8000d2c:	e001      	b.n	8000d32 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	899b      	ldrh	r3, [r3, #12]
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	b21b      	sxth	r3, r3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	da0c      	bge.n	8000d58 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000d3e:	6a3a      	ldr	r2, [r7, #32]
 8000d40:	4613      	mov	r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	4413      	add	r3, r2
 8000d46:	009a      	lsls	r2, r3, #2
 8000d48:	441a      	add	r2, r3
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d54:	61fb      	str	r3, [r7, #28]
 8000d56:	e00b      	b.n	8000d70 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000d58:	6a3a      	ldr	r2, [r7, #32]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	4413      	add	r3, r2
 8000d60:	009a      	lsls	r2, r3, #2
 8000d62:	441a      	add	r2, r3
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6e:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	4a1c      	ldr	r2, [pc, #112]	; (8000de4 <USART_Init+0x170>)
 8000d74:	fba2 2303 	umull	r2, r3, r2, r3
 8000d78:	095b      	lsrs	r3, r3, #5
 8000d7a:	011b      	lsls	r3, r3, #4
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d80:	091b      	lsrs	r3, r3, #4
 8000d82:	2264      	movs	r2, #100	; 0x64
 8000d84:	fb02 f303 	mul.w	r3, r2, r3
 8000d88:	69fa      	ldr	r2, [r7, #28]
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	899b      	ldrh	r3, [r3, #12]
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	b21b      	sxth	r3, r3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	da0c      	bge.n	8000db4 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	3332      	adds	r3, #50	; 0x32
 8000da0:	4a10      	ldr	r2, [pc, #64]	; (8000de4 <USART_Init+0x170>)
 8000da2:	fba2 2303 	umull	r2, r3, r2, r3
 8000da6:	095b      	lsrs	r3, r3, #5
 8000da8:	f003 0307 	and.w	r3, r3, #7
 8000dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dae:	4313      	orrs	r3, r2
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
 8000db2:	e00b      	b.n	8000dcc <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	011b      	lsls	r3, r3, #4
 8000db8:	3332      	adds	r3, #50	; 0x32
 8000dba:	4a0a      	ldr	r2, [pc, #40]	; (8000de4 <USART_Init+0x170>)
 8000dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc0:	095b      	lsrs	r3, r3, #5
 8000dc2:	f003 030f 	and.w	r3, r3, #15
 8000dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	811a      	strh	r2, [r3, #8]
}
 8000dd4:	bf00      	nop
 8000dd6:	3728      	adds	r7, #40	; 0x28
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40011000 	.word	0x40011000
 8000de0:	40011400 	.word	0x40011400
 8000de4:	51eb851f 	.word	0x51eb851f

08000de8 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	460b      	mov	r3, r1
 8000df2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000df4:	78fb      	ldrb	r3, [r7, #3]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d008      	beq.n	8000e0c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	899b      	ldrh	r3, [r3, #12]
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000e0a:	e007      	b.n	8000e1c <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	899b      	ldrh	r3, [r3, #12]
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000e16:	b29a      	uxth	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	819a      	strh	r2, [r3, #12]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	460b      	mov	r3, r1
 8000e32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000e34:	887b      	ldrh	r3, [r7, #2]
 8000e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	809a      	strh	r2, [r3, #4]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	889b      	ldrh	r3, [r3, #4]
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e5e:	b29b      	uxth	r3, r3
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	460b      	mov	r3, r1
 8000e76:	807b      	strh	r3, [r7, #2]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8000e7c:	787b      	ldrb	r3, [r7, #1]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d008      	beq.n	8000e94 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	8a9b      	ldrh	r3, [r3, #20]
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	887b      	ldrh	r3, [r7, #2]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
 8000e92:	e009      	b.n	8000ea8 <USART_DMACmd+0x3c>
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	8a9b      	ldrh	r3, [r3, #20]
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	887b      	ldrh	r3, [r7, #2]
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	829a      	strh	r2, [r3, #20]
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b087      	sub	sp, #28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	807b      	strh	r3, [r7, #2]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000ed8:	887b      	ldrh	r3, [r7, #2]
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	095b      	lsrs	r3, r3, #5
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000ee2:	887b      	ldrh	r3, [r7, #2]
 8000ee4:	f003 031f 	and.w	r3, r3, #31
 8000ee8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000eea:	2201      	movs	r2, #1
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d103      	bne.n	8000f02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	330c      	adds	r3, #12
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	e009      	b.n	8000f16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d103      	bne.n	8000f10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	3310      	adds	r3, #16
 8000f0c:	617b      	str	r3, [r7, #20]
 8000f0e:	e002      	b.n	8000f16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	3314      	adds	r3, #20
 8000f14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000f16:	787b      	ldrb	r3, [r7, #1]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d006      	beq.n	8000f2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	6811      	ldr	r1, [r2, #0]
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	430a      	orrs	r2, r1
 8000f26:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000f28:	e006      	b.n	8000f38 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	697a      	ldr	r2, [r7, #20]
 8000f2e:	6811      	ldr	r1, [r2, #0]
 8000f30:	68ba      	ldr	r2, [r7, #8]
 8000f32:	43d2      	mvns	r2, r2
 8000f34:	400a      	ands	r2, r1
 8000f36:	601a      	str	r2, [r3, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	371c      	adds	r7, #28
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000f50:	2300      	movs	r3, #0
 8000f52:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	887b      	ldrh	r3, [r7, #2]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d002      	beq.n	8000f6a <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000f64:	2301      	movs	r3, #1
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e001      	b.n	8000f6e <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b087      	sub	sp, #28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
 8000f90:	2300      	movs	r3, #0
 8000f92:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000f94:	2300      	movs	r3, #0
 8000f96:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000f98:	887b      	ldrh	r3, [r7, #2]
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	095b      	lsrs	r3, r3, #5
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000fa2:	887b      	ldrh	r3, [r7, #2]
 8000fa4:	f003 031f 	and.w	r3, r3, #31
 8000fa8:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000faa:	2201      	movs	r2, #1
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d107      	bne.n	8000fca <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	899b      	ldrh	r3, [r3, #12]
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	e011      	b.n	8000fee <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d107      	bne.n	8000fe0 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	8a1b      	ldrh	r3, [r3, #16]
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	e006      	b.n	8000fee <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	8a9b      	ldrh	r3, [r3, #20]
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	4013      	ands	r3, r2
 8000fec:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000fee:	887b      	ldrh	r3, [r7, #2]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	b29b      	uxth	r3, r3
 8001006:	461a      	mov	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4013      	ands	r3, r2
 800100c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d005      	beq.n	8001020 <USART_GetITStatus+0xa4>
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d002      	beq.n	8001020 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 800101a:	2301      	movs	r3, #1
 800101c:	74fb      	strb	r3, [r7, #19]
 800101e:	e001      	b.n	8001024 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8001020:	2300      	movs	r3, #0
 8001022:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001024:	7cfb      	ldrb	r3, [r7, #19]
}
 8001026:	4618      	mov	r0, r3
 8001028:	371c      	adds	r7, #28
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <init_Delay>:
 */

#include "Delay.h"

void init_Delay(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
	RCC_DelayPeriphClockCmd(RCC_Delay_Periph,ENABLE);
 800103a:	2101      	movs	r1, #1
 800103c:	2001      	movs	r0, #1
 800103e:	f7ff fd37 	bl	8000ab0 <RCC_APB1PeriphClockCmd>

	TIM_TimeBaseInitTypeDef timerInitStructure; //create a 1ms delaay

	timerInitStructure.TIM_Prescaler = PSC_Base;
 8001042:	f241 0368 	movw	r3, #4200	; 0x1068
 8001046:	80bb      	strh	r3, [r7, #4]
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8001048:	2300      	movs	r3, #0
 800104a:	80fb      	strh	r3, [r7, #6]
	timerInitStructure.TIM_Period= 4999;
 800104c:	f241 3387 	movw	r3, #4999	; 0x1387
 8001050:	60bb      	str	r3, [r7, #8]
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	81bb      	strh	r3, [r7, #12]
	timerInitStructure.TIM_RepetitionCounter = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	73bb      	strb	r3, [r7, #14]

	TIM_TimeBaseInit(Delay_Timer, &timerInitStructure);
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	4619      	mov	r1, r3
 800105e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001062:	f7ff fd45 	bl	8000af0 <TIM_TimeBaseInit>
	NVIC_InitTypeDef nvicStructure;
    nvicStructure.NVIC_IRQChannel = Delay_IRQn;
 8001066:	231c      	movs	r3, #28
 8001068:	703b      	strb	r3, [r7, #0]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	707b      	strb	r3, [r7, #1]
	nvicStructure.NVIC_IRQChannelSubPriority = 1;
 800106e:	2301      	movs	r3, #1
 8001070:	70bb      	strb	r3, [r7, #2]
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 8001072:	2301      	movs	r3, #1
 8001074:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&nvicStructure);
 8001076:	463b      	mov	r3, r7
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff f8b7 	bl	80001ec <NVIC_Init>
	timeout = 0;
 800107e:	4b03      	ldr	r3, [pc, #12]	; (800108c <init_Delay+0x58>)
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
	//enable interrupts
}
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200000a0 	.word	0x200000a0

08001090 <Delay_begin_Timeout>:

void Delay_begin_Timeout(uint32_t time)//time in ms
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	//clear any active flags
	timeout = 0;
 8001098:	4b19      	ldr	r3, [pc, #100]	; (8001100 <Delay_begin_Timeout+0x70>)
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
	float ms = (float)time/1000;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	ee07 3a90 	vmov	s15, r3
 80010a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010a8:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001104 <Delay_begin_Timeout+0x74>
 80010ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010b0:	edc7 7a03 	vstr	s15, [r7, #12]
	//set prescaler to 100
	uint32_t arr_value = ms*clock_frequency/(PSC_Base) -1;
 80010b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80010b8:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001108 <Delay_begin_Timeout+0x78>
 80010bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010c0:	eddf 6a12 	vldr	s13, [pc, #72]	; 800110c <Delay_begin_Timeout+0x7c>
 80010c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010d4:	ee17 3a90 	vmov	r3, s15
 80010d8:	60bb      	str	r3, [r7, #8]
	Delay_Timer->ARR = arr_value;
 80010da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM_Cmd(Delay_Timer, ENABLE);
 80010e2:	2101      	movs	r1, #1
 80010e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010e8:	f7ff fd6e 	bl	8000bc8 <TIM_Cmd>
	TIM_ITConfig(Delay_Timer,TIM_IT_Update,ENABLE);
 80010ec:	2201      	movs	r2, #1
 80010ee:	2101      	movs	r1, #1
 80010f0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010f4:	f7ff fd88 	bl	8000c08 <TIM_ITConfig>
}
 80010f8:	bf00      	nop
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200000a0 	.word	0x200000a0
 8001104:	447a0000 	.word	0x447a0000
 8001108:	4ca037a0 	.word	0x4ca037a0
 800110c:	45834000 	.word	0x45834000

08001110 <TIM2_IRQHandler>:
void Delay_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
	//set timeout flag
	timeout = 1;
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <TIM2_IRQHandler+0x1c>)
 8001116:	2201      	movs	r2, #1
 8001118:	601a      	str	r2, [r3, #0]
	//disable timer
	TIM_ClearITPendingBit(Delay_Timer, TIM_IT_Update);
 800111a:	2101      	movs	r1, #1
 800111c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001120:	f7ff fd96 	bl	8000c50 <TIM_ClearITPendingBit>
	Delay_Disable();
 8001124:	f000 f804 	bl	8001130 <Delay_Disable>
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	200000a0 	.word	0x200000a0

08001130 <Delay_Disable>:

void Delay_Disable(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	//turn off timer
	TIM_ITConfig(Delay_Timer,TIM_IT_Update,DISABLE);
 8001134:	2200      	movs	r2, #0
 8001136:	2101      	movs	r1, #1
 8001138:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800113c:	f7ff fd64 	bl	8000c08 <TIM_ITConfig>
	TIM_Cmd(Delay_Timer, DISABLE);
 8001140:	2100      	movs	r1, #0
 8001142:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001146:	f7ff fd3f 	bl	8000bc8 <TIM_Cmd>
	//clear counter
	assert_param(IS_TIM_ALL_PERIPH(Delay_Timer));
	Delay_Timer->CNT = 0;
 800114a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800114e:	2200      	movs	r2, #0
 8001150:	625a      	str	r2, [r3, #36]	; 0x24

}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <init_Iridium_USART>:
 */

#include "Iridium.h"

void init_Iridium_USART(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b096      	sub	sp, #88	; 0x58
 800115c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	USART_InitTypeDef USART5_InitStruct;
	NVIC_InitTypeDef NVIC_InitStruct;
	/* ENABLE RCC */
	//clear flags
	IR_Rx_done = 0;
 800115e:	4b8e      	ldr	r3, [pc, #568]	; (8001398 <init_Iridium_USART+0x240>)
 8001160:	2200      	movs	r2, #0
 8001162:	701a      	strb	r2, [r3, #0]
	status_Received = 0;
 8001164:	4b8d      	ldr	r3, [pc, #564]	; (800139c <init_Iridium_USART+0x244>)
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
	bin_message_received = 0;
 800116a:	4b8d      	ldr	r3, [pc, #564]	; (80013a0 <init_Iridium_USART+0x248>)
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]
	network_available = 0;
 8001170:	4b8c      	ldr	r3, [pc, #560]	; (80013a4 <init_Iridium_USART+0x24c>)
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
	Iridium_USART_PeriphClockCommand(Iridium_USART_RCCPeriph ,ENABLE);
 8001176:	2101      	movs	r1, #1
 8001178:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800117c:	f7ff fc98 	bl	8000ab0 <RCC_APB1PeriphClockCmd>

#ifdef USE_2_GPIO_Ports
	Iridium_GPIO_PeriphClockCommand(Iridium_GPIO_RCCPeriph| Iridium_GPIO_RCCPeriph_2,ENABLE);
 8001180:	2101      	movs	r1, #1
 8001182:	200c      	movs	r0, #12
 8001184:	f7ff fc74 	bl	8000a70 <RCC_AHB1PeriphClockCmd>
#else
	Iridium_GPIO_PeriphClockCommand(Iridium_GPIO_RCCPeriph,ENABLE);
#endif

	/* Configure GPIO to alternate function Open Drain Pull UP */
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8001188:	2302      	movs	r3, #2
 800118a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 800118e:	2301      	movs	r3, #1
 8001190:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8001194:	2300      	movs	r3, #0
 8001196:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800119a:	2303      	movs	r3, #3
 800119c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

#ifdef USE_2_GPIO_Ports
	//first Tx Pin then RX pin
	GPIO_InitStruct.GPIO_Pin = Iridium_USART_TX;
 80011a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a4:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_Init(Iridium_GPIO,&GPIO_InitStruct);
 80011a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80011aa:	4619      	mov	r1, r3
 80011ac:	487e      	ldr	r0, [pc, #504]	; (80013a8 <init_Iridium_USART+0x250>)
 80011ae:	f7ff fac5 	bl	800073c <GPIO_Init>
	GPIO_InitStruct.GPIO_Pin = Iridium_USART_RX;
 80011b2:	2304      	movs	r3, #4
 80011b4:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_Init(Iridium_GPIO_2,&GPIO_InitStruct);
 80011b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80011ba:	4619      	mov	r1, r3
 80011bc:	487b      	ldr	r0, [pc, #492]	; (80013ac <init_Iridium_USART+0x254>)
 80011be:	f7ff fabd 	bl	800073c <GPIO_Init>
	GPIO_PinAFConfig(Iridium_GPIO_2,Iridium_USART_RXsrc,Iridium_GPIO_AF);
 80011c2:	2208      	movs	r2, #8
 80011c4:	2102      	movs	r1, #2
 80011c6:	4879      	ldr	r0, [pc, #484]	; (80013ac <init_Iridium_USART+0x254>)
 80011c8:	f7ff fb60 	bl	800088c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(Iridium_GPIO,Iridium_USART_TXsrc,Iridium_GPIO_AF);
 80011cc:	2208      	movs	r2, #8
 80011ce:	210c      	movs	r1, #12
 80011d0:	4875      	ldr	r0, [pc, #468]	; (80013a8 <init_Iridium_USART+0x250>)
 80011d2:	f7ff fb5b 	bl	800088c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(Iridium_GPIO,Iridium_USART_TXsrc,Iridium_GPIO_AF);
#endif

	//AF Mapping
	/* Configure USART	*/
	USART5_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 80011d6:	230c      	movs	r3, #12
 80011d8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	USART5_InitStruct.USART_WordLength = USART_WordLength_8b;
 80011dc:	2300      	movs	r3, #0
 80011de:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	USART5_InitStruct.USART_StopBits = USART_StopBits_1;
 80011e2:	2300      	movs	r3, #0
 80011e4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	USART5_InitStruct.USART_Parity = USART_Parity_No;
 80011e8:	2300      	movs	r3, #0
 80011ea:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	USART5_InitStruct.USART_BaudRate = Iridium_Baudrate;
 80011ee:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 80011f2:	643b      	str	r3, [r7, #64]	; 0x40
	USART5_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80011f4:	2300      	movs	r3, #0
 80011f6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	USART_Init(Iridium_USART, &USART5_InitStruct);
 80011fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011fe:	4619      	mov	r1, r3
 8001200:	486b      	ldr	r0, [pc, #428]	; (80013b0 <init_Iridium_USART+0x258>)
 8001202:	f7ff fd37 	bl	8000c74 <USART_Init>

	/* Configure NVIC for interrupt */
	NVIC_InitStruct.NVIC_IRQChannel = Iridium_USART_IRQn;
 8001206:	2335      	movs	r3, #53	; 0x35
 8001208:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 800120c:	2301      	movs	r3, #1
 800120e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 1;
 8001218:	2301      	movs	r3, #1
 800121a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	NVIC_Init(&NVIC_InitStruct);
 800121e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001222:	4618      	mov	r0, r3
 8001224:	f7fe ffe2 	bl	80001ec <NVIC_Init>
	USART_ITConfig(Iridium_USART, USART_IT_IDLE,ENABLE);
 8001228:	2201      	movs	r2, #1
 800122a:	f240 4124 	movw	r1, #1060	; 0x424
 800122e:	4860      	ldr	r0, [pc, #384]	; (80013b0 <init_Iridium_USART+0x258>)
 8001230:	f7ff fe40 	bl	8000eb4 <USART_ITConfig>
	USART_Cmd(Iridium_USART,ENABLE);
 8001234:	2101      	movs	r1, #1
 8001236:	485e      	ldr	r0, [pc, #376]	; (80013b0 <init_Iridium_USART+0x258>)
 8001238:	f7ff fdd6 	bl	8000de8 <USART_Cmd>


#ifdef IRIDIUM_Periph_Use_DMA
	DMA_InitTypeDef DMA_InitStructure;
	USART_DMACmd(Iridium_USART,USART_DMAReq_Rx,ENABLE);
 800123c:	2201      	movs	r2, #1
 800123e:	2140      	movs	r1, #64	; 0x40
 8001240:	485b      	ldr	r0, [pc, #364]	; (80013b0 <init_Iridium_USART+0x258>)
 8001242:	f7ff fe13 	bl	8000e6c <USART_DMACmd>
	DMA_AHB1PeriphClockCmd(DMA_AHB1Periph,ENABLE);
 8001246:	2101      	movs	r1, #1
 8001248:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800124c:	f7ff fc10 	bl	8000a70 <RCC_AHB1PeriphClockCmd>
#ifdef IRIDIUM_MEM_Use_DMA
	DMA_AHB1PeriphClockCmd(DMA2_AHB1Periph,ENABLE);
 8001250:	2101      	movs	r1, #1
 8001252:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001256:	f7ff fc0b 	bl	8000a70 <RCC_AHB1PeriphClockCmd>
#endif
	/* De-initialize DMA RX & TX Stream */
	DMA_DeInit(Iridium_DMA_RX_Stream);
 800125a:	4856      	ldr	r0, [pc, #344]	; (80013b4 <init_Iridium_USART+0x25c>)
 800125c:	f7ff f828 	bl	80002b0 <DMA_DeInit>
	while (DMA_GetCmdStatus(Iridium_DMA_RX_Stream ) != DISABLE) { ; }
 8001260:	bf00      	nop
 8001262:	4854      	ldr	r0, [pc, #336]	; (80013b4 <init_Iridium_USART+0x25c>)
 8001264:	f7ff f979 	bl	800055a <DMA_GetCmdStatus>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f9      	bne.n	8001262 <init_Iridium_USART+0x10a>
	DMA_DeInit(Iridium_DMA_MEM_Stream);
 800126e:	4852      	ldr	r0, [pc, #328]	; (80013b8 <init_Iridium_USART+0x260>)
 8001270:	f7ff f81e 	bl	80002b0 <DMA_DeInit>
	while (DMA_GetCmdStatus(Iridium_DMA_MEM_Stream) != DISABLE) { ; }
 8001274:	bf00      	nop
 8001276:	4850      	ldr	r0, [pc, #320]	; (80013b8 <init_Iridium_USART+0x260>)
 8001278:	f7ff f96f 	bl	800055a <DMA_GetCmdStatus>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1f9      	bne.n	8001276 <init_Iridium_USART+0x11e>

	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)(&(Iridium_USART->DR));
 8001282:	4b4e      	ldr	r3, [pc, #312]	; (80013bc <init_Iridium_USART+0x264>)
 8001284:	607b      	str	r3, [r7, #4]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800128e:	2300      	movs	r3, #0
 8001290:	63bb      	str	r3, [r7, #56]	; 0x38

	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)(Iridium_Rx_Buff);
 8001292:	4b4b      	ldr	r3, [pc, #300]	; (80013c0 <init_Iridium_USART+0x268>)
 8001294:	60bb      	str	r3, [r7, #8]
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8001296:	2300      	movs	r3, #0
 8001298:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800129a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800129e:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80012a0:	2300      	movs	r3, #0
 80012a2:	637b      	str	r3, [r7, #52]	; 0x34

	DMA_InitStructure.DMA_Channel = Iridium_DMA_RX_Channel;
 80012a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80012a8:	603b      	str	r3, [r7, #0]
	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 80012aa:	2300      	movs	r3, #0
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 80012b2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80012b6:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_BufferSize = Iridium_RX_Buffsize;
 80012b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012bc:	613b      	str	r3, [r7, #16]

	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 80012be:	2300      	movs	r3, #0
 80012c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 80012c2:	2303      	movs	r3, #3
 80012c4:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_Init(Iridium_DMA_RX_Stream, &DMA_InitStructure);
 80012c6:	463b      	mov	r3, r7
 80012c8:	4619      	mov	r1, r3
 80012ca:	483a      	ldr	r0, [pc, #232]	; (80013b4 <init_Iridium_USART+0x25c>)
 80012cc:	f7ff f8c4 	bl	8000458 <DMA_Init>

	// enable the interrupt in the NVIC
	NVIC_InitStruct.NVIC_IRQChannel = DMA_USART_RX_IRQn;
 80012d0:	230b      	movs	r3, #11
 80012d2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0x00;
 80012d6:	2300      	movs	r3, #0
 80012d8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x01;
 80012dc:	2301      	movs	r3, #1
 80012de:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 80012e2:	2301      	movs	r3, #1
 80012e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	NVIC_Init(&NVIC_InitStruct);
 80012e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7fe ff7d 	bl	80001ec <NVIC_Init>
	DMA_ITConfig(Iridium_DMA_RX_Stream, DMA_IT_TC, ENABLE);
 80012f2:	2201      	movs	r2, #1
 80012f4:	2110      	movs	r1, #16
 80012f6:	482f      	ldr	r0, [pc, #188]	; (80013b4 <init_Iridium_USART+0x25c>)
 80012f8:	f7ff f984 	bl	8000604 <DMA_ITConfig>
#ifdef IRIDIUM_MEM_Use_DMA

			DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)(Iridium_Rx_Buff);
 80012fc:	4b30      	ldr	r3, [pc, #192]	; (80013c0 <init_Iridium_USART+0x268>)
 80012fe:	607b      	str	r3, [r7, #4]
			DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
			DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Enable;
 8001304:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001308:	617b      	str	r3, [r7, #20]
			DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800130a:	2300      	movs	r3, #0
 800130c:	63bb      	str	r3, [r7, #56]	; 0x38

			DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)message_buff;
 800130e:	4b2d      	ldr	r3, [pc, #180]	; (80013c4 <init_Iridium_USART+0x26c>)
 8001310:	60bb      	str	r3, [r7, #8]
			DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8001312:	2300      	movs	r3, #0
 8001314:	623b      	str	r3, [r7, #32]
			DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8001316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800131a:	61bb      	str	r3, [r7, #24]
			DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800131c:	2300      	movs	r3, #0
 800131e:	637b      	str	r3, [r7, #52]	; 0x34

			DMA_InitStructure.DMA_Channel = Iridium_DMA_MEM_Channel;
 8001320:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001324:	603b      	str	r3, [r7, #0]
			DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8001326:	2300      	movs	r3, #0
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
			DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToMemory;
 800132a:	2380      	movs	r3, #128	; 0x80
 800132c:	60fb      	str	r3, [r7, #12]
			DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 800132e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28
			DMA_InitStructure.DMA_BufferSize = Iridium_message_Buffsize;
 8001334:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001338:	613b      	str	r3, [r7, #16]

			DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 800133a:	2300      	movs	r3, #0
 800133c:	62fb      	str	r3, [r7, #44]	; 0x2c
			DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 800133e:	2303      	movs	r3, #3
 8001340:	633b      	str	r3, [r7, #48]	; 0x30

			DMA_Init(Iridium_DMA_MEM_Stream, &DMA_InitStructure);
 8001342:	463b      	mov	r3, r7
 8001344:	4619      	mov	r1, r3
 8001346:	481c      	ldr	r0, [pc, #112]	; (80013b8 <init_Iridium_USART+0x260>)
 8001348:	f7ff f886 	bl	8000458 <DMA_Init>

			// enable the interrupt in the NVIC
			NVIC_InitStruct.NVIC_IRQChannel = DMA_USART_MEM_IRQn;
 800134c:	2339      	movs	r3, #57	; 0x39
 800134e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 00;
 8001352:	2300      	movs	r3, #0
 8001354:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			NVIC_InitStruct.NVIC_IRQChannelSubPriority = 01;
 8001358:	2301      	movs	r3, #1
 800135a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 800135e:	2301      	movs	r3, #1
 8001360:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			NVIC_Init(&NVIC_InitStruct);
 8001364:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001368:	4618      	mov	r0, r3
 800136a:	f7fe ff3f 	bl	80001ec <NVIC_Init>
			DMA_ITConfig(Iridium_DMA_MEM_Stream, DMA_IT_TC, ENABLE);
 800136e:	2201      	movs	r2, #1
 8001370:	2110      	movs	r1, #16
 8001372:	4811      	ldr	r0, [pc, #68]	; (80013b8 <init_Iridium_USART+0x260>)
 8001374:	f7ff f946 	bl	8000604 <DMA_ITConfig>
#endif
	DMA_Cmd(Iridium_DMA_RX_Stream, ENABLE);
 8001378:	2101      	movs	r1, #1
 800137a:	480e      	ldr	r0, [pc, #56]	; (80013b4 <init_Iridium_USART+0x25c>)
 800137c:	f7ff f8c4 	bl	8000508 <DMA_Cmd>
	while (DMA_GetCmdStatus(Iridium_DMA_RX_Stream) != ENABLE);
 8001380:	bf00      	nop
 8001382:	480c      	ldr	r0, [pc, #48]	; (80013b4 <init_Iridium_USART+0x25c>)
 8001384:	f7ff f8e9 	bl	800055a <DMA_GetCmdStatus>
 8001388:	4603      	mov	r3, r0
 800138a:	2b01      	cmp	r3, #1
 800138c:	d1f9      	bne.n	8001382 <init_Iridium_USART+0x22a>
#endif
}
 800138e:	bf00      	nop
 8001390:	3758      	adds	r7, #88	; 0x58
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	200004a1 	.word	0x200004a1
 800139c:	200004a0 	.word	0x200004a0
 80013a0:	200004a2 	.word	0x200004a2
 80013a4:	200004a3 	.word	0x200004a3
 80013a8:	40020800 	.word	0x40020800
 80013ac:	40020c00 	.word	0x40020c00
 80013b0:	40005000 	.word	0x40005000
 80013b4:	40026010 	.word	0x40026010
 80013b8:	40026428 	.word	0x40026428
 80013bc:	40005004 	.word	0x40005004
 80013c0:	2000088c 	.word	0x2000088c
 80013c4:	200004a4 	.word	0x200004a4

080013c8 <init_Iridium_Module>:

}
/* Function to Reset the data buffer and pointer*/

int8_t init_Iridium_Module(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
	init_Iridium_USART();
 80013ce:	f7ff fec3 	bl	8001158 <init_Iridium_USART>
	//init_Control_Pins();
	init_Rx_Buff();
 80013d2:	f000 f81d 	bl	8001410 <init_Rx_Buff>
	//wait for module to fully power out
	uint8_t flag = send_ATcmd("AT\r",1000);
 80013d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013da:	480a      	ldr	r0, [pc, #40]	; (8001404 <init_Iridium_Module+0x3c>)
 80013dc:	f000 f96e 	bl	80016bc <send_ATcmd>
 80013e0:	4603      	mov	r3, r0
 80013e2:	71fb      	strb	r3, [r7, #7]
	if(flag == -2)
	{
		//timeout
		return flag;
	}
	if(strcmp((char*)temp_buff,"OK") ==0)
 80013e4:	4908      	ldr	r1, [pc, #32]	; (8001408 <init_Iridium_Module+0x40>)
 80013e6:	4809      	ldr	r0, [pc, #36]	; (800140c <init_Iridium_Module+0x44>)
 80013e8:	f7fe feee 	bl	80001c8 <strcmp>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <init_Iridium_Module+0x2e>
	{
		//VALID RESPONSE
		return 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	e001      	b.n	80013fa <init_Iridium_Module+0x32>
	}
	//INVALID RESPONSE
	return -1;
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295

}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	08001d10 	.word	0x08001d10
 8001408:	08001d14 	.word	0x08001d14
 800140c:	200000b8 	.word	0x200000b8

08001410 <init_Rx_Buff>:
	 GPIO_Init(Iridium_GPIO, &GPIO_InitStructure);

}

void init_Rx_Buff(void)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
	Iridium_data_length = 0;
 8001416:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <init_Rx_Buff+0x38>)
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < Iridium_RX_Buffsize; ++i)
 800141c:	2300      	movs	r3, #0
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	e007      	b.n	8001432 <init_Rx_Buff+0x22>
	{
		Iridium_Rx_Buff[i] = 0;
 8001422:	4a0a      	ldr	r2, [pc, #40]	; (800144c <init_Rx_Buff+0x3c>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4413      	add	r3, r2
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < Iridium_RX_Buffsize; ++i)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3301      	adds	r3, #1
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001438:	dbf3      	blt.n	8001422 <init_Rx_Buff+0x12>
	}
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	20000c78 	.word	0x20000c78
 800144c:	2000088c 	.word	0x2000088c

08001450 <transmit_Data>:

void transmit_Data(char* tx_buff,size_t len)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
	//TODO: timeout and error checking
	/* get size of pointer*/
	for (int i = 0; i < len; ++i)
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	e01c      	b.n	800149a <transmit_Data+0x4a>
	{

		USART_SendData(Iridium_USART,*(tx_buff++));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	1c5a      	adds	r2, r3, #1
 8001464:	607a      	str	r2, [r7, #4]
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	b29b      	uxth	r3, r3
 800146a:	4619      	mov	r1, r3
 800146c:	480f      	ldr	r0, [pc, #60]	; (80014ac <transmit_Data+0x5c>)
 800146e:	f7ff fcdb 	bl	8000e28 <USART_SendData>
		Delay_begin_Timeout(100);
 8001472:	2064      	movs	r0, #100	; 0x64
 8001474:	f7ff fe0c 	bl	8001090 <Delay_begin_Timeout>
		while(!USART_GetFlagStatus(Iridium_USART,USART_FLAG_TXE))
 8001478:	e003      	b.n	8001482 <transmit_Data+0x32>
		{
			if(timeout)
 800147a:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <transmit_Data+0x60>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d107      	bne.n	8001492 <transmit_Data+0x42>
		while(!USART_GetFlagStatus(Iridium_USART,USART_FLAG_TXE))
 8001482:	2180      	movs	r1, #128	; 0x80
 8001484:	4809      	ldr	r0, [pc, #36]	; (80014ac <transmit_Data+0x5c>)
 8001486:	f7ff fd5d 	bl	8000f44 <USART_GetFlagStatus>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0f4      	beq.n	800147a <transmit_Data+0x2a>
 8001490:	e000      	b.n	8001494 <transmit_Data+0x44>
			{
				break;
 8001492:	bf00      	nop
	for (int i = 0; i < len; ++i)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	3301      	adds	r3, #1
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d3de      	bcc.n	8001460 <transmit_Data+0x10>
			}
		}
	}
}
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40005000 	.word	0x40005000
 80014b0:	200000a0 	.word	0x200000a0

080014b4 <get_status>:
	}
	return 0;
}

void get_status(char* cmd)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	uint8_t count = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	77fb      	strb	r3, [r7, #31]

	for(int j = 0; j < 6; j++)
 80014c0:	2300      	movs	r3, #0
 80014c2:	61bb      	str	r3, [r7, #24]
 80014c4:	e05d      	b.n	8001582 <get_status+0xce>
	{
		uint8_t numcount =0 ;
 80014c6:	2300      	movs	r3, #0
 80014c8:	75fb      	strb	r3, [r7, #23]
		uint len = strlen(cmd);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7fe fe86 	bl	80001dc <strlen>
 80014d0:	60f8      	str	r0, [r7, #12]
		while(cmd[count] != ',')
 80014d2:	e015      	b.n	8001500 <get_status+0x4c>
		{
			if((count) == len)
 80014d4:	7ffa      	ldrb	r2, [r7, #31]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d018      	beq.n	800150e <get_status+0x5a>
			{
				break;
			}
			if(cmd[count] >= '0' && cmd[count] <= '9')
 80014dc:	7ffb      	ldrb	r3, [r7, #31]
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b2f      	cmp	r3, #47	; 0x2f
 80014e6:	d908      	bls.n	80014fa <get_status+0x46>
 80014e8:	7ffb      	ldrb	r3, [r7, #31]
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b39      	cmp	r3, #57	; 0x39
 80014f2:	d802      	bhi.n	80014fa <get_status+0x46>
			{
				numcount++;
 80014f4:	7dfb      	ldrb	r3, [r7, #23]
 80014f6:	3301      	adds	r3, #1
 80014f8:	75fb      	strb	r3, [r7, #23]
			}

			count++;
 80014fa:	7ffb      	ldrb	r3, [r7, #31]
 80014fc:	3301      	adds	r3, #1
 80014fe:	77fb      	strb	r3, [r7, #31]
		while(cmd[count] != ',')
 8001500:	7ffb      	ldrb	r3, [r7, #31]
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b2c      	cmp	r3, #44	; 0x2c
 800150a:	d1e3      	bne.n	80014d4 <get_status+0x20>
 800150c:	e000      	b.n	8001510 <get_status+0x5c>
				break;
 800150e:	bf00      	nop
		}
		//combine numbers
		int16_t temp = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	82bb      	strh	r3, [r7, #20]

		for (int i = 0; i < numcount; ++i)
 8001514:	2300      	movs	r3, #0
 8001516:	613b      	str	r3, [r7, #16]
 8001518:	e024      	b.n	8001564 <get_status+0xb0>
		{
			temp = temp*10+ (cmd[count -numcount+i ]-48);
 800151a:	8abb      	ldrh	r3, [r7, #20]
 800151c:	461a      	mov	r2, r3
 800151e:	0092      	lsls	r2, r2, #2
 8001520:	4413      	add	r3, r2
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	b29a      	uxth	r2, r3
 8001526:	7ff9      	ldrb	r1, [r7, #31]
 8001528:	7dfb      	ldrb	r3, [r7, #23]
 800152a:	1ac9      	subs	r1, r1, r3
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	440b      	add	r3, r1
 8001530:	4619      	mov	r1, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	440b      	add	r3, r1
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	b29b      	uxth	r3, r3
 800153a:	4413      	add	r3, r2
 800153c:	b29b      	uxth	r3, r3
 800153e:	3b30      	subs	r3, #48	; 0x30
 8001540:	b29b      	uxth	r3, r3
 8001542:	82bb      	strh	r3, [r7, #20]
			if (cmd[count-numcount -1] == '-')
 8001544:	7ffa      	ldrb	r2, [r7, #31]
 8001546:	7dfb      	ldrb	r3, [r7, #23]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	3b01      	subs	r3, #1
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	4413      	add	r3, r2
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b2d      	cmp	r3, #45	; 0x2d
 8001554:	d103      	bne.n	800155e <get_status+0xaa>
			{
				temp = temp*(-1);
 8001556:	8abb      	ldrh	r3, [r7, #20]
 8001558:	425b      	negs	r3, r3
 800155a:	b29b      	uxth	r3, r3
 800155c:	82bb      	strh	r3, [r7, #20]
		for (int i = 0; i < numcount; ++i)
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	3301      	adds	r3, #1
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	7dfa      	ldrb	r2, [r7, #23]
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	429a      	cmp	r2, r3
 800156a:	dcd6      	bgt.n	800151a <get_status+0x66>
			}
		}
		SBDIX_status[j] = temp;
 800156c:	4908      	ldr	r1, [pc, #32]	; (8001590 <get_status+0xdc>)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	8aba      	ldrh	r2, [r7, #20]
 8001572:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		count++;
 8001576:	7ffb      	ldrb	r3, [r7, #31]
 8001578:	3301      	adds	r3, #1
 800157a:	77fb      	strb	r3, [r7, #31]
	for(int j = 0; j < 6; j++)
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	3301      	adds	r3, #1
 8001580:	61bb      	str	r3, [r7, #24]
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	2b05      	cmp	r3, #5
 8001586:	dd9e      	ble.n	80014c6 <get_status+0x12>
	}
}
 8001588:	bf00      	nop
 800158a:	3720      	adds	r7, #32
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200000ac 	.word	0x200000ac

08001594 <clear_Status>:

void clear_Status(void)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
	for (int i = 0; i < 6; ++i)
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	e007      	b.n	80015b0 <clear_Status+0x1c>
	{
		SBDIX_status[i] = 0;
 80015a0:	4a08      	ldr	r2, [pc, #32]	; (80015c4 <clear_Status+0x30>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2100      	movs	r1, #0
 80015a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 6; ++i)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	3301      	adds	r3, #1
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b05      	cmp	r3, #5
 80015b4:	ddf4      	ble.n	80015a0 <clear_Status+0xc>
	}
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	200000ac 	.word	0x200000ac

080015c8 <get_AT_response>:
/*
 * Retrieve the Iridium response only from Rx buffer
 */
char* get_AT_response(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
	//clear flag
	char* tmp = (char*)Iridium_Rx_Buff;
 80015ce:	4b24      	ldr	r3, [pc, #144]	; (8001660 <get_AT_response+0x98>)
 80015d0:	607b      	str	r3, [r7, #4]
	if(status_Received== 1)
 80015d2:	4b24      	ldr	r3, [pc, #144]	; (8001664 <get_AT_response+0x9c>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d10c      	bne.n	80015f4 <get_AT_response+0x2c>
	{
		//get transmission status
		tmp+=2;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	3302      	adds	r3, #2
 80015de:	607b      	str	r3, [r7, #4]
		bin_message_received = *tmp;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	781a      	ldrb	r2, [r3, #0]
 80015e4:	4b20      	ldr	r3, [pc, #128]	; (8001668 <get_AT_response+0xa0>)
 80015e6:	701a      	strb	r2, [r3, #0]
		status_Received = 0;
 80015e8:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <get_AT_response+0x9c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	701a      	strb	r2, [r3, #0]
		tmp+=2;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	3302      	adds	r3, #2
 80015f2:	607b      	str	r3, [r7, #4]
	}
	tmp = strtok((char*)Iridium_Rx_Buff,"\r\n");
 80015f4:	491d      	ldr	r1, [pc, #116]	; (800166c <get_AT_response+0xa4>)
 80015f6:	481a      	ldr	r0, [pc, #104]	; (8001660 <get_AT_response+0x98>)
 80015f8:	f000 fb34 	bl	8001c64 <strtok>
 80015fc:	6078      	str	r0, [r7, #4]
	if(strlen(tmp) == 0)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <get_AT_response+0x42>
	{
		return NULL;
 8001606:	2300      	movs	r3, #0
 8001608:	e026      	b.n	8001658 <get_AT_response+0x90>
	}
	if(session_flag == 1)
 800160a:	4b19      	ldr	r3, [pc, #100]	; (8001670 <get_AT_response+0xa8>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d10f      	bne.n	8001632 <get_AT_response+0x6a>
	{
		//SBD session: update status buffer
		clear_Status();
 8001612:	f7ff ffbf 	bl	8001594 <clear_Status>
		char* msg = strtok(NULL,"\r\n");
 8001616:	4915      	ldr	r1, [pc, #84]	; (800166c <get_AT_response+0xa4>)
 8001618:	2000      	movs	r0, #0
 800161a:	f000 fb23 	bl	8001c64 <strtok>
 800161e:	6038      	str	r0, [r7, #0]
		get_status(tmp);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ff47 	bl	80014b4 <get_status>
		tmp = msg;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	607b      	str	r3, [r7, #4]
		session_flag = 0;
 800162a:	4b11      	ldr	r3, [pc, #68]	; (8001670 <get_AT_response+0xa8>)
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
 8001630:	e004      	b.n	800163c <get_AT_response+0x74>
	}else
	{
		tmp = strtok(NULL,"\r\n");
 8001632:	490e      	ldr	r1, [pc, #56]	; (800166c <get_AT_response+0xa4>)
 8001634:	2000      	movs	r0, #0
 8001636:	f000 fb15 	bl	8001c64 <strtok>
 800163a:	6078      	str	r0, [r7, #4]
	}
	init_message_buff();
 800163c:	f000 f81c 	bl	8001678 <init_message_buff>
	memcpy(temp_buff,tmp,strlen(tmp));
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7fe fdcb 	bl	80001dc <strlen>
 8001646:	4603      	mov	r3, r0
 8001648:	461a      	mov	r2, r3
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	4809      	ldr	r0, [pc, #36]	; (8001674 <get_AT_response+0xac>)
 800164e:	f000 fa8f 	bl	8001b70 <memcpy>
	init_Rx_Buff();
 8001652:	f7ff fedd 	bl	8001410 <init_Rx_Buff>
	return temp_buff;
 8001656:	4b07      	ldr	r3, [pc, #28]	; (8001674 <get_AT_response+0xac>)
}
 8001658:	4618      	mov	r0, r3
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	2000088c 	.word	0x2000088c
 8001664:	200004a0 	.word	0x200004a0
 8001668:	200004a2 	.word	0x200004a2
 800166c:	08001d24 	.word	0x08001d24
 8001670:	20000c74 	.word	0x20000c74
 8001674:	200000b8 	.word	0x200000b8

08001678 <init_message_buff>:

void init_message_buff()
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
	for (int i = 0; i < Iridium_message_Buffsize; ++i)
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	e00c      	b.n	800169e <init_message_buff+0x26>
	{
		message_buff[i] = 0;
 8001684:	4a0b      	ldr	r2, [pc, #44]	; (80016b4 <init_message_buff+0x3c>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4413      	add	r3, r2
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]
		temp_buff[i] =0;
 800168e:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <init_message_buff+0x40>)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4413      	add	r3, r2
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < Iridium_message_Buffsize; ++i)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3301      	adds	r3, #1
 800169c:	607b      	str	r3, [r7, #4]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016a4:	dbee      	blt.n	8001684 <init_message_buff+0xc>
	}
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	200004a4 	.word	0x200004a4
 80016b8:	200000b8 	.word	0x200000b8

080016bc <send_ATcmd>:
/*
 * Sends an AT command over USART
 * returns the response
 */
int8_t send_ATcmd(char* cmd,uint32_t delay)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
	transmit_Data(cmd,strlen(cmd));
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7fe fd88 	bl	80001dc <strlen>
 80016cc:	4603      	mov	r3, r0
 80016ce:	4619      	mov	r1, r3
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff febd 	bl	8001450 <transmit_Data>
	//timeout after 60 seconds of no activity
	Delay_begin_Timeout(delay);
 80016d6:	6838      	ldr	r0, [r7, #0]
 80016d8:	f7ff fcda 	bl	8001090 <Delay_begin_Timeout>
	while((IR_Rx_done != 1))
 80016dc:	e009      	b.n	80016f2 <send_ATcmd+0x36>
	{
		if(timeout)
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <send_ATcmd+0x50>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d005      	beq.n	80016f2 <send_ATcmd+0x36>
		{
			timeout= 0;
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <send_ATcmd+0x50>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
			//Disable Interrupt
			return -2;
 80016ec:	f06f 0301 	mvn.w	r3, #1
 80016f0:	e007      	b.n	8001702 <send_ATcmd+0x46>
	while((IR_Rx_done != 1))
 80016f2:	4b07      	ldr	r3, [pc, #28]	; (8001710 <send_ATcmd+0x54>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d1f1      	bne.n	80016de <send_ATcmd+0x22>
		}
	}
	IR_Rx_done = 0;
 80016fa:	4b05      	ldr	r3, [pc, #20]	; (8001710 <send_ATcmd+0x54>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	701a      	strb	r2, [r3, #0]
	return 0;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200000a0 	.word	0x200000a0
 8001710:	200004a1 	.word	0x200004a1

08001714 <UART5_IRQHandler>:
}

//==========================================================================
/** IRQ HANDLERS **/
void Iridium_USART_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
	//TODO: USART pin handler
	if (USART_GetFlagStatus(Iridium_USART,USART_FLAG_IDLE) != RESET)
 800171a:	2110      	movs	r1, #16
 800171c:	4810      	ldr	r0, [pc, #64]	; (8001760 <UART5_IRQHandler+0x4c>)
 800171e:	f7ff fc11 	bl	8000f44 <USART_GetFlagStatus>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d017      	beq.n	8001758 <UART5_IRQHandler+0x44>
	{
		/* Clear USART registers */
		volatile uint32_t tmp;
		tmp = USART_GetITStatus(Iridium_USART, USART_IT_IDLE);
 8001728:	f240 4124 	movw	r1, #1060	; 0x424
 800172c:	480c      	ldr	r0, [pc, #48]	; (8001760 <UART5_IRQHandler+0x4c>)
 800172e:	f7ff fc25 	bl	8000f7c <USART_GetITStatus>
 8001732:	4603      	mov	r3, r0
 8001734:	607b      	str	r3, [r7, #4]
		tmp = USART_ReceiveData(Iridium_USART);
 8001736:	480a      	ldr	r0, [pc, #40]	; (8001760 <UART5_IRQHandler+0x4c>)
 8001738:	f7ff fb88 	bl	8000e4c <USART_ReceiveData>
 800173c:	4603      	mov	r3, r0
 800173e:	607b      	str	r3, [r7, #4]
		(void)tmp;
 8001740:	687b      	ldr	r3, [r7, #4]
		/* Disable DMA RX Stream */
		DMA_Cmd(Iridium_DMA_RX_Stream, DISABLE);
 8001742:	2100      	movs	r1, #0
 8001744:	4807      	ldr	r0, [pc, #28]	; (8001764 <UART5_IRQHandler+0x50>)
 8001746:	f7fe fedf 	bl	8000508 <DMA_Cmd>
		while (DMA_GetCmdStatus(Iridium_DMA_RX_Stream) != DISABLE) { ; }
 800174a:	bf00      	nop
 800174c:	4805      	ldr	r0, [pc, #20]	; (8001764 <UART5_IRQHandler+0x50>)
 800174e:	f7fe ff04 	bl	800055a <DMA_GetCmdStatus>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1f9      	bne.n	800174c <UART5_IRQHandler+0x38>
	}
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40005000 	.word	0x40005000
 8001764:	40026010 	.word	0x40026010

08001768 <DMA1_Stream0_IRQHandler>:

#ifdef IRIDIUM_Periph_Use_DMA
void DMA_USART_RX_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
	/* Test on DMA Stream Transfer Complete interrupt */
		if (DMA_GetFlagStatus(Iridium_DMA_RX_Stream, DMA_FLAG_TCIF0) != RESET)
 800176c:	4910      	ldr	r1, [pc, #64]	; (80017b0 <DMA1_Stream0_IRQHandler+0x48>)
 800176e:	4811      	ldr	r0, [pc, #68]	; (80017b4 <DMA1_Stream0_IRQHandler+0x4c>)
 8001770:	f7fe ff0c 	bl	800058c <DMA_GetFlagStatus>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d017      	beq.n	80017aa <DMA1_Stream0_IRQHandler+0x42>
		{
			Iridium_data_length = Iridium_RX_Buffsize - DMA_GetCurrDataCounter(Iridium_DMA_RX_Stream);
 800177a:	480e      	ldr	r0, [pc, #56]	; (80017b4 <DMA1_Stream0_IRQHandler+0x4c>)
 800177c:	f7fe fee0 	bl	8000540 <DMA_GetCurrDataCounter>
 8001780:	4603      	mov	r3, r0
 8001782:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8001786:	461a      	mov	r2, r3
 8001788:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <DMA1_Stream0_IRQHandler+0x50>)
 800178a:	601a      	str	r2, [r3, #0]

			/* Clear DMA Stream Transfer Complete interrupt pending bit */
			DMA_ClearITPendingBit(Iridium_DMA_RX_Stream, DMA_IT_TCIF0);
 800178c:	490b      	ldr	r1, [pc, #44]	; (80017bc <DMA1_Stream0_IRQHandler+0x54>)
 800178e:	4809      	ldr	r0, [pc, #36]	; (80017b4 <DMA1_Stream0_IRQHandler+0x4c>)
 8001790:	f7fe ff72 	bl	8000678 <DMA_ClearITPendingBit>

			/* Enable DMA transfer */
			#ifdef IRIDIUM_MEM_Use_DMA
			DMA_Cmd(Iridium_DMA_MEM_Stream, ENABLE);
 8001794:	2101      	movs	r1, #1
 8001796:	480a      	ldr	r0, [pc, #40]	; (80017c0 <DMA1_Stream0_IRQHandler+0x58>)
 8001798:	f7fe feb6 	bl	8000508 <DMA_Cmd>
			while (DMA_GetCmdStatus(Iridium_DMA_MEM_Stream ) != ENABLE) { ; }
 800179c:	bf00      	nop
 800179e:	4808      	ldr	r0, [pc, #32]	; (80017c0 <DMA1_Stream0_IRQHandler+0x58>)
 80017a0:	f7fe fedb 	bl	800055a <DMA_GetCmdStatus>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d1f9      	bne.n	800179e <DMA1_Stream0_IRQHandler+0x36>
			#else
			DMA_Cmd(Iridium_DMA_RX_Stream, ENABLE);
			while (DMA_GetCmdStatus(Iridium_DMA_RX_Stream) != ENABLE) { ; }
			#endif
		}
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	10000020 	.word	0x10000020
 80017b4:	40026010 	.word	0x40026010
 80017b8:	20000c78 	.word	0x20000c78
 80017bc:	10008020 	.word	0x10008020
 80017c0:	40026428 	.word	0x40026428

080017c4 <DMA2_Stream1_IRQHandler>:
#endif

#ifdef IRIDIUM_MEM_Use_DMA
void DMA_USART_MEM_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
	if (DMA_GetFlagStatus(Iridium_DMA_MEM_Stream, DMA_FLAG_TCIF1) != RESET)
 80017c8:	4916      	ldr	r1, [pc, #88]	; (8001824 <DMA2_Stream1_IRQHandler+0x60>)
 80017ca:	4817      	ldr	r0, [pc, #92]	; (8001828 <DMA2_Stream1_IRQHandler+0x64>)
 80017cc:	f7fe fede 	bl	800058c <DMA_GetFlagStatus>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d023      	beq.n	800181e <DMA2_Stream1_IRQHandler+0x5a>
		{

			//set flag

			if(session_flag)
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <DMA2_Stream1_IRQHandler+0x68>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d00b      	beq.n	80017f6 <DMA2_Stream1_IRQHandler+0x32>
			{
				if(strlen((char*)Iridium_Rx_Buff)> 9)
 80017de:	4814      	ldr	r0, [pc, #80]	; (8001830 <DMA2_Stream1_IRQHandler+0x6c>)
 80017e0:	f7fe fcfc 	bl	80001dc <strlen>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b09      	cmp	r3, #9
 80017e8:	d90a      	bls.n	8001800 <DMA2_Stream1_IRQHandler+0x3c>
				{
					IR_Rx_done = 1;
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <DMA2_Stream1_IRQHandler+0x70>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	701a      	strb	r2, [r3, #0]
					//Get Message
					get_AT_response();
 80017f0:	f7ff feea 	bl	80015c8 <get_AT_response>
 80017f4:	e004      	b.n	8001800 <DMA2_Stream1_IRQHandler+0x3c>
				}
			}else
			{
				IR_Rx_done = 1;
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <DMA2_Stream1_IRQHandler+0x70>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	701a      	strb	r2, [r3, #0]
				//Get Message
				get_AT_response();
 80017fc:	f7ff fee4 	bl	80015c8 <get_AT_response>
			}
			/* Enable DMA transfer */
			DMA_Cmd(Iridium_DMA_RX_Stream, ENABLE);
 8001800:	2101      	movs	r1, #1
 8001802:	480d      	ldr	r0, [pc, #52]	; (8001838 <DMA2_Stream1_IRQHandler+0x74>)
 8001804:	f7fe fe80 	bl	8000508 <DMA_Cmd>
			while (DMA_GetCmdStatus(Iridium_DMA_RX_Stream) != ENABLE) { ; }
 8001808:	bf00      	nop
 800180a:	480b      	ldr	r0, [pc, #44]	; (8001838 <DMA2_Stream1_IRQHandler+0x74>)
 800180c:	f7fe fea5 	bl	800055a <DMA_GetCmdStatus>
 8001810:	4603      	mov	r3, r0
 8001812:	2b01      	cmp	r3, #1
 8001814:	d1f9      	bne.n	800180a <DMA2_Stream1_IRQHandler+0x46>
			/* Clear DMA Stream Transfer Complete interrupt pending bit */
			DMA_ClearITPendingBit(Iridium_DMA_MEM_Stream, DMA_IT_TCIF1);
 8001816:	4909      	ldr	r1, [pc, #36]	; (800183c <DMA2_Stream1_IRQHandler+0x78>)
 8001818:	4803      	ldr	r0, [pc, #12]	; (8001828 <DMA2_Stream1_IRQHandler+0x64>)
 800181a:	f7fe ff2d 	bl	8000678 <DMA_ClearITPendingBit>
		}
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	10000800 	.word	0x10000800
 8001828:	40026428 	.word	0x40026428
 800182c:	20000c74 	.word	0x20000c74
 8001830:	2000088c 	.word	0x2000088c
 8001834:	200004a1 	.word	0x200004a1
 8001838:	40026010 	.word	0x40026010
 800183c:	10008800 	.word	0x10008800

08001840 <EXTI0_IRQHandler>:
#endif

void EXTI0_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line0) != RESET)
 8001844:	2001      	movs	r0, #1
 8001846:	f7fe ff45 	bl	80006d4 <EXTI_GetITStatus>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d018      	beq.n	8001882 <EXTI0_IRQHandler+0x42>
	{
		if(GPIO_ReadInputDataBit(Iridium_GPIO,Iridium_NetAv_Pin) == SET)
 8001850:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001854:	480c      	ldr	r0, [pc, #48]	; (8001888 <EXTI0_IRQHandler+0x48>)
 8001856:	f7fe ffff 	bl	8000858 <GPIO_ReadInputDataBit>
 800185a:	4603      	mov	r3, r0
 800185c:	2b01      	cmp	r3, #1
 800185e:	d102      	bne.n	8001866 <EXTI0_IRQHandler+0x26>
		{
			network_available = 1;
 8001860:	4b0a      	ldr	r3, [pc, #40]	; (800188c <EXTI0_IRQHandler+0x4c>)
 8001862:	2201      	movs	r2, #1
 8001864:	701a      	strb	r2, [r3, #0]
		}
		if(GPIO_ReadInputDataBit(Iridium_GPIO,Iridium_NetAv_Pin) == RESET)
 8001866:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800186a:	4807      	ldr	r0, [pc, #28]	; (8001888 <EXTI0_IRQHandler+0x48>)
 800186c:	f7fe fff4 	bl	8000858 <GPIO_ReadInputDataBit>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d102      	bne.n	800187c <EXTI0_IRQHandler+0x3c>
		{
			network_available = 0;
 8001876:	4b05      	ldr	r3, [pc, #20]	; (800188c <EXTI0_IRQHandler+0x4c>)
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
		}
		EXTI_ClearITPendingBit(EXTI_Line0);
 800187c:	2001      	movs	r0, #1
 800187e:	f7fe ff4d 	bl	800071c <EXTI_ClearITPendingBit>
	}
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40020800 	.word	0x40020800
 800188c:	200004a3 	.word	0x200004a3

08001890 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
	init_Delay();
 8001894:	f7ff fbce 	bl	8001034 <init_Delay>
	//check start rout
	while(init_Iridium_Module() != 0)
 8001898:	e008      	b.n	80018ac <main+0x1c>
	{
		Delay_begin_Timeout(3000);
 800189a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800189e:	f7ff fbf7 	bl	8001090 <Delay_begin_Timeout>
		while(!timeout);
 80018a2:	bf00      	nop
 80018a4:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <main+0x28>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0fb      	beq.n	80018a4 <main+0x14>
	while(init_Iridium_Module() != 0)
 80018ac:	f7ff fd8c 	bl	80013c8 <init_Iridium_Module>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f1      	bne.n	800189a <main+0xa>
	}
	while (1)
 80018b6:	e7fe      	b.n	80018b6 <main+0x26>
 80018b8:	200000a0 	.word	0x200000a0

080018bc <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018be:	e003      	b.n	80018c8 <LoopCopyDataInit>

080018c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018c0:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80018c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018c6:	3104      	adds	r1, #4

080018c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018c8:	480a      	ldr	r0, [pc, #40]	; (80018f4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80018ca:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80018cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018d0:	d3f6      	bcc.n	80018c0 <CopyDataInit>
  ldr  r2, =_sbss
 80018d2:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80018d4:	e002      	b.n	80018dc <LoopFillZerobss>

080018d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018d8:	f842 3b04 	str.w	r3, [r2], #4

080018dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80018de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018e0:	d3f9      	bcc.n	80018d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018e2:	f000 f867 	bl	80019b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018e6:	f000 f917 	bl	8001b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ea:	f7ff ffd1 	bl	8001890 <main>
  bx  lr    
 80018ee:	4770      	bx	lr
  ldr  r3, =_sidata
 80018f0:	08001d7c 	.word	0x08001d7c
  ldr  r0, =_sdata
 80018f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018f8:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80018fc:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001900:	20000c80 	.word	0x20000c80

08001904 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001904:	e7fe      	b.n	8001904 <ADC_IRQHandler>

08001906 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0
}
 800190a:	bf00      	nop
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001918:	e7fe      	b.n	8001918 <HardFault_Handler+0x4>

0800191a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800191e:	e7fe      	b.n	800191e <MemManage_Handler+0x4>

08001920 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001924:	e7fe      	b.n	8001924 <BusFault_Handler+0x4>

08001926 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800192a:	e7fe      	b.n	800192a <UsageFault_Handler+0x4>

0800192c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
	...

08001958 <_sbrk>:
	/* Implement your write code here, this is used by puts and printf for example */
	return len;
}

caddr_t _sbrk(int incr)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <_sbrk+0x50>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d102      	bne.n	800196e <_sbrk+0x16>
		heap_end = &end;
 8001968:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <_sbrk+0x50>)
 800196a:	4a10      	ldr	r2, [pc, #64]	; (80019ac <_sbrk+0x54>)
 800196c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <_sbrk+0x50>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <_sbrk+0x50>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4413      	add	r3, r2
 800197c:	466a      	mov	r2, sp
 800197e:	4293      	cmp	r3, r2
 8001980:	d905      	bls.n	800198e <_sbrk+0x36>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <_sbrk+0x58>)
 8001984:	220c      	movs	r2, #12
 8001986:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001988:	f04f 33ff 	mov.w	r3, #4294967295
 800198c:	e006      	b.n	800199c <_sbrk+0x44>
	}

	heap_end += incr;
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <_sbrk+0x50>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	4a04      	ldr	r2, [pc, #16]	; (80019a8 <_sbrk+0x50>)
 8001998:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800199a:	68fb      	ldr	r3, [r7, #12]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	20000090 	.word	0x20000090
 80019ac:	20000c80 	.word	0x20000c80
 80019b0:	20000c7c 	.word	0x20000c7c

080019b4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019b8:	4a16      	ldr	r2, [pc, #88]	; (8001a14 <SystemInit+0x60>)
 80019ba:	4b16      	ldr	r3, [pc, #88]	; (8001a14 <SystemInit+0x60>)
 80019bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
	
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80019c8:	4a13      	ldr	r2, [pc, #76]	; (8001a18 <SystemInit+0x64>)
 80019ca:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <SystemInit+0x64>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019d4:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <SystemInit+0x64>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80019da:	4a0f      	ldr	r2, [pc, #60]	; (8001a18 <SystemInit+0x64>)
 80019dc:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <SystemInit+0x64>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80019e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019e8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80019ea:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <SystemInit+0x64>)
 80019ec:	4a0b      	ldr	r2, [pc, #44]	; (8001a1c <SystemInit+0x68>)
 80019ee:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80019f0:	4a09      	ldr	r2, [pc, #36]	; (8001a18 <SystemInit+0x64>)
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <SystemInit+0x64>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <SystemInit+0x64>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001a02:	f000 f80d 	bl	8001a20 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a06:	4b03      	ldr	r3, [pc, #12]	; (8001a14 <SystemInit+0x60>)
 8001a08:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a0c:	609a      	str	r2, [r3, #8]
#endif
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	e000ed00 	.word	0xe000ed00
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	24003010 	.word	0x24003010

08001a20 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001a2e:	4a36      	ldr	r2, [pc, #216]	; (8001b08 <SetSysClock+0xe8>)
 8001a30:	4b35      	ldr	r3, [pc, #212]	; (8001b08 <SetSysClock+0xe8>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a38:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001a3a:	4b33      	ldr	r3, [pc, #204]	; (8001b08 <SetSysClock+0xe8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3301      	adds	r3, #1
 8001a48:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d103      	bne.n	8001a58 <SetSysClock+0x38>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001a56:	d1f0      	bne.n	8001a3a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001a58:	4b2b      	ldr	r3, [pc, #172]	; (8001b08 <SetSysClock+0xe8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d002      	beq.n	8001a6a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001a64:	2301      	movs	r3, #1
 8001a66:	603b      	str	r3, [r7, #0]
 8001a68:	e001      	b.n	8001a6e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d142      	bne.n	8001afa <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001a74:	4a24      	ldr	r2, [pc, #144]	; (8001b08 <SetSysClock+0xe8>)
 8001a76:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <SetSysClock+0xe8>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a7e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8001a80:	4a22      	ldr	r2, [pc, #136]	; (8001b0c <SetSysClock+0xec>)
 8001a82:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <SetSysClock+0xec>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a8a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001a8c:	4a1e      	ldr	r2, [pc, #120]	; (8001b08 <SetSysClock+0xe8>)
 8001a8e:	4b1e      	ldr	r3, [pc, #120]	; (8001b08 <SetSysClock+0xe8>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001a94:	4a1c      	ldr	r2, [pc, #112]	; (8001b08 <SetSysClock+0xe8>)
 8001a96:	4b1c      	ldr	r3, [pc, #112]	; (8001b08 <SetSysClock+0xe8>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a9e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001aa0:	4a19      	ldr	r2, [pc, #100]	; (8001b08 <SetSysClock+0xe8>)
 8001aa2:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <SetSysClock+0xe8>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001aaa:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001aac:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <SetSysClock+0xe8>)
 8001aae:	4a18      	ldr	r2, [pc, #96]	; (8001b10 <SetSysClock+0xf0>)
 8001ab0:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001ab2:	4a15      	ldr	r2, [pc, #84]	; (8001b08 <SetSysClock+0xe8>)
 8001ab4:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <SetSysClock+0xe8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001abc:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001abe:	bf00      	nop
 8001ac0:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <SetSysClock+0xe8>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0f9      	beq.n	8001ac0 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001acc:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <SetSysClock+0xf4>)
 8001ace:	f240 6205 	movw	r2, #1541	; 0x605
 8001ad2:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001ad4:	4a0c      	ldr	r2, [pc, #48]	; (8001b08 <SetSysClock+0xe8>)
 8001ad6:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <SetSysClock+0xe8>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f023 0303 	bic.w	r3, r3, #3
 8001ade:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001ae0:	4a09      	ldr	r2, [pc, #36]	; (8001b08 <SetSysClock+0xe8>)
 8001ae2:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <SetSysClock+0xe8>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f043 0302 	orr.w	r3, r3, #2
 8001aea:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001aec:	bf00      	nop
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <SetSysClock+0xe8>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 030c 	and.w	r3, r3, #12
 8001af6:	2b08      	cmp	r3, #8
 8001af8:	d1f9      	bne.n	8001aee <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40007000 	.word	0x40007000
 8001b10:	07405408 	.word	0x07405408
 8001b14:	40023c00 	.word	0x40023c00

08001b18 <__libc_init_array>:
 8001b18:	b570      	push	{r4, r5, r6, lr}
 8001b1a:	4e0d      	ldr	r6, [pc, #52]	; (8001b50 <__libc_init_array+0x38>)
 8001b1c:	4c0d      	ldr	r4, [pc, #52]	; (8001b54 <__libc_init_array+0x3c>)
 8001b1e:	1ba4      	subs	r4, r4, r6
 8001b20:	10a4      	asrs	r4, r4, #2
 8001b22:	2500      	movs	r5, #0
 8001b24:	42a5      	cmp	r5, r4
 8001b26:	d109      	bne.n	8001b3c <__libc_init_array+0x24>
 8001b28:	4e0b      	ldr	r6, [pc, #44]	; (8001b58 <__libc_init_array+0x40>)
 8001b2a:	4c0c      	ldr	r4, [pc, #48]	; (8001b5c <__libc_init_array+0x44>)
 8001b2c:	f000 f916 	bl	8001d5c <_init>
 8001b30:	1ba4      	subs	r4, r4, r6
 8001b32:	10a4      	asrs	r4, r4, #2
 8001b34:	2500      	movs	r5, #0
 8001b36:	42a5      	cmp	r5, r4
 8001b38:	d105      	bne.n	8001b46 <__libc_init_array+0x2e>
 8001b3a:	bd70      	pop	{r4, r5, r6, pc}
 8001b3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b40:	4798      	blx	r3
 8001b42:	3501      	adds	r5, #1
 8001b44:	e7ee      	b.n	8001b24 <__libc_init_array+0xc>
 8001b46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b4a:	4798      	blx	r3
 8001b4c:	3501      	adds	r5, #1
 8001b4e:	e7f2      	b.n	8001b36 <__libc_init_array+0x1e>
 8001b50:	08001d74 	.word	0x08001d74
 8001b54:	08001d74 	.word	0x08001d74
 8001b58:	08001d74 	.word	0x08001d74
 8001b5c:	08001d78 	.word	0x08001d78

08001b60 <malloc>:
 8001b60:	4b02      	ldr	r3, [pc, #8]	; (8001b6c <malloc+0xc>)
 8001b62:	4601      	mov	r1, r0
 8001b64:	6818      	ldr	r0, [r3, #0]
 8001b66:	f000 b80f 	b.w	8001b88 <_malloc_r>
 8001b6a:	bf00      	nop
 8001b6c:	20000010 	.word	0x20000010

08001b70 <memcpy>:
 8001b70:	b510      	push	{r4, lr}
 8001b72:	1e43      	subs	r3, r0, #1
 8001b74:	440a      	add	r2, r1
 8001b76:	4291      	cmp	r1, r2
 8001b78:	d100      	bne.n	8001b7c <memcpy+0xc>
 8001b7a:	bd10      	pop	{r4, pc}
 8001b7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001b80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001b84:	e7f7      	b.n	8001b76 <memcpy+0x6>
	...

08001b88 <_malloc_r>:
 8001b88:	b570      	push	{r4, r5, r6, lr}
 8001b8a:	1ccd      	adds	r5, r1, #3
 8001b8c:	f025 0503 	bic.w	r5, r5, #3
 8001b90:	3508      	adds	r5, #8
 8001b92:	2d0c      	cmp	r5, #12
 8001b94:	bf38      	it	cc
 8001b96:	250c      	movcc	r5, #12
 8001b98:	2d00      	cmp	r5, #0
 8001b9a:	4606      	mov	r6, r0
 8001b9c:	db01      	blt.n	8001ba2 <_malloc_r+0x1a>
 8001b9e:	42a9      	cmp	r1, r5
 8001ba0:	d903      	bls.n	8001baa <_malloc_r+0x22>
 8001ba2:	230c      	movs	r3, #12
 8001ba4:	6033      	str	r3, [r6, #0]
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	bd70      	pop	{r4, r5, r6, pc}
 8001baa:	f000 f8ae 	bl	8001d0a <__malloc_lock>
 8001bae:	4a23      	ldr	r2, [pc, #140]	; (8001c3c <_malloc_r+0xb4>)
 8001bb0:	6814      	ldr	r4, [r2, #0]
 8001bb2:	4621      	mov	r1, r4
 8001bb4:	b991      	cbnz	r1, 8001bdc <_malloc_r+0x54>
 8001bb6:	4c22      	ldr	r4, [pc, #136]	; (8001c40 <_malloc_r+0xb8>)
 8001bb8:	6823      	ldr	r3, [r4, #0]
 8001bba:	b91b      	cbnz	r3, 8001bc4 <_malloc_r+0x3c>
 8001bbc:	4630      	mov	r0, r6
 8001bbe:	f000 f841 	bl	8001c44 <_sbrk_r>
 8001bc2:	6020      	str	r0, [r4, #0]
 8001bc4:	4629      	mov	r1, r5
 8001bc6:	4630      	mov	r0, r6
 8001bc8:	f000 f83c 	bl	8001c44 <_sbrk_r>
 8001bcc:	1c43      	adds	r3, r0, #1
 8001bce:	d126      	bne.n	8001c1e <_malloc_r+0x96>
 8001bd0:	230c      	movs	r3, #12
 8001bd2:	6033      	str	r3, [r6, #0]
 8001bd4:	4630      	mov	r0, r6
 8001bd6:	f000 f899 	bl	8001d0c <__malloc_unlock>
 8001bda:	e7e4      	b.n	8001ba6 <_malloc_r+0x1e>
 8001bdc:	680b      	ldr	r3, [r1, #0]
 8001bde:	1b5b      	subs	r3, r3, r5
 8001be0:	d41a      	bmi.n	8001c18 <_malloc_r+0x90>
 8001be2:	2b0b      	cmp	r3, #11
 8001be4:	d90f      	bls.n	8001c06 <_malloc_r+0x7e>
 8001be6:	600b      	str	r3, [r1, #0]
 8001be8:	50cd      	str	r5, [r1, r3]
 8001bea:	18cc      	adds	r4, r1, r3
 8001bec:	4630      	mov	r0, r6
 8001bee:	f000 f88d 	bl	8001d0c <__malloc_unlock>
 8001bf2:	f104 000b 	add.w	r0, r4, #11
 8001bf6:	1d23      	adds	r3, r4, #4
 8001bf8:	f020 0007 	bic.w	r0, r0, #7
 8001bfc:	1ac3      	subs	r3, r0, r3
 8001bfe:	d01b      	beq.n	8001c38 <_malloc_r+0xb0>
 8001c00:	425a      	negs	r2, r3
 8001c02:	50e2      	str	r2, [r4, r3]
 8001c04:	bd70      	pop	{r4, r5, r6, pc}
 8001c06:	428c      	cmp	r4, r1
 8001c08:	bf0d      	iteet	eq
 8001c0a:	6863      	ldreq	r3, [r4, #4]
 8001c0c:	684b      	ldrne	r3, [r1, #4]
 8001c0e:	6063      	strne	r3, [r4, #4]
 8001c10:	6013      	streq	r3, [r2, #0]
 8001c12:	bf18      	it	ne
 8001c14:	460c      	movne	r4, r1
 8001c16:	e7e9      	b.n	8001bec <_malloc_r+0x64>
 8001c18:	460c      	mov	r4, r1
 8001c1a:	6849      	ldr	r1, [r1, #4]
 8001c1c:	e7ca      	b.n	8001bb4 <_malloc_r+0x2c>
 8001c1e:	1cc4      	adds	r4, r0, #3
 8001c20:	f024 0403 	bic.w	r4, r4, #3
 8001c24:	42a0      	cmp	r0, r4
 8001c26:	d005      	beq.n	8001c34 <_malloc_r+0xac>
 8001c28:	1a21      	subs	r1, r4, r0
 8001c2a:	4630      	mov	r0, r6
 8001c2c:	f000 f80a 	bl	8001c44 <_sbrk_r>
 8001c30:	3001      	adds	r0, #1
 8001c32:	d0cd      	beq.n	8001bd0 <_malloc_r+0x48>
 8001c34:	6025      	str	r5, [r4, #0]
 8001c36:	e7d9      	b.n	8001bec <_malloc_r+0x64>
 8001c38:	bd70      	pop	{r4, r5, r6, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000094 	.word	0x20000094
 8001c40:	20000098 	.word	0x20000098

08001c44 <_sbrk_r>:
 8001c44:	b538      	push	{r3, r4, r5, lr}
 8001c46:	4c06      	ldr	r4, [pc, #24]	; (8001c60 <_sbrk_r+0x1c>)
 8001c48:	2300      	movs	r3, #0
 8001c4a:	4605      	mov	r5, r0
 8001c4c:	4608      	mov	r0, r1
 8001c4e:	6023      	str	r3, [r4, #0]
 8001c50:	f7ff fe82 	bl	8001958 <_sbrk>
 8001c54:	1c43      	adds	r3, r0, #1
 8001c56:	d102      	bne.n	8001c5e <_sbrk_r+0x1a>
 8001c58:	6823      	ldr	r3, [r4, #0]
 8001c5a:	b103      	cbz	r3, 8001c5e <_sbrk_r+0x1a>
 8001c5c:	602b      	str	r3, [r5, #0]
 8001c5e:	bd38      	pop	{r3, r4, r5, pc}
 8001c60:	20000c7c 	.word	0x20000c7c

08001c64 <strtok>:
 8001c64:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <strtok+0x50>)
 8001c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c6a:	681d      	ldr	r5, [r3, #0]
 8001c6c:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8001c6e:	4606      	mov	r6, r0
 8001c70:	460f      	mov	r7, r1
 8001c72:	b9b4      	cbnz	r4, 8001ca2 <strtok+0x3e>
 8001c74:	2050      	movs	r0, #80	; 0x50
 8001c76:	f7ff ff73 	bl	8001b60 <malloc>
 8001c7a:	65a8      	str	r0, [r5, #88]	; 0x58
 8001c7c:	6004      	str	r4, [r0, #0]
 8001c7e:	6044      	str	r4, [r0, #4]
 8001c80:	6084      	str	r4, [r0, #8]
 8001c82:	60c4      	str	r4, [r0, #12]
 8001c84:	6104      	str	r4, [r0, #16]
 8001c86:	6144      	str	r4, [r0, #20]
 8001c88:	6184      	str	r4, [r0, #24]
 8001c8a:	6284      	str	r4, [r0, #40]	; 0x28
 8001c8c:	62c4      	str	r4, [r0, #44]	; 0x2c
 8001c8e:	6304      	str	r4, [r0, #48]	; 0x30
 8001c90:	6344      	str	r4, [r0, #52]	; 0x34
 8001c92:	6384      	str	r4, [r0, #56]	; 0x38
 8001c94:	63c4      	str	r4, [r0, #60]	; 0x3c
 8001c96:	6404      	str	r4, [r0, #64]	; 0x40
 8001c98:	6444      	str	r4, [r0, #68]	; 0x44
 8001c9a:	6484      	str	r4, [r0, #72]	; 0x48
 8001c9c:	64c4      	str	r4, [r0, #76]	; 0x4c
 8001c9e:	7704      	strb	r4, [r0, #28]
 8001ca0:	6244      	str	r4, [r0, #36]	; 0x24
 8001ca2:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8001ca4:	4639      	mov	r1, r7
 8001ca6:	4630      	mov	r0, r6
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001cae:	f000 b803 	b.w	8001cb8 <__strtok_r>
 8001cb2:	bf00      	nop
 8001cb4:	20000010 	.word	0x20000010

08001cb8 <__strtok_r>:
 8001cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cba:	b918      	cbnz	r0, 8001cc4 <__strtok_r+0xc>
 8001cbc:	6810      	ldr	r0, [r2, #0]
 8001cbe:	b908      	cbnz	r0, 8001cc4 <__strtok_r+0xc>
 8001cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	4604      	mov	r4, r0
 8001cc6:	460f      	mov	r7, r1
 8001cc8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8001ccc:	f817 6b01 	ldrb.w	r6, [r7], #1
 8001cd0:	b91e      	cbnz	r6, 8001cda <__strtok_r+0x22>
 8001cd2:	b965      	cbnz	r5, 8001cee <__strtok_r+0x36>
 8001cd4:	6015      	str	r5, [r2, #0]
 8001cd6:	4628      	mov	r0, r5
 8001cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cda:	42b5      	cmp	r5, r6
 8001cdc:	d1f6      	bne.n	8001ccc <__strtok_r+0x14>
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1ef      	bne.n	8001cc2 <__strtok_r+0xa>
 8001ce2:	6014      	str	r4, [r2, #0]
 8001ce4:	7003      	strb	r3, [r0, #0]
 8001ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ce8:	461c      	mov	r4, r3
 8001cea:	e00c      	b.n	8001d06 <__strtok_r+0x4e>
 8001cec:	b915      	cbnz	r5, 8001cf4 <__strtok_r+0x3c>
 8001cee:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001cf2:	460e      	mov	r6, r1
 8001cf4:	f816 5b01 	ldrb.w	r5, [r6], #1
 8001cf8:	42ab      	cmp	r3, r5
 8001cfa:	d1f7      	bne.n	8001cec <__strtok_r+0x34>
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0f3      	beq.n	8001ce8 <__strtok_r+0x30>
 8001d00:	2300      	movs	r3, #0
 8001d02:	f804 3c01 	strb.w	r3, [r4, #-1]
 8001d06:	6014      	str	r4, [r2, #0]
 8001d08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d0a <__malloc_lock>:
 8001d0a:	4770      	bx	lr

08001d0c <__malloc_unlock>:
 8001d0c:	4770      	bx	lr
 8001d0e:	0000      	movs	r0, r0
 8001d10:	000d5441 	.word	0x000d5441
 8001d14:	00004b4f 	.word	0x00004b4f
 8001d18:	532b5441 	.word	0x532b5441
 8001d1c:	58494442 	.word	0x58494442
 8001d20:	0000000d 	.word	0x0000000d
 8001d24:	00000a0d 	.word	0x00000a0d
 8001d28:	4b265441 	.word	0x4b265441
 8001d2c:	00000d30 	.word	0x00000d30
 8001d30:	454d4954 	.word	0x454d4954
 8001d34:	0054554f 	.word	0x0054554f
 8001d38:	532b5441 	.word	0x532b5441
 8001d3c:	54574442 	.word	0x54574442
 8001d40:	0000003d 	.word	0x0000003d
 8001d44:	532b5441 	.word	0x532b5441
 8001d48:	42574442 	.word	0x42574442
 8001d4c:	0d64253d 	.word	0x0d64253d
 8001d50:	00000000 	.word	0x00000000
 8001d54:	44414552 	.word	0x44414552
 8001d58:	00000059 	.word	0x00000059

08001d5c <_init>:
 8001d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d5e:	bf00      	nop
 8001d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d62:	bc08      	pop	{r3}
 8001d64:	469e      	mov	lr, r3
 8001d66:	4770      	bx	lr

08001d68 <_fini>:
 8001d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d6a:	bf00      	nop
 8001d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d6e:	bc08      	pop	{r3}
 8001d70:	469e      	mov	lr, r3
 8001d72:	4770      	bx	lr
