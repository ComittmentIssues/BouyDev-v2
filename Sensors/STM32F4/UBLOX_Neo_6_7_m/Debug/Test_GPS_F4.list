
Test_GPS_F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08005e0c  08005e0c  00015e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08005e10  08005e10  00015e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000022c  20000000  08005e14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  0002022c  2**0
                  CONTENTS
  6 .bss          00001018  2000022c  2000022c  0002022c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20001244  20001244  0002022c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000060dc  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000111c  00000000  00000000  00026338  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000608  00000000  00000000  00027458  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000560  00000000  00000000  00027a60  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000025fb  00000000  00000000  00027fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002448  00000000  00000000  0002a5bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002ca03  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002b10  00000000  00000000  0002ca80  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stab         00000024  00000000  00000000  0002f590  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000004e  00000000  00000000  0002f5b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000022c 	.word	0x2000022c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005df4 	.word	0x08005df4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000230 	.word	0x20000230
 80001cc:	08005df4 	.word	0x08005df4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f092 0f00 	teq	r2, #0
 800058a:	bf14      	ite	ne
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a0:	e720      	b.n	80003e4 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_ul2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	e00a      	b.n	80005ca <__aeabi_l2d+0x16>

080005b4 <__aeabi_l2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c2:	d502      	bpl.n	80005ca <__aeabi_l2d+0x16>
 80005c4:	4240      	negs	r0, r0
 80005c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d6:	f43f aedc 	beq.w	8000392 <__adddf3+0xe6>
 80005da:	f04f 0203 	mov.w	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f2:	f1c2 0320 	rsb	r3, r2, #32
 80005f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000602:	ea40 000e 	orr.w	r0, r0, lr
 8000606:	fa21 f102 	lsr.w	r1, r1, r2
 800060a:	4414      	add	r4, r2
 800060c:	e6c1      	b.n	8000392 <__adddf3+0xe6>
 800060e:	bf00      	nop

08000610 <__aeabi_dmul>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000616:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061e:	bf1d      	ittte	ne
 8000620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000624:	ea94 0f0c 	teqne	r4, ip
 8000628:	ea95 0f0c 	teqne	r5, ip
 800062c:	f000 f8de 	bleq	80007ec <__aeabi_dmul+0x1dc>
 8000630:	442c      	add	r4, r5
 8000632:	ea81 0603 	eor.w	r6, r1, r3
 8000636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000642:	bf18      	it	ne
 8000644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000650:	d038      	beq.n	80006c4 <__aeabi_dmul+0xb4>
 8000652:	fba0 ce02 	umull	ip, lr, r0, r2
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000662:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000666:	f04f 0600 	mov.w	r6, #0
 800066a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066e:	f09c 0f00 	teq	ip, #0
 8000672:	bf18      	it	ne
 8000674:	f04e 0e01 	orrne.w	lr, lr, #1
 8000678:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800067c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000680:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000684:	d204      	bcs.n	8000690 <__aeabi_dmul+0x80>
 8000686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068a:	416d      	adcs	r5, r5
 800068c:	eb46 0606 	adc.w	r6, r6, r6
 8000690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800069c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a8:	bf88      	it	hi
 80006aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ae:	d81e      	bhi.n	80006ee <__aeabi_dmul+0xde>
 80006b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b4:	bf08      	it	eq
 80006b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ba:	f150 0000 	adcs.w	r0, r0, #0
 80006be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c8:	ea46 0101 	orr.w	r1, r6, r1
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d8:	bfc2      	ittt	gt
 80006da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	popgt	{r4, r5, r6, pc}
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e8:	f04f 0e00 	mov.w	lr, #0
 80006ec:	3c01      	subs	r4, #1
 80006ee:	f300 80ab 	bgt.w	8000848 <__aeabi_dmul+0x238>
 80006f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f6:	bfde      	ittt	le
 80006f8:	2000      	movle	r0, #0
 80006fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd70      	pople	{r4, r5, r6, pc}
 8000700:	f1c4 0400 	rsb	r4, r4, #0
 8000704:	3c20      	subs	r4, #32
 8000706:	da35      	bge.n	8000774 <__aeabi_dmul+0x164>
 8000708:	340c      	adds	r4, #12
 800070a:	dc1b      	bgt.n	8000744 <__aeabi_dmul+0x134>
 800070c:	f104 0414 	add.w	r4, r4, #20
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f305 	lsl.w	r3, r0, r5
 8000718:	fa20 f004 	lsr.w	r0, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	fa21 f604 	lsr.w	r6, r1, r4
 8000734:	eb42 0106 	adc.w	r1, r2, r6
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 040c 	rsb	r4, r4, #12
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f304 	lsl.w	r3, r0, r4
 8000750:	fa20 f005 	lsr.w	r0, r0, r5
 8000754:	fa01 f204 	lsl.w	r2, r1, r4
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f205 	lsl.w	r2, r0, r5
 800077c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000780:	fa20 f304 	lsr.w	r3, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea43 0302 	orr.w	r3, r3, r2
 800078c:	fa21 f004 	lsr.w	r0, r1, r4
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	fa21 f204 	lsr.w	r2, r1, r4
 8000798:	ea20 0002 	bic.w	r0, r0, r2
 800079c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f094 0f00 	teq	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__aeabi_dmul+0x1c2>
 80007b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b6:	0040      	lsls	r0, r0, #1
 80007b8:	eb41 0101 	adc.w	r1, r1, r1
 80007bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3c01      	subeq	r4, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1a6>
 80007c6:	ea41 0106 	orr.w	r1, r1, r6
 80007ca:	f095 0f00 	teq	r5, #0
 80007ce:	bf18      	it	ne
 80007d0:	4770      	bxne	lr
 80007d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	eb43 0303 	adc.w	r3, r3, r3
 80007dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3d01      	subeq	r5, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1c6>
 80007e6:	ea43 0306 	orr.w	r3, r3, r6
 80007ea:	4770      	bx	lr
 80007ec:	ea94 0f0c 	teq	r4, ip
 80007f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f4:	bf18      	it	ne
 80007f6:	ea95 0f0c 	teqne	r5, ip
 80007fa:	d00c      	beq.n	8000816 <__aeabi_dmul+0x206>
 80007fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000806:	d1d1      	bne.n	80007ac <__aeabi_dmul+0x19c>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081a:	bf06      	itte	eq
 800081c:	4610      	moveq	r0, r2
 800081e:	4619      	moveq	r1, r3
 8000820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000824:	d019      	beq.n	800085a <__aeabi_dmul+0x24a>
 8000826:	ea94 0f0c 	teq	r4, ip
 800082a:	d102      	bne.n	8000832 <__aeabi_dmul+0x222>
 800082c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000830:	d113      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000832:	ea95 0f0c 	teq	r5, ip
 8000836:	d105      	bne.n	8000844 <__aeabi_dmul+0x234>
 8000838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800083c:	bf1c      	itt	ne
 800083e:	4610      	movne	r0, r2
 8000840:	4619      	movne	r1, r3
 8000842:	d10a      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000850:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <__aeabi_ddiv>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000872:	bf1d      	ittte	ne
 8000874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000878:	ea94 0f0c 	teqne	r4, ip
 800087c:	ea95 0f0c 	teqne	r5, ip
 8000880:	f000 f8a7 	bleq	80009d2 <__aeabi_ddiv+0x16e>
 8000884:	eba4 0405 	sub.w	r4, r4, r5
 8000888:	ea81 0e03 	eor.w	lr, r1, r3
 800088c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f000 8088 	beq.w	80009a8 <__aeabi_ddiv+0x144>
 8000898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800089c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008bc:	429d      	cmp	r5, r3
 80008be:	bf08      	it	eq
 80008c0:	4296      	cmpeq	r6, r2
 80008c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ca:	d202      	bcs.n	80008d2 <__aeabi_ddiv+0x6e>
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	eb65 0503 	sbc.w	r5, r5, r3
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000940:	ea55 0e06 	orrs.w	lr, r5, r6
 8000944:	d018      	beq.n	8000978 <__aeabi_ddiv+0x114>
 8000946:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000962:	d1c0      	bne.n	80008e6 <__aeabi_ddiv+0x82>
 8000964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000968:	d10b      	bne.n	8000982 <__aeabi_ddiv+0x11e>
 800096a:	ea41 0100 	orr.w	r1, r1, r0
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000976:	e7b6      	b.n	80008e6 <__aeabi_ddiv+0x82>
 8000978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800097c:	bf04      	itt	eq
 800097e:	4301      	orreq	r1, r0
 8000980:	2000      	moveq	r0, #0
 8000982:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000986:	bf88      	it	hi
 8000988:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800098c:	f63f aeaf 	bhi.w	80006ee <__aeabi_dmul+0xde>
 8000990:	ebb5 0c03 	subs.w	ip, r5, r3
 8000994:	bf04      	itt	eq
 8000996:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099e:	f150 0000 	adcs.w	r0, r0, #0
 80009a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b4:	bfc2      	ittt	gt
 80009b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009be:	bd70      	popgt	{r4, r5, r6, pc}
 80009c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c4:	f04f 0e00 	mov.w	lr, #0
 80009c8:	3c01      	subs	r4, #1
 80009ca:	e690      	b.n	80006ee <__aeabi_dmul+0xde>
 80009cc:	ea45 0e06 	orr.w	lr, r5, r6
 80009d0:	e68d      	b.n	80006ee <__aeabi_dmul+0xde>
 80009d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d6:	ea94 0f0c 	teq	r4, ip
 80009da:	bf08      	it	eq
 80009dc:	ea95 0f0c 	teqeq	r5, ip
 80009e0:	f43f af3b 	beq.w	800085a <__aeabi_dmul+0x24a>
 80009e4:	ea94 0f0c 	teq	r4, ip
 80009e8:	d10a      	bne.n	8000a00 <__aeabi_ddiv+0x19c>
 80009ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ee:	f47f af34 	bne.w	800085a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	f47f af25 	bne.w	8000844 <__aeabi_dmul+0x234>
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	e72c      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a00:	ea95 0f0c 	teq	r5, ip
 8000a04:	d106      	bne.n	8000a14 <__aeabi_ddiv+0x1b0>
 8000a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0a:	f43f aefd 	beq.w	8000808 <__aeabi_dmul+0x1f8>
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	e722      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	f47f aec5 	bne.w	80007ac <__aeabi_dmul+0x19c>
 8000a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a26:	f47f af0d 	bne.w	8000844 <__aeabi_dmul+0x234>
 8000a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2e:	f47f aeeb 	bne.w	8000808 <__aeabi_dmul+0x1f8>
 8000a32:	e712      	b.n	800085a <__aeabi_dmul+0x24a>

08000a34 <__gedf2>:
 8000a34:	f04f 3cff 	mov.w	ip, #4294967295
 8000a38:	e006      	b.n	8000a48 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__ledf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	e002      	b.n	8000a48 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__cmpdf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5e:	d01b      	beq.n	8000a98 <__cmpdf2+0x54>
 8000a60:	b001      	add	sp, #4
 8000a62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a66:	bf0c      	ite	eq
 8000a68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a6c:	ea91 0f03 	teqne	r1, r3
 8000a70:	bf02      	ittt	eq
 8000a72:	ea90 0f02 	teqeq	r0, r2
 8000a76:	2000      	moveq	r0, #0
 8000a78:	4770      	bxeq	lr
 8000a7a:	f110 0f00 	cmn.w	r0, #0
 8000a7e:	ea91 0f03 	teq	r1, r3
 8000a82:	bf58      	it	pl
 8000a84:	4299      	cmppl	r1, r3
 8000a86:	bf08      	it	eq
 8000a88:	4290      	cmpeq	r0, r2
 8000a8a:	bf2c      	ite	cs
 8000a8c:	17d8      	asrcs	r0, r3, #31
 8000a8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a92:	f040 0001 	orr.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__cmpdf2+0x64>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d107      	bne.n	8000ab8 <__cmpdf2+0x74>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d1d6      	bne.n	8000a60 <__cmpdf2+0x1c>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d0d3      	beq.n	8000a60 <__cmpdf2+0x1c>
 8000ab8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdrcmple>:
 8000ac0:	4684      	mov	ip, r0
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4662      	mov	r2, ip
 8000ac6:	468c      	mov	ip, r1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4663      	mov	r3, ip
 8000acc:	e000      	b.n	8000ad0 <__aeabi_cdcmpeq>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdcmpeq>:
 8000ad0:	b501      	push	{r0, lr}
 8000ad2:	f7ff ffb7 	bl	8000a44 <__cmpdf2>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	bf48      	it	mi
 8000ada:	f110 0f00 	cmnmi.w	r0, #0
 8000ade:	bd01      	pop	{r0, pc}

08000ae0 <__aeabi_dcmpeq>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff fff4 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000ae8:	bf0c      	ite	eq
 8000aea:	2001      	moveq	r0, #1
 8000aec:	2000      	movne	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmplt>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffea 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000afc:	bf34      	ite	cc
 8000afe:	2001      	movcc	r0, #1
 8000b00:	2000      	movcs	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmple>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffe0 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000b10:	bf94      	ite	ls
 8000b12:	2001      	movls	r0, #1
 8000b14:	2000      	movhi	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpge>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffce 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b24:	bf94      	ite	ls
 8000b26:	2001      	movls	r0, #1
 8000b28:	2000      	movhi	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmpgt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffc4 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_d2iz>:
 8000b44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b4c:	d215      	bcs.n	8000b7a <__aeabi_d2iz+0x36>
 8000b4e:	d511      	bpl.n	8000b74 <__aeabi_d2iz+0x30>
 8000b50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b58:	d912      	bls.n	8000b80 <__aeabi_d2iz+0x3c>
 8000b5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7e:	d105      	bne.n	8000b8c <__aeabi_d2iz+0x48>
 8000b80:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	bf08      	it	eq
 8000b86:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop

08000b94 <__aeabi_d2uiz>:
 8000b94:	004a      	lsls	r2, r1, #1
 8000b96:	d211      	bcs.n	8000bbc <__aeabi_d2uiz+0x28>
 8000b98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b9c:	d211      	bcs.n	8000bc2 <__aeabi_d2uiz+0x2e>
 8000b9e:	d50d      	bpl.n	8000bbc <__aeabi_d2uiz+0x28>
 8000ba0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba8:	d40e      	bmi.n	8000bc8 <__aeabi_d2uiz+0x34>
 8000baa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d102      	bne.n	8000bce <__aeabi_d2uiz+0x3a>
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	4770      	bx	lr
 8000bce:	f04f 0000 	mov.w	r0, #0
 8000bd2:	4770      	bx	lr

08000bd4 <__aeabi_d2f>:
 8000bd4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bdc:	bf24      	itt	cs
 8000bde:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000be6:	d90d      	bls.n	8000c04 <__aeabi_d2f+0x30>
 8000be8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bfc:	bf08      	it	eq
 8000bfe:	f020 0001 	biceq.w	r0, r0, #1
 8000c02:	4770      	bx	lr
 8000c04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c08:	d121      	bne.n	8000c4e <__aeabi_d2f+0x7a>
 8000c0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c0e:	bfbc      	itt	lt
 8000c10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c14:	4770      	bxlt	lr
 8000c16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c1e:	f1c2 0218 	rsb	r2, r2, #24
 8000c22:	f1c2 0c20 	rsb	ip, r2, #32
 8000c26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c2e:	bf18      	it	ne
 8000c30:	f040 0001 	orrne.w	r0, r0, #1
 8000c34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c40:	ea40 000c 	orr.w	r0, r0, ip
 8000c44:	fa23 f302 	lsr.w	r3, r3, r2
 8000c48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c4c:	e7cc      	b.n	8000be8 <__aeabi_d2f+0x14>
 8000c4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c52:	d107      	bne.n	8000c64 <__aeabi_d2f+0x90>
 8000c54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c58:	bf1e      	ittt	ne
 8000c5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c62:	4770      	bxne	lr
 8000c64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop

08000c74 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	73fb      	strb	r3, [r7, #15]
 8000c80:	2300      	movs	r3, #0
 8000c82:	73bb      	strb	r3, [r7, #14]
 8000c84:	230f      	movs	r3, #15
 8000c86:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	78db      	ldrb	r3, [r3, #3]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d039      	beq.n	8000d04 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000c90:	4b27      	ldr	r3, [pc, #156]	; (8000d30 <NVIC_Init+0xbc>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	43db      	mvns	r3, r3
 8000c96:	0a1b      	lsrs	r3, r3, #8
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
 8000ca2:	f1c3 0304 	rsb	r3, r3, #4
 8000ca6:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000ca8:	7b7a      	ldrb	r2, [r7, #13]
 8000caa:	7bfb      	ldrb	r3, [r7, #15]
 8000cac:	fa42 f303 	asr.w	r3, r2, r3
 8000cb0:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	785b      	ldrb	r3, [r3, #1]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	7bbb      	ldrb	r3, [r7, #14]
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	789a      	ldrb	r2, [r3, #2]
 8000cc4:	7b7b      	ldrb	r3, [r7, #13]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	011b      	lsls	r3, r3, #4
 8000cd4:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000cd6:	4a17      	ldr	r2, [pc, #92]	; (8000d34 <NVIC_Init+0xc0>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	4413      	add	r3, r2
 8000cde:	7bfa      	ldrb	r2, [r7, #15]
 8000ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000ce4:	4a13      	ldr	r2, [pc, #76]	; (8000d34 <NVIC_Init+0xc0>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	095b      	lsrs	r3, r3, #5
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	f003 031f 	and.w	r3, r3, #31
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000cfe:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000d02:	e00f      	b.n	8000d24 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d04:	490b      	ldr	r1, [pc, #44]	; (8000d34 <NVIC_Init+0xc0>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	095b      	lsrs	r3, r3, #5
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	f003 031f 	and.w	r3, r3, #31
 8000d18:	2201      	movs	r2, #1
 8000d1a:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d1c:	f100 0320 	add.w	r3, r0, #32
 8000d20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d24:	bf00      	nop
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000ed00 	.word	0xe000ed00
 8000d34:	e000e100 	.word	0xe000e100

08000d38 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f023 0201 	bic.w	r2, r3, #1
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2200      	movs	r2, #0
 8000d56:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2221      	movs	r2, #33	; 0x21
 8000d6e:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a46      	ldr	r2, [pc, #280]	; (8000e8c <DMA_DeInit+0x154>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d103      	bne.n	8000d80 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8000d78:	4b45      	ldr	r3, [pc, #276]	; (8000e90 <DMA_DeInit+0x158>)
 8000d7a:	223d      	movs	r2, #61	; 0x3d
 8000d7c:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000d7e:	e07e      	b.n	8000e7e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a44      	ldr	r2, [pc, #272]	; (8000e94 <DMA_DeInit+0x15c>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d104      	bne.n	8000d92 <DMA_DeInit+0x5a>
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8000d88:	4b41      	ldr	r3, [pc, #260]	; (8000e90 <DMA_DeInit+0x158>)
 8000d8a:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000d8e:	609a      	str	r2, [r3, #8]
}
 8000d90:	e075      	b.n	8000e7e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a40      	ldr	r2, [pc, #256]	; (8000e98 <DMA_DeInit+0x160>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d104      	bne.n	8000da4 <DMA_DeInit+0x6c>
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8000d9a:	4b3d      	ldr	r3, [pc, #244]	; (8000e90 <DMA_DeInit+0x158>)
 8000d9c:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8000da0:	609a      	str	r2, [r3, #8]
}
 8000da2:	e06c      	b.n	8000e7e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a3d      	ldr	r2, [pc, #244]	; (8000e9c <DMA_DeInit+0x164>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d104      	bne.n	8000db6 <DMA_DeInit+0x7e>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8000dac:	4b38      	ldr	r3, [pc, #224]	; (8000e90 <DMA_DeInit+0x158>)
 8000dae:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8000db2:	609a      	str	r2, [r3, #8]
}
 8000db4:	e063      	b.n	8000e7e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a39      	ldr	r2, [pc, #228]	; (8000ea0 <DMA_DeInit+0x168>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d103      	bne.n	8000dc6 <DMA_DeInit+0x8e>
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8000dbe:	4b34      	ldr	r3, [pc, #208]	; (8000e90 <DMA_DeInit+0x158>)
 8000dc0:	4a38      	ldr	r2, [pc, #224]	; (8000ea4 <DMA_DeInit+0x16c>)
 8000dc2:	60da      	str	r2, [r3, #12]
}
 8000dc4:	e05b      	b.n	8000e7e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a37      	ldr	r2, [pc, #220]	; (8000ea8 <DMA_DeInit+0x170>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d103      	bne.n	8000dd6 <DMA_DeInit+0x9e>
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8000dce:	4b30      	ldr	r3, [pc, #192]	; (8000e90 <DMA_DeInit+0x158>)
 8000dd0:	4a36      	ldr	r2, [pc, #216]	; (8000eac <DMA_DeInit+0x174>)
 8000dd2:	60da      	str	r2, [r3, #12]
}
 8000dd4:	e053      	b.n	8000e7e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a35      	ldr	r2, [pc, #212]	; (8000eb0 <DMA_DeInit+0x178>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d103      	bne.n	8000de6 <DMA_DeInit+0xae>
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8000dde:	4b2c      	ldr	r3, [pc, #176]	; (8000e90 <DMA_DeInit+0x158>)
 8000de0:	4a34      	ldr	r2, [pc, #208]	; (8000eb4 <DMA_DeInit+0x17c>)
 8000de2:	60da      	str	r2, [r3, #12]
}
 8000de4:	e04b      	b.n	8000e7e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a33      	ldr	r2, [pc, #204]	; (8000eb8 <DMA_DeInit+0x180>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d104      	bne.n	8000df8 <DMA_DeInit+0xc0>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8000dee:	4b28      	ldr	r3, [pc, #160]	; (8000e90 <DMA_DeInit+0x158>)
 8000df0:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8000df4:	60da      	str	r2, [r3, #12]
}
 8000df6:	e042      	b.n	8000e7e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a30      	ldr	r2, [pc, #192]	; (8000ebc <DMA_DeInit+0x184>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d103      	bne.n	8000e08 <DMA_DeInit+0xd0>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8000e00:	4b2f      	ldr	r3, [pc, #188]	; (8000ec0 <DMA_DeInit+0x188>)
 8000e02:	223d      	movs	r2, #61	; 0x3d
 8000e04:	609a      	str	r2, [r3, #8]
}
 8000e06:	e03a      	b.n	8000e7e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a2e      	ldr	r2, [pc, #184]	; (8000ec4 <DMA_DeInit+0x18c>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d104      	bne.n	8000e1a <DMA_DeInit+0xe2>
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8000e10:	4b2b      	ldr	r3, [pc, #172]	; (8000ec0 <DMA_DeInit+0x188>)
 8000e12:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000e16:	609a      	str	r2, [r3, #8]
}
 8000e18:	e031      	b.n	8000e7e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a2a      	ldr	r2, [pc, #168]	; (8000ec8 <DMA_DeInit+0x190>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d104      	bne.n	8000e2c <DMA_DeInit+0xf4>
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8000e22:	4b27      	ldr	r3, [pc, #156]	; (8000ec0 <DMA_DeInit+0x188>)
 8000e24:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8000e28:	609a      	str	r2, [r3, #8]
}
 8000e2a:	e028      	b.n	8000e7e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a27      	ldr	r2, [pc, #156]	; (8000ecc <DMA_DeInit+0x194>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d104      	bne.n	8000e3e <DMA_DeInit+0x106>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8000e34:	4b22      	ldr	r3, [pc, #136]	; (8000ec0 <DMA_DeInit+0x188>)
 8000e36:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8000e3a:	609a      	str	r2, [r3, #8]
}
 8000e3c:	e01f      	b.n	8000e7e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a23      	ldr	r2, [pc, #140]	; (8000ed0 <DMA_DeInit+0x198>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d103      	bne.n	8000e4e <DMA_DeInit+0x116>
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8000e46:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <DMA_DeInit+0x188>)
 8000e48:	4a16      	ldr	r2, [pc, #88]	; (8000ea4 <DMA_DeInit+0x16c>)
 8000e4a:	60da      	str	r2, [r3, #12]
}
 8000e4c:	e017      	b.n	8000e7e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a20      	ldr	r2, [pc, #128]	; (8000ed4 <DMA_DeInit+0x19c>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d103      	bne.n	8000e5e <DMA_DeInit+0x126>
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8000e56:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <DMA_DeInit+0x188>)
 8000e58:	4a14      	ldr	r2, [pc, #80]	; (8000eac <DMA_DeInit+0x174>)
 8000e5a:	60da      	str	r2, [r3, #12]
}
 8000e5c:	e00f      	b.n	8000e7e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream6)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a1d      	ldr	r2, [pc, #116]	; (8000ed8 <DMA_DeInit+0x1a0>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d103      	bne.n	8000e6e <DMA_DeInit+0x136>
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8000e66:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <DMA_DeInit+0x188>)
 8000e68:	4a12      	ldr	r2, [pc, #72]	; (8000eb4 <DMA_DeInit+0x17c>)
 8000e6a:	60da      	str	r2, [r3, #12]
}
 8000e6c:	e007      	b.n	8000e7e <DMA_DeInit+0x146>
    if (DMAy_Streamx == DMA2_Stream7)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a1a      	ldr	r2, [pc, #104]	; (8000edc <DMA_DeInit+0x1a4>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d103      	bne.n	8000e7e <DMA_DeInit+0x146>
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8000e76:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <DMA_DeInit+0x188>)
 8000e78:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8000e7c:	60da      	str	r2, [r3, #12]
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	40026010 	.word	0x40026010
 8000e90:	40026000 	.word	0x40026000
 8000e94:	40026028 	.word	0x40026028
 8000e98:	40026040 	.word	0x40026040
 8000e9c:	40026058 	.word	0x40026058
 8000ea0:	40026070 	.word	0x40026070
 8000ea4:	2000003d 	.word	0x2000003d
 8000ea8:	40026088 	.word	0x40026088
 8000eac:	20000f40 	.word	0x20000f40
 8000eb0:	400260a0 	.word	0x400260a0
 8000eb4:	203d0000 	.word	0x203d0000
 8000eb8:	400260b8 	.word	0x400260b8
 8000ebc:	40026410 	.word	0x40026410
 8000ec0:	40026400 	.word	0x40026400
 8000ec4:	40026428 	.word	0x40026428
 8000ec8:	40026440 	.word	0x40026440
 8000ecc:	40026458 	.word	0x40026458
 8000ed0:	40026470 	.word	0x40026470
 8000ed4:	40026488 	.word	0x40026488
 8000ed8:	400264a0 	.word	0x400264a0
 8000edc:	400264b8 	.word	0x400264b8

08000ee0 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <DMA_Init+0xac>)
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000f0a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000f16:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	6a1b      	ldr	r3, [r3, #32]
 8000f1c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000f22:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f28:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000f2e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f34:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	695b      	ldr	r3, [r3, #20]
 8000f46:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f023 0307 	bic.w	r3, r3, #7
 8000f4e:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	691a      	ldr	r2, [r3, #16]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685a      	ldr	r2, [r3, #4]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	689a      	ldr	r2, [r3, #8]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	60da      	str	r2, [r3, #12]
}
 8000f7e:	bf00      	nop
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	f01c803f 	.word	0xf01c803f

08000f90 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f9c:	78fb      	ldrb	r3, [r7, #3]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d006      	beq.n	8000fb0 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f043 0201 	orr.w	r2, r3, #1
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000fae:	e005      	b.n	8000fbc <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f023 0201 	bic.w	r2, r3, #1
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	601a      	str	r2, [r3, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <DMA_GetCurrDataCounter>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	b29b      	uxth	r3, r3
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b085      	sub	sp, #20
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d002      	beq.n	8001000 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]
 8000ffe:	e001      	b.n	8001004 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8001004:	7bfb      	ldrb	r3, [r7, #15]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3714      	adds	r7, #20
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001014:	b480      	push	{r7}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800101e:	2300      	movs	r3, #0
 8001020:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a15      	ldr	r2, [pc, #84]	; (8001080 <DMA_GetFlagStatus+0x6c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d802      	bhi.n	8001034 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <DMA_GetFlagStatus+0x70>)
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	e001      	b.n	8001038 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001034:	4b14      	ldr	r3, [pc, #80]	; (8001088 <DMA_GetFlagStatus+0x74>)
 8001036:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	e002      	b.n	8001050 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001056:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800105a:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	4013      	ands	r3, r2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d002      	beq.n	800106c <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8001066:	2301      	movs	r3, #1
 8001068:	75fb      	strb	r3, [r7, #23]
 800106a:	e001      	b.n	8001070 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 800106c:	2300      	movs	r3, #0
 800106e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8001070:	7dfb      	ldrb	r3, [r7, #23]
}
 8001072:	4618      	mov	r0, r3
 8001074:	371c      	adds	r7, #28
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	4002640f 	.word	0x4002640f
 8001084:	40026000 	.word	0x40026000
 8001088:	40026400 	.word	0x40026400

0800108c <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	4613      	mov	r3, r2
 8001098:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d00f      	beq.n	80010c4 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d006      	beq.n	80010b8 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	615a      	str	r2, [r3, #20]
 80010b6:	e005      	b.n	80010c4 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	2b80      	cmp	r3, #128	; 0x80
 80010c8:	d014      	beq.n	80010f4 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d008      	beq.n	80010e2 <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	f003 031e 	and.w	r3, r3, #30
 80010da:	431a      	orrs	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 80010e0:	e008      	b.n	80010f4 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	f003 031e 	and.w	r3, r3, #30
 80010ec:	43db      	mvns	r3, r3
 80010ee:	401a      	ands	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	601a      	str	r2, [r3, #0]
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a10      	ldr	r2, [pc, #64]	; (8001150 <DMA_ClearITPendingBit+0x50>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d802      	bhi.n	8001118 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <DMA_ClearITPendingBit+0x54>)
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	e001      	b.n	800111c <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001118:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <DMA_ClearITPendingBit+0x58>)
 800111a:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d007      	beq.n	8001136 <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800112c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 8001134:	e006      	b.n	8001144 <DMA_ClearITPendingBit+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800113c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	6093      	str	r3, [r2, #8]
}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	4002640f 	.word	0x4002640f
 8001154:	40026000 	.word	0x40026000
 8001158:	40026400 	.word	0x40026400

0800115c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800115c:	b480      	push	{r7}
 800115e:	b087      	sub	sp, #28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	e076      	b.n	8001266 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001178:	2201      	movs	r2, #1
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4013      	ands	r3, r2
 800118a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800118c:	68fa      	ldr	r2, [r7, #12]
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	429a      	cmp	r2, r3
 8001192:	d165      	bne.n	8001260 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	2103      	movs	r1, #3
 800119e:	fa01 f303 	lsl.w	r3, r1, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	401a      	ands	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	791b      	ldrb	r3, [r3, #4]
 80011b2:	4619      	mov	r1, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	fa01 f303 	lsl.w	r3, r1, r3
 80011bc:	431a      	orrs	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	791b      	ldrb	r3, [r3, #4]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d003      	beq.n	80011d2 <GPIO_Init+0x76>
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	791b      	ldrb	r3, [r3, #4]
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d12e      	bne.n	8001230 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689a      	ldr	r2, [r3, #8]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	2103      	movs	r1, #3
 80011dc:	fa01 f303 	lsl.w	r3, r1, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	401a      	ands	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	795b      	ldrb	r3, [r3, #5]
 80011f0:	4619      	mov	r1, r3
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	fa01 f303 	lsl.w	r3, r1, r3
 80011fa:	431a      	orrs	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	b29b      	uxth	r3, r3
 8001208:	4619      	mov	r1, r3
 800120a:	2301      	movs	r3, #1
 800120c:	408b      	lsls	r3, r1
 800120e:	43db      	mvns	r3, r3
 8001210:	401a      	ands	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	683a      	ldr	r2, [r7, #0]
 800121c:	7992      	ldrb	r2, [r2, #6]
 800121e:	4611      	mov	r1, r2
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	b292      	uxth	r2, r2
 8001224:	fa01 f202 	lsl.w	r2, r1, r2
 8001228:	b292      	uxth	r2, r2
 800122a:	431a      	orrs	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68da      	ldr	r2, [r3, #12]
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	b29b      	uxth	r3, r3
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	2103      	movs	r1, #3
 800123c:	fa01 f303 	lsl.w	r3, r1, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	401a      	ands	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68da      	ldr	r2, [r3, #12]
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	79db      	ldrb	r3, [r3, #7]
 8001250:	4619      	mov	r1, r3
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	431a      	orrs	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	3301      	adds	r3, #1
 8001264:	617b      	str	r3, [r7, #20]
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	2b0f      	cmp	r3, #15
 800126a:	d985      	bls.n	8001178 <GPIO_Init+0x1c>
    }
  }
}
 800126c:	bf00      	nop
 800126e:	371c      	adds	r7, #28
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	807b      	strh	r3, [r7, #2]
 8001284:	4613      	mov	r3, r2
 8001286:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800128c:	2300      	movs	r3, #0
 800128e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001290:	787a      	ldrb	r2, [r7, #1]
 8001292:	887b      	ldrh	r3, [r7, #2]
 8001294:	f003 0307 	and.w	r3, r3, #7
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80012a0:	887b      	ldrh	r3, [r7, #2]
 80012a2:	08db      	lsrs	r3, r3, #3
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	887b      	ldrh	r3, [r7, #2]
 80012aa:	08db      	lsrs	r3, r3, #3
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	461a      	mov	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3208      	adds	r2, #8
 80012b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80012b8:	887b      	ldrh	r3, [r7, #2]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	210f      	movs	r1, #15
 80012c2:	fa01 f303 	lsl.w	r3, r1, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	ea02 0103 	and.w	r1, r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f100 0208 	add.w	r2, r0, #8
 80012d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80012d6:	887b      	ldrh	r3, [r7, #2]
 80012d8:	08db      	lsrs	r3, r3, #3
 80012da:	b29b      	uxth	r3, r3
 80012dc:	461a      	mov	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	3208      	adds	r2, #8
 80012e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80012ec:	887b      	ldrh	r3, [r7, #2]
 80012ee:	08db      	lsrs	r3, r3, #3
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	461a      	mov	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3208      	adds	r2, #8
 80012f8:	68b9      	ldr	r1, [r7, #8]
 80012fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800130c:	b480      	push	{r7}
 800130e:	b089      	sub	sp, #36	; 0x24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001314:	2300      	movs	r3, #0
 8001316:	61bb      	str	r3, [r7, #24]
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
 8001320:	2302      	movs	r3, #2
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	2302      	movs	r3, #2
 800132a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800132c:	4b47      	ldr	r3, [pc, #284]	; (800144c <RCC_GetClocksFreq+0x140>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 030c 	and.w	r3, r3, #12
 8001334:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	2b04      	cmp	r3, #4
 800133a:	d007      	beq.n	800134c <RCC_GetClocksFreq+0x40>
 800133c:	2b08      	cmp	r3, #8
 800133e:	d009      	beq.n	8001354 <RCC_GetClocksFreq+0x48>
 8001340:	2b00      	cmp	r3, #0
 8001342:	d13d      	bne.n	80013c0 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a42      	ldr	r2, [pc, #264]	; (8001450 <RCC_GetClocksFreq+0x144>)
 8001348:	601a      	str	r2, [r3, #0]
      break;
 800134a:	e03d      	b.n	80013c8 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a41      	ldr	r2, [pc, #260]	; (8001454 <RCC_GetClocksFreq+0x148>)
 8001350:	601a      	str	r2, [r3, #0]
      break;
 8001352:	e039      	b.n	80013c8 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001354:	4b3d      	ldr	r3, [pc, #244]	; (800144c <RCC_GetClocksFreq+0x140>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	0d9b      	lsrs	r3, r3, #22
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001360:	4b3a      	ldr	r3, [pc, #232]	; (800144c <RCC_GetClocksFreq+0x140>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001368:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d00c      	beq.n	800138a <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001370:	4a38      	ldr	r2, [pc, #224]	; (8001454 <RCC_GetClocksFreq+0x148>)
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	fbb2 f3f3 	udiv	r3, r2, r3
 8001378:	4a34      	ldr	r2, [pc, #208]	; (800144c <RCC_GetClocksFreq+0x140>)
 800137a:	6852      	ldr	r2, [r2, #4]
 800137c:	0992      	lsrs	r2, r2, #6
 800137e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001382:	fb02 f303 	mul.w	r3, r2, r3
 8001386:	61fb      	str	r3, [r7, #28]
 8001388:	e00b      	b.n	80013a2 <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800138a:	4a31      	ldr	r2, [pc, #196]	; (8001450 <RCC_GetClocksFreq+0x144>)
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001392:	4a2e      	ldr	r2, [pc, #184]	; (800144c <RCC_GetClocksFreq+0x140>)
 8001394:	6852      	ldr	r2, [r2, #4]
 8001396:	0992      	lsrs	r2, r2, #6
 8001398:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800139c:	fb02 f303 	mul.w	r3, r2, r3
 80013a0:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80013a2:	4b2a      	ldr	r3, [pc, #168]	; (800144c <RCC_GetClocksFreq+0x140>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	0c1b      	lsrs	r3, r3, #16
 80013a8:	f003 0303 	and.w	r3, r3, #3
 80013ac:	3301      	adds	r3, #1
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80013b2:	69fa      	ldr	r2, [r7, #28]
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	601a      	str	r2, [r3, #0]
      break;
 80013be:	e003      	b.n	80013c8 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a23      	ldr	r2, [pc, #140]	; (8001450 <RCC_GetClocksFreq+0x144>)
 80013c4:	601a      	str	r2, [r3, #0]
      break;
 80013c6:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80013c8:	4b20      	ldr	r3, [pc, #128]	; (800144c <RCC_GetClocksFreq+0x140>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013d0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	091b      	lsrs	r3, r3, #4
 80013d6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80013d8:	4a1f      	ldr	r2, [pc, #124]	; (8001458 <RCC_GetClocksFreq+0x14c>)
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	4413      	add	r3, r2
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	40da      	lsrs	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80013f0:	4b16      	ldr	r3, [pc, #88]	; (800144c <RCC_GetClocksFreq+0x140>)
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80013f8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	0a9b      	lsrs	r3, r3, #10
 80013fe:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001400:	4a15      	ldr	r2, [pc, #84]	; (8001458 <RCC_GetClocksFreq+0x14c>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	4413      	add	r3, r2
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	40da      	lsrs	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <RCC_GetClocksFreq+0x140>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001420:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	0b5b      	lsrs	r3, r3, #13
 8001426:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001428:	4a0b      	ldr	r2, [pc, #44]	; (8001458 <RCC_GetClocksFreq+0x14c>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	4413      	add	r3, r2
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	b2db      	uxtb	r3, r3
 8001432:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	40da      	lsrs	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	60da      	str	r2, [r3, #12]
}
 8001440:	bf00      	nop
 8001442:	3724      	adds	r7, #36	; 0x24
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	40023800 	.word	0x40023800
 8001450:	00f42400 	.word	0x00f42400
 8001454:	007a1200 	.word	0x007a1200
 8001458:	20000000 	.word	0x20000000

0800145c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001468:	78fb      	ldrb	r3, [r7, #3]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d006      	beq.n	800147c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800146e:	490a      	ldr	r1, [pc, #40]	; (8001498 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4313      	orrs	r3, r2
 8001478:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800147a:	e006      	b.n	800148a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800147c:	4906      	ldr	r1, [pc, #24]	; (8001498 <RCC_AHB1PeriphClockCmd+0x3c>)
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	43db      	mvns	r3, r3
 8001486:	4013      	ands	r3, r2
 8001488:	630b      	str	r3, [r1, #48]	; 0x30
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800

0800149c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80014a8:	78fb      	ldrb	r3, [r7, #3]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d006      	beq.n	80014bc <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80014ae:	490a      	ldr	r1, [pc, #40]	; (80014d8 <RCC_APB1PeriphClockCmd+0x3c>)
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <RCC_APB1PeriphClockCmd+0x3c>)
 80014b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80014ba:	e006      	b.n	80014ca <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80014bc:	4906      	ldr	r1, [pc, #24]	; (80014d8 <RCC_APB1PeriphClockCmd+0x3c>)
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <RCC_APB1PeriphClockCmd+0x3c>)
 80014c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	4013      	ands	r3, r2
 80014c8:	640b      	str	r3, [r1, #64]	; 0x40
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40023800 	.word	0x40023800

080014dc <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	; 0x28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80014e6:	2300      	movs	r3, #0
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
 80014ea:	2300      	movs	r3, #0
 80014ec:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	8a1b      	ldrh	r3, [r3, #16]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001504:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	88db      	ldrh	r3, [r3, #6]
 800150a:	461a      	mov	r2, r3
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	4313      	orrs	r3, r2
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	b29a      	uxth	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	899b      	ldrh	r3, [r3, #12]
 800151e:	b29b      	uxth	r3, r3
 8001520:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001528:	f023 030c 	bic.w	r3, r3, #12
 800152c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	889a      	ldrh	r2, [r3, #4]
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	891b      	ldrh	r3, [r3, #8]
 8001536:	4313      	orrs	r3, r2
 8001538:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800153e:	4313      	orrs	r3, r2
 8001540:	b29b      	uxth	r3, r3
 8001542:	461a      	mov	r2, r3
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	4313      	orrs	r3, r2
 8001548:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	b29a      	uxth	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	8a9b      	ldrh	r3, [r3, #20]
 8001556:	b29b      	uxth	r3, r3
 8001558:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001560:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	899b      	ldrh	r3, [r3, #12]
 8001566:	461a      	mov	r2, r3
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	4313      	orrs	r3, r2
 800156c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	b29a      	uxth	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fec6 	bl	800130c <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a30      	ldr	r2, [pc, #192]	; (8001644 <USART_Init+0x168>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d003      	beq.n	8001590 <USART_Init+0xb4>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a2f      	ldr	r2, [pc, #188]	; (8001648 <USART_Init+0x16c>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d102      	bne.n	8001596 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	623b      	str	r3, [r7, #32]
 8001594:	e001      	b.n	800159a <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	899b      	ldrh	r3, [r3, #12]
 800159e:	b29b      	uxth	r3, r3
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	da0c      	bge.n	80015c0 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80015a6:	6a3a      	ldr	r2, [r7, #32]
 80015a8:	4613      	mov	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	009a      	lsls	r2, r3, #2
 80015b0:	441a      	add	r2, r3
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015bc:	61fb      	str	r3, [r7, #28]
 80015be:	e00b      	b.n	80015d8 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80015c0:	6a3a      	ldr	r2, [r7, #32]
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	009a      	lsls	r2, r3, #2
 80015ca:	441a      	add	r2, r3
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d6:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	4a1c      	ldr	r2, [pc, #112]	; (800164c <USART_Init+0x170>)
 80015dc:	fba2 2303 	umull	r2, r3, r2, r3
 80015e0:	095b      	lsrs	r3, r3, #5
 80015e2:	011b      	lsls	r3, r3, #4
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	091b      	lsrs	r3, r3, #4
 80015ea:	2264      	movs	r2, #100	; 0x64
 80015ec:	fb02 f303 	mul.w	r3, r2, r3
 80015f0:	69fa      	ldr	r2, [r7, #28]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	899b      	ldrh	r3, [r3, #12]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	b21b      	sxth	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	da0c      	bge.n	800161c <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	3332      	adds	r3, #50	; 0x32
 8001608:	4a10      	ldr	r2, [pc, #64]	; (800164c <USART_Init+0x170>)
 800160a:	fba2 2303 	umull	r2, r3, r2, r3
 800160e:	095b      	lsrs	r3, r3, #5
 8001610:	f003 0307 	and.w	r3, r3, #7
 8001614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001616:	4313      	orrs	r3, r2
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
 800161a:	e00b      	b.n	8001634 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	011b      	lsls	r3, r3, #4
 8001620:	3332      	adds	r3, #50	; 0x32
 8001622:	4a0a      	ldr	r2, [pc, #40]	; (800164c <USART_Init+0x170>)
 8001624:	fba2 2303 	umull	r2, r3, r2, r3
 8001628:	095b      	lsrs	r3, r3, #5
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001630:	4313      	orrs	r3, r2
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	b29a      	uxth	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	811a      	strh	r2, [r3, #8]
}
 800163c:	bf00      	nop
 800163e:	3728      	adds	r7, #40	; 0x28
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40011000 	.word	0x40011000
 8001648:	40011400 	.word	0x40011400
 800164c:	51eb851f 	.word	0x51eb851f

08001650 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800165c:	78fb      	ldrb	r3, [r7, #3]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d008      	beq.n	8001674 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	899b      	ldrh	r3, [r3, #12]
 8001666:	b29b      	uxth	r3, r3
 8001668:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800166c:	b29a      	uxth	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8001672:	e007      	b.n	8001684 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	899b      	ldrh	r3, [r3, #12]
 8001678:	b29b      	uxth	r3, r3
 800167a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800167e:	b29a      	uxth	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	819a      	strh	r2, [r3, #12]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	889b      	ldrh	r3, [r3, #4]
 800169c:	b29b      	uxth	r3, r3
 800169e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016a2:	b29b      	uxth	r3, r3
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	807b      	strh	r3, [r7, #2]
 80016bc:	4613      	mov	r3, r2
 80016be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 80016c0:	787b      	ldrb	r3, [r7, #1]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d008      	beq.n	80016d8 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	8a9b      	ldrh	r3, [r3, #20]
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	887b      	ldrh	r3, [r7, #2]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
 80016d6:	e009      	b.n	80016ec <USART_DMACmd+0x3c>
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	8a9b      	ldrh	r3, [r3, #20]
 80016dc:	b29a      	uxth	r2, r3
 80016de:	887b      	ldrh	r3, [r7, #2]
 80016e0:	43db      	mvns	r3, r3
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	4013      	ands	r3, r2
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	829a      	strh	r2, [r3, #20]
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b087      	sub	sp, #28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	807b      	strh	r3, [r7, #2]
 8001704:	4613      	mov	r3, r2
 8001706:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	2300      	movs	r3, #0
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	2300      	movs	r3, #0
 8001712:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800171c:	887b      	ldrh	r3, [r7, #2]
 800171e:	b2db      	uxtb	r3, r3
 8001720:	095b      	lsrs	r3, r3, #5
 8001722:	b2db      	uxtb	r3, r3
 8001724:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001726:	887b      	ldrh	r3, [r7, #2]
 8001728:	f003 031f 	and.w	r3, r3, #31
 800172c:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 800172e:	2201      	movs	r2, #1
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d103      	bne.n	8001746 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	330c      	adds	r3, #12
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	e009      	b.n	800175a <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	2b02      	cmp	r3, #2
 800174a:	d103      	bne.n	8001754 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	3310      	adds	r3, #16
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	e002      	b.n	800175a <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	3314      	adds	r3, #20
 8001758:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 800175a:	787b      	ldrb	r3, [r7, #1]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d006      	beq.n	800176e <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	6811      	ldr	r1, [r2, #0]
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	430a      	orrs	r2, r1
 800176a:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 800176c:	e006      	b.n	800177c <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	6811      	ldr	r1, [r2, #0]
 8001774:	68ba      	ldr	r2, [r7, #8]
 8001776:	43d2      	mvns	r2, r2
 8001778:	400a      	ands	r2, r1
 800177a:	601a      	str	r2, [r3, #0]
}
 800177c:	bf00      	nop
 800177e:	371c      	adds	r7, #28
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001794:	2300      	movs	r3, #0
 8001796:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	b29a      	uxth	r2, r3
 800179e:	887b      	ldrh	r3, [r7, #2]
 80017a0:	4013      	ands	r3, r2
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d002      	beq.n	80017ae <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80017a8:	2301      	movs	r3, #1
 80017aa:	73fb      	strb	r3, [r7, #15]
 80017ac:	e001      	b.n	80017b2 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80017ae:	2300      	movs	r3, #0
 80017b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b087      	sub	sp, #28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	2300      	movs	r3, #0
 80017d6:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80017d8:	2300      	movs	r3, #0
 80017da:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80017dc:	887b      	ldrh	r3, [r7, #2]
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	095b      	lsrs	r3, r3, #5
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80017e6:	887b      	ldrh	r3, [r7, #2]
 80017e8:	f003 031f 	and.w	r3, r3, #31
 80017ec:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80017ee:	2201      	movs	r2, #1
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d107      	bne.n	800180e <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	899b      	ldrh	r3, [r3, #12]
 8001802:	b29b      	uxth	r3, r3
 8001804:	461a      	mov	r2, r3
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	4013      	ands	r3, r2
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	e011      	b.n	8001832 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	2b02      	cmp	r3, #2
 8001812:	d107      	bne.n	8001824 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	8a1b      	ldrh	r3, [r3, #16]
 8001818:	b29b      	uxth	r3, r3
 800181a:	461a      	mov	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	4013      	ands	r3, r2
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	e006      	b.n	8001832 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	8a9b      	ldrh	r3, [r3, #20]
 8001828:	b29b      	uxth	r3, r3
 800182a:	461a      	mov	r2, r3
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	4013      	ands	r3, r2
 8001830:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8001832:	887b      	ldrh	r3, [r7, #2]
 8001834:	0a1b      	lsrs	r3, r3, #8
 8001836:	b29b      	uxth	r3, r3
 8001838:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800183a:	2201      	movs	r2, #1
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	b29b      	uxth	r3, r3
 800184a:	461a      	mov	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4013      	ands	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d005      	beq.n	8001864 <USART_GetITStatus+0xa4>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d002      	beq.n	8001864 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 800185e:	2301      	movs	r3, #1
 8001860:	74fb      	strb	r3, [r7, #19]
 8001862:	e001      	b.n	8001868 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8001864:	2300      	movs	r3, #0
 8001866:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001868:	7cfb      	ldrb	r3, [r7, #19]
}
 800186a:	4618      	mov	r0, r3
 800186c:	371c      	adds	r7, #28
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
	...

08001878 <init_USART_GPS>:
#include "GPS.h"



void init_USART_GPS(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b096      	sub	sp, #88	; 0x58
 800187c:	af00      	add	r7, sp, #0

		//init GPIOB for AF
		RCC_AHB1PeriphClockCmd(RCC_GPIOPeriph,ENABLE);
 800187e:	2101      	movs	r1, #1
 8001880:	2004      	movs	r0, #4
 8001882:	f7ff fdeb 	bl	800145c <RCC_AHB1PeriphClockCmd>
		GPIO_InitTypeDef GPIO_InitStruct;
		GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8001886:	2302      	movs	r3, #2
 8001888:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
		GPIO_InitStruct.GPIO_Pin = (GPIO_USART_RX | GPIO_USART_TX);
 800188c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001890:	653b      	str	r3, [r7, #80]	; 0x50
		GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8001892:	2301      	movs	r3, #1
 8001894:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8001898:	2300      	movs	r3, #0
 800189a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
		GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800189e:	2303      	movs	r3, #3
 80018a0:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
		GPIO_Init(GPIO_GPS,&GPIO_InitStruct);
 80018a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018a8:	4619      	mov	r1, r3
 80018aa:	487e      	ldr	r0, [pc, #504]	; (8001aa4 <init_USART_GPS+0x22c>)
 80018ac:	f7ff fc56 	bl	800115c <GPIO_Init>
		//AF MAPPing
		GPIO_PinAFConfig(GPIO_GPS,GPIO_USART_RX_SRC,USART_AF);
 80018b0:	2208      	movs	r2, #8
 80018b2:	210a      	movs	r1, #10
 80018b4:	487b      	ldr	r0, [pc, #492]	; (8001aa4 <init_USART_GPS+0x22c>)
 80018b6:	f7ff fcdf 	bl	8001278 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIO_GPS,GPIO_USART_TX_SRC,USART_AF);
 80018ba:	2208      	movs	r2, #8
 80018bc:	210b      	movs	r1, #11
 80018be:	4879      	ldr	r0, [pc, #484]	; (8001aa4 <init_USART_GPS+0x22c>)
 80018c0:	f7ff fcda 	bl	8001278 <GPIO_PinAFConfig>
#ifdef USE_APB2
		RCC_APB2PeriphClockCmd(RCC_USARTPeriph,ENABLE);
#endif

#ifdef USE_APB1
		RCC_APB1PeriphClockCmd(RCC_USARTPeriph,ENABLE);
 80018c4:	2101      	movs	r1, #1
 80018c6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80018ca:	f7ff fde7 	bl	800149c <RCC_APB1PeriphClockCmd>
#endif
		USART_InitTypeDef USART_InitStructure;
		USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 80018ce:	230c      	movs	r3, #12
 80018d0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80018d4:	2300      	movs	r3, #0
 80018d6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80018da:	2300      	movs	r3, #0
 80018dc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		USART_InitStructure.USART_Parity = USART_Parity_No;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		USART_InitStructure.USART_BaudRate = GPS_BAUDRATE;
 80018e6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80018ea:	643b      	str	r3, [r7, #64]	; 0x40
		USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		USART_Init(USART_GPS, &USART_InitStructure);
 80018f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018f6:	4619      	mov	r1, r3
 80018f8:	486b      	ldr	r0, [pc, #428]	; (8001aa8 <init_USART_GPS+0x230>)
 80018fa:	f7ff fdef 	bl	80014dc <USART_Init>

		//configure USART for idle interrupt
		NVIC_InitTypeDef NVIC_InitStructure;
		NVIC_InitStructure.NVIC_IRQChannel = USART_GPS_IRQn;
 80018fe:	2334      	movs	r3, #52	; 0x34
 8001900:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0;
 8001904:	2300      	movs	r3, #0
 8001906:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0;
 800190a:	2300      	movs	r3, #0
 800190c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001910:	2301      	movs	r3, #1
 8001912:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		NVIC_Init(&NVIC_InitStructure);
 8001916:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff f9aa 	bl	8000c74 <NVIC_Init>
		USART_ITConfig(USART_GPS, USART_IT_IDLE, ENABLE);
 8001920:	2201      	movs	r2, #1
 8001922:	f240 4124 	movw	r1, #1060	; 0x424
 8001926:	4860      	ldr	r0, [pc, #384]	; (8001aa8 <init_USART_GPS+0x230>)
 8001928:	f7ff fee6 	bl	80016f8 <USART_ITConfig>
		//enable USART
		USART_Cmd(USART_GPS,ENABLE);
 800192c:	2101      	movs	r1, #1
 800192e:	485e      	ldr	r0, [pc, #376]	; (8001aa8 <init_USART_GPS+0x230>)
 8001930:	f7ff fe8e 	bl	8001650 <USART_Cmd>

		//DMA init
#ifdef STM32_GNSS_USE_DMA
		DMA_InitTypeDef DMA_InitStructure;
		USART_DMACmd(USART_GPS, USART_DMAReq_Rx, ENABLE);
 8001934:	2201      	movs	r2, #1
 8001936:	2140      	movs	r1, #64	; 0x40
 8001938:	485b      	ldr	r0, [pc, #364]	; (8001aa8 <init_USART_GPS+0x230>)
 800193a:	f7ff feb9 	bl	80016b0 <USART_DMACmd>

		RCC_AHB1PeriphClockCmd(RCC_USART_DMAPeriph,ENABLE);
 800193e:	2101      	movs	r1, #1
 8001940:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001944:	f7ff fd8a 	bl	800145c <RCC_AHB1PeriphClockCmd>

		/* De-initialize DMA RX & TX Stream */
			DMA_DeInit(USART_DMA_RxStream);
 8001948:	4858      	ldr	r0, [pc, #352]	; (8001aac <init_USART_GPS+0x234>)
 800194a:	f7ff f9f5 	bl	8000d38 <DMA_DeInit>
			while (DMA_GetCmdStatus(USART_DMA_RxStream ) != DISABLE) { ; }
 800194e:	bf00      	nop
 8001950:	4856      	ldr	r0, [pc, #344]	; (8001aac <init_USART_GPS+0x234>)
 8001952:	f7ff fb46 	bl	8000fe2 <DMA_GetCmdStatus>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1f9      	bne.n	8001950 <init_USART_GPS+0xd8>
			DMA_DeInit(USART_DMA_TxStream);
 800195c:	4854      	ldr	r0, [pc, #336]	; (8001ab0 <init_USART_GPS+0x238>)
 800195e:	f7ff f9eb 	bl	8000d38 <DMA_DeInit>
			while (DMA_GetCmdStatus(USART_DMA_TxStream) != DISABLE) { ; }
 8001962:	bf00      	nop
 8001964:	4852      	ldr	r0, [pc, #328]	; (8001ab0 <init_USART_GPS+0x238>)
 8001966:	f7ff fb3c 	bl	8000fe2 <DMA_GetCmdStatus>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1f9      	bne.n	8001964 <init_USART_GPS+0xec>
			DMA_DeInit(DMA2_Stream0); //DMA2 Stream 0 for memory streaming
 8001970:	4850      	ldr	r0, [pc, #320]	; (8001ab4 <init_USART_GPS+0x23c>)
 8001972:	f7ff f9e1 	bl	8000d38 <DMA_DeInit>
			while (DMA_GetCmdStatus(DMA2_Stream0) != DISABLE){;}
 8001976:	bf00      	nop
 8001978:	484e      	ldr	r0, [pc, #312]	; (8001ab4 <init_USART_GPS+0x23c>)
 800197a:	f7ff fb32 	bl	8000fe2 <DMA_GetCmdStatus>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1f9      	bne.n	8001978 <init_USART_GPS+0x100>
		 *  Stream 2: RX
		 *  Stream 4: TX
		 *  Stream 0: MEM
		 */
			/* shared DMA configuration values */
				DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)(&(USART_GPS->DR));
 8001984:	4b4c      	ldr	r3, [pc, #304]	; (8001ab8 <init_USART_GPS+0x240>)
 8001986:	607b      	str	r3, [r7, #4]
				DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8001988:	2300      	movs	r3, #0
 800198a:	61fb      	str	r3, [r7, #28]
				DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
				DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8001990:	2300      	movs	r3, #0
 8001992:	63bb      	str	r3, [r7, #56]	; 0x38

				DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)DMA_RX_Buffer; //feeds into buffer direct
 8001994:	4b49      	ldr	r3, [pc, #292]	; (8001abc <init_USART_GPS+0x244>)
 8001996:	60bb      	str	r3, [r7, #8]
				DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8001998:	2300      	movs	r3, #0
 800199a:	623b      	str	r3, [r7, #32]
				DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800199c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019a0:	61bb      	str	r3, [r7, #24]
				DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80019a2:	2300      	movs	r3, #0
 80019a4:	637b      	str	r3, [r7, #52]	; 0x34

				DMA_InitStructure.DMA_Channel = USART_DMA_RxChannel;
 80019a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80019aa:	603b      	str	r3, [r7, #0]
				DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 80019ac:	2300      	movs	r3, #0
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
				DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]
				DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 80019b4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
				DMA_InitStructure.DMA_BufferSize = DMA_RX_BUFFER_SIZE;
 80019ba:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80019be:	613b      	str	r3, [r7, #16]

				DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 80019c0:	2300      	movs	r3, #0
 80019c2:	62fb      	str	r3, [r7, #44]	; 0x2c
				DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 80019c4:	2303      	movs	r3, #3
 80019c6:	633b      	str	r3, [r7, #48]	; 0x30

				DMA_Init(USART_DMA_RxStream, &DMA_InitStructure);
 80019c8:	463b      	mov	r3, r7
 80019ca:	4619      	mov	r1, r3
 80019cc:	4837      	ldr	r0, [pc, #220]	; (8001aac <init_USART_GPS+0x234>)
 80019ce:	f7ff fa87 	bl	8000ee0 <DMA_Init>

				// enable the interrupt in the NVIC
				NVIC_InitStructure.NVIC_IRQChannel = DMA_Rx_IRQn;
 80019d2:	230d      	movs	r3, #13
 80019d4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
				NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;
 80019d8:	2300      	movs	r3, #0
 80019da:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
 80019de:	2301      	movs	r3, #1
 80019e0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80019e4:	2301      	movs	r3, #1
 80019e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				NVIC_Init(&NVIC_InitStructure);
 80019ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff f940 	bl	8000c74 <NVIC_Init>
				DMA_ITConfig(USART_DMA_RxStream, DMA_IT_TC, ENABLE);
 80019f4:	2201      	movs	r2, #1
 80019f6:	2110      	movs	r1, #16
 80019f8:	482c      	ldr	r0, [pc, #176]	; (8001aac <init_USART_GPS+0x234>)
 80019fa:	f7ff fb47 	bl	800108c <DMA_ITConfig>
#ifdef STM32_GMEM_USE_DMA
	/* UART - MEM */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2,ENABLE);
 80019fe:	2101      	movs	r1, #1
 8001a00:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001a04:	f7ff fd2a 	bl	800145c <RCC_AHB1PeriphClockCmd>
	/* shared DMA configuration values */
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)DMA_RX_Buffer;
 8001a08:	4b2c      	ldr	r3, [pc, #176]	; (8001abc <init_USART_GPS+0x244>)
 8001a0a:	607b      	str	r3, [r7, #4]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Enable;
 8001a10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a14:	617b      	str	r3, [r7, #20]
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8001a16:	2300      	movs	r3, #0
 8001a18:	63bb      	str	r3, [r7, #56]	; 0x38

	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)GNSS_LOG_Buffer;
 8001a1a:	4b29      	ldr	r3, [pc, #164]	; (8001ac0 <init_USART_GPS+0x248>)
 8001a1c:	60bb      	str	r3, [r7, #8]
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8001a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a26:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	637b      	str	r3, [r7, #52]	; 0x34

	DMA_InitStructure.DMA_Channel = DMA_Channel_4;
 8001a2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001a30:	603b      	str	r3, [r7, #0]
	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8001a32:	2300      	movs	r3, #0
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToMemory;
 8001a36:	2380      	movs	r3, #128	; 0x80
 8001a38:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8001a3a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001a3e:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_BufferSize = GNSS_LOG_BUFFER_SIZE;
 8001a40:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001a44:	613b      	str	r3, [r7, #16]

	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8001a46:	2300      	movs	r3, #0
 8001a48:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	633b      	str	r3, [r7, #48]	; 0x30

	DMA_Init(DMA2_Stream0, &DMA_InitStructure);
 8001a4e:	463b      	mov	r3, r7
 8001a50:	4619      	mov	r1, r3
 8001a52:	4818      	ldr	r0, [pc, #96]	; (8001ab4 <init_USART_GPS+0x23c>)
 8001a54:	f7ff fa44 	bl	8000ee0 <DMA_Init>

	// enable the interrupt in the NVIC
	NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream0_IRQn;
 8001a58:	2338      	movs	r3, #56	; 0x38
 8001a5a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
 8001a64:	2301      	movs	r3, #1
 8001a66:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	NVIC_Init(&NVIC_InitStructure);
 8001a70:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff f8fd 	bl	8000c74 <NVIC_Init>
	DMA_ITConfig(DMA2_Stream0, DMA_IT_TC, ENABLE);
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	2110      	movs	r1, #16
 8001a7e:	480d      	ldr	r0, [pc, #52]	; (8001ab4 <init_USART_GPS+0x23c>)
 8001a80:	f7ff fb04 	bl	800108c <DMA_ITConfig>
#endif
DMA_Cmd(USART_DMA_RxStream, ENABLE);
 8001a84:	2101      	movs	r1, #1
 8001a86:	4809      	ldr	r0, [pc, #36]	; (8001aac <init_USART_GPS+0x234>)
 8001a88:	f7ff fa82 	bl	8000f90 <DMA_Cmd>
while (DMA_GetCmdStatus(USART_DMA_RxStream ) != ENABLE) { ; }
 8001a8c:	bf00      	nop
 8001a8e:	4807      	ldr	r0, [pc, #28]	; (8001aac <init_USART_GPS+0x234>)
 8001a90:	f7ff faa7 	bl	8000fe2 <DMA_GetCmdStatus>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d1f9      	bne.n	8001a8e <init_USART_GPS+0x216>
#endif

}
 8001a9a:	bf00      	nop
 8001a9c:	3758      	adds	r7, #88	; 0x58
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40020800 	.word	0x40020800
 8001aa8:	40004c00 	.word	0x40004c00
 8001aac:	40026040 	.word	0x40026040
 8001ab0:	40026070 	.word	0x40026070
 8001ab4:	40026410 	.word	0x40026410
 8001ab8:	40004c04 	.word	0x40004c04
 8001abc:	20000a70 	.word	0x20000a70
 8001ac0:	2000027c 	.word	0x2000027c

08001ac4 <zero_dma_gnss_memory>:
}

//==========================================================================
/* USART BUFFER FUNCTIONS*/
void zero_dma_gnss_memory(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
		for (int i = 0; i < DMA_RX_BUFFER_SIZE; i++)
 8001aca:	2300      	movs	r3, #0
 8001acc:	607b      	str	r3, [r7, #4]
 8001ace:	e007      	b.n	8001ae0 <zero_dma_gnss_memory+0x1c>
		{
			DMA_RX_Buffer[i] = 0;
 8001ad0:	4a08      	ldr	r2, [pc, #32]	; (8001af4 <zero_dma_gnss_memory+0x30>)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < DMA_RX_BUFFER_SIZE; i++)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3301      	adds	r3, #1
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001ae6:	dbf3      	blt.n	8001ad0 <zero_dma_gnss_memory+0xc>
		}
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	20000a70 	.word	0x20000a70

08001af8 <zero_gnss_memory>:
void zero_gnss_memory(void)
	{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
		for (int i = 0; i < GNSS_LOG_BUFFER_SIZE; i++){
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	e007      	b.n	8001b14 <zero_gnss_memory+0x1c>
			GNSS_LOG_Buffer[i] = 0;
 8001b04:	4a08      	ldr	r2, [pc, #32]	; (8001b28 <zero_gnss_memory+0x30>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < GNSS_LOG_BUFFER_SIZE; i++){
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3301      	adds	r3, #1
 8001b12:	607b      	str	r3, [r7, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b1a:	dbf3      	blt.n	8001b04 <zero_gnss_memory+0xc>
		}
	}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	2000027c 	.word	0x2000027c

08001b2c <UART4_IRQHandler>:
/*
 * called when USART has finished receiving
 * disables the stream
 */
void USART_GPS_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
	//idle line detection
	if(USART_GetFlagStatus(USART_GPS,USART_FLAG_IDLE) != RESET)
 8001b32:	2110      	movs	r1, #16
 8001b34:	4812      	ldr	r0, [pc, #72]	; (8001b80 <UART4_IRQHandler+0x54>)
 8001b36:	f7ff fe27 	bl	8001788 <USART_GetFlagStatus>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d01a      	beq.n	8001b76 <UART4_IRQHandler+0x4a>
	{
		//clear reg
		RX_COMPLETE_FLAG = 0;
 8001b40:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <UART4_IRQHandler+0x58>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
		volatile uint32_t tmp;
		tmp = USART_GetITStatus(USART_GPS, USART_IT_IDLE);
 8001b46:	f240 4124 	movw	r1, #1060	; 0x424
 8001b4a:	480d      	ldr	r0, [pc, #52]	; (8001b80 <UART4_IRQHandler+0x54>)
 8001b4c:	f7ff fe38 	bl	80017c0 <USART_GetITStatus>
 8001b50:	4603      	mov	r3, r0
 8001b52:	607b      	str	r3, [r7, #4]
		tmp = USART_ReceiveData(USART_GPS);
 8001b54:	480a      	ldr	r0, [pc, #40]	; (8001b80 <UART4_IRQHandler+0x54>)
 8001b56:	f7ff fd9b 	bl	8001690 <USART_ReceiveData>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	607b      	str	r3, [r7, #4]
		(void)tmp;
 8001b5e:	687b      	ldr	r3, [r7, #4]

		DMA_Cmd(USART_DMA_RxStream,DISABLE);
 8001b60:	2100      	movs	r1, #0
 8001b62:	4809      	ldr	r0, [pc, #36]	; (8001b88 <UART4_IRQHandler+0x5c>)
 8001b64:	f7ff fa14 	bl	8000f90 <DMA_Cmd>
		while(DMA_GetCmdStatus(USART_DMA_RxStream) != DISABLE);
 8001b68:	bf00      	nop
 8001b6a:	4807      	ldr	r0, [pc, #28]	; (8001b88 <UART4_IRQHandler+0x5c>)
 8001b6c:	f7ff fa39 	bl	8000fe2 <DMA_GetCmdStatus>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f9      	bne.n	8001b6a <UART4_IRQHandler+0x3e>

	}

}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40004c00 	.word	0x40004c00
 8001b84:	20000a5c 	.word	0x20000a5c
 8001b88:	40026040 	.word	0x40026040

08001b8c <DMA1_Stream2_IRQHandler>:

/* UART-MEM IRQ HANDLER */
#ifdef STM32_GNSS_USE_DMA
void DMA_Rx_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
	//check transfer complete flag
	if(DMA_GetFlagStatus(USART_DMA_RxStream,DMA_Rx_Flag_TCF) == SET)
 8001b90:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 8001b94:	4810      	ldr	r0, [pc, #64]	; (8001bd8 <DMA1_Stream2_IRQHandler+0x4c>)
 8001b96:	f7ff fa3d 	bl	8001014 <DMA_GetFlagStatus>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d119      	bne.n	8001bd4 <DMA1_Stream2_IRQHandler+0x48>
	{

		//set log to off
		RX_COMPLETE_FLAG = 0;
 8001ba0:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <DMA1_Stream2_IRQHandler+0x50>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
		//get data that still needs to be transferred
		gnss_length = DMA_RX_BUFFER_SIZE - DMA_GetCurrDataCounter(USART_DMA_RxStream);
 8001ba6:	480c      	ldr	r0, [pc, #48]	; (8001bd8 <DMA1_Stream2_IRQHandler+0x4c>)
 8001ba8:	f7ff fa0e 	bl	8000fc8 <DMA_GetCurrDataCounter>
 8001bac:	4603      	mov	r3, r0
 8001bae:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 8001bb2:	4a0b      	ldr	r2, [pc, #44]	; (8001be0 <DMA1_Stream2_IRQHandler+0x54>)
 8001bb4:	6013      	str	r3, [r2, #0]
		//zero_gnss_memory();

		//clear USART-DMA Transfer bit
		DMA_ClearITPendingBit(USART_DMA_RxStream, DMA_Rx_IT_TCF);
 8001bb6:	490b      	ldr	r1, [pc, #44]	; (8001be4 <DMA1_Stream2_IRQHandler+0x58>)
 8001bb8:	4807      	ldr	r0, [pc, #28]	; (8001bd8 <DMA1_Stream2_IRQHandler+0x4c>)
 8001bba:	f7ff faa1 	bl	8001100 <DMA_ClearITPendingBit>

		/* Enable DMA transfer to memory */
	#ifdef STM32_GMEM_USE_DMA
		DMA_Cmd(DMA2_Stream0, ENABLE);
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	4809      	ldr	r0, [pc, #36]	; (8001be8 <DMA1_Stream2_IRQHandler+0x5c>)
 8001bc2:	f7ff f9e5 	bl	8000f90 <DMA_Cmd>
		while (DMA_GetCmdStatus(DMA2_Stream0) != ENABLE) { ; }
 8001bc6:	bf00      	nop
 8001bc8:	4807      	ldr	r0, [pc, #28]	; (8001be8 <DMA1_Stream2_IRQHandler+0x5c>)
 8001bca:	f7ff fa0a 	bl	8000fe2 <DMA_GetCmdStatus>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d1f9      	bne.n	8001bc8 <DMA1_Stream2_IRQHandler+0x3c>
		DMA_Cmd(DMA2_Stream2, ENABLE);
		while (DMA_GetCmdStatus(DMA_Stream_USART_GNSS_RX ) != ENABLE) { ; }
		#endif
	}

}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40026040 	.word	0x40026040
 8001bdc:	20000a5c 	.word	0x20000a5c
 8001be0:	20000a4c 	.word	0x20000a4c
 8001be4:	10208000 	.word	0x10208000
 8001be8:	40026410 	.word	0x40026410

08001bec <DMA2_Stream0_IRQHandler>:
#endif
/* MEM _ MEM IRQ HANDLER */
#ifdef STM32_GMEM_USE_DMA
void DMA2_Stream0_IRQHandler (void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
	/* Test on DMA Stream Transfer Complete interrupt */
	if (DMA_GetFlagStatus(DMA2_Stream0, DMA_FLAG_TCIF0) != RESET)
 8001bf2:	4934      	ldr	r1, [pc, #208]	; (8001cc4 <DMA2_Stream0_IRQHandler+0xd8>)
 8001bf4:	4834      	ldr	r0, [pc, #208]	; (8001cc8 <DMA2_Stream0_IRQHandler+0xdc>)
 8001bf6:	f7ff fa0d 	bl	8001014 <DMA_GetFlagStatus>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d05d      	beq.n	8001cbc <DMA2_Stream0_IRQHandler+0xd0>
	{

		RX_COMPLETE_FLAG = 1;
 8001c00:	4b32      	ldr	r3, [pc, #200]	; (8001ccc <DMA2_Stream0_IRQHandler+0xe0>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	601a      	str	r2, [r3, #0]
		// transfer message to buffer
		char* msg;
		msg = strtok((char*)DMA_RX_Buffer,"$");
 8001c06:	4932      	ldr	r1, [pc, #200]	; (8001cd0 <DMA2_Stream0_IRQHandler+0xe4>)
 8001c08:	4832      	ldr	r0, [pc, #200]	; (8001cd4 <DMA2_Stream0_IRQHandler+0xe8>)
 8001c0a:	f001 fec5 	bl	8003998 <strtok>
 8001c0e:	6078      	str	r0, [r7, #4]
		while(msg != NULL)
 8001c10:	e03e      	b.n	8001c90 <DMA2_Stream0_IRQHandler+0xa4>
		{
			switch(is_valid(msg))
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f866 	bl	8001ce4 <is_valid>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d012      	beq.n	8001c44 <DMA2_Stream0_IRQHandler+0x58>
 8001c1e:	2b03      	cmp	r3, #3
 8001c20:	d01e      	beq.n	8001c60 <DMA2_Stream0_IRQHandler+0x74>
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d000      	beq.n	8001c28 <DMA2_Stream0_IRQHandler+0x3c>
						packet_full |= 0b100;
					}
					break;
				default:
					// invalid case
					break;
 8001c26:	e02e      	b.n	8001c86 <DMA2_Stream0_IRQHandler+0x9a>
					if(Parse_GLL(msg) == 2)
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f9d1 	bl	8001fd0 <Parse_GLL>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d123      	bne.n	8001c7c <DMA2_Stream0_IRQHandler+0x90>
						packet_full |= 0b1;
 8001c34:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <DMA2_Stream0_IRQHandler+0xec>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	4b26      	ldr	r3, [pc, #152]	; (8001cd8 <DMA2_Stream0_IRQHandler+0xec>)
 8001c40:	701a      	strb	r2, [r3, #0]
					break;
 8001c42:	e01b      	b.n	8001c7c <DMA2_Stream0_IRQHandler+0x90>
					if(parse_GSA(msg) == 0)
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 fa5b 	bl	8002100 <parse_GSA>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d117      	bne.n	8001c80 <DMA2_Stream0_IRQHandler+0x94>
						packet_full |= 0b10;
 8001c50:	4b21      	ldr	r3, [pc, #132]	; (8001cd8 <DMA2_Stream0_IRQHandler+0xec>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	f043 0302 	orr.w	r3, r3, #2
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4b1f      	ldr	r3, [pc, #124]	; (8001cd8 <DMA2_Stream0_IRQHandler+0xec>)
 8001c5c:	701a      	strb	r2, [r3, #0]
					break;
 8001c5e:	e00f      	b.n	8001c80 <DMA2_Stream0_IRQHandler+0x94>
					if(parse_ZDA(msg) == 0)
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f8ed 	bl	8001e40 <parse_ZDA>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d10b      	bne.n	8001c84 <DMA2_Stream0_IRQHandler+0x98>
						packet_full |= 0b100;
 8001c6c:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <DMA2_Stream0_IRQHandler+0xec>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	f043 0304 	orr.w	r3, r3, #4
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <DMA2_Stream0_IRQHandler+0xec>)
 8001c78:	701a      	strb	r2, [r3, #0]
					break;
 8001c7a:	e003      	b.n	8001c84 <DMA2_Stream0_IRQHandler+0x98>
					break;
 8001c7c:	bf00      	nop
 8001c7e:	e002      	b.n	8001c86 <DMA2_Stream0_IRQHandler+0x9a>
					break;
 8001c80:	bf00      	nop
 8001c82:	e000      	b.n	8001c86 <DMA2_Stream0_IRQHandler+0x9a>
					break;
 8001c84:	bf00      	nop
			}
			msg = strtok(NULL,"$");
 8001c86:	4912      	ldr	r1, [pc, #72]	; (8001cd0 <DMA2_Stream0_IRQHandler+0xe4>)
 8001c88:	2000      	movs	r0, #0
 8001c8a:	f001 fe85 	bl	8003998 <strtok>
 8001c8e:	6078      	str	r0, [r7, #4]
		while(msg != NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1bd      	bne.n	8001c12 <DMA2_Stream0_IRQHandler+0x26>
		}
		zero_dma_gnss_memory();
 8001c96:	f7ff ff15 	bl	8001ac4 <zero_dma_gnss_memory>
		zero_gnss_memory();
 8001c9a:	f7ff ff2d 	bl	8001af8 <zero_gnss_memory>
		/* Clear DMA Stream Transfer Complete interrupt pending bit */
		DMA_ClearITPendingBit(DMA2_Stream0, DMA_IT_TCIF0);
 8001c9e:	490f      	ldr	r1, [pc, #60]	; (8001cdc <DMA2_Stream0_IRQHandler+0xf0>)
 8001ca0:	4809      	ldr	r0, [pc, #36]	; (8001cc8 <DMA2_Stream0_IRQHandler+0xdc>)
 8001ca2:	f7ff fa2d 	bl	8001100 <DMA_ClearITPendingBit>

		/* Enable DMA transfer */
		DMA_Cmd(USART_DMA_RxStream, ENABLE);
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	480d      	ldr	r0, [pc, #52]	; (8001ce0 <DMA2_Stream0_IRQHandler+0xf4>)
 8001caa:	f7ff f971 	bl	8000f90 <DMA_Cmd>
		while (DMA_GetCmdStatus(USART_DMA_RxStream ) != ENABLE);
 8001cae:	bf00      	nop
 8001cb0:	480b      	ldr	r0, [pc, #44]	; (8001ce0 <DMA2_Stream0_IRQHandler+0xf4>)
 8001cb2:	f7ff f996 	bl	8000fe2 <DMA_GetCmdStatus>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d1f9      	bne.n	8001cb0 <DMA2_Stream0_IRQHandler+0xc4>

	}
}
 8001cbc:	bf00      	nop
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	10000020 	.word	0x10000020
 8001cc8:	40026410 	.word	0x40026410
 8001ccc:	20000a5c 	.word	0x20000a5c
 8001cd0:	080059f8 	.word	0x080059f8
 8001cd4:	20000a70 	.word	0x20000a70
 8001cd8:	20000a64 	.word	0x20000a64
 8001cdc:	10008020 	.word	0x10008020
 8001ce0:	40026040 	.word	0x40026040

08001ce4 <is_valid>:
 *   1 GLL msg
 *   2 GGA msg
 *   3 ZDA msg
 */
uint8_t is_valid(char* nmeamsg)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b088      	sub	sp, #32
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
	uint8_t flag = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	77fb      	strb	r3, [r7, #31]

	char msg[4] = {0};
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61bb      	str	r3, [r7, #24]
 8001cf8:	e00d      	b.n	8001d16 <is_valid+0x32>
	{
		msg[i] = *(nmeamsg+2+i);
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	3302      	adds	r3, #2
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	4413      	add	r3, r2
 8001d02:	7819      	ldrb	r1, [r3, #0]
 8001d04:	f107 020c 	add.w	r2, r7, #12
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	460a      	mov	r2, r1
 8001d0e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; ++i)
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	3301      	adds	r3, #1
 8001d14:	61bb      	str	r3, [r7, #24]
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	ddee      	ble.n	8001cfa <is_valid+0x16>
	}
	if((strcmp((char*)msg,"GLL") != 0))
 8001d1c:	f107 030c 	add.w	r3, r7, #12
 8001d20:	492c      	ldr	r1, [pc, #176]	; (8001dd4 <is_valid+0xf0>)
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe fa54 	bl	80001d0 <strcmp>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d019      	beq.n	8001d62 <is_valid+0x7e>
	{

		if (strcmp((char*)msg,"ZDA") != 0)
 8001d2e:	f107 030c 	add.w	r3, r7, #12
 8001d32:	4929      	ldr	r1, [pc, #164]	; (8001dd8 <is_valid+0xf4>)
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7fe fa4b 	bl	80001d0 <strcmp>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d00d      	beq.n	8001d5c <is_valid+0x78>
		{
			if(strcmp((char*)msg,"GSA") != 0)
 8001d40:	f107 030c 	add.w	r3, r7, #12
 8001d44:	4925      	ldr	r1, [pc, #148]	; (8001ddc <is_valid+0xf8>)
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fa42 	bl	80001d0 <strcmp>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <is_valid+0x72>
			{
				return -1;
 8001d52:	23ff      	movs	r3, #255	; 0xff
 8001d54:	e039      	b.n	8001dca <is_valid+0xe6>
			}
			else
			{
				flag = 2;
 8001d56:	2302      	movs	r3, #2
 8001d58:	77fb      	strb	r3, [r7, #31]
 8001d5a:	e004      	b.n	8001d66 <is_valid+0x82>
			}
		}else
		{
			flag = 3;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	77fb      	strb	r3, [r7, #31]
 8001d60:	e001      	b.n	8001d66 <is_valid+0x82>
		}

	}
	else
	{
		flag = 1;
 8001d62:	2301      	movs	r3, #1
 8001d64:	77fb      	strb	r3, [r7, #31]
	}
	/* check sum */
	uint16_t checksum = 0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	82fb      	strh	r3, [r7, #22]
	while(*nmeamsg != '*')
 8001d6a:	e008      	b.n	8001d7e <is_valid+0x9a>
	{
		checksum^= *nmeamsg;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	8afb      	ldrh	r3, [r7, #22]
 8001d74:	4053      	eors	r3, r2
 8001d76:	82fb      	strh	r3, [r7, #22]
		nmeamsg++;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	607b      	str	r3, [r7, #4]
	while(*nmeamsg != '*')
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b2a      	cmp	r3, #42	; 0x2a
 8001d84:	d1f2      	bne.n	8001d6c <is_valid+0x88>
	}
	uint8_t h = char_to_hex(*(++nmeamsg))*16;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f000 f825 	bl	8001de0 <char_to_hex>
 8001d96:	4603      	mov	r3, r0
 8001d98:	011b      	lsls	r3, r3, #4
 8001d9a:	757b      	strb	r3, [r7, #21]
	uint8_t l = char_to_hex(*(++nmeamsg));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 f81a 	bl	8001de0 <char_to_hex>
 8001dac:	4603      	mov	r3, r0
 8001dae:	753b      	strb	r3, [r7, #20]
	uint16_t checkbyte= h+l;
 8001db0:	7d7b      	ldrb	r3, [r7, #21]
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	7d3b      	ldrb	r3, [r7, #20]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	4413      	add	r3, r2
 8001dba:	827b      	strh	r3, [r7, #18]

	if(!(checksum == checkbyte))
 8001dbc:	8afa      	ldrh	r2, [r7, #22]
 8001dbe:	8a7b      	ldrh	r3, [r7, #18]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d001      	beq.n	8001dc8 <is_valid+0xe4>
	{
		return -1;
 8001dc4:	23ff      	movs	r3, #255	; 0xff
 8001dc6:	e000      	b.n	8001dca <is_valid+0xe6>
	}

	return flag;
 8001dc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3720      	adds	r7, #32
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	080059fc 	.word	0x080059fc
 8001dd8:	08005a00 	.word	0x08005a00
 8001ddc:	08005a04 	.word	0x08005a04

08001de0 <char_to_hex>:
/*
 * Flag keeps track of successful coordinate retrievals
 */
uint8_t char_to_hex(char c)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
	if(c == '\0')
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <char_to_hex+0x14>
	{
		return 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	e01e      	b.n	8001e32 <char_to_hex+0x52>
	}
	if ((c >='0') &&(c <='9'))
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	2b2f      	cmp	r3, #47	; 0x2f
 8001df8:	d906      	bls.n	8001e08 <char_to_hex+0x28>
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	2b39      	cmp	r3, #57	; 0x39
 8001dfe:	d803      	bhi.n	8001e08 <char_to_hex+0x28>
	{
		return (uint8_t)c - 48;
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	3b30      	subs	r3, #48	; 0x30
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	e014      	b.n	8001e32 <char_to_hex+0x52>
	}
	if((c >='a') &&(c <='f'))
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	2b60      	cmp	r3, #96	; 0x60
 8001e0c:	d906      	bls.n	8001e1c <char_to_hex+0x3c>
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	2b66      	cmp	r3, #102	; 0x66
 8001e12:	d803      	bhi.n	8001e1c <char_to_hex+0x3c>
	{
		return (uint8_t)c - 87;
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	3b57      	subs	r3, #87	; 0x57
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	e00a      	b.n	8001e32 <char_to_hex+0x52>
	}
	if((c >='A') &&(c <='F'))
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	2b40      	cmp	r3, #64	; 0x40
 8001e20:	d906      	bls.n	8001e30 <char_to_hex+0x50>
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	2b46      	cmp	r3, #70	; 0x46
 8001e26:	d803      	bhi.n	8001e30 <char_to_hex+0x50>
	{
		return (uint8_t)c - 55;
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	3b37      	subs	r3, #55	; 0x37
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	e000      	b.n	8001e32 <char_to_hex+0x52>
	}
	return -1; //invalid charachter
 8001e30:	23ff      	movs	r3, #255	; 0xff
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <parse_ZDA>:
/*
 * Parser Functions:
 * Extract key data from NMEA message strings.
 */
uint8_t parse_ZDA(char* ZDAstring)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	time_t t;
	struct tm *timepointer;

	t = time(NULL);
 8001e48:	2000      	movs	r0, #0
 8001e4a:	f001 fdf9 	bl	8003a40 <time>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	60fb      	str	r3, [r7, #12]
	timepointer = localtime(&t);
 8001e52:	f107 030c 	add.w	r3, r7, #12
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 fb62 	bl	8002520 <localtime>
 8001e5c:	61b8      	str	r0, [r7, #24]
	/* Get UTC time*/
	while(*ZDAstring++ != ',');
 8001e5e:	bf00      	nop
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	1c5a      	adds	r2, r3, #1
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b2c      	cmp	r3, #44	; 0x2c
 8001e6a:	d1f9      	bne.n	8001e60 <parse_ZDA+0x20>
	char* temp = ZDAstring++;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	1c5a      	adds	r2, r3, #1
 8001e70:	607a      	str	r2, [r7, #4]
 8001e72:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < strlen(ZDAstring); ++i)
 8001e74:	2300      	movs	r3, #0
 8001e76:	61fb      	str	r3, [r7, #28]
 8001e78:	e011      	b.n	8001e9e <parse_ZDA+0x5e>
	{
		if ((ZDAstring[i]==',')&&(ZDAstring[i+1] == ','))
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	4413      	add	r3, r2
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b2c      	cmp	r3, #44	; 0x2c
 8001e84:	d108      	bne.n	8001e98 <parse_ZDA+0x58>
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b2c      	cmp	r3, #44	; 0x2c
 8001e92:	d101      	bne.n	8001e98 <parse_ZDA+0x58>
		{
			/* Data is invalid*/
			return -1;
 8001e94:	23ff      	movs	r3, #255	; 0xff
 8001e96:	e094      	b.n	8001fc2 <parse_ZDA+0x182>
	for (int i = 0; i < strlen(ZDAstring); ++i)
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	61fb      	str	r3, [r7, #28]
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7fe f9a0 	bl	80001e4 <strlen>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d8e6      	bhi.n	8001e7a <parse_ZDA+0x3a>
		}
	}
	timepointer->tm_hour = (temp[0]-48)*10+ (temp[1]-48)+2;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	3b30      	subs	r3, #48	; 0x30
 8001ec6:	4413      	add	r3, r2
 8001ec8:	1c9a      	adds	r2, r3, #2
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	609a      	str	r2, [r3, #8]
	timepointer->tm_min = (temp[2]-48)*10+ (temp[3]-48)-1;
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001ed8:	4613      	mov	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	3303      	adds	r3, #3
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	3b30      	subs	r3, #48	; 0x30
 8001eea:	4413      	add	r3, r2
 8001eec:	1e5a      	subs	r2, r3, #1
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	605a      	str	r2, [r3, #4]
	timepointer->tm_sec = (temp[4]-48)*10+ (temp[5]-48) -1 ;
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001efc:	4613      	mov	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	461a      	mov	r2, r3
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	3305      	adds	r3, #5
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	3b30      	subs	r3, #48	; 0x30
 8001f0e:	4413      	add	r3, r2
 8001f10:	1e5a      	subs	r2, r3, #1
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	601a      	str	r2, [r3, #0]
	while(*ZDAstring++ != ',');
 8001f16:	bf00      	nop
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	1c5a      	adds	r2, r3, #1
 8001f1c:	607a      	str	r2, [r7, #4]
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b2c      	cmp	r3, #44	; 0x2c
 8001f22:	d1f9      	bne.n	8001f18 <parse_ZDA+0xd8>
	temp = ZDAstring;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	617b      	str	r3, [r7, #20]
	timepointer->tm_mday = (temp[0]-48)*10+ (temp[1]-48);
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	461a      	mov	r2, r3
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	3b30      	subs	r3, #48	; 0x30
 8001f42:	441a      	add	r2, r3
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	60da      	str	r2, [r3, #12]
	timepointer->tm_mon = (temp[3]-48)*10+ (temp[4]-48)-1;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	3303      	adds	r3, #3
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001f52:	4613      	mov	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	3304      	adds	r3, #4
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	3b30      	subs	r3, #48	; 0x30
 8001f64:	4413      	add	r3, r2
 8001f66:	1e5a      	subs	r2, r3, #1
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	611a      	str	r2, [r3, #16]
	timepointer->tm_year = (temp[6]-48)*1000 +(temp[7]-48)*100 + (temp[8]-48)*10 +(temp[9]-48)-1900;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	3306      	adds	r3, #6
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	3b30      	subs	r3, #48	; 0x30
 8001f74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f78:	fb02 f203 	mul.w	r2, r2, r3
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	3307      	adds	r3, #7
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	3b30      	subs	r3, #48	; 0x30
 8001f84:	2164      	movs	r1, #100	; 0x64
 8001f86:	fb01 f303 	mul.w	r3, r1, r3
 8001f8a:	18d1      	adds	r1, r2, r3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	3308      	adds	r3, #8
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001f96:	4613      	mov	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	18ca      	adds	r2, r1, r3
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	3309      	adds	r3, #9
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	3b30      	subs	r3, #48	; 0x30
 8001fa8:	4413      	add	r3, r2
 8001faa:	f2a3 726c 	subw	r2, r3, #1900	; 0x76c
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	615a      	str	r2, [r3, #20]
	time_t result;

	 result = mktime(timepointer);
 8001fb2:	69b8      	ldr	r0, [r7, #24]
 8001fb4:	f000 fc9a 	bl	80028ec <mktime>
 8001fb8:	6138      	str	r0, [r7, #16]
	 eTime =  result;
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4a03      	ldr	r2, [pc, #12]	; (8001fcc <parse_ZDA+0x18c>)
 8001fbe:	6013      	str	r3, [r2, #0]
	return 0;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3720      	adds	r7, #32
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000a60 	.word	0x20000a60

08001fd0 <Parse_GLL>:
uint8_t Parse_GLL(char* GLLstring)
{
 8001fd0:	b5b0      	push	{r4, r5, r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
	/* Extract latitude*/
	uint8_t flag = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	75fb      	strb	r3, [r7, #23]
	GLLstring+= 6;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3306      	adds	r3, #6
 8001fe0:	607b      	str	r3, [r7, #4]
	char* temp = GLLstring;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	613b      	str	r3, [r7, #16]
	uint8_t count = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	75bb      	strb	r3, [r7, #22]
	while(*GLLstring++ != ',')
 8001fea:	e002      	b.n	8001ff2 <Parse_GLL+0x22>
	{
		count++;
 8001fec:	7dbb      	ldrb	r3, [r7, #22]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	75bb      	strb	r3, [r7, #22]
	while(*GLLstring++ != ',')
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	1c5a      	adds	r2, r3, #1
 8001ff6:	607a      	str	r2, [r7, #4]
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b2c      	cmp	r3, #44	; 0x2c
 8001ffc:	d1f6      	bne.n	8001fec <Parse_GLL+0x1c>
	}
	if((count > 0))
 8001ffe:	7dbb      	ldrb	r3, [r7, #22]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d02e      	beq.n	8002062 <Parse_GLL+0x92>
	{
		temp[count] = '\0';
 8002004:	7dbb      	ldrb	r3, [r7, #22]
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4413      	add	r3, r2
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
		int8_t sign = 1 -2*( temp[++count] =='S');
 800200e:	7dbb      	ldrb	r3, [r7, #22]
 8002010:	3301      	adds	r3, #1
 8002012:	75bb      	strb	r3, [r7, #22]
 8002014:	7dbb      	ldrb	r3, [r7, #22]
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4413      	add	r3, r2
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b53      	cmp	r3, #83	; 0x53
 800201e:	d102      	bne.n	8002026 <Parse_GLL+0x56>
 8002020:	f04f 33ff 	mov.w	r3, #4294967295
 8002024:	e000      	b.n	8002028 <Parse_GLL+0x58>
 8002026:	2301      	movs	r3, #1
 8002028:	73fb      	strb	r3, [r7, #15]
		GPS_coord.lat = sign*atof(temp);
 800202a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe fa88 	bl	8000544 <__aeabi_i2d>
 8002034:	4604      	mov	r4, r0
 8002036:	460d      	mov	r5, r1
 8002038:	6938      	ldr	r0, [r7, #16]
 800203a:	f000 fa49 	bl	80024d0 <atof>
 800203e:	ec53 2b10 	vmov	r2, r3, d0
 8002042:	4620      	mov	r0, r4
 8002044:	4629      	mov	r1, r5
 8002046:	f7fe fae3 	bl	8000610 <__aeabi_dmul>
 800204a:	4603      	mov	r3, r0
 800204c:	460c      	mov	r4, r1
 800204e:	4618      	mov	r0, r3
 8002050:	4621      	mov	r1, r4
 8002052:	f7fe fdbf 	bl	8000bd4 <__aeabi_d2f>
 8002056:	4602      	mov	r2, r0
 8002058:	4b28      	ldr	r3, [pc, #160]	; (80020fc <Parse_GLL+0x12c>)
 800205a:	601a      	str	r2, [r3, #0]
		flag++;
 800205c:	7dfb      	ldrb	r3, [r7, #23]
 800205e:	3301      	adds	r3, #1
 8002060:	75fb      	strb	r3, [r7, #23]
	}

	/* Extract longitude */
	while(*GLLstring++ !=',');
 8002062:	bf00      	nop
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	1c5a      	adds	r2, r3, #1
 8002068:	607a      	str	r2, [r7, #4]
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b2c      	cmp	r3, #44	; 0x2c
 800206e:	d1f9      	bne.n	8002064 <Parse_GLL+0x94>
	temp = GLLstring;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	613b      	str	r3, [r7, #16]
	count = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	75bb      	strb	r3, [r7, #22]
	while(*GLLstring++ != ',')
 8002078:	e002      	b.n	8002080 <Parse_GLL+0xb0>
	{
			count++;
 800207a:	7dbb      	ldrb	r3, [r7, #22]
 800207c:	3301      	adds	r3, #1
 800207e:	75bb      	strb	r3, [r7, #22]
	while(*GLLstring++ != ',')
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	607a      	str	r2, [r7, #4]
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b2c      	cmp	r3, #44	; 0x2c
 800208a:	d1f6      	bne.n	800207a <Parse_GLL+0xaa>
	}
	if((count > 0))
 800208c:	7dbb      	ldrb	r3, [r7, #22]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d02e      	beq.n	80020f0 <Parse_GLL+0x120>
	{
			temp[count] = '\0';
 8002092:	7dbb      	ldrb	r3, [r7, #22]
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	4413      	add	r3, r2
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]
			int8_t sign = 1 -2*( temp[++count] =='W');
 800209c:	7dbb      	ldrb	r3, [r7, #22]
 800209e:	3301      	adds	r3, #1
 80020a0:	75bb      	strb	r3, [r7, #22]
 80020a2:	7dbb      	ldrb	r3, [r7, #22]
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4413      	add	r3, r2
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b57      	cmp	r3, #87	; 0x57
 80020ac:	d102      	bne.n	80020b4 <Parse_GLL+0xe4>
 80020ae:	f04f 33ff 	mov.w	r3, #4294967295
 80020b2:	e000      	b.n	80020b6 <Parse_GLL+0xe6>
 80020b4:	2301      	movs	r3, #1
 80020b6:	73bb      	strb	r3, [r7, #14]
			GPS_coord.longi = sign*atof(temp);
 80020b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7fe fa41 	bl	8000544 <__aeabi_i2d>
 80020c2:	4604      	mov	r4, r0
 80020c4:	460d      	mov	r5, r1
 80020c6:	6938      	ldr	r0, [r7, #16]
 80020c8:	f000 fa02 	bl	80024d0 <atof>
 80020cc:	ec53 2b10 	vmov	r2, r3, d0
 80020d0:	4620      	mov	r0, r4
 80020d2:	4629      	mov	r1, r5
 80020d4:	f7fe fa9c 	bl	8000610 <__aeabi_dmul>
 80020d8:	4603      	mov	r3, r0
 80020da:	460c      	mov	r4, r1
 80020dc:	4618      	mov	r0, r3
 80020de:	4621      	mov	r1, r4
 80020e0:	f7fe fd78 	bl	8000bd4 <__aeabi_d2f>
 80020e4:	4602      	mov	r2, r0
 80020e6:	4b05      	ldr	r3, [pc, #20]	; (80020fc <Parse_GLL+0x12c>)
 80020e8:	605a      	str	r2, [r3, #4]
			flag++;
 80020ea:	7dfb      	ldrb	r3, [r7, #23]
 80020ec:	3301      	adds	r3, #1
 80020ee:	75fb      	strb	r3, [r7, #23]

	}

return flag;
 80020f0:	7dfb      	ldrb	r3, [r7, #23]

}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bdb0      	pop	{r4, r5, r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000a68 	.word	0x20000a68

08002100 <parse_GSA>:
uint8_t parse_GSA(char* GSA_string)
{
 8002100:	b480      	push	{r7}
 8002102:	b089      	sub	sp, #36	; 0x24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
	/* Isolate Dilation of Precisions*/
	uint8_t count = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	77fb      	strb	r3, [r7, #31]
	char* t = GSA_string;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	61bb      	str	r3, [r7, #24]
	while(count < 2)
 8002110:	e008      	b.n	8002124 <parse_GSA+0x24>
	{
		if(*t++==',')count++;
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	61ba      	str	r2, [r7, #24]
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b2c      	cmp	r3, #44	; 0x2c
 800211c:	d102      	bne.n	8002124 <parse_GSA+0x24>
 800211e:	7ffb      	ldrb	r3, [r7, #31]
 8002120:	3301      	adds	r3, #1
 8002122:	77fb      	strb	r3, [r7, #31]
	while(count < 2)
 8002124:	7ffb      	ldrb	r3, [r7, #31]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d9f3      	bls.n	8002112 <parse_GSA+0x12>
	}
	diag.fix_type = (*t++-48);
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	1c5a      	adds	r2, r3, #1
 800212e:	61ba      	str	r2, [r7, #24]
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	3b30      	subs	r3, #48	; 0x30
 8002134:	b2da      	uxtb	r2, r3
 8002136:	4b45      	ldr	r3, [pc, #276]	; (800224c <parse_GSA+0x14c>)
 8002138:	71da      	strb	r2, [r3, #7]

	//field 3 - 15 indicate satelites
	uint8_t numsats = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	75fb      	strb	r3, [r7, #23]
	uint8_t numfields = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	75bb      	strb	r3, [r7, #22]
	while(numfields < 12)
 8002142:	e015      	b.n	8002170 <parse_GSA+0x70>
	{
		uint8_t count = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	757b      	strb	r3, [r7, #21]
		while(*++t !=',')count++;
 8002148:	e002      	b.n	8002150 <parse_GSA+0x50>
 800214a:	7d7b      	ldrb	r3, [r7, #21]
 800214c:	3301      	adds	r3, #1
 800214e:	757b      	strb	r3, [r7, #21]
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	3301      	adds	r3, #1
 8002154:	61bb      	str	r3, [r7, #24]
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b2c      	cmp	r3, #44	; 0x2c
 800215c:	d1f5      	bne.n	800214a <parse_GSA+0x4a>
		if(count > 0)
 800215e:	7d7b      	ldrb	r3, [r7, #21]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d002      	beq.n	800216a <parse_GSA+0x6a>
		{
			numsats++;
 8002164:	7dfb      	ldrb	r3, [r7, #23]
 8002166:	3301      	adds	r3, #1
 8002168:	75fb      	strb	r3, [r7, #23]
		}
		numfields++;
 800216a:	7dbb      	ldrb	r3, [r7, #22]
 800216c:	3301      	adds	r3, #1
 800216e:	75bb      	strb	r3, [r7, #22]
	while(numfields < 12)
 8002170:	7dbb      	ldrb	r3, [r7, #22]
 8002172:	2b0b      	cmp	r3, #11
 8002174:	d9e6      	bls.n	8002144 <parse_GSA+0x44>

	}
	diag.num_sats = numsats;
 8002176:	4a35      	ldr	r2, [pc, #212]	; (800224c <parse_GSA+0x14c>)
 8002178:	7dfb      	ldrb	r3, [r7, #23]
 800217a:	7193      	strb	r3, [r2, #6]
	DOP_t dop[3] = {0};
 800217c:	f107 0308 	add.w	r3, r7, #8
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	809a      	strh	r2, [r3, #4]
	for (int i = 0; i < 3; ++i)
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	e043      	b.n	8002214 <parse_GSA+0x114>
	{
		//get digit
		while(*++t != '.')
		{
			dop[i].digit = dop[i].digit*10 +(*t-48);
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	f107 0220 	add.w	r2, r7, #32
 8002194:	4413      	add	r3, r2
 8002196:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800219a:	461a      	mov	r2, r3
 800219c:	0092      	lsls	r2, r2, #2
 800219e:	4413      	add	r3, r2
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	4413      	add	r3, r2
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	3b30      	subs	r3, #48	; 0x30
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	f107 0120 	add.w	r1, r7, #32
 80021b8:	440b      	add	r3, r1
 80021ba:	f803 2c18 	strb.w	r2, [r3, #-24]
		while(*++t != '.')
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	3301      	adds	r3, #1
 80021c2:	61bb      	str	r3, [r7, #24]
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b2e      	cmp	r3, #46	; 0x2e
 80021ca:	d1df      	bne.n	800218c <parse_GSA+0x8c>
		}
		while(*++t != ',')
 80021cc:	e018      	b.n	8002200 <parse_GSA+0x100>
		{
			dop[i].precision = dop[i].precision*10+(*t-48);
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	f107 0220 	add.w	r2, r7, #32
 80021d6:	4413      	add	r3, r2
 80021d8:	f813 3c17 	ldrb.w	r3, [r3, #-23]
 80021dc:	461a      	mov	r2, r3
 80021de:	0092      	lsls	r2, r2, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	4413      	add	r3, r2
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	3b30      	subs	r3, #48	; 0x30
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	f107 0120 	add.w	r1, r7, #32
 80021fa:	440b      	add	r3, r1
 80021fc:	f803 2c17 	strb.w	r2, [r3, #-23]
		while(*++t != ',')
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	3301      	adds	r3, #1
 8002204:	61bb      	str	r3, [r7, #24]
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b2c      	cmp	r3, #44	; 0x2c
 800220c:	d1df      	bne.n	80021ce <parse_GSA+0xce>
	for (int i = 0; i < 3; ++i)
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	3301      	adds	r3, #1
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	2b02      	cmp	r3, #2
 8002218:	ddd1      	ble.n	80021be <parse_GSA+0xbe>
	}
	/*
	 * If successful, add to diagnostic struct
	 *
	 */
diag.HDOP = dop[0];
 800221a:	4b0c      	ldr	r3, [pc, #48]	; (800224c <parse_GSA+0x14c>)
 800221c:	3302      	adds	r3, #2
 800221e:	f107 0208 	add.w	r2, r7, #8
 8002222:	8812      	ldrh	r2, [r2, #0]
 8002224:	801a      	strh	r2, [r3, #0]
diag.PDOP = dop[1];
 8002226:	4b09      	ldr	r3, [pc, #36]	; (800224c <parse_GSA+0x14c>)
 8002228:	461a      	mov	r2, r3
 800222a:	f107 030a 	add.w	r3, r7, #10
 800222e:	881b      	ldrh	r3, [r3, #0]
 8002230:	8013      	strh	r3, [r2, #0]
diag.VDOP = dop[2];
 8002232:	4b06      	ldr	r3, [pc, #24]	; (800224c <parse_GSA+0x14c>)
 8002234:	3304      	adds	r3, #4
 8002236:	f107 020c 	add.w	r2, r7, #12
 800223a:	8812      	ldrh	r2, [r2, #0]
 800223c:	801a      	strh	r2, [r3, #0]
	return 0;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3724      	adds	r7, #36	; 0x24
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	20000a54 	.word	0x20000a54

08002250 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
  int i = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	607b      	str	r3, [r7, #4]
  init_USART_GPS();
 800225a:	f7ff fb0d 	bl	8001878 <init_USART_GPS>
  while(1)
  {
	  i++;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3301      	adds	r3, #1
 8002262:	607b      	str	r3, [r7, #4]
 8002264:	e7fb      	b.n	800225e <main+0xe>
	...

08002268 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002268:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800226a:	e003      	b.n	8002274 <LoopCopyDataInit>

0800226c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800226c:	4b0b      	ldr	r3, [pc, #44]	; (800229c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800226e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002270:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002272:	3104      	adds	r1, #4

08002274 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002274:	480a      	ldr	r0, [pc, #40]	; (80022a0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8002276:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8002278:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800227a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800227c:	d3f6      	bcc.n	800226c <CopyDataInit>
  ldr  r2, =_sbss
 800227e:	4a0a      	ldr	r2, [pc, #40]	; (80022a8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8002280:	e002      	b.n	8002288 <LoopFillZerobss>

08002282 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002282:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002284:	f842 3b04 	str.w	r3, [r2], #4

08002288 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002288:	4b08      	ldr	r3, [pc, #32]	; (80022ac <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800228a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800228c:	d3f9      	bcc.n	8002282 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800228e:	f000 f86d 	bl	800236c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002292:	f000 f921 	bl	80024d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002296:	f7ff ffdb 	bl	8002250 <main>
  bx  lr    
 800229a:	4770      	bx	lr
  ldr  r3, =_sidata
 800229c:	08005e14 	.word	0x08005e14
  ldr  r0, =_sdata
 80022a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80022a4:	2000022c 	.word	0x2000022c
  ldr  r2, =_sbss
 80022a8:	2000022c 	.word	0x2000022c
  ldr  r3, = _ebss
 80022ac:	20001244 	.word	0x20001244

080022b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022b0:	e7fe      	b.n	80022b0 <ADC_IRQHandler>

080022b2 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0
}
 80022b6:	bf00      	nop
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80022c4:	e7fe      	b.n	80022c4 <HardFault_Handler+0x4>

080022c6 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80022c6:	b480      	push	{r7}
 80022c8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80022ca:	e7fe      	b.n	80022ca <MemManage_Handler+0x4>

080022cc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80022d0:	e7fe      	b.n	80022d0 <BusFault_Handler+0x4>

080022d2 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80022d6:	e7fe      	b.n	80022d6 <UsageFault_Handler+0x4>

080022d8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80022e6:	b480      	push	{r7}
 80022e8:	af00      	add	r7, sp, #0
}
 80022ea:	bf00      	nop
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8002302:	b480      	push	{r7}
 8002304:	af00      	add	r7, sp, #0
}
 8002306:	bf00      	nop
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <_sbrk>:
	/* Implement your write code here, this is used by puts and printf for example */
	return len;
}

caddr_t _sbrk(int incr)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002318:	4b11      	ldr	r3, [pc, #68]	; (8002360 <_sbrk+0x50>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d102      	bne.n	8002326 <_sbrk+0x16>
		heap_end = &end;
 8002320:	4b0f      	ldr	r3, [pc, #60]	; (8002360 <_sbrk+0x50>)
 8002322:	4a10      	ldr	r2, [pc, #64]	; (8002364 <_sbrk+0x54>)
 8002324:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002326:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <_sbrk+0x50>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <_sbrk+0x50>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4413      	add	r3, r2
 8002334:	466a      	mov	r2, sp
 8002336:	4293      	cmp	r3, r2
 8002338:	d905      	bls.n	8002346 <_sbrk+0x36>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800233a:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <_sbrk+0x58>)
 800233c:	220c      	movs	r2, #12
 800233e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002340:	f04f 33ff 	mov.w	r3, #4294967295
 8002344:	e006      	b.n	8002354 <_sbrk+0x44>
	}

	heap_end += incr;
 8002346:	4b06      	ldr	r3, [pc, #24]	; (8002360 <_sbrk+0x50>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4413      	add	r3, r2
 800234e:	4a04      	ldr	r2, [pc, #16]	; (8002360 <_sbrk+0x50>)
 8002350:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002352:	68fb      	ldr	r3, [r7, #12]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	2000024c 	.word	0x2000024c
 8002364:	20001244 	.word	0x20001244
 8002368:	20001240 	.word	0x20001240

0800236c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002370:	4a16      	ldr	r2, [pc, #88]	; (80023cc <SystemInit+0x60>)
 8002372:	4b16      	ldr	r3, [pc, #88]	; (80023cc <SystemInit+0x60>)
 8002374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002378:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800237c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
	
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002380:	4a13      	ldr	r2, [pc, #76]	; (80023d0 <SystemInit+0x64>)
 8002382:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <SystemInit+0x64>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800238c:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <SystemInit+0x64>)
 800238e:	2200      	movs	r2, #0
 8002390:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002392:	4a0f      	ldr	r2, [pc, #60]	; (80023d0 <SystemInit+0x64>)
 8002394:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <SystemInit+0x64>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800239c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80023a2:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <SystemInit+0x64>)
 80023a4:	4a0b      	ldr	r2, [pc, #44]	; (80023d4 <SystemInit+0x68>)
 80023a6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80023a8:	4a09      	ldr	r2, [pc, #36]	; (80023d0 <SystemInit+0x64>)
 80023aa:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <SystemInit+0x64>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <SystemInit+0x64>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80023ba:	f000 f80d 	bl	80023d8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023be:	4b03      	ldr	r3, [pc, #12]	; (80023cc <SystemInit+0x60>)
 80023c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023c4:	609a      	str	r2, [r3, #8]
#endif
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	e000ed00 	.word	0xe000ed00
 80023d0:	40023800 	.word	0x40023800
 80023d4:	24003010 	.word	0x24003010

080023d8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80023de:	2300      	movs	r3, #0
 80023e0:	607b      	str	r3, [r7, #4]
 80023e2:	2300      	movs	r3, #0
 80023e4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80023e6:	4a36      	ldr	r2, [pc, #216]	; (80024c0 <SetSysClock+0xe8>)
 80023e8:	4b35      	ldr	r3, [pc, #212]	; (80024c0 <SetSysClock+0xe8>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80023f2:	4b33      	ldr	r3, [pc, #204]	; (80024c0 <SetSysClock+0xe8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3301      	adds	r3, #1
 8002400:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d103      	bne.n	8002410 <SetSysClock+0x38>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800240e:	d1f0      	bne.n	80023f2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002410:	4b2b      	ldr	r3, [pc, #172]	; (80024c0 <SetSysClock+0xe8>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d002      	beq.n	8002422 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800241c:	2301      	movs	r3, #1
 800241e:	603b      	str	r3, [r7, #0]
 8002420:	e001      	b.n	8002426 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002422:	2300      	movs	r3, #0
 8002424:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d142      	bne.n	80024b2 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800242c:	4a24      	ldr	r2, [pc, #144]	; (80024c0 <SetSysClock+0xe8>)
 800242e:	4b24      	ldr	r3, [pc, #144]	; (80024c0 <SetSysClock+0xe8>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002436:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8002438:	4a22      	ldr	r2, [pc, #136]	; (80024c4 <SetSysClock+0xec>)
 800243a:	4b22      	ldr	r3, [pc, #136]	; (80024c4 <SetSysClock+0xec>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002442:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8002444:	4a1e      	ldr	r2, [pc, #120]	; (80024c0 <SetSysClock+0xe8>)
 8002446:	4b1e      	ldr	r3, [pc, #120]	; (80024c0 <SetSysClock+0xe8>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800244c:	4a1c      	ldr	r2, [pc, #112]	; (80024c0 <SetSysClock+0xe8>)
 800244e:	4b1c      	ldr	r3, [pc, #112]	; (80024c0 <SetSysClock+0xe8>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002456:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002458:	4a19      	ldr	r2, [pc, #100]	; (80024c0 <SetSysClock+0xe8>)
 800245a:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <SetSysClock+0xe8>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8002462:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002464:	4b16      	ldr	r3, [pc, #88]	; (80024c0 <SetSysClock+0xe8>)
 8002466:	4a18      	ldr	r2, [pc, #96]	; (80024c8 <SetSysClock+0xf0>)
 8002468:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800246a:	4a15      	ldr	r2, [pc, #84]	; (80024c0 <SetSysClock+0xe8>)
 800246c:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <SetSysClock+0xe8>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002474:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002476:	bf00      	nop
 8002478:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <SetSysClock+0xe8>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0f9      	beq.n	8002478 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8002484:	4b11      	ldr	r3, [pc, #68]	; (80024cc <SetSysClock+0xf4>)
 8002486:	f240 6205 	movw	r2, #1541	; 0x605
 800248a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800248c:	4a0c      	ldr	r2, [pc, #48]	; (80024c0 <SetSysClock+0xe8>)
 800248e:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <SetSysClock+0xe8>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f023 0303 	bic.w	r3, r3, #3
 8002496:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002498:	4a09      	ldr	r2, [pc, #36]	; (80024c0 <SetSysClock+0xe8>)
 800249a:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <SetSysClock+0xe8>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f043 0302 	orr.w	r3, r3, #2
 80024a2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80024a4:	bf00      	nop
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <SetSysClock+0xe8>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 030c 	and.w	r3, r3, #12
 80024ae:	2b08      	cmp	r3, #8
 80024b0:	d1f9      	bne.n	80024a6 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40007000 	.word	0x40007000
 80024c8:	07405408 	.word	0x07405408
 80024cc:	40023c00 	.word	0x40023c00

080024d0 <atof>:
 80024d0:	2100      	movs	r1, #0
 80024d2:	f001 ba4d 	b.w	8003970 <strtod>
	...

080024d8 <__libc_init_array>:
 80024d8:	b570      	push	{r4, r5, r6, lr}
 80024da:	4e0d      	ldr	r6, [pc, #52]	; (8002510 <__libc_init_array+0x38>)
 80024dc:	4c0d      	ldr	r4, [pc, #52]	; (8002514 <__libc_init_array+0x3c>)
 80024de:	1ba4      	subs	r4, r4, r6
 80024e0:	10a4      	asrs	r4, r4, #2
 80024e2:	2500      	movs	r5, #0
 80024e4:	42a5      	cmp	r5, r4
 80024e6:	d109      	bne.n	80024fc <__libc_init_array+0x24>
 80024e8:	4e0b      	ldr	r6, [pc, #44]	; (8002518 <__libc_init_array+0x40>)
 80024ea:	4c0c      	ldr	r4, [pc, #48]	; (800251c <__libc_init_array+0x44>)
 80024ec:	f003 fc82 	bl	8005df4 <_init>
 80024f0:	1ba4      	subs	r4, r4, r6
 80024f2:	10a4      	asrs	r4, r4, #2
 80024f4:	2500      	movs	r5, #0
 80024f6:	42a5      	cmp	r5, r4
 80024f8:	d105      	bne.n	8002506 <__libc_init_array+0x2e>
 80024fa:	bd70      	pop	{r4, r5, r6, pc}
 80024fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002500:	4798      	blx	r3
 8002502:	3501      	adds	r5, #1
 8002504:	e7ee      	b.n	80024e4 <__libc_init_array+0xc>
 8002506:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800250a:	4798      	blx	r3
 800250c:	3501      	adds	r5, #1
 800250e:	e7f2      	b.n	80024f6 <__libc_init_array+0x1e>
 8002510:	08005e0c 	.word	0x08005e0c
 8002514:	08005e0c 	.word	0x08005e0c
 8002518:	08005e0c 	.word	0x08005e0c
 800251c:	08005e10 	.word	0x08005e10

08002520 <localtime>:
 8002520:	b538      	push	{r3, r4, r5, lr}
 8002522:	4b07      	ldr	r3, [pc, #28]	; (8002540 <localtime+0x20>)
 8002524:	681c      	ldr	r4, [r3, #0]
 8002526:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002528:	4605      	mov	r5, r0
 800252a:	b91b      	cbnz	r3, 8002534 <localtime+0x14>
 800252c:	2024      	movs	r0, #36	; 0x24
 800252e:	f000 f8ed 	bl	800270c <malloc>
 8002532:	63e0      	str	r0, [r4, #60]	; 0x3c
 8002534:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002536:	4628      	mov	r0, r5
 8002538:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800253c:	f000 b802 	b.w	8002544 <localtime_r>
 8002540:	2000005c 	.word	0x2000005c

08002544 <localtime_r>:
 8002544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002548:	460c      	mov	r4, r1
 800254a:	4680      	mov	r8, r0
 800254c:	f002 f84a 	bl	80045e4 <__gettzinfo>
 8002550:	4621      	mov	r1, r4
 8002552:	4607      	mov	r7, r0
 8002554:	4640      	mov	r0, r8
 8002556:	f002 f849 	bl	80045ec <gmtime_r>
 800255a:	6946      	ldr	r6, [r0, #20]
 800255c:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8002560:	07b3      	lsls	r3, r6, #30
 8002562:	4604      	mov	r4, r0
 8002564:	d105      	bne.n	8002572 <localtime_r+0x2e>
 8002566:	2264      	movs	r2, #100	; 0x64
 8002568:	fb96 f3f2 	sdiv	r3, r6, r2
 800256c:	fb02 6313 	mls	r3, r2, r3, r6
 8002570:	b9fb      	cbnz	r3, 80025b2 <localtime_r+0x6e>
 8002572:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002576:	fb96 f5f3 	sdiv	r5, r6, r3
 800257a:	fb03 6515 	mls	r5, r3, r5, r6
 800257e:	fab5 f585 	clz	r5, r5
 8002582:	096d      	lsrs	r5, r5, #5
 8002584:	4b5f      	ldr	r3, [pc, #380]	; (8002704 <localtime_r+0x1c0>)
 8002586:	2230      	movs	r2, #48	; 0x30
 8002588:	fb02 3505 	mla	r5, r2, r5, r3
 800258c:	f001 fb14 	bl	8003bb8 <__tz_lock>
 8002590:	f001 fb14 	bl	8003bbc <_tzset_unlocked>
 8002594:	4b5c      	ldr	r3, [pc, #368]	; (8002708 <localtime_r+0x1c4>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	b1e3      	cbz	r3, 80025d4 <localtime_r+0x90>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	429e      	cmp	r6, r3
 800259e:	d10a      	bne.n	80025b6 <localtime_r+0x72>
 80025a0:	6839      	ldr	r1, [r7, #0]
 80025a2:	f8d8 3000 	ldr.w	r3, [r8]
 80025a6:	69fa      	ldr	r2, [r7, #28]
 80025a8:	b969      	cbnz	r1, 80025c6 <localtime_r+0x82>
 80025aa:	4293      	cmp	r3, r2
 80025ac:	db0d      	blt.n	80025ca <localtime_r+0x86>
 80025ae:	2301      	movs	r3, #1
 80025b0:	e010      	b.n	80025d4 <localtime_r+0x90>
 80025b2:	2501      	movs	r5, #1
 80025b4:	e7e6      	b.n	8002584 <localtime_r+0x40>
 80025b6:	4630      	mov	r0, r6
 80025b8:	f001 fa56 	bl	8003a68 <__tzcalc_limits>
 80025bc:	2800      	cmp	r0, #0
 80025be:	d1ef      	bne.n	80025a0 <localtime_r+0x5c>
 80025c0:	f04f 33ff 	mov.w	r3, #4294967295
 80025c4:	e006      	b.n	80025d4 <localtime_r+0x90>
 80025c6:	4293      	cmp	r3, r2
 80025c8:	db55      	blt.n	8002676 <localtime_r+0x132>
 80025ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025cc:	4293      	cmp	r3, r2
 80025ce:	bfac      	ite	ge
 80025d0:	2300      	movge	r3, #0
 80025d2:	2301      	movlt	r3, #1
 80025d4:	6223      	str	r3, [r4, #32]
 80025d6:	6a23      	ldr	r3, [r4, #32]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	bf0c      	ite	eq
 80025dc:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80025de:	6a39      	ldrne	r1, [r7, #32]
 80025e0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80025e4:	203c      	movs	r0, #60	; 0x3c
 80025e6:	fb91 f6f3 	sdiv	r6, r1, r3
 80025ea:	fb03 1316 	mls	r3, r3, r6, r1
 80025ee:	6861      	ldr	r1, [r4, #4]
 80025f0:	fb93 f2f0 	sdiv	r2, r3, r0
 80025f4:	fb00 3012 	mls	r0, r0, r2, r3
 80025f8:	6823      	ldr	r3, [r4, #0]
 80025fa:	1a89      	subs	r1, r1, r2
 80025fc:	68a2      	ldr	r2, [r4, #8]
 80025fe:	6061      	str	r1, [r4, #4]
 8002600:	1a1b      	subs	r3, r3, r0
 8002602:	1b92      	subs	r2, r2, r6
 8002604:	2b3b      	cmp	r3, #59	; 0x3b
 8002606:	6023      	str	r3, [r4, #0]
 8002608:	60a2      	str	r2, [r4, #8]
 800260a:	dd36      	ble.n	800267a <localtime_r+0x136>
 800260c:	3101      	adds	r1, #1
 800260e:	6061      	str	r1, [r4, #4]
 8002610:	3b3c      	subs	r3, #60	; 0x3c
 8002612:	6023      	str	r3, [r4, #0]
 8002614:	6863      	ldr	r3, [r4, #4]
 8002616:	2b3b      	cmp	r3, #59	; 0x3b
 8002618:	dd35      	ble.n	8002686 <localtime_r+0x142>
 800261a:	3201      	adds	r2, #1
 800261c:	60a2      	str	r2, [r4, #8]
 800261e:	3b3c      	subs	r3, #60	; 0x3c
 8002620:	6063      	str	r3, [r4, #4]
 8002622:	68a3      	ldr	r3, [r4, #8]
 8002624:	2b17      	cmp	r3, #23
 8002626:	dd34      	ble.n	8002692 <localtime_r+0x14e>
 8002628:	69e2      	ldr	r2, [r4, #28]
 800262a:	3201      	adds	r2, #1
 800262c:	61e2      	str	r2, [r4, #28]
 800262e:	69a2      	ldr	r2, [r4, #24]
 8002630:	3201      	adds	r2, #1
 8002632:	2a06      	cmp	r2, #6
 8002634:	bfc8      	it	gt
 8002636:	2200      	movgt	r2, #0
 8002638:	61a2      	str	r2, [r4, #24]
 800263a:	68e2      	ldr	r2, [r4, #12]
 800263c:	3b18      	subs	r3, #24
 800263e:	3201      	adds	r2, #1
 8002640:	60a3      	str	r3, [r4, #8]
 8002642:	6923      	ldr	r3, [r4, #16]
 8002644:	60e2      	str	r2, [r4, #12]
 8002646:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800264a:	428a      	cmp	r2, r1
 800264c:	dd0e      	ble.n	800266c <localtime_r+0x128>
 800264e:	3301      	adds	r3, #1
 8002650:	2b0c      	cmp	r3, #12
 8002652:	bf0c      	ite	eq
 8002654:	6963      	ldreq	r3, [r4, #20]
 8002656:	6123      	strne	r3, [r4, #16]
 8002658:	eba2 0201 	sub.w	r2, r2, r1
 800265c:	60e2      	str	r2, [r4, #12]
 800265e:	bf01      	itttt	eq
 8002660:	3301      	addeq	r3, #1
 8002662:	2200      	moveq	r2, #0
 8002664:	6122      	streq	r2, [r4, #16]
 8002666:	6163      	streq	r3, [r4, #20]
 8002668:	bf08      	it	eq
 800266a:	61e2      	streq	r2, [r4, #28]
 800266c:	f001 faa5 	bl	8003bba <__tz_unlock>
 8002670:	4620      	mov	r0, r4
 8002672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002676:	2300      	movs	r3, #0
 8002678:	e7ac      	b.n	80025d4 <localtime_r+0x90>
 800267a:	2b00      	cmp	r3, #0
 800267c:	daca      	bge.n	8002614 <localtime_r+0xd0>
 800267e:	3901      	subs	r1, #1
 8002680:	6061      	str	r1, [r4, #4]
 8002682:	333c      	adds	r3, #60	; 0x3c
 8002684:	e7c5      	b.n	8002612 <localtime_r+0xce>
 8002686:	2b00      	cmp	r3, #0
 8002688:	dacb      	bge.n	8002622 <localtime_r+0xde>
 800268a:	3a01      	subs	r2, #1
 800268c:	60a2      	str	r2, [r4, #8]
 800268e:	333c      	adds	r3, #60	; 0x3c
 8002690:	e7c6      	b.n	8002620 <localtime_r+0xdc>
 8002692:	2b00      	cmp	r3, #0
 8002694:	daea      	bge.n	800266c <localtime_r+0x128>
 8002696:	69e2      	ldr	r2, [r4, #28]
 8002698:	3a01      	subs	r2, #1
 800269a:	61e2      	str	r2, [r4, #28]
 800269c:	69a2      	ldr	r2, [r4, #24]
 800269e:	3a01      	subs	r2, #1
 80026a0:	bf48      	it	mi
 80026a2:	2206      	movmi	r2, #6
 80026a4:	61a2      	str	r2, [r4, #24]
 80026a6:	68e2      	ldr	r2, [r4, #12]
 80026a8:	3318      	adds	r3, #24
 80026aa:	3a01      	subs	r2, #1
 80026ac:	60e2      	str	r2, [r4, #12]
 80026ae:	60a3      	str	r3, [r4, #8]
 80026b0:	2a00      	cmp	r2, #0
 80026b2:	d1db      	bne.n	800266c <localtime_r+0x128>
 80026b4:	6923      	ldr	r3, [r4, #16]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	d405      	bmi.n	80026c6 <localtime_r+0x182>
 80026ba:	6123      	str	r3, [r4, #16]
 80026bc:	6923      	ldr	r3, [r4, #16]
 80026be:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80026c2:	60e3      	str	r3, [r4, #12]
 80026c4:	e7d2      	b.n	800266c <localtime_r+0x128>
 80026c6:	230b      	movs	r3, #11
 80026c8:	6123      	str	r3, [r4, #16]
 80026ca:	6963      	ldr	r3, [r4, #20]
 80026cc:	1e5a      	subs	r2, r3, #1
 80026ce:	f012 0f03 	tst.w	r2, #3
 80026d2:	6162      	str	r2, [r4, #20]
 80026d4:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 80026d8:	d105      	bne.n	80026e6 <localtime_r+0x1a2>
 80026da:	2164      	movs	r1, #100	; 0x64
 80026dc:	fb92 f3f1 	sdiv	r3, r2, r1
 80026e0:	fb01 2313 	mls	r3, r1, r3, r2
 80026e4:	b963      	cbnz	r3, 8002700 <localtime_r+0x1bc>
 80026e6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80026ea:	fb92 f3f1 	sdiv	r3, r2, r1
 80026ee:	fb01 2313 	mls	r3, r1, r3, r2
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	095b      	lsrs	r3, r3, #5
 80026f8:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80026fc:	61e3      	str	r3, [r4, #28]
 80026fe:	e7dd      	b.n	80026bc <localtime_r+0x178>
 8002700:	2301      	movs	r3, #1
 8002702:	e7f9      	b.n	80026f8 <localtime_r+0x1b4>
 8002704:	08005a74 	.word	0x08005a74
 8002708:	20000274 	.word	0x20000274

0800270c <malloc>:
 800270c:	4b02      	ldr	r3, [pc, #8]	; (8002718 <malloc+0xc>)
 800270e:	4601      	mov	r1, r0
 8002710:	6818      	ldr	r0, [r3, #0]
 8002712:	f000 bab5 	b.w	8002c80 <_malloc_r>
 8002716:	bf00      	nop
 8002718:	2000005c 	.word	0x2000005c

0800271c <free>:
 800271c:	4b02      	ldr	r3, [pc, #8]	; (8002728 <free+0xc>)
 800271e:	4601      	mov	r1, r0
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	f000 ba5f 	b.w	8002be4 <_free_r>
 8002726:	bf00      	nop
 8002728:	2000005c 	.word	0x2000005c

0800272c <validate_structure>:
 800272c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800272e:	6801      	ldr	r1, [r0, #0]
 8002730:	293b      	cmp	r1, #59	; 0x3b
 8002732:	4604      	mov	r4, r0
 8002734:	d911      	bls.n	800275a <validate_structure+0x2e>
 8002736:	223c      	movs	r2, #60	; 0x3c
 8002738:	4668      	mov	r0, sp
 800273a:	f001 fbc7 	bl	8003ecc <div>
 800273e:	9a01      	ldr	r2, [sp, #4]
 8002740:	6863      	ldr	r3, [r4, #4]
 8002742:	9900      	ldr	r1, [sp, #0]
 8002744:	2a00      	cmp	r2, #0
 8002746:	440b      	add	r3, r1
 8002748:	6063      	str	r3, [r4, #4]
 800274a:	bfbb      	ittet	lt
 800274c:	323c      	addlt	r2, #60	; 0x3c
 800274e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8002752:	6022      	strge	r2, [r4, #0]
 8002754:	6022      	strlt	r2, [r4, #0]
 8002756:	bfb8      	it	lt
 8002758:	6063      	strlt	r3, [r4, #4]
 800275a:	6861      	ldr	r1, [r4, #4]
 800275c:	293b      	cmp	r1, #59	; 0x3b
 800275e:	d911      	bls.n	8002784 <validate_structure+0x58>
 8002760:	223c      	movs	r2, #60	; 0x3c
 8002762:	4668      	mov	r0, sp
 8002764:	f001 fbb2 	bl	8003ecc <div>
 8002768:	9a01      	ldr	r2, [sp, #4]
 800276a:	68a3      	ldr	r3, [r4, #8]
 800276c:	9900      	ldr	r1, [sp, #0]
 800276e:	2a00      	cmp	r2, #0
 8002770:	440b      	add	r3, r1
 8002772:	60a3      	str	r3, [r4, #8]
 8002774:	bfbb      	ittet	lt
 8002776:	323c      	addlt	r2, #60	; 0x3c
 8002778:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800277c:	6062      	strge	r2, [r4, #4]
 800277e:	6062      	strlt	r2, [r4, #4]
 8002780:	bfb8      	it	lt
 8002782:	60a3      	strlt	r3, [r4, #8]
 8002784:	68a1      	ldr	r1, [r4, #8]
 8002786:	2917      	cmp	r1, #23
 8002788:	d911      	bls.n	80027ae <validate_structure+0x82>
 800278a:	2218      	movs	r2, #24
 800278c:	4668      	mov	r0, sp
 800278e:	f001 fb9d 	bl	8003ecc <div>
 8002792:	9a01      	ldr	r2, [sp, #4]
 8002794:	68e3      	ldr	r3, [r4, #12]
 8002796:	9900      	ldr	r1, [sp, #0]
 8002798:	2a00      	cmp	r2, #0
 800279a:	440b      	add	r3, r1
 800279c:	60e3      	str	r3, [r4, #12]
 800279e:	bfbb      	ittet	lt
 80027a0:	3218      	addlt	r2, #24
 80027a2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80027a6:	60a2      	strge	r2, [r4, #8]
 80027a8:	60a2      	strlt	r2, [r4, #8]
 80027aa:	bfb8      	it	lt
 80027ac:	60e3      	strlt	r3, [r4, #12]
 80027ae:	6921      	ldr	r1, [r4, #16]
 80027b0:	290b      	cmp	r1, #11
 80027b2:	d911      	bls.n	80027d8 <validate_structure+0xac>
 80027b4:	220c      	movs	r2, #12
 80027b6:	4668      	mov	r0, sp
 80027b8:	f001 fb88 	bl	8003ecc <div>
 80027bc:	9a01      	ldr	r2, [sp, #4]
 80027be:	6963      	ldr	r3, [r4, #20]
 80027c0:	9900      	ldr	r1, [sp, #0]
 80027c2:	2a00      	cmp	r2, #0
 80027c4:	440b      	add	r3, r1
 80027c6:	6163      	str	r3, [r4, #20]
 80027c8:	bfbb      	ittet	lt
 80027ca:	320c      	addlt	r2, #12
 80027cc:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80027d0:	6122      	strge	r2, [r4, #16]
 80027d2:	6122      	strlt	r2, [r4, #16]
 80027d4:	bfb8      	it	lt
 80027d6:	6163      	strlt	r3, [r4, #20]
 80027d8:	6963      	ldr	r3, [r4, #20]
 80027da:	0799      	lsls	r1, r3, #30
 80027dc:	d143      	bne.n	8002866 <validate_structure+0x13a>
 80027de:	2164      	movs	r1, #100	; 0x64
 80027e0:	fb93 f2f1 	sdiv	r2, r3, r1
 80027e4:	fb01 3212 	mls	r2, r1, r2, r3
 80027e8:	2a00      	cmp	r2, #0
 80027ea:	d13e      	bne.n	800286a <validate_structure+0x13e>
 80027ec:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80027f0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80027f4:	fb93 f2f1 	sdiv	r2, r3, r1
 80027f8:	fb01 3312 	mls	r3, r1, r2, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	bf14      	ite	ne
 8002800:	231c      	movne	r3, #28
 8002802:	231d      	moveq	r3, #29
 8002804:	68e2      	ldr	r2, [r4, #12]
 8002806:	2a00      	cmp	r2, #0
 8002808:	dd31      	ble.n	800286e <validate_structure+0x142>
 800280a:	4f37      	ldr	r7, [pc, #220]	; (80028e8 <validate_structure+0x1bc>)
 800280c:	2602      	movs	r6, #2
 800280e:	f04f 0e00 	mov.w	lr, #0
 8002812:	2064      	movs	r0, #100	; 0x64
 8002814:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8002818:	6921      	ldr	r1, [r4, #16]
 800281a:	68e2      	ldr	r2, [r4, #12]
 800281c:	2901      	cmp	r1, #1
 800281e:	d05d      	beq.n	80028dc <validate_structure+0x1b0>
 8002820:	f857 c021 	ldr.w	ip, [r7, r1, lsl #2]
 8002824:	4562      	cmp	r2, ip
 8002826:	dd2c      	ble.n	8002882 <validate_structure+0x156>
 8002828:	3101      	adds	r1, #1
 800282a:	eba2 020c 	sub.w	r2, r2, ip
 800282e:	290c      	cmp	r1, #12
 8002830:	60e2      	str	r2, [r4, #12]
 8002832:	6121      	str	r1, [r4, #16]
 8002834:	d1f0      	bne.n	8002818 <validate_structure+0xec>
 8002836:	6963      	ldr	r3, [r4, #20]
 8002838:	f8c4 e010 	str.w	lr, [r4, #16]
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	0791      	lsls	r1, r2, #30
 8002840:	6162      	str	r2, [r4, #20]
 8002842:	d147      	bne.n	80028d4 <validate_structure+0x1a8>
 8002844:	fb92 f1f0 	sdiv	r1, r2, r0
 8002848:	fb00 2211 	mls	r2, r0, r1, r2
 800284c:	2a00      	cmp	r2, #0
 800284e:	d143      	bne.n	80028d8 <validate_structure+0x1ac>
 8002850:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8002854:	fb93 f2f5 	sdiv	r2, r3, r5
 8002858:	fb05 3312 	mls	r3, r5, r2, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	bf14      	ite	ne
 8002860:	231c      	movne	r3, #28
 8002862:	231d      	moveq	r3, #29
 8002864:	e7d8      	b.n	8002818 <validate_structure+0xec>
 8002866:	231c      	movs	r3, #28
 8002868:	e7cc      	b.n	8002804 <validate_structure+0xd8>
 800286a:	231d      	movs	r3, #29
 800286c:	e7ca      	b.n	8002804 <validate_structure+0xd8>
 800286e:	4f1e      	ldr	r7, [pc, #120]	; (80028e8 <validate_structure+0x1bc>)
 8002870:	260b      	movs	r6, #11
 8002872:	2064      	movs	r0, #100	; 0x64
 8002874:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8002878:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800287c:	f1be 0f00 	cmp.w	lr, #0
 8002880:	dd01      	ble.n	8002886 <validate_structure+0x15a>
 8002882:	b003      	add	sp, #12
 8002884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002886:	6921      	ldr	r1, [r4, #16]
 8002888:	3901      	subs	r1, #1
 800288a:	6121      	str	r1, [r4, #16]
 800288c:	3101      	adds	r1, #1
 800288e:	d114      	bne.n	80028ba <validate_structure+0x18e>
 8002890:	6963      	ldr	r3, [r4, #20]
 8002892:	6126      	str	r6, [r4, #16]
 8002894:	1e59      	subs	r1, r3, #1
 8002896:	078a      	lsls	r2, r1, #30
 8002898:	6161      	str	r1, [r4, #20]
 800289a:	d117      	bne.n	80028cc <validate_structure+0x1a0>
 800289c:	fb91 f2f0 	sdiv	r2, r1, r0
 80028a0:	fb00 1112 	mls	r1, r0, r2, r1
 80028a4:	b9a1      	cbnz	r1, 80028d0 <validate_structure+0x1a4>
 80028a6:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80028aa:	fb93 f2f5 	sdiv	r2, r3, r5
 80028ae:	fb05 3312 	mls	r3, r5, r2, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	bf14      	ite	ne
 80028b6:	231c      	movne	r3, #28
 80028b8:	231d      	moveq	r3, #29
 80028ba:	6922      	ldr	r2, [r4, #16]
 80028bc:	2a01      	cmp	r2, #1
 80028be:	bf14      	ite	ne
 80028c0:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 80028c4:	461a      	moveq	r2, r3
 80028c6:	4472      	add	r2, lr
 80028c8:	60e2      	str	r2, [r4, #12]
 80028ca:	e7d5      	b.n	8002878 <validate_structure+0x14c>
 80028cc:	231c      	movs	r3, #28
 80028ce:	e7f4      	b.n	80028ba <validate_structure+0x18e>
 80028d0:	231d      	movs	r3, #29
 80028d2:	e7f2      	b.n	80028ba <validate_structure+0x18e>
 80028d4:	231c      	movs	r3, #28
 80028d6:	e79f      	b.n	8002818 <validate_structure+0xec>
 80028d8:	231d      	movs	r3, #29
 80028da:	e79d      	b.n	8002818 <validate_structure+0xec>
 80028dc:	4293      	cmp	r3, r2
 80028de:	dad0      	bge.n	8002882 <validate_structure+0x156>
 80028e0:	1ad2      	subs	r2, r2, r3
 80028e2:	60e2      	str	r2, [r4, #12]
 80028e4:	6126      	str	r6, [r4, #16]
 80028e6:	e797      	b.n	8002818 <validate_structure+0xec>
 80028e8:	08005a14 	.word	0x08005a14

080028ec <mktime>:
 80028ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028f0:	4681      	mov	r9, r0
 80028f2:	f001 fe77 	bl	80045e4 <__gettzinfo>
 80028f6:	4680      	mov	r8, r0
 80028f8:	4648      	mov	r0, r9
 80028fa:	f7ff ff17 	bl	800272c <validate_structure>
 80028fe:	e899 0081 	ldmia.w	r9, {r0, r7}
 8002902:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8002906:	4ab4      	ldr	r2, [pc, #720]	; (8002bd8 <mktime+0x2ec>)
 8002908:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800290c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002910:	253c      	movs	r5, #60	; 0x3c
 8002912:	fb05 0707 	mla	r7, r5, r7, r0
 8002916:	f8d9 0008 	ldr.w	r0, [r9, #8]
 800291a:	f44f 6561 	mov.w	r5, #3600	; 0xe10
 800291e:	3c01      	subs	r4, #1
 8002920:	2b01      	cmp	r3, #1
 8002922:	fb05 7000 	mla	r0, r5, r0, r7
 8002926:	4414      	add	r4, r2
 8002928:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800292c:	dd11      	ble.n	8002952 <mktime+0x66>
 800292e:	0799      	lsls	r1, r3, #30
 8002930:	d10f      	bne.n	8002952 <mktime+0x66>
 8002932:	2164      	movs	r1, #100	; 0x64
 8002934:	fb93 f2f1 	sdiv	r2, r3, r1
 8002938:	fb01 3212 	mls	r2, r1, r2, r3
 800293c:	b942      	cbnz	r2, 8002950 <mktime+0x64>
 800293e:	f203 756c 	addw	r5, r3, #1900	; 0x76c
 8002942:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002946:	fb95 f2f1 	sdiv	r2, r5, r1
 800294a:	fb01 5212 	mls	r2, r1, r2, r5
 800294e:	b902      	cbnz	r2, 8002952 <mktime+0x66>
 8002950:	3401      	adds	r4, #1
 8002952:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
 8002956:	3210      	adds	r2, #16
 8002958:	f644 6120 	movw	r1, #20000	; 0x4e20
 800295c:	428a      	cmp	r2, r1
 800295e:	f8c9 401c 	str.w	r4, [r9, #28]
 8002962:	f200 812d 	bhi.w	8002bc0 <mktime+0x2d4>
 8002966:	2b46      	cmp	r3, #70	; 0x46
 8002968:	dd70      	ble.n	8002a4c <mktime+0x160>
 800296a:	2546      	movs	r5, #70	; 0x46
 800296c:	f240 176d 	movw	r7, #365	; 0x16d
 8002970:	2164      	movs	r1, #100	; 0x64
 8002972:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8002976:	07aa      	lsls	r2, r5, #30
 8002978:	d162      	bne.n	8002a40 <mktime+0x154>
 800297a:	fb95 f2f1 	sdiv	r2, r5, r1
 800297e:	fb01 5212 	mls	r2, r1, r2, r5
 8002982:	2a00      	cmp	r2, #0
 8002984:	d15f      	bne.n	8002a46 <mktime+0x15a>
 8002986:	f205 7e6c 	addw	lr, r5, #1900	; 0x76c
 800298a:	fb9e f2f6 	sdiv	r2, lr, r6
 800298e:	fb06 e212 	mls	r2, r6, r2, lr
 8002992:	2a00      	cmp	r2, #0
 8002994:	bf14      	ite	ne
 8002996:	463a      	movne	r2, r7
 8002998:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800299c:	3501      	adds	r5, #1
 800299e:	42ab      	cmp	r3, r5
 80029a0:	4414      	add	r4, r2
 80029a2:	d1e8      	bne.n	8002976 <mktime+0x8a>
 80029a4:	4f8d      	ldr	r7, [pc, #564]	; (8002bdc <mktime+0x2f0>)
 80029a6:	fb07 0704 	mla	r7, r7, r4, r0
 80029aa:	f001 f905 	bl	8003bb8 <__tz_lock>
 80029ae:	f001 f905 	bl	8003bbc <_tzset_unlocked>
 80029b2:	4b8b      	ldr	r3, [pc, #556]	; (8002be0 <mktime+0x2f4>)
 80029b4:	681e      	ldr	r6, [r3, #0]
 80029b6:	2e00      	cmp	r6, #0
 80029b8:	f000 810a 	beq.w	8002bd0 <mktime+0x2e4>
 80029bc:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80029c0:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	bfa8      	it	ge
 80029c8:	2301      	movge	r3, #1
 80029ca:	469a      	mov	sl, r3
 80029cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80029d0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80029d4:	4298      	cmp	r0, r3
 80029d6:	d17c      	bne.n	8002ad2 <mktime+0x1e6>
 80029d8:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 80029dc:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80029e0:	f8d8 003c 	ldr.w	r0, [r8, #60]	; 0x3c
 80029e4:	f8d8 101c 	ldr.w	r1, [r8, #28]
 80029e8:	1ad6      	subs	r6, r2, r3
 80029ea:	42b7      	cmp	r7, r6
 80029ec:	eba1 0100 	sub.w	r1, r1, r0
 80029f0:	da76      	bge.n	8002ae0 <mktime+0x1f4>
 80029f2:	f8d8 2000 	ldr.w	r2, [r8]
 80029f6:	2a00      	cmp	r2, #0
 80029f8:	d076      	beq.n	8002ae8 <mktime+0x1fc>
 80029fa:	428f      	cmp	r7, r1
 80029fc:	f2c0 80e3 	blt.w	8002bc6 <mktime+0x2da>
 8002a00:	42b7      	cmp	r7, r6
 8002a02:	bfac      	ite	ge
 8002a04:	2600      	movge	r6, #0
 8002a06:	2601      	movlt	r6, #1
 8002a08:	f1ba 0f00 	cmp.w	sl, #0
 8002a0c:	da72      	bge.n	8002af4 <mktime+0x208>
 8002a0e:	2e01      	cmp	r6, #1
 8002a10:	f040 80de 	bne.w	8002bd0 <mktime+0x2e4>
 8002a14:	f8d8 503c 	ldr.w	r5, [r8, #60]	; 0x3c
 8002a18:	2601      	movs	r6, #1
 8002a1a:	443d      	add	r5, r7
 8002a1c:	f001 f8cd 	bl	8003bba <__tz_unlock>
 8002a20:	3404      	adds	r4, #4
 8002a22:	2307      	movs	r3, #7
 8002a24:	fb94 f3f3 	sdiv	r3, r4, r3
 8002a28:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8002a2c:	1ae4      	subs	r4, r4, r3
 8002a2e:	bf48      	it	mi
 8002a30:	3407      	addmi	r4, #7
 8002a32:	f8c9 6020 	str.w	r6, [r9, #32]
 8002a36:	f8c9 4018 	str.w	r4, [r9, #24]
 8002a3a:	4628      	mov	r0, r5
 8002a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a40:	f240 126d 	movw	r2, #365	; 0x16d
 8002a44:	e7aa      	b.n	800299c <mktime+0xb0>
 8002a46:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8002a4a:	e7a7      	b.n	800299c <mktime+0xb0>
 8002a4c:	d01e      	beq.n	8002a8c <mktime+0x1a0>
 8002a4e:	2245      	movs	r2, #69	; 0x45
 8002a50:	f240 176d 	movw	r7, #365	; 0x16d
 8002a54:	2564      	movs	r5, #100	; 0x64
 8002a56:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	dc18      	bgt.n	8002a90 <mktime+0x1a4>
 8002a5e:	079d      	lsls	r5, r3, #30
 8002a60:	d131      	bne.n	8002ac6 <mktime+0x1da>
 8002a62:	2164      	movs	r1, #100	; 0x64
 8002a64:	fb93 f2f1 	sdiv	r2, r3, r1
 8002a68:	fb01 3212 	mls	r2, r1, r2, r3
 8002a6c:	bb72      	cbnz	r2, 8002acc <mktime+0x1e0>
 8002a6e:	f203 756c 	addw	r5, r3, #1900	; 0x76c
 8002a72:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002a76:	fb95 f2f1 	sdiv	r2, r5, r1
 8002a7a:	fb01 5212 	mls	r2, r1, r2, r5
 8002a7e:	2a00      	cmp	r2, #0
 8002a80:	f240 126d 	movw	r2, #365	; 0x16d
 8002a84:	bf08      	it	eq
 8002a86:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8002a8a:	1aa4      	subs	r4, r4, r2
 8002a8c:	461d      	mov	r5, r3
 8002a8e:	e789      	b.n	80029a4 <mktime+0xb8>
 8002a90:	0791      	lsls	r1, r2, #30
 8002a92:	d112      	bne.n	8002aba <mktime+0x1ce>
 8002a94:	fb92 f1f5 	sdiv	r1, r2, r5
 8002a98:	fb05 2111 	mls	r1, r5, r1, r2
 8002a9c:	b981      	cbnz	r1, 8002ac0 <mktime+0x1d4>
 8002a9e:	f202 7e6c 	addw	lr, r2, #1900	; 0x76c
 8002aa2:	fb9e f1f6 	sdiv	r1, lr, r6
 8002aa6:	fb06 e111 	mls	r1, r6, r1, lr
 8002aaa:	2900      	cmp	r1, #0
 8002aac:	bf14      	ite	ne
 8002aae:	4639      	movne	r1, r7
 8002ab0:	f44f 71b7 	moveq.w	r1, #366	; 0x16e
 8002ab4:	1a64      	subs	r4, r4, r1
 8002ab6:	3a01      	subs	r2, #1
 8002ab8:	e7cf      	b.n	8002a5a <mktime+0x16e>
 8002aba:	f240 116d 	movw	r1, #365	; 0x16d
 8002abe:	e7f9      	b.n	8002ab4 <mktime+0x1c8>
 8002ac0:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8002ac4:	e7f6      	b.n	8002ab4 <mktime+0x1c8>
 8002ac6:	f240 126d 	movw	r2, #365	; 0x16d
 8002aca:	e7de      	b.n	8002a8a <mktime+0x19e>
 8002acc:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8002ad0:	e7db      	b.n	8002a8a <mktime+0x19e>
 8002ad2:	f000 ffc9 	bl	8003a68 <__tzcalc_limits>
 8002ad6:	2800      	cmp	r0, #0
 8002ad8:	f47f af7e 	bne.w	80029d8 <mktime+0xec>
 8002adc:	4656      	mov	r6, sl
 8002ade:	e796      	b.n	8002a0e <mktime+0x122>
 8002ae0:	1a12      	subs	r2, r2, r0
 8002ae2:	4297      	cmp	r7, r2
 8002ae4:	dbfa      	blt.n	8002adc <mktime+0x1f0>
 8002ae6:	e784      	b.n	80029f2 <mktime+0x106>
 8002ae8:	428f      	cmp	r7, r1
 8002aea:	db89      	blt.n	8002a00 <mktime+0x114>
 8002aec:	f1ba 0f00 	cmp.w	sl, #0
 8002af0:	db90      	blt.n	8002a14 <mktime+0x128>
 8002af2:	2601      	movs	r6, #1
 8002af4:	ea8a 0a06 	eor.w	sl, sl, r6
 8002af8:	f1ba 0f01 	cmp.w	sl, #1
 8002afc:	d187      	bne.n	8002a0e <mktime+0x122>
 8002afe:	1a1b      	subs	r3, r3, r0
 8002b00:	b906      	cbnz	r6, 8002b04 <mktime+0x218>
 8002b02:	425b      	negs	r3, r3
 8002b04:	f8d9 2000 	ldr.w	r2, [r9]
 8002b08:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 8002b0c:	441a      	add	r2, r3
 8002b0e:	f8c9 2000 	str.w	r2, [r9]
 8002b12:	4648      	mov	r0, r9
 8002b14:	441f      	add	r7, r3
 8002b16:	f7ff fe09 	bl	800272c <validate_structure>
 8002b1a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8002b1e:	ebb3 030a 	subs.w	r3, r3, sl
 8002b22:	f43f af74 	beq.w	8002a0e <mktime+0x122>
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	dc21      	bgt.n	8002b6e <mktime+0x282>
 8002b2a:	1c98      	adds	r0, r3, #2
 8002b2c:	bfd8      	it	le
 8002b2e:	2301      	movle	r3, #1
 8002b30:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8002b34:	441c      	add	r4, r3
 8002b36:	189b      	adds	r3, r3, r2
 8002b38:	d522      	bpl.n	8002b80 <mktime+0x294>
 8002b3a:	1e6a      	subs	r2, r5, #1
 8002b3c:	0791      	lsls	r1, r2, #30
 8002b3e:	d119      	bne.n	8002b74 <mktime+0x288>
 8002b40:	2164      	movs	r1, #100	; 0x64
 8002b42:	fb92 f3f1 	sdiv	r3, r2, r1
 8002b46:	fb01 2313 	mls	r3, r1, r3, r2
 8002b4a:	b9b3      	cbnz	r3, 8002b7a <mktime+0x28e>
 8002b4c:	f205 756b 	addw	r5, r5, #1899	; 0x76b
 8002b50:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002b54:	fb95 f3f2 	sdiv	r3, r5, r2
 8002b58:	fb02 5513 	mls	r5, r2, r3, r5
 8002b5c:	2d00      	cmp	r5, #0
 8002b5e:	f240 136d 	movw	r3, #365	; 0x16d
 8002b62:	bf18      	it	ne
 8002b64:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8002b68:	f8c9 301c 	str.w	r3, [r9, #28]
 8002b6c:	e74f      	b.n	8002a0e <mktime+0x122>
 8002b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b72:	e7dd      	b.n	8002b30 <mktime+0x244>
 8002b74:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8002b78:	e7f6      	b.n	8002b68 <mktime+0x27c>
 8002b7a:	f240 136d 	movw	r3, #365	; 0x16d
 8002b7e:	e7f3      	b.n	8002b68 <mktime+0x27c>
 8002b80:	07aa      	lsls	r2, r5, #30
 8002b82:	d117      	bne.n	8002bb4 <mktime+0x2c8>
 8002b84:	2164      	movs	r1, #100	; 0x64
 8002b86:	fb95 f2f1 	sdiv	r2, r5, r1
 8002b8a:	fb01 5212 	mls	r2, r1, r2, r5
 8002b8e:	b9a2      	cbnz	r2, 8002bba <mktime+0x2ce>
 8002b90:	f205 756c 	addw	r5, r5, #1900	; 0x76c
 8002b94:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002b98:	fb95 f2f1 	sdiv	r2, r5, r1
 8002b9c:	fb01 5512 	mls	r5, r1, r2, r5
 8002ba0:	2d00      	cmp	r5, #0
 8002ba2:	f240 126d 	movw	r2, #365	; 0x16d
 8002ba6:	bf08      	it	eq
 8002ba8:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8002bac:	429a      	cmp	r2, r3
 8002bae:	bfd8      	it	le
 8002bb0:	1a9b      	suble	r3, r3, r2
 8002bb2:	e7d9      	b.n	8002b68 <mktime+0x27c>
 8002bb4:	f240 126d 	movw	r2, #365	; 0x16d
 8002bb8:	e7f8      	b.n	8002bac <mktime+0x2c0>
 8002bba:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8002bbe:	e7f5      	b.n	8002bac <mktime+0x2c0>
 8002bc0:	f04f 35ff 	mov.w	r5, #4294967295
 8002bc4:	e739      	b.n	8002a3a <mktime+0x14e>
 8002bc6:	f1ba 0f00 	cmp.w	sl, #0
 8002bca:	f04f 0600 	mov.w	r6, #0
 8002bce:	da91      	bge.n	8002af4 <mktime+0x208>
 8002bd0:	f8d8 5020 	ldr.w	r5, [r8, #32]
 8002bd4:	443d      	add	r5, r7
 8002bd6:	e721      	b.n	8002a1c <mktime+0x130>
 8002bd8:	08005a44 	.word	0x08005a44
 8002bdc:	00015180 	.word	0x00015180
 8002be0:	20000274 	.word	0x20000274

08002be4 <_free_r>:
 8002be4:	b538      	push	{r3, r4, r5, lr}
 8002be6:	4605      	mov	r5, r0
 8002be8:	2900      	cmp	r1, #0
 8002bea:	d045      	beq.n	8002c78 <_free_r+0x94>
 8002bec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bf0:	1f0c      	subs	r4, r1, #4
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	bfb8      	it	lt
 8002bf6:	18e4      	addlt	r4, r4, r3
 8002bf8:	f001 fdc3 	bl	8004782 <__malloc_lock>
 8002bfc:	4a1f      	ldr	r2, [pc, #124]	; (8002c7c <_free_r+0x98>)
 8002bfe:	6813      	ldr	r3, [r2, #0]
 8002c00:	4610      	mov	r0, r2
 8002c02:	b933      	cbnz	r3, 8002c12 <_free_r+0x2e>
 8002c04:	6063      	str	r3, [r4, #4]
 8002c06:	6014      	str	r4, [r2, #0]
 8002c08:	4628      	mov	r0, r5
 8002c0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c0e:	f001 bdb9 	b.w	8004784 <__malloc_unlock>
 8002c12:	42a3      	cmp	r3, r4
 8002c14:	d90c      	bls.n	8002c30 <_free_r+0x4c>
 8002c16:	6821      	ldr	r1, [r4, #0]
 8002c18:	1862      	adds	r2, r4, r1
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	bf04      	itt	eq
 8002c1e:	681a      	ldreq	r2, [r3, #0]
 8002c20:	685b      	ldreq	r3, [r3, #4]
 8002c22:	6063      	str	r3, [r4, #4]
 8002c24:	bf04      	itt	eq
 8002c26:	1852      	addeq	r2, r2, r1
 8002c28:	6022      	streq	r2, [r4, #0]
 8002c2a:	6004      	str	r4, [r0, #0]
 8002c2c:	e7ec      	b.n	8002c08 <_free_r+0x24>
 8002c2e:	4613      	mov	r3, r2
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	b10a      	cbz	r2, 8002c38 <_free_r+0x54>
 8002c34:	42a2      	cmp	r2, r4
 8002c36:	d9fa      	bls.n	8002c2e <_free_r+0x4a>
 8002c38:	6819      	ldr	r1, [r3, #0]
 8002c3a:	1858      	adds	r0, r3, r1
 8002c3c:	42a0      	cmp	r0, r4
 8002c3e:	d10b      	bne.n	8002c58 <_free_r+0x74>
 8002c40:	6820      	ldr	r0, [r4, #0]
 8002c42:	4401      	add	r1, r0
 8002c44:	1858      	adds	r0, r3, r1
 8002c46:	4282      	cmp	r2, r0
 8002c48:	6019      	str	r1, [r3, #0]
 8002c4a:	d1dd      	bne.n	8002c08 <_free_r+0x24>
 8002c4c:	6810      	ldr	r0, [r2, #0]
 8002c4e:	6852      	ldr	r2, [r2, #4]
 8002c50:	605a      	str	r2, [r3, #4]
 8002c52:	4401      	add	r1, r0
 8002c54:	6019      	str	r1, [r3, #0]
 8002c56:	e7d7      	b.n	8002c08 <_free_r+0x24>
 8002c58:	d902      	bls.n	8002c60 <_free_r+0x7c>
 8002c5a:	230c      	movs	r3, #12
 8002c5c:	602b      	str	r3, [r5, #0]
 8002c5e:	e7d3      	b.n	8002c08 <_free_r+0x24>
 8002c60:	6820      	ldr	r0, [r4, #0]
 8002c62:	1821      	adds	r1, r4, r0
 8002c64:	428a      	cmp	r2, r1
 8002c66:	bf04      	itt	eq
 8002c68:	6811      	ldreq	r1, [r2, #0]
 8002c6a:	6852      	ldreq	r2, [r2, #4]
 8002c6c:	6062      	str	r2, [r4, #4]
 8002c6e:	bf04      	itt	eq
 8002c70:	1809      	addeq	r1, r1, r0
 8002c72:	6021      	streq	r1, [r4, #0]
 8002c74:	605c      	str	r4, [r3, #4]
 8002c76:	e7c7      	b.n	8002c08 <_free_r+0x24>
 8002c78:	bd38      	pop	{r3, r4, r5, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000250 	.word	0x20000250

08002c80 <_malloc_r>:
 8002c80:	b570      	push	{r4, r5, r6, lr}
 8002c82:	1ccd      	adds	r5, r1, #3
 8002c84:	f025 0503 	bic.w	r5, r5, #3
 8002c88:	3508      	adds	r5, #8
 8002c8a:	2d0c      	cmp	r5, #12
 8002c8c:	bf38      	it	cc
 8002c8e:	250c      	movcc	r5, #12
 8002c90:	2d00      	cmp	r5, #0
 8002c92:	4606      	mov	r6, r0
 8002c94:	db01      	blt.n	8002c9a <_malloc_r+0x1a>
 8002c96:	42a9      	cmp	r1, r5
 8002c98:	d903      	bls.n	8002ca2 <_malloc_r+0x22>
 8002c9a:	230c      	movs	r3, #12
 8002c9c:	6033      	str	r3, [r6, #0]
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	bd70      	pop	{r4, r5, r6, pc}
 8002ca2:	f001 fd6e 	bl	8004782 <__malloc_lock>
 8002ca6:	4a23      	ldr	r2, [pc, #140]	; (8002d34 <_malloc_r+0xb4>)
 8002ca8:	6814      	ldr	r4, [r2, #0]
 8002caa:	4621      	mov	r1, r4
 8002cac:	b991      	cbnz	r1, 8002cd4 <_malloc_r+0x54>
 8002cae:	4c22      	ldr	r4, [pc, #136]	; (8002d38 <_malloc_r+0xb8>)
 8002cb0:	6823      	ldr	r3, [r4, #0]
 8002cb2:	b91b      	cbnz	r3, 8002cbc <_malloc_r+0x3c>
 8002cb4:	4630      	mov	r0, r6
 8002cb6:	f000 f841 	bl	8002d3c <_sbrk_r>
 8002cba:	6020      	str	r0, [r4, #0]
 8002cbc:	4629      	mov	r1, r5
 8002cbe:	4630      	mov	r0, r6
 8002cc0:	f000 f83c 	bl	8002d3c <_sbrk_r>
 8002cc4:	1c43      	adds	r3, r0, #1
 8002cc6:	d126      	bne.n	8002d16 <_malloc_r+0x96>
 8002cc8:	230c      	movs	r3, #12
 8002cca:	6033      	str	r3, [r6, #0]
 8002ccc:	4630      	mov	r0, r6
 8002cce:	f001 fd59 	bl	8004784 <__malloc_unlock>
 8002cd2:	e7e4      	b.n	8002c9e <_malloc_r+0x1e>
 8002cd4:	680b      	ldr	r3, [r1, #0]
 8002cd6:	1b5b      	subs	r3, r3, r5
 8002cd8:	d41a      	bmi.n	8002d10 <_malloc_r+0x90>
 8002cda:	2b0b      	cmp	r3, #11
 8002cdc:	d90f      	bls.n	8002cfe <_malloc_r+0x7e>
 8002cde:	600b      	str	r3, [r1, #0]
 8002ce0:	50cd      	str	r5, [r1, r3]
 8002ce2:	18cc      	adds	r4, r1, r3
 8002ce4:	4630      	mov	r0, r6
 8002ce6:	f001 fd4d 	bl	8004784 <__malloc_unlock>
 8002cea:	f104 000b 	add.w	r0, r4, #11
 8002cee:	1d23      	adds	r3, r4, #4
 8002cf0:	f020 0007 	bic.w	r0, r0, #7
 8002cf4:	1ac3      	subs	r3, r0, r3
 8002cf6:	d01b      	beq.n	8002d30 <_malloc_r+0xb0>
 8002cf8:	425a      	negs	r2, r3
 8002cfa:	50e2      	str	r2, [r4, r3]
 8002cfc:	bd70      	pop	{r4, r5, r6, pc}
 8002cfe:	428c      	cmp	r4, r1
 8002d00:	bf0d      	iteet	eq
 8002d02:	6863      	ldreq	r3, [r4, #4]
 8002d04:	684b      	ldrne	r3, [r1, #4]
 8002d06:	6063      	strne	r3, [r4, #4]
 8002d08:	6013      	streq	r3, [r2, #0]
 8002d0a:	bf18      	it	ne
 8002d0c:	460c      	movne	r4, r1
 8002d0e:	e7e9      	b.n	8002ce4 <_malloc_r+0x64>
 8002d10:	460c      	mov	r4, r1
 8002d12:	6849      	ldr	r1, [r1, #4]
 8002d14:	e7ca      	b.n	8002cac <_malloc_r+0x2c>
 8002d16:	1cc4      	adds	r4, r0, #3
 8002d18:	f024 0403 	bic.w	r4, r4, #3
 8002d1c:	42a0      	cmp	r0, r4
 8002d1e:	d005      	beq.n	8002d2c <_malloc_r+0xac>
 8002d20:	1a21      	subs	r1, r4, r0
 8002d22:	4630      	mov	r0, r6
 8002d24:	f000 f80a 	bl	8002d3c <_sbrk_r>
 8002d28:	3001      	adds	r0, #1
 8002d2a:	d0cd      	beq.n	8002cc8 <_malloc_r+0x48>
 8002d2c:	6025      	str	r5, [r4, #0]
 8002d2e:	e7d9      	b.n	8002ce4 <_malloc_r+0x64>
 8002d30:	bd70      	pop	{r4, r5, r6, pc}
 8002d32:	bf00      	nop
 8002d34:	20000250 	.word	0x20000250
 8002d38:	20000254 	.word	0x20000254

08002d3c <_sbrk_r>:
 8002d3c:	b538      	push	{r3, r4, r5, lr}
 8002d3e:	4c06      	ldr	r4, [pc, #24]	; (8002d58 <_sbrk_r+0x1c>)
 8002d40:	2300      	movs	r3, #0
 8002d42:	4605      	mov	r5, r0
 8002d44:	4608      	mov	r0, r1
 8002d46:	6023      	str	r3, [r4, #0]
 8002d48:	f7ff fae2 	bl	8002310 <_sbrk>
 8002d4c:	1c43      	adds	r3, r0, #1
 8002d4e:	d102      	bne.n	8002d56 <_sbrk_r+0x1a>
 8002d50:	6823      	ldr	r3, [r4, #0]
 8002d52:	b103      	cbz	r3, 8002d56 <_sbrk_r+0x1a>
 8002d54:	602b      	str	r3, [r5, #0]
 8002d56:	bd38      	pop	{r3, r4, r5, pc}
 8002d58:	20001240 	.word	0x20001240

08002d5c <sulp>:
 8002d5c:	b570      	push	{r4, r5, r6, lr}
 8002d5e:	4604      	mov	r4, r0
 8002d60:	460d      	mov	r5, r1
 8002d62:	ec45 4b10 	vmov	d0, r4, r5
 8002d66:	4616      	mov	r6, r2
 8002d68:	f001 ffce 	bl	8004d08 <__ulp>
 8002d6c:	ec51 0b10 	vmov	r0, r1, d0
 8002d70:	b17e      	cbz	r6, 8002d92 <sulp+0x36>
 8002d72:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8002d76:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	dd09      	ble.n	8002d92 <sulp+0x36>
 8002d7e:	051b      	lsls	r3, r3, #20
 8002d80:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8002d84:	2400      	movs	r4, #0
 8002d86:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8002d8a:	4622      	mov	r2, r4
 8002d8c:	462b      	mov	r3, r5
 8002d8e:	f7fd fc3f 	bl	8000610 <__aeabi_dmul>
 8002d92:	bd70      	pop	{r4, r5, r6, pc}
 8002d94:	0000      	movs	r0, r0
	...

08002d98 <_strtod_l>:
 8002d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d9c:	b09f      	sub	sp, #124	; 0x7c
 8002d9e:	4698      	mov	r8, r3
 8002da0:	9004      	str	r0, [sp, #16]
 8002da2:	2300      	movs	r3, #0
 8002da4:	4640      	mov	r0, r8
 8002da6:	460c      	mov	r4, r1
 8002da8:	9215      	str	r2, [sp, #84]	; 0x54
 8002daa:	931a      	str	r3, [sp, #104]	; 0x68
 8002dac:	f001 fcca 	bl	8004744 <__localeconv_l>
 8002db0:	4607      	mov	r7, r0
 8002db2:	6800      	ldr	r0, [r0, #0]
 8002db4:	f7fd fa16 	bl	80001e4 <strlen>
 8002db8:	f04f 0a00 	mov.w	sl, #0
 8002dbc:	4605      	mov	r5, r0
 8002dbe:	f04f 0b00 	mov.w	fp, #0
 8002dc2:	9419      	str	r4, [sp, #100]	; 0x64
 8002dc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002dc6:	781a      	ldrb	r2, [r3, #0]
 8002dc8:	2a0d      	cmp	r2, #13
 8002dca:	d833      	bhi.n	8002e34 <_strtod_l+0x9c>
 8002dcc:	2a09      	cmp	r2, #9
 8002dce:	d237      	bcs.n	8002e40 <_strtod_l+0xa8>
 8002dd0:	2a00      	cmp	r2, #0
 8002dd2:	d03f      	beq.n	8002e54 <_strtod_l+0xbc>
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8002dd8:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8002dda:	7833      	ldrb	r3, [r6, #0]
 8002ddc:	2b30      	cmp	r3, #48	; 0x30
 8002dde:	f040 8103 	bne.w	8002fe8 <_strtod_l+0x250>
 8002de2:	7873      	ldrb	r3, [r6, #1]
 8002de4:	2b58      	cmp	r3, #88	; 0x58
 8002de6:	d001      	beq.n	8002dec <_strtod_l+0x54>
 8002de8:	2b78      	cmp	r3, #120	; 0x78
 8002dea:	d16b      	bne.n	8002ec4 <_strtod_l+0x12c>
 8002dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dee:	9301      	str	r3, [sp, #4]
 8002df0:	ab1a      	add	r3, sp, #104	; 0x68
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	f8cd 8008 	str.w	r8, [sp, #8]
 8002df8:	ab1b      	add	r3, sp, #108	; 0x6c
 8002dfa:	4aad      	ldr	r2, [pc, #692]	; (80030b0 <_strtod_l+0x318>)
 8002dfc:	9804      	ldr	r0, [sp, #16]
 8002dfe:	a919      	add	r1, sp, #100	; 0x64
 8002e00:	f001 f8c2 	bl	8003f88 <__gethex>
 8002e04:	f010 0407 	ands.w	r4, r0, #7
 8002e08:	4605      	mov	r5, r0
 8002e0a:	d005      	beq.n	8002e18 <_strtod_l+0x80>
 8002e0c:	2c06      	cmp	r4, #6
 8002e0e:	d12b      	bne.n	8002e68 <_strtod_l+0xd0>
 8002e10:	3601      	adds	r6, #1
 8002e12:	2300      	movs	r3, #0
 8002e14:	9619      	str	r6, [sp, #100]	; 0x64
 8002e16:	9309      	str	r3, [sp, #36]	; 0x24
 8002e18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f040 8590 	bne.w	8003940 <_strtod_l+0xba8>
 8002e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e22:	b1e3      	cbz	r3, 8002e5e <_strtod_l+0xc6>
 8002e24:	4652      	mov	r2, sl
 8002e26:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8002e2a:	ec43 2b10 	vmov	d0, r2, r3
 8002e2e:	b01f      	add	sp, #124	; 0x7c
 8002e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e34:	2a2b      	cmp	r2, #43	; 0x2b
 8002e36:	d006      	beq.n	8002e46 <_strtod_l+0xae>
 8002e38:	2a2d      	cmp	r2, #45	; 0x2d
 8002e3a:	d013      	beq.n	8002e64 <_strtod_l+0xcc>
 8002e3c:	2a20      	cmp	r2, #32
 8002e3e:	d1c9      	bne.n	8002dd4 <_strtod_l+0x3c>
 8002e40:	3301      	adds	r3, #1
 8002e42:	9319      	str	r3, [sp, #100]	; 0x64
 8002e44:	e7be      	b.n	8002dc4 <_strtod_l+0x2c>
 8002e46:	2200      	movs	r2, #0
 8002e48:	9209      	str	r2, [sp, #36]	; 0x24
 8002e4a:	1c5a      	adds	r2, r3, #1
 8002e4c:	9219      	str	r2, [sp, #100]	; 0x64
 8002e4e:	785b      	ldrb	r3, [r3, #1]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1c1      	bne.n	8002dd8 <_strtod_l+0x40>
 8002e54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002e56:	9419      	str	r4, [sp, #100]	; 0x64
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f040 856f 	bne.w	800393c <_strtod_l+0xba4>
 8002e5e:	4652      	mov	r2, sl
 8002e60:	465b      	mov	r3, fp
 8002e62:	e7e2      	b.n	8002e2a <_strtod_l+0x92>
 8002e64:	2201      	movs	r2, #1
 8002e66:	e7ef      	b.n	8002e48 <_strtod_l+0xb0>
 8002e68:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8002e6a:	b13a      	cbz	r2, 8002e7c <_strtod_l+0xe4>
 8002e6c:	2135      	movs	r1, #53	; 0x35
 8002e6e:	a81c      	add	r0, sp, #112	; 0x70
 8002e70:	f002 f83b 	bl	8004eea <__copybits>
 8002e74:	991a      	ldr	r1, [sp, #104]	; 0x68
 8002e76:	9804      	ldr	r0, [sp, #16]
 8002e78:	f001 fcb9 	bl	80047ee <_Bfree>
 8002e7c:	3c01      	subs	r4, #1
 8002e7e:	2c04      	cmp	r4, #4
 8002e80:	d808      	bhi.n	8002e94 <_strtod_l+0xfc>
 8002e82:	e8df f004 	tbb	[pc, r4]
 8002e86:	030c      	.short	0x030c
 8002e88:	1a17      	.short	0x1a17
 8002e8a:	0c          	.byte	0x0c
 8002e8b:	00          	.byte	0x00
 8002e8c:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8002e90:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8002e94:	0729      	lsls	r1, r5, #28
 8002e96:	d5bf      	bpl.n	8002e18 <_strtod_l+0x80>
 8002e98:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8002e9c:	e7bc      	b.n	8002e18 <_strtod_l+0x80>
 8002e9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002ea0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8002ea2:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8002ea6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002eaa:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8002eae:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8002eb2:	e7ef      	b.n	8002e94 <_strtod_l+0xfc>
 8002eb4:	f8df b204 	ldr.w	fp, [pc, #516]	; 80030bc <_strtod_l+0x324>
 8002eb8:	e7ec      	b.n	8002e94 <_strtod_l+0xfc>
 8002eba:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8002ebe:	f04f 3aff 	mov.w	sl, #4294967295
 8002ec2:	e7e7      	b.n	8002e94 <_strtod_l+0xfc>
 8002ec4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002ec6:	1c5a      	adds	r2, r3, #1
 8002ec8:	9219      	str	r2, [sp, #100]	; 0x64
 8002eca:	785b      	ldrb	r3, [r3, #1]
 8002ecc:	2b30      	cmp	r3, #48	; 0x30
 8002ece:	d0f9      	beq.n	8002ec4 <_strtod_l+0x12c>
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0a1      	beq.n	8002e18 <_strtod_l+0x80>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	f04f 0900 	mov.w	r9, #0
 8002eda:	9308      	str	r3, [sp, #32]
 8002edc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002ede:	930a      	str	r3, [sp, #40]	; 0x28
 8002ee0:	f8cd 901c 	str.w	r9, [sp, #28]
 8002ee4:	f8cd 9018 	str.w	r9, [sp, #24]
 8002ee8:	220a      	movs	r2, #10
 8002eea:	9819      	ldr	r0, [sp, #100]	; 0x64
 8002eec:	7806      	ldrb	r6, [r0, #0]
 8002eee:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8002ef2:	b2d9      	uxtb	r1, r3
 8002ef4:	2909      	cmp	r1, #9
 8002ef6:	d979      	bls.n	8002fec <_strtod_l+0x254>
 8002ef8:	462a      	mov	r2, r5
 8002efa:	6839      	ldr	r1, [r7, #0]
 8002efc:	f002 f872 	bl	8004fe4 <strncmp>
 8002f00:	2800      	cmp	r0, #0
 8002f02:	f000 8082 	beq.w	800300a <_strtod_l+0x272>
 8002f06:	2000      	movs	r0, #0
 8002f08:	9d06      	ldr	r5, [sp, #24]
 8002f0a:	4633      	mov	r3, r6
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	4601      	mov	r1, r0
 8002f10:	2b65      	cmp	r3, #101	; 0x65
 8002f12:	d002      	beq.n	8002f1a <_strtod_l+0x182>
 8002f14:	2b45      	cmp	r3, #69	; 0x45
 8002f16:	f040 80e8 	bne.w	80030ea <_strtod_l+0x352>
 8002f1a:	b925      	cbnz	r5, 8002f26 <_strtod_l+0x18e>
 8002f1c:	b910      	cbnz	r0, 8002f24 <_strtod_l+0x18c>
 8002f1e:	9b08      	ldr	r3, [sp, #32]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d097      	beq.n	8002e54 <_strtod_l+0xbc>
 8002f24:	2500      	movs	r5, #0
 8002f26:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8002f28:	1c63      	adds	r3, r4, #1
 8002f2a:	9319      	str	r3, [sp, #100]	; 0x64
 8002f2c:	7863      	ldrb	r3, [r4, #1]
 8002f2e:	2b2b      	cmp	r3, #43	; 0x2b
 8002f30:	f000 80c8 	beq.w	80030c4 <_strtod_l+0x32c>
 8002f34:	2b2d      	cmp	r3, #45	; 0x2d
 8002f36:	f000 80cb 	beq.w	80030d0 <_strtod_l+0x338>
 8002f3a:	2600      	movs	r6, #0
 8002f3c:	9605      	str	r6, [sp, #20]
 8002f3e:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8002f42:	2e09      	cmp	r6, #9
 8002f44:	f200 80d0 	bhi.w	80030e8 <_strtod_l+0x350>
 8002f48:	2b30      	cmp	r3, #48	; 0x30
 8002f4a:	f000 80c3 	beq.w	80030d4 <_strtod_l+0x33c>
 8002f4e:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 8002f52:	2e08      	cmp	r6, #8
 8002f54:	f200 80c9 	bhi.w	80030ea <_strtod_l+0x352>
 8002f58:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8002f5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002f5e:	f04f 0c0a 	mov.w	ip, #10
 8002f62:	461f      	mov	r7, r3
 8002f64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002f66:	1c5e      	adds	r6, r3, #1
 8002f68:	9619      	str	r6, [sp, #100]	; 0x64
 8002f6a:	785b      	ldrb	r3, [r3, #1]
 8002f6c:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8002f70:	f1b8 0f09 	cmp.w	r8, #9
 8002f74:	f240 80b3 	bls.w	80030de <_strtod_l+0x346>
 8002f78:	1bf6      	subs	r6, r6, r7
 8002f7a:	2e08      	cmp	r6, #8
 8002f7c:	f644 681f 	movw	r8, #19999	; 0x4e1f
 8002f80:	dc02      	bgt.n	8002f88 <_strtod_l+0x1f0>
 8002f82:	45f0      	cmp	r8, lr
 8002f84:	bfa8      	it	ge
 8002f86:	46f0      	movge	r8, lr
 8002f88:	9e05      	ldr	r6, [sp, #20]
 8002f8a:	b10e      	cbz	r6, 8002f90 <_strtod_l+0x1f8>
 8002f8c:	f1c8 0800 	rsb	r8, r8, #0
 8002f90:	2d00      	cmp	r5, #0
 8002f92:	f040 80d0 	bne.w	8003136 <_strtod_l+0x39e>
 8002f96:	2800      	cmp	r0, #0
 8002f98:	f47f af3e 	bne.w	8002e18 <_strtod_l+0x80>
 8002f9c:	9a08      	ldr	r2, [sp, #32]
 8002f9e:	2a00      	cmp	r2, #0
 8002fa0:	f47f af3a 	bne.w	8002e18 <_strtod_l+0x80>
 8002fa4:	2900      	cmp	r1, #0
 8002fa6:	f47f af55 	bne.w	8002e54 <_strtod_l+0xbc>
 8002faa:	2b4e      	cmp	r3, #78	; 0x4e
 8002fac:	f000 80a6 	beq.w	80030fc <_strtod_l+0x364>
 8002fb0:	f300 809e 	bgt.w	80030f0 <_strtod_l+0x358>
 8002fb4:	2b49      	cmp	r3, #73	; 0x49
 8002fb6:	f47f af4d 	bne.w	8002e54 <_strtod_l+0xbc>
 8002fba:	493e      	ldr	r1, [pc, #248]	; (80030b4 <_strtod_l+0x31c>)
 8002fbc:	a819      	add	r0, sp, #100	; 0x64
 8002fbe:	f001 fa13 	bl	80043e8 <__match>
 8002fc2:	2800      	cmp	r0, #0
 8002fc4:	f43f af46 	beq.w	8002e54 <_strtod_l+0xbc>
 8002fc8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002fca:	493b      	ldr	r1, [pc, #236]	; (80030b8 <_strtod_l+0x320>)
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	a819      	add	r0, sp, #100	; 0x64
 8002fd0:	9319      	str	r3, [sp, #100]	; 0x64
 8002fd2:	f001 fa09 	bl	80043e8 <__match>
 8002fd6:	b910      	cbnz	r0, 8002fde <_strtod_l+0x246>
 8002fd8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002fda:	3301      	adds	r3, #1
 8002fdc:	9319      	str	r3, [sp, #100]	; 0x64
 8002fde:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 80030bc <_strtod_l+0x324>
 8002fe2:	f04f 0a00 	mov.w	sl, #0
 8002fe6:	e717      	b.n	8002e18 <_strtod_l+0x80>
 8002fe8:	2300      	movs	r3, #0
 8002fea:	e774      	b.n	8002ed6 <_strtod_l+0x13e>
 8002fec:	9906      	ldr	r1, [sp, #24]
 8002fee:	2908      	cmp	r1, #8
 8002ff0:	bfdd      	ittte	le
 8002ff2:	9907      	ldrle	r1, [sp, #28]
 8002ff4:	fb02 3301 	mlale	r3, r2, r1, r3
 8002ff8:	9307      	strle	r3, [sp, #28]
 8002ffa:	fb02 3909 	mlagt	r9, r2, r9, r3
 8002ffe:	9b06      	ldr	r3, [sp, #24]
 8003000:	3001      	adds	r0, #1
 8003002:	3301      	adds	r3, #1
 8003004:	9306      	str	r3, [sp, #24]
 8003006:	9019      	str	r0, [sp, #100]	; 0x64
 8003008:	e76f      	b.n	8002eea <_strtod_l+0x152>
 800300a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800300c:	195a      	adds	r2, r3, r5
 800300e:	9219      	str	r2, [sp, #100]	; 0x64
 8003010:	9a06      	ldr	r2, [sp, #24]
 8003012:	5d5b      	ldrb	r3, [r3, r5]
 8003014:	2a00      	cmp	r2, #0
 8003016:	d148      	bne.n	80030aa <_strtod_l+0x312>
 8003018:	4610      	mov	r0, r2
 800301a:	2b30      	cmp	r3, #48	; 0x30
 800301c:	d02a      	beq.n	8003074 <_strtod_l+0x2dc>
 800301e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8003022:	2a08      	cmp	r2, #8
 8003024:	f200 8491 	bhi.w	800394a <_strtod_l+0xbb2>
 8003028:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800302a:	920a      	str	r2, [sp, #40]	; 0x28
 800302c:	4602      	mov	r2, r0
 800302e:	2000      	movs	r0, #0
 8003030:	4605      	mov	r5, r0
 8003032:	3b30      	subs	r3, #48	; 0x30
 8003034:	f100 0101 	add.w	r1, r0, #1
 8003038:	d011      	beq.n	800305e <_strtod_l+0x2c6>
 800303a:	440a      	add	r2, r1
 800303c:	eb00 0c05 	add.w	ip, r0, r5
 8003040:	4629      	mov	r1, r5
 8003042:	260a      	movs	r6, #10
 8003044:	4561      	cmp	r1, ip
 8003046:	d11b      	bne.n	8003080 <_strtod_l+0x2e8>
 8003048:	4428      	add	r0, r5
 800304a:	2808      	cmp	r0, #8
 800304c:	f100 0501 	add.w	r5, r0, #1
 8003050:	dc25      	bgt.n	800309e <_strtod_l+0x306>
 8003052:	9807      	ldr	r0, [sp, #28]
 8003054:	210a      	movs	r1, #10
 8003056:	fb01 3300 	mla	r3, r1, r0, r3
 800305a:	9307      	str	r3, [sp, #28]
 800305c:	2100      	movs	r1, #0
 800305e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003060:	1c58      	adds	r0, r3, #1
 8003062:	9019      	str	r0, [sp, #100]	; 0x64
 8003064:	785b      	ldrb	r3, [r3, #1]
 8003066:	4608      	mov	r0, r1
 8003068:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800306c:	2909      	cmp	r1, #9
 800306e:	d9e0      	bls.n	8003032 <_strtod_l+0x29a>
 8003070:	2101      	movs	r1, #1
 8003072:	e74d      	b.n	8002f10 <_strtod_l+0x178>
 8003074:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003076:	1c5a      	adds	r2, r3, #1
 8003078:	9219      	str	r2, [sp, #100]	; 0x64
 800307a:	3001      	adds	r0, #1
 800307c:	785b      	ldrb	r3, [r3, #1]
 800307e:	e7cc      	b.n	800301a <_strtod_l+0x282>
 8003080:	3101      	adds	r1, #1
 8003082:	f101 3eff 	add.w	lr, r1, #4294967295
 8003086:	f1be 0f08 	cmp.w	lr, #8
 800308a:	dc03      	bgt.n	8003094 <_strtod_l+0x2fc>
 800308c:	9f07      	ldr	r7, [sp, #28]
 800308e:	4377      	muls	r7, r6
 8003090:	9707      	str	r7, [sp, #28]
 8003092:	e7d7      	b.n	8003044 <_strtod_l+0x2ac>
 8003094:	2910      	cmp	r1, #16
 8003096:	bfd8      	it	le
 8003098:	fb06 f909 	mulle.w	r9, r6, r9
 800309c:	e7d2      	b.n	8003044 <_strtod_l+0x2ac>
 800309e:	2d10      	cmp	r5, #16
 80030a0:	bfdc      	itt	le
 80030a2:	210a      	movle	r1, #10
 80030a4:	fb01 3909 	mlale	r9, r1, r9, r3
 80030a8:	e7d8      	b.n	800305c <_strtod_l+0x2c4>
 80030aa:	4602      	mov	r2, r0
 80030ac:	9d06      	ldr	r5, [sp, #24]
 80030ae:	e7db      	b.n	8003068 <_strtod_l+0x2d0>
 80030b0:	08005ae0 	.word	0x08005ae0
 80030b4:	08005ad4 	.word	0x08005ad4
 80030b8:	08005ad7 	.word	0x08005ad7
 80030bc:	7ff00000 	.word	0x7ff00000
 80030c0:	2101      	movs	r1, #1
 80030c2:	e72b      	b.n	8002f1c <_strtod_l+0x184>
 80030c4:	2300      	movs	r3, #0
 80030c6:	9305      	str	r3, [sp, #20]
 80030c8:	1ca3      	adds	r3, r4, #2
 80030ca:	9319      	str	r3, [sp, #100]	; 0x64
 80030cc:	78a3      	ldrb	r3, [r4, #2]
 80030ce:	e736      	b.n	8002f3e <_strtod_l+0x1a6>
 80030d0:	2301      	movs	r3, #1
 80030d2:	e7f8      	b.n	80030c6 <_strtod_l+0x32e>
 80030d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80030d6:	1c5e      	adds	r6, r3, #1
 80030d8:	9619      	str	r6, [sp, #100]	; 0x64
 80030da:	785b      	ldrb	r3, [r3, #1]
 80030dc:	e734      	b.n	8002f48 <_strtod_l+0x1b0>
 80030de:	fb0c 3e0e 	mla	lr, ip, lr, r3
 80030e2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80030e6:	e73d      	b.n	8002f64 <_strtod_l+0x1cc>
 80030e8:	9419      	str	r4, [sp, #100]	; 0x64
 80030ea:	f04f 0800 	mov.w	r8, #0
 80030ee:	e74f      	b.n	8002f90 <_strtod_l+0x1f8>
 80030f0:	2b69      	cmp	r3, #105	; 0x69
 80030f2:	f43f af62 	beq.w	8002fba <_strtod_l+0x222>
 80030f6:	2b6e      	cmp	r3, #110	; 0x6e
 80030f8:	f47f aeac 	bne.w	8002e54 <_strtod_l+0xbc>
 80030fc:	4988      	ldr	r1, [pc, #544]	; (8003320 <_strtod_l+0x588>)
 80030fe:	a819      	add	r0, sp, #100	; 0x64
 8003100:	f001 f972 	bl	80043e8 <__match>
 8003104:	2800      	cmp	r0, #0
 8003106:	f43f aea5 	beq.w	8002e54 <_strtod_l+0xbc>
 800310a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b28      	cmp	r3, #40	; 0x28
 8003110:	d10e      	bne.n	8003130 <_strtod_l+0x398>
 8003112:	aa1c      	add	r2, sp, #112	; 0x70
 8003114:	4983      	ldr	r1, [pc, #524]	; (8003324 <_strtod_l+0x58c>)
 8003116:	a819      	add	r0, sp, #100	; 0x64
 8003118:	f001 f979 	bl	800440e <__hexnan>
 800311c:	2805      	cmp	r0, #5
 800311e:	d107      	bne.n	8003130 <_strtod_l+0x398>
 8003120:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003122:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8003126:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800312a:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800312e:	e673      	b.n	8002e18 <_strtod_l+0x80>
 8003130:	f8df b200 	ldr.w	fp, [pc, #512]	; 8003334 <_strtod_l+0x59c>
 8003134:	e755      	b.n	8002fe2 <_strtod_l+0x24a>
 8003136:	9b06      	ldr	r3, [sp, #24]
 8003138:	9807      	ldr	r0, [sp, #28]
 800313a:	2b00      	cmp	r3, #0
 800313c:	bf08      	it	eq
 800313e:	462b      	moveq	r3, r5
 8003140:	2d10      	cmp	r5, #16
 8003142:	462c      	mov	r4, r5
 8003144:	eba8 0802 	sub.w	r8, r8, r2
 8003148:	bfa8      	it	ge
 800314a:	2410      	movge	r4, #16
 800314c:	9306      	str	r3, [sp, #24]
 800314e:	f7fd f9e9 	bl	8000524 <__aeabi_ui2d>
 8003152:	2c09      	cmp	r4, #9
 8003154:	4682      	mov	sl, r0
 8003156:	468b      	mov	fp, r1
 8003158:	dd13      	ble.n	8003182 <_strtod_l+0x3ea>
 800315a:	4b73      	ldr	r3, [pc, #460]	; (8003328 <_strtod_l+0x590>)
 800315c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003160:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003164:	f7fd fa54 	bl	8000610 <__aeabi_dmul>
 8003168:	4606      	mov	r6, r0
 800316a:	4648      	mov	r0, r9
 800316c:	460f      	mov	r7, r1
 800316e:	f7fd f9d9 	bl	8000524 <__aeabi_ui2d>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	4630      	mov	r0, r6
 8003178:	4639      	mov	r1, r7
 800317a:	f7fd f897 	bl	80002ac <__adddf3>
 800317e:	4682      	mov	sl, r0
 8003180:	468b      	mov	fp, r1
 8003182:	2d0f      	cmp	r5, #15
 8003184:	dc36      	bgt.n	80031f4 <_strtod_l+0x45c>
 8003186:	f1b8 0f00 	cmp.w	r8, #0
 800318a:	f43f ae45 	beq.w	8002e18 <_strtod_l+0x80>
 800318e:	dd24      	ble.n	80031da <_strtod_l+0x442>
 8003190:	f1b8 0f16 	cmp.w	r8, #22
 8003194:	dc0b      	bgt.n	80031ae <_strtod_l+0x416>
 8003196:	4d64      	ldr	r5, [pc, #400]	; (8003328 <_strtod_l+0x590>)
 8003198:	eb05 08c8 	add.w	r8, r5, r8, lsl #3
 800319c:	e9d8 0100 	ldrd	r0, r1, [r8]
 80031a0:	4652      	mov	r2, sl
 80031a2:	465b      	mov	r3, fp
 80031a4:	f7fd fa34 	bl	8000610 <__aeabi_dmul>
 80031a8:	4682      	mov	sl, r0
 80031aa:	468b      	mov	fp, r1
 80031ac:	e634      	b.n	8002e18 <_strtod_l+0x80>
 80031ae:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80031b2:	4598      	cmp	r8, r3
 80031b4:	dc1e      	bgt.n	80031f4 <_strtod_l+0x45c>
 80031b6:	4c5c      	ldr	r4, [pc, #368]	; (8003328 <_strtod_l+0x590>)
 80031b8:	f1c5 050f 	rsb	r5, r5, #15
 80031bc:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80031c0:	eba8 0505 	sub.w	r5, r8, r5
 80031c4:	4652      	mov	r2, sl
 80031c6:	465b      	mov	r3, fp
 80031c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80031cc:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80031d0:	f7fd fa1e 	bl	8000610 <__aeabi_dmul>
 80031d4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80031d8:	e7e4      	b.n	80031a4 <_strtod_l+0x40c>
 80031da:	f118 0f16 	cmn.w	r8, #22
 80031de:	db09      	blt.n	80031f4 <_strtod_l+0x45c>
 80031e0:	4d51      	ldr	r5, [pc, #324]	; (8003328 <_strtod_l+0x590>)
 80031e2:	eba5 08c8 	sub.w	r8, r5, r8, lsl #3
 80031e6:	e9d8 2300 	ldrd	r2, r3, [r8]
 80031ea:	4650      	mov	r0, sl
 80031ec:	4659      	mov	r1, fp
 80031ee:	f7fd fb39 	bl	8000864 <__aeabi_ddiv>
 80031f2:	e7d9      	b.n	80031a8 <_strtod_l+0x410>
 80031f4:	1b2c      	subs	r4, r5, r4
 80031f6:	4444      	add	r4, r8
 80031f8:	2c00      	cmp	r4, #0
 80031fa:	dd70      	ble.n	80032de <_strtod_l+0x546>
 80031fc:	f014 030f 	ands.w	r3, r4, #15
 8003200:	d00a      	beq.n	8003218 <_strtod_l+0x480>
 8003202:	4949      	ldr	r1, [pc, #292]	; (8003328 <_strtod_l+0x590>)
 8003204:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003208:	4652      	mov	r2, sl
 800320a:	465b      	mov	r3, fp
 800320c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003210:	f7fd f9fe 	bl	8000610 <__aeabi_dmul>
 8003214:	4682      	mov	sl, r0
 8003216:	468b      	mov	fp, r1
 8003218:	f034 040f 	bics.w	r4, r4, #15
 800321c:	d050      	beq.n	80032c0 <_strtod_l+0x528>
 800321e:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 8003222:	dd23      	ble.n	800326c <_strtod_l+0x4d4>
 8003224:	2400      	movs	r4, #0
 8003226:	4625      	mov	r5, r4
 8003228:	9407      	str	r4, [sp, #28]
 800322a:	9406      	str	r4, [sp, #24]
 800322c:	9a04      	ldr	r2, [sp, #16]
 800322e:	f8df b108 	ldr.w	fp, [pc, #264]	; 8003338 <_strtod_l+0x5a0>
 8003232:	2322      	movs	r3, #34	; 0x22
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	f04f 0a00 	mov.w	sl, #0
 800323a:	9b07      	ldr	r3, [sp, #28]
 800323c:	2b00      	cmp	r3, #0
 800323e:	f43f adeb 	beq.w	8002e18 <_strtod_l+0x80>
 8003242:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003244:	9804      	ldr	r0, [sp, #16]
 8003246:	f001 fad2 	bl	80047ee <_Bfree>
 800324a:	9906      	ldr	r1, [sp, #24]
 800324c:	9804      	ldr	r0, [sp, #16]
 800324e:	f001 face 	bl	80047ee <_Bfree>
 8003252:	4629      	mov	r1, r5
 8003254:	9804      	ldr	r0, [sp, #16]
 8003256:	f001 faca 	bl	80047ee <_Bfree>
 800325a:	9907      	ldr	r1, [sp, #28]
 800325c:	9804      	ldr	r0, [sp, #16]
 800325e:	f001 fac6 	bl	80047ee <_Bfree>
 8003262:	4621      	mov	r1, r4
 8003264:	9804      	ldr	r0, [sp, #16]
 8003266:	f001 fac2 	bl	80047ee <_Bfree>
 800326a:	e5d5      	b.n	8002e18 <_strtod_l+0x80>
 800326c:	4e2f      	ldr	r6, [pc, #188]	; (800332c <_strtod_l+0x594>)
 800326e:	2300      	movs	r3, #0
 8003270:	1124      	asrs	r4, r4, #4
 8003272:	4650      	mov	r0, sl
 8003274:	4659      	mov	r1, fp
 8003276:	4699      	mov	r9, r3
 8003278:	4637      	mov	r7, r6
 800327a:	2c01      	cmp	r4, #1
 800327c:	dc23      	bgt.n	80032c6 <_strtod_l+0x52e>
 800327e:	b10b      	cbz	r3, 8003284 <_strtod_l+0x4ec>
 8003280:	4682      	mov	sl, r0
 8003282:	468b      	mov	fp, r1
 8003284:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8003288:	eb07 07c9 	add.w	r7, r7, r9, lsl #3
 800328c:	4652      	mov	r2, sl
 800328e:	465b      	mov	r3, fp
 8003290:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003294:	f7fd f9bc 	bl	8000610 <__aeabi_dmul>
 8003298:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800329c:	468b      	mov	fp, r1
 800329e:	460a      	mov	r2, r1
 80032a0:	0d1b      	lsrs	r3, r3, #20
 80032a2:	4923      	ldr	r1, [pc, #140]	; (8003330 <_strtod_l+0x598>)
 80032a4:	051b      	lsls	r3, r3, #20
 80032a6:	428b      	cmp	r3, r1
 80032a8:	4682      	mov	sl, r0
 80032aa:	d8bb      	bhi.n	8003224 <_strtod_l+0x48c>
 80032ac:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80032b0:	428b      	cmp	r3, r1
 80032b2:	bf86      	itte	hi
 80032b4:	f8df b084 	ldrhi.w	fp, [pc, #132]	; 800333c <_strtod_l+0x5a4>
 80032b8:	f04f 3aff 	movhi.w	sl, #4294967295
 80032bc:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80032c0:	2300      	movs	r3, #0
 80032c2:	9305      	str	r3, [sp, #20]
 80032c4:	e06d      	b.n	80033a2 <_strtod_l+0x60a>
 80032c6:	07e2      	lsls	r2, r4, #31
 80032c8:	d504      	bpl.n	80032d4 <_strtod_l+0x53c>
 80032ca:	e9d6 2300 	ldrd	r2, r3, [r6]
 80032ce:	f7fd f99f 	bl	8000610 <__aeabi_dmul>
 80032d2:	2301      	movs	r3, #1
 80032d4:	f109 0901 	add.w	r9, r9, #1
 80032d8:	1064      	asrs	r4, r4, #1
 80032da:	3608      	adds	r6, #8
 80032dc:	e7cd      	b.n	800327a <_strtod_l+0x4e2>
 80032de:	d0ef      	beq.n	80032c0 <_strtod_l+0x528>
 80032e0:	4264      	negs	r4, r4
 80032e2:	f014 020f 	ands.w	r2, r4, #15
 80032e6:	d00a      	beq.n	80032fe <_strtod_l+0x566>
 80032e8:	4b0f      	ldr	r3, [pc, #60]	; (8003328 <_strtod_l+0x590>)
 80032ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80032ee:	4650      	mov	r0, sl
 80032f0:	4659      	mov	r1, fp
 80032f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f6:	f7fd fab5 	bl	8000864 <__aeabi_ddiv>
 80032fa:	4682      	mov	sl, r0
 80032fc:	468b      	mov	fp, r1
 80032fe:	1124      	asrs	r4, r4, #4
 8003300:	d0de      	beq.n	80032c0 <_strtod_l+0x528>
 8003302:	2c1f      	cmp	r4, #31
 8003304:	dd1c      	ble.n	8003340 <_strtod_l+0x5a8>
 8003306:	2400      	movs	r4, #0
 8003308:	4625      	mov	r5, r4
 800330a:	9407      	str	r4, [sp, #28]
 800330c:	9406      	str	r4, [sp, #24]
 800330e:	9a04      	ldr	r2, [sp, #16]
 8003310:	2322      	movs	r3, #34	; 0x22
 8003312:	f04f 0a00 	mov.w	sl, #0
 8003316:	f04f 0b00 	mov.w	fp, #0
 800331a:	6013      	str	r3, [r2, #0]
 800331c:	e78d      	b.n	800323a <_strtod_l+0x4a2>
 800331e:	bf00      	nop
 8003320:	08005add 	.word	0x08005add
 8003324:	08005af4 	.word	0x08005af4
 8003328:	08005ba0 	.word	0x08005ba0
 800332c:	08005b78 	.word	0x08005b78
 8003330:	7ca00000 	.word	0x7ca00000
 8003334:	fff80000 	.word	0xfff80000
 8003338:	7ff00000 	.word	0x7ff00000
 800333c:	7fefffff 	.word	0x7fefffff
 8003340:	f014 0310 	ands.w	r3, r4, #16
 8003344:	bf18      	it	ne
 8003346:	236a      	movne	r3, #106	; 0x6a
 8003348:	4ea0      	ldr	r6, [pc, #640]	; (80035cc <_strtod_l+0x834>)
 800334a:	9305      	str	r3, [sp, #20]
 800334c:	4650      	mov	r0, sl
 800334e:	4659      	mov	r1, fp
 8003350:	2300      	movs	r3, #0
 8003352:	2c00      	cmp	r4, #0
 8003354:	f300 8106 	bgt.w	8003564 <_strtod_l+0x7cc>
 8003358:	b10b      	cbz	r3, 800335e <_strtod_l+0x5c6>
 800335a:	4682      	mov	sl, r0
 800335c:	468b      	mov	fp, r1
 800335e:	9b05      	ldr	r3, [sp, #20]
 8003360:	b1bb      	cbz	r3, 8003392 <_strtod_l+0x5fa>
 8003362:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8003366:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800336a:	2b00      	cmp	r3, #0
 800336c:	4659      	mov	r1, fp
 800336e:	dd10      	ble.n	8003392 <_strtod_l+0x5fa>
 8003370:	2b1f      	cmp	r3, #31
 8003372:	f340 8101 	ble.w	8003578 <_strtod_l+0x7e0>
 8003376:	2b34      	cmp	r3, #52	; 0x34
 8003378:	bfde      	ittt	le
 800337a:	3b20      	suble	r3, #32
 800337c:	f04f 32ff 	movle.w	r2, #4294967295
 8003380:	fa02 f303 	lslle.w	r3, r2, r3
 8003384:	f04f 0a00 	mov.w	sl, #0
 8003388:	bfcc      	ite	gt
 800338a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800338e:	ea03 0b01 	andle.w	fp, r3, r1
 8003392:	2200      	movs	r2, #0
 8003394:	2300      	movs	r3, #0
 8003396:	4650      	mov	r0, sl
 8003398:	4659      	mov	r1, fp
 800339a:	f7fd fba1 	bl	8000ae0 <__aeabi_dcmpeq>
 800339e:	2800      	cmp	r0, #0
 80033a0:	d1b1      	bne.n	8003306 <_strtod_l+0x56e>
 80033a2:	9b07      	ldr	r3, [sp, #28]
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	9a06      	ldr	r2, [sp, #24]
 80033a8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80033aa:	9804      	ldr	r0, [sp, #16]
 80033ac:	462b      	mov	r3, r5
 80033ae:	f001 fa70 	bl	8004892 <__s2b>
 80033b2:	9007      	str	r0, [sp, #28]
 80033b4:	2800      	cmp	r0, #0
 80033b6:	f43f af35 	beq.w	8003224 <_strtod_l+0x48c>
 80033ba:	f1b8 0f00 	cmp.w	r8, #0
 80033be:	f1c8 0300 	rsb	r3, r8, #0
 80033c2:	bfa8      	it	ge
 80033c4:	2300      	movge	r3, #0
 80033c6:	930e      	str	r3, [sp, #56]	; 0x38
 80033c8:	2400      	movs	r4, #0
 80033ca:	ea28 73e8 	bic.w	r3, r8, r8, asr #31
 80033ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80033d0:	4625      	mov	r5, r4
 80033d2:	9b07      	ldr	r3, [sp, #28]
 80033d4:	9804      	ldr	r0, [sp, #16]
 80033d6:	6859      	ldr	r1, [r3, #4]
 80033d8:	f001 f9d5 	bl	8004786 <_Balloc>
 80033dc:	9006      	str	r0, [sp, #24]
 80033de:	2800      	cmp	r0, #0
 80033e0:	f43f af24 	beq.w	800322c <_strtod_l+0x494>
 80033e4:	9b07      	ldr	r3, [sp, #28]
 80033e6:	691a      	ldr	r2, [r3, #16]
 80033e8:	3202      	adds	r2, #2
 80033ea:	f103 010c 	add.w	r1, r3, #12
 80033ee:	0092      	lsls	r2, r2, #2
 80033f0:	300c      	adds	r0, #12
 80033f2:	f001 f9bb 	bl	800476c <memcpy>
 80033f6:	aa1c      	add	r2, sp, #112	; 0x70
 80033f8:	a91b      	add	r1, sp, #108	; 0x6c
 80033fa:	ec4b ab10 	vmov	d0, sl, fp
 80033fe:	9804      	ldr	r0, [sp, #16]
 8003400:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8003404:	f001 fcf6 	bl	8004df4 <__d2b>
 8003408:	901a      	str	r0, [sp, #104]	; 0x68
 800340a:	2800      	cmp	r0, #0
 800340c:	f43f af0e 	beq.w	800322c <_strtod_l+0x494>
 8003410:	2101      	movs	r1, #1
 8003412:	9804      	ldr	r0, [sp, #16]
 8003414:	f001 fac9 	bl	80049aa <__i2b>
 8003418:	4605      	mov	r5, r0
 800341a:	2800      	cmp	r0, #0
 800341c:	f43f af06 	beq.w	800322c <_strtod_l+0x494>
 8003420:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8003422:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003424:	2e00      	cmp	r6, #0
 8003426:	bfab      	itete	ge
 8003428:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800342a:	9b0f      	ldrlt	r3, [sp, #60]	; 0x3c
 800342c:	9f0f      	ldrge	r7, [sp, #60]	; 0x3c
 800342e:	f8dd 8038 	ldrlt.w	r8, [sp, #56]	; 0x38
 8003432:	bfac      	ite	ge
 8003434:	eb03 0806 	addge.w	r8, r3, r6
 8003438:	1b9f      	sublt	r7, r3, r6
 800343a:	9b05      	ldr	r3, [sp, #20]
 800343c:	1af6      	subs	r6, r6, r3
 800343e:	4416      	add	r6, r2
 8003440:	4b63      	ldr	r3, [pc, #396]	; (80035d0 <_strtod_l+0x838>)
 8003442:	3e01      	subs	r6, #1
 8003444:	429e      	cmp	r6, r3
 8003446:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800344a:	f280 80a8 	bge.w	800359e <_strtod_l+0x806>
 800344e:	1b9b      	subs	r3, r3, r6
 8003450:	2b1f      	cmp	r3, #31
 8003452:	eba2 0203 	sub.w	r2, r2, r3
 8003456:	f04f 0901 	mov.w	r9, #1
 800345a:	f300 8094 	bgt.w	8003586 <_strtod_l+0x7ee>
 800345e:	fa09 f303 	lsl.w	r3, r9, r3
 8003462:	9314      	str	r3, [sp, #80]	; 0x50
 8003464:	2600      	movs	r6, #0
 8003466:	eb08 0902 	add.w	r9, r8, r2
 800346a:	9b05      	ldr	r3, [sp, #20]
 800346c:	45c8      	cmp	r8, r9
 800346e:	4417      	add	r7, r2
 8003470:	441f      	add	r7, r3
 8003472:	4643      	mov	r3, r8
 8003474:	bfa8      	it	ge
 8003476:	464b      	movge	r3, r9
 8003478:	42bb      	cmp	r3, r7
 800347a:	bfa8      	it	ge
 800347c:	463b      	movge	r3, r7
 800347e:	2b00      	cmp	r3, #0
 8003480:	bfc2      	ittt	gt
 8003482:	eba9 0903 	subgt.w	r9, r9, r3
 8003486:	1aff      	subgt	r7, r7, r3
 8003488:	eba8 0803 	subgt.w	r8, r8, r3
 800348c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800348e:	b1bb      	cbz	r3, 80034c0 <_strtod_l+0x728>
 8003490:	4629      	mov	r1, r5
 8003492:	461a      	mov	r2, r3
 8003494:	9804      	ldr	r0, [sp, #16]
 8003496:	f001 fb1f 	bl	8004ad8 <__pow5mult>
 800349a:	4605      	mov	r5, r0
 800349c:	2800      	cmp	r0, #0
 800349e:	f43f aec5 	beq.w	800322c <_strtod_l+0x494>
 80034a2:	4601      	mov	r1, r0
 80034a4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80034a6:	9804      	ldr	r0, [sp, #16]
 80034a8:	f001 fa88 	bl	80049bc <__multiply>
 80034ac:	9008      	str	r0, [sp, #32]
 80034ae:	2800      	cmp	r0, #0
 80034b0:	f43f aebc 	beq.w	800322c <_strtod_l+0x494>
 80034b4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80034b6:	9804      	ldr	r0, [sp, #16]
 80034b8:	f001 f999 	bl	80047ee <_Bfree>
 80034bc:	9b08      	ldr	r3, [sp, #32]
 80034be:	931a      	str	r3, [sp, #104]	; 0x68
 80034c0:	f1b9 0f00 	cmp.w	r9, #0
 80034c4:	dc6f      	bgt.n	80035a6 <_strtod_l+0x80e>
 80034c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d175      	bne.n	80035b8 <_strtod_l+0x820>
 80034cc:	2f00      	cmp	r7, #0
 80034ce:	dd08      	ble.n	80034e2 <_strtod_l+0x74a>
 80034d0:	463a      	mov	r2, r7
 80034d2:	9906      	ldr	r1, [sp, #24]
 80034d4:	9804      	ldr	r0, [sp, #16]
 80034d6:	f001 fb4d 	bl	8004b74 <__lshift>
 80034da:	9006      	str	r0, [sp, #24]
 80034dc:	2800      	cmp	r0, #0
 80034de:	f43f aea5 	beq.w	800322c <_strtod_l+0x494>
 80034e2:	f1b8 0f00 	cmp.w	r8, #0
 80034e6:	dd08      	ble.n	80034fa <_strtod_l+0x762>
 80034e8:	4629      	mov	r1, r5
 80034ea:	4642      	mov	r2, r8
 80034ec:	9804      	ldr	r0, [sp, #16]
 80034ee:	f001 fb41 	bl	8004b74 <__lshift>
 80034f2:	4605      	mov	r5, r0
 80034f4:	2800      	cmp	r0, #0
 80034f6:	f43f ae99 	beq.w	800322c <_strtod_l+0x494>
 80034fa:	9a06      	ldr	r2, [sp, #24]
 80034fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80034fe:	9804      	ldr	r0, [sp, #16]
 8003500:	f001 fba3 	bl	8004c4a <__mdiff>
 8003504:	4604      	mov	r4, r0
 8003506:	2800      	cmp	r0, #0
 8003508:	f43f ae90 	beq.w	800322c <_strtod_l+0x494>
 800350c:	68c3      	ldr	r3, [r0, #12]
 800350e:	9308      	str	r3, [sp, #32]
 8003510:	2300      	movs	r3, #0
 8003512:	60c3      	str	r3, [r0, #12]
 8003514:	4629      	mov	r1, r5
 8003516:	f001 fb7e 	bl	8004c16 <__mcmp>
 800351a:	2800      	cmp	r0, #0
 800351c:	da5a      	bge.n	80035d4 <_strtod_l+0x83c>
 800351e:	9b08      	ldr	r3, [sp, #32]
 8003520:	b9e3      	cbnz	r3, 800355c <_strtod_l+0x7c4>
 8003522:	f1ba 0f00 	cmp.w	sl, #0
 8003526:	d119      	bne.n	800355c <_strtod_l+0x7c4>
 8003528:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800352c:	b9b3      	cbnz	r3, 800355c <_strtod_l+0x7c4>
 800352e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003532:	0d1b      	lsrs	r3, r3, #20
 8003534:	051b      	lsls	r3, r3, #20
 8003536:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800353a:	d90f      	bls.n	800355c <_strtod_l+0x7c4>
 800353c:	6963      	ldr	r3, [r4, #20]
 800353e:	b913      	cbnz	r3, 8003546 <_strtod_l+0x7ae>
 8003540:	6923      	ldr	r3, [r4, #16]
 8003542:	2b01      	cmp	r3, #1
 8003544:	dd0a      	ble.n	800355c <_strtod_l+0x7c4>
 8003546:	4621      	mov	r1, r4
 8003548:	2201      	movs	r2, #1
 800354a:	9804      	ldr	r0, [sp, #16]
 800354c:	f001 fb12 	bl	8004b74 <__lshift>
 8003550:	4629      	mov	r1, r5
 8003552:	4604      	mov	r4, r0
 8003554:	f001 fb5f 	bl	8004c16 <__mcmp>
 8003558:	2800      	cmp	r0, #0
 800355a:	dc6c      	bgt.n	8003636 <_strtod_l+0x89e>
 800355c:	9b05      	ldr	r3, [sp, #20]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d176      	bne.n	8003650 <_strtod_l+0x8b8>
 8003562:	e66e      	b.n	8003242 <_strtod_l+0x4aa>
 8003564:	07e2      	lsls	r2, r4, #31
 8003566:	d504      	bpl.n	8003572 <_strtod_l+0x7da>
 8003568:	e9d6 2300 	ldrd	r2, r3, [r6]
 800356c:	f7fd f850 	bl	8000610 <__aeabi_dmul>
 8003570:	2301      	movs	r3, #1
 8003572:	1064      	asrs	r4, r4, #1
 8003574:	3608      	adds	r6, #8
 8003576:	e6ec      	b.n	8003352 <_strtod_l+0x5ba>
 8003578:	f04f 32ff 	mov.w	r2, #4294967295
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	ea03 0a0a 	and.w	sl, r3, sl
 8003584:	e705      	b.n	8003392 <_strtod_l+0x5fa>
 8003586:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800358a:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800358e:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8003592:	36e2      	adds	r6, #226	; 0xe2
 8003594:	fa09 f606 	lsl.w	r6, r9, r6
 8003598:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 800359c:	e763      	b.n	8003466 <_strtod_l+0x6ce>
 800359e:	2301      	movs	r3, #1
 80035a0:	2600      	movs	r6, #0
 80035a2:	9314      	str	r3, [sp, #80]	; 0x50
 80035a4:	e75f      	b.n	8003466 <_strtod_l+0x6ce>
 80035a6:	464a      	mov	r2, r9
 80035a8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80035aa:	9804      	ldr	r0, [sp, #16]
 80035ac:	f001 fae2 	bl	8004b74 <__lshift>
 80035b0:	901a      	str	r0, [sp, #104]	; 0x68
 80035b2:	2800      	cmp	r0, #0
 80035b4:	d187      	bne.n	80034c6 <_strtod_l+0x72e>
 80035b6:	e639      	b.n	800322c <_strtod_l+0x494>
 80035b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80035ba:	9906      	ldr	r1, [sp, #24]
 80035bc:	9804      	ldr	r0, [sp, #16]
 80035be:	f001 fa8b 	bl	8004ad8 <__pow5mult>
 80035c2:	9006      	str	r0, [sp, #24]
 80035c4:	2800      	cmp	r0, #0
 80035c6:	d181      	bne.n	80034cc <_strtod_l+0x734>
 80035c8:	e630      	b.n	800322c <_strtod_l+0x494>
 80035ca:	bf00      	nop
 80035cc:	08005b08 	.word	0x08005b08
 80035d0:	fffffc02 	.word	0xfffffc02
 80035d4:	f040 8086 	bne.w	80036e4 <_strtod_l+0x94c>
 80035d8:	9a08      	ldr	r2, [sp, #32]
 80035da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80035de:	b332      	cbz	r2, 800362e <_strtod_l+0x896>
 80035e0:	4aad      	ldr	r2, [pc, #692]	; (8003898 <_strtod_l+0xb00>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	4659      	mov	r1, fp
 80035e6:	d152      	bne.n	800368e <_strtod_l+0x8f6>
 80035e8:	9b05      	ldr	r3, [sp, #20]
 80035ea:	4650      	mov	r0, sl
 80035ec:	b1d3      	cbz	r3, 8003624 <_strtod_l+0x88c>
 80035ee:	4aab      	ldr	r2, [pc, #684]	; (800389c <_strtod_l+0xb04>)
 80035f0:	400a      	ands	r2, r1
 80035f2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80035f6:	f04f 37ff 	mov.w	r7, #4294967295
 80035fa:	d816      	bhi.n	800362a <_strtod_l+0x892>
 80035fc:	0d12      	lsrs	r2, r2, #20
 80035fe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8003602:	fa07 f303 	lsl.w	r3, r7, r3
 8003606:	4283      	cmp	r3, r0
 8003608:	d141      	bne.n	800368e <_strtod_l+0x8f6>
 800360a:	4aa5      	ldr	r2, [pc, #660]	; (80038a0 <_strtod_l+0xb08>)
 800360c:	4291      	cmp	r1, r2
 800360e:	d102      	bne.n	8003616 <_strtod_l+0x87e>
 8003610:	3301      	adds	r3, #1
 8003612:	f43f ae0b 	beq.w	800322c <_strtod_l+0x494>
 8003616:	4ba1      	ldr	r3, [pc, #644]	; (800389c <_strtod_l+0xb04>)
 8003618:	400b      	ands	r3, r1
 800361a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800361e:	f04f 0a00 	mov.w	sl, #0
 8003622:	e79b      	b.n	800355c <_strtod_l+0x7c4>
 8003624:	f04f 33ff 	mov.w	r3, #4294967295
 8003628:	e7ed      	b.n	8003606 <_strtod_l+0x86e>
 800362a:	463b      	mov	r3, r7
 800362c:	e7eb      	b.n	8003606 <_strtod_l+0x86e>
 800362e:	bb73      	cbnz	r3, 800368e <_strtod_l+0x8f6>
 8003630:	f1ba 0f00 	cmp.w	sl, #0
 8003634:	d12b      	bne.n	800368e <_strtod_l+0x8f6>
 8003636:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800363a:	9a05      	ldr	r2, [sp, #20]
 800363c:	0d1b      	lsrs	r3, r3, #20
 800363e:	051b      	lsls	r3, r3, #20
 8003640:	b1e2      	cbz	r2, 800367c <_strtod_l+0x8e4>
 8003642:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8003646:	dc19      	bgt.n	800367c <_strtod_l+0x8e4>
 8003648:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 800364c:	f77f ae5f 	ble.w	800330e <_strtod_l+0x576>
 8003650:	4b94      	ldr	r3, [pc, #592]	; (80038a4 <_strtod_l+0xb0c>)
 8003652:	930d      	str	r3, [sp, #52]	; 0x34
 8003654:	2300      	movs	r3, #0
 8003656:	930c      	str	r3, [sp, #48]	; 0x30
 8003658:	4650      	mov	r0, sl
 800365a:	4659      	mov	r1, fp
 800365c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003660:	f7fc ffd6 	bl	8000610 <__aeabi_dmul>
 8003664:	4682      	mov	sl, r0
 8003666:	468b      	mov	fp, r1
 8003668:	2900      	cmp	r1, #0
 800366a:	f47f adea 	bne.w	8003242 <_strtod_l+0x4aa>
 800366e:	2800      	cmp	r0, #0
 8003670:	f47f ade7 	bne.w	8003242 <_strtod_l+0x4aa>
 8003674:	9a04      	ldr	r2, [sp, #16]
 8003676:	2322      	movs	r3, #34	; 0x22
 8003678:	6013      	str	r3, [r2, #0]
 800367a:	e5e2      	b.n	8003242 <_strtod_l+0x4aa>
 800367c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8003680:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8003684:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8003688:	f04f 3aff 	mov.w	sl, #4294967295
 800368c:	e766      	b.n	800355c <_strtod_l+0x7c4>
 800368e:	b19e      	cbz	r6, 80036b8 <_strtod_l+0x920>
 8003690:	ea16 0f0b 	tst.w	r6, fp
 8003694:	f43f af62 	beq.w	800355c <_strtod_l+0x7c4>
 8003698:	9b08      	ldr	r3, [sp, #32]
 800369a:	9a05      	ldr	r2, [sp, #20]
 800369c:	4650      	mov	r0, sl
 800369e:	4659      	mov	r1, fp
 80036a0:	b173      	cbz	r3, 80036c0 <_strtod_l+0x928>
 80036a2:	f7ff fb5b 	bl	8002d5c <sulp>
 80036a6:	4602      	mov	r2, r0
 80036a8:	460b      	mov	r3, r1
 80036aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80036ae:	f7fc fdfd 	bl	80002ac <__adddf3>
 80036b2:	4682      	mov	sl, r0
 80036b4:	468b      	mov	fp, r1
 80036b6:	e751      	b.n	800355c <_strtod_l+0x7c4>
 80036b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80036ba:	ea13 0f0a 	tst.w	r3, sl
 80036be:	e7e9      	b.n	8003694 <_strtod_l+0x8fc>
 80036c0:	f7ff fb4c 	bl	8002d5c <sulp>
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80036cc:	f7fc fdec 	bl	80002a8 <__aeabi_dsub>
 80036d0:	2200      	movs	r2, #0
 80036d2:	2300      	movs	r3, #0
 80036d4:	4682      	mov	sl, r0
 80036d6:	468b      	mov	fp, r1
 80036d8:	f7fd fa02 	bl	8000ae0 <__aeabi_dcmpeq>
 80036dc:	2800      	cmp	r0, #0
 80036de:	f47f ae16 	bne.w	800330e <_strtod_l+0x576>
 80036e2:	e73b      	b.n	800355c <_strtod_l+0x7c4>
 80036e4:	4629      	mov	r1, r5
 80036e6:	4620      	mov	r0, r4
 80036e8:	f001 fbd3 	bl	8004e92 <__ratio>
 80036ec:	ec57 6b10 	vmov	r6, r7, d0
 80036f0:	2200      	movs	r2, #0
 80036f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036f6:	ee10 0a10 	vmov	r0, s0
 80036fa:	4639      	mov	r1, r7
 80036fc:	f7fd fa04 	bl	8000b08 <__aeabi_dcmple>
 8003700:	2800      	cmp	r0, #0
 8003702:	d074      	beq.n	80037ee <_strtod_l+0xa56>
 8003704:	9b08      	ldr	r3, [sp, #32]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d046      	beq.n	8003798 <_strtod_l+0xa00>
 800370a:	f8df 919c 	ldr.w	r9, [pc, #412]	; 80038a8 <_strtod_l+0xb10>
 800370e:	f04f 0800 	mov.w	r8, #0
 8003712:	4f65      	ldr	r7, [pc, #404]	; (80038a8 <_strtod_l+0xb10>)
 8003714:	2600      	movs	r6, #0
 8003716:	4b61      	ldr	r3, [pc, #388]	; (800389c <_strtod_l+0xb04>)
 8003718:	ea0b 0303 	and.w	r3, fp, r3
 800371c:	9314      	str	r3, [sp, #80]	; 0x50
 800371e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003720:	4b62      	ldr	r3, [pc, #392]	; (80038ac <_strtod_l+0xb14>)
 8003722:	429a      	cmp	r2, r3
 8003724:	f040 80ca 	bne.w	80038bc <_strtod_l+0xb24>
 8003728:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800372c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8003730:	ec4b ab10 	vmov	d0, sl, fp
 8003734:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8003738:	f001 fae6 	bl	8004d08 <__ulp>
 800373c:	4640      	mov	r0, r8
 800373e:	ec53 2b10 	vmov	r2, r3, d0
 8003742:	4649      	mov	r1, r9
 8003744:	f7fc ff64 	bl	8000610 <__aeabi_dmul>
 8003748:	4652      	mov	r2, sl
 800374a:	465b      	mov	r3, fp
 800374c:	f7fc fdae 	bl	80002ac <__adddf3>
 8003750:	4a52      	ldr	r2, [pc, #328]	; (800389c <_strtod_l+0xb04>)
 8003752:	4b57      	ldr	r3, [pc, #348]	; (80038b0 <_strtod_l+0xb18>)
 8003754:	400a      	ands	r2, r1
 8003756:	429a      	cmp	r2, r3
 8003758:	4682      	mov	sl, r0
 800375a:	d95c      	bls.n	8003816 <_strtod_l+0xa7e>
 800375c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800375e:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
 8003762:	429a      	cmp	r2, r3
 8003764:	d103      	bne.n	800376e <_strtod_l+0x9d6>
 8003766:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003768:	3301      	adds	r3, #1
 800376a:	f43f ad5f 	beq.w	800322c <_strtod_l+0x494>
 800376e:	f8df b130 	ldr.w	fp, [pc, #304]	; 80038a0 <_strtod_l+0xb08>
 8003772:	f04f 3aff 	mov.w	sl, #4294967295
 8003776:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003778:	9804      	ldr	r0, [sp, #16]
 800377a:	f001 f838 	bl	80047ee <_Bfree>
 800377e:	9906      	ldr	r1, [sp, #24]
 8003780:	9804      	ldr	r0, [sp, #16]
 8003782:	f001 f834 	bl	80047ee <_Bfree>
 8003786:	4629      	mov	r1, r5
 8003788:	9804      	ldr	r0, [sp, #16]
 800378a:	f001 f830 	bl	80047ee <_Bfree>
 800378e:	4621      	mov	r1, r4
 8003790:	9804      	ldr	r0, [sp, #16]
 8003792:	f001 f82c 	bl	80047ee <_Bfree>
 8003796:	e61c      	b.n	80033d2 <_strtod_l+0x63a>
 8003798:	f1ba 0f00 	cmp.w	sl, #0
 800379c:	d118      	bne.n	80037d0 <_strtod_l+0xa38>
 800379e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80037a2:	b9e3      	cbnz	r3, 80037de <_strtod_l+0xa46>
 80037a4:	2200      	movs	r2, #0
 80037a6:	4b40      	ldr	r3, [pc, #256]	; (80038a8 <_strtod_l+0xb10>)
 80037a8:	4630      	mov	r0, r6
 80037aa:	4639      	mov	r1, r7
 80037ac:	f7fd f9a2 	bl	8000af4 <__aeabi_dcmplt>
 80037b0:	b9d0      	cbnz	r0, 80037e8 <_strtod_l+0xa50>
 80037b2:	4630      	mov	r0, r6
 80037b4:	4639      	mov	r1, r7
 80037b6:	2200      	movs	r2, #0
 80037b8:	4b3e      	ldr	r3, [pc, #248]	; (80038b4 <_strtod_l+0xb1c>)
 80037ba:	f7fc ff29 	bl	8000610 <__aeabi_dmul>
 80037be:	4606      	mov	r6, r0
 80037c0:	460f      	mov	r7, r1
 80037c2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80037c6:	9616      	str	r6, [sp, #88]	; 0x58
 80037c8:	9317      	str	r3, [sp, #92]	; 0x5c
 80037ca:	e9dd 8916 	ldrd	r8, r9, [sp, #88]	; 0x58
 80037ce:	e7a2      	b.n	8003716 <_strtod_l+0x97e>
 80037d0:	f1ba 0f01 	cmp.w	sl, #1
 80037d4:	d103      	bne.n	80037de <_strtod_l+0xa46>
 80037d6:	f1bb 0f00 	cmp.w	fp, #0
 80037da:	f43f ad98 	beq.w	800330e <_strtod_l+0x576>
 80037de:	f04f 0800 	mov.w	r8, #0
 80037e2:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 80038b8 <_strtod_l+0xb20>
 80037e6:	e794      	b.n	8003712 <_strtod_l+0x97a>
 80037e8:	2600      	movs	r6, #0
 80037ea:	4f32      	ldr	r7, [pc, #200]	; (80038b4 <_strtod_l+0xb1c>)
 80037ec:	e7e9      	b.n	80037c2 <_strtod_l+0xa2a>
 80037ee:	4b31      	ldr	r3, [pc, #196]	; (80038b4 <_strtod_l+0xb1c>)
 80037f0:	4630      	mov	r0, r6
 80037f2:	4639      	mov	r1, r7
 80037f4:	2200      	movs	r2, #0
 80037f6:	f7fc ff0b 	bl	8000610 <__aeabi_dmul>
 80037fa:	9b08      	ldr	r3, [sp, #32]
 80037fc:	4606      	mov	r6, r0
 80037fe:	460f      	mov	r7, r1
 8003800:	b933      	cbnz	r3, 8003810 <_strtod_l+0xa78>
 8003802:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003806:	9010      	str	r0, [sp, #64]	; 0x40
 8003808:	9311      	str	r3, [sp, #68]	; 0x44
 800380a:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800380e:	e782      	b.n	8003716 <_strtod_l+0x97e>
 8003810:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8003814:	e7f9      	b.n	800380a <_strtod_l+0xa72>
 8003816:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
 800381a:	9b05      	ldr	r3, [sp, #20]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1aa      	bne.n	8003776 <_strtod_l+0x9de>
 8003820:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003824:	0d1b      	lsrs	r3, r3, #20
 8003826:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003828:	051b      	lsls	r3, r3, #20
 800382a:	429a      	cmp	r2, r3
 800382c:	46d8      	mov	r8, fp
 800382e:	d1a2      	bne.n	8003776 <_strtod_l+0x9de>
 8003830:	4639      	mov	r1, r7
 8003832:	4630      	mov	r0, r6
 8003834:	f7fd f986 	bl	8000b44 <__aeabi_d2iz>
 8003838:	f7fc fe84 	bl	8000544 <__aeabi_i2d>
 800383c:	460b      	mov	r3, r1
 800383e:	4602      	mov	r2, r0
 8003840:	4639      	mov	r1, r7
 8003842:	4630      	mov	r0, r6
 8003844:	f7fc fd30 	bl	80002a8 <__aeabi_dsub>
 8003848:	9b08      	ldr	r3, [sp, #32]
 800384a:	4606      	mov	r6, r0
 800384c:	460f      	mov	r7, r1
 800384e:	b933      	cbnz	r3, 800385e <_strtod_l+0xac6>
 8003850:	f1ba 0f00 	cmp.w	sl, #0
 8003854:	d103      	bne.n	800385e <_strtod_l+0xac6>
 8003856:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800385a:	2b00      	cmp	r3, #0
 800385c:	d068      	beq.n	8003930 <_strtod_l+0xb98>
 800385e:	a30a      	add	r3, pc, #40	; (adr r3, 8003888 <_strtod_l+0xaf0>)
 8003860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003864:	4630      	mov	r0, r6
 8003866:	4639      	mov	r1, r7
 8003868:	f7fd f944 	bl	8000af4 <__aeabi_dcmplt>
 800386c:	2800      	cmp	r0, #0
 800386e:	f47f ace8 	bne.w	8003242 <_strtod_l+0x4aa>
 8003872:	a307      	add	r3, pc, #28	; (adr r3, 8003890 <_strtod_l+0xaf8>)
 8003874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003878:	4630      	mov	r0, r6
 800387a:	4639      	mov	r1, r7
 800387c:	f7fd f958 	bl	8000b30 <__aeabi_dcmpgt>
 8003880:	2800      	cmp	r0, #0
 8003882:	f43f af78 	beq.w	8003776 <_strtod_l+0x9de>
 8003886:	e4dc      	b.n	8003242 <_strtod_l+0x4aa>
 8003888:	94a03595 	.word	0x94a03595
 800388c:	3fdfffff 	.word	0x3fdfffff
 8003890:	35afe535 	.word	0x35afe535
 8003894:	3fe00000 	.word	0x3fe00000
 8003898:	000fffff 	.word	0x000fffff
 800389c:	7ff00000 	.word	0x7ff00000
 80038a0:	7fefffff 	.word	0x7fefffff
 80038a4:	39500000 	.word	0x39500000
 80038a8:	3ff00000 	.word	0x3ff00000
 80038ac:	7fe00000 	.word	0x7fe00000
 80038b0:	7c9fffff 	.word	0x7c9fffff
 80038b4:	3fe00000 	.word	0x3fe00000
 80038b8:	bff00000 	.word	0xbff00000
 80038bc:	9b05      	ldr	r3, [sp, #20]
 80038be:	b31b      	cbz	r3, 8003908 <_strtod_l+0xb70>
 80038c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80038c2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80038c6:	d81f      	bhi.n	8003908 <_strtod_l+0xb70>
 80038c8:	a325      	add	r3, pc, #148	; (adr r3, 8003960 <_strtod_l+0xbc8>)
 80038ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ce:	4630      	mov	r0, r6
 80038d0:	4639      	mov	r1, r7
 80038d2:	f7fd f919 	bl	8000b08 <__aeabi_dcmple>
 80038d6:	b190      	cbz	r0, 80038fe <_strtod_l+0xb66>
 80038d8:	4639      	mov	r1, r7
 80038da:	4630      	mov	r0, r6
 80038dc:	f7fd f95a 	bl	8000b94 <__aeabi_d2uiz>
 80038e0:	2800      	cmp	r0, #0
 80038e2:	bf08      	it	eq
 80038e4:	2001      	moveq	r0, #1
 80038e6:	f7fc fe1d 	bl	8000524 <__aeabi_ui2d>
 80038ea:	9b08      	ldr	r3, [sp, #32]
 80038ec:	4606      	mov	r6, r0
 80038ee:	460f      	mov	r7, r1
 80038f0:	b9db      	cbnz	r3, 800392a <_strtod_l+0xb92>
 80038f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80038f6:	9012      	str	r0, [sp, #72]	; 0x48
 80038f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80038fa:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
 80038fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003900:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
 8003904:	eba3 0902 	sub.w	r9, r3, r2
 8003908:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800390c:	f001 f9fc 	bl	8004d08 <__ulp>
 8003910:	4640      	mov	r0, r8
 8003912:	ec53 2b10 	vmov	r2, r3, d0
 8003916:	4649      	mov	r1, r9
 8003918:	f7fc fe7a 	bl	8000610 <__aeabi_dmul>
 800391c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003920:	f7fc fcc4 	bl	80002ac <__adddf3>
 8003924:	4682      	mov	sl, r0
 8003926:	468b      	mov	fp, r1
 8003928:	e777      	b.n	800381a <_strtod_l+0xa82>
 800392a:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800392e:	e7e4      	b.n	80038fa <_strtod_l+0xb62>
 8003930:	a30d      	add	r3, pc, #52	; (adr r3, 8003968 <_strtod_l+0xbd0>)
 8003932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003936:	f7fd f8dd 	bl	8000af4 <__aeabi_dcmplt>
 800393a:	e7a1      	b.n	8003880 <_strtod_l+0xae8>
 800393c:	2300      	movs	r3, #0
 800393e:	9309      	str	r3, [sp, #36]	; 0x24
 8003940:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003942:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	f7ff ba6b 	b.w	8002e20 <_strtod_l+0x88>
 800394a:	2b65      	cmp	r3, #101	; 0x65
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	f43f abb6 	beq.w	80030c0 <_strtod_l+0x328>
 8003954:	4615      	mov	r5, r2
 8003956:	2101      	movs	r1, #1
 8003958:	f7ff badc 	b.w	8002f14 <_strtod_l+0x17c>
 800395c:	f3af 8000 	nop.w
 8003960:	ffc00000 	.word	0xffc00000
 8003964:	41dfffff 	.word	0x41dfffff
 8003968:	94a03595 	.word	0x94a03595
 800396c:	3fcfffff 	.word	0x3fcfffff

08003970 <strtod>:
 8003970:	4b07      	ldr	r3, [pc, #28]	; (8003990 <strtod+0x20>)
 8003972:	4a08      	ldr	r2, [pc, #32]	; (8003994 <strtod+0x24>)
 8003974:	b410      	push	{r4}
 8003976:	681c      	ldr	r4, [r3, #0]
 8003978:	6a23      	ldr	r3, [r4, #32]
 800397a:	2b00      	cmp	r3, #0
 800397c:	bf08      	it	eq
 800397e:	4613      	moveq	r3, r2
 8003980:	460a      	mov	r2, r1
 8003982:	4601      	mov	r1, r0
 8003984:	4620      	mov	r0, r4
 8003986:	f85d 4b04 	ldr.w	r4, [sp], #4
 800398a:	f7ff ba05 	b.w	8002d98 <_strtod_l>
 800398e:	bf00      	nop
 8003990:	2000005c 	.word	0x2000005c
 8003994:	200000c0 	.word	0x200000c0

08003998 <strtok>:
 8003998:	4b13      	ldr	r3, [pc, #76]	; (80039e8 <strtok+0x50>)
 800399a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800399e:	681d      	ldr	r5, [r3, #0]
 80039a0:	6dac      	ldr	r4, [r5, #88]	; 0x58
 80039a2:	4606      	mov	r6, r0
 80039a4:	460f      	mov	r7, r1
 80039a6:	b9b4      	cbnz	r4, 80039d6 <strtok+0x3e>
 80039a8:	2050      	movs	r0, #80	; 0x50
 80039aa:	f7fe feaf 	bl	800270c <malloc>
 80039ae:	65a8      	str	r0, [r5, #88]	; 0x58
 80039b0:	6004      	str	r4, [r0, #0]
 80039b2:	6044      	str	r4, [r0, #4]
 80039b4:	6084      	str	r4, [r0, #8]
 80039b6:	60c4      	str	r4, [r0, #12]
 80039b8:	6104      	str	r4, [r0, #16]
 80039ba:	6144      	str	r4, [r0, #20]
 80039bc:	6184      	str	r4, [r0, #24]
 80039be:	6284      	str	r4, [r0, #40]	; 0x28
 80039c0:	62c4      	str	r4, [r0, #44]	; 0x2c
 80039c2:	6304      	str	r4, [r0, #48]	; 0x30
 80039c4:	6344      	str	r4, [r0, #52]	; 0x34
 80039c6:	6384      	str	r4, [r0, #56]	; 0x38
 80039c8:	63c4      	str	r4, [r0, #60]	; 0x3c
 80039ca:	6404      	str	r4, [r0, #64]	; 0x40
 80039cc:	6444      	str	r4, [r0, #68]	; 0x44
 80039ce:	6484      	str	r4, [r0, #72]	; 0x48
 80039d0:	64c4      	str	r4, [r0, #76]	; 0x4c
 80039d2:	7704      	strb	r4, [r0, #28]
 80039d4:	6244      	str	r4, [r0, #36]	; 0x24
 80039d6:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80039d8:	4639      	mov	r1, r7
 80039da:	4630      	mov	r0, r6
 80039dc:	2301      	movs	r3, #1
 80039de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039e2:	f000 b803 	b.w	80039ec <__strtok_r>
 80039e6:	bf00      	nop
 80039e8:	2000005c 	.word	0x2000005c

080039ec <__strtok_r>:
 80039ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039ee:	b918      	cbnz	r0, 80039f8 <__strtok_r+0xc>
 80039f0:	6810      	ldr	r0, [r2, #0]
 80039f2:	b908      	cbnz	r0, 80039f8 <__strtok_r+0xc>
 80039f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039f6:	4620      	mov	r0, r4
 80039f8:	4604      	mov	r4, r0
 80039fa:	460f      	mov	r7, r1
 80039fc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003a00:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003a04:	b91e      	cbnz	r6, 8003a0e <__strtok_r+0x22>
 8003a06:	b965      	cbnz	r5, 8003a22 <__strtok_r+0x36>
 8003a08:	6015      	str	r5, [r2, #0]
 8003a0a:	4628      	mov	r0, r5
 8003a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a0e:	42b5      	cmp	r5, r6
 8003a10:	d1f6      	bne.n	8003a00 <__strtok_r+0x14>
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1ef      	bne.n	80039f6 <__strtok_r+0xa>
 8003a16:	6014      	str	r4, [r2, #0]
 8003a18:	7003      	strb	r3, [r0, #0]
 8003a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a1c:	461c      	mov	r4, r3
 8003a1e:	e00c      	b.n	8003a3a <__strtok_r+0x4e>
 8003a20:	b915      	cbnz	r5, 8003a28 <__strtok_r+0x3c>
 8003a22:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003a26:	460e      	mov	r6, r1
 8003a28:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003a2c:	42ab      	cmp	r3, r5
 8003a2e:	d1f7      	bne.n	8003a20 <__strtok_r+0x34>
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0f3      	beq.n	8003a1c <__strtok_r+0x30>
 8003a34:	2300      	movs	r3, #0
 8003a36:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003a3a:	6014      	str	r4, [r2, #0]
 8003a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003a40 <time>:
 8003a40:	b513      	push	{r0, r1, r4, lr}
 8003a42:	4b08      	ldr	r3, [pc, #32]	; (8003a64 <time+0x24>)
 8003a44:	4604      	mov	r4, r0
 8003a46:	2200      	movs	r2, #0
 8003a48:	6818      	ldr	r0, [r3, #0]
 8003a4a:	4669      	mov	r1, sp
 8003a4c:	f000 fdb8 	bl	80045c0 <_gettimeofday_r>
 8003a50:	2800      	cmp	r0, #0
 8003a52:	bfbc      	itt	lt
 8003a54:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a58:	9300      	strlt	r3, [sp, #0]
 8003a5a:	9800      	ldr	r0, [sp, #0]
 8003a5c:	b104      	cbz	r4, 8003a60 <time+0x20>
 8003a5e:	6020      	str	r0, [r4, #0]
 8003a60:	b002      	add	sp, #8
 8003a62:	bd10      	pop	{r4, pc}
 8003a64:	2000005c 	.word	0x2000005c

08003a68 <__tzcalc_limits>:
 8003a68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a6c:	4604      	mov	r4, r0
 8003a6e:	f000 fdb9 	bl	80045e4 <__gettzinfo>
 8003a72:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8003a76:	429c      	cmp	r4, r3
 8003a78:	f340 8098 	ble.w	8003bac <__tzcalc_limits+0x144>
 8003a7c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8003a80:	18e3      	adds	r3, r4, r3
 8003a82:	109b      	asrs	r3, r3, #2
 8003a84:	f240 126d 	movw	r2, #365	; 0x16d
 8003a88:	f2a4 75b2 	subw	r5, r4, #1970	; 0x7b2
 8003a8c:	fb02 3505 	mla	r5, r2, r5, r3
 8003a90:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8003a94:	f2a4 736d 	subw	r3, r4, #1901	; 0x76d
 8003a98:	fb93 f3f2 	sdiv	r3, r3, r2
 8003a9c:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8003aa0:	441d      	add	r5, r3
 8003aa2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003aa6:	18a2      	adds	r2, r4, r2
 8003aa8:	fb94 f7f3 	sdiv	r7, r4, r3
 8003aac:	fb92 f2f3 	sdiv	r2, r2, r3
 8003ab0:	fb03 4717 	mls	r7, r3, r7, r4
 8003ab4:	f100 0338 	add.w	r3, r0, #56	; 0x38
 8003ab8:	4415      	add	r5, r2
 8003aba:	fab7 fe87 	clz	lr, r7
 8003abe:	2264      	movs	r2, #100	; 0x64
 8003ac0:	9301      	str	r3, [sp, #4]
 8003ac2:	f004 0303 	and.w	r3, r4, #3
 8003ac6:	fb94 f6f2 	sdiv	r6, r4, r2
 8003aca:	6044      	str	r4, [r0, #4]
 8003acc:	fb02 4616 	mls	r6, r2, r6, r4
 8003ad0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8003ad4:	4601      	mov	r1, r0
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	f06f 4c40 	mvn.w	ip, #3221225472	; 0xc0000000
 8003adc:	7a0b      	ldrb	r3, [r1, #8]
 8003ade:	2b4a      	cmp	r3, #74	; 0x4a
 8003ae0:	d123      	bne.n	8003b2a <__tzcalc_limits+0xc2>
 8003ae2:	694c      	ldr	r4, [r1, #20]
 8003ae4:	9a00      	ldr	r2, [sp, #0]
 8003ae6:	192b      	adds	r3, r5, r4
 8003ae8:	b902      	cbnz	r2, 8003aec <__tzcalc_limits+0x84>
 8003aea:	b906      	cbnz	r6, 8003aee <__tzcalc_limits+0x86>
 8003aec:	b9df      	cbnz	r7, 8003b26 <__tzcalc_limits+0xbe>
 8003aee:	2c3b      	cmp	r4, #59	; 0x3b
 8003af0:	bfd4      	ite	le
 8003af2:	2400      	movle	r4, #0
 8003af4:	2401      	movgt	r4, #1
 8003af6:	441c      	add	r4, r3
 8003af8:	3c01      	subs	r4, #1
 8003afa:	4b2d      	ldr	r3, [pc, #180]	; (8003bb0 <__tzcalc_limits+0x148>)
 8003afc:	698a      	ldr	r2, [r1, #24]
 8003afe:	fb03 2404 	mla	r4, r3, r4, r2
 8003b02:	6a0b      	ldr	r3, [r1, #32]
 8003b04:	441c      	add	r4, r3
 8003b06:	f841 4f1c 	str.w	r4, [r1, #28]!
 8003b0a:	9b01      	ldr	r3, [sp, #4]
 8003b0c:	428b      	cmp	r3, r1
 8003b0e:	d1e5      	bne.n	8003adc <__tzcalc_limits+0x74>
 8003b10:	69c3      	ldr	r3, [r0, #28]
 8003b12:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003b14:	4293      	cmp	r3, r2
 8003b16:	bfac      	ite	ge
 8003b18:	2300      	movge	r3, #0
 8003b1a:	2301      	movlt	r3, #1
 8003b1c:	6003      	str	r3, [r0, #0]
 8003b1e:	2001      	movs	r0, #1
 8003b20:	b003      	add	sp, #12
 8003b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b26:	2400      	movs	r4, #0
 8003b28:	e7e5      	b.n	8003af6 <__tzcalc_limits+0x8e>
 8003b2a:	2b44      	cmp	r3, #68	; 0x44
 8003b2c:	d102      	bne.n	8003b34 <__tzcalc_limits+0xcc>
 8003b2e:	694b      	ldr	r3, [r1, #20]
 8003b30:	18ec      	adds	r4, r5, r3
 8003b32:	e7e2      	b.n	8003afa <__tzcalc_limits+0x92>
 8003b34:	9b00      	ldr	r3, [sp, #0]
 8003b36:	bb7b      	cbnz	r3, 8003b98 <__tzcalc_limits+0x130>
 8003b38:	2e00      	cmp	r6, #0
 8003b3a:	bf0c      	ite	eq
 8003b3c:	46f0      	moveq	r8, lr
 8003b3e:	f04f 0801 	movne.w	r8, #1
 8003b42:	4b1c      	ldr	r3, [pc, #112]	; (8003bb4 <__tzcalc_limits+0x14c>)
 8003b44:	68cc      	ldr	r4, [r1, #12]
 8003b46:	2230      	movs	r2, #48	; 0x30
 8003b48:	fb02 3808 	mla	r8, r2, r8, r3
 8003b4c:	f1a8 0a04 	sub.w	sl, r8, #4
 8003b50:	462b      	mov	r3, r5
 8003b52:	f04f 0901 	mov.w	r9, #1
 8003b56:	45a1      	cmp	r9, r4
 8003b58:	db20      	blt.n	8003b9c <__tzcalc_limits+0x134>
 8003b5a:	2c01      	cmp	r4, #1
 8003b5c:	bfb8      	it	lt
 8003b5e:	2401      	movlt	r4, #1
 8003b60:	46a1      	mov	r9, r4
 8003b62:	f103 0b04 	add.w	fp, r3, #4
 8003b66:	2207      	movs	r2, #7
 8003b68:	694c      	ldr	r4, [r1, #20]
 8003b6a:	fb9b faf2 	sdiv	sl, fp, r2
 8003b6e:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 8003b72:	ebab 0a0a 	sub.w	sl, fp, sl
 8003b76:	ebb4 0a0a 	subs.w	sl, r4, sl
 8003b7a:	690c      	ldr	r4, [r1, #16]
 8003b7c:	44e1      	add	r9, ip
 8003b7e:	f104 34ff 	add.w	r4, r4, #4294967295
 8003b82:	bf48      	it	mi
 8003b84:	4492      	addmi	sl, r2
 8003b86:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8003b8a:	f858 8029 	ldr.w	r8, [r8, r9, lsl #2]
 8003b8e:	4454      	add	r4, sl
 8003b90:	4544      	cmp	r4, r8
 8003b92:	da09      	bge.n	8003ba8 <__tzcalc_limits+0x140>
 8003b94:	441c      	add	r4, r3
 8003b96:	e7b0      	b.n	8003afa <__tzcalc_limits+0x92>
 8003b98:	46f0      	mov	r8, lr
 8003b9a:	e7d2      	b.n	8003b42 <__tzcalc_limits+0xda>
 8003b9c:	f85a bf04 	ldr.w	fp, [sl, #4]!
 8003ba0:	f109 0901 	add.w	r9, r9, #1
 8003ba4:	445b      	add	r3, fp
 8003ba6:	e7d6      	b.n	8003b56 <__tzcalc_limits+0xee>
 8003ba8:	3c07      	subs	r4, #7
 8003baa:	e7f1      	b.n	8003b90 <__tzcalc_limits+0x128>
 8003bac:	2000      	movs	r0, #0
 8003bae:	e7b7      	b.n	8003b20 <__tzcalc_limits+0xb8>
 8003bb0:	00015180 	.word	0x00015180
 8003bb4:	08005a74 	.word	0x08005a74

08003bb8 <__tz_lock>:
 8003bb8:	4770      	bx	lr

08003bba <__tz_unlock>:
 8003bba:	4770      	bx	lr

08003bbc <_tzset_unlocked>:
 8003bbc:	4b01      	ldr	r3, [pc, #4]	; (8003bc4 <_tzset_unlocked+0x8>)
 8003bbe:	6818      	ldr	r0, [r3, #0]
 8003bc0:	f000 b802 	b.w	8003bc8 <_tzset_unlocked_r>
 8003bc4:	2000005c 	.word	0x2000005c

08003bc8 <_tzset_unlocked_r>:
 8003bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bcc:	b08d      	sub	sp, #52	; 0x34
 8003bce:	4607      	mov	r7, r0
 8003bd0:	f000 fd08 	bl	80045e4 <__gettzinfo>
 8003bd4:	49b1      	ldr	r1, [pc, #708]	; (8003e9c <_tzset_unlocked_r+0x2d4>)
 8003bd6:	4eb2      	ldr	r6, [pc, #712]	; (8003ea0 <_tzset_unlocked_r+0x2d8>)
 8003bd8:	4605      	mov	r5, r0
 8003bda:	4638      	mov	r0, r7
 8003bdc:	f000 fce8 	bl	80045b0 <_getenv_r>
 8003be0:	4604      	mov	r4, r0
 8003be2:	b970      	cbnz	r0, 8003c02 <_tzset_unlocked_r+0x3a>
 8003be4:	4baf      	ldr	r3, [pc, #700]	; (8003ea4 <_tzset_unlocked_r+0x2dc>)
 8003be6:	4ab0      	ldr	r2, [pc, #704]	; (8003ea8 <_tzset_unlocked_r+0x2e0>)
 8003be8:	6018      	str	r0, [r3, #0]
 8003bea:	4bb0      	ldr	r3, [pc, #704]	; (8003eac <_tzset_unlocked_r+0x2e4>)
 8003bec:	6018      	str	r0, [r3, #0]
 8003bee:	4bb0      	ldr	r3, [pc, #704]	; (8003eb0 <_tzset_unlocked_r+0x2e8>)
 8003bf0:	6830      	ldr	r0, [r6, #0]
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	605a      	str	r2, [r3, #4]
 8003bf6:	f7fe fd91 	bl	800271c <free>
 8003bfa:	6034      	str	r4, [r6, #0]
 8003bfc:	b00d      	add	sp, #52	; 0x34
 8003bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c02:	6831      	ldr	r1, [r6, #0]
 8003c04:	2900      	cmp	r1, #0
 8003c06:	d160      	bne.n	8003cca <_tzset_unlocked_r+0x102>
 8003c08:	6830      	ldr	r0, [r6, #0]
 8003c0a:	f7fe fd87 	bl	800271c <free>
 8003c0e:	4620      	mov	r0, r4
 8003c10:	f7fc fae8 	bl	80001e4 <strlen>
 8003c14:	1c41      	adds	r1, r0, #1
 8003c16:	4638      	mov	r0, r7
 8003c18:	f7ff f832 	bl	8002c80 <_malloc_r>
 8003c1c:	6030      	str	r0, [r6, #0]
 8003c1e:	2800      	cmp	r0, #0
 8003c20:	d158      	bne.n	8003cd4 <_tzset_unlocked_r+0x10c>
 8003c22:	7823      	ldrb	r3, [r4, #0]
 8003c24:	4aa3      	ldr	r2, [pc, #652]	; (8003eb4 <_tzset_unlocked_r+0x2ec>)
 8003c26:	49a4      	ldr	r1, [pc, #656]	; (8003eb8 <_tzset_unlocked_r+0x2f0>)
 8003c28:	2b3a      	cmp	r3, #58	; 0x3a
 8003c2a:	bf08      	it	eq
 8003c2c:	3401      	addeq	r4, #1
 8003c2e:	ae0a      	add	r6, sp, #40	; 0x28
 8003c30:	4633      	mov	r3, r6
 8003c32:	4620      	mov	r0, r4
 8003c34:	f001 f9a2 	bl	8004f7c <siscanf>
 8003c38:	2800      	cmp	r0, #0
 8003c3a:	dddf      	ble.n	8003bfc <_tzset_unlocked_r+0x34>
 8003c3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c3e:	18e7      	adds	r7, r4, r3
 8003c40:	5ce3      	ldrb	r3, [r4, r3]
 8003c42:	2b2d      	cmp	r3, #45	; 0x2d
 8003c44:	d14a      	bne.n	8003cdc <_tzset_unlocked_r+0x114>
 8003c46:	3701      	adds	r7, #1
 8003c48:	f04f 34ff 	mov.w	r4, #4294967295
 8003c4c:	f10d 0a20 	add.w	sl, sp, #32
 8003c50:	f10d 0b1e 	add.w	fp, sp, #30
 8003c54:	f04f 0800 	mov.w	r8, #0
 8003c58:	9603      	str	r6, [sp, #12]
 8003c5a:	f8cd a008 	str.w	sl, [sp, #8]
 8003c5e:	9601      	str	r6, [sp, #4]
 8003c60:	f8cd b000 	str.w	fp, [sp]
 8003c64:	4633      	mov	r3, r6
 8003c66:	aa07      	add	r2, sp, #28
 8003c68:	4994      	ldr	r1, [pc, #592]	; (8003ebc <_tzset_unlocked_r+0x2f4>)
 8003c6a:	f8ad 801e 	strh.w	r8, [sp, #30]
 8003c6e:	4638      	mov	r0, r7
 8003c70:	f8ad 8020 	strh.w	r8, [sp, #32]
 8003c74:	f001 f982 	bl	8004f7c <siscanf>
 8003c78:	4540      	cmp	r0, r8
 8003c7a:	ddbf      	ble.n	8003bfc <_tzset_unlocked_r+0x34>
 8003c7c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8003c80:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8003c84:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8003ec8 <_tzset_unlocked_r+0x300>
 8003c88:	213c      	movs	r1, #60	; 0x3c
 8003c8a:	fb01 2203 	mla	r2, r1, r3, r2
 8003c8e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8003c92:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003c96:	fb01 2303 	mla	r3, r1, r3, r2
 8003c9a:	435c      	muls	r4, r3
 8003c9c:	622c      	str	r4, [r5, #32]
 8003c9e:	4c84      	ldr	r4, [pc, #528]	; (8003eb0 <_tzset_unlocked_r+0x2e8>)
 8003ca0:	4b84      	ldr	r3, [pc, #528]	; (8003eb4 <_tzset_unlocked_r+0x2ec>)
 8003ca2:	6023      	str	r3, [r4, #0]
 8003ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ca6:	4984      	ldr	r1, [pc, #528]	; (8003eb8 <_tzset_unlocked_r+0x2f0>)
 8003ca8:	441f      	add	r7, r3
 8003caa:	464a      	mov	r2, r9
 8003cac:	4633      	mov	r3, r6
 8003cae:	4638      	mov	r0, r7
 8003cb0:	f001 f964 	bl	8004f7c <siscanf>
 8003cb4:	4540      	cmp	r0, r8
 8003cb6:	dc16      	bgt.n	8003ce6 <_tzset_unlocked_r+0x11e>
 8003cb8:	6823      	ldr	r3, [r4, #0]
 8003cba:	6063      	str	r3, [r4, #4]
 8003cbc:	4b79      	ldr	r3, [pc, #484]	; (8003ea4 <_tzset_unlocked_r+0x2dc>)
 8003cbe:	6a2a      	ldr	r2, [r5, #32]
 8003cc0:	601a      	str	r2, [r3, #0]
 8003cc2:	4b7a      	ldr	r3, [pc, #488]	; (8003eac <_tzset_unlocked_r+0x2e4>)
 8003cc4:	f8c3 8000 	str.w	r8, [r3]
 8003cc8:	e798      	b.n	8003bfc <_tzset_unlocked_r+0x34>
 8003cca:	f7fc fa81 	bl	80001d0 <strcmp>
 8003cce:	2800      	cmp	r0, #0
 8003cd0:	d094      	beq.n	8003bfc <_tzset_unlocked_r+0x34>
 8003cd2:	e799      	b.n	8003c08 <_tzset_unlocked_r+0x40>
 8003cd4:	4621      	mov	r1, r4
 8003cd6:	f001 f97d 	bl	8004fd4 <strcpy>
 8003cda:	e7a2      	b.n	8003c22 <_tzset_unlocked_r+0x5a>
 8003cdc:	2b2b      	cmp	r3, #43	; 0x2b
 8003cde:	bf08      	it	eq
 8003ce0:	3701      	addeq	r7, #1
 8003ce2:	2401      	movs	r4, #1
 8003ce4:	e7b2      	b.n	8003c4c <_tzset_unlocked_r+0x84>
 8003ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ce8:	f8c4 9004 	str.w	r9, [r4, #4]
 8003cec:	18fc      	adds	r4, r7, r3
 8003cee:	5cfb      	ldrb	r3, [r7, r3]
 8003cf0:	2b2d      	cmp	r3, #45	; 0x2d
 8003cf2:	f040 8092 	bne.w	8003e1a <_tzset_unlocked_r+0x252>
 8003cf6:	3401      	adds	r4, #1
 8003cf8:	f04f 37ff 	mov.w	r7, #4294967295
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	f8ad 301c 	strh.w	r3, [sp, #28]
 8003d02:	f8ad 301e 	strh.w	r3, [sp, #30]
 8003d06:	f8ad 3020 	strh.w	r3, [sp, #32]
 8003d0a:	930a      	str	r3, [sp, #40]	; 0x28
 8003d0c:	9603      	str	r6, [sp, #12]
 8003d0e:	f8cd a008 	str.w	sl, [sp, #8]
 8003d12:	9601      	str	r6, [sp, #4]
 8003d14:	f8cd b000 	str.w	fp, [sp]
 8003d18:	4633      	mov	r3, r6
 8003d1a:	aa07      	add	r2, sp, #28
 8003d1c:	4967      	ldr	r1, [pc, #412]	; (8003ebc <_tzset_unlocked_r+0x2f4>)
 8003d1e:	4620      	mov	r0, r4
 8003d20:	f001 f92c 	bl	8004f7c <siscanf>
 8003d24:	2800      	cmp	r0, #0
 8003d26:	dc7d      	bgt.n	8003e24 <_tzset_unlocked_r+0x25c>
 8003d28:	6a2b      	ldr	r3, [r5, #32]
 8003d2a:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8003d2e:	63eb      	str	r3, [r5, #60]	; 0x3c
 8003d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d32:	462f      	mov	r7, r5
 8003d34:	441c      	add	r4, r3
 8003d36:	f04f 0900 	mov.w	r9, #0
 8003d3a:	7823      	ldrb	r3, [r4, #0]
 8003d3c:	2b2c      	cmp	r3, #44	; 0x2c
 8003d3e:	bf08      	it	eq
 8003d40:	3401      	addeq	r4, #1
 8003d42:	f894 8000 	ldrb.w	r8, [r4]
 8003d46:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8003d4a:	d17b      	bne.n	8003e44 <_tzset_unlocked_r+0x27c>
 8003d4c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8003d50:	9302      	str	r3, [sp, #8]
 8003d52:	ab09      	add	r3, sp, #36	; 0x24
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	9603      	str	r6, [sp, #12]
 8003d58:	9601      	str	r6, [sp, #4]
 8003d5a:	4633      	mov	r3, r6
 8003d5c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8003d60:	4957      	ldr	r1, [pc, #348]	; (8003ec0 <_tzset_unlocked_r+0x2f8>)
 8003d62:	4620      	mov	r0, r4
 8003d64:	f001 f90a 	bl	8004f7c <siscanf>
 8003d68:	2803      	cmp	r0, #3
 8003d6a:	f47f af47 	bne.w	8003bfc <_tzset_unlocked_r+0x34>
 8003d6e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8003d72:	1e4b      	subs	r3, r1, #1
 8003d74:	2b0b      	cmp	r3, #11
 8003d76:	f63f af41 	bhi.w	8003bfc <_tzset_unlocked_r+0x34>
 8003d7a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8003d7e:	1e53      	subs	r3, r2, #1
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	f63f af3b 	bhi.w	8003bfc <_tzset_unlocked_r+0x34>
 8003d86:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8003d8a:	2b06      	cmp	r3, #6
 8003d8c:	f63f af36 	bhi.w	8003bfc <_tzset_unlocked_r+0x34>
 8003d90:	f887 8008 	strb.w	r8, [r7, #8]
 8003d94:	60f9      	str	r1, [r7, #12]
 8003d96:	613a      	str	r2, [r7, #16]
 8003d98:	617b      	str	r3, [r7, #20]
 8003d9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d9c:	eb04 0803 	add.w	r8, r4, r3
 8003da0:	2302      	movs	r3, #2
 8003da2:	f8ad 301c 	strh.w	r3, [sp, #28]
 8003da6:	2300      	movs	r3, #0
 8003da8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8003dac:	f8ad 3020 	strh.w	r3, [sp, #32]
 8003db0:	930a      	str	r3, [sp, #40]	; 0x28
 8003db2:	f898 3000 	ldrb.w	r3, [r8]
 8003db6:	2b2f      	cmp	r3, #47	; 0x2f
 8003db8:	d10b      	bne.n	8003dd2 <_tzset_unlocked_r+0x20a>
 8003dba:	9603      	str	r6, [sp, #12]
 8003dbc:	f8cd a008 	str.w	sl, [sp, #8]
 8003dc0:	9601      	str	r6, [sp, #4]
 8003dc2:	f8cd b000 	str.w	fp, [sp]
 8003dc6:	4633      	mov	r3, r6
 8003dc8:	aa07      	add	r2, sp, #28
 8003dca:	493e      	ldr	r1, [pc, #248]	; (8003ec4 <_tzset_unlocked_r+0x2fc>)
 8003dcc:	4640      	mov	r0, r8
 8003dce:	f001 f8d5 	bl	8004f7c <siscanf>
 8003dd2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8003dd6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8003dda:	213c      	movs	r1, #60	; 0x3c
 8003ddc:	fb01 2203 	mla	r2, r1, r3, r2
 8003de0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8003de4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003de8:	fb01 2303 	mla	r3, r1, r3, r2
 8003dec:	61bb      	str	r3, [r7, #24]
 8003dee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003df0:	f109 0901 	add.w	r9, r9, #1
 8003df4:	f1b9 0f02 	cmp.w	r9, #2
 8003df8:	4444      	add	r4, r8
 8003dfa:	f107 071c 	add.w	r7, r7, #28
 8003dfe:	d19c      	bne.n	8003d3a <_tzset_unlocked_r+0x172>
 8003e00:	6868      	ldr	r0, [r5, #4]
 8003e02:	f7ff fe31 	bl	8003a68 <__tzcalc_limits>
 8003e06:	4b27      	ldr	r3, [pc, #156]	; (8003ea4 <_tzset_unlocked_r+0x2dc>)
 8003e08:	6a2a      	ldr	r2, [r5, #32]
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003e0e:	1a9b      	subs	r3, r3, r2
 8003e10:	4a26      	ldr	r2, [pc, #152]	; (8003eac <_tzset_unlocked_r+0x2e4>)
 8003e12:	bf18      	it	ne
 8003e14:	2301      	movne	r3, #1
 8003e16:	6013      	str	r3, [r2, #0]
 8003e18:	e6f0      	b.n	8003bfc <_tzset_unlocked_r+0x34>
 8003e1a:	2b2b      	cmp	r3, #43	; 0x2b
 8003e1c:	bf08      	it	eq
 8003e1e:	3401      	addeq	r4, #1
 8003e20:	2701      	movs	r7, #1
 8003e22:	e76b      	b.n	8003cfc <_tzset_unlocked_r+0x134>
 8003e24:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8003e28:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8003e2c:	213c      	movs	r1, #60	; 0x3c
 8003e2e:	fb01 2203 	mla	r2, r1, r3, r2
 8003e32:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8003e36:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003e3a:	fb01 2303 	mla	r3, r1, r3, r2
 8003e3e:	435f      	muls	r7, r3
 8003e40:	63ef      	str	r7, [r5, #60]	; 0x3c
 8003e42:	e775      	b.n	8003d30 <_tzset_unlocked_r+0x168>
 8003e44:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8003e48:	bf06      	itte	eq
 8003e4a:	3401      	addeq	r4, #1
 8003e4c:	4643      	moveq	r3, r8
 8003e4e:	2344      	movne	r3, #68	; 0x44
 8003e50:	220a      	movs	r2, #10
 8003e52:	a90b      	add	r1, sp, #44	; 0x2c
 8003e54:	4620      	mov	r0, r4
 8003e56:	9305      	str	r3, [sp, #20]
 8003e58:	f001 f966 	bl	8005128 <strtoul>
 8003e5c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8003e60:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8003e64:	4544      	cmp	r4, r8
 8003e66:	9b05      	ldr	r3, [sp, #20]
 8003e68:	d114      	bne.n	8003e94 <_tzset_unlocked_r+0x2cc>
 8003e6a:	234d      	movs	r3, #77	; 0x4d
 8003e6c:	f1b9 0f00 	cmp.w	r9, #0
 8003e70:	d107      	bne.n	8003e82 <_tzset_unlocked_r+0x2ba>
 8003e72:	722b      	strb	r3, [r5, #8]
 8003e74:	2303      	movs	r3, #3
 8003e76:	60eb      	str	r3, [r5, #12]
 8003e78:	2302      	movs	r3, #2
 8003e7a:	612b      	str	r3, [r5, #16]
 8003e7c:	f8c5 9014 	str.w	r9, [r5, #20]
 8003e80:	e78e      	b.n	8003da0 <_tzset_unlocked_r+0x1d8>
 8003e82:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8003e86:	230b      	movs	r3, #11
 8003e88:	62ab      	str	r3, [r5, #40]	; 0x28
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	62eb      	str	r3, [r5, #44]	; 0x2c
 8003e8e:	2300      	movs	r3, #0
 8003e90:	632b      	str	r3, [r5, #48]	; 0x30
 8003e92:	e785      	b.n	8003da0 <_tzset_unlocked_r+0x1d8>
 8003e94:	b280      	uxth	r0, r0
 8003e96:	723b      	strb	r3, [r7, #8]
 8003e98:	6178      	str	r0, [r7, #20]
 8003e9a:	e781      	b.n	8003da0 <_tzset_unlocked_r+0x1d8>
 8003e9c:	08005b30 	.word	0x08005b30
 8003ea0:	20000270 	.word	0x20000270
 8003ea4:	20000278 	.word	0x20000278
 8003ea8:	08005b33 	.word	0x08005b33
 8003eac:	20000274 	.word	0x20000274
 8003eb0:	20000014 	.word	0x20000014
 8003eb4:	20000263 	.word	0x20000263
 8003eb8:	08005b37 	.word	0x08005b37
 8003ebc:	08005b5a 	.word	0x08005b5a
 8003ec0:	08005b46 	.word	0x08005b46
 8003ec4:	08005b59 	.word	0x08005b59
 8003ec8:	20000258 	.word	0x20000258

08003ecc <div>:
 8003ecc:	2900      	cmp	r1, #0
 8003ece:	b510      	push	{r4, lr}
 8003ed0:	fb91 f4f2 	sdiv	r4, r1, r2
 8003ed4:	fb02 1314 	mls	r3, r2, r4, r1
 8003ed8:	db06      	blt.n	8003ee8 <div+0x1c>
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	da01      	bge.n	8003ee2 <div+0x16>
 8003ede:	3401      	adds	r4, #1
 8003ee0:	1a9b      	subs	r3, r3, r2
 8003ee2:	6004      	str	r4, [r0, #0]
 8003ee4:	6043      	str	r3, [r0, #4]
 8003ee6:	bd10      	pop	{r4, pc}
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	bfc4      	itt	gt
 8003eec:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8003ef0:	189b      	addgt	r3, r3, r2
 8003ef2:	e7f6      	b.n	8003ee2 <div+0x16>

08003ef4 <rshift>:
 8003ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ef6:	6906      	ldr	r6, [r0, #16]
 8003ef8:	114b      	asrs	r3, r1, #5
 8003efa:	42b3      	cmp	r3, r6
 8003efc:	f100 0514 	add.w	r5, r0, #20
 8003f00:	da2b      	bge.n	8003f5a <rshift+0x66>
 8003f02:	f011 011f 	ands.w	r1, r1, #31
 8003f06:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8003f0a:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8003f0e:	d108      	bne.n	8003f22 <rshift+0x2e>
 8003f10:	4629      	mov	r1, r5
 8003f12:	42b2      	cmp	r2, r6
 8003f14:	460b      	mov	r3, r1
 8003f16:	d210      	bcs.n	8003f3a <rshift+0x46>
 8003f18:	f852 3b04 	ldr.w	r3, [r2], #4
 8003f1c:	f841 3b04 	str.w	r3, [r1], #4
 8003f20:	e7f7      	b.n	8003f12 <rshift+0x1e>
 8003f22:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 8003f26:	f1c1 0e20 	rsb	lr, r1, #32
 8003f2a:	3204      	adds	r2, #4
 8003f2c:	40cc      	lsrs	r4, r1
 8003f2e:	462b      	mov	r3, r5
 8003f30:	42b2      	cmp	r2, r6
 8003f32:	d308      	bcc.n	8003f46 <rshift+0x52>
 8003f34:	601c      	str	r4, [r3, #0]
 8003f36:	b104      	cbz	r4, 8003f3a <rshift+0x46>
 8003f38:	3304      	adds	r3, #4
 8003f3a:	1b5b      	subs	r3, r3, r5
 8003f3c:	109b      	asrs	r3, r3, #2
 8003f3e:	6103      	str	r3, [r0, #16]
 8003f40:	b903      	cbnz	r3, 8003f44 <rshift+0x50>
 8003f42:	6143      	str	r3, [r0, #20]
 8003f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f46:	6817      	ldr	r7, [r2, #0]
 8003f48:	fa07 f70e 	lsl.w	r7, r7, lr
 8003f4c:	433c      	orrs	r4, r7
 8003f4e:	f843 4b04 	str.w	r4, [r3], #4
 8003f52:	f852 4b04 	ldr.w	r4, [r2], #4
 8003f56:	40cc      	lsrs	r4, r1
 8003f58:	e7ea      	b.n	8003f30 <rshift+0x3c>
 8003f5a:	462b      	mov	r3, r5
 8003f5c:	e7ed      	b.n	8003f3a <rshift+0x46>

08003f5e <__hexdig_fun>:
 8003f5e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8003f62:	2b09      	cmp	r3, #9
 8003f64:	d802      	bhi.n	8003f6c <__hexdig_fun+0xe>
 8003f66:	3820      	subs	r0, #32
 8003f68:	b2c0      	uxtb	r0, r0
 8003f6a:	4770      	bx	lr
 8003f6c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8003f70:	2b05      	cmp	r3, #5
 8003f72:	d801      	bhi.n	8003f78 <__hexdig_fun+0x1a>
 8003f74:	3847      	subs	r0, #71	; 0x47
 8003f76:	e7f7      	b.n	8003f68 <__hexdig_fun+0xa>
 8003f78:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8003f7c:	2b05      	cmp	r3, #5
 8003f7e:	d801      	bhi.n	8003f84 <__hexdig_fun+0x26>
 8003f80:	3827      	subs	r0, #39	; 0x27
 8003f82:	e7f1      	b.n	8003f68 <__hexdig_fun+0xa>
 8003f84:	2000      	movs	r0, #0
 8003f86:	4770      	bx	lr

08003f88 <__gethex>:
 8003f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f8c:	b08b      	sub	sp, #44	; 0x2c
 8003f8e:	468a      	mov	sl, r1
 8003f90:	9002      	str	r0, [sp, #8]
 8003f92:	9816      	ldr	r0, [sp, #88]	; 0x58
 8003f94:	9306      	str	r3, [sp, #24]
 8003f96:	4690      	mov	r8, r2
 8003f98:	f000 fbd4 	bl	8004744 <__localeconv_l>
 8003f9c:	6803      	ldr	r3, [r0, #0]
 8003f9e:	9303      	str	r3, [sp, #12]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fc f91f 	bl	80001e4 <strlen>
 8003fa6:	9b03      	ldr	r3, [sp, #12]
 8003fa8:	9001      	str	r0, [sp, #4]
 8003faa:	4403      	add	r3, r0
 8003fac:	f04f 0b00 	mov.w	fp, #0
 8003fb0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8003fb4:	9307      	str	r3, [sp, #28]
 8003fb6:	f8da 3000 	ldr.w	r3, [sl]
 8003fba:	3302      	adds	r3, #2
 8003fbc:	461f      	mov	r7, r3
 8003fbe:	f813 0b01 	ldrb.w	r0, [r3], #1
 8003fc2:	2830      	cmp	r0, #48	; 0x30
 8003fc4:	d06c      	beq.n	80040a0 <__gethex+0x118>
 8003fc6:	f7ff ffca 	bl	8003f5e <__hexdig_fun>
 8003fca:	4604      	mov	r4, r0
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	d16a      	bne.n	80040a6 <__gethex+0x11e>
 8003fd0:	9a01      	ldr	r2, [sp, #4]
 8003fd2:	9903      	ldr	r1, [sp, #12]
 8003fd4:	4638      	mov	r0, r7
 8003fd6:	f001 f805 	bl	8004fe4 <strncmp>
 8003fda:	2800      	cmp	r0, #0
 8003fdc:	d166      	bne.n	80040ac <__gethex+0x124>
 8003fde:	9b01      	ldr	r3, [sp, #4]
 8003fe0:	5cf8      	ldrb	r0, [r7, r3]
 8003fe2:	18fe      	adds	r6, r7, r3
 8003fe4:	f7ff ffbb 	bl	8003f5e <__hexdig_fun>
 8003fe8:	2800      	cmp	r0, #0
 8003fea:	d062      	beq.n	80040b2 <__gethex+0x12a>
 8003fec:	4633      	mov	r3, r6
 8003fee:	7818      	ldrb	r0, [r3, #0]
 8003ff0:	2830      	cmp	r0, #48	; 0x30
 8003ff2:	461f      	mov	r7, r3
 8003ff4:	f103 0301 	add.w	r3, r3, #1
 8003ff8:	d0f9      	beq.n	8003fee <__gethex+0x66>
 8003ffa:	f7ff ffb0 	bl	8003f5e <__hexdig_fun>
 8003ffe:	fab0 f580 	clz	r5, r0
 8004002:	096d      	lsrs	r5, r5, #5
 8004004:	4634      	mov	r4, r6
 8004006:	f04f 0b01 	mov.w	fp, #1
 800400a:	463a      	mov	r2, r7
 800400c:	4616      	mov	r6, r2
 800400e:	3201      	adds	r2, #1
 8004010:	7830      	ldrb	r0, [r6, #0]
 8004012:	f7ff ffa4 	bl	8003f5e <__hexdig_fun>
 8004016:	2800      	cmp	r0, #0
 8004018:	d1f8      	bne.n	800400c <__gethex+0x84>
 800401a:	9a01      	ldr	r2, [sp, #4]
 800401c:	9903      	ldr	r1, [sp, #12]
 800401e:	4630      	mov	r0, r6
 8004020:	f000 ffe0 	bl	8004fe4 <strncmp>
 8004024:	b950      	cbnz	r0, 800403c <__gethex+0xb4>
 8004026:	b954      	cbnz	r4, 800403e <__gethex+0xb6>
 8004028:	9b01      	ldr	r3, [sp, #4]
 800402a:	18f4      	adds	r4, r6, r3
 800402c:	4622      	mov	r2, r4
 800402e:	4616      	mov	r6, r2
 8004030:	3201      	adds	r2, #1
 8004032:	7830      	ldrb	r0, [r6, #0]
 8004034:	f7ff ff93 	bl	8003f5e <__hexdig_fun>
 8004038:	2800      	cmp	r0, #0
 800403a:	d1f8      	bne.n	800402e <__gethex+0xa6>
 800403c:	b10c      	cbz	r4, 8004042 <__gethex+0xba>
 800403e:	1ba4      	subs	r4, r4, r6
 8004040:	00a4      	lsls	r4, r4, #2
 8004042:	7833      	ldrb	r3, [r6, #0]
 8004044:	2b50      	cmp	r3, #80	; 0x50
 8004046:	d001      	beq.n	800404c <__gethex+0xc4>
 8004048:	2b70      	cmp	r3, #112	; 0x70
 800404a:	d140      	bne.n	80040ce <__gethex+0x146>
 800404c:	7873      	ldrb	r3, [r6, #1]
 800404e:	2b2b      	cmp	r3, #43	; 0x2b
 8004050:	d035      	beq.n	80040be <__gethex+0x136>
 8004052:	2b2d      	cmp	r3, #45	; 0x2d
 8004054:	d02f      	beq.n	80040b6 <__gethex+0x12e>
 8004056:	1c71      	adds	r1, r6, #1
 8004058:	f04f 0900 	mov.w	r9, #0
 800405c:	7808      	ldrb	r0, [r1, #0]
 800405e:	f7ff ff7e 	bl	8003f5e <__hexdig_fun>
 8004062:	1e43      	subs	r3, r0, #1
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b18      	cmp	r3, #24
 8004068:	d831      	bhi.n	80040ce <__gethex+0x146>
 800406a:	f1a0 0210 	sub.w	r2, r0, #16
 800406e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004072:	f7ff ff74 	bl	8003f5e <__hexdig_fun>
 8004076:	1e43      	subs	r3, r0, #1
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b18      	cmp	r3, #24
 800407c:	d922      	bls.n	80040c4 <__gethex+0x13c>
 800407e:	f1b9 0f00 	cmp.w	r9, #0
 8004082:	d000      	beq.n	8004086 <__gethex+0xfe>
 8004084:	4252      	negs	r2, r2
 8004086:	4414      	add	r4, r2
 8004088:	f8ca 1000 	str.w	r1, [sl]
 800408c:	b30d      	cbz	r5, 80040d2 <__gethex+0x14a>
 800408e:	f1bb 0f00 	cmp.w	fp, #0
 8004092:	bf14      	ite	ne
 8004094:	2700      	movne	r7, #0
 8004096:	2706      	moveq	r7, #6
 8004098:	4638      	mov	r0, r7
 800409a:	b00b      	add	sp, #44	; 0x2c
 800409c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040a0:	f10b 0b01 	add.w	fp, fp, #1
 80040a4:	e78a      	b.n	8003fbc <__gethex+0x34>
 80040a6:	2500      	movs	r5, #0
 80040a8:	462c      	mov	r4, r5
 80040aa:	e7ae      	b.n	800400a <__gethex+0x82>
 80040ac:	463e      	mov	r6, r7
 80040ae:	2501      	movs	r5, #1
 80040b0:	e7c7      	b.n	8004042 <__gethex+0xba>
 80040b2:	4604      	mov	r4, r0
 80040b4:	e7fb      	b.n	80040ae <__gethex+0x126>
 80040b6:	f04f 0901 	mov.w	r9, #1
 80040ba:	1cb1      	adds	r1, r6, #2
 80040bc:	e7ce      	b.n	800405c <__gethex+0xd4>
 80040be:	f04f 0900 	mov.w	r9, #0
 80040c2:	e7fa      	b.n	80040ba <__gethex+0x132>
 80040c4:	230a      	movs	r3, #10
 80040c6:	fb03 0202 	mla	r2, r3, r2, r0
 80040ca:	3a10      	subs	r2, #16
 80040cc:	e7cf      	b.n	800406e <__gethex+0xe6>
 80040ce:	4631      	mov	r1, r6
 80040d0:	e7da      	b.n	8004088 <__gethex+0x100>
 80040d2:	1bf3      	subs	r3, r6, r7
 80040d4:	3b01      	subs	r3, #1
 80040d6:	4629      	mov	r1, r5
 80040d8:	2b07      	cmp	r3, #7
 80040da:	dc49      	bgt.n	8004170 <__gethex+0x1e8>
 80040dc:	9802      	ldr	r0, [sp, #8]
 80040de:	f000 fb52 	bl	8004786 <_Balloc>
 80040e2:	9b01      	ldr	r3, [sp, #4]
 80040e4:	f100 0914 	add.w	r9, r0, #20
 80040e8:	f04f 0b00 	mov.w	fp, #0
 80040ec:	f1c3 0301 	rsb	r3, r3, #1
 80040f0:	4605      	mov	r5, r0
 80040f2:	f8cd 9010 	str.w	r9, [sp, #16]
 80040f6:	46da      	mov	sl, fp
 80040f8:	9308      	str	r3, [sp, #32]
 80040fa:	42b7      	cmp	r7, r6
 80040fc:	d33b      	bcc.n	8004176 <__gethex+0x1ee>
 80040fe:	9804      	ldr	r0, [sp, #16]
 8004100:	f840 ab04 	str.w	sl, [r0], #4
 8004104:	eba0 0009 	sub.w	r0, r0, r9
 8004108:	1080      	asrs	r0, r0, #2
 800410a:	6128      	str	r0, [r5, #16]
 800410c:	0147      	lsls	r7, r0, #5
 800410e:	4650      	mov	r0, sl
 8004110:	f000 fbfd 	bl	800490e <__hi0bits>
 8004114:	f8d8 6000 	ldr.w	r6, [r8]
 8004118:	1a3f      	subs	r7, r7, r0
 800411a:	42b7      	cmp	r7, r6
 800411c:	dd64      	ble.n	80041e8 <__gethex+0x260>
 800411e:	1bbf      	subs	r7, r7, r6
 8004120:	4639      	mov	r1, r7
 8004122:	4628      	mov	r0, r5
 8004124:	f000 fefb 	bl	8004f1e <__any_on>
 8004128:	4682      	mov	sl, r0
 800412a:	b178      	cbz	r0, 800414c <__gethex+0x1c4>
 800412c:	1e7b      	subs	r3, r7, #1
 800412e:	1159      	asrs	r1, r3, #5
 8004130:	f003 021f 	and.w	r2, r3, #31
 8004134:	f04f 0a01 	mov.w	sl, #1
 8004138:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800413c:	fa0a f202 	lsl.w	r2, sl, r2
 8004140:	420a      	tst	r2, r1
 8004142:	d003      	beq.n	800414c <__gethex+0x1c4>
 8004144:	4553      	cmp	r3, sl
 8004146:	dc46      	bgt.n	80041d6 <__gethex+0x24e>
 8004148:	f04f 0a02 	mov.w	sl, #2
 800414c:	4639      	mov	r1, r7
 800414e:	4628      	mov	r0, r5
 8004150:	f7ff fed0 	bl	8003ef4 <rshift>
 8004154:	443c      	add	r4, r7
 8004156:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800415a:	429c      	cmp	r4, r3
 800415c:	dd52      	ble.n	8004204 <__gethex+0x27c>
 800415e:	4629      	mov	r1, r5
 8004160:	9802      	ldr	r0, [sp, #8]
 8004162:	f000 fb44 	bl	80047ee <_Bfree>
 8004166:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004168:	2300      	movs	r3, #0
 800416a:	6013      	str	r3, [r2, #0]
 800416c:	27a3      	movs	r7, #163	; 0xa3
 800416e:	e793      	b.n	8004098 <__gethex+0x110>
 8004170:	3101      	adds	r1, #1
 8004172:	105b      	asrs	r3, r3, #1
 8004174:	e7b0      	b.n	80040d8 <__gethex+0x150>
 8004176:	1e73      	subs	r3, r6, #1
 8004178:	9305      	str	r3, [sp, #20]
 800417a:	9a07      	ldr	r2, [sp, #28]
 800417c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004180:	4293      	cmp	r3, r2
 8004182:	d018      	beq.n	80041b6 <__gethex+0x22e>
 8004184:	f1bb 0f20 	cmp.w	fp, #32
 8004188:	d107      	bne.n	800419a <__gethex+0x212>
 800418a:	9b04      	ldr	r3, [sp, #16]
 800418c:	f8c3 a000 	str.w	sl, [r3]
 8004190:	3304      	adds	r3, #4
 8004192:	f04f 0a00 	mov.w	sl, #0
 8004196:	9304      	str	r3, [sp, #16]
 8004198:	46d3      	mov	fp, sl
 800419a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800419e:	f7ff fede 	bl	8003f5e <__hexdig_fun>
 80041a2:	f000 000f 	and.w	r0, r0, #15
 80041a6:	fa00 f00b 	lsl.w	r0, r0, fp
 80041aa:	ea4a 0a00 	orr.w	sl, sl, r0
 80041ae:	f10b 0b04 	add.w	fp, fp, #4
 80041b2:	9b05      	ldr	r3, [sp, #20]
 80041b4:	e00d      	b.n	80041d2 <__gethex+0x24a>
 80041b6:	9b05      	ldr	r3, [sp, #20]
 80041b8:	9a08      	ldr	r2, [sp, #32]
 80041ba:	4413      	add	r3, r2
 80041bc:	429f      	cmp	r7, r3
 80041be:	d8e1      	bhi.n	8004184 <__gethex+0x1fc>
 80041c0:	4618      	mov	r0, r3
 80041c2:	9a01      	ldr	r2, [sp, #4]
 80041c4:	9903      	ldr	r1, [sp, #12]
 80041c6:	9309      	str	r3, [sp, #36]	; 0x24
 80041c8:	f000 ff0c 	bl	8004fe4 <strncmp>
 80041cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041ce:	2800      	cmp	r0, #0
 80041d0:	d1d8      	bne.n	8004184 <__gethex+0x1fc>
 80041d2:	461e      	mov	r6, r3
 80041d4:	e791      	b.n	80040fa <__gethex+0x172>
 80041d6:	1eb9      	subs	r1, r7, #2
 80041d8:	4628      	mov	r0, r5
 80041da:	f000 fea0 	bl	8004f1e <__any_on>
 80041de:	2800      	cmp	r0, #0
 80041e0:	d0b2      	beq.n	8004148 <__gethex+0x1c0>
 80041e2:	f04f 0a03 	mov.w	sl, #3
 80041e6:	e7b1      	b.n	800414c <__gethex+0x1c4>
 80041e8:	da09      	bge.n	80041fe <__gethex+0x276>
 80041ea:	1bf7      	subs	r7, r6, r7
 80041ec:	4629      	mov	r1, r5
 80041ee:	463a      	mov	r2, r7
 80041f0:	9802      	ldr	r0, [sp, #8]
 80041f2:	f000 fcbf 	bl	8004b74 <__lshift>
 80041f6:	1be4      	subs	r4, r4, r7
 80041f8:	4605      	mov	r5, r0
 80041fa:	f100 0914 	add.w	r9, r0, #20
 80041fe:	f04f 0a00 	mov.w	sl, #0
 8004202:	e7a8      	b.n	8004156 <__gethex+0x1ce>
 8004204:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8004208:	4284      	cmp	r4, r0
 800420a:	da6a      	bge.n	80042e2 <__gethex+0x35a>
 800420c:	1b04      	subs	r4, r0, r4
 800420e:	42a6      	cmp	r6, r4
 8004210:	dc2e      	bgt.n	8004270 <__gethex+0x2e8>
 8004212:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004216:	2b02      	cmp	r3, #2
 8004218:	d022      	beq.n	8004260 <__gethex+0x2d8>
 800421a:	2b03      	cmp	r3, #3
 800421c:	d024      	beq.n	8004268 <__gethex+0x2e0>
 800421e:	2b01      	cmp	r3, #1
 8004220:	d115      	bne.n	800424e <__gethex+0x2c6>
 8004222:	42a6      	cmp	r6, r4
 8004224:	d113      	bne.n	800424e <__gethex+0x2c6>
 8004226:	2e01      	cmp	r6, #1
 8004228:	dc0b      	bgt.n	8004242 <__gethex+0x2ba>
 800422a:	9a06      	ldr	r2, [sp, #24]
 800422c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	2301      	movs	r3, #1
 8004234:	612b      	str	r3, [r5, #16]
 8004236:	f8c9 3000 	str.w	r3, [r9]
 800423a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800423c:	2762      	movs	r7, #98	; 0x62
 800423e:	601d      	str	r5, [r3, #0]
 8004240:	e72a      	b.n	8004098 <__gethex+0x110>
 8004242:	1e71      	subs	r1, r6, #1
 8004244:	4628      	mov	r0, r5
 8004246:	f000 fe6a 	bl	8004f1e <__any_on>
 800424a:	2800      	cmp	r0, #0
 800424c:	d1ed      	bne.n	800422a <__gethex+0x2a2>
 800424e:	4629      	mov	r1, r5
 8004250:	9802      	ldr	r0, [sp, #8]
 8004252:	f000 facc 	bl	80047ee <_Bfree>
 8004256:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004258:	2300      	movs	r3, #0
 800425a:	6013      	str	r3, [r2, #0]
 800425c:	2750      	movs	r7, #80	; 0x50
 800425e:	e71b      	b.n	8004098 <__gethex+0x110>
 8004260:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004262:	2b00      	cmp	r3, #0
 8004264:	d0e1      	beq.n	800422a <__gethex+0x2a2>
 8004266:	e7f2      	b.n	800424e <__gethex+0x2c6>
 8004268:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1dd      	bne.n	800422a <__gethex+0x2a2>
 800426e:	e7ee      	b.n	800424e <__gethex+0x2c6>
 8004270:	1e67      	subs	r7, r4, #1
 8004272:	f1ba 0f00 	cmp.w	sl, #0
 8004276:	d131      	bne.n	80042dc <__gethex+0x354>
 8004278:	b127      	cbz	r7, 8004284 <__gethex+0x2fc>
 800427a:	4639      	mov	r1, r7
 800427c:	4628      	mov	r0, r5
 800427e:	f000 fe4e 	bl	8004f1e <__any_on>
 8004282:	4682      	mov	sl, r0
 8004284:	117a      	asrs	r2, r7, #5
 8004286:	2301      	movs	r3, #1
 8004288:	f007 071f 	and.w	r7, r7, #31
 800428c:	fa03 f707 	lsl.w	r7, r3, r7
 8004290:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8004294:	4621      	mov	r1, r4
 8004296:	421f      	tst	r7, r3
 8004298:	4628      	mov	r0, r5
 800429a:	bf18      	it	ne
 800429c:	f04a 0a02 	orrne.w	sl, sl, #2
 80042a0:	1b36      	subs	r6, r6, r4
 80042a2:	f7ff fe27 	bl	8003ef4 <rshift>
 80042a6:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80042aa:	2702      	movs	r7, #2
 80042ac:	f1ba 0f00 	cmp.w	sl, #0
 80042b0:	d045      	beq.n	800433e <__gethex+0x3b6>
 80042b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d015      	beq.n	80042e6 <__gethex+0x35e>
 80042ba:	2b03      	cmp	r3, #3
 80042bc:	d017      	beq.n	80042ee <__gethex+0x366>
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d109      	bne.n	80042d6 <__gethex+0x34e>
 80042c2:	f01a 0f02 	tst.w	sl, #2
 80042c6:	d006      	beq.n	80042d6 <__gethex+0x34e>
 80042c8:	f8d9 3000 	ldr.w	r3, [r9]
 80042cc:	ea4a 0a03 	orr.w	sl, sl, r3
 80042d0:	f01a 0f01 	tst.w	sl, #1
 80042d4:	d10e      	bne.n	80042f4 <__gethex+0x36c>
 80042d6:	f047 0710 	orr.w	r7, r7, #16
 80042da:	e030      	b.n	800433e <__gethex+0x3b6>
 80042dc:	f04f 0a01 	mov.w	sl, #1
 80042e0:	e7d0      	b.n	8004284 <__gethex+0x2fc>
 80042e2:	2701      	movs	r7, #1
 80042e4:	e7e2      	b.n	80042ac <__gethex+0x324>
 80042e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80042e8:	f1c3 0301 	rsb	r3, r3, #1
 80042ec:	9315      	str	r3, [sp, #84]	; 0x54
 80042ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0f0      	beq.n	80042d6 <__gethex+0x34e>
 80042f4:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80042f8:	f105 0314 	add.w	r3, r5, #20
 80042fc:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8004300:	eb03 010a 	add.w	r1, r3, sl
 8004304:	2000      	movs	r0, #0
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	f1b2 3fff 	cmp.w	r2, #4294967295
 800430c:	d01c      	beq.n	8004348 <__gethex+0x3c0>
 800430e:	3201      	adds	r2, #1
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	2f02      	cmp	r7, #2
 8004314:	f105 0314 	add.w	r3, r5, #20
 8004318:	d138      	bne.n	800438c <__gethex+0x404>
 800431a:	f8d8 2000 	ldr.w	r2, [r8]
 800431e:	3a01      	subs	r2, #1
 8004320:	4296      	cmp	r6, r2
 8004322:	d10a      	bne.n	800433a <__gethex+0x3b2>
 8004324:	1171      	asrs	r1, r6, #5
 8004326:	2201      	movs	r2, #1
 8004328:	f006 061f 	and.w	r6, r6, #31
 800432c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004330:	fa02 f606 	lsl.w	r6, r2, r6
 8004334:	421e      	tst	r6, r3
 8004336:	bf18      	it	ne
 8004338:	4617      	movne	r7, r2
 800433a:	f047 0720 	orr.w	r7, r7, #32
 800433e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004340:	601d      	str	r5, [r3, #0]
 8004342:	9b06      	ldr	r3, [sp, #24]
 8004344:	601c      	str	r4, [r3, #0]
 8004346:	e6a7      	b.n	8004098 <__gethex+0x110>
 8004348:	f843 0b04 	str.w	r0, [r3], #4
 800434c:	4299      	cmp	r1, r3
 800434e:	d8da      	bhi.n	8004306 <__gethex+0x37e>
 8004350:	68ab      	ldr	r3, [r5, #8]
 8004352:	4599      	cmp	r9, r3
 8004354:	db12      	blt.n	800437c <__gethex+0x3f4>
 8004356:	6869      	ldr	r1, [r5, #4]
 8004358:	9802      	ldr	r0, [sp, #8]
 800435a:	3101      	adds	r1, #1
 800435c:	f000 fa13 	bl	8004786 <_Balloc>
 8004360:	692a      	ldr	r2, [r5, #16]
 8004362:	3202      	adds	r2, #2
 8004364:	f105 010c 	add.w	r1, r5, #12
 8004368:	4683      	mov	fp, r0
 800436a:	0092      	lsls	r2, r2, #2
 800436c:	300c      	adds	r0, #12
 800436e:	f000 f9fd 	bl	800476c <memcpy>
 8004372:	4629      	mov	r1, r5
 8004374:	9802      	ldr	r0, [sp, #8]
 8004376:	f000 fa3a 	bl	80047ee <_Bfree>
 800437a:	465d      	mov	r5, fp
 800437c:	692b      	ldr	r3, [r5, #16]
 800437e:	1c5a      	adds	r2, r3, #1
 8004380:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004384:	612a      	str	r2, [r5, #16]
 8004386:	2201      	movs	r2, #1
 8004388:	615a      	str	r2, [r3, #20]
 800438a:	e7c2      	b.n	8004312 <__gethex+0x38a>
 800438c:	692a      	ldr	r2, [r5, #16]
 800438e:	4591      	cmp	r9, r2
 8004390:	da0b      	bge.n	80043aa <__gethex+0x422>
 8004392:	2101      	movs	r1, #1
 8004394:	4628      	mov	r0, r5
 8004396:	f7ff fdad 	bl	8003ef4 <rshift>
 800439a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800439e:	3401      	adds	r4, #1
 80043a0:	429c      	cmp	r4, r3
 80043a2:	f73f aedc 	bgt.w	800415e <__gethex+0x1d6>
 80043a6:	2701      	movs	r7, #1
 80043a8:	e7c7      	b.n	800433a <__gethex+0x3b2>
 80043aa:	f016 061f 	ands.w	r6, r6, #31
 80043ae:	d0fa      	beq.n	80043a6 <__gethex+0x41e>
 80043b0:	449a      	add	sl, r3
 80043b2:	f1c6 0620 	rsb	r6, r6, #32
 80043b6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80043ba:	f000 faa8 	bl	800490e <__hi0bits>
 80043be:	42b0      	cmp	r0, r6
 80043c0:	dbe7      	blt.n	8004392 <__gethex+0x40a>
 80043c2:	e7f0      	b.n	80043a6 <__gethex+0x41e>

080043c4 <L_shift>:
 80043c4:	f1c2 0208 	rsb	r2, r2, #8
 80043c8:	0092      	lsls	r2, r2, #2
 80043ca:	b570      	push	{r4, r5, r6, lr}
 80043cc:	f1c2 0620 	rsb	r6, r2, #32
 80043d0:	6843      	ldr	r3, [r0, #4]
 80043d2:	6804      	ldr	r4, [r0, #0]
 80043d4:	fa03 f506 	lsl.w	r5, r3, r6
 80043d8:	432c      	orrs	r4, r5
 80043da:	40d3      	lsrs	r3, r2
 80043dc:	6004      	str	r4, [r0, #0]
 80043de:	f840 3f04 	str.w	r3, [r0, #4]!
 80043e2:	4288      	cmp	r0, r1
 80043e4:	d3f4      	bcc.n	80043d0 <L_shift+0xc>
 80043e6:	bd70      	pop	{r4, r5, r6, pc}

080043e8 <__match>:
 80043e8:	b530      	push	{r4, r5, lr}
 80043ea:	6803      	ldr	r3, [r0, #0]
 80043ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043f0:	3301      	adds	r3, #1
 80043f2:	b914      	cbnz	r4, 80043fa <__match+0x12>
 80043f4:	6003      	str	r3, [r0, #0]
 80043f6:	2001      	movs	r0, #1
 80043f8:	bd30      	pop	{r4, r5, pc}
 80043fa:	781a      	ldrb	r2, [r3, #0]
 80043fc:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8004400:	2d19      	cmp	r5, #25
 8004402:	bf98      	it	ls
 8004404:	3220      	addls	r2, #32
 8004406:	42a2      	cmp	r2, r4
 8004408:	d0f0      	beq.n	80043ec <__match+0x4>
 800440a:	2000      	movs	r0, #0
 800440c:	bd30      	pop	{r4, r5, pc}

0800440e <__hexnan>:
 800440e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004412:	680b      	ldr	r3, [r1, #0]
 8004414:	6801      	ldr	r1, [r0, #0]
 8004416:	115f      	asrs	r7, r3, #5
 8004418:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800441c:	f013 031f 	ands.w	r3, r3, #31
 8004420:	b087      	sub	sp, #28
 8004422:	bf18      	it	ne
 8004424:	3704      	addne	r7, #4
 8004426:	2500      	movs	r5, #0
 8004428:	1f3e      	subs	r6, r7, #4
 800442a:	4682      	mov	sl, r0
 800442c:	4690      	mov	r8, r2
 800442e:	9302      	str	r3, [sp, #8]
 8004430:	f847 5c04 	str.w	r5, [r7, #-4]
 8004434:	46b1      	mov	r9, r6
 8004436:	4634      	mov	r4, r6
 8004438:	9501      	str	r5, [sp, #4]
 800443a:	46ab      	mov	fp, r5
 800443c:	784a      	ldrb	r2, [r1, #1]
 800443e:	1c4b      	adds	r3, r1, #1
 8004440:	9303      	str	r3, [sp, #12]
 8004442:	b342      	cbz	r2, 8004496 <__hexnan+0x88>
 8004444:	4610      	mov	r0, r2
 8004446:	9105      	str	r1, [sp, #20]
 8004448:	9204      	str	r2, [sp, #16]
 800444a:	f7ff fd88 	bl	8003f5e <__hexdig_fun>
 800444e:	2800      	cmp	r0, #0
 8004450:	d143      	bne.n	80044da <__hexnan+0xcc>
 8004452:	9a04      	ldr	r2, [sp, #16]
 8004454:	9905      	ldr	r1, [sp, #20]
 8004456:	2a20      	cmp	r2, #32
 8004458:	d818      	bhi.n	800448c <__hexnan+0x7e>
 800445a:	9b01      	ldr	r3, [sp, #4]
 800445c:	459b      	cmp	fp, r3
 800445e:	dd13      	ble.n	8004488 <__hexnan+0x7a>
 8004460:	454c      	cmp	r4, r9
 8004462:	d206      	bcs.n	8004472 <__hexnan+0x64>
 8004464:	2d07      	cmp	r5, #7
 8004466:	dc04      	bgt.n	8004472 <__hexnan+0x64>
 8004468:	462a      	mov	r2, r5
 800446a:	4649      	mov	r1, r9
 800446c:	4620      	mov	r0, r4
 800446e:	f7ff ffa9 	bl	80043c4 <L_shift>
 8004472:	4544      	cmp	r4, r8
 8004474:	d944      	bls.n	8004500 <__hexnan+0xf2>
 8004476:	2300      	movs	r3, #0
 8004478:	f1a4 0904 	sub.w	r9, r4, #4
 800447c:	f844 3c04 	str.w	r3, [r4, #-4]
 8004480:	f8cd b004 	str.w	fp, [sp, #4]
 8004484:	464c      	mov	r4, r9
 8004486:	461d      	mov	r5, r3
 8004488:	9903      	ldr	r1, [sp, #12]
 800448a:	e7d7      	b.n	800443c <__hexnan+0x2e>
 800448c:	2a29      	cmp	r2, #41	; 0x29
 800448e:	d14a      	bne.n	8004526 <__hexnan+0x118>
 8004490:	3102      	adds	r1, #2
 8004492:	f8ca 1000 	str.w	r1, [sl]
 8004496:	f1bb 0f00 	cmp.w	fp, #0
 800449a:	d044      	beq.n	8004526 <__hexnan+0x118>
 800449c:	454c      	cmp	r4, r9
 800449e:	d206      	bcs.n	80044ae <__hexnan+0xa0>
 80044a0:	2d07      	cmp	r5, #7
 80044a2:	dc04      	bgt.n	80044ae <__hexnan+0xa0>
 80044a4:	462a      	mov	r2, r5
 80044a6:	4649      	mov	r1, r9
 80044a8:	4620      	mov	r0, r4
 80044aa:	f7ff ff8b 	bl	80043c4 <L_shift>
 80044ae:	4544      	cmp	r4, r8
 80044b0:	d928      	bls.n	8004504 <__hexnan+0xf6>
 80044b2:	4643      	mov	r3, r8
 80044b4:	f854 2b04 	ldr.w	r2, [r4], #4
 80044b8:	f843 2b04 	str.w	r2, [r3], #4
 80044bc:	42a6      	cmp	r6, r4
 80044be:	d2f9      	bcs.n	80044b4 <__hexnan+0xa6>
 80044c0:	2200      	movs	r2, #0
 80044c2:	f843 2b04 	str.w	r2, [r3], #4
 80044c6:	429e      	cmp	r6, r3
 80044c8:	d2fb      	bcs.n	80044c2 <__hexnan+0xb4>
 80044ca:	6833      	ldr	r3, [r6, #0]
 80044cc:	b91b      	cbnz	r3, 80044d6 <__hexnan+0xc8>
 80044ce:	4546      	cmp	r6, r8
 80044d0:	d127      	bne.n	8004522 <__hexnan+0x114>
 80044d2:	2301      	movs	r3, #1
 80044d4:	6033      	str	r3, [r6, #0]
 80044d6:	2005      	movs	r0, #5
 80044d8:	e026      	b.n	8004528 <__hexnan+0x11a>
 80044da:	3501      	adds	r5, #1
 80044dc:	2d08      	cmp	r5, #8
 80044de:	f10b 0b01 	add.w	fp, fp, #1
 80044e2:	dd06      	ble.n	80044f2 <__hexnan+0xe4>
 80044e4:	4544      	cmp	r4, r8
 80044e6:	d9cf      	bls.n	8004488 <__hexnan+0x7a>
 80044e8:	2300      	movs	r3, #0
 80044ea:	f844 3c04 	str.w	r3, [r4, #-4]
 80044ee:	2501      	movs	r5, #1
 80044f0:	3c04      	subs	r4, #4
 80044f2:	6822      	ldr	r2, [r4, #0]
 80044f4:	f000 000f 	and.w	r0, r0, #15
 80044f8:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80044fc:	6020      	str	r0, [r4, #0]
 80044fe:	e7c3      	b.n	8004488 <__hexnan+0x7a>
 8004500:	2508      	movs	r5, #8
 8004502:	e7c1      	b.n	8004488 <__hexnan+0x7a>
 8004504:	9b02      	ldr	r3, [sp, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0df      	beq.n	80044ca <__hexnan+0xbc>
 800450a:	f04f 32ff 	mov.w	r2, #4294967295
 800450e:	f1c3 0320 	rsb	r3, r3, #32
 8004512:	fa22 f303 	lsr.w	r3, r2, r3
 8004516:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800451a:	401a      	ands	r2, r3
 800451c:	f847 2c04 	str.w	r2, [r7, #-4]
 8004520:	e7d3      	b.n	80044ca <__hexnan+0xbc>
 8004522:	3e04      	subs	r6, #4
 8004524:	e7d1      	b.n	80044ca <__hexnan+0xbc>
 8004526:	2004      	movs	r0, #4
 8004528:	b007      	add	sp, #28
 800452a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004530 <_findenv_r>:
 8004530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004534:	4606      	mov	r6, r0
 8004536:	468a      	mov	sl, r1
 8004538:	4617      	mov	r7, r2
 800453a:	f000 fe18 	bl	800516e <__env_lock>
 800453e:	4b1b      	ldr	r3, [pc, #108]	; (80045ac <_findenv_r+0x7c>)
 8004540:	f8d3 8000 	ldr.w	r8, [r3]
 8004544:	4699      	mov	r9, r3
 8004546:	f1b8 0f00 	cmp.w	r8, #0
 800454a:	d007      	beq.n	800455c <_findenv_r+0x2c>
 800454c:	4654      	mov	r4, sl
 800454e:	4623      	mov	r3, r4
 8004550:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004554:	b332      	cbz	r2, 80045a4 <_findenv_r+0x74>
 8004556:	2a3d      	cmp	r2, #61	; 0x3d
 8004558:	461c      	mov	r4, r3
 800455a:	d1f8      	bne.n	800454e <_findenv_r+0x1e>
 800455c:	4630      	mov	r0, r6
 800455e:	f000 fe07 	bl	8005170 <__env_unlock>
 8004562:	2000      	movs	r0, #0
 8004564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004568:	f108 0804 	add.w	r8, r8, #4
 800456c:	f8d8 0000 	ldr.w	r0, [r8]
 8004570:	2800      	cmp	r0, #0
 8004572:	d0f3      	beq.n	800455c <_findenv_r+0x2c>
 8004574:	4622      	mov	r2, r4
 8004576:	4651      	mov	r1, sl
 8004578:	f000 fd34 	bl	8004fe4 <strncmp>
 800457c:	2800      	cmp	r0, #0
 800457e:	d1f3      	bne.n	8004568 <_findenv_r+0x38>
 8004580:	f8d8 3000 	ldr.w	r3, [r8]
 8004584:	191d      	adds	r5, r3, r4
 8004586:	5d1b      	ldrb	r3, [r3, r4]
 8004588:	2b3d      	cmp	r3, #61	; 0x3d
 800458a:	d1ed      	bne.n	8004568 <_findenv_r+0x38>
 800458c:	f8d9 3000 	ldr.w	r3, [r9]
 8004590:	eba8 0303 	sub.w	r3, r8, r3
 8004594:	109b      	asrs	r3, r3, #2
 8004596:	4630      	mov	r0, r6
 8004598:	603b      	str	r3, [r7, #0]
 800459a:	f000 fde9 	bl	8005170 <__env_unlock>
 800459e:	1c68      	adds	r0, r5, #1
 80045a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045a4:	eba4 040a 	sub.w	r4, r4, sl
 80045a8:	e7e0      	b.n	800456c <_findenv_r+0x3c>
 80045aa:	bf00      	nop
 80045ac:	20000010 	.word	0x20000010

080045b0 <_getenv_r>:
 80045b0:	b507      	push	{r0, r1, r2, lr}
 80045b2:	aa01      	add	r2, sp, #4
 80045b4:	f7ff ffbc 	bl	8004530 <_findenv_r>
 80045b8:	b003      	add	sp, #12
 80045ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080045c0 <_gettimeofday_r>:
 80045c0:	b538      	push	{r3, r4, r5, lr}
 80045c2:	4c07      	ldr	r4, [pc, #28]	; (80045e0 <_gettimeofday_r+0x20>)
 80045c4:	2300      	movs	r3, #0
 80045c6:	4605      	mov	r5, r0
 80045c8:	4608      	mov	r0, r1
 80045ca:	4611      	mov	r1, r2
 80045cc:	6023      	str	r3, [r4, #0]
 80045ce:	f001 fa0b 	bl	80059e8 <_gettimeofday>
 80045d2:	1c43      	adds	r3, r0, #1
 80045d4:	d102      	bne.n	80045dc <_gettimeofday_r+0x1c>
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	b103      	cbz	r3, 80045dc <_gettimeofday_r+0x1c>
 80045da:	602b      	str	r3, [r5, #0]
 80045dc:	bd38      	pop	{r3, r4, r5, pc}
 80045de:	bf00      	nop
 80045e0:	20001240 	.word	0x20001240

080045e4 <__gettzinfo>:
 80045e4:	4800      	ldr	r0, [pc, #0]	; (80045e8 <__gettzinfo+0x4>)
 80045e6:	4770      	bx	lr
 80045e8:	2000001c 	.word	0x2000001c

080045ec <gmtime_r>:
 80045ec:	6802      	ldr	r2, [r0, #0]
 80045ee:	4848      	ldr	r0, [pc, #288]	; (8004710 <gmtime_r+0x124>)
 80045f0:	fb92 f3f0 	sdiv	r3, r2, r0
 80045f4:	fb00 2013 	mls	r0, r0, r3, r2
 80045f8:	2800      	cmp	r0, #0
 80045fa:	bfb8      	it	lt
 80045fc:	f500 30a8 	addlt.w	r0, r0, #86016	; 0x15000
 8004600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004602:	bfb8      	it	lt
 8004604:	f500 70c0 	addlt.w	r0, r0, #384	; 0x180
 8004608:	f44f 6461 	mov.w	r4, #3600	; 0xe10
 800460c:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 8004610:	fb90 f2f4 	sdiv	r2, r0, r4
 8004614:	fb04 0012 	mls	r0, r4, r2, r0
 8004618:	f04f 043c 	mov.w	r4, #60	; 0x3c
 800461c:	bfac      	ite	ge
 800461e:	f603 236c 	addwge	r3, r3, #2668	; 0xa6c
 8004622:	f603 236b 	addwlt	r3, r3, #2667	; 0xa6b
 8004626:	608a      	str	r2, [r1, #8]
 8004628:	fb90 f2f4 	sdiv	r2, r0, r4
 800462c:	fb04 0012 	mls	r0, r4, r2, r0
 8004630:	604a      	str	r2, [r1, #4]
 8004632:	6008      	str	r0, [r1, #0]
 8004634:	2207      	movs	r2, #7
 8004636:	1cd8      	adds	r0, r3, #3
 8004638:	fb90 f2f2 	sdiv	r2, r0, r2
 800463c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8004640:	1a82      	subs	r2, r0, r2
 8004642:	618a      	str	r2, [r1, #24]
 8004644:	4a33      	ldr	r2, [pc, #204]	; (8004714 <gmtime_r+0x128>)
 8004646:	4c34      	ldr	r4, [pc, #208]	; (8004718 <gmtime_r+0x12c>)
 8004648:	fb93 f4f4 	sdiv	r4, r3, r4
 800464c:	fb02 3304 	mla	r3, r2, r4, r3
 8004650:	f648 60ac 	movw	r0, #36524	; 0x8eac
 8004654:	fbb3 f0f0 	udiv	r0, r3, r0
 8004658:	4418      	add	r0, r3
 800465a:	f240 57b4 	movw	r7, #1460	; 0x5b4
 800465e:	fbb3 f2f7 	udiv	r2, r3, r7
 8004662:	1a80      	subs	r0, r0, r2
 8004664:	4a2d      	ldr	r2, [pc, #180]	; (800471c <gmtime_r+0x130>)
 8004666:	fbb3 f2f2 	udiv	r2, r3, r2
 800466a:	1a82      	subs	r2, r0, r2
 800466c:	f648 6094 	movw	r0, #36500	; 0x8e94
 8004670:	fbb2 f0f0 	udiv	r0, r2, r0
 8004674:	4403      	add	r3, r0
 8004676:	f240 166d 	movw	r6, #365	; 0x16d
 800467a:	fbb2 f5f6 	udiv	r5, r2, r6
 800467e:	fbb2 f2f7 	udiv	r2, r2, r7
 8004682:	1a9a      	subs	r2, r3, r2
 8004684:	fb06 2315 	mls	r3, r6, r5, r2
 8004688:	2099      	movs	r0, #153	; 0x99
 800468a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800468e:	1c5e      	adds	r6, r3, #1
 8004690:	3202      	adds	r2, #2
 8004692:	fbb2 f2f0 	udiv	r2, r2, r0
 8004696:	2a0a      	cmp	r2, #10
 8004698:	fb00 f002 	mul.w	r0, r0, r2
 800469c:	f100 0002 	add.w	r0, r0, #2
 80046a0:	f04f 0705 	mov.w	r7, #5
 80046a4:	fbb0 f0f7 	udiv	r0, r0, r7
 80046a8:	eba6 0000 	sub.w	r0, r6, r0
 80046ac:	bf34      	ite	cc
 80046ae:	2602      	movcc	r6, #2
 80046b0:	f06f 0609 	mvncs.w	r6, #9
 80046b4:	4416      	add	r6, r2
 80046b6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80046ba:	fb02 5404 	mla	r4, r2, r4, r5
 80046be:	2e01      	cmp	r6, #1
 80046c0:	bf98      	it	ls
 80046c2:	3401      	addls	r4, #1
 80046c4:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80046c8:	d30b      	bcc.n	80046e2 <gmtime_r+0xf6>
 80046ca:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80046ce:	61cb      	str	r3, [r1, #28]
 80046d0:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
 80046d4:	2300      	movs	r3, #0
 80046d6:	60c8      	str	r0, [r1, #12]
 80046d8:	614c      	str	r4, [r1, #20]
 80046da:	610e      	str	r6, [r1, #16]
 80046dc:	620b      	str	r3, [r1, #32]
 80046de:	4608      	mov	r0, r1
 80046e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046e2:	07aa      	lsls	r2, r5, #30
 80046e4:	d105      	bne.n	80046f2 <gmtime_r+0x106>
 80046e6:	2764      	movs	r7, #100	; 0x64
 80046e8:	fbb5 f2f7 	udiv	r2, r5, r7
 80046ec:	fb07 5212 	mls	r2, r7, r2, r5
 80046f0:	b95a      	cbnz	r2, 800470a <gmtime_r+0x11e>
 80046f2:	f44f 77c8 	mov.w	r7, #400	; 0x190
 80046f6:	fbb5 f2f7 	udiv	r2, r5, r7
 80046fa:	fb07 5212 	mls	r2, r7, r2, r5
 80046fe:	fab2 f282 	clz	r2, r2
 8004702:	0952      	lsrs	r2, r2, #5
 8004704:	333b      	adds	r3, #59	; 0x3b
 8004706:	4413      	add	r3, r2
 8004708:	e7e1      	b.n	80046ce <gmtime_r+0xe2>
 800470a:	2201      	movs	r2, #1
 800470c:	e7fa      	b.n	8004704 <gmtime_r+0x118>
 800470e:	bf00      	nop
 8004710:	00015180 	.word	0x00015180
 8004714:	fffdc54f 	.word	0xfffdc54f
 8004718:	00023ab1 	.word	0x00023ab1
 800471c:	00023ab0 	.word	0x00023ab0

08004720 <__locale_ctype_ptr_l>:
 8004720:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8004724:	4770      	bx	lr
	...

08004728 <__locale_ctype_ptr>:
 8004728:	4b04      	ldr	r3, [pc, #16]	; (800473c <__locale_ctype_ptr+0x14>)
 800472a:	4a05      	ldr	r2, [pc, #20]	; (8004740 <__locale_ctype_ptr+0x18>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	2b00      	cmp	r3, #0
 8004732:	bf08      	it	eq
 8004734:	4613      	moveq	r3, r2
 8004736:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800473a:	4770      	bx	lr
 800473c:	2000005c 	.word	0x2000005c
 8004740:	200000c0 	.word	0x200000c0

08004744 <__localeconv_l>:
 8004744:	30f0      	adds	r0, #240	; 0xf0
 8004746:	4770      	bx	lr

08004748 <__ascii_mbtowc>:
 8004748:	b082      	sub	sp, #8
 800474a:	b901      	cbnz	r1, 800474e <__ascii_mbtowc+0x6>
 800474c:	a901      	add	r1, sp, #4
 800474e:	b142      	cbz	r2, 8004762 <__ascii_mbtowc+0x1a>
 8004750:	b14b      	cbz	r3, 8004766 <__ascii_mbtowc+0x1e>
 8004752:	7813      	ldrb	r3, [r2, #0]
 8004754:	600b      	str	r3, [r1, #0]
 8004756:	7812      	ldrb	r2, [r2, #0]
 8004758:	1c10      	adds	r0, r2, #0
 800475a:	bf18      	it	ne
 800475c:	2001      	movne	r0, #1
 800475e:	b002      	add	sp, #8
 8004760:	4770      	bx	lr
 8004762:	4610      	mov	r0, r2
 8004764:	e7fb      	b.n	800475e <__ascii_mbtowc+0x16>
 8004766:	f06f 0001 	mvn.w	r0, #1
 800476a:	e7f8      	b.n	800475e <__ascii_mbtowc+0x16>

0800476c <memcpy>:
 800476c:	b510      	push	{r4, lr}
 800476e:	1e43      	subs	r3, r0, #1
 8004770:	440a      	add	r2, r1
 8004772:	4291      	cmp	r1, r2
 8004774:	d100      	bne.n	8004778 <memcpy+0xc>
 8004776:	bd10      	pop	{r4, pc}
 8004778:	f811 4b01 	ldrb.w	r4, [r1], #1
 800477c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004780:	e7f7      	b.n	8004772 <memcpy+0x6>

08004782 <__malloc_lock>:
 8004782:	4770      	bx	lr

08004784 <__malloc_unlock>:
 8004784:	4770      	bx	lr

08004786 <_Balloc>:
 8004786:	b570      	push	{r4, r5, r6, lr}
 8004788:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800478a:	4604      	mov	r4, r0
 800478c:	460e      	mov	r6, r1
 800478e:	b93d      	cbnz	r5, 80047a0 <_Balloc+0x1a>
 8004790:	2010      	movs	r0, #16
 8004792:	f7fd ffbb 	bl	800270c <malloc>
 8004796:	6260      	str	r0, [r4, #36]	; 0x24
 8004798:	6045      	str	r5, [r0, #4]
 800479a:	6085      	str	r5, [r0, #8]
 800479c:	6005      	str	r5, [r0, #0]
 800479e:	60c5      	str	r5, [r0, #12]
 80047a0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80047a2:	68eb      	ldr	r3, [r5, #12]
 80047a4:	b183      	cbz	r3, 80047c8 <_Balloc+0x42>
 80047a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80047ae:	b9b8      	cbnz	r0, 80047e0 <_Balloc+0x5a>
 80047b0:	2101      	movs	r1, #1
 80047b2:	fa01 f506 	lsl.w	r5, r1, r6
 80047b6:	1d6a      	adds	r2, r5, #5
 80047b8:	0092      	lsls	r2, r2, #2
 80047ba:	4620      	mov	r0, r4
 80047bc:	f000 fbd0 	bl	8004f60 <_calloc_r>
 80047c0:	b160      	cbz	r0, 80047dc <_Balloc+0x56>
 80047c2:	6046      	str	r6, [r0, #4]
 80047c4:	6085      	str	r5, [r0, #8]
 80047c6:	e00e      	b.n	80047e6 <_Balloc+0x60>
 80047c8:	2221      	movs	r2, #33	; 0x21
 80047ca:	2104      	movs	r1, #4
 80047cc:	4620      	mov	r0, r4
 80047ce:	f000 fbc7 	bl	8004f60 <_calloc_r>
 80047d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047d4:	60e8      	str	r0, [r5, #12]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1e4      	bne.n	80047a6 <_Balloc+0x20>
 80047dc:	2000      	movs	r0, #0
 80047de:	bd70      	pop	{r4, r5, r6, pc}
 80047e0:	6802      	ldr	r2, [r0, #0]
 80047e2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80047e6:	2300      	movs	r3, #0
 80047e8:	6103      	str	r3, [r0, #16]
 80047ea:	60c3      	str	r3, [r0, #12]
 80047ec:	bd70      	pop	{r4, r5, r6, pc}

080047ee <_Bfree>:
 80047ee:	b570      	push	{r4, r5, r6, lr}
 80047f0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80047f2:	4606      	mov	r6, r0
 80047f4:	460d      	mov	r5, r1
 80047f6:	b93c      	cbnz	r4, 8004808 <_Bfree+0x1a>
 80047f8:	2010      	movs	r0, #16
 80047fa:	f7fd ff87 	bl	800270c <malloc>
 80047fe:	6270      	str	r0, [r6, #36]	; 0x24
 8004800:	6044      	str	r4, [r0, #4]
 8004802:	6084      	str	r4, [r0, #8]
 8004804:	6004      	str	r4, [r0, #0]
 8004806:	60c4      	str	r4, [r0, #12]
 8004808:	b13d      	cbz	r5, 800481a <_Bfree+0x2c>
 800480a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800480c:	686a      	ldr	r2, [r5, #4]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004814:	6029      	str	r1, [r5, #0]
 8004816:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800481a:	bd70      	pop	{r4, r5, r6, pc}

0800481c <__multadd>:
 800481c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004820:	690d      	ldr	r5, [r1, #16]
 8004822:	461f      	mov	r7, r3
 8004824:	4606      	mov	r6, r0
 8004826:	460c      	mov	r4, r1
 8004828:	f101 0e14 	add.w	lr, r1, #20
 800482c:	2300      	movs	r3, #0
 800482e:	f8de 0000 	ldr.w	r0, [lr]
 8004832:	b281      	uxth	r1, r0
 8004834:	fb02 7101 	mla	r1, r2, r1, r7
 8004838:	0c0f      	lsrs	r7, r1, #16
 800483a:	0c00      	lsrs	r0, r0, #16
 800483c:	fb02 7000 	mla	r0, r2, r0, r7
 8004840:	b289      	uxth	r1, r1
 8004842:	3301      	adds	r3, #1
 8004844:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004848:	429d      	cmp	r5, r3
 800484a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800484e:	f84e 1b04 	str.w	r1, [lr], #4
 8004852:	dcec      	bgt.n	800482e <__multadd+0x12>
 8004854:	b1d7      	cbz	r7, 800488c <__multadd+0x70>
 8004856:	68a3      	ldr	r3, [r4, #8]
 8004858:	429d      	cmp	r5, r3
 800485a:	db12      	blt.n	8004882 <__multadd+0x66>
 800485c:	6861      	ldr	r1, [r4, #4]
 800485e:	4630      	mov	r0, r6
 8004860:	3101      	adds	r1, #1
 8004862:	f7ff ff90 	bl	8004786 <_Balloc>
 8004866:	6922      	ldr	r2, [r4, #16]
 8004868:	3202      	adds	r2, #2
 800486a:	f104 010c 	add.w	r1, r4, #12
 800486e:	4680      	mov	r8, r0
 8004870:	0092      	lsls	r2, r2, #2
 8004872:	300c      	adds	r0, #12
 8004874:	f7ff ff7a 	bl	800476c <memcpy>
 8004878:	4621      	mov	r1, r4
 800487a:	4630      	mov	r0, r6
 800487c:	f7ff ffb7 	bl	80047ee <_Bfree>
 8004880:	4644      	mov	r4, r8
 8004882:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004886:	3501      	adds	r5, #1
 8004888:	615f      	str	r7, [r3, #20]
 800488a:	6125      	str	r5, [r4, #16]
 800488c:	4620      	mov	r0, r4
 800488e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004892 <__s2b>:
 8004892:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004896:	460c      	mov	r4, r1
 8004898:	4615      	mov	r5, r2
 800489a:	461f      	mov	r7, r3
 800489c:	2209      	movs	r2, #9
 800489e:	3308      	adds	r3, #8
 80048a0:	4606      	mov	r6, r0
 80048a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80048a6:	2100      	movs	r1, #0
 80048a8:	2201      	movs	r2, #1
 80048aa:	429a      	cmp	r2, r3
 80048ac:	db20      	blt.n	80048f0 <__s2b+0x5e>
 80048ae:	4630      	mov	r0, r6
 80048b0:	f7ff ff69 	bl	8004786 <_Balloc>
 80048b4:	9b08      	ldr	r3, [sp, #32]
 80048b6:	6143      	str	r3, [r0, #20]
 80048b8:	2d09      	cmp	r5, #9
 80048ba:	f04f 0301 	mov.w	r3, #1
 80048be:	6103      	str	r3, [r0, #16]
 80048c0:	dd19      	ble.n	80048f6 <__s2b+0x64>
 80048c2:	f104 0909 	add.w	r9, r4, #9
 80048c6:	46c8      	mov	r8, r9
 80048c8:	442c      	add	r4, r5
 80048ca:	f818 3b01 	ldrb.w	r3, [r8], #1
 80048ce:	4601      	mov	r1, r0
 80048d0:	3b30      	subs	r3, #48	; 0x30
 80048d2:	220a      	movs	r2, #10
 80048d4:	4630      	mov	r0, r6
 80048d6:	f7ff ffa1 	bl	800481c <__multadd>
 80048da:	45a0      	cmp	r8, r4
 80048dc:	d1f5      	bne.n	80048ca <__s2b+0x38>
 80048de:	f1a5 0408 	sub.w	r4, r5, #8
 80048e2:	444c      	add	r4, r9
 80048e4:	1b2d      	subs	r5, r5, r4
 80048e6:	1963      	adds	r3, r4, r5
 80048e8:	42bb      	cmp	r3, r7
 80048ea:	db07      	blt.n	80048fc <__s2b+0x6a>
 80048ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048f0:	0052      	lsls	r2, r2, #1
 80048f2:	3101      	adds	r1, #1
 80048f4:	e7d9      	b.n	80048aa <__s2b+0x18>
 80048f6:	340a      	adds	r4, #10
 80048f8:	2509      	movs	r5, #9
 80048fa:	e7f3      	b.n	80048e4 <__s2b+0x52>
 80048fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004900:	4601      	mov	r1, r0
 8004902:	3b30      	subs	r3, #48	; 0x30
 8004904:	220a      	movs	r2, #10
 8004906:	4630      	mov	r0, r6
 8004908:	f7ff ff88 	bl	800481c <__multadd>
 800490c:	e7eb      	b.n	80048e6 <__s2b+0x54>

0800490e <__hi0bits>:
 800490e:	0c02      	lsrs	r2, r0, #16
 8004910:	0412      	lsls	r2, r2, #16
 8004912:	4603      	mov	r3, r0
 8004914:	b9b2      	cbnz	r2, 8004944 <__hi0bits+0x36>
 8004916:	0403      	lsls	r3, r0, #16
 8004918:	2010      	movs	r0, #16
 800491a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800491e:	bf04      	itt	eq
 8004920:	021b      	lsleq	r3, r3, #8
 8004922:	3008      	addeq	r0, #8
 8004924:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004928:	bf04      	itt	eq
 800492a:	011b      	lsleq	r3, r3, #4
 800492c:	3004      	addeq	r0, #4
 800492e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004932:	bf04      	itt	eq
 8004934:	009b      	lsleq	r3, r3, #2
 8004936:	3002      	addeq	r0, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	db06      	blt.n	800494a <__hi0bits+0x3c>
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	d503      	bpl.n	8004948 <__hi0bits+0x3a>
 8004940:	3001      	adds	r0, #1
 8004942:	4770      	bx	lr
 8004944:	2000      	movs	r0, #0
 8004946:	e7e8      	b.n	800491a <__hi0bits+0xc>
 8004948:	2020      	movs	r0, #32
 800494a:	4770      	bx	lr

0800494c <__lo0bits>:
 800494c:	6803      	ldr	r3, [r0, #0]
 800494e:	f013 0207 	ands.w	r2, r3, #7
 8004952:	4601      	mov	r1, r0
 8004954:	d00b      	beq.n	800496e <__lo0bits+0x22>
 8004956:	07da      	lsls	r2, r3, #31
 8004958:	d423      	bmi.n	80049a2 <__lo0bits+0x56>
 800495a:	0798      	lsls	r0, r3, #30
 800495c:	bf49      	itett	mi
 800495e:	085b      	lsrmi	r3, r3, #1
 8004960:	089b      	lsrpl	r3, r3, #2
 8004962:	2001      	movmi	r0, #1
 8004964:	600b      	strmi	r3, [r1, #0]
 8004966:	bf5c      	itt	pl
 8004968:	600b      	strpl	r3, [r1, #0]
 800496a:	2002      	movpl	r0, #2
 800496c:	4770      	bx	lr
 800496e:	b298      	uxth	r0, r3
 8004970:	b9a8      	cbnz	r0, 800499e <__lo0bits+0x52>
 8004972:	0c1b      	lsrs	r3, r3, #16
 8004974:	2010      	movs	r0, #16
 8004976:	f013 0fff 	tst.w	r3, #255	; 0xff
 800497a:	bf04      	itt	eq
 800497c:	0a1b      	lsreq	r3, r3, #8
 800497e:	3008      	addeq	r0, #8
 8004980:	071a      	lsls	r2, r3, #28
 8004982:	bf04      	itt	eq
 8004984:	091b      	lsreq	r3, r3, #4
 8004986:	3004      	addeq	r0, #4
 8004988:	079a      	lsls	r2, r3, #30
 800498a:	bf04      	itt	eq
 800498c:	089b      	lsreq	r3, r3, #2
 800498e:	3002      	addeq	r0, #2
 8004990:	07da      	lsls	r2, r3, #31
 8004992:	d402      	bmi.n	800499a <__lo0bits+0x4e>
 8004994:	085b      	lsrs	r3, r3, #1
 8004996:	d006      	beq.n	80049a6 <__lo0bits+0x5a>
 8004998:	3001      	adds	r0, #1
 800499a:	600b      	str	r3, [r1, #0]
 800499c:	4770      	bx	lr
 800499e:	4610      	mov	r0, r2
 80049a0:	e7e9      	b.n	8004976 <__lo0bits+0x2a>
 80049a2:	2000      	movs	r0, #0
 80049a4:	4770      	bx	lr
 80049a6:	2020      	movs	r0, #32
 80049a8:	4770      	bx	lr

080049aa <__i2b>:
 80049aa:	b510      	push	{r4, lr}
 80049ac:	460c      	mov	r4, r1
 80049ae:	2101      	movs	r1, #1
 80049b0:	f7ff fee9 	bl	8004786 <_Balloc>
 80049b4:	2201      	movs	r2, #1
 80049b6:	6144      	str	r4, [r0, #20]
 80049b8:	6102      	str	r2, [r0, #16]
 80049ba:	bd10      	pop	{r4, pc}

080049bc <__multiply>:
 80049bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049c0:	4614      	mov	r4, r2
 80049c2:	690a      	ldr	r2, [r1, #16]
 80049c4:	6923      	ldr	r3, [r4, #16]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	bfb8      	it	lt
 80049ca:	460b      	movlt	r3, r1
 80049cc:	4689      	mov	r9, r1
 80049ce:	bfbc      	itt	lt
 80049d0:	46a1      	movlt	r9, r4
 80049d2:	461c      	movlt	r4, r3
 80049d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80049d8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80049dc:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80049e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80049e4:	eb07 060a 	add.w	r6, r7, sl
 80049e8:	429e      	cmp	r6, r3
 80049ea:	bfc8      	it	gt
 80049ec:	3101      	addgt	r1, #1
 80049ee:	f7ff feca 	bl	8004786 <_Balloc>
 80049f2:	f100 0514 	add.w	r5, r0, #20
 80049f6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80049fa:	462b      	mov	r3, r5
 80049fc:	2200      	movs	r2, #0
 80049fe:	4543      	cmp	r3, r8
 8004a00:	d316      	bcc.n	8004a30 <__multiply+0x74>
 8004a02:	f104 0214 	add.w	r2, r4, #20
 8004a06:	f109 0114 	add.w	r1, r9, #20
 8004a0a:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8004a0e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004a12:	9301      	str	r3, [sp, #4]
 8004a14:	9c01      	ldr	r4, [sp, #4]
 8004a16:	4294      	cmp	r4, r2
 8004a18:	4613      	mov	r3, r2
 8004a1a:	d80c      	bhi.n	8004a36 <__multiply+0x7a>
 8004a1c:	2e00      	cmp	r6, #0
 8004a1e:	dd03      	ble.n	8004a28 <__multiply+0x6c>
 8004a20:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d054      	beq.n	8004ad2 <__multiply+0x116>
 8004a28:	6106      	str	r6, [r0, #16]
 8004a2a:	b003      	add	sp, #12
 8004a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a30:	f843 2b04 	str.w	r2, [r3], #4
 8004a34:	e7e3      	b.n	80049fe <__multiply+0x42>
 8004a36:	f8b3 a000 	ldrh.w	sl, [r3]
 8004a3a:	3204      	adds	r2, #4
 8004a3c:	f1ba 0f00 	cmp.w	sl, #0
 8004a40:	d020      	beq.n	8004a84 <__multiply+0xc8>
 8004a42:	46ae      	mov	lr, r5
 8004a44:	4689      	mov	r9, r1
 8004a46:	f04f 0c00 	mov.w	ip, #0
 8004a4a:	f859 4b04 	ldr.w	r4, [r9], #4
 8004a4e:	f8be b000 	ldrh.w	fp, [lr]
 8004a52:	b2a3      	uxth	r3, r4
 8004a54:	fb0a b303 	mla	r3, sl, r3, fp
 8004a58:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8004a5c:	f8de 4000 	ldr.w	r4, [lr]
 8004a60:	4463      	add	r3, ip
 8004a62:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004a66:	fb0a c40b 	mla	r4, sl, fp, ip
 8004a6a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004a74:	454f      	cmp	r7, r9
 8004a76:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004a7a:	f84e 3b04 	str.w	r3, [lr], #4
 8004a7e:	d8e4      	bhi.n	8004a4a <__multiply+0x8e>
 8004a80:	f8ce c000 	str.w	ip, [lr]
 8004a84:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8004a88:	f1b9 0f00 	cmp.w	r9, #0
 8004a8c:	d01f      	beq.n	8004ace <__multiply+0x112>
 8004a8e:	682b      	ldr	r3, [r5, #0]
 8004a90:	46ae      	mov	lr, r5
 8004a92:	468c      	mov	ip, r1
 8004a94:	f04f 0a00 	mov.w	sl, #0
 8004a98:	f8bc 4000 	ldrh.w	r4, [ip]
 8004a9c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004aa0:	fb09 b404 	mla	r4, r9, r4, fp
 8004aa4:	44a2      	add	sl, r4
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8004aac:	f84e 3b04 	str.w	r3, [lr], #4
 8004ab0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004ab4:	f8be 4000 	ldrh.w	r4, [lr]
 8004ab8:	0c1b      	lsrs	r3, r3, #16
 8004aba:	fb09 4303 	mla	r3, r9, r3, r4
 8004abe:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8004ac2:	4567      	cmp	r7, ip
 8004ac4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004ac8:	d8e6      	bhi.n	8004a98 <__multiply+0xdc>
 8004aca:	f8ce 3000 	str.w	r3, [lr]
 8004ace:	3504      	adds	r5, #4
 8004ad0:	e7a0      	b.n	8004a14 <__multiply+0x58>
 8004ad2:	3e01      	subs	r6, #1
 8004ad4:	e7a2      	b.n	8004a1c <__multiply+0x60>
	...

08004ad8 <__pow5mult>:
 8004ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004adc:	4615      	mov	r5, r2
 8004ade:	f012 0203 	ands.w	r2, r2, #3
 8004ae2:	4606      	mov	r6, r0
 8004ae4:	460f      	mov	r7, r1
 8004ae6:	d007      	beq.n	8004af8 <__pow5mult+0x20>
 8004ae8:	3a01      	subs	r2, #1
 8004aea:	4c21      	ldr	r4, [pc, #132]	; (8004b70 <__pow5mult+0x98>)
 8004aec:	2300      	movs	r3, #0
 8004aee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004af2:	f7ff fe93 	bl	800481c <__multadd>
 8004af6:	4607      	mov	r7, r0
 8004af8:	10ad      	asrs	r5, r5, #2
 8004afa:	d035      	beq.n	8004b68 <__pow5mult+0x90>
 8004afc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004afe:	b93c      	cbnz	r4, 8004b10 <__pow5mult+0x38>
 8004b00:	2010      	movs	r0, #16
 8004b02:	f7fd fe03 	bl	800270c <malloc>
 8004b06:	6270      	str	r0, [r6, #36]	; 0x24
 8004b08:	6044      	str	r4, [r0, #4]
 8004b0a:	6084      	str	r4, [r0, #8]
 8004b0c:	6004      	str	r4, [r0, #0]
 8004b0e:	60c4      	str	r4, [r0, #12]
 8004b10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004b14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004b18:	b94c      	cbnz	r4, 8004b2e <__pow5mult+0x56>
 8004b1a:	f240 2171 	movw	r1, #625	; 0x271
 8004b1e:	4630      	mov	r0, r6
 8004b20:	f7ff ff43 	bl	80049aa <__i2b>
 8004b24:	2300      	movs	r3, #0
 8004b26:	f8c8 0008 	str.w	r0, [r8, #8]
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	6003      	str	r3, [r0, #0]
 8004b2e:	f04f 0800 	mov.w	r8, #0
 8004b32:	07eb      	lsls	r3, r5, #31
 8004b34:	d50a      	bpl.n	8004b4c <__pow5mult+0x74>
 8004b36:	4639      	mov	r1, r7
 8004b38:	4622      	mov	r2, r4
 8004b3a:	4630      	mov	r0, r6
 8004b3c:	f7ff ff3e 	bl	80049bc <__multiply>
 8004b40:	4639      	mov	r1, r7
 8004b42:	4681      	mov	r9, r0
 8004b44:	4630      	mov	r0, r6
 8004b46:	f7ff fe52 	bl	80047ee <_Bfree>
 8004b4a:	464f      	mov	r7, r9
 8004b4c:	106d      	asrs	r5, r5, #1
 8004b4e:	d00b      	beq.n	8004b68 <__pow5mult+0x90>
 8004b50:	6820      	ldr	r0, [r4, #0]
 8004b52:	b938      	cbnz	r0, 8004b64 <__pow5mult+0x8c>
 8004b54:	4622      	mov	r2, r4
 8004b56:	4621      	mov	r1, r4
 8004b58:	4630      	mov	r0, r6
 8004b5a:	f7ff ff2f 	bl	80049bc <__multiply>
 8004b5e:	6020      	str	r0, [r4, #0]
 8004b60:	f8c0 8000 	str.w	r8, [r0]
 8004b64:	4604      	mov	r4, r0
 8004b66:	e7e4      	b.n	8004b32 <__pow5mult+0x5a>
 8004b68:	4638      	mov	r0, r7
 8004b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b6e:	bf00      	nop
 8004b70:	08005c68 	.word	0x08005c68

08004b74 <__lshift>:
 8004b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b78:	460c      	mov	r4, r1
 8004b7a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004b7e:	6923      	ldr	r3, [r4, #16]
 8004b80:	6849      	ldr	r1, [r1, #4]
 8004b82:	eb0a 0903 	add.w	r9, sl, r3
 8004b86:	68a3      	ldr	r3, [r4, #8]
 8004b88:	4607      	mov	r7, r0
 8004b8a:	4616      	mov	r6, r2
 8004b8c:	f109 0501 	add.w	r5, r9, #1
 8004b90:	42ab      	cmp	r3, r5
 8004b92:	db31      	blt.n	8004bf8 <__lshift+0x84>
 8004b94:	4638      	mov	r0, r7
 8004b96:	f7ff fdf6 	bl	8004786 <_Balloc>
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	4680      	mov	r8, r0
 8004b9e:	f100 0314 	add.w	r3, r0, #20
 8004ba2:	4611      	mov	r1, r2
 8004ba4:	4552      	cmp	r2, sl
 8004ba6:	db2a      	blt.n	8004bfe <__lshift+0x8a>
 8004ba8:	6920      	ldr	r0, [r4, #16]
 8004baa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004bae:	f104 0114 	add.w	r1, r4, #20
 8004bb2:	f016 021f 	ands.w	r2, r6, #31
 8004bb6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8004bba:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8004bbe:	d022      	beq.n	8004c06 <__lshift+0x92>
 8004bc0:	f1c2 0c20 	rsb	ip, r2, #32
 8004bc4:	2000      	movs	r0, #0
 8004bc6:	680e      	ldr	r6, [r1, #0]
 8004bc8:	4096      	lsls	r6, r2
 8004bca:	4330      	orrs	r0, r6
 8004bcc:	f843 0b04 	str.w	r0, [r3], #4
 8004bd0:	f851 0b04 	ldr.w	r0, [r1], #4
 8004bd4:	458e      	cmp	lr, r1
 8004bd6:	fa20 f00c 	lsr.w	r0, r0, ip
 8004bda:	d8f4      	bhi.n	8004bc6 <__lshift+0x52>
 8004bdc:	6018      	str	r0, [r3, #0]
 8004bde:	b108      	cbz	r0, 8004be4 <__lshift+0x70>
 8004be0:	f109 0502 	add.w	r5, r9, #2
 8004be4:	3d01      	subs	r5, #1
 8004be6:	4638      	mov	r0, r7
 8004be8:	f8c8 5010 	str.w	r5, [r8, #16]
 8004bec:	4621      	mov	r1, r4
 8004bee:	f7ff fdfe 	bl	80047ee <_Bfree>
 8004bf2:	4640      	mov	r0, r8
 8004bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bf8:	3101      	adds	r1, #1
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	e7c8      	b.n	8004b90 <__lshift+0x1c>
 8004bfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004c02:	3201      	adds	r2, #1
 8004c04:	e7ce      	b.n	8004ba4 <__lshift+0x30>
 8004c06:	3b04      	subs	r3, #4
 8004c08:	f851 2b04 	ldr.w	r2, [r1], #4
 8004c0c:	f843 2f04 	str.w	r2, [r3, #4]!
 8004c10:	458e      	cmp	lr, r1
 8004c12:	d8f9      	bhi.n	8004c08 <__lshift+0x94>
 8004c14:	e7e6      	b.n	8004be4 <__lshift+0x70>

08004c16 <__mcmp>:
 8004c16:	6903      	ldr	r3, [r0, #16]
 8004c18:	690a      	ldr	r2, [r1, #16]
 8004c1a:	1a9b      	subs	r3, r3, r2
 8004c1c:	b530      	push	{r4, r5, lr}
 8004c1e:	d10c      	bne.n	8004c3a <__mcmp+0x24>
 8004c20:	0092      	lsls	r2, r2, #2
 8004c22:	3014      	adds	r0, #20
 8004c24:	3114      	adds	r1, #20
 8004c26:	1884      	adds	r4, r0, r2
 8004c28:	4411      	add	r1, r2
 8004c2a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004c2e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004c32:	4295      	cmp	r5, r2
 8004c34:	d003      	beq.n	8004c3e <__mcmp+0x28>
 8004c36:	d305      	bcc.n	8004c44 <__mcmp+0x2e>
 8004c38:	2301      	movs	r3, #1
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	bd30      	pop	{r4, r5, pc}
 8004c3e:	42a0      	cmp	r0, r4
 8004c40:	d3f3      	bcc.n	8004c2a <__mcmp+0x14>
 8004c42:	e7fa      	b.n	8004c3a <__mcmp+0x24>
 8004c44:	f04f 33ff 	mov.w	r3, #4294967295
 8004c48:	e7f7      	b.n	8004c3a <__mcmp+0x24>

08004c4a <__mdiff>:
 8004c4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c4e:	460d      	mov	r5, r1
 8004c50:	4607      	mov	r7, r0
 8004c52:	4611      	mov	r1, r2
 8004c54:	4628      	mov	r0, r5
 8004c56:	4614      	mov	r4, r2
 8004c58:	f7ff ffdd 	bl	8004c16 <__mcmp>
 8004c5c:	1e06      	subs	r6, r0, #0
 8004c5e:	d108      	bne.n	8004c72 <__mdiff+0x28>
 8004c60:	4631      	mov	r1, r6
 8004c62:	4638      	mov	r0, r7
 8004c64:	f7ff fd8f 	bl	8004786 <_Balloc>
 8004c68:	2301      	movs	r3, #1
 8004c6a:	6103      	str	r3, [r0, #16]
 8004c6c:	6146      	str	r6, [r0, #20]
 8004c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c72:	bfa4      	itt	ge
 8004c74:	4623      	movge	r3, r4
 8004c76:	462c      	movge	r4, r5
 8004c78:	4638      	mov	r0, r7
 8004c7a:	6861      	ldr	r1, [r4, #4]
 8004c7c:	bfa6      	itte	ge
 8004c7e:	461d      	movge	r5, r3
 8004c80:	2600      	movge	r6, #0
 8004c82:	2601      	movlt	r6, #1
 8004c84:	f7ff fd7f 	bl	8004786 <_Balloc>
 8004c88:	692b      	ldr	r3, [r5, #16]
 8004c8a:	60c6      	str	r6, [r0, #12]
 8004c8c:	6926      	ldr	r6, [r4, #16]
 8004c8e:	f105 0914 	add.w	r9, r5, #20
 8004c92:	f104 0214 	add.w	r2, r4, #20
 8004c96:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004c9a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004c9e:	f100 0514 	add.w	r5, r0, #20
 8004ca2:	f04f 0c00 	mov.w	ip, #0
 8004ca6:	f852 ab04 	ldr.w	sl, [r2], #4
 8004caa:	f859 4b04 	ldr.w	r4, [r9], #4
 8004cae:	fa1c f18a 	uxtah	r1, ip, sl
 8004cb2:	b2a3      	uxth	r3, r4
 8004cb4:	1ac9      	subs	r1, r1, r3
 8004cb6:	0c23      	lsrs	r3, r4, #16
 8004cb8:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8004cbc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004cc0:	b289      	uxth	r1, r1
 8004cc2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004cc6:	45c8      	cmp	r8, r9
 8004cc8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004ccc:	4696      	mov	lr, r2
 8004cce:	f845 3b04 	str.w	r3, [r5], #4
 8004cd2:	d8e8      	bhi.n	8004ca6 <__mdiff+0x5c>
 8004cd4:	45be      	cmp	lr, r7
 8004cd6:	d305      	bcc.n	8004ce4 <__mdiff+0x9a>
 8004cd8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8004cdc:	b18b      	cbz	r3, 8004d02 <__mdiff+0xb8>
 8004cde:	6106      	str	r6, [r0, #16]
 8004ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ce4:	f85e 1b04 	ldr.w	r1, [lr], #4
 8004ce8:	fa1c f381 	uxtah	r3, ip, r1
 8004cec:	141a      	asrs	r2, r3, #16
 8004cee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004cf8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004cfc:	f845 3b04 	str.w	r3, [r5], #4
 8004d00:	e7e8      	b.n	8004cd4 <__mdiff+0x8a>
 8004d02:	3e01      	subs	r6, #1
 8004d04:	e7e8      	b.n	8004cd8 <__mdiff+0x8e>
	...

08004d08 <__ulp>:
 8004d08:	4b12      	ldr	r3, [pc, #72]	; (8004d54 <__ulp+0x4c>)
 8004d0a:	ee10 2a90 	vmov	r2, s1
 8004d0e:	401a      	ands	r2, r3
 8004d10:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	dd04      	ble.n	8004d22 <__ulp+0x1a>
 8004d18:	2000      	movs	r0, #0
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	ec41 0b10 	vmov	d0, r0, r1
 8004d20:	4770      	bx	lr
 8004d22:	425b      	negs	r3, r3
 8004d24:	151b      	asrs	r3, r3, #20
 8004d26:	2b13      	cmp	r3, #19
 8004d28:	f04f 0000 	mov.w	r0, #0
 8004d2c:	f04f 0100 	mov.w	r1, #0
 8004d30:	dc04      	bgt.n	8004d3c <__ulp+0x34>
 8004d32:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004d36:	fa42 f103 	asr.w	r1, r2, r3
 8004d3a:	e7ef      	b.n	8004d1c <__ulp+0x14>
 8004d3c:	3b14      	subs	r3, #20
 8004d3e:	2b1e      	cmp	r3, #30
 8004d40:	f04f 0201 	mov.w	r2, #1
 8004d44:	bfda      	itte	le
 8004d46:	f1c3 031f 	rsble	r3, r3, #31
 8004d4a:	fa02 f303 	lslle.w	r3, r2, r3
 8004d4e:	4613      	movgt	r3, r2
 8004d50:	4618      	mov	r0, r3
 8004d52:	e7e3      	b.n	8004d1c <__ulp+0x14>
 8004d54:	7ff00000 	.word	0x7ff00000

08004d58 <__b2d>:
 8004d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5a:	6905      	ldr	r5, [r0, #16]
 8004d5c:	f100 0714 	add.w	r7, r0, #20
 8004d60:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8004d64:	1f2e      	subs	r6, r5, #4
 8004d66:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8004d6a:	4620      	mov	r0, r4
 8004d6c:	f7ff fdcf 	bl	800490e <__hi0bits>
 8004d70:	f1c0 0320 	rsb	r3, r0, #32
 8004d74:	280a      	cmp	r0, #10
 8004d76:	600b      	str	r3, [r1, #0]
 8004d78:	f8df e074 	ldr.w	lr, [pc, #116]	; 8004df0 <__b2d+0x98>
 8004d7c:	dc14      	bgt.n	8004da8 <__b2d+0x50>
 8004d7e:	f1c0 0c0b 	rsb	ip, r0, #11
 8004d82:	fa24 f10c 	lsr.w	r1, r4, ip
 8004d86:	42b7      	cmp	r7, r6
 8004d88:	ea41 030e 	orr.w	r3, r1, lr
 8004d8c:	bf34      	ite	cc
 8004d8e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8004d92:	2100      	movcs	r1, #0
 8004d94:	3015      	adds	r0, #21
 8004d96:	fa04 f000 	lsl.w	r0, r4, r0
 8004d9a:	fa21 f10c 	lsr.w	r1, r1, ip
 8004d9e:	ea40 0201 	orr.w	r2, r0, r1
 8004da2:	ec43 2b10 	vmov	d0, r2, r3
 8004da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004da8:	42b7      	cmp	r7, r6
 8004daa:	bf3a      	itte	cc
 8004dac:	f1a5 0608 	subcc.w	r6, r5, #8
 8004db0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8004db4:	2100      	movcs	r1, #0
 8004db6:	380b      	subs	r0, #11
 8004db8:	d015      	beq.n	8004de6 <__b2d+0x8e>
 8004dba:	4084      	lsls	r4, r0
 8004dbc:	f1c0 0520 	rsb	r5, r0, #32
 8004dc0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8004dc4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8004dc8:	42be      	cmp	r6, r7
 8004dca:	fa21 fe05 	lsr.w	lr, r1, r5
 8004dce:	ea44 030e 	orr.w	r3, r4, lr
 8004dd2:	bf8c      	ite	hi
 8004dd4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8004dd8:	2400      	movls	r4, #0
 8004dda:	fa01 f000 	lsl.w	r0, r1, r0
 8004dde:	40ec      	lsrs	r4, r5
 8004de0:	ea40 0204 	orr.w	r2, r0, r4
 8004de4:	e7dd      	b.n	8004da2 <__b2d+0x4a>
 8004de6:	ea44 030e 	orr.w	r3, r4, lr
 8004dea:	460a      	mov	r2, r1
 8004dec:	e7d9      	b.n	8004da2 <__b2d+0x4a>
 8004dee:	bf00      	nop
 8004df0:	3ff00000 	.word	0x3ff00000

08004df4 <__d2b>:
 8004df4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004df8:	460e      	mov	r6, r1
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	ec59 8b10 	vmov	r8, r9, d0
 8004e00:	4615      	mov	r5, r2
 8004e02:	f7ff fcc0 	bl	8004786 <_Balloc>
 8004e06:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004e0a:	4607      	mov	r7, r0
 8004e0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004e10:	bb34      	cbnz	r4, 8004e60 <__d2b+0x6c>
 8004e12:	9301      	str	r3, [sp, #4]
 8004e14:	f1b8 0f00 	cmp.w	r8, #0
 8004e18:	d027      	beq.n	8004e6a <__d2b+0x76>
 8004e1a:	a802      	add	r0, sp, #8
 8004e1c:	f840 8d08 	str.w	r8, [r0, #-8]!
 8004e20:	f7ff fd94 	bl	800494c <__lo0bits>
 8004e24:	9900      	ldr	r1, [sp, #0]
 8004e26:	b1f0      	cbz	r0, 8004e66 <__d2b+0x72>
 8004e28:	9a01      	ldr	r2, [sp, #4]
 8004e2a:	f1c0 0320 	rsb	r3, r0, #32
 8004e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e32:	430b      	orrs	r3, r1
 8004e34:	40c2      	lsrs	r2, r0
 8004e36:	617b      	str	r3, [r7, #20]
 8004e38:	9201      	str	r2, [sp, #4]
 8004e3a:	9b01      	ldr	r3, [sp, #4]
 8004e3c:	61bb      	str	r3, [r7, #24]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	bf14      	ite	ne
 8004e42:	2102      	movne	r1, #2
 8004e44:	2101      	moveq	r1, #1
 8004e46:	6139      	str	r1, [r7, #16]
 8004e48:	b1c4      	cbz	r4, 8004e7c <__d2b+0x88>
 8004e4a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004e4e:	4404      	add	r4, r0
 8004e50:	6034      	str	r4, [r6, #0]
 8004e52:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004e56:	6028      	str	r0, [r5, #0]
 8004e58:	4638      	mov	r0, r7
 8004e5a:	b003      	add	sp, #12
 8004e5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e64:	e7d5      	b.n	8004e12 <__d2b+0x1e>
 8004e66:	6179      	str	r1, [r7, #20]
 8004e68:	e7e7      	b.n	8004e3a <__d2b+0x46>
 8004e6a:	a801      	add	r0, sp, #4
 8004e6c:	f7ff fd6e 	bl	800494c <__lo0bits>
 8004e70:	9b01      	ldr	r3, [sp, #4]
 8004e72:	617b      	str	r3, [r7, #20]
 8004e74:	2101      	movs	r1, #1
 8004e76:	6139      	str	r1, [r7, #16]
 8004e78:	3020      	adds	r0, #32
 8004e7a:	e7e5      	b.n	8004e48 <__d2b+0x54>
 8004e7c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004e80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004e84:	6030      	str	r0, [r6, #0]
 8004e86:	6918      	ldr	r0, [r3, #16]
 8004e88:	f7ff fd41 	bl	800490e <__hi0bits>
 8004e8c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004e90:	e7e1      	b.n	8004e56 <__d2b+0x62>

08004e92 <__ratio>:
 8004e92:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004e96:	4688      	mov	r8, r1
 8004e98:	4669      	mov	r1, sp
 8004e9a:	4681      	mov	r9, r0
 8004e9c:	f7ff ff5c 	bl	8004d58 <__b2d>
 8004ea0:	a901      	add	r1, sp, #4
 8004ea2:	4640      	mov	r0, r8
 8004ea4:	ec55 4b10 	vmov	r4, r5, d0
 8004ea8:	f7ff ff56 	bl	8004d58 <__b2d>
 8004eac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004eb0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8004eb4:	1a9a      	subs	r2, r3, r2
 8004eb6:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8004eba:	1acb      	subs	r3, r1, r3
 8004ebc:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8004ec0:	ec57 6b10 	vmov	r6, r7, d0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	bfd6      	itet	le
 8004ec8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8004ecc:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 8004ed0:	eb07 5703 	addle.w	r7, r7, r3, lsl #20
 8004ed4:	4632      	mov	r2, r6
 8004ed6:	463b      	mov	r3, r7
 8004ed8:	4620      	mov	r0, r4
 8004eda:	4629      	mov	r1, r5
 8004edc:	f7fb fcc2 	bl	8000864 <__aeabi_ddiv>
 8004ee0:	ec41 0b10 	vmov	d0, r0, r1
 8004ee4:	b003      	add	sp, #12
 8004ee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004eea <__copybits>:
 8004eea:	3901      	subs	r1, #1
 8004eec:	b510      	push	{r4, lr}
 8004eee:	1149      	asrs	r1, r1, #5
 8004ef0:	6914      	ldr	r4, [r2, #16]
 8004ef2:	3101      	adds	r1, #1
 8004ef4:	f102 0314 	add.w	r3, r2, #20
 8004ef8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004efc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004f00:	42a3      	cmp	r3, r4
 8004f02:	4602      	mov	r2, r0
 8004f04:	d303      	bcc.n	8004f0e <__copybits+0x24>
 8004f06:	2300      	movs	r3, #0
 8004f08:	428a      	cmp	r2, r1
 8004f0a:	d305      	bcc.n	8004f18 <__copybits+0x2e>
 8004f0c:	bd10      	pop	{r4, pc}
 8004f0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f12:	f840 2b04 	str.w	r2, [r0], #4
 8004f16:	e7f3      	b.n	8004f00 <__copybits+0x16>
 8004f18:	f842 3b04 	str.w	r3, [r2], #4
 8004f1c:	e7f4      	b.n	8004f08 <__copybits+0x1e>

08004f1e <__any_on>:
 8004f1e:	f100 0214 	add.w	r2, r0, #20
 8004f22:	6900      	ldr	r0, [r0, #16]
 8004f24:	114b      	asrs	r3, r1, #5
 8004f26:	4298      	cmp	r0, r3
 8004f28:	b510      	push	{r4, lr}
 8004f2a:	db11      	blt.n	8004f50 <__any_on+0x32>
 8004f2c:	dd0a      	ble.n	8004f44 <__any_on+0x26>
 8004f2e:	f011 011f 	ands.w	r1, r1, #31
 8004f32:	d007      	beq.n	8004f44 <__any_on+0x26>
 8004f34:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8004f38:	fa24 f001 	lsr.w	r0, r4, r1
 8004f3c:	fa00 f101 	lsl.w	r1, r0, r1
 8004f40:	428c      	cmp	r4, r1
 8004f42:	d10b      	bne.n	8004f5c <__any_on+0x3e>
 8004f44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d803      	bhi.n	8004f54 <__any_on+0x36>
 8004f4c:	2000      	movs	r0, #0
 8004f4e:	bd10      	pop	{r4, pc}
 8004f50:	4603      	mov	r3, r0
 8004f52:	e7f7      	b.n	8004f44 <__any_on+0x26>
 8004f54:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004f58:	2900      	cmp	r1, #0
 8004f5a:	d0f5      	beq.n	8004f48 <__any_on+0x2a>
 8004f5c:	2001      	movs	r0, #1
 8004f5e:	bd10      	pop	{r4, pc}

08004f60 <_calloc_r>:
 8004f60:	b538      	push	{r3, r4, r5, lr}
 8004f62:	fb02 f401 	mul.w	r4, r2, r1
 8004f66:	4621      	mov	r1, r4
 8004f68:	f7fd fe8a 	bl	8002c80 <_malloc_r>
 8004f6c:	4605      	mov	r5, r0
 8004f6e:	b118      	cbz	r0, 8004f78 <_calloc_r+0x18>
 8004f70:	4622      	mov	r2, r4
 8004f72:	2100      	movs	r1, #0
 8004f74:	f000 f8fd 	bl	8005172 <memset>
 8004f78:	4628      	mov	r0, r5
 8004f7a:	bd38      	pop	{r3, r4, r5, pc}

08004f7c <siscanf>:
 8004f7c:	b40e      	push	{r1, r2, r3}
 8004f7e:	b530      	push	{r4, r5, lr}
 8004f80:	b09c      	sub	sp, #112	; 0x70
 8004f82:	ac1f      	add	r4, sp, #124	; 0x7c
 8004f84:	f44f 7201 	mov.w	r2, #516	; 0x204
 8004f88:	f854 5b04 	ldr.w	r5, [r4], #4
 8004f8c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004f90:	9002      	str	r0, [sp, #8]
 8004f92:	9006      	str	r0, [sp, #24]
 8004f94:	f7fb f926 	bl	80001e4 <strlen>
 8004f98:	4b0b      	ldr	r3, [pc, #44]	; (8004fc8 <siscanf+0x4c>)
 8004f9a:	9003      	str	r0, [sp, #12]
 8004f9c:	9007      	str	r0, [sp, #28]
 8004f9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fa0:	480a      	ldr	r0, [pc, #40]	; (8004fcc <siscanf+0x50>)
 8004fa2:	9401      	str	r4, [sp, #4]
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	930f      	str	r3, [sp, #60]	; 0x3c
 8004fa8:	9314      	str	r3, [sp, #80]	; 0x50
 8004faa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004fae:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004fb2:	462a      	mov	r2, r5
 8004fb4:	4623      	mov	r3, r4
 8004fb6:	a902      	add	r1, sp, #8
 8004fb8:	6800      	ldr	r0, [r0, #0]
 8004fba:	f000 f93d 	bl	8005238 <__ssvfiscanf_r>
 8004fbe:	b01c      	add	sp, #112	; 0x70
 8004fc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004fc4:	b003      	add	sp, #12
 8004fc6:	4770      	bx	lr
 8004fc8:	08004fd1 	.word	0x08004fd1
 8004fcc:	2000005c 	.word	0x2000005c

08004fd0 <__seofread>:
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	4770      	bx	lr

08004fd4 <strcpy>:
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fda:	f803 2b01 	strb.w	r2, [r3], #1
 8004fde:	2a00      	cmp	r2, #0
 8004fe0:	d1f9      	bne.n	8004fd6 <strcpy+0x2>
 8004fe2:	4770      	bx	lr

08004fe4 <strncmp>:
 8004fe4:	b510      	push	{r4, lr}
 8004fe6:	b16a      	cbz	r2, 8005004 <strncmp+0x20>
 8004fe8:	3901      	subs	r1, #1
 8004fea:	1884      	adds	r4, r0, r2
 8004fec:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004ff0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d103      	bne.n	8005000 <strncmp+0x1c>
 8004ff8:	42a0      	cmp	r0, r4
 8004ffa:	d001      	beq.n	8005000 <strncmp+0x1c>
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1f5      	bne.n	8004fec <strncmp+0x8>
 8005000:	1a98      	subs	r0, r3, r2
 8005002:	bd10      	pop	{r4, pc}
 8005004:	4610      	mov	r0, r2
 8005006:	bd10      	pop	{r4, pc}

08005008 <_strtoul_l.isra.0>:
 8005008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800500c:	4680      	mov	r8, r0
 800500e:	4689      	mov	r9, r1
 8005010:	4692      	mov	sl, r2
 8005012:	461e      	mov	r6, r3
 8005014:	460f      	mov	r7, r1
 8005016:	463d      	mov	r5, r7
 8005018:	9808      	ldr	r0, [sp, #32]
 800501a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800501e:	f7ff fb7f 	bl	8004720 <__locale_ctype_ptr_l>
 8005022:	4420      	add	r0, r4
 8005024:	7843      	ldrb	r3, [r0, #1]
 8005026:	f013 0308 	ands.w	r3, r3, #8
 800502a:	d10a      	bne.n	8005042 <_strtoul_l.isra.0+0x3a>
 800502c:	2c2d      	cmp	r4, #45	; 0x2d
 800502e:	d10a      	bne.n	8005046 <_strtoul_l.isra.0+0x3e>
 8005030:	782c      	ldrb	r4, [r5, #0]
 8005032:	2301      	movs	r3, #1
 8005034:	1cbd      	adds	r5, r7, #2
 8005036:	b15e      	cbz	r6, 8005050 <_strtoul_l.isra.0+0x48>
 8005038:	2e10      	cmp	r6, #16
 800503a:	d113      	bne.n	8005064 <_strtoul_l.isra.0+0x5c>
 800503c:	2c30      	cmp	r4, #48	; 0x30
 800503e:	d009      	beq.n	8005054 <_strtoul_l.isra.0+0x4c>
 8005040:	e010      	b.n	8005064 <_strtoul_l.isra.0+0x5c>
 8005042:	462f      	mov	r7, r5
 8005044:	e7e7      	b.n	8005016 <_strtoul_l.isra.0+0xe>
 8005046:	2c2b      	cmp	r4, #43	; 0x2b
 8005048:	bf04      	itt	eq
 800504a:	782c      	ldrbeq	r4, [r5, #0]
 800504c:	1cbd      	addeq	r5, r7, #2
 800504e:	e7f2      	b.n	8005036 <_strtoul_l.isra.0+0x2e>
 8005050:	2c30      	cmp	r4, #48	; 0x30
 8005052:	d125      	bne.n	80050a0 <_strtoul_l.isra.0+0x98>
 8005054:	782a      	ldrb	r2, [r5, #0]
 8005056:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800505a:	2a58      	cmp	r2, #88	; 0x58
 800505c:	d14a      	bne.n	80050f4 <_strtoul_l.isra.0+0xec>
 800505e:	786c      	ldrb	r4, [r5, #1]
 8005060:	2610      	movs	r6, #16
 8005062:	3502      	adds	r5, #2
 8005064:	f04f 31ff 	mov.w	r1, #4294967295
 8005068:	2700      	movs	r7, #0
 800506a:	fbb1 f1f6 	udiv	r1, r1, r6
 800506e:	fb06 fe01 	mul.w	lr, r6, r1
 8005072:	ea6f 0e0e 	mvn.w	lr, lr
 8005076:	4638      	mov	r0, r7
 8005078:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 800507c:	2a09      	cmp	r2, #9
 800507e:	d811      	bhi.n	80050a4 <_strtoul_l.isra.0+0x9c>
 8005080:	4614      	mov	r4, r2
 8005082:	42a6      	cmp	r6, r4
 8005084:	dd1d      	ble.n	80050c2 <_strtoul_l.isra.0+0xba>
 8005086:	2f00      	cmp	r7, #0
 8005088:	db18      	blt.n	80050bc <_strtoul_l.isra.0+0xb4>
 800508a:	4281      	cmp	r1, r0
 800508c:	d316      	bcc.n	80050bc <_strtoul_l.isra.0+0xb4>
 800508e:	d101      	bne.n	8005094 <_strtoul_l.isra.0+0x8c>
 8005090:	45a6      	cmp	lr, r4
 8005092:	db13      	blt.n	80050bc <_strtoul_l.isra.0+0xb4>
 8005094:	fb00 4006 	mla	r0, r0, r6, r4
 8005098:	2701      	movs	r7, #1
 800509a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800509e:	e7eb      	b.n	8005078 <_strtoul_l.isra.0+0x70>
 80050a0:	260a      	movs	r6, #10
 80050a2:	e7df      	b.n	8005064 <_strtoul_l.isra.0+0x5c>
 80050a4:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 80050a8:	2a19      	cmp	r2, #25
 80050aa:	d801      	bhi.n	80050b0 <_strtoul_l.isra.0+0xa8>
 80050ac:	3c37      	subs	r4, #55	; 0x37
 80050ae:	e7e8      	b.n	8005082 <_strtoul_l.isra.0+0x7a>
 80050b0:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 80050b4:	2a19      	cmp	r2, #25
 80050b6:	d804      	bhi.n	80050c2 <_strtoul_l.isra.0+0xba>
 80050b8:	3c57      	subs	r4, #87	; 0x57
 80050ba:	e7e2      	b.n	8005082 <_strtoul_l.isra.0+0x7a>
 80050bc:	f04f 37ff 	mov.w	r7, #4294967295
 80050c0:	e7eb      	b.n	800509a <_strtoul_l.isra.0+0x92>
 80050c2:	2f00      	cmp	r7, #0
 80050c4:	da09      	bge.n	80050da <_strtoul_l.isra.0+0xd2>
 80050c6:	2322      	movs	r3, #34	; 0x22
 80050c8:	f8c8 3000 	str.w	r3, [r8]
 80050cc:	f04f 30ff 	mov.w	r0, #4294967295
 80050d0:	f1ba 0f00 	cmp.w	sl, #0
 80050d4:	d107      	bne.n	80050e6 <_strtoul_l.isra.0+0xde>
 80050d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050da:	b103      	cbz	r3, 80050de <_strtoul_l.isra.0+0xd6>
 80050dc:	4240      	negs	r0, r0
 80050de:	f1ba 0f00 	cmp.w	sl, #0
 80050e2:	d00c      	beq.n	80050fe <_strtoul_l.isra.0+0xf6>
 80050e4:	b127      	cbz	r7, 80050f0 <_strtoul_l.isra.0+0xe8>
 80050e6:	3d01      	subs	r5, #1
 80050e8:	f8ca 5000 	str.w	r5, [sl]
 80050ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050f0:	464d      	mov	r5, r9
 80050f2:	e7f9      	b.n	80050e8 <_strtoul_l.isra.0+0xe0>
 80050f4:	2430      	movs	r4, #48	; 0x30
 80050f6:	2e00      	cmp	r6, #0
 80050f8:	d1b4      	bne.n	8005064 <_strtoul_l.isra.0+0x5c>
 80050fa:	2608      	movs	r6, #8
 80050fc:	e7b2      	b.n	8005064 <_strtoul_l.isra.0+0x5c>
 80050fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08005104 <_strtoul_r>:
 8005104:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005106:	4c06      	ldr	r4, [pc, #24]	; (8005120 <_strtoul_r+0x1c>)
 8005108:	4d06      	ldr	r5, [pc, #24]	; (8005124 <_strtoul_r+0x20>)
 800510a:	6824      	ldr	r4, [r4, #0]
 800510c:	6a24      	ldr	r4, [r4, #32]
 800510e:	2c00      	cmp	r4, #0
 8005110:	bf08      	it	eq
 8005112:	462c      	moveq	r4, r5
 8005114:	9400      	str	r4, [sp, #0]
 8005116:	f7ff ff77 	bl	8005008 <_strtoul_l.isra.0>
 800511a:	b003      	add	sp, #12
 800511c:	bd30      	pop	{r4, r5, pc}
 800511e:	bf00      	nop
 8005120:	2000005c 	.word	0x2000005c
 8005124:	200000c0 	.word	0x200000c0

08005128 <strtoul>:
 8005128:	4b08      	ldr	r3, [pc, #32]	; (800514c <strtoul+0x24>)
 800512a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800512c:	681c      	ldr	r4, [r3, #0]
 800512e:	4d08      	ldr	r5, [pc, #32]	; (8005150 <strtoul+0x28>)
 8005130:	6a23      	ldr	r3, [r4, #32]
 8005132:	2b00      	cmp	r3, #0
 8005134:	bf08      	it	eq
 8005136:	462b      	moveq	r3, r5
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	4613      	mov	r3, r2
 800513c:	460a      	mov	r2, r1
 800513e:	4601      	mov	r1, r0
 8005140:	4620      	mov	r0, r4
 8005142:	f7ff ff61 	bl	8005008 <_strtoul_l.isra.0>
 8005146:	b003      	add	sp, #12
 8005148:	bd30      	pop	{r4, r5, pc}
 800514a:	bf00      	nop
 800514c:	2000005c 	.word	0x2000005c
 8005150:	200000c0 	.word	0x200000c0

08005154 <__ascii_wctomb>:
 8005154:	b149      	cbz	r1, 800516a <__ascii_wctomb+0x16>
 8005156:	2aff      	cmp	r2, #255	; 0xff
 8005158:	bf85      	ittet	hi
 800515a:	238a      	movhi	r3, #138	; 0x8a
 800515c:	6003      	strhi	r3, [r0, #0]
 800515e:	700a      	strbls	r2, [r1, #0]
 8005160:	f04f 30ff 	movhi.w	r0, #4294967295
 8005164:	bf98      	it	ls
 8005166:	2001      	movls	r0, #1
 8005168:	4770      	bx	lr
 800516a:	4608      	mov	r0, r1
 800516c:	4770      	bx	lr

0800516e <__env_lock>:
 800516e:	4770      	bx	lr

08005170 <__env_unlock>:
 8005170:	4770      	bx	lr

08005172 <memset>:
 8005172:	4402      	add	r2, r0
 8005174:	4603      	mov	r3, r0
 8005176:	4293      	cmp	r3, r2
 8005178:	d100      	bne.n	800517c <memset+0xa>
 800517a:	4770      	bx	lr
 800517c:	f803 1b01 	strb.w	r1, [r3], #1
 8005180:	e7f9      	b.n	8005176 <memset+0x4>

08005182 <_sungetc_r>:
 8005182:	b538      	push	{r3, r4, r5, lr}
 8005184:	1c4b      	adds	r3, r1, #1
 8005186:	4614      	mov	r4, r2
 8005188:	d103      	bne.n	8005192 <_sungetc_r+0x10>
 800518a:	f04f 35ff 	mov.w	r5, #4294967295
 800518e:	4628      	mov	r0, r5
 8005190:	bd38      	pop	{r3, r4, r5, pc}
 8005192:	8993      	ldrh	r3, [r2, #12]
 8005194:	f023 0320 	bic.w	r3, r3, #32
 8005198:	8193      	strh	r3, [r2, #12]
 800519a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800519c:	6852      	ldr	r2, [r2, #4]
 800519e:	b2cd      	uxtb	r5, r1
 80051a0:	b18b      	cbz	r3, 80051c6 <_sungetc_r+0x44>
 80051a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051a4:	429a      	cmp	r2, r3
 80051a6:	da08      	bge.n	80051ba <_sungetc_r+0x38>
 80051a8:	6823      	ldr	r3, [r4, #0]
 80051aa:	1e5a      	subs	r2, r3, #1
 80051ac:	6022      	str	r2, [r4, #0]
 80051ae:	f803 5c01 	strb.w	r5, [r3, #-1]
 80051b2:	6863      	ldr	r3, [r4, #4]
 80051b4:	3301      	adds	r3, #1
 80051b6:	6063      	str	r3, [r4, #4]
 80051b8:	e7e9      	b.n	800518e <_sungetc_r+0xc>
 80051ba:	4621      	mov	r1, r4
 80051bc:	f000 fbaa 	bl	8005914 <__submore>
 80051c0:	2800      	cmp	r0, #0
 80051c2:	d0f1      	beq.n	80051a8 <_sungetc_r+0x26>
 80051c4:	e7e1      	b.n	800518a <_sungetc_r+0x8>
 80051c6:	6921      	ldr	r1, [r4, #16]
 80051c8:	6823      	ldr	r3, [r4, #0]
 80051ca:	b151      	cbz	r1, 80051e2 <_sungetc_r+0x60>
 80051cc:	4299      	cmp	r1, r3
 80051ce:	d208      	bcs.n	80051e2 <_sungetc_r+0x60>
 80051d0:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80051d4:	428d      	cmp	r5, r1
 80051d6:	d104      	bne.n	80051e2 <_sungetc_r+0x60>
 80051d8:	3b01      	subs	r3, #1
 80051da:	3201      	adds	r2, #1
 80051dc:	6023      	str	r3, [r4, #0]
 80051de:	6062      	str	r2, [r4, #4]
 80051e0:	e7d5      	b.n	800518e <_sungetc_r+0xc>
 80051e2:	63e3      	str	r3, [r4, #60]	; 0x3c
 80051e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051e8:	6363      	str	r3, [r4, #52]	; 0x34
 80051ea:	2303      	movs	r3, #3
 80051ec:	63a3      	str	r3, [r4, #56]	; 0x38
 80051ee:	4623      	mov	r3, r4
 80051f0:	6422      	str	r2, [r4, #64]	; 0x40
 80051f2:	f803 5f46 	strb.w	r5, [r3, #70]!
 80051f6:	6023      	str	r3, [r4, #0]
 80051f8:	2301      	movs	r3, #1
 80051fa:	e7dc      	b.n	80051b6 <_sungetc_r+0x34>

080051fc <__ssrefill_r>:
 80051fc:	b510      	push	{r4, lr}
 80051fe:	460c      	mov	r4, r1
 8005200:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005202:	b169      	cbz	r1, 8005220 <__ssrefill_r+0x24>
 8005204:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005208:	4299      	cmp	r1, r3
 800520a:	d001      	beq.n	8005210 <__ssrefill_r+0x14>
 800520c:	f7fd fcea 	bl	8002be4 <_free_r>
 8005210:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005212:	6063      	str	r3, [r4, #4]
 8005214:	2000      	movs	r0, #0
 8005216:	6360      	str	r0, [r4, #52]	; 0x34
 8005218:	b113      	cbz	r3, 8005220 <__ssrefill_r+0x24>
 800521a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800521c:	6023      	str	r3, [r4, #0]
 800521e:	bd10      	pop	{r4, pc}
 8005220:	6923      	ldr	r3, [r4, #16]
 8005222:	6023      	str	r3, [r4, #0]
 8005224:	2300      	movs	r3, #0
 8005226:	6063      	str	r3, [r4, #4]
 8005228:	89a3      	ldrh	r3, [r4, #12]
 800522a:	f043 0320 	orr.w	r3, r3, #32
 800522e:	81a3      	strh	r3, [r4, #12]
 8005230:	f04f 30ff 	mov.w	r0, #4294967295
 8005234:	bd10      	pop	{r4, pc}
	...

08005238 <__ssvfiscanf_r>:
 8005238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800523c:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 8005240:	f10d 080c 	add.w	r8, sp, #12
 8005244:	9301      	str	r3, [sp, #4]
 8005246:	2300      	movs	r3, #0
 8005248:	9346      	str	r3, [sp, #280]	; 0x118
 800524a:	9347      	str	r3, [sp, #284]	; 0x11c
 800524c:	4ba0      	ldr	r3, [pc, #640]	; (80054d0 <__ssvfiscanf_r+0x298>)
 800524e:	93a2      	str	r3, [sp, #648]	; 0x288
 8005250:	f8df 9284 	ldr.w	r9, [pc, #644]	; 80054d8 <__ssvfiscanf_r+0x2a0>
 8005254:	4b9f      	ldr	r3, [pc, #636]	; (80054d4 <__ssvfiscanf_r+0x29c>)
 8005256:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 800525a:	4606      	mov	r6, r0
 800525c:	460c      	mov	r4, r1
 800525e:	93a3      	str	r3, [sp, #652]	; 0x28c
 8005260:	4692      	mov	sl, r2
 8005262:	270a      	movs	r7, #10
 8005264:	f89a 3000 	ldrb.w	r3, [sl]
 8005268:	2b00      	cmp	r3, #0
 800526a:	f000 812f 	beq.w	80054cc <__ssvfiscanf_r+0x294>
 800526e:	f7ff fa5b 	bl	8004728 <__locale_ctype_ptr>
 8005272:	f89a b000 	ldrb.w	fp, [sl]
 8005276:	4458      	add	r0, fp
 8005278:	7843      	ldrb	r3, [r0, #1]
 800527a:	f013 0308 	ands.w	r3, r3, #8
 800527e:	d143      	bne.n	8005308 <__ssvfiscanf_r+0xd0>
 8005280:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8005284:	f10a 0501 	add.w	r5, sl, #1
 8005288:	f040 8099 	bne.w	80053be <__ssvfiscanf_r+0x186>
 800528c:	9345      	str	r3, [sp, #276]	; 0x114
 800528e:	9343      	str	r3, [sp, #268]	; 0x10c
 8005290:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8005294:	2b2a      	cmp	r3, #42	; 0x2a
 8005296:	d103      	bne.n	80052a0 <__ssvfiscanf_r+0x68>
 8005298:	2310      	movs	r3, #16
 800529a:	9343      	str	r3, [sp, #268]	; 0x10c
 800529c:	f10a 0502 	add.w	r5, sl, #2
 80052a0:	7829      	ldrb	r1, [r5, #0]
 80052a2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80052a6:	2a09      	cmp	r2, #9
 80052a8:	46aa      	mov	sl, r5
 80052aa:	f105 0501 	add.w	r5, r5, #1
 80052ae:	d941      	bls.n	8005334 <__ssvfiscanf_r+0xfc>
 80052b0:	2203      	movs	r2, #3
 80052b2:	4889      	ldr	r0, [pc, #548]	; (80054d8 <__ssvfiscanf_r+0x2a0>)
 80052b4:	f7fa ffa4 	bl	8000200 <memchr>
 80052b8:	b138      	cbz	r0, 80052ca <__ssvfiscanf_r+0x92>
 80052ba:	eba0 0309 	sub.w	r3, r0, r9
 80052be:	2001      	movs	r0, #1
 80052c0:	4098      	lsls	r0, r3
 80052c2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80052c4:	4318      	orrs	r0, r3
 80052c6:	9043      	str	r0, [sp, #268]	; 0x10c
 80052c8:	46aa      	mov	sl, r5
 80052ca:	f89a 3000 	ldrb.w	r3, [sl]
 80052ce:	2b67      	cmp	r3, #103	; 0x67
 80052d0:	f10a 0501 	add.w	r5, sl, #1
 80052d4:	d84a      	bhi.n	800536c <__ssvfiscanf_r+0x134>
 80052d6:	2b65      	cmp	r3, #101	; 0x65
 80052d8:	f080 80b7 	bcs.w	800544a <__ssvfiscanf_r+0x212>
 80052dc:	2b47      	cmp	r3, #71	; 0x47
 80052de:	d82f      	bhi.n	8005340 <__ssvfiscanf_r+0x108>
 80052e0:	2b45      	cmp	r3, #69	; 0x45
 80052e2:	f080 80b2 	bcs.w	800544a <__ssvfiscanf_r+0x212>
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f000 8082 	beq.w	80053f0 <__ssvfiscanf_r+0x1b8>
 80052ec:	2b25      	cmp	r3, #37	; 0x25
 80052ee:	d066      	beq.n	80053be <__ssvfiscanf_r+0x186>
 80052f0:	2303      	movs	r3, #3
 80052f2:	9349      	str	r3, [sp, #292]	; 0x124
 80052f4:	9744      	str	r7, [sp, #272]	; 0x110
 80052f6:	e045      	b.n	8005384 <__ssvfiscanf_r+0x14c>
 80052f8:	9947      	ldr	r1, [sp, #284]	; 0x11c
 80052fa:	3101      	adds	r1, #1
 80052fc:	9147      	str	r1, [sp, #284]	; 0x11c
 80052fe:	6861      	ldr	r1, [r4, #4]
 8005300:	3301      	adds	r3, #1
 8005302:	3901      	subs	r1, #1
 8005304:	6061      	str	r1, [r4, #4]
 8005306:	6023      	str	r3, [r4, #0]
 8005308:	6863      	ldr	r3, [r4, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	dd0b      	ble.n	8005326 <__ssvfiscanf_r+0xee>
 800530e:	f7ff fa0b 	bl	8004728 <__locale_ctype_ptr>
 8005312:	6823      	ldr	r3, [r4, #0]
 8005314:	7819      	ldrb	r1, [r3, #0]
 8005316:	4408      	add	r0, r1
 8005318:	7841      	ldrb	r1, [r0, #1]
 800531a:	070d      	lsls	r5, r1, #28
 800531c:	d4ec      	bmi.n	80052f8 <__ssvfiscanf_r+0xc0>
 800531e:	f10a 0501 	add.w	r5, sl, #1
 8005322:	46aa      	mov	sl, r5
 8005324:	e79e      	b.n	8005264 <__ssvfiscanf_r+0x2c>
 8005326:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005328:	4621      	mov	r1, r4
 800532a:	4630      	mov	r0, r6
 800532c:	4798      	blx	r3
 800532e:	2800      	cmp	r0, #0
 8005330:	d0ed      	beq.n	800530e <__ssvfiscanf_r+0xd6>
 8005332:	e7f4      	b.n	800531e <__ssvfiscanf_r+0xe6>
 8005334:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005336:	fb07 1303 	mla	r3, r7, r3, r1
 800533a:	3b30      	subs	r3, #48	; 0x30
 800533c:	9345      	str	r3, [sp, #276]	; 0x114
 800533e:	e7af      	b.n	80052a0 <__ssvfiscanf_r+0x68>
 8005340:	2b5b      	cmp	r3, #91	; 0x5b
 8005342:	d061      	beq.n	8005408 <__ssvfiscanf_r+0x1d0>
 8005344:	d80c      	bhi.n	8005360 <__ssvfiscanf_r+0x128>
 8005346:	2b58      	cmp	r3, #88	; 0x58
 8005348:	d1d2      	bne.n	80052f0 <__ssvfiscanf_r+0xb8>
 800534a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800534c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005350:	9243      	str	r2, [sp, #268]	; 0x10c
 8005352:	2210      	movs	r2, #16
 8005354:	9244      	str	r2, [sp, #272]	; 0x110
 8005356:	2b6f      	cmp	r3, #111	; 0x6f
 8005358:	bfb4      	ite	lt
 800535a:	2303      	movlt	r3, #3
 800535c:	2304      	movge	r3, #4
 800535e:	e010      	b.n	8005382 <__ssvfiscanf_r+0x14a>
 8005360:	2b63      	cmp	r3, #99	; 0x63
 8005362:	d05c      	beq.n	800541e <__ssvfiscanf_r+0x1e6>
 8005364:	2b64      	cmp	r3, #100	; 0x64
 8005366:	d1c3      	bne.n	80052f0 <__ssvfiscanf_r+0xb8>
 8005368:	9744      	str	r7, [sp, #272]	; 0x110
 800536a:	e7f4      	b.n	8005356 <__ssvfiscanf_r+0x11e>
 800536c:	2b70      	cmp	r3, #112	; 0x70
 800536e:	d042      	beq.n	80053f6 <__ssvfiscanf_r+0x1be>
 8005370:	d81d      	bhi.n	80053ae <__ssvfiscanf_r+0x176>
 8005372:	2b6e      	cmp	r3, #110	; 0x6e
 8005374:	d059      	beq.n	800542a <__ssvfiscanf_r+0x1f2>
 8005376:	d843      	bhi.n	8005400 <__ssvfiscanf_r+0x1c8>
 8005378:	2b69      	cmp	r3, #105	; 0x69
 800537a:	d1b9      	bne.n	80052f0 <__ssvfiscanf_r+0xb8>
 800537c:	2300      	movs	r3, #0
 800537e:	9344      	str	r3, [sp, #272]	; 0x110
 8005380:	2303      	movs	r3, #3
 8005382:	9349      	str	r3, [sp, #292]	; 0x124
 8005384:	6863      	ldr	r3, [r4, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	dd61      	ble.n	800544e <__ssvfiscanf_r+0x216>
 800538a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800538c:	0659      	lsls	r1, r3, #25
 800538e:	d56f      	bpl.n	8005470 <__ssvfiscanf_r+0x238>
 8005390:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8005392:	2b02      	cmp	r3, #2
 8005394:	dc7c      	bgt.n	8005490 <__ssvfiscanf_r+0x258>
 8005396:	ab01      	add	r3, sp, #4
 8005398:	4622      	mov	r2, r4
 800539a:	a943      	add	r1, sp, #268	; 0x10c
 800539c:	4630      	mov	r0, r6
 800539e:	f000 f89f 	bl	80054e0 <_scanf_chars>
 80053a2:	2801      	cmp	r0, #1
 80053a4:	f000 8092 	beq.w	80054cc <__ssvfiscanf_r+0x294>
 80053a8:	2802      	cmp	r0, #2
 80053aa:	d1ba      	bne.n	8005322 <__ssvfiscanf_r+0xea>
 80053ac:	e01d      	b.n	80053ea <__ssvfiscanf_r+0x1b2>
 80053ae:	2b75      	cmp	r3, #117	; 0x75
 80053b0:	d0da      	beq.n	8005368 <__ssvfiscanf_r+0x130>
 80053b2:	2b78      	cmp	r3, #120	; 0x78
 80053b4:	d0c9      	beq.n	800534a <__ssvfiscanf_r+0x112>
 80053b6:	2b73      	cmp	r3, #115	; 0x73
 80053b8:	d19a      	bne.n	80052f0 <__ssvfiscanf_r+0xb8>
 80053ba:	2302      	movs	r3, #2
 80053bc:	e7e1      	b.n	8005382 <__ssvfiscanf_r+0x14a>
 80053be:	6863      	ldr	r3, [r4, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	dd0c      	ble.n	80053de <__ssvfiscanf_r+0x1a6>
 80053c4:	6823      	ldr	r3, [r4, #0]
 80053c6:	781a      	ldrb	r2, [r3, #0]
 80053c8:	4593      	cmp	fp, r2
 80053ca:	d17f      	bne.n	80054cc <__ssvfiscanf_r+0x294>
 80053cc:	3301      	adds	r3, #1
 80053ce:	6862      	ldr	r2, [r4, #4]
 80053d0:	6023      	str	r3, [r4, #0]
 80053d2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80053d4:	3a01      	subs	r2, #1
 80053d6:	3301      	adds	r3, #1
 80053d8:	6062      	str	r2, [r4, #4]
 80053da:	9347      	str	r3, [sp, #284]	; 0x11c
 80053dc:	e7a1      	b.n	8005322 <__ssvfiscanf_r+0xea>
 80053de:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80053e0:	4621      	mov	r1, r4
 80053e2:	4630      	mov	r0, r6
 80053e4:	4798      	blx	r3
 80053e6:	2800      	cmp	r0, #0
 80053e8:	d0ec      	beq.n	80053c4 <__ssvfiscanf_r+0x18c>
 80053ea:	9846      	ldr	r0, [sp, #280]	; 0x118
 80053ec:	2800      	cmp	r0, #0
 80053ee:	d163      	bne.n	80054b8 <__ssvfiscanf_r+0x280>
 80053f0:	f04f 30ff 	mov.w	r0, #4294967295
 80053f4:	e066      	b.n	80054c4 <__ssvfiscanf_r+0x28c>
 80053f6:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80053f8:	f042 0220 	orr.w	r2, r2, #32
 80053fc:	9243      	str	r2, [sp, #268]	; 0x10c
 80053fe:	e7a4      	b.n	800534a <__ssvfiscanf_r+0x112>
 8005400:	2308      	movs	r3, #8
 8005402:	9344      	str	r3, [sp, #272]	; 0x110
 8005404:	2304      	movs	r3, #4
 8005406:	e7bc      	b.n	8005382 <__ssvfiscanf_r+0x14a>
 8005408:	4629      	mov	r1, r5
 800540a:	4640      	mov	r0, r8
 800540c:	f000 f9c0 	bl	8005790 <__sccl>
 8005410:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005416:	9343      	str	r3, [sp, #268]	; 0x10c
 8005418:	4605      	mov	r5, r0
 800541a:	2301      	movs	r3, #1
 800541c:	e7b1      	b.n	8005382 <__ssvfiscanf_r+0x14a>
 800541e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005424:	9343      	str	r3, [sp, #268]	; 0x10c
 8005426:	2300      	movs	r3, #0
 8005428:	e7ab      	b.n	8005382 <__ssvfiscanf_r+0x14a>
 800542a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800542c:	06d0      	lsls	r0, r2, #27
 800542e:	f53f af78 	bmi.w	8005322 <__ssvfiscanf_r+0xea>
 8005432:	f012 0f01 	tst.w	r2, #1
 8005436:	9a01      	ldr	r2, [sp, #4]
 8005438:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800543a:	f102 0104 	add.w	r1, r2, #4
 800543e:	9101      	str	r1, [sp, #4]
 8005440:	6812      	ldr	r2, [r2, #0]
 8005442:	bf14      	ite	ne
 8005444:	8013      	strhne	r3, [r2, #0]
 8005446:	6013      	streq	r3, [r2, #0]
 8005448:	e76b      	b.n	8005322 <__ssvfiscanf_r+0xea>
 800544a:	2305      	movs	r3, #5
 800544c:	e799      	b.n	8005382 <__ssvfiscanf_r+0x14a>
 800544e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005450:	4621      	mov	r1, r4
 8005452:	4630      	mov	r0, r6
 8005454:	4798      	blx	r3
 8005456:	2800      	cmp	r0, #0
 8005458:	d097      	beq.n	800538a <__ssvfiscanf_r+0x152>
 800545a:	e7c6      	b.n	80053ea <__ssvfiscanf_r+0x1b2>
 800545c:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800545e:	3201      	adds	r2, #1
 8005460:	9247      	str	r2, [sp, #284]	; 0x11c
 8005462:	6862      	ldr	r2, [r4, #4]
 8005464:	3a01      	subs	r2, #1
 8005466:	2a00      	cmp	r2, #0
 8005468:	6062      	str	r2, [r4, #4]
 800546a:	dd0a      	ble.n	8005482 <__ssvfiscanf_r+0x24a>
 800546c:	3301      	adds	r3, #1
 800546e:	6023      	str	r3, [r4, #0]
 8005470:	f7ff f95a 	bl	8004728 <__locale_ctype_ptr>
 8005474:	6823      	ldr	r3, [r4, #0]
 8005476:	781a      	ldrb	r2, [r3, #0]
 8005478:	4410      	add	r0, r2
 800547a:	7842      	ldrb	r2, [r0, #1]
 800547c:	0712      	lsls	r2, r2, #28
 800547e:	d4ed      	bmi.n	800545c <__ssvfiscanf_r+0x224>
 8005480:	e786      	b.n	8005390 <__ssvfiscanf_r+0x158>
 8005482:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005484:	4621      	mov	r1, r4
 8005486:	4630      	mov	r0, r6
 8005488:	4798      	blx	r3
 800548a:	2800      	cmp	r0, #0
 800548c:	d0f0      	beq.n	8005470 <__ssvfiscanf_r+0x238>
 800548e:	e7ac      	b.n	80053ea <__ssvfiscanf_r+0x1b2>
 8005490:	2b04      	cmp	r3, #4
 8005492:	dc06      	bgt.n	80054a2 <__ssvfiscanf_r+0x26a>
 8005494:	ab01      	add	r3, sp, #4
 8005496:	4622      	mov	r2, r4
 8005498:	a943      	add	r1, sp, #268	; 0x10c
 800549a:	4630      	mov	r0, r6
 800549c:	f000 f884 	bl	80055a8 <_scanf_i>
 80054a0:	e77f      	b.n	80053a2 <__ssvfiscanf_r+0x16a>
 80054a2:	4b0e      	ldr	r3, [pc, #56]	; (80054dc <__ssvfiscanf_r+0x2a4>)
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f43f af3c 	beq.w	8005322 <__ssvfiscanf_r+0xea>
 80054aa:	ab01      	add	r3, sp, #4
 80054ac:	4622      	mov	r2, r4
 80054ae:	a943      	add	r1, sp, #268	; 0x10c
 80054b0:	4630      	mov	r0, r6
 80054b2:	f3af 8000 	nop.w
 80054b6:	e774      	b.n	80053a2 <__ssvfiscanf_r+0x16a>
 80054b8:	89a3      	ldrh	r3, [r4, #12]
 80054ba:	f013 0f40 	tst.w	r3, #64	; 0x40
 80054be:	bf18      	it	ne
 80054c0:	f04f 30ff 	movne.w	r0, #4294967295
 80054c4:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 80054c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054cc:	9846      	ldr	r0, [sp, #280]	; 0x118
 80054ce:	e7f9      	b.n	80054c4 <__ssvfiscanf_r+0x28c>
 80054d0:	08005183 	.word	0x08005183
 80054d4:	080051fd 	.word	0x080051fd
 80054d8:	08005d75 	.word	0x08005d75
 80054dc:	00000000 	.word	0x00000000

080054e0 <_scanf_chars>:
 80054e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054e4:	4615      	mov	r5, r2
 80054e6:	688a      	ldr	r2, [r1, #8]
 80054e8:	4680      	mov	r8, r0
 80054ea:	460c      	mov	r4, r1
 80054ec:	b932      	cbnz	r2, 80054fc <_scanf_chars+0x1c>
 80054ee:	698a      	ldr	r2, [r1, #24]
 80054f0:	2a00      	cmp	r2, #0
 80054f2:	bf0c      	ite	eq
 80054f4:	2201      	moveq	r2, #1
 80054f6:	f04f 32ff 	movne.w	r2, #4294967295
 80054fa:	608a      	str	r2, [r1, #8]
 80054fc:	6822      	ldr	r2, [r4, #0]
 80054fe:	06d1      	lsls	r1, r2, #27
 8005500:	bf5f      	itttt	pl
 8005502:	681a      	ldrpl	r2, [r3, #0]
 8005504:	1d11      	addpl	r1, r2, #4
 8005506:	6019      	strpl	r1, [r3, #0]
 8005508:	6817      	ldrpl	r7, [r2, #0]
 800550a:	2600      	movs	r6, #0
 800550c:	69a3      	ldr	r3, [r4, #24]
 800550e:	b1db      	cbz	r3, 8005548 <_scanf_chars+0x68>
 8005510:	2b01      	cmp	r3, #1
 8005512:	d107      	bne.n	8005524 <_scanf_chars+0x44>
 8005514:	682b      	ldr	r3, [r5, #0]
 8005516:	6962      	ldr	r2, [r4, #20]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	5cd3      	ldrb	r3, [r2, r3]
 800551c:	b9a3      	cbnz	r3, 8005548 <_scanf_chars+0x68>
 800551e:	2e00      	cmp	r6, #0
 8005520:	d132      	bne.n	8005588 <_scanf_chars+0xa8>
 8005522:	e006      	b.n	8005532 <_scanf_chars+0x52>
 8005524:	2b02      	cmp	r3, #2
 8005526:	d007      	beq.n	8005538 <_scanf_chars+0x58>
 8005528:	2e00      	cmp	r6, #0
 800552a:	d12d      	bne.n	8005588 <_scanf_chars+0xa8>
 800552c:	69a3      	ldr	r3, [r4, #24]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d12a      	bne.n	8005588 <_scanf_chars+0xa8>
 8005532:	2001      	movs	r0, #1
 8005534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005538:	f7ff f8f6 	bl	8004728 <__locale_ctype_ptr>
 800553c:	682b      	ldr	r3, [r5, #0]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	4418      	add	r0, r3
 8005542:	7843      	ldrb	r3, [r0, #1]
 8005544:	071b      	lsls	r3, r3, #28
 8005546:	d4ef      	bmi.n	8005528 <_scanf_chars+0x48>
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	06da      	lsls	r2, r3, #27
 800554c:	bf5e      	ittt	pl
 800554e:	682b      	ldrpl	r3, [r5, #0]
 8005550:	781b      	ldrbpl	r3, [r3, #0]
 8005552:	703b      	strbpl	r3, [r7, #0]
 8005554:	682a      	ldr	r2, [r5, #0]
 8005556:	686b      	ldr	r3, [r5, #4]
 8005558:	f102 0201 	add.w	r2, r2, #1
 800555c:	602a      	str	r2, [r5, #0]
 800555e:	68a2      	ldr	r2, [r4, #8]
 8005560:	f103 33ff 	add.w	r3, r3, #4294967295
 8005564:	f102 32ff 	add.w	r2, r2, #4294967295
 8005568:	606b      	str	r3, [r5, #4]
 800556a:	f106 0601 	add.w	r6, r6, #1
 800556e:	bf58      	it	pl
 8005570:	3701      	addpl	r7, #1
 8005572:	60a2      	str	r2, [r4, #8]
 8005574:	b142      	cbz	r2, 8005588 <_scanf_chars+0xa8>
 8005576:	2b00      	cmp	r3, #0
 8005578:	dcc8      	bgt.n	800550c <_scanf_chars+0x2c>
 800557a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800557e:	4629      	mov	r1, r5
 8005580:	4640      	mov	r0, r8
 8005582:	4798      	blx	r3
 8005584:	2800      	cmp	r0, #0
 8005586:	d0c1      	beq.n	800550c <_scanf_chars+0x2c>
 8005588:	6823      	ldr	r3, [r4, #0]
 800558a:	f013 0310 	ands.w	r3, r3, #16
 800558e:	d105      	bne.n	800559c <_scanf_chars+0xbc>
 8005590:	68e2      	ldr	r2, [r4, #12]
 8005592:	3201      	adds	r2, #1
 8005594:	60e2      	str	r2, [r4, #12]
 8005596:	69a2      	ldr	r2, [r4, #24]
 8005598:	b102      	cbz	r2, 800559c <_scanf_chars+0xbc>
 800559a:	703b      	strb	r3, [r7, #0]
 800559c:	6923      	ldr	r3, [r4, #16]
 800559e:	441e      	add	r6, r3
 80055a0:	6126      	str	r6, [r4, #16]
 80055a2:	2000      	movs	r0, #0
 80055a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080055a8 <_scanf_i>:
 80055a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ac:	469a      	mov	sl, r3
 80055ae:	4b74      	ldr	r3, [pc, #464]	; (8005780 <_scanf_i+0x1d8>)
 80055b0:	460c      	mov	r4, r1
 80055b2:	4683      	mov	fp, r0
 80055b4:	4616      	mov	r6, r2
 80055b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80055ba:	b087      	sub	sp, #28
 80055bc:	ab03      	add	r3, sp, #12
 80055be:	68a7      	ldr	r7, [r4, #8]
 80055c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80055c4:	4b6f      	ldr	r3, [pc, #444]	; (8005784 <_scanf_i+0x1dc>)
 80055c6:	69a1      	ldr	r1, [r4, #24]
 80055c8:	4a6f      	ldr	r2, [pc, #444]	; (8005788 <_scanf_i+0x1e0>)
 80055ca:	2903      	cmp	r1, #3
 80055cc:	bf18      	it	ne
 80055ce:	461a      	movne	r2, r3
 80055d0:	1e7b      	subs	r3, r7, #1
 80055d2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80055d6:	bf84      	itt	hi
 80055d8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80055dc:	60a3      	strhi	r3, [r4, #8]
 80055de:	6823      	ldr	r3, [r4, #0]
 80055e0:	9200      	str	r2, [sp, #0]
 80055e2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80055e6:	bf88      	it	hi
 80055e8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80055ec:	f104 091c 	add.w	r9, r4, #28
 80055f0:	6023      	str	r3, [r4, #0]
 80055f2:	bf8c      	ite	hi
 80055f4:	197f      	addhi	r7, r7, r5
 80055f6:	2700      	movls	r7, #0
 80055f8:	464b      	mov	r3, r9
 80055fa:	f04f 0800 	mov.w	r8, #0
 80055fe:	9301      	str	r3, [sp, #4]
 8005600:	6831      	ldr	r1, [r6, #0]
 8005602:	ab03      	add	r3, sp, #12
 8005604:	2202      	movs	r2, #2
 8005606:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800560a:	7809      	ldrb	r1, [r1, #0]
 800560c:	f7fa fdf8 	bl	8000200 <memchr>
 8005610:	9b01      	ldr	r3, [sp, #4]
 8005612:	b328      	cbz	r0, 8005660 <_scanf_i+0xb8>
 8005614:	f1b8 0f01 	cmp.w	r8, #1
 8005618:	d156      	bne.n	80056c8 <_scanf_i+0x120>
 800561a:	6862      	ldr	r2, [r4, #4]
 800561c:	b92a      	cbnz	r2, 800562a <_scanf_i+0x82>
 800561e:	2208      	movs	r2, #8
 8005620:	6062      	str	r2, [r4, #4]
 8005622:	6822      	ldr	r2, [r4, #0]
 8005624:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005628:	6022      	str	r2, [r4, #0]
 800562a:	6822      	ldr	r2, [r4, #0]
 800562c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005630:	6022      	str	r2, [r4, #0]
 8005632:	68a2      	ldr	r2, [r4, #8]
 8005634:	1e51      	subs	r1, r2, #1
 8005636:	60a1      	str	r1, [r4, #8]
 8005638:	b192      	cbz	r2, 8005660 <_scanf_i+0xb8>
 800563a:	6832      	ldr	r2, [r6, #0]
 800563c:	1c51      	adds	r1, r2, #1
 800563e:	6031      	str	r1, [r6, #0]
 8005640:	7812      	ldrb	r2, [r2, #0]
 8005642:	701a      	strb	r2, [r3, #0]
 8005644:	1c5d      	adds	r5, r3, #1
 8005646:	6873      	ldr	r3, [r6, #4]
 8005648:	3b01      	subs	r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	6073      	str	r3, [r6, #4]
 800564e:	dc06      	bgt.n	800565e <_scanf_i+0xb6>
 8005650:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005654:	4631      	mov	r1, r6
 8005656:	4658      	mov	r0, fp
 8005658:	4798      	blx	r3
 800565a:	2800      	cmp	r0, #0
 800565c:	d176      	bne.n	800574c <_scanf_i+0x1a4>
 800565e:	462b      	mov	r3, r5
 8005660:	f108 0801 	add.w	r8, r8, #1
 8005664:	f1b8 0f03 	cmp.w	r8, #3
 8005668:	d1c9      	bne.n	80055fe <_scanf_i+0x56>
 800566a:	6862      	ldr	r2, [r4, #4]
 800566c:	b90a      	cbnz	r2, 8005672 <_scanf_i+0xca>
 800566e:	220a      	movs	r2, #10
 8005670:	6062      	str	r2, [r4, #4]
 8005672:	6862      	ldr	r2, [r4, #4]
 8005674:	4945      	ldr	r1, [pc, #276]	; (800578c <_scanf_i+0x1e4>)
 8005676:	6960      	ldr	r0, [r4, #20]
 8005678:	9301      	str	r3, [sp, #4]
 800567a:	1a89      	subs	r1, r1, r2
 800567c:	f000 f888 	bl	8005790 <__sccl>
 8005680:	9b01      	ldr	r3, [sp, #4]
 8005682:	f04f 0800 	mov.w	r8, #0
 8005686:	461d      	mov	r5, r3
 8005688:	68a3      	ldr	r3, [r4, #8]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d038      	beq.n	8005700 <_scanf_i+0x158>
 800568e:	6831      	ldr	r1, [r6, #0]
 8005690:	6960      	ldr	r0, [r4, #20]
 8005692:	780a      	ldrb	r2, [r1, #0]
 8005694:	5c80      	ldrb	r0, [r0, r2]
 8005696:	2800      	cmp	r0, #0
 8005698:	d032      	beq.n	8005700 <_scanf_i+0x158>
 800569a:	2a30      	cmp	r2, #48	; 0x30
 800569c:	6822      	ldr	r2, [r4, #0]
 800569e:	d121      	bne.n	80056e4 <_scanf_i+0x13c>
 80056a0:	0510      	lsls	r0, r2, #20
 80056a2:	d51f      	bpl.n	80056e4 <_scanf_i+0x13c>
 80056a4:	f108 0801 	add.w	r8, r8, #1
 80056a8:	b117      	cbz	r7, 80056b0 <_scanf_i+0x108>
 80056aa:	3301      	adds	r3, #1
 80056ac:	3f01      	subs	r7, #1
 80056ae:	60a3      	str	r3, [r4, #8]
 80056b0:	6873      	ldr	r3, [r6, #4]
 80056b2:	3b01      	subs	r3, #1
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	6073      	str	r3, [r6, #4]
 80056b8:	dd1b      	ble.n	80056f2 <_scanf_i+0x14a>
 80056ba:	6833      	ldr	r3, [r6, #0]
 80056bc:	3301      	adds	r3, #1
 80056be:	6033      	str	r3, [r6, #0]
 80056c0:	68a3      	ldr	r3, [r4, #8]
 80056c2:	3b01      	subs	r3, #1
 80056c4:	60a3      	str	r3, [r4, #8]
 80056c6:	e7df      	b.n	8005688 <_scanf_i+0xe0>
 80056c8:	f1b8 0f02 	cmp.w	r8, #2
 80056cc:	d1b1      	bne.n	8005632 <_scanf_i+0x8a>
 80056ce:	6822      	ldr	r2, [r4, #0]
 80056d0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80056d4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80056d8:	d1c2      	bne.n	8005660 <_scanf_i+0xb8>
 80056da:	2110      	movs	r1, #16
 80056dc:	6061      	str	r1, [r4, #4]
 80056de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056e2:	e7a5      	b.n	8005630 <_scanf_i+0x88>
 80056e4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80056e8:	6022      	str	r2, [r4, #0]
 80056ea:	780b      	ldrb	r3, [r1, #0]
 80056ec:	702b      	strb	r3, [r5, #0]
 80056ee:	3501      	adds	r5, #1
 80056f0:	e7de      	b.n	80056b0 <_scanf_i+0x108>
 80056f2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80056f6:	4631      	mov	r1, r6
 80056f8:	4658      	mov	r0, fp
 80056fa:	4798      	blx	r3
 80056fc:	2800      	cmp	r0, #0
 80056fe:	d0df      	beq.n	80056c0 <_scanf_i+0x118>
 8005700:	6823      	ldr	r3, [r4, #0]
 8005702:	05d9      	lsls	r1, r3, #23
 8005704:	d50c      	bpl.n	8005720 <_scanf_i+0x178>
 8005706:	454d      	cmp	r5, r9
 8005708:	d908      	bls.n	800571c <_scanf_i+0x174>
 800570a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800570e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005712:	4632      	mov	r2, r6
 8005714:	4658      	mov	r0, fp
 8005716:	4798      	blx	r3
 8005718:	1e6f      	subs	r7, r5, #1
 800571a:	463d      	mov	r5, r7
 800571c:	454d      	cmp	r5, r9
 800571e:	d02c      	beq.n	800577a <_scanf_i+0x1d2>
 8005720:	6822      	ldr	r2, [r4, #0]
 8005722:	f012 0210 	ands.w	r2, r2, #16
 8005726:	d11e      	bne.n	8005766 <_scanf_i+0x1be>
 8005728:	702a      	strb	r2, [r5, #0]
 800572a:	6863      	ldr	r3, [r4, #4]
 800572c:	9e00      	ldr	r6, [sp, #0]
 800572e:	4649      	mov	r1, r9
 8005730:	4658      	mov	r0, fp
 8005732:	47b0      	blx	r6
 8005734:	6822      	ldr	r2, [r4, #0]
 8005736:	f8da 3000 	ldr.w	r3, [sl]
 800573a:	f012 0f20 	tst.w	r2, #32
 800573e:	d008      	beq.n	8005752 <_scanf_i+0x1aa>
 8005740:	1d1a      	adds	r2, r3, #4
 8005742:	f8ca 2000 	str.w	r2, [sl]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6018      	str	r0, [r3, #0]
 800574a:	e009      	b.n	8005760 <_scanf_i+0x1b8>
 800574c:	f04f 0800 	mov.w	r8, #0
 8005750:	e7d6      	b.n	8005700 <_scanf_i+0x158>
 8005752:	07d2      	lsls	r2, r2, #31
 8005754:	d5f4      	bpl.n	8005740 <_scanf_i+0x198>
 8005756:	1d1a      	adds	r2, r3, #4
 8005758:	f8ca 2000 	str.w	r2, [sl]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	8018      	strh	r0, [r3, #0]
 8005760:	68e3      	ldr	r3, [r4, #12]
 8005762:	3301      	adds	r3, #1
 8005764:	60e3      	str	r3, [r4, #12]
 8005766:	eba5 0509 	sub.w	r5, r5, r9
 800576a:	44a8      	add	r8, r5
 800576c:	6925      	ldr	r5, [r4, #16]
 800576e:	4445      	add	r5, r8
 8005770:	6125      	str	r5, [r4, #16]
 8005772:	2000      	movs	r0, #0
 8005774:	b007      	add	sp, #28
 8005776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800577a:	2001      	movs	r0, #1
 800577c:	e7fa      	b.n	8005774 <_scanf_i+0x1cc>
 800577e:	bf00      	nop
 8005780:	08005a08 	.word	0x08005a08
 8005784:	08005105 	.word	0x08005105
 8005788:	080058f1 	.word	0x080058f1
 800578c:	08005d89 	.word	0x08005d89

08005790 <__sccl>:
 8005790:	b570      	push	{r4, r5, r6, lr}
 8005792:	780b      	ldrb	r3, [r1, #0]
 8005794:	2b5e      	cmp	r3, #94	; 0x5e
 8005796:	bf13      	iteet	ne
 8005798:	1c4a      	addne	r2, r1, #1
 800579a:	1c8a      	addeq	r2, r1, #2
 800579c:	784b      	ldrbeq	r3, [r1, #1]
 800579e:	2100      	movne	r1, #0
 80057a0:	bf08      	it	eq
 80057a2:	2101      	moveq	r1, #1
 80057a4:	1e44      	subs	r4, r0, #1
 80057a6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80057aa:	f804 1f01 	strb.w	r1, [r4, #1]!
 80057ae:	42a5      	cmp	r5, r4
 80057b0:	d1fb      	bne.n	80057aa <__sccl+0x1a>
 80057b2:	b913      	cbnz	r3, 80057ba <__sccl+0x2a>
 80057b4:	3a01      	subs	r2, #1
 80057b6:	4610      	mov	r0, r2
 80057b8:	bd70      	pop	{r4, r5, r6, pc}
 80057ba:	f081 0401 	eor.w	r4, r1, #1
 80057be:	54c4      	strb	r4, [r0, r3]
 80057c0:	4611      	mov	r1, r2
 80057c2:	780d      	ldrb	r5, [r1, #0]
 80057c4:	2d2d      	cmp	r5, #45	; 0x2d
 80057c6:	f101 0201 	add.w	r2, r1, #1
 80057ca:	d006      	beq.n	80057da <__sccl+0x4a>
 80057cc:	2d5d      	cmp	r5, #93	; 0x5d
 80057ce:	d0f2      	beq.n	80057b6 <__sccl+0x26>
 80057d0:	b90d      	cbnz	r5, 80057d6 <__sccl+0x46>
 80057d2:	460a      	mov	r2, r1
 80057d4:	e7ef      	b.n	80057b6 <__sccl+0x26>
 80057d6:	462b      	mov	r3, r5
 80057d8:	e7f1      	b.n	80057be <__sccl+0x2e>
 80057da:	784e      	ldrb	r6, [r1, #1]
 80057dc:	2e5d      	cmp	r6, #93	; 0x5d
 80057de:	d0fa      	beq.n	80057d6 <__sccl+0x46>
 80057e0:	42b3      	cmp	r3, r6
 80057e2:	dcf8      	bgt.n	80057d6 <__sccl+0x46>
 80057e4:	3102      	adds	r1, #2
 80057e6:	3301      	adds	r3, #1
 80057e8:	429e      	cmp	r6, r3
 80057ea:	54c4      	strb	r4, [r0, r3]
 80057ec:	dcfb      	bgt.n	80057e6 <__sccl+0x56>
 80057ee:	e7e8      	b.n	80057c2 <__sccl+0x32>

080057f0 <_strtol_l.isra.0>:
 80057f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f4:	4680      	mov	r8, r0
 80057f6:	4689      	mov	r9, r1
 80057f8:	4692      	mov	sl, r2
 80057fa:	461f      	mov	r7, r3
 80057fc:	468b      	mov	fp, r1
 80057fe:	465d      	mov	r5, fp
 8005800:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005802:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005806:	f7fe ff8b 	bl	8004720 <__locale_ctype_ptr_l>
 800580a:	4420      	add	r0, r4
 800580c:	7846      	ldrb	r6, [r0, #1]
 800580e:	f016 0608 	ands.w	r6, r6, #8
 8005812:	d10b      	bne.n	800582c <_strtol_l.isra.0+0x3c>
 8005814:	2c2d      	cmp	r4, #45	; 0x2d
 8005816:	d10b      	bne.n	8005830 <_strtol_l.isra.0+0x40>
 8005818:	782c      	ldrb	r4, [r5, #0]
 800581a:	2601      	movs	r6, #1
 800581c:	f10b 0502 	add.w	r5, fp, #2
 8005820:	b167      	cbz	r7, 800583c <_strtol_l.isra.0+0x4c>
 8005822:	2f10      	cmp	r7, #16
 8005824:	d114      	bne.n	8005850 <_strtol_l.isra.0+0x60>
 8005826:	2c30      	cmp	r4, #48	; 0x30
 8005828:	d00a      	beq.n	8005840 <_strtol_l.isra.0+0x50>
 800582a:	e011      	b.n	8005850 <_strtol_l.isra.0+0x60>
 800582c:	46ab      	mov	fp, r5
 800582e:	e7e6      	b.n	80057fe <_strtol_l.isra.0+0xe>
 8005830:	2c2b      	cmp	r4, #43	; 0x2b
 8005832:	bf04      	itt	eq
 8005834:	782c      	ldrbeq	r4, [r5, #0]
 8005836:	f10b 0502 	addeq.w	r5, fp, #2
 800583a:	e7f1      	b.n	8005820 <_strtol_l.isra.0+0x30>
 800583c:	2c30      	cmp	r4, #48	; 0x30
 800583e:	d127      	bne.n	8005890 <_strtol_l.isra.0+0xa0>
 8005840:	782b      	ldrb	r3, [r5, #0]
 8005842:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005846:	2b58      	cmp	r3, #88	; 0x58
 8005848:	d14b      	bne.n	80058e2 <_strtol_l.isra.0+0xf2>
 800584a:	786c      	ldrb	r4, [r5, #1]
 800584c:	2710      	movs	r7, #16
 800584e:	3502      	adds	r5, #2
 8005850:	2e00      	cmp	r6, #0
 8005852:	bf0c      	ite	eq
 8005854:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005858:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800585c:	2200      	movs	r2, #0
 800585e:	fbb1 fef7 	udiv	lr, r1, r7
 8005862:	4610      	mov	r0, r2
 8005864:	fb07 1c1e 	mls	ip, r7, lr, r1
 8005868:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800586c:	2b09      	cmp	r3, #9
 800586e:	d811      	bhi.n	8005894 <_strtol_l.isra.0+0xa4>
 8005870:	461c      	mov	r4, r3
 8005872:	42a7      	cmp	r7, r4
 8005874:	dd1d      	ble.n	80058b2 <_strtol_l.isra.0+0xc2>
 8005876:	1c53      	adds	r3, r2, #1
 8005878:	d007      	beq.n	800588a <_strtol_l.isra.0+0x9a>
 800587a:	4586      	cmp	lr, r0
 800587c:	d316      	bcc.n	80058ac <_strtol_l.isra.0+0xbc>
 800587e:	d101      	bne.n	8005884 <_strtol_l.isra.0+0x94>
 8005880:	45a4      	cmp	ip, r4
 8005882:	db13      	blt.n	80058ac <_strtol_l.isra.0+0xbc>
 8005884:	fb00 4007 	mla	r0, r0, r7, r4
 8005888:	2201      	movs	r2, #1
 800588a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800588e:	e7eb      	b.n	8005868 <_strtol_l.isra.0+0x78>
 8005890:	270a      	movs	r7, #10
 8005892:	e7dd      	b.n	8005850 <_strtol_l.isra.0+0x60>
 8005894:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005898:	2b19      	cmp	r3, #25
 800589a:	d801      	bhi.n	80058a0 <_strtol_l.isra.0+0xb0>
 800589c:	3c37      	subs	r4, #55	; 0x37
 800589e:	e7e8      	b.n	8005872 <_strtol_l.isra.0+0x82>
 80058a0:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80058a4:	2b19      	cmp	r3, #25
 80058a6:	d804      	bhi.n	80058b2 <_strtol_l.isra.0+0xc2>
 80058a8:	3c57      	subs	r4, #87	; 0x57
 80058aa:	e7e2      	b.n	8005872 <_strtol_l.isra.0+0x82>
 80058ac:	f04f 32ff 	mov.w	r2, #4294967295
 80058b0:	e7eb      	b.n	800588a <_strtol_l.isra.0+0x9a>
 80058b2:	1c53      	adds	r3, r2, #1
 80058b4:	d108      	bne.n	80058c8 <_strtol_l.isra.0+0xd8>
 80058b6:	2322      	movs	r3, #34	; 0x22
 80058b8:	f8c8 3000 	str.w	r3, [r8]
 80058bc:	4608      	mov	r0, r1
 80058be:	f1ba 0f00 	cmp.w	sl, #0
 80058c2:	d107      	bne.n	80058d4 <_strtol_l.isra.0+0xe4>
 80058c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058c8:	b106      	cbz	r6, 80058cc <_strtol_l.isra.0+0xdc>
 80058ca:	4240      	negs	r0, r0
 80058cc:	f1ba 0f00 	cmp.w	sl, #0
 80058d0:	d00c      	beq.n	80058ec <_strtol_l.isra.0+0xfc>
 80058d2:	b122      	cbz	r2, 80058de <_strtol_l.isra.0+0xee>
 80058d4:	3d01      	subs	r5, #1
 80058d6:	f8ca 5000 	str.w	r5, [sl]
 80058da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058de:	464d      	mov	r5, r9
 80058e0:	e7f9      	b.n	80058d6 <_strtol_l.isra.0+0xe6>
 80058e2:	2430      	movs	r4, #48	; 0x30
 80058e4:	2f00      	cmp	r7, #0
 80058e6:	d1b3      	bne.n	8005850 <_strtol_l.isra.0+0x60>
 80058e8:	2708      	movs	r7, #8
 80058ea:	e7b1      	b.n	8005850 <_strtol_l.isra.0+0x60>
 80058ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080058f0 <_strtol_r>:
 80058f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058f2:	4c06      	ldr	r4, [pc, #24]	; (800590c <_strtol_r+0x1c>)
 80058f4:	4d06      	ldr	r5, [pc, #24]	; (8005910 <_strtol_r+0x20>)
 80058f6:	6824      	ldr	r4, [r4, #0]
 80058f8:	6a24      	ldr	r4, [r4, #32]
 80058fa:	2c00      	cmp	r4, #0
 80058fc:	bf08      	it	eq
 80058fe:	462c      	moveq	r4, r5
 8005900:	9400      	str	r4, [sp, #0]
 8005902:	f7ff ff75 	bl	80057f0 <_strtol_l.isra.0>
 8005906:	b003      	add	sp, #12
 8005908:	bd30      	pop	{r4, r5, pc}
 800590a:	bf00      	nop
 800590c:	2000005c 	.word	0x2000005c
 8005910:	200000c0 	.word	0x200000c0

08005914 <__submore>:
 8005914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005918:	460c      	mov	r4, r1
 800591a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800591c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005920:	4299      	cmp	r1, r3
 8005922:	d11e      	bne.n	8005962 <__submore+0x4e>
 8005924:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005928:	f7fd f9aa 	bl	8002c80 <_malloc_r>
 800592c:	b918      	cbnz	r0, 8005936 <__submore+0x22>
 800592e:	f04f 30ff 	mov.w	r0, #4294967295
 8005932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800593a:	63a3      	str	r3, [r4, #56]	; 0x38
 800593c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005940:	6360      	str	r0, [r4, #52]	; 0x34
 8005942:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8005946:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800594a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800594e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005952:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8005956:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800595a:	6020      	str	r0, [r4, #0]
 800595c:	2000      	movs	r0, #0
 800595e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005962:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005964:	0077      	lsls	r7, r6, #1
 8005966:	463a      	mov	r2, r7
 8005968:	f000 f80f 	bl	800598a <_realloc_r>
 800596c:	4605      	mov	r5, r0
 800596e:	2800      	cmp	r0, #0
 8005970:	d0dd      	beq.n	800592e <__submore+0x1a>
 8005972:	eb00 0806 	add.w	r8, r0, r6
 8005976:	4601      	mov	r1, r0
 8005978:	4632      	mov	r2, r6
 800597a:	4640      	mov	r0, r8
 800597c:	f7fe fef6 	bl	800476c <memcpy>
 8005980:	f8c4 8000 	str.w	r8, [r4]
 8005984:	6365      	str	r5, [r4, #52]	; 0x34
 8005986:	63a7      	str	r7, [r4, #56]	; 0x38
 8005988:	e7e8      	b.n	800595c <__submore+0x48>

0800598a <_realloc_r>:
 800598a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598c:	4607      	mov	r7, r0
 800598e:	4614      	mov	r4, r2
 8005990:	460e      	mov	r6, r1
 8005992:	b921      	cbnz	r1, 800599e <_realloc_r+0x14>
 8005994:	4611      	mov	r1, r2
 8005996:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800599a:	f7fd b971 	b.w	8002c80 <_malloc_r>
 800599e:	b922      	cbnz	r2, 80059aa <_realloc_r+0x20>
 80059a0:	f7fd f920 	bl	8002be4 <_free_r>
 80059a4:	4625      	mov	r5, r4
 80059a6:	4628      	mov	r0, r5
 80059a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059aa:	f000 f814 	bl	80059d6 <_malloc_usable_size_r>
 80059ae:	4284      	cmp	r4, r0
 80059b0:	d90f      	bls.n	80059d2 <_realloc_r+0x48>
 80059b2:	4621      	mov	r1, r4
 80059b4:	4638      	mov	r0, r7
 80059b6:	f7fd f963 	bl	8002c80 <_malloc_r>
 80059ba:	4605      	mov	r5, r0
 80059bc:	2800      	cmp	r0, #0
 80059be:	d0f2      	beq.n	80059a6 <_realloc_r+0x1c>
 80059c0:	4631      	mov	r1, r6
 80059c2:	4622      	mov	r2, r4
 80059c4:	f7fe fed2 	bl	800476c <memcpy>
 80059c8:	4631      	mov	r1, r6
 80059ca:	4638      	mov	r0, r7
 80059cc:	f7fd f90a 	bl	8002be4 <_free_r>
 80059d0:	e7e9      	b.n	80059a6 <_realloc_r+0x1c>
 80059d2:	4635      	mov	r5, r6
 80059d4:	e7e7      	b.n	80059a6 <_realloc_r+0x1c>

080059d6 <_malloc_usable_size_r>:
 80059d6:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80059da:	2800      	cmp	r0, #0
 80059dc:	f1a0 0004 	sub.w	r0, r0, #4
 80059e0:	bfbc      	itt	lt
 80059e2:	580b      	ldrlt	r3, [r1, r0]
 80059e4:	18c0      	addlt	r0, r0, r3
 80059e6:	4770      	bx	lr

080059e8 <_gettimeofday>:
 80059e8:	4b02      	ldr	r3, [pc, #8]	; (80059f4 <_gettimeofday+0xc>)
 80059ea:	2258      	movs	r2, #88	; 0x58
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	f04f 30ff 	mov.w	r0, #4294967295
 80059f2:	4770      	bx	lr
 80059f4:	20001240 	.word	0x20001240
 80059f8:	00000024 	.word	0x00000024
 80059fc:	004c4c47 	.word	0x004c4c47
 8005a00:	0041445a 	.word	0x0041445a
 8005a04:	00415347 	.word	0x00415347
 8005a08:	08005d8b 	.word	0x08005d8b
 8005a0c:	08005d8e 	.word	0x08005d8e
 8005a10:	08005d91 	.word	0x08005d91

08005a14 <DAYS_IN_MONTH>:
 8005a14:	0000001f 0000001c 0000001f 0000001e     ................
 8005a24:	0000001f 0000001e 0000001f 0000001f     ................
 8005a34:	0000001e 0000001f 0000001e 0000001f     ................

08005a44 <_DAYS_BEFORE_MONTH>:
 8005a44:	00000000 0000001f 0000003b 0000005a     ........;...Z...
 8005a54:	00000078 00000097 000000b5 000000d4     x...............
 8005a64:	000000f3 00000111 00000130 0000014e     ........0...N...

08005a74 <__month_lengths>:
 8005a74:	0000001f 0000001c 0000001f 0000001e     ................
 8005a84:	0000001f 0000001e 0000001f 0000001f     ................
 8005a94:	0000001e 0000001f 0000001e 0000001f     ................
 8005aa4:	0000001f 0000001d 0000001f 0000001e     ................
 8005ab4:	0000001f 0000001e 0000001f 0000001f     ................
 8005ac4:	0000001e 0000001f 0000001e 0000001f     ................
 8005ad4:	6900666e 7974696e 006e6100              nf.inity.an.

08005ae0 <fpi.7257>:
 8005ae0:	00000035 fffffbce 000003cb 00000001     5...............
 8005af0:	00000000                                ....

08005af4 <fpinan.7293>:
 8005af4:	00000034 fffffbce 000003cb 00000001     4...............
 8005b04:	00000000                                ....

08005b08 <tinytens>:
 8005b08:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 8005b18:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 8005b28:	64ac6f43 11680628 47005a54 2500544d     Co.d(.h.TZ.GMT.%
 8005b38:	5e5b3031 2c392d30 255d2d2b 254d006e     10[^0-9,+-]%n.M%
 8005b48:	6e257568 7568252e 252e6e25 6e257568     hu%n.%hu%n.%hu%n
 8005b58:	68252f00 3a6e2575 25756825 68253a6e     ./%hu%n:%hu%n:%h
 8005b68:	006e2575 4f500043 00584953 0000002e     u%n.C.POSIX.....

08005b78 <__mprec_bigtens>:
 8005b78:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 8005b88:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 8005b98:	7f73bf3c 75154fdd                       <.s..O.u

08005ba0 <__mprec_tens>:
 8005ba0:	00000000 3ff00000 00000000 40240000     .......?......$@
 8005bb0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 8005bc0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 8005bd0:	00000000 412e8480 00000000 416312d0     .......A......cA
 8005be0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 8005bf0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 8005c00:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 8005c10:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 8005c20:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 8005c30:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 8005c40:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 8005c50:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 8005c60:	79d99db4 44ea7843                       ...yCx.D

08005c68 <p05.7175>:
 8005c68:	00000005 00000019 0000007d              ........}...

08005c74 <_ctype_>:
 8005c74:	20202000 20202020 28282020 20282828     .         ((((( 
 8005c84:	20202020 20202020 20202020 20202020                     
 8005c94:	10108820 10101010 10101010 10101010      ...............
 8005ca4:	04040410 04040404 10040404 10101010     ................
 8005cb4:	41411010 41414141 01010101 01010101     ..AAAAAA........
 8005cc4:	01010101 01010101 01010101 10101010     ................
 8005cd4:	42421010 42424242 02020202 02020202     ..BBBBBB........
 8005ce4:	02020202 02020202 02020202 10101010     ................
 8005cf4:	00000020 00000000 00000000 00000000      ...............
	...
 8005d74:	4c6c6800 462d4100 38662d61 32313039     .hlL.A-Fa-f89012
 8005d84:	36353433 2b005d37 3030002d 00587800     34567].+-.00.xX.

08005d94 <__sf_fake_stderr>:
	...

08005db4 <__sf_fake_stdin>:
	...

08005dd4 <__sf_fake_stdout>:
	...

08005df4 <_init>:
 8005df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005df6:	bf00      	nop
 8005df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dfa:	bc08      	pop	{r3}
 8005dfc:	469e      	mov	lr, r3
 8005dfe:	4770      	bx	lr

08005e00 <_fini>:
 8005e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e02:	bf00      	nop
 8005e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e06:	bc08      	pop	{r3}
 8005e08:	469e      	mov	lr, r3
 8005e0a:	4770      	bx	lr
