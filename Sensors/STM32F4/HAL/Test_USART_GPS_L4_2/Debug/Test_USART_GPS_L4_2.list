
Test_USART_GPS_L4_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c9c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08005e24  08005e24  00015e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005f34  08005f34  00015f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005f3c  08005f3c  00015f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005f40  08005f40  00015f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08005f44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000019c8  2000000c  08005f50  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200019d4  08005f50  000219d4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000ef15  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001cc9  00000000  00000000  0002ef51  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000e88  00000000  00000000  00030c20  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000da0  00000000  00000000  00031aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006313  00000000  00000000  00032848  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004eda  00000000  00000000  00038b5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003da35  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003d60  00000000  00000000  0003dab4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005e0c 	.word	0x08005e0c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005e0c 	.word	0x08005e0c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004de:	2300      	movs	r3, #0
 80004e0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e2:	4a0c      	ldr	r2, [pc, #48]	; (8000514 <HAL_Init+0x3c>)
 80004e4:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <HAL_Init+0x3c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004ee:	2003      	movs	r0, #3
 80004f0:	f000 f938 	bl	8000764 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004f4:	2000      	movs	r0, #0
 80004f6:	f000 f80f 	bl	8000518 <HAL_InitTick>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d002      	beq.n	8000506 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000500:	2301      	movs	r3, #1
 8000502:	71fb      	strb	r3, [r7, #7]
 8000504:	e001      	b.n	800050a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000506:	f005 fa55 	bl	80059b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800050a:	79fb      	ldrb	r3, [r7, #7]
}
 800050c:	4618      	mov	r0, r3
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40022000 	.word	0x40022000

08000518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000520:	2300      	movs	r3, #0
 8000522:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000524:	4b16      	ldr	r3, [pc, #88]	; (8000580 <HAL_InitTick+0x68>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d022      	beq.n	8000572 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800052c:	4b15      	ldr	r3, [pc, #84]	; (8000584 <HAL_InitTick+0x6c>)
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	4b13      	ldr	r3, [pc, #76]	; (8000580 <HAL_InitTick+0x68>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000538:	fbb1 f3f3 	udiv	r3, r1, r3
 800053c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000540:	4618      	mov	r0, r3
 8000542:	f000 f944 	bl	80007ce <HAL_SYSTICK_Config>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d10f      	bne.n	800056c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2b0f      	cmp	r3, #15
 8000550:	d809      	bhi.n	8000566 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000552:	2200      	movs	r2, #0
 8000554:	6879      	ldr	r1, [r7, #4]
 8000556:	f04f 30ff 	mov.w	r0, #4294967295
 800055a:	f000 f90e 	bl	800077a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800055e:	4a0a      	ldr	r2, [pc, #40]	; (8000588 <HAL_InitTick+0x70>)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	6013      	str	r3, [r2, #0]
 8000564:	e007      	b.n	8000576 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000566:	2301      	movs	r3, #1
 8000568:	73fb      	strb	r3, [r7, #15]
 800056a:	e004      	b.n	8000576 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800056c:	2301      	movs	r3, #1
 800056e:	73fb      	strb	r3, [r7, #15]
 8000570:	e001      	b.n	8000576 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000576:	7bfb      	ldrb	r3, [r7, #15]
}
 8000578:	4618      	mov	r0, r3
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000004 	.word	0x20000004
 8000584:	20000008 	.word	0x20000008
 8000588:	20000000 	.word	0x20000000

0800058c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000590:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <HAL_IncTick+0x1c>)
 8000592:	681a      	ldr	r2, [r3, #0]
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <HAL_IncTick+0x20>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4413      	add	r3, r2
 800059a:	4a03      	ldr	r2, [pc, #12]	; (80005a8 <HAL_IncTick+0x1c>)
 800059c:	6013      	str	r3, [r2, #0]
}
 800059e:	bf00      	nop
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	20000028 	.word	0x20000028
 80005ac:	20000004 	.word	0x20000004

080005b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  return uwTick;
 80005b4:	4b03      	ldr	r3, [pc, #12]	; (80005c4 <HAL_GetTick+0x14>)
 80005b6:	681b      	ldr	r3, [r3, #0]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	20000028 	.word	0x20000028

080005c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f003 0307 	and.w	r3, r3, #7
 80005d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <__NVIC_SetPriorityGrouping+0x44>)
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005de:	68ba      	ldr	r2, [r7, #8]
 80005e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005e4:	4013      	ands	r3, r2
 80005e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005fa:	4a04      	ldr	r2, [pc, #16]	; (800060c <__NVIC_SetPriorityGrouping+0x44>)
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	60d3      	str	r3, [r2, #12]
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000614:	4b04      	ldr	r3, [pc, #16]	; (8000628 <__NVIC_GetPriorityGrouping+0x18>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	0a1b      	lsrs	r3, r3, #8
 800061a:	f003 0307 	and.w	r3, r3, #7
}
 800061e:	4618      	mov	r0, r3
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063a:	2b00      	cmp	r3, #0
 800063c:	db0b      	blt.n	8000656 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800063e:	4909      	ldr	r1, [pc, #36]	; (8000664 <__NVIC_EnableIRQ+0x38>)
 8000640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000644:	095b      	lsrs	r3, r3, #5
 8000646:	79fa      	ldrb	r2, [r7, #7]
 8000648:	f002 021f 	and.w	r2, r2, #31
 800064c:	2001      	movs	r0, #1
 800064e:	fa00 f202 	lsl.w	r2, r0, r2
 8000652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	e000e100 	.word	0xe000e100

08000668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	6039      	str	r1, [r7, #0]
 8000672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000678:	2b00      	cmp	r3, #0
 800067a:	db0a      	blt.n	8000692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067c:	490d      	ldr	r1, [pc, #52]	; (80006b4 <__NVIC_SetPriority+0x4c>)
 800067e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000682:	683a      	ldr	r2, [r7, #0]
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	0112      	lsls	r2, r2, #4
 8000688:	b2d2      	uxtb	r2, r2
 800068a:	440b      	add	r3, r1
 800068c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000690:	e00a      	b.n	80006a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000692:	4909      	ldr	r1, [pc, #36]	; (80006b8 <__NVIC_SetPriority+0x50>)
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	f003 030f 	and.w	r3, r3, #15
 800069a:	3b04      	subs	r3, #4
 800069c:	683a      	ldr	r2, [r7, #0]
 800069e:	b2d2      	uxtb	r2, r2
 80006a0:	0112      	lsls	r2, r2, #4
 80006a2:	b2d2      	uxtb	r2, r2
 80006a4:	440b      	add	r3, r1
 80006a6:	761a      	strb	r2, [r3, #24]
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	e000e100 	.word	0xe000e100
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006bc:	b480      	push	{r7}
 80006be:	b089      	sub	sp, #36	; 0x24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	f003 0307 	and.w	r3, r3, #7
 80006ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	f1c3 0307 	rsb	r3, r3, #7
 80006d6:	2b04      	cmp	r3, #4
 80006d8:	bf28      	it	cs
 80006da:	2304      	movcs	r3, #4
 80006dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	3304      	adds	r3, #4
 80006e2:	2b06      	cmp	r3, #6
 80006e4:	d902      	bls.n	80006ec <NVIC_EncodePriority+0x30>
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	3b03      	subs	r3, #3
 80006ea:	e000      	b.n	80006ee <NVIC_EncodePriority+0x32>
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f0:	2201      	movs	r2, #1
 80006f2:	69bb      	ldr	r3, [r7, #24]
 80006f4:	fa02 f303 	lsl.w	r3, r2, r3
 80006f8:	1e5a      	subs	r2, r3, #1
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	401a      	ands	r2, r3
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000702:	2101      	movs	r1, #1
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	fa01 f303 	lsl.w	r3, r1, r3
 800070a:	1e59      	subs	r1, r3, #1
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000710:	4313      	orrs	r3, r2
         );
}
 8000712:	4618      	mov	r0, r3
 8000714:	3724      	adds	r7, #36	; 0x24
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
	...

08000720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3b01      	subs	r3, #1
 800072c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000730:	d301      	bcc.n	8000736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000732:	2301      	movs	r3, #1
 8000734:	e00f      	b.n	8000756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000736:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <SysTick_Config+0x40>)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3b01      	subs	r3, #1
 800073c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800073e:	210f      	movs	r1, #15
 8000740:	f04f 30ff 	mov.w	r0, #4294967295
 8000744:	f7ff ff90 	bl	8000668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <SysTick_Config+0x40>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800074e:	4b04      	ldr	r3, [pc, #16]	; (8000760 <SysTick_Config+0x40>)
 8000750:	2207      	movs	r2, #7
 8000752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000754:	2300      	movs	r3, #0
}
 8000756:	4618      	mov	r0, r3
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	e000e010 	.word	0xe000e010

08000764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff ff2b 	bl	80005c8 <__NVIC_SetPriorityGrouping>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b086      	sub	sp, #24
 800077e:	af00      	add	r7, sp, #0
 8000780:	4603      	mov	r3, r0
 8000782:	60b9      	str	r1, [r7, #8]
 8000784:	607a      	str	r2, [r7, #4]
 8000786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800078c:	f7ff ff40 	bl	8000610 <__NVIC_GetPriorityGrouping>
 8000790:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	68b9      	ldr	r1, [r7, #8]
 8000796:	6978      	ldr	r0, [r7, #20]
 8000798:	f7ff ff90 	bl	80006bc <NVIC_EncodePriority>
 800079c:	4602      	mov	r2, r0
 800079e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007a2:	4611      	mov	r1, r2
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ff5f 	bl	8000668 <__NVIC_SetPriority>
}
 80007aa:	bf00      	nop
 80007ac:	3718      	adds	r7, #24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	4603      	mov	r3, r0
 80007ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ff33 	bl	800062c <__NVIC_EnableIRQ>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b082      	sub	sp, #8
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f7ff ffa2 	bl	8000720 <SysTick_Config>
 80007dc:	4603      	mov	r3, r0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d101      	bne.n	80007fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
 80007f8:	e098      	b.n	800092c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	461a      	mov	r2, r3
 8000800:	4b4d      	ldr	r3, [pc, #308]	; (8000938 <HAL_DMA_Init+0x150>)
 8000802:	429a      	cmp	r2, r3
 8000804:	d80f      	bhi.n	8000826 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	461a      	mov	r2, r3
 800080c:	4b4b      	ldr	r3, [pc, #300]	; (800093c <HAL_DMA_Init+0x154>)
 800080e:	4413      	add	r3, r2
 8000810:	4a4b      	ldr	r2, [pc, #300]	; (8000940 <HAL_DMA_Init+0x158>)
 8000812:	fba2 2303 	umull	r2, r3, r2, r3
 8000816:	091b      	lsrs	r3, r3, #4
 8000818:	009a      	lsls	r2, r3, #2
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4a48      	ldr	r2, [pc, #288]	; (8000944 <HAL_DMA_Init+0x15c>)
 8000822:	641a      	str	r2, [r3, #64]	; 0x40
 8000824:	e00e      	b.n	8000844 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	461a      	mov	r2, r3
 800082c:	4b46      	ldr	r3, [pc, #280]	; (8000948 <HAL_DMA_Init+0x160>)
 800082e:	4413      	add	r3, r2
 8000830:	4a43      	ldr	r2, [pc, #268]	; (8000940 <HAL_DMA_Init+0x158>)
 8000832:	fba2 2303 	umull	r2, r3, r2, r3
 8000836:	091b      	lsrs	r3, r3, #4
 8000838:	009a      	lsls	r2, r3, #2
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4a42      	ldr	r2, [pc, #264]	; (800094c <HAL_DMA_Init+0x164>)
 8000842:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2202      	movs	r2, #2
 8000848:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800085a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800085e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000868:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	691b      	ldr	r3, [r3, #16]
 800086e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000874:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000880:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6a1b      	ldr	r3, [r3, #32]
 8000886:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000888:	68fa      	ldr	r2, [r7, #12]
 800088a:	4313      	orrs	r3, r2
 800088c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	689b      	ldr	r3, [r3, #8]
 800089a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800089e:	d039      	beq.n	8000914 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a4:	4a27      	ldr	r2, [pc, #156]	; (8000944 <HAL_DMA_Init+0x15c>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d11a      	bne.n	80008e0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80008aa:	4929      	ldr	r1, [pc, #164]	; (8000950 <HAL_DMA_Init+0x168>)
 80008ac:	4b28      	ldr	r3, [pc, #160]	; (8000950 <HAL_DMA_Init+0x168>)
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b4:	f003 031c 	and.w	r3, r3, #28
 80008b8:	200f      	movs	r0, #15
 80008ba:	fa00 f303 	lsl.w	r3, r0, r3
 80008be:	43db      	mvns	r3, r3
 80008c0:	4013      	ands	r3, r2
 80008c2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80008c4:	4822      	ldr	r0, [pc, #136]	; (8000950 <HAL_DMA_Init+0x168>)
 80008c6:	4b22      	ldr	r3, [pc, #136]	; (8000950 <HAL_DMA_Init+0x168>)
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6859      	ldr	r1, [r3, #4]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d2:	f003 031c 	and.w	r3, r3, #28
 80008d6:	fa01 f303 	lsl.w	r3, r1, r3
 80008da:	4313      	orrs	r3, r2
 80008dc:	6003      	str	r3, [r0, #0]
 80008de:	e019      	b.n	8000914 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80008e0:	491c      	ldr	r1, [pc, #112]	; (8000954 <HAL_DMA_Init+0x16c>)
 80008e2:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <HAL_DMA_Init+0x16c>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ea:	f003 031c 	and.w	r3, r3, #28
 80008ee:	200f      	movs	r0, #15
 80008f0:	fa00 f303 	lsl.w	r3, r0, r3
 80008f4:	43db      	mvns	r3, r3
 80008f6:	4013      	ands	r3, r2
 80008f8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80008fa:	4816      	ldr	r0, [pc, #88]	; (8000954 <HAL_DMA_Init+0x16c>)
 80008fc:	4b15      	ldr	r3, [pc, #84]	; (8000954 <HAL_DMA_Init+0x16c>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6859      	ldr	r1, [r3, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000908:	f003 031c 	and.w	r3, r3, #28
 800090c:	fa01 f303 	lsl.w	r3, r1, r3
 8000910:	4313      	orrs	r3, r2
 8000912:	6003      	str	r3, [r0, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2200      	movs	r2, #0
 8000918:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2201      	movs	r2, #1
 800091e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2200      	movs	r2, #0
 8000926:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800092a:	2300      	movs	r3, #0
}
 800092c:	4618      	mov	r0, r3
 800092e:	3714      	adds	r7, #20
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	40020407 	.word	0x40020407
 800093c:	bffdfff8 	.word	0xbffdfff8
 8000940:	cccccccd 	.word	0xcccccccd
 8000944:	40020000 	.word	0x40020000
 8000948:	bffdfbf8 	.word	0xbffdfbf8
 800094c:	40020400 	.word	0x40020400
 8000950:	400200a8 	.word	0x400200a8
 8000954:	400204a8 	.word	0x400204a8

08000958 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]
 8000964:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000966:	2300      	movs	r3, #0
 8000968:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000970:	2b01      	cmp	r3, #1
 8000972:	d101      	bne.n	8000978 <HAL_DMA_Start+0x20>
 8000974:	2302      	movs	r3, #2
 8000976:	e02e      	b.n	80009d6 <HAL_DMA_Start+0x7e>
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	2201      	movs	r2, #1
 800097c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000986:	b2db      	uxtb	r3, r3
 8000988:	2b01      	cmp	r3, #1
 800098a:	d11d      	bne.n	80009c8 <HAL_DMA_Start+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	2202      	movs	r2, #2
 8000990:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	2200      	movs	r2, #0
 8000998:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	6812      	ldr	r2, [r2, #0]
 80009a2:	6812      	ldr	r2, [r2, #0]
 80009a4:	f022 0201 	bic.w	r2, r2, #1
 80009a8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	687a      	ldr	r2, [r7, #4]
 80009ae:	68b9      	ldr	r1, [r7, #8]
 80009b0:	68f8      	ldr	r0, [r7, #12]
 80009b2:	f000 f9ae 	bl	8000d12 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	6812      	ldr	r2, [r2, #0]
 80009be:	6812      	ldr	r2, [r2, #0]
 80009c0:	f042 0201 	orr.w	r2, r2, #1
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	e005      	b.n	80009d4 <HAL_DMA_Start+0x7c>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2200      	movs	r2, #0
 80009cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    status = HAL_BUSY;
 80009d0:	2302      	movs	r3, #2
 80009d2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80009d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b086      	sub	sp, #24
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	60f8      	str	r0, [r7, #12]
 80009e6:	60b9      	str	r1, [r7, #8]
 80009e8:	607a      	str	r2, [r7, #4]
 80009ea:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80009ec:	2300      	movs	r3, #0
 80009ee:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d101      	bne.n	80009fe <HAL_DMA_Start_IT+0x20>
 80009fa:	2302      	movs	r3, #2
 80009fc:	e04b      	b.n	8000a96 <HAL_DMA_Start_IT+0xb8>
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	2201      	movs	r2, #1
 8000a02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d13a      	bne.n	8000a88 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	2202      	movs	r2, #2
 8000a16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	68fa      	ldr	r2, [r7, #12]
 8000a26:	6812      	ldr	r2, [r2, #0]
 8000a28:	6812      	ldr	r2, [r2, #0]
 8000a2a:	f022 0201 	bic.w	r2, r2, #1
 8000a2e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	68b9      	ldr	r1, [r7, #8]
 8000a36:	68f8      	ldr	r0, [r7, #12]
 8000a38:	f000 f96b 	bl	8000d12 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d008      	beq.n	8000a56 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	68fa      	ldr	r2, [r7, #12]
 8000a4a:	6812      	ldr	r2, [r2, #0]
 8000a4c:	6812      	ldr	r2, [r2, #0]
 8000a4e:	f042 020e 	orr.w	r2, r2, #14
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	e00f      	b.n	8000a76 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	6812      	ldr	r2, [r2, #0]
 8000a5e:	6812      	ldr	r2, [r2, #0]
 8000a60:	f022 0204 	bic.w	r2, r2, #4
 8000a64:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	6812      	ldr	r2, [r2, #0]
 8000a6e:	6812      	ldr	r2, [r2, #0]
 8000a70:	f042 020a 	orr.w	r2, r2, #10
 8000a74:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	6812      	ldr	r2, [r2, #0]
 8000a7e:	6812      	ldr	r2, [r2, #0]
 8000a80:	f042 0201 	orr.w	r2, r2, #1
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	e005      	b.n	8000a94 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000a90:	2302      	movs	r3, #2
 8000a92:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	b085      	sub	sp, #20
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	2b02      	cmp	r3, #2
 8000ab4:	d008      	beq.n	8000ac8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2204      	movs	r2, #4
 8000aba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	e022      	b.n	8000b0e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	6812      	ldr	r2, [r2, #0]
 8000ad0:	6812      	ldr	r2, [r2, #0]
 8000ad2:	f022 020e 	bic.w	r2, r2, #14
 8000ad6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	6812      	ldr	r2, [r2, #0]
 8000ae0:	6812      	ldr	r2, [r2, #0]
 8000ae2:	f022 0201 	bic.w	r2, r2, #1
 8000ae6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000af0:	f002 021c 	and.w	r2, r2, #28
 8000af4:	2101      	movs	r1, #1
 8000af6:	fa01 f202 	lsl.w	r2, r1, r2
 8000afa:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2201      	movs	r2, #1
 8000b00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2200      	movs	r2, #0
 8000b08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b084      	sub	sp, #16
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b22:	2300      	movs	r3, #0
 8000b24:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d005      	beq.n	8000b3e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2204      	movs	r2, #4
 8000b36:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	73fb      	strb	r3, [r7, #15]
 8000b3c:	e029      	b.n	8000b92 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	6812      	ldr	r2, [r2, #0]
 8000b46:	6812      	ldr	r2, [r2, #0]
 8000b48:	f022 020e 	bic.w	r2, r2, #14
 8000b4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	6812      	ldr	r2, [r2, #0]
 8000b56:	6812      	ldr	r2, [r2, #0]
 8000b58:	f022 0201 	bic.w	r2, r2, #1
 8000b5c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000b66:	f002 021c 	and.w	r2, r2, #28
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b70:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2201      	movs	r2, #1
 8000b76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d003      	beq.n	8000b92 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	4798      	blx	r3
    }
  }
  return status;
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb8:	f003 031c 	and.w	r3, r3, #28
 8000bbc:	2204      	movs	r2, #4
 8000bbe:	409a      	lsls	r2, r3
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d026      	beq.n	8000c16 <HAL_DMA_IRQHandler+0x7a>
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	f003 0304 	and.w	r3, r3, #4
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d021      	beq.n	8000c16 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f003 0320 	and.w	r3, r3, #32
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d107      	bne.n	8000bf0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	6812      	ldr	r2, [r2, #0]
 8000be8:	6812      	ldr	r2, [r2, #0]
 8000bea:	f022 0204 	bic.w	r2, r2, #4
 8000bee:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000bf8:	f002 021c 	and.w	r2, r2, #28
 8000bfc:	2104      	movs	r1, #4
 8000bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8000c02:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d071      	beq.n	8000cf0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8000c14:	e06c      	b.n	8000cf0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	f003 031c 	and.w	r3, r3, #28
 8000c1e:	2202      	movs	r2, #2
 8000c20:	409a      	lsls	r2, r3
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	4013      	ands	r3, r2
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d02e      	beq.n	8000c88 <HAL_DMA_IRQHandler+0xec>
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	f003 0302 	and.w	r3, r3, #2
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d029      	beq.n	8000c88 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f003 0320 	and.w	r3, r3, #32
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d10b      	bne.n	8000c5a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	6812      	ldr	r2, [r2, #0]
 8000c4a:	6812      	ldr	r2, [r2, #0]
 8000c4c:	f022 020a 	bic.w	r2, r2, #10
 8000c50:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2201      	movs	r2, #1
 8000c56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000c62:	f002 021c 	and.w	r2, r2, #28
 8000c66:	2102      	movs	r1, #2
 8000c68:	fa01 f202 	lsl.w	r2, r1, r2
 8000c6c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2200      	movs	r2, #0
 8000c72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d038      	beq.n	8000cf0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000c86:	e033      	b.n	8000cf0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8c:	f003 031c 	and.w	r3, r3, #28
 8000c90:	2208      	movs	r2, #8
 8000c92:	409a      	lsls	r2, r3
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4013      	ands	r3, r2
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d02a      	beq.n	8000cf2 <HAL_DMA_IRQHandler+0x156>
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	f003 0308 	and.w	r3, r3, #8
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d025      	beq.n	8000cf2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	6812      	ldr	r2, [r2, #0]
 8000cae:	6812      	ldr	r2, [r2, #0]
 8000cb0:	f022 020e 	bic.w	r2, r2, #14
 8000cb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000cbe:	f002 021c 	and.w	r2, r2, #28
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2201      	movs	r2, #1
 8000cce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d004      	beq.n	8000cf2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000cf0:	bf00      	nop
 8000cf2:	bf00      	nop
}
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b083      	sub	sp, #12
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b085      	sub	sp, #20
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	60f8      	str	r0, [r7, #12]
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
 8000d1e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	68fa      	ldr	r2, [r7, #12]
 8000d26:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000d28:	f002 021c 	and.w	r2, r2, #28
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d32:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	683a      	ldr	r2, [r7, #0]
 8000d3a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	2b10      	cmp	r3, #16
 8000d42:	d108      	bne.n	8000d56 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	68ba      	ldr	r2, [r7, #8]
 8000d52:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000d54:	e007      	b.n	8000d66 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	60da      	str	r2, [r3, #12]
}
 8000d66:	bf00      	nop
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b087      	sub	sp, #28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d82:	e17f      	b.n	8001084 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	2101      	movs	r1, #1
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d90:	4013      	ands	r3, r2
 8000d92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f000 8171 	beq.w	800107e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d003      	beq.n	8000dac <HAL_GPIO_Init+0x38>
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	2b12      	cmp	r3, #18
 8000daa:	d123      	bne.n	8000df4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	08da      	lsrs	r2, r3, #3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3208      	adds	r2, #8
 8000db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	f003 0307 	and.w	r3, r3, #7
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	220f      	movs	r2, #15
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	691a      	ldr	r2, [r3, #16]
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	08da      	lsrs	r2, r3, #3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	3208      	adds	r2, #8
 8000dee:	6939      	ldr	r1, [r7, #16]
 8000df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	2203      	movs	r2, #3
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0203 	and.w	r2, r3, #3
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d00b      	beq.n	8000e48 <HAL_GPIO_Init+0xd4>
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d007      	beq.n	8000e48 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e3c:	2b11      	cmp	r3, #17
 8000e3e:	d003      	beq.n	8000e48 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2b12      	cmp	r3, #18
 8000e46:	d130      	bne.n	8000eaa <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	2203      	movs	r2, #3
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	68da      	ldr	r2, [r3, #12]
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e7e:	2201      	movs	r2, #1
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	091b      	lsrs	r3, r3, #4
 8000e94:	f003 0201 	and.w	r2, r3, #1
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	2b03      	cmp	r3, #3
 8000eb4:	d118      	bne.n	8000ee8 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	08db      	lsrs	r3, r3, #3
 8000ed2:	f003 0201 	and.w	r2, r3, #1
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	689a      	ldr	r2, [r3, #8]
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f000 80ac 	beq.w	800107e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f26:	4a5e      	ldr	r2, [pc, #376]	; (80010a0 <HAL_GPIO_Init+0x32c>)
 8000f28:	4b5d      	ldr	r3, [pc, #372]	; (80010a0 <HAL_GPIO_Init+0x32c>)
 8000f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6613      	str	r3, [r2, #96]	; 0x60
 8000f32:	4b5b      	ldr	r3, [pc, #364]	; (80010a0 <HAL_GPIO_Init+0x32c>)
 8000f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f3e:	4a59      	ldr	r2, [pc, #356]	; (80010a4 <HAL_GPIO_Init+0x330>)
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	089b      	lsrs	r3, r3, #2
 8000f44:	3302      	adds	r3, #2
 8000f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	220f      	movs	r2, #15
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f68:	d025      	beq.n	8000fb6 <HAL_GPIO_Init+0x242>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a4e      	ldr	r2, [pc, #312]	; (80010a8 <HAL_GPIO_Init+0x334>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d01f      	beq.n	8000fb2 <HAL_GPIO_Init+0x23e>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a4d      	ldr	r2, [pc, #308]	; (80010ac <HAL_GPIO_Init+0x338>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d019      	beq.n	8000fae <HAL_GPIO_Init+0x23a>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4c      	ldr	r2, [pc, #304]	; (80010b0 <HAL_GPIO_Init+0x33c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d013      	beq.n	8000faa <HAL_GPIO_Init+0x236>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4b      	ldr	r2, [pc, #300]	; (80010b4 <HAL_GPIO_Init+0x340>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d00d      	beq.n	8000fa6 <HAL_GPIO_Init+0x232>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4a      	ldr	r2, [pc, #296]	; (80010b8 <HAL_GPIO_Init+0x344>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d007      	beq.n	8000fa2 <HAL_GPIO_Init+0x22e>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a49      	ldr	r2, [pc, #292]	; (80010bc <HAL_GPIO_Init+0x348>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d101      	bne.n	8000f9e <HAL_GPIO_Init+0x22a>
 8000f9a:	2306      	movs	r3, #6
 8000f9c:	e00c      	b.n	8000fb8 <HAL_GPIO_Init+0x244>
 8000f9e:	2307      	movs	r3, #7
 8000fa0:	e00a      	b.n	8000fb8 <HAL_GPIO_Init+0x244>
 8000fa2:	2305      	movs	r3, #5
 8000fa4:	e008      	b.n	8000fb8 <HAL_GPIO_Init+0x244>
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	e006      	b.n	8000fb8 <HAL_GPIO_Init+0x244>
 8000faa:	2303      	movs	r3, #3
 8000fac:	e004      	b.n	8000fb8 <HAL_GPIO_Init+0x244>
 8000fae:	2302      	movs	r3, #2
 8000fb0:	e002      	b.n	8000fb8 <HAL_GPIO_Init+0x244>
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <HAL_GPIO_Init+0x244>
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	697a      	ldr	r2, [r7, #20]
 8000fba:	f002 0203 	and.w	r2, r2, #3
 8000fbe:	0092      	lsls	r2, r2, #2
 8000fc0:	4093      	lsls	r3, r2
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fc8:	4936      	ldr	r1, [pc, #216]	; (80010a4 <HAL_GPIO_Init+0x330>)
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	089b      	lsrs	r3, r3, #2
 8000fce:	3302      	adds	r3, #2
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fd6:	4b3a      	ldr	r3, [pc, #232]	; (80010c0 <HAL_GPIO_Init+0x34c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ffa:	4a31      	ldr	r2, [pc, #196]	; (80010c0 <HAL_GPIO_Init+0x34c>)
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001000:	4b2f      	ldr	r3, [pc, #188]	; (80010c0 <HAL_GPIO_Init+0x34c>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	43db      	mvns	r3, r3
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	4313      	orrs	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001024:	4a26      	ldr	r2, [pc, #152]	; (80010c0 <HAL_GPIO_Init+0x34c>)
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800102a:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <HAL_GPIO_Init+0x34c>)
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	43db      	mvns	r3, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4313      	orrs	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800104e:	4a1c      	ldr	r2, [pc, #112]	; (80010c0 <HAL_GPIO_Init+0x34c>)
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001054:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <HAL_GPIO_Init+0x34c>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	43db      	mvns	r3, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001078:	4a11      	ldr	r2, [pc, #68]	; (80010c0 <HAL_GPIO_Init+0x34c>)
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	3301      	adds	r3, #1
 8001082:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	fa22 f303 	lsr.w	r3, r2, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	f47f ae78 	bne.w	8000d84 <HAL_GPIO_Init+0x10>
  }
}
 8001094:	bf00      	nop
 8001096:	371c      	adds	r7, #28
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40010000 	.word	0x40010000
 80010a8:	48000400 	.word	0x48000400
 80010ac:	48000800 	.word	0x48000800
 80010b0:	48000c00 	.word	0x48000c00
 80010b4:	48001000 	.word	0x48001000
 80010b8:	48001400 	.word	0x48001400
 80010bc:	48001800 	.word	0x48001800
 80010c0:	40010400 	.word	0x40010400

080010c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	807b      	strh	r3, [r7, #2]
 80010d0:	4613      	mov	r3, r2
 80010d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010d4:	787b      	ldrb	r3, [r7, #1]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010da:	887a      	ldrh	r2, [r7, #2]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010e0:	e002      	b.n	80010e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010e2:	887a      	ldrh	r2, [r7, #2]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010f8:	4b04      	ldr	r3, [pc, #16]	; (800110c <HAL_PWREx_GetVoltageRange+0x18>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40007000 	.word	0x40007000

08001110 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800111e:	d130      	bne.n	8001182 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001120:	4b23      	ldr	r3, [pc, #140]	; (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800112c:	d038      	beq.n	80011a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800112e:	4a20      	ldr	r2, [pc, #128]	; (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001130:	4b1f      	ldr	r3, [pc, #124]	; (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001138:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800113c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800113e:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2232      	movs	r2, #50	; 0x32
 8001144:	fb02 f303 	mul.w	r3, r2, r3
 8001148:	4a1b      	ldr	r2, [pc, #108]	; (80011b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800114a:	fba2 2303 	umull	r2, r3, r2, r3
 800114e:	0c9b      	lsrs	r3, r3, #18
 8001150:	3301      	adds	r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001154:	e002      	b.n	800115c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	3b01      	subs	r3, #1
 800115a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800115c:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800115e:	695b      	ldr	r3, [r3, #20]
 8001160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001168:	d102      	bne.n	8001170 <HAL_PWREx_ControlVoltageScaling+0x60>
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1f2      	bne.n	8001156 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001172:	695b      	ldr	r3, [r3, #20]
 8001174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800117c:	d110      	bne.n	80011a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e00f      	b.n	80011a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800118a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800118e:	d007      	beq.n	80011a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001190:	4a07      	ldr	r2, [pc, #28]	; (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001192:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800119a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800119e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40007000 	.word	0x40007000
 80011b4:	20000008 	.word	0x20000008
 80011b8:	431bde83 	.word	0x431bde83

080011bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d101      	bne.n	80011ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e39d      	b.n	800190a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011ce:	4ba4      	ldr	r3, [pc, #656]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f003 030c 	and.w	r3, r3, #12
 80011d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011d8:	4ba1      	ldr	r3, [pc, #644]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0310 	and.w	r3, r3, #16
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f000 80e1 	beq.w	80013b2 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d007      	beq.n	8001206 <HAL_RCC_OscConfig+0x4a>
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	2b0c      	cmp	r3, #12
 80011fa:	f040 8088 	bne.w	800130e <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	2b01      	cmp	r3, #1
 8001202:	f040 8084 	bne.w	800130e <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001206:	4b96      	ldr	r3, [pc, #600]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d005      	beq.n	800121e <HAL_RCC_OscConfig+0x62>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e375      	b.n	800190a <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a1a      	ldr	r2, [r3, #32]
 8001222:	4b8f      	ldr	r3, [pc, #572]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0308 	and.w	r3, r3, #8
 800122a:	2b00      	cmp	r3, #0
 800122c:	d004      	beq.n	8001238 <HAL_RCC_OscConfig+0x7c>
 800122e:	4b8c      	ldr	r3, [pc, #560]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001236:	e005      	b.n	8001244 <HAL_RCC_OscConfig+0x88>
 8001238:	4b89      	ldr	r3, [pc, #548]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 800123a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800123e:	091b      	lsrs	r3, r3, #4
 8001240:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001244:	429a      	cmp	r2, r3
 8001246:	d923      	bls.n	8001290 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a1b      	ldr	r3, [r3, #32]
 800124c:	4618      	mov	r0, r3
 800124e:	f000 fd09 	bl	8001c64 <RCC_SetFlashLatencyFromMSIRange>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e356      	b.n	800190a <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800125c:	4a80      	ldr	r2, [pc, #512]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 800125e:	4b80      	ldr	r3, [pc, #512]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f043 0308 	orr.w	r3, r3, #8
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	497d      	ldr	r1, [pc, #500]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 800126a:	4b7d      	ldr	r3, [pc, #500]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	4313      	orrs	r3, r2
 8001278:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800127a:	4979      	ldr	r1, [pc, #484]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 800127c:	4b78      	ldr	r3, [pc, #480]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	69db      	ldr	r3, [r3, #28]
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	4313      	orrs	r3, r2
 800128c:	604b      	str	r3, [r1, #4]
 800128e:	e022      	b.n	80012d6 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001290:	4a73      	ldr	r2, [pc, #460]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001292:	4b73      	ldr	r3, [pc, #460]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f043 0308 	orr.w	r3, r3, #8
 800129a:	6013      	str	r3, [r2, #0]
 800129c:	4970      	ldr	r1, [pc, #448]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 800129e:	4b70      	ldr	r3, [pc, #448]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a1b      	ldr	r3, [r3, #32]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ae:	496c      	ldr	r1, [pc, #432]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 80012b0:	4b6b      	ldr	r3, [pc, #428]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69db      	ldr	r3, [r3, #28]
 80012bc:	021b      	lsls	r3, r3, #8
 80012be:	4313      	orrs	r3, r2
 80012c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a1b      	ldr	r3, [r3, #32]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 fccc 	bl	8001c64 <RCC_SetFlashLatencyFromMSIRange>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e319      	b.n	800190a <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012d6:	f000 fc03 	bl	8001ae0 <HAL_RCC_GetSysClockFreq>
 80012da:	4601      	mov	r1, r0
 80012dc:	4b60      	ldr	r3, [pc, #384]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	091b      	lsrs	r3, r3, #4
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	4a5f      	ldr	r2, [pc, #380]	; (8001464 <HAL_RCC_OscConfig+0x2a8>)
 80012e8:	5cd3      	ldrb	r3, [r2, r3]
 80012ea:	f003 031f 	and.w	r3, r3, #31
 80012ee:	fa21 f303 	lsr.w	r3, r1, r3
 80012f2:	4a5d      	ldr	r2, [pc, #372]	; (8001468 <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012f6:	4b5d      	ldr	r3, [pc, #372]	; (800146c <HAL_RCC_OscConfig+0x2b0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff f90c 	bl	8000518 <HAL_InitTick>
 8001300:	4603      	mov	r3, r0
 8001302:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001304:	7bfb      	ldrb	r3, [r7, #15]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d052      	beq.n	80013b0 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	e2fd      	b.n	800190a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d032      	beq.n	800137c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001316:	4a52      	ldr	r2, [pc, #328]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001318:	4b51      	ldr	r3, [pc, #324]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001322:	f7ff f945 	bl	80005b0 <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800132a:	f7ff f941 	bl	80005b0 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e2e6      	b.n	800190a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800133c:	4b48      	ldr	r3, [pc, #288]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0f0      	beq.n	800132a <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001348:	4a45      	ldr	r2, [pc, #276]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 800134a:	4b45      	ldr	r3, [pc, #276]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f043 0308 	orr.w	r3, r3, #8
 8001352:	6013      	str	r3, [r2, #0]
 8001354:	4942      	ldr	r1, [pc, #264]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001356:	4b42      	ldr	r3, [pc, #264]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	4313      	orrs	r3, r2
 8001364:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001366:	493e      	ldr	r1, [pc, #248]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001368:	4b3d      	ldr	r3, [pc, #244]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69db      	ldr	r3, [r3, #28]
 8001374:	021b      	lsls	r3, r3, #8
 8001376:	4313      	orrs	r3, r2
 8001378:	604b      	str	r3, [r1, #4]
 800137a:	e01a      	b.n	80013b2 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800137c:	4a38      	ldr	r2, [pc, #224]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 800137e:	4b38      	ldr	r3, [pc, #224]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f023 0301 	bic.w	r3, r3, #1
 8001386:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001388:	f7ff f912 	bl	80005b0 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001390:	f7ff f90e 	bl	80005b0 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e2b3      	b.n	800190a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013a2:	4b2f      	ldr	r3, [pc, #188]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f0      	bne.n	8001390 <HAL_RCC_OscConfig+0x1d4>
 80013ae:	e000      	b.n	80013b2 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d074      	beq.n	80014a8 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	2b08      	cmp	r3, #8
 80013c2:	d005      	beq.n	80013d0 <HAL_RCC_OscConfig+0x214>
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	2b0c      	cmp	r3, #12
 80013c8:	d10e      	bne.n	80013e8 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	d10b      	bne.n	80013e8 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d0:	4b23      	ldr	r3, [pc, #140]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d064      	beq.n	80014a6 <HAL_RCC_OscConfig+0x2ea>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d160      	bne.n	80014a6 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e290      	b.n	800190a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f0:	d106      	bne.n	8001400 <HAL_RCC_OscConfig+0x244>
 80013f2:	4a1b      	ldr	r2, [pc, #108]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 80013f4:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	e01d      	b.n	800143c <HAL_RCC_OscConfig+0x280>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001408:	d10c      	bne.n	8001424 <HAL_RCC_OscConfig+0x268>
 800140a:	4a15      	ldr	r2, [pc, #84]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 800140c:	4b14      	ldr	r3, [pc, #80]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	4a12      	ldr	r2, [pc, #72]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	e00b      	b.n	800143c <HAL_RCC_OscConfig+0x280>
 8001424:	4a0e      	ldr	r2, [pc, #56]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001426:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	4a0b      	ldr	r2, [pc, #44]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001432:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800143a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d01c      	beq.n	800147e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001444:	f7ff f8b4 	bl	80005b0 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800144a:	e011      	b.n	8001470 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800144c:	f7ff f8b0 	bl	80005b0 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b64      	cmp	r3, #100	; 0x64
 8001458:	d90a      	bls.n	8001470 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e255      	b.n	800190a <HAL_RCC_OscConfig+0x74e>
 800145e:	bf00      	nop
 8001460:	40021000 	.word	0x40021000
 8001464:	08005eec 	.word	0x08005eec
 8001468:	20000008 	.word	0x20000008
 800146c:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001470:	4bae      	ldr	r3, [pc, #696]	; (800172c <HAL_RCC_OscConfig+0x570>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0e7      	beq.n	800144c <HAL_RCC_OscConfig+0x290>
 800147c:	e014      	b.n	80014a8 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147e:	f7ff f897 	bl	80005b0 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001486:	f7ff f893 	bl	80005b0 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b64      	cmp	r3, #100	; 0x64
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e238      	b.n	800190a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001498:	4ba4      	ldr	r3, [pc, #656]	; (800172c <HAL_RCC_OscConfig+0x570>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1f0      	bne.n	8001486 <HAL_RCC_OscConfig+0x2ca>
 80014a4:	e000      	b.n	80014a8 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d060      	beq.n	8001576 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	d005      	beq.n	80014c6 <HAL_RCC_OscConfig+0x30a>
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	2b0c      	cmp	r3, #12
 80014be:	d119      	bne.n	80014f4 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d116      	bne.n	80014f4 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014c6:	4b99      	ldr	r3, [pc, #612]	; (800172c <HAL_RCC_OscConfig+0x570>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d005      	beq.n	80014de <HAL_RCC_OscConfig+0x322>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e215      	b.n	800190a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014de:	4993      	ldr	r1, [pc, #588]	; (800172c <HAL_RCC_OscConfig+0x570>)
 80014e0:	4b92      	ldr	r3, [pc, #584]	; (800172c <HAL_RCC_OscConfig+0x570>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	061b      	lsls	r3, r3, #24
 80014ee:	4313      	orrs	r3, r2
 80014f0:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014f2:	e040      	b.n	8001576 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d023      	beq.n	8001544 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014fc:	4a8b      	ldr	r2, [pc, #556]	; (800172c <HAL_RCC_OscConfig+0x570>)
 80014fe:	4b8b      	ldr	r3, [pc, #556]	; (800172c <HAL_RCC_OscConfig+0x570>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001508:	f7ff f852 	bl	80005b0 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001510:	f7ff f84e 	bl	80005b0 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e1f3      	b.n	800190a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001522:	4b82      	ldr	r3, [pc, #520]	; (800172c <HAL_RCC_OscConfig+0x570>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f0      	beq.n	8001510 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800152e:	497f      	ldr	r1, [pc, #508]	; (800172c <HAL_RCC_OscConfig+0x570>)
 8001530:	4b7e      	ldr	r3, [pc, #504]	; (800172c <HAL_RCC_OscConfig+0x570>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	061b      	lsls	r3, r3, #24
 800153e:	4313      	orrs	r3, r2
 8001540:	604b      	str	r3, [r1, #4]
 8001542:	e018      	b.n	8001576 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001544:	4a79      	ldr	r2, [pc, #484]	; (800172c <HAL_RCC_OscConfig+0x570>)
 8001546:	4b79      	ldr	r3, [pc, #484]	; (800172c <HAL_RCC_OscConfig+0x570>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800154e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001550:	f7ff f82e 	bl	80005b0 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001558:	f7ff f82a 	bl	80005b0 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e1cf      	b.n	800190a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800156a:	4b70      	ldr	r3, [pc, #448]	; (800172c <HAL_RCC_OscConfig+0x570>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	2b00      	cmp	r3, #0
 8001580:	d03c      	beq.n	80015fc <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d01c      	beq.n	80015c4 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800158a:	4a68      	ldr	r2, [pc, #416]	; (800172c <HAL_RCC_OscConfig+0x570>)
 800158c:	4b67      	ldr	r3, [pc, #412]	; (800172c <HAL_RCC_OscConfig+0x570>)
 800158e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159a:	f7ff f809 	bl	80005b0 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a2:	f7ff f805 	bl	80005b0 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e1aa      	b.n	800190a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015b4:	4b5d      	ldr	r3, [pc, #372]	; (800172c <HAL_RCC_OscConfig+0x570>)
 80015b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0ef      	beq.n	80015a2 <HAL_RCC_OscConfig+0x3e6>
 80015c2:	e01b      	b.n	80015fc <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015c4:	4a59      	ldr	r2, [pc, #356]	; (800172c <HAL_RCC_OscConfig+0x570>)
 80015c6:	4b59      	ldr	r3, [pc, #356]	; (800172c <HAL_RCC_OscConfig+0x570>)
 80015c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015cc:	f023 0301 	bic.w	r3, r3, #1
 80015d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d4:	f7fe ffec 	bl	80005b0 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015dc:	f7fe ffe8 	bl	80005b0 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e18d      	b.n	800190a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015ee:	4b4f      	ldr	r3, [pc, #316]	; (800172c <HAL_RCC_OscConfig+0x570>)
 80015f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1ef      	bne.n	80015dc <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b00      	cmp	r3, #0
 8001606:	f000 80a5 	beq.w	8001754 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800160a:	2300      	movs	r3, #0
 800160c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800160e:	4b47      	ldr	r3, [pc, #284]	; (800172c <HAL_RCC_OscConfig+0x570>)
 8001610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d10d      	bne.n	8001636 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800161a:	4a44      	ldr	r2, [pc, #272]	; (800172c <HAL_RCC_OscConfig+0x570>)
 800161c:	4b43      	ldr	r3, [pc, #268]	; (800172c <HAL_RCC_OscConfig+0x570>)
 800161e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001624:	6593      	str	r3, [r2, #88]	; 0x58
 8001626:	4b41      	ldr	r3, [pc, #260]	; (800172c <HAL_RCC_OscConfig+0x570>)
 8001628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001632:	2301      	movs	r3, #1
 8001634:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001636:	4b3e      	ldr	r3, [pc, #248]	; (8001730 <HAL_RCC_OscConfig+0x574>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163e:	2b00      	cmp	r3, #0
 8001640:	d118      	bne.n	8001674 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001642:	4a3b      	ldr	r2, [pc, #236]	; (8001730 <HAL_RCC_OscConfig+0x574>)
 8001644:	4b3a      	ldr	r3, [pc, #232]	; (8001730 <HAL_RCC_OscConfig+0x574>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800164c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800164e:	f7fe ffaf 	bl	80005b0 <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001656:	f7fe ffab 	bl	80005b0 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e150      	b.n	800190a <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001668:	4b31      	ldr	r3, [pc, #196]	; (8001730 <HAL_RCC_OscConfig+0x574>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0f0      	beq.n	8001656 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d108      	bne.n	800168e <HAL_RCC_OscConfig+0x4d2>
 800167c:	4a2b      	ldr	r2, [pc, #172]	; (800172c <HAL_RCC_OscConfig+0x570>)
 800167e:	4b2b      	ldr	r3, [pc, #172]	; (800172c <HAL_RCC_OscConfig+0x570>)
 8001680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800168c:	e024      	b.n	80016d8 <HAL_RCC_OscConfig+0x51c>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2b05      	cmp	r3, #5
 8001694:	d110      	bne.n	80016b8 <HAL_RCC_OscConfig+0x4fc>
 8001696:	4a25      	ldr	r2, [pc, #148]	; (800172c <HAL_RCC_OscConfig+0x570>)
 8001698:	4b24      	ldr	r3, [pc, #144]	; (800172c <HAL_RCC_OscConfig+0x570>)
 800169a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800169e:	f043 0304 	orr.w	r3, r3, #4
 80016a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016a6:	4a21      	ldr	r2, [pc, #132]	; (800172c <HAL_RCC_OscConfig+0x570>)
 80016a8:	4b20      	ldr	r3, [pc, #128]	; (800172c <HAL_RCC_OscConfig+0x570>)
 80016aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016b6:	e00f      	b.n	80016d8 <HAL_RCC_OscConfig+0x51c>
 80016b8:	4a1c      	ldr	r2, [pc, #112]	; (800172c <HAL_RCC_OscConfig+0x570>)
 80016ba:	4b1c      	ldr	r3, [pc, #112]	; (800172c <HAL_RCC_OscConfig+0x570>)
 80016bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c0:	f023 0301 	bic.w	r3, r3, #1
 80016c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016c8:	4a18      	ldr	r2, [pc, #96]	; (800172c <HAL_RCC_OscConfig+0x570>)
 80016ca:	4b18      	ldr	r3, [pc, #96]	; (800172c <HAL_RCC_OscConfig+0x570>)
 80016cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d0:	f023 0304 	bic.w	r3, r3, #4
 80016d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d016      	beq.n	800170e <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e0:	f7fe ff66 	bl	80005b0 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016e6:	e00a      	b.n	80016fe <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e8:	f7fe ff62 	bl	80005b0 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e105      	b.n	800190a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016fe:	4b0b      	ldr	r3, [pc, #44]	; (800172c <HAL_RCC_OscConfig+0x570>)
 8001700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0ed      	beq.n	80016e8 <HAL_RCC_OscConfig+0x52c>
 800170c:	e019      	b.n	8001742 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170e:	f7fe ff4f 	bl	80005b0 <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001714:	e00e      	b.n	8001734 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001716:	f7fe ff4b 	bl	80005b0 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	f241 3288 	movw	r2, #5000	; 0x1388
 8001724:	4293      	cmp	r3, r2
 8001726:	d905      	bls.n	8001734 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e0ee      	b.n	800190a <HAL_RCC_OscConfig+0x74e>
 800172c:	40021000 	.word	0x40021000
 8001730:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001734:	4b77      	ldr	r3, [pc, #476]	; (8001914 <HAL_RCC_OscConfig+0x758>)
 8001736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1e9      	bne.n	8001716 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001742:	7ffb      	ldrb	r3, [r7, #31]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d105      	bne.n	8001754 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001748:	4a72      	ldr	r2, [pc, #456]	; (8001914 <HAL_RCC_OscConfig+0x758>)
 800174a:	4b72      	ldr	r3, [pc, #456]	; (8001914 <HAL_RCC_OscConfig+0x758>)
 800174c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001752:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 80d5 	beq.w	8001908 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	2b0c      	cmp	r3, #12
 8001762:	f000 808e 	beq.w	8001882 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176a:	2b02      	cmp	r3, #2
 800176c:	d15b      	bne.n	8001826 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176e:	4a69      	ldr	r2, [pc, #420]	; (8001914 <HAL_RCC_OscConfig+0x758>)
 8001770:	4b68      	ldr	r3, [pc, #416]	; (8001914 <HAL_RCC_OscConfig+0x758>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177a:	f7fe ff19 	bl	80005b0 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001782:	f7fe ff15 	bl	80005b0 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e0ba      	b.n	800190a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001794:	4b5f      	ldr	r3, [pc, #380]	; (8001914 <HAL_RCC_OscConfig+0x758>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1f0      	bne.n	8001782 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017a0:	485c      	ldr	r0, [pc, #368]	; (8001914 <HAL_RCC_OscConfig+0x758>)
 80017a2:	4b5c      	ldr	r3, [pc, #368]	; (8001914 <HAL_RCC_OscConfig+0x758>)
 80017a4:	68da      	ldr	r2, [r3, #12]
 80017a6:	4b5c      	ldr	r3, [pc, #368]	; (8001918 <HAL_RCC_OscConfig+0x75c>)
 80017a8:	4013      	ands	r3, r2
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017b2:	3a01      	subs	r2, #1
 80017b4:	0112      	lsls	r2, r2, #4
 80017b6:	4311      	orrs	r1, r2
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017bc:	0212      	lsls	r2, r2, #8
 80017be:	4311      	orrs	r1, r2
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80017c4:	0852      	lsrs	r2, r2, #1
 80017c6:	3a01      	subs	r2, #1
 80017c8:	0552      	lsls	r2, r2, #21
 80017ca:	4311      	orrs	r1, r2
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017d0:	0852      	lsrs	r2, r2, #1
 80017d2:	3a01      	subs	r2, #1
 80017d4:	0652      	lsls	r2, r2, #25
 80017d6:	4311      	orrs	r1, r2
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017dc:	0912      	lsrs	r2, r2, #4
 80017de:	0452      	lsls	r2, r2, #17
 80017e0:	430a      	orrs	r2, r1
 80017e2:	4313      	orrs	r3, r2
 80017e4:	60c3      	str	r3, [r0, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017e6:	4a4b      	ldr	r2, [pc, #300]	; (8001914 <HAL_RCC_OscConfig+0x758>)
 80017e8:	4b4a      	ldr	r3, [pc, #296]	; (8001914 <HAL_RCC_OscConfig+0x758>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017f0:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017f2:	4a48      	ldr	r2, [pc, #288]	; (8001914 <HAL_RCC_OscConfig+0x758>)
 80017f4:	4b47      	ldr	r3, [pc, #284]	; (8001914 <HAL_RCC_OscConfig+0x758>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017fc:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fe:	f7fe fed7 	bl	80005b0 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001806:	f7fe fed3 	bl	80005b0 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e078      	b.n	800190a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001818:	4b3e      	ldr	r3, [pc, #248]	; (8001914 <HAL_RCC_OscConfig+0x758>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d0f0      	beq.n	8001806 <HAL_RCC_OscConfig+0x64a>
 8001824:	e070      	b.n	8001908 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001826:	4a3b      	ldr	r2, [pc, #236]	; (8001914 <HAL_RCC_OscConfig+0x758>)
 8001828:	4b3a      	ldr	r3, [pc, #232]	; (8001914 <HAL_RCC_OscConfig+0x758>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001830:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001832:	4b38      	ldr	r3, [pc, #224]	; (8001914 <HAL_RCC_OscConfig+0x758>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d105      	bne.n	800184a <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800183e:	4a35      	ldr	r2, [pc, #212]	; (8001914 <HAL_RCC_OscConfig+0x758>)
 8001840:	4b34      	ldr	r3, [pc, #208]	; (8001914 <HAL_RCC_OscConfig+0x758>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	f023 0303 	bic.w	r3, r3, #3
 8001848:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800184a:	4a32      	ldr	r2, [pc, #200]	; (8001914 <HAL_RCC_OscConfig+0x758>)
 800184c:	4b31      	ldr	r3, [pc, #196]	; (8001914 <HAL_RCC_OscConfig+0x758>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001858:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185a:	f7fe fea9 	bl	80005b0 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001862:	f7fe fea5 	bl	80005b0 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e04a      	b.n	800190a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001874:	4b27      	ldr	r3, [pc, #156]	; (8001914 <HAL_RCC_OscConfig+0x758>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1f0      	bne.n	8001862 <HAL_RCC_OscConfig+0x6a6>
 8001880:	e042      	b.n	8001908 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001886:	2b01      	cmp	r3, #1
 8001888:	d101      	bne.n	800188e <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e03d      	b.n	800190a <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800188e:	4b21      	ldr	r3, [pc, #132]	; (8001914 <HAL_RCC_OscConfig+0x758>)
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f003 0203 	and.w	r2, r3, #3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189e:	429a      	cmp	r2, r3
 80018a0:	d130      	bne.n	8001904 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	3b01      	subs	r3, #1
 80018ae:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d127      	bne.n	8001904 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018be:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d11f      	bne.n	8001904 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018ce:	2a07      	cmp	r2, #7
 80018d0:	bf14      	ite	ne
 80018d2:	2201      	movne	r2, #1
 80018d4:	2200      	moveq	r2, #0
 80018d6:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018d8:	4293      	cmp	r3, r2
 80018da:	d113      	bne.n	8001904 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e6:	085b      	lsrs	r3, r3, #1
 80018e8:	3b01      	subs	r3, #1
 80018ea:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d109      	bne.n	8001904 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	085b      	lsrs	r3, r3, #1
 80018fc:	3b01      	subs	r3, #1
 80018fe:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001900:	429a      	cmp	r2, r3
 8001902:	d001      	beq.n	8001908 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3720      	adds	r7, #32
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40021000 	.word	0x40021000
 8001918:	f99d808c 	.word	0xf99d808c

0800191c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e0c8      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001930:	4b66      	ldr	r3, [pc, #408]	; (8001acc <HAL_RCC_ClockConfig+0x1b0>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0207 	and.w	r2, r3, #7
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	429a      	cmp	r2, r3
 800193c:	d210      	bcs.n	8001960 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193e:	4963      	ldr	r1, [pc, #396]	; (8001acc <HAL_RCC_ClockConfig+0x1b0>)
 8001940:	4b62      	ldr	r3, [pc, #392]	; (8001acc <HAL_RCC_ClockConfig+0x1b0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f023 0207 	bic.w	r2, r3, #7
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	4313      	orrs	r3, r2
 800194c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800194e:	4b5f      	ldr	r3, [pc, #380]	; (8001acc <HAL_RCC_ClockConfig+0x1b0>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0207 	and.w	r2, r3, #7
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	d001      	beq.n	8001960 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e0b0      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b00      	cmp	r3, #0
 800196a:	d04c      	beq.n	8001a06 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b03      	cmp	r3, #3
 8001972:	d107      	bne.n	8001984 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001974:	4b56      	ldr	r3, [pc, #344]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b4>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d121      	bne.n	80019c4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e09e      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b02      	cmp	r3, #2
 800198a:	d107      	bne.n	800199c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800198c:	4b50      	ldr	r3, [pc, #320]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b4>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d115      	bne.n	80019c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e092      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d107      	bne.n	80019b4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019a4:	4b4a      	ldr	r3, [pc, #296]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b4>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d109      	bne.n	80019c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e086      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019b4:	4b46      	ldr	r3, [pc, #280]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e07e      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019c4:	4942      	ldr	r1, [pc, #264]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b4>)
 80019c6:	4b42      	ldr	r3, [pc, #264]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b4>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f023 0203 	bic.w	r2, r3, #3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019d6:	f7fe fdeb 	bl	80005b0 <HAL_GetTick>
 80019da:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019dc:	e00a      	b.n	80019f4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019de:	f7fe fde7 	bl	80005b0 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e066      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f4:	4b36      	ldr	r3, [pc, #216]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b4>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 020c 	and.w	r2, r3, #12
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d1eb      	bne.n	80019de <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d008      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a12:	492f      	ldr	r1, [pc, #188]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a14:	4b2e      	ldr	r3, [pc, #184]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a24:	4b29      	ldr	r3, [pc, #164]	; (8001acc <HAL_RCC_ClockConfig+0x1b0>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0207 	and.w	r2, r3, #7
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d910      	bls.n	8001a54 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a32:	4926      	ldr	r1, [pc, #152]	; (8001acc <HAL_RCC_ClockConfig+0x1b0>)
 8001a34:	4b25      	ldr	r3, [pc, #148]	; (8001acc <HAL_RCC_ClockConfig+0x1b0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f023 0207 	bic.w	r2, r3, #7
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a42:	4b22      	ldr	r3, [pc, #136]	; (8001acc <HAL_RCC_ClockConfig+0x1b0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0207 	and.w	r2, r3, #7
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d001      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e036      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d008      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a60:	491b      	ldr	r1, [pc, #108]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a62:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d009      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a7e:	4914      	ldr	r1, [pc, #80]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a80:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a92:	f000 f825 	bl	8001ae0 <HAL_RCC_GetSysClockFreq>
 8001a96:	4601      	mov	r1, r0
 8001a98:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	4a0c      	ldr	r2, [pc, #48]	; (8001ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa4:	5cd3      	ldrb	r3, [r2, r3]
 8001aa6:	f003 031f 	and.w	r3, r3, #31
 8001aaa:	fa21 f303 	lsr.w	r3, r1, r3
 8001aae:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <HAL_RCC_ClockConfig+0x1c0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fd2e 	bl	8000518 <HAL_InitTick>
 8001abc:	4603      	mov	r3, r0
 8001abe:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ac0:	7afb      	ldrb	r3, [r7, #11]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40022000 	.word	0x40022000
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	08005eec 	.word	0x08005eec
 8001ad8:	20000008 	.word	0x20000008
 8001adc:	20000000 	.word	0x20000000

08001ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b089      	sub	sp, #36	; 0x24
 8001ae4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
 8001aea:	2300      	movs	r3, #0
 8001aec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aee:	4b3d      	ldr	r3, [pc, #244]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 030c 	and.w	r3, r3, #12
 8001af6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001af8:	4b3a      	ldr	r3, [pc, #232]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	f003 0303 	and.w	r3, r3, #3
 8001b00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d005      	beq.n	8001b14 <HAL_RCC_GetSysClockFreq+0x34>
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	2b0c      	cmp	r3, #12
 8001b0c:	d121      	bne.n	8001b52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d11e      	bne.n	8001b52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b14:	4b33      	ldr	r3, [pc, #204]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0308 	and.w	r3, r3, #8
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d107      	bne.n	8001b30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b20:	4b30      	ldr	r3, [pc, #192]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b26:	0a1b      	lsrs	r3, r3, #8
 8001b28:	f003 030f 	and.w	r3, r3, #15
 8001b2c:	61fb      	str	r3, [r7, #28]
 8001b2e:	e005      	b.n	8001b3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b30:	4b2c      	ldr	r3, [pc, #176]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b3c:	4a2a      	ldr	r2, [pc, #168]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10d      	bne.n	8001b68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b50:	e00a      	b.n	8001b68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	2b04      	cmp	r3, #4
 8001b56:	d102      	bne.n	8001b5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b58:	4b24      	ldr	r3, [pc, #144]	; (8001bec <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b5a:	61bb      	str	r3, [r7, #24]
 8001b5c:	e004      	b.n	8001b68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	2b08      	cmp	r3, #8
 8001b62:	d101      	bne.n	8001b68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b64:	4b22      	ldr	r3, [pc, #136]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	2b0c      	cmp	r3, #12
 8001b6c:	d133      	bne.n	8001bd6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b6e:	4b1d      	ldr	r3, [pc, #116]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d002      	beq.n	8001b84 <HAL_RCC_GetSysClockFreq+0xa4>
 8001b7e:	2b03      	cmp	r3, #3
 8001b80:	d003      	beq.n	8001b8a <HAL_RCC_GetSysClockFreq+0xaa>
 8001b82:	e005      	b.n	8001b90 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b84:	4b19      	ldr	r3, [pc, #100]	; (8001bec <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b86:	617b      	str	r3, [r7, #20]
      break;
 8001b88:	e005      	b.n	8001b96 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b8a:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b8c:	617b      	str	r3, [r7, #20]
      break;
 8001b8e:	e002      	b.n	8001b96 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	617b      	str	r3, [r7, #20]
      break;
 8001b94:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b96:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	091b      	lsrs	r3, r3, #4
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	0a1b      	lsrs	r3, r3, #8
 8001baa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	fb02 f203 	mul.w	r2, r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bba:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bbc:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	0e5b      	lsrs	r3, r3, #25
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001bcc:	697a      	ldr	r2, [r7, #20]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001bd6:	69bb      	ldr	r3, [r7, #24]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3724      	adds	r7, #36	; 0x24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	40021000 	.word	0x40021000
 8001be8:	08005f04 	.word	0x08005f04
 8001bec:	00f42400 	.word	0x00f42400
 8001bf0:	007a1200 	.word	0x007a1200

08001bf4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bf8:	4b03      	ldr	r3, [pc, #12]	; (8001c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	20000008 	.word	0x20000008

08001c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c10:	f7ff fff0 	bl	8001bf4 <HAL_RCC_GetHCLKFreq>
 8001c14:	4601      	mov	r1, r0
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	0a1b      	lsrs	r3, r3, #8
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c22:	5cd3      	ldrb	r3, [r2, r3]
 8001c24:	f003 031f 	and.w	r3, r3, #31
 8001c28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40021000 	.word	0x40021000
 8001c34:	08005efc 	.word	0x08005efc

08001c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c3c:	f7ff ffda 	bl	8001bf4 <HAL_RCC_GetHCLKFreq>
 8001c40:	4601      	mov	r1, r0
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	0adb      	lsrs	r3, r3, #11
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	4a04      	ldr	r2, [pc, #16]	; (8001c60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c4e:	5cd3      	ldrb	r3, [r2, r3]
 8001c50:	f003 031f 	and.w	r3, r3, #31
 8001c54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	08005efc 	.word	0x08005efc

08001c64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c70:	4b2a      	ldr	r3, [pc, #168]	; (8001d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c7c:	f7ff fa3a 	bl	80010f4 <HAL_PWREx_GetVoltageRange>
 8001c80:	6178      	str	r0, [r7, #20]
 8001c82:	e014      	b.n	8001cae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c84:	4a25      	ldr	r2, [pc, #148]	; (8001d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c86:	4b25      	ldr	r3, [pc, #148]	; (8001d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c90:	4b22      	ldr	r3, [pc, #136]	; (8001d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c9c:	f7ff fa2a 	bl	80010f4 <HAL_PWREx_GetVoltageRange>
 8001ca0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ca2:	4a1e      	ldr	r2, [pc, #120]	; (8001d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ca4:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cb4:	d10b      	bne.n	8001cce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b80      	cmp	r3, #128	; 0x80
 8001cba:	d919      	bls.n	8001cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2ba0      	cmp	r3, #160	; 0xa0
 8001cc0:	d902      	bls.n	8001cc8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	e013      	b.n	8001cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cc8:	2301      	movs	r3, #1
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	e010      	b.n	8001cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b80      	cmp	r3, #128	; 0x80
 8001cd2:	d902      	bls.n	8001cda <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	e00a      	b.n	8001cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b80      	cmp	r3, #128	; 0x80
 8001cde:	d102      	bne.n	8001ce6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	e004      	b.n	8001cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b70      	cmp	r3, #112	; 0x70
 8001cea:	d101      	bne.n	8001cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cec:	2301      	movs	r3, #1
 8001cee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001cf0:	490b      	ldr	r1, [pc, #44]	; (8001d20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f023 0207 	bic.w	r2, r3, #7
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d00:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0207 	and.w	r2, r3, #7
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d001      	beq.n	8001d12 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40022000 	.word	0x40022000

08001d24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d30:	2300      	movs	r3, #0
 8001d32:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d03f      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d48:	d01c      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001d4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d4e:	d802      	bhi.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00e      	beq.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001d54:	e01f      	b.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001d56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d5a:	d003      	beq.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001d5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d60:	d01c      	beq.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001d62:	e018      	b.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d64:	4a85      	ldr	r2, [pc, #532]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d66:	4b85      	ldr	r3, [pc, #532]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d70:	e015      	b.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3304      	adds	r3, #4
 8001d76:	2100      	movs	r1, #0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f000 fab9 	bl	80022f0 <RCCEx_PLLSAI1_Config>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d82:	e00c      	b.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3320      	adds	r3, #32
 8001d88:	2100      	movs	r1, #0
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 fba0 	bl	80024d0 <RCCEx_PLLSAI2_Config>
 8001d90:	4603      	mov	r3, r0
 8001d92:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d94:	e003      	b.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	74fb      	strb	r3, [r7, #19]
      break;
 8001d9a:	e000      	b.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001d9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d9e:	7cfb      	ldrb	r3, [r7, #19]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d10b      	bne.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001da4:	4975      	ldr	r1, [pc, #468]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001da6:	4b75      	ldr	r3, [pc, #468]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001db4:	4313      	orrs	r3, r2
 8001db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001dba:	e001      	b.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dbc:	7cfb      	ldrb	r3, [r7, #19]
 8001dbe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d03f      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001dd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dd4:	d01c      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001dd6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dda:	d802      	bhi.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00e      	beq.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001de0:	e01f      	b.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001de2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001de6:	d003      	beq.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001de8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001dec:	d01c      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001dee:	e018      	b.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001df0:	4a62      	ldr	r2, [pc, #392]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001df2:	4b62      	ldr	r3, [pc, #392]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dfa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001dfc:	e015      	b.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	3304      	adds	r3, #4
 8001e02:	2100      	movs	r1, #0
 8001e04:	4618      	mov	r0, r3
 8001e06:	f000 fa73 	bl	80022f0 <RCCEx_PLLSAI1_Config>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e0e:	e00c      	b.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3320      	adds	r3, #32
 8001e14:	2100      	movs	r1, #0
 8001e16:	4618      	mov	r0, r3
 8001e18:	f000 fb5a 	bl	80024d0 <RCCEx_PLLSAI2_Config>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e20:	e003      	b.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	74fb      	strb	r3, [r7, #19]
      break;
 8001e26:	e000      	b.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001e28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e2a:	7cfb      	ldrb	r3, [r7, #19]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10b      	bne.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e30:	4952      	ldr	r1, [pc, #328]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e32:	4b52      	ldr	r3, [pc, #328]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e38:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e40:	4313      	orrs	r3, r2
 8001e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e46:	e001      	b.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e48:	7cfb      	ldrb	r3, [r7, #19]
 8001e4a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 80a0 	beq.w	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e5e:	4b47      	ldr	r3, [pc, #284]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00d      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e74:	4a41      	ldr	r2, [pc, #260]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e76:	4b41      	ldr	r3, [pc, #260]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e7e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e80:	4b3e      	ldr	r3, [pc, #248]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e90:	4a3b      	ldr	r2, [pc, #236]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001e92:	4b3b      	ldr	r3, [pc, #236]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e9c:	f7fe fb88 	bl	80005b0 <HAL_GetTick>
 8001ea0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ea2:	e009      	b.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea4:	f7fe fb84 	bl	80005b0 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d902      	bls.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	74fb      	strb	r3, [r7, #19]
        break;
 8001eb6:	e005      	b.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001eb8:	4b31      	ldr	r3, [pc, #196]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0ef      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001ec4:	7cfb      	ldrb	r3, [r7, #19]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d15c      	bne.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001eca:	4b2c      	ldr	r3, [pc, #176]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ed4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d01f      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d019      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ee8:	4b24      	ldr	r3, [pc, #144]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ef2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ef4:	4a21      	ldr	r2, [pc, #132]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ef6:	4b21      	ldr	r3, [pc, #132]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f04:	4a1d      	ldr	r2, [pc, #116]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f06:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f14:	4a19      	ldr	r2, [pc, #100]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d016      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f26:	f7fe fb43 	bl	80005b0 <HAL_GetTick>
 8001f2a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f2c:	e00b      	b.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f2e:	f7fe fb3f 	bl	80005b0 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d902      	bls.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	74fb      	strb	r3, [r7, #19]
            break;
 8001f44:	e006      	b.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f46:	4b0d      	ldr	r3, [pc, #52]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0ec      	beq.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8001f54:	7cfb      	ldrb	r3, [r7, #19]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10c      	bne.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f5a:	4908      	ldr	r1, [pc, #32]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f5c:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f72:	e009      	b.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f74:	7cfb      	ldrb	r3, [r7, #19]
 8001f76:	74bb      	strb	r3, [r7, #18]
 8001f78:	e006      	b.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8001f7a:	bf00      	nop
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f84:	7cfb      	ldrb	r3, [r7, #19]
 8001f86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f88:	7c7b      	ldrb	r3, [r7, #17]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d105      	bne.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f8e:	4a9e      	ldr	r2, [pc, #632]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f90:	4b9d      	ldr	r3, [pc, #628]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f98:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00a      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fa6:	4998      	ldr	r1, [pc, #608]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fa8:	4b97      	ldr	r3, [pc, #604]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fae:	f023 0203 	bic.w	r2, r3, #3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00a      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fc8:	498f      	ldr	r1, [pc, #572]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fca:	4b8f      	ldr	r3, [pc, #572]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd0:	f023 020c 	bic.w	r2, r3, #12
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00a      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fea:	4987      	ldr	r1, [pc, #540]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fec:	4b86      	ldr	r3, [pc, #536]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00a      	beq.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800200c:	497e      	ldr	r1, [pc, #504]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800200e:	4b7e      	ldr	r3, [pc, #504]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002014:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201c:	4313      	orrs	r3, r2
 800201e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0310 	and.w	r3, r3, #16
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00a      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800202e:	4976      	ldr	r1, [pc, #472]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002030:	4b75      	ldr	r3, [pc, #468]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002036:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800203e:	4313      	orrs	r3, r2
 8002040:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0320 	and.w	r3, r3, #32
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00a      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002050:	496d      	ldr	r1, [pc, #436]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002052:	4b6d      	ldr	r3, [pc, #436]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002058:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002060:	4313      	orrs	r3, r2
 8002062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00a      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002072:	4965      	ldr	r1, [pc, #404]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002074:	4b64      	ldr	r3, [pc, #400]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002082:	4313      	orrs	r3, r2
 8002084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00a      	beq.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002094:	495c      	ldr	r1, [pc, #368]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002096:	4b5c      	ldr	r3, [pc, #368]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020a4:	4313      	orrs	r3, r2
 80020a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00a      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020b6:	4954      	ldr	r1, [pc, #336]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020b8:	4b53      	ldr	r3, [pc, #332]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020c6:	4313      	orrs	r3, r2
 80020c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00a      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020d8:	494b      	ldr	r1, [pc, #300]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020da:	4b4b      	ldr	r3, [pc, #300]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e8:	4313      	orrs	r3, r2
 80020ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00a      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020fa:	4943      	ldr	r1, [pc, #268]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020fc:	4b42      	ldr	r3, [pc, #264]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002102:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210a:	4313      	orrs	r3, r2
 800210c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d028      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800211c:	493a      	ldr	r1, [pc, #232]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800211e:	4b3a      	ldr	r3, [pc, #232]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002124:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800212c:	4313      	orrs	r3, r2
 800212e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002136:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800213a:	d106      	bne.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800213c:	4a32      	ldr	r2, [pc, #200]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800213e:	4b32      	ldr	r3, [pc, #200]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002146:	60d3      	str	r3, [r2, #12]
 8002148:	e011      	b.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800214e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002152:	d10c      	bne.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3304      	adds	r3, #4
 8002158:	2101      	movs	r1, #1
 800215a:	4618      	mov	r0, r3
 800215c:	f000 f8c8 	bl	80022f0 <RCCEx_PLLSAI1_Config>
 8002160:	4603      	mov	r3, r0
 8002162:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002164:	7cfb      	ldrb	r3, [r7, #19]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800216a:	7cfb      	ldrb	r3, [r7, #19]
 800216c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d028      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800217a:	4923      	ldr	r1, [pc, #140]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800217c:	4b22      	ldr	r3, [pc, #136]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800217e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002182:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218a:	4313      	orrs	r3, r2
 800218c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002194:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002198:	d106      	bne.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800219a:	4a1b      	ldr	r2, [pc, #108]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800219c:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021a4:	60d3      	str	r3, [r2, #12]
 80021a6:	e011      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021b0:	d10c      	bne.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3304      	adds	r3, #4
 80021b6:	2101      	movs	r1, #1
 80021b8:	4618      	mov	r0, r3
 80021ba:	f000 f899 	bl	80022f0 <RCCEx_PLLSAI1_Config>
 80021be:	4603      	mov	r3, r0
 80021c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021c2:	7cfb      	ldrb	r3, [r7, #19]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80021c8:	7cfb      	ldrb	r3, [r7, #19]
 80021ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d02b      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021d8:	490b      	ldr	r1, [pc, #44]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021da:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021e8:	4313      	orrs	r3, r2
 80021ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021f6:	d109      	bne.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021f8:	4a03      	ldr	r2, [pc, #12]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021fa:	4b03      	ldr	r3, [pc, #12]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002202:	60d3      	str	r3, [r2, #12]
 8002204:	e014      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002206:	bf00      	nop
 8002208:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002210:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002214:	d10c      	bne.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3304      	adds	r3, #4
 800221a:	2101      	movs	r1, #1
 800221c:	4618      	mov	r0, r3
 800221e:	f000 f867 	bl	80022f0 <RCCEx_PLLSAI1_Config>
 8002222:	4603      	mov	r3, r0
 8002224:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002226:	7cfb      	ldrb	r3, [r7, #19]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800222c:	7cfb      	ldrb	r3, [r7, #19]
 800222e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d02f      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800223c:	492b      	ldr	r1, [pc, #172]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800223e:	4b2b      	ldr	r3, [pc, #172]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002244:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800224c:	4313      	orrs	r3, r2
 800224e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002256:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800225a:	d10d      	bne.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3304      	adds	r3, #4
 8002260:	2102      	movs	r1, #2
 8002262:	4618      	mov	r0, r3
 8002264:	f000 f844 	bl	80022f0 <RCCEx_PLLSAI1_Config>
 8002268:	4603      	mov	r3, r0
 800226a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800226c:	7cfb      	ldrb	r3, [r7, #19]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d014      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002272:	7cfb      	ldrb	r3, [r7, #19]
 8002274:	74bb      	strb	r3, [r7, #18]
 8002276:	e011      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800227c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002280:	d10c      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3320      	adds	r3, #32
 8002286:	2102      	movs	r1, #2
 8002288:	4618      	mov	r0, r3
 800228a:	f000 f921 	bl	80024d0 <RCCEx_PLLSAI2_Config>
 800228e:	4603      	mov	r3, r0
 8002290:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002292:	7cfb      	ldrb	r3, [r7, #19]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002298:	7cfb      	ldrb	r3, [r7, #19]
 800229a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00a      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80022a8:	4910      	ldr	r1, [pc, #64]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022aa:	4b10      	ldr	r3, [pc, #64]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00b      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80022ca:	4908      	ldr	r1, [pc, #32]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022cc:	4b07      	ldr	r3, [pc, #28]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80022e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3718      	adds	r7, #24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40021000 	.word	0x40021000

080022f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80022fa:	2300      	movs	r3, #0
 80022fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80022fe:	4b73      	ldr	r3, [pc, #460]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d018      	beq.n	800233c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800230a:	4b70      	ldr	r3, [pc, #448]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	f003 0203 	and.w	r2, r3, #3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d10d      	bne.n	8002336 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
       ||
 800231e:	2b00      	cmp	r3, #0
 8002320:	d009      	beq.n	8002336 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002322:	4b6a      	ldr	r3, [pc, #424]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	091b      	lsrs	r3, r3, #4
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
       ||
 8002332:	429a      	cmp	r2, r3
 8002334:	d044      	beq.n	80023c0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	73fb      	strb	r3, [r7, #15]
 800233a:	e041      	b.n	80023c0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b02      	cmp	r3, #2
 8002342:	d00c      	beq.n	800235e <RCCEx_PLLSAI1_Config+0x6e>
 8002344:	2b03      	cmp	r3, #3
 8002346:	d013      	beq.n	8002370 <RCCEx_PLLSAI1_Config+0x80>
 8002348:	2b01      	cmp	r3, #1
 800234a:	d120      	bne.n	800238e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800234c:	4b5f      	ldr	r3, [pc, #380]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d11d      	bne.n	8002394 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800235c:	e01a      	b.n	8002394 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800235e:	4b5b      	ldr	r3, [pc, #364]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002366:	2b00      	cmp	r3, #0
 8002368:	d116      	bne.n	8002398 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800236e:	e013      	b.n	8002398 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002370:	4b56      	ldr	r3, [pc, #344]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10f      	bne.n	800239c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800237c:	4b53      	ldr	r3, [pc, #332]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d109      	bne.n	800239c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800238c:	e006      	b.n	800239c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	73fb      	strb	r3, [r7, #15]
      break;
 8002392:	e004      	b.n	800239e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002394:	bf00      	nop
 8002396:	e002      	b.n	800239e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002398:	bf00      	nop
 800239a:	e000      	b.n	800239e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800239c:	bf00      	nop
    }

    if(status == HAL_OK)
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10d      	bne.n	80023c0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023a4:	4849      	ldr	r0, [pc, #292]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80023a6:	4b49      	ldr	r3, [pc, #292]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6819      	ldr	r1, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	430b      	orrs	r3, r1
 80023bc:	4313      	orrs	r3, r2
 80023be:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d17d      	bne.n	80024c2 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80023c6:	4a41      	ldr	r2, [pc, #260]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80023c8:	4b40      	ldr	r3, [pc, #256]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80023d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023d2:	f7fe f8ed 	bl	80005b0 <HAL_GetTick>
 80023d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023d8:	e009      	b.n	80023ee <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023da:	f7fe f8e9 	bl	80005b0 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d902      	bls.n	80023ee <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	73fb      	strb	r3, [r7, #15]
        break;
 80023ec:	e005      	b.n	80023fa <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023ee:	4b37      	ldr	r3, [pc, #220]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1ef      	bne.n	80023da <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d160      	bne.n	80024c2 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d111      	bne.n	800242a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002406:	4831      	ldr	r0, [pc, #196]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002408:	4b30      	ldr	r3, [pc, #192]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	6892      	ldr	r2, [r2, #8]
 8002418:	0211      	lsls	r1, r2, #8
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68d2      	ldr	r2, [r2, #12]
 800241e:	0912      	lsrs	r2, r2, #4
 8002420:	0452      	lsls	r2, r2, #17
 8002422:	430a      	orrs	r2, r1
 8002424:	4313      	orrs	r3, r2
 8002426:	6103      	str	r3, [r0, #16]
 8002428:	e027      	b.n	800247a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d112      	bne.n	8002456 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002430:	4826      	ldr	r0, [pc, #152]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002432:	4b26      	ldr	r3, [pc, #152]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800243a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6892      	ldr	r2, [r2, #8]
 8002442:	0211      	lsls	r1, r2, #8
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6912      	ldr	r2, [r2, #16]
 8002448:	0852      	lsrs	r2, r2, #1
 800244a:	3a01      	subs	r2, #1
 800244c:	0552      	lsls	r2, r2, #21
 800244e:	430a      	orrs	r2, r1
 8002450:	4313      	orrs	r3, r2
 8002452:	6103      	str	r3, [r0, #16]
 8002454:	e011      	b.n	800247a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002456:	481d      	ldr	r0, [pc, #116]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002458:	4b1c      	ldr	r3, [pc, #112]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002460:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6892      	ldr	r2, [r2, #8]
 8002468:	0211      	lsls	r1, r2, #8
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6952      	ldr	r2, [r2, #20]
 800246e:	0852      	lsrs	r2, r2, #1
 8002470:	3a01      	subs	r2, #1
 8002472:	0652      	lsls	r2, r2, #25
 8002474:	430a      	orrs	r2, r1
 8002476:	4313      	orrs	r3, r2
 8002478:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800247a:	4a14      	ldr	r2, [pc, #80]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 800247c:	4b13      	ldr	r3, [pc, #76]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002484:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002486:	f7fe f893 	bl	80005b0 <HAL_GetTick>
 800248a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800248c:	e009      	b.n	80024a2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800248e:	f7fe f88f 	bl	80005b0 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d902      	bls.n	80024a2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	73fb      	strb	r3, [r7, #15]
          break;
 80024a0:	e005      	b.n	80024ae <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024a2:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0ef      	beq.n	800248e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d106      	bne.n	80024c2 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80024b4:	4905      	ldr	r1, [pc, #20]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80024b6:	4b05      	ldr	r3, [pc, #20]	; (80024cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80024b8:	691a      	ldr	r2, [r3, #16]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	4313      	orrs	r3, r2
 80024c0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40021000 	.word	0x40021000

080024d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024de:	4b68      	ldr	r3, [pc, #416]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d018      	beq.n	800251c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80024ea:	4b65      	ldr	r3, [pc, #404]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	f003 0203 	and.w	r2, r3, #3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d10d      	bne.n	8002516 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
       ||
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d009      	beq.n	8002516 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002502:	4b5f      	ldr	r3, [pc, #380]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	091b      	lsrs	r3, r3, #4
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
       ||
 8002512:	429a      	cmp	r2, r3
 8002514:	d044      	beq.n	80025a0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	73fb      	strb	r3, [r7, #15]
 800251a:	e041      	b.n	80025a0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b02      	cmp	r3, #2
 8002522:	d00c      	beq.n	800253e <RCCEx_PLLSAI2_Config+0x6e>
 8002524:	2b03      	cmp	r3, #3
 8002526:	d013      	beq.n	8002550 <RCCEx_PLLSAI2_Config+0x80>
 8002528:	2b01      	cmp	r3, #1
 800252a:	d120      	bne.n	800256e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800252c:	4b54      	ldr	r3, [pc, #336]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d11d      	bne.n	8002574 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800253c:	e01a      	b.n	8002574 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800253e:	4b50      	ldr	r3, [pc, #320]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002546:	2b00      	cmp	r3, #0
 8002548:	d116      	bne.n	8002578 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800254e:	e013      	b.n	8002578 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002550:	4b4b      	ldr	r3, [pc, #300]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10f      	bne.n	800257c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800255c:	4b48      	ldr	r3, [pc, #288]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d109      	bne.n	800257c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800256c:	e006      	b.n	800257c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	73fb      	strb	r3, [r7, #15]
      break;
 8002572:	e004      	b.n	800257e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002574:	bf00      	nop
 8002576:	e002      	b.n	800257e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002578:	bf00      	nop
 800257a:	e000      	b.n	800257e <RCCEx_PLLSAI2_Config+0xae>
      break;
 800257c:	bf00      	nop
    }

    if(status == HAL_OK)
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10d      	bne.n	80025a0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002584:	483e      	ldr	r0, [pc, #248]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002586:	4b3e      	ldr	r3, [pc, #248]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6819      	ldr	r1, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	3b01      	subs	r3, #1
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	430b      	orrs	r3, r1
 800259c:	4313      	orrs	r3, r2
 800259e:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d167      	bne.n	8002676 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80025a6:	4a36      	ldr	r2, [pc, #216]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025a8:	4b35      	ldr	r3, [pc, #212]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025b2:	f7fd fffd 	bl	80005b0 <HAL_GetTick>
 80025b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025b8:	e009      	b.n	80025ce <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80025ba:	f7fd fff9 	bl	80005b0 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d902      	bls.n	80025ce <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	73fb      	strb	r3, [r7, #15]
        break;
 80025cc:	e005      	b.n	80025da <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025ce:	4b2c      	ldr	r3, [pc, #176]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1ef      	bne.n	80025ba <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d14a      	bne.n	8002676 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d111      	bne.n	800260a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80025e6:	4826      	ldr	r0, [pc, #152]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025e8:	4b25      	ldr	r3, [pc, #148]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80025f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6892      	ldr	r2, [r2, #8]
 80025f8:	0211      	lsls	r1, r2, #8
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	68d2      	ldr	r2, [r2, #12]
 80025fe:	0912      	lsrs	r2, r2, #4
 8002600:	0452      	lsls	r2, r2, #17
 8002602:	430a      	orrs	r2, r1
 8002604:	4313      	orrs	r3, r2
 8002606:	6143      	str	r3, [r0, #20]
 8002608:	e011      	b.n	800262e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800260a:	481d      	ldr	r0, [pc, #116]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 800260c:	4b1c      	ldr	r3, [pc, #112]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002614:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6892      	ldr	r2, [r2, #8]
 800261c:	0211      	lsls	r1, r2, #8
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6912      	ldr	r2, [r2, #16]
 8002622:	0852      	lsrs	r2, r2, #1
 8002624:	3a01      	subs	r2, #1
 8002626:	0652      	lsls	r2, r2, #25
 8002628:	430a      	orrs	r2, r1
 800262a:	4313      	orrs	r3, r2
 800262c:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800262e:	4a14      	ldr	r2, [pc, #80]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002630:	4b13      	ldr	r3, [pc, #76]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002638:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263a:	f7fd ffb9 	bl	80005b0 <HAL_GetTick>
 800263e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002640:	e009      	b.n	8002656 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002642:	f7fd ffb5 	bl	80005b0 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d902      	bls.n	8002656 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	73fb      	strb	r3, [r7, #15]
          break;
 8002654:	e005      	b.n	8002662 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002656:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0ef      	beq.n	8002642 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002662:	7bfb      	ldrb	r3, [r7, #15]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d106      	bne.n	8002676 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002668:	4905      	ldr	r1, [pc, #20]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 800266a:	4b05      	ldr	r3, [pc, #20]	; (8002680 <RCCEx_PLLSAI2_Config+0x1b0>)
 800266c:	695a      	ldr	r2, [r3, #20]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	4313      	orrs	r3, r2
 8002674:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002676:	7bfb      	ldrb	r3, [r7, #15]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40021000 	.word	0x40021000

08002684 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e01d      	b.n	80026d2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d106      	bne.n	80026b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f003 f9a6 	bl	80059fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2202      	movs	r2, #2
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3304      	adds	r3, #4
 80026c0:	4619      	mov	r1, r3
 80026c2:	4610      	mov	r0, r2
 80026c4:	f000 fcf8 	bl	80030b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2202      	movs	r2, #2
 80026e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6a1a      	ldr	r2, [r3, #32]
 80026f0:	f241 1311 	movw	r3, #4369	; 0x1111
 80026f4:	4013      	ands	r3, r2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10f      	bne.n	800271a <HAL_TIM_Base_Stop+0x40>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6a1a      	ldr	r2, [r3, #32]
 8002700:	f240 4344 	movw	r3, #1092	; 0x444
 8002704:	4013      	ands	r3, r2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d107      	bne.n	800271a <HAL_TIM_Base_Stop+0x40>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	6812      	ldr	r2, [r2, #0]
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	f022 0201 	bic.w	r2, r2, #1
 8002718:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6812      	ldr	r2, [r2, #0]
 8002740:	68d2      	ldr	r2, [r2, #12]
 8002742:	f042 0201 	orr.w	r2, r2, #1
 8002746:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <HAL_TIM_Base_Start_IT+0x50>)
 8002750:	4013      	ands	r3, r2
 8002752:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2b06      	cmp	r3, #6
 8002758:	d00b      	beq.n	8002772 <HAL_TIM_Base_Start_IT+0x42>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002760:	d007      	beq.n	8002772 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6812      	ldr	r2, [r2, #0]
 800276a:	6812      	ldr	r2, [r2, #0]
 800276c:	f042 0201 	orr.w	r2, r2, #1
 8002770:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	00010007 	.word	0x00010007

08002784 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6812      	ldr	r2, [r2, #0]
 8002794:	68d2      	ldr	r2, [r2, #12]
 8002796:	f022 0201 	bic.w	r2, r2, #1
 800279a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6a1a      	ldr	r2, [r3, #32]
 80027a2:	f241 1311 	movw	r3, #4369	; 0x1111
 80027a6:	4013      	ands	r3, r2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10f      	bne.n	80027cc <HAL_TIM_Base_Stop_IT+0x48>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6a1a      	ldr	r2, [r3, #32]
 80027b2:	f240 4344 	movw	r3, #1092	; 0x444
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d107      	bne.n	80027cc <HAL_TIM_Base_Stop_IT+0x48>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	6812      	ldr	r2, [r2, #0]
 80027c6:	f022 0201 	bic.w	r2, r2, #1
 80027ca:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e01d      	b.n	8002828 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d106      	bne.n	8002806 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f815 	bl	8002830 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2202      	movs	r2, #2
 800280a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3304      	adds	r3, #4
 8002816:	4619      	mov	r1, r3
 8002818:	4610      	mov	r0, r2
 800281a:	f000 fc4d 	bl	80030b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	2b0c      	cmp	r3, #12
 8002852:	d841      	bhi.n	80028d8 <HAL_TIM_OC_Start_IT+0x94>
 8002854:	a201      	add	r2, pc, #4	; (adr r2, 800285c <HAL_TIM_OC_Start_IT+0x18>)
 8002856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800285a:	bf00      	nop
 800285c:	08002891 	.word	0x08002891
 8002860:	080028d9 	.word	0x080028d9
 8002864:	080028d9 	.word	0x080028d9
 8002868:	080028d9 	.word	0x080028d9
 800286c:	080028a3 	.word	0x080028a3
 8002870:	080028d9 	.word	0x080028d9
 8002874:	080028d9 	.word	0x080028d9
 8002878:	080028d9 	.word	0x080028d9
 800287c:	080028b5 	.word	0x080028b5
 8002880:	080028d9 	.word	0x080028d9
 8002884:	080028d9 	.word	0x080028d9
 8002888:	080028d9 	.word	0x080028d9
 800288c:	080028c7 	.word	0x080028c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6812      	ldr	r2, [r2, #0]
 8002898:	68d2      	ldr	r2, [r2, #12]
 800289a:	f042 0202 	orr.w	r2, r2, #2
 800289e:	60da      	str	r2, [r3, #12]
      break;
 80028a0:	e01b      	b.n	80028da <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	68d2      	ldr	r2, [r2, #12]
 80028ac:	f042 0204 	orr.w	r2, r2, #4
 80028b0:	60da      	str	r2, [r3, #12]
      break;
 80028b2:	e012      	b.n	80028da <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	68d2      	ldr	r2, [r2, #12]
 80028be:	f042 0208 	orr.w	r2, r2, #8
 80028c2:	60da      	str	r2, [r3, #12]
      break;
 80028c4:	e009      	b.n	80028da <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6812      	ldr	r2, [r2, #0]
 80028ce:	68d2      	ldr	r2, [r2, #12]
 80028d0:	f042 0210 	orr.w	r2, r2, #16
 80028d4:	60da      	str	r2, [r3, #12]
      break;
 80028d6:	e000      	b.n	80028da <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 80028d8:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2201      	movs	r2, #1
 80028e0:	6839      	ldr	r1, [r7, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f001 f99e 	bl	8003c24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a1e      	ldr	r2, [pc, #120]	; (8002968 <HAL_TIM_OC_Start_IT+0x124>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d013      	beq.n	800291a <HAL_TIM_OC_Start_IT+0xd6>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a1d      	ldr	r2, [pc, #116]	; (800296c <HAL_TIM_OC_Start_IT+0x128>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d00e      	beq.n	800291a <HAL_TIM_OC_Start_IT+0xd6>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a1b      	ldr	r2, [pc, #108]	; (8002970 <HAL_TIM_OC_Start_IT+0x12c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d009      	beq.n	800291a <HAL_TIM_OC_Start_IT+0xd6>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a1a      	ldr	r2, [pc, #104]	; (8002974 <HAL_TIM_OC_Start_IT+0x130>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d004      	beq.n	800291a <HAL_TIM_OC_Start_IT+0xd6>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a18      	ldr	r2, [pc, #96]	; (8002978 <HAL_TIM_OC_Start_IT+0x134>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d101      	bne.n	800291e <HAL_TIM_OC_Start_IT+0xda>
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <HAL_TIM_OC_Start_IT+0xdc>
 800291e:	2300      	movs	r3, #0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d007      	beq.n	8002934 <HAL_TIM_OC_Start_IT+0xf0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800292e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002932:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	4b10      	ldr	r3, [pc, #64]	; (800297c <HAL_TIM_OC_Start_IT+0x138>)
 800293c:	4013      	ands	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2b06      	cmp	r3, #6
 8002944:	d00b      	beq.n	800295e <HAL_TIM_OC_Start_IT+0x11a>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800294c:	d007      	beq.n	800295e <HAL_TIM_OC_Start_IT+0x11a>
  {
    __HAL_TIM_ENABLE(htim);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6812      	ldr	r2, [r2, #0]
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	f042 0201 	orr.w	r2, r2, #1
 800295c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40012c00 	.word	0x40012c00
 800296c:	40013400 	.word	0x40013400
 8002970:	40014000 	.word	0x40014000
 8002974:	40014400 	.word	0x40014400
 8002978:	40014800 	.word	0x40014800
 800297c:	00010007 	.word	0x00010007

08002980 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e01d      	b.n	80029ce <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d106      	bne.n	80029ac <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f815 	bl	80029d6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3304      	adds	r3, #4
 80029bc:	4619      	mov	r1, r3
 80029be:	4610      	mov	r0, r2
 80029c0:	f000 fb7a 	bl	80030b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d122      	bne.n	8002a46 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d11b      	bne.n	8002a46 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f06f 0202 	mvn.w	r2, #2
 8002a16:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	f003 0303 	and.w	r3, r3, #3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 fb24 	bl	800307a <HAL_TIM_IC_CaptureCallback>
 8002a32:	e005      	b.n	8002a40 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 fb16 	bl	8003066 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 fb27 	bl	800308e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d122      	bne.n	8002a9a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d11b      	bne.n	8002a9a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f06f 0204 	mvn.w	r2, #4
 8002a6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 fafa 	bl	800307a <HAL_TIM_IC_CaptureCallback>
 8002a86:	e005      	b.n	8002a94 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 faec 	bl	8003066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 fafd 	bl	800308e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d122      	bne.n	8002aee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	2b08      	cmp	r3, #8
 8002ab4:	d11b      	bne.n	8002aee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f06f 0208 	mvn.w	r2, #8
 8002abe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2204      	movs	r2, #4
 8002ac4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 fad0 	bl	800307a <HAL_TIM_IC_CaptureCallback>
 8002ada:	e005      	b.n	8002ae8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 fac2 	bl	8003066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 fad3 	bl	800308e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	2b10      	cmp	r3, #16
 8002afa:	d122      	bne.n	8002b42 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f003 0310 	and.w	r3, r3, #16
 8002b06:	2b10      	cmp	r3, #16
 8002b08:	d11b      	bne.n	8002b42 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f06f 0210 	mvn.w	r2, #16
 8002b12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2208      	movs	r2, #8
 8002b18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 faa6 	bl	800307a <HAL_TIM_IC_CaptureCallback>
 8002b2e:	e005      	b.n	8002b3c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 fa98 	bl	8003066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 faa9 	bl	800308e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d10e      	bne.n	8002b6e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d107      	bne.n	8002b6e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f06f 0201 	mvn.w	r2, #1
 8002b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 fa72 	bl	8003052 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b78:	2b80      	cmp	r3, #128	; 0x80
 8002b7a:	d10e      	bne.n	8002b9a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b86:	2b80      	cmp	r3, #128	; 0x80
 8002b88:	d107      	bne.n	8002b9a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f001 f8d1 	bl	8003d3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ba8:	d10e      	bne.n	8002bc8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb4:	2b80      	cmp	r3, #128	; 0x80
 8002bb6:	d107      	bne.n	8002bc8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f001 f8c4 	bl	8003d50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd2:	2b40      	cmp	r3, #64	; 0x40
 8002bd4:	d10e      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be0:	2b40      	cmp	r3, #64	; 0x40
 8002be2:	d107      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 fa57 	bl	80030a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f003 0320 	and.w	r3, r3, #32
 8002bfe:	2b20      	cmp	r3, #32
 8002c00:	d10e      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f003 0320 	and.w	r3, r3, #32
 8002c0c:	2b20      	cmp	r3, #32
 8002c0e:	d107      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f06f 0220 	mvn.w	r2, #32
 8002c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f001 f884 	bl	8003d28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c20:	bf00      	nop
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_TIM_OC_ConfigChannel+0x1a>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e06c      	b.n	8002d1c <HAL_TIM_OC_ConfigChannel+0xf4>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b14      	cmp	r3, #20
 8002c56:	d857      	bhi.n	8002d08 <HAL_TIM_OC_ConfigChannel+0xe0>
 8002c58:	a201      	add	r2, pc, #4	; (adr r2, 8002c60 <HAL_TIM_OC_ConfigChannel+0x38>)
 8002c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5e:	bf00      	nop
 8002c60:	08002cb5 	.word	0x08002cb5
 8002c64:	08002d09 	.word	0x08002d09
 8002c68:	08002d09 	.word	0x08002d09
 8002c6c:	08002d09 	.word	0x08002d09
 8002c70:	08002cc3 	.word	0x08002cc3
 8002c74:	08002d09 	.word	0x08002d09
 8002c78:	08002d09 	.word	0x08002d09
 8002c7c:	08002d09 	.word	0x08002d09
 8002c80:	08002cd1 	.word	0x08002cd1
 8002c84:	08002d09 	.word	0x08002d09
 8002c88:	08002d09 	.word	0x08002d09
 8002c8c:	08002d09 	.word	0x08002d09
 8002c90:	08002cdf 	.word	0x08002cdf
 8002c94:	08002d09 	.word	0x08002d09
 8002c98:	08002d09 	.word	0x08002d09
 8002c9c:	08002d09 	.word	0x08002d09
 8002ca0:	08002ced 	.word	0x08002ced
 8002ca4:	08002d09 	.word	0x08002d09
 8002ca8:	08002d09 	.word	0x08002d09
 8002cac:	08002d09 	.word	0x08002d09
 8002cb0:	08002cfb 	.word	0x08002cfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68b9      	ldr	r1, [r7, #8]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 fa96 	bl	80031ec <TIM_OC1_SetConfig>
      break;
 8002cc0:	e023      	b.n	8002d0a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68b9      	ldr	r1, [r7, #8]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f000 fb1f 	bl	800330c <TIM_OC2_SetConfig>
      break;
 8002cce:	e01c      	b.n	8002d0a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68b9      	ldr	r1, [r7, #8]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 fba2 	bl	8003420 <TIM_OC3_SetConfig>
      break;
 8002cdc:	e015      	b.n	8002d0a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68b9      	ldr	r1, [r7, #8]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f000 fc23 	bl	8003530 <TIM_OC4_SetConfig>
      break;
 8002cea:	e00e      	b.n	8002d0a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 fc86 	bl	8003604 <TIM_OC5_SetConfig>
      break;
 8002cf8:	e007      	b.n	8002d0a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68b9      	ldr	r1, [r7, #8]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 fce3 	bl	80036cc <TIM_OC6_SetConfig>
      break;
 8002d06:	e000      	b.n	8002d0a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      break;
 8002d08:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d101      	bne.n	8002d3e <HAL_TIM_IC_ConfigChannel+0x1a>
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	e08a      	b.n	8002e54 <HAL_TIM_IC_ConfigChannel+0x130>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2202      	movs	r2, #2
 8002d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d11b      	bne.n	8002d8c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6818      	ldr	r0, [r3, #0]
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	6819      	ldr	r1, [r3, #0]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f000 fda0 	bl	80038a8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	6812      	ldr	r2, [r2, #0]
 8002d70:	6992      	ldr	r2, [r2, #24]
 8002d72:	f022 020c 	bic.w	r2, r2, #12
 8002d76:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	6812      	ldr	r2, [r2, #0]
 8002d80:	6991      	ldr	r1, [r2, #24]
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	6892      	ldr	r2, [r2, #8]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	619a      	str	r2, [r3, #24]
 8002d8a:	e05a      	b.n	8002e42 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d11c      	bne.n	8002dcc <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6818      	ldr	r0, [r3, #0]
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	6819      	ldr	r1, [r3, #0]
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f000 fe1e 	bl	80039e2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	6812      	ldr	r2, [r2, #0]
 8002dae:	6992      	ldr	r2, [r2, #24]
 8002db0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002db4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	6812      	ldr	r2, [r2, #0]
 8002dbe:	6991      	ldr	r1, [r2, #24]
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	6892      	ldr	r2, [r2, #8]
 8002dc4:	0212      	lsls	r2, r2, #8
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	619a      	str	r2, [r3, #24]
 8002dca:	e03a      	b.n	8002e42 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d11b      	bne.n	8002e0a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6818      	ldr	r0, [r3, #0]
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	6819      	ldr	r1, [r3, #0]
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f000 fe6b 	bl	8003abc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	6812      	ldr	r2, [r2, #0]
 8002dee:	69d2      	ldr	r2, [r2, #28]
 8002df0:	f022 020c 	bic.w	r2, r2, #12
 8002df4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	6812      	ldr	r2, [r2, #0]
 8002dfe:	69d1      	ldr	r1, [r2, #28]
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	6892      	ldr	r2, [r2, #8]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	61da      	str	r2, [r3, #28]
 8002e08:	e01b      	b.n	8002e42 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	6819      	ldr	r1, [r3, #0]
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f000 fe8b 	bl	8003b34 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	6812      	ldr	r2, [r2, #0]
 8002e26:	69d2      	ldr	r2, [r2, #28]
 8002e28:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002e2c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	6812      	ldr	r2, [r2, #0]
 8002e36:	69d1      	ldr	r1, [r2, #28]
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	6892      	ldr	r2, [r2, #8]
 8002e3c:	0212      	lsls	r2, r2, #8
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <HAL_TIM_ConfigClockSource+0x18>
 8002e70:	2302      	movs	r3, #2
 8002e72:	e0a8      	b.n	8002fc6 <HAL_TIM_ConfigClockSource+0x16a>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e9e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b40      	cmp	r3, #64	; 0x40
 8002eae:	d067      	beq.n	8002f80 <HAL_TIM_ConfigClockSource+0x124>
 8002eb0:	2b40      	cmp	r3, #64	; 0x40
 8002eb2:	d80b      	bhi.n	8002ecc <HAL_TIM_ConfigClockSource+0x70>
 8002eb4:	2b10      	cmp	r3, #16
 8002eb6:	d073      	beq.n	8002fa0 <HAL_TIM_ConfigClockSource+0x144>
 8002eb8:	2b10      	cmp	r3, #16
 8002eba:	d802      	bhi.n	8002ec2 <HAL_TIM_ConfigClockSource+0x66>
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d06f      	beq.n	8002fa0 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002ec0:	e078      	b.n	8002fb4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002ec2:	2b20      	cmp	r3, #32
 8002ec4:	d06c      	beq.n	8002fa0 <HAL_TIM_ConfigClockSource+0x144>
 8002ec6:	2b30      	cmp	r3, #48	; 0x30
 8002ec8:	d06a      	beq.n	8002fa0 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002eca:	e073      	b.n	8002fb4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002ecc:	2b70      	cmp	r3, #112	; 0x70
 8002ece:	d00d      	beq.n	8002eec <HAL_TIM_ConfigClockSource+0x90>
 8002ed0:	2b70      	cmp	r3, #112	; 0x70
 8002ed2:	d804      	bhi.n	8002ede <HAL_TIM_ConfigClockSource+0x82>
 8002ed4:	2b50      	cmp	r3, #80	; 0x50
 8002ed6:	d033      	beq.n	8002f40 <HAL_TIM_ConfigClockSource+0xe4>
 8002ed8:	2b60      	cmp	r3, #96	; 0x60
 8002eda:	d041      	beq.n	8002f60 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002edc:	e06a      	b.n	8002fb4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee2:	d066      	beq.n	8002fb2 <HAL_TIM_ConfigClockSource+0x156>
 8002ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ee8:	d017      	beq.n	8002f1a <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002eea:	e063      	b.n	8002fb4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6818      	ldr	r0, [r3, #0]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	6899      	ldr	r1, [r3, #8]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f000 fe72 	bl	8003be4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f0e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	609a      	str	r2, [r3, #8]
      break;
 8002f18:	e04c      	b.n	8002fb4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6818      	ldr	r0, [r3, #0]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	6899      	ldr	r1, [r3, #8]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f000 fe5b 	bl	8003be4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6812      	ldr	r2, [r2, #0]
 8002f36:	6892      	ldr	r2, [r2, #8]
 8002f38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f3c:	609a      	str	r2, [r3, #8]
      break;
 8002f3e:	e039      	b.n	8002fb4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6818      	ldr	r0, [r3, #0]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	6859      	ldr	r1, [r3, #4]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	f000 fd19 	bl	8003984 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2150      	movs	r1, #80	; 0x50
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 fe28 	bl	8003bae <TIM_ITRx_SetConfig>
      break;
 8002f5e:	e029      	b.n	8002fb4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6818      	ldr	r0, [r3, #0]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	6859      	ldr	r1, [r3, #4]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	f000 fd75 	bl	8003a5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2160      	movs	r1, #96	; 0x60
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 fe18 	bl	8003bae <TIM_ITRx_SetConfig>
      break;
 8002f7e:	e019      	b.n	8002fb4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6818      	ldr	r0, [r3, #0]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	6859      	ldr	r1, [r3, #4]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	f000 fcf9 	bl	8003984 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2140      	movs	r1, #64	; 0x40
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 fe08 	bl	8003bae <TIM_ITRx_SetConfig>
      break;
 8002f9e:	e009      	b.n	8002fb4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4610      	mov	r0, r2
 8002fac:	f000 fdff 	bl	8003bae <TIM_ITRx_SetConfig>
      break;
 8002fb0:	e000      	b.n	8002fb4 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002fb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b082      	sub	sp, #8
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d101      	bne.n	8002fe6 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	e031      	b.n	800304a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002ff6:	6839      	ldr	r1, [r7, #0]
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 fbcd 	bl	8003798 <TIM_SlaveTimer_SetConfig>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d009      	beq.n	8003018 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e018      	b.n	800304a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6812      	ldr	r2, [r2, #0]
 8003020:	68d2      	ldr	r2, [r2, #12]
 8003022:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003026:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6812      	ldr	r2, [r2, #0]
 8003030:	68d2      	ldr	r2, [r2, #12]
 8003032:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003036:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003066:	b480      	push	{r7}
 8003068:	b083      	sub	sp, #12
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800308e:	b480      	push	{r7}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
	...

080030b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a40      	ldr	r2, [pc, #256]	; (80031cc <TIM_Base_SetConfig+0x114>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d013      	beq.n	80030f8 <TIM_Base_SetConfig+0x40>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d6:	d00f      	beq.n	80030f8 <TIM_Base_SetConfig+0x40>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a3d      	ldr	r2, [pc, #244]	; (80031d0 <TIM_Base_SetConfig+0x118>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d00b      	beq.n	80030f8 <TIM_Base_SetConfig+0x40>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a3c      	ldr	r2, [pc, #240]	; (80031d4 <TIM_Base_SetConfig+0x11c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d007      	beq.n	80030f8 <TIM_Base_SetConfig+0x40>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a3b      	ldr	r2, [pc, #236]	; (80031d8 <TIM_Base_SetConfig+0x120>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d003      	beq.n	80030f8 <TIM_Base_SetConfig+0x40>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a3a      	ldr	r2, [pc, #232]	; (80031dc <TIM_Base_SetConfig+0x124>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d108      	bne.n	800310a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	4313      	orrs	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a2f      	ldr	r2, [pc, #188]	; (80031cc <TIM_Base_SetConfig+0x114>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d01f      	beq.n	8003152 <TIM_Base_SetConfig+0x9a>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003118:	d01b      	beq.n	8003152 <TIM_Base_SetConfig+0x9a>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a2c      	ldr	r2, [pc, #176]	; (80031d0 <TIM_Base_SetConfig+0x118>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d017      	beq.n	8003152 <TIM_Base_SetConfig+0x9a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a2b      	ldr	r2, [pc, #172]	; (80031d4 <TIM_Base_SetConfig+0x11c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d013      	beq.n	8003152 <TIM_Base_SetConfig+0x9a>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a2a      	ldr	r2, [pc, #168]	; (80031d8 <TIM_Base_SetConfig+0x120>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d00f      	beq.n	8003152 <TIM_Base_SetConfig+0x9a>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a29      	ldr	r2, [pc, #164]	; (80031dc <TIM_Base_SetConfig+0x124>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d00b      	beq.n	8003152 <TIM_Base_SetConfig+0x9a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a28      	ldr	r2, [pc, #160]	; (80031e0 <TIM_Base_SetConfig+0x128>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d007      	beq.n	8003152 <TIM_Base_SetConfig+0x9a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a27      	ldr	r2, [pc, #156]	; (80031e4 <TIM_Base_SetConfig+0x12c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d003      	beq.n	8003152 <TIM_Base_SetConfig+0x9a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a26      	ldr	r2, [pc, #152]	; (80031e8 <TIM_Base_SetConfig+0x130>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d108      	bne.n	8003164 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	4313      	orrs	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	4313      	orrs	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a10      	ldr	r2, [pc, #64]	; (80031cc <TIM_Base_SetConfig+0x114>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d00f      	beq.n	80031b0 <TIM_Base_SetConfig+0xf8>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a12      	ldr	r2, [pc, #72]	; (80031dc <TIM_Base_SetConfig+0x124>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d00b      	beq.n	80031b0 <TIM_Base_SetConfig+0xf8>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a11      	ldr	r2, [pc, #68]	; (80031e0 <TIM_Base_SetConfig+0x128>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d007      	beq.n	80031b0 <TIM_Base_SetConfig+0xf8>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a10      	ldr	r2, [pc, #64]	; (80031e4 <TIM_Base_SetConfig+0x12c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d003      	beq.n	80031b0 <TIM_Base_SetConfig+0xf8>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a0f      	ldr	r2, [pc, #60]	; (80031e8 <TIM_Base_SetConfig+0x130>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d103      	bne.n	80031b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	615a      	str	r2, [r3, #20]
}
 80031be:	bf00      	nop
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	40012c00 	.word	0x40012c00
 80031d0:	40000400 	.word	0x40000400
 80031d4:	40000800 	.word	0x40000800
 80031d8:	40000c00 	.word	0x40000c00
 80031dc:	40013400 	.word	0x40013400
 80031e0:	40014000 	.word	0x40014000
 80031e4:	40014400 	.word	0x40014400
 80031e8:	40014800 	.word	0x40014800

080031ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b087      	sub	sp, #28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	f023 0201 	bic.w	r2, r3, #1
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800321a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800321e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f023 0303 	bic.w	r3, r3, #3
 8003226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	4313      	orrs	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f023 0302 	bic.w	r3, r3, #2
 8003238:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	4313      	orrs	r3, r2
 8003242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a2c      	ldr	r2, [pc, #176]	; (80032f8 <TIM_OC1_SetConfig+0x10c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d00f      	beq.n	800326c <TIM_OC1_SetConfig+0x80>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a2b      	ldr	r2, [pc, #172]	; (80032fc <TIM_OC1_SetConfig+0x110>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d00b      	beq.n	800326c <TIM_OC1_SetConfig+0x80>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a2a      	ldr	r2, [pc, #168]	; (8003300 <TIM_OC1_SetConfig+0x114>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d007      	beq.n	800326c <TIM_OC1_SetConfig+0x80>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a29      	ldr	r2, [pc, #164]	; (8003304 <TIM_OC1_SetConfig+0x118>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d003      	beq.n	800326c <TIM_OC1_SetConfig+0x80>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a28      	ldr	r2, [pc, #160]	; (8003308 <TIM_OC1_SetConfig+0x11c>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d10c      	bne.n	8003286 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f023 0308 	bic.w	r3, r3, #8
 8003272:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	4313      	orrs	r3, r2
 800327c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f023 0304 	bic.w	r3, r3, #4
 8003284:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a1b      	ldr	r2, [pc, #108]	; (80032f8 <TIM_OC1_SetConfig+0x10c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d00f      	beq.n	80032ae <TIM_OC1_SetConfig+0xc2>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a1a      	ldr	r2, [pc, #104]	; (80032fc <TIM_OC1_SetConfig+0x110>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d00b      	beq.n	80032ae <TIM_OC1_SetConfig+0xc2>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a19      	ldr	r2, [pc, #100]	; (8003300 <TIM_OC1_SetConfig+0x114>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d007      	beq.n	80032ae <TIM_OC1_SetConfig+0xc2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a18      	ldr	r2, [pc, #96]	; (8003304 <TIM_OC1_SetConfig+0x118>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d003      	beq.n	80032ae <TIM_OC1_SetConfig+0xc2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a17      	ldr	r2, [pc, #92]	; (8003308 <TIM_OC1_SetConfig+0x11c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d111      	bne.n	80032d2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	621a      	str	r2, [r3, #32]
}
 80032ec:	bf00      	nop
 80032ee:	371c      	adds	r7, #28
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	40012c00 	.word	0x40012c00
 80032fc:	40013400 	.word	0x40013400
 8003300:	40014000 	.word	0x40014000
 8003304:	40014400 	.word	0x40014400
 8003308:	40014800 	.word	0x40014800

0800330c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800330c:	b480      	push	{r7}
 800330e:	b087      	sub	sp, #28
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	f023 0210 	bic.w	r2, r3, #16
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800333a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800333e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003346:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	021b      	lsls	r3, r3, #8
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	4313      	orrs	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f023 0320 	bic.w	r3, r3, #32
 800335a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	4313      	orrs	r3, r2
 8003366:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a28      	ldr	r2, [pc, #160]	; (800340c <TIM_OC2_SetConfig+0x100>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d003      	beq.n	8003378 <TIM_OC2_SetConfig+0x6c>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a27      	ldr	r2, [pc, #156]	; (8003410 <TIM_OC2_SetConfig+0x104>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d10d      	bne.n	8003394 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800337e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	4313      	orrs	r3, r2
 800338a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003392:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a1d      	ldr	r2, [pc, #116]	; (800340c <TIM_OC2_SetConfig+0x100>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d00f      	beq.n	80033bc <TIM_OC2_SetConfig+0xb0>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a1c      	ldr	r2, [pc, #112]	; (8003410 <TIM_OC2_SetConfig+0x104>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d00b      	beq.n	80033bc <TIM_OC2_SetConfig+0xb0>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a1b      	ldr	r2, [pc, #108]	; (8003414 <TIM_OC2_SetConfig+0x108>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d007      	beq.n	80033bc <TIM_OC2_SetConfig+0xb0>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a1a      	ldr	r2, [pc, #104]	; (8003418 <TIM_OC2_SetConfig+0x10c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d003      	beq.n	80033bc <TIM_OC2_SetConfig+0xb0>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a19      	ldr	r2, [pc, #100]	; (800341c <TIM_OC2_SetConfig+0x110>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d113      	bne.n	80033e4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	621a      	str	r2, [r3, #32]
}
 80033fe:	bf00      	nop
 8003400:	371c      	adds	r7, #28
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40012c00 	.word	0x40012c00
 8003410:	40013400 	.word	0x40013400
 8003414:	40014000 	.word	0x40014000
 8003418:	40014400 	.word	0x40014400
 800341c:	40014800 	.word	0x40014800

08003420 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003420:	b480      	push	{r7}
 8003422:	b087      	sub	sp, #28
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800344e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f023 0303 	bic.w	r3, r3, #3
 800345a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	4313      	orrs	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800346c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	021b      	lsls	r3, r3, #8
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	4313      	orrs	r3, r2
 8003478:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a27      	ldr	r2, [pc, #156]	; (800351c <TIM_OC3_SetConfig+0xfc>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d003      	beq.n	800348a <TIM_OC3_SetConfig+0x6a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a26      	ldr	r2, [pc, #152]	; (8003520 <TIM_OC3_SetConfig+0x100>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d10d      	bne.n	80034a6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003490:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	021b      	lsls	r3, r3, #8
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	4313      	orrs	r3, r2
 800349c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a1c      	ldr	r2, [pc, #112]	; (800351c <TIM_OC3_SetConfig+0xfc>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d00f      	beq.n	80034ce <TIM_OC3_SetConfig+0xae>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a1b      	ldr	r2, [pc, #108]	; (8003520 <TIM_OC3_SetConfig+0x100>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d00b      	beq.n	80034ce <TIM_OC3_SetConfig+0xae>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a1a      	ldr	r2, [pc, #104]	; (8003524 <TIM_OC3_SetConfig+0x104>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d007      	beq.n	80034ce <TIM_OC3_SetConfig+0xae>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a19      	ldr	r2, [pc, #100]	; (8003528 <TIM_OC3_SetConfig+0x108>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d003      	beq.n	80034ce <TIM_OC3_SetConfig+0xae>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a18      	ldr	r2, [pc, #96]	; (800352c <TIM_OC3_SetConfig+0x10c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d113      	bne.n	80034f6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	621a      	str	r2, [r3, #32]
}
 8003510:	bf00      	nop
 8003512:	371c      	adds	r7, #28
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	40012c00 	.word	0x40012c00
 8003520:	40013400 	.word	0x40013400
 8003524:	40014000 	.word	0x40014000
 8003528:	40014400 	.word	0x40014400
 800352c:	40014800 	.word	0x40014800

08003530 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003530:	b480      	push	{r7}
 8003532:	b087      	sub	sp, #28
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800355e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800356a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	021b      	lsls	r3, r3, #8
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	4313      	orrs	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800357e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	031b      	lsls	r3, r3, #12
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a18      	ldr	r2, [pc, #96]	; (80035f0 <TIM_OC4_SetConfig+0xc0>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d00f      	beq.n	80035b4 <TIM_OC4_SetConfig+0x84>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a17      	ldr	r2, [pc, #92]	; (80035f4 <TIM_OC4_SetConfig+0xc4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d00b      	beq.n	80035b4 <TIM_OC4_SetConfig+0x84>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a16      	ldr	r2, [pc, #88]	; (80035f8 <TIM_OC4_SetConfig+0xc8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d007      	beq.n	80035b4 <TIM_OC4_SetConfig+0x84>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a15      	ldr	r2, [pc, #84]	; (80035fc <TIM_OC4_SetConfig+0xcc>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d003      	beq.n	80035b4 <TIM_OC4_SetConfig+0x84>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a14      	ldr	r2, [pc, #80]	; (8003600 <TIM_OC4_SetConfig+0xd0>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d109      	bne.n	80035c8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	019b      	lsls	r3, r3, #6
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	621a      	str	r2, [r3, #32]
}
 80035e2:	bf00      	nop
 80035e4:	371c      	adds	r7, #28
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	40012c00 	.word	0x40012c00
 80035f4:	40013400 	.word	0x40013400
 80035f8:	40014000 	.word	0x40014000
 80035fc:	40014400 	.word	0x40014400
 8003600:	40014800 	.word	0x40014800

08003604 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003604:	b480      	push	{r7}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800362a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	4313      	orrs	r3, r2
 8003640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003648:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	041b      	lsls	r3, r3, #16
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	4313      	orrs	r3, r2
 8003654:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a17      	ldr	r2, [pc, #92]	; (80036b8 <TIM_OC5_SetConfig+0xb4>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d00f      	beq.n	800367e <TIM_OC5_SetConfig+0x7a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a16      	ldr	r2, [pc, #88]	; (80036bc <TIM_OC5_SetConfig+0xb8>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d00b      	beq.n	800367e <TIM_OC5_SetConfig+0x7a>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a15      	ldr	r2, [pc, #84]	; (80036c0 <TIM_OC5_SetConfig+0xbc>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d007      	beq.n	800367e <TIM_OC5_SetConfig+0x7a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a14      	ldr	r2, [pc, #80]	; (80036c4 <TIM_OC5_SetConfig+0xc0>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d003      	beq.n	800367e <TIM_OC5_SetConfig+0x7a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a13      	ldr	r2, [pc, #76]	; (80036c8 <TIM_OC5_SetConfig+0xc4>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d109      	bne.n	8003692 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003684:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	021b      	lsls	r3, r3, #8
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	4313      	orrs	r3, r2
 8003690:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	621a      	str	r2, [r3, #32]
}
 80036ac:	bf00      	nop
 80036ae:	371c      	adds	r7, #28
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	40012c00 	.word	0x40012c00
 80036bc:	40013400 	.word	0x40013400
 80036c0:	40014000 	.word	0x40014000
 80036c4:	40014400 	.word	0x40014400
 80036c8:	40014800 	.word	0x40014800

080036cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	021b      	lsls	r3, r3, #8
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	4313      	orrs	r3, r2
 800370a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003712:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	051b      	lsls	r3, r3, #20
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a18      	ldr	r2, [pc, #96]	; (8003784 <TIM_OC6_SetConfig+0xb8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d00f      	beq.n	8003748 <TIM_OC6_SetConfig+0x7c>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a17      	ldr	r2, [pc, #92]	; (8003788 <TIM_OC6_SetConfig+0xbc>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d00b      	beq.n	8003748 <TIM_OC6_SetConfig+0x7c>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a16      	ldr	r2, [pc, #88]	; (800378c <TIM_OC6_SetConfig+0xc0>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d007      	beq.n	8003748 <TIM_OC6_SetConfig+0x7c>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a15      	ldr	r2, [pc, #84]	; (8003790 <TIM_OC6_SetConfig+0xc4>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d003      	beq.n	8003748 <TIM_OC6_SetConfig+0x7c>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a14      	ldr	r2, [pc, #80]	; (8003794 <TIM_OC6_SetConfig+0xc8>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d109      	bne.n	800375c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800374e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	029b      	lsls	r3, r3, #10
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	4313      	orrs	r3, r2
 800375a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	621a      	str	r2, [r3, #32]
}
 8003776:	bf00      	nop
 8003778:	371c      	adds	r7, #28
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	40012c00 	.word	0x40012c00
 8003788:	40013400 	.word	0x40013400
 800378c:	40014000 	.word	0x40014000
 8003790:	40014400 	.word	0x40014400
 8003794:	40014800 	.word	0x40014800

08003798 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c2:	f023 0307 	bic.w	r3, r3, #7
 80037c6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b30      	cmp	r3, #48	; 0x30
 80037e0:	d05c      	beq.n	800389c <TIM_SlaveTimer_SetConfig+0x104>
 80037e2:	2b30      	cmp	r3, #48	; 0x30
 80037e4:	d806      	bhi.n	80037f4 <TIM_SlaveTimer_SetConfig+0x5c>
 80037e6:	2b10      	cmp	r3, #16
 80037e8:	d058      	beq.n	800389c <TIM_SlaveTimer_SetConfig+0x104>
 80037ea:	2b20      	cmp	r3, #32
 80037ec:	d056      	beq.n	800389c <TIM_SlaveTimer_SetConfig+0x104>
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d054      	beq.n	800389c <TIM_SlaveTimer_SetConfig+0x104>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 80037f2:	e054      	b.n	800389e <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 80037f4:	2b50      	cmp	r3, #80	; 0x50
 80037f6:	d03d      	beq.n	8003874 <TIM_SlaveTimer_SetConfig+0xdc>
 80037f8:	2b50      	cmp	r3, #80	; 0x50
 80037fa:	d802      	bhi.n	8003802 <TIM_SlaveTimer_SetConfig+0x6a>
 80037fc:	2b40      	cmp	r3, #64	; 0x40
 80037fe:	d010      	beq.n	8003822 <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 8003800:	e04d      	b.n	800389e <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8003802:	2b60      	cmp	r3, #96	; 0x60
 8003804:	d040      	beq.n	8003888 <TIM_SlaveTimer_SetConfig+0xf0>
 8003806:	2b70      	cmp	r3, #112	; 0x70
 8003808:	d000      	beq.n	800380c <TIM_SlaveTimer_SetConfig+0x74>
      break;
 800380a:	e048      	b.n	800389e <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6818      	ldr	r0, [r3, #0]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	68d9      	ldr	r1, [r3, #12]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	f000 f9e2 	bl	8003be4 <TIM_ETR_SetConfig>
      break;
 8003820:	e03d      	b.n	800389e <TIM_SlaveTimer_SetConfig+0x106>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2b05      	cmp	r3, #5
 8003828:	d101      	bne.n	800382e <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e038      	b.n	80038a0 <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6812      	ldr	r2, [r2, #0]
 800383e:	6a12      	ldr	r2, [r2, #32]
 8003840:	f022 0201 	bic.w	r2, r2, #1
 8003844:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003854:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	4313      	orrs	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	621a      	str	r2, [r3, #32]
      break;
 8003872:	e014      	b.n	800389e <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6818      	ldr	r0, [r3, #0]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	6899      	ldr	r1, [r3, #8]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	461a      	mov	r2, r3
 8003882:	f000 f87f 	bl	8003984 <TIM_TI1_ConfigInputStage>
      break;
 8003886:	e00a      	b.n	800389e <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6818      	ldr	r0, [r3, #0]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	6899      	ldr	r1, [r3, #8]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	461a      	mov	r2, r3
 8003896:	f000 f8e1 	bl	8003a5c <TIM_TI2_ConfigInputStage>
      break;
 800389a:	e000      	b.n	800389e <TIM_SlaveTimer_SetConfig+0x106>
      break;
 800389c:	bf00      	nop
  }
  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3718      	adds	r7, #24
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b087      	sub	sp, #28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
 80038b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	f023 0201 	bic.w	r2, r3, #1
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	4a26      	ldr	r2, [pc, #152]	; (800396c <TIM_TI1_SetConfig+0xc4>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d017      	beq.n	8003906 <TIM_TI1_SetConfig+0x5e>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038dc:	d013      	beq.n	8003906 <TIM_TI1_SetConfig+0x5e>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4a23      	ldr	r2, [pc, #140]	; (8003970 <TIM_TI1_SetConfig+0xc8>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d00f      	beq.n	8003906 <TIM_TI1_SetConfig+0x5e>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4a22      	ldr	r2, [pc, #136]	; (8003974 <TIM_TI1_SetConfig+0xcc>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d00b      	beq.n	8003906 <TIM_TI1_SetConfig+0x5e>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	4a21      	ldr	r2, [pc, #132]	; (8003978 <TIM_TI1_SetConfig+0xd0>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d007      	beq.n	8003906 <TIM_TI1_SetConfig+0x5e>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	4a20      	ldr	r2, [pc, #128]	; (800397c <TIM_TI1_SetConfig+0xd4>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d003      	beq.n	8003906 <TIM_TI1_SetConfig+0x5e>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4a1f      	ldr	r2, [pc, #124]	; (8003980 <TIM_TI1_SetConfig+0xd8>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d101      	bne.n	800390a <TIM_TI1_SetConfig+0x62>
 8003906:	2301      	movs	r3, #1
 8003908:	e000      	b.n	800390c <TIM_TI1_SetConfig+0x64>
 800390a:	2300      	movs	r3, #0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d008      	beq.n	8003922 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f023 0303 	bic.w	r3, r3, #3
 8003916:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4313      	orrs	r3, r2
 800391e:	617b      	str	r3, [r7, #20]
 8003920:	e003      	b.n	800392a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f043 0301 	orr.w	r3, r3, #1
 8003928:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003930:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	b2db      	uxtb	r3, r3
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	4313      	orrs	r3, r2
 800393c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	f023 030a 	bic.w	r3, r3, #10
 8003944:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	f003 030a 	and.w	r3, r3, #10
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	4313      	orrs	r3, r2
 8003950:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	621a      	str	r2, [r3, #32]
}
 800395e:	bf00      	nop
 8003960:	371c      	adds	r7, #28
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	40012c00 	.word	0x40012c00
 8003970:	40000400 	.word	0x40000400
 8003974:	40000800 	.word	0x40000800
 8003978:	40000c00 	.word	0x40000c00
 800397c:	40013400 	.word	0x40013400
 8003980:	40014000 	.word	0x40014000

08003984 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003984:	b480      	push	{r7}
 8003986:	b087      	sub	sp, #28
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	f023 0201 	bic.w	r2, r3, #1
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f023 030a 	bic.w	r3, r3, #10
 80039c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	621a      	str	r2, [r3, #32]
}
 80039d6:	bf00      	nop
 80039d8:	371c      	adds	r7, #28
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b087      	sub	sp, #28
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	60f8      	str	r0, [r7, #12]
 80039ea:	60b9      	str	r1, [r7, #8]
 80039ec:	607a      	str	r2, [r7, #4]
 80039ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	f023 0210 	bic.w	r2, r3, #16
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a0e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	021b      	lsls	r3, r3, #8
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	031b      	lsls	r3, r3, #12
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a34:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	011b      	lsls	r3, r3, #4
 8003a3a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	621a      	str	r2, [r3, #32]
}
 8003a50:	bf00      	nop
 8003a52:	371c      	adds	r7, #28
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	f023 0210 	bic.w	r2, r3, #16
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	031b      	lsls	r3, r3, #12
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	621a      	str	r2, [r3, #32]
}
 8003ab0:	bf00      	nop
 8003ab2:	371c      	adds	r7, #28
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b087      	sub	sp, #28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
 8003ac8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f023 0303 	bic.w	r3, r3, #3
 8003ae8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003af8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003b0c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	021b      	lsls	r3, r3, #8
 8003b12:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	621a      	str	r2, [r3, #32]
}
 8003b28:	bf00      	nop
 8003b2a:	371c      	adds	r7, #28
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b087      	sub	sp, #28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
 8003b40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	021b      	lsls	r3, r3, #8
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b72:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	031b      	lsls	r3, r3, #12
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003b86:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	031b      	lsls	r3, r3, #12
 8003b8c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	621a      	str	r2, [r3, #32]
}
 8003ba2:	bf00      	nop
 8003ba4:	371c      	adds	r7, #28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b085      	sub	sp, #20
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f043 0307 	orr.w	r3, r3, #7
 8003bd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	609a      	str	r2, [r3, #8]
}
 8003bd8:	bf00      	nop
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	021a      	lsls	r2, r3, #8
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	431a      	orrs	r2, r3
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	609a      	str	r2, [r3, #8]
}
 8003c18:	bf00      	nop
 8003c1a:	371c      	adds	r7, #28
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b087      	sub	sp, #28
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f003 031f 	and.w	r3, r3, #31
 8003c36:	2201      	movs	r2, #1
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6a1a      	ldr	r2, [r3, #32]
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	43db      	mvns	r3, r3
 8003c46:	401a      	ands	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a1a      	ldr	r2, [r3, #32]
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	f003 031f 	and.w	r3, r3, #31
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	fa01 f303 	lsl.w	r3, r1, r3
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	621a      	str	r2, [r3, #32]
}
 8003c62:	bf00      	nop
 8003c64:	371c      	adds	r7, #28
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
	...

08003c70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e045      	b.n	8003d14 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2202      	movs	r2, #2
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a1c      	ldr	r2, [pc, #112]	; (8003d20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d004      	beq.n	8003cbc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a1b      	ldr	r2, [pc, #108]	; (8003d24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d108      	bne.n	8003cce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003cc2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ce6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	40012c00 	.word	0x40012c00
 8003d24:	40013400 	.word	0x40013400

08003d28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e040      	b.n	8003df8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d106      	bne.n	8003d8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f001 fe80 	bl	8005a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2224      	movs	r2, #36	; 0x24
 8003d90:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6812      	ldr	r2, [r2, #0]
 8003d9a:	6812      	ldr	r2, [r2, #0]
 8003d9c:	f022 0201 	bic.w	r2, r2, #1
 8003da0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 fa2a 	bl	80041fc <UART_SetConfig>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d101      	bne.n	8003db2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e022      	b.n	8003df8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d002      	beq.n	8003dc0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 fd58 	bl	8004870 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6812      	ldr	r2, [r2, #0]
 8003dc8:	6852      	ldr	r2, [r2, #4]
 8003dca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6812      	ldr	r2, [r2, #0]
 8003dd8:	6892      	ldr	r2, [r2, #8]
 8003dda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6812      	ldr	r2, [r2, #0]
 8003de8:	6812      	ldr	r2, [r2, #0]
 8003dea:	f042 0201 	orr.w	r2, r2, #1
 8003dee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 fddf 	bl	80049b4 <UART_CheckIdleState>
 8003df6:	4603      	mov	r3, r0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3708      	adds	r7, #8
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e12:	2b20      	cmp	r3, #32
 8003e14:	d164      	bne.n	8003ee0 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d002      	beq.n	8003e22 <HAL_UART_Transmit_DMA+0x22>
 8003e1c:	88fb      	ldrh	r3, [r7, #6]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e05d      	b.n	8003ee2 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d101      	bne.n	8003e34 <HAL_UART_Transmit_DMA+0x34>
 8003e30:	2302      	movs	r3, #2
 8003e32:	e056      	b.n	8003ee2 <HAL_UART_Transmit_DMA+0xe2>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	88fa      	ldrh	r2, [r7, #6]
 8003e46:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	88fa      	ldrh	r2, [r7, #6]
 8003e4e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2221      	movs	r2, #33	; 0x21
 8003e5c:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d02a      	beq.n	8003ebc <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e6a:	4a20      	ldr	r2, [pc, #128]	; (8003eec <HAL_UART_Transmit_DMA+0xec>)
 8003e6c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e72:	4a1f      	ldr	r2, [pc, #124]	; (8003ef0 <HAL_UART_Transmit_DMA+0xf0>)
 8003e74:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e7a:	4a1e      	ldr	r2, [pc, #120]	; (8003ef4 <HAL_UART_Transmit_DMA+0xf4>)
 8003e7c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e82:	2200      	movs	r2, #0
 8003e84:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e8e:	4619      	mov	r1, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3328      	adds	r3, #40	; 0x28
 8003e96:	461a      	mov	r2, r3
 8003e98:	88fb      	ldrh	r3, [r7, #6]
 8003e9a:	f7fc fda0 	bl	80009de <HAL_DMA_Start_IT>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00b      	beq.n	8003ebc <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2210      	movs	r2, #16
 8003ea8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e012      	b.n	8003ee2 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2240      	movs	r2, #64	; 0x40
 8003ec2:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	6812      	ldr	r2, [r2, #0]
 8003ed4:	6892      	ldr	r2, [r2, #8]
 8003ed6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003eda:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8003edc:	2300      	movs	r3, #0
 8003ede:	e000      	b.n	8003ee2 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8003ee0:	2302      	movs	r3, #2
  }
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	08004b39 	.word	0x08004b39
 8003ef0:	08004b8d 	.word	0x08004b8d
 8003ef4:	08004c2d 	.word	0x08004c2d

08003ef8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	4613      	mov	r3, r2
 8003f04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f0a:	2b20      	cmp	r3, #32
 8003f0c:	d16c      	bne.n	8003fe8 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <HAL_UART_Receive_DMA+0x22>
 8003f14:	88fb      	ldrh	r3, [r7, #6]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e065      	b.n	8003fea <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d101      	bne.n	8003f2c <HAL_UART_Receive_DMA+0x34>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e05e      	b.n	8003fea <HAL_UART_Receive_DMA+0xf2>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	88fa      	ldrh	r2, [r7, #6]
 8003f3e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2222      	movs	r2, #34	; 0x22
 8003f4c:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d02a      	beq.n	8003fac <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f5a:	4a26      	ldr	r2, [pc, #152]	; (8003ff4 <HAL_UART_Receive_DMA+0xfc>)
 8003f5c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f62:	4a25      	ldr	r2, [pc, #148]	; (8003ff8 <HAL_UART_Receive_DMA+0x100>)
 8003f64:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f6a:	4a24      	ldr	r2, [pc, #144]	; (8003ffc <HAL_UART_Receive_DMA+0x104>)
 8003f6c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f72:	2200      	movs	r2, #0
 8003f74:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	3324      	adds	r3, #36	; 0x24
 8003f80:	4619      	mov	r1, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f86:	461a      	mov	r2, r3
 8003f88:	88fb      	ldrh	r3, [r7, #6]
 8003f8a:	f7fc fd28 	bl	80009de <HAL_DMA_Start_IT>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00b      	beq.n	8003fac <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2210      	movs	r2, #16
 8003f98:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e01e      	b.n	8003fea <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	6812      	ldr	r2, [r2, #0]
 8003fbc:	6812      	ldr	r2, [r2, #0]
 8003fbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fc2:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	6812      	ldr	r2, [r2, #0]
 8003fcc:	6892      	ldr	r2, [r2, #8]
 8003fce:	f042 0201 	orr.w	r2, r2, #1
 8003fd2:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	6812      	ldr	r2, [r2, #0]
 8003fdc:	6892      	ldr	r2, [r2, #8]
 8003fde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fe2:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	e000      	b.n	8003fea <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8003fe8:	2302      	movs	r3, #2
  }
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	08004ba9 	.word	0x08004ba9
 8003ff8:	08004c11 	.word	0x08004c11
 8003ffc:	08004c2d 	.word	0x08004c2d

08004000 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800400c:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004012:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401e:	2b80      	cmp	r3, #128	; 0x80
 8004020:	d126      	bne.n	8004070 <HAL_UART_DMAStop+0x70>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2b21      	cmp	r3, #33	; 0x21
 8004026:	d123      	bne.n	8004070 <HAL_UART_DMAStop+0x70>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6812      	ldr	r2, [r2, #0]
 8004030:	6892      	ldr	r2, [r2, #8]
 8004032:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004036:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800403c:	2b00      	cmp	r3, #0
 800403e:	d014      	beq.n	800406a <HAL_UART_DMAStop+0x6a>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004044:	4618      	mov	r0, r3
 8004046:	f7fc fd2a 	bl	8000a9e <HAL_DMA_Abort>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00c      	beq.n	800406a <HAL_UART_DMAStop+0x6a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004054:	4618      	mov	r0, r3
 8004056:	f7fc fe50 	bl	8000cfa <HAL_DMA_GetError>
 800405a:	4603      	mov	r3, r0
 800405c:	2b20      	cmp	r3, #32
 800405e:	d104      	bne.n	800406a <HAL_UART_DMAStop+0x6a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2210      	movs	r2, #16
 8004064:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e031      	b.n	80040ce <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 fd2f 	bl	8004ace <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407a:	2b40      	cmp	r3, #64	; 0x40
 800407c:	d126      	bne.n	80040cc <HAL_UART_DMAStop+0xcc>
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2b22      	cmp	r3, #34	; 0x22
 8004082:	d123      	bne.n	80040cc <HAL_UART_DMAStop+0xcc>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6812      	ldr	r2, [r2, #0]
 800408c:	6892      	ldr	r2, [r2, #8]
 800408e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004092:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004098:	2b00      	cmp	r3, #0
 800409a:	d014      	beq.n	80040c6 <HAL_UART_DMAStop+0xc6>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fc fcfc 	bl	8000a9e <HAL_DMA_Abort>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00c      	beq.n	80040c6 <HAL_UART_DMAStop+0xc6>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7fc fe22 	bl	8000cfa <HAL_DMA_GetError>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b20      	cmp	r3, #32
 80040ba:	d104      	bne.n	80040c6 <HAL_UART_DMAStop+0xc6>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2210      	movs	r2, #16
 80040c0:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e003      	b.n	80040ce <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 fd16 	bl	8004af8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Disable interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6812      	ldr	r2, [r2, #0]
 80040e8:	6812      	ldr	r2, [r2, #0]
 80040ea:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80040ee:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040fa:	2b80      	cmp	r3, #128	; 0x80
 80040fc:	d12d      	bne.n	800415a <HAL_UART_AbortTransmit_IT+0x82>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6812      	ldr	r2, [r2, #0]
 8004106:	6892      	ldr	r2, [r2, #8]
 8004108:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800410c:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004112:	2b00      	cmp	r3, #0
 8004114:	d013      	beq.n	800413e <HAL_UART_AbortTransmit_IT+0x66>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800411a:	4a19      	ldr	r2, [pc, #100]	; (8004180 <HAL_UART_AbortTransmit_IT+0xa8>)
 800411c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004122:	4618      	mov	r0, r3
 8004124:	f7fc fcf9 	bl	8000b1a <HAL_DMA_Abort_IT>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d022      	beq.n	8004174 <HAL_UART_AbortTransmit_IT+0x9c>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004138:	4610      	mov	r0, r2
 800413a:	4798      	blx	r3
 800413c:	e01a      	b.n	8004174 <HAL_UART_AbortTransmit_IT+0x9c>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0U;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      /* Clear TxISR function pointers */
      huart->TxISR = NULL;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2220      	movs	r2, #32
 8004150:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f848 	bl	80041e8 <HAL_UART_AbortTransmitCpltCallback>
 8004158:	e00c      	b.n	8004174 <HAL_UART_AbortTransmit_IT+0x9c>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0U;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Clear TxISR function pointers */
    huart->TxISR = NULL;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	665a      	str	r2, [r3, #100]	; 0x64
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2220      	movs	r2, #32
 800416c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f83a 	bl	80041e8 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	08004ca5 	.word	0x08004ca5

08004184 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004200:	b088      	sub	sp, #32
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004206:	2300      	movs	r3, #0
 8004208:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800420e:	2300      	movs	r3, #0
 8004210:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689a      	ldr	r2, [r3, #8]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	431a      	orrs	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	4313      	orrs	r3, r2
 8004228:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6819      	ldr	r1, [r3, #0]
 8004234:	4bab      	ldr	r3, [pc, #684]	; (80044e4 <UART_SetConfig+0x2e8>)
 8004236:	400b      	ands	r3, r1
 8004238:	69f9      	ldr	r1, [r7, #28]
 800423a:	430b      	orrs	r3, r1
 800423c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	6812      	ldr	r2, [r2, #0]
 8004246:	6852      	ldr	r2, [r2, #4]
 8004248:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	68d2      	ldr	r2, [r2, #12]
 8004250:	430a      	orrs	r2, r1
 8004252:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4aa2      	ldr	r2, [pc, #648]	; (80044e8 <UART_SetConfig+0x2ec>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d004      	beq.n	800426e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	69fa      	ldr	r2, [r7, #28]
 800426a:	4313      	orrs	r3, r2
 800426c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6812      	ldr	r2, [r2, #0]
 8004276:	6892      	ldr	r2, [r2, #8]
 8004278:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 800427c:	69fa      	ldr	r2, [r7, #28]
 800427e:	430a      	orrs	r2, r1
 8004280:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a99      	ldr	r2, [pc, #612]	; (80044ec <UART_SetConfig+0x2f0>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d121      	bne.n	80042d0 <UART_SetConfig+0xd4>
 800428c:	4b98      	ldr	r3, [pc, #608]	; (80044f0 <UART_SetConfig+0x2f4>)
 800428e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004292:	f003 0303 	and.w	r3, r3, #3
 8004296:	2b03      	cmp	r3, #3
 8004298:	d816      	bhi.n	80042c8 <UART_SetConfig+0xcc>
 800429a:	a201      	add	r2, pc, #4	; (adr r2, 80042a0 <UART_SetConfig+0xa4>)
 800429c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a0:	080042b1 	.word	0x080042b1
 80042a4:	080042bd 	.word	0x080042bd
 80042a8:	080042b7 	.word	0x080042b7
 80042ac:	080042c3 	.word	0x080042c3
 80042b0:	2301      	movs	r3, #1
 80042b2:	76fb      	strb	r3, [r7, #27]
 80042b4:	e0e8      	b.n	8004488 <UART_SetConfig+0x28c>
 80042b6:	2302      	movs	r3, #2
 80042b8:	76fb      	strb	r3, [r7, #27]
 80042ba:	e0e5      	b.n	8004488 <UART_SetConfig+0x28c>
 80042bc:	2304      	movs	r3, #4
 80042be:	76fb      	strb	r3, [r7, #27]
 80042c0:	e0e2      	b.n	8004488 <UART_SetConfig+0x28c>
 80042c2:	2308      	movs	r3, #8
 80042c4:	76fb      	strb	r3, [r7, #27]
 80042c6:	e0df      	b.n	8004488 <UART_SetConfig+0x28c>
 80042c8:	2310      	movs	r3, #16
 80042ca:	76fb      	strb	r3, [r7, #27]
 80042cc:	bf00      	nop
 80042ce:	e0db      	b.n	8004488 <UART_SetConfig+0x28c>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a87      	ldr	r2, [pc, #540]	; (80044f4 <UART_SetConfig+0x2f8>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d134      	bne.n	8004344 <UART_SetConfig+0x148>
 80042da:	4b85      	ldr	r3, [pc, #532]	; (80044f0 <UART_SetConfig+0x2f4>)
 80042dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e0:	f003 030c 	and.w	r3, r3, #12
 80042e4:	2b0c      	cmp	r3, #12
 80042e6:	d829      	bhi.n	800433c <UART_SetConfig+0x140>
 80042e8:	a201      	add	r2, pc, #4	; (adr r2, 80042f0 <UART_SetConfig+0xf4>)
 80042ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ee:	bf00      	nop
 80042f0:	08004325 	.word	0x08004325
 80042f4:	0800433d 	.word	0x0800433d
 80042f8:	0800433d 	.word	0x0800433d
 80042fc:	0800433d 	.word	0x0800433d
 8004300:	08004331 	.word	0x08004331
 8004304:	0800433d 	.word	0x0800433d
 8004308:	0800433d 	.word	0x0800433d
 800430c:	0800433d 	.word	0x0800433d
 8004310:	0800432b 	.word	0x0800432b
 8004314:	0800433d 	.word	0x0800433d
 8004318:	0800433d 	.word	0x0800433d
 800431c:	0800433d 	.word	0x0800433d
 8004320:	08004337 	.word	0x08004337
 8004324:	2300      	movs	r3, #0
 8004326:	76fb      	strb	r3, [r7, #27]
 8004328:	e0ae      	b.n	8004488 <UART_SetConfig+0x28c>
 800432a:	2302      	movs	r3, #2
 800432c:	76fb      	strb	r3, [r7, #27]
 800432e:	e0ab      	b.n	8004488 <UART_SetConfig+0x28c>
 8004330:	2304      	movs	r3, #4
 8004332:	76fb      	strb	r3, [r7, #27]
 8004334:	e0a8      	b.n	8004488 <UART_SetConfig+0x28c>
 8004336:	2308      	movs	r3, #8
 8004338:	76fb      	strb	r3, [r7, #27]
 800433a:	e0a5      	b.n	8004488 <UART_SetConfig+0x28c>
 800433c:	2310      	movs	r3, #16
 800433e:	76fb      	strb	r3, [r7, #27]
 8004340:	bf00      	nop
 8004342:	e0a1      	b.n	8004488 <UART_SetConfig+0x28c>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a6b      	ldr	r2, [pc, #428]	; (80044f8 <UART_SetConfig+0x2fc>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d120      	bne.n	8004390 <UART_SetConfig+0x194>
 800434e:	4b68      	ldr	r3, [pc, #416]	; (80044f0 <UART_SetConfig+0x2f4>)
 8004350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004354:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004358:	2b10      	cmp	r3, #16
 800435a:	d00f      	beq.n	800437c <UART_SetConfig+0x180>
 800435c:	2b10      	cmp	r3, #16
 800435e:	d802      	bhi.n	8004366 <UART_SetConfig+0x16a>
 8004360:	2b00      	cmp	r3, #0
 8004362:	d005      	beq.n	8004370 <UART_SetConfig+0x174>
 8004364:	e010      	b.n	8004388 <UART_SetConfig+0x18c>
 8004366:	2b20      	cmp	r3, #32
 8004368:	d005      	beq.n	8004376 <UART_SetConfig+0x17a>
 800436a:	2b30      	cmp	r3, #48	; 0x30
 800436c:	d009      	beq.n	8004382 <UART_SetConfig+0x186>
 800436e:	e00b      	b.n	8004388 <UART_SetConfig+0x18c>
 8004370:	2300      	movs	r3, #0
 8004372:	76fb      	strb	r3, [r7, #27]
 8004374:	e088      	b.n	8004488 <UART_SetConfig+0x28c>
 8004376:	2302      	movs	r3, #2
 8004378:	76fb      	strb	r3, [r7, #27]
 800437a:	e085      	b.n	8004488 <UART_SetConfig+0x28c>
 800437c:	2304      	movs	r3, #4
 800437e:	76fb      	strb	r3, [r7, #27]
 8004380:	e082      	b.n	8004488 <UART_SetConfig+0x28c>
 8004382:	2308      	movs	r3, #8
 8004384:	76fb      	strb	r3, [r7, #27]
 8004386:	e07f      	b.n	8004488 <UART_SetConfig+0x28c>
 8004388:	2310      	movs	r3, #16
 800438a:	76fb      	strb	r3, [r7, #27]
 800438c:	bf00      	nop
 800438e:	e07b      	b.n	8004488 <UART_SetConfig+0x28c>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a59      	ldr	r2, [pc, #356]	; (80044fc <UART_SetConfig+0x300>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d120      	bne.n	80043dc <UART_SetConfig+0x1e0>
 800439a:	4b55      	ldr	r3, [pc, #340]	; (80044f0 <UART_SetConfig+0x2f4>)
 800439c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80043a4:	2b40      	cmp	r3, #64	; 0x40
 80043a6:	d00f      	beq.n	80043c8 <UART_SetConfig+0x1cc>
 80043a8:	2b40      	cmp	r3, #64	; 0x40
 80043aa:	d802      	bhi.n	80043b2 <UART_SetConfig+0x1b6>
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d005      	beq.n	80043bc <UART_SetConfig+0x1c0>
 80043b0:	e010      	b.n	80043d4 <UART_SetConfig+0x1d8>
 80043b2:	2b80      	cmp	r3, #128	; 0x80
 80043b4:	d005      	beq.n	80043c2 <UART_SetConfig+0x1c6>
 80043b6:	2bc0      	cmp	r3, #192	; 0xc0
 80043b8:	d009      	beq.n	80043ce <UART_SetConfig+0x1d2>
 80043ba:	e00b      	b.n	80043d4 <UART_SetConfig+0x1d8>
 80043bc:	2300      	movs	r3, #0
 80043be:	76fb      	strb	r3, [r7, #27]
 80043c0:	e062      	b.n	8004488 <UART_SetConfig+0x28c>
 80043c2:	2302      	movs	r3, #2
 80043c4:	76fb      	strb	r3, [r7, #27]
 80043c6:	e05f      	b.n	8004488 <UART_SetConfig+0x28c>
 80043c8:	2304      	movs	r3, #4
 80043ca:	76fb      	strb	r3, [r7, #27]
 80043cc:	e05c      	b.n	8004488 <UART_SetConfig+0x28c>
 80043ce:	2308      	movs	r3, #8
 80043d0:	76fb      	strb	r3, [r7, #27]
 80043d2:	e059      	b.n	8004488 <UART_SetConfig+0x28c>
 80043d4:	2310      	movs	r3, #16
 80043d6:	76fb      	strb	r3, [r7, #27]
 80043d8:	bf00      	nop
 80043da:	e055      	b.n	8004488 <UART_SetConfig+0x28c>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a47      	ldr	r2, [pc, #284]	; (8004500 <UART_SetConfig+0x304>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d124      	bne.n	8004430 <UART_SetConfig+0x234>
 80043e6:	4b42      	ldr	r3, [pc, #264]	; (80044f0 <UART_SetConfig+0x2f4>)
 80043e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043f4:	d012      	beq.n	800441c <UART_SetConfig+0x220>
 80043f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043fa:	d802      	bhi.n	8004402 <UART_SetConfig+0x206>
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d007      	beq.n	8004410 <UART_SetConfig+0x214>
 8004400:	e012      	b.n	8004428 <UART_SetConfig+0x22c>
 8004402:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004406:	d006      	beq.n	8004416 <UART_SetConfig+0x21a>
 8004408:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800440c:	d009      	beq.n	8004422 <UART_SetConfig+0x226>
 800440e:	e00b      	b.n	8004428 <UART_SetConfig+0x22c>
 8004410:	2300      	movs	r3, #0
 8004412:	76fb      	strb	r3, [r7, #27]
 8004414:	e038      	b.n	8004488 <UART_SetConfig+0x28c>
 8004416:	2302      	movs	r3, #2
 8004418:	76fb      	strb	r3, [r7, #27]
 800441a:	e035      	b.n	8004488 <UART_SetConfig+0x28c>
 800441c:	2304      	movs	r3, #4
 800441e:	76fb      	strb	r3, [r7, #27]
 8004420:	e032      	b.n	8004488 <UART_SetConfig+0x28c>
 8004422:	2308      	movs	r3, #8
 8004424:	76fb      	strb	r3, [r7, #27]
 8004426:	e02f      	b.n	8004488 <UART_SetConfig+0x28c>
 8004428:	2310      	movs	r3, #16
 800442a:	76fb      	strb	r3, [r7, #27]
 800442c:	bf00      	nop
 800442e:	e02b      	b.n	8004488 <UART_SetConfig+0x28c>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a2c      	ldr	r2, [pc, #176]	; (80044e8 <UART_SetConfig+0x2ec>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d124      	bne.n	8004484 <UART_SetConfig+0x288>
 800443a:	4b2d      	ldr	r3, [pc, #180]	; (80044f0 <UART_SetConfig+0x2f4>)
 800443c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004440:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004448:	d012      	beq.n	8004470 <UART_SetConfig+0x274>
 800444a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800444e:	d802      	bhi.n	8004456 <UART_SetConfig+0x25a>
 8004450:	2b00      	cmp	r3, #0
 8004452:	d007      	beq.n	8004464 <UART_SetConfig+0x268>
 8004454:	e012      	b.n	800447c <UART_SetConfig+0x280>
 8004456:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800445a:	d006      	beq.n	800446a <UART_SetConfig+0x26e>
 800445c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004460:	d009      	beq.n	8004476 <UART_SetConfig+0x27a>
 8004462:	e00b      	b.n	800447c <UART_SetConfig+0x280>
 8004464:	2300      	movs	r3, #0
 8004466:	76fb      	strb	r3, [r7, #27]
 8004468:	e00e      	b.n	8004488 <UART_SetConfig+0x28c>
 800446a:	2302      	movs	r3, #2
 800446c:	76fb      	strb	r3, [r7, #27]
 800446e:	e00b      	b.n	8004488 <UART_SetConfig+0x28c>
 8004470:	2304      	movs	r3, #4
 8004472:	76fb      	strb	r3, [r7, #27]
 8004474:	e008      	b.n	8004488 <UART_SetConfig+0x28c>
 8004476:	2308      	movs	r3, #8
 8004478:	76fb      	strb	r3, [r7, #27]
 800447a:	e005      	b.n	8004488 <UART_SetConfig+0x28c>
 800447c:	2310      	movs	r3, #16
 800447e:	76fb      	strb	r3, [r7, #27]
 8004480:	bf00      	nop
 8004482:	e001      	b.n	8004488 <UART_SetConfig+0x28c>
 8004484:	2310      	movs	r3, #16
 8004486:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a16      	ldr	r2, [pc, #88]	; (80044e8 <UART_SetConfig+0x2ec>)
 800448e:	4293      	cmp	r3, r2
 8004490:	f040 80ed 	bne.w	800466e <UART_SetConfig+0x472>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004494:	7efb      	ldrb	r3, [r7, #27]
 8004496:	2b08      	cmp	r3, #8
 8004498:	d836      	bhi.n	8004508 <UART_SetConfig+0x30c>
 800449a:	a201      	add	r2, pc, #4	; (adr r2, 80044a0 <UART_SetConfig+0x2a4>)
 800449c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a0:	080044c5 	.word	0x080044c5
 80044a4:	08004509 	.word	0x08004509
 80044a8:	080044cd 	.word	0x080044cd
 80044ac:	08004509 	.word	0x08004509
 80044b0:	080044d3 	.word	0x080044d3
 80044b4:	08004509 	.word	0x08004509
 80044b8:	08004509 	.word	0x08004509
 80044bc:	08004509 	.word	0x08004509
 80044c0:	080044db 	.word	0x080044db
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80044c4:	f7fd fba2 	bl	8001c0c <HAL_RCC_GetPCLK1Freq>
 80044c8:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044ca:	e020      	b.n	800450e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80044cc:	4b0d      	ldr	r3, [pc, #52]	; (8004504 <UART_SetConfig+0x308>)
 80044ce:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044d0:	e01d      	b.n	800450e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80044d2:	f7fd fb05 	bl	8001ae0 <HAL_RCC_GetSysClockFreq>
 80044d6:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044d8:	e019      	b.n	800450e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80044da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044de:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044e0:	e015      	b.n	800450e <UART_SetConfig+0x312>
 80044e2:	bf00      	nop
 80044e4:	efff69f3 	.word	0xefff69f3
 80044e8:	40008000 	.word	0x40008000
 80044ec:	40013800 	.word	0x40013800
 80044f0:	40021000 	.word	0x40021000
 80044f4:	40004400 	.word	0x40004400
 80044f8:	40004800 	.word	0x40004800
 80044fc:	40004c00 	.word	0x40004c00
 8004500:	40005000 	.word	0x40005000
 8004504:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	74fb      	strb	r3, [r7, #19]
        break;
 800450c:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 819e 	beq.w	8004852 <UART_SetConfig+0x656>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	4613      	mov	r3, r2
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	441a      	add	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	429a      	cmp	r2, r3
 8004524:	d805      	bhi.n	8004532 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	429a      	cmp	r2, r3
 8004530:	d202      	bcs.n	8004538 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	74fb      	strb	r3, [r7, #19]
 8004536:	e18c      	b.n	8004852 <UART_SetConfig+0x656>
      }
      else
      {
        switch (clocksource)
 8004538:	7efb      	ldrb	r3, [r7, #27]
 800453a:	2b08      	cmp	r3, #8
 800453c:	f200 8084 	bhi.w	8004648 <UART_SetConfig+0x44c>
 8004540:	a201      	add	r2, pc, #4	; (adr r2, 8004548 <UART_SetConfig+0x34c>)
 8004542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004546:	bf00      	nop
 8004548:	0800456d 	.word	0x0800456d
 800454c:	08004649 	.word	0x08004649
 8004550:	080045ad 	.word	0x080045ad
 8004554:	08004649 	.word	0x08004649
 8004558:	080045e1 	.word	0x080045e1
 800455c:	08004649 	.word	0x08004649
 8004560:	08004649 	.word	0x08004649
 8004564:	08004649 	.word	0x08004649
 8004568:	0800461f 	.word	0x0800461f
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800456c:	f7fd fb4e 	bl	8001c0c <HAL_RCC_GetPCLK1Freq>
 8004570:	4603      	mov	r3, r0
 8004572:	f04f 0400 	mov.w	r4, #0
 8004576:	ea4f 2904 	mov.w	r9, r4, lsl #8
 800457a:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 800457e:	ea4f 2803 	mov.w	r8, r3, lsl #8
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	085b      	lsrs	r3, r3, #1
 8004588:	f04f 0400 	mov.w	r4, #0
 800458c:	eb18 0003 	adds.w	r0, r8, r3
 8004590:	eb49 0104 	adc.w	r1, r9, r4
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f04f 0400 	mov.w	r4, #0
 800459c:	461a      	mov	r2, r3
 800459e:	4623      	mov	r3, r4
 80045a0:	f7fb fe12 	bl	80001c8 <__aeabi_uldivmod>
 80045a4:	4603      	mov	r3, r0
 80045a6:	460c      	mov	r4, r1
 80045a8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80045aa:	e050      	b.n	800464e <UART_SetConfig+0x452>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	085b      	lsrs	r3, r3, #1
 80045b2:	f04f 0400 	mov.w	r4, #0
 80045b6:	49ad      	ldr	r1, [pc, #692]	; (800486c <UART_SetConfig+0x670>)
 80045b8:	f04f 0200 	mov.w	r2, #0
 80045bc:	eb13 0801 	adds.w	r8, r3, r1
 80045c0:	eb44 0902 	adc.w	r9, r4, r2
 80045c4:	4640      	mov	r0, r8
 80045c6:	4649      	mov	r1, r9
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f04f 0400 	mov.w	r4, #0
 80045d0:	461a      	mov	r2, r3
 80045d2:	4623      	mov	r3, r4
 80045d4:	f7fb fdf8 	bl	80001c8 <__aeabi_uldivmod>
 80045d8:	4603      	mov	r3, r0
 80045da:	460c      	mov	r4, r1
 80045dc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80045de:	e036      	b.n	800464e <UART_SetConfig+0x452>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80045e0:	f7fd fa7e 	bl	8001ae0 <HAL_RCC_GetSysClockFreq>
 80045e4:	4603      	mov	r3, r0
 80045e6:	461a      	mov	r2, r3
 80045e8:	f04f 0300 	mov.w	r3, #0
 80045ec:	021d      	lsls	r5, r3, #8
 80045ee:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 80045f2:	0214      	lsls	r4, r2, #8
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	085b      	lsrs	r3, r3, #1
 80045fa:	461a      	mov	r2, r3
 80045fc:	f04f 0300 	mov.w	r3, #0
 8004600:	18a0      	adds	r0, r4, r2
 8004602:	eb45 0103 	adc.w	r1, r5, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f04f 0400 	mov.w	r4, #0
 800460e:	461a      	mov	r2, r3
 8004610:	4623      	mov	r3, r4
 8004612:	f7fb fdd9 	bl	80001c8 <__aeabi_uldivmod>
 8004616:	4603      	mov	r3, r0
 8004618:	460c      	mov	r4, r1
 800461a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800461c:	e017      	b.n	800464e <UART_SetConfig+0x452>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	085b      	lsrs	r3, r3, #1
 8004624:	f04f 0400 	mov.w	r4, #0
 8004628:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800462c:	f144 0100 	adc.w	r1, r4, #0
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f04f 0400 	mov.w	r4, #0
 8004638:	461a      	mov	r2, r3
 800463a:	4623      	mov	r3, r4
 800463c:	f7fb fdc4 	bl	80001c8 <__aeabi_uldivmod>
 8004640:	4603      	mov	r3, r0
 8004642:	460c      	mov	r4, r1
 8004644:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004646:	e002      	b.n	800464e <UART_SetConfig+0x452>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	74fb      	strb	r3, [r7, #19]
            break;
 800464c:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004654:	d308      	bcc.n	8004668 <UART_SetConfig+0x46c>
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800465c:	d204      	bcs.n	8004668 <UART_SetConfig+0x46c>
        {
          huart->Instance->BRR = usartdiv;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	60da      	str	r2, [r3, #12]
 8004666:	e0f4      	b.n	8004852 <UART_SetConfig+0x656>
        }
        else
        {
          ret = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	74fb      	strb	r3, [r7, #19]
 800466c:	e0f1      	b.n	8004852 <UART_SetConfig+0x656>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004676:	d17e      	bne.n	8004776 <UART_SetConfig+0x57a>
  {
    switch (clocksource)
 8004678:	7efb      	ldrb	r3, [r7, #27]
 800467a:	2b08      	cmp	r3, #8
 800467c:	d85b      	bhi.n	8004736 <UART_SetConfig+0x53a>
 800467e:	a201      	add	r2, pc, #4	; (adr r2, 8004684 <UART_SetConfig+0x488>)
 8004680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004684:	080046a9 	.word	0x080046a9
 8004688:	080046c7 	.word	0x080046c7
 800468c:	080046e5 	.word	0x080046e5
 8004690:	08004737 	.word	0x08004737
 8004694:	08004701 	.word	0x08004701
 8004698:	08004737 	.word	0x08004737
 800469c:	08004737 	.word	0x08004737
 80046a0:	08004737 	.word	0x08004737
 80046a4:	0800471f 	.word	0x0800471f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80046a8:	f7fd fab0 	bl	8001c0c <HAL_RCC_GetPCLK1Freq>
 80046ac:	4603      	mov	r3, r0
 80046ae:	005a      	lsls	r2, r3, #1
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	085b      	lsrs	r3, r3, #1
 80046b6:	441a      	add	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80046c4:	e03a      	b.n	800473c <UART_SetConfig+0x540>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80046c6:	f7fd fab7 	bl	8001c38 <HAL_RCC_GetPCLK2Freq>
 80046ca:	4603      	mov	r3, r0
 80046cc:	005a      	lsls	r2, r3, #1
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	085b      	lsrs	r3, r3, #1
 80046d4:	441a      	add	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	fbb2 f3f3 	udiv	r3, r2, r3
 80046de:	b29b      	uxth	r3, r3
 80046e0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80046e2:	e02b      	b.n	800473c <UART_SetConfig+0x540>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	085b      	lsrs	r3, r3, #1
 80046ea:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80046ee:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6852      	ldr	r2, [r2, #4]
 80046f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80046fe:	e01d      	b.n	800473c <UART_SetConfig+0x540>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004700:	f7fd f9ee 	bl	8001ae0 <HAL_RCC_GetSysClockFreq>
 8004704:	4603      	mov	r3, r0
 8004706:	005a      	lsls	r2, r3, #1
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	085b      	lsrs	r3, r3, #1
 800470e:	441a      	add	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	fbb2 f3f3 	udiv	r3, r2, r3
 8004718:	b29b      	uxth	r3, r3
 800471a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800471c:	e00e      	b.n	800473c <UART_SetConfig+0x540>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	085b      	lsrs	r3, r3, #1
 8004724:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004730:	b29b      	uxth	r3, r3
 8004732:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004734:	e002      	b.n	800473c <UART_SetConfig+0x540>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	74fb      	strb	r3, [r7, #19]
        break;
 800473a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	2b0f      	cmp	r3, #15
 8004740:	d916      	bls.n	8004770 <UART_SetConfig+0x574>
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004748:	d212      	bcs.n	8004770 <UART_SetConfig+0x574>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	b29b      	uxth	r3, r3
 800474e:	f023 030f 	bic.w	r3, r3, #15
 8004752:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	085b      	lsrs	r3, r3, #1
 8004758:	b29b      	uxth	r3, r3
 800475a:	f003 0307 	and.w	r3, r3, #7
 800475e:	b29a      	uxth	r2, r3
 8004760:	897b      	ldrh	r3, [r7, #10]
 8004762:	4313      	orrs	r3, r2
 8004764:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	897a      	ldrh	r2, [r7, #10]
 800476c:	60da      	str	r2, [r3, #12]
 800476e:	e070      	b.n	8004852 <UART_SetConfig+0x656>
    }
    else
    {
      ret = HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	74fb      	strb	r3, [r7, #19]
 8004774:	e06d      	b.n	8004852 <UART_SetConfig+0x656>
    }
  }
  else
  {
    switch (clocksource)
 8004776:	7efb      	ldrb	r3, [r7, #27]
 8004778:	2b08      	cmp	r3, #8
 800477a:	d859      	bhi.n	8004830 <UART_SetConfig+0x634>
 800477c:	a201      	add	r2, pc, #4	; (adr r2, 8004784 <UART_SetConfig+0x588>)
 800477e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004782:	bf00      	nop
 8004784:	080047a9 	.word	0x080047a9
 8004788:	080047c5 	.word	0x080047c5
 800478c:	080047e1 	.word	0x080047e1
 8004790:	08004831 	.word	0x08004831
 8004794:	080047fd 	.word	0x080047fd
 8004798:	08004831 	.word	0x08004831
 800479c:	08004831 	.word	0x08004831
 80047a0:	08004831 	.word	0x08004831
 80047a4:	08004819 	.word	0x08004819
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80047a8:	f7fd fa30 	bl	8001c0c <HAL_RCC_GetPCLK1Freq>
 80047ac:	4602      	mov	r2, r0
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	085b      	lsrs	r3, r3, #1
 80047b4:	441a      	add	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80047be:	b29b      	uxth	r3, r3
 80047c0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80047c2:	e038      	b.n	8004836 <UART_SetConfig+0x63a>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80047c4:	f7fd fa38 	bl	8001c38 <HAL_RCC_GetPCLK2Freq>
 80047c8:	4602      	mov	r2, r0
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	085b      	lsrs	r3, r3, #1
 80047d0:	441a      	add	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047da:	b29b      	uxth	r3, r3
 80047dc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80047de:	e02a      	b.n	8004836 <UART_SetConfig+0x63a>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	085b      	lsrs	r3, r3, #1
 80047e6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80047ea:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	6852      	ldr	r2, [r2, #4]
 80047f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80047fa:	e01c      	b.n	8004836 <UART_SetConfig+0x63a>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80047fc:	f7fd f970 	bl	8001ae0 <HAL_RCC_GetSysClockFreq>
 8004800:	4602      	mov	r2, r0
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	085b      	lsrs	r3, r3, #1
 8004808:	441a      	add	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004812:	b29b      	uxth	r3, r3
 8004814:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004816:	e00e      	b.n	8004836 <UART_SetConfig+0x63a>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	085b      	lsrs	r3, r3, #1
 800481e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	fbb2 f3f3 	udiv	r3, r2, r3
 800482a:	b29b      	uxth	r3, r3
 800482c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800482e:	e002      	b.n	8004836 <UART_SetConfig+0x63a>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	74fb      	strb	r3, [r7, #19]
        break;
 8004834:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2b0f      	cmp	r3, #15
 800483a:	d908      	bls.n	800484e <UART_SetConfig+0x652>
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004842:	d204      	bcs.n	800484e <UART_SetConfig+0x652>
    {
      huart->Instance->BRR = usartdiv;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	60da      	str	r2, [r3, #12]
 800484c:	e001      	b.n	8004852 <UART_SetConfig+0x656>
    }
    else
    {
      ret = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800485e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004860:	4618      	mov	r0, r3
 8004862:	3720      	adds	r7, #32
 8004864:	46bd      	mov	sp, r7
 8004866:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800486a:	bf00      	nop
 800486c:	f4240000 	.word	0xf4240000

08004870 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00a      	beq.n	800489a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6812      	ldr	r2, [r2, #0]
 800488c:	6852      	ldr	r2, [r2, #4]
 800488e:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004896:	430a      	orrs	r2, r1
 8004898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00a      	beq.n	80048bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6812      	ldr	r2, [r2, #0]
 80048ae:	6852      	ldr	r2, [r2, #4]
 80048b0:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80048b8:	430a      	orrs	r2, r1
 80048ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00a      	beq.n	80048de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	6812      	ldr	r2, [r2, #0]
 80048d0:	6852      	ldr	r2, [r2, #4]
 80048d2:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80048da:	430a      	orrs	r2, r1
 80048dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	f003 0308 	and.w	r3, r3, #8
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	6812      	ldr	r2, [r2, #0]
 80048f2:	6852      	ldr	r2, [r2, #4]
 80048f4:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80048fc:	430a      	orrs	r2, r1
 80048fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	f003 0310 	and.w	r3, r3, #16
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00a      	beq.n	8004922 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	6812      	ldr	r2, [r2, #0]
 8004914:	6892      	ldr	r2, [r2, #8]
 8004916:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800491e:	430a      	orrs	r2, r1
 8004920:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	f003 0320 	and.w	r3, r3, #32
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	6812      	ldr	r2, [r2, #0]
 8004936:	6892      	ldr	r2, [r2, #8]
 8004938:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004940:	430a      	orrs	r2, r1
 8004942:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494c:	2b00      	cmp	r3, #0
 800494e:	d01a      	beq.n	8004986 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6812      	ldr	r2, [r2, #0]
 8004958:	6852      	ldr	r2, [r2, #4]
 800495a:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004962:	430a      	orrs	r2, r1
 8004964:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800496e:	d10a      	bne.n	8004986 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	6812      	ldr	r2, [r2, #0]
 8004978:	6852      	ldr	r2, [r2, #4]
 800497a:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004982:	430a      	orrs	r2, r1
 8004984:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00a      	beq.n	80049a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	6812      	ldr	r2, [r2, #0]
 800499a:	6852      	ldr	r2, [r2, #4]
 800499c:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80049a4:	430a      	orrs	r2, r1
 80049a6:	605a      	str	r2, [r3, #4]
  }
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af02      	add	r7, sp, #8
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80049c2:	f7fb fdf5 	bl	80005b0 <HAL_GetTick>
 80049c6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0308 	and.w	r3, r3, #8
 80049d2:	2b08      	cmp	r3, #8
 80049d4:	d10e      	bne.n	80049f4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f82a 	bl	8004a3e <UART_WaitOnFlagUntilTimeout>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e020      	b.n	8004a36 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0304 	and.w	r3, r3, #4
 80049fe:	2b04      	cmp	r3, #4
 8004a00:	d10e      	bne.n	8004a20 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a02:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a06:	9300      	str	r3, [sp, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 f814 	bl	8004a3e <UART_WaitOnFlagUntilTimeout>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e00a      	b.n	8004a36 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2220      	movs	r2, #32
 8004a24:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b084      	sub	sp, #16
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	60f8      	str	r0, [r7, #12]
 8004a46:	60b9      	str	r1, [r7, #8]
 8004a48:	603b      	str	r3, [r7, #0]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a4e:	e02a      	b.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a56:	d026      	beq.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a58:	f7fb fdaa 	bl	80005b0 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	1ad2      	subs	r2, r2, r3
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d802      	bhi.n	8004a6e <UART_WaitOnFlagUntilTimeout+0x30>
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d11b      	bne.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	6812      	ldr	r2, [r2, #0]
 8004a76:	6812      	ldr	r2, [r2, #0]
 8004a78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a7c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	6812      	ldr	r2, [r2, #0]
 8004a86:	6892      	ldr	r2, [r2, #8]
 8004a88:	f022 0201 	bic.w	r2, r2, #1
 8004a8c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2220      	movs	r2, #32
 8004a92:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2220      	movs	r2, #32
 8004a98:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e00f      	b.n	8004ac6 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	69da      	ldr	r2, [r3, #28]
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	401a      	ands	r2, r3
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	bf0c      	ite	eq
 8004ab6:	2301      	moveq	r3, #1
 8004ab8:	2300      	movne	r3, #0
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	461a      	mov	r2, r3
 8004abe:	79fb      	ldrb	r3, [r7, #7]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d0c5      	beq.n	8004a50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	6812      	ldr	r2, [r2, #0]
 8004ade:	6812      	ldr	r2, [r2, #0]
 8004ae0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004ae4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6812      	ldr	r2, [r2, #0]
 8004b08:	6812      	ldr	r2, [r2, #0]
 8004b0a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b0e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6812      	ldr	r2, [r2, #0]
 8004b18:	6892      	ldr	r2, [r2, #8]
 8004b1a:	f022 0201 	bic.w	r2, r2, #1
 8004b1e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2220      	movs	r2, #32
 8004b24:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b44:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0320 	and.w	r3, r3, #32
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d114      	bne.n	8004b7e <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	6812      	ldr	r2, [r2, #0]
 8004b64:	6892      	ldr	r2, [r2, #8]
 8004b66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b6a:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	6812      	ldr	r2, [r2, #0]
 8004b74:	6812      	ldr	r2, [r2, #0]
 8004b76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b7a:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b7c:	e002      	b.n	8004b84 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f7ff fb00 	bl	8004184 <HAL_UART_TxCpltCallback>
}
 8004b84:	bf00      	nop
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b98:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f7ff fafc 	bl	8004198 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ba0:	bf00      	nop
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0320 	and.w	r3, r3, #32
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d11e      	bne.n	8004c02 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	6812      	ldr	r2, [r2, #0]
 8004bd4:	6812      	ldr	r2, [r2, #0]
 8004bd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bda:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	6812      	ldr	r2, [r2, #0]
 8004be4:	6892      	ldr	r2, [r2, #8]
 8004be6:	f022 0201 	bic.w	r2, r2, #1
 8004bea:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	6812      	ldr	r2, [r2, #0]
 8004bf4:	6892      	ldr	r2, [r2, #8]
 8004bf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bfa:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f7ff fad2 	bl	80041ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c08:	bf00      	nop
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f7ff face 	bl	80041c0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c24:	bf00      	nop
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c38:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c3e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c44:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c50:	2b80      	cmp	r3, #128	; 0x80
 8004c52:	d109      	bne.n	8004c68 <UART_DMAError+0x3c>
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	2b21      	cmp	r3, #33	; 0x21
 8004c58:	d106      	bne.n	8004c68 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004c62:	6978      	ldr	r0, [r7, #20]
 8004c64:	f7ff ff33 	bl	8004ace <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c72:	2b40      	cmp	r3, #64	; 0x40
 8004c74:	d109      	bne.n	8004c8a <UART_DMAError+0x5e>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2b22      	cmp	r3, #34	; 0x22
 8004c7a:	d106      	bne.n	8004c8a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004c84:	6978      	ldr	r0, [r7, #20]
 8004c86:	f7ff ff37 	bl	8004af8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c8e:	f043 0210 	orr.w	r2, r3, #16
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c96:	6978      	ldr	r0, [r7, #20]
 8004c98:	f7ff fa9c 	bl	80041d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c9c:	bf00      	nop
 8004c9e:	3718      	adds	r7, #24
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <UART_DMATxOnlyAbortCallback>:
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb0:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0U;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f7ff fa91 	bl	80041e8 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cc6:	bf00      	nop
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <Clear_Buffer>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void  Clear_Buffer(uint8_t *buffer,uint32_t size)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b082      	sub	sp, #8
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
 8004cd6:	6039      	str	r1, [r7, #0]
	memset(buffer,0,size);
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	2100      	movs	r1, #0
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f001 f87e 	bl	8005dde <memset>
}
 8004ce2:	bf00      	nop
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
	...

08004cec <USART_Set_Baudrate>:

HAL_StatusTypeDef USART_Set_Baudrate(UART_HandleTypeDef* huart, TIM_HandleTypeDef *htim, uint32_t baud)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
	//disable UART peripheral and change baud rate
 	 huart->Instance->CR1 &= ~USART_CR1_UE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	6812      	ldr	r2, [r2, #0]
 8004d00:	6812      	ldr	r2, [r2, #0]
 8004d02:	f022 0201 	bic.w	r2, r2, #1
 8004d06:	601a      	str	r2, [r3, #0]
	 huart->Init.BaudRate = baud;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	605a      	str	r2, [r3, #4]
	 if(HAL_UART_Init(huart) != HAL_OK)
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f7ff f828 	bl	8003d64 <HAL_UART_Init>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <USART_Set_Baudrate+0x32>
	 {
		return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e048      	b.n	8004db0 <USART_Set_Baudrate+0xc4>
	 }
	 huart->Instance->CR1 |= USART_CR1_UE;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	6812      	ldr	r2, [r2, #0]
 8004d26:	6812      	ldr	r2, [r2, #0]
 8004d28:	f042 0201 	orr.w	r2, r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]
	 //clear all errors
	 //clear framing error
	 if(__HAL_UART_GET_FLAG(huart,UART_FLAG_FE) == SET)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69db      	ldr	r3, [r3, #28]
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d103      	bne.n	8004d44 <USART_Set_Baudrate+0x58>
	 {
	 	__HAL_UART_CLEAR_FEFLAG(huart);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2202      	movs	r2, #2
 8004d42:	621a      	str	r2, [r3, #32]
	 }
	 //clear noise error
	 if(__HAL_UART_GET_FLAG(huart,UART_FLAG_NE) == SET)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	f003 0304 	and.w	r3, r3, #4
 8004d4e:	2b04      	cmp	r3, #4
 8004d50:	d103      	bne.n	8004d5a <USART_Set_Baudrate+0x6e>
	 {
	 	__HAL_UART_CLEAR_NEFLAG(huart);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2204      	movs	r2, #4
 8004d58:	621a      	str	r2, [r3, #32]
	 }
	 //clear overun error
	 if(__HAL_UART_GET_FLAG(huart,UART_FLAG_ORE) == SET)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	f003 0308 	and.w	r3, r3, #8
 8004d64:	2b08      	cmp	r3, #8
 8004d66:	d108      	bne.n	8004d7a <USART_Set_Baudrate+0x8e>
	 {
	 	uint8_t temp = huart4.Instance->RDR;
 8004d68:	4b13      	ldr	r3, [pc, #76]	; (8004db8 <USART_Set_Baudrate+0xcc>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	75fb      	strb	r3, [r7, #23]
	 	(void)temp;
	 	__HAL_UART_CLEAR_OREFLAG(huart);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2208      	movs	r2, #8
 8004d78:	621a      	str	r2, [r3, #32]
	 }
	 //clear parity errors
	 if(__HAL_UART_GET_FLAG(huart,UART_FLAG_PE) == SET)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	69db      	ldr	r3, [r3, #28]
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d103      	bne.n	8004d90 <USART_Set_Baudrate+0xa4>
	 {
	 	__HAL_UART_CLEAR_PEFLAG(huart);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	621a      	str	r2, [r3, #32]
	 }
	 //clear hanging idle flag
	 if(__HAL_UART_GET_FLAG(huart,UART_FLAG_IDLE) == SET)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	69db      	ldr	r3, [r3, #28]
 8004d96:	f003 0310 	and.w	r3, r3, #16
 8004d9a:	2b10      	cmp	r3, #16
 8004d9c:	d103      	bne.n	8004da6 <USART_Set_Baudrate+0xba>
	 {
	  	__HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2210      	movs	r2, #16
 8004da4:	621a      	str	r2, [r3, #32]
     }
	 //increase Timeout value to allow for longer waits
	 __HAL_TIM_SET_COMPARE(htim,TIM_CHANNEL_1,1152000);
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a04      	ldr	r2, [pc, #16]	; (8004dbc <USART_Set_Baudrate+0xd0>)
 8004dac:	635a      	str	r2, [r3, #52]	; 0x34
	 return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3718      	adds	r7, #24
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	200008c8 	.word	0x200008c8
 8004dbc:	00119400 	.word	0x00119400

08004dc0 <USART_TIM_RTO_Handler>:
	  HAL_DMA_Start(&hdma_memtomem_dma1_channel1,(uint32_t)DMA_RX_Buffer,(uint32_t)GNSS_Buffer,i);
	  while(M2M_Txfer_Cplt != SET);
}

void USART_TIM_RTO_Handler(TIM_HandleTypeDef *htim)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
	if(__HAL_TIM_GET_IT_SOURCE(&htim2,TIM_IT_CC1))
 8004dc8:	4b0a      	ldr	r3, [pc, #40]	; (8004df4 <USART_TIM_RTO_Handler+0x34>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d10a      	bne.n	8004dec <USART_TIM_RTO_Handler+0x2c>
	{
		//clear interrupt
		__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1|TIM_IT_UPDATE);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f06f 0203 	mvn.w	r2, #3
 8004dde:	611a      	str	r2, [r3, #16]
		//set reciever timeout flag
		TIM_IDLE_Timeout = 1;
 8004de0:	4b05      	ldr	r3, [pc, #20]	; (8004df8 <USART_TIM_RTO_Handler+0x38>)
 8004de2:	2201      	movs	r2, #1
 8004de4:	701a      	strb	r2, [r3, #0]
		//disable timer
		HAL_TIM_Base_Stop_IT(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f7fd fccc 	bl	8002784 <HAL_TIM_Base_Stop_IT>

	}
}
 8004dec:	bf00      	nop
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	20000948 	.word	0x20000948
 8004df8:	20000078 	.word	0x20000078

08004dfc <DMA_GNSS_MEM_IRQHandler>:
void DMA_GNSS_MEM_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
		M2M_Txfer_Cplt = SET;
 8004e04:	4b04      	ldr	r3, [pc, #16]	; (8004e18 <DMA_GNSS_MEM_IRQHandler+0x1c>)
 8004e06:	2201      	movs	r2, #1
 8004e08:	701a      	strb	r2, [r3, #0]

}
 8004e0a:	bf00      	nop
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	200000c4 	.word	0x200000c4

08004e1c <DMA_GNSS_Periph_IRQHandler>:

void DMA_GNSS_Periph_IRQHandler(DMA_HandleTypeDef *hdma_periph, DMA_HandleTypeDef *hdma_mem)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
	if(__HAL_DMA_GET_IT_SOURCE(hdma_periph,DMA_IT_TC))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d037      	beq.n	8004ea4 <DMA_GNSS_Periph_IRQHandler+0x88>
	{
		__HAL_DMA_CLEAR_FLAG(hdma_periph,DMA_FLAG_TC5);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	461a      	mov	r2, r3
 8004e3a:	4b38      	ldr	r3, [pc, #224]	; (8004f1c <DMA_GNSS_Periph_IRQHandler+0x100>)
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d904      	bls.n	8004e4a <DMA_GNSS_Periph_IRQHandler+0x2e>
 8004e40:	4b37      	ldr	r3, [pc, #220]	; (8004f20 <DMA_GNSS_Periph_IRQHandler+0x104>)
 8004e42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e46:	605a      	str	r2, [r3, #4]
 8004e48:	e003      	b.n	8004e52 <DMA_GNSS_Periph_IRQHandler+0x36>
 8004e4a:	4b36      	ldr	r3, [pc, #216]	; (8004f24 <DMA_GNSS_Periph_IRQHandler+0x108>)
 8004e4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e50:	605a      	str	r2, [r3, #4]
		//stop timer and reset flag
		HAL_TIM_Base_Stop(&htim2);
 8004e52:	4835      	ldr	r0, [pc, #212]	; (8004f28 <DMA_GNSS_Periph_IRQHandler+0x10c>)
 8004e54:	f7fd fc41 	bl	80026da <HAL_TIM_Base_Stop>
		__HAL_TIM_DISABLE_IT(&htim2,TIM_IT_CC1);
 8004e58:	4b33      	ldr	r3, [pc, #204]	; (8004f28 <DMA_GNSS_Periph_IRQHandler+0x10c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a32      	ldr	r2, [pc, #200]	; (8004f28 <DMA_GNSS_Periph_IRQHandler+0x10c>)
 8004e5e:	6812      	ldr	r2, [r2, #0]
 8004e60:	68d2      	ldr	r2, [r2, #12]
 8004e62:	f022 0202 	bic.w	r2, r2, #2
 8004e66:	60da      	str	r2, [r3, #12]
		if(__HAL_TIM_GET_FLAG(&htim2,TIM_FLAG_CC1))
 8004e68:	4b2f      	ldr	r3, [pc, #188]	; (8004f28 <DMA_GNSS_Periph_IRQHandler+0x10c>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d104      	bne.n	8004e80 <DMA_GNSS_Periph_IRQHandler+0x64>
		{
			__HAL_TIM_CLEAR_FLAG(&htim2,TIM_FLAG_CC1);
 8004e76:	4b2c      	ldr	r3, [pc, #176]	; (8004f28 <DMA_GNSS_Periph_IRQHandler+0x10c>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f06f 0202 	mvn.w	r2, #2
 8004e7e:	611a      	str	r2, [r3, #16]
		}
		TIM_IDLE_Timeout = RESET;
 8004e80:	4b2a      	ldr	r3, [pc, #168]	; (8004f2c <DMA_GNSS_Periph_IRQHandler+0x110>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	701a      	strb	r2, [r3, #0]

		//begin a Memory to Memory PEripheral transfer
		__HAL_DMA_ENABLE_IT(&hdma_memtomem_dma1_channel1,DMA_IT_TC);
 8004e86:	4b2a      	ldr	r3, [pc, #168]	; (8004f30 <DMA_GNSS_Periph_IRQHandler+0x114>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a29      	ldr	r2, [pc, #164]	; (8004f30 <DMA_GNSS_Periph_IRQHandler+0x114>)
 8004e8c:	6812      	ldr	r2, [r2, #0]
 8004e8e:	6812      	ldr	r2, [r2, #0]
 8004e90:	f042 0202 	orr.w	r2, r2, #2
 8004e94:	601a      	str	r2, [r3, #0]
		HAL_DMA_Start(hdma_mem,(uint32_t)DMA_RX_Buffer,(uint32_t)GNSS_Buffer,DMA_RX_BUFFER_SIZE);
 8004e96:	4927      	ldr	r1, [pc, #156]	; (8004f34 <DMA_GNSS_Periph_IRQHandler+0x118>)
 8004e98:	4a27      	ldr	r2, [pc, #156]	; (8004f38 <DMA_GNSS_Periph_IRQHandler+0x11c>)
 8004e9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e9e:	6838      	ldr	r0, [r7, #0]
 8004ea0:	f7fb fd5a 	bl	8000958 <HAL_DMA_Start>

	}if(__HAL_DMA_GET_IT_SOURCE(hdma_periph,DMA_IT_HT))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0304 	and.w	r3, r3, #4
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d014      	beq.n	8004edc <DMA_GNSS_Periph_IRQHandler+0xc0>
	{
		__HAL_DMA_CLEAR_FLAG(hdma_periph,DMA_IT_HT);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	4b18      	ldr	r3, [pc, #96]	; (8004f1c <DMA_GNSS_Periph_IRQHandler+0x100>)
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d903      	bls.n	8004ec6 <DMA_GNSS_Periph_IRQHandler+0xaa>
 8004ebe:	4b18      	ldr	r3, [pc, #96]	; (8004f20 <DMA_GNSS_Periph_IRQHandler+0x104>)
 8004ec0:	2204      	movs	r2, #4
 8004ec2:	605a      	str	r2, [r3, #4]
 8004ec4:	e002      	b.n	8004ecc <DMA_GNSS_Periph_IRQHandler+0xb0>
 8004ec6:	4b17      	ldr	r3, [pc, #92]	; (8004f24 <DMA_GNSS_Periph_IRQHandler+0x108>)
 8004ec8:	2204      	movs	r2, #4
 8004eca:	605a      	str	r2, [r3, #4]
		__HAL_DMA_DISABLE_IT(hdma_periph,DMA_IT_HT);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	6812      	ldr	r2, [r2, #0]
 8004ed4:	6812      	ldr	r2, [r2, #0]
 8004ed6:	f022 0204 	bic.w	r2, r2, #4
 8004eda:	601a      	str	r2, [r3, #0]
	}
	if(__HAL_DMA_GET_IT_SOURCE(hdma_periph,DMA_IT_TE))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0308 	and.w	r3, r3, #8
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d014      	beq.n	8004f14 <DMA_GNSS_Periph_IRQHandler+0xf8>
	{
		__HAL_DMA_CLEAR_FLAG(hdma_periph,DMA_IT_TE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	4b0a      	ldr	r3, [pc, #40]	; (8004f1c <DMA_GNSS_Periph_IRQHandler+0x100>)
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d903      	bls.n	8004efe <DMA_GNSS_Periph_IRQHandler+0xe2>
 8004ef6:	4b0a      	ldr	r3, [pc, #40]	; (8004f20 <DMA_GNSS_Periph_IRQHandler+0x104>)
 8004ef8:	2208      	movs	r2, #8
 8004efa:	605a      	str	r2, [r3, #4]
 8004efc:	e002      	b.n	8004f04 <DMA_GNSS_Periph_IRQHandler+0xe8>
 8004efe:	4b09      	ldr	r3, [pc, #36]	; (8004f24 <DMA_GNSS_Periph_IRQHandler+0x108>)
 8004f00:	2208      	movs	r2, #8
 8004f02:	605a      	str	r2, [r3, #4]
		__HAL_DMA_DISABLE_IT(hdma_periph,DMA_IT_TE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	6812      	ldr	r2, [r2, #0]
 8004f0c:	6812      	ldr	r2, [r2, #0]
 8004f0e:	f022 0208 	bic.w	r2, r2, #8
 8004f12:	601a      	str	r2, [r3, #0]
	}
}
 8004f14:	bf00      	nop
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	40020080 	.word	0x40020080
 8004f20:	40020400 	.word	0x40020400
 8004f24:	40020000 	.word	0x40020000
 8004f28:	20000948 	.word	0x20000948
 8004f2c:	20000078 	.word	0x20000078
 8004f30:	2000007c 	.word	0x2000007c
 8004f34:	200000c8 	.word	0x200000c8
 8004f38:	20000988 	.word	0x20000988

08004f3c <USART_GPS_IRQHandler>:

void USART_GPS_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
	if(__HAL_UART_GET_IT_SOURCE(huart,UART_IT_IDLE))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0310 	and.w	r3, r3, #16
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d03e      	beq.n	8004fd0 <USART_GPS_IRQHandler+0x94>
	{
		uint32_t temp = huart->Instance->ISR;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	69db      	ldr	r3, [r3, #28]
 8004f58:	60fb      	str	r3, [r7, #12]
		temp = huart->Instance->RDR;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	60fb      	str	r3, [r7, #12]
		 * 		   disable Periph-Mem stream and
		 * 		   begin Mem - Mem transfer of known data
		 *
		 */
		//check flag in TIM2
		if(TIM_IDLE_Timeout == SET)
 8004f64:	4b45      	ldr	r3, [pc, #276]	; (800507c <USART_GPS_IRQHandler+0x140>)
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d12d      	bne.n	8004fc8 <USART_GPS_IRQHandler+0x8c>
		{
			gnss_length = DMA_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8004f78:	461a      	mov	r2, r3
 8004f7a:	4b41      	ldr	r3, [pc, #260]	; (8005080 <USART_GPS_IRQHandler+0x144>)
 8004f7c:	601a      	str	r2, [r3, #0]
			//Disable DMA and unlink from UART
			HAL_UART_DMAStop(huart);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7ff f83e 	bl	8004000 <HAL_UART_DMAStop>
			//Timeout case: USART has recieved no data, Reciever timeout

			if(gnss_length > 0)
 8004f84:	4b3e      	ldr	r3, [pc, #248]	; (8005080 <USART_GPS_IRQHandler+0x144>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	dd0f      	ble.n	8004fac <USART_GPS_IRQHandler+0x70>
			{
				//begin transfer from mem to mem
				__HAL_DMA_ENABLE_IT(&hdma_memtomem_dma1_channel1,DMA_IT_TC);
 8004f8c:	4b3d      	ldr	r3, [pc, #244]	; (8005084 <USART_GPS_IRQHandler+0x148>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a3c      	ldr	r2, [pc, #240]	; (8005084 <USART_GPS_IRQHandler+0x148>)
 8004f92:	6812      	ldr	r2, [r2, #0]
 8004f94:	6812      	ldr	r2, [r2, #0]
 8004f96:	f042 0202 	orr.w	r2, r2, #2
 8004f9a:	601a      	str	r2, [r3, #0]
				HAL_DMA_Start(&hdma_memtomem_dma1_channel1,(uint32_t)DMA_RX_Buffer,(uint32_t)GNSS_Buffer,gnss_length);
 8004f9c:	493a      	ldr	r1, [pc, #232]	; (8005088 <USART_GPS_IRQHandler+0x14c>)
 8004f9e:	4a3b      	ldr	r2, [pc, #236]	; (800508c <USART_GPS_IRQHandler+0x150>)
 8004fa0:	4b37      	ldr	r3, [pc, #220]	; (8005080 <USART_GPS_IRQHandler+0x144>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4837      	ldr	r0, [pc, #220]	; (8005084 <USART_GPS_IRQHandler+0x148>)
 8004fa6:	f7fb fcd7 	bl	8000958 <HAL_DMA_Start>
 8004faa:	e002      	b.n	8004fb2 <USART_GPS_IRQHandler+0x76>
			/*
			 * Case 2: gnss_length == 0;
			 *
			 * Reciever has recieved no data and has thus timed out.
			 */
				M2M_Txfer_Cplt = HAL_TIMEOUT;
 8004fac:	4b38      	ldr	r3, [pc, #224]	; (8005090 <USART_GPS_IRQHandler+0x154>)
 8004fae:	2203      	movs	r2, #3
 8004fb0:	701a      	strb	r2, [r3, #0]
			}
			//clear tim flag
			TIM_IDLE_Timeout = 0;
 8004fb2:	4b32      	ldr	r3, [pc, #200]	; (800507c <USART_GPS_IRQHandler+0x140>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	701a      	strb	r2, [r3, #0]
			__HAL_UART_DISABLE_IT(huart,UART_IT_IDLE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	6812      	ldr	r2, [r2, #0]
 8004fc0:	6812      	ldr	r2, [r2, #0]
 8004fc2:	f022 0210 	bic.w	r2, r2, #16
 8004fc6:	601a      	str	r2, [r3, #0]
		}

		__HAL_UART_CLEAR_FLAG(huart,UART_FLAG_IDLE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2210      	movs	r2, #16
 8004fce:	621a      	str	r2, [r3, #32]
	} if(__HAL_UART_GET_IT_SOURCE(huart,UART_IT_TC))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d011      	beq.n	8005002 <USART_GPS_IRQHandler+0xc6>
	{

		HAL_UART_AbortTransmit_IT(huart);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7ff f87a 	bl	80040d8 <HAL_UART_AbortTransmit_IT>
		__HAL_UART_CLEAR_FLAG(huart,UART_FLAG_IDLE);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2210      	movs	r2, #16
 8004fea:	621a      	str	r2, [r3, #32]
		__HAL_UART_DISABLE_IT(huart,UART_IT_IDLE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	6812      	ldr	r2, [r2, #0]
 8004ff4:	6812      	ldr	r2, [r2, #0]
 8004ff6:	f022 0210 	bic.w	r2, r2, #16
 8004ffa:	601a      	str	r2, [r3, #0]
		TX_Cplt = 1;
 8004ffc:	4b25      	ldr	r3, [pc, #148]	; (8005094 <USART_GPS_IRQHandler+0x158>)
 8004ffe:	2201      	movs	r2, #1
 8005000:	701a      	strb	r2, [r3, #0]

	}
	// additional error handling
	if(__HAL_UART_GET_IT_SOURCE(huart,UART_IT_ERR))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	2b00      	cmp	r3, #0
 800500e:	d030      	beq.n	8005072 <USART_GPS_IRQHandler+0x136>
	{
		//clear framing error
		if(__HAL_UART_GET_FLAG(huart,UART_FLAG_FE) == SET)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b02      	cmp	r3, #2
 800501c:	d103      	bne.n	8005026 <USART_GPS_IRQHandler+0xea>
		{
			__HAL_UART_CLEAR_FEFLAG(huart);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2202      	movs	r2, #2
 8005024:	621a      	str	r2, [r3, #32]
		}
		//clear noise error
		if(__HAL_UART_GET_FLAG(huart,UART_FLAG_NE) == SET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	69db      	ldr	r3, [r3, #28]
 800502c:	f003 0304 	and.w	r3, r3, #4
 8005030:	2b04      	cmp	r3, #4
 8005032:	d103      	bne.n	800503c <USART_GPS_IRQHandler+0x100>
		{
			__HAL_UART_CLEAR_NEFLAG(huart);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2204      	movs	r2, #4
 800503a:	621a      	str	r2, [r3, #32]
		}
		//clear overun error
		if(__HAL_UART_GET_FLAG(huart,UART_FLAG_ORE) == SET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	f003 0308 	and.w	r3, r3, #8
 8005046:	2b08      	cmp	r3, #8
 8005048:	d108      	bne.n	800505c <USART_GPS_IRQHandler+0x120>
		{
			uint8_t temp = huart->Instance->RDR;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005050:	b29b      	uxth	r3, r3
 8005052:	72fb      	strb	r3, [r7, #11]
			(void)temp;
			__HAL_UART_CLEAR_OREFLAG(huart);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2208      	movs	r2, #8
 800505a:	621a      	str	r2, [r3, #32]
		}
		//clear parity errors
		if(__HAL_UART_GET_FLAG(huart,UART_FLAG_PE) == SET)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b01      	cmp	r3, #1
 8005068:	d103      	bne.n	8005072 <USART_GPS_IRQHandler+0x136>
		{
			__HAL_UART_CLEAR_PEFLAG(huart);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2201      	movs	r2, #1
 8005070:	621a      	str	r2, [r3, #32]
		}
	}
}
 8005072:	bf00      	nop
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	20000078 	.word	0x20000078
 8005080:	20000074 	.word	0x20000074
 8005084:	2000007c 	.word	0x2000007c
 8005088:	200000c8 	.word	0x200000c8
 800508c:	20000988 	.word	0x20000988
 8005090:	200000c4 	.word	0x200000c4
 8005094:	20001188 	.word	0x20001188

08005098 <UBX_Send_Ack>:

UBX_MSG_t UBX_Send_Ack(UART_HandleTypeDef *huart,TIM_HandleTypeDef *htim)
{
 8005098:	b5b0      	push	{r4, r5, r7, lr}
 800509a:	b092      	sub	sp, #72	; 0x48
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
	 uint8_t ubx_ack_string[] = {0xB5 ,0x62 ,0x06 ,0x09 ,0x0D ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0xFF ,0xFF ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x17 ,0x31 ,0xBF };
 80050a2:	4b82      	ldr	r3, [pc, #520]	; (80052ac <UBX_Send_Ack+0x214>)
 80050a4:	f107 0418 	add.w	r4, r7, #24
 80050a8:	461d      	mov	r5, r3
 80050aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80050b2:	6020      	str	r0, [r4, #0]
 80050b4:	3404      	adds	r4, #4
 80050b6:	7021      	strb	r1, [r4, #0]
	 int size = (sizeof(ubx_ack_string)/sizeof(*ubx_ack_string));
 80050b8:	2315      	movs	r3, #21
 80050ba:	63bb      	str	r3, [r7, #56]	; 0x38
	 for (int i = 0; i < size ; ++i)
 80050bc:	2300      	movs	r3, #0
 80050be:	647b      	str	r3, [r7, #68]	; 0x44
 80050c0:	e00c      	b.n	80050dc <UBX_Send_Ack+0x44>
	 {
	  	DMA_TX_Buffer[i] = ubx_ack_string[i];
 80050c2:	f107 0218 	add.w	r2, r7, #24
 80050c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050c8:	4413      	add	r3, r2
 80050ca:	7819      	ldrb	r1, [r3, #0]
 80050cc:	4a78      	ldr	r2, [pc, #480]	; (80052b0 <UBX_Send_Ack+0x218>)
 80050ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050d0:	4413      	add	r3, r2
 80050d2:	460a      	mov	r2, r1
 80050d4:	701a      	strb	r2, [r3, #0]
	 for (int i = 0; i < size ; ++i)
 80050d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050d8:	3301      	adds	r3, #1
 80050da:	647b      	str	r3, [r7, #68]	; 0x44
 80050dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e0:	429a      	cmp	r2, r3
 80050e2:	dbee      	blt.n	80050c2 <UBX_Send_Ack+0x2a>
	 }
	 TX_Cplt = 0;
 80050e4:	4b73      	ldr	r3, [pc, #460]	; (80052b4 <UBX_Send_Ack+0x21c>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	701a      	strb	r2, [r3, #0]
	 if(__HAL_UART_GET_FLAG(huart,UART_FLAG_TC))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	69db      	ldr	r3, [r3, #28]
 80050f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f4:	2b40      	cmp	r3, #64	; 0x40
 80050f6:	d103      	bne.n	8005100 <UBX_Send_Ack+0x68>
	 {
		 __HAL_UART_CLEAR_FLAG(huart,UART_FLAG_TC);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2240      	movs	r2, #64	; 0x40
 80050fe:	621a      	str	r2, [r3, #32]
	 }
	 __HAL_UART_ENABLE_IT(&huart4,UART_IT_TC);
 8005100:	4b6d      	ldr	r3, [pc, #436]	; (80052b8 <UBX_Send_Ack+0x220>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a6c      	ldr	r2, [pc, #432]	; (80052b8 <UBX_Send_Ack+0x220>)
 8005106:	6812      	ldr	r2, [r2, #0]
 8005108:	6812      	ldr	r2, [r2, #0]
 800510a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800510e:	601a      	str	r2, [r3, #0]
	 if( HAL_UART_Transmit_DMA(&huart4,DMA_TX_Buffer, size) == HAL_OK)
 8005110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005112:	b29b      	uxth	r3, r3
 8005114:	461a      	mov	r2, r3
 8005116:	4966      	ldr	r1, [pc, #408]	; (80052b0 <UBX_Send_Ack+0x218>)
 8005118:	4867      	ldr	r0, [pc, #412]	; (80052b8 <UBX_Send_Ack+0x220>)
 800511a:	f7fe fe71 	bl	8003e00 <HAL_UART_Transmit_DMA>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d145      	bne.n	80051b0 <UBX_Send_Ack+0x118>
	 {
	  //begin DMA Reception
	 while(TX_Cplt != SET);
 8005124:	bf00      	nop
 8005126:	4b63      	ldr	r3, [pc, #396]	; (80052b4 <UBX_Send_Ack+0x21c>)
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d1fb      	bne.n	8005126 <UBX_Send_Ack+0x8e>
	 TX_Cplt = 0; //clear flag
 800512e:	4b61      	ldr	r3, [pc, #388]	; (80052b4 <UBX_Send_Ack+0x21c>)
 8005130:	2200      	movs	r2, #0
 8005132:	701a      	strb	r2, [r3, #0]
	 __HAL_UART_ENABLE_IT(huart,UART_IT_IDLE);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	6812      	ldr	r2, [r2, #0]
 800513c:	6812      	ldr	r2, [r2, #0]
 800513e:	f042 0210 	orr.w	r2, r2, #16
 8005142:	601a      	str	r2, [r3, #0]
	 __HAL_DMA_ENABLE_IT(huart->hdmarx, DMA_IT_TC);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800514e:	6812      	ldr	r2, [r2, #0]
 8005150:	6812      	ldr	r2, [r2, #0]
 8005152:	f042 0202 	orr.w	r2, r2, #2
 8005156:	601a      	str	r2, [r3, #0]
	 if(__HAL_TIM_GET_FLAG(htim,TIM_FLAG_CC1) == SET)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b02      	cmp	r3, #2
 8005164:	d104      	bne.n	8005170 <UBX_Send_Ack+0xd8>
	 {
		 __HAL_TIM_CLEAR_FLAG(htim,TIM_FLAG_CC1);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f06f 0202 	mvn.w	r2, #2
 800516e:	611a      	str	r2, [r3, #16]
	 }
	 M2M_Txfer_Cplt = 0;
 8005170:	4b52      	ldr	r3, [pc, #328]	; (80052bc <UBX_Send_Ack+0x224>)
 8005172:	2200      	movs	r2, #0
 8005174:	701a      	strb	r2, [r3, #0]
	 HAL_UART_Receive_DMA(huart,DMA_RX_Buffer, DMA_RX_BUFFER_SIZE);
 8005176:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800517a:	4951      	ldr	r1, [pc, #324]	; (80052c0 <UBX_Send_Ack+0x228>)
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f7fe febb 	bl	8003ef8 <HAL_UART_Receive_DMA>
	 __HAL_TIM_ENABLE_IT(htim,TIM_IT_CC1);
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	6812      	ldr	r2, [r2, #0]
 800518a:	68d2      	ldr	r2, [r2, #12]
 800518c:	f042 0202 	orr.w	r2, r2, #2
 8005190:	60da      	str	r2, [r3, #12]
	 HAL_TIM_OC_Start_IT(htim, TIM_CHANNEL_1);
 8005192:	2100      	movs	r1, #0
 8005194:	6838      	ldr	r0, [r7, #0]
 8005196:	f7fd fb55 	bl	8002844 <HAL_TIM_OC_Start_IT>
	 HAL_TIM_Base_Start_IT(htim);
 800519a:	6838      	ldr	r0, [r7, #0]
 800519c:	f7fd fac8 	bl	8002730 <HAL_TIM_Base_Start_IT>
	 }
	  while(M2M_Txfer_Cplt != SET)
 80051a0:	e006      	b.n	80051b0 <UBX_Send_Ack+0x118>
	  {
		  //TODO: SET DEVICE TO LOW POWER MODE WHILE DMA TRASNFER OCCURS
		  if(M2M_Txfer_Cplt == HAL_TIMEOUT)
 80051a2:	4b46      	ldr	r3, [pc, #280]	; (80052bc <UBX_Send_Ack+0x224>)
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	2b03      	cmp	r3, #3
 80051a8:	d102      	bne.n	80051b0 <UBX_Send_Ack+0x118>
		  {
			  return UBX_TIMEOUT_Rx;
 80051aa:	f06f 0302 	mvn.w	r3, #2
 80051ae:	e079      	b.n	80052a4 <UBX_Send_Ack+0x20c>
	  while(M2M_Txfer_Cplt != SET)
 80051b0:	4b42      	ldr	r3, [pc, #264]	; (80052bc <UBX_Send_Ack+0x224>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d1f4      	bne.n	80051a2 <UBX_Send_Ack+0x10a>
		  }
	  }
	  M2M_Txfer_Cplt = RESET;
 80051b8:	4b40      	ldr	r3, [pc, #256]	; (80052bc <UBX_Send_Ack+0x224>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	701a      	strb	r2, [r3, #0]
	  char val = (char) 0xB5;
 80051be:	23b5      	movs	r3, #181	; 0xb5
 80051c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  int index = (int)(strchr((char*)GNSS_Buffer,val))-(int)GNSS_Buffer;
 80051c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80051c8:	4619      	mov	r1, r3
 80051ca:	483e      	ldr	r0, [pc, #248]	; (80052c4 <UBX_Send_Ack+0x22c>)
 80051cc:	f000 fe0f 	bl	8005dee <strchr>
 80051d0:	4603      	mov	r3, r0
 80051d2:	461a      	mov	r2, r3
 80051d4:	4b3b      	ldr	r3, [pc, #236]	; (80052c4 <UBX_Send_Ack+0x22c>)
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	633b      	str	r3, [r7, #48]	; 0x30
	  UBX_MSG_t GPS_Acknowledgement_State;
	  if((index < 0) || (index >GNSS_BUFFER_SIZE))
 80051da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051dc:	2b00      	cmp	r3, #0
 80051de:	db5f      	blt.n	80052a0 <UBX_Send_Ack+0x208>
 80051e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051e6:	dc5b      	bgt.n	80052a0 <UBX_Send_Ack+0x208>
	  {

	  }else{
	  uint8_t msg[10] = {0};
 80051e8:	f107 030c 	add.w	r3, r7, #12
 80051ec:	2200      	movs	r2, #0
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	605a      	str	r2, [r3, #4]
 80051f2:	811a      	strh	r2, [r3, #8]
	  memcpy(msg,&GNSS_Buffer[index],10);
 80051f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f6:	4a33      	ldr	r2, [pc, #204]	; (80052c4 <UBX_Send_Ack+0x22c>)
 80051f8:	441a      	add	r2, r3
 80051fa:	f107 030c 	add.w	r3, r7, #12
 80051fe:	6810      	ldr	r0, [r2, #0]
 8005200:	6851      	ldr	r1, [r2, #4]
 8005202:	c303      	stmia	r3!, {r0, r1}
 8005204:	8912      	ldrh	r2, [r2, #8]
 8005206:	801a      	strh	r2, [r3, #0]

	  uint16_t header = ((uint16_t)msg[0]<<8) | ((uint16_t)msg[1]);
 8005208:	7b3b      	ldrb	r3, [r7, #12]
 800520a:	021b      	lsls	r3, r3, #8
 800520c:	b21a      	sxth	r2, r3
 800520e:	7b7b      	ldrb	r3, [r7, #13]
 8005210:	b21b      	sxth	r3, r3
 8005212:	4313      	orrs	r3, r2
 8005214:	b21b      	sxth	r3, r3
 8005216:	85fb      	strh	r3, [r7, #46]	; 0x2e
	  if(header == 0xb562)
 8005218:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800521a:	f24b 5262 	movw	r2, #46434	; 0xb562
 800521e:	4293      	cmp	r3, r2
 8005220:	d13e      	bne.n	80052a0 <UBX_Send_Ack+0x208>
	  {
	 	 uint8_t ck_A =0, ck_B =0;
 8005222:	2300      	movs	r3, #0
 8005224:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005228:	2300      	movs	r3, #0
 800522a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	 	 for (int i = 2; i < 8; ++i)
 800522e:	2302      	movs	r3, #2
 8005230:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005232:	e013      	b.n	800525c <UBX_Send_Ack+0x1c4>
	 	 {
	 	 	ck_A += (uint8_t)msg[i];
 8005234:	f107 020c 	add.w	r2, r7, #12
 8005238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800523a:	4413      	add	r3, r2
 800523c:	781a      	ldrb	r2, [r3, #0]
 800523e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8005242:	4413      	add	r3, r2
 8005244:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	 	 	ck_B += ck_A;
 8005248:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800524c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8005250:	4413      	add	r3, r2
 8005252:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	 	 for (int i = 2; i < 8; ++i)
 8005256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005258:	3301      	adds	r3, #1
 800525a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800525c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800525e:	2b07      	cmp	r3, #7
 8005260:	dde8      	ble.n	8005234 <UBX_Send_Ack+0x19c>
	 	 }
	 	 if((ck_A == msg[8])&& (ck_B == msg[9]))
 8005262:	7d3b      	ldrb	r3, [r7, #20]
 8005264:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8005268:	429a      	cmp	r2, r3
 800526a:	d116      	bne.n	800529a <UBX_Send_Ack+0x202>
 800526c:	7d7b      	ldrb	r3, [r7, #21]
 800526e:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8005272:	429a      	cmp	r2, r3
 8005274:	d111      	bne.n	800529a <UBX_Send_Ack+0x202>
	 	 {
	 	 	//acknowledgement
	 	 	if(msg[2] == 0x05)
 8005276:	7bbb      	ldrb	r3, [r7, #14]
 8005278:	2b05      	cmp	r3, #5
 800527a:	d111      	bne.n	80052a0 <UBX_Send_Ack+0x208>
	 	 	{
	 		 	switch (msg[3])
 800527c:	7bfb      	ldrb	r3, [r7, #15]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <UBX_Send_Ack+0x1f0>
 8005282:	2b01      	cmp	r3, #1
 8005284:	d004      	beq.n	8005290 <UBX_Send_Ack+0x1f8>
	 	 	if(msg[2] == 0x05)
 8005286:	e00b      	b.n	80052a0 <UBX_Send_Ack+0x208>
	 		 	{
	 		 		case 0:
	 		 			GPS_Acknowledgement_State = UBX_ACK_NACK;
 8005288:	2300      	movs	r3, #0
 800528a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	 		 			break;
 800528e:	e003      	b.n	8005298 <UBX_Send_Ack+0x200>
	 		 		case 1:
	 		 			GPS_Acknowledgement_State = UBX_ACK_ACK;
 8005290:	2301      	movs	r3, #1
 8005292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	 		 			break;
 8005296:	bf00      	nop
	 	 	if(msg[2] == 0x05)
 8005298:	e002      	b.n	80052a0 <UBX_Send_Ack+0x208>
	 		 		}
	 		 	}
	 		 }
	 		 else
	 		 {
	 		 	GPS_Acknowledgement_State = UBX_ERROR;
 800529a:	23ff      	movs	r3, #255	; 0xff
 800529c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	 		 }
	 	 }
	  }
	  return GPS_Acknowledgement_State;
 80052a0:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3748      	adds	r7, #72	; 0x48
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bdb0      	pop	{r4, r5, r7, pc}
 80052ac:	08005e24 	.word	0x08005e24
 80052b0:	200011d4 	.word	0x200011d4
 80052b4:	20001188 	.word	0x20001188
 80052b8:	200008c8 	.word	0x200008c8
 80052bc:	200000c4 	.word	0x200000c4
 80052c0:	200000c8 	.word	0x200000c8
 80052c4:	20000988 	.word	0x20000988

080052c8 <UBX_Configure_Baudrate>:

UBX_MSG_t UBX_Configure_Baudrate(UART_HandleTypeDef *huart, TIM_HandleTypeDef *htim)
{
 80052c8:	b5b0      	push	{r4, r5, r7, lr}
 80052ca:	b08a      	sub	sp, #40	; 0x28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]

	//GPS is configured for 9600, change baud to 115200
	uint8_t ubx_baude_rate_config[] = {0xB5,0x62,0x06,0x00,0x14,0x00,0x01,0x00,0x00,0x00,0xD0,0x08,0x00,0x00,0x00,0xC2,0x01,0x00,0x07,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0xC0,0x7E};
 80052d2:	4b1f      	ldr	r3, [pc, #124]	; (8005350 <UBX_Configure_Baudrate+0x88>)
 80052d4:	f107 0408 	add.w	r4, r7, #8
 80052d8:	461d      	mov	r5, r3
 80052da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80052e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint32_t size =  sizeof(ubx_baude_rate_config)/sizeof(ubx_baude_rate_config[0]);
 80052e6:	231c      	movs	r3, #28
 80052e8:	627b      	str	r3, [r7, #36]	; 0x24
	memcpy(DMA_TX_Buffer,ubx_baude_rate_config,size);
 80052ea:	f107 0308 	add.w	r3, r7, #8
 80052ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f0:	4619      	mov	r1, r3
 80052f2:	4818      	ldr	r0, [pc, #96]	; (8005354 <UBX_Configure_Baudrate+0x8c>)
 80052f4:	f000 fd68 	bl	8005dc8 <memcpy>
	if(HAL_UART_Transmit_DMA(huart,DMA_TX_Buffer,size) == HAL_OK)
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	461a      	mov	r2, r3
 80052fe:	4915      	ldr	r1, [pc, #84]	; (8005354 <UBX_Configure_Baudrate+0x8c>)
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f7fe fd7d 	bl	8003e00 <HAL_UART_Transmit_DMA>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d11b      	bne.n	8005344 <UBX_Configure_Baudrate+0x7c>
	{
		 while(TX_Cplt != SET);
 800530c:	bf00      	nop
 800530e:	4b12      	ldr	r3, [pc, #72]	; (8005358 <UBX_Configure_Baudrate+0x90>)
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d1fb      	bne.n	800530e <UBX_Configure_Baudrate+0x46>
		 Clear_Buffer(DMA_TX_Buffer,DMA_TX_BUFFER_SIZE);
 8005316:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800531a:	480e      	ldr	r0, [pc, #56]	; (8005354 <UBX_Configure_Baudrate+0x8c>)
 800531c:	f7ff fcd7 	bl	8004cce <Clear_Buffer>
		 if(USART_Set_Baudrate(huart,htim,115200) != HAL_OK)
 8005320:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005324:	6839      	ldr	r1, [r7, #0]
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7ff fce0 	bl	8004cec <USART_Set_Baudrate>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d002      	beq.n	8005338 <UBX_Configure_Baudrate+0x70>
		 {
			 return UBX_ERROR;
 8005332:	f04f 33ff 	mov.w	r3, #4294967295
 8005336:	e007      	b.n	8005348 <UBX_Configure_Baudrate+0x80>
		 }
		 return UBX_Send_Ack(huart,htim);
 8005338:	6839      	ldr	r1, [r7, #0]
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7ff feac 	bl	8005098 <UBX_Send_Ack>
 8005340:	4603      	mov	r3, r0
 8005342:	e001      	b.n	8005348 <UBX_Configure_Baudrate+0x80>
	}
	return UBX_TIMEOUT_Tx;
 8005344:	f06f 0301 	mvn.w	r3, #1
}
 8005348:	4618      	mov	r0, r3
 800534a:	3728      	adds	r7, #40	; 0x28
 800534c:	46bd      	mov	sp, r7
 800534e:	bdb0      	pop	{r4, r5, r7, pc}
 8005350:	08005e3c 	.word	0x08005e3c
 8005354:	200011d4 	.word	0x200011d4
 8005358:	20001188 	.word	0x20001188

0800535c <UBX_Configure_Messages>:

UBX_MSG_t UBX_Configure_Messages(UART_HandleTypeDef *huart)
{
 800535c:	b5b0      	push	{r4, r5, r7, lr}
 800535e:	b0a8      	sub	sp, #160	; 0xa0
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
	//clear all active/useless messages
	uint8_t NMEA_Clear_buffer[] = {0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x0A, 0x00, 0x04, 0x23, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x09, 0x00, 0x03, 0x21, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x00, 0x00, 0xFA, 0x0F, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x0D, 0x00, 0x07, 0x29, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x06, 0x00, 0x00, 0x1B, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x07, 0x00, 0x01, 0x1D, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x03, 0x00, 0xFD, 0x15, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x04, 0x00, 0xFE, 0x17, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x0F, 0x00, 0x09, 0x2D, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x05, 0x00, 0xFF, 0x19} ;
 8005364:	4a38      	ldr	r2, [pc, #224]	; (8005448 <UBX_Configure_Messages+0xec>)
 8005366:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800536a:	4611      	mov	r1, r2
 800536c:	226e      	movs	r2, #110	; 0x6e
 800536e:	4618      	mov	r0, r3
 8005370:	f000 fd2a 	bl	8005dc8 <memcpy>
	uint32_t size = sizeof(NMEA_Clear_buffer)/sizeof(NMEA_Clear_buffer[0]);
 8005374:	236e      	movs	r3, #110	; 0x6e
 8005376:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	 if(__HAL_UART_GET_FLAG(huart,UART_FLAG_TC))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005384:	2b40      	cmp	r3, #64	; 0x40
 8005386:	d103      	bne.n	8005390 <UBX_Configure_Messages+0x34>
	 {
		__HAL_UART_CLEAR_FLAG(huart,UART_FLAG_TC);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2240      	movs	r2, #64	; 0x40
 800538e:	621a      	str	r2, [r3, #32]
	 }
	__HAL_UART_ENABLE_IT(huart,UART_IT_TC);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	6812      	ldr	r2, [r2, #0]
 8005398:	6812      	ldr	r2, [r2, #0]
 800539a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800539e:	601a      	str	r2, [r3, #0]
	if(HAL_UART_Transmit_DMA(huart,NMEA_Clear_buffer,size) != HAL_OK)
 80053a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053aa:	4619      	mov	r1, r3
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f7fe fd27 	bl	8003e00 <HAL_UART_Transmit_DMA>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d002      	beq.n	80053be <UBX_Configure_Messages+0x62>
	{
		return UBX_ERROR;
 80053b8:	f04f 33ff 	mov.w	r3, #4294967295
 80053bc:	e03f      	b.n	800543e <UBX_Configure_Messages+0xe2>
	}
	while(TX_Cplt != SET);
 80053be:	bf00      	nop
 80053c0:	4b22      	ldr	r3, [pc, #136]	; (800544c <UBX_Configure_Messages+0xf0>)
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d1fb      	bne.n	80053c0 <UBX_Configure_Messages+0x64>
	TX_Cplt = 0;
 80053c8:	4b20      	ldr	r3, [pc, #128]	; (800544c <UBX_Configure_Messages+0xf0>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	701a      	strb	r2, [r3, #0]
	(void)NMEA_Clear_buffer;
	//enable messages GLL ZDA GSA
	uint8_t NMEA_msgs[] = {0xB5,0x62,0x06,0x01,0x03,0x00,0xF0,0x01,0x01,0xFC,0x12,0xB5,0x62,0x06,0x01,0x03,0x00,0xF0,0x02,0x01,0xFD,0x14,0xB5,0x62,0x06,0x01,0x03,0x00,0xF0,0x08,0x01,0x03,0x20};
 80053ce:	4b20      	ldr	r3, [pc, #128]	; (8005450 <UBX_Configure_Messages+0xf4>)
 80053d0:	f107 0408 	add.w	r4, r7, #8
 80053d4:	461d      	mov	r5, r3
 80053d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053de:	682b      	ldr	r3, [r5, #0]
 80053e0:	7023      	strb	r3, [r4, #0]
	size = sizeof(NMEA_msgs)/sizeof(NMEA_msgs[0]);
 80053e2:	2321      	movs	r3, #33	; 0x21
 80053e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	 if(__HAL_UART_GET_FLAG(huart,UART_FLAG_TC))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f2:	2b40      	cmp	r3, #64	; 0x40
 80053f4:	d103      	bne.n	80053fe <UBX_Configure_Messages+0xa2>
	 {
		 __HAL_UART_CLEAR_FLAG(huart,UART_FLAG_TC);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2240      	movs	r2, #64	; 0x40
 80053fc:	621a      	str	r2, [r3, #32]
	 }
	 __HAL_UART_ENABLE_IT(huart,UART_IT_TC);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	6812      	ldr	r2, [r2, #0]
 8005406:	6812      	ldr	r2, [r2, #0]
 8005408:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800540c:	601a      	str	r2, [r3, #0]
	if(HAL_UART_Transmit_DMA(huart,NMEA_msgs,size) == HAL_OK)
 800540e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005412:	b29a      	uxth	r2, r3
 8005414:	f107 0308 	add.w	r3, r7, #8
 8005418:	4619      	mov	r1, r3
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7fe fcf0 	bl	8003e00 <HAL_UART_Transmit_DMA>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d109      	bne.n	800543a <UBX_Configure_Messages+0xde>
	{
		while(TX_Cplt != SET);
 8005426:	bf00      	nop
 8005428:	4b08      	ldr	r3, [pc, #32]	; (800544c <UBX_Configure_Messages+0xf0>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d1fb      	bne.n	8005428 <UBX_Configure_Messages+0xcc>
		TX_Cplt = 0;
 8005430:	4b06      	ldr	r3, [pc, #24]	; (800544c <UBX_Configure_Messages+0xf0>)
 8005432:	2200      	movs	r2, #0
 8005434:	701a      	strb	r2, [r3, #0]
		return UBX_OK;
 8005436:	2302      	movs	r3, #2
 8005438:	e001      	b.n	800543e <UBX_Configure_Messages+0xe2>
	}

	return UBX_ERROR;
 800543a:	f04f 33ff 	mov.w	r3, #4294967295

}
 800543e:	4618      	mov	r0, r3
 8005440:	37a0      	adds	r7, #160	; 0xa0
 8005442:	46bd      	mov	sp, r7
 8005444:	bdb0      	pop	{r4, r5, r7, pc}
 8005446:	bf00      	nop
 8005448:	08005e58 	.word	0x08005e58
 800544c:	20001188 	.word	0x20001188
 8005450:	08005ec8 	.word	0x08005ec8

08005454 <init_GPS>:

GPS_Init_msg_t init_GPS(UART_HandleTypeDef *huart,TIM_HandleTypeDef *htim, DMA_HandleTypeDef *hdma)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
	//send acknowledgement
	UBX_MSG_t GPS_Acknowledgement_State = UBX_Send_Ack(huart,htim);
 8005460:	68b9      	ldr	r1, [r7, #8]
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f7ff fe18 	bl	8005098 <UBX_Send_Ack>
 8005468:	4603      	mov	r3, r0
 800546a:	75fb      	strb	r3, [r7, #23]
	if(GPS_Acknowledgement_State == UBX_ACK_ACK)
 800546c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d112      	bne.n	800549a <init_GPS+0x46>
	{
		Clear_Buffer(DMA_TX_Buffer,DMA_TX_BUFFER_SIZE);
 8005474:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005478:	481c      	ldr	r0, [pc, #112]	; (80054ec <init_GPS+0x98>)
 800547a:	f7ff fc28 	bl	8004cce <Clear_Buffer>
		Clear_Buffer(GNSS_Buffer,GNSS_BUFFER_SIZE);
 800547e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005482:	481b      	ldr	r0, [pc, #108]	; (80054f0 <init_GPS+0x9c>)
 8005484:	f7ff fc23 	bl	8004cce <Clear_Buffer>
		if( UBX_Configure_Baudrate(huart, htim) != UBX_ACK_ACK)
 8005488:	68b9      	ldr	r1, [r7, #8]
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f7ff ff1c 	bl	80052c8 <UBX_Configure_Baudrate>
 8005490:	4603      	mov	r3, r0
 8005492:	2b01      	cmp	r3, #1
 8005494:	d01d      	beq.n	80054d2 <init_GPS+0x7e>
		{
			return GPS_Init_Baud_Config_Error;
 8005496:	2303      	movs	r3, #3
 8005498:	e024      	b.n	80054e4 <init_GPS+0x90>
		}

	}else if(GPS_Acknowledgement_State == UBX_TIMEOUT_Rx)
 800549a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800549e:	f113 0f03 	cmn.w	r3, #3
 80054a2:	d10f      	bne.n	80054c4 <init_GPS+0x70>
		/*
		 * If Not recieving Ack-Ack on 115200, it could be possible that the device is
		 * already configured. change baud rate and try again
		 */
		//configure baud rate to 115200 and try again
		if(USART_Set_Baudrate(huart,htim,115200) == HAL_OK)
 80054a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80054a8:	68b9      	ldr	r1, [r7, #8]
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f7ff fc1e 	bl	8004cec <USART_Set_Baudrate>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10d      	bne.n	80054d2 <init_GPS+0x7e>
		{
			GPS_Acknowledgement_State = UBX_Send_Ack(huart,htim);
 80054b6:	68b9      	ldr	r1, [r7, #8]
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f7ff fded 	bl	8005098 <UBX_Send_Ack>
 80054be:	4603      	mov	r3, r0
 80054c0:	75fb      	strb	r3, [r7, #23]
 80054c2:	e006      	b.n	80054d2 <init_GPS+0x7e>
		}


	}else if(GPS_Acknowledgement_State == UBX_TIMEOUT_Tx)
 80054c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80054c8:	f113 0f02 	cmn.w	r3, #2
 80054cc:	d101      	bne.n	80054d2 <init_GPS+0x7e>
	{
		return GPS_Init_Ack_Tx_Error;
 80054ce:	2305      	movs	r3, #5
 80054d0:	e008      	b.n	80054e4 <init_GPS+0x90>
	}
	//configure message buffer
	if( UBX_Configure_Messages(huart) != UBX_OK )
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f7ff ff42 	bl	800535c <UBX_Configure_Messages>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d001      	beq.n	80054e2 <init_GPS+0x8e>
	{
		return GPS_Init_MSG_Config_Error;
 80054de:	2304      	movs	r3, #4
 80054e0:	e000      	b.n	80054e4 <init_GPS+0x90>
	}
	return GPS_Init_OK;
 80054e2:	2301      	movs	r3, #1
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3718      	adds	r7, #24
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	200011d4 	.word	0x200011d4
 80054f0:	20000988 	.word	0x20000988

080054f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80054f8:	f7fa ffee 	bl	80004d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80054fc:	f000 f81e 	bl	800553c <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  //initialise Peripherals
  	  MX_GPIO_Init();
 8005500:	f000 f9e8 	bl	80058d4 <MX_GPIO_Init>
  	  MX_DMA_Init();
 8005504:	f000 f974 	bl	80057f0 <MX_DMA_Init>
  	  MX_UART4_Init();
 8005508:	f000 f942 	bl	8005790 <MX_UART4_Init>
  	  MX_TIM2_Init();
 800550c:	f000 f888 	bl	8005620 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  if(init_GPS(&huart4,&htim2,&hdma_memtomem_dma1_channel1)== GPS_Init_OK)
 8005510:	4a07      	ldr	r2, [pc, #28]	; (8005530 <main+0x3c>)
 8005512:	4908      	ldr	r1, [pc, #32]	; (8005534 <main+0x40>)
 8005514:	4808      	ldr	r0, [pc, #32]	; (8005538 <main+0x44>)
 8005516:	f7ff ff9d 	bl	8005454 <init_GPS>
 800551a:	4603      	mov	r3, r0
 800551c:	2b01      	cmp	r3, #1
 800551e:	d105      	bne.n	800552c <main+0x38>
  {
	  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,SET);
 8005520:	2201      	movs	r2, #1
 8005522:	2120      	movs	r1, #32
 8005524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005528:	f7fb fdcc 	bl	80010c4 <HAL_GPIO_WritePin>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800552c:	e7fe      	b.n	800552c <main+0x38>
 800552e:	bf00      	nop
 8005530:	2000007c 	.word	0x2000007c
 8005534:	20000948 	.word	0x20000948
 8005538:	200008c8 	.word	0x200008c8

0800553c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b0b8      	sub	sp, #224	; 0xe0
 8005540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005542:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005546:	2244      	movs	r2, #68	; 0x44
 8005548:	2100      	movs	r1, #0
 800554a:	4618      	mov	r0, r3
 800554c:	f000 fc47 	bl	8005dde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005550:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005554:	2200      	movs	r2, #0
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	605a      	str	r2, [r3, #4]
 800555a:	609a      	str	r2, [r3, #8]
 800555c:	60da      	str	r2, [r3, #12]
 800555e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005560:	463b      	mov	r3, r7
 8005562:	2288      	movs	r2, #136	; 0x88
 8005564:	2100      	movs	r1, #0
 8005566:	4618      	mov	r0, r3
 8005568:	f000 fc39 	bl	8005dde <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800556c:	2301      	movs	r3, #1
 800556e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005572:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005576:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800557a:	2302      	movs	r3, #2
 800557c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005580:	2303      	movs	r3, #3
 8005582:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005586:	2301      	movs	r3, #1
 8005588:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 12;
 800558c:	230c      	movs	r3, #12
 800558e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8005592:	2307      	movs	r3, #7
 8005594:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005598:	2302      	movs	r3, #2
 800559a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800559e:	2302      	movs	r3, #2
 80055a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80055a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7fb fe07 	bl	80011bc <HAL_RCC_OscConfig>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d001      	beq.n	80055b8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80055b4:	f000 f9f6 	bl	80059a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80055b8:	230f      	movs	r3, #15
 80055ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80055be:	2303      	movs	r3, #3
 80055c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80055c4:	2380      	movs	r3, #128	; 0x80
 80055c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80055ca:	2300      	movs	r3, #0
 80055cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80055d0:	2300      	movs	r3, #0
 80055d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80055d6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80055da:	2101      	movs	r1, #1
 80055dc:	4618      	mov	r0, r3
 80055de:	f7fc f99d 	bl	800191c <HAL_RCC_ClockConfig>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80055e8:	f000 f9dc 	bl	80059a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80055ec:	2308      	movs	r3, #8
 80055ee:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80055f0:	2300      	movs	r3, #0
 80055f2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80055f4:	463b      	mov	r3, r7
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7fc fb94 	bl	8001d24 <HAL_RCCEx_PeriphCLKConfig>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8005602:	f000 f9cf 	bl	80059a4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005606:	f44f 7000 	mov.w	r0, #512	; 0x200
 800560a:	f7fb fd81 	bl	8001110 <HAL_PWREx_ControlVoltageScaling>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d001      	beq.n	8005618 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8005614:	f000 f9c6 	bl	80059a4 <Error_Handler>
  }
}
 8005618:	bf00      	nop
 800561a:	37e0      	adds	r7, #224	; 0xe0
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b098      	sub	sp, #96	; 0x60
 8005624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005626:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800562a:	2200      	movs	r2, #0
 800562c:	601a      	str	r2, [r3, #0]
 800562e:	605a      	str	r2, [r3, #4]
 8005630:	609a      	str	r2, [r3, #8]
 8005632:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8005634:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005638:	2200      	movs	r2, #0
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	605a      	str	r2, [r3, #4]
 800563e:	609a      	str	r2, [r3, #8]
 8005640:	60da      	str	r2, [r3, #12]
 8005642:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005644:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]
 800564c:	605a      	str	r2, [r3, #4]
 800564e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005650:	f107 0314 	add.w	r3, r7, #20
 8005654:	2200      	movs	r2, #0
 8005656:	601a      	str	r2, [r3, #0]
 8005658:	605a      	str	r2, [r3, #4]
 800565a:	609a      	str	r2, [r3, #8]
 800565c:	60da      	str	r2, [r3, #12]
 800565e:	611a      	str	r2, [r3, #16]
 8005660:	615a      	str	r2, [r3, #20]
 8005662:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8005664:	1d3b      	adds	r3, r7, #4
 8005666:	2200      	movs	r2, #0
 8005668:	601a      	str	r2, [r3, #0]
 800566a:	605a      	str	r2, [r3, #4]
 800566c:	609a      	str	r2, [r3, #8]
 800566e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005670:	4b46      	ldr	r3, [pc, #280]	; (800578c <MX_TIM2_Init+0x16c>)
 8005672:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005676:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8005678:	4b44      	ldr	r3, [pc, #272]	; (800578c <MX_TIM2_Init+0x16c>)
 800567a:	2201      	movs	r2, #1
 800567c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800567e:	4b43      	ldr	r3, [pc, #268]	; (800578c <MX_TIM2_Init+0x16c>)
 8005680:	2200      	movs	r2, #0
 8005682:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536;
 8005684:	4b41      	ldr	r3, [pc, #260]	; (800578c <MX_TIM2_Init+0x16c>)
 8005686:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800568a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800568c:	4b3f      	ldr	r3, [pc, #252]	; (800578c <MX_TIM2_Init+0x16c>)
 800568e:	2200      	movs	r2, #0
 8005690:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005692:	4b3e      	ldr	r3, [pc, #248]	; (800578c <MX_TIM2_Init+0x16c>)
 8005694:	2200      	movs	r2, #0
 8005696:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005698:	483c      	ldr	r0, [pc, #240]	; (800578c <MX_TIM2_Init+0x16c>)
 800569a:	f7fc fff3 	bl	8002684 <HAL_TIM_Base_Init>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80056a4:	f000 f97e 	bl	80059a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80056a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056ac:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80056ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80056b2:	4619      	mov	r1, r3
 80056b4:	4835      	ldr	r0, [pc, #212]	; (800578c <MX_TIM2_Init+0x16c>)
 80056b6:	f7fd fbd1 	bl	8002e5c <HAL_TIM_ConfigClockSource>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d001      	beq.n	80056c4 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 80056c0:	f000 f970 	bl	80059a4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80056c4:	4831      	ldr	r0, [pc, #196]	; (800578c <MX_TIM2_Init+0x16c>)
 80056c6:	f7fd f888 	bl	80027da <HAL_TIM_OC_Init>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d001      	beq.n	80056d4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80056d0:	f000 f968 	bl	80059a4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80056d4:	482d      	ldr	r0, [pc, #180]	; (800578c <MX_TIM2_Init+0x16c>)
 80056d6:	f7fd f953 	bl	8002980 <HAL_TIM_IC_Init>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 80056e0:	f000 f960 	bl	80059a4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80056e4:	2304      	movs	r3, #4
 80056e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80056e8:	2360      	movs	r3, #96	; 0x60
 80056ea:	643b      	str	r3, [r7, #64]	; 0x40
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80056ec:	2300      	movs	r3, #0
 80056ee:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.TriggerFilter = 0;
 80056f0:	2300      	movs	r3, #0
 80056f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig) != HAL_OK)
 80056f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80056f8:	4619      	mov	r1, r3
 80056fa:	4824      	ldr	r0, [pc, #144]	; (800578c <MX_TIM2_Init+0x16c>)
 80056fc:	f7fd fc67 	bl	8002fce <HAL_TIM_SlaveConfigSynchro>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 8005706:	f000 f94d 	bl	80059a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800570a:	2300      	movs	r3, #0
 800570c:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800570e:	2300      	movs	r3, #0
 8005710:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005712:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005716:	4619      	mov	r1, r3
 8005718:	481c      	ldr	r0, [pc, #112]	; (800578c <MX_TIM2_Init+0x16c>)
 800571a:	f7fe faa9 	bl	8003c70 <HAL_TIMEx_MasterConfigSynchronization>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d001      	beq.n	8005728 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8005724:	f000 f93e 	bl	80059a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8005728:	2300      	movs	r3, #0
 800572a:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = CCR1_VAL;
 800572c:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8005730:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8005732:	2302      	movs	r3, #2
 8005734:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005736:	2300      	movs	r3, #0
 8005738:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800573a:	f107 0314 	add.w	r3, r7, #20
 800573e:	2200      	movs	r2, #0
 8005740:	4619      	mov	r1, r3
 8005742:	4812      	ldr	r0, [pc, #72]	; (800578c <MX_TIM2_Init+0x16c>)
 8005744:	f7fd fa70 	bl	8002c28 <HAL_TIM_OC_ConfigChannel>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <MX_TIM2_Init+0x132>
  {
    Error_Handler();
 800574e:	f000 f929 	bl	80059a4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005752:	2300      	movs	r3, #0
 8005754:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005756:	2301      	movs	r3, #1
 8005758:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800575a:	2300      	movs	r3, #0
 800575c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800575e:	2300      	movs	r3, #0
 8005760:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8005762:	1d3b      	adds	r3, r7, #4
 8005764:	2204      	movs	r2, #4
 8005766:	4619      	mov	r1, r3
 8005768:	4808      	ldr	r0, [pc, #32]	; (800578c <MX_TIM2_Init+0x16c>)
 800576a:	f7fd fadb 	bl	8002d24 <HAL_TIM_IC_ConfigChannel>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <MX_TIM2_Init+0x158>
  {
    Error_Handler();
 8005774:	f000 f916 	bl	80059a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  __HAL_TIM_CLEAR_IT(&htim2,TIM_IT_UPDATE);
 8005778:	4b04      	ldr	r3, [pc, #16]	; (800578c <MX_TIM2_Init+0x16c>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f06f 0201 	mvn.w	r2, #1
 8005780:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM2_Init 2 */

}
 8005782:	bf00      	nop
 8005784:	3760      	adds	r7, #96	; 0x60
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	20000948 	.word	0x20000948

08005790 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
	/*
	 * Configure USART for auto baud rate detection as per Application Note 4908
	 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005794:	4b14      	ldr	r3, [pc, #80]	; (80057e8 <MX_UART4_Init+0x58>)
 8005796:	4a15      	ldr	r2, [pc, #84]	; (80057ec <MX_UART4_Init+0x5c>)
 8005798:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800579a:	4b13      	ldr	r3, [pc, #76]	; (80057e8 <MX_UART4_Init+0x58>)
 800579c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80057a0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80057a2:	4b11      	ldr	r3, [pc, #68]	; (80057e8 <MX_UART4_Init+0x58>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80057a8:	4b0f      	ldr	r3, [pc, #60]	; (80057e8 <MX_UART4_Init+0x58>)
 80057aa:	2200      	movs	r2, #0
 80057ac:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80057ae:	4b0e      	ldr	r3, [pc, #56]	; (80057e8 <MX_UART4_Init+0x58>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80057b4:	4b0c      	ldr	r3, [pc, #48]	; (80057e8 <MX_UART4_Init+0x58>)
 80057b6:	220c      	movs	r2, #12
 80057b8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80057ba:	4b0b      	ldr	r3, [pc, #44]	; (80057e8 <MX_UART4_Init+0x58>)
 80057bc:	2200      	movs	r2, #0
 80057be:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80057c0:	4b09      	ldr	r3, [pc, #36]	; (80057e8 <MX_UART4_Init+0x58>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80057c6:	4b08      	ldr	r3, [pc, #32]	; (80057e8 <MX_UART4_Init+0x58>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80057cc:	4b06      	ldr	r3, [pc, #24]	; (80057e8 <MX_UART4_Init+0x58>)
 80057ce:	2200      	movs	r2, #0
 80057d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80057d2:	4805      	ldr	r0, [pc, #20]	; (80057e8 <MX_UART4_Init+0x58>)
 80057d4:	f7fe fac6 	bl	8003d64 <HAL_UART_Init>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80057de:	f000 f8e1 	bl	80059a4 <Error_Handler>
  }

  /* USER CODE END UART4_Init 2 */

}
 80057e2:	bf00      	nop
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	200008c8 	.word	0x200008c8
 80057ec:	40004c00 	.word	0x40004c00

080057f0 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  */
static void MX_DMA_Init(void) 
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80057f6:	4a32      	ldr	r2, [pc, #200]	; (80058c0 <MX_DMA_Init+0xd0>)
 80057f8:	4b31      	ldr	r3, [pc, #196]	; (80058c0 <MX_DMA_Init+0xd0>)
 80057fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057fc:	f043 0302 	orr.w	r3, r3, #2
 8005800:	6493      	str	r3, [r2, #72]	; 0x48
 8005802:	4b2f      	ldr	r3, [pc, #188]	; (80058c0 <MX_DMA_Init+0xd0>)
 8005804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	607b      	str	r3, [r7, #4]
 800580c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800580e:	4a2c      	ldr	r2, [pc, #176]	; (80058c0 <MX_DMA_Init+0xd0>)
 8005810:	4b2b      	ldr	r3, [pc, #172]	; (80058c0 <MX_DMA_Init+0xd0>)
 8005812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005814:	f043 0301 	orr.w	r3, r3, #1
 8005818:	6493      	str	r3, [r2, #72]	; 0x48
 800581a:	4b29      	ldr	r3, [pc, #164]	; (80058c0 <MX_DMA_Init+0xd0>)
 800581c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	603b      	str	r3, [r7, #0]
 8005824:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 8005826:	4b27      	ldr	r3, [pc, #156]	; (80058c4 <MX_DMA_Init+0xd4>)
 8005828:	4a27      	ldr	r2, [pc, #156]	; (80058c8 <MX_DMA_Init+0xd8>)
 800582a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel1.Init.Request = DMA_REQUEST_0;
 800582c:	4b25      	ldr	r3, [pc, #148]	; (80058c4 <MX_DMA_Init+0xd4>)
 800582e:	2200      	movs	r2, #0
 8005830:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8005832:	4b24      	ldr	r3, [pc, #144]	; (80058c4 <MX_DMA_Init+0xd4>)
 8005834:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005838:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 800583a:	4b22      	ldr	r3, [pc, #136]	; (80058c4 <MX_DMA_Init+0xd4>)
 800583c:	2240      	movs	r2, #64	; 0x40
 800583e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 8005840:	4b20      	ldr	r3, [pc, #128]	; (80058c4 <MX_DMA_Init+0xd4>)
 8005842:	2280      	movs	r2, #128	; 0x80
 8005844:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005846:	4b1f      	ldr	r3, [pc, #124]	; (80058c4 <MX_DMA_Init+0xd4>)
 8005848:	2200      	movs	r2, #0
 800584a:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800584c:	4b1d      	ldr	r3, [pc, #116]	; (80058c4 <MX_DMA_Init+0xd4>)
 800584e:	2200      	movs	r2, #0
 8005850:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 8005852:	4b1c      	ldr	r3, [pc, #112]	; (80058c4 <MX_DMA_Init+0xd4>)
 8005854:	2200      	movs	r2, #0
 8005856:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 8005858:	4b1a      	ldr	r3, [pc, #104]	; (80058c4 <MX_DMA_Init+0xd4>)
 800585a:	2200      	movs	r2, #0
 800585c:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 800585e:	4819      	ldr	r0, [pc, #100]	; (80058c4 <MX_DMA_Init+0xd4>)
 8005860:	f7fa ffc2 	bl	80007e8 <HAL_DMA_Init>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d001      	beq.n	800586e <MX_DMA_Init+0x7e>
  {
    Error_Handler( );
 800586a:	f000 f89b 	bl	80059a4 <Error_Handler>
  }

  /* DMA interrupt init */
  CLEAR_REG(hdma_uart4_rx.DmaBaseAddress->ISR);
 800586e:	4b17      	ldr	r3, [pc, #92]	; (80058cc <MX_DMA_Init+0xdc>)
 8005870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005872:	2200      	movs	r2, #0
 8005874:	601a      	str	r2, [r3, #0]
  CLEAR_REG(hdma_uart4_tx.DmaBaseAddress->ISR);
 8005876:	4b16      	ldr	r3, [pc, #88]	; (80058d0 <MX_DMA_Init+0xe0>)
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	2200      	movs	r2, #0
 800587c:	601a      	str	r2, [r3, #0]
  CLEAR_REG(hdma_memtomem_dma1_channel1.DmaBaseAddress->ISR);
 800587e:	4b11      	ldr	r3, [pc, #68]	; (80058c4 <MX_DMA_Init+0xd4>)
 8005880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005882:	2200      	movs	r2, #0
 8005884:	601a      	str	r2, [r3, #0]

  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8005886:	2200      	movs	r2, #0
 8005888:	2100      	movs	r1, #0
 800588a:	200b      	movs	r0, #11
 800588c:	f7fa ff75 	bl	800077a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8005890:	200b      	movs	r0, #11
 8005892:	f7fa ff8e 	bl	80007b2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8005896:	2200      	movs	r2, #0
 8005898:	2100      	movs	r1, #0
 800589a:	203a      	movs	r0, #58	; 0x3a
 800589c:	f7fa ff6d 	bl	800077a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80058a0:	203a      	movs	r0, #58	; 0x3a
 80058a2:	f7fa ff86 	bl	80007b2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 80058a6:	2200      	movs	r2, #0
 80058a8:	2100      	movs	r1, #0
 80058aa:	203c      	movs	r0, #60	; 0x3c
 80058ac:	f7fa ff65 	bl	800077a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 80058b0:	203c      	movs	r0, #60	; 0x3c
 80058b2:	f7fa ff7e 	bl	80007b2 <HAL_NVIC_EnableIRQ>

}
 80058b6:	bf00      	nop
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	40021000 	.word	0x40021000
 80058c4:	2000007c 	.word	0x2000007c
 80058c8:	40020008 	.word	0x40020008
 80058cc:	2000002c 	.word	0x2000002c
 80058d0:	2000118c 	.word	0x2000118c

080058d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b08a      	sub	sp, #40	; 0x28
 80058d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058da:	f107 0314 	add.w	r3, r7, #20
 80058de:	2200      	movs	r2, #0
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	605a      	str	r2, [r3, #4]
 80058e4:	609a      	str	r2, [r3, #8]
 80058e6:	60da      	str	r2, [r3, #12]
 80058e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80058ea:	4a2b      	ldr	r2, [pc, #172]	; (8005998 <MX_GPIO_Init+0xc4>)
 80058ec:	4b2a      	ldr	r3, [pc, #168]	; (8005998 <MX_GPIO_Init+0xc4>)
 80058ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058f0:	f043 0304 	orr.w	r3, r3, #4
 80058f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80058f6:	4b28      	ldr	r3, [pc, #160]	; (8005998 <MX_GPIO_Init+0xc4>)
 80058f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058fa:	f003 0304 	and.w	r3, r3, #4
 80058fe:	613b      	str	r3, [r7, #16]
 8005900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005902:	4a25      	ldr	r2, [pc, #148]	; (8005998 <MX_GPIO_Init+0xc4>)
 8005904:	4b24      	ldr	r3, [pc, #144]	; (8005998 <MX_GPIO_Init+0xc4>)
 8005906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800590c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800590e:	4b22      	ldr	r3, [pc, #136]	; (8005998 <MX_GPIO_Init+0xc4>)
 8005910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005916:	60fb      	str	r3, [r7, #12]
 8005918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800591a:	4a1f      	ldr	r2, [pc, #124]	; (8005998 <MX_GPIO_Init+0xc4>)
 800591c:	4b1e      	ldr	r3, [pc, #120]	; (8005998 <MX_GPIO_Init+0xc4>)
 800591e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005920:	f043 0301 	orr.w	r3, r3, #1
 8005924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005926:	4b1c      	ldr	r3, [pc, #112]	; (8005998 <MX_GPIO_Init+0xc4>)
 8005928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	60bb      	str	r3, [r7, #8]
 8005930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005932:	4a19      	ldr	r2, [pc, #100]	; (8005998 <MX_GPIO_Init+0xc4>)
 8005934:	4b18      	ldr	r3, [pc, #96]	; (8005998 <MX_GPIO_Init+0xc4>)
 8005936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005938:	f043 0302 	orr.w	r3, r3, #2
 800593c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800593e:	4b16      	ldr	r3, [pc, #88]	; (8005998 <MX_GPIO_Init+0xc4>)
 8005940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	607b      	str	r3, [r7, #4]
 8005948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800594a:	2200      	movs	r2, #0
 800594c:	2120      	movs	r1, #32
 800594e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005952:	f7fb fbb7 	bl	80010c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005956:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800595a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800595c:	4b0f      	ldr	r3, [pc, #60]	; (800599c <MX_GPIO_Init+0xc8>)
 800595e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005960:	2300      	movs	r3, #0
 8005962:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005964:	f107 0314 	add.w	r3, r7, #20
 8005968:	4619      	mov	r1, r3
 800596a:	480d      	ldr	r0, [pc, #52]	; (80059a0 <MX_GPIO_Init+0xcc>)
 800596c:	f7fb fa02 	bl	8000d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8005970:	2320      	movs	r3, #32
 8005972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005974:	2301      	movs	r3, #1
 8005976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005978:	2300      	movs	r3, #0
 800597a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800597c:	2300      	movs	r3, #0
 800597e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8005980:	f107 0314 	add.w	r3, r7, #20
 8005984:	4619      	mov	r1, r3
 8005986:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800598a:	f7fb f9f3 	bl	8000d74 <HAL_GPIO_Init>

}
 800598e:	bf00      	nop
 8005990:	3728      	adds	r7, #40	; 0x28
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	40021000 	.word	0x40021000
 800599c:	10210000 	.word	0x10210000
 80059a0:	48000800 	.word	0x48000800

080059a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80059a4:	b480      	push	{r7}
 80059a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80059a8:	bf00      	nop
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
	...

080059b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059ba:	4a0f      	ldr	r2, [pc, #60]	; (80059f8 <HAL_MspInit+0x44>)
 80059bc:	4b0e      	ldr	r3, [pc, #56]	; (80059f8 <HAL_MspInit+0x44>)
 80059be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059c0:	f043 0301 	orr.w	r3, r3, #1
 80059c4:	6613      	str	r3, [r2, #96]	; 0x60
 80059c6:	4b0c      	ldr	r3, [pc, #48]	; (80059f8 <HAL_MspInit+0x44>)
 80059c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	607b      	str	r3, [r7, #4]
 80059d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80059d2:	4a09      	ldr	r2, [pc, #36]	; (80059f8 <HAL_MspInit+0x44>)
 80059d4:	4b08      	ldr	r3, [pc, #32]	; (80059f8 <HAL_MspInit+0x44>)
 80059d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059dc:	6593      	str	r3, [r2, #88]	; 0x58
 80059de:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <HAL_MspInit+0x44>)
 80059e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059e6:	603b      	str	r3, [r7, #0]
 80059e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80059ea:	bf00      	nop
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	40021000 	.word	0x40021000

080059fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b08a      	sub	sp, #40	; 0x28
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a04:	f107 0314 	add.w	r3, r7, #20
 8005a08:	2200      	movs	r2, #0
 8005a0a:	601a      	str	r2, [r3, #0]
 8005a0c:	605a      	str	r2, [r3, #4]
 8005a0e:	609a      	str	r2, [r3, #8]
 8005a10:	60da      	str	r2, [r3, #12]
 8005a12:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a1c:	d130      	bne.n	8005a80 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005a1e:	4a1a      	ldr	r2, [pc, #104]	; (8005a88 <HAL_TIM_Base_MspInit+0x8c>)
 8005a20:	4b19      	ldr	r3, [pc, #100]	; (8005a88 <HAL_TIM_Base_MspInit+0x8c>)
 8005a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a24:	f043 0301 	orr.w	r3, r3, #1
 8005a28:	6593      	str	r3, [r2, #88]	; 0x58
 8005a2a:	4b17      	ldr	r3, [pc, #92]	; (8005a88 <HAL_TIM_Base_MspInit+0x8c>)
 8005a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	613b      	str	r3, [r7, #16]
 8005a34:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a36:	4a14      	ldr	r2, [pc, #80]	; (8005a88 <HAL_TIM_Base_MspInit+0x8c>)
 8005a38:	4b13      	ldr	r3, [pc, #76]	; (8005a88 <HAL_TIM_Base_MspInit+0x8c>)
 8005a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a3c:	f043 0301 	orr.w	r3, r3, #1
 8005a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a42:	4b11      	ldr	r3, [pc, #68]	; (8005a88 <HAL_TIM_Base_MspInit+0x8c>)
 8005a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	60fb      	str	r3, [r7, #12]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005a4e:	2302      	movs	r3, #2
 8005a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a52:	2302      	movs	r3, #2
 8005a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a56:	2300      	movs	r3, #0
 8005a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a62:	f107 0314 	add.w	r3, r7, #20
 8005a66:	4619      	mov	r1, r3
 8005a68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a6c:	f7fb f982 	bl	8000d74 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005a70:	2200      	movs	r2, #0
 8005a72:	2100      	movs	r1, #0
 8005a74:	201c      	movs	r0, #28
 8005a76:	f7fa fe80 	bl	800077a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005a7a:	201c      	movs	r0, #28
 8005a7c:	f7fa fe99 	bl	80007b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005a80:	bf00      	nop
 8005a82:	3728      	adds	r7, #40	; 0x28
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	40021000 	.word	0x40021000

08005a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b08a      	sub	sp, #40	; 0x28
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a94:	f107 0314 	add.w	r3, r7, #20
 8005a98:	2200      	movs	r2, #0
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	605a      	str	r2, [r3, #4]
 8005a9e:	609a      	str	r2, [r3, #8]
 8005aa0:	60da      	str	r2, [r3, #12]
 8005aa2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a4b      	ldr	r2, [pc, #300]	; (8005bd8 <HAL_UART_MspInit+0x14c>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	f040 808f 	bne.w	8005bce <HAL_UART_MspInit+0x142>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005ab0:	4a4a      	ldr	r2, [pc, #296]	; (8005bdc <HAL_UART_MspInit+0x150>)
 8005ab2:	4b4a      	ldr	r3, [pc, #296]	; (8005bdc <HAL_UART_MspInit+0x150>)
 8005ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005aba:	6593      	str	r3, [r2, #88]	; 0x58
 8005abc:	4b47      	ldr	r3, [pc, #284]	; (8005bdc <HAL_UART_MspInit+0x150>)
 8005abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ac4:	613b      	str	r3, [r7, #16]
 8005ac6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ac8:	4a44      	ldr	r2, [pc, #272]	; (8005bdc <HAL_UART_MspInit+0x150>)
 8005aca:	4b44      	ldr	r3, [pc, #272]	; (8005bdc <HAL_UART_MspInit+0x150>)
 8005acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ace:	f043 0304 	orr.w	r3, r3, #4
 8005ad2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ad4:	4b41      	ldr	r3, [pc, #260]	; (8005bdc <HAL_UART_MspInit+0x150>)
 8005ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ad8:	f003 0304 	and.w	r3, r3, #4
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8005ae0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ae6:	2302      	movs	r3, #2
 8005ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aea:	2300      	movs	r3, #0
 8005aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005aee:	2303      	movs	r3, #3
 8005af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005af2:	2308      	movs	r3, #8
 8005af4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005af6:	f107 0314 	add.w	r3, r7, #20
 8005afa:	4619      	mov	r1, r3
 8005afc:	4838      	ldr	r0, [pc, #224]	; (8005be0 <HAL_UART_MspInit+0x154>)
 8005afe:	f7fb f939 	bl	8000d74 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 8005b02:	4b38      	ldr	r3, [pc, #224]	; (8005be4 <HAL_UART_MspInit+0x158>)
 8005b04:	4a38      	ldr	r2, [pc, #224]	; (8005be8 <HAL_UART_MspInit+0x15c>)
 8005b06:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 8005b08:	4b36      	ldr	r3, [pc, #216]	; (8005be4 <HAL_UART_MspInit+0x158>)
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b0e:	4b35      	ldr	r3, [pc, #212]	; (8005be4 <HAL_UART_MspInit+0x158>)
 8005b10:	2200      	movs	r2, #0
 8005b12:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b14:	4b33      	ldr	r3, [pc, #204]	; (8005be4 <HAL_UART_MspInit+0x158>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005b1a:	4b32      	ldr	r3, [pc, #200]	; (8005be4 <HAL_UART_MspInit+0x158>)
 8005b1c:	2280      	movs	r2, #128	; 0x80
 8005b1e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b20:	4b30      	ldr	r3, [pc, #192]	; (8005be4 <HAL_UART_MspInit+0x158>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b26:	4b2f      	ldr	r3, [pc, #188]	; (8005be4 <HAL_UART_MspInit+0x158>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8005b2c:	4b2d      	ldr	r3, [pc, #180]	; (8005be4 <HAL_UART_MspInit+0x158>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005b32:	4b2c      	ldr	r3, [pc, #176]	; (8005be4 <HAL_UART_MspInit+0x158>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8005b38:	482a      	ldr	r0, [pc, #168]	; (8005be4 <HAL_UART_MspInit+0x158>)
 8005b3a:	f7fa fe55 	bl	80007e8 <HAL_DMA_Init>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 8005b44:	f7ff ff2e 	bl	80059a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a26      	ldr	r2, [pc, #152]	; (8005be4 <HAL_UART_MspInit+0x158>)
 8005b4c:	66da      	str	r2, [r3, #108]	; 0x6c
 8005b4e:	4a25      	ldr	r2, [pc, #148]	; (8005be4 <HAL_UART_MspInit+0x158>)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel3;
 8005b54:	4b25      	ldr	r3, [pc, #148]	; (8005bec <HAL_UART_MspInit+0x160>)
 8005b56:	4a26      	ldr	r2, [pc, #152]	; (8005bf0 <HAL_UART_MspInit+0x164>)
 8005b58:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_2;
 8005b5a:	4b24      	ldr	r3, [pc, #144]	; (8005bec <HAL_UART_MspInit+0x160>)
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005b60:	4b22      	ldr	r3, [pc, #136]	; (8005bec <HAL_UART_MspInit+0x160>)
 8005b62:	2210      	movs	r2, #16
 8005b64:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b66:	4b21      	ldr	r3, [pc, #132]	; (8005bec <HAL_UART_MspInit+0x160>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005b6c:	4b1f      	ldr	r3, [pc, #124]	; (8005bec <HAL_UART_MspInit+0x160>)
 8005b6e:	2280      	movs	r2, #128	; 0x80
 8005b70:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b72:	4b1e      	ldr	r3, [pc, #120]	; (8005bec <HAL_UART_MspInit+0x160>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b78:	4b1c      	ldr	r3, [pc, #112]	; (8005bec <HAL_UART_MspInit+0x160>)
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8005b7e:	4b1b      	ldr	r3, [pc, #108]	; (8005bec <HAL_UART_MspInit+0x160>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005b84:	4b19      	ldr	r3, [pc, #100]	; (8005bec <HAL_UART_MspInit+0x160>)
 8005b86:	2200      	movs	r2, #0
 8005b88:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8005b8a:	4818      	ldr	r0, [pc, #96]	; (8005bec <HAL_UART_MspInit+0x160>)
 8005b8c:	f7fa fe2c 	bl	80007e8 <HAL_DMA_Init>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8005b96:	f7ff ff05 	bl	80059a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a13      	ldr	r2, [pc, #76]	; (8005bec <HAL_UART_MspInit+0x160>)
 8005b9e:	669a      	str	r2, [r3, #104]	; 0x68
 8005ba0:	4a12      	ldr	r2, [pc, #72]	; (8005bec <HAL_UART_MspInit+0x160>)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4 interrupt Init */

  /* USER CODE BEGIN UART4_MspInit 1 */
	CLEAR_REG(huart->Instance->CR1);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2200      	movs	r2, #0
 8005bac:	601a      	str	r2, [r3, #0]
	CLEAR_REG(huart->Instance->CR2);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	605a      	str	r2, [r3, #4]
	CLEAR_REG(huart->Instance->CR3);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	609a      	str	r2, [r3, #8]

    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	2034      	movs	r0, #52	; 0x34
 8005bc4:	f7fa fdd9 	bl	800077a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005bc8:	2034      	movs	r0, #52	; 0x34
 8005bca:	f7fa fdf2 	bl	80007b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE END UART4_MspInit 1 */
  }

}
 8005bce:	bf00      	nop
 8005bd0:	3728      	adds	r7, #40	; 0x28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	40004c00 	.word	0x40004c00
 8005bdc:	40021000 	.word	0x40021000
 8005be0:	48000800 	.word	0x48000800
 8005be4:	2000002c 	.word	0x2000002c
 8005be8:	40020458 	.word	0x40020458
 8005bec:	2000118c 	.word	0x2000118c
 8005bf0:	40020430 	.word	0x40020430

08005bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005bf8:	bf00      	nop
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005c02:	b480      	push	{r7}
 8005c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005c06:	e7fe      	b.n	8005c06 <HardFault_Handler+0x4>

08005c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005c0c:	e7fe      	b.n	8005c0c <MemManage_Handler+0x4>

08005c0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005c12:	e7fe      	b.n	8005c12 <BusFault_Handler+0x4>

08005c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005c14:	b480      	push	{r7}
 8005c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005c18:	e7fe      	b.n	8005c18 <UsageFault_Handler+0x4>

08005c1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005c1e:	bf00      	nop
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005c2c:	bf00      	nop
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005c36:	b480      	push	{r7}
 8005c38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005c3a:	bf00      	nop
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005c48:	f7fa fca0 	bl	800058c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005c4c:	bf00      	nop
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel1);
 8005c54:	4803      	ldr	r0, [pc, #12]	; (8005c64 <DMA1_Channel1_IRQHandler+0x14>)
 8005c56:	f7fa ffa1 	bl	8000b9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  DMA_GNSS_MEM_IRQHandler(&hdma_memtomem_dma1_channel1);
 8005c5a:	4802      	ldr	r0, [pc, #8]	; (8005c64 <DMA1_Channel1_IRQHandler+0x14>)
 8005c5c:	f7ff f8ce 	bl	8004dfc <DMA_GNSS_MEM_IRQHandler>

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005c60:	bf00      	nop
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	2000007c 	.word	0x2000007c

08005c68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	USART_TIM_RTO_Handler(&htim2);
 8005c6c:	4803      	ldr	r0, [pc, #12]	; (8005c7c <TIM2_IRQHandler+0x14>)
 8005c6e:	f7ff f8a7 	bl	8004dc0 <USART_TIM_RTO_Handler>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005c72:	4802      	ldr	r0, [pc, #8]	; (8005c7c <TIM2_IRQHandler+0x14>)
 8005c74:	f7fc feb9 	bl	80029ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005c78:	bf00      	nop
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	20000948 	.word	0x20000948

08005c80 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	USART_GPS_IRQHandler(&huart4);
 8005c84:	4802      	ldr	r0, [pc, #8]	; (8005c90 <UART4_IRQHandler+0x10>)
 8005c86:	f7ff f959 	bl	8004f3c <USART_GPS_IRQHandler>
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8005c8a:	bf00      	nop
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	200008c8 	.word	0x200008c8

08005c94 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8005c98:	4802      	ldr	r0, [pc, #8]	; (8005ca4 <DMA2_Channel3_IRQHandler+0x10>)
 8005c9a:	f7fa ff7f 	bl	8000b9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8005c9e:	bf00      	nop
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	2000118c 	.word	0x2000118c

08005ca8 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */
  DMA_GNSS_Periph_IRQHandler(&hdma_uart4_rx,&hdma_memtomem_dma1_channel1);
 8005cac:	4902      	ldr	r1, [pc, #8]	; (8005cb8 <DMA2_Channel5_IRQHandler+0x10>)
 8005cae:	4803      	ldr	r0, [pc, #12]	; (8005cbc <DMA2_Channel5_IRQHandler+0x14>)
 8005cb0:	f7ff f8b4 	bl	8004e1c <DMA_GNSS_Periph_IRQHandler>
  /* USER CODE END DMA2_Channel5_IRQn 0 */
  //HAL_DMA_IRQHandler(&hdma_uart4_rx);
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8005cb4:	bf00      	nop
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	2000007c 	.word	0x2000007c
 8005cbc:	2000002c 	.word	0x2000002c

08005cc0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005cc4:	4a17      	ldr	r2, [pc, #92]	; (8005d24 <SystemInit+0x64>)
 8005cc6:	4b17      	ldr	r3, [pc, #92]	; (8005d24 <SystemInit+0x64>)
 8005cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005cd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005cd4:	4a14      	ldr	r2, [pc, #80]	; (8005d28 <SystemInit+0x68>)
 8005cd6:	4b14      	ldr	r3, [pc, #80]	; (8005d28 <SystemInit+0x68>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f043 0301 	orr.w	r3, r3, #1
 8005cde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8005ce0:	4b11      	ldr	r3, [pc, #68]	; (8005d28 <SystemInit+0x68>)
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8005ce6:	4a10      	ldr	r2, [pc, #64]	; (8005d28 <SystemInit+0x68>)
 8005ce8:	4b0f      	ldr	r3, [pc, #60]	; (8005d28 <SystemInit+0x68>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005cf0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005cf4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8005cf6:	4b0c      	ldr	r3, [pc, #48]	; (8005d28 <SystemInit+0x68>)
 8005cf8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005cfc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005cfe:	4a0a      	ldr	r2, [pc, #40]	; (8005d28 <SystemInit+0x68>)
 8005d00:	4b09      	ldr	r3, [pc, #36]	; (8005d28 <SystemInit+0x68>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d08:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005d0a:	4b07      	ldr	r3, [pc, #28]	; (8005d28 <SystemInit+0x68>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005d10:	4b04      	ldr	r3, [pc, #16]	; (8005d24 <SystemInit+0x64>)
 8005d12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005d16:	609a      	str	r2, [r3, #8]
#endif
}
 8005d18:	bf00      	nop
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	e000ed00 	.word	0xe000ed00
 8005d28:	40021000 	.word	0x40021000

08005d2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005d64 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005d30:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005d32:	e003      	b.n	8005d3c <LoopCopyDataInit>

08005d34 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005d34:	4b0c      	ldr	r3, [pc, #48]	; (8005d68 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005d36:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005d38:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005d3a:	3104      	adds	r1, #4

08005d3c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005d3c:	480b      	ldr	r0, [pc, #44]	; (8005d6c <LoopForever+0xa>)
	ldr	r3, =_edata
 8005d3e:	4b0c      	ldr	r3, [pc, #48]	; (8005d70 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005d40:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005d42:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005d44:	d3f6      	bcc.n	8005d34 <CopyDataInit>
	ldr	r2, =_sbss
 8005d46:	4a0b      	ldr	r2, [pc, #44]	; (8005d74 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005d48:	e002      	b.n	8005d50 <LoopFillZerobss>

08005d4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005d4a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005d4c:	f842 3b04 	str.w	r3, [r2], #4

08005d50 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005d50:	4b09      	ldr	r3, [pc, #36]	; (8005d78 <LoopForever+0x16>)
	cmp	r2, r3
 8005d52:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005d54:	d3f9      	bcc.n	8005d4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005d56:	f7ff ffb3 	bl	8005cc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005d5a:	f000 f811 	bl	8005d80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005d5e:	f7ff fbc9 	bl	80054f4 <main>

08005d62 <LoopForever>:

LoopForever:
    b LoopForever
 8005d62:	e7fe      	b.n	8005d62 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005d64:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8005d68:	08005f44 	.word	0x08005f44
	ldr	r0, =_sdata
 8005d6c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005d70:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8005d74:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8005d78:	200019d4 	.word	0x200019d4

08005d7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005d7c:	e7fe      	b.n	8005d7c <ADC1_2_IRQHandler>
	...

08005d80 <__libc_init_array>:
 8005d80:	b570      	push	{r4, r5, r6, lr}
 8005d82:	4e0d      	ldr	r6, [pc, #52]	; (8005db8 <__libc_init_array+0x38>)
 8005d84:	4c0d      	ldr	r4, [pc, #52]	; (8005dbc <__libc_init_array+0x3c>)
 8005d86:	1ba4      	subs	r4, r4, r6
 8005d88:	10a4      	asrs	r4, r4, #2
 8005d8a:	2500      	movs	r5, #0
 8005d8c:	42a5      	cmp	r5, r4
 8005d8e:	d109      	bne.n	8005da4 <__libc_init_array+0x24>
 8005d90:	4e0b      	ldr	r6, [pc, #44]	; (8005dc0 <__libc_init_array+0x40>)
 8005d92:	4c0c      	ldr	r4, [pc, #48]	; (8005dc4 <__libc_init_array+0x44>)
 8005d94:	f000 f83a 	bl	8005e0c <_init>
 8005d98:	1ba4      	subs	r4, r4, r6
 8005d9a:	10a4      	asrs	r4, r4, #2
 8005d9c:	2500      	movs	r5, #0
 8005d9e:	42a5      	cmp	r5, r4
 8005da0:	d105      	bne.n	8005dae <__libc_init_array+0x2e>
 8005da2:	bd70      	pop	{r4, r5, r6, pc}
 8005da4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005da8:	4798      	blx	r3
 8005daa:	3501      	adds	r5, #1
 8005dac:	e7ee      	b.n	8005d8c <__libc_init_array+0xc>
 8005dae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005db2:	4798      	blx	r3
 8005db4:	3501      	adds	r5, #1
 8005db6:	e7f2      	b.n	8005d9e <__libc_init_array+0x1e>
 8005db8:	08005f3c 	.word	0x08005f3c
 8005dbc:	08005f3c 	.word	0x08005f3c
 8005dc0:	08005f3c 	.word	0x08005f3c
 8005dc4:	08005f40 	.word	0x08005f40

08005dc8 <memcpy>:
 8005dc8:	b510      	push	{r4, lr}
 8005dca:	1e43      	subs	r3, r0, #1
 8005dcc:	440a      	add	r2, r1
 8005dce:	4291      	cmp	r1, r2
 8005dd0:	d100      	bne.n	8005dd4 <memcpy+0xc>
 8005dd2:	bd10      	pop	{r4, pc}
 8005dd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ddc:	e7f7      	b.n	8005dce <memcpy+0x6>

08005dde <memset>:
 8005dde:	4402      	add	r2, r0
 8005de0:	4603      	mov	r3, r0
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d100      	bne.n	8005de8 <memset+0xa>
 8005de6:	4770      	bx	lr
 8005de8:	f803 1b01 	strb.w	r1, [r3], #1
 8005dec:	e7f9      	b.n	8005de2 <memset+0x4>

08005dee <strchr>:
 8005dee:	b2c9      	uxtb	r1, r1
 8005df0:	4603      	mov	r3, r0
 8005df2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005df6:	b11a      	cbz	r2, 8005e00 <strchr+0x12>
 8005df8:	4291      	cmp	r1, r2
 8005dfa:	d1f9      	bne.n	8005df0 <strchr+0x2>
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	4770      	bx	lr
 8005e00:	2900      	cmp	r1, #0
 8005e02:	bf0c      	ite	eq
 8005e04:	4618      	moveq	r0, r3
 8005e06:	2000      	movne	r0, #0
 8005e08:	4770      	bx	lr
	...

08005e0c <_init>:
 8005e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e0e:	bf00      	nop
 8005e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e12:	bc08      	pop	{r3}
 8005e14:	469e      	mov	lr, r3
 8005e16:	4770      	bx	lr

08005e18 <_fini>:
 8005e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1a:	bf00      	nop
 8005e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e1e:	bc08      	pop	{r3}
 8005e20:	469e      	mov	lr, r3
 8005e22:	4770      	bx	lr
