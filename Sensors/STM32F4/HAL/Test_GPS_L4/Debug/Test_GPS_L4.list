
Test_GPS_L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f430  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800f5b8  0800f5b8  0001f5b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f618  0800f618  0001f618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f620  0800f620  0001f620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f624  0800f624  0001f624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  0800f628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007c8  2000000c  0800f634  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200007d4  0800f634  000207d4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010c8f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002081  00000000  00000000  00030ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000228  00000000  00000000  00032d50  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000054e5  00000000  00000000  00032f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005286  00000000  00000000  0003845d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003d6e3  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00004064  00000000  00000000  0003d760  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000020  00000000  00000000  000417c8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800f5a0 	.word	0x0800f5a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800f5a0 	.word	0x0800f5a0

080001c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80001ce:	2300      	movs	r3, #0
 80001d0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001d2:	4a0c      	ldr	r2, [pc, #48]	; (8000204 <HAL_Init+0x3c>)
 80001d4:	4b0b      	ldr	r3, [pc, #44]	; (8000204 <HAL_Init+0x3c>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001dc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001de:	2003      	movs	r0, #3
 80001e0:	f000 fc64 	bl	8000aac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001e4:	2000      	movs	r0, #0
 80001e6:	f000 f849 	bl	800027c <HAL_InitTick>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d002      	beq.n	80001f6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80001f0:	2301      	movs	r3, #1
 80001f2:	71fb      	strb	r3, [r7, #7]
 80001f4:	e001      	b.n	80001fa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80001f6:	f00e fd47 	bl	800ec88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001fa:	79fb      	ldrb	r3, [r7, #7]
}
 80001fc:	4618      	mov	r0, r3
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	40022000 	.word	0x40022000

08000208 <HAL_DeInit>:
  * @brief De-initialize common part of the HAL and stop the source of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800020c:	4b13      	ldr	r3, [pc, #76]	; (800025c <HAL_DeInit+0x54>)
 800020e:	f04f 32ff 	mov.w	r2, #4294967295
 8000212:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_RCC_APB1_RELEASE_RESET();
 8000214:	4b11      	ldr	r3, [pc, #68]	; (800025c <HAL_DeInit+0x54>)
 8000216:	2200      	movs	r2, #0
 8000218:	639a      	str	r2, [r3, #56]	; 0x38

  __HAL_RCC_APB2_FORCE_RESET();
 800021a:	4b10      	ldr	r3, [pc, #64]	; (800025c <HAL_DeInit+0x54>)
 800021c:	f04f 32ff 	mov.w	r2, #4294967295
 8000220:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_RCC_APB2_RELEASE_RESET();
 8000222:	4b0e      	ldr	r3, [pc, #56]	; (800025c <HAL_DeInit+0x54>)
 8000224:	2200      	movs	r2, #0
 8000226:	641a      	str	r2, [r3, #64]	; 0x40

  __HAL_RCC_AHB1_FORCE_RESET();
 8000228:	4b0c      	ldr	r3, [pc, #48]	; (800025c <HAL_DeInit+0x54>)
 800022a:	f04f 32ff 	mov.w	r2, #4294967295
 800022e:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000230:	4b0a      	ldr	r3, [pc, #40]	; (800025c <HAL_DeInit+0x54>)
 8000232:	2200      	movs	r2, #0
 8000234:	629a      	str	r2, [r3, #40]	; 0x28

  __HAL_RCC_AHB2_FORCE_RESET();
 8000236:	4b09      	ldr	r3, [pc, #36]	; (800025c <HAL_DeInit+0x54>)
 8000238:	f04f 32ff 	mov.w	r2, #4294967295
 800023c:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_AHB2_RELEASE_RESET();
 800023e:	4b07      	ldr	r3, [pc, #28]	; (800025c <HAL_DeInit+0x54>)
 8000240:	2200      	movs	r2, #0
 8000242:	62da      	str	r2, [r3, #44]	; 0x2c

  __HAL_RCC_AHB3_FORCE_RESET();
 8000244:	4b05      	ldr	r3, [pc, #20]	; (800025c <HAL_DeInit+0x54>)
 8000246:	f04f 32ff 	mov.w	r2, #4294967295
 800024a:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_AHB3_RELEASE_RESET();
 800024c:	4b03      	ldr	r3, [pc, #12]	; (800025c <HAL_DeInit+0x54>)
 800024e:	2200      	movs	r2, #0
 8000250:	631a      	str	r2, [r3, #48]	; 0x30

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000252:	f000 f80c 	bl	800026e <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8000256:	2300      	movs	r3, #0
}
 8000258:	4618      	mov	r0, r3
 800025a:	bd80      	pop	{r7, pc}
 800025c:	40021000 	.word	0x40021000
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000264:	bf00      	nop
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr

0800026e <HAL_MspDeInit>:
/**
  * @brief  DeInitialize the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800026e:	b480      	push	{r7}
 8000270:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8000272:	bf00      	nop
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr

0800027c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000284:	2300      	movs	r3, #0
 8000286:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000288:	4b16      	ldr	r3, [pc, #88]	; (80002e4 <HAL_InitTick+0x68>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d022      	beq.n	80002d6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000290:	4b15      	ldr	r3, [pc, #84]	; (80002e8 <HAL_InitTick+0x6c>)
 8000292:	681a      	ldr	r2, [r3, #0]
 8000294:	4b13      	ldr	r3, [pc, #76]	; (80002e4 <HAL_InitTick+0x68>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800029c:	fbb1 f3f3 	udiv	r3, r1, r3
 80002a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 fc48 	bl	8000b3a <HAL_SYSTICK_Config>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d10f      	bne.n	80002d0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2b0f      	cmp	r3, #15
 80002b4:	d809      	bhi.n	80002ca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002b6:	2200      	movs	r2, #0
 80002b8:	6879      	ldr	r1, [r7, #4]
 80002ba:	f04f 30ff 	mov.w	r0, #4294967295
 80002be:	f000 fc00 	bl	8000ac2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80002c2:	4a0a      	ldr	r2, [pc, #40]	; (80002ec <HAL_InitTick+0x70>)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	6013      	str	r3, [r2, #0]
 80002c8:	e007      	b.n	80002da <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80002ca:	2301      	movs	r3, #1
 80002cc:	73fb      	strb	r3, [r7, #15]
 80002ce:	e004      	b.n	80002da <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80002d0:	2301      	movs	r3, #1
 80002d2:	73fb      	strb	r3, [r7, #15]
 80002d4:	e001      	b.n	80002da <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80002d6:	2301      	movs	r3, #1
 80002d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80002da:	7bfb      	ldrb	r3, [r7, #15]
}
 80002dc:	4618      	mov	r0, r3
 80002de:	3710      	adds	r7, #16
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	20000004 	.word	0x20000004
 80002e8:	20000008 	.word	0x20000008
 80002ec:	20000000 	.word	0x20000000

080002f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002f4:	4b05      	ldr	r3, [pc, #20]	; (800030c <HAL_IncTick+0x1c>)
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	4b05      	ldr	r3, [pc, #20]	; (8000310 <HAL_IncTick+0x20>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4413      	add	r3, r2
 80002fe:	4a03      	ldr	r2, [pc, #12]	; (800030c <HAL_IncTick+0x1c>)
 8000300:	6013      	str	r3, [r2, #0]
}
 8000302:	bf00      	nop
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr
 800030c:	20000028 	.word	0x20000028
 8000310:	20000004 	.word	0x20000004

08000314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  return uwTick;
 8000318:	4b03      	ldr	r3, [pc, #12]	; (8000328 <HAL_GetTick+0x14>)
 800031a:	681b      	ldr	r3, [r3, #0]
}
 800031c:	4618      	mov	r0, r3
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	20000028 	.word	0x20000028

0800032c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000330:	4b03      	ldr	r3, [pc, #12]	; (8000340 <HAL_GetTickPrio+0x14>)
 8000332:	681b      	ldr	r3, [r3, #0]
}
 8000334:	4618      	mov	r0, r3
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	20000000 	.word	0x20000000

08000344 <HAL_SetTickFreq>:
  * @brief Set new tick Freq.
  * @param Freq tick frequency
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SetTickFreq(uint32_t Freq)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status  = HAL_OK;
 800034c:	2300      	movs	r3, #0
 800034e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 8000350:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <HAL_SetTickFreq+0x3c>)
 8000352:	681a      	ldr	r2, [r3, #0]
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	429a      	cmp	r2, r3
 8000358:	d00c      	beq.n	8000374 <HAL_SetTickFreq+0x30>
  {
    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 800035a:	4b0a      	ldr	r3, [pc, #40]	; (8000384 <HAL_SetTickFreq+0x40>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	4618      	mov	r0, r3
 8000360:	f7ff ff8c 	bl	800027c <HAL_InitTick>
 8000364:	4603      	mov	r3, r0
 8000366:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8000368:	7bfb      	ldrb	r3, [r7, #15]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d102      	bne.n	8000374 <HAL_SetTickFreq+0x30>
    {
      uwTickFreq = Freq;
 800036e:	4a04      	ldr	r2, [pc, #16]	; (8000380 <HAL_SetTickFreq+0x3c>)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	6013      	str	r3, [r2, #0]
    }
  }

  return status;
 8000374:	7bfb      	ldrb	r3, [r7, #15]
}
 8000376:	4618      	mov	r0, r3
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	20000004 	.word	0x20000004
 8000384:	20000000 	.word	0x20000000

08000388 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
uint32_t HAL_GetTickFreq(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  return uwTickFreq;
 800038c:	4b03      	ldr	r3, [pc, #12]	; (800039c <HAL_GetTickFreq+0x14>)
 800038e:	681b      	ldr	r3, [r3, #0]
}
 8000390:	4618      	mov	r0, r3
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	20000004 	.word	0x20000004

080003a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80003a8:	f7ff ffb4 	bl	8000314 <HAL_GetTick>
 80003ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003b8:	d004      	beq.n	80003c4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80003ba:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <HAL_Delay+0x40>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	68fa      	ldr	r2, [r7, #12]
 80003c0:	4413      	add	r3, r2
 80003c2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80003c4:	bf00      	nop
 80003c6:	f7ff ffa5 	bl	8000314 <HAL_GetTick>
 80003ca:	4602      	mov	r2, r0
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	1ad2      	subs	r2, r2, r3
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	429a      	cmp	r2, r3
 80003d4:	d3f7      	bcc.n	80003c6 <HAL_Delay+0x26>
  {
  }
}
 80003d6:	bf00      	nop
 80003d8:	3710      	adds	r7, #16
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	20000004 	.word	0x20000004

080003e4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80003e8:	4a05      	ldr	r2, [pc, #20]	; (8000400 <HAL_SuspendTick+0x1c>)
 80003ea:	4b05      	ldr	r3, [pc, #20]	; (8000400 <HAL_SuspendTick+0x1c>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f023 0302 	bic.w	r3, r3, #2
 80003f2:	6013      	str	r3, [r2, #0]
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	e000e010 	.word	0xe000e010

08000404 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000408:	4a05      	ldr	r2, [pc, #20]	; (8000420 <HAL_ResumeTick+0x1c>)
 800040a:	4b05      	ldr	r3, [pc, #20]	; (8000420 <HAL_ResumeTick+0x1c>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f043 0302 	orr.w	r3, r3, #2
 8000412:	6013      	str	r3, [r2, #0]
}
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	e000e010 	.word	0xe000e010

08000424 <HAL_GetHalVersion>:
/**
  * @brief  Return the HAL revision.
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  return STM32L4XX_HAL_VERSION;
 8000428:	f04f 7385 	mov.w	r3, #17432576	; 0x10a0000
}
 800042c:	4618      	mov	r0, r3
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr

08000436 <HAL_GetREVID>:
/**
  * @brief  Return the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000436:	b480      	push	{r7}
 8000438:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 800043a:	4b04      	ldr	r3, [pc, #16]	; (800044c <HAL_GetREVID+0x16>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	0c1b      	lsrs	r3, r3, #16
 8000440:	b29b      	uxth	r3, r3
}
 8000442:	4618      	mov	r0, r3
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr
 800044c:	e0042000 	.word	0xe0042000

08000450 <HAL_GetDEVID>:
/**
  * @brief  Return the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  return(DBGMCU->IDCODE & DBGMCU_IDCODE_DEV_ID);
 8000454:	4b04      	ldr	r3, [pc, #16]	; (8000468 <HAL_GetDEVID+0x18>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800045c:	4618      	mov	r0, r3
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	e0042000 	.word	0xe0042000

0800046c <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8000470:	4b03      	ldr	r3, [pc, #12]	; (8000480 <HAL_GetUIDw0+0x14>)
 8000472:	681b      	ldr	r3, [r3, #0]
}
 8000474:	4618      	mov	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	1fff7590 	.word	0x1fff7590

08000484 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8000488:	4b03      	ldr	r3, [pc, #12]	; (8000498 <HAL_GetUIDw1+0x14>)
 800048a:	681b      	ldr	r3, [r3, #0]
}
 800048c:	4618      	mov	r0, r3
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	1fff7594 	.word	0x1fff7594

0800049c <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80004a0:	4b03      	ldr	r3, [pc, #12]	; (80004b0 <HAL_GetUIDw2+0x14>)
 80004a2:	681b      	ldr	r3, [r3, #0]
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	1fff7598 	.word	0x1fff7598

080004b4 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80004b8:	4a05      	ldr	r2, [pc, #20]	; (80004d0 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80004ba:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80004bc:	685b      	ldr	r3, [r3, #4]
 80004be:	f043 0301 	orr.w	r3, r3, #1
 80004c2:	6053      	str	r3, [r2, #4]
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	e0042000 	.word	0xe0042000

080004d4 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80004d8:	4a05      	ldr	r2, [pc, #20]	; (80004f0 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 80004da:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 80004dc:	685b      	ldr	r3, [r3, #4]
 80004de:	f023 0301 	bic.w	r3, r3, #1
 80004e2:	6053      	str	r3, [r2, #4]
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	e0042000 	.word	0xe0042000

080004f4 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP0/STOP1/STOP2 modes.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80004f8:	4a05      	ldr	r2, [pc, #20]	; (8000510 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80004fa:	4b05      	ldr	r3, [pc, #20]	; (8000510 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80004fc:	685b      	ldr	r3, [r3, #4]
 80004fe:	f043 0302 	orr.w	r3, r3, #2
 8000502:	6053      	str	r3, [r2, #4]
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	e0042000 	.word	0xe0042000

08000514 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP0/STOP1/STOP2 modes.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8000518:	4a05      	ldr	r2, [pc, #20]	; (8000530 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 800051a:	4b05      	ldr	r3, [pc, #20]	; (8000530 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 800051c:	685b      	ldr	r3, [r3, #4]
 800051e:	f023 0302 	bic.w	r3, r3, #2
 8000522:	6053      	str	r3, [r2, #4]
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	e0042000 	.word	0xe0042000

08000534 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000538:	4a05      	ldr	r2, [pc, #20]	; (8000550 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 800053a:	4b05      	ldr	r3, [pc, #20]	; (8000550 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 800053c:	685b      	ldr	r3, [r3, #4]
 800053e:	f043 0304 	orr.w	r3, r3, #4
 8000542:	6053      	str	r3, [r2, #4]
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	e0042000 	.word	0xe0042000

08000554 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000558:	4a05      	ldr	r2, [pc, #20]	; (8000570 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 800055a:	4b05      	ldr	r3, [pc, #20]	; (8000570 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	f023 0304 	bic.w	r3, r3, #4
 8000562:	6053      	str	r3, [r2, #4]
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	e0042000 	.word	0xe0042000

08000574 <HAL_SYSCFG_SRAM2Erase>:
  * @note   As long as SRAM2 is not erased the SRAM2ER bit will be set.
  *         This bit is automatically reset at the end of the SRAM2 erase operation.
  * @retval None
  */
void HAL_SYSCFG_SRAM2Erase(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* unlock the write protection of the SRAM2ER bit */
  SYSCFG->SKR = 0xCA;
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <HAL_SYSCFG_SRAM2Erase+0x20>)
 800057a:	22ca      	movs	r2, #202	; 0xca
 800057c:	625a      	str	r2, [r3, #36]	; 0x24
  SYSCFG->SKR = 0x53;
 800057e:	4b05      	ldr	r3, [pc, #20]	; (8000594 <HAL_SYSCFG_SRAM2Erase+0x20>)
 8000580:	2253      	movs	r2, #83	; 0x53
 8000582:	625a      	str	r2, [r3, #36]	; 0x24
  /* Starts a hardware SRAM2 erase operation*/
  *(__IO uint32_t *) SCSR_SRAM2ER_BB = 0x00000001UL;
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <HAL_SYSCFG_SRAM2Erase+0x24>)
 8000586:	2201      	movs	r2, #1
 8000588:	601a      	str	r2, [r3, #0]
}
 800058a:	bf00      	nop
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	40010000 	.word	0x40010000
 8000598:	42200300 	.word	0x42200300

0800059c <HAL_SYSCFG_EnableMemorySwappingBank>:
  *         and Flash Bank1 mapped at 0x08100000 (and aliased at 0x00100000)
  *
  * @retval None
  */
void HAL_SYSCFG_EnableMemorySwappingBank(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)FB_MODE_BB = 0x00000001UL;
 80005a0:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <HAL_SYSCFG_EnableMemorySwappingBank+0x14>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	601a      	str	r2, [r3, #0]
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	42200020 	.word	0x42200020

080005b4 <HAL_SYSCFG_DisableMemorySwappingBank>:
  *         and Flash Bank2 mapped at 0x08100000 (and aliased at 0x00100000)
  *
  * @retval None
  */
void HAL_SYSCFG_DisableMemorySwappingBank(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0

  *(__IO uint32_t *)FB_MODE_BB = 0x00000000UL;
 80005b8:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <HAL_SYSCFG_DisableMemorySwappingBank+0x14>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
}
 80005be:	bf00      	nop
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	42200020 	.word	0x42200020

080005cc <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE1: VREF_OUT2 around 2.5 V.
  *                                                This requires VDDA equal to or higher than 2.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 80005d4:	4906      	ldr	r1, [pc, #24]	; (80005f0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f023 0204 	bic.w	r2, r3, #4
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4313      	orrs	r3, r2
 80005e2:	600b      	str	r3, [r1, #0]
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	40010030 	.word	0x40010030

080005f4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80005fc:	4906      	ldr	r1, [pc, #24]	; (8000618 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f023 0202 	bic.w	r2, r3, #2
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4313      	orrs	r3, r2
 800060a:	600b      	str	r3, [r1, #0]
}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	40010030 	.word	0x40010030

0800061c <HAL_SYSCFG_VREFBUF_TrimmingConfig>:
/**
  * @brief  Tune the Internal Voltage Reference buffer (VREFBUF).
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_TrimmingConfig(uint32_t TrimmingValue)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_TRIMMING(TrimmingValue));

  MODIFY_REG(VREFBUF->CCR, VREFBUF_CCR_TRIM, TrimmingValue);
 8000624:	4906      	ldr	r1, [pc, #24]	; (8000640 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
 8000628:	685b      	ldr	r3, [r3, #4]
 800062a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4313      	orrs	r3, r2
 8000632:	604b      	str	r3, [r1, #4]
}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	40010030 	.word	0x40010030

08000644 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 800064a:	4a0f      	ldr	r2, [pc, #60]	; (8000688 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800064c:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8000656:	f7ff fe5d 	bl	8000314 <HAL_GetTick>
 800065a:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0U)
 800065c:	e008      	b.n	8000670 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 800065e:	f7ff fe59 	bl	8000314 <HAL_GetTick>
 8000662:	4602      	mov	r2, r0
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	1ad3      	subs	r3, r2, r3
 8000668:	2b0a      	cmp	r3, #10
 800066a:	d901      	bls.n	8000670 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 800066c:	2303      	movs	r3, #3
 800066e:	e006      	b.n	800067e <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0U)
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f003 0308 	and.w	r3, r3, #8
 8000678:	2b00      	cmp	r3, #0
 800067a:	d0f0      	beq.n	800065e <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 800067c:	2300      	movs	r3, #0
}
 800067e:	4618      	mov	r0, r3
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40010030 	.word	0x40010030

0800068c <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8000690:	4a05      	ldr	r2, [pc, #20]	; (80006a8 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8000692:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f023 0301 	bic.w	r3, r3, #1
 800069a:	6013      	str	r3, [r2, #0]
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	40010030 	.word	0x40010030

080006ac <HAL_SYSCFG_EnableIOAnalogSwitchBooster>:
  * @brief  Enable the I/O analog switch voltage booster
  *
  * @retval None
  */
void HAL_SYSCFG_EnableIOAnalogSwitchBooster(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_BOOSTEN);
 80006b0:	4a05      	ldr	r2, [pc, #20]	; (80006c8 <HAL_SYSCFG_EnableIOAnalogSwitchBooster+0x1c>)
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <HAL_SYSCFG_EnableIOAnalogSwitchBooster+0x1c>)
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006ba:	6053      	str	r3, [r2, #4]
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	40010000 	.word	0x40010000

080006cc <HAL_SYSCFG_DisableIOAnalogSwitchBooster>:
  * @brief  Disable the I/O analog switch voltage booster
  *
  * @retval None
  */
void HAL_SYSCFG_DisableIOAnalogSwitchBooster(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_BOOSTEN);
 80006d0:	4a05      	ldr	r2, [pc, #20]	; (80006e8 <HAL_SYSCFG_DisableIOAnalogSwitchBooster+0x1c>)
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <HAL_SYSCFG_DisableIOAnalogSwitchBooster+0x1c>)
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80006da:	6053      	str	r3, [r2, #4]
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40010000 	.word	0x40010000

080006ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f003 0307 	and.w	r3, r3, #7
 80006fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <__NVIC_SetPriorityGrouping+0x44>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000708:	4013      	ands	r3, r2
 800070a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800071c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800071e:	4a04      	ldr	r2, [pc, #16]	; (8000730 <__NVIC_SetPriorityGrouping+0x44>)
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	60d3      	str	r3, [r2, #12]
}
 8000724:	bf00      	nop
 8000726:	3714      	adds	r7, #20
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000738:	4b04      	ldr	r3, [pc, #16]	; (800074c <__NVIC_GetPriorityGrouping+0x18>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	0a1b      	lsrs	r3, r3, #8
 800073e:	f003 0307 	and.w	r3, r3, #7
}
 8000742:	4618      	mov	r0, r3
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800075a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075e:	2b00      	cmp	r3, #0
 8000760:	db0b      	blt.n	800077a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000762:	4909      	ldr	r1, [pc, #36]	; (8000788 <__NVIC_EnableIRQ+0x38>)
 8000764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000768:	095b      	lsrs	r3, r3, #5
 800076a:	79fa      	ldrb	r2, [r7, #7]
 800076c:	f002 021f 	and.w	r2, r2, #31
 8000770:	2001      	movs	r0, #1
 8000772:	fa00 f202 	lsl.w	r2, r0, r2
 8000776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	e000e100 	.word	0xe000e100

0800078c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079a:	2b00      	cmp	r3, #0
 800079c:	db10      	blt.n	80007c0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800079e:	490b      	ldr	r1, [pc, #44]	; (80007cc <__NVIC_DisableIRQ+0x40>)
 80007a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a4:	095b      	lsrs	r3, r3, #5
 80007a6:	79fa      	ldrb	r2, [r7, #7]
 80007a8:	f002 021f 	and.w	r2, r2, #31
 80007ac:	2001      	movs	r0, #1
 80007ae:	fa00 f202 	lsl.w	r2, r0, r2
 80007b2:	3320      	adds	r3, #32
 80007b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80007bc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	e000e100 	.word	0xe000e100

080007d0 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	db0e      	blt.n	8000800 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80007e2:	4a0b      	ldr	r2, [pc, #44]	; (8000810 <__NVIC_GetPendingIRQ+0x40>)
 80007e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e8:	095b      	lsrs	r3, r3, #5
 80007ea:	3340      	adds	r3, #64	; 0x40
 80007ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	f003 031f 	and.w	r3, r3, #31
 80007f6:	fa22 f303 	lsr.w	r3, r2, r3
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	e000      	b.n	8000802 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 8000800:	2300      	movs	r3, #0
  }
}
 8000802:	4618      	mov	r0, r3
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000e100 	.word	0xe000e100

08000814 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	2b00      	cmp	r3, #0
 8000824:	db0c      	blt.n	8000840 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000826:	4909      	ldr	r1, [pc, #36]	; (800084c <__NVIC_SetPendingIRQ+0x38>)
 8000828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082c:	095b      	lsrs	r3, r3, #5
 800082e:	79fa      	ldrb	r2, [r7, #7]
 8000830:	f002 021f 	and.w	r2, r2, #31
 8000834:	2001      	movs	r0, #1
 8000836:	fa00 f202 	lsl.w	r2, r0, r2
 800083a:	3340      	adds	r3, #64	; 0x40
 800083c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	e000e100 	.word	0xe000e100

08000850 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800085a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085e:	2b00      	cmp	r3, #0
 8000860:	db0c      	blt.n	800087c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000862:	4909      	ldr	r1, [pc, #36]	; (8000888 <__NVIC_ClearPendingIRQ+0x38>)
 8000864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000868:	095b      	lsrs	r3, r3, #5
 800086a:	79fa      	ldrb	r2, [r7, #7]
 800086c:	f002 021f 	and.w	r2, r2, #31
 8000870:	2001      	movs	r0, #1
 8000872:	fa00 f202 	lsl.w	r2, r0, r2
 8000876:	3360      	adds	r3, #96	; 0x60
 8000878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	e000e100 	.word	0xe000e100

0800088c <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089a:	2b00      	cmp	r3, #0
 800089c:	db0e      	blt.n	80008bc <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800089e:	4a0b      	ldr	r2, [pc, #44]	; (80008cc <__NVIC_GetActive+0x40>)
 80008a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a4:	095b      	lsrs	r3, r3, #5
 80008a6:	3380      	adds	r3, #128	; 0x80
 80008a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	f003 031f 	and.w	r3, r3, #31
 80008b2:	fa22 f303 	lsr.w	r3, r2, r3
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	e000      	b.n	80008be <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
 80008bc:	2300      	movs	r3, #0
  }
}
 80008be:	4618      	mov	r0, r3
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000e100 	.word	0xe000e100

080008d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	6039      	str	r1, [r7, #0]
 80008da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	db0a      	blt.n	80008fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e4:	490d      	ldr	r1, [pc, #52]	; (800091c <__NVIC_SetPriority+0x4c>)
 80008e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ea:	683a      	ldr	r2, [r7, #0]
 80008ec:	b2d2      	uxtb	r2, r2
 80008ee:	0112      	lsls	r2, r2, #4
 80008f0:	b2d2      	uxtb	r2, r2
 80008f2:	440b      	add	r3, r1
 80008f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f8:	e00a      	b.n	8000910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fa:	4909      	ldr	r1, [pc, #36]	; (8000920 <__NVIC_SetPriority+0x50>)
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	f003 030f 	and.w	r3, r3, #15
 8000902:	3b04      	subs	r3, #4
 8000904:	683a      	ldr	r2, [r7, #0]
 8000906:	b2d2      	uxtb	r2, r2
 8000908:	0112      	lsls	r2, r2, #4
 800090a:	b2d2      	uxtb	r2, r2
 800090c:	440b      	add	r3, r1
 800090e:	761a      	strb	r2, [r3, #24]
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	e000e100 	.word	0xe000e100
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) >= 0)
 800092e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000932:	2b00      	cmp	r3, #0
 8000934:	db09      	blt.n	800094a <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 8000936:	4a0d      	ldr	r2, [pc, #52]	; (800096c <__NVIC_GetPriority+0x48>)
 8000938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093c:	4413      	add	r3, r2
 800093e:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8000942:	b2db      	uxtb	r3, r3
 8000944:	091b      	lsrs	r3, r3, #4
 8000946:	b2db      	uxtb	r3, r3
 8000948:	e009      	b.n	800095e <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 800094a:	4a09      	ldr	r2, [pc, #36]	; (8000970 <__NVIC_GetPriority+0x4c>)
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	f003 030f 	and.w	r3, r3, #15
 8000952:	3b04      	subs	r3, #4
 8000954:	4413      	add	r3, r2
 8000956:	7e1b      	ldrb	r3, [r3, #24]
 8000958:	b2db      	uxtb	r3, r3
 800095a:	091b      	lsrs	r3, r3, #4
 800095c:	b2db      	uxtb	r3, r3
  }
}
 800095e:	4618      	mov	r0, r3
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000e100 	.word	0xe000e100
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000974:	b480      	push	{r7}
 8000976:	b089      	sub	sp, #36	; 0x24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	f1c3 0307 	rsb	r3, r3, #7
 800098e:	2b04      	cmp	r3, #4
 8000990:	bf28      	it	cs
 8000992:	2304      	movcs	r3, #4
 8000994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	3304      	adds	r3, #4
 800099a:	2b06      	cmp	r3, #6
 800099c:	d902      	bls.n	80009a4 <NVIC_EncodePriority+0x30>
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	3b03      	subs	r3, #3
 80009a2:	e000      	b.n	80009a6 <NVIC_EncodePriority+0x32>
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a8:	2201      	movs	r2, #1
 80009aa:	69bb      	ldr	r3, [r7, #24]
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	1e5a      	subs	r2, r3, #1
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	401a      	ands	r2, r3
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009ba:	2101      	movs	r1, #1
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	fa01 f303 	lsl.w	r3, r1, r3
 80009c2:	1e59      	subs	r1, r3, #1
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c8:	4313      	orrs	r3, r2
         );
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3724      	adds	r7, #36	; 0x24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
 80009d6:	b480      	push	{r7}
 80009d8:	b089      	sub	sp, #36	; 0x24
 80009da:	af00      	add	r7, sp, #0
 80009dc:	60f8      	str	r0, [r7, #12]
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	607a      	str	r2, [r7, #4]
 80009e2:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	f1c3 0307 	rsb	r3, r3, #7
 80009f2:	2b04      	cmp	r3, #4
 80009f4:	bf28      	it	cs
 80009f6:	2304      	movcs	r3, #4
 80009f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	3304      	adds	r3, #4
 80009fe:	2b06      	cmp	r3, #6
 8000a00:	d902      	bls.n	8000a08 <NVIC_DecodePriority+0x32>
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	3b03      	subs	r3, #3
 8000a06:	e000      	b.n	8000a0a <NVIC_DecodePriority+0x34>
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8000a0c:	68fa      	ldr	r2, [r7, #12]
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	40da      	lsrs	r2, r3
 8000a12:	2101      	movs	r1, #1
 8000a14:	69bb      	ldr	r3, [r7, #24]
 8000a16:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	401a      	ands	r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8000a22:	2201      	movs	r2, #1
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	1e5a      	subs	r2, r3, #1
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	401a      	ands	r2, r3
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	601a      	str	r2, [r3, #0]
}
 8000a34:	bf00      	nop
 8000a36:	3724      	adds	r7, #36	; 0x24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8000a44:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000a48:	4905      	ldr	r1, [pc, #20]	; (8000a60 <__NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000a4a:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <__NVIC_SystemReset+0x20>)
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000a52:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <__NVIC_SystemReset+0x24>)
 8000a54:	4313      	orrs	r3, r2
 8000a56:	60cb      	str	r3, [r1, #12]
 8000a58:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <__NVIC_SystemReset+0x1c>
 8000a60:	e000ed00 	.word	0xe000ed00
 8000a64:	05fa0004 	.word	0x05fa0004

08000a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	3b01      	subs	r3, #1
 8000a74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a78:	d301      	bcc.n	8000a7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e00f      	b.n	8000a9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <SysTick_Config+0x40>)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a86:	210f      	movs	r1, #15
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8c:	f7ff ff20 	bl	80008d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <SysTick_Config+0x40>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a96:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <SysTick_Config+0x40>)
 8000a98:	2207      	movs	r2, #7
 8000a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	e000e010 	.word	0xe000e010

08000aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f7ff fe19 	bl	80006ec <__NVIC_SetPriorityGrouping>
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b086      	sub	sp, #24
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	4603      	mov	r3, r0
 8000aca:	60b9      	str	r1, [r7, #8]
 8000acc:	607a      	str	r2, [r7, #4]
 8000ace:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad4:	f7ff fe2e 	bl	8000734 <__NVIC_GetPriorityGrouping>
 8000ad8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	68b9      	ldr	r1, [r7, #8]
 8000ade:	6978      	ldr	r0, [r7, #20]
 8000ae0:	f7ff ff48 	bl	8000974 <NVIC_EncodePriority>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aea:	4611      	mov	r1, r2
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff feef 	bl	80008d0 <__NVIC_SetPriority>
}
 8000af2:	bf00      	nop
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	4603      	mov	r3, r0
 8000b02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fe21 	bl	8000750 <__NVIC_EnableIRQ>
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b082      	sub	sp, #8
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fe31 	bl	800078c <__NVIC_DisableIRQ>
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8000b36:	f7ff ff83 	bl	8000a40 <__NVIC_SystemReset>

08000b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f7ff ff90 	bl	8000a68 <SysTick_Config>
 8000b48:	4603      	mov	r3, r0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Get the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
 8000b56:	f7ff fded 	bl	8000734 <__NVIC_GetPriorityGrouping>
 8000b5a:	4603      	mov	r3, r0
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority: Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority: Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 8000b70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fed5 	bl	8000924 <__NVIC_GetPriority>
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	68b9      	ldr	r1, [r7, #8]
 8000b80:	f7ff ff29 	bl	80009d6 <NVIC_DecodePriority>
}
 8000b84:	bf00      	nop
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff fe3a 	bl	8000814 <__NVIC_SetPendingIRQ>
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fe0a 	bl	80007d0 <__NVIC_GetPendingIRQ>
 8000bbc:	4603      	mov	r3, r0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8000bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fe3b 	bl	8000850 <__NVIC_ClearPendingIRQ>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	4603      	mov	r3, r0
 8000bea:	71fb      	strb	r3, [r7, #7]
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
 8000bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fe4b 	bl	800088c <__NVIC_GetActive>
 8000bf6:	4603      	mov	r3, r0
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	d106      	bne.n	8000c1c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000c0e:	4a09      	ldr	r2, [pc, #36]	; (8000c34 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f043 0304 	orr.w	r3, r3, #4
 8000c18:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000c1a:	e005      	b.n	8000c28 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000c1c:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000c1e:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f023 0304 	bic.w	r3, r3, #4
 8000c26:	6013      	str	r3, [r2, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000e010 	.word	0xe000e010

08000c38 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000c3c:	f000 f802 	bl	8000c44 <HAL_SYSTICK_Callback>
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <HAL_MPU_Disable>:
/**
  * @brief  Disable the MPU.
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000c56:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000c5a:	4a07      	ldr	r2, [pc, #28]	; (8000c78 <HAL_MPU_Disable+0x26>)
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_MPU_Disable+0x26>)
 8000c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c64:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
 8000c66:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <HAL_MPU_Disable+0x2a>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	605a      	str	r2, [r3, #4]
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00
 8000c7c:	e000ed90 	.word	0xe000ed90

08000c80 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000c88:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <HAL_MPU_Enable+0x34>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000c92:	4a09      	ldr	r2, [pc, #36]	; (8000cb8 <HAL_MPU_Enable+0x38>)
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <HAL_MPU_Enable+0x38>)
 8000c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c9c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000c9e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ca2:	f3bf 8f6f 	isb	sy

  /* Ensure MPU settings take effects */
  __DSB();
  __ISB();
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000ed90 	.word	0xe000ed90
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init: Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000cc4:	4a1e      	ldr	r2, [pc, #120]	; (8000d40 <HAL_MPU_ConfigRegion+0x84>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	785b      	ldrb	r3, [r3, #1]
 8000cca:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d028      	beq.n	8000d26 <HAL_MPU_ConfigRegion+0x6a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8000cd4:	4a1a      	ldr	r2, [pc, #104]	; (8000d40 <HAL_MPU_ConfigRegion+0x84>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec        << MPU_RASR_XN_Pos)   |
 8000cdc:	4918      	ldr	r1, [pc, #96]	; (8000d40 <HAL_MPU_ConfigRegion+0x84>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	7b1b      	ldrb	r3, [r3, #12]
 8000ce2:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission   << MPU_RASR_AP_Pos)   |
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	7adb      	ldrb	r3, [r3, #11]
 8000ce8:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec        << MPU_RASR_XN_Pos)   |
 8000cea:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField       << MPU_RASR_TEX_Pos)  |
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	7a9b      	ldrb	r3, [r3, #10]
 8000cf0:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission   << MPU_RASR_AP_Pos)   |
 8000cf2:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable        << MPU_RASR_S_Pos)    |
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	7b5b      	ldrb	r3, [r3, #13]
 8000cf8:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField       << MPU_RASR_TEX_Pos)  |
 8000cfa:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable        << MPU_RASR_C_Pos)    |
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	7b9b      	ldrb	r3, [r3, #14]
 8000d00:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable        << MPU_RASR_S_Pos)    |
 8000d02:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable       << MPU_RASR_B_Pos)    |
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	7bdb      	ldrb	r3, [r3, #15]
 8000d08:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable        << MPU_RASR_C_Pos)    |
 8000d0a:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable   << MPU_RASR_SRD_Pos)  |
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	7a5b      	ldrb	r3, [r3, #9]
 8000d10:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable       << MPU_RASR_B_Pos)    |
 8000d12:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	7a1b      	ldrb	r3, [r3, #8]
 8000d18:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable   << MPU_RASR_SRD_Pos)  |
 8000d1a:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable             << MPU_RASR_ENABLE_Pos);
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	7812      	ldrb	r2, [r2, #0]
                ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 8000d20:	4313      	orrs	r3, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec        << MPU_RASR_XN_Pos)   |
 8000d22:	610b      	str	r3, [r1, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000d24:	e005      	b.n	8000d32 <HAL_MPU_ConfigRegion+0x76>
    MPU->RBAR = 0x00;
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_MPU_ConfigRegion+0x84>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000d2c:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <HAL_MPU_ConfigRegion+0x84>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000ed90 	.word	0xe000ed90

08000d44 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e098      	b.n	8000e88 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	4b4d      	ldr	r3, [pc, #308]	; (8000e94 <HAL_DMA_Init+0x150>)
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d80f      	bhi.n	8000d82 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	461a      	mov	r2, r3
 8000d68:	4b4b      	ldr	r3, [pc, #300]	; (8000e98 <HAL_DMA_Init+0x154>)
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4a4b      	ldr	r2, [pc, #300]	; (8000e9c <HAL_DMA_Init+0x158>)
 8000d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d72:	091b      	lsrs	r3, r3, #4
 8000d74:	009a      	lsls	r2, r3, #2
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a48      	ldr	r2, [pc, #288]	; (8000ea0 <HAL_DMA_Init+0x15c>)
 8000d7e:	641a      	str	r2, [r3, #64]	; 0x40
 8000d80:	e00e      	b.n	8000da0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	461a      	mov	r2, r3
 8000d88:	4b46      	ldr	r3, [pc, #280]	; (8000ea4 <HAL_DMA_Init+0x160>)
 8000d8a:	4413      	add	r3, r2
 8000d8c:	4a43      	ldr	r2, [pc, #268]	; (8000e9c <HAL_DMA_Init+0x158>)
 8000d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d92:	091b      	lsrs	r3, r3, #4
 8000d94:	009a      	lsls	r2, r3, #2
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a42      	ldr	r2, [pc, #264]	; (8000ea8 <HAL_DMA_Init+0x164>)
 8000d9e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2202      	movs	r2, #2
 8000da4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000dba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000dc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	691b      	ldr	r3, [r3, #16]
 8000dca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ddc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6a1b      	ldr	r3, [r3, #32]
 8000de2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000de4:	68fa      	ldr	r2, [r7, #12]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000dfa:	d039      	beq.n	8000e70 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e00:	4a27      	ldr	r2, [pc, #156]	; (8000ea0 <HAL_DMA_Init+0x15c>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d11a      	bne.n	8000e3c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e06:	4929      	ldr	r1, [pc, #164]	; (8000eac <HAL_DMA_Init+0x168>)
 8000e08:	4b28      	ldr	r3, [pc, #160]	; (8000eac <HAL_DMA_Init+0x168>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e10:	f003 031c 	and.w	r3, r3, #28
 8000e14:	200f      	movs	r0, #15
 8000e16:	fa00 f303 	lsl.w	r3, r0, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e20:	4822      	ldr	r0, [pc, #136]	; (8000eac <HAL_DMA_Init+0x168>)
 8000e22:	4b22      	ldr	r3, [pc, #136]	; (8000eac <HAL_DMA_Init+0x168>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6859      	ldr	r1, [r3, #4]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	f003 031c 	and.w	r3, r3, #28
 8000e32:	fa01 f303 	lsl.w	r3, r1, r3
 8000e36:	4313      	orrs	r3, r2
 8000e38:	6003      	str	r3, [r0, #0]
 8000e3a:	e019      	b.n	8000e70 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e3c:	491c      	ldr	r1, [pc, #112]	; (8000eb0 <HAL_DMA_Init+0x16c>)
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <HAL_DMA_Init+0x16c>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	f003 031c 	and.w	r3, r3, #28
 8000e4a:	200f      	movs	r0, #15
 8000e4c:	fa00 f303 	lsl.w	r3, r0, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	4013      	ands	r3, r2
 8000e54:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e56:	4816      	ldr	r0, [pc, #88]	; (8000eb0 <HAL_DMA_Init+0x16c>)
 8000e58:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <HAL_DMA_Init+0x16c>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6859      	ldr	r1, [r3, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e64:	f003 031c 	and.w	r3, r3, #28
 8000e68:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	6003      	str	r3, [r0, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2200      	movs	r2, #0
 8000e74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000e86:	2300      	movs	r3, #0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	40020407 	.word	0x40020407
 8000e98:	bffdfff8 	.word	0xbffdfff8
 8000e9c:	cccccccd 	.word	0xcccccccd
 8000ea0:	40020000 	.word	0x40020000
 8000ea4:	bffdfbf8 	.word	0xbffdfbf8
 8000ea8:	40020400 	.word	0x40020400
 8000eac:	400200a8 	.word	0x400200a8
 8000eb0:	400204a8 	.word	0x400204a8

08000eb4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d101      	bne.n	8000ec6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e072      	b.n	8000fac <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	6812      	ldr	r2, [r2, #0]
 8000ece:	6812      	ldr	r2, [r2, #0]
 8000ed0:	f022 0201 	bic.w	r2, r2, #1
 8000ed4:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	4b36      	ldr	r3, [pc, #216]	; (8000fb8 <HAL_DMA_DeInit+0x104>)
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d80f      	bhi.n	8000f02 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4b34      	ldr	r3, [pc, #208]	; (8000fbc <HAL_DMA_DeInit+0x108>)
 8000eea:	4413      	add	r3, r2
 8000eec:	4a34      	ldr	r2, [pc, #208]	; (8000fc0 <HAL_DMA_DeInit+0x10c>)
 8000eee:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef2:	091b      	lsrs	r3, r3, #4
 8000ef4:	009a      	lsls	r2, r3, #2
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a31      	ldr	r2, [pc, #196]	; (8000fc4 <HAL_DMA_DeInit+0x110>)
 8000efe:	641a      	str	r2, [r3, #64]	; 0x40
 8000f00:	e00e      	b.n	8000f20 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	461a      	mov	r2, r3
 8000f08:	4b2f      	ldr	r3, [pc, #188]	; (8000fc8 <HAL_DMA_DeInit+0x114>)
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4a2c      	ldr	r2, [pc, #176]	; (8000fc0 <HAL_DMA_DeInit+0x10c>)
 8000f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f12:	091b      	lsrs	r3, r3, #4
 8000f14:	009a      	lsls	r2, r3, #2
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a2b      	ldr	r2, [pc, #172]	; (8000fcc <HAL_DMA_DeInit+0x118>)
 8000f1e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000f30:	f002 021c 	and.w	r2, r2, #28
 8000f34:	2101      	movs	r1, #1
 8000f36:	fa01 f202 	lsl.w	r2, r1, r2
 8000f3a:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	4a20      	ldr	r2, [pc, #128]	; (8000fc4 <HAL_DMA_DeInit+0x110>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d10d      	bne.n	8000f62 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f46:	4922      	ldr	r1, [pc, #136]	; (8000fd0 <HAL_DMA_DeInit+0x11c>)
 8000f48:	4b21      	ldr	r3, [pc, #132]	; (8000fd0 <HAL_DMA_DeInit+0x11c>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f50:	f003 031c 	and.w	r3, r3, #28
 8000f54:	200f      	movs	r0, #15
 8000f56:	fa00 f303 	lsl.w	r3, r0, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	600b      	str	r3, [r1, #0]
 8000f60:	e00c      	b.n	8000f7c <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f62:	491c      	ldr	r1, [pc, #112]	; (8000fd4 <HAL_DMA_DeInit+0x120>)
 8000f64:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <HAL_DMA_DeInit+0x120>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6c:	f003 031c 	and.w	r3, r3, #28
 8000f70:	200f      	movs	r0, #15
 8000f72:	fa00 f303 	lsl.w	r3, r0, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	4013      	ands	r3, r2
 8000f7a:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000faa:	2300      	movs	r3, #0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	40020407 	.word	0x40020407
 8000fbc:	bffdfff8 	.word	0xbffdfff8
 8000fc0:	cccccccd 	.word	0xcccccccd
 8000fc4:	40020000 	.word	0x40020000
 8000fc8:	bffdfbf8 	.word	0xbffdfbf8
 8000fcc:	40020400 	.word	0x40020400
 8000fd0:	400200a8 	.word	0x400200a8
 8000fd4:	400204a8 	.word	0x400204a8

08000fd8 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
 8000fe4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d101      	bne.n	8000ff8 <HAL_DMA_Start+0x20>
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	e02e      	b.n	8001056 <HAL_DMA_Start+0x7e>
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b01      	cmp	r3, #1
 800100a:	d11d      	bne.n	8001048 <HAL_DMA_Start+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2202      	movs	r2, #2
 8001010:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2200      	movs	r2, #0
 8001018:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	6812      	ldr	r2, [r2, #0]
 8001022:	6812      	ldr	r2, [r2, #0]
 8001024:	f022 0201 	bic.w	r2, r2, #1
 8001028:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	68b9      	ldr	r1, [r7, #8]
 8001030:	68f8      	ldr	r0, [r7, #12]
 8001032:	f000 fb03 	bl	800163c <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	6812      	ldr	r2, [r2, #0]
 800103e:	6812      	ldr	r2, [r2, #0]
 8001040:	f042 0201 	orr.w	r2, r2, #1
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	e005      	b.n	8001054 <HAL_DMA_Start+0x7c>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    status = HAL_BUSY;
 8001050:	2302      	movs	r3, #2
 8001052:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001054:	7dfb      	ldrb	r3, [r7, #23]
}
 8001056:	4618      	mov	r0, r3
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b086      	sub	sp, #24
 8001062:	af00      	add	r7, sp, #0
 8001064:	60f8      	str	r0, [r7, #12]
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800106c:	2300      	movs	r3, #0
 800106e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001076:	2b01      	cmp	r3, #1
 8001078:	d101      	bne.n	800107e <HAL_DMA_Start_IT+0x20>
 800107a:	2302      	movs	r3, #2
 800107c:	e04b      	b.n	8001116 <HAL_DMA_Start_IT+0xb8>
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2201      	movs	r2, #1
 8001082:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b01      	cmp	r3, #1
 8001090:	d13a      	bne.n	8001108 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2202      	movs	r2, #2
 8001096:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2200      	movs	r2, #0
 800109e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	6812      	ldr	r2, [r2, #0]
 80010a8:	6812      	ldr	r2, [r2, #0]
 80010aa:	f022 0201 	bic.w	r2, r2, #1
 80010ae:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	68b9      	ldr	r1, [r7, #8]
 80010b6:	68f8      	ldr	r0, [r7, #12]
 80010b8:	f000 fac0 	bl	800163c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d008      	beq.n	80010d6 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	68fa      	ldr	r2, [r7, #12]
 80010ca:	6812      	ldr	r2, [r2, #0]
 80010cc:	6812      	ldr	r2, [r2, #0]
 80010ce:	f042 020e 	orr.w	r2, r2, #14
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	e00f      	b.n	80010f6 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	6812      	ldr	r2, [r2, #0]
 80010de:	6812      	ldr	r2, [r2, #0]
 80010e0:	f022 0204 	bic.w	r2, r2, #4
 80010e4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	6812      	ldr	r2, [r2, #0]
 80010ee:	6812      	ldr	r2, [r2, #0]
 80010f0:	f042 020a 	orr.w	r2, r2, #10
 80010f4:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	6812      	ldr	r2, [r2, #0]
 80010fe:	6812      	ldr	r2, [r2, #0]
 8001100:	f042 0201 	orr.w	r2, r2, #1
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	e005      	b.n	8001114 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001110:	2302      	movs	r3, #2
 8001112:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001114:	7dfb      	ldrb	r3, [r7, #23]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800111e:	b480      	push	{r7}
 8001120:	b085      	sub	sp, #20
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001126:	2300      	movs	r3, #0
 8001128:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d008      	beq.n	8001148 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2204      	movs	r2, #4
 800113a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e022      	b.n	800118e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	6812      	ldr	r2, [r2, #0]
 8001150:	6812      	ldr	r2, [r2, #0]
 8001152:	f022 020e 	bic.w	r2, r2, #14
 8001156:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	6812      	ldr	r2, [r2, #0]
 8001160:	6812      	ldr	r2, [r2, #0]
 8001162:	f022 0201 	bic.w	r2, r2, #1
 8001166:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001170:	f002 021c 	and.w	r2, r2, #28
 8001174:	2101      	movs	r1, #1
 8001176:	fa01 f202 	lsl.w	r2, r1, r2
 800117a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2201      	movs	r2, #1
 8001180:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800118c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800118e:	4618      	mov	r0, r3
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b084      	sub	sp, #16
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d005      	beq.n	80011be <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2204      	movs	r2, #4
 80011b6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	73fb      	strb	r3, [r7, #15]
 80011bc:	e029      	b.n	8001212 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	6812      	ldr	r2, [r2, #0]
 80011c6:	6812      	ldr	r2, [r2, #0]
 80011c8:	f022 020e 	bic.w	r2, r2, #14
 80011cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	6812      	ldr	r2, [r2, #0]
 80011d6:	6812      	ldr	r2, [r2, #0]
 80011d8:	f022 0201 	bic.w	r2, r2, #1
 80011dc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80011e6:	f002 021c 	and.w	r2, r2, #28
 80011ea:	2101      	movs	r1, #1
 80011ec:	fa01 f202 	lsl.w	r2, r1, r2
 80011f0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2201      	movs	r2, #1
 80011f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	4798      	blx	r3
    }
  }
  return status;
 8001212:	7bfb      	ldrb	r3, [r7, #15]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <HAL_DMA_PollForTransfer>:
  * @param  CompleteLevel Specifies the DMA level complete.
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	460b      	mov	r3, r1
 8001226:	607a      	str	r2, [r7, #4]
 8001228:	72fb      	strb	r3, [r7, #11]
  uint32_t temp;
  uint32_t tickstart;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d008      	beq.n	8001248 <HAL_DMA_PollForTransfer+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2204      	movs	r2, #4
 800123a:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e08c      	b.n	8001362 <HAL_DMA_PollForTransfer+0x146>
  }

  /* Polling mode not supported in circular mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != 0U)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0320 	and.w	r3, r3, #32
 8001252:	2b00      	cmp	r3, #0
 8001254:	d005      	beq.n	8001262 <HAL_DMA_PollForTransfer+0x46>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f44f 7280 	mov.w	r2, #256	; 0x100
 800125c:	63da      	str	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e07f      	b.n	8001362 <HAL_DMA_PollForTransfer+0x146>
  }

  /* Get the level transfer complete flag */
  if (HAL_DMA_FULL_TRANSFER == CompleteLevel)
 8001262:	7afb      	ldrb	r3, [r7, #11]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d108      	bne.n	800127a <HAL_DMA_PollForTransfer+0x5e>
  {
    /* Transfer Complete flag */
    temp = DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126c:	f003 031c 	and.w	r3, r3, #28
 8001270:	2202      	movs	r2, #2
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	e007      	b.n	800128a <HAL_DMA_PollForTransfer+0x6e>
  }
  else
  {
    /* Half Transfer Complete flag */
    temp = DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	f003 031c 	and.w	r3, r3, #28
 8001282:	2204      	movs	r2, #4
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	617b      	str	r3, [r7, #20]
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800128a:	f7ff f843 	bl	8000314 <HAL_GetTick>
 800128e:	6138      	str	r0, [r7, #16]

  while((hdma->DmaBaseAddress->ISR & temp) == 0U)
 8001290:	e03f      	b.n	8001312 <HAL_DMA_PollForTransfer+0xf6>
  {
    if((hdma->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << (hdma->ChannelIndex& 0x1CU))) != 0U)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129c:	f003 031c 	and.w	r3, r3, #28
 80012a0:	2108      	movs	r1, #8
 80012a2:	fa01 f303 	lsl.w	r3, r1, r3
 80012a6:	4013      	ands	r3, r2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d016      	beq.n	80012da <HAL_DMA_PollForTransfer+0xbe>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Clear all flags */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	68fa      	ldr	r2, [r7, #12]
 80012b2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80012b4:	f002 021c 	and.w	r2, r2, #28
 80012b8:	2101      	movs	r1, #1
 80012ba:	fa01 f202 	lsl.w	r2, r1, r2
 80012be:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2201      	movs	r2, #1
 80012c4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2201      	movs	r2, #1
 80012ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e043      	b.n	8001362 <HAL_DMA_PollForTransfer+0x146>
    }
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e0:	d017      	beq.n	8001312 <HAL_DMA_PollForTransfer+0xf6>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) ||  (Timeout == 0U))
 80012e2:	f7ff f817 	bl	8000314 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad2      	subs	r2, r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d802      	bhi.n	80012f8 <HAL_DMA_PollForTransfer+0xdc>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d10c      	bne.n	8001312 <HAL_DMA_PollForTransfer+0xf6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2220      	movs	r2, #32
 80012fc:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2201      	movs	r2, #1
 8001302:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e027      	b.n	8001362 <HAL_DMA_PollForTransfer+0x146>
  while((hdma->DmaBaseAddress->ISR & temp) == 0U)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	4013      	ands	r3, r2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0b8      	beq.n	8001292 <HAL_DMA_PollForTransfer+0x76>
    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
  }
#endif /* DMAMUX1 */

  if(HAL_DMA_FULL_TRANSFER == CompleteLevel)
 8001320:	7afb      	ldrb	r3, [r7, #11]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10e      	bne.n	8001344 <HAL_DMA_PollForTransfer+0x128>
  {
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_TC1 << (hdma->ChannelIndex& 0x1CU));
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800132e:	f002 021c 	and.w	r2, r2, #28
 8001332:	2102      	movs	r1, #2
 8001334:	fa01 f202 	lsl.w	r2, r1, r2
 8001338:	605a      	str	r2, [r3, #4]

    /* The selected Channelx EN bit is cleared (DMA is disabled and
    all transfers are complete) */
    hdma->State = HAL_DMA_STATE_READY;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2201      	movs	r2, #1
 800133e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8001342:	e009      	b.n	8001358 <HAL_DMA_PollForTransfer+0x13c>
  }
  else
  {
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU));
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	68fa      	ldr	r2, [r7, #12]
 800134a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800134c:	f002 021c 	and.w	r2, r2, #28
 8001350:	2104      	movs	r1, #4
 8001352:	fa01 f202 	lsl.w	r2, r1, r2
 8001356:	605a      	str	r2, [r3, #4]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2200      	movs	r2, #0
 800135c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b084      	sub	sp, #16
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	f003 031c 	and.w	r3, r3, #28
 800138a:	2204      	movs	r2, #4
 800138c:	409a      	lsls	r2, r3
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	4013      	ands	r3, r2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d026      	beq.n	80013e4 <HAL_DMA_IRQHandler+0x7a>
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	f003 0304 	and.w	r3, r3, #4
 800139c:	2b00      	cmp	r3, #0
 800139e:	d021      	beq.n	80013e4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0320 	and.w	r3, r3, #32
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d107      	bne.n	80013be <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	6812      	ldr	r2, [r2, #0]
 80013b6:	6812      	ldr	r2, [r2, #0]
 80013b8:	f022 0204 	bic.w	r2, r2, #4
 80013bc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80013c6:	f002 021c 	and.w	r2, r2, #28
 80013ca:	2104      	movs	r1, #4
 80013cc:	fa01 f202 	lsl.w	r2, r1, r2
 80013d0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d071      	beq.n	80014be <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80013e2:	e06c      	b.n	80014be <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e8:	f003 031c 	and.w	r3, r3, #28
 80013ec:	2202      	movs	r2, #2
 80013ee:	409a      	lsls	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4013      	ands	r3, r2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d02e      	beq.n	8001456 <HAL_DMA_IRQHandler+0xec>
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d029      	beq.n	8001456 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0320 	and.w	r3, r3, #32
 800140c:	2b00      	cmp	r3, #0
 800140e:	d10b      	bne.n	8001428 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6812      	ldr	r2, [r2, #0]
 8001418:	6812      	ldr	r2, [r2, #0]
 800141a:	f022 020a 	bic.w	r2, r2, #10
 800141e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2201      	movs	r2, #1
 8001424:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001430:	f002 021c 	and.w	r2, r2, #28
 8001434:	2102      	movs	r1, #2
 8001436:	fa01 f202 	lsl.w	r2, r1, r2
 800143a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001448:	2b00      	cmp	r3, #0
 800144a:	d038      	beq.n	80014be <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001454:	e033      	b.n	80014be <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	f003 031c 	and.w	r3, r3, #28
 800145e:	2208      	movs	r2, #8
 8001460:	409a      	lsls	r2, r3
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4013      	ands	r3, r2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d02a      	beq.n	80014c0 <HAL_DMA_IRQHandler+0x156>
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	f003 0308 	and.w	r3, r3, #8
 8001470:	2b00      	cmp	r3, #0
 8001472:	d025      	beq.n	80014c0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6812      	ldr	r2, [r2, #0]
 800147c:	6812      	ldr	r2, [r2, #0]
 800147e:	f022 020e 	bic.w	r2, r2, #14
 8001482:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800148c:	f002 021c 	and.w	r2, r2, #28
 8001490:	2101      	movs	r1, #1
 8001492:	fa01 f202 	lsl.w	r2, r1, r2
 8001496:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2201      	movs	r2, #1
 800149c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2201      	movs	r2, #1
 80014a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d004      	beq.n	80014c0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80014be:	bf00      	nop
 80014c0:	bf00      	nop
}
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 80014c8:	b480      	push	{r7}
 80014ca:	b087      	sub	sp, #28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	460b      	mov	r3, r1
 80014d2:	607a      	str	r2, [r7, #4]
 80014d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80014d6:	2300      	movs	r3, #0
 80014d8:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d101      	bne.n	80014e8 <HAL_DMA_RegisterCallback+0x20>
 80014e4:	2302      	movs	r3, #2
 80014e6:	e032      	b.n	800154e <HAL_DMA_RegisterCallback+0x86>
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2201      	movs	r2, #1
 80014ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d121      	bne.n	8001540 <HAL_DMA_RegisterCallback+0x78>
  {
    switch (CallbackID)
 80014fc:	7afb      	ldrb	r3, [r7, #11]
 80014fe:	2b03      	cmp	r3, #3
 8001500:	d81a      	bhi.n	8001538 <HAL_DMA_RegisterCallback+0x70>
 8001502:	a201      	add	r2, pc, #4	; (adr r2, 8001508 <HAL_DMA_RegisterCallback+0x40>)
 8001504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001508:	08001519 	.word	0x08001519
 800150c:	08001521 	.word	0x08001521
 8001510:	08001529 	.word	0x08001529
 8001514:	08001531 	.word	0x08001531
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 800151e:	e011      	b.n	8001544 <HAL_DMA_RegisterCallback+0x7c>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 8001526:	e00d      	b.n	8001544 <HAL_DMA_RegisterCallback+0x7c>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 800152e:	e009      	b.n	8001544 <HAL_DMA_RegisterCallback+0x7c>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 8001536:	e005      	b.n	8001544 <HAL_DMA_RegisterCallback+0x7c>

     default:
           status = HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	75fb      	strb	r3, [r7, #23]
           break;
 800153c:	bf00      	nop
 800153e:	e001      	b.n	8001544 <HAL_DMA_RegisterCallback+0x7c>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800154c:	7dfb      	ldrb	r3, [r7, #23]
}
 800154e:	4618      	mov	r0, r3
 8001550:	371c      	adds	r7, #28
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifer
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 800155a:	b480      	push	{r7}
 800155c:	b085      	sub	sp, #20
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	460b      	mov	r3, r1
 8001564:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	73fb      	strb	r3, [r7, #15]

    /* Process locked */
  __HAL_LOCK(hdma);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001570:	2b01      	cmp	r3, #1
 8001572:	d101      	bne.n	8001578 <HAL_DMA_UnRegisterCallback+0x1e>
 8001574:	2302      	movs	r3, #2
 8001576:	e041      	b.n	80015fc <HAL_DMA_UnRegisterCallback+0xa2>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001586:	b2db      	uxtb	r3, r3
 8001588:	2b01      	cmp	r3, #1
 800158a:	d130      	bne.n	80015ee <HAL_DMA_UnRegisterCallback+0x94>
  {
    switch (CallbackID)
 800158c:	78fb      	ldrb	r3, [r7, #3]
 800158e:	2b04      	cmp	r3, #4
 8001590:	d829      	bhi.n	80015e6 <HAL_DMA_UnRegisterCallback+0x8c>
 8001592:	a201      	add	r2, pc, #4	; (adr r2, 8001598 <HAL_DMA_UnRegisterCallback+0x3e>)
 8001594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001598:	080015ad 	.word	0x080015ad
 800159c:	080015b5 	.word	0x080015b5
 80015a0:	080015bd 	.word	0x080015bd
 80015a4:	080015c5 	.word	0x080015c5
 80015a8:	080015cd 	.word	0x080015cd
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = NULL;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 80015b2:	e01e      	b.n	80015f2 <HAL_DMA_UnRegisterCallback+0x98>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = NULL;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 80015ba:	e01a      	b.n	80015f2 <HAL_DMA_UnRegisterCallback+0x98>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = NULL;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 80015c2:	e016      	b.n	80015f2 <HAL_DMA_UnRegisterCallback+0x98>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = NULL;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 80015ca:	e012      	b.n	80015f2 <HAL_DMA_UnRegisterCallback+0x98>

    case   HAL_DMA_XFER_ALL_CB_ID:
           hdma->XferCpltCallback = NULL;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	62da      	str	r2, [r3, #44]	; 0x2c
           hdma->XferHalfCpltCallback = NULL;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	631a      	str	r2, [r3, #48]	; 0x30
           hdma->XferErrorCallback = NULL;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	635a      	str	r2, [r3, #52]	; 0x34
           hdma->XferAbortCallback = NULL;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 80015e4:	e005      	b.n	80015f2 <HAL_DMA_UnRegisterCallback+0x98>

    default:
           status = HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	73fb      	strb	r3, [r7, #15]
           break;
 80015ea:	bf00      	nop
 80015ec:	e001      	b.n	80015f2 <HAL_DMA_UnRegisterCallback+0x98>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001616:	b2db      	uxtb	r3, r3
}
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
 8001648:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001652:	f002 021c 	and.w	r2, r2, #28
 8001656:	2101      	movs	r1, #1
 8001658:	fa01 f202 	lsl.w	r2, r1, r2
 800165c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2b10      	cmp	r3, #16
 800166c:	d108      	bne.n	8001680 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800167e:	e007      	b.n	8001690 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68ba      	ldr	r2, [r7, #8]
 8001686:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	60da      	str	r2, [r3, #12]
}
 8001690:	bf00      	nop
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800169c:	b480      	push	{r7}
 800169e:	b087      	sub	sp, #28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016aa:	e17f      	b.n	80019ac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	2101      	movs	r1, #1
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	fa01 f303 	lsl.w	r3, r1, r3
 80016b8:	4013      	ands	r3, r2
 80016ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 8171 	beq.w	80019a6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d003      	beq.n	80016d4 <HAL_GPIO_Init+0x38>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b12      	cmp	r3, #18
 80016d2:	d123      	bne.n	800171c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	08da      	lsrs	r2, r3, #3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3208      	adds	r2, #8
 80016dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	220f      	movs	r2, #15
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	691a      	ldr	r2, [r3, #16]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	4313      	orrs	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	08da      	lsrs	r2, r3, #3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3208      	adds	r2, #8
 8001716:	6939      	ldr	r1, [r7, #16]
 8001718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	2203      	movs	r2, #3
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4013      	ands	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 0203 	and.w	r2, r3, #3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	4313      	orrs	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d00b      	beq.n	8001770 <HAL_GPIO_Init+0xd4>
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b02      	cmp	r3, #2
 800175e:	d007      	beq.n	8001770 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001764:	2b11      	cmp	r3, #17
 8001766:	d003      	beq.n	8001770 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b12      	cmp	r3, #18
 800176e:	d130      	bne.n	80017d2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	2203      	movs	r2, #3
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	68da      	ldr	r2, [r3, #12]
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4313      	orrs	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017a6:	2201      	movs	r2, #1
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	091b      	lsrs	r3, r3, #4
 80017bc:	f003 0201 	and.w	r2, r3, #1
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d118      	bne.n	8001810 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017e4:	2201      	movs	r2, #1
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	08db      	lsrs	r3, r3, #3
 80017fa:	f003 0201 	and.w	r2, r3, #1
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4313      	orrs	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	2203      	movs	r2, #3
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4013      	ands	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	4313      	orrs	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 80ac 	beq.w	80019a6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184e:	4a5e      	ldr	r2, [pc, #376]	; (80019c8 <HAL_GPIO_Init+0x32c>)
 8001850:	4b5d      	ldr	r3, [pc, #372]	; (80019c8 <HAL_GPIO_Init+0x32c>)
 8001852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6613      	str	r3, [r2, #96]	; 0x60
 800185a:	4b5b      	ldr	r3, [pc, #364]	; (80019c8 <HAL_GPIO_Init+0x32c>)
 800185c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001866:	4a59      	ldr	r2, [pc, #356]	; (80019cc <HAL_GPIO_Init+0x330>)
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	089b      	lsrs	r3, r3, #2
 800186c:	3302      	adds	r3, #2
 800186e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001872:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	220f      	movs	r2, #15
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4013      	ands	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001890:	d025      	beq.n	80018de <HAL_GPIO_Init+0x242>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a4e      	ldr	r2, [pc, #312]	; (80019d0 <HAL_GPIO_Init+0x334>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d01f      	beq.n	80018da <HAL_GPIO_Init+0x23e>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a4d      	ldr	r2, [pc, #308]	; (80019d4 <HAL_GPIO_Init+0x338>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d019      	beq.n	80018d6 <HAL_GPIO_Init+0x23a>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a4c      	ldr	r2, [pc, #304]	; (80019d8 <HAL_GPIO_Init+0x33c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d013      	beq.n	80018d2 <HAL_GPIO_Init+0x236>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a4b      	ldr	r2, [pc, #300]	; (80019dc <HAL_GPIO_Init+0x340>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d00d      	beq.n	80018ce <HAL_GPIO_Init+0x232>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a4a      	ldr	r2, [pc, #296]	; (80019e0 <HAL_GPIO_Init+0x344>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d007      	beq.n	80018ca <HAL_GPIO_Init+0x22e>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a49      	ldr	r2, [pc, #292]	; (80019e4 <HAL_GPIO_Init+0x348>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d101      	bne.n	80018c6 <HAL_GPIO_Init+0x22a>
 80018c2:	2306      	movs	r3, #6
 80018c4:	e00c      	b.n	80018e0 <HAL_GPIO_Init+0x244>
 80018c6:	2307      	movs	r3, #7
 80018c8:	e00a      	b.n	80018e0 <HAL_GPIO_Init+0x244>
 80018ca:	2305      	movs	r3, #5
 80018cc:	e008      	b.n	80018e0 <HAL_GPIO_Init+0x244>
 80018ce:	2304      	movs	r3, #4
 80018d0:	e006      	b.n	80018e0 <HAL_GPIO_Init+0x244>
 80018d2:	2303      	movs	r3, #3
 80018d4:	e004      	b.n	80018e0 <HAL_GPIO_Init+0x244>
 80018d6:	2302      	movs	r3, #2
 80018d8:	e002      	b.n	80018e0 <HAL_GPIO_Init+0x244>
 80018da:	2301      	movs	r3, #1
 80018dc:	e000      	b.n	80018e0 <HAL_GPIO_Init+0x244>
 80018de:	2300      	movs	r3, #0
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	f002 0203 	and.w	r2, r2, #3
 80018e6:	0092      	lsls	r2, r2, #2
 80018e8:	4093      	lsls	r3, r2
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018f0:	4936      	ldr	r1, [pc, #216]	; (80019cc <HAL_GPIO_Init+0x330>)
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	089b      	lsrs	r3, r3, #2
 80018f6:	3302      	adds	r3, #2
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018fe:	4b3a      	ldr	r3, [pc, #232]	; (80019e8 <HAL_GPIO_Init+0x34c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	43db      	mvns	r3, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4313      	orrs	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001922:	4a31      	ldr	r2, [pc, #196]	; (80019e8 <HAL_GPIO_Init+0x34c>)
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001928:	4b2f      	ldr	r3, [pc, #188]	; (80019e8 <HAL_GPIO_Init+0x34c>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	43db      	mvns	r3, r3
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4013      	ands	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800194c:	4a26      	ldr	r2, [pc, #152]	; (80019e8 <HAL_GPIO_Init+0x34c>)
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001952:	4b25      	ldr	r3, [pc, #148]	; (80019e8 <HAL_GPIO_Init+0x34c>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	43db      	mvns	r3, r3
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4013      	ands	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4313      	orrs	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001976:	4a1c      	ldr	r2, [pc, #112]	; (80019e8 <HAL_GPIO_Init+0x34c>)
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800197c:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <HAL_GPIO_Init+0x34c>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	43db      	mvns	r3, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4013      	ands	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019a0:	4a11      	ldr	r2, [pc, #68]	; (80019e8 <HAL_GPIO_Init+0x34c>)
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	3301      	adds	r3, #1
 80019aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	fa22 f303 	lsr.w	r3, r2, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f47f ae78 	bne.w	80016ac <HAL_GPIO_Init+0x10>
  }
}
 80019bc:	bf00      	nop
 80019be:	371c      	adds	r7, #28
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40010000 	.word	0x40010000
 80019d0:	48000400 	.word	0x48000400
 80019d4:	48000800 	.word	0x48000800
 80019d8:	48000c00 	.word	0x48000c00
 80019dc:	48001000 	.word	0x48001000
 80019e0:	48001400 	.word	0x48001400
 80019e4:	48001800 	.word	0x48001800
 80019e8:	40010400 	.word	0x40010400

080019ec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b087      	sub	sp, #28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80019fa:	e0cd      	b.n	8001b98 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80019fc:	2201      	movs	r2, #1
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	409a      	lsls	r2, r3
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	4013      	ands	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 80c1 	beq.w	8001b92 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001a10:	4a68      	ldr	r2, [pc, #416]	; (8001bb4 <HAL_GPIO_DeInit+0x1c8>)
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	089b      	lsrs	r3, r3, #2
 8001a16:	3302      	adds	r3, #2
 8001a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1c:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	220f      	movs	r2, #15
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a38:	d025      	beq.n	8001a86 <HAL_GPIO_DeInit+0x9a>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a5e      	ldr	r2, [pc, #376]	; (8001bb8 <HAL_GPIO_DeInit+0x1cc>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d01f      	beq.n	8001a82 <HAL_GPIO_DeInit+0x96>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a5d      	ldr	r2, [pc, #372]	; (8001bbc <HAL_GPIO_DeInit+0x1d0>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d019      	beq.n	8001a7e <HAL_GPIO_DeInit+0x92>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a5c      	ldr	r2, [pc, #368]	; (8001bc0 <HAL_GPIO_DeInit+0x1d4>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d013      	beq.n	8001a7a <HAL_GPIO_DeInit+0x8e>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a5b      	ldr	r2, [pc, #364]	; (8001bc4 <HAL_GPIO_DeInit+0x1d8>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d00d      	beq.n	8001a76 <HAL_GPIO_DeInit+0x8a>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a5a      	ldr	r2, [pc, #360]	; (8001bc8 <HAL_GPIO_DeInit+0x1dc>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d007      	beq.n	8001a72 <HAL_GPIO_DeInit+0x86>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a59      	ldr	r2, [pc, #356]	; (8001bcc <HAL_GPIO_DeInit+0x1e0>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d101      	bne.n	8001a6e <HAL_GPIO_DeInit+0x82>
 8001a6a:	2306      	movs	r3, #6
 8001a6c:	e00c      	b.n	8001a88 <HAL_GPIO_DeInit+0x9c>
 8001a6e:	2307      	movs	r3, #7
 8001a70:	e00a      	b.n	8001a88 <HAL_GPIO_DeInit+0x9c>
 8001a72:	2305      	movs	r3, #5
 8001a74:	e008      	b.n	8001a88 <HAL_GPIO_DeInit+0x9c>
 8001a76:	2304      	movs	r3, #4
 8001a78:	e006      	b.n	8001a88 <HAL_GPIO_DeInit+0x9c>
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e004      	b.n	8001a88 <HAL_GPIO_DeInit+0x9c>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e002      	b.n	8001a88 <HAL_GPIO_DeInit+0x9c>
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <HAL_GPIO_DeInit+0x9c>
 8001a86:	2300      	movs	r3, #0
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	f002 0203 	and.w	r2, r2, #3
 8001a8e:	0092      	lsls	r2, r2, #2
 8001a90:	fa03 f202 	lsl.w	r2, r3, r2
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d132      	bne.n	8001b00 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001a9a:	494d      	ldr	r1, [pc, #308]	; (8001bd0 <HAL_GPIO_DeInit+0x1e4>)
 8001a9c:	4b4c      	ldr	r3, [pc, #304]	; (8001bd0 <HAL_GPIO_DeInit+0x1e4>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001aa8:	4949      	ldr	r1, [pc, #292]	; (8001bd0 <HAL_GPIO_DeInit+0x1e4>)
 8001aaa:	4b49      	ldr	r3, [pc, #292]	; (8001bd0 <HAL_GPIO_DeInit+0x1e4>)
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001ab6:	4946      	ldr	r1, [pc, #280]	; (8001bd0 <HAL_GPIO_DeInit+0x1e4>)
 8001ab8:	4b45      	ldr	r3, [pc, #276]	; (8001bd0 <HAL_GPIO_DeInit+0x1e4>)
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001ac4:	4942      	ldr	r1, [pc, #264]	; (8001bd0 <HAL_GPIO_DeInit+0x1e4>)
 8001ac6:	4b42      	ldr	r3, [pc, #264]	; (8001bd0 <HAL_GPIO_DeInit+0x1e4>)
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	43db      	mvns	r3, r3
 8001ace:	4013      	ands	r3, r2
 8001ad0:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	220f      	movs	r2, #15
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001ae2:	4834      	ldr	r0, [pc, #208]	; (8001bb4 <HAL_GPIO_DeInit+0x1c8>)
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	089b      	lsrs	r3, r3, #2
 8001ae8:	4932      	ldr	r1, [pc, #200]	; (8001bb4 <HAL_GPIO_DeInit+0x1c8>)
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	0892      	lsrs	r2, r2, #2
 8001aee:	3202      	adds	r2, #2
 8001af0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	43d2      	mvns	r2, r2
 8001af8:	400a      	ands	r2, r1
 8001afa:	3302      	adds	r3, #2
 8001afc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	2103      	movs	r1, #3
 8001b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	08da      	lsrs	r2, r3, #3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	08d9      	lsrs	r1, r3, #3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3108      	adds	r1, #8
 8001b20:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	200f      	movs	r0, #15
 8001b2e:	fa00 f303 	lsl.w	r3, r0, r3
 8001b32:	43db      	mvns	r3, r3
 8001b34:	4019      	ands	r1, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3208      	adds	r2, #8
 8001b3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	2103      	movs	r1, #3
 8001b48:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	401a      	ands	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	2101      	movs	r1, #1
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	401a      	ands	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	2103      	movs	r1, #3
 8001b72:	fa01 f303 	lsl.w	r3, r1, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	401a      	ands	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b82:	2101      	movs	r1, #1
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	401a      	ands	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	3301      	adds	r3, #1
 8001b96:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f47f af2b 	bne.w	80019fc <HAL_GPIO_DeInit+0x10>
  }
}
 8001ba6:	bf00      	nop
 8001ba8:	371c      	adds	r7, #28
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	40010000 	.word	0x40010000
 8001bb8:	48000400 	.word	0x48000400
 8001bbc:	48000800 	.word	0x48000800
 8001bc0:	48000c00 	.word	0x48000c00
 8001bc4:	48001000 	.word	0x48001000
 8001bc8:	48001400 	.word	0x48001400
 8001bcc:	48001800 	.word	0x48001800
 8001bd0:	40010400 	.word	0x40010400

08001bd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691a      	ldr	r2, [r3, #16]
 8001be4:	887b      	ldrh	r3, [r7, #2]
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d002      	beq.n	8001bf2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bec:	2301      	movs	r3, #1
 8001bee:	73fb      	strb	r3, [r7, #15]
 8001bf0:	e001      	b.n	8001bf6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	807b      	strh	r3, [r7, #2]
 8001c10:	4613      	mov	r3, r2
 8001c12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c14:	787b      	ldrb	r3, [r7, #1]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c1a:	887a      	ldrh	r2, [r7, #2]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c20:	e002      	b.n	8001c28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c22:	887a      	ldrh	r2, [r7, #2]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	695a      	ldr	r2, [r3, #20]
 8001c44:	887b      	ldrh	r3, [r7, #2]
 8001c46:	4013      	ands	r3, r2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c4c:	887a      	ldrh	r2, [r7, #2]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001c52:	e002      	b.n	8001c5a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c54:	887a      	ldrh	r2, [r7, #2]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	619a      	str	r2, [r3, #24]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin specifies the port bits to be locked.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b085      	sub	sp, #20
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 8001c72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c76:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 8001c78:	887a      	ldrh	r2, [r7, #2]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 8001c86:	887a      	ldrh	r2, [r7, #2]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	61da      	str	r2, [r3, #28]
  /* Read LCKK register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	60fb      	str	r3, [r7, #12]

  /* Read again in order to confirm lock is active */
  if ((GPIOx->LCKR & GPIO_LCKR_LCKK) != 0x00u)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69db      	ldr	r3, [r3, #28]
 8001c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	e000      	b.n	8001caa <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
  }
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 8001cc2:	695a      	ldr	r2, [r3, #20]
 8001cc4:	88fb      	ldrh	r3, [r7, #6]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d006      	beq.n	8001cda <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ccc:	4a05      	ldr	r2, [pc, #20]	; (8001ce4 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cd2:	88fb      	ldrh	r3, [r7, #6]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f000 f807 	bl	8001ce8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40010400 	.word	0x40010400

08001ce8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop

08001d00 <HAL_PWR_DeInit>:
/**
  * @brief Deinitialize the HAL PWR peripheral registers to their default reset values.
  * @retval None
  */
void HAL_PWR_DeInit(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  __HAL_RCC_PWR_FORCE_RESET();
 8001d04:	4a08      	ldr	r2, [pc, #32]	; (8001d28 <HAL_PWR_DeInit+0x28>)
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <HAL_PWR_DeInit+0x28>)
 8001d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_RCC_PWR_RELEASE_RESET();
 8001d10:	4a05      	ldr	r2, [pc, #20]	; (8001d28 <HAL_PWR_DeInit+0x28>)
 8001d12:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <HAL_PWR_DeInit+0x28>)
 8001d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000

08001d2c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d30:	4a05      	ldr	r2, [pc, #20]	; (8001d48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d3a:	6013      	str	r3, [r2, #0]
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40007000 	.word	0x40007000

08001d4c <HAL_PWR_DisableBkUpAccess>:
  * @brief Disable access to the backup domain
  *        (RTC registers, RTC backup data registers).
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d50:	4a05      	ldr	r2, [pc, #20]	; (8001d68 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8001d52:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d5a:	6013      	str	r3, [r2, #0]
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40007000 	.word	0x40007000

08001d6c <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8001d74:	492b      	ldr	r1, [pc, #172]	; (8001e24 <HAL_PWR_ConfigPVD+0xb8>)
 8001d76:	4b2b      	ldr	r3, [pc, #172]	; (8001e24 <HAL_PWR_ConfigPVD+0xb8>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f023 020e 	bic.w	r2, r3, #14
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8001d86:	4a28      	ldr	r2, [pc, #160]	; (8001e28 <HAL_PWR_ConfigPVD+0xbc>)
 8001d88:	4b27      	ldr	r3, [pc, #156]	; (8001e28 <HAL_PWR_ConfigPVD+0xbc>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d90:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8001d92:	4a25      	ldr	r2, [pc, #148]	; (8001e28 <HAL_PWR_ConfigPVD+0xbc>)
 8001d94:	4b24      	ldr	r3, [pc, #144]	; (8001e28 <HAL_PWR_ConfigPVD+0xbc>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d9c:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8001d9e:	4a22      	ldr	r2, [pc, #136]	; (8001e28 <HAL_PWR_ConfigPVD+0xbc>)
 8001da0:	4b21      	ldr	r3, [pc, #132]	; (8001e28 <HAL_PWR_ConfigPVD+0xbc>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da8:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8001daa:	4a1f      	ldr	r2, [pc, #124]	; (8001e28 <HAL_PWR_ConfigPVD+0xbc>)
 8001dac:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <HAL_PWR_ConfigPVD+0xbc>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db4:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d005      	beq.n	8001dce <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8001dc2:	4a19      	ldr	r2, [pc, #100]	; (8001e28 <HAL_PWR_ConfigPVD+0xbc>)
 8001dc4:	4b18      	ldr	r3, [pc, #96]	; (8001e28 <HAL_PWR_ConfigPVD+0xbc>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dcc:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d005      	beq.n	8001de6 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8001dda:	4a13      	ldr	r2, [pc, #76]	; (8001e28 <HAL_PWR_ConfigPVD+0xbc>)
 8001ddc:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <HAL_PWR_ConfigPVD+0xbc>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de4:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d005      	beq.n	8001dfe <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8001df2:	4a0d      	ldr	r2, [pc, #52]	; (8001e28 <HAL_PWR_ConfigPVD+0xbc>)
 8001df4:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <HAL_PWR_ConfigPVD+0xbc>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dfc:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d005      	beq.n	8001e16 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8001e0a:	4a07      	ldr	r2, [pc, #28]	; (8001e28 <HAL_PWR_ConfigPVD+0xbc>)
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_PWR_ConfigPVD+0xbc>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e14:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	40007000 	.word	0x40007000
 8001e28:	40010400 	.word	0x40010400

08001e2c <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8001e30:	4a05      	ldr	r2, [pc, #20]	; (8001e48 <HAL_PWR_EnablePVD+0x1c>)
 8001e32:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <HAL_PWR_EnablePVD+0x1c>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	6053      	str	r3, [r2, #4]
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40007000 	.word	0x40007000

08001e4c <HAL_PWR_DisablePVD>:
/**
  * @brief Disable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_CR2_PVDE);
 8001e50:	4a05      	ldr	r2, [pc, #20]	; (8001e68 <HAL_PWR_DisablePVD+0x1c>)
 8001e52:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <HAL_PWR_DisablePVD+0x1c>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f023 0301 	bic.w	r3, r3, #1
 8001e5a:	6053      	str	r3, [r2, #4]
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40007000 	.word	0x40007000

08001e6c <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8001e74:	490c      	ldr	r1, [pc, #48]	; (8001ea8 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8001e76:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f003 031f 	and.w	r3, r3, #31
 8001e80:	43db      	mvns	r3, r3
 8001e82:	401a      	ands	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	095b      	lsrs	r3, r3, #5
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	60cb      	str	r3, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 8001e8c:	4906      	ldr	r1, [pc, #24]	; (8001ea8 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f003 031f 	and.w	r3, r3, #31
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	608b      	str	r3, [r1, #8]


}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	40007000 	.word	0x40007000

08001eac <HAL_PWR_DisableWakeUpPin>:
  *         This parameter can be one of the following values:
  *           @arg @ref PWR_WAKEUP_PIN1, PWR_WAKEUP_PIN2, PWR_WAKEUP_PIN3, PWR_WAKEUP_PIN4, PWR_WAKEUP_PIN5
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 8001eb4:	4907      	ldr	r1, [pc, #28]	; (8001ed4 <HAL_PWR_DisableWakeUpPin+0x28>)
 8001eb6:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <HAL_PWR_DisableWakeUpPin+0x28>)
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f003 031f 	and.w	r3, r3, #31
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	608b      	str	r3, [r1, #8]
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	40007000 	.word	0x40007000

08001ed8 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10c      	bne.n	8001f04 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8001eea:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <HAL_PWR_EnterSLEEPMode+0x60>)
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ef2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ef6:	d10e      	bne.n	8001f16 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8001ef8:	f000 fdd0 	bl	8002a9c <HAL_PWREx_DisableLowPowerRunMode>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d009      	beq.n	8001f16 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8001f02:	e016      	b.n	8001f32 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8001f04:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <HAL_PWR_EnterSLEEPMode+0x60>)
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f10:	d001      	beq.n	8001f16 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8001f12:	f000 fdb3 	bl	8002a7c <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001f16:	4a09      	ldr	r2, [pc, #36]	; (8001f3c <HAL_PWR_EnterSLEEPMode+0x64>)
 8001f18:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <HAL_PWR_EnterSLEEPMode+0x64>)
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	f023 0304 	bic.w	r3, r3, #4
 8001f20:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001f22:	78fb      	ldrb	r3, [r7, #3]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d101      	bne.n	8001f2c <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001f28:	bf30      	wfi
 8001f2a:	e002      	b.n	8001f32 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001f2c:	bf40      	sev
    __WFE();
 8001f2e:	bf20      	wfe
    __WFE();
 8001f30:	bf20      	wfe
  }

}
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40007000 	.word	0x40007000
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f52:	d104      	bne.n	8001f5e <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 8001f54:	78fb      	ldrb	r3, [r7, #3]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 fe02 	bl	8002b60 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 8001f5c:	e003      	b.n	8001f66 <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 8001f5e:	78fb      	ldrb	r3, [r7, #3]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f000 fdd3 	bl	8002b0c <HAL_PWREx_EnterSTOP0Mode>
}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8001f72:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <HAL_PWR_EnterSTANDBYMode+0x2e>)
 8001f74:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <HAL_PWR_EnterSTANDBYMode+0x2e>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f023 0307 	bic.w	r3, r3, #7
 8001f7c:	f043 0303 	orr.w	r3, r3, #3
 8001f80:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001f82:	4a07      	ldr	r2, [pc, #28]	; (8001fa0 <HAL_PWR_EnterSTANDBYMode+0x32>)
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_PWR_EnterSTANDBYMode+0x32>)
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	f043 0304 	orr.w	r3, r3, #4
 8001f8c:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8001f8e:	bf30      	wfi
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40007000 	.word	0x40007000
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8001fa8:	4a05      	ldr	r2, [pc, #20]	; (8001fc0 <HAL_PWR_EnableSleepOnExit+0x1c>)
 8001faa:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <HAL_PWR_EnableSleepOnExit+0x1c>)
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	f043 0302 	orr.w	r3, r3, #2
 8001fb2:	6113      	str	r3, [r2, #16]
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <HAL_PWR_DisableSleepOnExit>:
  * @note Clear SLEEPONEXIT bit of SCR register. When this bit is set, the processor
  *       re-enters SLEEP mode when an interruption handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8001fc8:	4a05      	ldr	r2, [pc, #20]	; (8001fe0 <HAL_PWR_DisableSleepOnExit+0x1c>)
 8001fca:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <HAL_PWR_DisableSleepOnExit+0x1c>)
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	f023 0302 	bic.w	r3, r3, #2
 8001fd2:	6113      	str	r3, [r2, #16]
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <HAL_PWR_EnableSEVOnPend>:
  * @note Set SEVONPEND bit of SCR register. When this bit is set, this causes
  *       WFE to wake up when an interrupt moves from inactive to pended.
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8001fe8:	4a05      	ldr	r2, [pc, #20]	; (8002000 <HAL_PWR_EnableSEVOnPend+0x1c>)
 8001fea:	4b05      	ldr	r3, [pc, #20]	; (8002000 <HAL_PWR_EnableSEVOnPend+0x1c>)
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	f043 0310 	orr.w	r3, r3, #16
 8001ff2:	6113      	str	r3, [r2, #16]
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <HAL_PWR_DisableSEVOnPend>:
  * @note Clear SEVONPEND bit of SCR register. When this bit is set, this causes
  *       WFE to wake up when an interrupt moves from inactive to pended.
  * @retval None
  */
void HAL_PWR_DisableSEVOnPend(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8002008:	4a05      	ldr	r2, [pc, #20]	; (8002020 <HAL_PWR_DisableSEVOnPend+0x1c>)
 800200a:	4b05      	ldr	r3, [pc, #20]	; (8002020 <HAL_PWR_DisableSEVOnPend+0x1c>)
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	f023 0310 	bic.w	r3, r3, #16
 8002012:	6113      	str	r3, [r2, #16]
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
   */
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop

08002034 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002038:	4b04      	ldr	r3, [pc, #16]	; (800204c <HAL_PWREx_GetVoltageRange+0x18>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40007000 	.word	0x40007000

08002050 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800205e:	d130      	bne.n	80020c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002060:	4b23      	ldr	r3, [pc, #140]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800206c:	d038      	beq.n	80020e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800206e:	4a20      	ldr	r2, [pc, #128]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002070:	4b1f      	ldr	r3, [pc, #124]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002078:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800207c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800207e:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2232      	movs	r2, #50	; 0x32
 8002084:	fb02 f303 	mul.w	r3, r2, r3
 8002088:	4a1b      	ldr	r2, [pc, #108]	; (80020f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800208a:	fba2 2303 	umull	r2, r3, r2, r3
 800208e:	0c9b      	lsrs	r3, r3, #18
 8002090:	3301      	adds	r3, #1
 8002092:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002094:	e002      	b.n	800209c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	3b01      	subs	r3, #1
 800209a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800209c:	4b14      	ldr	r3, [pc, #80]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800209e:	695b      	ldr	r3, [r3, #20]
 80020a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a8:	d102      	bne.n	80020b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1f2      	bne.n	8002096 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020b0:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020bc:	d110      	bne.n	80020e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e00f      	b.n	80020e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80020c2:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ce:	d007      	beq.n	80020e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020d0:	4a07      	ldr	r2, [pc, #28]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020d2:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40007000 	.word	0x40007000
 80020f4:	20000008 	.word	0x20000008
 80020f8:	431bde83 	.word	0x431bde83

080020fc <HAL_PWREx_EnableBatteryCharging>:
  *            @arg @ref PWR_BATTERY_CHARGING_RESISTOR_5     5 kOhms resistor
  *            @arg @ref PWR_BATTERY_CHARGING_RESISTOR_1_5 1.5 kOhms resistor
  * @retval None
  */
void HAL_PWREx_EnableBatteryCharging(uint32_t ResistorSelection)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_BATTERY_RESISTOR_SELECT(ResistorSelection));

  /* Specify resistor selection */
  MODIFY_REG(PWR->CR4, PWR_CR4_VBRS, ResistorSelection);
 8002104:	4909      	ldr	r1, [pc, #36]	; (800212c <HAL_PWREx_EnableBatteryCharging+0x30>)
 8002106:	4b09      	ldr	r3, [pc, #36]	; (800212c <HAL_PWREx_EnableBatteryCharging+0x30>)
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4313      	orrs	r3, r2
 8002112:	60cb      	str	r3, [r1, #12]

  /* Enable battery charging */
  SET_BIT(PWR->CR4, PWR_CR4_VBE);
 8002114:	4a05      	ldr	r2, [pc, #20]	; (800212c <HAL_PWREx_EnableBatteryCharging+0x30>)
 8002116:	4b05      	ldr	r3, [pc, #20]	; (800212c <HAL_PWREx_EnableBatteryCharging+0x30>)
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800211e:	60d3      	str	r3, [r2, #12]
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	40007000 	.word	0x40007000

08002130 <HAL_PWREx_DisableBatteryCharging>:
/**
  * @brief Disable battery charging.
  * @retval None
  */
void HAL_PWREx_DisableBatteryCharging(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR4, PWR_CR4_VBE);
 8002134:	4a05      	ldr	r2, [pc, #20]	; (800214c <HAL_PWREx_DisableBatteryCharging+0x1c>)
 8002136:	4b05      	ldr	r3, [pc, #20]	; (800214c <HAL_PWREx_DisableBatteryCharging+0x1c>)
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800213e:	60d3      	str	r3, [r2, #12]
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	40007000 	.word	0x40007000

08002150 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002154:	4a05      	ldr	r2, [pc, #20]	; (800216c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002156:	4b05      	ldr	r3, [pc, #20]	; (800216c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800215e:	6053      	str	r3, [r2, #4]
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40007000 	.word	0x40007000

08002170 <HAL_PWREx_DisableVddUSB>:
/**
  * @brief Disable VDDUSB supply.
  * @retval None
  */
void HAL_PWREx_DisableVddUSB(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_CR2_USV);
 8002174:	4a05      	ldr	r2, [pc, #20]	; (800218c <HAL_PWREx_DisableVddUSB+0x1c>)
 8002176:	4b05      	ldr	r3, [pc, #20]	; (800218c <HAL_PWREx_DisableVddUSB+0x1c>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800217e:	6053      	str	r3, [r2, #4]
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40007000 	.word	0x40007000

08002190 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002194:	4a05      	ldr	r2, [pc, #20]	; (80021ac <HAL_PWREx_EnableVddIO2+0x1c>)
 8002196:	4b05      	ldr	r3, [pc, #20]	; (80021ac <HAL_PWREx_EnableVddIO2+0x1c>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800219e:	6053      	str	r3, [r2, #4]
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40007000 	.word	0x40007000

080021b0 <HAL_PWREx_DisableVddIO2>:
/**
  * @brief Disable VDDIO2 supply.
  * @retval None
  */
void HAL_PWREx_DisableVddIO2(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_CR2_IOSV);
 80021b4:	4a05      	ldr	r2, [pc, #20]	; (80021cc <HAL_PWREx_DisableVddIO2+0x1c>)
 80021b6:	4b05      	ldr	r3, [pc, #20]	; (80021cc <HAL_PWREx_DisableVddIO2+0x1c>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021be:	6053      	str	r3, [r2, #4]
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40007000 	.word	0x40007000

080021d0 <HAL_PWREx_EnableInternalWakeUpLine>:
/**
  * @brief Enable Internal Wake-up Line.
  * @retval None
  */
void HAL_PWREx_EnableInternalWakeUpLine(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_EIWF);
 80021d4:	4a05      	ldr	r2, [pc, #20]	; (80021ec <HAL_PWREx_EnableInternalWakeUpLine+0x1c>)
 80021d6:	4b05      	ldr	r3, [pc, #20]	; (80021ec <HAL_PWREx_EnableInternalWakeUpLine+0x1c>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021de:	6093      	str	r3, [r2, #8]
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40007000 	.word	0x40007000

080021f0 <HAL_PWREx_DisableInternalWakeUpLine>:
/**
  * @brief Disable Internal Wake-up Line.
  * @retval None
  */
void HAL_PWREx_DisableInternalWakeUpLine(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_EIWF);
 80021f4:	4a05      	ldr	r2, [pc, #20]	; (800220c <HAL_PWREx_DisableInternalWakeUpLine+0x1c>)
 80021f6:	4b05      	ldr	r3, [pc, #20]	; (800220c <HAL_PWREx_DisableInternalWakeUpLine+0x1c>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80021fe:	6093      	str	r3, [r2, #8]
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	40007000 	.word	0x40007000

08002210 <HAL_PWREx_EnableGPIOPullUp>:
  *         I/O pins are available) or the logical OR of several of them to set
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	73fb      	strb	r3, [r7, #15]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b07      	cmp	r3, #7
 8002222:	f200 808d 	bhi.w	8002340 <HAL_PWREx_EnableGPIOPullUp+0x130>
 8002226:	a201      	add	r2, pc, #4	; (adr r2, 800222c <HAL_PWREx_EnableGPIOPullUp+0x1c>)
 8002228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222c:	0800224d 	.word	0x0800224d
 8002230:	08002271 	.word	0x08002271
 8002234:	08002291 	.word	0x08002291
 8002238:	080022ad 	.word	0x080022ad
 800223c:	080022c9 	.word	0x080022c9
 8002240:	080022e5 	.word	0x080022e5
 8002244:	08002301 	.word	0x08002301
 8002248:	0800231d 	.word	0x0800231d
  {
    case PWR_GPIO_A:
       SET_BIT(PWR->PUCRA, (GPIONumber & (~(PWR_GPIO_BIT_14))));
 800224c:	4941      	ldr	r1, [pc, #260]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 800224e:	4b41      	ldr	r3, [pc, #260]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 8002250:	6a1a      	ldr	r2, [r3, #32]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002258:	4313      	orrs	r3, r2
 800225a:	620b      	str	r3, [r1, #32]
       CLEAR_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
 800225c:	493d      	ldr	r1, [pc, #244]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 800225e:	4b3d      	ldr	r3, [pc, #244]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 8002260:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002268:	43db      	mvns	r3, r3
 800226a:	4013      	ands	r3, r2
 800226c:	624b      	str	r3, [r1, #36]	; 0x24
       break;
 800226e:	e06a      	b.n	8002346 <HAL_PWREx_EnableGPIOPullUp+0x136>
    case PWR_GPIO_B:
       SET_BIT(PWR->PUCRB, GPIONumber);
 8002270:	4938      	ldr	r1, [pc, #224]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 8002272:	4b38      	ldr	r3, [pc, #224]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 8002274:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	4313      	orrs	r3, r2
 800227a:	628b      	str	r3, [r1, #40]	; 0x28
       CLEAR_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
 800227c:	4935      	ldr	r1, [pc, #212]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 800227e:	4b35      	ldr	r3, [pc, #212]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 8002280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	f023 0310 	bic.w	r3, r3, #16
 8002288:	43db      	mvns	r3, r3
 800228a:	4013      	ands	r3, r2
 800228c:	62cb      	str	r3, [r1, #44]	; 0x2c
       break;
 800228e:	e05a      	b.n	8002346 <HAL_PWREx_EnableGPIOPullUp+0x136>
    case PWR_GPIO_C:
       SET_BIT(PWR->PUCRC, GPIONumber);
 8002290:	4930      	ldr	r1, [pc, #192]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 8002292:	4b30      	ldr	r3, [pc, #192]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 8002294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	4313      	orrs	r3, r2
 800229a:	630b      	str	r3, [r1, #48]	; 0x30
       CLEAR_BIT(PWR->PDCRC, GPIONumber);
 800229c:	492d      	ldr	r1, [pc, #180]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 800229e:	4b2d      	ldr	r3, [pc, #180]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80022a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	4013      	ands	r3, r2
 80022a8:	634b      	str	r3, [r1, #52]	; 0x34
       break;
 80022aa:	e04c      	b.n	8002346 <HAL_PWREx_EnableGPIOPullUp+0x136>
#if defined(GPIOD)
    case PWR_GPIO_D:
       SET_BIT(PWR->PUCRD, GPIONumber);
 80022ac:	4929      	ldr	r1, [pc, #164]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80022ae:	4b29      	ldr	r3, [pc, #164]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80022b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	638b      	str	r3, [r1, #56]	; 0x38
       CLEAR_BIT(PWR->PDCRD, GPIONumber);
 80022b8:	4926      	ldr	r1, [pc, #152]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80022ba:	4b26      	ldr	r3, [pc, #152]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80022bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	4013      	ands	r3, r2
 80022c4:	63cb      	str	r3, [r1, #60]	; 0x3c
       break;
 80022c6:	e03e      	b.n	8002346 <HAL_PWREx_EnableGPIOPullUp+0x136>
#endif
#if defined(GPIOE)
    case PWR_GPIO_E:
       SET_BIT(PWR->PUCRE, GPIONumber);
 80022c8:	4922      	ldr	r1, [pc, #136]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80022ca:	4b22      	ldr	r3, [pc, #136]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80022cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	640b      	str	r3, [r1, #64]	; 0x40
       CLEAR_BIT(PWR->PDCRE, GPIONumber);
 80022d4:	491f      	ldr	r1, [pc, #124]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80022d6:	4b1f      	ldr	r3, [pc, #124]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80022d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	43db      	mvns	r3, r3
 80022de:	4013      	ands	r3, r2
 80022e0:	644b      	str	r3, [r1, #68]	; 0x44
       break;
 80022e2:	e030      	b.n	8002346 <HAL_PWREx_EnableGPIOPullUp+0x136>
#endif
#if defined(GPIOF)
    case PWR_GPIO_F:
       SET_BIT(PWR->PUCRF, GPIONumber);
 80022e4:	491b      	ldr	r1, [pc, #108]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80022e6:	4b1b      	ldr	r3, [pc, #108]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80022e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	648b      	str	r3, [r1, #72]	; 0x48
       CLEAR_BIT(PWR->PDCRF, GPIONumber);
 80022f0:	4918      	ldr	r1, [pc, #96]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80022f2:	4b18      	ldr	r3, [pc, #96]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80022f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	4013      	ands	r3, r2
 80022fc:	64cb      	str	r3, [r1, #76]	; 0x4c
       break;
 80022fe:	e022      	b.n	8002346 <HAL_PWREx_EnableGPIOPullUp+0x136>
#endif
#if defined(GPIOG)
    case PWR_GPIO_G:
       SET_BIT(PWR->PUCRG, GPIONumber);
 8002300:	4914      	ldr	r1, [pc, #80]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 8002302:	4b14      	ldr	r3, [pc, #80]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 8002304:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	4313      	orrs	r3, r2
 800230a:	650b      	str	r3, [r1, #80]	; 0x50
       CLEAR_BIT(PWR->PDCRG, GPIONumber);
 800230c:	4911      	ldr	r1, [pc, #68]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 800230e:	4b11      	ldr	r3, [pc, #68]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 8002310:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	43db      	mvns	r3, r3
 8002316:	4013      	ands	r3, r2
 8002318:	654b      	str	r3, [r1, #84]	; 0x54
       break;
 800231a:	e014      	b.n	8002346 <HAL_PWREx_EnableGPIOPullUp+0x136>
#endif
    case PWR_GPIO_H:
       SET_BIT(PWR->PUCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 800231c:	490d      	ldr	r1, [pc, #52]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 800231e:	4b0d      	ldr	r3, [pc, #52]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 8002320:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	4313      	orrs	r3, r2
 800232a:	658b      	str	r3, [r1, #88]	; 0x58
#if defined (STM32L496xx) || defined (STM32L4A6xx)
       CLEAR_BIT(PWR->PDCRH, ((GPIONumber & PWR_PORTH_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_3))));
#else
       CLEAR_BIT(PWR->PDCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 800232c:	4909      	ldr	r1, [pc, #36]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 800232e:	4b09      	ldr	r3, [pc, #36]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 8002330:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	f003 0303 	and.w	r3, r3, #3
 8002338:	43db      	mvns	r3, r3
 800233a:	4013      	ands	r3, r2
 800233c:	65cb      	str	r3, [r1, #92]	; 0x5c
#endif
       break;
 800233e:	e002      	b.n	8002346 <HAL_PWREx_EnableGPIOPullUp+0x136>
       SET_BIT(PWR->PUCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       CLEAR_BIT(PWR->PDCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       break;
#endif
    default:
      status = HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	73fb      	strb	r3, [r7, #15]
      break;
 8002344:	bf00      	nop
  }

  return status;
 8002346:	7bfb      	ldrb	r3, [r7, #15]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	40007000 	.word	0x40007000

08002358 <HAL_PWREx_DisableGPIOPullUp>:
  *         I/O pins are available) or the logical OR of several of them to reset
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002362:	2300      	movs	r3, #0
 8002364:	73fb      	strb	r3, [r7, #15]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b07      	cmp	r3, #7
 800236a:	d857      	bhi.n	800241c <HAL_PWREx_DisableGPIOPullUp+0xc4>
 800236c:	a201      	add	r2, pc, #4	; (adr r2, 8002374 <HAL_PWREx_DisableGPIOPullUp+0x1c>)
 800236e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002372:	bf00      	nop
 8002374:	08002395 	.word	0x08002395
 8002378:	080023a9 	.word	0x080023a9
 800237c:	080023b9 	.word	0x080023b9
 8002380:	080023c9 	.word	0x080023c9
 8002384:	080023d9 	.word	0x080023d9
 8002388:	080023e9 	.word	0x080023e9
 800238c:	080023f9 	.word	0x080023f9
 8002390:	08002409 	.word	0x08002409
  {
    case PWR_GPIO_A:
       CLEAR_BIT(PWR->PUCRA, (GPIONumber & (~(PWR_GPIO_BIT_14))));
 8002394:	4926      	ldr	r1, [pc, #152]	; (8002430 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 8002396:	4b26      	ldr	r3, [pc, #152]	; (8002430 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 8002398:	6a1a      	ldr	r2, [r3, #32]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023a0:	43db      	mvns	r3, r3
 80023a2:	4013      	ands	r3, r2
 80023a4:	620b      	str	r3, [r1, #32]
       break;
 80023a6:	e03c      	b.n	8002422 <HAL_PWREx_DisableGPIOPullUp+0xca>
    case PWR_GPIO_B:
       CLEAR_BIT(PWR->PUCRB, GPIONumber);
 80023a8:	4921      	ldr	r1, [pc, #132]	; (8002430 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 80023aa:	4b21      	ldr	r3, [pc, #132]	; (8002430 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 80023ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	43db      	mvns	r3, r3
 80023b2:	4013      	ands	r3, r2
 80023b4:	628b      	str	r3, [r1, #40]	; 0x28
       break;
 80023b6:	e034      	b.n	8002422 <HAL_PWREx_DisableGPIOPullUp+0xca>
    case PWR_GPIO_C:
       CLEAR_BIT(PWR->PUCRC, GPIONumber);
 80023b8:	491d      	ldr	r1, [pc, #116]	; (8002430 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 80023ba:	4b1d      	ldr	r3, [pc, #116]	; (8002430 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 80023bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	4013      	ands	r3, r2
 80023c4:	630b      	str	r3, [r1, #48]	; 0x30
       break;
 80023c6:	e02c      	b.n	8002422 <HAL_PWREx_DisableGPIOPullUp+0xca>
#if defined(GPIOD)
    case PWR_GPIO_D:
       CLEAR_BIT(PWR->PUCRD, GPIONumber);
 80023c8:	4919      	ldr	r1, [pc, #100]	; (8002430 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 80023ca:	4b19      	ldr	r3, [pc, #100]	; (8002430 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 80023cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	4013      	ands	r3, r2
 80023d4:	638b      	str	r3, [r1, #56]	; 0x38
       break;
 80023d6:	e024      	b.n	8002422 <HAL_PWREx_DisableGPIOPullUp+0xca>
#endif
#if defined(GPIOE)
    case PWR_GPIO_E:
       CLEAR_BIT(PWR->PUCRE, GPIONumber);
 80023d8:	4915      	ldr	r1, [pc, #84]	; (8002430 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 80023da:	4b15      	ldr	r3, [pc, #84]	; (8002430 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 80023dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	4013      	ands	r3, r2
 80023e4:	640b      	str	r3, [r1, #64]	; 0x40
       break;
 80023e6:	e01c      	b.n	8002422 <HAL_PWREx_DisableGPIOPullUp+0xca>
#endif
#if defined(GPIOF)
    case PWR_GPIO_F:
       CLEAR_BIT(PWR->PUCRF, GPIONumber);
 80023e8:	4911      	ldr	r1, [pc, #68]	; (8002430 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 80023ea:	4b11      	ldr	r3, [pc, #68]	; (8002430 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 80023ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	43db      	mvns	r3, r3
 80023f2:	4013      	ands	r3, r2
 80023f4:	648b      	str	r3, [r1, #72]	; 0x48
       break;
 80023f6:	e014      	b.n	8002422 <HAL_PWREx_DisableGPIOPullUp+0xca>
#endif
#if defined(GPIOG)
    case PWR_GPIO_G:
       CLEAR_BIT(PWR->PUCRG, GPIONumber);
 80023f8:	490d      	ldr	r1, [pc, #52]	; (8002430 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 80023fa:	4b0d      	ldr	r3, [pc, #52]	; (8002430 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 80023fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	43db      	mvns	r3, r3
 8002402:	4013      	ands	r3, r2
 8002404:	650b      	str	r3, [r1, #80]	; 0x50
       break;
 8002406:	e00c      	b.n	8002422 <HAL_PWREx_DisableGPIOPullUp+0xca>
#endif
    case PWR_GPIO_H:
       CLEAR_BIT(PWR->PUCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8002408:	4909      	ldr	r1, [pc, #36]	; (8002430 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 800240c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	f003 0303 	and.w	r3, r3, #3
 8002414:	43db      	mvns	r3, r3
 8002416:	4013      	ands	r3, r2
 8002418:	658b      	str	r3, [r1, #88]	; 0x58
       break;
 800241a:	e002      	b.n	8002422 <HAL_PWREx_DisableGPIOPullUp+0xca>
    case PWR_GPIO_I:
       CLEAR_BIT(PWR->PUCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       break;
#endif
    default:
       status = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	73fb      	strb	r3, [r7, #15]
       break;
 8002420:	bf00      	nop
  }

  return status;
 8002422:	7bfb      	ldrb	r3, [r7, #15]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	40007000 	.word	0x40007000

08002434 <HAL_PWREx_EnableGPIOPullDown>:
  *         I/O pins are available) or the logical OR of several of them to set
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800243e:	2300      	movs	r3, #0
 8002440:	73fb      	strb	r3, [r7, #15]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b07      	cmp	r3, #7
 8002446:	f200 808d 	bhi.w	8002564 <HAL_PWREx_EnableGPIOPullDown+0x130>
 800244a:	a201      	add	r2, pc, #4	; (adr r2, 8002450 <HAL_PWREx_EnableGPIOPullDown+0x1c>)
 800244c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002450:	08002471 	.word	0x08002471
 8002454:	08002495 	.word	0x08002495
 8002458:	080024b5 	.word	0x080024b5
 800245c:	080024d1 	.word	0x080024d1
 8002460:	080024ed 	.word	0x080024ed
 8002464:	08002509 	.word	0x08002509
 8002468:	08002525 	.word	0x08002525
 800246c:	08002541 	.word	0x08002541
  {
    case PWR_GPIO_A:
       SET_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
 8002470:	4941      	ldr	r1, [pc, #260]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002472:	4b41      	ldr	r3, [pc, #260]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002474:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800247c:	4313      	orrs	r3, r2
 800247e:	624b      	str	r3, [r1, #36]	; 0x24
       CLEAR_BIT(PWR->PUCRA, (GPIONumber & (~(PWR_GPIO_BIT_14))));
 8002480:	493d      	ldr	r1, [pc, #244]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002482:	4b3d      	ldr	r3, [pc, #244]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002484:	6a1a      	ldr	r2, [r3, #32]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800248c:	43db      	mvns	r3, r3
 800248e:	4013      	ands	r3, r2
 8002490:	620b      	str	r3, [r1, #32]
       break;
 8002492:	e06a      	b.n	800256a <HAL_PWREx_EnableGPIOPullDown+0x136>
    case PWR_GPIO_B:
       SET_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
 8002494:	4938      	ldr	r1, [pc, #224]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002496:	4b38      	ldr	r3, [pc, #224]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	f023 0310 	bic.w	r3, r3, #16
 80024a0:	4313      	orrs	r3, r2
 80024a2:	62cb      	str	r3, [r1, #44]	; 0x2c
       CLEAR_BIT(PWR->PUCRB, GPIONumber);
 80024a4:	4934      	ldr	r1, [pc, #208]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80024a6:	4b34      	ldr	r3, [pc, #208]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80024a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	43db      	mvns	r3, r3
 80024ae:	4013      	ands	r3, r2
 80024b0:	628b      	str	r3, [r1, #40]	; 0x28
       break;
 80024b2:	e05a      	b.n	800256a <HAL_PWREx_EnableGPIOPullDown+0x136>
    case PWR_GPIO_C:
       SET_BIT(PWR->PDCRC, GPIONumber);
 80024b4:	4930      	ldr	r1, [pc, #192]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80024b6:	4b30      	ldr	r3, [pc, #192]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80024b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	4313      	orrs	r3, r2
 80024be:	634b      	str	r3, [r1, #52]	; 0x34
       CLEAR_BIT(PWR->PUCRC, GPIONumber);
 80024c0:	492d      	ldr	r1, [pc, #180]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80024c2:	4b2d      	ldr	r3, [pc, #180]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80024c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	4013      	ands	r3, r2
 80024cc:	630b      	str	r3, [r1, #48]	; 0x30
       break;
 80024ce:	e04c      	b.n	800256a <HAL_PWREx_EnableGPIOPullDown+0x136>
#if defined(GPIOD)
    case PWR_GPIO_D:
       SET_BIT(PWR->PDCRD, GPIONumber);
 80024d0:	4929      	ldr	r1, [pc, #164]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80024d2:	4b29      	ldr	r3, [pc, #164]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80024d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	4313      	orrs	r3, r2
 80024da:	63cb      	str	r3, [r1, #60]	; 0x3c
       CLEAR_BIT(PWR->PUCRD, GPIONumber);
 80024dc:	4926      	ldr	r1, [pc, #152]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80024de:	4b26      	ldr	r3, [pc, #152]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80024e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	43db      	mvns	r3, r3
 80024e6:	4013      	ands	r3, r2
 80024e8:	638b      	str	r3, [r1, #56]	; 0x38
       break;
 80024ea:	e03e      	b.n	800256a <HAL_PWREx_EnableGPIOPullDown+0x136>
#endif
#if defined(GPIOE)
    case PWR_GPIO_E:
       SET_BIT(PWR->PDCRE, GPIONumber);
 80024ec:	4922      	ldr	r1, [pc, #136]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80024ee:	4b22      	ldr	r3, [pc, #136]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80024f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	644b      	str	r3, [r1, #68]	; 0x44
       CLEAR_BIT(PWR->PUCRE, GPIONumber);
 80024f8:	491f      	ldr	r1, [pc, #124]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80024fa:	4b1f      	ldr	r3, [pc, #124]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80024fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	43db      	mvns	r3, r3
 8002502:	4013      	ands	r3, r2
 8002504:	640b      	str	r3, [r1, #64]	; 0x40
       break;
 8002506:	e030      	b.n	800256a <HAL_PWREx_EnableGPIOPullDown+0x136>
#endif
#if defined(GPIOF)
    case PWR_GPIO_F:
       SET_BIT(PWR->PDCRF, GPIONumber);
 8002508:	491b      	ldr	r1, [pc, #108]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 800250a:	4b1b      	ldr	r3, [pc, #108]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 800250c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	4313      	orrs	r3, r2
 8002512:	64cb      	str	r3, [r1, #76]	; 0x4c
       CLEAR_BIT(PWR->PUCRF, GPIONumber);
 8002514:	4918      	ldr	r1, [pc, #96]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002516:	4b18      	ldr	r3, [pc, #96]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002518:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	43db      	mvns	r3, r3
 800251e:	4013      	ands	r3, r2
 8002520:	648b      	str	r3, [r1, #72]	; 0x48
       break;
 8002522:	e022      	b.n	800256a <HAL_PWREx_EnableGPIOPullDown+0x136>
#endif
#if defined(GPIOG)
    case PWR_GPIO_G:
       SET_BIT(PWR->PDCRG, GPIONumber);
 8002524:	4914      	ldr	r1, [pc, #80]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002526:	4b14      	ldr	r3, [pc, #80]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002528:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	4313      	orrs	r3, r2
 800252e:	654b      	str	r3, [r1, #84]	; 0x54
       CLEAR_BIT(PWR->PUCRG, GPIONumber);
 8002530:	4911      	ldr	r1, [pc, #68]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002532:	4b11      	ldr	r3, [pc, #68]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002534:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	43db      	mvns	r3, r3
 800253a:	4013      	ands	r3, r2
 800253c:	650b      	str	r3, [r1, #80]	; 0x50
       break;
 800253e:	e014      	b.n	800256a <HAL_PWREx_EnableGPIOPullDown+0x136>
#endif
    case PWR_GPIO_H:
#if defined (STM32L496xx) || defined (STM32L4A6xx)
       SET_BIT(PWR->PDCRH, ((GPIONumber & PWR_PORTH_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_3))));
#else
       SET_BIT(PWR->PDCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8002540:	490d      	ldr	r1, [pc, #52]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002542:	4b0d      	ldr	r3, [pc, #52]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002544:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	4313      	orrs	r3, r2
 800254e:	65cb      	str	r3, [r1, #92]	; 0x5c
#endif
       CLEAR_BIT(PWR->PUCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8002550:	4909      	ldr	r1, [pc, #36]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002552:	4b09      	ldr	r3, [pc, #36]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002554:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	f003 0303 	and.w	r3, r3, #3
 800255c:	43db      	mvns	r3, r3
 800255e:	4013      	ands	r3, r2
 8002560:	658b      	str	r3, [r1, #88]	; 0x58
       break;
 8002562:	e002      	b.n	800256a <HAL_PWREx_EnableGPIOPullDown+0x136>
       SET_BIT(PWR->PDCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       CLEAR_BIT(PWR->PUCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       break;
#endif
    default:
      status = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	73fb      	strb	r3, [r7, #15]
      break;
 8002568:	bf00      	nop
  }

  return status;
 800256a:	7bfb      	ldrb	r3, [r7, #15]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	40007000 	.word	0x40007000

0800257c <HAL_PWREx_DisableGPIOPullDown>:
  *         I/O pins are available) or the logical OR of several of them to reset
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	73fb      	strb	r3, [r7, #15]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b07      	cmp	r3, #7
 800258e:	d859      	bhi.n	8002644 <HAL_PWREx_DisableGPIOPullDown+0xc8>
 8002590:	a201      	add	r2, pc, #4	; (adr r2, 8002598 <HAL_PWREx_DisableGPIOPullDown+0x1c>)
 8002592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002596:	bf00      	nop
 8002598:	080025b9 	.word	0x080025b9
 800259c:	080025cd 	.word	0x080025cd
 80025a0:	080025e1 	.word	0x080025e1
 80025a4:	080025f1 	.word	0x080025f1
 80025a8:	08002601 	.word	0x08002601
 80025ac:	08002611 	.word	0x08002611
 80025b0:	08002621 	.word	0x08002621
 80025b4:	08002631 	.word	0x08002631
  {
    case PWR_GPIO_A:
       CLEAR_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
 80025b8:	4927      	ldr	r1, [pc, #156]	; (8002658 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 80025ba:	4b27      	ldr	r3, [pc, #156]	; (8002658 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 80025bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80025c4:	43db      	mvns	r3, r3
 80025c6:	4013      	ands	r3, r2
 80025c8:	624b      	str	r3, [r1, #36]	; 0x24
       break;
 80025ca:	e03e      	b.n	800264a <HAL_PWREx_DisableGPIOPullDown+0xce>
    case PWR_GPIO_B:
       CLEAR_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
 80025cc:	4922      	ldr	r1, [pc, #136]	; (8002658 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 80025ce:	4b22      	ldr	r3, [pc, #136]	; (8002658 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 80025d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	f023 0310 	bic.w	r3, r3, #16
 80025d8:	43db      	mvns	r3, r3
 80025da:	4013      	ands	r3, r2
 80025dc:	62cb      	str	r3, [r1, #44]	; 0x2c
       break;
 80025de:	e034      	b.n	800264a <HAL_PWREx_DisableGPIOPullDown+0xce>
    case PWR_GPIO_C:
       CLEAR_BIT(PWR->PDCRC, GPIONumber);
 80025e0:	491d      	ldr	r1, [pc, #116]	; (8002658 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 80025e2:	4b1d      	ldr	r3, [pc, #116]	; (8002658 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 80025e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	43db      	mvns	r3, r3
 80025ea:	4013      	ands	r3, r2
 80025ec:	634b      	str	r3, [r1, #52]	; 0x34
       break;
 80025ee:	e02c      	b.n	800264a <HAL_PWREx_DisableGPIOPullDown+0xce>
#if defined(GPIOD)
    case PWR_GPIO_D:
       CLEAR_BIT(PWR->PDCRD, GPIONumber);
 80025f0:	4919      	ldr	r1, [pc, #100]	; (8002658 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 80025f2:	4b19      	ldr	r3, [pc, #100]	; (8002658 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 80025f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	43db      	mvns	r3, r3
 80025fa:	4013      	ands	r3, r2
 80025fc:	63cb      	str	r3, [r1, #60]	; 0x3c
       break;
 80025fe:	e024      	b.n	800264a <HAL_PWREx_DisableGPIOPullDown+0xce>
#endif
#if defined(GPIOE)
    case PWR_GPIO_E:
       CLEAR_BIT(PWR->PDCRE, GPIONumber);
 8002600:	4915      	ldr	r1, [pc, #84]	; (8002658 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 8002602:	4b15      	ldr	r3, [pc, #84]	; (8002658 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 8002604:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	43db      	mvns	r3, r3
 800260a:	4013      	ands	r3, r2
 800260c:	644b      	str	r3, [r1, #68]	; 0x44
       break;
 800260e:	e01c      	b.n	800264a <HAL_PWREx_DisableGPIOPullDown+0xce>
#endif
#if defined(GPIOF)
    case PWR_GPIO_F:
       CLEAR_BIT(PWR->PDCRF, GPIONumber);
 8002610:	4911      	ldr	r1, [pc, #68]	; (8002658 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 8002612:	4b11      	ldr	r3, [pc, #68]	; (8002658 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 8002614:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	43db      	mvns	r3, r3
 800261a:	4013      	ands	r3, r2
 800261c:	64cb      	str	r3, [r1, #76]	; 0x4c
       break;
 800261e:	e014      	b.n	800264a <HAL_PWREx_DisableGPIOPullDown+0xce>
#endif
#if defined(GPIOG)
    case PWR_GPIO_G:
       CLEAR_BIT(PWR->PDCRG, GPIONumber);
 8002620:	490d      	ldr	r1, [pc, #52]	; (8002658 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 8002622:	4b0d      	ldr	r3, [pc, #52]	; (8002658 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 8002624:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	43db      	mvns	r3, r3
 800262a:	4013      	ands	r3, r2
 800262c:	654b      	str	r3, [r1, #84]	; 0x54
       break;
 800262e:	e00c      	b.n	800264a <HAL_PWREx_DisableGPIOPullDown+0xce>
#endif
    case PWR_GPIO_H:
#if defined (STM32L496xx) || defined (STM32L4A6xx)
       CLEAR_BIT(PWR->PDCRH, ((GPIONumber & PWR_PORTH_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_3))));
#else
       CLEAR_BIT(PWR->PDCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8002630:	4909      	ldr	r1, [pc, #36]	; (8002658 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 8002632:	4b09      	ldr	r3, [pc, #36]	; (8002658 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 8002634:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	f003 0303 	and.w	r3, r3, #3
 800263c:	43db      	mvns	r3, r3
 800263e:	4013      	ands	r3, r2
 8002640:	65cb      	str	r3, [r1, #92]	; 0x5c
#endif
       break;
 8002642:	e002      	b.n	800264a <HAL_PWREx_DisableGPIOPullDown+0xce>
    case PWR_GPIO_I:
       CLEAR_BIT(PWR->PDCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       break;
#endif
    default:
      status = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	73fb      	strb	r3, [r7, #15]
      break;
 8002648:	bf00      	nop
  }

  return status;
 800264a:	7bfb      	ldrb	r3, [r7, #15]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	40007000 	.word	0x40007000

0800265c <HAL_PWREx_EnablePullUpPullDownConfig>:
  *        HAL_PWREx_EnableGPIOPullUp() and HAL_PWREx_EnableGPIOPullDown() API's ensure there
  *        is no conflict when setting PUy or PDy bit.
  * @retval None
  */
void HAL_PWREx_EnablePullUpPullDownConfig(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_APC);
 8002660:	4a05      	ldr	r2, [pc, #20]	; (8002678 <HAL_PWREx_EnablePullUpPullDownConfig+0x1c>)
 8002662:	4b05      	ldr	r3, [pc, #20]	; (8002678 <HAL_PWREx_EnablePullUpPullDownConfig+0x1c>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800266a:	6093      	str	r3, [r2, #8]
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40007000 	.word	0x40007000

0800267c <HAL_PWREx_DisablePullUpPullDownConfig>:
  * @note  When APC bit is cleared, the I/O pull-up and pull-down configurations defined in
  *        PWR_PUCRx and PWR_PDCRx registers are not applied in Standby and Shutdown modes.
  * @retval None
  */
void HAL_PWREx_DisablePullUpPullDownConfig(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_APC);
 8002680:	4a05      	ldr	r2, [pc, #20]	; (8002698 <HAL_PWREx_DisablePullUpPullDownConfig+0x1c>)
 8002682:	4b05      	ldr	r3, [pc, #20]	; (8002698 <HAL_PWREx_DisablePullUpPullDownConfig+0x1c>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800268a:	6093      	str	r3, [r2, #8]
}
 800268c:	bf00      	nop
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	40007000 	.word	0x40007000

0800269c <HAL_PWREx_EnableSRAM2ContentRetention>:
  * @note  When RRS bit is set, SRAM2 is powered by the low-power regulator in
  *         Standby mode and its content is kept.
  * @retval None
  */
void HAL_PWREx_EnableSRAM2ContentRetention(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 80026a0:	4a05      	ldr	r2, [pc, #20]	; (80026b8 <HAL_PWREx_EnableSRAM2ContentRetention+0x1c>)
 80026a2:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <HAL_PWREx_EnableSRAM2ContentRetention+0x1c>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026aa:	6093      	str	r3, [r2, #8]
}
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40007000 	.word	0x40007000

080026bc <HAL_PWREx_DisableSRAM2ContentRetention>:
  * @note  When RRS bit is reset, SRAM2 is powered off in Standby mode
  *        and its content is lost.
  * @retval None
  */
void HAL_PWREx_DisableSRAM2ContentRetention(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_RRS);
 80026c0:	4a05      	ldr	r2, [pc, #20]	; (80026d8 <HAL_PWREx_DisableSRAM2ContentRetention+0x1c>)
 80026c2:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <HAL_PWREx_DisableSRAM2ContentRetention+0x1c>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026ca:	6093      	str	r3, [r2, #8]
}
 80026cc:	bf00      	nop
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	40007000 	.word	0x40007000

080026dc <HAL_PWREx_EnablePVM1>:
/**
  * @brief Enable the Power Voltage Monitoring 1: VDDUSB versus 1.2V.
  * @retval None
  */
void HAL_PWREx_EnablePVM1(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_PVM_1);
 80026e0:	4a05      	ldr	r2, [pc, #20]	; (80026f8 <HAL_PWREx_EnablePVM1+0x1c>)
 80026e2:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <HAL_PWREx_EnablePVM1+0x1c>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f043 0310 	orr.w	r3, r3, #16
 80026ea:	6053      	str	r3, [r2, #4]
}
 80026ec:	bf00      	nop
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40007000 	.word	0x40007000

080026fc <HAL_PWREx_DisablePVM1>:
/**
  * @brief Disable the Power Voltage Monitoring 1: VDDUSB versus 1.2V.
  * @retval None
  */
void HAL_PWREx_DisablePVM1(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_PVM_1);
 8002700:	4a05      	ldr	r2, [pc, #20]	; (8002718 <HAL_PWREx_DisablePVM1+0x1c>)
 8002702:	4b05      	ldr	r3, [pc, #20]	; (8002718 <HAL_PWREx_DisablePVM1+0x1c>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f023 0310 	bic.w	r3, r3, #16
 800270a:	6053      	str	r3, [r2, #4]
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40007000 	.word	0x40007000

0800271c <HAL_PWREx_EnablePVM2>:
/**
  * @brief Enable the Power Voltage Monitoring 2: VDDIO2 versus 0.9V.
  * @retval None
  */
void HAL_PWREx_EnablePVM2(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_PVM_2);
 8002720:	4a05      	ldr	r2, [pc, #20]	; (8002738 <HAL_PWREx_EnablePVM2+0x1c>)
 8002722:	4b05      	ldr	r3, [pc, #20]	; (8002738 <HAL_PWREx_EnablePVM2+0x1c>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f043 0320 	orr.w	r3, r3, #32
 800272a:	6053      	str	r3, [r2, #4]
}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	40007000 	.word	0x40007000

0800273c <HAL_PWREx_DisablePVM2>:
/**
  * @brief Disable the Power Voltage Monitoring 2: VDDIO2 versus 0.9V.
  * @retval None
  */
void HAL_PWREx_DisablePVM2(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_PVM_2);
 8002740:	4a05      	ldr	r2, [pc, #20]	; (8002758 <HAL_PWREx_DisablePVM2+0x1c>)
 8002742:	4b05      	ldr	r3, [pc, #20]	; (8002758 <HAL_PWREx_DisablePVM2+0x1c>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f023 0320 	bic.w	r3, r3, #32
 800274a:	6053      	str	r3, [r2, #4]
}
 800274c:	bf00      	nop
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40007000 	.word	0x40007000

0800275c <HAL_PWREx_EnablePVM3>:
/**
  * @brief Enable the Power Voltage Monitoring 3: VDDA versus 1.62V.
  * @retval None
  */
void HAL_PWREx_EnablePVM3(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_PVM_3);
 8002760:	4a05      	ldr	r2, [pc, #20]	; (8002778 <HAL_PWREx_EnablePVM3+0x1c>)
 8002762:	4b05      	ldr	r3, [pc, #20]	; (8002778 <HAL_PWREx_EnablePVM3+0x1c>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800276a:	6053      	str	r3, [r2, #4]
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	40007000 	.word	0x40007000

0800277c <HAL_PWREx_DisablePVM3>:
/**
  * @brief Disable the Power Voltage Monitoring 3: VDDA versus 1.62V.
  * @retval None
  */
void HAL_PWREx_DisablePVM3(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_PVM_3);
 8002780:	4a05      	ldr	r2, [pc, #20]	; (8002798 <HAL_PWREx_DisablePVM3+0x1c>)
 8002782:	4b05      	ldr	r3, [pc, #20]	; (8002798 <HAL_PWREx_DisablePVM3+0x1c>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800278a:	6053      	str	r3, [r2, #4]
}
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40007000 	.word	0x40007000

0800279c <HAL_PWREx_EnablePVM4>:
/**
  * @brief Enable the Power Voltage Monitoring 4:  VDDA versus 2.2V.
  * @retval None
  */
void HAL_PWREx_EnablePVM4(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_PVM_4);
 80027a0:	4a05      	ldr	r2, [pc, #20]	; (80027b8 <HAL_PWREx_EnablePVM4+0x1c>)
 80027a2:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <HAL_PWREx_EnablePVM4+0x1c>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027aa:	6053      	str	r3, [r2, #4]
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	40007000 	.word	0x40007000

080027bc <HAL_PWREx_DisablePVM4>:
/**
  * @brief Disable the Power Voltage Monitoring 4:  VDDA versus 2.2V.
  * @retval None
  */
void HAL_PWREx_DisablePVM4(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_PVM_4);
 80027c0:	4a05      	ldr	r2, [pc, #20]	; (80027d8 <HAL_PWREx_DisablePVM4+0x1c>)
 80027c2:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <HAL_PWREx_DisablePVM4+0x1c>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027ca:	6053      	str	r3, [r2, #4]
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40007000 	.word	0x40007000

080027dc <HAL_PWREx_ConfigPVM>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level and to each monitored supply.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_ConfigPVM(PWR_PVMTypeDef *sConfigPVM)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027e4:	2300      	movs	r3, #0
 80027e6:	73fb      	strb	r3, [r7, #15]


  /* Configure EXTI 35 to 38 interrupts if so required:
     scan thru PVMType to detect which PVMx is set and
     configure the corresponding EXTI line accordingly. */
  switch (sConfigPVM->PVMType)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	d055      	beq.n	800289c <HAL_PWREx_ConfigPVM+0xc0>
 80027f0:	2b20      	cmp	r3, #32
 80027f2:	d802      	bhi.n	80027fa <HAL_PWREx_ConfigPVM+0x1e>
 80027f4:	2b10      	cmp	r3, #16
 80027f6:	d007      	beq.n	8002808 <HAL_PWREx_ConfigPVM+0x2c>
 80027f8:	e12c      	b.n	8002a54 <HAL_PWREx_ConfigPVM+0x278>
 80027fa:	2b40      	cmp	r3, #64	; 0x40
 80027fc:	f000 8098 	beq.w	8002930 <HAL_PWREx_ConfigPVM+0x154>
 8002800:	2b80      	cmp	r3, #128	; 0x80
 8002802:	f000 80de 	beq.w	80029c2 <HAL_PWREx_ConfigPVM+0x1e6>
 8002806:	e125      	b.n	8002a54 <HAL_PWREx_ConfigPVM+0x278>
  {
#if defined(PWR_CR2_PVME1)
    case PWR_PVM_1:
      /* Clear any previous config. Keep it clear if no event or IT mode is selected */
      __HAL_PWR_PVM1_EXTI_DISABLE_EVENT();
 8002808:	4a9b      	ldr	r2, [pc, #620]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 800280a:	4b9b      	ldr	r3, [pc, #620]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	f023 0308 	bic.w	r3, r3, #8
 8002812:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_PWR_PVM1_EXTI_DISABLE_IT();
 8002814:	4a98      	ldr	r2, [pc, #608]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002816:	4b98      	ldr	r3, [pc, #608]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	f023 0308 	bic.w	r3, r3, #8
 800281e:	6213      	str	r3, [r2, #32]
      __HAL_PWR_PVM1_EXTI_DISABLE_FALLING_EDGE();
 8002820:	4a95      	ldr	r2, [pc, #596]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002822:	4b95      	ldr	r3, [pc, #596]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002826:	f023 0308 	bic.w	r3, r3, #8
 800282a:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_PWR_PVM1_EXTI_DISABLE_RISING_EDGE();
 800282c:	4a92      	ldr	r2, [pc, #584]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 800282e:	4b92      	ldr	r3, [pc, #584]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002832:	f023 0308 	bic.w	r3, r3, #8
 8002836:	6293      	str	r3, [r2, #40]	; 0x28

      /* Configure interrupt mode */
      if((sConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d005      	beq.n	8002850 <HAL_PWREx_ConfigPVM+0x74>
      {
        __HAL_PWR_PVM1_EXTI_ENABLE_IT();
 8002844:	4a8c      	ldr	r2, [pc, #560]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002846:	4b8c      	ldr	r3, [pc, #560]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	f043 0308 	orr.w	r3, r3, #8
 800284e:	6213      	str	r3, [r2, #32]
      }

      /* Configure event mode */
      if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d005      	beq.n	8002868 <HAL_PWREx_ConfigPVM+0x8c>
      {
        __HAL_PWR_PVM1_EXTI_ENABLE_EVENT();
 800285c:	4a86      	ldr	r2, [pc, #536]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 800285e:	4b86      	ldr	r3, [pc, #536]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	f043 0308 	orr.w	r3, r3, #8
 8002866:	6253      	str	r3, [r2, #36]	; 0x24
      }

      /* Configure the edge */
      if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b00      	cmp	r3, #0
 8002872:	d005      	beq.n	8002880 <HAL_PWREx_ConfigPVM+0xa4>
      {
        __HAL_PWR_PVM1_EXTI_ENABLE_RISING_EDGE();
 8002874:	4a80      	ldr	r2, [pc, #512]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002876:	4b80      	ldr	r3, [pc, #512]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287a:	f043 0308 	orr.w	r3, r3, #8
 800287e:	6293      	str	r3, [r2, #40]	; 0x28
      }

      if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 80e6 	beq.w	8002a5a <HAL_PWREx_ConfigPVM+0x27e>
      {
        __HAL_PWR_PVM1_EXTI_ENABLE_FALLING_EDGE();
 800288e:	4a7a      	ldr	r2, [pc, #488]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002890:	4b79      	ldr	r3, [pc, #484]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002894:	f043 0308 	orr.w	r3, r3, #8
 8002898:	62d3      	str	r3, [r2, #44]	; 0x2c
      }
      break;
 800289a:	e0de      	b.n	8002a5a <HAL_PWREx_ConfigPVM+0x27e>
#endif /* PWR_CR2_PVME1 */

#if defined(PWR_CR2_PVME2)
    case PWR_PVM_2:
      /* Clear any previous config. Keep it clear if no event or IT mode is selected */
      __HAL_PWR_PVM2_EXTI_DISABLE_EVENT();
 800289c:	4a76      	ldr	r2, [pc, #472]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 800289e:	4b76      	ldr	r3, [pc, #472]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	f023 0310 	bic.w	r3, r3, #16
 80028a6:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_PWR_PVM2_EXTI_DISABLE_IT();
 80028a8:	4a73      	ldr	r2, [pc, #460]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80028aa:	4b73      	ldr	r3, [pc, #460]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	f023 0310 	bic.w	r3, r3, #16
 80028b2:	6213      	str	r3, [r2, #32]
      __HAL_PWR_PVM2_EXTI_DISABLE_FALLING_EDGE();
 80028b4:	4a70      	ldr	r2, [pc, #448]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80028b6:	4b70      	ldr	r3, [pc, #448]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80028b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ba:	f023 0310 	bic.w	r3, r3, #16
 80028be:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_PWR_PVM2_EXTI_DISABLE_RISING_EDGE();
 80028c0:	4a6d      	ldr	r2, [pc, #436]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80028c2:	4b6d      	ldr	r3, [pc, #436]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80028c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c6:	f023 0310 	bic.w	r3, r3, #16
 80028ca:	6293      	str	r3, [r2, #40]	; 0x28

      /* Configure interrupt mode */
      if((sConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d005      	beq.n	80028e4 <HAL_PWREx_ConfigPVM+0x108>
      {
        __HAL_PWR_PVM2_EXTI_ENABLE_IT();
 80028d8:	4a67      	ldr	r2, [pc, #412]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80028da:	4b67      	ldr	r3, [pc, #412]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	f043 0310 	orr.w	r3, r3, #16
 80028e2:	6213      	str	r3, [r2, #32]
      }

      /* Configure event mode */
      if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d005      	beq.n	80028fc <HAL_PWREx_ConfigPVM+0x120>
      {
        __HAL_PWR_PVM2_EXTI_ENABLE_EVENT();
 80028f0:	4a61      	ldr	r2, [pc, #388]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80028f2:	4b61      	ldr	r3, [pc, #388]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	f043 0310 	orr.w	r3, r3, #16
 80028fa:	6253      	str	r3, [r2, #36]	; 0x24
      }

      /* Configure the edge */
      if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <HAL_PWREx_ConfigPVM+0x138>
      {
        __HAL_PWR_PVM2_EXTI_ENABLE_RISING_EDGE();
 8002908:	4a5b      	ldr	r2, [pc, #364]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 800290a:	4b5b      	ldr	r3, [pc, #364]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 800290c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290e:	f043 0310 	orr.w	r3, r3, #16
 8002912:	6293      	str	r3, [r2, #40]	; 0x28
      }

      if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 809e 	beq.w	8002a5e <HAL_PWREx_ConfigPVM+0x282>
      {
        __HAL_PWR_PVM2_EXTI_ENABLE_FALLING_EDGE();
 8002922:	4a55      	ldr	r2, [pc, #340]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002924:	4b54      	ldr	r3, [pc, #336]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002928:	f043 0310 	orr.w	r3, r3, #16
 800292c:	62d3      	str	r3, [r2, #44]	; 0x2c
      }
      break;
 800292e:	e096      	b.n	8002a5e <HAL_PWREx_ConfigPVM+0x282>
#endif /* PWR_CR2_PVME2 */

    case PWR_PVM_3:
      /* Clear any previous config. Keep it clear if no event or IT mode is selected */
      __HAL_PWR_PVM3_EXTI_DISABLE_EVENT();
 8002930:	4a51      	ldr	r2, [pc, #324]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002932:	4b51      	ldr	r3, [pc, #324]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	f023 0320 	bic.w	r3, r3, #32
 800293a:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_PWR_PVM3_EXTI_DISABLE_IT();
 800293c:	4a4e      	ldr	r2, [pc, #312]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 800293e:	4b4e      	ldr	r3, [pc, #312]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	f023 0320 	bic.w	r3, r3, #32
 8002946:	6213      	str	r3, [r2, #32]
      __HAL_PWR_PVM3_EXTI_DISABLE_FALLING_EDGE();
 8002948:	4a4b      	ldr	r2, [pc, #300]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 800294a:	4b4b      	ldr	r3, [pc, #300]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 800294c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294e:	f023 0320 	bic.w	r3, r3, #32
 8002952:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_PWR_PVM3_EXTI_DISABLE_RISING_EDGE();
 8002954:	4a48      	ldr	r2, [pc, #288]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002956:	4b48      	ldr	r3, [pc, #288]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295a:	f023 0320 	bic.w	r3, r3, #32
 800295e:	6293      	str	r3, [r2, #40]	; 0x28

      /* Configure interrupt mode */
      if((sConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <HAL_PWREx_ConfigPVM+0x19c>
      {
        __HAL_PWR_PVM3_EXTI_ENABLE_IT();
 800296c:	4a42      	ldr	r2, [pc, #264]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 800296e:	4b42      	ldr	r3, [pc, #264]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	f043 0320 	orr.w	r3, r3, #32
 8002976:	6213      	str	r3, [r2, #32]
      }

      /* Configure event mode */
      if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_PWREx_ConfigPVM+0x1b4>
      {
        __HAL_PWR_PVM3_EXTI_ENABLE_EVENT();
 8002984:	4a3c      	ldr	r2, [pc, #240]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002986:	4b3c      	ldr	r3, [pc, #240]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	f043 0320 	orr.w	r3, r3, #32
 800298e:	6253      	str	r3, [r2, #36]	; 0x24
      }

      /* Configure the edge */
      if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b00      	cmp	r3, #0
 800299a:	d005      	beq.n	80029a8 <HAL_PWREx_ConfigPVM+0x1cc>
      {
        __HAL_PWR_PVM3_EXTI_ENABLE_RISING_EDGE();
 800299c:	4a36      	ldr	r2, [pc, #216]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 800299e:	4b36      	ldr	r3, [pc, #216]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80029a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a2:	f043 0320 	orr.w	r3, r3, #32
 80029a6:	6293      	str	r3, [r2, #40]	; 0x28
      }

      if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d056      	beq.n	8002a62 <HAL_PWREx_ConfigPVM+0x286>
      {
        __HAL_PWR_PVM3_EXTI_ENABLE_FALLING_EDGE();
 80029b4:	4a30      	ldr	r2, [pc, #192]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80029b6:	4b30      	ldr	r3, [pc, #192]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80029b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ba:	f043 0320 	orr.w	r3, r3, #32
 80029be:	62d3      	str	r3, [r2, #44]	; 0x2c
      }
      break;
 80029c0:	e04f      	b.n	8002a62 <HAL_PWREx_ConfigPVM+0x286>

    case PWR_PVM_4:
      /* Clear any previous config. Keep it clear if no event or IT mode is selected */
      __HAL_PWR_PVM4_EXTI_DISABLE_EVENT();
 80029c2:	4a2d      	ldr	r2, [pc, #180]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80029c4:	4b2c      	ldr	r3, [pc, #176]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029cc:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_PWR_PVM4_EXTI_DISABLE_IT();
 80029ce:	4a2a      	ldr	r2, [pc, #168]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80029d0:	4b29      	ldr	r3, [pc, #164]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029d8:	6213      	str	r3, [r2, #32]
      __HAL_PWR_PVM4_EXTI_DISABLE_FALLING_EDGE();
 80029da:	4a27      	ldr	r2, [pc, #156]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80029dc:	4b26      	ldr	r3, [pc, #152]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80029de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029e4:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_PWR_PVM4_EXTI_DISABLE_RISING_EDGE();
 80029e6:	4a24      	ldr	r2, [pc, #144]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80029e8:	4b23      	ldr	r3, [pc, #140]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80029ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029f0:	6293      	str	r3, [r2, #40]	; 0x28

      /* Configure interrupt mode */
      if((sConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d005      	beq.n	8002a0a <HAL_PWREx_ConfigPVM+0x22e>
      {
        __HAL_PWR_PVM4_EXTI_ENABLE_IT();
 80029fe:	4a1e      	ldr	r2, [pc, #120]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002a00:	4b1d      	ldr	r3, [pc, #116]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a08:	6213      	str	r3, [r2, #32]
      }

      /* Configure event mode */
      if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d005      	beq.n	8002a22 <HAL_PWREx_ConfigPVM+0x246>
      {
        __HAL_PWR_PVM4_EXTI_ENABLE_EVENT();
 8002a16:	4a18      	ldr	r2, [pc, #96]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002a18:	4b17      	ldr	r3, [pc, #92]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a20:	6253      	str	r3, [r2, #36]	; 0x24
      }

      /* Configure the edge */
      if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d005      	beq.n	8002a3a <HAL_PWREx_ConfigPVM+0x25e>
      {
        __HAL_PWR_PVM4_EXTI_ENABLE_RISING_EDGE();
 8002a2e:	4a12      	ldr	r2, [pc, #72]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002a30:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a38:	6293      	str	r3, [r2, #40]	; 0x28
      }

      if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00f      	beq.n	8002a66 <HAL_PWREx_ConfigPVM+0x28a>
      {
        __HAL_PWR_PVM4_EXTI_ENABLE_FALLING_EDGE();
 8002a46:	4a0c      	ldr	r2, [pc, #48]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a50:	62d3      	str	r3, [r2, #44]	; 0x2c
      }
      break;
 8002a52:	e008      	b.n	8002a66 <HAL_PWREx_ConfigPVM+0x28a>

    default:
      status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]
      break;
 8002a58:	e006      	b.n	8002a68 <HAL_PWREx_ConfigPVM+0x28c>
      break;
 8002a5a:	bf00      	nop
 8002a5c:	e004      	b.n	8002a68 <HAL_PWREx_ConfigPVM+0x28c>
      break;
 8002a5e:	bf00      	nop
 8002a60:	e002      	b.n	8002a68 <HAL_PWREx_ConfigPVM+0x28c>
      break;
 8002a62:	bf00      	nop
 8002a64:	e000      	b.n	8002a68 <HAL_PWREx_ConfigPVM+0x28c>
      break;
 8002a66:	bf00      	nop
  }

  return status;
 8002a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40010400 	.word	0x40010400

08002a7c <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8002a80:	4a05      	ldr	r2, [pc, #20]	; (8002a98 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8002a82:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a8a:	6013      	str	r3, [r2, #0]
}
 8002a8c:	bf00      	nop
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	40007000 	.word	0x40007000

08002a9c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8002aa2:	4a17      	ldr	r2, [pc, #92]	; (8002b00 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8002aa4:	4b16      	ldr	r3, [pc, #88]	; (8002b00 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002aac:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002aae:	4b15      	ldr	r3, [pc, #84]	; (8002b04 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2232      	movs	r2, #50	; 0x32
 8002ab4:	fb02 f303 	mul.w	r3, r2, r3
 8002ab8:	4a13      	ldr	r2, [pc, #76]	; (8002b08 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8002aba:	fba2 2303 	umull	r2, r3, r2, r3
 8002abe:	0c9b      	lsrs	r3, r3, #18
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8002ac4:	e002      	b.n	8002acc <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8002acc:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ad8:	d102      	bne.n	8002ae0 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1f2      	bne.n	8002ac6 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8002ae0:	4b07      	ldr	r3, [pc, #28]	; (8002b00 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aec:	d101      	bne.n	8002af2 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e000      	b.n	8002af4 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	40007000 	.word	0x40007000
 8002b04:	20000008 	.word	0x20000008
 8002b08:	431bde83 	.word	0x431bde83

08002b0c <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 8002b16:	4a10      	ldr	r2, [pc, #64]	; (8002b58 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8002b18:	4b0f      	ldr	r3, [pc, #60]	; (8002b58 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f023 0307 	bic.w	r3, r3, #7
 8002b20:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002b22:	4a0e      	ldr	r2, [pc, #56]	; (8002b5c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002b24:	4b0d      	ldr	r3, [pc, #52]	; (8002b5c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	f043 0304 	orr.w	r3, r3, #4
 8002b2c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002b34:	bf30      	wfi
 8002b36:	e002      	b.n	8002b3e <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002b38:	bf40      	sev
    __WFE();
 8002b3a:	bf20      	wfe
    __WFE();
 8002b3c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002b3e:	4a07      	ldr	r2, [pc, #28]	; (8002b5c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002b40:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	f023 0304 	bic.w	r3, r3, #4
 8002b48:	6113      	str	r3, [r2, #16]
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40007000 	.word	0x40007000
 8002b5c:	e000ed00 	.word	0xe000ed00

08002b60 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 8002b6a:	4a11      	ldr	r2, [pc, #68]	; (8002bb0 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8002b6c:	4b10      	ldr	r3, [pc, #64]	; (8002bb0 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f023 0307 	bic.w	r3, r3, #7
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002b7a:	4a0e      	ldr	r2, [pc, #56]	; (8002bb4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002b7c:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	f043 0304 	orr.w	r3, r3, #4
 8002b84:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002b8c:	bf30      	wfi
 8002b8e:	e002      	b.n	8002b96 <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002b90:	bf40      	sev
    __WFE();
 8002b92:	bf20      	wfe
    __WFE();
 8002b94:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002b96:	4a07      	ldr	r2, [pc, #28]	; (8002bb4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002b98:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	f023 0304 	bic.w	r3, r3, #4
 8002ba0:	6113      	str	r3, [r2, #16]
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40007000 	.word	0x40007000
 8002bb4:	e000ed00 	.word	0xe000ed00

08002bb8 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 8002bc2:	4a11      	ldr	r2, [pc, #68]	; (8002c08 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002bc4:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f023 0307 	bic.w	r3, r3, #7
 8002bcc:	f043 0302 	orr.w	r3, r3, #2
 8002bd0:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002bd2:	4a0e      	ldr	r2, [pc, #56]	; (8002c0c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8002bd4:	4b0d      	ldr	r3, [pc, #52]	; (8002c0c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	f043 0304 	orr.w	r3, r3, #4
 8002bdc:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d101      	bne.n	8002be8 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002be4:	bf30      	wfi
 8002be6:	e002      	b.n	8002bee <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002be8:	bf40      	sev
    __WFE();
 8002bea:	bf20      	wfe
    __WFE();
 8002bec:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002bee:	4a07      	ldr	r2, [pc, #28]	; (8002c0c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8002bf0:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	f023 0304 	bic.w	r3, r3, #4
 8002bf8:	6113      	str	r3, [r2, #16]
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	40007000 	.word	0x40007000
 8002c0c:	e000ed00 	.word	0xe000ed00

08002c10 <HAL_PWREx_EnterSHUTDOWNMode>:
  *        The BOR is not available.
  * @note  The I/Os can be configured either with a pull-up or pull-down or can be kept in analog state.
  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0

  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_SHUTDOWN);
 8002c14:	4a09      	ldr	r2, [pc, #36]	; (8002c3c <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8002c16:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f023 0307 	bic.w	r3, r3, #7
 8002c1e:	f043 0304 	orr.w	r3, r3, #4
 8002c22:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002c24:	4a06      	ldr	r2, [pc, #24]	; (8002c40 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8002c26:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f043 0304 	orr.w	r3, r3, #4
 8002c2e:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8002c30:	bf30      	wfi
}
 8002c32:	bf00      	nop
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	40007000 	.word	0x40007000
 8002c40:	e000ed00 	.word	0xe000ed00

08002c44 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0x0U)
 8002c48:	4b1c      	ldr	r3, [pc, #112]	; (8002cbc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d005      	beq.n	8002c60 <HAL_PWREx_PVD_PVM_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8002c54:	f7ff f9e6 	bl	8002024 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8002c58:	4b18      	ldr	r3, [pc, #96]	; (8002cbc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002c5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c5e:	615a      	str	r2, [r3, #20]
  }
  /* Next, successively check PVMx exti flags */
#if defined(PWR_CR2_PVME1)
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0x0U)
 8002c60:	4b16      	ldr	r3, [pc, #88]	; (8002cbc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c64:	f003 0308 	and.w	r3, r3, #8
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d004      	beq.n	8002c76 <HAL_PWREx_PVD_PVM_IRQHandler+0x32>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 8002c6c:	f000 f828 	bl	8002cc0 <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 8002c70:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002c72:	2208      	movs	r2, #8
 8002c74:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME1 */
#if defined(PWR_CR2_PVME2)
  if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0x0U)
 8002c76:	4b11      	ldr	r3, [pc, #68]	; (8002cbc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7a:	f003 0310 	and.w	r3, r3, #16
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d004      	beq.n	8002c8c <HAL_PWREx_PVD_PVM_IRQHandler+0x48>
  {
    /* PWR PVM2 interrupt user callback */
    HAL_PWREx_PVM2Callback();
 8002c82:	f000 f824 	bl	8002cce <HAL_PWREx_PVM2Callback>

    /* Clear PVM2 exti pending bit */
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
 8002c86:	4b0d      	ldr	r3, [pc, #52]	; (8002cbc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002c88:	2210      	movs	r2, #16
 8002c8a:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME2 */
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0x0U)
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c90:	f003 0320 	and.w	r3, r3, #32
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d004      	beq.n	8002ca2 <HAL_PWREx_PVD_PVM_IRQHandler+0x5e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 8002c98:	f000 f820 	bl	8002cdc <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 8002c9c:	4b07      	ldr	r3, [pc, #28]	; (8002cbc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0x0U)
 8002ca2:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d004      	beq.n	8002cb8 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>
  {
    /* PWR PVM4 interrupt user callback */
    HAL_PWREx_PVM4Callback();
 8002cae:	f000 f81c 	bl	8002cea <HAL_PWREx_PVM4Callback>

    /* Clear PVM4 exti pending bit */
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 8002cb2:	4b02      	ldr	r3, [pc, #8]	; (8002cbc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002cb4:	2240      	movs	r2, #64	; 0x40
 8002cb6:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8002cb8:	bf00      	nop
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40010400 	.word	0x40010400

08002cc0 <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <HAL_PWREx_PVM2Callback>:
/**
  * @brief PWR PVM2 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM2Callback(void)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM2Callback() API can be implemented in the user file
   */
}
 8002cd2:	bf00      	nop
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <HAL_PWREx_PVM4Callback>:
/**
  * @brief PWR PVM4 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM4Callback(void)
{
 8002cea:	b480      	push	{r7}
 8002cec:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM4Callback() API can be implemented in the user file
   */
}
 8002cee:	bf00      	nop
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_RCC_DeInit>:
  *            - Peripheral clock sources
  *            - LSI, LSE and RTC clocks (Backup domain)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Reset to default System clock */
  /* Set MSION bit */
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002cfe:	4a4a      	ldr	r2, [pc, #296]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002d00:	4b49      	ldr	r3, [pc, #292]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	6013      	str	r3, [r2, #0]

  /* Insure MSIRDY bit is set before writing default MSIRANGE value */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8002d0a:	f7fd fb03 	bl	8000314 <HAL_GetTick>
 8002d0e:	6078      	str	r0, [r7, #4]

  /* Wait till MSI is ready */
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_DeInit+0x2c>
  {
    if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d12:	f7fd faff 	bl	8000314 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e07c      	b.n	8002e1e <HAL_RCC_DeInit+0x126>
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d24:	4b40      	ldr	r3, [pc, #256]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0f0      	beq.n	8002d12 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set MSIRANGE default value */
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, RCC_MSIRANGE_6);
 8002d30:	4a3d      	ldr	r2, [pc, #244]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002d32:	4b3d      	ldr	r3, [pc, #244]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d3a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register (MSI is selected as system clock source) */
  CLEAR_REG(RCC->CFGR);
 8002d40:	4b39      	ldr	r3, [pc, #228]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	609a      	str	r2, [r3, #8]

  /* Update the SystemCoreClock global variable for MSI as system clock source */
  SystemCoreClock = MSI_VALUE;
 8002d46:	4b39      	ldr	r3, [pc, #228]	; (8002e2c <HAL_RCC_DeInit+0x134>)
 8002d48:	4a39      	ldr	r2, [pc, #228]	; (8002e30 <HAL_RCC_DeInit+0x138>)
 8002d4a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8002d4c:	4b39      	ldr	r3, [pc, #228]	; (8002e34 <HAL_RCC_DeInit+0x13c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fd fa93 	bl	800027c <HAL_InitTick>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCC_DeInit+0x68>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e05e      	b.n	8002e1e <HAL_RCC_DeInit+0x126>
  }

  /* Insure MSI selected as system clock source */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8002d60:	f7fd fad8 	bl	8000314 <HAL_GetTick>
 8002d64:	6078      	str	r0, [r7, #4]

  /* Wait till system clock source is ready */
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 8002d66:	e00a      	b.n	8002d7e <HAL_RCC_DeInit+0x86>
  {
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d68:	f7fd fad4 	bl	8000314 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_DeInit+0x86>
    {
      return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e04f      	b.n	8002e1e <HAL_RCC_DeInit+0x126>
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 8002d7e:	4b2a      	ldr	r3, [pc, #168]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 030c 	and.w	r3, r3, #12
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1ee      	bne.n	8002d68 <HAL_RCC_DeInit+0x70>
  }

  /* Reset HSION, HSIKERON, HSIASFS, HSEON, HSECSSON, PLLON, PLLSAIxON bits */
#if defined(RCC_PLLSAI2_SUPPORT)

  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON | RCC_CR_PLLSAI2ON);
 8002d8a:	4927      	ldr	r1, [pc, #156]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002d8c:	4b26      	ldr	r3, [pc, #152]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	4b29      	ldr	r3, [pc, #164]	; (8002e38 <HAL_RCC_DeInit+0x140>)
 8002d92:	4013      	ands	r3, r2
 8002d94:	600b      	str	r3, [r1, #0]

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Insure PLLRDY, PLLSAI1RDY and PLLSAI2RDY (if present) are reset */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8002d96:	f7fd fabd 	bl	8000314 <HAL_GetTick>
 8002d9a:	6078      	str	r0, [r7, #4]

#if defined(RCC_PLLSAI2_SUPPORT)

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_DeInit+0xb8>

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)

#endif
  {
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d9e:	f7fd fab9 	bl	8000314 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e036      	b.n	8002e1e <HAL_RCC_DeInit+0x126>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)
 8002db0:	4b1d      	ldr	r3, [pc, #116]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 5328 	and.w	r3, r3, #704643072	; 0x2a000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1f0      	bne.n	8002d9e <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Reset PLLCFGR register */
  CLEAR_REG(RCC->PLLCFGR);
 8002dbc:	4b1a      	ldr	r3, [pc, #104]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN_4 );
 8002dc2:	4a19      	ldr	r2, [pc, #100]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002dc4:	4b18      	ldr	r3, [pc, #96]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002dcc:	60d3      	str	r3, [r2, #12]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Reset PLLSAI1CFGR register */
  CLEAR_REG(RCC->PLLSAI1CFGR);
 8002dce:	4b16      	ldr	r3, [pc, #88]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->PLLSAI1CFGR,  RCC_PLLSAI1CFGR_PLLSAI1N_4 );
 8002dd4:	4a14      	ldr	r2, [pc, #80]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002dd6:	4b14      	ldr	r3, [pc, #80]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002dde:	6113      	str	r3, [r2, #16]
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(RCC_PLLSAI2_SUPPORT)

  /* Reset PLLSAI2CFGR register */
  CLEAR_REG(RCC->PLLSAI2CFGR);
 8002de0:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	615a      	str	r2, [r3, #20]
  SET_BIT(RCC->PLLSAI2CFGR,  RCC_PLLSAI2CFGR_PLLSAI2N_4 );
 8002de6:	4a10      	ldr	r2, [pc, #64]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002de8:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002df0:	6153      	str	r3, [r2, #20]

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002df2:	4a0d      	ldr	r2, [pc, #52]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002df4:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dfc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8002dfe:	4b0a      	ldr	r3, [pc, #40]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8002e04:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002e06:	f04f 32ff 	mov.w	r2, #4294967295
 8002e0a:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002e0c:	4a06      	ldr	r2, [pc, #24]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002e0e:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	20000008 	.word	0x20000008
 8002e30:	003d0900 	.word	0x003d0900
 8002e34:	20000000 	.word	0x20000000
 8002e38:	eafef4ff 	.word	0xeafef4ff

08002e3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e39d      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e4e:	4ba4      	ldr	r3, [pc, #656]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 030c 	and.w	r3, r3, #12
 8002e56:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e58:	4ba1      	ldr	r3, [pc, #644]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0310 	and.w	r3, r3, #16
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 80e1 	beq.w	8003032 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d007      	beq.n	8002e86 <HAL_RCC_OscConfig+0x4a>
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	2b0c      	cmp	r3, #12
 8002e7a:	f040 8088 	bne.w	8002f8e <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	f040 8084 	bne.w	8002f8e <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e86:	4b96      	ldr	r3, [pc, #600]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d005      	beq.n	8002e9e <HAL_RCC_OscConfig+0x62>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e375      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a1a      	ldr	r2, [r3, #32]
 8002ea2:	4b8f      	ldr	r3, [pc, #572]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d004      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x7c>
 8002eae:	4b8c      	ldr	r3, [pc, #560]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eb6:	e005      	b.n	8002ec4 <HAL_RCC_OscConfig+0x88>
 8002eb8:	4b89      	ldr	r3, [pc, #548]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ebe:	091b      	lsrs	r3, r3, #4
 8002ec0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d923      	bls.n	8002f10 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 fe60 	bl	8003b92 <RCC_SetFlashLatencyFromMSIRange>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e356      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002edc:	4a80      	ldr	r2, [pc, #512]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002ede:	4b80      	ldr	r3, [pc, #512]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f043 0308 	orr.w	r3, r3, #8
 8002ee6:	6013      	str	r3, [r2, #0]
 8002ee8:	497d      	ldr	r1, [pc, #500]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002eea:	4b7d      	ldr	r3, [pc, #500]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002efa:	4979      	ldr	r1, [pc, #484]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002efc:	4b78      	ldr	r3, [pc, #480]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	021b      	lsls	r3, r3, #8
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	604b      	str	r3, [r1, #4]
 8002f0e:	e022      	b.n	8002f56 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f10:	4a73      	ldr	r2, [pc, #460]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002f12:	4b73      	ldr	r3, [pc, #460]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f043 0308 	orr.w	r3, r3, #8
 8002f1a:	6013      	str	r3, [r2, #0]
 8002f1c:	4970      	ldr	r1, [pc, #448]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002f1e:	4b70      	ldr	r3, [pc, #448]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f2e:	496c      	ldr	r1, [pc, #432]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002f30:	4b6b      	ldr	r3, [pc, #428]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	021b      	lsls	r3, r3, #8
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 fe23 	bl	8003b92 <RCC_SetFlashLatencyFromMSIRange>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e319      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f56:	f000 fc37 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 8002f5a:	4601      	mov	r1, r0
 8002f5c:	4b60      	ldr	r3, [pc, #384]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	091b      	lsrs	r3, r3, #4
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	4a5f      	ldr	r2, [pc, #380]	; (80030e4 <HAL_RCC_OscConfig+0x2a8>)
 8002f68:	5cd3      	ldrb	r3, [r2, r3]
 8002f6a:	f003 031f 	and.w	r3, r3, #31
 8002f6e:	fa21 f303 	lsr.w	r3, r1, r3
 8002f72:	4a5d      	ldr	r2, [pc, #372]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002f74:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f76:	4b5d      	ldr	r3, [pc, #372]	; (80030ec <HAL_RCC_OscConfig+0x2b0>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fd f97e 	bl	800027c <HAL_InitTick>
 8002f80:	4603      	mov	r3, r0
 8002f82:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d052      	beq.n	8003030 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
 8002f8c:	e2fd      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d032      	beq.n	8002ffc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f96:	4a52      	ldr	r2, [pc, #328]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002f98:	4b51      	ldr	r3, [pc, #324]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fa2:	f7fd f9b7 	bl	8000314 <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002faa:	f7fd f9b3 	bl	8000314 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e2e6      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fbc:	4b48      	ldr	r3, [pc, #288]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0f0      	beq.n	8002faa <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fc8:	4a45      	ldr	r2, [pc, #276]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002fca:	4b45      	ldr	r3, [pc, #276]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f043 0308 	orr.w	r3, r3, #8
 8002fd2:	6013      	str	r3, [r2, #0]
 8002fd4:	4942      	ldr	r1, [pc, #264]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002fd6:	4b42      	ldr	r3, [pc, #264]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fe6:	493e      	ldr	r1, [pc, #248]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002fe8:	4b3d      	ldr	r3, [pc, #244]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	021b      	lsls	r3, r3, #8
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	604b      	str	r3, [r1, #4]
 8002ffa:	e01a      	b.n	8003032 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ffc:	4a38      	ldr	r2, [pc, #224]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002ffe:	4b38      	ldr	r3, [pc, #224]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f023 0301 	bic.w	r3, r3, #1
 8003006:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003008:	f7fd f984 	bl	8000314 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003010:	f7fd f980 	bl	8000314 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e2b3      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003022:	4b2f      	ldr	r3, [pc, #188]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f0      	bne.n	8003010 <HAL_RCC_OscConfig+0x1d4>
 800302e:	e000      	b.n	8003032 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003030:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d074      	beq.n	8003128 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	2b08      	cmp	r3, #8
 8003042:	d005      	beq.n	8003050 <HAL_RCC_OscConfig+0x214>
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	2b0c      	cmp	r3, #12
 8003048:	d10e      	bne.n	8003068 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2b03      	cmp	r3, #3
 800304e:	d10b      	bne.n	8003068 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003050:	4b23      	ldr	r3, [pc, #140]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d064      	beq.n	8003126 <HAL_RCC_OscConfig+0x2ea>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d160      	bne.n	8003126 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e290      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003070:	d106      	bne.n	8003080 <HAL_RCC_OscConfig+0x244>
 8003072:	4a1b      	ldr	r2, [pc, #108]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8003074:	4b1a      	ldr	r3, [pc, #104]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	e01d      	b.n	80030bc <HAL_RCC_OscConfig+0x280>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003088:	d10c      	bne.n	80030a4 <HAL_RCC_OscConfig+0x268>
 800308a:	4a15      	ldr	r2, [pc, #84]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 800308c:	4b14      	ldr	r3, [pc, #80]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	4a12      	ldr	r2, [pc, #72]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8003098:	4b11      	ldr	r3, [pc, #68]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	e00b      	b.n	80030bc <HAL_RCC_OscConfig+0x280>
 80030a4:	4a0e      	ldr	r2, [pc, #56]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 80030a6:	4b0e      	ldr	r3, [pc, #56]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	4a0b      	ldr	r2, [pc, #44]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 80030b2:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d01c      	beq.n	80030fe <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c4:	f7fd f926 	bl	8000314 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030ca:	e011      	b.n	80030f0 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030cc:	f7fd f922 	bl	8000314 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b64      	cmp	r3, #100	; 0x64
 80030d8:	d90a      	bls.n	80030f0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e255      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
 80030de:	bf00      	nop
 80030e0:	40021000 	.word	0x40021000
 80030e4:	0800f5d0 	.word	0x0800f5d0
 80030e8:	20000008 	.word	0x20000008
 80030ec:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030f0:	4bae      	ldr	r3, [pc, #696]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0e7      	beq.n	80030cc <HAL_RCC_OscConfig+0x290>
 80030fc:	e014      	b.n	8003128 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fe:	f7fd f909 	bl	8000314 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003106:	f7fd f905 	bl	8000314 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b64      	cmp	r3, #100	; 0x64
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e238      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003118:	4ba4      	ldr	r3, [pc, #656]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1f0      	bne.n	8003106 <HAL_RCC_OscConfig+0x2ca>
 8003124:	e000      	b.n	8003128 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003126:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d060      	beq.n	80031f6 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	2b04      	cmp	r3, #4
 8003138:	d005      	beq.n	8003146 <HAL_RCC_OscConfig+0x30a>
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	2b0c      	cmp	r3, #12
 800313e:	d119      	bne.n	8003174 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d116      	bne.n	8003174 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003146:	4b99      	ldr	r3, [pc, #612]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <HAL_RCC_OscConfig+0x322>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e215      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315e:	4993      	ldr	r1, [pc, #588]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 8003160:	4b92      	ldr	r3, [pc, #584]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	061b      	lsls	r3, r3, #24
 800316e:	4313      	orrs	r3, r2
 8003170:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003172:	e040      	b.n	80031f6 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d023      	beq.n	80031c4 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800317c:	4a8b      	ldr	r2, [pc, #556]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 800317e:	4b8b      	ldr	r3, [pc, #556]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003188:	f7fd f8c4 	bl	8000314 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003190:	f7fd f8c0 	bl	8000314 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e1f3      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031a2:	4b82      	ldr	r3, [pc, #520]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0f0      	beq.n	8003190 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ae:	497f      	ldr	r1, [pc, #508]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 80031b0:	4b7e      	ldr	r3, [pc, #504]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	061b      	lsls	r3, r3, #24
 80031be:	4313      	orrs	r3, r2
 80031c0:	604b      	str	r3, [r1, #4]
 80031c2:	e018      	b.n	80031f6 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031c4:	4a79      	ldr	r2, [pc, #484]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 80031c6:	4b79      	ldr	r3, [pc, #484]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d0:	f7fd f8a0 	bl	8000314 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031d8:	f7fd f89c 	bl	8000314 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e1cf      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031ea:	4b70      	ldr	r3, [pc, #448]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f0      	bne.n	80031d8 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d03c      	beq.n	800327c <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d01c      	beq.n	8003244 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800320a:	4a68      	ldr	r2, [pc, #416]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 800320c:	4b67      	ldr	r3, [pc, #412]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 800320e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003212:	f043 0301 	orr.w	r3, r3, #1
 8003216:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321a:	f7fd f87b 	bl	8000314 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003222:	f7fd f877 	bl	8000314 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e1aa      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003234:	4b5d      	ldr	r3, [pc, #372]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 8003236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0ef      	beq.n	8003222 <HAL_RCC_OscConfig+0x3e6>
 8003242:	e01b      	b.n	800327c <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003244:	4a59      	ldr	r2, [pc, #356]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 8003246:	4b59      	ldr	r3, [pc, #356]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 8003248:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800324c:	f023 0301 	bic.w	r3, r3, #1
 8003250:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003254:	f7fd f85e 	bl	8000314 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800325c:	f7fd f85a 	bl	8000314 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e18d      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800326e:	4b4f      	ldr	r3, [pc, #316]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 8003270:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1ef      	bne.n	800325c <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 80a5 	beq.w	80033d4 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800328a:	2300      	movs	r3, #0
 800328c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800328e:	4b47      	ldr	r3, [pc, #284]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 8003290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10d      	bne.n	80032b6 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800329a:	4a44      	ldr	r2, [pc, #272]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 800329c:	4b43      	ldr	r3, [pc, #268]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 800329e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a4:	6593      	str	r3, [r2, #88]	; 0x58
 80032a6:	4b41      	ldr	r3, [pc, #260]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 80032a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ae:	60bb      	str	r3, [r7, #8]
 80032b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032b2:	2301      	movs	r3, #1
 80032b4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032b6:	4b3e      	ldr	r3, [pc, #248]	; (80033b0 <HAL_RCC_OscConfig+0x574>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d118      	bne.n	80032f4 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032c2:	4a3b      	ldr	r2, [pc, #236]	; (80033b0 <HAL_RCC_OscConfig+0x574>)
 80032c4:	4b3a      	ldr	r3, [pc, #232]	; (80033b0 <HAL_RCC_OscConfig+0x574>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ce:	f7fd f821 	bl	8000314 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d6:	f7fd f81d 	bl	8000314 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e150      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032e8:	4b31      	ldr	r3, [pc, #196]	; (80033b0 <HAL_RCC_OscConfig+0x574>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0f0      	beq.n	80032d6 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d108      	bne.n	800330e <HAL_RCC_OscConfig+0x4d2>
 80032fc:	4a2b      	ldr	r2, [pc, #172]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 80032fe:	4b2b      	ldr	r3, [pc, #172]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 8003300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800330c:	e024      	b.n	8003358 <HAL_RCC_OscConfig+0x51c>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2b05      	cmp	r3, #5
 8003314:	d110      	bne.n	8003338 <HAL_RCC_OscConfig+0x4fc>
 8003316:	4a25      	ldr	r2, [pc, #148]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 8003318:	4b24      	ldr	r3, [pc, #144]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 800331a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331e:	f043 0304 	orr.w	r3, r3, #4
 8003322:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003326:	4a21      	ldr	r2, [pc, #132]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 8003328:	4b20      	ldr	r3, [pc, #128]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 800332a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332e:	f043 0301 	orr.w	r3, r3, #1
 8003332:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003336:	e00f      	b.n	8003358 <HAL_RCC_OscConfig+0x51c>
 8003338:	4a1c      	ldr	r2, [pc, #112]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 800333a:	4b1c      	ldr	r3, [pc, #112]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 800333c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003340:	f023 0301 	bic.w	r3, r3, #1
 8003344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003348:	4a18      	ldr	r2, [pc, #96]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 800334a:	4b18      	ldr	r3, [pc, #96]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 800334c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003350:	f023 0304 	bic.w	r3, r3, #4
 8003354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d016      	beq.n	800338e <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003360:	f7fc ffd8 	bl	8000314 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003366:	e00a      	b.n	800337e <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003368:	f7fc ffd4 	bl	8000314 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	f241 3288 	movw	r2, #5000	; 0x1388
 8003376:	4293      	cmp	r3, r2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e105      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800337e:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 8003380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0ed      	beq.n	8003368 <HAL_RCC_OscConfig+0x52c>
 800338c:	e019      	b.n	80033c2 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800338e:	f7fc ffc1 	bl	8000314 <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003394:	e00e      	b.n	80033b4 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003396:	f7fc ffbd 	bl	8000314 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d905      	bls.n	80033b4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e0ee      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
 80033ac:	40021000 	.word	0x40021000
 80033b0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033b4:	4b77      	ldr	r3, [pc, #476]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 80033b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1e9      	bne.n	8003396 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033c2:	7ffb      	ldrb	r3, [r7, #31]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d105      	bne.n	80033d4 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033c8:	4a72      	ldr	r2, [pc, #456]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 80033ca:	4b72      	ldr	r3, [pc, #456]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 80033cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 80d5 	beq.w	8003588 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	2b0c      	cmp	r3, #12
 80033e2:	f000 808e 	beq.w	8003502 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d15b      	bne.n	80034a6 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ee:	4a69      	ldr	r2, [pc, #420]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 80033f0:	4b68      	ldr	r3, [pc, #416]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fa:	f7fc ff8b 	bl	8000314 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003402:	f7fc ff87 	bl	8000314 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e0ba      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003414:	4b5f      	ldr	r3, [pc, #380]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1f0      	bne.n	8003402 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003420:	485c      	ldr	r0, [pc, #368]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 8003422:	4b5c      	ldr	r3, [pc, #368]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	4b5c      	ldr	r3, [pc, #368]	; (8003598 <HAL_RCC_OscConfig+0x75c>)
 8003428:	4013      	ands	r3, r2
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003432:	3a01      	subs	r2, #1
 8003434:	0112      	lsls	r2, r2, #4
 8003436:	4311      	orrs	r1, r2
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800343c:	0212      	lsls	r2, r2, #8
 800343e:	4311      	orrs	r1, r2
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003444:	0852      	lsrs	r2, r2, #1
 8003446:	3a01      	subs	r2, #1
 8003448:	0552      	lsls	r2, r2, #21
 800344a:	4311      	orrs	r1, r2
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003450:	0852      	lsrs	r2, r2, #1
 8003452:	3a01      	subs	r2, #1
 8003454:	0652      	lsls	r2, r2, #25
 8003456:	4311      	orrs	r1, r2
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800345c:	0912      	lsrs	r2, r2, #4
 800345e:	0452      	lsls	r2, r2, #17
 8003460:	430a      	orrs	r2, r1
 8003462:	4313      	orrs	r3, r2
 8003464:	60c3      	str	r3, [r0, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003466:	4a4b      	ldr	r2, [pc, #300]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 8003468:	4b4a      	ldr	r3, [pc, #296]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003470:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003472:	4a48      	ldr	r2, [pc, #288]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 8003474:	4b47      	ldr	r3, [pc, #284]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800347c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347e:	f7fc ff49 	bl	8000314 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003486:	f7fc ff45 	bl	8000314 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e078      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003498:	4b3e      	ldr	r3, [pc, #248]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0f0      	beq.n	8003486 <HAL_RCC_OscConfig+0x64a>
 80034a4:	e070      	b.n	8003588 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034a6:	4a3b      	ldr	r2, [pc, #236]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 80034a8:	4b3a      	ldr	r3, [pc, #232]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034b0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80034b2:	4b38      	ldr	r3, [pc, #224]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d105      	bne.n	80034ca <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80034be:	4a35      	ldr	r2, [pc, #212]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 80034c0:	4b34      	ldr	r3, [pc, #208]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f023 0303 	bic.w	r3, r3, #3
 80034c8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80034ca:	4a32      	ldr	r2, [pc, #200]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 80034cc:	4b31      	ldr	r3, [pc, #196]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80034d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034da:	f7fc ff1b 	bl	8000314 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e2:	f7fc ff17 	bl	8000314 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e04a      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034f4:	4b27      	ldr	r3, [pc, #156]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1f0      	bne.n	80034e2 <HAL_RCC_OscConfig+0x6a6>
 8003500:	e042      	b.n	8003588 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003506:	2b01      	cmp	r3, #1
 8003508:	d101      	bne.n	800350e <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e03d      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800350e:	4b21      	ldr	r3, [pc, #132]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f003 0203 	and.w	r2, r3, #3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351e:	429a      	cmp	r2, r3
 8003520:	d130      	bne.n	8003584 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352c:	3b01      	subs	r3, #1
 800352e:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003530:	429a      	cmp	r2, r3
 8003532:	d127      	bne.n	8003584 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800353e:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003540:	429a      	cmp	r2, r3
 8003542:	d11f      	bne.n	8003584 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800354e:	2a07      	cmp	r2, #7
 8003550:	bf14      	ite	ne
 8003552:	2201      	movne	r2, #1
 8003554:	2200      	moveq	r2, #0
 8003556:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003558:	4293      	cmp	r3, r2
 800355a:	d113      	bne.n	8003584 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003566:	085b      	lsrs	r3, r3, #1
 8003568:	3b01      	subs	r3, #1
 800356a:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800356c:	429a      	cmp	r2, r3
 800356e:	d109      	bne.n	8003584 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	085b      	lsrs	r3, r3, #1
 800357c:	3b01      	subs	r3, #1
 800357e:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003580:	429a      	cmp	r2, r3
 8003582:	d001      	beq.n	8003588 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e000      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3720      	adds	r7, #32
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40021000 	.word	0x40021000
 8003598:	f99d808c 	.word	0xf99d808c

0800359c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e0c8      	b.n	8003742 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035b0:	4b66      	ldr	r3, [pc, #408]	; (800374c <HAL_RCC_ClockConfig+0x1b0>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0207 	and.w	r2, r3, #7
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d210      	bcs.n	80035e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035be:	4963      	ldr	r1, [pc, #396]	; (800374c <HAL_RCC_ClockConfig+0x1b0>)
 80035c0:	4b62      	ldr	r3, [pc, #392]	; (800374c <HAL_RCC_ClockConfig+0x1b0>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f023 0207 	bic.w	r2, r3, #7
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ce:	4b5f      	ldr	r3, [pc, #380]	; (800374c <HAL_RCC_ClockConfig+0x1b0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0207 	and.w	r2, r3, #7
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d001      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e0b0      	b.n	8003742 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d04c      	beq.n	8003686 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b03      	cmp	r3, #3
 80035f2:	d107      	bne.n	8003604 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035f4:	4b56      	ldr	r3, [pc, #344]	; (8003750 <HAL_RCC_ClockConfig+0x1b4>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d121      	bne.n	8003644 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e09e      	b.n	8003742 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b02      	cmp	r3, #2
 800360a:	d107      	bne.n	800361c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800360c:	4b50      	ldr	r3, [pc, #320]	; (8003750 <HAL_RCC_ClockConfig+0x1b4>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d115      	bne.n	8003644 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e092      	b.n	8003742 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d107      	bne.n	8003634 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003624:	4b4a      	ldr	r3, [pc, #296]	; (8003750 <HAL_RCC_ClockConfig+0x1b4>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d109      	bne.n	8003644 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e086      	b.n	8003742 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003634:	4b46      	ldr	r3, [pc, #280]	; (8003750 <HAL_RCC_ClockConfig+0x1b4>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e07e      	b.n	8003742 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003644:	4942      	ldr	r1, [pc, #264]	; (8003750 <HAL_RCC_ClockConfig+0x1b4>)
 8003646:	4b42      	ldr	r3, [pc, #264]	; (8003750 <HAL_RCC_ClockConfig+0x1b4>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f023 0203 	bic.w	r2, r3, #3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	4313      	orrs	r3, r2
 8003654:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003656:	f7fc fe5d 	bl	8000314 <HAL_GetTick>
 800365a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800365c:	e00a      	b.n	8003674 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800365e:	f7fc fe59 	bl	8000314 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	f241 3288 	movw	r2, #5000	; 0x1388
 800366c:	4293      	cmp	r3, r2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e066      	b.n	8003742 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003674:	4b36      	ldr	r3, [pc, #216]	; (8003750 <HAL_RCC_ClockConfig+0x1b4>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f003 020c 	and.w	r2, r3, #12
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	429a      	cmp	r2, r3
 8003684:	d1eb      	bne.n	800365e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d008      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003692:	492f      	ldr	r1, [pc, #188]	; (8003750 <HAL_RCC_ClockConfig+0x1b4>)
 8003694:	4b2e      	ldr	r3, [pc, #184]	; (8003750 <HAL_RCC_ClockConfig+0x1b4>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036a4:	4b29      	ldr	r3, [pc, #164]	; (800374c <HAL_RCC_ClockConfig+0x1b0>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0207 	and.w	r2, r3, #7
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d910      	bls.n	80036d4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b2:	4926      	ldr	r1, [pc, #152]	; (800374c <HAL_RCC_ClockConfig+0x1b0>)
 80036b4:	4b25      	ldr	r3, [pc, #148]	; (800374c <HAL_RCC_ClockConfig+0x1b0>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f023 0207 	bic.w	r2, r3, #7
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	4313      	orrs	r3, r2
 80036c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c2:	4b22      	ldr	r3, [pc, #136]	; (800374c <HAL_RCC_ClockConfig+0x1b0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0207 	and.w	r2, r3, #7
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d001      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e036      	b.n	8003742 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d008      	beq.n	80036f2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036e0:	491b      	ldr	r1, [pc, #108]	; (8003750 <HAL_RCC_ClockConfig+0x1b4>)
 80036e2:	4b1b      	ldr	r3, [pc, #108]	; (8003750 <HAL_RCC_ClockConfig+0x1b4>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d009      	beq.n	8003712 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036fe:	4914      	ldr	r1, [pc, #80]	; (8003750 <HAL_RCC_ClockConfig+0x1b4>)
 8003700:	4b13      	ldr	r3, [pc, #76]	; (8003750 <HAL_RCC_ClockConfig+0x1b4>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	4313      	orrs	r3, r2
 8003710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003712:	f000 f859 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 8003716:	4601      	mov	r1, r0
 8003718:	4b0d      	ldr	r3, [pc, #52]	; (8003750 <HAL_RCC_ClockConfig+0x1b4>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	091b      	lsrs	r3, r3, #4
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	4a0c      	ldr	r2, [pc, #48]	; (8003754 <HAL_RCC_ClockConfig+0x1b8>)
 8003724:	5cd3      	ldrb	r3, [r2, r3]
 8003726:	f003 031f 	and.w	r3, r3, #31
 800372a:	fa21 f303 	lsr.w	r3, r1, r3
 800372e:	4a0a      	ldr	r2, [pc, #40]	; (8003758 <HAL_RCC_ClockConfig+0x1bc>)
 8003730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003732:	4b0a      	ldr	r3, [pc, #40]	; (800375c <HAL_RCC_ClockConfig+0x1c0>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f7fc fda0 	bl	800027c <HAL_InitTick>
 800373c:	4603      	mov	r3, r0
 800373e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003740:	7afb      	ldrb	r3, [r7, #11]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40022000 	.word	0x40022000
 8003750:	40021000 	.word	0x40021000
 8003754:	0800f5d0 	.word	0x0800f5d0
 8003758:	20000008 	.word	0x20000008
 800375c:	20000000 	.word	0x20000000

08003760 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08a      	sub	sp, #40	; 0x28
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 800376c:	4a15      	ldr	r2, [pc, #84]	; (80037c4 <HAL_RCC_MCOConfig+0x64>)
 800376e:	4b15      	ldr	r3, [pc, #84]	; (80037c4 <HAL_RCC_MCOConfig+0x64>)
 8003770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003772:	f043 0301 	orr.w	r3, r3, #1
 8003776:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003778:	4b12      	ldr	r3, [pc, #72]	; (80037c4 <HAL_RCC_MCOConfig+0x64>)
 800377a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	613b      	str	r3, [r7, #16]
 8003782:	693b      	ldr	r3, [r7, #16]

  /* Configue the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8003784:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800378a:	2302      	movs	r3, #2
 800378c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800378e:	2302      	movs	r3, #2
 8003790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003796:	2300      	movs	r3, #0
 8003798:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800379a:	f107 0314 	add.w	r3, r7, #20
 800379e:	4619      	mov	r1, r3
 80037a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037a4:	f7fd ff7a 	bl	800169c <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 80037a8:	4806      	ldr	r0, [pc, #24]	; (80037c4 <HAL_RCC_MCOConfig+0x64>)
 80037aa:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <HAL_RCC_MCOConfig+0x64>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 80037b2:	68b9      	ldr	r1, [r7, #8]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	430b      	orrs	r3, r1
 80037b8:	4313      	orrs	r3, r2
 80037ba:	6083      	str	r3, [r0, #8]
}
 80037bc:	bf00      	nop
 80037be:	3728      	adds	r7, #40	; 0x28
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40021000 	.word	0x40021000

080037c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b089      	sub	sp, #36	; 0x24
 80037cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	61fb      	str	r3, [r7, #28]
 80037d2:	2300      	movs	r3, #0
 80037d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037d6:	4b3d      	ldr	r3, [pc, #244]	; (80038cc <HAL_RCC_GetSysClockFreq+0x104>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 030c 	and.w	r3, r3, #12
 80037de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037e0:	4b3a      	ldr	r3, [pc, #232]	; (80038cc <HAL_RCC_GetSysClockFreq+0x104>)
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f003 0303 	and.w	r3, r3, #3
 80037e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d005      	beq.n	80037fc <HAL_RCC_GetSysClockFreq+0x34>
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	2b0c      	cmp	r3, #12
 80037f4:	d121      	bne.n	800383a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d11e      	bne.n	800383a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037fc:	4b33      	ldr	r3, [pc, #204]	; (80038cc <HAL_RCC_GetSysClockFreq+0x104>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0308 	and.w	r3, r3, #8
 8003804:	2b00      	cmp	r3, #0
 8003806:	d107      	bne.n	8003818 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003808:	4b30      	ldr	r3, [pc, #192]	; (80038cc <HAL_RCC_GetSysClockFreq+0x104>)
 800380a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800380e:	0a1b      	lsrs	r3, r3, #8
 8003810:	f003 030f 	and.w	r3, r3, #15
 8003814:	61fb      	str	r3, [r7, #28]
 8003816:	e005      	b.n	8003824 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003818:	4b2c      	ldr	r3, [pc, #176]	; (80038cc <HAL_RCC_GetSysClockFreq+0x104>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	091b      	lsrs	r3, r3, #4
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003824:	4a2a      	ldr	r2, [pc, #168]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800382c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10d      	bne.n	8003850 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003838:	e00a      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	2b04      	cmp	r3, #4
 800383e:	d102      	bne.n	8003846 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003840:	4b24      	ldr	r3, [pc, #144]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003842:	61bb      	str	r3, [r7, #24]
 8003844:	e004      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	2b08      	cmp	r3, #8
 800384a:	d101      	bne.n	8003850 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800384c:	4b22      	ldr	r3, [pc, #136]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x110>)
 800384e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	2b0c      	cmp	r3, #12
 8003854:	d133      	bne.n	80038be <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003856:	4b1d      	ldr	r3, [pc, #116]	; (80038cc <HAL_RCC_GetSysClockFreq+0x104>)
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f003 0303 	and.w	r3, r3, #3
 800385e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2b02      	cmp	r3, #2
 8003864:	d002      	beq.n	800386c <HAL_RCC_GetSysClockFreq+0xa4>
 8003866:	2b03      	cmp	r3, #3
 8003868:	d003      	beq.n	8003872 <HAL_RCC_GetSysClockFreq+0xaa>
 800386a:	e005      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800386c:	4b19      	ldr	r3, [pc, #100]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800386e:	617b      	str	r3, [r7, #20]
      break;
 8003870:	e005      	b.n	800387e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003872:	4b19      	ldr	r3, [pc, #100]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003874:	617b      	str	r3, [r7, #20]
      break;
 8003876:	e002      	b.n	800387e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	617b      	str	r3, [r7, #20]
      break;
 800387c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800387e:	4b13      	ldr	r3, [pc, #76]	; (80038cc <HAL_RCC_GetSysClockFreq+0x104>)
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	091b      	lsrs	r3, r3, #4
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	3301      	adds	r3, #1
 800388a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800388c:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <HAL_RCC_GetSysClockFreq+0x104>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	0a1b      	lsrs	r3, r3, #8
 8003892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	fb02 f203 	mul.w	r2, r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038a4:	4b09      	ldr	r3, [pc, #36]	; (80038cc <HAL_RCC_GetSysClockFreq+0x104>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	0e5b      	lsrs	r3, r3, #25
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	3301      	adds	r3, #1
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038bc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80038be:	69bb      	ldr	r3, [r7, #24]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3724      	adds	r7, #36	; 0x24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	40021000 	.word	0x40021000
 80038d0:	0800f5e8 	.word	0x0800f5e8
 80038d4:	00f42400 	.word	0x00f42400
 80038d8:	007a1200 	.word	0x007a1200

080038dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038e0:	4b03      	ldr	r3, [pc, #12]	; (80038f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80038e2:	681b      	ldr	r3, [r3, #0]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	20000008 	.word	0x20000008

080038f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038f8:	f7ff fff0 	bl	80038dc <HAL_RCC_GetHCLKFreq>
 80038fc:	4601      	mov	r1, r0
 80038fe:	4b06      	ldr	r3, [pc, #24]	; (8003918 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	0a1b      	lsrs	r3, r3, #8
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	4a04      	ldr	r2, [pc, #16]	; (800391c <HAL_RCC_GetPCLK1Freq+0x28>)
 800390a:	5cd3      	ldrb	r3, [r2, r3]
 800390c:	f003 031f 	and.w	r3, r3, #31
 8003910:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003914:	4618      	mov	r0, r3
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40021000 	.word	0x40021000
 800391c:	0800f5e0 	.word	0x0800f5e0

08003920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003924:	f7ff ffda 	bl	80038dc <HAL_RCC_GetHCLKFreq>
 8003928:	4601      	mov	r1, r0
 800392a:	4b06      	ldr	r3, [pc, #24]	; (8003944 <HAL_RCC_GetPCLK2Freq+0x24>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	0adb      	lsrs	r3, r3, #11
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	4a04      	ldr	r2, [pc, #16]	; (8003948 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003936:	5cd3      	ldrb	r3, [r2, r3]
 8003938:	f003 031f 	and.w	r3, r3, #31
 800393c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003940:	4618      	mov	r0, r3
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40021000 	.word	0x40021000
 8003948:	0800f5e0 	.word	0x0800f5e0

0800394c <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct  pointer to an RCC_OscInitTypeDef structure that
  *         will be configured.
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
#if defined(RCC_HSI48_SUPPORT)
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_MSI | \
                                      RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSI48;
#else
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_MSI | \
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	221f      	movs	r2, #31
 8003958:	601a      	str	r2, [r3, #0]
                                      RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
#endif /* RCC_HSI48_SUPPORT */

  /* Get the HSE configuration -----------------------------------------------*/
  if(READ_BIT(RCC->CR, RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 800395a:	4b5e      	ldr	r3, [pc, #376]	; (8003ad4 <HAL_RCC_GetOscConfig+0x188>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003962:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003966:	d104      	bne.n	8003972 <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800396e:	605a      	str	r2, [r3, #4]
 8003970:	e00e      	b.n	8003990 <HAL_RCC_GetOscConfig+0x44>
  }
  else if(READ_BIT(RCC->CR, RCC_CR_HSEON) == RCC_CR_HSEON)
 8003972:	4b58      	ldr	r3, [pc, #352]	; (8003ad4 <HAL_RCC_GetOscConfig+0x188>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800397a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800397e:	d104      	bne.n	800398a <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003986:	605a      	str	r2, [r3, #4]
 8003988:	e002      	b.n	8003990 <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	605a      	str	r2, [r3, #4]
  }

   /* Get the MSI configuration -----------------------------------------------*/
  if(READ_BIT(RCC->CR, RCC_CR_MSION) == RCC_CR_MSION)
 8003990:	4b50      	ldr	r3, [pc, #320]	; (8003ad4 <HAL_RCC_GetOscConfig+0x188>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b01      	cmp	r3, #1
 800399a:	d103      	bne.n	80039a4 <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->MSIState = RCC_MSI_ON;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	619a      	str	r2, [r3, #24]
 80039a2:	e002      	b.n	80039aa <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->MSIState = RCC_MSI_OFF;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	619a      	str	r2, [r3, #24]
  }

  RCC_OscInitStruct->MSICalibrationValue = READ_BIT(RCC->ICSCR, RCC_ICSCR_MSITRIM) >> RCC_ICSCR_MSITRIM_Pos;
 80039aa:	4b4a      	ldr	r3, [pc, #296]	; (8003ad4 <HAL_RCC_GetOscConfig+0x188>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	0a1b      	lsrs	r3, r3, #8
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->MSIClockRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80039b6:	4b47      	ldr	r3, [pc, #284]	; (8003ad4 <HAL_RCC_GetOscConfig+0x188>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	621a      	str	r2, [r3, #32]

  /* Get the HSI configuration -----------------------------------------------*/
  if(READ_BIT(RCC->CR, RCC_CR_HSION) == RCC_CR_HSION)
 80039c2:	4b44      	ldr	r3, [pc, #272]	; (8003ad4 <HAL_RCC_GetOscConfig+0x188>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ce:	d104      	bne.n	80039da <HAL_RCC_GetOscConfig+0x8e>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039d6:	60da      	str	r2, [r3, #12]
 80039d8:	e002      	b.n	80039e0 <HAL_RCC_GetOscConfig+0x94>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = READ_BIT(RCC->ICSCR, RCC_ICSCR_HSITRIM) >> RCC_ICSCR_HSITRIM_Pos;
 80039e0:	4b3c      	ldr	r3, [pc, #240]	; (8003ad4 <HAL_RCC_GetOscConfig+0x188>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	0e1b      	lsrs	r3, r3, #24
 80039e6:	f003 021f 	and.w	r2, r3, #31
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if(READ_BIT(RCC->BDCR, RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 80039ee:	4b39      	ldr	r3, [pc, #228]	; (8003ad4 <HAL_RCC_GetOscConfig+0x188>)
 80039f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b04      	cmp	r3, #4
 80039fa:	d103      	bne.n	8003a04 <HAL_RCC_GetOscConfig+0xb8>
      RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS_RTC_ONLY;
    }
    else
#endif /* RCC_BDCR_LSESYSDIS */
    {
      RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2205      	movs	r2, #5
 8003a00:	609a      	str	r2, [r3, #8]
 8003a02:	e00d      	b.n	8003a20 <HAL_RCC_GetOscConfig+0xd4>
    }
  }
  else if(READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8003a04:	4b33      	ldr	r3, [pc, #204]	; (8003ad4 <HAL_RCC_GetOscConfig+0x188>)
 8003a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d103      	bne.n	8003a1a <HAL_RCC_GetOscConfig+0xce>
      RCC_OscInitStruct->LSEState = RCC_LSE_ON_RTC_ONLY;
    }
    else
#endif /* RCC_BDCR_LSESYSDIS */
    {
      RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	609a      	str	r2, [r3, #8]
 8003a18:	e002      	b.n	8003a20 <HAL_RCC_GetOscConfig+0xd4>
    }
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if(READ_BIT(RCC->CSR, RCC_CSR_LSION) == RCC_CSR_LSION)
 8003a20:	4b2c      	ldr	r3, [pc, #176]	; (8003ad4 <HAL_RCC_GetOscConfig+0x188>)
 8003a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d103      	bne.n	8003a36 <HAL_RCC_GetOscConfig+0xea>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	615a      	str	r2, [r3, #20]
 8003a34:	e002      	b.n	8003a3c <HAL_RCC_GetOscConfig+0xf0>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	615a      	str	r2, [r3, #20]
  else
  {
    RCC_OscInitStruct->HSI48State = RCC_HSI48_OFF;
  }
#else
  RCC_OscInitStruct->HSI48State = RCC_HSI48_OFF;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* RCC_HSI48_SUPPORT */

  /* Get the PLL configuration -----------------------------------------------*/
  if(READ_BIT(RCC->CR, RCC_CR_PLLON) == RCC_CR_PLLON)
 8003a42:	4b24      	ldr	r3, [pc, #144]	; (8003ad4 <HAL_RCC_GetOscConfig+0x188>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a4e:	d103      	bne.n	8003a58 <HAL_RCC_GetOscConfig+0x10c>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	629a      	str	r2, [r3, #40]	; 0x28
 8003a56:	e002      	b.n	8003a5e <HAL_RCC_GetOscConfig+0x112>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  RCC_OscInitStruct->PLL.PLLSource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a5e:	4b1d      	ldr	r3, [pc, #116]	; (8003ad4 <HAL_RCC_GetOscConfig+0x188>)
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f003 0203 	and.w	r2, r3, #3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct->PLL.PLLM = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8003a6a:	4b1a      	ldr	r3, [pc, #104]	; (8003ad4 <HAL_RCC_GetOscConfig+0x188>)
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	091b      	lsrs	r3, r3, #4
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct->PLL.PLLN = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003a7a:	4b16      	ldr	r3, [pc, #88]	; (8003ad4 <HAL_RCC_GetOscConfig+0x188>)
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	0a1b      	lsrs	r3, r3, #8
 8003a80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct->PLL.PLLQ = (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8003a88:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <HAL_RCC_GetOscConfig+0x188>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	0d5b      	lsrs	r3, r3, #21
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	3301      	adds	r3, #1
 8003a94:	005a      	lsls	r2, r3, #1
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC_OscInitStruct->PLL.PLLR = (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) << 1U);
 8003a9a:	4b0e      	ldr	r3, [pc, #56]	; (8003ad4 <HAL_RCC_GetOscConfig+0x188>)
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	0e5b      	lsrs	r3, r3, #25
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	005a      	lsls	r2, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
  RCC_OscInitStruct->PLL.PLLP = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#else
  if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8003aac:	4b09      	ldr	r3, [pc, #36]	; (8003ad4 <HAL_RCC_GetOscConfig+0x188>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d003      	beq.n	8003ac0 <HAL_RCC_GetOscConfig+0x174>
  {
    RCC_OscInitStruct->PLL.PLLP = RCC_PLLP_DIV17;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2211      	movs	r2, #17
 8003abc:	639a      	str	r2, [r3, #56]	; 0x38
  {
    RCC_OscInitStruct->PLL.PLLP = RCC_PLLP_DIV7;
  }
#endif /* RCC_PLLP_DIV_2_31_SUPPORT */
#endif /* RCC_PLLP_SUPPORT */
}
 8003abe:	e002      	b.n	8003ac6 <HAL_RCC_GetOscConfig+0x17a>
    RCC_OscInitStruct->PLL.PLLP = RCC_PLLP_DIV7;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2207      	movs	r2, #7
 8003ac4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	40021000 	.word	0x40021000

08003ad8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	220f      	movs	r2, #15
 8003ae6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003ae8:	4b12      	ldr	r3, [pc, #72]	; (8003b34 <HAL_RCC_GetClockConfig+0x5c>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f003 0203 	and.w	r2, r3, #3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003af4:	4b0f      	ldr	r3, [pc, #60]	; (8003b34 <HAL_RCC_GetClockConfig+0x5c>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003b00:	4b0c      	ldr	r3, [pc, #48]	; (8003b34 <HAL_RCC_GetClockConfig+0x5c>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003b0c:	4b09      	ldr	r3, [pc, #36]	; (8003b34 <HAL_RCC_GetClockConfig+0x5c>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	08db      	lsrs	r3, r3, #3
 8003b12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003b1a:	4b07      	ldr	r3, [pc, #28]	; (8003b38 <HAL_RCC_GetClockConfig+0x60>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0207 	and.w	r2, r3, #7
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	601a      	str	r2, [r3, #0]
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	40021000 	.word	0x40021000
 8003b38:	40022000 	.word	0x40022000

08003b3c <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8003b40:	4a05      	ldr	r2, [pc, #20]	; (8003b58 <HAL_RCC_EnableCSS+0x1c>)
 8003b42:	4b05      	ldr	r3, [pc, #20]	; (8003b58 <HAL_RCC_EnableCSS+0x1c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b4a:	6013      	str	r3, [r2, #0]
}
 8003b4c:	bf00      	nop
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	40021000 	.word	0x40021000

08003b5c <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003b60:	4b07      	ldr	r3, [pc, #28]	; (8003b80 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b6c:	d105      	bne.n	8003b7a <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003b6e:	f000 f809 	bl	8003b84 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003b72:	4b03      	ldr	r3, [pc, #12]	; (8003b80 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003b74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b78:	621a      	str	r2, [r3, #32]
  }
}
 8003b7a:	bf00      	nop
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40021000 	.word	0x40021000

08003b84 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8003b88:	bf00      	nop
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b086      	sub	sp, #24
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b9e:	4b2b      	ldr	r3, [pc, #172]	; (8003c4c <RCC_SetFlashLatencyFromMSIRange+0xba>)
 8003ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003baa:	f7fe fa43 	bl	8002034 <HAL_PWREx_GetVoltageRange>
 8003bae:	6178      	str	r0, [r7, #20]
 8003bb0:	e014      	b.n	8003bdc <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bb2:	4a26      	ldr	r2, [pc, #152]	; (8003c4c <RCC_SetFlashLatencyFromMSIRange+0xba>)
 8003bb4:	4b25      	ldr	r3, [pc, #148]	; (8003c4c <RCC_SetFlashLatencyFromMSIRange+0xba>)
 8003bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bbc:	6593      	str	r3, [r2, #88]	; 0x58
 8003bbe:	4b23      	ldr	r3, [pc, #140]	; (8003c4c <RCC_SetFlashLatencyFromMSIRange+0xba>)
 8003bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003bca:	f7fe fa33 	bl	8002034 <HAL_PWREx_GetVoltageRange>
 8003bce:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003bd0:	4a1e      	ldr	r2, [pc, #120]	; (8003c4c <RCC_SetFlashLatencyFromMSIRange+0xba>)
 8003bd2:	4b1e      	ldr	r3, [pc, #120]	; (8003c4c <RCC_SetFlashLatencyFromMSIRange+0xba>)
 8003bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bda:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003be2:	d10b      	bne.n	8003bfc <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b80      	cmp	r3, #128	; 0x80
 8003be8:	d919      	bls.n	8003c1e <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2ba0      	cmp	r3, #160	; 0xa0
 8003bee:	d902      	bls.n	8003bf6 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	613b      	str	r3, [r7, #16]
 8003bf4:	e013      	b.n	8003c1e <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	e010      	b.n	8003c1e <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b80      	cmp	r3, #128	; 0x80
 8003c00:	d902      	bls.n	8003c08 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c02:	2303      	movs	r3, #3
 8003c04:	613b      	str	r3, [r7, #16]
 8003c06:	e00a      	b.n	8003c1e <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b80      	cmp	r3, #128	; 0x80
 8003c0c:	d102      	bne.n	8003c14 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c0e:	2302      	movs	r3, #2
 8003c10:	613b      	str	r3, [r7, #16]
 8003c12:	e004      	b.n	8003c1e <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b70      	cmp	r3, #112	; 0x70
 8003c18:	d101      	bne.n	8003c1e <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c1e:	490c      	ldr	r1, [pc, #48]	; (8003c50 <RCC_SetFlashLatencyFromMSIRange+0xbe>)
 8003c20:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <RCC_SetFlashLatencyFromMSIRange+0xbe>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f023 0207 	bic.w	r2, r3, #7
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c2e:	4b08      	ldr	r3, [pc, #32]	; (8003c50 <RCC_SetFlashLatencyFromMSIRange+0xbe>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0207 	and.w	r2, r3, #7
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d001      	beq.n	8003c40 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e000      	b.n	8003c42 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3718      	adds	r7, #24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	40022000 	.word	0x40022000

08003c54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c60:	2300      	movs	r3, #0
 8003c62:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d03f      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c78:	d01c      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003c7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c7e:	d802      	bhi.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00e      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003c84:	e01f      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003c86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c8a:	d003      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003c8c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c90:	d01c      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003c92:	e018      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c94:	4a85      	ldr	r2, [pc, #532]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c96:	4b85      	ldr	r3, [pc, #532]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c9e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ca0:	e015      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f001 fac3 	bl	8005234 <RCCEx_PLLSAI1_Config>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cb2:	e00c      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3320      	adds	r3, #32
 8003cb8:	2100      	movs	r1, #0
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f001 fbaa 	bl	8005414 <RCCEx_PLLSAI2_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cc4:	e003      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	74fb      	strb	r3, [r7, #19]
      break;
 8003cca:	e000      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003ccc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cce:	7cfb      	ldrb	r3, [r7, #19]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10b      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cd4:	4975      	ldr	r1, [pc, #468]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cd6:	4b75      	ldr	r3, [pc, #468]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cdc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003cea:	e001      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cec:	7cfb      	ldrb	r3, [r7, #19]
 8003cee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d03f      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d04:	d01c      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003d06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d0a:	d802      	bhi.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00e      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003d10:	e01f      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003d12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d16:	d003      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003d18:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d1c:	d01c      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003d1e:	e018      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d20:	4a62      	ldr	r2, [pc, #392]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d22:	4b62      	ldr	r3, [pc, #392]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d2a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d2c:	e015      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	3304      	adds	r3, #4
 8003d32:	2100      	movs	r1, #0
 8003d34:	4618      	mov	r0, r3
 8003d36:	f001 fa7d 	bl	8005234 <RCCEx_PLLSAI1_Config>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d3e:	e00c      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3320      	adds	r3, #32
 8003d44:	2100      	movs	r1, #0
 8003d46:	4618      	mov	r0, r3
 8003d48:	f001 fb64 	bl	8005414 <RCCEx_PLLSAI2_Config>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d50:	e003      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	74fb      	strb	r3, [r7, #19]
      break;
 8003d56:	e000      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003d58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d5a:	7cfb      	ldrb	r3, [r7, #19]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10b      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d60:	4952      	ldr	r1, [pc, #328]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d62:	4b52      	ldr	r3, [pc, #328]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d68:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d76:	e001      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d78:	7cfb      	ldrb	r3, [r7, #19]
 8003d7a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 80a0 	beq.w	8003eca <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d8e:	4b47      	ldr	r3, [pc, #284]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e000      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003d9e:	2300      	movs	r3, #0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00d      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003da4:	4a41      	ldr	r2, [pc, #260]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003da6:	4b41      	ldr	r3, [pc, #260]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dae:	6593      	str	r3, [r2, #88]	; 0x58
 8003db0:	4b3e      	ldr	r3, [pc, #248]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db8:	60bb      	str	r3, [r7, #8]
 8003dba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dc0:	4a3b      	ldr	r2, [pc, #236]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003dc2:	4b3b      	ldr	r3, [pc, #236]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dcc:	f7fc faa2 	bl	8000314 <HAL_GetTick>
 8003dd0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dd2:	e009      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd4:	f7fc fa9e 	bl	8000314 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d902      	bls.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	74fb      	strb	r3, [r7, #19]
        break;
 8003de6:	e005      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003de8:	4b31      	ldr	r3, [pc, #196]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0ef      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003df4:	7cfb      	ldrb	r3, [r7, #19]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d15c      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003dfa:	4b2c      	ldr	r3, [pc, #176]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e04:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d01f      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d019      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e18:	4b24      	ldr	r3, [pc, #144]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e24:	4a21      	ldr	r2, [pc, #132]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e26:	4b21      	ldr	r3, [pc, #132]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e34:	4a1d      	ldr	r2, [pc, #116]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e36:	4b1d      	ldr	r3, [pc, #116]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e44:	4a19      	ldr	r2, [pc, #100]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d016      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e56:	f7fc fa5d 	bl	8000314 <HAL_GetTick>
 8003e5a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e5c:	e00b      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e5e:	f7fc fa59 	bl	8000314 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d902      	bls.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	74fb      	strb	r3, [r7, #19]
            break;
 8003e74:	e006      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e76:	4b0d      	ldr	r3, [pc, #52]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0ec      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003e84:	7cfb      	ldrb	r3, [r7, #19]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10c      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e8a:	4908      	ldr	r1, [pc, #32]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e8c:	4b07      	ldr	r3, [pc, #28]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ea2:	e009      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ea4:	7cfb      	ldrb	r3, [r7, #19]
 8003ea6:	74bb      	strb	r3, [r7, #18]
 8003ea8:	e006      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003eaa:	bf00      	nop
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb4:	7cfb      	ldrb	r3, [r7, #19]
 8003eb6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eb8:	7c7b      	ldrb	r3, [r7, #17]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d105      	bne.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ebe:	4a9e      	ldr	r2, [pc, #632]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ec0:	4b9d      	ldr	r3, [pc, #628]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ec8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00a      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ed6:	4998      	ldr	r1, [pc, #608]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ed8:	4b97      	ldr	r3, [pc, #604]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ede:	f023 0203 	bic.w	r2, r3, #3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00a      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ef8:	498f      	ldr	r1, [pc, #572]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003efa:	4b8f      	ldr	r3, [pc, #572]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f00:	f023 020c 	bic.w	r2, r3, #12
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0304 	and.w	r3, r3, #4
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00a      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f1a:	4987      	ldr	r1, [pc, #540]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f1c:	4b86      	ldr	r3, [pc, #536]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f22:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0308 	and.w	r3, r3, #8
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00a      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f3c:	497e      	ldr	r1, [pc, #504]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f3e:	4b7e      	ldr	r3, [pc, #504]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f44:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0310 	and.w	r3, r3, #16
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f5e:	4976      	ldr	r1, [pc, #472]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f60:	4b75      	ldr	r3, [pc, #468]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0320 	and.w	r3, r3, #32
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00a      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f80:	496d      	ldr	r1, [pc, #436]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f82:	4b6d      	ldr	r3, [pc, #436]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f88:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f90:	4313      	orrs	r3, r2
 8003f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00a      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fa2:	4965      	ldr	r1, [pc, #404]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fa4:	4b64      	ldr	r3, [pc, #400]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003faa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00a      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fc4:	495c      	ldr	r1, [pc, #368]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fc6:	4b5c      	ldr	r3, [pc, #368]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00a      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fe6:	4954      	ldr	r1, [pc, #336]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fe8:	4b53      	ldr	r3, [pc, #332]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00a      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004008:	494b      	ldr	r1, [pc, #300]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800400a:	4b4b      	ldr	r3, [pc, #300]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800400c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004010:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004018:	4313      	orrs	r3, r2
 800401a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00a      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800402a:	4943      	ldr	r1, [pc, #268]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800402c:	4b42      	ldr	r3, [pc, #264]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800402e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004032:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403a:	4313      	orrs	r3, r2
 800403c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d028      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800404c:	493a      	ldr	r1, [pc, #232]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800404e:	4b3a      	ldr	r3, [pc, #232]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004054:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004066:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800406a:	d106      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800406c:	4a32      	ldr	r2, [pc, #200]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800406e:	4b32      	ldr	r3, [pc, #200]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004076:	60d3      	str	r3, [r2, #12]
 8004078:	e011      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800407e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004082:	d10c      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3304      	adds	r3, #4
 8004088:	2101      	movs	r1, #1
 800408a:	4618      	mov	r0, r3
 800408c:	f001 f8d2 	bl	8005234 <RCCEx_PLLSAI1_Config>
 8004090:	4603      	mov	r3, r0
 8004092:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004094:	7cfb      	ldrb	r3, [r7, #19]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800409a:	7cfb      	ldrb	r3, [r7, #19]
 800409c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d028      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040aa:	4923      	ldr	r1, [pc, #140]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040ac:	4b22      	ldr	r3, [pc, #136]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040c8:	d106      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040ca:	4a1b      	ldr	r2, [pc, #108]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040cc:	4b1a      	ldr	r3, [pc, #104]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040d4:	60d3      	str	r3, [r2, #12]
 80040d6:	e011      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040e0:	d10c      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3304      	adds	r3, #4
 80040e6:	2101      	movs	r1, #1
 80040e8:	4618      	mov	r0, r3
 80040ea:	f001 f8a3 	bl	8005234 <RCCEx_PLLSAI1_Config>
 80040ee:	4603      	mov	r3, r0
 80040f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040f2:	7cfb      	ldrb	r3, [r7, #19]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80040f8:	7cfb      	ldrb	r3, [r7, #19]
 80040fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d02b      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004108:	490b      	ldr	r1, [pc, #44]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800410a:	4b0b      	ldr	r3, [pc, #44]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800410c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004110:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004118:	4313      	orrs	r3, r2
 800411a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004122:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004126:	d109      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004128:	4a03      	ldr	r2, [pc, #12]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800412a:	4b03      	ldr	r3, [pc, #12]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004132:	60d3      	str	r3, [r2, #12]
 8004134:	e014      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004136:	bf00      	nop
 8004138:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004140:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004144:	d10c      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	3304      	adds	r3, #4
 800414a:	2101      	movs	r1, #1
 800414c:	4618      	mov	r0, r3
 800414e:	f001 f871 	bl	8005234 <RCCEx_PLLSAI1_Config>
 8004152:	4603      	mov	r3, r0
 8004154:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004156:	7cfb      	ldrb	r3, [r7, #19]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800415c:	7cfb      	ldrb	r3, [r7, #19]
 800415e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d02f      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800416c:	492b      	ldr	r1, [pc, #172]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800416e:	4b2b      	ldr	r3, [pc, #172]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004174:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800417c:	4313      	orrs	r3, r2
 800417e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004186:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800418a:	d10d      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3304      	adds	r3, #4
 8004190:	2102      	movs	r1, #2
 8004192:	4618      	mov	r0, r3
 8004194:	f001 f84e 	bl	8005234 <RCCEx_PLLSAI1_Config>
 8004198:	4603      	mov	r3, r0
 800419a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800419c:	7cfb      	ldrb	r3, [r7, #19]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d014      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80041a2:	7cfb      	ldrb	r3, [r7, #19]
 80041a4:	74bb      	strb	r3, [r7, #18]
 80041a6:	e011      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041b0:	d10c      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	3320      	adds	r3, #32
 80041b6:	2102      	movs	r1, #2
 80041b8:	4618      	mov	r0, r3
 80041ba:	f001 f92b 	bl	8005414 <RCCEx_PLLSAI2_Config>
 80041be:	4603      	mov	r3, r0
 80041c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041c2:	7cfb      	ldrb	r3, [r7, #19]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80041c8:	7cfb      	ldrb	r3, [r7, #19]
 80041ca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041d8:	4910      	ldr	r1, [pc, #64]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041da:	4b10      	ldr	r3, [pc, #64]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00b      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041fa:	4908      	ldr	r1, [pc, #32]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041fc:	4b07      	ldr	r3, [pc, #28]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004202:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800420c:	4313      	orrs	r3, r2
 800420e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004212:	7cbb      	ldrb	r3, [r7, #18]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40021000 	.word	0x40021000

08004220 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         clocks(SAI1, SAI2, LPTIM1, LPTIM2, I2C1, I2C2, I2C3, I2C4, LPUART,
  *         USART1, USART2, USART3, UART4, UART5, RTC, ADCx, DFSDMx, SWPMI1, USB, SDMMC1 and RNG).
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
                                        RCC_PERIPHCLK_SDMMC1  | RCC_PERIPHCLK_RNG    | RCC_PERIPHCLK_ADC    | RCC_PERIPHCLK_SWPMI1 | RCC_PERIPHCLK_DFSDM1 | \
                                        RCC_PERIPHCLK_RTC ;

#elif defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_USART1  | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_UART4  | RCC_PERIPHCLK_UART5  | \
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a73      	ldr	r2, [pc, #460]	; (80043f8 <HAL_RCCEx_GetPeriphCLKConfig+0x1d8>)
 800422c:	601a      	str	r2, [r3, #0]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Get the PLLSAI1 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI1.PLLSAI1Source = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC) >> RCC_PLLCFGR_PLLSRC_Pos;
 800422e:	4b73      	ldr	r3, [pc, #460]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f003 0203 	and.w	r2, r3, #3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	605a      	str	r2, [r3, #4]
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U;
#else
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 800423a:	4b70      	ldr	r3, [pc, #448]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	091b      	lsrs	r3, r3, #4
 8004240:	f003 0307 	and.w	r3, r3, #7
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	609a      	str	r2, [r3, #8]
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
  PeriphClkInit->PLLSAI1.PLLSAI1N = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800424a:	4b6c      	ldr	r3, [pc, #432]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	0a1b      	lsrs	r3, r3, #8
 8004250:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLSAI1.PLLSAI1P = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) >> RCC_PLLSAI1CFGR_PLLSAI1P_Pos) << 4U) + 7U;
 8004258:	4b68      	ldr	r3, [pc, #416]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	0c5b      	lsrs	r3, r3, #17
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	f003 0310 	and.w	r3, r3, #16
 8004264:	1dda      	adds	r2, r3, #7
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLSAI1.PLLSAI1Q = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) * 2U;
 800426a:	4b64      	ldr	r3, [pc, #400]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	0d5b      	lsrs	r3, r3, #21
 8004270:	f003 0303 	and.w	r3, r3, #3
 8004274:	3301      	adds	r3, #1
 8004276:	005a      	lsls	r2, r3, #1
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI1.PLLSAI1R = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) * 2U;
 800427c:	4b5f      	ldr	r3, [pc, #380]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	0e5b      	lsrs	r3, r3, #25
 8004282:	f003 0303 	and.w	r3, r3, #3
 8004286:	3301      	adds	r3, #1
 8004288:	005a      	lsls	r2, r3, #1
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	619a      	str	r2, [r3, #24]

#if defined(RCC_PLLSAI2_SUPPORT)

  /* Get the PLLSAI2 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI2.PLLSAI2Source = PeriphClkInit->PLLSAI1.PLLSAI1Source;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	621a      	str	r2, [r3, #32]
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
  PeriphClkInit->PLLSAI2.PLLSAI2M = (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U;
#else
  PeriphClkInit->PLLSAI2.PLLSAI2M = PeriphClkInit->PLLSAI1.PLLSAI1M;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689a      	ldr	r2, [r3, #8]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
  PeriphClkInit->PLLSAI2.PLLSAI2N = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800429e:	4b57      	ldr	r3, [pc, #348]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	0a1b      	lsrs	r3, r3, #8
 80042a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAI2.PLLSAI2P = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) >> RCC_PLLSAI2CFGR_PLLSAI2P_Pos) << 4U) + 7U;
 80042ac:	4b53      	ldr	r3, [pc, #332]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	0c5b      	lsrs	r3, r3, #17
 80042b2:	011b      	lsls	r3, r3, #4
 80042b4:	f003 0310 	and.w	r3, r3, #16
 80042b8:	1dda      	adds	r2, r3, #7
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
  PeriphClkInit->PLLSAI2.PLLSAI2Q = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2Q) >> RCC_PLLSAI2CFGR_PLLSAI2Q_Pos) + 1U) * 2U;
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
  PeriphClkInit->PLLSAI2.PLLSAI2R = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R)>> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) * 2U;
 80042be:	4b4f      	ldr	r3, [pc, #316]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	0e5b      	lsrs	r3, r3, #25
 80042c4:	f003 0303 	and.w	r3, r3, #3
 80042c8:	3301      	adds	r3, #1
 80042ca:	005a      	lsls	r2, r3, #1
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	631a      	str	r2, [r3, #48]	; 0x30

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Get the USART1 clock source ---------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection  = __HAL_RCC_GET_USART1_SOURCE();
 80042d0:	4b4a      	ldr	r3, [pc, #296]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80042d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d6:	f003 0203 	and.w	r2, r3, #3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	639a      	str	r2, [r3, #56]	; 0x38
  /* Get the USART2 clock source ---------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection  = __HAL_RCC_GET_USART2_SOURCE();
 80042de:	4b47      	ldr	r3, [pc, #284]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80042e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e4:	f003 020c 	and.w	r2, r3, #12
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	63da      	str	r2, [r3, #60]	; 0x3c

#if defined(USART3)
  /* Get the USART3 clock source ---------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection  = __HAL_RCC_GET_USART3_SOURCE();
 80042ec:	4b43      	ldr	r3, [pc, #268]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80042ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f2:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* USART3 */

#if defined(UART4)
  /* Get the UART4 clock source ----------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection   = __HAL_RCC_GET_UART4_SOURCE();
 80042fa:	4b40      	ldr	r3, [pc, #256]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80042fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004300:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* UART4 */

#if defined(UART5)
  /* Get the UART5 clock source ----------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection   = __HAL_RCC_GET_UART5_SOURCE();
 8004308:	4b3c      	ldr	r3, [pc, #240]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800430a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* UART5 */

  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection = __HAL_RCC_GET_LPUART1_SOURCE();
 8004316:	4b39      	ldr	r3, [pc, #228]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8004318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431c:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the I2C1 clock source -----------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection    = __HAL_RCC_GET_I2C1_SOURCE();
 8004324:	4b35      	ldr	r3, [pc, #212]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8004326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432a:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	651a      	str	r2, [r3, #80]	; 0x50

#if defined(I2C2)
   /* Get the I2C2 clock source ----------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection    = __HAL_RCC_GET_I2C2_SOURCE();
 8004332:	4b32      	ldr	r3, [pc, #200]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8004334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004338:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* I2C2 */

  /* Get the I2C3 clock source -----------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection    = __HAL_RCC_GET_I2C3_SOURCE();
 8004340:	4b2e      	ldr	r3, [pc, #184]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8004342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004346:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	659a      	str	r2, [r3, #88]	; 0x58
  /* Get the I2C4 clock source -----------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection    = __HAL_RCC_GET_I2C4_SOURCE();
#endif /* I2C4 */

  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection  = __HAL_RCC_GET_LPTIM1_SOURCE();
 800434e:	4b2b      	ldr	r3, [pc, #172]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8004350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004354:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection  = __HAL_RCC_GET_LPTIM2_SOURCE();
 800435c:	4b27      	ldr	r3, [pc, #156]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800435e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004362:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(SAI1)
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection    = __HAL_RCC_GET_SAI1_SOURCE();
 800436a:	4b24      	ldr	r3, [pc, #144]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800436c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004370:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	665a      	str	r2, [r3, #100]	; 0x64
#endif /* SAI1 */

#if defined(SAI2)
  /* Get the SAI2 clock source -----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection    = __HAL_RCC_GET_SAI2_SOURCE();
 8004378:	4b20      	ldr	r3, [pc, #128]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800437a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437e:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	669a      	str	r2, [r3, #104]	; 0x68
#endif /* SAI2 */

  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection     = __HAL_RCC_GET_RTC_SOURCE();
 8004386:	4b1d      	ldr	r3, [pc, #116]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8004388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#if defined(USB_OTG_FS) || defined(USB)
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection   = __HAL_RCC_GET_USB_SOURCE();
 8004396:	4b19      	ldr	r3, [pc, #100]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8004398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439c:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	66da      	str	r2, [r3, #108]	; 0x6c
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)
  /* Get the SDMMC1 clock source ---------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection   = __HAL_RCC_GET_SDMMC1_SOURCE();
 80043a4:	4b15      	ldr	r3, [pc, #84]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043aa:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* SDMMC1 */

  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection   = __HAL_RCC_GET_RNG_SOURCE();
 80043b2:	4b12      	ldr	r3, [pc, #72]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80043b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b8:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	675a      	str	r2, [r3, #116]	; 0x74

#if !defined(STM32L412xx) && !defined(STM32L422xx)
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection     = __HAL_RCC_GET_ADC_SOURCE();
 80043c0:	4b0e      	ldr	r3, [pc, #56]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80043c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c6:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection  = __HAL_RCC_GET_SWPMI1_SOURCE();
 80043ce:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80043d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d4:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	67da      	str	r2, [r3, #124]	; 0x7c
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection  = __HAL_RCC_GET_DFSDM1_SOURCE();
 80043dc:	4b07      	ldr	r3, [pc, #28]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80043de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e2:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /* Get the OctoSPIclock source --------------------------------------------*/
  PeriphClkInit->OspiClockSelection = __HAL_RCC_GET_OSPI_SOURCE();
#endif /* OCTOSPI1 || OCTOSPI2 */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr
 80043f8:	000fffff 	.word	0x000fffff
 80043fc:	40021000 	.word	0x40021000

08004400 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b088      	sub	sp, #32
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004412:	d137      	bne.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004414:	4bb8      	ldr	r3, [pc, #736]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800441e:	617b      	str	r3, [r7, #20]

    switch(srcclk)
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004426:	d014      	beq.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8004428:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800442c:	d01e      	beq.n	800446c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 800442e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004432:	d001      	beq.n	8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8004434:	f000 bc53 	b.w	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004438:	4baf      	ldr	r3, [pc, #700]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800443a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b02      	cmp	r3, #2
 8004444:	f040 8446 	bne.w	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
        frequency = LSE_VALUE;
 8004448:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800444c:	61fb      	str	r3, [r7, #28]
      break;
 800444e:	f000 bc41 	b.w	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004452:	4ba9      	ldr	r3, [pc, #676]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004454:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b02      	cmp	r3, #2
 800445e:	f040 843b 	bne.w	8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
          frequency = LSI_VALUE;
 8004462:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004466:	61fb      	str	r3, [r7, #28]
      break;
 8004468:	f000 bc36 	b.w	8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800446c:	4ba2      	ldr	r3, [pc, #648]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004474:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004478:	f040 8430 	bne.w	8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        frequency = HSE_VALUE / 32U;
 800447c:	4b9f      	ldr	r3, [pc, #636]	; (80046fc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800447e:	61fb      	str	r3, [r7, #28]
      break;
 8004480:	f000 bc2c 	b.w	8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004484:	4b9c      	ldr	r3, [pc, #624]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f003 0303 	and.w	r3, r3, #3
 800448c:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	2b02      	cmp	r3, #2
 8004492:	d023      	beq.n	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8004494:	2b03      	cmp	r3, #3
 8004496:	d02e      	beq.n	80044f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004498:	2b01      	cmp	r3, #1
 800449a:	d139      	bne.n	8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800449c:	4b96      	ldr	r3, [pc, #600]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d116      	bne.n	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80044a8:	4b93      	ldr	r3, [pc, #588]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0308 	and.w	r3, r3, #8
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 80044b4:	4b90      	ldr	r3, [pc, #576]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	091b      	lsrs	r3, r3, #4
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	e005      	b.n	80044cc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 80044c0:	4b8d      	ldr	r3, [pc, #564]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80044c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044c6:	0a1b      	lsrs	r3, r3, #8
 80044c8:	f003 030f 	and.w	r3, r3, #15
 80044cc:	4a8c      	ldr	r2, [pc, #560]	; (8004700 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80044ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044d2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80044d4:	e01f      	b.n	8004516 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	61bb      	str	r3, [r7, #24]
      break;
 80044da:	e01c      	b.n	8004516 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80044dc:	4b86      	ldr	r3, [pc, #536]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044e8:	d102      	bne.n	80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 80044ea:	4b86      	ldr	r3, [pc, #536]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80044ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80044ee:	e012      	b.n	8004516 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	61bb      	str	r3, [r7, #24]
      break;
 80044f4:	e00f      	b.n	8004516 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80044f6:	4b80      	ldr	r3, [pc, #512]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004502:	d102      	bne.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 8004504:	4b80      	ldr	r3, [pc, #512]	; (8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8004506:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004508:	e005      	b.n	8004516 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 800450a:	2300      	movs	r3, #0
 800450c:	61bb      	str	r3, [r7, #24]
      break;
 800450e:	e002      	b.n	8004516 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	61bb      	str	r3, [r7, #24]
      break;
 8004514:	bf00      	nop
    }

    switch(PeriphClk)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800451c:	f000 8337 	beq.w	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
 8004520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004524:	d825      	bhi.n	8004572 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 8004526:	2b10      	cmp	r3, #16
 8004528:	f000 81df 	beq.w	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800452c:	2b10      	cmp	r3, #16
 800452e:	d80f      	bhi.n	8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8004530:	2b02      	cmp	r3, #2
 8004532:	f000 8128 	beq.w	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8004536:	2b02      	cmp	r3, #2
 8004538:	d803      	bhi.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 800453a:	2b01      	cmp	r3, #1
 800453c:	f000 80ec 	beq.w	8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8004540:	e3cd      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8004542:	2b04      	cmp	r3, #4
 8004544:	f000 8169 	beq.w	800481a <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8004548:	2b08      	cmp	r3, #8
 800454a:	f000 819a 	beq.w	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
      break;
 800454e:	e3c6      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8004550:	2b40      	cmp	r3, #64	; 0x40
 8004552:	f000 82b3 	beq.w	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
 8004556:	2b40      	cmp	r3, #64	; 0x40
 8004558:	d803      	bhi.n	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 800455a:	2b20      	cmp	r3, #32
 800455c:	f000 81fd 	beq.w	800495a <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
      break;
 8004560:	e3bd      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8004562:	2b80      	cmp	r3, #128	; 0x80
 8004564:	f000 82cd 	beq.w	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8004568:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800456c:	f000 82ec 	beq.w	8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
      break;
 8004570:	e3b5      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8004572:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004576:	f000 822d 	beq.w	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 800457a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800457e:	d811      	bhi.n	80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8004580:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004584:	d021      	beq.n	80045ca <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 8004586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800458a:	d804      	bhi.n	8004596 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800458c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004590:	f000 833e 	beq.w	8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
      break;
 8004594:	e3a3      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8004596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800459a:	d01d      	beq.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 800459c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045a0:	d021      	beq.n	80045e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 80045a2:	e39c      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 80045a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045a8:	f000 8277 	beq.w	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
 80045ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b0:	d804      	bhi.n	80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80045b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045b6:	f000 8371 	beq.w	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
      break;
 80045ba:	e390      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 80045bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045c0:	d011      	beq.n	80045e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80045c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80045c6:	d00e      	beq.n	80045e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 80045c8:	e389      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80045ca:	69b9      	ldr	r1, [r7, #24]
 80045cc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80045d0:	f000 fffa 	bl	80055c8 <RCCEx_GetSAIxPeriphCLKFreq>
 80045d4:	61f8      	str	r0, [r7, #28]
      break;
 80045d6:	e382      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80045d8:	69b9      	ldr	r1, [r7, #24]
 80045da:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80045de:	f000 fff3 	bl	80055c8 <RCCEx_GetSAIxPeriphCLKFreq>
 80045e2:	61f8      	str	r0, [r7, #28]
      break;
 80045e4:	e37b      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80045e6:	4b44      	ldr	r3, [pc, #272]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80045e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ec:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80045f0:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045f8:	d023      	beq.n	8004642 <HAL_RCCEx_GetPeriphCLKFreq+0x242>
 80045fa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80045fe:	d003      	beq.n	8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004600:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004604:	d04a      	beq.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
          break;
 8004606:	e086      	b.n	8004716 <HAL_RCCEx_GetPeriphCLKFreq+0x316>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004608:	4b3b      	ldr	r3, [pc, #236]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b02      	cmp	r3, #2
 8004612:	d17b      	bne.n	800470c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004614:	4b38      	ldr	r3, [pc, #224]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b00      	cmp	r3, #0
 800461e:	d005      	beq.n	800462c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8004620:	4b35      	ldr	r3, [pc, #212]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	091b      	lsrs	r3, r3, #4
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	e005      	b.n	8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 800462c:	4b32      	ldr	r3, [pc, #200]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800462e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004632:	0a1b      	lsrs	r3, r3, #8
 8004634:	f003 030f 	and.w	r3, r3, #15
 8004638:	4a31      	ldr	r2, [pc, #196]	; (8004700 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800463a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800463e:	61fb      	str	r3, [r7, #28]
          break;
 8004640:	e064      	b.n	800470c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004642:	4b2d      	ldr	r3, [pc, #180]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800464e:	d15f      	bne.n	8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004650:	4b29      	ldr	r3, [pc, #164]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004658:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800465c:	d158      	bne.n	8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800465e:	4b26      	ldr	r3, [pc, #152]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	0a1b      	lsrs	r3, r3, #8
 8004664:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004668:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	fb02 f203 	mul.w	r2, r2, r3
 8004672:	4b21      	ldr	r3, [pc, #132]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	091b      	lsrs	r3, r3, #4
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	3301      	adds	r3, #1
 800467e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004682:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004684:	4b1c      	ldr	r3, [pc, #112]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	0d5b      	lsrs	r3, r3, #21
 800468a:	f003 0303 	and.w	r3, r3, #3
 800468e:	3301      	adds	r3, #1
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	fbb2 f3f3 	udiv	r3, r2, r3
 8004698:	61fb      	str	r3, [r7, #28]
          break;
 800469a:	e039      	b.n	8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800469c:	4b16      	ldr	r3, [pc, #88]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046a8:	d134      	bne.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80046aa:	4b13      	ldr	r3, [pc, #76]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046b6:	d12d      	bne.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80046b8:	4b0f      	ldr	r3, [pc, #60]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	0a1b      	lsrs	r3, r3, #8
 80046be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046c2:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	fb02 f203 	mul.w	r2, r2, r3
 80046cc:	4b0a      	ldr	r3, [pc, #40]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	091b      	lsrs	r3, r3, #4
 80046d2:	f003 0307 	and.w	r3, r3, #7
 80046d6:	3301      	adds	r3, #1
 80046d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046dc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80046de:	4b06      	ldr	r3, [pc, #24]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	0d5b      	lsrs	r3, r3, #21
 80046e4:	f003 0303 	and.w	r3, r3, #3
 80046e8:	3301      	adds	r3, #1
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f2:	61fb      	str	r3, [r7, #28]
          break;
 80046f4:	e00e      	b.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80046f6:	bf00      	nop
 80046f8:	40021000 	.word	0x40021000
 80046fc:	0003d090 	.word	0x0003d090
 8004700:	0800f5e8 	.word	0x0800f5e8
 8004704:	00f42400 	.word	0x00f42400
 8004708:	007a1200 	.word	0x007a1200
          break;
 800470c:	bf00      	nop
 800470e:	e2e6      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004710:	bf00      	nop
 8004712:	e2e4      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004714:	bf00      	nop
        break;
 8004716:	e2e2      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004718:	4bac      	ldr	r3, [pc, #688]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800471a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471e:	f003 0303 	and.w	r3, r3, #3
 8004722:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	2b03      	cmp	r3, #3
 8004728:	d827      	bhi.n	800477a <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800472a:	a201      	add	r2, pc, #4	; (adr r2, 8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 800472c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004730:	08004741 	.word	0x08004741
 8004734:	08004749 	.word	0x08004749
 8004738:	08004751 	.word	0x08004751
 800473c:	08004765 	.word	0x08004765
          frequency = HAL_RCC_GetPCLK2Freq();
 8004740:	f7ff f8ee 	bl	8003920 <HAL_RCC_GetPCLK2Freq>
 8004744:	61f8      	str	r0, [r7, #28]
          break;
 8004746:	e01d      	b.n	8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          frequency = HAL_RCC_GetSysClockFreq();
 8004748:	f7ff f83e 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 800474c:	61f8      	str	r0, [r7, #28]
          break;
 800474e:	e019      	b.n	8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004750:	4b9e      	ldr	r3, [pc, #632]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800475c:	d10f      	bne.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
            frequency = HSI_VALUE;
 800475e:	4b9c      	ldr	r3, [pc, #624]	; (80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004760:	61fb      	str	r3, [r7, #28]
          break;
 8004762:	e00c      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004764:	4b99      	ldr	r3, [pc, #612]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b02      	cmp	r3, #2
 8004770:	d107      	bne.n	8004782 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
            frequency = LSE_VALUE;
 8004772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004776:	61fb      	str	r3, [r7, #28]
          break;
 8004778:	e003      	b.n	8004782 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
          break;
 800477a:	bf00      	nop
 800477c:	e2af      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800477e:	bf00      	nop
 8004780:	e2ad      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004782:	bf00      	nop
        break;
 8004784:	e2ab      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004786:	4b91      	ldr	r3, [pc, #580]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478c:	f003 030c 	and.w	r3, r3, #12
 8004790:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2b0c      	cmp	r3, #12
 8004796:	d83a      	bhi.n	800480e <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8004798:	a201      	add	r2, pc, #4	; (adr r2, 80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 800479a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479e:	bf00      	nop
 80047a0:	080047d5 	.word	0x080047d5
 80047a4:	0800480f 	.word	0x0800480f
 80047a8:	0800480f 	.word	0x0800480f
 80047ac:	0800480f 	.word	0x0800480f
 80047b0:	080047dd 	.word	0x080047dd
 80047b4:	0800480f 	.word	0x0800480f
 80047b8:	0800480f 	.word	0x0800480f
 80047bc:	0800480f 	.word	0x0800480f
 80047c0:	080047e5 	.word	0x080047e5
 80047c4:	0800480f 	.word	0x0800480f
 80047c8:	0800480f 	.word	0x0800480f
 80047cc:	0800480f 	.word	0x0800480f
 80047d0:	080047f9 	.word	0x080047f9
          frequency = HAL_RCC_GetPCLK1Freq();
 80047d4:	f7ff f88e 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 80047d8:	61f8      	str	r0, [r7, #28]
          break;
 80047da:	e01d      	b.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = HAL_RCC_GetSysClockFreq();
 80047dc:	f7fe fff4 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 80047e0:	61f8      	str	r0, [r7, #28]
          break;
 80047e2:	e019      	b.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80047e4:	4b79      	ldr	r3, [pc, #484]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f0:	d10f      	bne.n	8004812 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
            frequency = HSI_VALUE;
 80047f2:	4b77      	ldr	r3, [pc, #476]	; (80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80047f4:	61fb      	str	r3, [r7, #28]
          break;
 80047f6:	e00c      	b.n	8004812 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80047f8:	4b74      	ldr	r3, [pc, #464]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80047fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b02      	cmp	r3, #2
 8004804:	d107      	bne.n	8004816 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = LSE_VALUE;
 8004806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800480a:	61fb      	str	r3, [r7, #28]
          break;
 800480c:	e003      	b.n	8004816 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          break;
 800480e:	bf00      	nop
 8004810:	e265      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004812:	bf00      	nop
 8004814:	e263      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004816:	bf00      	nop
        break;
 8004818:	e261      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800481a:	4b6c      	ldr	r3, [pc, #432]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800481c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004820:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004824:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2b10      	cmp	r3, #16
 800482a:	d00d      	beq.n	8004848 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 800482c:	2b10      	cmp	r3, #16
 800482e:	d802      	bhi.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8004830:	2b00      	cmp	r3, #0
 8004832:	d005      	beq.n	8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
          break;
 8004834:	e024      	b.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
        switch(srcclk)
 8004836:	2b20      	cmp	r3, #32
 8004838:	d00a      	beq.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 800483a:	2b30      	cmp	r3, #48	; 0x30
 800483c:	d012      	beq.n	8004864 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          break;
 800483e:	e01f      	b.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004840:	f7ff f858 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 8004844:	61f8      	str	r0, [r7, #28]
          break;
 8004846:	e01b      	b.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetSysClockFreq();
 8004848:	f7fe ffbe 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 800484c:	61f8      	str	r0, [r7, #28]
          break;
 800484e:	e017      	b.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004850:	4b5e      	ldr	r3, [pc, #376]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800485c:	d10d      	bne.n	800487a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI_VALUE;
 800485e:	4b5c      	ldr	r3, [pc, #368]	; (80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004860:	61fb      	str	r3, [r7, #28]
          break;
 8004862:	e00a      	b.n	800487a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004864:	4b59      	ldr	r3, [pc, #356]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b02      	cmp	r3, #2
 8004870:	d105      	bne.n	800487e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = LSE_VALUE;
 8004872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004876:	61fb      	str	r3, [r7, #28]
          break;
 8004878:	e001      	b.n	800487e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800487a:	bf00      	nop
 800487c:	e22f      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800487e:	bf00      	nop
        break;
 8004880:	e22d      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004882:	4b52      	ldr	r3, [pc, #328]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004888:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800488c:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	2b40      	cmp	r3, #64	; 0x40
 8004892:	d00d      	beq.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
 8004894:	2b40      	cmp	r3, #64	; 0x40
 8004896:	d802      	bhi.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8004898:	2b00      	cmp	r3, #0
 800489a:	d005      	beq.n	80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
          break;
 800489c:	e024      	b.n	80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
        switch(srcclk)
 800489e:	2b80      	cmp	r3, #128	; 0x80
 80048a0:	d00a      	beq.n	80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 80048a2:	2bc0      	cmp	r3, #192	; 0xc0
 80048a4:	d012      	beq.n	80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          break;
 80048a6:	e01f      	b.n	80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80048a8:	f7ff f824 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 80048ac:	61f8      	str	r0, [r7, #28]
          break;
 80048ae:	e01b      	b.n	80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetSysClockFreq();
 80048b0:	f7fe ff8a 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 80048b4:	61f8      	str	r0, [r7, #28]
          break;
 80048b6:	e017      	b.n	80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80048b8:	4b44      	ldr	r3, [pc, #272]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048c4:	d10d      	bne.n	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
            frequency = HSI_VALUE;
 80048c6:	4b42      	ldr	r3, [pc, #264]	; (80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80048c8:	61fb      	str	r3, [r7, #28]
          break;
 80048ca:	e00a      	b.n	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80048cc:	4b3f      	ldr	r3, [pc, #252]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80048ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d105      	bne.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
            frequency = LSE_VALUE;
 80048da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048de:	61fb      	str	r3, [r7, #28]
          break;
 80048e0:	e001      	b.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          break;
 80048e2:	bf00      	nop
 80048e4:	e1fb      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80048e6:	bf00      	nop
        break;
 80048e8:	e1f9      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80048ea:	4b38      	ldr	r3, [pc, #224]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80048ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048f4:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048fc:	d010      	beq.n	8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 80048fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004902:	d802      	bhi.n	800490a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8004904:	2b00      	cmp	r3, #0
 8004906:	d007      	beq.n	8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
          break;
 8004908:	e026      	b.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
        switch(srcclk)
 800490a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800490e:	d00b      	beq.n	8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8004910:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004914:	d012      	beq.n	800493c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
          break;
 8004916:	e01f      	b.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004918:	f7fe ffec 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 800491c:	61f8      	str	r0, [r7, #28]
          break;
 800491e:	e01b      	b.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetSysClockFreq();
 8004920:	f7fe ff52 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 8004924:	61f8      	str	r0, [r7, #28]
          break;
 8004926:	e017      	b.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004928:	4b28      	ldr	r3, [pc, #160]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004934:	d10d      	bne.n	8004952 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
            frequency = HSI_VALUE;
 8004936:	4b26      	ldr	r3, [pc, #152]	; (80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004938:	61fb      	str	r3, [r7, #28]
          break;
 800493a:	e00a      	b.n	8004952 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800493c:	4b23      	ldr	r3, [pc, #140]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800493e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b02      	cmp	r3, #2
 8004948:	d105      	bne.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
            frequency = LSE_VALUE;
 800494a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800494e:	61fb      	str	r3, [r7, #28]
          break;
 8004950:	e001      	b.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
          break;
 8004952:	bf00      	nop
 8004954:	e1c3      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004956:	bf00      	nop
        break;
 8004958:	e1c1      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800495a:	4b1c      	ldr	r3, [pc, #112]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800495c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004960:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004964:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800496c:	d010      	beq.n	8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 800496e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004972:	d802      	bhi.n	800497a <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8004974:	2b00      	cmp	r3, #0
 8004976:	d007      	beq.n	8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
          break;
 8004978:	e026      	b.n	80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
        switch(srcclk)
 800497a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800497e:	d00b      	beq.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8004980:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004984:	d012      	beq.n	80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
          break;
 8004986:	e01f      	b.n	80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004988:	f7fe ffb4 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 800498c:	61f8      	str	r0, [r7, #28]
          break;
 800498e:	e01b      	b.n	80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetSysClockFreq();
 8004990:	f7fe ff1a 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 8004994:	61f8      	str	r0, [r7, #28]
          break;
 8004996:	e017      	b.n	80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004998:	4b0c      	ldr	r3, [pc, #48]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049a4:	d10d      	bne.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
            frequency = HSI_VALUE;
 80049a6:	4b0a      	ldr	r3, [pc, #40]	; (80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80049a8:	61fb      	str	r3, [r7, #28]
          break;
 80049aa:	e00a      	b.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80049ac:	4b07      	ldr	r3, [pc, #28]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80049ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d105      	bne.n	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            frequency = LSE_VALUE;
 80049ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049be:	61fb      	str	r3, [r7, #28]
          break;
 80049c0:	e001      	b.n	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
          break;
 80049c2:	bf00      	nop
 80049c4:	e18b      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80049c6:	bf00      	nop
        break;
 80049c8:	e189      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80049ca:	bf00      	nop
 80049cc:	40021000 	.word	0x40021000
 80049d0:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80049d4:	4bae      	ldr	r3, [pc, #696]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80049d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80049de:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049e6:	d02f      	beq.n	8004a48 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 80049e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80049ec:	d003      	beq.n	80049f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80049ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049f2:	d004      	beq.n	80049fe <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          break;
 80049f4:	e050      	b.n	8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          frequency = HAL_RCC_GetSysClockFreq();
 80049f6:	f7fe fee7 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 80049fa:	61f8      	str	r0, [r7, #28]
          break;
 80049fc:	e04c      	b.n	8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 80049fe:	4ba4      	ldr	r3, [pc, #656]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d043      	beq.n	8004a92 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004a0a:	4ba1      	ldr	r3, [pc, #644]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	0a1b      	lsrs	r3, r3, #8
 8004a10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a14:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	fb02 f203 	mul.w	r2, r2, r3
 8004a1e:	4b9c      	ldr	r3, [pc, #624]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	091b      	lsrs	r3, r3, #4
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	3301      	adds	r3, #1
 8004a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a2e:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004a30:	4b97      	ldr	r3, [pc, #604]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	0e5b      	lsrs	r3, r3, #25
 8004a36:	f003 0303 	and.w	r3, r3, #3
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a44:	61fb      	str	r3, [r7, #28]
          break;
 8004a46:	e024      	b.n	8004a92 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U)
 8004a48:	4b91      	ldr	r3, [pc, #580]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d020      	beq.n	8004a96 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004a54:	4b8e      	ldr	r3, [pc, #568]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	0a1b      	lsrs	r3, r3, #8
 8004a5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a5e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	fb02 f203 	mul.w	r2, r2, r3
 8004a68:	4b89      	ldr	r3, [pc, #548]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	091b      	lsrs	r3, r3, #4
 8004a6e:	f003 0307 	and.w	r3, r3, #7
 8004a72:	3301      	adds	r3, #1
 8004a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a78:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8004a7a:	4b85      	ldr	r3, [pc, #532]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	0e5b      	lsrs	r3, r3, #25
 8004a80:	f003 0303 	and.w	r3, r3, #3
 8004a84:	3301      	adds	r3, #1
 8004a86:	005b      	lsls	r3, r3, #1
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8e:	61fb      	str	r3, [r7, #28]
          break;
 8004a90:	e001      	b.n	8004a96 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          break;
 8004a92:	bf00      	nop
 8004a94:	e123      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004a96:	bf00      	nop
        break;
 8004a98:	e121      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004a9a:	4b7d      	ldr	r3, [pc, #500]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aa4:	617b      	str	r3, [r7, #20]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d103      	bne.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004aac:	f7fe ff38 	bl	8003920 <HAL_RCC_GetPCLK2Freq>
 8004ab0:	61f8      	str	r0, [r7, #28]
        break;
 8004ab2:	e114      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = HAL_RCC_GetSysClockFreq();
 8004ab4:	f7fe fe88 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 8004ab8:	61f8      	str	r0, [r7, #28]
        break;
 8004aba:	e110      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004abc:	4b74      	ldr	r3, [pc, #464]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004ac6:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ace:	d009      	beq.n	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 8004ad0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ad4:	d00a      	beq.n	8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d000      	beq.n	8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          break;
 8004ada:	e011      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004adc:	f7fe ff0a 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 8004ae0:	61f8      	str	r0, [r7, #28]
          break;
 8004ae2:	e00d      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetSysClockFreq();
 8004ae4:	f7fe fe70 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 8004ae8:	61f8      	str	r0, [r7, #28]
          break;
 8004aea:	e009      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004aec:	4b68      	ldr	r3, [pc, #416]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004af8:	d101      	bne.n	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
            frequency = HSI_VALUE;
 8004afa:	4b66      	ldr	r3, [pc, #408]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004afc:	61fb      	str	r3, [r7, #28]
          break;
 8004afe:	bf00      	nop
        break;
 8004b00:	e0ed      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004b02:	4b63      	ldr	r3, [pc, #396]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004b0c:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b14:	d009      	beq.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8004b16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b1a:	d00a      	beq.n	8004b32 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d000      	beq.n	8004b22 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 8004b20:	e011      	b.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004b22:	f7fe fee7 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 8004b26:	61f8      	str	r0, [r7, #28]
          break;
 8004b28:	e00d      	b.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b2a:	f7fe fe4d 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 8004b2e:	61f8      	str	r0, [r7, #28]
          break;
 8004b30:	e009      	b.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b32:	4b57      	ldr	r3, [pc, #348]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b3e:	d101      	bne.n	8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
            frequency = HSI_VALUE;
 8004b40:	4b54      	ldr	r3, [pc, #336]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004b42:	61fb      	str	r3, [r7, #28]
          break;
 8004b44:	bf00      	nop
        break;
 8004b46:	e0ca      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004b48:	4b51      	ldr	r3, [pc, #324]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b52:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b5a:	d009      	beq.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8004b5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b60:	d00a      	beq.n	8004b78 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d000      	beq.n	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          break;
 8004b66:	e011      	b.n	8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004b68:	f7fe fec4 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 8004b6c:	61f8      	str	r0, [r7, #28]
          break;
 8004b6e:	e00d      	b.n	8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b70:	f7fe fe2a 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 8004b74:	61f8      	str	r0, [r7, #28]
          break;
 8004b76:	e009      	b.n	8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b78:	4b45      	ldr	r3, [pc, #276]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b84:	d101      	bne.n	8004b8a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            frequency = HSI_VALUE;
 8004b86:	4b43      	ldr	r3, [pc, #268]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004b88:	61fb      	str	r3, [r7, #28]
          break;
 8004b8a:	bf00      	nop
        break;
 8004b8c:	e0a7      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004b8e:	4b40      	ldr	r3, [pc, #256]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b94:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004b98:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ba0:	d010      	beq.n	8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 8004ba2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ba6:	d802      	bhi.n	8004bae <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d007      	beq.n	8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
          break;
 8004bac:	e02f      	b.n	8004c0e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
        switch(srcclk)
 8004bae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004bb2:	d012      	beq.n	8004bda <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 8004bb4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004bb8:	d019      	beq.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8004bba:	e028      	b.n	8004c0e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004bbc:	f7fe fe9a 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 8004bc0:	61f8      	str	r0, [r7, #28]
          break;
 8004bc2:	e024      	b.n	8004c0e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004bc4:	4b32      	ldr	r3, [pc, #200]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d118      	bne.n	8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
              frequency = LSI_VALUE;
 8004bd2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004bd6:	61fb      	str	r3, [r7, #28]
          break;
 8004bd8:	e014      	b.n	8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004bda:	4b2d      	ldr	r3, [pc, #180]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004be6:	d10f      	bne.n	8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
            frequency = HSI_VALUE;
 8004be8:	4b2a      	ldr	r3, [pc, #168]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004bea:	61fb      	str	r3, [r7, #28]
          break;
 8004bec:	e00c      	b.n	8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004bee:	4b28      	ldr	r3, [pc, #160]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d107      	bne.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
            frequency = LSE_VALUE;
 8004bfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c00:	61fb      	str	r3, [r7, #28]
          break;
 8004c02:	e003      	b.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          break;
 8004c04:	bf00      	nop
 8004c06:	e06a      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004c08:	bf00      	nop
 8004c0a:	e068      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004c0c:	bf00      	nop
        break;
 8004c0e:	e066      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004c10:	4b1f      	ldr	r3, [pc, #124]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c16:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004c1a:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c22:	d010      	beq.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004c24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c28:	d802      	bhi.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d007      	beq.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          break;
 8004c2e:	e034      	b.n	8004c9a <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
        switch(srcclk)
 8004c30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c34:	d012      	beq.n	8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 8004c36:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c3a:	d019      	beq.n	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          break;
 8004c3c:	e02d      	b.n	8004c9a <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c3e:	f7fe fe59 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 8004c42:	61f8      	str	r0, [r7, #28]
          break;
 8004c44:	e029      	b.n	8004c9a <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004c46:	4b12      	ldr	r3, [pc, #72]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d118      	bne.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
              frequency = LSI_VALUE;
 8004c54:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004c58:	61fb      	str	r3, [r7, #28]
          break;
 8004c5a:	e014      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c5c:	4b0c      	ldr	r3, [pc, #48]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c68:	d10f      	bne.n	8004c8a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
            frequency = HSI_VALUE;
 8004c6a:	4b0a      	ldr	r3, [pc, #40]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004c6c:	61fb      	str	r3, [r7, #28]
          break;
 8004c6e:	e00c      	b.n	8004c8a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004c70:	4b07      	ldr	r3, [pc, #28]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d10c      	bne.n	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
            frequency = LSE_VALUE;
 8004c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c82:	61fb      	str	r3, [r7, #28]
          break;
 8004c84:	e008      	b.n	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          break;
 8004c86:	bf00      	nop
 8004c88:	e029      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004c8a:	bf00      	nop
 8004c8c:	e027      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8004c8e:	bf00      	nop
 8004c90:	40021000 	.word	0x40021000
 8004c94:	00f42400 	.word	0x00f42400
          break;
 8004c98:	bf00      	nop
        break;
 8004c9a:	e020      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8004c9c:	4b12      	ldr	r3, [pc, #72]	; (8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8004c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ca6:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
 8004cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb2:	d004      	beq.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
          break;
 8004cb4:	e00d      	b.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004cb6:	f7fe fe1d 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 8004cba:	61f8      	str	r0, [r7, #28]
          break;
 8004cbc:	e009      	b.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004cbe:	4b0a      	ldr	r3, [pc, #40]	; (8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cca:	d101      	bne.n	8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
            frequency = HSI_VALUE;
 8004ccc:	4b07      	ldr	r3, [pc, #28]	; (8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
 8004cce:	61fb      	str	r3, [r7, #28]
          break;
 8004cd0:	bf00      	nop
        break;
 8004cd2:	e004      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8004cd4:	bf00      	nop
 8004cd6:	e002      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8004cd8:	bf00      	nop
 8004cda:	e000      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8004cdc:	bf00      	nop
    }
  }

  return(frequency);
 8004cde:	69fb      	ldr	r3, [r7, #28]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3720      	adds	r7, #32
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	00f42400 	.word	0x00f42400

08004cf0 <HAL_RCCEx_EnablePLLSAI1>:
  * @param  PLLSAI1Init  pointer to an RCC_PLLSAI1InitTypeDef structure that
  *         contains the configuration information for the PLLSAI1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnablePLLSAI1(RCC_PLLSAI1InitTypeDef  *PLLSAI1Init)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1Q_VALUE(PLLSAI1Init->PLLSAI1Q));
  assert_param(IS_RCC_PLLSAI1R_VALUE(PLLSAI1Init->PLLSAI1R));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1Init->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004cfc:	4a2e      	ldr	r2, [pc, #184]	; (8004db8 <HAL_RCCEx_EnablePLLSAI1+0xc8>)
 8004cfe:	4b2e      	ldr	r3, [pc, #184]	; (8004db8 <HAL_RCCEx_EnablePLLSAI1+0xc8>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d06:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004d08:	f7fb fb04 	bl	8000314 <HAL_GetTick>
 8004d0c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d0e:	e009      	b.n	8004d24 <HAL_RCCEx_EnablePLLSAI1+0x34>
  {
    if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d10:	f7fb fb00 	bl	8000314 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d902      	bls.n	8004d24 <HAL_RCCEx_EnablePLLSAI1+0x34>
    {
      status = HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	73fb      	strb	r3, [r7, #15]
      break;
 8004d22:	e005      	b.n	8004d30 <HAL_RCCEx_EnablePLLSAI1+0x40>
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d24:	4b24      	ldr	r3, [pc, #144]	; (8004db8 <HAL_RCCEx_EnablePLLSAI1+0xc8>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1ef      	bne.n	8004d10 <HAL_RCCEx_EnablePLLSAI1+0x20>
    }
  }

  if(status == HAL_OK)
 8004d30:	7bfb      	ldrb	r3, [r7, #15]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d13b      	bne.n	8004dae <HAL_RCCEx_EnablePLLSAI1+0xbe>
    /* Configure the PLLSAI1 Division factors M, P, Q and R */
    __HAL_RCC_PLLSAI1_CONFIG(PLLSAI1Init->PLLSAI1M, PLLSAI1Init->PLLSAI1N, PLLSAI1Init->PLLSAI1P, PLLSAI1Init->PLLSAI1Q, PLLSAI1Init->PLLSAI1R);
#else
    /* Configure the PLLSAI1 Multiplication factor N */
    /* Configure the PLLSAI1 Division factors P, Q and R */
    __HAL_RCC_PLLSAI1_CONFIG(PLLSAI1Init->PLLSAI1N, PLLSAI1Init->PLLSAI1P, PLLSAI1Init->PLLSAI1Q, PLLSAI1Init->PLLSAI1R);
 8004d36:	4820      	ldr	r0, [pc, #128]	; (8004db8 <HAL_RCCEx_EnablePLLSAI1+0xc8>)
 8004d38:	4b1f      	ldr	r3, [pc, #124]	; (8004db8 <HAL_RCCEx_EnablePLLSAI1+0xc8>)
 8004d3a:	691a      	ldr	r2, [r3, #16]
 8004d3c:	4b1f      	ldr	r3, [pc, #124]	; (8004dbc <HAL_RCCEx_EnablePLLSAI1+0xcc>)
 8004d3e:	4013      	ands	r3, r2
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	6892      	ldr	r2, [r2, #8]
 8004d44:	0211      	lsls	r1, r2, #8
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	6912      	ldr	r2, [r2, #16]
 8004d4a:	0852      	lsrs	r2, r2, #1
 8004d4c:	3a01      	subs	r2, #1
 8004d4e:	0552      	lsls	r2, r2, #21
 8004d50:	4311      	orrs	r1, r2
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	6952      	ldr	r2, [r2, #20]
 8004d56:	0852      	lsrs	r2, r2, #1
 8004d58:	3a01      	subs	r2, #1
 8004d5a:	0652      	lsls	r2, r2, #25
 8004d5c:	4311      	orrs	r1, r2
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	68d2      	ldr	r2, [r2, #12]
 8004d62:	0912      	lsrs	r2, r2, #4
 8004d64:	0452      	lsls	r2, r2, #17
 8004d66:	430a      	orrs	r2, r1
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	6103      	str	r3, [r0, #16]
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
    /* Configure the PLLSAI1 Clock output(s) */
    __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1Init->PLLSAI1ClockOut);
 8004d6c:	4912      	ldr	r1, [pc, #72]	; (8004db8 <HAL_RCCEx_EnablePLLSAI1+0xc8>)
 8004d6e:	4b12      	ldr	r3, [pc, #72]	; (8004db8 <HAL_RCCEx_EnablePLLSAI1+0xc8>)
 8004d70:	691a      	ldr	r2, [r3, #16]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004d7a:	4a0f      	ldr	r2, [pc, #60]	; (8004db8 <HAL_RCCEx_EnablePLLSAI1+0xc8>)
 8004d7c:	4b0e      	ldr	r3, [pc, #56]	; (8004db8 <HAL_RCCEx_EnablePLLSAI1+0xc8>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d86:	f7fb fac5 	bl	8000314 <HAL_GetTick>
 8004d8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d8c:	e009      	b.n	8004da2 <HAL_RCCEx_EnablePLLSAI1+0xb2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d8e:	f7fb fac1 	bl	8000314 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d902      	bls.n	8004da2 <HAL_RCCEx_EnablePLLSAI1+0xb2>
      {
        status = HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	73fb      	strb	r3, [r7, #15]
        break;
 8004da0:	e005      	b.n	8004dae <HAL_RCCEx_EnablePLLSAI1+0xbe>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004da2:	4b05      	ldr	r3, [pc, #20]	; (8004db8 <HAL_RCCEx_EnablePLLSAI1+0xc8>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d0ef      	beq.n	8004d8e <HAL_RCCEx_EnablePLLSAI1+0x9e>
      }
    }
  }

  return status;
 8004dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	f99d80ff 	.word	0xf99d80ff

08004dc0 <HAL_RCCEx_DisablePLLSAI1>:
/**
  * @brief  Disable PLLSAI1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLLSAI1(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	71fb      	strb	r3, [r7, #7]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004dca:	4a19      	ldr	r2, [pc, #100]	; (8004e30 <HAL_RCCEx_DisablePLLSAI1+0x70>)
 8004dcc:	4b18      	ldr	r3, [pc, #96]	; (8004e30 <HAL_RCCEx_DisablePLLSAI1+0x70>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004dd4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004dd6:	f7fb fa9d 	bl	8000314 <HAL_GetTick>
 8004dda:	6038      	str	r0, [r7, #0]

  /* Wait till PLLSAI1 is ready */
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ddc:	e009      	b.n	8004df2 <HAL_RCCEx_DisablePLLSAI1+0x32>
  {
    if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004dde:	f7fb fa99 	bl	8000314 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d902      	bls.n	8004df2 <HAL_RCCEx_DisablePLLSAI1+0x32>
    {
      status = HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	71fb      	strb	r3, [r7, #7]
      break;
 8004df0:	e005      	b.n	8004dfe <HAL_RCCEx_DisablePLLSAI1+0x3e>
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004df2:	4b0f      	ldr	r3, [pc, #60]	; (8004e30 <HAL_RCCEx_DisablePLLSAI1+0x70>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1ef      	bne.n	8004dde <HAL_RCCEx_DisablePLLSAI1+0x1e>
    }
  }

  /* Disable the PLLSAI1 Clock outputs */
  __HAL_RCC_PLLSAI1CLKOUT_DISABLE(RCC_PLLSAI1CFGR_PLLSAI1PEN|RCC_PLLSAI1CFGR_PLLSAI1QEN|RCC_PLLSAI1CFGR_PLLSAI1REN);
 8004dfe:	4a0c      	ldr	r2, [pc, #48]	; (8004e30 <HAL_RCCEx_DisablePLLSAI1+0x70>)
 8004e00:	4b0b      	ldr	r3, [pc, #44]	; (8004e30 <HAL_RCCEx_DisablePLLSAI1+0x70>)
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004e08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e0c:	6113      	str	r3, [r2, #16]

  /* Reset PLL source to save power if no PLLs on */
#if defined(RCC_PLLSAI2_SUPPORT)
  if(READ_BIT(RCC->CR, (RCC_CR_PLLRDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004e0e:	4b08      	ldr	r3, [pc, #32]	; (8004e30 <HAL_RCCEx_DisablePLLSAI1+0x70>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 5308 	and.w	r3, r3, #570425344	; 0x22000000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d105      	bne.n	8004e26 <HAL_RCCEx_DisablePLLSAI1+0x66>
  {
    MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004e1a:	4a05      	ldr	r2, [pc, #20]	; (8004e30 <HAL_RCCEx_DisablePLLSAI1+0x70>)
 8004e1c:	4b04      	ldr	r3, [pc, #16]	; (8004e30 <HAL_RCCEx_DisablePLLSAI1+0x70>)
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f023 0303 	bic.w	r3, r3, #3
 8004e24:	60d3      	str	r3, [r2, #12]
  {
    MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
  }
#endif /* RCC_PLLSAI2_SUPPORT */

  return status;
 8004e26:	79fb      	ldrb	r3, [r7, #7]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	40021000 	.word	0x40021000

08004e34 <HAL_RCCEx_EnablePLLSAI2>:
  * @param  PLLSAI2Init  pointer to an RCC_PLLSAI2InitTypeDef structure that
  *         contains the configuration information for the PLLSAI2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnablePLLSAI2(RCC_PLLSAI2InitTypeDef  *PLLSAI2Init)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	73fb      	strb	r3, [r7, #15]
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
  assert_param(IS_RCC_PLLSAI2R_VALUE(PLLSAI2Init->PLLSAI2R));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PLLSAI2Init->PLLSAI2ClockOut));

  /* Disable the PLLSAI2 */
  __HAL_RCC_PLLSAI2_DISABLE();
 8004e40:	4a2b      	ldr	r2, [pc, #172]	; (8004ef0 <HAL_RCCEx_EnablePLLSAI2+0xbc>)
 8004e42:	4b2b      	ldr	r3, [pc, #172]	; (8004ef0 <HAL_RCCEx_EnablePLLSAI2+0xbc>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e4a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004e4c:	f7fb fa62 	bl	8000314 <HAL_GetTick>
 8004e50:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI2 is ready to be updated */
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e52:	e009      	b.n	8004e68 <HAL_RCCEx_EnablePLLSAI2+0x34>
  {
    if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e54:	f7fb fa5e 	bl	8000314 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d902      	bls.n	8004e68 <HAL_RCCEx_EnablePLLSAI2+0x34>
    {
      status = HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	73fb      	strb	r3, [r7, #15]
      break;
 8004e66:	e005      	b.n	8004e74 <HAL_RCCEx_EnablePLLSAI2+0x40>
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e68:	4b21      	ldr	r3, [pc, #132]	; (8004ef0 <HAL_RCCEx_EnablePLLSAI2+0xbc>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1ef      	bne.n	8004e54 <HAL_RCCEx_EnablePLLSAI2+0x20>
    }
  }

  if(status == HAL_OK)
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d135      	bne.n	8004ee6 <HAL_RCCEx_EnablePLLSAI2+0xb2>
    /* Configure the PLLSAI2 Division factors P, Q and R */
    __HAL_RCC_PLLSAI2_CONFIG(PLLSAI2Init->PLLSAI2N, PLLSAI2Init->PLLSAI2P, PLLSAI2Init->PLLSAI2Q, PLLSAI2Init->PLLSAI2R);
#else
    /* Configure the PLLSAI2 Multiplication factor N */
    /* Configure the PLLSAI2 Division factors P and R */
    __HAL_RCC_PLLSAI2_CONFIG(PLLSAI2Init->PLLSAI2N, PLLSAI2Init->PLLSAI2P, PLLSAI2Init->PLLSAI2R);
 8004e7a:	481d      	ldr	r0, [pc, #116]	; (8004ef0 <HAL_RCCEx_EnablePLLSAI2+0xbc>)
 8004e7c:	4b1c      	ldr	r3, [pc, #112]	; (8004ef0 <HAL_RCCEx_EnablePLLSAI2+0xbc>)
 8004e7e:	695a      	ldr	r2, [r3, #20]
 8004e80:	4b1c      	ldr	r3, [pc, #112]	; (8004ef4 <HAL_RCCEx_EnablePLLSAI2+0xc0>)
 8004e82:	4013      	ands	r3, r2
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6892      	ldr	r2, [r2, #8]
 8004e88:	0211      	lsls	r1, r2, #8
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6912      	ldr	r2, [r2, #16]
 8004e8e:	0852      	lsrs	r2, r2, #1
 8004e90:	3a01      	subs	r2, #1
 8004e92:	0652      	lsls	r2, r2, #25
 8004e94:	4311      	orrs	r1, r2
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	68d2      	ldr	r2, [r2, #12]
 8004e9a:	0912      	lsrs	r2, r2, #4
 8004e9c:	0452      	lsls	r2, r2, #17
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	6143      	str	r3, [r0, #20]
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT && RCC_PLLSAI2Q_DIV_SUPPORT */
    /* Configure the PLLSAI2 Clock output(s) */
    __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PLLSAI2Init->PLLSAI2ClockOut);
 8004ea4:	4912      	ldr	r1, [pc, #72]	; (8004ef0 <HAL_RCCEx_EnablePLLSAI2+0xbc>)
 8004ea6:	4b12      	ldr	r3, [pc, #72]	; (8004ef0 <HAL_RCCEx_EnablePLLSAI2+0xbc>)
 8004ea8:	695a      	ldr	r2, [r3, #20]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	614b      	str	r3, [r1, #20]

    /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
    __HAL_RCC_PLLSAI2_ENABLE();
 8004eb2:	4a0f      	ldr	r2, [pc, #60]	; (8004ef0 <HAL_RCCEx_EnablePLLSAI2+0xbc>)
 8004eb4:	4b0e      	ldr	r3, [pc, #56]	; (8004ef0 <HAL_RCCEx_EnablePLLSAI2+0xbc>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ebc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ebe:	f7fb fa29 	bl	8000314 <HAL_GetTick>
 8004ec2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ec4:	e009      	b.n	8004eda <HAL_RCCEx_EnablePLLSAI2+0xa6>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ec6:	f7fb fa25 	bl	8000314 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d902      	bls.n	8004eda <HAL_RCCEx_EnablePLLSAI2+0xa6>
      {
        status = HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	73fb      	strb	r3, [r7, #15]
        break;
 8004ed8:	e005      	b.n	8004ee6 <HAL_RCCEx_EnablePLLSAI2+0xb2>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004eda:	4b05      	ldr	r3, [pc, #20]	; (8004ef0 <HAL_RCCEx_EnablePLLSAI2+0xbc>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0ef      	beq.n	8004ec6 <HAL_RCCEx_EnablePLLSAI2+0x92>
      }
    }
  }

  return status;
 8004ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	40021000 	.word	0x40021000
 8004ef4:	f9fd80ff 	.word	0xf9fd80ff

08004ef8 <HAL_RCCEx_DisablePLLSAI2>:
/**
  * @brief  Disable PLLISAI2.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLLSAI2(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	71fb      	strb	r3, [r7, #7]

  /* Disable the PLLSAI2 */
  __HAL_RCC_PLLSAI2_DISABLE();
 8004f02:	4a19      	ldr	r2, [pc, #100]	; (8004f68 <HAL_RCCEx_DisablePLLSAI2+0x70>)
 8004f04:	4b18      	ldr	r3, [pc, #96]	; (8004f68 <HAL_RCCEx_DisablePLLSAI2+0x70>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f0c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004f0e:	f7fb fa01 	bl	8000314 <HAL_GetTick>
 8004f12:	6038      	str	r0, [r7, #0]

  /* Wait till PLLSAI2 is ready */
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f14:	e009      	b.n	8004f2a <HAL_RCCEx_DisablePLLSAI2+0x32>
  {
    if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f16:	f7fb f9fd 	bl	8000314 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d902      	bls.n	8004f2a <HAL_RCCEx_DisablePLLSAI2+0x32>
    {
      status = HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	71fb      	strb	r3, [r7, #7]
      break;
 8004f28:	e005      	b.n	8004f36 <HAL_RCCEx_DisablePLLSAI2+0x3e>
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f2a:	4b0f      	ldr	r3, [pc, #60]	; (8004f68 <HAL_RCCEx_DisablePLLSAI2+0x70>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1ef      	bne.n	8004f16 <HAL_RCCEx_DisablePLLSAI2+0x1e>

  /* Disable the PLLSAI2 Clock outputs */
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
  __HAL_RCC_PLLSAI2CLKOUT_DISABLE(RCC_PLLSAI2CFGR_PLLSAI2PEN|RCC_PLLSAI2CFGR_PLLSAI2QEN|RCC_PLLSAI2CFGR_PLLSAI2REN);
#else
  __HAL_RCC_PLLSAI2CLKOUT_DISABLE(RCC_PLLSAI2CFGR_PLLSAI2PEN|RCC_PLLSAI2CFGR_PLLSAI2REN);
 8004f36:	4a0c      	ldr	r2, [pc, #48]	; (8004f68 <HAL_RCCEx_DisablePLLSAI2+0x70>)
 8004f38:	4b0b      	ldr	r3, [pc, #44]	; (8004f68 <HAL_RCCEx_DisablePLLSAI2+0x70>)
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f44:	6153      	str	r3, [r2, #20]
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT && RCC_PLLSAI2Q_DIV_SUPPORT */

  /* Reset PLL source to save power if no PLLs on */
  if(READ_BIT(RCC->CR, (RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY)) == 0U)
 8004f46:	4b08      	ldr	r3, [pc, #32]	; (8004f68 <HAL_RCCEx_DisablePLLSAI2+0x70>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 6320 	and.w	r3, r3, #167772160	; 0xa000000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d105      	bne.n	8004f5e <HAL_RCCEx_DisablePLLSAI2+0x66>
  {
    MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004f52:	4a05      	ldr	r2, [pc, #20]	; (8004f68 <HAL_RCCEx_DisablePLLSAI2+0x70>)
 8004f54:	4b04      	ldr	r3, [pc, #16]	; (8004f68 <HAL_RCCEx_DisablePLLSAI2+0x70>)
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f023 0303 	bic.w	r3, r3, #3
 8004f5c:	60d3      	str	r3, [r2, #12]
  }

  return status;
 8004f5e:	79fb      	ldrb	r3, [r7, #7]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3708      	adds	r7, #8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	40021000 	.word	0x40021000

08004f6c <HAL_RCCEx_WakeUpStopCLKConfig>:
  * @note   This function shall not be called after the Clock Security System on HSE has been
  *         enabled.
  * @retval None
  */
void HAL_RCCEx_WakeUpStopCLKConfig(uint32_t WakeUpClk)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_STOP_WAKEUPCLOCK(WakeUpClk));

  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(WakeUpClk);
 8004f74:	4906      	ldr	r1, [pc, #24]	; (8004f90 <HAL_RCCEx_WakeUpStopCLKConfig+0x24>)
 8004f76:	4b06      	ldr	r3, [pc, #24]	; (8004f90 <HAL_RCCEx_WakeUpStopCLKConfig+0x24>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	608b      	str	r3, [r1, #8]
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	40021000 	.word	0x40021000

08004f94 <HAL_RCCEx_StandbyMSIRangeConfig>:
  *            @arg @ref RCC_MSIRANGE_6  Range 6 around 4 MHz (reset value)
  *            @arg @ref RCC_MSIRANGE_7  Range 7 around 8 MHz
  * @retval None
  */
void HAL_RCCEx_StandbyMSIRangeConfig(uint32_t MSIRange)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_MSI_STANDBY_CLOCK_RANGE(MSIRange));

  __HAL_RCC_MSI_STANDBY_RANGE_CONFIG(MSIRange);
 8004f9c:	4908      	ldr	r1, [pc, #32]	; (8004fc0 <HAL_RCCEx_StandbyMSIRangeConfig+0x2c>)
 8004f9e:	4b08      	ldr	r3, [pc, #32]	; (8004fc0 <HAL_RCCEx_StandbyMSIRangeConfig+0x2c>)
 8004fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fa4:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	011b      	lsls	r3, r3, #4
 8004fac:	4313      	orrs	r3, r2
 8004fae:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004fb2:	bf00      	nop
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	40021000 	.word	0x40021000

08004fc4 <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 8004fc8:	4a06      	ldr	r2, [pc, #24]	; (8004fe4 <HAL_RCCEx_EnableLSECSS+0x20>)
 8004fca:	4b06      	ldr	r3, [pc, #24]	; (8004fe4 <HAL_RCCEx_EnableLSECSS+0x20>)
 8004fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd0:	f043 0320 	orr.w	r3, r3, #32
 8004fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004fd8:	bf00      	nop
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	40021000 	.word	0x40021000

08004fe8 <HAL_RCCEx_DisableLSECSS>:
  * @brief  Disable the LSE Clock Security System.
  * @note   LSE Clock Security System can only be disabled after a LSE failure detection.
  * @retval None
  */
void HAL_RCCEx_DisableLSECSS(void)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 8004fec:	4a09      	ldr	r2, [pc, #36]	; (8005014 <HAL_RCCEx_DisableLSECSS+0x2c>)
 8004fee:	4b09      	ldr	r3, [pc, #36]	; (8005014 <HAL_RCCEx_DisableLSECSS+0x2c>)
 8004ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff4:	f023 0320 	bic.w	r3, r3, #32
 8004ff8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /* Disable LSE CSS IT if any */
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
 8004ffc:	4a05      	ldr	r2, [pc, #20]	; (8005014 <HAL_RCCEx_DisableLSECSS+0x2c>)
 8004ffe:	4b05      	ldr	r3, [pc, #20]	; (8005014 <HAL_RCCEx_DisableLSECSS+0x2c>)
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005006:	6193      	str	r3, [r2, #24]
}
 8005008:	bf00      	nop
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	40021000 	.word	0x40021000

08005018 <HAL_RCCEx_EnableLSECSS_IT>:
  * @brief  Enable the LSE Clock Security System Interrupt & corresponding EXTI line.
  * @note   LSE Clock Security System Interrupt is mapped on RTC EXTI line 19
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS_IT(void)
{
 8005018:	b480      	push	{r7}
 800501a:	af00      	add	r7, sp, #0
  /* Enable LSE CSS */
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 800501c:	4a0f      	ldr	r2, [pc, #60]	; (800505c <HAL_RCCEx_EnableLSECSS_IT+0x44>)
 800501e:	4b0f      	ldr	r3, [pc, #60]	; (800505c <HAL_RCCEx_EnableLSECSS_IT+0x44>)
 8005020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005024:	f043 0320 	orr.w	r3, r3, #32
 8005028:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /* Enable LSE CSS IT */
  __HAL_RCC_ENABLE_IT(RCC_IT_LSECSS);
 800502c:	4a0b      	ldr	r2, [pc, #44]	; (800505c <HAL_RCCEx_EnableLSECSS_IT+0x44>)
 800502e:	4b0b      	ldr	r3, [pc, #44]	; (800505c <HAL_RCCEx_EnableLSECSS_IT+0x44>)
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005036:	6193      	str	r3, [r2, #24]

  /* Enable IT on EXTI Line 19 */
  __HAL_RCC_LSECSS_EXTI_ENABLE_IT();
 8005038:	4a09      	ldr	r2, [pc, #36]	; (8005060 <HAL_RCCEx_EnableLSECSS_IT+0x48>)
 800503a:	4b09      	ldr	r3, [pc, #36]	; (8005060 <HAL_RCCEx_EnableLSECSS_IT+0x48>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005042:	6013      	str	r3, [r2, #0]
  __HAL_RCC_LSECSS_EXTI_ENABLE_RISING_EDGE();
 8005044:	4a06      	ldr	r2, [pc, #24]	; (8005060 <HAL_RCCEx_EnableLSECSS_IT+0x48>)
 8005046:	4b06      	ldr	r3, [pc, #24]	; (8005060 <HAL_RCCEx_EnableLSECSS_IT+0x48>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800504e:	6093      	str	r3, [r2, #8]
}
 8005050:	bf00      	nop
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	40021000 	.word	0x40021000
 8005060:	40010400 	.word	0x40010400

08005064 <HAL_RCCEx_LSECSS_IRQHandler>:
/**
  * @brief Handle the RCC LSE Clock Security System interrupt request.
  * @retval None
  */
void HAL_RCCEx_LSECSS_IRQHandler(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	af00      	add	r7, sp, #0
  /* Check RCC LSE CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_LSECSS))
 8005068:	4b07      	ldr	r3, [pc, #28]	; (8005088 <HAL_RCCEx_LSECSS_IRQHandler+0x24>)
 800506a:	69db      	ldr	r3, [r3, #28]
 800506c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005074:	d105      	bne.n	8005082 <HAL_RCCEx_LSECSS_IRQHandler+0x1e>
  {
    /* RCC LSE Clock Security System interrupt user callback */
    HAL_RCCEx_LSECSS_Callback();
 8005076:	f000 f809 	bl	800508c <HAL_RCCEx_LSECSS_Callback>

    /* Clear RCC LSE CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_LSECSS);
 800507a:	4b03      	ldr	r3, [pc, #12]	; (8005088 <HAL_RCCEx_LSECSS_IRQHandler+0x24>)
 800507c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005080:	621a      	str	r2, [r3, #32]
  }
}
 8005082:	bf00      	nop
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	40021000 	.word	0x40021000

0800508c <HAL_RCCEx_LSECSS_Callback>:
/**
  * @brief  RCCEx LSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_LSECSS_Callback(void)
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_LSECSS_Callback should be implemented in the user file
   */
}
 8005090:	bf00      	nop
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b08a      	sub	sp, #40	; 0x28
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  FlagStatus       pwrclkchanged = RESET;
 80050a2:	2300      	movs	r3, #0
 80050a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  FlagStatus       backupchanged = RESET;
 80050a8:	2300      	movs	r3, #0
 80050aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* LSCO Pin Clock Enable */
  __LSCO_CLK_ENABLE();
 80050ae:	4a2d      	ldr	r2, [pc, #180]	; (8005164 <HAL_RCCEx_EnableLSCO+0xca>)
 80050b0:	4b2c      	ldr	r3, [pc, #176]	; (8005164 <HAL_RCCEx_EnableLSCO+0xca>)
 80050b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050b4:	f043 0301 	orr.w	r3, r3, #1
 80050b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050ba:	4b2a      	ldr	r3, [pc, #168]	; (8005164 <HAL_RCCEx_EnableLSCO+0xca>)
 80050bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	60fb      	str	r3, [r7, #12]
 80050c4:	68fb      	ldr	r3, [r7, #12]

  /* Configue the LSCO pin in analog mode */
  GPIO_InitStruct.Pin = LSCO_PIN;
 80050c6:	2304      	movs	r3, #4
 80050c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050ca:	2303      	movs	r3, #3
 80050cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80050ce:	2302      	movs	r3, #2
 80050d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 80050d6:	f107 0310 	add.w	r3, r7, #16
 80050da:	4619      	mov	r1, r3
 80050dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050e0:	f7fc fadc 	bl	800169c <HAL_GPIO_Init>

  /* Update LSCOSEL clock source in Backup Domain control register */
  if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050e4:	4b1f      	ldr	r3, [pc, #124]	; (8005164 <HAL_RCCEx_EnableLSCO+0xca>)
 80050e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10e      	bne.n	800510e <HAL_RCCEx_EnableLSCO+0x74>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80050f0:	4a1c      	ldr	r2, [pc, #112]	; (8005164 <HAL_RCCEx_EnableLSCO+0xca>)
 80050f2:	4b1c      	ldr	r3, [pc, #112]	; (8005164 <HAL_RCCEx_EnableLSCO+0xca>)
 80050f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050fa:	6593      	str	r3, [r2, #88]	; 0x58
 80050fc:	4b19      	ldr	r3, [pc, #100]	; (8005164 <HAL_RCCEx_EnableLSCO+0xca>)
 80050fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005104:	60bb      	str	r3, [r7, #8]
 8005106:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 8005108:	2301      	movs	r3, #1
 800510a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800510e:	4b16      	ldr	r3, [pc, #88]	; (8005168 <HAL_RCCEx_EnableLSCO+0xce>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005116:	2b00      	cmp	r3, #0
 8005118:	d104      	bne.n	8005124 <HAL_RCCEx_EnableLSCO+0x8a>
  {
    HAL_PWR_EnableBkUpAccess();
 800511a:	f7fc fe07 	bl	8001d2c <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 800511e:	2301      	movs	r3, #1
 8005120:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 8005124:	490f      	ldr	r1, [pc, #60]	; (8005164 <HAL_RCCEx_EnableLSCO+0xca>)
 8005126:	4b0f      	ldr	r3, [pc, #60]	; (8005164 <HAL_RCCEx_EnableLSCO+0xca>)
 8005128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800512c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4313      	orrs	r3, r2
 8005134:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005138:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

  if(backupchanged == SET)
 800513c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005140:	2b01      	cmp	r3, #1
 8005142:	d101      	bne.n	8005148 <HAL_RCCEx_EnableLSCO+0xae>
  {
    HAL_PWR_DisableBkUpAccess();
 8005144:	f7fc fe02 	bl	8001d4c <HAL_PWR_DisableBkUpAccess>
  }
  if(pwrclkchanged == SET)
 8005148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800514c:	2b01      	cmp	r3, #1
 800514e:	d105      	bne.n	800515c <HAL_RCCEx_EnableLSCO+0xc2>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 8005150:	4a04      	ldr	r2, [pc, #16]	; (8005164 <HAL_RCCEx_EnableLSCO+0xca>)
 8005152:	4b04      	ldr	r3, [pc, #16]	; (8005164 <HAL_RCCEx_EnableLSCO+0xca>)
 8005154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005156:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800515a:	6593      	str	r3, [r2, #88]	; 0x58
  }
}
 800515c:	bf00      	nop
 800515e:	3728      	adds	r7, #40	; 0x28
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	40021000 	.word	0x40021000
 8005168:	40007000 	.word	0x40007000

0800516c <HAL_RCCEx_DisableLSCO>:
/**
  * @brief  Disable the Low Speed clock output.
  * @retval None
  */
void HAL_RCCEx_DisableLSCO(void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
  FlagStatus       pwrclkchanged = RESET;
 8005172:	2300      	movs	r3, #0
 8005174:	71fb      	strb	r3, [r7, #7]
  FlagStatus       backupchanged = RESET;
 8005176:	2300      	movs	r3, #0
 8005178:	71bb      	strb	r3, [r7, #6]

  /* Update LSCOEN bit in Backup Domain control register */
  if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800517a:	4b1c      	ldr	r3, [pc, #112]	; (80051ec <HAL_RCCEx_DisableLSCO+0x80>)
 800517c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800517e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10d      	bne.n	80051a2 <HAL_RCCEx_DisableLSCO+0x36>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005186:	4a19      	ldr	r2, [pc, #100]	; (80051ec <HAL_RCCEx_DisableLSCO+0x80>)
 8005188:	4b18      	ldr	r3, [pc, #96]	; (80051ec <HAL_RCCEx_DisableLSCO+0x80>)
 800518a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800518c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005190:	6593      	str	r3, [r2, #88]	; 0x58
 8005192:	4b16      	ldr	r3, [pc, #88]	; (80051ec <HAL_RCCEx_DisableLSCO+0x80>)
 8005194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800519a:	603b      	str	r3, [r7, #0]
 800519c:	683b      	ldr	r3, [r7, #0]
    pwrclkchanged = SET;
 800519e:	2301      	movs	r3, #1
 80051a0:	71fb      	strb	r3, [r7, #7]
  }
  if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051a2:	4b13      	ldr	r3, [pc, #76]	; (80051f0 <HAL_RCCEx_DisableLSCO+0x84>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d103      	bne.n	80051b6 <HAL_RCCEx_DisableLSCO+0x4a>
  {
    /* Enable access to the backup domain */
    HAL_PWR_EnableBkUpAccess();
 80051ae:	f7fc fdbd 	bl	8001d2c <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 80051b2:	2301      	movs	r3, #1
 80051b4:	71bb      	strb	r3, [r7, #6]
  }

  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSCOEN);
 80051b6:	4a0d      	ldr	r2, [pc, #52]	; (80051ec <HAL_RCCEx_DisableLSCO+0x80>)
 80051b8:	4b0c      	ldr	r3, [pc, #48]	; (80051ec <HAL_RCCEx_DisableLSCO+0x80>)
 80051ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /* Restore previous configuration */
  if(backupchanged == SET)
 80051c6:	79bb      	ldrb	r3, [r7, #6]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d101      	bne.n	80051d0 <HAL_RCCEx_DisableLSCO+0x64>
  {
    /* Disable access to the backup domain */
    HAL_PWR_DisableBkUpAccess();
 80051cc:	f7fc fdbe 	bl	8001d4c <HAL_PWR_DisableBkUpAccess>
  }
  if(pwrclkchanged == SET)
 80051d0:	79fb      	ldrb	r3, [r7, #7]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d105      	bne.n	80051e2 <HAL_RCCEx_DisableLSCO+0x76>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 80051d6:	4a05      	ldr	r2, [pc, #20]	; (80051ec <HAL_RCCEx_DisableLSCO+0x80>)
 80051d8:	4b04      	ldr	r3, [pc, #16]	; (80051ec <HAL_RCCEx_DisableLSCO+0x80>)
 80051da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
}
 80051e2:	bf00      	nop
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	40021000 	.word	0x40021000
 80051f0:	40007000 	.word	0x40007000

080051f4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80051f4:	b480      	push	{r7}
 80051f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80051f8:	4a05      	ldr	r2, [pc, #20]	; (8005210 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80051fa:	4b05      	ldr	r3, [pc, #20]	; (8005210 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f043 0304 	orr.w	r3, r3, #4
 8005202:	6013      	str	r3, [r2, #0]
}
 8005204:	bf00      	nop
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	40021000 	.word	0x40021000

08005214 <HAL_RCCEx_DisableMSIPLLMode>:
  * @brief  Disable the PLL-mode of the MSI.
  * @note   PLL-mode of the MSI is automatically reset when LSE oscillator is disabled.
  * @retval None
  */
void HAL_RCCEx_DisableMSIPLLMode(void)
{
 8005214:	b480      	push	{r7}
 8005216:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005218:	4a05      	ldr	r2, [pc, #20]	; (8005230 <HAL_RCCEx_DisableMSIPLLMode+0x1c>)
 800521a:	4b05      	ldr	r3, [pc, #20]	; (8005230 <HAL_RCCEx_DisableMSIPLLMode+0x1c>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f023 0304 	bic.w	r3, r3, #4
 8005222:	6013      	str	r3, [r2, #0]
}
 8005224:	bf00      	nop
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	40021000 	.word	0x40021000

08005234 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800523e:	2300      	movs	r3, #0
 8005240:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005242:	4b73      	ldr	r3, [pc, #460]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	f003 0303 	and.w	r3, r3, #3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d018      	beq.n	8005280 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800524e:	4b70      	ldr	r3, [pc, #448]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	f003 0203 	and.w	r2, r3, #3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	429a      	cmp	r2, r3
 800525c:	d10d      	bne.n	800527a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
       ||
 8005262:	2b00      	cmp	r3, #0
 8005264:	d009      	beq.n	800527a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005266:	4b6a      	ldr	r3, [pc, #424]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	091b      	lsrs	r3, r3, #4
 800526c:	f003 0307 	and.w	r3, r3, #7
 8005270:	1c5a      	adds	r2, r3, #1
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
       ||
 8005276:	429a      	cmp	r2, r3
 8005278:	d044      	beq.n	8005304 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	73fb      	strb	r3, [r7, #15]
 800527e:	e041      	b.n	8005304 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2b02      	cmp	r3, #2
 8005286:	d00c      	beq.n	80052a2 <RCCEx_PLLSAI1_Config+0x6e>
 8005288:	2b03      	cmp	r3, #3
 800528a:	d013      	beq.n	80052b4 <RCCEx_PLLSAI1_Config+0x80>
 800528c:	2b01      	cmp	r3, #1
 800528e:	d120      	bne.n	80052d2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005290:	4b5f      	ldr	r3, [pc, #380]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0302 	and.w	r3, r3, #2
 8005298:	2b00      	cmp	r3, #0
 800529a:	d11d      	bne.n	80052d8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052a0:	e01a      	b.n	80052d8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80052a2:	4b5b      	ldr	r3, [pc, #364]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d116      	bne.n	80052dc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052b2:	e013      	b.n	80052dc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80052b4:	4b56      	ldr	r3, [pc, #344]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10f      	bne.n	80052e0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052c0:	4b53      	ldr	r3, [pc, #332]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d109      	bne.n	80052e0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80052d0:	e006      	b.n	80052e0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	73fb      	strb	r3, [r7, #15]
      break;
 80052d6:	e004      	b.n	80052e2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80052d8:	bf00      	nop
 80052da:	e002      	b.n	80052e2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80052dc:	bf00      	nop
 80052de:	e000      	b.n	80052e2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80052e0:	bf00      	nop
    }

    if(status == HAL_OK)
 80052e2:	7bfb      	ldrb	r3, [r7, #15]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10d      	bne.n	8005304 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80052e8:	4849      	ldr	r0, [pc, #292]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 80052ea:	4b49      	ldr	r3, [pc, #292]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6819      	ldr	r1, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	3b01      	subs	r3, #1
 80052fc:	011b      	lsls	r3, r3, #4
 80052fe:	430b      	orrs	r3, r1
 8005300:	4313      	orrs	r3, r2
 8005302:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005304:	7bfb      	ldrb	r3, [r7, #15]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d17d      	bne.n	8005406 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800530a:	4a41      	ldr	r2, [pc, #260]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 800530c:	4b40      	ldr	r3, [pc, #256]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005314:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005316:	f7fa fffd 	bl	8000314 <HAL_GetTick>
 800531a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800531c:	e009      	b.n	8005332 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800531e:	f7fa fff9 	bl	8000314 <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	2b02      	cmp	r3, #2
 800532a:	d902      	bls.n	8005332 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	73fb      	strb	r3, [r7, #15]
        break;
 8005330:	e005      	b.n	800533e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005332:	4b37      	ldr	r3, [pc, #220]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1ef      	bne.n	800531e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800533e:	7bfb      	ldrb	r3, [r7, #15]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d160      	bne.n	8005406 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d111      	bne.n	800536e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800534a:	4831      	ldr	r0, [pc, #196]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 800534c:	4b30      	ldr	r3, [pc, #192]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	6892      	ldr	r2, [r2, #8]
 800535c:	0211      	lsls	r1, r2, #8
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	68d2      	ldr	r2, [r2, #12]
 8005362:	0912      	lsrs	r2, r2, #4
 8005364:	0452      	lsls	r2, r2, #17
 8005366:	430a      	orrs	r2, r1
 8005368:	4313      	orrs	r3, r2
 800536a:	6103      	str	r3, [r0, #16]
 800536c:	e027      	b.n	80053be <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d112      	bne.n	800539a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005374:	4826      	ldr	r0, [pc, #152]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005376:	4b26      	ldr	r3, [pc, #152]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800537e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	6892      	ldr	r2, [r2, #8]
 8005386:	0211      	lsls	r1, r2, #8
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	6912      	ldr	r2, [r2, #16]
 800538c:	0852      	lsrs	r2, r2, #1
 800538e:	3a01      	subs	r2, #1
 8005390:	0552      	lsls	r2, r2, #21
 8005392:	430a      	orrs	r2, r1
 8005394:	4313      	orrs	r3, r2
 8005396:	6103      	str	r3, [r0, #16]
 8005398:	e011      	b.n	80053be <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800539a:	481d      	ldr	r0, [pc, #116]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 800539c:	4b1c      	ldr	r3, [pc, #112]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80053a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	6892      	ldr	r2, [r2, #8]
 80053ac:	0211      	lsls	r1, r2, #8
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	6952      	ldr	r2, [r2, #20]
 80053b2:	0852      	lsrs	r2, r2, #1
 80053b4:	3a01      	subs	r2, #1
 80053b6:	0652      	lsls	r2, r2, #25
 80053b8:	430a      	orrs	r2, r1
 80053ba:	4313      	orrs	r3, r2
 80053bc:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80053be:	4a14      	ldr	r2, [pc, #80]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053c0:	4b13      	ldr	r3, [pc, #76]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ca:	f7fa ffa3 	bl	8000314 <HAL_GetTick>
 80053ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053d0:	e009      	b.n	80053e6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053d2:	f7fa ff9f 	bl	8000314 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d902      	bls.n	80053e6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	73fb      	strb	r3, [r7, #15]
          break;
 80053e4:	e005      	b.n	80053f2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053e6:	4b0a      	ldr	r3, [pc, #40]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d0ef      	beq.n	80053d2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80053f2:	7bfb      	ldrb	r3, [r7, #15]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d106      	bne.n	8005406 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80053f8:	4905      	ldr	r1, [pc, #20]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053fa:	4b05      	ldr	r3, [pc, #20]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053fc:	691a      	ldr	r2, [r3, #16]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	4313      	orrs	r3, r2
 8005404:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005406:	7bfb      	ldrb	r3, [r7, #15]
}
 8005408:	4618      	mov	r0, r3
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	40021000 	.word	0x40021000

08005414 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005422:	4b68      	ldr	r3, [pc, #416]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	f003 0303 	and.w	r3, r3, #3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d018      	beq.n	8005460 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800542e:	4b65      	ldr	r3, [pc, #404]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f003 0203 	and.w	r2, r3, #3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	429a      	cmp	r2, r3
 800543c:	d10d      	bne.n	800545a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
       ||
 8005442:	2b00      	cmp	r3, #0
 8005444:	d009      	beq.n	800545a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005446:	4b5f      	ldr	r3, [pc, #380]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	091b      	lsrs	r3, r3, #4
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	1c5a      	adds	r2, r3, #1
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
       ||
 8005456:	429a      	cmp	r2, r3
 8005458:	d044      	beq.n	80054e4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	73fb      	strb	r3, [r7, #15]
 800545e:	e041      	b.n	80054e4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2b02      	cmp	r3, #2
 8005466:	d00c      	beq.n	8005482 <RCCEx_PLLSAI2_Config+0x6e>
 8005468:	2b03      	cmp	r3, #3
 800546a:	d013      	beq.n	8005494 <RCCEx_PLLSAI2_Config+0x80>
 800546c:	2b01      	cmp	r3, #1
 800546e:	d120      	bne.n	80054b2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005470:	4b54      	ldr	r3, [pc, #336]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0302 	and.w	r3, r3, #2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d11d      	bne.n	80054b8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005480:	e01a      	b.n	80054b8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005482:	4b50      	ldr	r3, [pc, #320]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800548a:	2b00      	cmp	r3, #0
 800548c:	d116      	bne.n	80054bc <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005492:	e013      	b.n	80054bc <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005494:	4b4b      	ldr	r3, [pc, #300]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d10f      	bne.n	80054c0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054a0:	4b48      	ldr	r3, [pc, #288]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d109      	bne.n	80054c0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80054b0:	e006      	b.n	80054c0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	73fb      	strb	r3, [r7, #15]
      break;
 80054b6:	e004      	b.n	80054c2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80054b8:	bf00      	nop
 80054ba:	e002      	b.n	80054c2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80054bc:	bf00      	nop
 80054be:	e000      	b.n	80054c2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80054c0:	bf00      	nop
    }

    if(status == HAL_OK)
 80054c2:	7bfb      	ldrb	r3, [r7, #15]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10d      	bne.n	80054e4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80054c8:	483e      	ldr	r0, [pc, #248]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80054ca:	4b3e      	ldr	r3, [pc, #248]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6819      	ldr	r1, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	3b01      	subs	r3, #1
 80054dc:	011b      	lsls	r3, r3, #4
 80054de:	430b      	orrs	r3, r1
 80054e0:	4313      	orrs	r3, r2
 80054e2:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80054e4:	7bfb      	ldrb	r3, [r7, #15]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d167      	bne.n	80055ba <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80054ea:	4a36      	ldr	r2, [pc, #216]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80054ec:	4b35      	ldr	r3, [pc, #212]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054f6:	f7fa ff0d 	bl	8000314 <HAL_GetTick>
 80054fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80054fc:	e009      	b.n	8005512 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80054fe:	f7fa ff09 	bl	8000314 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d902      	bls.n	8005512 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	73fb      	strb	r3, [r7, #15]
        break;
 8005510:	e005      	b.n	800551e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005512:	4b2c      	ldr	r3, [pc, #176]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1ef      	bne.n	80054fe <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800551e:	7bfb      	ldrb	r3, [r7, #15]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d14a      	bne.n	80055ba <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d111      	bne.n	800554e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800552a:	4826      	ldr	r0, [pc, #152]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800552c:	4b25      	ldr	r3, [pc, #148]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	6892      	ldr	r2, [r2, #8]
 800553c:	0211      	lsls	r1, r2, #8
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	68d2      	ldr	r2, [r2, #12]
 8005542:	0912      	lsrs	r2, r2, #4
 8005544:	0452      	lsls	r2, r2, #17
 8005546:	430a      	orrs	r2, r1
 8005548:	4313      	orrs	r3, r2
 800554a:	6143      	str	r3, [r0, #20]
 800554c:	e011      	b.n	8005572 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800554e:	481d      	ldr	r0, [pc, #116]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005550:	4b1c      	ldr	r3, [pc, #112]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005558:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	6892      	ldr	r2, [r2, #8]
 8005560:	0211      	lsls	r1, r2, #8
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	6912      	ldr	r2, [r2, #16]
 8005566:	0852      	lsrs	r2, r2, #1
 8005568:	3a01      	subs	r2, #1
 800556a:	0652      	lsls	r2, r2, #25
 800556c:	430a      	orrs	r2, r1
 800556e:	4313      	orrs	r3, r2
 8005570:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005572:	4a14      	ldr	r2, [pc, #80]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005574:	4b13      	ldr	r3, [pc, #76]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800557c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800557e:	f7fa fec9 	bl	8000314 <HAL_GetTick>
 8005582:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005584:	e009      	b.n	800559a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005586:	f7fa fec5 	bl	8000314 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d902      	bls.n	800559a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	73fb      	strb	r3, [r7, #15]
          break;
 8005598:	e005      	b.n	80055a6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800559a:	4b0a      	ldr	r3, [pc, #40]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d0ef      	beq.n	8005586 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80055a6:	7bfb      	ldrb	r3, [r7, #15]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d106      	bne.n	80055ba <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80055ac:	4905      	ldr	r1, [pc, #20]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80055ae:	4b05      	ldr	r3, [pc, #20]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80055b0:	695a      	ldr	r2, [r3, #20]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80055ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	40021000 	.word	0x40021000

080055c8 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b089      	sub	sp, #36	; 0x24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80055d2:	2300      	movs	r3, #0
 80055d4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80055d6:	2300      	movs	r3, #0
 80055d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80055da:	2300      	movs	r3, #0
 80055dc:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055e4:	d10c      	bne.n	8005600 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80055e6:	4b62      	ldr	r3, [pc, #392]	; (8005770 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80055e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ec:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80055f0:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80055f8:	d112      	bne.n	8005620 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80055fa:	4b5e      	ldr	r3, [pc, #376]	; (8005774 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 80055fc:	61fb      	str	r3, [r7, #28]
 80055fe:	e00f      	b.n	8005620 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005606:	d10b      	bne.n	8005620 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005608:	4b59      	ldr	r3, [pc, #356]	; (8005770 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800560a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800560e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8005612:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800561a:	d101      	bne.n	8005620 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800561c:	4b55      	ldr	r3, [pc, #340]	; (8005774 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 800561e:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	2b00      	cmp	r3, #0
 8005624:	f040 809c 	bne.w	8005760 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
  {
    pllvco = InputFrequency;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005632:	d003      	beq.n	800563c <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800563a:	d12d      	bne.n	8005698 <RCCEx_GetSAIxPeriphCLKFreq+0xd0>
    {
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 800563c:	4b4c      	ldr	r3, [pc, #304]	; (8005770 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 808b 	beq.w	8005760 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800564a:	4b49      	ldr	r3, [pc, #292]	; (8005770 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	091b      	lsrs	r3, r3, #4
 8005650:	f003 0307 	and.w	r3, r3, #7
 8005654:	3301      	adds	r3, #1
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	fbb2 f3f3 	udiv	r3, r2, r3
 800565c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800565e:	4b44      	ldr	r3, [pc, #272]	; (8005770 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	0a1b      	lsrs	r3, r3, #8
 8005664:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005668:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10a      	bne.n	8005686 <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005670:	4b3f      	ldr	r3, [pc, #252]	; (8005770 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d002      	beq.n	8005682 <RCCEx_GetSAIxPeriphCLKFreq+0xba>
          {
            pllp = 17U;
 800567c:	2311      	movs	r3, #17
 800567e:	617b      	str	r3, [r7, #20]
 8005680:	e001      	b.n	8005686 <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
          }
          else
          {
            pllp = 7U;
 8005682:	2307      	movs	r3, #7
 8005684:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	fb02 f203 	mul.w	r2, r2, r3
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	fbb2 f3f3 	udiv	r3, r2, r3
 8005694:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 8005696:	e063      	b.n	8005760 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d12c      	bne.n	80056f8 <RCCEx_GetSAIxPeriphCLKFreq+0x130>
    {
      if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 800569e:	4b34      	ldr	r3, [pc, #208]	; (8005770 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d05a      	beq.n	8005760 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80056aa:	4b31      	ldr	r3, [pc, #196]	; (8005770 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	091b      	lsrs	r3, r3, #4
 80056b0:	f003 0307 	and.w	r3, r3, #7
 80056b4:	3301      	adds	r3, #1
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056bc:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80056be:	4b2c      	ldr	r3, [pc, #176]	; (8005770 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	0a1b      	lsrs	r3, r3, #8
 80056c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056c8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10a      	bne.n	80056e6 <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80056d0:	4b27      	ldr	r3, [pc, #156]	; (8005770 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d002      	beq.n	80056e2 <RCCEx_GetSAIxPeriphCLKFreq+0x11a>
          {
            pllp = 17U;
 80056dc:	2311      	movs	r3, #17
 80056de:	617b      	str	r3, [r7, #20]
 80056e0:	e001      	b.n	80056e6 <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
          }
          else
          {
            pllp = 7U;
 80056e2:	2307      	movs	r3, #7
 80056e4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	fb02 f203 	mul.w	r2, r2, r3
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f4:	61fb      	str	r3, [r7, #28]
 80056f6:	e033      	b.n	8005760 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056fe:	d003      	beq.n	8005708 <RCCEx_GetSAIxPeriphCLKFreq+0x140>
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005706:	d12b      	bne.n	8005760 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
    {
      if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 8005708:	4b19      	ldr	r3, [pc, #100]	; (8005770 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d025      	beq.n	8005760 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005714:	4b16      	ldr	r3, [pc, #88]	; (8005770 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	091b      	lsrs	r3, r3, #4
 800571a:	f003 0307 	and.w	r3, r3, #7
 800571e:	3301      	adds	r3, #1
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	fbb2 f3f3 	udiv	r3, r2, r3
 8005726:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005728:	4b11      	ldr	r3, [pc, #68]	; (8005770 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	0a1b      	lsrs	r3, r3, #8
 800572e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005732:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10a      	bne.n	8005750 <RCCEx_GetSAIxPeriphCLKFreq+0x188>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800573a:	4b0d      	ldr	r3, [pc, #52]	; (8005770 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d002      	beq.n	800574c <RCCEx_GetSAIxPeriphCLKFreq+0x184>
          {
            pllp = 17U;
 8005746:	2311      	movs	r3, #17
 8005748:	617b      	str	r3, [r7, #20]
 800574a:	e001      	b.n	8005750 <RCCEx_GetSAIxPeriphCLKFreq+0x188>
          }
          else
          {
            pllp = 7U;
 800574c:	2307      	movs	r3, #7
 800574e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	fb02 f203 	mul.w	r2, r2, r3
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	fbb2 f3f3 	udiv	r3, r2, r3
 800575e:	61fb      	str	r3, [r7, #28]
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8005760:	69fb      	ldr	r3, [r7, #28]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3724      	adds	r7, #36	; 0x24
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	40021000 	.word	0x40021000
 8005774:	001fff68 	.word	0x001fff68

08005778 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e01d      	b.n	80057c6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d106      	bne.n	80057a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f009 fa96 	bl	800ecd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2202      	movs	r2, #2
 80057a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	3304      	adds	r3, #4
 80057b4:	4619      	mov	r1, r3
 80057b6:	4610      	mov	r0, r2
 80057b8:	f003 ff74 	bl	80096a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b082      	sub	sp, #8
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2202      	movs	r2, #2
 80057da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	6a1a      	ldr	r2, [r3, #32]
 80057e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80057e8:	4013      	ands	r3, r2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10f      	bne.n	800580e <HAL_TIM_Base_DeInit+0x40>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6a1a      	ldr	r2, [r3, #32]
 80057f4:	f240 4344 	movw	r3, #1092	; 0x444
 80057f8:	4013      	ands	r3, r2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d107      	bne.n	800580e <HAL_TIM_Base_DeInit+0x40>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	6812      	ldr	r2, [r2, #0]
 8005806:	6812      	ldr	r2, [r2, #0]
 8005808:	f022 0201 	bic.w	r2, r2, #1
 800580c:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f009 fa84 	bl	800ed1c <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800582e:	b480      	push	{r7}
 8005830:	b083      	sub	sp, #12
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005836:	bf00      	nop
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
  * @brief  DeInitializes TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim)
{
 8005842:	b480      	push	{r7}
 8005844:	b083      	sub	sp, #12
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspDeInit could be implemented in the user file
   */
}
 800584a:	bf00      	nop
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005856:	b480      	push	{r7}
 8005858:	b085      	sub	sp, #20
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2202      	movs	r2, #2
 8005862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	4b0e      	ldr	r3, [pc, #56]	; (80058a8 <HAL_TIM_Base_Start+0x52>)
 800586e:	4013      	ands	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2b06      	cmp	r3, #6
 8005876:	d00b      	beq.n	8005890 <HAL_TIM_Base_Start+0x3a>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800587e:	d007      	beq.n	8005890 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	6812      	ldr	r2, [r2, #0]
 8005888:	6812      	ldr	r2, [r2, #0]
 800588a:	f042 0201 	orr.w	r2, r2, #1
 800588e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3714      	adds	r7, #20
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	00010007 	.word	0x00010007

080058ac <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2202      	movs	r2, #2
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6a1a      	ldr	r2, [r3, #32]
 80058c2:	f241 1311 	movw	r3, #4369	; 0x1111
 80058c6:	4013      	ands	r3, r2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10f      	bne.n	80058ec <HAL_TIM_Base_Stop+0x40>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6a1a      	ldr	r2, [r3, #32]
 80058d2:	f240 4344 	movw	r3, #1092	; 0x444
 80058d6:	4013      	ands	r3, r2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d107      	bne.n	80058ec <HAL_TIM_Base_Stop+0x40>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6812      	ldr	r2, [r2, #0]
 80058e4:	6812      	ldr	r2, [r2, #0]
 80058e6:	f022 0201 	bic.w	r2, r2, #1
 80058ea:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005902:	b480      	push	{r7}
 8005904:	b085      	sub	sp, #20
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	6812      	ldr	r2, [r2, #0]
 8005912:	68d2      	ldr	r2, [r2, #12]
 8005914:	f042 0201 	orr.w	r2, r2, #1
 8005918:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	4b0c      	ldr	r3, [pc, #48]	; (8005954 <HAL_TIM_Base_Start_IT+0x52>)
 8005922:	4013      	ands	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2b06      	cmp	r3, #6
 800592a:	d00b      	beq.n	8005944 <HAL_TIM_Base_Start_IT+0x42>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005932:	d007      	beq.n	8005944 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	6812      	ldr	r2, [r2, #0]
 800593c:	6812      	ldr	r2, [r2, #0]
 800593e:	f042 0201 	orr.w	r2, r2, #1
 8005942:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	00010007 	.word	0x00010007

08005958 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	6812      	ldr	r2, [r2, #0]
 8005968:	68d2      	ldr	r2, [r2, #12]
 800596a:	f022 0201 	bic.w	r2, r2, #1
 800596e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6a1a      	ldr	r2, [r3, #32]
 8005976:	f241 1311 	movw	r3, #4369	; 0x1111
 800597a:	4013      	ands	r3, r2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10f      	bne.n	80059a0 <HAL_TIM_Base_Stop_IT+0x48>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6a1a      	ldr	r2, [r3, #32]
 8005986:	f240 4344 	movw	r3, #1092	; 0x444
 800598a:	4013      	ands	r3, r2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d107      	bne.n	80059a0 <HAL_TIM_Base_Stop_IT+0x48>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	6812      	ldr	r2, [r2, #0]
 8005998:	6812      	ldr	r2, [r2, #0]
 800599a:	f022 0201 	bic.w	r2, r2, #1
 800599e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <HAL_TIM_Base_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b086      	sub	sp, #24
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	60f8      	str	r0, [r7, #12]
 80059b6:	60b9      	str	r1, [r7, #8]
 80059b8:	4613      	mov	r3, r2
 80059ba:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));

  if ((htim->State == HAL_TIM_STATE_BUSY))
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d101      	bne.n	80059cc <HAL_TIM_Base_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 80059c8:	2302      	movs	r3, #2
 80059ca:	e04a      	b.n	8005a62 <HAL_TIM_Base_Start_DMA+0xb4>
  }
  else if ((htim->State == HAL_TIM_STATE_READY))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d10b      	bne.n	80059f0 <HAL_TIM_Base_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d104      	bne.n	80059e8 <HAL_TIM_Base_Start_DMA+0x3a>
 80059de:	88fb      	ldrh	r3, [r7, #6]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d001      	beq.n	80059e8 <HAL_TIM_Base_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e03c      	b.n	8005a62 <HAL_TIM_Base_Start_DMA+0xb4>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2202      	movs	r2, #2
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  {
    /* nothing to do */
  }

  /* Set the DMA Period elapsed callbacks */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	4a1d      	ldr	r2, [pc, #116]	; (8005a6c <HAL_TIM_Base_Start_DMA+0xbe>)
 80059f6:	62da      	str	r2, [r3, #44]	; 0x2c
  htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6a1b      	ldr	r3, [r3, #32]
 80059fc:	4a1c      	ldr	r2, [pc, #112]	; (8005a70 <HAL_TIM_Base_Start_DMA+0xc2>)
 80059fe:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6a1b      	ldr	r3, [r3, #32]
 8005a04:	4a1b      	ldr	r2, [pc, #108]	; (8005a74 <HAL_TIM_Base_Start_DMA+0xc6>)
 8005a06:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA channel */
  if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)pData, (uint32_t)&htim->Instance->ARR, Length) != HAL_OK)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6a18      	ldr	r0, [r3, #32]
 8005a0c:	68b9      	ldr	r1, [r7, #8]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	332c      	adds	r3, #44	; 0x2c
 8005a14:	461a      	mov	r2, r3
 8005a16:	88fb      	ldrh	r3, [r7, #6]
 8005a18:	f7fb fb21 	bl	800105e <HAL_DMA_Start_IT>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <HAL_TIM_Base_Start_DMA+0x78>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e01d      	b.n	8005a62 <HAL_TIM_Base_Start_DMA+0xb4>
  }

  /* Enable the TIM Update DMA request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_UPDATE);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	6812      	ldr	r2, [r2, #0]
 8005a2e:	68d2      	ldr	r2, [r2, #12]
 8005a30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a34:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	4b0e      	ldr	r3, [pc, #56]	; (8005a78 <HAL_TIM_Base_Start_DMA+0xca>)
 8005a3e:	4013      	ands	r3, r2
 8005a40:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	2b06      	cmp	r3, #6
 8005a46:	d00b      	beq.n	8005a60 <HAL_TIM_Base_Start_DMA+0xb2>
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a4e:	d007      	beq.n	8005a60 <HAL_TIM_Base_Start_DMA+0xb2>
  {
    __HAL_TIM_ENABLE(htim);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	6812      	ldr	r2, [r2, #0]
 8005a58:	6812      	ldr	r2, [r2, #0]
 8005a5a:	f042 0201 	orr.w	r2, r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3718      	adds	r7, #24
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	08009615 	.word	0x08009615
 8005a70:	08009639 	.word	0x08009639
 8005a74:	08009431 	.word	0x08009431
 8005a78:	00010007 	.word	0x00010007

08005a7c <HAL_TIM_Base_Stop_DMA>:
  * @brief  Stops the TIM Base generation in DMA mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_DMA(TIM_HandleTypeDef *htim)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));

  /* Disable the TIM Update DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_UPDATE);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	6812      	ldr	r2, [r2, #0]
 8005a8c:	68d2      	ldr	r2, [r2, #12]
 8005a8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a92:	60da      	str	r2, [r3, #12]

  (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a1b      	ldr	r3, [r3, #32]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7fb fb7e 	bl	800119a <HAL_DMA_Abort_IT>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	6a1a      	ldr	r2, [r3, #32]
 8005aa4:	f241 1311 	movw	r3, #4369	; 0x1111
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10f      	bne.n	8005ace <HAL_TIM_Base_Stop_DMA+0x52>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6a1a      	ldr	r2, [r3, #32]
 8005ab4:	f240 4344 	movw	r3, #1092	; 0x444
 8005ab8:	4013      	ands	r3, r2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d107      	bne.n	8005ace <HAL_TIM_Base_Stop_DMA+0x52>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6812      	ldr	r2, [r2, #0]
 8005ac6:	6812      	ldr	r2, [r2, #0]
 8005ac8:	f022 0201 	bic.w	r2, r2, #1
 8005acc:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3708      	adds	r7, #8
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e01d      	b.n	8005b2e <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d106      	bne.n	8005b0c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f845 	bl	8005b96 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2202      	movs	r2, #2
 8005b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	4610      	mov	r0, r2
 8005b20:	f003 fdc0 	bl	80096a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3708      	adds	r7, #8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <HAL_TIM_OC_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b082      	sub	sp, #8
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2202      	movs	r2, #2
 8005b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6a1a      	ldr	r2, [r3, #32]
 8005b4c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005b50:	4013      	ands	r3, r2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10f      	bne.n	8005b76 <HAL_TIM_OC_DeInit+0x40>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6a1a      	ldr	r2, [r3, #32]
 8005b5c:	f240 4344 	movw	r3, #1092	; 0x444
 8005b60:	4013      	ands	r3, r2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d107      	bne.n	8005b76 <HAL_TIM_OC_DeInit+0x40>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	6812      	ldr	r2, [r2, #0]
 8005b6e:	6812      	ldr	r2, [r2, #0]
 8005b70:	f022 0201 	bic.w	r2, r2, #1
 8005b74:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->OC_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_OC_MspDeInit(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f817 	bl	8005baa <HAL_TIM_OC_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3708      	adds	r7, #8
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b083      	sub	sp, #12
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005b9e:	bf00      	nop
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <HAL_TIM_OC_MspDeInit>:
  * @brief  DeInitializes TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b083      	sub	sp, #12
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspDeInit could be implemented in the user file
   */
}
 8005bb2:	bf00      	nop
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b084      	sub	sp, #16
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
 8005bc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	6839      	ldr	r1, [r7, #0]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f004 fb1d 	bl	800a210 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a1f      	ldr	r2, [pc, #124]	; (8005c58 <HAL_TIM_OC_Start+0x9a>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d013      	beq.n	8005c08 <HAL_TIM_OC_Start+0x4a>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a1d      	ldr	r2, [pc, #116]	; (8005c5c <HAL_TIM_OC_Start+0x9e>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d00e      	beq.n	8005c08 <HAL_TIM_OC_Start+0x4a>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a1c      	ldr	r2, [pc, #112]	; (8005c60 <HAL_TIM_OC_Start+0xa2>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d009      	beq.n	8005c08 <HAL_TIM_OC_Start+0x4a>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a1a      	ldr	r2, [pc, #104]	; (8005c64 <HAL_TIM_OC_Start+0xa6>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d004      	beq.n	8005c08 <HAL_TIM_OC_Start+0x4a>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a19      	ldr	r2, [pc, #100]	; (8005c68 <HAL_TIM_OC_Start+0xaa>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d101      	bne.n	8005c0c <HAL_TIM_OC_Start+0x4e>
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e000      	b.n	8005c0e <HAL_TIM_OC_Start+0x50>
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d007      	beq.n	8005c22 <HAL_TIM_OC_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	6812      	ldr	r2, [r2, #0]
 8005c1a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005c1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689a      	ldr	r2, [r3, #8]
 8005c28:	4b10      	ldr	r3, [pc, #64]	; (8005c6c <HAL_TIM_OC_Start+0xae>)
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2b06      	cmp	r3, #6
 8005c32:	d00b      	beq.n	8005c4c <HAL_TIM_OC_Start+0x8e>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c3a:	d007      	beq.n	8005c4c <HAL_TIM_OC_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	6812      	ldr	r2, [r2, #0]
 8005c44:	6812      	ldr	r2, [r2, #0]
 8005c46:	f042 0201 	orr.w	r2, r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	40012c00 	.word	0x40012c00
 8005c5c:	40013400 	.word	0x40013400
 8005c60:	40014000 	.word	0x40014000
 8005c64:	40014400 	.word	0x40014400
 8005c68:	40014800 	.word	0x40014800
 8005c6c:	00010007 	.word	0x00010007

08005c70 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	6839      	ldr	r1, [r7, #0]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f004 fac4 	bl	800a210 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a28      	ldr	r2, [pc, #160]	; (8005d30 <HAL_TIM_OC_Stop+0xc0>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d013      	beq.n	8005cba <HAL_TIM_OC_Stop+0x4a>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a27      	ldr	r2, [pc, #156]	; (8005d34 <HAL_TIM_OC_Stop+0xc4>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d00e      	beq.n	8005cba <HAL_TIM_OC_Stop+0x4a>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a25      	ldr	r2, [pc, #148]	; (8005d38 <HAL_TIM_OC_Stop+0xc8>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d009      	beq.n	8005cba <HAL_TIM_OC_Stop+0x4a>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a24      	ldr	r2, [pc, #144]	; (8005d3c <HAL_TIM_OC_Stop+0xcc>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d004      	beq.n	8005cba <HAL_TIM_OC_Stop+0x4a>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a22      	ldr	r2, [pc, #136]	; (8005d40 <HAL_TIM_OC_Stop+0xd0>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d101      	bne.n	8005cbe <HAL_TIM_OC_Stop+0x4e>
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e000      	b.n	8005cc0 <HAL_TIM_OC_Stop+0x50>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d017      	beq.n	8005cf4 <HAL_TIM_OC_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6a1a      	ldr	r2, [r3, #32]
 8005cca:	f241 1311 	movw	r3, #4369	; 0x1111
 8005cce:	4013      	ands	r3, r2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10f      	bne.n	8005cf4 <HAL_TIM_OC_Stop+0x84>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6a1a      	ldr	r2, [r3, #32]
 8005cda:	f240 4344 	movw	r3, #1092	; 0x444
 8005cde:	4013      	ands	r3, r2
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d107      	bne.n	8005cf4 <HAL_TIM_OC_Stop+0x84>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	6812      	ldr	r2, [r2, #0]
 8005cec:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005cee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cf2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	6a1a      	ldr	r2, [r3, #32]
 8005cfa:	f241 1311 	movw	r3, #4369	; 0x1111
 8005cfe:	4013      	ands	r3, r2
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10f      	bne.n	8005d24 <HAL_TIM_OC_Stop+0xb4>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6a1a      	ldr	r2, [r3, #32]
 8005d0a:	f240 4344 	movw	r3, #1092	; 0x444
 8005d0e:	4013      	ands	r3, r2
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d107      	bne.n	8005d24 <HAL_TIM_OC_Stop+0xb4>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	6812      	ldr	r2, [r2, #0]
 8005d1c:	6812      	ldr	r2, [r2, #0]
 8005d1e:	f022 0201 	bic.w	r2, r2, #1
 8005d22:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3708      	adds	r7, #8
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	40012c00 	.word	0x40012c00
 8005d34:	40013400 	.word	0x40013400
 8005d38:	40014000 	.word	0x40014000
 8005d3c:	40014400 	.word	0x40014400
 8005d40:	40014800 	.word	0x40014800

08005d44 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	2b0c      	cmp	r3, #12
 8005d52:	d841      	bhi.n	8005dd8 <HAL_TIM_OC_Start_IT+0x94>
 8005d54:	a201      	add	r2, pc, #4	; (adr r2, 8005d5c <HAL_TIM_OC_Start_IT+0x18>)
 8005d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5a:	bf00      	nop
 8005d5c:	08005d91 	.word	0x08005d91
 8005d60:	08005dd9 	.word	0x08005dd9
 8005d64:	08005dd9 	.word	0x08005dd9
 8005d68:	08005dd9 	.word	0x08005dd9
 8005d6c:	08005da3 	.word	0x08005da3
 8005d70:	08005dd9 	.word	0x08005dd9
 8005d74:	08005dd9 	.word	0x08005dd9
 8005d78:	08005dd9 	.word	0x08005dd9
 8005d7c:	08005db5 	.word	0x08005db5
 8005d80:	08005dd9 	.word	0x08005dd9
 8005d84:	08005dd9 	.word	0x08005dd9
 8005d88:	08005dd9 	.word	0x08005dd9
 8005d8c:	08005dc7 	.word	0x08005dc7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	6812      	ldr	r2, [r2, #0]
 8005d98:	68d2      	ldr	r2, [r2, #12]
 8005d9a:	f042 0202 	orr.w	r2, r2, #2
 8005d9e:	60da      	str	r2, [r3, #12]
      break;
 8005da0:	e01b      	b.n	8005dda <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	6812      	ldr	r2, [r2, #0]
 8005daa:	68d2      	ldr	r2, [r2, #12]
 8005dac:	f042 0204 	orr.w	r2, r2, #4
 8005db0:	60da      	str	r2, [r3, #12]
      break;
 8005db2:	e012      	b.n	8005dda <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	6812      	ldr	r2, [r2, #0]
 8005dbc:	68d2      	ldr	r2, [r2, #12]
 8005dbe:	f042 0208 	orr.w	r2, r2, #8
 8005dc2:	60da      	str	r2, [r3, #12]
      break;
 8005dc4:	e009      	b.n	8005dda <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	6812      	ldr	r2, [r2, #0]
 8005dce:	68d2      	ldr	r2, [r2, #12]
 8005dd0:	f042 0210 	orr.w	r2, r2, #16
 8005dd4:	60da      	str	r2, [r3, #12]
      break;
 8005dd6:	e000      	b.n	8005dda <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8005dd8:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2201      	movs	r2, #1
 8005de0:	6839      	ldr	r1, [r7, #0]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f004 fa14 	bl	800a210 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a1e      	ldr	r2, [pc, #120]	; (8005e68 <HAL_TIM_OC_Start_IT+0x124>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d013      	beq.n	8005e1a <HAL_TIM_OC_Start_IT+0xd6>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a1d      	ldr	r2, [pc, #116]	; (8005e6c <HAL_TIM_OC_Start_IT+0x128>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d00e      	beq.n	8005e1a <HAL_TIM_OC_Start_IT+0xd6>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a1b      	ldr	r2, [pc, #108]	; (8005e70 <HAL_TIM_OC_Start_IT+0x12c>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d009      	beq.n	8005e1a <HAL_TIM_OC_Start_IT+0xd6>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a1a      	ldr	r2, [pc, #104]	; (8005e74 <HAL_TIM_OC_Start_IT+0x130>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d004      	beq.n	8005e1a <HAL_TIM_OC_Start_IT+0xd6>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a18      	ldr	r2, [pc, #96]	; (8005e78 <HAL_TIM_OC_Start_IT+0x134>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d101      	bne.n	8005e1e <HAL_TIM_OC_Start_IT+0xda>
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e000      	b.n	8005e20 <HAL_TIM_OC_Start_IT+0xdc>
 8005e1e:	2300      	movs	r3, #0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d007      	beq.n	8005e34 <HAL_TIM_OC_Start_IT+0xf0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	6812      	ldr	r2, [r2, #0]
 8005e2c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005e2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e32:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689a      	ldr	r2, [r3, #8]
 8005e3a:	4b10      	ldr	r3, [pc, #64]	; (8005e7c <HAL_TIM_OC_Start_IT+0x138>)
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2b06      	cmp	r3, #6
 8005e44:	d00b      	beq.n	8005e5e <HAL_TIM_OC_Start_IT+0x11a>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e4c:	d007      	beq.n	8005e5e <HAL_TIM_OC_Start_IT+0x11a>
  {
    __HAL_TIM_ENABLE(htim);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	6812      	ldr	r2, [r2, #0]
 8005e56:	6812      	ldr	r2, [r2, #0]
 8005e58:	f042 0201 	orr.w	r2, r2, #1
 8005e5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	40012c00 	.word	0x40012c00
 8005e6c:	40013400 	.word	0x40013400
 8005e70:	40014000 	.word	0x40014000
 8005e74:	40014400 	.word	0x40014400
 8005e78:	40014800 	.word	0x40014800
 8005e7c:	00010007 	.word	0x00010007

08005e80 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2b0c      	cmp	r3, #12
 8005e8e:	d841      	bhi.n	8005f14 <HAL_TIM_OC_Stop_IT+0x94>
 8005e90:	a201      	add	r2, pc, #4	; (adr r2, 8005e98 <HAL_TIM_OC_Stop_IT+0x18>)
 8005e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e96:	bf00      	nop
 8005e98:	08005ecd 	.word	0x08005ecd
 8005e9c:	08005f15 	.word	0x08005f15
 8005ea0:	08005f15 	.word	0x08005f15
 8005ea4:	08005f15 	.word	0x08005f15
 8005ea8:	08005edf 	.word	0x08005edf
 8005eac:	08005f15 	.word	0x08005f15
 8005eb0:	08005f15 	.word	0x08005f15
 8005eb4:	08005f15 	.word	0x08005f15
 8005eb8:	08005ef1 	.word	0x08005ef1
 8005ebc:	08005f15 	.word	0x08005f15
 8005ec0:	08005f15 	.word	0x08005f15
 8005ec4:	08005f15 	.word	0x08005f15
 8005ec8:	08005f03 	.word	0x08005f03
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	6812      	ldr	r2, [r2, #0]
 8005ed4:	68d2      	ldr	r2, [r2, #12]
 8005ed6:	f022 0202 	bic.w	r2, r2, #2
 8005eda:	60da      	str	r2, [r3, #12]
      break;
 8005edc:	e01b      	b.n	8005f16 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	6812      	ldr	r2, [r2, #0]
 8005ee6:	68d2      	ldr	r2, [r2, #12]
 8005ee8:	f022 0204 	bic.w	r2, r2, #4
 8005eec:	60da      	str	r2, [r3, #12]
      break;
 8005eee:	e012      	b.n	8005f16 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	6812      	ldr	r2, [r2, #0]
 8005ef8:	68d2      	ldr	r2, [r2, #12]
 8005efa:	f022 0208 	bic.w	r2, r2, #8
 8005efe:	60da      	str	r2, [r3, #12]
      break;
 8005f00:	e009      	b.n	8005f16 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	6812      	ldr	r2, [r2, #0]
 8005f0a:	68d2      	ldr	r2, [r2, #12]
 8005f0c:	f022 0210 	bic.w	r2, r2, #16
 8005f10:	60da      	str	r2, [r3, #12]
      break;
 8005f12:	e000      	b.n	8005f16 <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 8005f14:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	6839      	ldr	r1, [r7, #0]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f004 f976 	bl	800a210 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a28      	ldr	r2, [pc, #160]	; (8005fcc <HAL_TIM_OC_Stop_IT+0x14c>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d013      	beq.n	8005f56 <HAL_TIM_OC_Stop_IT+0xd6>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a27      	ldr	r2, [pc, #156]	; (8005fd0 <HAL_TIM_OC_Stop_IT+0x150>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d00e      	beq.n	8005f56 <HAL_TIM_OC_Stop_IT+0xd6>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a25      	ldr	r2, [pc, #148]	; (8005fd4 <HAL_TIM_OC_Stop_IT+0x154>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d009      	beq.n	8005f56 <HAL_TIM_OC_Stop_IT+0xd6>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a24      	ldr	r2, [pc, #144]	; (8005fd8 <HAL_TIM_OC_Stop_IT+0x158>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d004      	beq.n	8005f56 <HAL_TIM_OC_Stop_IT+0xd6>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a22      	ldr	r2, [pc, #136]	; (8005fdc <HAL_TIM_OC_Stop_IT+0x15c>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d101      	bne.n	8005f5a <HAL_TIM_OC_Stop_IT+0xda>
 8005f56:	2301      	movs	r3, #1
 8005f58:	e000      	b.n	8005f5c <HAL_TIM_OC_Stop_IT+0xdc>
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d017      	beq.n	8005f90 <HAL_TIM_OC_Stop_IT+0x110>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6a1a      	ldr	r2, [r3, #32]
 8005f66:	f241 1311 	movw	r3, #4369	; 0x1111
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10f      	bne.n	8005f90 <HAL_TIM_OC_Stop_IT+0x110>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6a1a      	ldr	r2, [r3, #32]
 8005f76:	f240 4344 	movw	r3, #1092	; 0x444
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d107      	bne.n	8005f90 <HAL_TIM_OC_Stop_IT+0x110>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	6812      	ldr	r2, [r2, #0]
 8005f88:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005f8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f8e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6a1a      	ldr	r2, [r3, #32]
 8005f96:	f241 1311 	movw	r3, #4369	; 0x1111
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10f      	bne.n	8005fc0 <HAL_TIM_OC_Stop_IT+0x140>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6a1a      	ldr	r2, [r3, #32]
 8005fa6:	f240 4344 	movw	r3, #1092	; 0x444
 8005faa:	4013      	ands	r3, r2
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d107      	bne.n	8005fc0 <HAL_TIM_OC_Stop_IT+0x140>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	6812      	ldr	r2, [r2, #0]
 8005fb8:	6812      	ldr	r2, [r2, #0]
 8005fba:	f022 0201 	bic.w	r2, r2, #1
 8005fbe:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	40012c00 	.word	0x40012c00
 8005fd0:	40013400 	.word	0x40013400
 8005fd4:	40014000 	.word	0x40014000
 8005fd8:	40014400 	.word	0x40014400
 8005fdc:	40014800 	.word	0x40014800

08005fe0 <HAL_TIM_OC_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
 8005fec:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if ((htim->State == HAL_TIM_STATE_BUSY))
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d101      	bne.n	8005ffe <HAL_TIM_OC_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	e106      	b.n	800620c <HAL_TIM_OC_Start_DMA+0x22c>
  }
  else if ((htim->State == HAL_TIM_STATE_READY))
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006004:	b2db      	uxtb	r3, r3
 8006006:	2b01      	cmp	r3, #1
 8006008:	d10b      	bne.n	8006022 <HAL_TIM_OC_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d104      	bne.n	800601a <HAL_TIM_OC_Start_DMA+0x3a>
 8006010:	887b      	ldrh	r3, [r7, #2]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <HAL_TIM_OC_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e0f8      	b.n	800620c <HAL_TIM_OC_Start_DMA+0x22c>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2202      	movs	r2, #2
 800601e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	2b0c      	cmp	r3, #12
 8006026:	f200 80ad 	bhi.w	8006184 <HAL_TIM_OC_Start_DMA+0x1a4>
 800602a:	a201      	add	r2, pc, #4	; (adr r2, 8006030 <HAL_TIM_OC_Start_DMA+0x50>)
 800602c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006030:	08006065 	.word	0x08006065
 8006034:	08006185 	.word	0x08006185
 8006038:	08006185 	.word	0x08006185
 800603c:	08006185 	.word	0x08006185
 8006040:	080060ad 	.word	0x080060ad
 8006044:	08006185 	.word	0x08006185
 8006048:	08006185 	.word	0x08006185
 800604c:	08006185 	.word	0x08006185
 8006050:	080060f5 	.word	0x080060f5
 8006054:	08006185 	.word	0x08006185
 8006058:	08006185 	.word	0x08006185
 800605c:	08006185 	.word	0x08006185
 8006060:	0800613d 	.word	0x0800613d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006068:	4a6a      	ldr	r2, [pc, #424]	; (8006214 <HAL_TIM_OC_Start_DMA+0x234>)
 800606a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006070:	4a69      	ldr	r2, [pc, #420]	; (8006218 <HAL_TIM_OC_Start_DMA+0x238>)
 8006072:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006078:	4a68      	ldr	r2, [pc, #416]	; (800621c <HAL_TIM_OC_Start_DMA+0x23c>)
 800607a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006080:	6879      	ldr	r1, [r7, #4]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	3334      	adds	r3, #52	; 0x34
 8006088:	461a      	mov	r2, r3
 800608a:	887b      	ldrh	r3, [r7, #2]
 800608c:	f7fa ffe7 	bl	800105e <HAL_DMA_Start_IT>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <HAL_TIM_OC_Start_DMA+0xba>
      {
        return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e0b8      	b.n	800620c <HAL_TIM_OC_Start_DMA+0x22c>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	6812      	ldr	r2, [r2, #0]
 80060a2:	68d2      	ldr	r2, [r2, #12]
 80060a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060a8:	60da      	str	r2, [r3, #12]
      break;
 80060aa:	e06c      	b.n	8006186 <HAL_TIM_OC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b0:	4a58      	ldr	r2, [pc, #352]	; (8006214 <HAL_TIM_OC_Start_DMA+0x234>)
 80060b2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b8:	4a57      	ldr	r2, [pc, #348]	; (8006218 <HAL_TIM_OC_Start_DMA+0x238>)
 80060ba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c0:	4a56      	ldr	r2, [pc, #344]	; (800621c <HAL_TIM_OC_Start_DMA+0x23c>)
 80060c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80060c8:	6879      	ldr	r1, [r7, #4]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	3338      	adds	r3, #56	; 0x38
 80060d0:	461a      	mov	r2, r3
 80060d2:	887b      	ldrh	r3, [r7, #2]
 80060d4:	f7fa ffc3 	bl	800105e <HAL_DMA_Start_IT>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <HAL_TIM_OC_Start_DMA+0x102>
      {
        return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e094      	b.n	800620c <HAL_TIM_OC_Start_DMA+0x22c>
      }

      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	6812      	ldr	r2, [r2, #0]
 80060ea:	68d2      	ldr	r2, [r2, #12]
 80060ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060f0:	60da      	str	r2, [r3, #12]
      break;
 80060f2:	e048      	b.n	8006186 <HAL_TIM_OC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f8:	4a46      	ldr	r2, [pc, #280]	; (8006214 <HAL_TIM_OC_Start_DMA+0x234>)
 80060fa:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006100:	4a45      	ldr	r2, [pc, #276]	; (8006218 <HAL_TIM_OC_Start_DMA+0x238>)
 8006102:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006108:	4a44      	ldr	r2, [pc, #272]	; (800621c <HAL_TIM_OC_Start_DMA+0x23c>)
 800610a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006110:	6879      	ldr	r1, [r7, #4]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	333c      	adds	r3, #60	; 0x3c
 8006118:	461a      	mov	r2, r3
 800611a:	887b      	ldrh	r3, [r7, #2]
 800611c:	f7fa ff9f 	bl	800105e <HAL_DMA_Start_IT>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <HAL_TIM_OC_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e070      	b.n	800620c <HAL_TIM_OC_Start_DMA+0x22c>
      }
      /* Enable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	6812      	ldr	r2, [r2, #0]
 8006132:	68d2      	ldr	r2, [r2, #12]
 8006134:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006138:	60da      	str	r2, [r3, #12]
      break;
 800613a:	e024      	b.n	8006186 <HAL_TIM_OC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006140:	4a34      	ldr	r2, [pc, #208]	; (8006214 <HAL_TIM_OC_Start_DMA+0x234>)
 8006142:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006148:	4a33      	ldr	r2, [pc, #204]	; (8006218 <HAL_TIM_OC_Start_DMA+0x238>)
 800614a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006150:	4a32      	ldr	r2, [pc, #200]	; (800621c <HAL_TIM_OC_Start_DMA+0x23c>)
 8006152:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006158:	6879      	ldr	r1, [r7, #4]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	3340      	adds	r3, #64	; 0x40
 8006160:	461a      	mov	r2, r3
 8006162:	887b      	ldrh	r3, [r7, #2]
 8006164:	f7fa ff7b 	bl	800105e <HAL_DMA_Start_IT>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d001      	beq.n	8006172 <HAL_TIM_OC_Start_DMA+0x192>
      {
        return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e04c      	b.n	800620c <HAL_TIM_OC_Start_DMA+0x22c>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	6812      	ldr	r2, [r2, #0]
 800617a:	68d2      	ldr	r2, [r2, #12]
 800617c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006180:	60da      	str	r2, [r3, #12]
      break;
 8006182:	e000      	b.n	8006186 <HAL_TIM_OC_Start_DMA+0x1a6>
    }

    default:
      break;
 8006184:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2201      	movs	r2, #1
 800618c:	68b9      	ldr	r1, [r7, #8]
 800618e:	4618      	mov	r0, r3
 8006190:	f004 f83e 	bl	800a210 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a21      	ldr	r2, [pc, #132]	; (8006220 <HAL_TIM_OC_Start_DMA+0x240>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d013      	beq.n	80061c6 <HAL_TIM_OC_Start_DMA+0x1e6>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a20      	ldr	r2, [pc, #128]	; (8006224 <HAL_TIM_OC_Start_DMA+0x244>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d00e      	beq.n	80061c6 <HAL_TIM_OC_Start_DMA+0x1e6>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a1e      	ldr	r2, [pc, #120]	; (8006228 <HAL_TIM_OC_Start_DMA+0x248>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d009      	beq.n	80061c6 <HAL_TIM_OC_Start_DMA+0x1e6>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a1d      	ldr	r2, [pc, #116]	; (800622c <HAL_TIM_OC_Start_DMA+0x24c>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d004      	beq.n	80061c6 <HAL_TIM_OC_Start_DMA+0x1e6>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a1b      	ldr	r2, [pc, #108]	; (8006230 <HAL_TIM_OC_Start_DMA+0x250>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d101      	bne.n	80061ca <HAL_TIM_OC_Start_DMA+0x1ea>
 80061c6:	2301      	movs	r3, #1
 80061c8:	e000      	b.n	80061cc <HAL_TIM_OC_Start_DMA+0x1ec>
 80061ca:	2300      	movs	r3, #0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d007      	beq.n	80061e0 <HAL_TIM_OC_Start_DMA+0x200>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	6812      	ldr	r2, [r2, #0]
 80061d8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80061da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689a      	ldr	r2, [r3, #8]
 80061e6:	4b13      	ldr	r3, [pc, #76]	; (8006234 <HAL_TIM_OC_Start_DMA+0x254>)
 80061e8:	4013      	ands	r3, r2
 80061ea:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	2b06      	cmp	r3, #6
 80061f0:	d00b      	beq.n	800620a <HAL_TIM_OC_Start_DMA+0x22a>
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f8:	d007      	beq.n	800620a <HAL_TIM_OC_Start_DMA+0x22a>
  {
    __HAL_TIM_ENABLE(htim);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	6812      	ldr	r2, [r2, #0]
 8006202:	6812      	ldr	r2, [r2, #0]
 8006204:	f042 0201 	orr.w	r2, r2, #1
 8006208:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3718      	adds	r7, #24
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	08009455 	.word	0x08009455
 8006218:	080094c5 	.word	0x080094c5
 800621c:	08009431 	.word	0x08009431
 8006220:	40012c00 	.word	0x40012c00
 8006224:	40013400 	.word	0x40013400
 8006228:	40014000 	.word	0x40014000
 800622c:	40014400 	.word	0x40014400
 8006230:	40014800 	.word	0x40014800
 8006234:	00010007 	.word	0x00010007

08006238 <HAL_TIM_OC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	2b0c      	cmp	r3, #12
 8006246:	d855      	bhi.n	80062f4 <HAL_TIM_OC_Stop_DMA+0xbc>
 8006248:	a201      	add	r2, pc, #4	; (adr r2, 8006250 <HAL_TIM_OC_Stop_DMA+0x18>)
 800624a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624e:	bf00      	nop
 8006250:	08006285 	.word	0x08006285
 8006254:	080062f5 	.word	0x080062f5
 8006258:	080062f5 	.word	0x080062f5
 800625c:	080062f5 	.word	0x080062f5
 8006260:	080062a1 	.word	0x080062a1
 8006264:	080062f5 	.word	0x080062f5
 8006268:	080062f5 	.word	0x080062f5
 800626c:	080062f5 	.word	0x080062f5
 8006270:	080062bd 	.word	0x080062bd
 8006274:	080062f5 	.word	0x080062f5
 8006278:	080062f5 	.word	0x080062f5
 800627c:	080062f5 	.word	0x080062f5
 8006280:	080062d9 	.word	0x080062d9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	6812      	ldr	r2, [r2, #0]
 800628c:	68d2      	ldr	r2, [r2, #12]
 800628e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006292:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006298:	4618      	mov	r0, r3
 800629a:	f7fa ff7e 	bl	800119a <HAL_DMA_Abort_IT>
      break;
 800629e:	e02a      	b.n	80062f6 <HAL_TIM_OC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	6812      	ldr	r2, [r2, #0]
 80062a8:	68d2      	ldr	r2, [r2, #12]
 80062aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062ae:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7fa ff70 	bl	800119a <HAL_DMA_Abort_IT>
      break;
 80062ba:	e01c      	b.n	80062f6 <HAL_TIM_OC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	6812      	ldr	r2, [r2, #0]
 80062c4:	68d2      	ldr	r2, [r2, #12]
 80062c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062ca:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7fa ff62 	bl	800119a <HAL_DMA_Abort_IT>
      break;
 80062d6:	e00e      	b.n	80062f6 <HAL_TIM_OC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	6812      	ldr	r2, [r2, #0]
 80062e0:	68d2      	ldr	r2, [r2, #12]
 80062e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80062e6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7fa ff54 	bl	800119a <HAL_DMA_Abort_IT>
      break;
 80062f2:	e000      	b.n	80062f6 <HAL_TIM_OC_Stop_DMA+0xbe>
    }

    default:
      break;
 80062f4:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2200      	movs	r2, #0
 80062fc:	6839      	ldr	r1, [r7, #0]
 80062fe:	4618      	mov	r0, r3
 8006300:	f003 ff86 	bl	800a210 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a2a      	ldr	r2, [pc, #168]	; (80063b4 <HAL_TIM_OC_Stop_DMA+0x17c>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d013      	beq.n	8006336 <HAL_TIM_OC_Stop_DMA+0xfe>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a29      	ldr	r2, [pc, #164]	; (80063b8 <HAL_TIM_OC_Stop_DMA+0x180>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d00e      	beq.n	8006336 <HAL_TIM_OC_Stop_DMA+0xfe>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a27      	ldr	r2, [pc, #156]	; (80063bc <HAL_TIM_OC_Stop_DMA+0x184>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d009      	beq.n	8006336 <HAL_TIM_OC_Stop_DMA+0xfe>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a26      	ldr	r2, [pc, #152]	; (80063c0 <HAL_TIM_OC_Stop_DMA+0x188>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d004      	beq.n	8006336 <HAL_TIM_OC_Stop_DMA+0xfe>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a24      	ldr	r2, [pc, #144]	; (80063c4 <HAL_TIM_OC_Stop_DMA+0x18c>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d101      	bne.n	800633a <HAL_TIM_OC_Stop_DMA+0x102>
 8006336:	2301      	movs	r3, #1
 8006338:	e000      	b.n	800633c <HAL_TIM_OC_Stop_DMA+0x104>
 800633a:	2300      	movs	r3, #0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d017      	beq.n	8006370 <HAL_TIM_OC_Stop_DMA+0x138>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6a1a      	ldr	r2, [r3, #32]
 8006346:	f241 1311 	movw	r3, #4369	; 0x1111
 800634a:	4013      	ands	r3, r2
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10f      	bne.n	8006370 <HAL_TIM_OC_Stop_DMA+0x138>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6a1a      	ldr	r2, [r3, #32]
 8006356:	f240 4344 	movw	r3, #1092	; 0x444
 800635a:	4013      	ands	r3, r2
 800635c:	2b00      	cmp	r3, #0
 800635e:	d107      	bne.n	8006370 <HAL_TIM_OC_Stop_DMA+0x138>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	6812      	ldr	r2, [r2, #0]
 8006368:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800636a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800636e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6a1a      	ldr	r2, [r3, #32]
 8006376:	f241 1311 	movw	r3, #4369	; 0x1111
 800637a:	4013      	ands	r3, r2
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10f      	bne.n	80063a0 <HAL_TIM_OC_Stop_DMA+0x168>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6a1a      	ldr	r2, [r3, #32]
 8006386:	f240 4344 	movw	r3, #1092	; 0x444
 800638a:	4013      	ands	r3, r2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d107      	bne.n	80063a0 <HAL_TIM_OC_Stop_DMA+0x168>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	6812      	ldr	r2, [r2, #0]
 8006398:	6812      	ldr	r2, [r2, #0]
 800639a:	f022 0201 	bic.w	r2, r2, #1
 800639e:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	40012c00 	.word	0x40012c00
 80063b8:	40013400 	.word	0x40013400
 80063bc:	40014000 	.word	0x40014000
 80063c0:	40014400 	.word	0x40014400
 80063c4:	40014800 	.word	0x40014800

080063c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e01d      	b.n	8006416 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d106      	bne.n	80063f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f845 	bl	800647e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	3304      	adds	r3, #4
 8006404:	4619      	mov	r1, r3
 8006406:	4610      	mov	r0, r2
 8006408:	f003 f94c 	bl	80096a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b082      	sub	sp, #8
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2202      	movs	r2, #2
 800642a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	6a1a      	ldr	r2, [r3, #32]
 8006434:	f241 1311 	movw	r3, #4369	; 0x1111
 8006438:	4013      	ands	r3, r2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d10f      	bne.n	800645e <HAL_TIM_PWM_DeInit+0x40>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	6a1a      	ldr	r2, [r3, #32]
 8006444:	f240 4344 	movw	r3, #1092	; 0x444
 8006448:	4013      	ands	r3, r2
 800644a:	2b00      	cmp	r3, #0
 800644c:	d107      	bne.n	800645e <HAL_TIM_PWM_DeInit+0x40>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	6812      	ldr	r2, [r2, #0]
 8006456:	6812      	ldr	r2, [r2, #0]
 8006458:	f022 0201 	bic.w	r2, r2, #1
 800645c:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f817 	bl	8006492 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3708      	adds	r7, #8
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800647e:	b480      	push	{r7}
 8006480:	b083      	sub	sp, #12
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006486:	bf00      	nop
 8006488:	370c      	adds	r7, #12
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 8006492:	b480      	push	{r7}
 8006494:	b083      	sub	sp, #12
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 800649a:	bf00      	nop
 800649c:	370c      	adds	r7, #12
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b084      	sub	sp, #16
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
 80064ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2201      	movs	r2, #1
 80064b6:	6839      	ldr	r1, [r7, #0]
 80064b8:	4618      	mov	r0, r3
 80064ba:	f003 fea9 	bl	800a210 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a1f      	ldr	r2, [pc, #124]	; (8006540 <HAL_TIM_PWM_Start+0x9a>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d013      	beq.n	80064f0 <HAL_TIM_PWM_Start+0x4a>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a1d      	ldr	r2, [pc, #116]	; (8006544 <HAL_TIM_PWM_Start+0x9e>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d00e      	beq.n	80064f0 <HAL_TIM_PWM_Start+0x4a>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a1c      	ldr	r2, [pc, #112]	; (8006548 <HAL_TIM_PWM_Start+0xa2>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d009      	beq.n	80064f0 <HAL_TIM_PWM_Start+0x4a>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a1a      	ldr	r2, [pc, #104]	; (800654c <HAL_TIM_PWM_Start+0xa6>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d004      	beq.n	80064f0 <HAL_TIM_PWM_Start+0x4a>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a19      	ldr	r2, [pc, #100]	; (8006550 <HAL_TIM_PWM_Start+0xaa>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d101      	bne.n	80064f4 <HAL_TIM_PWM_Start+0x4e>
 80064f0:	2301      	movs	r3, #1
 80064f2:	e000      	b.n	80064f6 <HAL_TIM_PWM_Start+0x50>
 80064f4:	2300      	movs	r3, #0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d007      	beq.n	800650a <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	6812      	ldr	r2, [r2, #0]
 8006502:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006504:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006508:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	689a      	ldr	r2, [r3, #8]
 8006510:	4b10      	ldr	r3, [pc, #64]	; (8006554 <HAL_TIM_PWM_Start+0xae>)
 8006512:	4013      	ands	r3, r2
 8006514:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2b06      	cmp	r3, #6
 800651a:	d00b      	beq.n	8006534 <HAL_TIM_PWM_Start+0x8e>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006522:	d007      	beq.n	8006534 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	6812      	ldr	r2, [r2, #0]
 800652c:	6812      	ldr	r2, [r2, #0]
 800652e:	f042 0201 	orr.w	r2, r2, #1
 8006532:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	40012c00 	.word	0x40012c00
 8006544:	40013400 	.word	0x40013400
 8006548:	40014000 	.word	0x40014000
 800654c:	40014400 	.word	0x40014400
 8006550:	40014800 	.word	0x40014800
 8006554:	00010007 	.word	0x00010007

08006558 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2200      	movs	r2, #0
 8006568:	6839      	ldr	r1, [r7, #0]
 800656a:	4618      	mov	r0, r3
 800656c:	f003 fe50 	bl	800a210 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a2a      	ldr	r2, [pc, #168]	; (8006620 <HAL_TIM_PWM_Stop+0xc8>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d013      	beq.n	80065a2 <HAL_TIM_PWM_Stop+0x4a>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a29      	ldr	r2, [pc, #164]	; (8006624 <HAL_TIM_PWM_Stop+0xcc>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d00e      	beq.n	80065a2 <HAL_TIM_PWM_Stop+0x4a>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a27      	ldr	r2, [pc, #156]	; (8006628 <HAL_TIM_PWM_Stop+0xd0>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d009      	beq.n	80065a2 <HAL_TIM_PWM_Stop+0x4a>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a26      	ldr	r2, [pc, #152]	; (800662c <HAL_TIM_PWM_Stop+0xd4>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d004      	beq.n	80065a2 <HAL_TIM_PWM_Stop+0x4a>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a24      	ldr	r2, [pc, #144]	; (8006630 <HAL_TIM_PWM_Stop+0xd8>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d101      	bne.n	80065a6 <HAL_TIM_PWM_Stop+0x4e>
 80065a2:	2301      	movs	r3, #1
 80065a4:	e000      	b.n	80065a8 <HAL_TIM_PWM_Stop+0x50>
 80065a6:	2300      	movs	r3, #0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d017      	beq.n	80065dc <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6a1a      	ldr	r2, [r3, #32]
 80065b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80065b6:	4013      	ands	r3, r2
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10f      	bne.n	80065dc <HAL_TIM_PWM_Stop+0x84>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	6a1a      	ldr	r2, [r3, #32]
 80065c2:	f240 4344 	movw	r3, #1092	; 0x444
 80065c6:	4013      	ands	r3, r2
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d107      	bne.n	80065dc <HAL_TIM_PWM_Stop+0x84>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	6812      	ldr	r2, [r2, #0]
 80065d4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80065d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065da:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6a1a      	ldr	r2, [r3, #32]
 80065e2:	f241 1311 	movw	r3, #4369	; 0x1111
 80065e6:	4013      	ands	r3, r2
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10f      	bne.n	800660c <HAL_TIM_PWM_Stop+0xb4>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6a1a      	ldr	r2, [r3, #32]
 80065f2:	f240 4344 	movw	r3, #1092	; 0x444
 80065f6:	4013      	ands	r3, r2
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d107      	bne.n	800660c <HAL_TIM_PWM_Stop+0xb4>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	6812      	ldr	r2, [r2, #0]
 8006604:	6812      	ldr	r2, [r2, #0]
 8006606:	f022 0201 	bic.w	r2, r2, #1
 800660a:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	40012c00 	.word	0x40012c00
 8006624:	40013400 	.word	0x40013400
 8006628:	40014000 	.word	0x40014000
 800662c:	40014400 	.word	0x40014400
 8006630:	40014800 	.word	0x40014800

08006634 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	2b0c      	cmp	r3, #12
 8006642:	d841      	bhi.n	80066c8 <HAL_TIM_PWM_Start_IT+0x94>
 8006644:	a201      	add	r2, pc, #4	; (adr r2, 800664c <HAL_TIM_PWM_Start_IT+0x18>)
 8006646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664a:	bf00      	nop
 800664c:	08006681 	.word	0x08006681
 8006650:	080066c9 	.word	0x080066c9
 8006654:	080066c9 	.word	0x080066c9
 8006658:	080066c9 	.word	0x080066c9
 800665c:	08006693 	.word	0x08006693
 8006660:	080066c9 	.word	0x080066c9
 8006664:	080066c9 	.word	0x080066c9
 8006668:	080066c9 	.word	0x080066c9
 800666c:	080066a5 	.word	0x080066a5
 8006670:	080066c9 	.word	0x080066c9
 8006674:	080066c9 	.word	0x080066c9
 8006678:	080066c9 	.word	0x080066c9
 800667c:	080066b7 	.word	0x080066b7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	6812      	ldr	r2, [r2, #0]
 8006688:	68d2      	ldr	r2, [r2, #12]
 800668a:	f042 0202 	orr.w	r2, r2, #2
 800668e:	60da      	str	r2, [r3, #12]
      break;
 8006690:	e01b      	b.n	80066ca <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	6812      	ldr	r2, [r2, #0]
 800669a:	68d2      	ldr	r2, [r2, #12]
 800669c:	f042 0204 	orr.w	r2, r2, #4
 80066a0:	60da      	str	r2, [r3, #12]
      break;
 80066a2:	e012      	b.n	80066ca <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	6812      	ldr	r2, [r2, #0]
 80066ac:	68d2      	ldr	r2, [r2, #12]
 80066ae:	f042 0208 	orr.w	r2, r2, #8
 80066b2:	60da      	str	r2, [r3, #12]
      break;
 80066b4:	e009      	b.n	80066ca <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	6812      	ldr	r2, [r2, #0]
 80066be:	68d2      	ldr	r2, [r2, #12]
 80066c0:	f042 0210 	orr.w	r2, r2, #16
 80066c4:	60da      	str	r2, [r3, #12]
      break;
 80066c6:	e000      	b.n	80066ca <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 80066c8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2201      	movs	r2, #1
 80066d0:	6839      	ldr	r1, [r7, #0]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f003 fd9c 	bl	800a210 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a1e      	ldr	r2, [pc, #120]	; (8006758 <HAL_TIM_PWM_Start_IT+0x124>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d013      	beq.n	800670a <HAL_TIM_PWM_Start_IT+0xd6>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a1d      	ldr	r2, [pc, #116]	; (800675c <HAL_TIM_PWM_Start_IT+0x128>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d00e      	beq.n	800670a <HAL_TIM_PWM_Start_IT+0xd6>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a1b      	ldr	r2, [pc, #108]	; (8006760 <HAL_TIM_PWM_Start_IT+0x12c>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d009      	beq.n	800670a <HAL_TIM_PWM_Start_IT+0xd6>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a1a      	ldr	r2, [pc, #104]	; (8006764 <HAL_TIM_PWM_Start_IT+0x130>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d004      	beq.n	800670a <HAL_TIM_PWM_Start_IT+0xd6>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a18      	ldr	r2, [pc, #96]	; (8006768 <HAL_TIM_PWM_Start_IT+0x134>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d101      	bne.n	800670e <HAL_TIM_PWM_Start_IT+0xda>
 800670a:	2301      	movs	r3, #1
 800670c:	e000      	b.n	8006710 <HAL_TIM_PWM_Start_IT+0xdc>
 800670e:	2300      	movs	r3, #0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d007      	beq.n	8006724 <HAL_TIM_PWM_Start_IT+0xf0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	6812      	ldr	r2, [r2, #0]
 800671c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800671e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006722:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	689a      	ldr	r2, [r3, #8]
 800672a:	4b10      	ldr	r3, [pc, #64]	; (800676c <HAL_TIM_PWM_Start_IT+0x138>)
 800672c:	4013      	ands	r3, r2
 800672e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2b06      	cmp	r3, #6
 8006734:	d00b      	beq.n	800674e <HAL_TIM_PWM_Start_IT+0x11a>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800673c:	d007      	beq.n	800674e <HAL_TIM_PWM_Start_IT+0x11a>
  {
    __HAL_TIM_ENABLE(htim);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	6812      	ldr	r2, [r2, #0]
 8006746:	6812      	ldr	r2, [r2, #0]
 8006748:	f042 0201 	orr.w	r2, r2, #1
 800674c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	40012c00 	.word	0x40012c00
 800675c:	40013400 	.word	0x40013400
 8006760:	40014000 	.word	0x40014000
 8006764:	40014400 	.word	0x40014400
 8006768:	40014800 	.word	0x40014800
 800676c:	00010007 	.word	0x00010007

08006770 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2b0c      	cmp	r3, #12
 800677e:	d841      	bhi.n	8006804 <HAL_TIM_PWM_Stop_IT+0x94>
 8006780:	a201      	add	r2, pc, #4	; (adr r2, 8006788 <HAL_TIM_PWM_Stop_IT+0x18>)
 8006782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006786:	bf00      	nop
 8006788:	080067bd 	.word	0x080067bd
 800678c:	08006805 	.word	0x08006805
 8006790:	08006805 	.word	0x08006805
 8006794:	08006805 	.word	0x08006805
 8006798:	080067cf 	.word	0x080067cf
 800679c:	08006805 	.word	0x08006805
 80067a0:	08006805 	.word	0x08006805
 80067a4:	08006805 	.word	0x08006805
 80067a8:	080067e1 	.word	0x080067e1
 80067ac:	08006805 	.word	0x08006805
 80067b0:	08006805 	.word	0x08006805
 80067b4:	08006805 	.word	0x08006805
 80067b8:	080067f3 	.word	0x080067f3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	6812      	ldr	r2, [r2, #0]
 80067c4:	68d2      	ldr	r2, [r2, #12]
 80067c6:	f022 0202 	bic.w	r2, r2, #2
 80067ca:	60da      	str	r2, [r3, #12]
      break;
 80067cc:	e01b      	b.n	8006806 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	6812      	ldr	r2, [r2, #0]
 80067d6:	68d2      	ldr	r2, [r2, #12]
 80067d8:	f022 0204 	bic.w	r2, r2, #4
 80067dc:	60da      	str	r2, [r3, #12]
      break;
 80067de:	e012      	b.n	8006806 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	6812      	ldr	r2, [r2, #0]
 80067e8:	68d2      	ldr	r2, [r2, #12]
 80067ea:	f022 0208 	bic.w	r2, r2, #8
 80067ee:	60da      	str	r2, [r3, #12]
      break;
 80067f0:	e009      	b.n	8006806 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	6812      	ldr	r2, [r2, #0]
 80067fa:	68d2      	ldr	r2, [r2, #12]
 80067fc:	f022 0210 	bic.w	r2, r2, #16
 8006800:	60da      	str	r2, [r3, #12]
      break;
 8006802:	e000      	b.n	8006806 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8006804:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2200      	movs	r2, #0
 800680c:	6839      	ldr	r1, [r7, #0]
 800680e:	4618      	mov	r0, r3
 8006810:	f003 fcfe 	bl	800a210 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a28      	ldr	r2, [pc, #160]	; (80068bc <HAL_TIM_PWM_Stop_IT+0x14c>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d013      	beq.n	8006846 <HAL_TIM_PWM_Stop_IT+0xd6>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a27      	ldr	r2, [pc, #156]	; (80068c0 <HAL_TIM_PWM_Stop_IT+0x150>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d00e      	beq.n	8006846 <HAL_TIM_PWM_Stop_IT+0xd6>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a25      	ldr	r2, [pc, #148]	; (80068c4 <HAL_TIM_PWM_Stop_IT+0x154>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d009      	beq.n	8006846 <HAL_TIM_PWM_Stop_IT+0xd6>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a24      	ldr	r2, [pc, #144]	; (80068c8 <HAL_TIM_PWM_Stop_IT+0x158>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d004      	beq.n	8006846 <HAL_TIM_PWM_Stop_IT+0xd6>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a22      	ldr	r2, [pc, #136]	; (80068cc <HAL_TIM_PWM_Stop_IT+0x15c>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d101      	bne.n	800684a <HAL_TIM_PWM_Stop_IT+0xda>
 8006846:	2301      	movs	r3, #1
 8006848:	e000      	b.n	800684c <HAL_TIM_PWM_Stop_IT+0xdc>
 800684a:	2300      	movs	r3, #0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d017      	beq.n	8006880 <HAL_TIM_PWM_Stop_IT+0x110>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6a1a      	ldr	r2, [r3, #32]
 8006856:	f241 1311 	movw	r3, #4369	; 0x1111
 800685a:	4013      	ands	r3, r2
 800685c:	2b00      	cmp	r3, #0
 800685e:	d10f      	bne.n	8006880 <HAL_TIM_PWM_Stop_IT+0x110>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6a1a      	ldr	r2, [r3, #32]
 8006866:	f240 4344 	movw	r3, #1092	; 0x444
 800686a:	4013      	ands	r3, r2
 800686c:	2b00      	cmp	r3, #0
 800686e:	d107      	bne.n	8006880 <HAL_TIM_PWM_Stop_IT+0x110>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	6812      	ldr	r2, [r2, #0]
 8006878:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800687a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800687e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6a1a      	ldr	r2, [r3, #32]
 8006886:	f241 1311 	movw	r3, #4369	; 0x1111
 800688a:	4013      	ands	r3, r2
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10f      	bne.n	80068b0 <HAL_TIM_PWM_Stop_IT+0x140>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6a1a      	ldr	r2, [r3, #32]
 8006896:	f240 4344 	movw	r3, #1092	; 0x444
 800689a:	4013      	ands	r3, r2
 800689c:	2b00      	cmp	r3, #0
 800689e:	d107      	bne.n	80068b0 <HAL_TIM_PWM_Stop_IT+0x140>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	6812      	ldr	r2, [r2, #0]
 80068a8:	6812      	ldr	r2, [r2, #0]
 80068aa:	f022 0201 	bic.w	r2, r2, #1
 80068ae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3708      	adds	r7, #8
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	40012c00 	.word	0x40012c00
 80068c0:	40013400 	.word	0x40013400
 80068c4:	40014000 	.word	0x40014000
 80068c8:	40014400 	.word	0x40014400
 80068cc:	40014800 	.word	0x40014800

080068d0 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if ((htim->State == HAL_TIM_STATE_BUSY))
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d101      	bne.n	80068ee <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 80068ea:	2302      	movs	r3, #2
 80068ec:	e106      	b.n	8006afc <HAL_TIM_PWM_Start_DMA+0x22c>
  }
  else if ((htim->State == HAL_TIM_STATE_READY))
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d10b      	bne.n	8006912 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d104      	bne.n	800690a <HAL_TIM_PWM_Start_DMA+0x3a>
 8006900:	887b      	ldrh	r3, [r7, #2]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d001      	beq.n	800690a <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e0f8      	b.n	8006afc <HAL_TIM_PWM_Start_DMA+0x22c>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2202      	movs	r2, #2
 800690e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	2b0c      	cmp	r3, #12
 8006916:	f200 80ad 	bhi.w	8006a74 <HAL_TIM_PWM_Start_DMA+0x1a4>
 800691a:	a201      	add	r2, pc, #4	; (adr r2, 8006920 <HAL_TIM_PWM_Start_DMA+0x50>)
 800691c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006920:	08006955 	.word	0x08006955
 8006924:	08006a75 	.word	0x08006a75
 8006928:	08006a75 	.word	0x08006a75
 800692c:	08006a75 	.word	0x08006a75
 8006930:	0800699d 	.word	0x0800699d
 8006934:	08006a75 	.word	0x08006a75
 8006938:	08006a75 	.word	0x08006a75
 800693c:	08006a75 	.word	0x08006a75
 8006940:	080069e5 	.word	0x080069e5
 8006944:	08006a75 	.word	0x08006a75
 8006948:	08006a75 	.word	0x08006a75
 800694c:	08006a75 	.word	0x08006a75
 8006950:	08006a2d 	.word	0x08006a2d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006958:	4a6a      	ldr	r2, [pc, #424]	; (8006b04 <HAL_TIM_PWM_Start_DMA+0x234>)
 800695a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006960:	4a69      	ldr	r2, [pc, #420]	; (8006b08 <HAL_TIM_PWM_Start_DMA+0x238>)
 8006962:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006968:	4a68      	ldr	r2, [pc, #416]	; (8006b0c <HAL_TIM_PWM_Start_DMA+0x23c>)
 800696a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006970:	6879      	ldr	r1, [r7, #4]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3334      	adds	r3, #52	; 0x34
 8006978:	461a      	mov	r2, r3
 800697a:	887b      	ldrh	r3, [r7, #2]
 800697c:	f7fa fb6f 	bl	800105e <HAL_DMA_Start_IT>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d001      	beq.n	800698a <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e0b8      	b.n	8006afc <HAL_TIM_PWM_Start_DMA+0x22c>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	6812      	ldr	r2, [r2, #0]
 8006992:	68d2      	ldr	r2, [r2, #12]
 8006994:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006998:	60da      	str	r2, [r3, #12]
      break;
 800699a:	e06c      	b.n	8006a76 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a0:	4a58      	ldr	r2, [pc, #352]	; (8006b04 <HAL_TIM_PWM_Start_DMA+0x234>)
 80069a2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a8:	4a57      	ldr	r2, [pc, #348]	; (8006b08 <HAL_TIM_PWM_Start_DMA+0x238>)
 80069aa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b0:	4a56      	ldr	r2, [pc, #344]	; (8006b0c <HAL_TIM_PWM_Start_DMA+0x23c>)
 80069b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80069b8:	6879      	ldr	r1, [r7, #4]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	3338      	adds	r3, #56	; 0x38
 80069c0:	461a      	mov	r2, r3
 80069c2:	887b      	ldrh	r3, [r7, #2]
 80069c4:	f7fa fb4b 	bl	800105e <HAL_DMA_Start_IT>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e094      	b.n	8006afc <HAL_TIM_PWM_Start_DMA+0x22c>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	6812      	ldr	r2, [r2, #0]
 80069da:	68d2      	ldr	r2, [r2, #12]
 80069dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069e0:	60da      	str	r2, [r3, #12]
      break;
 80069e2:	e048      	b.n	8006a76 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e8:	4a46      	ldr	r2, [pc, #280]	; (8006b04 <HAL_TIM_PWM_Start_DMA+0x234>)
 80069ea:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f0:	4a45      	ldr	r2, [pc, #276]	; (8006b08 <HAL_TIM_PWM_Start_DMA+0x238>)
 80069f2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f8:	4a44      	ldr	r2, [pc, #272]	; (8006b0c <HAL_TIM_PWM_Start_DMA+0x23c>)
 80069fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006a00:	6879      	ldr	r1, [r7, #4]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	333c      	adds	r3, #60	; 0x3c
 8006a08:	461a      	mov	r2, r3
 8006a0a:	887b      	ldrh	r3, [r7, #2]
 8006a0c:	f7fa fb27 	bl	800105e <HAL_DMA_Start_IT>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d001      	beq.n	8006a1a <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e070      	b.n	8006afc <HAL_TIM_PWM_Start_DMA+0x22c>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	6812      	ldr	r2, [r2, #0]
 8006a22:	68d2      	ldr	r2, [r2, #12]
 8006a24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a28:	60da      	str	r2, [r3, #12]
      break;
 8006a2a:	e024      	b.n	8006a76 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a30:	4a34      	ldr	r2, [pc, #208]	; (8006b04 <HAL_TIM_PWM_Start_DMA+0x234>)
 8006a32:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a38:	4a33      	ldr	r2, [pc, #204]	; (8006b08 <HAL_TIM_PWM_Start_DMA+0x238>)
 8006a3a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a40:	4a32      	ldr	r2, [pc, #200]	; (8006b0c <HAL_TIM_PWM_Start_DMA+0x23c>)
 8006a42:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006a48:	6879      	ldr	r1, [r7, #4]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	3340      	adds	r3, #64	; 0x40
 8006a50:	461a      	mov	r2, r3
 8006a52:	887b      	ldrh	r3, [r7, #2]
 8006a54:	f7fa fb03 	bl	800105e <HAL_DMA_Start_IT>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d001      	beq.n	8006a62 <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e04c      	b.n	8006afc <HAL_TIM_PWM_Start_DMA+0x22c>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	6812      	ldr	r2, [r2, #0]
 8006a6a:	68d2      	ldr	r2, [r2, #12]
 8006a6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a70:	60da      	str	r2, [r3, #12]
      break;
 8006a72:	e000      	b.n	8006a76 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 8006a74:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	68b9      	ldr	r1, [r7, #8]
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f003 fbc6 	bl	800a210 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a21      	ldr	r2, [pc, #132]	; (8006b10 <HAL_TIM_PWM_Start_DMA+0x240>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d013      	beq.n	8006ab6 <HAL_TIM_PWM_Start_DMA+0x1e6>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a20      	ldr	r2, [pc, #128]	; (8006b14 <HAL_TIM_PWM_Start_DMA+0x244>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d00e      	beq.n	8006ab6 <HAL_TIM_PWM_Start_DMA+0x1e6>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a1e      	ldr	r2, [pc, #120]	; (8006b18 <HAL_TIM_PWM_Start_DMA+0x248>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d009      	beq.n	8006ab6 <HAL_TIM_PWM_Start_DMA+0x1e6>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a1d      	ldr	r2, [pc, #116]	; (8006b1c <HAL_TIM_PWM_Start_DMA+0x24c>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d004      	beq.n	8006ab6 <HAL_TIM_PWM_Start_DMA+0x1e6>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a1b      	ldr	r2, [pc, #108]	; (8006b20 <HAL_TIM_PWM_Start_DMA+0x250>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d101      	bne.n	8006aba <HAL_TIM_PWM_Start_DMA+0x1ea>
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e000      	b.n	8006abc <HAL_TIM_PWM_Start_DMA+0x1ec>
 8006aba:	2300      	movs	r3, #0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d007      	beq.n	8006ad0 <HAL_TIM_PWM_Start_DMA+0x200>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	6812      	ldr	r2, [r2, #0]
 8006ac8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006aca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ace:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	689a      	ldr	r2, [r3, #8]
 8006ad6:	4b13      	ldr	r3, [pc, #76]	; (8006b24 <HAL_TIM_PWM_Start_DMA+0x254>)
 8006ad8:	4013      	ands	r3, r2
 8006ada:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	2b06      	cmp	r3, #6
 8006ae0:	d00b      	beq.n	8006afa <HAL_TIM_PWM_Start_DMA+0x22a>
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ae8:	d007      	beq.n	8006afa <HAL_TIM_PWM_Start_DMA+0x22a>
  {
    __HAL_TIM_ENABLE(htim);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	6812      	ldr	r2, [r2, #0]
 8006af2:	6812      	ldr	r2, [r2, #0]
 8006af4:	f042 0201 	orr.w	r2, r2, #1
 8006af8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3718      	adds	r7, #24
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	08009455 	.word	0x08009455
 8006b08:	080094c5 	.word	0x080094c5
 8006b0c:	08009431 	.word	0x08009431
 8006b10:	40012c00 	.word	0x40012c00
 8006b14:	40013400 	.word	0x40013400
 8006b18:	40014000 	.word	0x40014000
 8006b1c:	40014400 	.word	0x40014400
 8006b20:	40014800 	.word	0x40014800
 8006b24:	00010007 	.word	0x00010007

08006b28 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	2b0c      	cmp	r3, #12
 8006b36:	d855      	bhi.n	8006be4 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8006b38:	a201      	add	r2, pc, #4	; (adr r2, 8006b40 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8006b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3e:	bf00      	nop
 8006b40:	08006b75 	.word	0x08006b75
 8006b44:	08006be5 	.word	0x08006be5
 8006b48:	08006be5 	.word	0x08006be5
 8006b4c:	08006be5 	.word	0x08006be5
 8006b50:	08006b91 	.word	0x08006b91
 8006b54:	08006be5 	.word	0x08006be5
 8006b58:	08006be5 	.word	0x08006be5
 8006b5c:	08006be5 	.word	0x08006be5
 8006b60:	08006bad 	.word	0x08006bad
 8006b64:	08006be5 	.word	0x08006be5
 8006b68:	08006be5 	.word	0x08006be5
 8006b6c:	08006be5 	.word	0x08006be5
 8006b70:	08006bc9 	.word	0x08006bc9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	6812      	ldr	r2, [r2, #0]
 8006b7c:	68d2      	ldr	r2, [r2, #12]
 8006b7e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006b82:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7fa fb06 	bl	800119a <HAL_DMA_Abort_IT>
      break;
 8006b8e:	e02a      	b.n	8006be6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	6812      	ldr	r2, [r2, #0]
 8006b98:	68d2      	ldr	r2, [r2, #12]
 8006b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b9e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7fa faf8 	bl	800119a <HAL_DMA_Abort_IT>
      break;
 8006baa:	e01c      	b.n	8006be6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	6812      	ldr	r2, [r2, #0]
 8006bb4:	68d2      	ldr	r2, [r2, #12]
 8006bb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f7fa faea 	bl	800119a <HAL_DMA_Abort_IT>
      break;
 8006bc6:	e00e      	b.n	8006be6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	6812      	ldr	r2, [r2, #0]
 8006bd0:	68d2      	ldr	r2, [r2, #12]
 8006bd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006bd6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7fa fadc 	bl	800119a <HAL_DMA_Abort_IT>
      break;
 8006be2:	e000      	b.n	8006be6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8006be4:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2200      	movs	r2, #0
 8006bec:	6839      	ldr	r1, [r7, #0]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f003 fb0e 	bl	800a210 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a2a      	ldr	r2, [pc, #168]	; (8006ca4 <HAL_TIM_PWM_Stop_DMA+0x17c>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d013      	beq.n	8006c26 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a29      	ldr	r2, [pc, #164]	; (8006ca8 <HAL_TIM_PWM_Stop_DMA+0x180>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d00e      	beq.n	8006c26 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a27      	ldr	r2, [pc, #156]	; (8006cac <HAL_TIM_PWM_Stop_DMA+0x184>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d009      	beq.n	8006c26 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a26      	ldr	r2, [pc, #152]	; (8006cb0 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d004      	beq.n	8006c26 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a24      	ldr	r2, [pc, #144]	; (8006cb4 <HAL_TIM_PWM_Stop_DMA+0x18c>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d101      	bne.n	8006c2a <HAL_TIM_PWM_Stop_DMA+0x102>
 8006c26:	2301      	movs	r3, #1
 8006c28:	e000      	b.n	8006c2c <HAL_TIM_PWM_Stop_DMA+0x104>
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d017      	beq.n	8006c60 <HAL_TIM_PWM_Stop_DMA+0x138>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6a1a      	ldr	r2, [r3, #32]
 8006c36:	f241 1311 	movw	r3, #4369	; 0x1111
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10f      	bne.n	8006c60 <HAL_TIM_PWM_Stop_DMA+0x138>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6a1a      	ldr	r2, [r3, #32]
 8006c46:	f240 4344 	movw	r3, #1092	; 0x444
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d107      	bne.n	8006c60 <HAL_TIM_PWM_Stop_DMA+0x138>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	6812      	ldr	r2, [r2, #0]
 8006c58:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006c5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c5e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6a1a      	ldr	r2, [r3, #32]
 8006c66:	f241 1311 	movw	r3, #4369	; 0x1111
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10f      	bne.n	8006c90 <HAL_TIM_PWM_Stop_DMA+0x168>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6a1a      	ldr	r2, [r3, #32]
 8006c76:	f240 4344 	movw	r3, #1092	; 0x444
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d107      	bne.n	8006c90 <HAL_TIM_PWM_Stop_DMA+0x168>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	6812      	ldr	r2, [r2, #0]
 8006c88:	6812      	ldr	r2, [r2, #0]
 8006c8a:	f022 0201 	bic.w	r2, r2, #1
 8006c8e:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3708      	adds	r7, #8
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	40012c00 	.word	0x40012c00
 8006ca8:	40013400 	.word	0x40013400
 8006cac:	40014000 	.word	0x40014000
 8006cb0:	40014400 	.word	0x40014400
 8006cb4:	40014800 	.word	0x40014800

08006cb8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d101      	bne.n	8006cca <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e01d      	b.n	8006d06 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d106      	bne.n	8006ce4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f845 	bl	8006d6e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	3304      	adds	r3, #4
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	4610      	mov	r0, r2
 8006cf8:	f002 fcd4 	bl	80096a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3708      	adds	r7, #8
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <HAL_TIM_IC_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_DeInit(TIM_HandleTypeDef *htim)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b082      	sub	sp, #8
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2202      	movs	r2, #2
 8006d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	6a1a      	ldr	r2, [r3, #32]
 8006d24:	f241 1311 	movw	r3, #4369	; 0x1111
 8006d28:	4013      	ands	r3, r2
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10f      	bne.n	8006d4e <HAL_TIM_IC_DeInit+0x40>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	6a1a      	ldr	r2, [r3, #32]
 8006d34:	f240 4344 	movw	r3, #1092	; 0x444
 8006d38:	4013      	ands	r3, r2
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d107      	bne.n	8006d4e <HAL_TIM_IC_DeInit+0x40>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	6812      	ldr	r2, [r2, #0]
 8006d46:	6812      	ldr	r2, [r2, #0]
 8006d48:	f022 0201 	bic.w	r2, r2, #1
 8006d4c:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->IC_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_IC_MspDeInit(htim);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f817 	bl	8006d82 <HAL_TIM_IC_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3708      	adds	r7, #8
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006d6e:	b480      	push	{r7}
 8006d70:	b083      	sub	sp, #12
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006d76:	bf00      	nop
 8006d78:	370c      	adds	r7, #12
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <HAL_TIM_IC_MspDeInit>:
  * @brief  DeInitializes TIM Input Capture MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef *htim)
{
 8006d82:	b480      	push	{r7}
 8006d84:	b083      	sub	sp, #12
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspDeInit could be implemented in the user file
   */
}
 8006d8a:	bf00      	nop
 8006d8c:	370c      	adds	r7, #12
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b084      	sub	sp, #16
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
 8006d9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2201      	movs	r2, #1
 8006da6:	6839      	ldr	r1, [r7, #0]
 8006da8:	4618      	mov	r0, r3
 8006daa:	f003 fa31 	bl	800a210 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	689a      	ldr	r2, [r3, #8]
 8006db4:	4b0b      	ldr	r3, [pc, #44]	; (8006de4 <HAL_TIM_IC_Start+0x4e>)
 8006db6:	4013      	ands	r3, r2
 8006db8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2b06      	cmp	r3, #6
 8006dbe:	d00b      	beq.n	8006dd8 <HAL_TIM_IC_Start+0x42>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dc6:	d007      	beq.n	8006dd8 <HAL_TIM_IC_Start+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	6812      	ldr	r2, [r2, #0]
 8006dd0:	6812      	ldr	r2, [r2, #0]
 8006dd2:	f042 0201 	orr.w	r2, r2, #1
 8006dd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	00010007 	.word	0x00010007

08006de8 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2200      	movs	r2, #0
 8006df8:	6839      	ldr	r1, [r7, #0]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f003 fa08 	bl	800a210 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	6a1a      	ldr	r2, [r3, #32]
 8006e06:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10f      	bne.n	8006e30 <HAL_TIM_IC_Stop+0x48>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	6a1a      	ldr	r2, [r3, #32]
 8006e16:	f240 4344 	movw	r3, #1092	; 0x444
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d107      	bne.n	8006e30 <HAL_TIM_IC_Stop+0x48>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	6812      	ldr	r2, [r2, #0]
 8006e28:	6812      	ldr	r2, [r2, #0]
 8006e2a:	f022 0201 	bic.w	r2, r2, #1
 8006e2e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b084      	sub	sp, #16
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
 8006e42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	2b0c      	cmp	r3, #12
 8006e48:	d840      	bhi.n	8006ecc <HAL_TIM_IC_Start_IT+0x92>
 8006e4a:	a201      	add	r2, pc, #4	; (adr r2, 8006e50 <HAL_TIM_IC_Start_IT+0x16>)
 8006e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e50:	08006e85 	.word	0x08006e85
 8006e54:	08006ecd 	.word	0x08006ecd
 8006e58:	08006ecd 	.word	0x08006ecd
 8006e5c:	08006ecd 	.word	0x08006ecd
 8006e60:	08006e97 	.word	0x08006e97
 8006e64:	08006ecd 	.word	0x08006ecd
 8006e68:	08006ecd 	.word	0x08006ecd
 8006e6c:	08006ecd 	.word	0x08006ecd
 8006e70:	08006ea9 	.word	0x08006ea9
 8006e74:	08006ecd 	.word	0x08006ecd
 8006e78:	08006ecd 	.word	0x08006ecd
 8006e7c:	08006ecd 	.word	0x08006ecd
 8006e80:	08006ebb 	.word	0x08006ebb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	6812      	ldr	r2, [r2, #0]
 8006e8c:	68d2      	ldr	r2, [r2, #12]
 8006e8e:	f042 0202 	orr.w	r2, r2, #2
 8006e92:	60da      	str	r2, [r3, #12]
      break;
 8006e94:	e01b      	b.n	8006ece <HAL_TIM_IC_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	6812      	ldr	r2, [r2, #0]
 8006e9e:	68d2      	ldr	r2, [r2, #12]
 8006ea0:	f042 0204 	orr.w	r2, r2, #4
 8006ea4:	60da      	str	r2, [r3, #12]
      break;
 8006ea6:	e012      	b.n	8006ece <HAL_TIM_IC_Start_IT+0x94>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	6812      	ldr	r2, [r2, #0]
 8006eb0:	68d2      	ldr	r2, [r2, #12]
 8006eb2:	f042 0208 	orr.w	r2, r2, #8
 8006eb6:	60da      	str	r2, [r3, #12]
      break;
 8006eb8:	e009      	b.n	8006ece <HAL_TIM_IC_Start_IT+0x94>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	6812      	ldr	r2, [r2, #0]
 8006ec2:	68d2      	ldr	r2, [r2, #12]
 8006ec4:	f042 0210 	orr.w	r2, r2, #16
 8006ec8:	60da      	str	r2, [r3, #12]
      break;
 8006eca:	e000      	b.n	8006ece <HAL_TIM_IC_Start_IT+0x94>
    }

    default:
      break;
 8006ecc:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	6839      	ldr	r1, [r7, #0]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f003 f99a 	bl	800a210 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	689a      	ldr	r2, [r3, #8]
 8006ee2:	4b0b      	ldr	r3, [pc, #44]	; (8006f10 <HAL_TIM_IC_Start_IT+0xd6>)
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2b06      	cmp	r3, #6
 8006eec:	d00b      	beq.n	8006f06 <HAL_TIM_IC_Start_IT+0xcc>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ef4:	d007      	beq.n	8006f06 <HAL_TIM_IC_Start_IT+0xcc>
  {
    __HAL_TIM_ENABLE(htim);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	6812      	ldr	r2, [r2, #0]
 8006efe:	6812      	ldr	r2, [r2, #0]
 8006f00:	f042 0201 	orr.w	r2, r2, #1
 8006f04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	00010007 	.word	0x00010007

08006f14 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	2b0c      	cmp	r3, #12
 8006f22:	d841      	bhi.n	8006fa8 <HAL_TIM_IC_Stop_IT+0x94>
 8006f24:	a201      	add	r2, pc, #4	; (adr r2, 8006f2c <HAL_TIM_IC_Stop_IT+0x18>)
 8006f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2a:	bf00      	nop
 8006f2c:	08006f61 	.word	0x08006f61
 8006f30:	08006fa9 	.word	0x08006fa9
 8006f34:	08006fa9 	.word	0x08006fa9
 8006f38:	08006fa9 	.word	0x08006fa9
 8006f3c:	08006f73 	.word	0x08006f73
 8006f40:	08006fa9 	.word	0x08006fa9
 8006f44:	08006fa9 	.word	0x08006fa9
 8006f48:	08006fa9 	.word	0x08006fa9
 8006f4c:	08006f85 	.word	0x08006f85
 8006f50:	08006fa9 	.word	0x08006fa9
 8006f54:	08006fa9 	.word	0x08006fa9
 8006f58:	08006fa9 	.word	0x08006fa9
 8006f5c:	08006f97 	.word	0x08006f97
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	6812      	ldr	r2, [r2, #0]
 8006f68:	68d2      	ldr	r2, [r2, #12]
 8006f6a:	f022 0202 	bic.w	r2, r2, #2
 8006f6e:	60da      	str	r2, [r3, #12]
      break;
 8006f70:	e01b      	b.n	8006faa <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	6812      	ldr	r2, [r2, #0]
 8006f7a:	68d2      	ldr	r2, [r2, #12]
 8006f7c:	f022 0204 	bic.w	r2, r2, #4
 8006f80:	60da      	str	r2, [r3, #12]
      break;
 8006f82:	e012      	b.n	8006faa <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	6812      	ldr	r2, [r2, #0]
 8006f8c:	68d2      	ldr	r2, [r2, #12]
 8006f8e:	f022 0208 	bic.w	r2, r2, #8
 8006f92:	60da      	str	r2, [r3, #12]
      break;
 8006f94:	e009      	b.n	8006faa <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	6812      	ldr	r2, [r2, #0]
 8006f9e:	68d2      	ldr	r2, [r2, #12]
 8006fa0:	f022 0210 	bic.w	r2, r2, #16
 8006fa4:	60da      	str	r2, [r3, #12]
      break;
 8006fa6:	e000      	b.n	8006faa <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8006fa8:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f003 f92c 	bl	800a210 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	6a1a      	ldr	r2, [r3, #32]
 8006fbe:	f241 1311 	movw	r3, #4369	; 0x1111
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10f      	bne.n	8006fe8 <HAL_TIM_IC_Stop_IT+0xd4>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6a1a      	ldr	r2, [r3, #32]
 8006fce:	f240 4344 	movw	r3, #1092	; 0x444
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d107      	bne.n	8006fe8 <HAL_TIM_IC_Stop_IT+0xd4>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	6812      	ldr	r2, [r2, #0]
 8006fe0:	6812      	ldr	r2, [r2, #0]
 8006fe2:	f022 0201 	bic.w	r2, r2, #1
 8006fe6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3708      	adds	r7, #8
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b086      	sub	sp, #24
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	60f8      	str	r0, [r7, #12]
 8006ffa:	60b9      	str	r1, [r7, #8]
 8006ffc:	607a      	str	r2, [r7, #4]
 8006ffe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  if ((htim->State == HAL_TIM_STATE_BUSY))
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007006:	b2db      	uxtb	r3, r3
 8007008:	2b02      	cmp	r3, #2
 800700a:	d101      	bne.n	8007010 <HAL_TIM_IC_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 800700c:	2302      	movs	r3, #2
 800700e:	e0e1      	b.n	80071d4 <HAL_TIM_IC_Start_DMA+0x1e2>
  }
  else if ((htim->State == HAL_TIM_STATE_READY))
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007016:	b2db      	uxtb	r3, r3
 8007018:	2b01      	cmp	r3, #1
 800701a:	d10b      	bne.n	8007034 <HAL_TIM_IC_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d104      	bne.n	800702c <HAL_TIM_IC_Start_DMA+0x3a>
 8007022:	887b      	ldrh	r3, [r7, #2]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d001      	beq.n	800702c <HAL_TIM_IC_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e0d3      	b.n	80071d4 <HAL_TIM_IC_Start_DMA+0x1e2>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2202      	movs	r2, #2
 8007030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	2b0c      	cmp	r3, #12
 8007038:	f200 80ae 	bhi.w	8007198 <HAL_TIM_IC_Start_DMA+0x1a6>
 800703c:	a201      	add	r2, pc, #4	; (adr r2, 8007044 <HAL_TIM_IC_Start_DMA+0x52>)
 800703e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007042:	bf00      	nop
 8007044:	08007079 	.word	0x08007079
 8007048:	08007199 	.word	0x08007199
 800704c:	08007199 	.word	0x08007199
 8007050:	08007199 	.word	0x08007199
 8007054:	080070c1 	.word	0x080070c1
 8007058:	08007199 	.word	0x08007199
 800705c:	08007199 	.word	0x08007199
 8007060:	08007199 	.word	0x08007199
 8007064:	08007109 	.word	0x08007109
 8007068:	08007199 	.word	0x08007199
 800706c:	08007199 	.word	0x08007199
 8007070:	08007199 	.word	0x08007199
 8007074:	08007151 	.word	0x08007151
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707c:	4a57      	ldr	r2, [pc, #348]	; (80071dc <HAL_TIM_IC_Start_DMA+0x1ea>)
 800707e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007084:	4a56      	ldr	r2, [pc, #344]	; (80071e0 <HAL_TIM_IC_Start_DMA+0x1ee>)
 8007086:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708c:	4a55      	ldr	r2, [pc, #340]	; (80071e4 <HAL_TIM_IC_Start_DMA+0x1f2>)
 800708e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	3334      	adds	r3, #52	; 0x34
 800709a:	4619      	mov	r1, r3
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	887b      	ldrh	r3, [r7, #2]
 80070a0:	f7f9 ffdd 	bl	800105e <HAL_DMA_Start_IT>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d001      	beq.n	80070ae <HAL_TIM_IC_Start_DMA+0xbc>
      {
        return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e092      	b.n	80071d4 <HAL_TIM_IC_Start_DMA+0x1e2>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	6812      	ldr	r2, [r2, #0]
 80070b6:	68d2      	ldr	r2, [r2, #12]
 80070b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070bc:	60da      	str	r2, [r3, #12]
      break;
 80070be:	e06c      	b.n	800719a <HAL_TIM_IC_Start_DMA+0x1a8>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c4:	4a45      	ldr	r2, [pc, #276]	; (80071dc <HAL_TIM_IC_Start_DMA+0x1ea>)
 80070c6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070cc:	4a44      	ldr	r2, [pc, #272]	; (80071e0 <HAL_TIM_IC_Start_DMA+0x1ee>)
 80070ce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d4:	4a43      	ldr	r2, [pc, #268]	; (80071e4 <HAL_TIM_IC_Start_DMA+0x1f2>)
 80070d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	3338      	adds	r3, #56	; 0x38
 80070e2:	4619      	mov	r1, r3
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	887b      	ldrh	r3, [r7, #2]
 80070e8:	f7f9 ffb9 	bl	800105e <HAL_DMA_Start_IT>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d001      	beq.n	80070f6 <HAL_TIM_IC_Start_DMA+0x104>
      {
        return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e06e      	b.n	80071d4 <HAL_TIM_IC_Start_DMA+0x1e2>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	6812      	ldr	r2, [r2, #0]
 80070fe:	68d2      	ldr	r2, [r2, #12]
 8007100:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007104:	60da      	str	r2, [r3, #12]
      break;
 8007106:	e048      	b.n	800719a <HAL_TIM_IC_Start_DMA+0x1a8>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710c:	4a33      	ldr	r2, [pc, #204]	; (80071dc <HAL_TIM_IC_Start_DMA+0x1ea>)
 800710e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007114:	4a32      	ldr	r2, [pc, #200]	; (80071e0 <HAL_TIM_IC_Start_DMA+0x1ee>)
 8007116:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711c:	4a31      	ldr	r2, [pc, #196]	; (80071e4 <HAL_TIM_IC_Start_DMA+0x1f2>)
 800711e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	333c      	adds	r3, #60	; 0x3c
 800712a:	4619      	mov	r1, r3
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	887b      	ldrh	r3, [r7, #2]
 8007130:	f7f9 ff95 	bl	800105e <HAL_DMA_Start_IT>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <HAL_TIM_IC_Start_DMA+0x14c>
      {
        return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e04a      	b.n	80071d4 <HAL_TIM_IC_Start_DMA+0x1e2>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	6812      	ldr	r2, [r2, #0]
 8007146:	68d2      	ldr	r2, [r2, #12]
 8007148:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800714c:	60da      	str	r2, [r3, #12]
      break;
 800714e:	e024      	b.n	800719a <HAL_TIM_IC_Start_DMA+0x1a8>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007154:	4a21      	ldr	r2, [pc, #132]	; (80071dc <HAL_TIM_IC_Start_DMA+0x1ea>)
 8007156:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715c:	4a20      	ldr	r2, [pc, #128]	; (80071e0 <HAL_TIM_IC_Start_DMA+0x1ee>)
 800715e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007164:	4a1f      	ldr	r2, [pc, #124]	; (80071e4 <HAL_TIM_IC_Start_DMA+0x1f2>)
 8007166:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	3340      	adds	r3, #64	; 0x40
 8007172:	4619      	mov	r1, r3
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	887b      	ldrh	r3, [r7, #2]
 8007178:	f7f9 ff71 	bl	800105e <HAL_DMA_Start_IT>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d001      	beq.n	8007186 <HAL_TIM_IC_Start_DMA+0x194>
      {
        return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e026      	b.n	80071d4 <HAL_TIM_IC_Start_DMA+0x1e2>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	6812      	ldr	r2, [r2, #0]
 800718e:	68d2      	ldr	r2, [r2, #12]
 8007190:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007194:	60da      	str	r2, [r3, #12]
      break;
 8007196:	e000      	b.n	800719a <HAL_TIM_IC_Start_DMA+0x1a8>
    }

    default:
      break;
 8007198:	bf00      	nop
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2201      	movs	r2, #1
 80071a0:	68b9      	ldr	r1, [r7, #8]
 80071a2:	4618      	mov	r0, r3
 80071a4:	f003 f834 	bl	800a210 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	689a      	ldr	r2, [r3, #8]
 80071ae:	4b0e      	ldr	r3, [pc, #56]	; (80071e8 <HAL_TIM_IC_Start_DMA+0x1f6>)
 80071b0:	4013      	ands	r3, r2
 80071b2:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	2b06      	cmp	r3, #6
 80071b8:	d00b      	beq.n	80071d2 <HAL_TIM_IC_Start_DMA+0x1e0>
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071c0:	d007      	beq.n	80071d2 <HAL_TIM_IC_Start_DMA+0x1e0>
  {
    __HAL_TIM_ENABLE(htim);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	6812      	ldr	r2, [r2, #0]
 80071ca:	6812      	ldr	r2, [r2, #0]
 80071cc:	f042 0201 	orr.w	r2, r2, #1
 80071d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3718      	adds	r7, #24
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	08009535 	.word	0x08009535
 80071e0:	080095a5 	.word	0x080095a5
 80071e4:	08009431 	.word	0x08009431
 80071e8:	00010007 	.word	0x00010007

080071ec <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  switch (Channel)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	2b0c      	cmp	r3, #12
 80071fa:	d855      	bhi.n	80072a8 <HAL_TIM_IC_Stop_DMA+0xbc>
 80071fc:	a201      	add	r2, pc, #4	; (adr r2, 8007204 <HAL_TIM_IC_Stop_DMA+0x18>)
 80071fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007202:	bf00      	nop
 8007204:	08007239 	.word	0x08007239
 8007208:	080072a9 	.word	0x080072a9
 800720c:	080072a9 	.word	0x080072a9
 8007210:	080072a9 	.word	0x080072a9
 8007214:	08007255 	.word	0x08007255
 8007218:	080072a9 	.word	0x080072a9
 800721c:	080072a9 	.word	0x080072a9
 8007220:	080072a9 	.word	0x080072a9
 8007224:	08007271 	.word	0x08007271
 8007228:	080072a9 	.word	0x080072a9
 800722c:	080072a9 	.word	0x080072a9
 8007230:	080072a9 	.word	0x080072a9
 8007234:	0800728d 	.word	0x0800728d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	6812      	ldr	r2, [r2, #0]
 8007240:	68d2      	ldr	r2, [r2, #12]
 8007242:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007246:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724c:	4618      	mov	r0, r3
 800724e:	f7f9 ffa4 	bl	800119a <HAL_DMA_Abort_IT>
      break;
 8007252:	e02a      	b.n	80072aa <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	6812      	ldr	r2, [r2, #0]
 800725c:	68d2      	ldr	r2, [r2, #12]
 800725e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007262:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007268:	4618      	mov	r0, r3
 800726a:	f7f9 ff96 	bl	800119a <HAL_DMA_Abort_IT>
      break;
 800726e:	e01c      	b.n	80072aa <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	6812      	ldr	r2, [r2, #0]
 8007278:	68d2      	ldr	r2, [r2, #12]
 800727a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800727e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007284:	4618      	mov	r0, r3
 8007286:	f7f9 ff88 	bl	800119a <HAL_DMA_Abort_IT>
      break;
 800728a:	e00e      	b.n	80072aa <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	6812      	ldr	r2, [r2, #0]
 8007294:	68d2      	ldr	r2, [r2, #12]
 8007296:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800729a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7f9 ff7a 	bl	800119a <HAL_DMA_Abort_IT>
      break;
 80072a6:	e000      	b.n	80072aa <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    default:
      break;
 80072a8:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2200      	movs	r2, #0
 80072b0:	6839      	ldr	r1, [r7, #0]
 80072b2:	4618      	mov	r0, r3
 80072b4:	f002 ffac 	bl	800a210 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6a1a      	ldr	r2, [r3, #32]
 80072be:	f241 1311 	movw	r3, #4369	; 0x1111
 80072c2:	4013      	ands	r3, r2
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10f      	bne.n	80072e8 <HAL_TIM_IC_Stop_DMA+0xfc>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	6a1a      	ldr	r2, [r3, #32]
 80072ce:	f240 4344 	movw	r3, #1092	; 0x444
 80072d2:	4013      	ands	r3, r2
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d107      	bne.n	80072e8 <HAL_TIM_IC_Stop_DMA+0xfc>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	6812      	ldr	r2, [r2, #0]
 80072e0:	6812      	ldr	r2, [r2, #0]
 80072e2:	f022 0201 	bic.w	r2, r2, #1
 80072e6:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b082      	sub	sp, #8
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
 8007302:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d101      	bne.n	800730e <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e02d      	b.n	800736a <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007314:	b2db      	uxtb	r3, r3
 8007316:	2b00      	cmp	r3, #0
 8007318:	d106      	bne.n	8007328 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f855 	bl	80073d2 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2202      	movs	r2, #2
 800732c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	3304      	adds	r3, #4
 8007338:	4619      	mov	r1, r3
 800733a:	4610      	mov	r0, r2
 800733c:	f002 f9b2 	bl	80096a4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	6812      	ldr	r2, [r2, #0]
 8007348:	6812      	ldr	r2, [r2, #0]
 800734a:	f022 0208 	bic.w	r2, r2, #8
 800734e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	6812      	ldr	r2, [r2, #0]
 8007358:	6811      	ldr	r1, [r2, #0]
 800735a:	683a      	ldr	r2, [r7, #0]
 800735c:	430a      	orrs	r2, r1
 800735e:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3708      	adds	r7, #8
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <HAL_TIM_OnePulse_DeInit>:
  * @brief  DeInitializes the TIM One Pulse
  * @param  htim TIM One Pulse handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_DeInit(TIM_HandleTypeDef *htim)
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b082      	sub	sp, #8
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2202      	movs	r2, #2
 800737e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	6a1a      	ldr	r2, [r3, #32]
 8007388:	f241 1311 	movw	r3, #4369	; 0x1111
 800738c:	4013      	ands	r3, r2
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10f      	bne.n	80073b2 <HAL_TIM_OnePulse_DeInit+0x40>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	6a1a      	ldr	r2, [r3, #32]
 8007398:	f240 4344 	movw	r3, #1092	; 0x444
 800739c:	4013      	ands	r3, r2
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d107      	bne.n	80073b2 <HAL_TIM_OnePulse_DeInit+0x40>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	6812      	ldr	r2, [r2, #0]
 80073aa:	6812      	ldr	r2, [r2, #0]
 80073ac:	f022 0201 	bic.w	r2, r2, #1
 80073b0:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->OnePulse_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_OnePulse_MspDeInit(htim);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f817 	bl	80073e6 <HAL_TIM_OnePulse_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3708      	adds	r7, #8
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80073d2:	b480      	push	{r7}
 80073d4:	b083      	sub	sp, #12
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80073da:	bf00      	nop
 80073dc:	370c      	adds	r7, #12
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <HAL_TIM_OnePulse_MspDeInit>:
  * @brief  DeInitializes TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspDeInit(TIM_HandleTypeDef *htim)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b083      	sub	sp, #12
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspDeInit could be implemented in the user file
   */
}
 80073ee:	bf00      	nop
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <HAL_TIM_OnePulse_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b082      	sub	sp, #8
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
 8007402:	6039      	str	r1, [r7, #0]
    in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2201      	movs	r2, #1
 800740a:	2100      	movs	r1, #0
 800740c:	4618      	mov	r0, r3
 800740e:	f002 feff 	bl	800a210 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2201      	movs	r2, #1
 8007418:	2104      	movs	r1, #4
 800741a:	4618      	mov	r0, r3
 800741c:	f002 fef8 	bl	800a210 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a14      	ldr	r2, [pc, #80]	; (8007478 <HAL_TIM_OnePulse_Start+0x7e>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d013      	beq.n	8007452 <HAL_TIM_OnePulse_Start+0x58>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a13      	ldr	r2, [pc, #76]	; (800747c <HAL_TIM_OnePulse_Start+0x82>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d00e      	beq.n	8007452 <HAL_TIM_OnePulse_Start+0x58>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a11      	ldr	r2, [pc, #68]	; (8007480 <HAL_TIM_OnePulse_Start+0x86>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d009      	beq.n	8007452 <HAL_TIM_OnePulse_Start+0x58>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a10      	ldr	r2, [pc, #64]	; (8007484 <HAL_TIM_OnePulse_Start+0x8a>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d004      	beq.n	8007452 <HAL_TIM_OnePulse_Start+0x58>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a0e      	ldr	r2, [pc, #56]	; (8007488 <HAL_TIM_OnePulse_Start+0x8e>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d101      	bne.n	8007456 <HAL_TIM_OnePulse_Start+0x5c>
 8007452:	2301      	movs	r3, #1
 8007454:	e000      	b.n	8007458 <HAL_TIM_OnePulse_Start+0x5e>
 8007456:	2300      	movs	r3, #0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d007      	beq.n	800746c <HAL_TIM_OnePulse_Start+0x72>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	6812      	ldr	r2, [r2, #0]
 8007464:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007466:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800746a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3708      	adds	r7, #8
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	40012c00 	.word	0x40012c00
 800747c:	40013400 	.word	0x40013400
 8007480:	40014000 	.word	0x40014000
 8007484:	40014400 	.word	0x40014400
 8007488:	40014800 	.word	0x40014800

0800748c <HAL_TIM_OnePulse_Stop>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
  if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
  in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2200      	movs	r2, #0
 800749c:	2100      	movs	r1, #0
 800749e:	4618      	mov	r0, r3
 80074a0:	f002 feb6 	bl	800a210 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2200      	movs	r2, #0
 80074aa:	2104      	movs	r1, #4
 80074ac:	4618      	mov	r0, r3
 80074ae:	f002 feaf 	bl	800a210 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a28      	ldr	r2, [pc, #160]	; (8007558 <HAL_TIM_OnePulse_Stop+0xcc>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d013      	beq.n	80074e4 <HAL_TIM_OnePulse_Stop+0x58>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a26      	ldr	r2, [pc, #152]	; (800755c <HAL_TIM_OnePulse_Stop+0xd0>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d00e      	beq.n	80074e4 <HAL_TIM_OnePulse_Stop+0x58>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a25      	ldr	r2, [pc, #148]	; (8007560 <HAL_TIM_OnePulse_Stop+0xd4>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d009      	beq.n	80074e4 <HAL_TIM_OnePulse_Stop+0x58>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a23      	ldr	r2, [pc, #140]	; (8007564 <HAL_TIM_OnePulse_Stop+0xd8>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d004      	beq.n	80074e4 <HAL_TIM_OnePulse_Stop+0x58>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a22      	ldr	r2, [pc, #136]	; (8007568 <HAL_TIM_OnePulse_Stop+0xdc>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d101      	bne.n	80074e8 <HAL_TIM_OnePulse_Stop+0x5c>
 80074e4:	2301      	movs	r3, #1
 80074e6:	e000      	b.n	80074ea <HAL_TIM_OnePulse_Stop+0x5e>
 80074e8:	2300      	movs	r3, #0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d017      	beq.n	800751e <HAL_TIM_OnePulse_Stop+0x92>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	6a1a      	ldr	r2, [r3, #32]
 80074f4:	f241 1311 	movw	r3, #4369	; 0x1111
 80074f8:	4013      	ands	r3, r2
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10f      	bne.n	800751e <HAL_TIM_OnePulse_Stop+0x92>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	6a1a      	ldr	r2, [r3, #32]
 8007504:	f240 4344 	movw	r3, #1092	; 0x444
 8007508:	4013      	ands	r3, r2
 800750a:	2b00      	cmp	r3, #0
 800750c:	d107      	bne.n	800751e <HAL_TIM_OnePulse_Stop+0x92>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	6812      	ldr	r2, [r2, #0]
 8007516:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007518:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800751c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6a1a      	ldr	r2, [r3, #32]
 8007524:	f241 1311 	movw	r3, #4369	; 0x1111
 8007528:	4013      	ands	r3, r2
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10f      	bne.n	800754e <HAL_TIM_OnePulse_Stop+0xc2>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	6a1a      	ldr	r2, [r3, #32]
 8007534:	f240 4344 	movw	r3, #1092	; 0x444
 8007538:	4013      	ands	r3, r2
 800753a:	2b00      	cmp	r3, #0
 800753c:	d107      	bne.n	800754e <HAL_TIM_OnePulse_Stop+0xc2>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	6812      	ldr	r2, [r2, #0]
 8007546:	6812      	ldr	r2, [r2, #0]
 8007548:	f022 0201 	bic.w	r2, r2, #1
 800754c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3708      	adds	r7, #8
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	40012c00 	.word	0x40012c00
 800755c:	40013400 	.word	0x40013400
 8007560:	40014000 	.word	0x40014000
 8007564:	40014400 	.word	0x40014400
 8007568:	40014800 	.word	0x40014800

0800756c <HAL_TIM_OnePulse_Start_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	6812      	ldr	r2, [r2, #0]
 800757e:	68d2      	ldr	r2, [r2, #12]
 8007580:	f042 0202 	orr.w	r2, r2, #2
 8007584:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	6812      	ldr	r2, [r2, #0]
 800758e:	68d2      	ldr	r2, [r2, #12]
 8007590:	f042 0204 	orr.w	r2, r2, #4
 8007594:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2201      	movs	r2, #1
 800759c:	2100      	movs	r1, #0
 800759e:	4618      	mov	r0, r3
 80075a0:	f002 fe36 	bl	800a210 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2201      	movs	r2, #1
 80075aa:	2104      	movs	r1, #4
 80075ac:	4618      	mov	r0, r3
 80075ae:	f002 fe2f 	bl	800a210 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a14      	ldr	r2, [pc, #80]	; (8007608 <HAL_TIM_OnePulse_Start_IT+0x9c>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d013      	beq.n	80075e4 <HAL_TIM_OnePulse_Start_IT+0x78>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a12      	ldr	r2, [pc, #72]	; (800760c <HAL_TIM_OnePulse_Start_IT+0xa0>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d00e      	beq.n	80075e4 <HAL_TIM_OnePulse_Start_IT+0x78>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a11      	ldr	r2, [pc, #68]	; (8007610 <HAL_TIM_OnePulse_Start_IT+0xa4>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d009      	beq.n	80075e4 <HAL_TIM_OnePulse_Start_IT+0x78>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a0f      	ldr	r2, [pc, #60]	; (8007614 <HAL_TIM_OnePulse_Start_IT+0xa8>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d004      	beq.n	80075e4 <HAL_TIM_OnePulse_Start_IT+0x78>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a0e      	ldr	r2, [pc, #56]	; (8007618 <HAL_TIM_OnePulse_Start_IT+0xac>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d101      	bne.n	80075e8 <HAL_TIM_OnePulse_Start_IT+0x7c>
 80075e4:	2301      	movs	r3, #1
 80075e6:	e000      	b.n	80075ea <HAL_TIM_OnePulse_Start_IT+0x7e>
 80075e8:	2300      	movs	r3, #0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d007      	beq.n	80075fe <HAL_TIM_OnePulse_Start_IT+0x92>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	6812      	ldr	r2, [r2, #0]
 80075f6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80075f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3708      	adds	r7, #8
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	40012c00 	.word	0x40012c00
 800760c:	40013400 	.word	0x40013400
 8007610:	40014000 	.word	0x40014000
 8007614:	40014400 	.word	0x40014400
 8007618:	40014800 	.word	0x40014800

0800761c <HAL_TIM_OnePulse_Stop_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	6812      	ldr	r2, [r2, #0]
 800762e:	68d2      	ldr	r2, [r2, #12]
 8007630:	f022 0202 	bic.w	r2, r2, #2
 8007634:	60da      	str	r2, [r3, #12]

  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	6812      	ldr	r2, [r2, #0]
 800763e:	68d2      	ldr	r2, [r2, #12]
 8007640:	f022 0204 	bic.w	r2, r2, #4
 8007644:	60da      	str	r2, [r3, #12]
  /* Disable the Capture compare and the Input Capture channels
  (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
  if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
  in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2200      	movs	r2, #0
 800764c:	2100      	movs	r1, #0
 800764e:	4618      	mov	r0, r3
 8007650:	f002 fdde 	bl	800a210 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2200      	movs	r2, #0
 800765a:	2104      	movs	r1, #4
 800765c:	4618      	mov	r0, r3
 800765e:	f002 fdd7 	bl	800a210 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a28      	ldr	r2, [pc, #160]	; (8007708 <HAL_TIM_OnePulse_Stop_IT+0xec>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d013      	beq.n	8007694 <HAL_TIM_OnePulse_Stop_IT+0x78>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a26      	ldr	r2, [pc, #152]	; (800770c <HAL_TIM_OnePulse_Stop_IT+0xf0>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d00e      	beq.n	8007694 <HAL_TIM_OnePulse_Stop_IT+0x78>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a25      	ldr	r2, [pc, #148]	; (8007710 <HAL_TIM_OnePulse_Stop_IT+0xf4>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d009      	beq.n	8007694 <HAL_TIM_OnePulse_Stop_IT+0x78>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a23      	ldr	r2, [pc, #140]	; (8007714 <HAL_TIM_OnePulse_Stop_IT+0xf8>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d004      	beq.n	8007694 <HAL_TIM_OnePulse_Stop_IT+0x78>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a22      	ldr	r2, [pc, #136]	; (8007718 <HAL_TIM_OnePulse_Stop_IT+0xfc>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d101      	bne.n	8007698 <HAL_TIM_OnePulse_Stop_IT+0x7c>
 8007694:	2301      	movs	r3, #1
 8007696:	e000      	b.n	800769a <HAL_TIM_OnePulse_Stop_IT+0x7e>
 8007698:	2300      	movs	r3, #0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d017      	beq.n	80076ce <HAL_TIM_OnePulse_Stop_IT+0xb2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	6a1a      	ldr	r2, [r3, #32]
 80076a4:	f241 1311 	movw	r3, #4369	; 0x1111
 80076a8:	4013      	ands	r3, r2
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d10f      	bne.n	80076ce <HAL_TIM_OnePulse_Stop_IT+0xb2>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	6a1a      	ldr	r2, [r3, #32]
 80076b4:	f240 4344 	movw	r3, #1092	; 0x444
 80076b8:	4013      	ands	r3, r2
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d107      	bne.n	80076ce <HAL_TIM_OnePulse_Stop_IT+0xb2>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	6812      	ldr	r2, [r2, #0]
 80076c6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80076c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80076cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	6a1a      	ldr	r2, [r3, #32]
 80076d4:	f241 1311 	movw	r3, #4369	; 0x1111
 80076d8:	4013      	ands	r3, r2
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10f      	bne.n	80076fe <HAL_TIM_OnePulse_Stop_IT+0xe2>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	6a1a      	ldr	r2, [r3, #32]
 80076e4:	f240 4344 	movw	r3, #1092	; 0x444
 80076e8:	4013      	ands	r3, r2
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d107      	bne.n	80076fe <HAL_TIM_OnePulse_Stop_IT+0xe2>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	6812      	ldr	r2, [r2, #0]
 80076f6:	6812      	ldr	r2, [r2, #0]
 80076f8:	f022 0201 	bic.w	r2, r2, #1
 80076fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3708      	adds	r7, #8
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	40012c00 	.word	0x40012c00
 800770c:	40013400 	.word	0x40013400
 8007710:	40014000 	.word	0x40014000
 8007714:	40014400 	.word	0x40014400
 8007718:	40014800 	.word	0x40014800

0800771c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b086      	sub	sp, #24
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d101      	bne.n	8007730 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	e083      	b.n	8007838 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007736:	b2db      	uxtb	r3, r3
 8007738:	2b00      	cmp	r3, #0
 800773a:	d106      	bne.n	800774a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f8ab 	bl	80078a0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2202      	movs	r2, #2
 800774e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8007760:	f023 0307 	bic.w	r3, r3, #7
 8007764:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	3304      	adds	r3, #4
 800776e:	4619      	mov	r1, r3
 8007770:	4610      	mov	r0, r2
 8007772:	f001 ff97 	bl	80096a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	699b      	ldr	r3, [r3, #24]
 8007784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	6a1b      	ldr	r3, [r3, #32]
 800778c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	697a      	ldr	r2, [r7, #20]
 8007794:	4313      	orrs	r3, r2
 8007796:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800779e:	f023 0303 	bic.w	r3, r3, #3
 80077a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	689a      	ldr	r2, [r3, #8]
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	699b      	ldr	r3, [r3, #24]
 80077ac:	021b      	lsls	r3, r3, #8
 80077ae:	4313      	orrs	r3, r2
 80077b0:	693a      	ldr	r2, [r7, #16]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80077bc:	f023 030c 	bic.w	r3, r3, #12
 80077c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80077c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	68da      	ldr	r2, [r3, #12]
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	69db      	ldr	r3, [r3, #28]
 80077d6:	021b      	lsls	r3, r3, #8
 80077d8:	4313      	orrs	r3, r2
 80077da:	693a      	ldr	r2, [r7, #16]
 80077dc:	4313      	orrs	r3, r2
 80077de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	011a      	lsls	r2, r3, #4
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	6a1b      	ldr	r3, [r3, #32]
 80077ea:	031b      	lsls	r3, r3, #12
 80077ec:	4313      	orrs	r3, r2
 80077ee:	693a      	ldr	r2, [r7, #16]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80077fa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007802:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	685a      	ldr	r2, [r3, #4]
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	695b      	ldr	r3, [r3, #20]
 800780c:	011b      	lsls	r3, r3, #4
 800780e:	4313      	orrs	r3, r2
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	4313      	orrs	r3, r2
 8007814:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	697a      	ldr	r2, [r7, #20]
 800781c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2201      	movs	r2, #1
 8007832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3718      	adds	r7, #24
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <HAL_TIM_Encoder_DeInit>:
  * @brief  DeInitializes the TIM Encoder interface
  * @param  htim TIM Encoder Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_DeInit(TIM_HandleTypeDef *htim)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2202      	movs	r2, #2
 800784c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	6a1a      	ldr	r2, [r3, #32]
 8007856:	f241 1311 	movw	r3, #4369	; 0x1111
 800785a:	4013      	ands	r3, r2
 800785c:	2b00      	cmp	r3, #0
 800785e:	d10f      	bne.n	8007880 <HAL_TIM_Encoder_DeInit+0x40>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	6a1a      	ldr	r2, [r3, #32]
 8007866:	f240 4344 	movw	r3, #1092	; 0x444
 800786a:	4013      	ands	r3, r2
 800786c:	2b00      	cmp	r3, #0
 800786e:	d107      	bne.n	8007880 <HAL_TIM_Encoder_DeInit+0x40>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	6812      	ldr	r2, [r2, #0]
 8007878:	6812      	ldr	r2, [r2, #0]
 800787a:	f022 0201 	bic.w	r2, r2, #1
 800787e:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Encoder_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Encoder_MspDeInit(htim);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 f817 	bl	80078b4 <HAL_TIM_Encoder_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3708      	adds	r7, #8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 80078a8:	bf00      	nop
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <HAL_TIM_Encoder_MspDeInit>:
  * @brief  DeInitializes TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspDeInit(TIM_HandleTypeDef *htim)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspDeInit could be implemented in the user file
   */
}
 80078bc:	bf00      	nop
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d002      	beq.n	80078de <HAL_TIM_Encoder_Start+0x16>
 80078d8:	2b04      	cmp	r3, #4
 80078da:	d008      	beq.n	80078ee <HAL_TIM_Encoder_Start+0x26>
 80078dc:	e00f      	b.n	80078fe <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2201      	movs	r2, #1
 80078e4:	2100      	movs	r1, #0
 80078e6:	4618      	mov	r0, r3
 80078e8:	f002 fc92 	bl	800a210 <TIM_CCxChannelCmd>
      break;
 80078ec:	e016      	b.n	800791c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2201      	movs	r2, #1
 80078f4:	2104      	movs	r1, #4
 80078f6:	4618      	mov	r0, r3
 80078f8:	f002 fc8a 	bl	800a210 <TIM_CCxChannelCmd>
      break;
 80078fc:	e00e      	b.n	800791c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2201      	movs	r2, #1
 8007904:	2100      	movs	r1, #0
 8007906:	4618      	mov	r0, r3
 8007908:	f002 fc82 	bl	800a210 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2201      	movs	r2, #1
 8007912:	2104      	movs	r1, #4
 8007914:	4618      	mov	r0, r3
 8007916:	f002 fc7b 	bl	800a210 <TIM_CCxChannelCmd>
      break;
 800791a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	6812      	ldr	r2, [r2, #0]
 8007924:	6812      	ldr	r2, [r2, #0]
 8007926:	f042 0201 	orr.w	r2, r2, #1
 800792a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3708      	adds	r7, #8
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b082      	sub	sp, #8
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
 800793e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d002      	beq.n	800794c <HAL_TIM_Encoder_Stop+0x16>
 8007946:	2b04      	cmp	r3, #4
 8007948:	d008      	beq.n	800795c <HAL_TIM_Encoder_Stop+0x26>
 800794a:	e00f      	b.n	800796c <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2200      	movs	r2, #0
 8007952:	2100      	movs	r1, #0
 8007954:	4618      	mov	r0, r3
 8007956:	f002 fc5b 	bl	800a210 <TIM_CCxChannelCmd>
      break;
 800795a:	e016      	b.n	800798a <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2200      	movs	r2, #0
 8007962:	2104      	movs	r1, #4
 8007964:	4618      	mov	r0, r3
 8007966:	f002 fc53 	bl	800a210 <TIM_CCxChannelCmd>
      break;
 800796a:	e00e      	b.n	800798a <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2200      	movs	r2, #0
 8007972:	2100      	movs	r1, #0
 8007974:	4618      	mov	r0, r3
 8007976:	f002 fc4b 	bl	800a210 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2200      	movs	r2, #0
 8007980:	2104      	movs	r1, #4
 8007982:	4618      	mov	r0, r3
 8007984:	f002 fc44 	bl	800a210 <TIM_CCxChannelCmd>
      break;
 8007988:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	6a1a      	ldr	r2, [r3, #32]
 8007990:	f241 1311 	movw	r3, #4369	; 0x1111
 8007994:	4013      	ands	r3, r2
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10f      	bne.n	80079ba <HAL_TIM_Encoder_Stop+0x84>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	6a1a      	ldr	r2, [r3, #32]
 80079a0:	f240 4344 	movw	r3, #1092	; 0x444
 80079a4:	4013      	ands	r3, r2
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d107      	bne.n	80079ba <HAL_TIM_Encoder_Stop+0x84>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	6812      	ldr	r2, [r2, #0]
 80079b2:	6812      	ldr	r2, [r2, #0]
 80079b4:	f022 0201 	bic.w	r2, r2, #1
 80079b8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3708      	adds	r7, #8
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d002      	beq.n	80079da <HAL_TIM_Encoder_Start_IT+0x16>
 80079d4:	2b04      	cmp	r3, #4
 80079d6:	d010      	beq.n	80079fa <HAL_TIM_Encoder_Start_IT+0x36>
 80079d8:	e01f      	b.n	8007a1a <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2201      	movs	r2, #1
 80079e0:	2100      	movs	r1, #0
 80079e2:	4618      	mov	r0, r3
 80079e4:	f002 fc14 	bl	800a210 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	6812      	ldr	r2, [r2, #0]
 80079f0:	68d2      	ldr	r2, [r2, #12]
 80079f2:	f042 0202 	orr.w	r2, r2, #2
 80079f6:	60da      	str	r2, [r3, #12]
      break;
 80079f8:	e02e      	b.n	8007a58 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2201      	movs	r2, #1
 8007a00:	2104      	movs	r1, #4
 8007a02:	4618      	mov	r0, r3
 8007a04:	f002 fc04 	bl	800a210 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	6812      	ldr	r2, [r2, #0]
 8007a10:	68d2      	ldr	r2, [r2, #12]
 8007a12:	f042 0204 	orr.w	r2, r2, #4
 8007a16:	60da      	str	r2, [r3, #12]
      break;
 8007a18:	e01e      	b.n	8007a58 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	2100      	movs	r1, #0
 8007a22:	4618      	mov	r0, r3
 8007a24:	f002 fbf4 	bl	800a210 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	2104      	movs	r1, #4
 8007a30:	4618      	mov	r0, r3
 8007a32:	f002 fbed 	bl	800a210 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	6812      	ldr	r2, [r2, #0]
 8007a3e:	68d2      	ldr	r2, [r2, #12]
 8007a40:	f042 0202 	orr.w	r2, r2, #2
 8007a44:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	6812      	ldr	r2, [r2, #0]
 8007a4e:	68d2      	ldr	r2, [r2, #12]
 8007a50:	f042 0204 	orr.w	r2, r2, #4
 8007a54:	60da      	str	r2, [r3, #12]
      break;
 8007a56:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	6812      	ldr	r2, [r2, #0]
 8007a60:	6812      	ldr	r2, [r2, #0]
 8007a62:	f042 0201 	orr.w	r2, r2, #1
 8007a66:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3708      	adds	r7, #8
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b082      	sub	sp, #8
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
 8007a7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d10f      	bne.n	8007aa2 <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2200      	movs	r2, #0
 8007a88:	2100      	movs	r1, #0
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f002 fbc0 	bl	800a210 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	6812      	ldr	r2, [r2, #0]
 8007a98:	68d2      	ldr	r2, [r2, #12]
 8007a9a:	f022 0202 	bic.w	r2, r2, #2
 8007a9e:	60da      	str	r2, [r3, #12]
 8007aa0:	e030      	b.n	8007b04 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	2b04      	cmp	r3, #4
 8007aa6:	d10f      	bne.n	8007ac8 <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2200      	movs	r2, #0
 8007aae:	2104      	movs	r1, #4
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f002 fbad 	bl	800a210 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	6812      	ldr	r2, [r2, #0]
 8007abe:	68d2      	ldr	r2, [r2, #12]
 8007ac0:	f022 0204 	bic.w	r2, r2, #4
 8007ac4:	60da      	str	r2, [r3, #12]
 8007ac6:	e01d      	b.n	8007b04 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2200      	movs	r2, #0
 8007ace:	2100      	movs	r1, #0
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f002 fb9d 	bl	800a210 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2200      	movs	r2, #0
 8007adc:	2104      	movs	r1, #4
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f002 fb96 	bl	800a210 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	6812      	ldr	r2, [r2, #0]
 8007aec:	68d2      	ldr	r2, [r2, #12]
 8007aee:	f022 0202 	bic.w	r2, r2, #2
 8007af2:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	6812      	ldr	r2, [r2, #0]
 8007afc:	68d2      	ldr	r2, [r2, #12]
 8007afe:	f022 0204 	bic.w	r2, r2, #4
 8007b02:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	6a1a      	ldr	r2, [r3, #32]
 8007b0a:	f241 1311 	movw	r3, #4369	; 0x1111
 8007b0e:	4013      	ands	r3, r2
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d10f      	bne.n	8007b34 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	6a1a      	ldr	r2, [r3, #32]
 8007b1a:	f240 4344 	movw	r3, #1092	; 0x444
 8007b1e:	4013      	ands	r3, r2
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d107      	bne.n	8007b34 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	6812      	ldr	r2, [r2, #0]
 8007b2c:	6812      	ldr	r2, [r2, #0]
 8007b2e:	f022 0201 	bic.w	r2, r2, #1
 8007b32:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3708      	adds	r7, #8
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <HAL_TIM_Encoder_Start_DMA>:
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData1,
                                            uint32_t *pData2, uint16_t Length)
{
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b084      	sub	sp, #16
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	60f8      	str	r0, [r7, #12]
 8007b4e:	60b9      	str	r1, [r7, #8]
 8007b50:	607a      	str	r2, [r7, #4]
 8007b52:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  if ((htim->State == HAL_TIM_STATE_BUSY))
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d101      	bne.n	8007b64 <HAL_TIM_Encoder_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8007b60:	2302      	movs	r3, #2
 8007b62:	e0e0      	b.n	8007d26 <HAL_TIM_Encoder_Start_DMA+0x1e0>
  }
  else if ((htim->State == HAL_TIM_STATE_READY))
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d10e      	bne.n	8007b8e <HAL_TIM_Encoder_Start_DMA+0x48>
  {
    if ((((pData1 == NULL) || (pData2 == NULL))) && (Length > 0U))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d002      	beq.n	8007b7c <HAL_TIM_Encoder_Start_DMA+0x36>
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d104      	bne.n	8007b86 <HAL_TIM_Encoder_Start_DMA+0x40>
 8007b7c:	8b3b      	ldrh	r3, [r7, #24]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d001      	beq.n	8007b86 <HAL_TIM_Encoder_Start_DMA+0x40>
    {
      return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e0cf      	b.n	8007d26 <HAL_TIM_Encoder_Start_DMA+0x1e0>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2202      	movs	r2, #2
 8007b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	2b04      	cmp	r3, #4
 8007b92:	d037      	beq.n	8007c04 <HAL_TIM_Encoder_Start_DMA+0xbe>
 8007b94:	2b3c      	cmp	r3, #60	; 0x3c
 8007b96:	d068      	beq.n	8007c6a <HAL_TIM_Encoder_Start_DMA+0x124>
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d000      	beq.n	8007b9e <HAL_TIM_Encoder_Start_DMA+0x58>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
      break;
    }

    default:
      break;
 8007b9c:	e0c2      	b.n	8007d24 <HAL_TIM_Encoder_Start_DMA+0x1de>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba2:	4a63      	ldr	r2, [pc, #396]	; (8007d30 <HAL_TIM_Encoder_Start_DMA+0x1ea>)
 8007ba4:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007baa:	4a62      	ldr	r2, [pc, #392]	; (8007d34 <HAL_TIM_Encoder_Start_DMA+0x1ee>)
 8007bac:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb2:	4a61      	ldr	r2, [pc, #388]	; (8007d38 <HAL_TIM_Encoder_Start_DMA+0x1f2>)
 8007bb4:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1, Length) != HAL_OK)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	3334      	adds	r3, #52	; 0x34
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	8b3b      	ldrh	r3, [r7, #24]
 8007bc6:	f7f9 fa4a 	bl	800105e <HAL_DMA_Start_IT>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d001      	beq.n	8007bd4 <HAL_TIM_Encoder_Start_DMA+0x8e>
        return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e0a8      	b.n	8007d26 <HAL_TIM_Encoder_Start_DMA+0x1e0>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	6812      	ldr	r2, [r2, #0]
 8007bdc:	68d2      	ldr	r2, [r2, #12]
 8007bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007be2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE(htim);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	6812      	ldr	r2, [r2, #0]
 8007bec:	6812      	ldr	r2, [r2, #0]
 8007bee:	f042 0201 	orr.w	r2, r2, #1
 8007bf2:	601a      	str	r2, [r3, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	2100      	movs	r1, #0
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f002 fb07 	bl	800a210 <TIM_CCxChannelCmd>
      break;
 8007c02:	e08f      	b.n	8007d24 <HAL_TIM_Encoder_Start_DMA+0x1de>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c08:	4a49      	ldr	r2, [pc, #292]	; (8007d30 <HAL_TIM_Encoder_Start_DMA+0x1ea>)
 8007c0a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c10:	4a48      	ldr	r2, [pc, #288]	; (8007d34 <HAL_TIM_Encoder_Start_DMA+0x1ee>)
 8007c12:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c18:	4a47      	ldr	r2, [pc, #284]	; (8007d38 <HAL_TIM_Encoder_Start_DMA+0x1f2>)
 8007c1a:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length) != HAL_OK)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	3338      	adds	r3, #56	; 0x38
 8007c26:	4619      	mov	r1, r3
 8007c28:	683a      	ldr	r2, [r7, #0]
 8007c2a:	8b3b      	ldrh	r3, [r7, #24]
 8007c2c:	f7f9 fa17 	bl	800105e <HAL_DMA_Start_IT>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d001      	beq.n	8007c3a <HAL_TIM_Encoder_Start_DMA+0xf4>
        return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e075      	b.n	8007d26 <HAL_TIM_Encoder_Start_DMA+0x1e0>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	6812      	ldr	r2, [r2, #0]
 8007c42:	68d2      	ldr	r2, [r2, #12]
 8007c44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c48:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE(htim);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	6812      	ldr	r2, [r2, #0]
 8007c52:	6812      	ldr	r2, [r2, #0]
 8007c54:	f042 0201 	orr.w	r2, r2, #1
 8007c58:	601a      	str	r2, [r3, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	2104      	movs	r1, #4
 8007c62:	4618      	mov	r0, r3
 8007c64:	f002 fad4 	bl	800a210 <TIM_CCxChannelCmd>
      break;
 8007c68:	e05c      	b.n	8007d24 <HAL_TIM_Encoder_Start_DMA+0x1de>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6e:	4a30      	ldr	r2, [pc, #192]	; (8007d30 <HAL_TIM_Encoder_Start_DMA+0x1ea>)
 8007c70:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c76:	4a2f      	ldr	r2, [pc, #188]	; (8007d34 <HAL_TIM_Encoder_Start_DMA+0x1ee>)
 8007c78:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7e:	4a2e      	ldr	r2, [pc, #184]	; (8007d38 <HAL_TIM_Encoder_Start_DMA+0x1f2>)
 8007c80:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1, Length) != HAL_OK)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	3334      	adds	r3, #52	; 0x34
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	8b3b      	ldrh	r3, [r7, #24]
 8007c92:	f7f9 f9e4 	bl	800105e <HAL_DMA_Start_IT>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d001      	beq.n	8007ca0 <HAL_TIM_Encoder_Start_DMA+0x15a>
        return HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e042      	b.n	8007d26 <HAL_TIM_Encoder_Start_DMA+0x1e0>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca4:	4a22      	ldr	r2, [pc, #136]	; (8007d30 <HAL_TIM_Encoder_Start_DMA+0x1ea>)
 8007ca6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cac:	4a21      	ldr	r2, [pc, #132]	; (8007d34 <HAL_TIM_Encoder_Start_DMA+0x1ee>)
 8007cae:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb4:	4a20      	ldr	r2, [pc, #128]	; (8007d38 <HAL_TIM_Encoder_Start_DMA+0x1f2>)
 8007cb6:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length) != HAL_OK)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	3338      	adds	r3, #56	; 0x38
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	683a      	ldr	r2, [r7, #0]
 8007cc6:	8b3b      	ldrh	r3, [r7, #24]
 8007cc8:	f7f9 f9c9 	bl	800105e <HAL_DMA_Start_IT>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d001      	beq.n	8007cd6 <HAL_TIM_Encoder_Start_DMA+0x190>
        return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e027      	b.n	8007d26 <HAL_TIM_Encoder_Start_DMA+0x1e0>
      __HAL_TIM_ENABLE(htim);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	6812      	ldr	r2, [r2, #0]
 8007cde:	6812      	ldr	r2, [r2, #0]
 8007ce0:	f042 0201 	orr.w	r2, r2, #1
 8007ce4:	601a      	str	r2, [r3, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2201      	movs	r2, #1
 8007cec:	2100      	movs	r1, #0
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f002 fa8e 	bl	800a210 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	2104      	movs	r1, #4
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f002 fa87 	bl	800a210 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68fa      	ldr	r2, [r7, #12]
 8007d08:	6812      	ldr	r2, [r2, #0]
 8007d0a:	68d2      	ldr	r2, [r2, #12]
 8007d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d10:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	6812      	ldr	r2, [r2, #0]
 8007d1a:	68d2      	ldr	r2, [r2, #12]
 8007d1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d20:	60da      	str	r2, [r3, #12]
      break;
 8007d22:	bf00      	nop
  }
  /* Return function status */
  return HAL_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	08009535 	.word	0x08009535
 8007d34:	080095a5 	.word	0x080095a5
 8007d38:	08009431 	.word	0x08009431

08007d3c <HAL_TIM_Encoder_Stop_DMA>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d114      	bne.n	8007d76 <HAL_TIM_Encoder_Stop_DMA+0x3a>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2200      	movs	r2, #0
 8007d52:	2100      	movs	r1, #0
 8007d54:	4618      	mov	r0, r3
 8007d56:	f002 fa5b 	bl	800a210 <TIM_CCxChannelCmd>

    /* Disable the capture compare DMA Request 1 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	6812      	ldr	r2, [r2, #0]
 8007d62:	68d2      	ldr	r2, [r2, #12]
 8007d64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007d68:	60da      	str	r2, [r3, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7f9 fa13 	bl	800119a <HAL_DMA_Abort_IT>
 8007d74:	e03f      	b.n	8007df6 <HAL_TIM_Encoder_Stop_DMA+0xba>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	2b04      	cmp	r3, #4
 8007d7a:	d114      	bne.n	8007da6 <HAL_TIM_Encoder_Stop_DMA+0x6a>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2200      	movs	r2, #0
 8007d82:	2104      	movs	r1, #4
 8007d84:	4618      	mov	r0, r3
 8007d86:	f002 fa43 	bl	800a210 <TIM_CCxChannelCmd>

    /* Disable the capture compare DMA Request 2 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	6812      	ldr	r2, [r2, #0]
 8007d92:	68d2      	ldr	r2, [r2, #12]
 8007d94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d98:	60da      	str	r2, [r3, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7f9 f9fb 	bl	800119a <HAL_DMA_Abort_IT>
 8007da4:	e027      	b.n	8007df6 <HAL_TIM_Encoder_Stop_DMA+0xba>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2200      	movs	r2, #0
 8007dac:	2100      	movs	r1, #0
 8007dae:	4618      	mov	r0, r3
 8007db0:	f002 fa2e 	bl	800a210 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2200      	movs	r2, #0
 8007dba:	2104      	movs	r1, #4
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f002 fa27 	bl	800a210 <TIM_CCxChannelCmd>

    /* Disable the capture compare DMA Request 1 and 2 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	6812      	ldr	r2, [r2, #0]
 8007dca:	68d2      	ldr	r2, [r2, #12]
 8007dcc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007dd0:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	6812      	ldr	r2, [r2, #0]
 8007dda:	68d2      	ldr	r2, [r2, #12]
 8007ddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007de0:	60da      	str	r2, [r3, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7f9 f9d7 	bl	800119a <HAL_DMA_Abort_IT>
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7f9 f9d2 	bl	800119a <HAL_DMA_Abort_IT>
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	6a1a      	ldr	r2, [r3, #32]
 8007dfc:	f241 1311 	movw	r3, #4369	; 0x1111
 8007e00:	4013      	ands	r3, r2
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d10f      	bne.n	8007e26 <HAL_TIM_Encoder_Stop_DMA+0xea>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	6a1a      	ldr	r2, [r3, #32]
 8007e0c:	f240 4344 	movw	r3, #1092	; 0x444
 8007e10:	4013      	ands	r3, r2
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d107      	bne.n	8007e26 <HAL_TIM_Encoder_Stop_DMA+0xea>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	6812      	ldr	r2, [r2, #0]
 8007e1e:	6812      	ldr	r2, [r2, #0]
 8007e20:	f022 0201 	bic.w	r2, r2, #1
 8007e24:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3708      	adds	r7, #8
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	f003 0302 	and.w	r3, r3, #2
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	d122      	bne.n	8007e94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	f003 0302 	and.w	r3, r3, #2
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	d11b      	bne.n	8007e94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f06f 0202 	mvn.w	r2, #2
 8007e64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	699b      	ldr	r3, [r3, #24]
 8007e72:	f003 0303 	and.w	r3, r3, #3
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d003      	beq.n	8007e82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f001 fa3e 	bl	80092fc <HAL_TIM_IC_CaptureCallback>
 8007e80:	e005      	b.n	8007e8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f001 fa30 	bl	80092e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f001 fa4b 	bl	8009324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	f003 0304 	and.w	r3, r3, #4
 8007e9e:	2b04      	cmp	r3, #4
 8007ea0:	d122      	bne.n	8007ee8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	f003 0304 	and.w	r3, r3, #4
 8007eac:	2b04      	cmp	r3, #4
 8007eae:	d11b      	bne.n	8007ee8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f06f 0204 	mvn.w	r2, #4
 8007eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2202      	movs	r2, #2
 8007ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	699b      	ldr	r3, [r3, #24]
 8007ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d003      	beq.n	8007ed6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f001 fa14 	bl	80092fc <HAL_TIM_IC_CaptureCallback>
 8007ed4:	e005      	b.n	8007ee2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f001 fa06 	bl	80092e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f001 fa21 	bl	8009324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	f003 0308 	and.w	r3, r3, #8
 8007ef2:	2b08      	cmp	r3, #8
 8007ef4:	d122      	bne.n	8007f3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	f003 0308 	and.w	r3, r3, #8
 8007f00:	2b08      	cmp	r3, #8
 8007f02:	d11b      	bne.n	8007f3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f06f 0208 	mvn.w	r2, #8
 8007f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2204      	movs	r2, #4
 8007f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	69db      	ldr	r3, [r3, #28]
 8007f1a:	f003 0303 	and.w	r3, r3, #3
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d003      	beq.n	8007f2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f001 f9ea 	bl	80092fc <HAL_TIM_IC_CaptureCallback>
 8007f28:	e005      	b.n	8007f36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f001 f9dc 	bl	80092e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f001 f9f7 	bl	8009324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	f003 0310 	and.w	r3, r3, #16
 8007f46:	2b10      	cmp	r3, #16
 8007f48:	d122      	bne.n	8007f90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	f003 0310 	and.w	r3, r3, #16
 8007f54:	2b10      	cmp	r3, #16
 8007f56:	d11b      	bne.n	8007f90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f06f 0210 	mvn.w	r2, #16
 8007f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2208      	movs	r2, #8
 8007f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	69db      	ldr	r3, [r3, #28]
 8007f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d003      	beq.n	8007f7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f001 f9c0 	bl	80092fc <HAL_TIM_IC_CaptureCallback>
 8007f7c:	e005      	b.n	8007f8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f001 f9b2 	bl	80092e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f001 f9cd 	bl	8009324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	f003 0301 	and.w	r3, r3, #1
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d10e      	bne.n	8007fbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	f003 0301 	and.w	r3, r3, #1
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d107      	bne.n	8007fbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f06f 0201 	mvn.w	r2, #1
 8007fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f001 f982 	bl	80092c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fc6:	2b80      	cmp	r3, #128	; 0x80
 8007fc8:	d10e      	bne.n	8007fe8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fd4:	2b80      	cmp	r3, #128	; 0x80
 8007fd6:	d107      	bne.n	8007fe8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f003 fc9f 	bl	800b926 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ff6:	d10e      	bne.n	8008016 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008002:	2b80      	cmp	r3, #128	; 0x80
 8008004:	d107      	bne.n	8008016 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800800e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f003 fc92 	bl	800b93a <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008020:	2b40      	cmp	r3, #64	; 0x40
 8008022:	d10e      	bne.n	8008042 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800802e:	2b40      	cmp	r3, #64	; 0x40
 8008030:	d107      	bne.n	8008042 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800803a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f001 f985 	bl	800934c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	f003 0320 	and.w	r3, r3, #32
 800804c:	2b20      	cmp	r3, #32
 800804e:	d10e      	bne.n	800806e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	f003 0320 	and.w	r3, r3, #32
 800805a:	2b20      	cmp	r3, #32
 800805c:	d107      	bne.n	800806e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f06f 0220 	mvn.w	r2, #32
 8008066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f003 fc48 	bl	800b8fe <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800806e:	bf00      	nop
 8008070:	3708      	adds	r7, #8
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b084      	sub	sp, #16
 800807a:	af00      	add	r7, sp, #0
 800807c:	60f8      	str	r0, [r7, #12]
 800807e:	60b9      	str	r1, [r7, #8]
 8008080:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008088:	2b01      	cmp	r3, #1
 800808a:	d101      	bne.n	8008090 <HAL_TIM_OC_ConfigChannel+0x1a>
 800808c:	2302      	movs	r3, #2
 800808e:	e06b      	b.n	8008168 <HAL_TIM_OC_ConfigChannel+0xf2>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2202      	movs	r2, #2
 800809c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2b14      	cmp	r3, #20
 80080a4:	d856      	bhi.n	8008154 <HAL_TIM_OC_ConfigChannel+0xde>
 80080a6:	a201      	add	r2, pc, #4	; (adr r2, 80080ac <HAL_TIM_OC_ConfigChannel+0x36>)
 80080a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ac:	08008101 	.word	0x08008101
 80080b0:	08008155 	.word	0x08008155
 80080b4:	08008155 	.word	0x08008155
 80080b8:	08008155 	.word	0x08008155
 80080bc:	0800810f 	.word	0x0800810f
 80080c0:	08008155 	.word	0x08008155
 80080c4:	08008155 	.word	0x08008155
 80080c8:	08008155 	.word	0x08008155
 80080cc:	0800811d 	.word	0x0800811d
 80080d0:	08008155 	.word	0x08008155
 80080d4:	08008155 	.word	0x08008155
 80080d8:	08008155 	.word	0x08008155
 80080dc:	0800812b 	.word	0x0800812b
 80080e0:	08008155 	.word	0x08008155
 80080e4:	08008155 	.word	0x08008155
 80080e8:	08008155 	.word	0x08008155
 80080ec:	08008139 	.word	0x08008139
 80080f0:	08008155 	.word	0x08008155
 80080f4:	08008155 	.word	0x08008155
 80080f8:	08008155 	.word	0x08008155
 80080fc:	08008147 	.word	0x08008147
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68b9      	ldr	r1, [r7, #8]
 8008106:	4618      	mov	r0, r3
 8008108:	f001 fb66 	bl	80097d8 <TIM_OC1_SetConfig>
      break;
 800810c:	e023      	b.n	8008156 <HAL_TIM_OC_ConfigChannel+0xe0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68b9      	ldr	r1, [r7, #8]
 8008114:	4618      	mov	r0, r3
 8008116:	f001 fbef 	bl	80098f8 <TIM_OC2_SetConfig>
      break;
 800811a:	e01c      	b.n	8008156 <HAL_TIM_OC_ConfigChannel+0xe0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	68b9      	ldr	r1, [r7, #8]
 8008122:	4618      	mov	r0, r3
 8008124:	f001 fc72 	bl	8009a0c <TIM_OC3_SetConfig>
      break;
 8008128:	e015      	b.n	8008156 <HAL_TIM_OC_ConfigChannel+0xe0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	68b9      	ldr	r1, [r7, #8]
 8008130:	4618      	mov	r0, r3
 8008132:	f001 fcf3 	bl	8009b1c <TIM_OC4_SetConfig>
      break;
 8008136:	e00e      	b.n	8008156 <HAL_TIM_OC_ConfigChannel+0xe0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68b9      	ldr	r1, [r7, #8]
 800813e:	4618      	mov	r0, r3
 8008140:	f001 fd56 	bl	8009bf0 <TIM_OC5_SetConfig>
      break;
 8008144:	e007      	b.n	8008156 <HAL_TIM_OC_ConfigChannel+0xe0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	68b9      	ldr	r1, [r7, #8]
 800814c:	4618      	mov	r0, r3
 800814e:	f001 fdb3 	bl	8009cb8 <TIM_OC6_SetConfig>
      break;
 8008152:	e000      	b.n	8008156 <HAL_TIM_OC_ConfigChannel+0xe0>
    }

    default:
      break;
 8008154:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2201      	movs	r2, #1
 800815a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008182:	2b01      	cmp	r3, #1
 8008184:	d101      	bne.n	800818a <HAL_TIM_IC_ConfigChannel+0x1a>
 8008186:	2302      	movs	r3, #2
 8008188:	e08a      	b.n	80082a0 <HAL_TIM_IC_ConfigChannel+0x130>
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2201      	movs	r2, #1
 800818e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2202      	movs	r2, #2
 8008196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d11b      	bne.n	80081d8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6818      	ldr	r0, [r3, #0]
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	6819      	ldr	r1, [r3, #0]
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	685a      	ldr	r2, [r3, #4]
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	f001 fe70 	bl	8009e94 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	6812      	ldr	r2, [r2, #0]
 80081bc:	6992      	ldr	r2, [r2, #24]
 80081be:	f022 020c 	bic.w	r2, r2, #12
 80081c2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	6812      	ldr	r2, [r2, #0]
 80081cc:	6991      	ldr	r1, [r2, #24]
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	6892      	ldr	r2, [r2, #8]
 80081d2:	430a      	orrs	r2, r1
 80081d4:	619a      	str	r2, [r3, #24]
 80081d6:	e05a      	b.n	800828e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2b04      	cmp	r3, #4
 80081dc:	d11c      	bne.n	8008218 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6818      	ldr	r0, [r3, #0]
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	6819      	ldr	r1, [r3, #0]
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	685a      	ldr	r2, [r3, #4]
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	f001 feee 	bl	8009fce <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	6812      	ldr	r2, [r2, #0]
 80081fa:	6992      	ldr	r2, [r2, #24]
 80081fc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008200:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	6812      	ldr	r2, [r2, #0]
 800820a:	6991      	ldr	r1, [r2, #24]
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	6892      	ldr	r2, [r2, #8]
 8008210:	0212      	lsls	r2, r2, #8
 8008212:	430a      	orrs	r2, r1
 8008214:	619a      	str	r2, [r3, #24]
 8008216:	e03a      	b.n	800828e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b08      	cmp	r3, #8
 800821c:	d11b      	bne.n	8008256 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6818      	ldr	r0, [r3, #0]
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	6819      	ldr	r1, [r3, #0]
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	685a      	ldr	r2, [r3, #4]
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	f001 ff3b 	bl	800a0a8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68fa      	ldr	r2, [r7, #12]
 8008238:	6812      	ldr	r2, [r2, #0]
 800823a:	69d2      	ldr	r2, [r2, #28]
 800823c:	f022 020c 	bic.w	r2, r2, #12
 8008240:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	6812      	ldr	r2, [r2, #0]
 800824a:	69d1      	ldr	r1, [r2, #28]
 800824c:	68ba      	ldr	r2, [r7, #8]
 800824e:	6892      	ldr	r2, [r2, #8]
 8008250:	430a      	orrs	r2, r1
 8008252:	61da      	str	r2, [r3, #28]
 8008254:	e01b      	b.n	800828e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6818      	ldr	r0, [r3, #0]
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	6819      	ldr	r1, [r3, #0]
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	685a      	ldr	r2, [r3, #4]
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	f001 ff5b 	bl	800a120 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	6812      	ldr	r2, [r2, #0]
 8008272:	69d2      	ldr	r2, [r2, #28]
 8008274:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008278:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	68fa      	ldr	r2, [r7, #12]
 8008280:	6812      	ldr	r2, [r2, #0]
 8008282:	69d1      	ldr	r1, [r2, #28]
 8008284:	68ba      	ldr	r2, [r7, #8]
 8008286:	6892      	ldr	r2, [r2, #8]
 8008288:	0212      	lsls	r2, r2, #8
 800828a:	430a      	orrs	r2, r1
 800828c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2201      	movs	r2, #1
 8008292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3710      	adds	r7, #16
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d101      	bne.n	80082c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80082be:	2302      	movs	r3, #2
 80082c0:	e105      	b.n	80084ce <HAL_TIM_PWM_ConfigChannel+0x226>
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2201      	movs	r2, #1
 80082c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2202      	movs	r2, #2
 80082ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2b14      	cmp	r3, #20
 80082d6:	f200 80f0 	bhi.w	80084ba <HAL_TIM_PWM_ConfigChannel+0x212>
 80082da:	a201      	add	r2, pc, #4	; (adr r2, 80082e0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80082dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e0:	08008335 	.word	0x08008335
 80082e4:	080084bb 	.word	0x080084bb
 80082e8:	080084bb 	.word	0x080084bb
 80082ec:	080084bb 	.word	0x080084bb
 80082f0:	08008375 	.word	0x08008375
 80082f4:	080084bb 	.word	0x080084bb
 80082f8:	080084bb 	.word	0x080084bb
 80082fc:	080084bb 	.word	0x080084bb
 8008300:	080083b7 	.word	0x080083b7
 8008304:	080084bb 	.word	0x080084bb
 8008308:	080084bb 	.word	0x080084bb
 800830c:	080084bb 	.word	0x080084bb
 8008310:	080083f7 	.word	0x080083f7
 8008314:	080084bb 	.word	0x080084bb
 8008318:	080084bb 	.word	0x080084bb
 800831c:	080084bb 	.word	0x080084bb
 8008320:	08008439 	.word	0x08008439
 8008324:	080084bb 	.word	0x080084bb
 8008328:	080084bb 	.word	0x080084bb
 800832c:	080084bb 	.word	0x080084bb
 8008330:	08008479 	.word	0x08008479
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68b9      	ldr	r1, [r7, #8]
 800833a:	4618      	mov	r0, r3
 800833c:	f001 fa4c 	bl	80097d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	6812      	ldr	r2, [r2, #0]
 8008348:	6992      	ldr	r2, [r2, #24]
 800834a:	f042 0208 	orr.w	r2, r2, #8
 800834e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	6812      	ldr	r2, [r2, #0]
 8008358:	6992      	ldr	r2, [r2, #24]
 800835a:	f022 0204 	bic.w	r2, r2, #4
 800835e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	68fa      	ldr	r2, [r7, #12]
 8008366:	6812      	ldr	r2, [r2, #0]
 8008368:	6991      	ldr	r1, [r2, #24]
 800836a:	68ba      	ldr	r2, [r7, #8]
 800836c:	6912      	ldr	r2, [r2, #16]
 800836e:	430a      	orrs	r2, r1
 8008370:	619a      	str	r2, [r3, #24]
      break;
 8008372:	e0a3      	b.n	80084bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	68b9      	ldr	r1, [r7, #8]
 800837a:	4618      	mov	r0, r3
 800837c:	f001 fabc 	bl	80098f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	6812      	ldr	r2, [r2, #0]
 8008388:	6992      	ldr	r2, [r2, #24]
 800838a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800838e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	6812      	ldr	r2, [r2, #0]
 8008398:	6992      	ldr	r2, [r2, #24]
 800839a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800839e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	68fa      	ldr	r2, [r7, #12]
 80083a6:	6812      	ldr	r2, [r2, #0]
 80083a8:	6991      	ldr	r1, [r2, #24]
 80083aa:	68ba      	ldr	r2, [r7, #8]
 80083ac:	6912      	ldr	r2, [r2, #16]
 80083ae:	0212      	lsls	r2, r2, #8
 80083b0:	430a      	orrs	r2, r1
 80083b2:	619a      	str	r2, [r3, #24]
      break;
 80083b4:	e082      	b.n	80084bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	68b9      	ldr	r1, [r7, #8]
 80083bc:	4618      	mov	r0, r3
 80083be:	f001 fb25 	bl	8009a0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	6812      	ldr	r2, [r2, #0]
 80083ca:	69d2      	ldr	r2, [r2, #28]
 80083cc:	f042 0208 	orr.w	r2, r2, #8
 80083d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	6812      	ldr	r2, [r2, #0]
 80083da:	69d2      	ldr	r2, [r2, #28]
 80083dc:	f022 0204 	bic.w	r2, r2, #4
 80083e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	6812      	ldr	r2, [r2, #0]
 80083ea:	69d1      	ldr	r1, [r2, #28]
 80083ec:	68ba      	ldr	r2, [r7, #8]
 80083ee:	6912      	ldr	r2, [r2, #16]
 80083f0:	430a      	orrs	r2, r1
 80083f2:	61da      	str	r2, [r3, #28]
      break;
 80083f4:	e062      	b.n	80084bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	68b9      	ldr	r1, [r7, #8]
 80083fc:	4618      	mov	r0, r3
 80083fe:	f001 fb8d 	bl	8009b1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	6812      	ldr	r2, [r2, #0]
 800840a:	69d2      	ldr	r2, [r2, #28]
 800840c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008410:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	6812      	ldr	r2, [r2, #0]
 800841a:	69d2      	ldr	r2, [r2, #28]
 800841c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008420:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	6812      	ldr	r2, [r2, #0]
 800842a:	69d1      	ldr	r1, [r2, #28]
 800842c:	68ba      	ldr	r2, [r7, #8]
 800842e:	6912      	ldr	r2, [r2, #16]
 8008430:	0212      	lsls	r2, r2, #8
 8008432:	430a      	orrs	r2, r1
 8008434:	61da      	str	r2, [r3, #28]
      break;
 8008436:	e041      	b.n	80084bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	68b9      	ldr	r1, [r7, #8]
 800843e:	4618      	mov	r0, r3
 8008440:	f001 fbd6 	bl	8009bf0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	6812      	ldr	r2, [r2, #0]
 800844c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800844e:	f042 0208 	orr.w	r2, r2, #8
 8008452:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	6812      	ldr	r2, [r2, #0]
 800845c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800845e:	f022 0204 	bic.w	r2, r2, #4
 8008462:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	6812      	ldr	r2, [r2, #0]
 800846c:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800846e:	68ba      	ldr	r2, [r7, #8]
 8008470:	6912      	ldr	r2, [r2, #16]
 8008472:	430a      	orrs	r2, r1
 8008474:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008476:	e021      	b.n	80084bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68b9      	ldr	r1, [r7, #8]
 800847e:	4618      	mov	r0, r3
 8008480:	f001 fc1a 	bl	8009cb8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	6812      	ldr	r2, [r2, #0]
 800848c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800848e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008492:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	6812      	ldr	r2, [r2, #0]
 800849c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800849e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	6812      	ldr	r2, [r2, #0]
 80084ac:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80084ae:	68ba      	ldr	r2, [r7, #8]
 80084b0:	6912      	ldr	r2, [r2, #16]
 80084b2:	0212      	lsls	r2, r2, #8
 80084b4:	430a      	orrs	r2, r1
 80084b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80084b8:	e000      	b.n	80084bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80084ba:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <HAL_TIM_OnePulse_ConfigChannel>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_ConfigChannel(TIM_HandleTypeDef *htim,  TIM_OnePulse_InitTypeDef *sConfig,
                                                 uint32_t OutputChannel,  uint32_t InputChannel)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b08c      	sub	sp, #48	; 0x30
 80084da:	af00      	add	r7, sp, #0
 80084dc:	60f8      	str	r0, [r7, #12]
 80084de:	60b9      	str	r1, [r7, #8]
 80084e0:	607a      	str	r2, [r7, #4]
 80084e2:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_OPM_CHANNELS(OutputChannel));
  assert_param(IS_TIM_OPM_CHANNELS(InputChannel));

  if (OutputChannel != InputChannel)
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	f000 80b3 	beq.w	8008654 <HAL_TIM_OnePulse_ConfigChannel+0x17e>
  {
    /* Process Locked */
    __HAL_LOCK(htim);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d101      	bne.n	80084fc <HAL_TIM_OnePulse_ConfigChannel+0x26>
 80084f8:	2302      	movs	r3, #2
 80084fa:	e0ac      	b.n	8008656 <HAL_TIM_OnePulse_ConfigChannel+0x180>
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2201      	movs	r2, #1
 8008500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    htim->State = HAL_TIM_STATE_BUSY;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2202      	movs	r2, #2
 8008508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Extract the Output compare configuration from sConfig structure */
    temp1.OCMode = sConfig->OCMode;
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	617b      	str	r3, [r7, #20]
    temp1.Pulse = sConfig->Pulse;
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	61bb      	str	r3, [r7, #24]
    temp1.OCPolarity = sConfig->OCPolarity;
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	61fb      	str	r3, [r7, #28]
    temp1.OCNPolarity = sConfig->OCNPolarity;
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	623b      	str	r3, [r7, #32]
    temp1.OCIdleState = sConfig->OCIdleState;
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	62bb      	str	r3, [r7, #40]	; 0x28
    temp1.OCNIdleState = sConfig->OCNIdleState;
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	695b      	ldr	r3, [r3, #20]
 800852e:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (OutputChannel)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d002      	beq.n	800853c <HAL_TIM_OnePulse_ConfigChannel+0x66>
 8008536:	2b04      	cmp	r3, #4
 8008538:	d009      	beq.n	800854e <HAL_TIM_OnePulse_ConfigChannel+0x78>

        TIM_OC2_SetConfig(htim->Instance, &temp1);
        break;
      }
      default:
        break;
 800853a:	e011      	b.n	8008560 <HAL_TIM_OnePulse_ConfigChannel+0x8a>
        TIM_OC1_SetConfig(htim->Instance, &temp1);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f107 0214 	add.w	r2, r7, #20
 8008544:	4611      	mov	r1, r2
 8008546:	4618      	mov	r0, r3
 8008548:	f001 f946 	bl	80097d8 <TIM_OC1_SetConfig>
        break;
 800854c:	e008      	b.n	8008560 <HAL_TIM_OnePulse_ConfigChannel+0x8a>
        TIM_OC2_SetConfig(htim->Instance, &temp1);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f107 0214 	add.w	r2, r7, #20
 8008556:	4611      	mov	r1, r2
 8008558:	4618      	mov	r0, r3
 800855a:	f001 f9cd 	bl	80098f8 <TIM_OC2_SetConfig>
        break;
 800855e:	bf00      	nop
    }

    switch (InputChannel)
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d002      	beq.n	800856c <HAL_TIM_OnePulse_ConfigChannel+0x96>
 8008566:	2b04      	cmp	r3, #4
 8008568:	d035      	beq.n	80085d6 <HAL_TIM_OnePulse_ConfigChannel+0x100>
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
        break;
      }

      default:
        break;
 800856a:	e069      	b.n	8008640 <HAL_TIM_OnePulse_ConfigChannel+0x16a>
        TIM_TI1_SetConfig(htim->Instance, sConfig->ICPolarity,
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6818      	ldr	r0, [r3, #0]
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	6999      	ldr	r1, [r3, #24]
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	69da      	ldr	r2, [r3, #28]
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	6a1b      	ldr	r3, [r3, #32]
 800857c:	f001 fc8a 	bl	8009e94 <TIM_TI1_SetConfig>
        htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68fa      	ldr	r2, [r7, #12]
 8008586:	6812      	ldr	r2, [r2, #0]
 8008588:	6992      	ldr	r2, [r2, #24]
 800858a:	f022 020c 	bic.w	r2, r2, #12
 800858e:	619a      	str	r2, [r3, #24]
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	6812      	ldr	r2, [r2, #0]
 8008598:	6892      	ldr	r2, [r2, #8]
 800859a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800859e:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_TS_TI1FP1;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	6812      	ldr	r2, [r2, #0]
 80085a8:	6892      	ldr	r2, [r2, #8]
 80085aa:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 80085ae:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085be:	f023 0307 	bic.w	r3, r3, #7
 80085c2:	6093      	str	r3, [r2, #8]
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	6812      	ldr	r2, [r2, #0]
 80085cc:	6892      	ldr	r2, [r2, #8]
 80085ce:	f042 0206 	orr.w	r2, r2, #6
 80085d2:	609a      	str	r2, [r3, #8]
        break;
 80085d4:	e034      	b.n	8008640 <HAL_TIM_OnePulse_ConfigChannel+0x16a>
        TIM_TI2_SetConfig(htim->Instance, sConfig->ICPolarity,
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6818      	ldr	r0, [r3, #0]
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	6999      	ldr	r1, [r3, #24]
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	69da      	ldr	r2, [r3, #28]
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	6a1b      	ldr	r3, [r3, #32]
 80085e6:	f001 fcf2 	bl	8009fce <TIM_TI2_SetConfig>
        htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	6812      	ldr	r2, [r2, #0]
 80085f2:	6992      	ldr	r2, [r2, #24]
 80085f4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80085f8:	619a      	str	r2, [r3, #24]
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68fa      	ldr	r2, [r7, #12]
 8008600:	6812      	ldr	r2, [r2, #0]
 8008602:	6892      	ldr	r2, [r2, #8]
 8008604:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008608:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_TS_TI2FP2;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	6812      	ldr	r2, [r2, #0]
 8008612:	6892      	ldr	r2, [r2, #8]
 8008614:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8008618:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008628:	f023 0307 	bic.w	r3, r3, #7
 800862c:	6093      	str	r3, [r2, #8]
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	68fa      	ldr	r2, [r7, #12]
 8008634:	6812      	ldr	r2, [r2, #0]
 8008636:	6892      	ldr	r2, [r2, #8]
 8008638:	f042 0206 	orr.w	r2, r2, #6
 800863c:	609a      	str	r2, [r3, #8]
        break;
 800863e:	bf00      	nop
    }

    htim->State = HAL_TIM_STATE_READY;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    __HAL_UNLOCK(htim);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008650:	2300      	movs	r3, #0
 8008652:	e000      	b.n	8008656 <HAL_TIM_OnePulse_ConfigChannel+0x180>
  }
  else
  {
    return HAL_ERROR;
 8008654:	2301      	movs	r3, #1
  }
}
 8008656:	4618      	mov	r0, r3
 8008658:	3730      	adds	r7, #48	; 0x30
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <HAL_TIM_DMABurst_WriteStart>:
  * @note   This function should be used only when BurstLength is equal to DMA data transfer length.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc,
                                              uint32_t *BurstBuffer, uint32_t  BurstLength)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b084      	sub	sp, #16
 8008662:	af00      	add	r7, sp, #0
 8008664:	60f8      	str	r0, [r7, #12]
 8008666:	60b9      	str	r1, [r7, #8]
 8008668:	607a      	str	r2, [r7, #4]
 800866a:	603b      	str	r3, [r7, #0]
  assert_param(IS_TIM_DMABURST_INSTANCE(htim->Instance));
  assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  assert_param(IS_TIM_DMA_LENGTH(BurstLength));

  if ((htim->State == HAL_TIM_STATE_BUSY))
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008672:	b2db      	uxtb	r3, r3
 8008674:	2b02      	cmp	r3, #2
 8008676:	d101      	bne.n	800867c <HAL_TIM_DMABurst_WriteStart+0x1e>
  {
    return HAL_BUSY;
 8008678:	2302      	movs	r3, #2
 800867a:	e11b      	b.n	80088b4 <HAL_TIM_DMABurst_WriteStart+0x256>
  }
  else if ((htim->State == HAL_TIM_STATE_READY))
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008682:	b2db      	uxtb	r3, r3
 8008684:	2b01      	cmp	r3, #1
 8008686:	d10b      	bne.n	80086a0 <HAL_TIM_DMABurst_WriteStart+0x42>
  {
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d104      	bne.n	8008698 <HAL_TIM_DMABurst_WriteStart+0x3a>
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d001      	beq.n	8008698 <HAL_TIM_DMABurst_WriteStart+0x3a>
    {
      return HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	e10d      	b.n	80088b4 <HAL_TIM_DMABurst_WriteStart+0x256>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2202      	movs	r2, #2
 800869c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }
  else
  {
    /* nothing to do */
  }
  switch (BurstRequestSrc)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086a6:	d071      	beq.n	800878c <HAL_TIM_DMABurst_WriteStart+0x12e>
 80086a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086ac:	d809      	bhi.n	80086c2 <HAL_TIM_DMABurst_WriteStart+0x64>
 80086ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086b2:	d030      	beq.n	8008716 <HAL_TIM_DMABurst_WriteStart+0xb8>
 80086b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086b8:	d04b      	beq.n	8008752 <HAL_TIM_DMABurst_WriteStart+0xf4>
 80086ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086be:	d00c      	beq.n	80086da <HAL_TIM_DMABurst_WriteStart+0x7c>
        return HAL_ERROR;
      }
      break;
    }
    default:
      break;
 80086c0:	e0e5      	b.n	800888e <HAL_TIM_DMABurst_WriteStart+0x230>
  switch (BurstRequestSrc)
 80086c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086c6:	f000 809b 	beq.w	8008800 <HAL_TIM_DMABurst_WriteStart+0x1a2>
 80086ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086ce:	f000 80b4 	beq.w	800883a <HAL_TIM_DMABurst_WriteStart+0x1dc>
 80086d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086d6:	d076      	beq.n	80087c6 <HAL_TIM_DMABurst_WriteStart+0x168>
      break;
 80086d8:	e0d9      	b.n	800888e <HAL_TIM_DMABurst_WriteStart+0x230>
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6a1b      	ldr	r3, [r3, #32]
 80086de:	4a77      	ldr	r2, [pc, #476]	; (80088bc <HAL_TIM_DMABurst_WriteStart+0x25e>)
 80086e0:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6a1b      	ldr	r3, [r3, #32]
 80086e6:	4a76      	ldr	r2, [pc, #472]	; (80088c0 <HAL_TIM_DMABurst_WriteStart+0x262>)
 80086e8:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6a1b      	ldr	r3, [r3, #32]
 80086ee:	4a75      	ldr	r2, [pc, #468]	; (80088c4 <HAL_TIM_DMABurst_WriteStart+0x266>)
 80086f0:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	6a18      	ldr	r0, [r3, #32]
 80086f6:	6839      	ldr	r1, [r7, #0]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	334c      	adds	r3, #76	; 0x4c
 80086fe:	461a      	mov	r2, r3
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	0a1b      	lsrs	r3, r3, #8
 8008704:	3301      	adds	r3, #1
 8008706:	f7f8 fcaa 	bl	800105e <HAL_DMA_Start_IT>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	f000 80b1 	beq.w	8008874 <HAL_TIM_DMABurst_WriteStart+0x216>
        return HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	e0ce      	b.n	80088b4 <HAL_TIM_DMABurst_WriteStart+0x256>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871a:	4a6b      	ldr	r2, [pc, #428]	; (80088c8 <HAL_TIM_DMABurst_WriteStart+0x26a>)
 800871c:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008722:	4a6a      	ldr	r2, [pc, #424]	; (80088cc <HAL_TIM_DMABurst_WriteStart+0x26e>)
 8008724:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872a:	4a66      	ldr	r2, [pc, #408]	; (80088c4 <HAL_TIM_DMABurst_WriteStart+0x266>)
 800872c:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer,
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008732:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	334c      	adds	r3, #76	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer,
 800873a:	461a      	mov	r2, r3
                           (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800873c:	69bb      	ldr	r3, [r7, #24]
 800873e:	0a1b      	lsrs	r3, r3, #8
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer,
 8008740:	3301      	adds	r3, #1
 8008742:	f7f8 fc8c 	bl	800105e <HAL_DMA_Start_IT>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	f000 8095 	beq.w	8008878 <HAL_TIM_DMABurst_WriteStart+0x21a>
        return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e0b0      	b.n	80088b4 <HAL_TIM_DMABurst_WriteStart+0x256>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008756:	4a5c      	ldr	r2, [pc, #368]	; (80088c8 <HAL_TIM_DMABurst_WriteStart+0x26a>)
 8008758:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875e:	4a5b      	ldr	r2, [pc, #364]	; (80088cc <HAL_TIM_DMABurst_WriteStart+0x26e>)
 8008760:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008766:	4a57      	ldr	r2, [pc, #348]	; (80088c4 <HAL_TIM_DMABurst_WriteStart+0x266>)
 8008768:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer,
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800876e:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	334c      	adds	r3, #76	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer,
 8008776:	461a      	mov	r2, r3
                           (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	0a1b      	lsrs	r3, r3, #8
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer,
 800877c:	3301      	adds	r3, #1
 800877e:	f7f8 fc6e 	bl	800105e <HAL_DMA_Start_IT>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d079      	beq.n	800887c <HAL_TIM_DMABurst_WriteStart+0x21e>
        return HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	e093      	b.n	80088b4 <HAL_TIM_DMABurst_WriteStart+0x256>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008790:	4a4d      	ldr	r2, [pc, #308]	; (80088c8 <HAL_TIM_DMABurst_WriteStart+0x26a>)
 8008792:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008798:	4a4c      	ldr	r2, [pc, #304]	; (80088cc <HAL_TIM_DMABurst_WriteStart+0x26e>)
 800879a:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a0:	4a48      	ldr	r2, [pc, #288]	; (80088c4 <HAL_TIM_DMABurst_WriteStart+0x266>)
 80087a2:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer,
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80087a8:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	334c      	adds	r3, #76	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer,
 80087b0:	461a      	mov	r2, r3
                           (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	0a1b      	lsrs	r3, r3, #8
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer,
 80087b6:	3301      	adds	r3, #1
 80087b8:	f7f8 fc51 	bl	800105e <HAL_DMA_Start_IT>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d05e      	beq.n	8008880 <HAL_TIM_DMABurst_WriteStart+0x222>
        return HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	e076      	b.n	80088b4 <HAL_TIM_DMABurst_WriteStart+0x256>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ca:	4a3f      	ldr	r2, [pc, #252]	; (80088c8 <HAL_TIM_DMABurst_WriteStart+0x26a>)
 80087cc:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d2:	4a3e      	ldr	r2, [pc, #248]	; (80088cc <HAL_TIM_DMABurst_WriteStart+0x26e>)
 80087d4:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087da:	4a3a      	ldr	r2, [pc, #232]	; (80088c4 <HAL_TIM_DMABurst_WriteStart+0x266>)
 80087dc:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer,
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80087e2:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	334c      	adds	r3, #76	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer,
 80087ea:	461a      	mov	r2, r3
                           (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 80087ec:	69bb      	ldr	r3, [r7, #24]
 80087ee:	0a1b      	lsrs	r3, r3, #8
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer,
 80087f0:	3301      	adds	r3, #1
 80087f2:	f7f8 fc34 	bl	800105e <HAL_DMA_Start_IT>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d043      	beq.n	8008884 <HAL_TIM_DMABurst_WriteStart+0x226>
        return HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	e059      	b.n	80088b4 <HAL_TIM_DMABurst_WriteStart+0x256>
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008804:	4a32      	ldr	r2, [pc, #200]	; (80088d0 <HAL_TIM_DMABurst_WriteStart+0x272>)
 8008806:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback =  TIMEx_DMACommutationHalfCplt;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800880c:	4a31      	ldr	r2, [pc, #196]	; (80088d4 <HAL_TIM_DMABurst_WriteStart+0x276>)
 800880e:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008814:	4a2b      	ldr	r2, [pc, #172]	; (80088c4 <HAL_TIM_DMABurst_WriteStart+0x266>)
 8008816:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer,
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800881c:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	334c      	adds	r3, #76	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer,
 8008824:	461a      	mov	r2, r3
                           (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	0a1b      	lsrs	r3, r3, #8
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer,
 800882a:	3301      	adds	r3, #1
 800882c:	f7f8 fc17 	bl	800105e <HAL_DMA_Start_IT>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	d028      	beq.n	8008888 <HAL_TIM_DMABurst_WriteStart+0x22a>
        return HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	e03c      	b.n	80088b4 <HAL_TIM_DMABurst_WriteStart+0x256>
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800883e:	4a26      	ldr	r2, [pc, #152]	; (80088d8 <HAL_TIM_DMABurst_WriteStart+0x27a>)
 8008840:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferHalfCpltCallback = TIM_DMATriggerHalfCplt;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008846:	4a25      	ldr	r2, [pc, #148]	; (80088dc <HAL_TIM_DMABurst_WriteStart+0x27e>)
 8008848:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800884e:	4a1d      	ldr	r2, [pc, #116]	; (80088c4 <HAL_TIM_DMABurst_WriteStart+0x266>)
 8008850:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer,
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008856:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	334c      	adds	r3, #76	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer,
 800885e:	461a      	mov	r2, r3
                           (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	0a1b      	lsrs	r3, r3, #8
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer,
 8008864:	3301      	adds	r3, #1
 8008866:	f7f8 fbfa 	bl	800105e <HAL_DMA_Start_IT>
 800886a:	4603      	mov	r3, r0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00d      	beq.n	800888c <HAL_TIM_DMABurst_WriteStart+0x22e>
        return HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	e01f      	b.n	80088b4 <HAL_TIM_DMABurst_WriteStart+0x256>
      break;
 8008874:	bf00      	nop
 8008876:	e00a      	b.n	800888e <HAL_TIM_DMABurst_WriteStart+0x230>
      break;
 8008878:	bf00      	nop
 800887a:	e008      	b.n	800888e <HAL_TIM_DMABurst_WriteStart+0x230>
      break;
 800887c:	bf00      	nop
 800887e:	e006      	b.n	800888e <HAL_TIM_DMABurst_WriteStart+0x230>
      break;
 8008880:	bf00      	nop
 8008882:	e004      	b.n	800888e <HAL_TIM_DMABurst_WriteStart+0x230>
      break;
 8008884:	bf00      	nop
 8008886:	e002      	b.n	800888e <HAL_TIM_DMABurst_WriteStart+0x230>
      break;
 8008888:	bf00      	nop
 800888a:	e000      	b.n	800888e <HAL_TIM_DMABurst_WriteStart+0x230>
      break;
 800888c:	bf00      	nop
  }
  /* configure the DMA Burst Mode */
  htim->Instance->DCR = (BurstBaseAddress | BurstLength);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	68b9      	ldr	r1, [r7, #8]
 8008894:	69ba      	ldr	r2, [r7, #24]
 8008896:	430a      	orrs	r2, r1
 8008898:	649a      	str	r2, [r3, #72]	; 0x48

  /* Enable the TIM DMA Request */
  __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	68fa      	ldr	r2, [r7, #12]
 80088a0:	6812      	ldr	r2, [r2, #0]
 80088a2:	68d1      	ldr	r1, [r2, #12]
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	430a      	orrs	r2, r1
 80088a8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2201      	movs	r2, #1
 80088ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3710      	adds	r7, #16
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	08009615 	.word	0x08009615
 80088c0:	08009639 	.word	0x08009639
 80088c4:	08009431 	.word	0x08009431
 80088c8:	08009455 	.word	0x08009455
 80088cc:	080094c5 	.word	0x080094c5
 80088d0:	0800b96b 	.word	0x0800b96b
 80088d4:	0800b98f 	.word	0x0800b98f
 80088d8:	0800965d 	.word	0x0800965d
 80088dc:	08009681 	.word	0x08009681

080088e0 <HAL_TIM_DMABurst_WriteStop>:
  * @param  htim TIM handle
  * @param  BurstRequestSrc TIM DMA Request sources to disable
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80088ea:	2300      	movs	r3, #0
 80088ec:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));

  /* Abort the DMA transfer (at least disable the DMA channel) */
  switch (BurstRequestSrc)
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088f4:	d02e      	beq.n	8008954 <HAL_TIM_DMABurst_WriteStop+0x74>
 80088f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088fa:	d809      	bhi.n	8008910 <HAL_TIM_DMABurst_WriteStop+0x30>
 80088fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008900:	d018      	beq.n	8008934 <HAL_TIM_DMABurst_WriteStop+0x54>
 8008902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008906:	d01d      	beq.n	8008944 <HAL_TIM_DMABurst_WriteStop+0x64>
 8008908:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800890c:	d00a      	beq.n	8008924 <HAL_TIM_DMABurst_WriteStop+0x44>
    {
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
      break;
    }
    default:
      break;
 800890e:	e041      	b.n	8008994 <HAL_TIM_DMABurst_WriteStop+0xb4>
  switch (BurstRequestSrc)
 8008910:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008914:	d02e      	beq.n	8008974 <HAL_TIM_DMABurst_WriteStop+0x94>
 8008916:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800891a:	d033      	beq.n	8008984 <HAL_TIM_DMABurst_WriteStop+0xa4>
 800891c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008920:	d020      	beq.n	8008964 <HAL_TIM_DMABurst_WriteStop+0x84>
      break;
 8008922:	e037      	b.n	8008994 <HAL_TIM_DMABurst_WriteStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6a1b      	ldr	r3, [r3, #32]
 8008928:	4618      	mov	r0, r3
 800892a:	f7f8 fc36 	bl	800119a <HAL_DMA_Abort_IT>
 800892e:	4603      	mov	r3, r0
 8008930:	73fb      	strb	r3, [r7, #15]
      break;
 8008932:	e02f      	b.n	8008994 <HAL_TIM_DMABurst_WriteStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008938:	4618      	mov	r0, r3
 800893a:	f7f8 fc2e 	bl	800119a <HAL_DMA_Abort_IT>
 800893e:	4603      	mov	r3, r0
 8008940:	73fb      	strb	r3, [r7, #15]
      break;
 8008942:	e027      	b.n	8008994 <HAL_TIM_DMABurst_WriteStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008948:	4618      	mov	r0, r3
 800894a:	f7f8 fc26 	bl	800119a <HAL_DMA_Abort_IT>
 800894e:	4603      	mov	r3, r0
 8008950:	73fb      	strb	r3, [r7, #15]
      break;
 8008952:	e01f      	b.n	8008994 <HAL_TIM_DMABurst_WriteStop+0xb4>
      status =  HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008958:	4618      	mov	r0, r3
 800895a:	f7f8 fc1e 	bl	800119a <HAL_DMA_Abort_IT>
 800895e:	4603      	mov	r3, r0
 8008960:	73fb      	strb	r3, [r7, #15]
      break;
 8008962:	e017      	b.n	8008994 <HAL_TIM_DMABurst_WriteStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008968:	4618      	mov	r0, r3
 800896a:	f7f8 fc16 	bl	800119a <HAL_DMA_Abort_IT>
 800896e:	4603      	mov	r3, r0
 8008970:	73fb      	strb	r3, [r7, #15]
      break;
 8008972:	e00f      	b.n	8008994 <HAL_TIM_DMABurst_WriteStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008978:	4618      	mov	r0, r3
 800897a:	f7f8 fc0e 	bl	800119a <HAL_DMA_Abort_IT>
 800897e:	4603      	mov	r3, r0
 8008980:	73fb      	strb	r3, [r7, #15]
      break;
 8008982:	e007      	b.n	8008994 <HAL_TIM_DMABurst_WriteStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008988:	4618      	mov	r0, r3
 800898a:	f7f8 fc06 	bl	800119a <HAL_DMA_Abort_IT>
 800898e:	4603      	mov	r3, r0
 8008990:	73fb      	strb	r3, [r7, #15]
      break;
 8008992:	bf00      	nop
  }

  if (HAL_OK == status)
 8008994:	7bfb      	ldrb	r3, [r7, #15]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d108      	bne.n	80089ac <HAL_TIM_DMABurst_WriteStop+0xcc>
  {
    /* Disable the TIM Update DMA request */
    __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	6812      	ldr	r2, [r2, #0]
 80089a2:	68d1      	ldr	r1, [r2, #12]
 80089a4:	683a      	ldr	r2, [r7, #0]
 80089a6:	43d2      	mvns	r2, r2
 80089a8:	400a      	ands	r2, r1
 80089aa:	60da      	str	r2, [r3, #12]
  }

  /* Return function status */
  return status;
 80089ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <HAL_TIM_DMABurst_ReadStart>:
  * @note   This function should be used only when BurstLength is equal to DMA data transfer length.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress,
                                             uint32_t BurstRequestSrc, uint32_t  *BurstBuffer, uint32_t  BurstLength)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b084      	sub	sp, #16
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	60f8      	str	r0, [r7, #12]
 80089be:	60b9      	str	r1, [r7, #8]
 80089c0:	607a      	str	r2, [r7, #4]
 80089c2:	603b      	str	r3, [r7, #0]
  assert_param(IS_TIM_DMABURST_INSTANCE(htim->Instance));
  assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  assert_param(IS_TIM_DMA_LENGTH(BurstLength));

  if ((htim->State == HAL_TIM_STATE_BUSY))
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	d101      	bne.n	80089d4 <HAL_TIM_DMABurst_ReadStart+0x1e>
  {
    return HAL_BUSY;
 80089d0:	2302      	movs	r3, #2
 80089d2:	e11b      	b.n	8008c0c <HAL_TIM_DMABurst_ReadStart+0x256>
  }
  else if ((htim->State == HAL_TIM_STATE_READY))
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d10b      	bne.n	80089f8 <HAL_TIM_DMABurst_ReadStart+0x42>
  {
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d104      	bne.n	80089f0 <HAL_TIM_DMABurst_ReadStart+0x3a>
 80089e6:	69bb      	ldr	r3, [r7, #24]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d001      	beq.n	80089f0 <HAL_TIM_DMABurst_ReadStart+0x3a>
    {
      return HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	e10d      	b.n	8008c0c <HAL_TIM_DMABurst_ReadStart+0x256>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2202      	movs	r2, #2
 80089f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }
  else
  {
    /* nothing to do */
  }
  switch (BurstRequestSrc)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089fe:	d071      	beq.n	8008ae4 <HAL_TIM_DMABurst_ReadStart+0x12e>
 8008a00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a04:	d809      	bhi.n	8008a1a <HAL_TIM_DMABurst_ReadStart+0x64>
 8008a06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a0a:	d030      	beq.n	8008a6e <HAL_TIM_DMABurst_ReadStart+0xb8>
 8008a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a10:	d04b      	beq.n	8008aaa <HAL_TIM_DMABurst_ReadStart+0xf4>
 8008a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a16:	d00c      	beq.n	8008a32 <HAL_TIM_DMABurst_ReadStart+0x7c>
        return HAL_ERROR;
      }
      break;
    }
    default:
      break;
 8008a18:	e0e5      	b.n	8008be6 <HAL_TIM_DMABurst_ReadStart+0x230>
  switch (BurstRequestSrc)
 8008a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a1e:	f000 809b 	beq.w	8008b58 <HAL_TIM_DMABurst_ReadStart+0x1a2>
 8008a22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a26:	f000 80b4 	beq.w	8008b92 <HAL_TIM_DMABurst_ReadStart+0x1dc>
 8008a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a2e:	d076      	beq.n	8008b1e <HAL_TIM_DMABurst_ReadStart+0x168>
      break;
 8008a30:	e0d9      	b.n	8008be6 <HAL_TIM_DMABurst_ReadStart+0x230>
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	6a1b      	ldr	r3, [r3, #32]
 8008a36:	4a77      	ldr	r2, [pc, #476]	; (8008c14 <HAL_TIM_DMABurst_ReadStart+0x25e>)
 8008a38:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6a1b      	ldr	r3, [r3, #32]
 8008a3e:	4a76      	ldr	r2, [pc, #472]	; (8008c18 <HAL_TIM_DMABurst_ReadStart+0x262>)
 8008a40:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6a1b      	ldr	r3, [r3, #32]
 8008a46:	4a75      	ldr	r2, [pc, #468]	; (8008c1c <HAL_TIM_DMABurst_ReadStart+0x266>)
 8008a48:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6a18      	ldr	r0, [r3, #32]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	334c      	adds	r3, #76	; 0x4c
 8008a54:	4619      	mov	r1, r3
 8008a56:	683a      	ldr	r2, [r7, #0]
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	0a1b      	lsrs	r3, r3, #8
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	f7f8 fafe 	bl	800105e <HAL_DMA_Start_IT>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	f000 80b1 	beq.w	8008bcc <HAL_TIM_DMABurst_ReadStart+0x216>
        return HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e0ce      	b.n	8008c0c <HAL_TIM_DMABurst_ReadStart+0x256>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a72:	4a6b      	ldr	r2, [pc, #428]	; (8008c20 <HAL_TIM_DMABurst_ReadStart+0x26a>)
 8008a74:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7a:	4a6a      	ldr	r2, [pc, #424]	; (8008c24 <HAL_TIM_DMABurst_ReadStart+0x26e>)
 8008a7c:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a82:	4a66      	ldr	r2, [pc, #408]	; (8008c1c <HAL_TIM_DMABurst_ReadStart+0x266>)
 8008a84:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	334c      	adds	r3, #76	; 0x4c
 8008a90:	4619      	mov	r1, r3
 8008a92:	683a      	ldr	r2, [r7, #0]
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	0a1b      	lsrs	r3, r3, #8
 8008a98:	3301      	adds	r3, #1
 8008a9a:	f7f8 fae0 	bl	800105e <HAL_DMA_Start_IT>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f000 8095 	beq.w	8008bd0 <HAL_TIM_DMABurst_ReadStart+0x21a>
        return HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e0b0      	b.n	8008c0c <HAL_TIM_DMABurst_ReadStart+0x256>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aae:	4a5c      	ldr	r2, [pc, #368]	; (8008c20 <HAL_TIM_DMABurst_ReadStart+0x26a>)
 8008ab0:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab6:	4a5b      	ldr	r2, [pc, #364]	; (8008c24 <HAL_TIM_DMABurst_ReadStart+0x26e>)
 8008ab8:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008abe:	4a57      	ldr	r2, [pc, #348]	; (8008c1c <HAL_TIM_DMABurst_ReadStart+0x266>)
 8008ac0:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	334c      	adds	r3, #76	; 0x4c
 8008acc:	4619      	mov	r1, r3
 8008ace:	683a      	ldr	r2, [r7, #0]
 8008ad0:	69bb      	ldr	r3, [r7, #24]
 8008ad2:	0a1b      	lsrs	r3, r3, #8
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	f7f8 fac2 	bl	800105e <HAL_DMA_Start_IT>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d079      	beq.n	8008bd4 <HAL_TIM_DMABurst_ReadStart+0x21e>
        return HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e093      	b.n	8008c0c <HAL_TIM_DMABurst_ReadStart+0x256>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae8:	4a4d      	ldr	r2, [pc, #308]	; (8008c20 <HAL_TIM_DMABurst_ReadStart+0x26a>)
 8008aea:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af0:	4a4c      	ldr	r2, [pc, #304]	; (8008c24 <HAL_TIM_DMABurst_ReadStart+0x26e>)
 8008af2:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af8:	4a48      	ldr	r2, [pc, #288]	; (8008c1c <HAL_TIM_DMABurst_ReadStart+0x266>)
 8008afa:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	334c      	adds	r3, #76	; 0x4c
 8008b06:	4619      	mov	r1, r3
 8008b08:	683a      	ldr	r2, [r7, #0]
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	0a1b      	lsrs	r3, r3, #8
 8008b0e:	3301      	adds	r3, #1
 8008b10:	f7f8 faa5 	bl	800105e <HAL_DMA_Start_IT>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d05e      	beq.n	8008bd8 <HAL_TIM_DMABurst_ReadStart+0x222>
        return HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e076      	b.n	8008c0c <HAL_TIM_DMABurst_ReadStart+0x256>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b22:	4a3f      	ldr	r2, [pc, #252]	; (8008c20 <HAL_TIM_DMABurst_ReadStart+0x26a>)
 8008b24:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b2a:	4a3e      	ldr	r2, [pc, #248]	; (8008c24 <HAL_TIM_DMABurst_ReadStart+0x26e>)
 8008b2c:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b32:	4a3a      	ldr	r2, [pc, #232]	; (8008c1c <HAL_TIM_DMABurst_ReadStart+0x266>)
 8008b34:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	334c      	adds	r3, #76	; 0x4c
 8008b40:	4619      	mov	r1, r3
 8008b42:	683a      	ldr	r2, [r7, #0]
 8008b44:	69bb      	ldr	r3, [r7, #24]
 8008b46:	0a1b      	lsrs	r3, r3, #8
 8008b48:	3301      	adds	r3, #1
 8008b4a:	f7f8 fa88 	bl	800105e <HAL_DMA_Start_IT>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d043      	beq.n	8008bdc <HAL_TIM_DMABurst_ReadStart+0x226>
        return HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	e059      	b.n	8008c0c <HAL_TIM_DMABurst_ReadStart+0x256>
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b5c:	4a32      	ldr	r2, [pc, #200]	; (8008c28 <HAL_TIM_DMABurst_ReadStart+0x272>)
 8008b5e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback =  TIMEx_DMACommutationHalfCplt;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b64:	4a31      	ldr	r2, [pc, #196]	; (8008c2c <HAL_TIM_DMABurst_ReadStart+0x276>)
 8008b66:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b6c:	4a2b      	ldr	r2, [pc, #172]	; (8008c1c <HAL_TIM_DMABurst_ReadStart+0x266>)
 8008b6e:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	334c      	adds	r3, #76	; 0x4c
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	683a      	ldr	r2, [r7, #0]
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	0a1b      	lsrs	r3, r3, #8
 8008b82:	3301      	adds	r3, #1
 8008b84:	f7f8 fa6b 	bl	800105e <HAL_DMA_Start_IT>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d028      	beq.n	8008be0 <HAL_TIM_DMABurst_ReadStart+0x22a>
        return HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e03c      	b.n	8008c0c <HAL_TIM_DMABurst_ReadStart+0x256>
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b96:	4a26      	ldr	r2, [pc, #152]	; (8008c30 <HAL_TIM_DMABurst_ReadStart+0x27a>)
 8008b98:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferHalfCpltCallback = TIM_DMATriggerHalfCplt;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9e:	4a25      	ldr	r2, [pc, #148]	; (8008c34 <HAL_TIM_DMABurst_ReadStart+0x27e>)
 8008ba0:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba6:	4a1d      	ldr	r2, [pc, #116]	; (8008c1c <HAL_TIM_DMABurst_ReadStart+0x266>)
 8008ba8:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	334c      	adds	r3, #76	; 0x4c
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	683a      	ldr	r2, [r7, #0]
 8008bb8:	69bb      	ldr	r3, [r7, #24]
 8008bba:	0a1b      	lsrs	r3, r3, #8
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	f7f8 fa4e 	bl	800105e <HAL_DMA_Start_IT>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d00d      	beq.n	8008be4 <HAL_TIM_DMABurst_ReadStart+0x22e>
        return HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e01f      	b.n	8008c0c <HAL_TIM_DMABurst_ReadStart+0x256>
      break;
 8008bcc:	bf00      	nop
 8008bce:	e00a      	b.n	8008be6 <HAL_TIM_DMABurst_ReadStart+0x230>
      break;
 8008bd0:	bf00      	nop
 8008bd2:	e008      	b.n	8008be6 <HAL_TIM_DMABurst_ReadStart+0x230>
      break;
 8008bd4:	bf00      	nop
 8008bd6:	e006      	b.n	8008be6 <HAL_TIM_DMABurst_ReadStart+0x230>
      break;
 8008bd8:	bf00      	nop
 8008bda:	e004      	b.n	8008be6 <HAL_TIM_DMABurst_ReadStart+0x230>
      break;
 8008bdc:	bf00      	nop
 8008bde:	e002      	b.n	8008be6 <HAL_TIM_DMABurst_ReadStart+0x230>
      break;
 8008be0:	bf00      	nop
 8008be2:	e000      	b.n	8008be6 <HAL_TIM_DMABurst_ReadStart+0x230>
      break;
 8008be4:	bf00      	nop
  }

  /* configure the DMA Burst Mode */
  htim->Instance->DCR = (BurstBaseAddress | BurstLength);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68b9      	ldr	r1, [r7, #8]
 8008bec:	69ba      	ldr	r2, [r7, #24]
 8008bee:	430a      	orrs	r2, r1
 8008bf0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Enable the TIM DMA Request */
  __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	6812      	ldr	r2, [r2, #0]
 8008bfa:	68d1      	ldr	r1, [r2, #12]
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	430a      	orrs	r2, r1
 8008c00:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2201      	movs	r2, #1
 8008c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008c0a:	2300      	movs	r3, #0
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3710      	adds	r7, #16
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	08009615 	.word	0x08009615
 8008c18:	08009639 	.word	0x08009639
 8008c1c:	08009431 	.word	0x08009431
 8008c20:	08009535 	.word	0x08009535
 8008c24:	080095a5 	.word	0x080095a5
 8008c28:	0800b96b 	.word	0x0800b96b
 8008c2c:	0800b98f 	.word	0x0800b98f
 8008c30:	0800965d 	.word	0x0800965d
 8008c34:	08009681 	.word	0x08009681

08008c38 <HAL_TIM_DMABurst_ReadStop>:
  * @param  htim TIM handle
  * @param  BurstRequestSrc TIM DMA Request sources to disable.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c42:	2300      	movs	r3, #0
 8008c44:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));

  /* Abort the DMA transfer (at least disable the DMA channel) */
  switch (BurstRequestSrc)
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c4c:	d02e      	beq.n	8008cac <HAL_TIM_DMABurst_ReadStop+0x74>
 8008c4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c52:	d809      	bhi.n	8008c68 <HAL_TIM_DMABurst_ReadStop+0x30>
 8008c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c58:	d018      	beq.n	8008c8c <HAL_TIM_DMABurst_ReadStop+0x54>
 8008c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c5e:	d01d      	beq.n	8008c9c <HAL_TIM_DMABurst_ReadStop+0x64>
 8008c60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c64:	d00a      	beq.n	8008c7c <HAL_TIM_DMABurst_ReadStop+0x44>
    {
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
      break;
    }
    default:
      break;
 8008c66:	e041      	b.n	8008cec <HAL_TIM_DMABurst_ReadStop+0xb4>
  switch (BurstRequestSrc)
 8008c68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c6c:	d02e      	beq.n	8008ccc <HAL_TIM_DMABurst_ReadStop+0x94>
 8008c6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c72:	d033      	beq.n	8008cdc <HAL_TIM_DMABurst_ReadStop+0xa4>
 8008c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c78:	d020      	beq.n	8008cbc <HAL_TIM_DMABurst_ReadStop+0x84>
      break;
 8008c7a:	e037      	b.n	8008cec <HAL_TIM_DMABurst_ReadStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6a1b      	ldr	r3, [r3, #32]
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7f8 fa8a 	bl	800119a <HAL_DMA_Abort_IT>
 8008c86:	4603      	mov	r3, r0
 8008c88:	73fb      	strb	r3, [r7, #15]
      break;
 8008c8a:	e02f      	b.n	8008cec <HAL_TIM_DMABurst_ReadStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7f8 fa82 	bl	800119a <HAL_DMA_Abort_IT>
 8008c96:	4603      	mov	r3, r0
 8008c98:	73fb      	strb	r3, [r7, #15]
      break;
 8008c9a:	e027      	b.n	8008cec <HAL_TIM_DMABurst_ReadStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7f8 fa7a 	bl	800119a <HAL_DMA_Abort_IT>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	73fb      	strb	r3, [r7, #15]
      break;
 8008caa:	e01f      	b.n	8008cec <HAL_TIM_DMABurst_ReadStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7f8 fa72 	bl	800119a <HAL_DMA_Abort_IT>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	73fb      	strb	r3, [r7, #15]
      break;
 8008cba:	e017      	b.n	8008cec <HAL_TIM_DMABurst_ReadStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7f8 fa6a 	bl	800119a <HAL_DMA_Abort_IT>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	73fb      	strb	r3, [r7, #15]
      break;
 8008cca:	e00f      	b.n	8008cec <HAL_TIM_DMABurst_ReadStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f7f8 fa62 	bl	800119a <HAL_DMA_Abort_IT>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	73fb      	strb	r3, [r7, #15]
      break;
 8008cda:	e007      	b.n	8008cec <HAL_TIM_DMABurst_ReadStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7f8 fa5a 	bl	800119a <HAL_DMA_Abort_IT>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	73fb      	strb	r3, [r7, #15]
      break;
 8008cea:	bf00      	nop
  }

  if (HAL_OK == status)
 8008cec:	7bfb      	ldrb	r3, [r7, #15]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d108      	bne.n	8008d04 <HAL_TIM_DMABurst_ReadStop+0xcc>
  {
    /* Disable the TIM Update DMA request */
    __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	6812      	ldr	r2, [r2, #0]
 8008cfa:	68d1      	ldr	r1, [r2, #12]
 8008cfc:	683a      	ldr	r2, [r7, #0]
 8008cfe:	43d2      	mvns	r2, r2
 8008d00:	400a      	ands	r2, r1
 8008d02:	60da      	str	r2, [r3, #12]
  }

  /* Return function status */
  return status;
 8008d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 8008d0e:	b480      	push	{r7}
 8008d10:	b083      	sub	sp, #12
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
 8008d16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d101      	bne.n	8008d26 <HAL_TIM_GenerateEvent+0x18>
 8008d22:	2302      	movs	r3, #2
 8008d24:	e014      	b.n	8008d50 <HAL_TIM_GenerateEvent+0x42>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2201      	movs	r2, #1
 8008d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2202      	movs	r2, #2
 8008d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	683a      	ldr	r2, [r7, #0]
 8008d3c:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2201      	movs	r2, #1
 8008d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8008d4e:	2300      	movs	r3, #0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <HAL_TIM_ConfigOCrefClear>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim,
                                           TIM_ClearInputConfigTypeDef *sClearInputConfig,
                                           uint32_t Channel)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_OCXREF_CLEAR_INSTANCE(htim->Instance));
  assert_param(IS_TIM_CLEARINPUT_SOURCE(sClearInputConfig->ClearInputSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d101      	bne.n	8008d76 <HAL_TIM_ConfigOCrefClear+0x1a>
 8008d72:	2302      	movs	r3, #2
 8008d74:	e104      	b.n	8008f80 <HAL_TIM_ConfigOCrefClear+0x224>
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2201      	movs	r2, #1
 8008d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2202      	movs	r2, #2
 8008d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (sClearInputConfig->ClearInputSource)
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d018      	beq.n	8008dc0 <HAL_TIM_ConfigOCrefClear+0x64>
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d302      	bcc.n	8008d98 <HAL_TIM_ConfigOCrefClear+0x3c>
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	d00b      	beq.n	8008dae <HAL_TIM_ConfigOCrefClear+0x52>
      SET_BIT(htim->Instance->SMCR, TIM_SMCR_OCCS);
      break;
    }

    default:
      break;
 8008d96:	e034      	b.n	8008e02 <HAL_TIM_ConfigOCrefClear+0xa6>
      CLEAR_BIT(htim->Instance->SMCR, (TIM_SMCR_OCCS | TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP));
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008da6:	f023 0308 	bic.w	r3, r3, #8
 8008daa:	6093      	str	r3, [r2, #8]
      break;
 8008dac:	e029      	b.n	8008e02 <HAL_TIM_ConfigOCrefClear+0xa6>
      CLEAR_BIT(htim->Instance->SMCR, TIM_SMCR_OCCS);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	6812      	ldr	r2, [r2, #0]
 8008db6:	6892      	ldr	r2, [r2, #8]
 8008db8:	f022 0208 	bic.w	r2, r2, #8
 8008dbc:	609a      	str	r2, [r3, #8]
    break;
 8008dbe:	e020      	b.n	8008e02 <HAL_TIM_ConfigOCrefClear+0xa6>
      if (sClearInputConfig->ClearInputPrescaler != TIM_CLEARINPUTPRESCALER_DIV1)
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d009      	beq.n	8008ddc <HAL_TIM_ConfigOCrefClear+0x80>
        htim->State = HAL_TIM_STATE_READY;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        __HAL_UNLOCK(htim);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e0d1      	b.n	8008f80 <HAL_TIM_ConfigOCrefClear+0x224>
      TIM_ETR_SetConfig(htim->Instance,
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6818      	ldr	r0, [r3, #0]
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	68d9      	ldr	r1, [r3, #12]
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	689a      	ldr	r2, [r3, #8]
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	691b      	ldr	r3, [r3, #16]
 8008dec:	f001 f9f0 	bl	800a1d0 <TIM_ETR_SetConfig>
      SET_BIT(htim->Instance->SMCR, TIM_SMCR_OCCS);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68fa      	ldr	r2, [r7, #12]
 8008df6:	6812      	ldr	r2, [r2, #0]
 8008df8:	6892      	ldr	r2, [r2, #8]
 8008dfa:	f042 0208 	orr.w	r2, r2, #8
 8008dfe:	609a      	str	r2, [r3, #8]
      break;
 8008e00:	bf00      	nop
  }

  switch (Channel)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2b14      	cmp	r3, #20
 8008e06:	f200 80b1 	bhi.w	8008f6c <HAL_TIM_ConfigOCrefClear+0x210>
 8008e0a:	a201      	add	r2, pc, #4	; (adr r2, 8008e10 <HAL_TIM_ConfigOCrefClear+0xb4>)
 8008e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e10:	08008e65 	.word	0x08008e65
 8008e14:	08008f6d 	.word	0x08008f6d
 8008e18:	08008f6d 	.word	0x08008f6d
 8008e1c:	08008f6d 	.word	0x08008f6d
 8008e20:	08008e91 	.word	0x08008e91
 8008e24:	08008f6d 	.word	0x08008f6d
 8008e28:	08008f6d 	.word	0x08008f6d
 8008e2c:	08008f6d 	.word	0x08008f6d
 8008e30:	08008ebd 	.word	0x08008ebd
 8008e34:	08008f6d 	.word	0x08008f6d
 8008e38:	08008f6d 	.word	0x08008f6d
 8008e3c:	08008f6d 	.word	0x08008f6d
 8008e40:	08008ee9 	.word	0x08008ee9
 8008e44:	08008f6d 	.word	0x08008f6d
 8008e48:	08008f6d 	.word	0x08008f6d
 8008e4c:	08008f6d 	.word	0x08008f6d
 8008e50:	08008f15 	.word	0x08008f15
 8008e54:	08008f6d 	.word	0x08008f6d
 8008e58:	08008f6d 	.word	0x08008f6d
 8008e5c:	08008f6d 	.word	0x08008f6d
 8008e60:	08008f41 	.word	0x08008f41
  {
    case TIM_CHANNEL_1:
    {
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d008      	beq.n	8008e7e <HAL_TIM_ConfigOCrefClear+0x122>
      {
        /* Enable the OCREF clear feature for Channel 1 */
        SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	6812      	ldr	r2, [r2, #0]
 8008e74:	6992      	ldr	r2, [r2, #24]
 8008e76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008e7a:	619a      	str	r2, [r3, #24]
      else
      {
        /* Disable the OCREF clear feature for Channel 1 */
        CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
      }
      break;
 8008e7c:	e077      	b.n	8008f6e <HAL_TIM_ConfigOCrefClear+0x212>
        CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	68fa      	ldr	r2, [r7, #12]
 8008e84:	6812      	ldr	r2, [r2, #0]
 8008e86:	6992      	ldr	r2, [r2, #24]
 8008e88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e8c:	619a      	str	r2, [r3, #24]
      break;
 8008e8e:	e06e      	b.n	8008f6e <HAL_TIM_ConfigOCrefClear+0x212>
    }
    case TIM_CHANNEL_2:
    {
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d008      	beq.n	8008eaa <HAL_TIM_ConfigOCrefClear+0x14e>
      {
        /* Enable the OCREF clear feature for Channel 2 */
        SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	6812      	ldr	r2, [r2, #0]
 8008ea0:	6992      	ldr	r2, [r2, #24]
 8008ea2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ea6:	619a      	str	r2, [r3, #24]
      else
      {
        /* Disable the OCREF clear feature for Channel 2 */
        CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
      }
      break;
 8008ea8:	e061      	b.n	8008f6e <HAL_TIM_ConfigOCrefClear+0x212>
        CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	68fa      	ldr	r2, [r7, #12]
 8008eb0:	6812      	ldr	r2, [r2, #0]
 8008eb2:	6992      	ldr	r2, [r2, #24]
 8008eb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008eb8:	619a      	str	r2, [r3, #24]
      break;
 8008eba:	e058      	b.n	8008f6e <HAL_TIM_ConfigOCrefClear+0x212>
    }
    case TIM_CHANNEL_3:
    {
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d008      	beq.n	8008ed6 <HAL_TIM_ConfigOCrefClear+0x17a>
      {
        /* Enable the OCREF clear feature for Channel 3 */
        SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	68fa      	ldr	r2, [r7, #12]
 8008eca:	6812      	ldr	r2, [r2, #0]
 8008ecc:	69d2      	ldr	r2, [r2, #28]
 8008ece:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008ed2:	61da      	str	r2, [r3, #28]
      else
      {
        /* Disable the OCREF clear feature for Channel 3 */
        CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
      }
      break;
 8008ed4:	e04b      	b.n	8008f6e <HAL_TIM_ConfigOCrefClear+0x212>
        CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	6812      	ldr	r2, [r2, #0]
 8008ede:	69d2      	ldr	r2, [r2, #28]
 8008ee0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ee4:	61da      	str	r2, [r3, #28]
      break;
 8008ee6:	e042      	b.n	8008f6e <HAL_TIM_ConfigOCrefClear+0x212>
    }
    case TIM_CHANNEL_4:
    {
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d008      	beq.n	8008f02 <HAL_TIM_ConfigOCrefClear+0x1a6>
      {
        /* Enable the OCREF clear feature for Channel 4 */
        SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	6812      	ldr	r2, [r2, #0]
 8008ef8:	69d2      	ldr	r2, [r2, #28]
 8008efa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008efe:	61da      	str	r2, [r3, #28]
      else
      {
        /* Disable the OCREF clear feature for Channel 4 */
        CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
      }
      break;
 8008f00:	e035      	b.n	8008f6e <HAL_TIM_ConfigOCrefClear+0x212>
        CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	6812      	ldr	r2, [r2, #0]
 8008f0a:	69d2      	ldr	r2, [r2, #28]
 8008f0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f10:	61da      	str	r2, [r3, #28]
      break;
 8008f12:	e02c      	b.n	8008f6e <HAL_TIM_ConfigOCrefClear+0x212>
    }
    case TIM_CHANNEL_5:
    {
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d008      	beq.n	8008f2e <HAL_TIM_ConfigOCrefClear+0x1d2>
      {
        /* Enable the OCREF clear feature for Channel 5 */
        SET_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC5CE);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	68fa      	ldr	r2, [r7, #12]
 8008f22:	6812      	ldr	r2, [r2, #0]
 8008f24:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008f26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008f2a:	655a      	str	r2, [r3, #84]	; 0x54
      else
      {
        /* Disable the OCREF clear feature for Channel 5 */
        CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC5CE);
      }
      break;
 8008f2c:	e01f      	b.n	8008f6e <HAL_TIM_ConfigOCrefClear+0x212>
        CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC5CE);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	6812      	ldr	r2, [r2, #0]
 8008f36:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008f38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f3c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008f3e:	e016      	b.n	8008f6e <HAL_TIM_ConfigOCrefClear+0x212>
    }
    case TIM_CHANNEL_6:
    {
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d008      	beq.n	8008f5a <HAL_TIM_ConfigOCrefClear+0x1fe>
      {
        /* Enable the OCREF clear feature for Channel 6 */
        SET_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC6CE);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68fa      	ldr	r2, [r7, #12]
 8008f4e:	6812      	ldr	r2, [r2, #0]
 8008f50:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008f52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f56:	655a      	str	r2, [r3, #84]	; 0x54
      else
      {
        /* Disable the OCREF clear feature for Channel 6 */
        CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC6CE);
      }
      break;
 8008f58:	e009      	b.n	8008f6e <HAL_TIM_ConfigOCrefClear+0x212>
        CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC6CE);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	68fa      	ldr	r2, [r7, #12]
 8008f60:	6812      	ldr	r2, [r2, #0]
 8008f62:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008f64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f68:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008f6a:	e000      	b.n	8008f6e <HAL_TIM_ConfigOCrefClear+0x212>
    }
    default:
      break;
 8008f6c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2201      	movs	r2, #1
 8008f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f7e:	2300      	movs	r3, #0
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3710      	adds	r7, #16
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d101      	bne.n	8008fa0 <HAL_TIM_ConfigClockSource+0x18>
 8008f9c:	2302      	movs	r3, #2
 8008f9e:	e0a8      	b.n	80090f2 <HAL_TIM_ConfigClockSource+0x16a>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2202      	movs	r2, #2
 8008fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008fc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008fca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2b40      	cmp	r3, #64	; 0x40
 8008fda:	d067      	beq.n	80090ac <HAL_TIM_ConfigClockSource+0x124>
 8008fdc:	2b40      	cmp	r3, #64	; 0x40
 8008fde:	d80b      	bhi.n	8008ff8 <HAL_TIM_ConfigClockSource+0x70>
 8008fe0:	2b10      	cmp	r3, #16
 8008fe2:	d073      	beq.n	80090cc <HAL_TIM_ConfigClockSource+0x144>
 8008fe4:	2b10      	cmp	r3, #16
 8008fe6:	d802      	bhi.n	8008fee <HAL_TIM_ConfigClockSource+0x66>
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d06f      	beq.n	80090cc <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008fec:	e078      	b.n	80090e0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008fee:	2b20      	cmp	r3, #32
 8008ff0:	d06c      	beq.n	80090cc <HAL_TIM_ConfigClockSource+0x144>
 8008ff2:	2b30      	cmp	r3, #48	; 0x30
 8008ff4:	d06a      	beq.n	80090cc <HAL_TIM_ConfigClockSource+0x144>
      break;
 8008ff6:	e073      	b.n	80090e0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008ff8:	2b70      	cmp	r3, #112	; 0x70
 8008ffa:	d00d      	beq.n	8009018 <HAL_TIM_ConfigClockSource+0x90>
 8008ffc:	2b70      	cmp	r3, #112	; 0x70
 8008ffe:	d804      	bhi.n	800900a <HAL_TIM_ConfigClockSource+0x82>
 8009000:	2b50      	cmp	r3, #80	; 0x50
 8009002:	d033      	beq.n	800906c <HAL_TIM_ConfigClockSource+0xe4>
 8009004:	2b60      	cmp	r3, #96	; 0x60
 8009006:	d041      	beq.n	800908c <HAL_TIM_ConfigClockSource+0x104>
      break;
 8009008:	e06a      	b.n	80090e0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800900a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800900e:	d066      	beq.n	80090de <HAL_TIM_ConfigClockSource+0x156>
 8009010:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009014:	d017      	beq.n	8009046 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8009016:	e063      	b.n	80090e0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6818      	ldr	r0, [r3, #0]
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	6899      	ldr	r1, [r3, #8]
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	685a      	ldr	r2, [r3, #4]
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	f001 f8d2 	bl	800a1d0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800903a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	68fa      	ldr	r2, [r7, #12]
 8009042:	609a      	str	r2, [r3, #8]
      break;
 8009044:	e04c      	b.n	80090e0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6818      	ldr	r0, [r3, #0]
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	6899      	ldr	r1, [r3, #8]
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	685a      	ldr	r2, [r3, #4]
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	f001 f8bb 	bl	800a1d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	6812      	ldr	r2, [r2, #0]
 8009062:	6892      	ldr	r2, [r2, #8]
 8009064:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009068:	609a      	str	r2, [r3, #8]
      break;
 800906a:	e039      	b.n	80090e0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6818      	ldr	r0, [r3, #0]
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	6859      	ldr	r1, [r3, #4]
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	461a      	mov	r2, r3
 800907a:	f000 ff79 	bl	8009f70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2150      	movs	r1, #80	; 0x50
 8009084:	4618      	mov	r0, r3
 8009086:	f001 f888 	bl	800a19a <TIM_ITRx_SetConfig>
      break;
 800908a:	e029      	b.n	80090e0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6818      	ldr	r0, [r3, #0]
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	6859      	ldr	r1, [r3, #4]
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	461a      	mov	r2, r3
 800909a:	f000 ffd5 	bl	800a048 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	2160      	movs	r1, #96	; 0x60
 80090a4:	4618      	mov	r0, r3
 80090a6:	f001 f878 	bl	800a19a <TIM_ITRx_SetConfig>
      break;
 80090aa:	e019      	b.n	80090e0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6818      	ldr	r0, [r3, #0]
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	6859      	ldr	r1, [r3, #4]
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	461a      	mov	r2, r3
 80090ba:	f000 ff59 	bl	8009f70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2140      	movs	r1, #64	; 0x40
 80090c4:	4618      	mov	r0, r3
 80090c6:	f001 f868 	bl	800a19a <TIM_ITRx_SetConfig>
      break;
 80090ca:	e009      	b.n	80090e0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4619      	mov	r1, r3
 80090d6:	4610      	mov	r0, r2
 80090d8:	f001 f85f 	bl	800a19a <TIM_ITRx_SetConfig>
      break;
 80090dc:	e000      	b.n	80090e0 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80090de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2201      	movs	r2, #1
 80090e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090f0:	2300      	movs	r3, #0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3710      	adds	r7, #16
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <HAL_TIM_ConfigTI1Input>:
  *            @arg TIM_TI1SELECTION_XORCOMBINATION: The TIMx_CH1, CH2 and CH3
  *            pins are connected to the TI1 input (XOR combination)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigTI1Input(TIM_HandleTypeDef *htim, uint32_t TI1_Selection)
{
 80090fa:	b480      	push	{r7}
 80090fc:	b085      	sub	sp, #20
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
 8009102:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TI1SELECTION(TI1_Selection));

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	60fb      	str	r3, [r7, #12]

  /* Reset the TI1 selection */
  tmpcr2 &= ~TIM_CR2_TI1S;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009112:	60fb      	str	r3, [r7, #12]

  /* Set the TI1 selection */
  tmpcr2 |= TI1_Selection;
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	4313      	orrs	r3, r2
 800911a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMxCR2 */
  htim->Instance->CR2 = tmpcr2;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	68fa      	ldr	r2, [r7, #12]
 8009122:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	3714      	adds	r7, #20
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr

08009132 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b082      	sub	sp, #8
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
 800913a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009142:	2b01      	cmp	r3, #1
 8009144:	d101      	bne.n	800914a <HAL_TIM_SlaveConfigSynchro+0x18>
 8009146:	2302      	movs	r3, #2
 8009148:	e031      	b.n	80091ae <HAL_TIM_SlaveConfigSynchro+0x7c>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2201      	movs	r2, #1
 800914e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2202      	movs	r2, #2
 8009156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800915a:	6839      	ldr	r1, [r7, #0]
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 fe11 	bl	8009d84 <TIM_SlaveTimer_SetConfig>
 8009162:	4603      	mov	r3, r0
 8009164:	2b00      	cmp	r3, #0
 8009166:	d009      	beq.n	800917c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2201      	movs	r2, #1
 800916c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8009178:	2301      	movs	r3, #1
 800917a:	e018      	b.n	80091ae <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	6812      	ldr	r2, [r2, #0]
 8009184:	68d2      	ldr	r2, [r2, #12]
 8009186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800918a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	6812      	ldr	r2, [r2, #0]
 8009194:	68d2      	ldr	r2, [r2, #12]
 8009196:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800919a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2201      	movs	r2, #1
 80091a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091ac:	2300      	movs	r3, #0
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3708      	adds	r7, #8
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <HAL_TIM_SlaveConfigSynchro_IT>:
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro_IT(TIM_HandleTypeDef *htim,
                                                TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b082      	sub	sp, #8
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
 80091be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d101      	bne.n	80091ce <HAL_TIM_SlaveConfigSynchro_IT+0x18>
 80091ca:	2302      	movs	r3, #2
 80091cc:	e031      	b.n	8009232 <HAL_TIM_SlaveConfigSynchro_IT+0x7c>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2201      	movs	r2, #1
 80091d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2202      	movs	r2, #2
 80091da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80091de:	6839      	ldr	r1, [r7, #0]
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 fdcf 	bl	8009d84 <TIM_SlaveTimer_SetConfig>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d009      	beq.n	8009200 <HAL_TIM_SlaveConfigSynchro_IT+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80091fc:	2301      	movs	r3, #1
 80091fe:	e018      	b.n	8009232 <HAL_TIM_SlaveConfigSynchro_IT+0x7c>
  }

  /* Enable Trigger Interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_TRIGGER);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	6812      	ldr	r2, [r2, #0]
 8009208:	68d2      	ldr	r2, [r2, #12]
 800920a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800920e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	6812      	ldr	r2, [r2, #0]
 8009218:	68d2      	ldr	r2, [r2, #12]
 800921a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800921e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2201      	movs	r2, #1
 8009224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3708      	adds	r7, #8
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}

0800923a <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800923a:	b480      	push	{r7}
 800923c:	b085      	sub	sp, #20
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
 8009242:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009244:	2300      	movs	r3, #0
 8009246:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	2b0c      	cmp	r3, #12
 800924c:	d830      	bhi.n	80092b0 <HAL_TIM_ReadCapturedValue+0x76>
 800924e:	a201      	add	r2, pc, #4	; (adr r2, 8009254 <HAL_TIM_ReadCapturedValue+0x1a>)
 8009250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009254:	08009289 	.word	0x08009289
 8009258:	080092b1 	.word	0x080092b1
 800925c:	080092b1 	.word	0x080092b1
 8009260:	080092b1 	.word	0x080092b1
 8009264:	08009293 	.word	0x08009293
 8009268:	080092b1 	.word	0x080092b1
 800926c:	080092b1 	.word	0x080092b1
 8009270:	080092b1 	.word	0x080092b1
 8009274:	0800929d 	.word	0x0800929d
 8009278:	080092b1 	.word	0x080092b1
 800927c:	080092b1 	.word	0x080092b1
 8009280:	080092b1 	.word	0x080092b1
 8009284:	080092a7 	.word	0x080092a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800928e:	60fb      	str	r3, [r7, #12]

      break;
 8009290:	e00f      	b.n	80092b2 <HAL_TIM_ReadCapturedValue+0x78>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009298:	60fb      	str	r3, [r7, #12]

      break;
 800929a:	e00a      	b.n	80092b2 <HAL_TIM_ReadCapturedValue+0x78>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092a2:	60fb      	str	r3, [r7, #12]

      break;
 80092a4:	e005      	b.n	80092b2 <HAL_TIM_ReadCapturedValue+0x78>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ac:	60fb      	str	r3, [r7, #12]

      break;
 80092ae:	e000      	b.n	80092b2 <HAL_TIM_ReadCapturedValue+0x78>
    }

    default:
      break;
 80092b0:	bf00      	nop
  }

  return tmpreg;
 80092b2:	68fb      	ldr	r3, [r7, #12]
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3714      	adds	r7, #20
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80092c8:	bf00      	nop
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80092dc:	bf00      	nop
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80092f0:	bf00      	nop
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009304:	bf00      	nop
 8009306:	370c      	adds	r7, #12
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009310:	b480      	push	{r7}
 8009312:	b083      	sub	sp, #12
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009318:	bf00      	nop
 800931a:	370c      	adds	r7, #12
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800932c:	bf00      	nop
 800932e:	370c      	adds	r7, #12
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009340:	bf00      	nop
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800934c:	b480      	push	{r7}
 800934e:	b083      	sub	sp, #12
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009354:	bf00      	nop
 8009356:	370c      	adds	r7, #12
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr

08009360 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009360:	b480      	push	{r7}
 8009362:	b083      	sub	sp, #12
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8009368:	bf00      	nop
 800936a:	370c      	adds	r7, #12
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr

08009374 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800937c:	bf00      	nop
 800937e:	370c      	adds	r7, #12
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  return htim->State;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009396:	b2db      	uxtb	r3, r3
}
 8009398:	4618      	mov	r0, r3
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <HAL_TIM_OC_GetState>:
  * @brief  Return the TIM OC handle state.
  * @param  htim TIM Output Compare handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_OC_GetState(TIM_HandleTypeDef *htim)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  return htim->State;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093b2:	b2db      	uxtb	r3, r3
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	370c      	adds	r7, #12
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr

080093c0 <HAL_TIM_PWM_GetState>:
  * @brief  Return the TIM PWM handle state.
  * @param  htim TIM handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_PWM_GetState(TIM_HandleTypeDef *htim)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b083      	sub	sp, #12
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  return htim->State;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093ce:	b2db      	uxtb	r3, r3
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	370c      	adds	r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <HAL_TIM_IC_GetState>:
  * @brief  Return the TIM Input Capture handle state.
  * @param  htim TIM IC handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_IC_GetState(TIM_HandleTypeDef *htim)
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  return htim->State;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093ea:	b2db      	uxtb	r3, r3
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	370c      	adds	r7, #12
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr

080093f8 <HAL_TIM_OnePulse_GetState>:
  * @brief  Return the TIM One Pulse Mode handle state.
  * @param  htim TIM OPM handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_OnePulse_GetState(TIM_HandleTypeDef *htim)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b083      	sub	sp, #12
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  return htim->State;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009406:	b2db      	uxtb	r3, r3
}
 8009408:	4618      	mov	r0, r3
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <HAL_TIM_Encoder_GetState>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM Encoder Interface handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Encoder_GetState(TIM_HandleTypeDef *htim)
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  return htim->State;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009422:	b2db      	uxtb	r3, r3
}
 8009424:	4618      	mov	r0, r3
 8009426:	370c      	adds	r7, #12
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800943c:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2201      	movs	r2, #1
 8009442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009446:	68f8      	ldr	r0, [r7, #12]
 8009448:	f7ff ff94 	bl	8009374 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 800944c:	bf00      	nop
 800944e:	3710      	adds	r7, #16
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009460:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2201      	movs	r2, #1
 8009466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	429a      	cmp	r2, r3
 8009472:	d103      	bne.n	800947c <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2201      	movs	r2, #1
 8009478:	771a      	strb	r2, [r3, #28]
 800947a:	e019      	b.n	80094b0 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	429a      	cmp	r2, r3
 8009484:	d103      	bne.n	800948e <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2202      	movs	r2, #2
 800948a:	771a      	strb	r2, [r3, #28]
 800948c:	e010      	b.n	80094b0 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	429a      	cmp	r2, r3
 8009496:	d103      	bne.n	80094a0 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2204      	movs	r2, #4
 800949c:	771a      	strb	r2, [r3, #28]
 800949e:	e007      	b.n	80094b0 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d102      	bne.n	80094b0 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2208      	movs	r2, #8
 80094ae:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094b0:	68f8      	ldr	r0, [r7, #12]
 80094b2:	f7ff ff37 	bl	8009324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2200      	movs	r2, #0
 80094ba:	771a      	strb	r2, [r3, #28]
}
 80094bc:	bf00      	nop
 80094be:	3710      	adds	r7, #16
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d0:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2201      	movs	r2, #1
 80094d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d103      	bne.n	80094ec <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2201      	movs	r2, #1
 80094e8:	771a      	strb	r2, [r3, #28]
 80094ea:	e019      	b.n	8009520 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d103      	bne.n	80094fe <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2202      	movs	r2, #2
 80094fa:	771a      	strb	r2, [r3, #28]
 80094fc:	e010      	b.n	8009520 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	429a      	cmp	r2, r3
 8009506:	d103      	bne.n	8009510 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2204      	movs	r2, #4
 800950c:	771a      	strb	r2, [r3, #28]
 800950e:	e007      	b.n	8009520 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	429a      	cmp	r2, r3
 8009518:	d102      	bne.n	8009520 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2208      	movs	r2, #8
 800951e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009520:	68f8      	ldr	r0, [r7, #12]
 8009522:	f7ff ff09 	bl	8009338 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2200      	movs	r2, #0
 800952a:	771a      	strb	r2, [r3, #28]
}
 800952c:	bf00      	nop
 800952e:	3710      	adds	r7, #16
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009540:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2201      	movs	r2, #1
 8009546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	429a      	cmp	r2, r3
 8009552:	d103      	bne.n	800955c <TIM_DMACaptureCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2201      	movs	r2, #1
 8009558:	771a      	strb	r2, [r3, #28]
 800955a:	e019      	b.n	8009590 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	429a      	cmp	r2, r3
 8009564:	d103      	bne.n	800956e <TIM_DMACaptureCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2202      	movs	r2, #2
 800956a:	771a      	strb	r2, [r3, #28]
 800956c:	e010      	b.n	8009590 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	429a      	cmp	r2, r3
 8009576:	d103      	bne.n	8009580 <TIM_DMACaptureCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2204      	movs	r2, #4
 800957c:	771a      	strb	r2, [r3, #28]
 800957e:	e007      	b.n	8009590 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	429a      	cmp	r2, r3
 8009588:	d102      	bne.n	8009590 <TIM_DMACaptureCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2208      	movs	r2, #8
 800958e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8009590:	68f8      	ldr	r0, [r7, #12]
 8009592:	f7ff feb3 	bl	80092fc <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	771a      	strb	r2, [r3, #28]
}
 800959c:	bf00      	nop
 800959e:	3710      	adds	r7, #16
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095b0:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2201      	movs	r2, #1
 80095b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d103      	bne.n	80095cc <TIM_DMACaptureHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2201      	movs	r2, #1
 80095c8:	771a      	strb	r2, [r3, #28]
 80095ca:	e019      	b.n	8009600 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d103      	bne.n	80095de <TIM_DMACaptureHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2202      	movs	r2, #2
 80095da:	771a      	strb	r2, [r3, #28]
 80095dc:	e010      	b.n	8009600 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d103      	bne.n	80095f0 <TIM_DMACaptureHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2204      	movs	r2, #4
 80095ec:	771a      	strb	r2, [r3, #28]
 80095ee:	e007      	b.n	8009600 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d102      	bne.n	8009600 <TIM_DMACaptureHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2208      	movs	r2, #8
 80095fe:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8009600:	68f8      	ldr	r0, [r7, #12]
 8009602:	f7ff fe85 	bl	8009310 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2200      	movs	r2, #0
 800960a:	771a      	strb	r2, [r3, #28]
}
 800960c:	bf00      	nop
 800960e:	3710      	adds	r7, #16
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <TIM_DMAPeriodElapsedCplt>:
  * @brief  TIM DMA Period Elapse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedCplt(DMA_HandleTypeDef *hdma)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009620:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2201      	movs	r2, #1
 8009626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedCallback(htim);
#else
  HAL_TIM_PeriodElapsedCallback(htim);
 800962a:	68f8      	ldr	r0, [r7, #12]
 800962c:	f7ff fe48 	bl	80092c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8009630:	bf00      	nop
 8009632:	3710      	adds	r7, #16
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <TIM_DMAPeriodElapsedHalfCplt>:
  * @brief  TIM DMA Period Elapse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009644:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2201      	movs	r2, #1
 800964a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedHalfCpltCallback(htim);
#else
  HAL_TIM_PeriodElapsedHalfCpltCallback(htim);
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f7ff fe40 	bl	80092d4 <HAL_TIM_PeriodElapsedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8009654:	bf00      	nop
 8009656:	3710      	adds	r7, #16
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <TIM_DMATriggerCplt>:
  * @brief  TIM DMA Trigger callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMATriggerCplt(DMA_HandleTypeDef *hdma)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009668:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2201      	movs	r2, #1
 800966e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->TriggerCallback(htim);
#else
  HAL_TIM_TriggerCallback(htim);
 8009672:	68f8      	ldr	r0, [r7, #12]
 8009674:	f7ff fe6a 	bl	800934c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8009678:	bf00      	nop
 800967a:	3710      	adds	r7, #16
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <TIM_DMATriggerHalfCplt>:
  * @brief  TIM DMA Trigger half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMATriggerHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800968c:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2201      	movs	r2, #1
 8009692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->TriggerHalfCpltCallback(htim);
#else
  HAL_TIM_TriggerHalfCpltCallback(htim);
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f7ff fe62 	bl	8009360 <HAL_TIM_TriggerHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 800969c:	bf00      	nop
 800969e:	3710      	adds	r7, #16
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b085      	sub	sp, #20
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4a40      	ldr	r2, [pc, #256]	; (80097b8 <TIM_Base_SetConfig+0x114>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d013      	beq.n	80096e4 <TIM_Base_SetConfig+0x40>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096c2:	d00f      	beq.n	80096e4 <TIM_Base_SetConfig+0x40>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	4a3d      	ldr	r2, [pc, #244]	; (80097bc <TIM_Base_SetConfig+0x118>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d00b      	beq.n	80096e4 <TIM_Base_SetConfig+0x40>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4a3c      	ldr	r2, [pc, #240]	; (80097c0 <TIM_Base_SetConfig+0x11c>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d007      	beq.n	80096e4 <TIM_Base_SetConfig+0x40>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	4a3b      	ldr	r2, [pc, #236]	; (80097c4 <TIM_Base_SetConfig+0x120>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d003      	beq.n	80096e4 <TIM_Base_SetConfig+0x40>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	4a3a      	ldr	r2, [pc, #232]	; (80097c8 <TIM_Base_SetConfig+0x124>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d108      	bne.n	80096f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	4313      	orrs	r3, r2
 80096f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4a2f      	ldr	r2, [pc, #188]	; (80097b8 <TIM_Base_SetConfig+0x114>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d01f      	beq.n	800973e <TIM_Base_SetConfig+0x9a>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009704:	d01b      	beq.n	800973e <TIM_Base_SetConfig+0x9a>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	4a2c      	ldr	r2, [pc, #176]	; (80097bc <TIM_Base_SetConfig+0x118>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d017      	beq.n	800973e <TIM_Base_SetConfig+0x9a>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	4a2b      	ldr	r2, [pc, #172]	; (80097c0 <TIM_Base_SetConfig+0x11c>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d013      	beq.n	800973e <TIM_Base_SetConfig+0x9a>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	4a2a      	ldr	r2, [pc, #168]	; (80097c4 <TIM_Base_SetConfig+0x120>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d00f      	beq.n	800973e <TIM_Base_SetConfig+0x9a>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	4a29      	ldr	r2, [pc, #164]	; (80097c8 <TIM_Base_SetConfig+0x124>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d00b      	beq.n	800973e <TIM_Base_SetConfig+0x9a>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	4a28      	ldr	r2, [pc, #160]	; (80097cc <TIM_Base_SetConfig+0x128>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d007      	beq.n	800973e <TIM_Base_SetConfig+0x9a>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4a27      	ldr	r2, [pc, #156]	; (80097d0 <TIM_Base_SetConfig+0x12c>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d003      	beq.n	800973e <TIM_Base_SetConfig+0x9a>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	4a26      	ldr	r2, [pc, #152]	; (80097d4 <TIM_Base_SetConfig+0x130>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d108      	bne.n	8009750 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009744:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	68fa      	ldr	r2, [r7, #12]
 800974c:	4313      	orrs	r3, r2
 800974e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	695b      	ldr	r3, [r3, #20]
 800975a:	4313      	orrs	r3, r2
 800975c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	689a      	ldr	r2, [r3, #8]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a10      	ldr	r2, [pc, #64]	; (80097b8 <TIM_Base_SetConfig+0x114>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d00f      	beq.n	800979c <TIM_Base_SetConfig+0xf8>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	4a12      	ldr	r2, [pc, #72]	; (80097c8 <TIM_Base_SetConfig+0x124>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d00b      	beq.n	800979c <TIM_Base_SetConfig+0xf8>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	4a11      	ldr	r2, [pc, #68]	; (80097cc <TIM_Base_SetConfig+0x128>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d007      	beq.n	800979c <TIM_Base_SetConfig+0xf8>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	4a10      	ldr	r2, [pc, #64]	; (80097d0 <TIM_Base_SetConfig+0x12c>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d003      	beq.n	800979c <TIM_Base_SetConfig+0xf8>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	4a0f      	ldr	r2, [pc, #60]	; (80097d4 <TIM_Base_SetConfig+0x130>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d103      	bne.n	80097a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	691a      	ldr	r2, [r3, #16]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	615a      	str	r2, [r3, #20]
}
 80097aa:	bf00      	nop
 80097ac:	3714      	adds	r7, #20
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr
 80097b6:	bf00      	nop
 80097b8:	40012c00 	.word	0x40012c00
 80097bc:	40000400 	.word	0x40000400
 80097c0:	40000800 	.word	0x40000800
 80097c4:	40000c00 	.word	0x40000c00
 80097c8:	40013400 	.word	0x40013400
 80097cc:	40014000 	.word	0x40014000
 80097d0:	40014400 	.word	0x40014400
 80097d4:	40014800 	.word	0x40014800

080097d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097d8:	b480      	push	{r7}
 80097da:	b087      	sub	sp, #28
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6a1b      	ldr	r3, [r3, #32]
 80097e6:	f023 0201 	bic.w	r2, r3, #1
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6a1b      	ldr	r3, [r3, #32]
 80097f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	699b      	ldr	r3, [r3, #24]
 80097fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800980a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f023 0303 	bic.w	r3, r3, #3
 8009812:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	68fa      	ldr	r2, [r7, #12]
 800981a:	4313      	orrs	r3, r2
 800981c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	f023 0302 	bic.w	r3, r3, #2
 8009824:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	697a      	ldr	r2, [r7, #20]
 800982c:	4313      	orrs	r3, r2
 800982e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	4a2c      	ldr	r2, [pc, #176]	; (80098e4 <TIM_OC1_SetConfig+0x10c>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d00f      	beq.n	8009858 <TIM_OC1_SetConfig+0x80>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	4a2b      	ldr	r2, [pc, #172]	; (80098e8 <TIM_OC1_SetConfig+0x110>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d00b      	beq.n	8009858 <TIM_OC1_SetConfig+0x80>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	4a2a      	ldr	r2, [pc, #168]	; (80098ec <TIM_OC1_SetConfig+0x114>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d007      	beq.n	8009858 <TIM_OC1_SetConfig+0x80>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	4a29      	ldr	r2, [pc, #164]	; (80098f0 <TIM_OC1_SetConfig+0x118>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d003      	beq.n	8009858 <TIM_OC1_SetConfig+0x80>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4a28      	ldr	r2, [pc, #160]	; (80098f4 <TIM_OC1_SetConfig+0x11c>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d10c      	bne.n	8009872 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	f023 0308 	bic.w	r3, r3, #8
 800985e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	697a      	ldr	r2, [r7, #20]
 8009866:	4313      	orrs	r3, r2
 8009868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	f023 0304 	bic.w	r3, r3, #4
 8009870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	4a1b      	ldr	r2, [pc, #108]	; (80098e4 <TIM_OC1_SetConfig+0x10c>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d00f      	beq.n	800989a <TIM_OC1_SetConfig+0xc2>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4a1a      	ldr	r2, [pc, #104]	; (80098e8 <TIM_OC1_SetConfig+0x110>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d00b      	beq.n	800989a <TIM_OC1_SetConfig+0xc2>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	4a19      	ldr	r2, [pc, #100]	; (80098ec <TIM_OC1_SetConfig+0x114>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d007      	beq.n	800989a <TIM_OC1_SetConfig+0xc2>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	4a18      	ldr	r2, [pc, #96]	; (80098f0 <TIM_OC1_SetConfig+0x118>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d003      	beq.n	800989a <TIM_OC1_SetConfig+0xc2>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	4a17      	ldr	r2, [pc, #92]	; (80098f4 <TIM_OC1_SetConfig+0x11c>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d111      	bne.n	80098be <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80098a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	695b      	ldr	r3, [r3, #20]
 80098ae:	693a      	ldr	r2, [r7, #16]
 80098b0:	4313      	orrs	r3, r2
 80098b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	699b      	ldr	r3, [r3, #24]
 80098b8:	693a      	ldr	r2, [r7, #16]
 80098ba:	4313      	orrs	r3, r2
 80098bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	693a      	ldr	r2, [r7, #16]
 80098c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	68fa      	ldr	r2, [r7, #12]
 80098c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	685a      	ldr	r2, [r3, #4]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	697a      	ldr	r2, [r7, #20]
 80098d6:	621a      	str	r2, [r3, #32]
}
 80098d8:	bf00      	nop
 80098da:	371c      	adds	r7, #28
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr
 80098e4:	40012c00 	.word	0x40012c00
 80098e8:	40013400 	.word	0x40013400
 80098ec:	40014000 	.word	0x40014000
 80098f0:	40014400 	.word	0x40014400
 80098f4:	40014800 	.word	0x40014800

080098f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b087      	sub	sp, #28
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6a1b      	ldr	r3, [r3, #32]
 8009906:	f023 0210 	bic.w	r2, r3, #16
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6a1b      	ldr	r3, [r3, #32]
 8009912:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	699b      	ldr	r3, [r3, #24]
 800991e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800992a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	021b      	lsls	r3, r3, #8
 800993a:	68fa      	ldr	r2, [r7, #12]
 800993c:	4313      	orrs	r3, r2
 800993e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	f023 0320 	bic.w	r3, r3, #32
 8009946:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	689b      	ldr	r3, [r3, #8]
 800994c:	011b      	lsls	r3, r3, #4
 800994e:	697a      	ldr	r2, [r7, #20]
 8009950:	4313      	orrs	r3, r2
 8009952:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	4a28      	ldr	r2, [pc, #160]	; (80099f8 <TIM_OC2_SetConfig+0x100>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d003      	beq.n	8009964 <TIM_OC2_SetConfig+0x6c>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	4a27      	ldr	r2, [pc, #156]	; (80099fc <TIM_OC2_SetConfig+0x104>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d10d      	bne.n	8009980 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800996a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	011b      	lsls	r3, r3, #4
 8009972:	697a      	ldr	r2, [r7, #20]
 8009974:	4313      	orrs	r3, r2
 8009976:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800997e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	4a1d      	ldr	r2, [pc, #116]	; (80099f8 <TIM_OC2_SetConfig+0x100>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d00f      	beq.n	80099a8 <TIM_OC2_SetConfig+0xb0>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4a1c      	ldr	r2, [pc, #112]	; (80099fc <TIM_OC2_SetConfig+0x104>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d00b      	beq.n	80099a8 <TIM_OC2_SetConfig+0xb0>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4a1b      	ldr	r2, [pc, #108]	; (8009a00 <TIM_OC2_SetConfig+0x108>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d007      	beq.n	80099a8 <TIM_OC2_SetConfig+0xb0>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4a1a      	ldr	r2, [pc, #104]	; (8009a04 <TIM_OC2_SetConfig+0x10c>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d003      	beq.n	80099a8 <TIM_OC2_SetConfig+0xb0>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4a19      	ldr	r2, [pc, #100]	; (8009a08 <TIM_OC2_SetConfig+0x110>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d113      	bne.n	80099d0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80099ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80099b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	695b      	ldr	r3, [r3, #20]
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	693a      	ldr	r2, [r7, #16]
 80099c0:	4313      	orrs	r3, r2
 80099c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	699b      	ldr	r3, [r3, #24]
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	693a      	ldr	r2, [r7, #16]
 80099cc:	4313      	orrs	r3, r2
 80099ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	693a      	ldr	r2, [r7, #16]
 80099d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	685a      	ldr	r2, [r3, #4]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	697a      	ldr	r2, [r7, #20]
 80099e8:	621a      	str	r2, [r3, #32]
}
 80099ea:	bf00      	nop
 80099ec:	371c      	adds	r7, #28
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr
 80099f6:	bf00      	nop
 80099f8:	40012c00 	.word	0x40012c00
 80099fc:	40013400 	.word	0x40013400
 8009a00:	40014000 	.word	0x40014000
 8009a04:	40014400 	.word	0x40014400
 8009a08:	40014800 	.word	0x40014800

08009a0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b087      	sub	sp, #28
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6a1b      	ldr	r3, [r3, #32]
 8009a1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6a1b      	ldr	r3, [r3, #32]
 8009a26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	69db      	ldr	r3, [r3, #28]
 8009a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f023 0303 	bic.w	r3, r3, #3
 8009a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	021b      	lsls	r3, r3, #8
 8009a60:	697a      	ldr	r2, [r7, #20]
 8009a62:	4313      	orrs	r3, r2
 8009a64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	4a27      	ldr	r2, [pc, #156]	; (8009b08 <TIM_OC3_SetConfig+0xfc>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d003      	beq.n	8009a76 <TIM_OC3_SetConfig+0x6a>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	4a26      	ldr	r2, [pc, #152]	; (8009b0c <TIM_OC3_SetConfig+0x100>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d10d      	bne.n	8009a92 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	021b      	lsls	r3, r3, #8
 8009a84:	697a      	ldr	r2, [r7, #20]
 8009a86:	4313      	orrs	r3, r2
 8009a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	4a1c      	ldr	r2, [pc, #112]	; (8009b08 <TIM_OC3_SetConfig+0xfc>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d00f      	beq.n	8009aba <TIM_OC3_SetConfig+0xae>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4a1b      	ldr	r2, [pc, #108]	; (8009b0c <TIM_OC3_SetConfig+0x100>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d00b      	beq.n	8009aba <TIM_OC3_SetConfig+0xae>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	4a1a      	ldr	r2, [pc, #104]	; (8009b10 <TIM_OC3_SetConfig+0x104>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d007      	beq.n	8009aba <TIM_OC3_SetConfig+0xae>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	4a19      	ldr	r2, [pc, #100]	; (8009b14 <TIM_OC3_SetConfig+0x108>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d003      	beq.n	8009aba <TIM_OC3_SetConfig+0xae>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	4a18      	ldr	r2, [pc, #96]	; (8009b18 <TIM_OC3_SetConfig+0x10c>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d113      	bne.n	8009ae2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	695b      	ldr	r3, [r3, #20]
 8009ace:	011b      	lsls	r3, r3, #4
 8009ad0:	693a      	ldr	r2, [r7, #16]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	699b      	ldr	r3, [r3, #24]
 8009ada:	011b      	lsls	r3, r3, #4
 8009adc:	693a      	ldr	r2, [r7, #16]
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	693a      	ldr	r2, [r7, #16]
 8009ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	68fa      	ldr	r2, [r7, #12]
 8009aec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	685a      	ldr	r2, [r3, #4]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	697a      	ldr	r2, [r7, #20]
 8009afa:	621a      	str	r2, [r3, #32]
}
 8009afc:	bf00      	nop
 8009afe:	371c      	adds	r7, #28
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr
 8009b08:	40012c00 	.word	0x40012c00
 8009b0c:	40013400 	.word	0x40013400
 8009b10:	40014000 	.word	0x40014000
 8009b14:	40014400 	.word	0x40014400
 8009b18:	40014800 	.word	0x40014800

08009b1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b087      	sub	sp, #28
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a1b      	ldr	r3, [r3, #32]
 8009b2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6a1b      	ldr	r3, [r3, #32]
 8009b36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	69db      	ldr	r3, [r3, #28]
 8009b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	021b      	lsls	r3, r3, #8
 8009b5e:	68fa      	ldr	r2, [r7, #12]
 8009b60:	4313      	orrs	r3, r2
 8009b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	031b      	lsls	r3, r3, #12
 8009b72:	693a      	ldr	r2, [r7, #16]
 8009b74:	4313      	orrs	r3, r2
 8009b76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	4a18      	ldr	r2, [pc, #96]	; (8009bdc <TIM_OC4_SetConfig+0xc0>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d00f      	beq.n	8009ba0 <TIM_OC4_SetConfig+0x84>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	4a17      	ldr	r2, [pc, #92]	; (8009be0 <TIM_OC4_SetConfig+0xc4>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d00b      	beq.n	8009ba0 <TIM_OC4_SetConfig+0x84>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	4a16      	ldr	r2, [pc, #88]	; (8009be4 <TIM_OC4_SetConfig+0xc8>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d007      	beq.n	8009ba0 <TIM_OC4_SetConfig+0x84>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	4a15      	ldr	r2, [pc, #84]	; (8009be8 <TIM_OC4_SetConfig+0xcc>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d003      	beq.n	8009ba0 <TIM_OC4_SetConfig+0x84>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	4a14      	ldr	r2, [pc, #80]	; (8009bec <TIM_OC4_SetConfig+0xd0>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d109      	bne.n	8009bb4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ba6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	695b      	ldr	r3, [r3, #20]
 8009bac:	019b      	lsls	r3, r3, #6
 8009bae:	697a      	ldr	r2, [r7, #20]
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	697a      	ldr	r2, [r7, #20]
 8009bb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	68fa      	ldr	r2, [r7, #12]
 8009bbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	685a      	ldr	r2, [r3, #4]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	693a      	ldr	r2, [r7, #16]
 8009bcc:	621a      	str	r2, [r3, #32]
}
 8009bce:	bf00      	nop
 8009bd0:	371c      	adds	r7, #28
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr
 8009bda:	bf00      	nop
 8009bdc:	40012c00 	.word	0x40012c00
 8009be0:	40013400 	.word	0x40013400
 8009be4:	40014000 	.word	0x40014000
 8009be8:	40014400 	.word	0x40014400
 8009bec:	40014800 	.word	0x40014800

08009bf0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b087      	sub	sp, #28
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6a1b      	ldr	r3, [r3, #32]
 8009bfe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6a1b      	ldr	r3, [r3, #32]
 8009c0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	68fa      	ldr	r2, [r7, #12]
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009c34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	689b      	ldr	r3, [r3, #8]
 8009c3a:	041b      	lsls	r3, r3, #16
 8009c3c:	693a      	ldr	r2, [r7, #16]
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	4a17      	ldr	r2, [pc, #92]	; (8009ca4 <TIM_OC5_SetConfig+0xb4>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d00f      	beq.n	8009c6a <TIM_OC5_SetConfig+0x7a>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	4a16      	ldr	r2, [pc, #88]	; (8009ca8 <TIM_OC5_SetConfig+0xb8>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d00b      	beq.n	8009c6a <TIM_OC5_SetConfig+0x7a>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	4a15      	ldr	r2, [pc, #84]	; (8009cac <TIM_OC5_SetConfig+0xbc>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d007      	beq.n	8009c6a <TIM_OC5_SetConfig+0x7a>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	4a14      	ldr	r2, [pc, #80]	; (8009cb0 <TIM_OC5_SetConfig+0xc0>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d003      	beq.n	8009c6a <TIM_OC5_SetConfig+0x7a>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	4a13      	ldr	r2, [pc, #76]	; (8009cb4 <TIM_OC5_SetConfig+0xc4>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d109      	bne.n	8009c7e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	695b      	ldr	r3, [r3, #20]
 8009c76:	021b      	lsls	r3, r3, #8
 8009c78:	697a      	ldr	r2, [r7, #20]
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	697a      	ldr	r2, [r7, #20]
 8009c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	68fa      	ldr	r2, [r7, #12]
 8009c88:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	685a      	ldr	r2, [r3, #4]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	693a      	ldr	r2, [r7, #16]
 8009c96:	621a      	str	r2, [r3, #32]
}
 8009c98:	bf00      	nop
 8009c9a:	371c      	adds	r7, #28
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr
 8009ca4:	40012c00 	.word	0x40012c00
 8009ca8:	40013400 	.word	0x40013400
 8009cac:	40014000 	.word	0x40014000
 8009cb0:	40014400 	.word	0x40014400
 8009cb4:	40014800 	.word	0x40014800

08009cb8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b087      	sub	sp, #28
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6a1b      	ldr	r3, [r3, #32]
 8009cc6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a1b      	ldr	r3, [r3, #32]
 8009cd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	021b      	lsls	r3, r3, #8
 8009cf2:	68fa      	ldr	r2, [r7, #12]
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009cfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	051b      	lsls	r3, r3, #20
 8009d06:	693a      	ldr	r2, [r7, #16]
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	4a18      	ldr	r2, [pc, #96]	; (8009d70 <TIM_OC6_SetConfig+0xb8>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d00f      	beq.n	8009d34 <TIM_OC6_SetConfig+0x7c>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	4a17      	ldr	r2, [pc, #92]	; (8009d74 <TIM_OC6_SetConfig+0xbc>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d00b      	beq.n	8009d34 <TIM_OC6_SetConfig+0x7c>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4a16      	ldr	r2, [pc, #88]	; (8009d78 <TIM_OC6_SetConfig+0xc0>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d007      	beq.n	8009d34 <TIM_OC6_SetConfig+0x7c>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a15      	ldr	r2, [pc, #84]	; (8009d7c <TIM_OC6_SetConfig+0xc4>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d003      	beq.n	8009d34 <TIM_OC6_SetConfig+0x7c>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4a14      	ldr	r2, [pc, #80]	; (8009d80 <TIM_OC6_SetConfig+0xc8>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d109      	bne.n	8009d48 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	695b      	ldr	r3, [r3, #20]
 8009d40:	029b      	lsls	r3, r3, #10
 8009d42:	697a      	ldr	r2, [r7, #20]
 8009d44:	4313      	orrs	r3, r2
 8009d46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	697a      	ldr	r2, [r7, #20]
 8009d4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	68fa      	ldr	r2, [r7, #12]
 8009d52:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	685a      	ldr	r2, [r3, #4]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	693a      	ldr	r2, [r7, #16]
 8009d60:	621a      	str	r2, [r3, #32]
}
 8009d62:	bf00      	nop
 8009d64:	371c      	adds	r7, #28
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr
 8009d6e:	bf00      	nop
 8009d70:	40012c00 	.word	0x40012c00
 8009d74:	40013400 	.word	0x40013400
 8009d78:	40014000 	.word	0x40014000
 8009d7c:	40014400 	.word	0x40014400
 8009d80:	40014800 	.word	0x40014800

08009d84 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b086      	sub	sp, #24
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d9c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	697a      	ldr	r2, [r7, #20]
 8009da4:	4313      	orrs	r3, r2
 8009da6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009dae:	f023 0307 	bic.w	r3, r3, #7
 8009db2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	697a      	ldr	r2, [r7, #20]
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	697a      	ldr	r2, [r7, #20]
 8009dc4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	2b30      	cmp	r3, #48	; 0x30
 8009dcc:	d05c      	beq.n	8009e88 <TIM_SlaveTimer_SetConfig+0x104>
 8009dce:	2b30      	cmp	r3, #48	; 0x30
 8009dd0:	d806      	bhi.n	8009de0 <TIM_SlaveTimer_SetConfig+0x5c>
 8009dd2:	2b10      	cmp	r3, #16
 8009dd4:	d058      	beq.n	8009e88 <TIM_SlaveTimer_SetConfig+0x104>
 8009dd6:	2b20      	cmp	r3, #32
 8009dd8:	d056      	beq.n	8009e88 <TIM_SlaveTimer_SetConfig+0x104>
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d054      	beq.n	8009e88 <TIM_SlaveTimer_SetConfig+0x104>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8009dde:	e054      	b.n	8009e8a <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8009de0:	2b50      	cmp	r3, #80	; 0x50
 8009de2:	d03d      	beq.n	8009e60 <TIM_SlaveTimer_SetConfig+0xdc>
 8009de4:	2b50      	cmp	r3, #80	; 0x50
 8009de6:	d802      	bhi.n	8009dee <TIM_SlaveTimer_SetConfig+0x6a>
 8009de8:	2b40      	cmp	r3, #64	; 0x40
 8009dea:	d010      	beq.n	8009e0e <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 8009dec:	e04d      	b.n	8009e8a <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8009dee:	2b60      	cmp	r3, #96	; 0x60
 8009df0:	d040      	beq.n	8009e74 <TIM_SlaveTimer_SetConfig+0xf0>
 8009df2:	2b70      	cmp	r3, #112	; 0x70
 8009df4:	d000      	beq.n	8009df8 <TIM_SlaveTimer_SetConfig+0x74>
      break;
 8009df6:	e048      	b.n	8009e8a <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6818      	ldr	r0, [r3, #0]
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	68d9      	ldr	r1, [r3, #12]
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	689a      	ldr	r2, [r3, #8]
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	691b      	ldr	r3, [r3, #16]
 8009e08:	f000 f9e2 	bl	800a1d0 <TIM_ETR_SetConfig>
      break;
 8009e0c:	e03d      	b.n	8009e8a <TIM_SlaveTimer_SetConfig+0x106>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2b05      	cmp	r3, #5
 8009e14:	d101      	bne.n	8009e1a <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	e038      	b.n	8009e8c <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	6a1b      	ldr	r3, [r3, #32]
 8009e20:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	6812      	ldr	r2, [r2, #0]
 8009e2a:	6a12      	ldr	r2, [r2, #32]
 8009e2c:	f022 0201 	bic.w	r2, r2, #1
 8009e30:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	699b      	ldr	r3, [r3, #24]
 8009e38:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e40:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	691b      	ldr	r3, [r3, #16]
 8009e46:	011b      	lsls	r3, r3, #4
 8009e48:	68fa      	ldr	r2, [r7, #12]
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	68fa      	ldr	r2, [r7, #12]
 8009e54:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	693a      	ldr	r2, [r7, #16]
 8009e5c:	621a      	str	r2, [r3, #32]
      break;
 8009e5e:	e014      	b.n	8009e8a <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6818      	ldr	r0, [r3, #0]
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	6899      	ldr	r1, [r3, #8]
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	691b      	ldr	r3, [r3, #16]
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	f000 f87f 	bl	8009f70 <TIM_TI1_ConfigInputStage>
      break;
 8009e72:	e00a      	b.n	8009e8a <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6818      	ldr	r0, [r3, #0]
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	6899      	ldr	r1, [r3, #8]
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	691b      	ldr	r3, [r3, #16]
 8009e80:	461a      	mov	r2, r3
 8009e82:	f000 f8e1 	bl	800a048 <TIM_TI2_ConfigInputStage>
      break;
 8009e86:	e000      	b.n	8009e8a <TIM_SlaveTimer_SetConfig+0x106>
      break;
 8009e88:	bf00      	nop
  }
  return HAL_OK;
 8009e8a:	2300      	movs	r3, #0
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3718      	adds	r7, #24
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b087      	sub	sp, #28
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	60f8      	str	r0, [r7, #12]
 8009e9c:	60b9      	str	r1, [r7, #8]
 8009e9e:	607a      	str	r2, [r7, #4]
 8009ea0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	6a1b      	ldr	r3, [r3, #32]
 8009ea6:	f023 0201 	bic.w	r2, r3, #1
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	699b      	ldr	r3, [r3, #24]
 8009eb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6a1b      	ldr	r3, [r3, #32]
 8009eb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	4a26      	ldr	r2, [pc, #152]	; (8009f58 <TIM_TI1_SetConfig+0xc4>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d017      	beq.n	8009ef2 <TIM_TI1_SetConfig+0x5e>
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ec8:	d013      	beq.n	8009ef2 <TIM_TI1_SetConfig+0x5e>
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	4a23      	ldr	r2, [pc, #140]	; (8009f5c <TIM_TI1_SetConfig+0xc8>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d00f      	beq.n	8009ef2 <TIM_TI1_SetConfig+0x5e>
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	4a22      	ldr	r2, [pc, #136]	; (8009f60 <TIM_TI1_SetConfig+0xcc>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d00b      	beq.n	8009ef2 <TIM_TI1_SetConfig+0x5e>
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	4a21      	ldr	r2, [pc, #132]	; (8009f64 <TIM_TI1_SetConfig+0xd0>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d007      	beq.n	8009ef2 <TIM_TI1_SetConfig+0x5e>
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	4a20      	ldr	r2, [pc, #128]	; (8009f68 <TIM_TI1_SetConfig+0xd4>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d003      	beq.n	8009ef2 <TIM_TI1_SetConfig+0x5e>
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	4a1f      	ldr	r2, [pc, #124]	; (8009f6c <TIM_TI1_SetConfig+0xd8>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d101      	bne.n	8009ef6 <TIM_TI1_SetConfig+0x62>
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	e000      	b.n	8009ef8 <TIM_TI1_SetConfig+0x64>
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d008      	beq.n	8009f0e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	f023 0303 	bic.w	r3, r3, #3
 8009f02:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009f04:	697a      	ldr	r2, [r7, #20]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	617b      	str	r3, [r7, #20]
 8009f0c:	e003      	b.n	8009f16 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	f043 0301 	orr.w	r3, r3, #1
 8009f14:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	011b      	lsls	r3, r3, #4
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	697a      	ldr	r2, [r7, #20]
 8009f26:	4313      	orrs	r3, r2
 8009f28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	f023 030a 	bic.w	r3, r3, #10
 8009f30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	f003 030a 	and.w	r3, r3, #10
 8009f38:	693a      	ldr	r2, [r7, #16]
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	697a      	ldr	r2, [r7, #20]
 8009f42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	693a      	ldr	r2, [r7, #16]
 8009f48:	621a      	str	r2, [r3, #32]
}
 8009f4a:	bf00      	nop
 8009f4c:	371c      	adds	r7, #28
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f54:	4770      	bx	lr
 8009f56:	bf00      	nop
 8009f58:	40012c00 	.word	0x40012c00
 8009f5c:	40000400 	.word	0x40000400
 8009f60:	40000800 	.word	0x40000800
 8009f64:	40000c00 	.word	0x40000c00
 8009f68:	40013400 	.word	0x40013400
 8009f6c:	40014000 	.word	0x40014000

08009f70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b087      	sub	sp, #28
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	6a1b      	ldr	r3, [r3, #32]
 8009f80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	6a1b      	ldr	r3, [r3, #32]
 8009f86:	f023 0201 	bic.w	r2, r3, #1
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	699b      	ldr	r3, [r3, #24]
 8009f92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	011b      	lsls	r3, r3, #4
 8009fa0:	693a      	ldr	r2, [r7, #16]
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	f023 030a 	bic.w	r3, r3, #10
 8009fac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009fae:	697a      	ldr	r2, [r7, #20]
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	693a      	ldr	r2, [r7, #16]
 8009fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	697a      	ldr	r2, [r7, #20]
 8009fc0:	621a      	str	r2, [r3, #32]
}
 8009fc2:	bf00      	nop
 8009fc4:	371c      	adds	r7, #28
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr

08009fce <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009fce:	b480      	push	{r7}
 8009fd0:	b087      	sub	sp, #28
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	60f8      	str	r0, [r7, #12]
 8009fd6:	60b9      	str	r1, [r7, #8]
 8009fd8:	607a      	str	r2, [r7, #4]
 8009fda:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6a1b      	ldr	r3, [r3, #32]
 8009fe0:	f023 0210 	bic.w	r2, r3, #16
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	699b      	ldr	r3, [r3, #24]
 8009fec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	6a1b      	ldr	r3, [r3, #32]
 8009ff2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ffa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	021b      	lsls	r3, r3, #8
 800a000:	697a      	ldr	r2, [r7, #20]
 800a002:	4313      	orrs	r3, r2
 800a004:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a00c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	031b      	lsls	r3, r3, #12
 800a012:	b29b      	uxth	r3, r3
 800a014:	697a      	ldr	r2, [r7, #20]
 800a016:	4313      	orrs	r3, r2
 800a018:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a020:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	011b      	lsls	r3, r3, #4
 800a026:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a02a:	693a      	ldr	r2, [r7, #16]
 800a02c:	4313      	orrs	r3, r2
 800a02e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	697a      	ldr	r2, [r7, #20]
 800a034:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	693a      	ldr	r2, [r7, #16]
 800a03a:	621a      	str	r2, [r3, #32]
}
 800a03c:	bf00      	nop
 800a03e:	371c      	adds	r7, #28
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr

0800a048 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a048:	b480      	push	{r7}
 800a04a:	b087      	sub	sp, #28
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	60f8      	str	r0, [r7, #12]
 800a050:	60b9      	str	r1, [r7, #8]
 800a052:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	6a1b      	ldr	r3, [r3, #32]
 800a058:	f023 0210 	bic.w	r2, r3, #16
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	699b      	ldr	r3, [r3, #24]
 800a064:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	6a1b      	ldr	r3, [r3, #32]
 800a06a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a072:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	031b      	lsls	r3, r3, #12
 800a078:	697a      	ldr	r2, [r7, #20]
 800a07a:	4313      	orrs	r3, r2
 800a07c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a084:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	011b      	lsls	r3, r3, #4
 800a08a:	693a      	ldr	r2, [r7, #16]
 800a08c:	4313      	orrs	r3, r2
 800a08e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	697a      	ldr	r2, [r7, #20]
 800a094:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	693a      	ldr	r2, [r7, #16]
 800a09a:	621a      	str	r2, [r3, #32]
}
 800a09c:	bf00      	nop
 800a09e:	371c      	adds	r7, #28
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr

0800a0a8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b087      	sub	sp, #28
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	607a      	str	r2, [r7, #4]
 800a0b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	6a1b      	ldr	r3, [r3, #32]
 800a0ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	69db      	ldr	r3, [r3, #28]
 800a0c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	6a1b      	ldr	r3, [r3, #32]
 800a0cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	f023 0303 	bic.w	r3, r3, #3
 800a0d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a0d6:	697a      	ldr	r2, [r7, #20]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a0e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	011b      	lsls	r3, r3, #4
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	697a      	ldr	r2, [r7, #20]
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a0f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	021b      	lsls	r3, r3, #8
 800a0fe:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a102:	693a      	ldr	r2, [r7, #16]
 800a104:	4313      	orrs	r3, r2
 800a106:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	697a      	ldr	r2, [r7, #20]
 800a10c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	693a      	ldr	r2, [r7, #16]
 800a112:	621a      	str	r2, [r3, #32]
}
 800a114:	bf00      	nop
 800a116:	371c      	adds	r7, #28
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr

0800a120 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a120:	b480      	push	{r7}
 800a122:	b087      	sub	sp, #28
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	607a      	str	r2, [r7, #4]
 800a12c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	6a1b      	ldr	r3, [r3, #32]
 800a132:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	69db      	ldr	r3, [r3, #28]
 800a13e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6a1b      	ldr	r3, [r3, #32]
 800a144:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a14c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	021b      	lsls	r3, r3, #8
 800a152:	697a      	ldr	r2, [r7, #20]
 800a154:	4313      	orrs	r3, r2
 800a156:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a15e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	031b      	lsls	r3, r3, #12
 800a164:	b29b      	uxth	r3, r3
 800a166:	697a      	ldr	r2, [r7, #20]
 800a168:	4313      	orrs	r3, r2
 800a16a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a172:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	031b      	lsls	r3, r3, #12
 800a178:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a17c:	693a      	ldr	r2, [r7, #16]
 800a17e:	4313      	orrs	r3, r2
 800a180:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	697a      	ldr	r2, [r7, #20]
 800a186:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	693a      	ldr	r2, [r7, #16]
 800a18c:	621a      	str	r2, [r3, #32]
}
 800a18e:	bf00      	nop
 800a190:	371c      	adds	r7, #28
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr

0800a19a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a19a:	b480      	push	{r7}
 800a19c:	b085      	sub	sp, #20
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
 800a1a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a1b2:	683a      	ldr	r2, [r7, #0]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	f043 0307 	orr.w	r3, r3, #7
 800a1bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	68fa      	ldr	r2, [r7, #12]
 800a1c2:	609a      	str	r2, [r3, #8]
}
 800a1c4:	bf00      	nop
 800a1c6:	3714      	adds	r7, #20
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b087      	sub	sp, #28
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	607a      	str	r2, [r7, #4]
 800a1dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	689b      	ldr	r3, [r3, #8]
 800a1e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a1ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	021a      	lsls	r2, r3, #8
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	431a      	orrs	r2, r3
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	697a      	ldr	r2, [r7, #20]
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	697a      	ldr	r2, [r7, #20]
 800a202:	609a      	str	r2, [r3, #8]
}
 800a204:	bf00      	nop
 800a206:	371c      	adds	r7, #28
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr

0800a210 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a210:	b480      	push	{r7}
 800a212:	b087      	sub	sp, #28
 800a214:	af00      	add	r7, sp, #0
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	60b9      	str	r1, [r7, #8]
 800a21a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	f003 031f 	and.w	r3, r3, #31
 800a222:	2201      	movs	r2, #1
 800a224:	fa02 f303 	lsl.w	r3, r2, r3
 800a228:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	6a1a      	ldr	r2, [r3, #32]
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	43db      	mvns	r3, r3
 800a232:	401a      	ands	r2, r3
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6a1a      	ldr	r2, [r3, #32]
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	f003 031f 	and.w	r3, r3, #31
 800a242:	6879      	ldr	r1, [r7, #4]
 800a244:	fa01 f303 	lsl.w	r3, r1, r3
 800a248:	431a      	orrs	r2, r3
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	621a      	str	r2, [r3, #32]
}
 800a24e:	bf00      	nop
 800a250:	371c      	adds	r7, #28
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr
 800a25a:	bf00      	nop

0800a25c <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b08a      	sub	sp, #40	; 0x28
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d101      	bne.n	800a270 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 800a26c:	2301      	movs	r3, #1
 800a26e:	e088      	b.n	800a382 <HAL_TIMEx_HallSensor_Init+0x126>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a276:	b2db      	uxtb	r3, r3
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d106      	bne.n	800a28a <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2200      	movs	r2, #0
 800a280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 f8b0 	bl	800a3ea <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2202      	movs	r2, #2
 800a28e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	3304      	adds	r3, #4
 800a29a:	4619      	mov	r1, r3
 800a29c:	4610      	mov	r0, r2
 800a29e:	f7ff fa01 	bl	80096a4 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6818      	ldr	r0, [r3, #0]
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	6819      	ldr	r1, [r3, #0]
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	689b      	ldr	r3, [r3, #8]
 800a2ae:	2203      	movs	r2, #3
 800a2b0:	f7ff fdf0 	bl	8009e94 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	687a      	ldr	r2, [r7, #4]
 800a2ba:	6812      	ldr	r2, [r2, #0]
 800a2bc:	6992      	ldr	r2, [r2, #24]
 800a2be:	f022 020c 	bic.w	r2, r2, #12
 800a2c2:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	6812      	ldr	r2, [r2, #0]
 800a2cc:	6991      	ldr	r1, [r2, #24]
 800a2ce:	683a      	ldr	r2, [r7, #0]
 800a2d0:	6852      	ldr	r2, [r2, #4]
 800a2d2:	430a      	orrs	r2, r1
 800a2d4:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	6812      	ldr	r2, [r2, #0]
 800a2de:	6852      	ldr	r2, [r2, #4]
 800a2e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a2e4:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	687a      	ldr	r2, [r7, #4]
 800a2ec:	6812      	ldr	r2, [r2, #0]
 800a2ee:	6892      	ldr	r2, [r2, #8]
 800a2f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a2f4:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	6812      	ldr	r2, [r2, #0]
 800a2fe:	6892      	ldr	r2, [r2, #8]
 800a300:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a304:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	689b      	ldr	r3, [r3, #8]
 800a310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a314:	f023 0307 	bic.w	r3, r3, #7
 800a318:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	687a      	ldr	r2, [r7, #4]
 800a320:	6812      	ldr	r2, [r2, #0]
 800a322:	6892      	ldr	r2, [r2, #8]
 800a324:	f042 0204 	orr.w	r2, r2, #4
 800a328:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800a32a:	2300      	movs	r3, #0
 800a32c:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a32e:	2300      	movs	r3, #0
 800a330:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800a332:	2370      	movs	r3, #112	; 0x70
 800a334:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a336:	2300      	movs	r3, #0
 800a338:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a33a:	2300      	movs	r3, #0
 800a33c:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a33e:	2300      	movs	r3, #0
 800a340:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	68db      	ldr	r3, [r3, #12]
 800a346:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f107 020c 	add.w	r2, r7, #12
 800a350:	4611      	mov	r1, r2
 800a352:	4618      	mov	r0, r3
 800a354:	f7ff fad0 	bl	80098f8 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	687a      	ldr	r2, [r7, #4]
 800a35e:	6812      	ldr	r2, [r2, #0]
 800a360:	6852      	ldr	r2, [r2, #4]
 800a362:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a366:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	6812      	ldr	r2, [r2, #0]
 800a370:	6852      	ldr	r2, [r2, #4]
 800a372:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800a376:	605a      	str	r2, [r3, #4]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2201      	movs	r2, #1
 800a37c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a380:	2300      	movs	r3, #0
}
 800a382:	4618      	mov	r0, r3
 800a384:	3728      	adds	r7, #40	; 0x28
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}

0800a38a <HAL_TIMEx_HallSensor_DeInit>:
  * @brief  DeInitializes the TIM Hall Sensor interface
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_DeInit(TIM_HandleTypeDef *htim)
{
 800a38a:	b580      	push	{r7, lr}
 800a38c:	b082      	sub	sp, #8
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2202      	movs	r2, #2
 800a396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	6a1a      	ldr	r2, [r3, #32]
 800a3a0:	f241 1311 	movw	r3, #4369	; 0x1111
 800a3a4:	4013      	ands	r3, r2
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d10f      	bne.n	800a3ca <HAL_TIMEx_HallSensor_DeInit+0x40>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	6a1a      	ldr	r2, [r3, #32]
 800a3b0:	f240 4344 	movw	r3, #1092	; 0x444
 800a3b4:	4013      	ands	r3, r2
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d107      	bne.n	800a3ca <HAL_TIMEx_HallSensor_DeInit+0x40>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	6812      	ldr	r2, [r2, #0]
 800a3c2:	6812      	ldr	r2, [r2, #0]
 800a3c4:	f022 0201 	bic.w	r2, r2, #1
 800a3c8:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->HallSensor_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIMEx_HallSensor_MspDeInit(htim);
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 f817 	bl	800a3fe <HAL_TIMEx_HallSensor_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3708      	adds	r7, #8
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}

0800a3ea <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 800a3ea:	b480      	push	{r7}
 800a3ec:	b083      	sub	sp, #12
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 800a3f2:	bf00      	nop
 800a3f4:	370c      	adds	r7, #12
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr

0800a3fe <HAL_TIMEx_HallSensor_MspDeInit>:
  * @brief  DeInitializes TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspDeInit(TIM_HandleTypeDef *htim)
{
 800a3fe:	b480      	push	{r7}
 800a400:	b083      	sub	sp, #12
 800a402:	af00      	add	r7, sp, #0
 800a404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspDeInit could be implemented in the user file
   */
}
 800a406:	bf00      	nop
 800a408:	370c      	adds	r7, #12
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr

0800a412 <HAL_TIMEx_HallSensor_Start>:
  * @brief  Starts the TIM Hall Sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
{
 800a412:	b580      	push	{r7, lr}
 800a414:	b084      	sub	sp, #16
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Enable the Input Capture channel 1
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2201      	movs	r2, #1
 800a420:	2100      	movs	r1, #0
 800a422:	4618      	mov	r0, r3
 800a424:	f7ff fef4 	bl	800a210 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	689a      	ldr	r2, [r3, #8]
 800a42e:	4b0b      	ldr	r3, [pc, #44]	; (800a45c <HAL_TIMEx_HallSensor_Start+0x4a>)
 800a430:	4013      	ands	r3, r2
 800a432:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2b06      	cmp	r3, #6
 800a438:	d00b      	beq.n	800a452 <HAL_TIMEx_HallSensor_Start+0x40>
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a440:	d007      	beq.n	800a452 <HAL_TIMEx_HallSensor_Start+0x40>
  {
    __HAL_TIM_ENABLE(htim);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	6812      	ldr	r2, [r2, #0]
 800a44a:	6812      	ldr	r2, [r2, #0]
 800a44c:	f042 0201 	orr.w	r2, r2, #1
 800a450:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a452:	2300      	movs	r3, #0
}
 800a454:	4618      	mov	r0, r3
 800a456:	3710      	adds	r7, #16
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	00010007 	.word	0x00010007

0800a460 <HAL_TIMEx_HallSensor_Stop>:
  * @brief  Stops the TIM Hall sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1, 2 and 3
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	2200      	movs	r2, #0
 800a46e:	2100      	movs	r1, #0
 800a470:	4618      	mov	r0, r3
 800a472:	f7ff fecd 	bl	800a210 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	6a1a      	ldr	r2, [r3, #32]
 800a47c:	f241 1311 	movw	r3, #4369	; 0x1111
 800a480:	4013      	ands	r3, r2
 800a482:	2b00      	cmp	r3, #0
 800a484:	d10f      	bne.n	800a4a6 <HAL_TIMEx_HallSensor_Stop+0x46>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	6a1a      	ldr	r2, [r3, #32]
 800a48c:	f240 4344 	movw	r3, #1092	; 0x444
 800a490:	4013      	ands	r3, r2
 800a492:	2b00      	cmp	r3, #0
 800a494:	d107      	bne.n	800a4a6 <HAL_TIMEx_HallSensor_Stop+0x46>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	687a      	ldr	r2, [r7, #4]
 800a49c:	6812      	ldr	r2, [r2, #0]
 800a49e:	6812      	ldr	r2, [r2, #0]
 800a4a0:	f022 0201 	bic.w	r2, r2, #1
 800a4a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a4a6:	2300      	movs	r3, #0
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3708      	adds	r7, #8
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <HAL_TIMEx_HallSensor_Start_IT>:
  * @brief  Starts the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b084      	sub	sp, #16
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Enable the capture compare Interrupts 1 event */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	6812      	ldr	r2, [r2, #0]
 800a4c0:	68d2      	ldr	r2, [r2, #12]
 800a4c2:	f042 0202 	orr.w	r2, r2, #2
 800a4c6:	60da      	str	r2, [r3, #12]

  /* Enable the Input Capture channel 1
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	2100      	movs	r1, #0
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7ff fe9d 	bl	800a210 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	689a      	ldr	r2, [r3, #8]
 800a4dc:	4b0b      	ldr	r3, [pc, #44]	; (800a50c <HAL_TIMEx_HallSensor_Start_IT+0x5c>)
 800a4de:	4013      	ands	r3, r2
 800a4e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2b06      	cmp	r3, #6
 800a4e6:	d00b      	beq.n	800a500 <HAL_TIMEx_HallSensor_Start_IT+0x50>
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4ee:	d007      	beq.n	800a500 <HAL_TIMEx_HallSensor_Start_IT+0x50>
  {
    __HAL_TIM_ENABLE(htim);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	6812      	ldr	r2, [r2, #0]
 800a4f8:	6812      	ldr	r2, [r2, #0]
 800a4fa:	f042 0201 	orr.w	r2, r2, #1
 800a4fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a500:	2300      	movs	r3, #0
}
 800a502:	4618      	mov	r0, r3
 800a504:	3710      	adds	r7, #16
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
 800a50a:	bf00      	nop
 800a50c:	00010007 	.word	0x00010007

0800a510 <HAL_TIMEx_HallSensor_Stop_IT>:
  * @brief  Stops the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b082      	sub	sp, #8
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel 1
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	2200      	movs	r2, #0
 800a51e:	2100      	movs	r1, #0
 800a520:	4618      	mov	r0, r3
 800a522:	f7ff fe75 	bl	800a210 <TIM_CCxChannelCmd>

  /* Disable the capture compare Interrupts event */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	687a      	ldr	r2, [r7, #4]
 800a52c:	6812      	ldr	r2, [r2, #0]
 800a52e:	68d2      	ldr	r2, [r2, #12]
 800a530:	f022 0202 	bic.w	r2, r2, #2
 800a534:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	6a1a      	ldr	r2, [r3, #32]
 800a53c:	f241 1311 	movw	r3, #4369	; 0x1111
 800a540:	4013      	ands	r3, r2
 800a542:	2b00      	cmp	r3, #0
 800a544:	d10f      	bne.n	800a566 <HAL_TIMEx_HallSensor_Stop_IT+0x56>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	6a1a      	ldr	r2, [r3, #32]
 800a54c:	f240 4344 	movw	r3, #1092	; 0x444
 800a550:	4013      	ands	r3, r2
 800a552:	2b00      	cmp	r3, #0
 800a554:	d107      	bne.n	800a566 <HAL_TIMEx_HallSensor_Stop_IT+0x56>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	6812      	ldr	r2, [r2, #0]
 800a55e:	6812      	ldr	r2, [r2, #0]
 800a560:	f022 0201 	bic.w	r2, r2, #1
 800a564:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a566:	2300      	movs	r3, #0
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3708      	adds	r7, #8
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <HAL_TIMEx_HallSensor_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b086      	sub	sp, #24
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	4613      	mov	r3, r2
 800a57c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  if ((htim->State == HAL_TIM_STATE_BUSY))
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a584:	b2db      	uxtb	r3, r3
 800a586:	2b02      	cmp	r3, #2
 800a588:	d101      	bne.n	800a58e <HAL_TIMEx_HallSensor_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 800a58a:	2302      	movs	r3, #2
 800a58c:	e051      	b.n	800a632 <HAL_TIMEx_HallSensor_Start_DMA+0xc2>
  }
  else if ((htim->State == HAL_TIM_STATE_READY))
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a594:	b2db      	uxtb	r3, r3
 800a596:	2b01      	cmp	r3, #1
 800a598:	d10b      	bne.n	800a5b2 <HAL_TIMEx_HallSensor_Start_DMA+0x42>
  {
    if (((uint32_t)pData == 0U) && (Length > 0U))
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d104      	bne.n	800a5aa <HAL_TIMEx_HallSensor_Start_DMA+0x3a>
 800a5a0:	88fb      	ldrh	r3, [r7, #6]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d001      	beq.n	800a5aa <HAL_TIMEx_HallSensor_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	e043      	b.n	800a632 <HAL_TIMEx_HallSensor_Start_DMA+0xc2>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2202      	movs	r2, #2
 800a5ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  {
    /* nothing to do */
  }
  /* Enable the Input Capture channel 1
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	2100      	movs	r1, #0
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7ff fe28 	bl	800a210 <TIM_CCxChannelCmd>

  /* Set the DMA Input Capture 1 Callbacks */
  htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c4:	4a1d      	ldr	r2, [pc, #116]	; (800a63c <HAL_TIMEx_HallSensor_Start_DMA+0xcc>)
 800a5c6:	62da      	str	r2, [r3, #44]	; 0x2c
  htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5cc:	4a1c      	ldr	r2, [pc, #112]	; (800a640 <HAL_TIMEx_HallSensor_Start_DMA+0xd0>)
 800a5ce:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d4:	4a1b      	ldr	r2, [pc, #108]	; (800a644 <HAL_TIMEx_HallSensor_Start_DMA+0xd4>)
 800a5d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA channel for Capture 1*/
  if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	3334      	adds	r3, #52	; 0x34
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	68ba      	ldr	r2, [r7, #8]
 800a5e6:	88fb      	ldrh	r3, [r7, #6]
 800a5e8:	f7f6 fd39 	bl	800105e <HAL_DMA_Start_IT>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d001      	beq.n	800a5f6 <HAL_TIMEx_HallSensor_Start_DMA+0x86>
  {
    return HAL_ERROR;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	e01d      	b.n	800a632 <HAL_TIMEx_HallSensor_Start_DMA+0xc2>
  }
  /* Enable the capture compare 1 Interrupt */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	68fa      	ldr	r2, [r7, #12]
 800a5fc:	6812      	ldr	r2, [r2, #0]
 800a5fe:	68d2      	ldr	r2, [r2, #12]
 800a600:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a604:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	689a      	ldr	r2, [r3, #8]
 800a60c:	4b0e      	ldr	r3, [pc, #56]	; (800a648 <HAL_TIMEx_HallSensor_Start_DMA+0xd8>)
 800a60e:	4013      	ands	r3, r2
 800a610:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	2b06      	cmp	r3, #6
 800a616:	d00b      	beq.n	800a630 <HAL_TIMEx_HallSensor_Start_DMA+0xc0>
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a61e:	d007      	beq.n	800a630 <HAL_TIMEx_HallSensor_Start_DMA+0xc0>
  {
    __HAL_TIM_ENABLE(htim);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	68fa      	ldr	r2, [r7, #12]
 800a626:	6812      	ldr	r2, [r2, #0]
 800a628:	6812      	ldr	r2, [r2, #0]
 800a62a:	f042 0201 	orr.w	r2, r2, #1
 800a62e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a630:	2300      	movs	r3, #0
}
 800a632:	4618      	mov	r0, r3
 800a634:	3718      	adds	r7, #24
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	08009535 	.word	0x08009535
 800a640:	080095a5 	.word	0x080095a5
 800a644:	08009431 	.word	0x08009431
 800a648:	00010007 	.word	0x00010007

0800a64c <HAL_TIMEx_HallSensor_Stop_DMA>:
  * @brief  Stops the TIM Hall Sensor Interface in DMA mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_DMA(TIM_HandleTypeDef *htim)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel 1
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2200      	movs	r2, #0
 800a65a:	2100      	movs	r1, #0
 800a65c:	4618      	mov	r0, r3
 800a65e:	f7ff fdd7 	bl	800a210 <TIM_CCxChannelCmd>


  /* Disable the capture compare Interrupts 1 event */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	6812      	ldr	r2, [r2, #0]
 800a66a:	68d2      	ldr	r2, [r2, #12]
 800a66c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a670:	60da      	str	r2, [r3, #12]

  (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a676:	4618      	mov	r0, r3
 800a678:	f7f6 fd8f 	bl	800119a <HAL_DMA_Abort_IT>
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	6a1a      	ldr	r2, [r3, #32]
 800a682:	f241 1311 	movw	r3, #4369	; 0x1111
 800a686:	4013      	ands	r3, r2
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d10f      	bne.n	800a6ac <HAL_TIMEx_HallSensor_Stop_DMA+0x60>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	6a1a      	ldr	r2, [r3, #32]
 800a692:	f240 4344 	movw	r3, #1092	; 0x444
 800a696:	4013      	ands	r3, r2
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d107      	bne.n	800a6ac <HAL_TIMEx_HallSensor_Stop_DMA+0x60>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	6812      	ldr	r2, [r2, #0]
 800a6a4:	6812      	ldr	r2, [r2, #0]
 800a6a6:	f022 0201 	bic.w	r2, r2, #1
 800a6aa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a6ac:	2300      	movs	r3, #0
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3708      	adds	r7, #8
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}

0800a6b6 <HAL_TIMEx_OCN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a6b6:	b580      	push	{r7, lr}
 800a6b8:	b084      	sub	sp, #16
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
 800a6be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	2204      	movs	r2, #4
 800a6c6:	6839      	ldr	r1, [r7, #0]
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f001 f972 	bl	800b9b2 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	6812      	ldr	r2, [r2, #0]
 800a6d6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a6d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a6dc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	689a      	ldr	r2, [r3, #8]
 800a6e4:	4b0b      	ldr	r3, [pc, #44]	; (800a714 <HAL_TIMEx_OCN_Start+0x5e>)
 800a6e6:	4013      	ands	r3, r2
 800a6e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2b06      	cmp	r3, #6
 800a6ee:	d00b      	beq.n	800a708 <HAL_TIMEx_OCN_Start+0x52>
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6f6:	d007      	beq.n	800a708 <HAL_TIMEx_OCN_Start+0x52>
  {
    __HAL_TIM_ENABLE(htim);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	6812      	ldr	r2, [r2, #0]
 800a700:	6812      	ldr	r2, [r2, #0]
 800a702:	f042 0201 	orr.w	r2, r2, #1
 800a706:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a708:	2300      	movs	r3, #0
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3710      	adds	r7, #16
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
 800a712:	bf00      	nop
 800a714:	00010007 	.word	0x00010007

0800a718 <HAL_TIMEx_OCN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	2200      	movs	r2, #0
 800a728:	6839      	ldr	r1, [r7, #0]
 800a72a:	4618      	mov	r0, r3
 800a72c:	f001 f941 	bl	800b9b2 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	6a1a      	ldr	r2, [r3, #32]
 800a736:	f241 1311 	movw	r3, #4369	; 0x1111
 800a73a:	4013      	ands	r3, r2
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d10f      	bne.n	800a760 <HAL_TIMEx_OCN_Stop+0x48>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	6a1a      	ldr	r2, [r3, #32]
 800a746:	f240 4344 	movw	r3, #1092	; 0x444
 800a74a:	4013      	ands	r3, r2
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d107      	bne.n	800a760 <HAL_TIMEx_OCN_Stop+0x48>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	687a      	ldr	r2, [r7, #4]
 800a756:	6812      	ldr	r2, [r2, #0]
 800a758:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a75a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a75e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	6a1a      	ldr	r2, [r3, #32]
 800a766:	f241 1311 	movw	r3, #4369	; 0x1111
 800a76a:	4013      	ands	r3, r2
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d10f      	bne.n	800a790 <HAL_TIMEx_OCN_Stop+0x78>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	6a1a      	ldr	r2, [r3, #32]
 800a776:	f240 4344 	movw	r3, #1092	; 0x444
 800a77a:	4013      	ands	r3, r2
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d107      	bne.n	800a790 <HAL_TIMEx_OCN_Stop+0x78>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	687a      	ldr	r2, [r7, #4]
 800a786:	6812      	ldr	r2, [r2, #0]
 800a788:	6812      	ldr	r2, [r2, #0]
 800a78a:	f022 0201 	bic.w	r2, r2, #1
 800a78e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a790:	2300      	movs	r3, #0
}
 800a792:	4618      	mov	r0, r3
 800a794:	3708      	adds	r7, #8
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}

0800a79a <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b084      	sub	sp, #16
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
 800a7a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	2b04      	cmp	r3, #4
 800a7a8:	d00d      	beq.n	800a7c6 <HAL_TIMEx_OCN_Start_IT+0x2c>
 800a7aa:	2b08      	cmp	r3, #8
 800a7ac:	d014      	beq.n	800a7d8 <HAL_TIMEx_OCN_Start_IT+0x3e>
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d000      	beq.n	800a7b4 <HAL_TIMEx_OCN_Start_IT+0x1a>
      break;
    }


    default:
      break;
 800a7b2:	e01a      	b.n	800a7ea <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	6812      	ldr	r2, [r2, #0]
 800a7bc:	68d2      	ldr	r2, [r2, #12]
 800a7be:	f042 0202 	orr.w	r2, r2, #2
 800a7c2:	60da      	str	r2, [r3, #12]
      break;
 800a7c4:	e011      	b.n	800a7ea <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	687a      	ldr	r2, [r7, #4]
 800a7cc:	6812      	ldr	r2, [r2, #0]
 800a7ce:	68d2      	ldr	r2, [r2, #12]
 800a7d0:	f042 0204 	orr.w	r2, r2, #4
 800a7d4:	60da      	str	r2, [r3, #12]
      break;
 800a7d6:	e008      	b.n	800a7ea <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	6812      	ldr	r2, [r2, #0]
 800a7e0:	68d2      	ldr	r2, [r2, #12]
 800a7e2:	f042 0208 	orr.w	r2, r2, #8
 800a7e6:	60da      	str	r2, [r3, #12]
      break;
 800a7e8:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	6812      	ldr	r2, [r2, #0]
 800a7f2:	68d2      	ldr	r2, [r2, #12]
 800a7f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a7f8:	60da      	str	r2, [r3, #12]

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	2204      	movs	r2, #4
 800a800:	6839      	ldr	r1, [r7, #0]
 800a802:	4618      	mov	r0, r3
 800a804:	f001 f8d5 	bl	800b9b2 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	6812      	ldr	r2, [r2, #0]
 800a810:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a812:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a816:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	689a      	ldr	r2, [r3, #8]
 800a81e:	4b0b      	ldr	r3, [pc, #44]	; (800a84c <HAL_TIMEx_OCN_Start_IT+0xb2>)
 800a820:	4013      	ands	r3, r2
 800a822:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2b06      	cmp	r3, #6
 800a828:	d00b      	beq.n	800a842 <HAL_TIMEx_OCN_Start_IT+0xa8>
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a830:	d007      	beq.n	800a842 <HAL_TIMEx_OCN_Start_IT+0xa8>
  {
    __HAL_TIM_ENABLE(htim);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	6812      	ldr	r2, [r2, #0]
 800a83a:	6812      	ldr	r2, [r2, #0]
 800a83c:	f042 0201 	orr.w	r2, r2, #1
 800a840:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a842:	2300      	movs	r3, #0
}
 800a844:	4618      	mov	r0, r3
 800a846:	3710      	adds	r7, #16
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	00010007 	.word	0x00010007

0800a850 <HAL_TIMEx_OCN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b084      	sub	sp, #16
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	2b04      	cmp	r3, #4
 800a85e:	d00d      	beq.n	800a87c <HAL_TIMEx_OCN_Stop_IT+0x2c>
 800a860:	2b08      	cmp	r3, #8
 800a862:	d014      	beq.n	800a88e <HAL_TIMEx_OCN_Stop_IT+0x3e>
 800a864:	2b00      	cmp	r3, #0
 800a866:	d000      	beq.n	800a86a <HAL_TIMEx_OCN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 800a868:	e01a      	b.n	800a8a0 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	6812      	ldr	r2, [r2, #0]
 800a872:	68d2      	ldr	r2, [r2, #12]
 800a874:	f022 0202 	bic.w	r2, r2, #2
 800a878:	60da      	str	r2, [r3, #12]
      break;
 800a87a:	e011      	b.n	800a8a0 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	6812      	ldr	r2, [r2, #0]
 800a884:	68d2      	ldr	r2, [r2, #12]
 800a886:	f022 0204 	bic.w	r2, r2, #4
 800a88a:	60da      	str	r2, [r3, #12]
      break;
 800a88c:	e008      	b.n	800a8a0 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	6812      	ldr	r2, [r2, #0]
 800a896:	68d2      	ldr	r2, [r2, #12]
 800a898:	f022 0208 	bic.w	r2, r2, #8
 800a89c:	60da      	str	r2, [r3, #12]
      break;
 800a89e:	bf00      	nop
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	6839      	ldr	r1, [r7, #0]
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f001 f882 	bl	800b9b2 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	6a1b      	ldr	r3, [r3, #32]
 800a8b4:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 800a8b6:	68fa      	ldr	r2, [r7, #12]
 800a8b8:	f240 4344 	movw	r3, #1092	; 0x444
 800a8bc:	4013      	ands	r3, r2
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d107      	bne.n	800a8d2 <HAL_TIMEx_OCN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	6812      	ldr	r2, [r2, #0]
 800a8ca:	68d2      	ldr	r2, [r2, #12]
 800a8cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a8d0:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	6a1a      	ldr	r2, [r3, #32]
 800a8d8:	f241 1311 	movw	r3, #4369	; 0x1111
 800a8dc:	4013      	ands	r3, r2
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d10f      	bne.n	800a902 <HAL_TIMEx_OCN_Stop_IT+0xb2>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	6a1a      	ldr	r2, [r3, #32]
 800a8e8:	f240 4344 	movw	r3, #1092	; 0x444
 800a8ec:	4013      	ands	r3, r2
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d107      	bne.n	800a902 <HAL_TIMEx_OCN_Stop_IT+0xb2>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	6812      	ldr	r2, [r2, #0]
 800a8fa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a8fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a900:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	6a1a      	ldr	r2, [r3, #32]
 800a908:	f241 1311 	movw	r3, #4369	; 0x1111
 800a90c:	4013      	ands	r3, r2
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d10f      	bne.n	800a932 <HAL_TIMEx_OCN_Stop_IT+0xe2>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	6a1a      	ldr	r2, [r3, #32]
 800a918:	f240 4344 	movw	r3, #1092	; 0x444
 800a91c:	4013      	ands	r3, r2
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d107      	bne.n	800a932 <HAL_TIMEx_OCN_Stop_IT+0xe2>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	6812      	ldr	r2, [r2, #0]
 800a92a:	6812      	ldr	r2, [r2, #0]
 800a92c:	f022 0201 	bic.w	r2, r2, #1
 800a930:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a932:	2300      	movs	r3, #0
}
 800a934:	4618      	mov	r0, r3
 800a936:	3710      	adds	r7, #16
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <HAL_TIMEx_OCN_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b086      	sub	sp, #24
 800a940:	af00      	add	r7, sp, #0
 800a942:	60f8      	str	r0, [r7, #12]
 800a944:	60b9      	str	r1, [r7, #8]
 800a946:	607a      	str	r2, [r7, #4]
 800a948:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  if ((htim->State == HAL_TIM_STATE_BUSY))
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a950:	b2db      	uxtb	r3, r3
 800a952:	2b02      	cmp	r3, #2
 800a954:	d101      	bne.n	800a95a <HAL_TIMEx_OCN_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 800a956:	2302      	movs	r3, #2
 800a958:	e0aa      	b.n	800aab0 <HAL_TIMEx_OCN_Start_DMA+0x174>
  }
  else if ((htim->State == HAL_TIM_STATE_READY))
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a960:	b2db      	uxtb	r3, r3
 800a962:	2b01      	cmp	r3, #1
 800a964:	d10b      	bne.n	800a97e <HAL_TIMEx_OCN_Start_DMA+0x42>
  {
    if (((uint32_t)pData == 0U) && (Length > 0U))
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d104      	bne.n	800a976 <HAL_TIMEx_OCN_Start_DMA+0x3a>
 800a96c:	887b      	ldrh	r3, [r7, #2]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d001      	beq.n	800a976 <HAL_TIMEx_OCN_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 800a972:	2301      	movs	r3, #1
 800a974:	e09c      	b.n	800aab0 <HAL_TIMEx_OCN_Start_DMA+0x174>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2202      	movs	r2, #2
 800a97a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do  */
  }

  switch (Channel)
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	2b04      	cmp	r3, #4
 800a982:	d028      	beq.n	800a9d6 <HAL_TIMEx_OCN_Start_DMA+0x9a>
 800a984:	2b08      	cmp	r3, #8
 800a986:	d04a      	beq.n	800aa1e <HAL_TIMEx_OCN_Start_DMA+0xe2>
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d000      	beq.n	800a98e <HAL_TIMEx_OCN_Start_DMA+0x52>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
      break;
    }

    default:
      break;
 800a98c:	e06b      	b.n	800aa66 <HAL_TIMEx_OCN_Start_DMA+0x12a>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a992:	4a49      	ldr	r2, [pc, #292]	; (800aab8 <HAL_TIMEx_OCN_Start_DMA+0x17c>)
 800a994:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a99a:	4a48      	ldr	r2, [pc, #288]	; (800aabc <HAL_TIMEx_OCN_Start_DMA+0x180>)
 800a99c:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a2:	4a47      	ldr	r2, [pc, #284]	; (800aac0 <HAL_TIMEx_OCN_Start_DMA+0x184>)
 800a9a4:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a9aa:	6879      	ldr	r1, [r7, #4]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	3334      	adds	r3, #52	; 0x34
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	887b      	ldrh	r3, [r7, #2]
 800a9b6:	f7f6 fb52 	bl	800105e <HAL_DMA_Start_IT>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d001      	beq.n	800a9c4 <HAL_TIMEx_OCN_Start_DMA+0x88>
        return HAL_ERROR;
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	e075      	b.n	800aab0 <HAL_TIMEx_OCN_Start_DMA+0x174>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	68fa      	ldr	r2, [r7, #12]
 800a9ca:	6812      	ldr	r2, [r2, #0]
 800a9cc:	68d2      	ldr	r2, [r2, #12]
 800a9ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9d2:	60da      	str	r2, [r3, #12]
      break;
 800a9d4:	e047      	b.n	800aa66 <HAL_TIMEx_OCN_Start_DMA+0x12a>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9da:	4a37      	ldr	r2, [pc, #220]	; (800aab8 <HAL_TIMEx_OCN_Start_DMA+0x17c>)
 800a9dc:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9e2:	4a36      	ldr	r2, [pc, #216]	; (800aabc <HAL_TIMEx_OCN_Start_DMA+0x180>)
 800a9e4:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ea:	4a35      	ldr	r2, [pc, #212]	; (800aac0 <HAL_TIMEx_OCN_Start_DMA+0x184>)
 800a9ec:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800a9f2:	6879      	ldr	r1, [r7, #4]
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	3338      	adds	r3, #56	; 0x38
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	887b      	ldrh	r3, [r7, #2]
 800a9fe:	f7f6 fb2e 	bl	800105e <HAL_DMA_Start_IT>
 800aa02:	4603      	mov	r3, r0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d001      	beq.n	800aa0c <HAL_TIMEx_OCN_Start_DMA+0xd0>
        return HAL_ERROR;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	e051      	b.n	800aab0 <HAL_TIMEx_OCN_Start_DMA+0x174>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	68fa      	ldr	r2, [r7, #12]
 800aa12:	6812      	ldr	r2, [r2, #0]
 800aa14:	68d2      	ldr	r2, [r2, #12]
 800aa16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800aa1a:	60da      	str	r2, [r3, #12]
      break;
 800aa1c:	e023      	b.n	800aa66 <HAL_TIMEx_OCN_Start_DMA+0x12a>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa22:	4a25      	ldr	r2, [pc, #148]	; (800aab8 <HAL_TIMEx_OCN_Start_DMA+0x17c>)
 800aa24:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa2a:	4a24      	ldr	r2, [pc, #144]	; (800aabc <HAL_TIMEx_OCN_Start_DMA+0x180>)
 800aa2c:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa32:	4a23      	ldr	r2, [pc, #140]	; (800aac0 <HAL_TIMEx_OCN_Start_DMA+0x184>)
 800aa34:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800aa3a:	6879      	ldr	r1, [r7, #4]
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	333c      	adds	r3, #60	; 0x3c
 800aa42:	461a      	mov	r2, r3
 800aa44:	887b      	ldrh	r3, [r7, #2]
 800aa46:	f7f6 fb0a 	bl	800105e <HAL_DMA_Start_IT>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d001      	beq.n	800aa54 <HAL_TIMEx_OCN_Start_DMA+0x118>
        return HAL_ERROR;
 800aa50:	2301      	movs	r3, #1
 800aa52:	e02d      	b.n	800aab0 <HAL_TIMEx_OCN_Start_DMA+0x174>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	68fa      	ldr	r2, [r7, #12]
 800aa5a:	6812      	ldr	r2, [r2, #0]
 800aa5c:	68d2      	ldr	r2, [r2, #12]
 800aa5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa62:	60da      	str	r2, [r3, #12]
      break;
 800aa64:	bf00      	nop
  }

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	2204      	movs	r2, #4
 800aa6c:	68b9      	ldr	r1, [r7, #8]
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f000 ff9f 	bl	800b9b2 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	68fa      	ldr	r2, [r7, #12]
 800aa7a:	6812      	ldr	r2, [r2, #0]
 800aa7c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800aa7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aa82:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	689a      	ldr	r2, [r3, #8]
 800aa8a:	4b0e      	ldr	r3, [pc, #56]	; (800aac4 <HAL_TIMEx_OCN_Start_DMA+0x188>)
 800aa8c:	4013      	ands	r3, r2
 800aa8e:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	2b06      	cmp	r3, #6
 800aa94:	d00b      	beq.n	800aaae <HAL_TIMEx_OCN_Start_DMA+0x172>
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa9c:	d007      	beq.n	800aaae <HAL_TIMEx_OCN_Start_DMA+0x172>
  {
    __HAL_TIM_ENABLE(htim);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	68fa      	ldr	r2, [r7, #12]
 800aaa4:	6812      	ldr	r2, [r2, #0]
 800aaa6:	6812      	ldr	r2, [r2, #0]
 800aaa8:	f042 0201 	orr.w	r2, r2, #1
 800aaac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aaae:	2300      	movs	r3, #0
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3718      	adds	r7, #24
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}
 800aab8:	08009455 	.word	0x08009455
 800aabc:	080094c5 	.word	0x080094c5
 800aac0:	08009431 	.word	0x08009431
 800aac4:	00010007 	.word	0x00010007

0800aac8 <HAL_TIMEx_OCN_Stop_DMA>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	2b04      	cmp	r3, #4
 800aad6:	d012      	beq.n	800aafe <HAL_TIMEx_OCN_Stop_DMA+0x36>
 800aad8:	2b08      	cmp	r3, #8
 800aada:	d01e      	beq.n	800ab1a <HAL_TIMEx_OCN_Stop_DMA+0x52>
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d000      	beq.n	800aae2 <HAL_TIMEx_OCN_Stop_DMA+0x1a>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
      break;
    }

    default:
      break;
 800aae0:	e029      	b.n	800ab36 <HAL_TIMEx_OCN_Stop_DMA+0x6e>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	6812      	ldr	r2, [r2, #0]
 800aaea:	68d2      	ldr	r2, [r2, #12]
 800aaec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800aaf0:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f7f6 fb4f 	bl	800119a <HAL_DMA_Abort_IT>
      break;
 800aafc:	e01b      	b.n	800ab36 <HAL_TIMEx_OCN_Stop_DMA+0x6e>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	6812      	ldr	r2, [r2, #0]
 800ab06:	68d2      	ldr	r2, [r2, #12]
 800ab08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab0c:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab12:	4618      	mov	r0, r3
 800ab14:	f7f6 fb41 	bl	800119a <HAL_DMA_Abort_IT>
      break;
 800ab18:	e00d      	b.n	800ab36 <HAL_TIMEx_OCN_Stop_DMA+0x6e>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	6812      	ldr	r2, [r2, #0]
 800ab22:	68d2      	ldr	r2, [r2, #12]
 800ab24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ab28:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f7f6 fb33 	bl	800119a <HAL_DMA_Abort_IT>
      break;
 800ab34:	bf00      	nop
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	6839      	ldr	r1, [r7, #0]
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f000 ff37 	bl	800b9b2 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	6a1a      	ldr	r2, [r3, #32]
 800ab4a:	f241 1311 	movw	r3, #4369	; 0x1111
 800ab4e:	4013      	ands	r3, r2
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d10f      	bne.n	800ab74 <HAL_TIMEx_OCN_Stop_DMA+0xac>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	6a1a      	ldr	r2, [r3, #32]
 800ab5a:	f240 4344 	movw	r3, #1092	; 0x444
 800ab5e:	4013      	ands	r3, r2
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d107      	bne.n	800ab74 <HAL_TIMEx_OCN_Stop_DMA+0xac>
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	6812      	ldr	r2, [r2, #0]
 800ab6c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800ab6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ab72:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	6a1a      	ldr	r2, [r3, #32]
 800ab7a:	f241 1311 	movw	r3, #4369	; 0x1111
 800ab7e:	4013      	ands	r3, r2
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d10f      	bne.n	800aba4 <HAL_TIMEx_OCN_Stop_DMA+0xdc>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	6a1a      	ldr	r2, [r3, #32]
 800ab8a:	f240 4344 	movw	r3, #1092	; 0x444
 800ab8e:	4013      	ands	r3, r2
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d107      	bne.n	800aba4 <HAL_TIMEx_OCN_Stop_DMA+0xdc>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	6812      	ldr	r2, [r2, #0]
 800ab9c:	6812      	ldr	r2, [r2, #0]
 800ab9e:	f022 0201 	bic.w	r2, r2, #1
 800aba2:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2201      	movs	r2, #1
 800aba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800abac:	2300      	movs	r3, #0
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3708      	adds	r7, #8
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}

0800abb6 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800abb6:	b580      	push	{r7, lr}
 800abb8:	b084      	sub	sp, #16
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
 800abbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	2204      	movs	r2, #4
 800abc6:	6839      	ldr	r1, [r7, #0]
 800abc8:	4618      	mov	r0, r3
 800abca:	f000 fef2 	bl	800b9b2 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	687a      	ldr	r2, [r7, #4]
 800abd4:	6812      	ldr	r2, [r2, #0]
 800abd6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800abd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800abdc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	689a      	ldr	r2, [r3, #8]
 800abe4:	4b0b      	ldr	r3, [pc, #44]	; (800ac14 <HAL_TIMEx_PWMN_Start+0x5e>)
 800abe6:	4013      	ands	r3, r2
 800abe8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2b06      	cmp	r3, #6
 800abee:	d00b      	beq.n	800ac08 <HAL_TIMEx_PWMN_Start+0x52>
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abf6:	d007      	beq.n	800ac08 <HAL_TIMEx_PWMN_Start+0x52>
  {
    __HAL_TIM_ENABLE(htim);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	687a      	ldr	r2, [r7, #4]
 800abfe:	6812      	ldr	r2, [r2, #0]
 800ac00:	6812      	ldr	r2, [r2, #0]
 800ac02:	f042 0201 	orr.w	r2, r2, #1
 800ac06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ac08:	2300      	movs	r3, #0
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3710      	adds	r7, #16
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	00010007 	.word	0x00010007

0800ac18 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	2200      	movs	r2, #0
 800ac28:	6839      	ldr	r1, [r7, #0]
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f000 fec1 	bl	800b9b2 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	6a1a      	ldr	r2, [r3, #32]
 800ac36:	f241 1311 	movw	r3, #4369	; 0x1111
 800ac3a:	4013      	ands	r3, r2
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d10f      	bne.n	800ac60 <HAL_TIMEx_PWMN_Stop+0x48>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	6a1a      	ldr	r2, [r3, #32]
 800ac46:	f240 4344 	movw	r3, #1092	; 0x444
 800ac4a:	4013      	ands	r3, r2
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d107      	bne.n	800ac60 <HAL_TIMEx_PWMN_Stop+0x48>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	6812      	ldr	r2, [r2, #0]
 800ac58:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800ac5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ac5e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	6a1a      	ldr	r2, [r3, #32]
 800ac66:	f241 1311 	movw	r3, #4369	; 0x1111
 800ac6a:	4013      	ands	r3, r2
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d10f      	bne.n	800ac90 <HAL_TIMEx_PWMN_Stop+0x78>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	6a1a      	ldr	r2, [r3, #32]
 800ac76:	f240 4344 	movw	r3, #1092	; 0x444
 800ac7a:	4013      	ands	r3, r2
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d107      	bne.n	800ac90 <HAL_TIMEx_PWMN_Stop+0x78>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	6812      	ldr	r2, [r2, #0]
 800ac88:	6812      	ldr	r2, [r2, #0]
 800ac8a:	f022 0201 	bic.w	r2, r2, #1
 800ac8e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ac90:	2300      	movs	r3, #0
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3708      	adds	r7, #8
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ac9a:	b580      	push	{r7, lr}
 800ac9c:	b084      	sub	sp, #16
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
 800aca2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	2b04      	cmp	r3, #4
 800aca8:	d00d      	beq.n	800acc6 <HAL_TIMEx_PWMN_Start_IT+0x2c>
 800acaa:	2b08      	cmp	r3, #8
 800acac:	d014      	beq.n	800acd8 <HAL_TIMEx_PWMN_Start_IT+0x3e>
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d000      	beq.n	800acb4 <HAL_TIMEx_PWMN_Start_IT+0x1a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 800acb2:	e01a      	b.n	800acea <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	6812      	ldr	r2, [r2, #0]
 800acbc:	68d2      	ldr	r2, [r2, #12]
 800acbe:	f042 0202 	orr.w	r2, r2, #2
 800acc2:	60da      	str	r2, [r3, #12]
      break;
 800acc4:	e011      	b.n	800acea <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	687a      	ldr	r2, [r7, #4]
 800accc:	6812      	ldr	r2, [r2, #0]
 800acce:	68d2      	ldr	r2, [r2, #12]
 800acd0:	f042 0204 	orr.w	r2, r2, #4
 800acd4:	60da      	str	r2, [r3, #12]
      break;
 800acd6:	e008      	b.n	800acea <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	6812      	ldr	r2, [r2, #0]
 800ace0:	68d2      	ldr	r2, [r2, #12]
 800ace2:	f042 0208 	orr.w	r2, r2, #8
 800ace6:	60da      	str	r2, [r3, #12]
      break;
 800ace8:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	6812      	ldr	r2, [r2, #0]
 800acf2:	68d2      	ldr	r2, [r2, #12]
 800acf4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800acf8:	60da      	str	r2, [r3, #12]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	2204      	movs	r2, #4
 800ad00:	6839      	ldr	r1, [r7, #0]
 800ad02:	4618      	mov	r0, r3
 800ad04:	f000 fe55 	bl	800b9b2 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	6812      	ldr	r2, [r2, #0]
 800ad10:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800ad12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ad16:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	689a      	ldr	r2, [r3, #8]
 800ad1e:	4b0b      	ldr	r3, [pc, #44]	; (800ad4c <HAL_TIMEx_PWMN_Start_IT+0xb2>)
 800ad20:	4013      	ands	r3, r2
 800ad22:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	2b06      	cmp	r3, #6
 800ad28:	d00b      	beq.n	800ad42 <HAL_TIMEx_PWMN_Start_IT+0xa8>
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad30:	d007      	beq.n	800ad42 <HAL_TIMEx_PWMN_Start_IT+0xa8>
  {
    __HAL_TIM_ENABLE(htim);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	6812      	ldr	r2, [r2, #0]
 800ad3a:	6812      	ldr	r2, [r2, #0]
 800ad3c:	f042 0201 	orr.w	r2, r2, #1
 800ad40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ad42:	2300      	movs	r3, #0
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3710      	adds	r7, #16
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	00010007 	.word	0x00010007

0800ad50 <HAL_TIMEx_PWMN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	2b04      	cmp	r3, #4
 800ad5e:	d00d      	beq.n	800ad7c <HAL_TIMEx_PWMN_Stop_IT+0x2c>
 800ad60:	2b08      	cmp	r3, #8
 800ad62:	d014      	beq.n	800ad8e <HAL_TIMEx_PWMN_Stop_IT+0x3e>
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d000      	beq.n	800ad6a <HAL_TIMEx_PWMN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 800ad68:	e01a      	b.n	800ada0 <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	6812      	ldr	r2, [r2, #0]
 800ad72:	68d2      	ldr	r2, [r2, #12]
 800ad74:	f022 0202 	bic.w	r2, r2, #2
 800ad78:	60da      	str	r2, [r3, #12]
      break;
 800ad7a:	e011      	b.n	800ada0 <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	6812      	ldr	r2, [r2, #0]
 800ad84:	68d2      	ldr	r2, [r2, #12]
 800ad86:	f022 0204 	bic.w	r2, r2, #4
 800ad8a:	60da      	str	r2, [r3, #12]
      break;
 800ad8c:	e008      	b.n	800ada0 <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	687a      	ldr	r2, [r7, #4]
 800ad94:	6812      	ldr	r2, [r2, #0]
 800ad96:	68d2      	ldr	r2, [r2, #12]
 800ad98:	f022 0208 	bic.w	r2, r2, #8
 800ad9c:	60da      	str	r2, [r3, #12]
      break;
 800ad9e:	bf00      	nop
  }

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2200      	movs	r2, #0
 800ada6:	6839      	ldr	r1, [r7, #0]
 800ada8:	4618      	mov	r0, r3
 800adaa:	f000 fe02 	bl	800b9b2 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	6a1b      	ldr	r3, [r3, #32]
 800adb4:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 800adb6:	68fa      	ldr	r2, [r7, #12]
 800adb8:	f240 4344 	movw	r3, #1092	; 0x444
 800adbc:	4013      	ands	r3, r2
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d107      	bne.n	800add2 <HAL_TIMEx_PWMN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	6812      	ldr	r2, [r2, #0]
 800adca:	68d2      	ldr	r2, [r2, #12]
 800adcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800add0:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	6a1a      	ldr	r2, [r3, #32]
 800add8:	f241 1311 	movw	r3, #4369	; 0x1111
 800addc:	4013      	ands	r3, r2
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d10f      	bne.n	800ae02 <HAL_TIMEx_PWMN_Stop_IT+0xb2>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	6a1a      	ldr	r2, [r3, #32]
 800ade8:	f240 4344 	movw	r3, #1092	; 0x444
 800adec:	4013      	ands	r3, r2
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d107      	bne.n	800ae02 <HAL_TIMEx_PWMN_Stop_IT+0xb2>
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	6812      	ldr	r2, [r2, #0]
 800adfa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800adfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ae00:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	6a1a      	ldr	r2, [r3, #32]
 800ae08:	f241 1311 	movw	r3, #4369	; 0x1111
 800ae0c:	4013      	ands	r3, r2
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d10f      	bne.n	800ae32 <HAL_TIMEx_PWMN_Stop_IT+0xe2>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	6a1a      	ldr	r2, [r3, #32]
 800ae18:	f240 4344 	movw	r3, #1092	; 0x444
 800ae1c:	4013      	ands	r3, r2
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d107      	bne.n	800ae32 <HAL_TIMEx_PWMN_Stop_IT+0xe2>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	6812      	ldr	r2, [r2, #0]
 800ae2a:	6812      	ldr	r2, [r2, #0]
 800ae2c:	f022 0201 	bic.w	r2, r2, #1
 800ae30:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ae32:	2300      	movs	r3, #0
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3710      	adds	r7, #16
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <HAL_TIMEx_PWMN_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b086      	sub	sp, #24
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	60f8      	str	r0, [r7, #12]
 800ae44:	60b9      	str	r1, [r7, #8]
 800ae46:	607a      	str	r2, [r7, #4]
 800ae48:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  if ((htim->State == HAL_TIM_STATE_BUSY))
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae50:	b2db      	uxtb	r3, r3
 800ae52:	2b02      	cmp	r3, #2
 800ae54:	d101      	bne.n	800ae5a <HAL_TIMEx_PWMN_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 800ae56:	2302      	movs	r3, #2
 800ae58:	e0aa      	b.n	800afb0 <HAL_TIMEx_PWMN_Start_DMA+0x174>
  }
  else if ((htim->State == HAL_TIM_STATE_READY))
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae60:	b2db      	uxtb	r3, r3
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	d10b      	bne.n	800ae7e <HAL_TIMEx_PWMN_Start_DMA+0x42>
  {
    if (((uint32_t)pData == 0U) && (Length > 0U))
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d104      	bne.n	800ae76 <HAL_TIMEx_PWMN_Start_DMA+0x3a>
 800ae6c:	887b      	ldrh	r3, [r7, #2]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d001      	beq.n	800ae76 <HAL_TIMEx_PWMN_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 800ae72:	2301      	movs	r3, #1
 800ae74:	e09c      	b.n	800afb0 <HAL_TIMEx_PWMN_Start_DMA+0x174>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2202      	movs	r2, #2
 800ae7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }
  else
  {
    /* nothing to do */
  }
  switch (Channel)
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	2b04      	cmp	r3, #4
 800ae82:	d028      	beq.n	800aed6 <HAL_TIMEx_PWMN_Start_DMA+0x9a>
 800ae84:	2b08      	cmp	r3, #8
 800ae86:	d04a      	beq.n	800af1e <HAL_TIMEx_PWMN_Start_DMA+0xe2>
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d000      	beq.n	800ae8e <HAL_TIMEx_PWMN_Start_DMA+0x52>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
      break;
    }

    default:
      break;
 800ae8c:	e06b      	b.n	800af66 <HAL_TIMEx_PWMN_Start_DMA+0x12a>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae92:	4a49      	ldr	r2, [pc, #292]	; (800afb8 <HAL_TIMEx_PWMN_Start_DMA+0x17c>)
 800ae94:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae9a:	4a48      	ldr	r2, [pc, #288]	; (800afbc <HAL_TIMEx_PWMN_Start_DMA+0x180>)
 800ae9c:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea2:	4a47      	ldr	r2, [pc, #284]	; (800afc0 <HAL_TIMEx_PWMN_Start_DMA+0x184>)
 800aea4:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800aeaa:	6879      	ldr	r1, [r7, #4]
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	3334      	adds	r3, #52	; 0x34
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	887b      	ldrh	r3, [r7, #2]
 800aeb6:	f7f6 f8d2 	bl	800105e <HAL_DMA_Start_IT>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d001      	beq.n	800aec4 <HAL_TIMEx_PWMN_Start_DMA+0x88>
        return HAL_ERROR;
 800aec0:	2301      	movs	r3, #1
 800aec2:	e075      	b.n	800afb0 <HAL_TIMEx_PWMN_Start_DMA+0x174>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	68fa      	ldr	r2, [r7, #12]
 800aeca:	6812      	ldr	r2, [r2, #0]
 800aecc:	68d2      	ldr	r2, [r2, #12]
 800aece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aed2:	60da      	str	r2, [r3, #12]
      break;
 800aed4:	e047      	b.n	800af66 <HAL_TIMEx_PWMN_Start_DMA+0x12a>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeda:	4a37      	ldr	r2, [pc, #220]	; (800afb8 <HAL_TIMEx_PWMN_Start_DMA+0x17c>)
 800aedc:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aee2:	4a36      	ldr	r2, [pc, #216]	; (800afbc <HAL_TIMEx_PWMN_Start_DMA+0x180>)
 800aee4:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeea:	4a35      	ldr	r2, [pc, #212]	; (800afc0 <HAL_TIMEx_PWMN_Start_DMA+0x184>)
 800aeec:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800aef2:	6879      	ldr	r1, [r7, #4]
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	3338      	adds	r3, #56	; 0x38
 800aefa:	461a      	mov	r2, r3
 800aefc:	887b      	ldrh	r3, [r7, #2]
 800aefe:	f7f6 f8ae 	bl	800105e <HAL_DMA_Start_IT>
 800af02:	4603      	mov	r3, r0
 800af04:	2b00      	cmp	r3, #0
 800af06:	d001      	beq.n	800af0c <HAL_TIMEx_PWMN_Start_DMA+0xd0>
        return HAL_ERROR;
 800af08:	2301      	movs	r3, #1
 800af0a:	e051      	b.n	800afb0 <HAL_TIMEx_PWMN_Start_DMA+0x174>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	68fa      	ldr	r2, [r7, #12]
 800af12:	6812      	ldr	r2, [r2, #0]
 800af14:	68d2      	ldr	r2, [r2, #12]
 800af16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800af1a:	60da      	str	r2, [r3, #12]
      break;
 800af1c:	e023      	b.n	800af66 <HAL_TIMEx_PWMN_Start_DMA+0x12a>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af22:	4a25      	ldr	r2, [pc, #148]	; (800afb8 <HAL_TIMEx_PWMN_Start_DMA+0x17c>)
 800af24:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af2a:	4a24      	ldr	r2, [pc, #144]	; (800afbc <HAL_TIMEx_PWMN_Start_DMA+0x180>)
 800af2c:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af32:	4a23      	ldr	r2, [pc, #140]	; (800afc0 <HAL_TIMEx_PWMN_Start_DMA+0x184>)
 800af34:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800af3a:	6879      	ldr	r1, [r7, #4]
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	333c      	adds	r3, #60	; 0x3c
 800af42:	461a      	mov	r2, r3
 800af44:	887b      	ldrh	r3, [r7, #2]
 800af46:	f7f6 f88a 	bl	800105e <HAL_DMA_Start_IT>
 800af4a:	4603      	mov	r3, r0
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d001      	beq.n	800af54 <HAL_TIMEx_PWMN_Start_DMA+0x118>
        return HAL_ERROR;
 800af50:	2301      	movs	r3, #1
 800af52:	e02d      	b.n	800afb0 <HAL_TIMEx_PWMN_Start_DMA+0x174>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	68fa      	ldr	r2, [r7, #12]
 800af5a:	6812      	ldr	r2, [r2, #0]
 800af5c:	68d2      	ldr	r2, [r2, #12]
 800af5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af62:	60da      	str	r2, [r3, #12]
      break;
 800af64:	bf00      	nop
  }

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	2204      	movs	r2, #4
 800af6c:	68b9      	ldr	r1, [r7, #8]
 800af6e:	4618      	mov	r0, r3
 800af70:	f000 fd1f 	bl	800b9b2 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	68fa      	ldr	r2, [r7, #12]
 800af7a:	6812      	ldr	r2, [r2, #0]
 800af7c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800af7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800af82:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	689a      	ldr	r2, [r3, #8]
 800af8a:	4b0e      	ldr	r3, [pc, #56]	; (800afc4 <HAL_TIMEx_PWMN_Start_DMA+0x188>)
 800af8c:	4013      	ands	r3, r2
 800af8e:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	2b06      	cmp	r3, #6
 800af94:	d00b      	beq.n	800afae <HAL_TIMEx_PWMN_Start_DMA+0x172>
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af9c:	d007      	beq.n	800afae <HAL_TIMEx_PWMN_Start_DMA+0x172>
  {
    __HAL_TIM_ENABLE(htim);
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	68fa      	ldr	r2, [r7, #12]
 800afa4:	6812      	ldr	r2, [r2, #0]
 800afa6:	6812      	ldr	r2, [r2, #0]
 800afa8:	f042 0201 	orr.w	r2, r2, #1
 800afac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800afae:	2300      	movs	r3, #0
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3718      	adds	r7, #24
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	08009455 	.word	0x08009455
 800afbc:	080094c5 	.word	0x080094c5
 800afc0:	08009431 	.word	0x08009431
 800afc4:	00010007 	.word	0x00010007

0800afc8 <HAL_TIMEx_PWMN_Stop_DMA>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b082      	sub	sp, #8
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	2b04      	cmp	r3, #4
 800afd6:	d012      	beq.n	800affe <HAL_TIMEx_PWMN_Stop_DMA+0x36>
 800afd8:	2b08      	cmp	r3, #8
 800afda:	d01e      	beq.n	800b01a <HAL_TIMEx_PWMN_Stop_DMA+0x52>
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d000      	beq.n	800afe2 <HAL_TIMEx_PWMN_Stop_DMA+0x1a>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
      break;
    }

    default:
      break;
 800afe0:	e029      	b.n	800b036 <HAL_TIMEx_PWMN_Stop_DMA+0x6e>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	6812      	ldr	r2, [r2, #0]
 800afea:	68d2      	ldr	r2, [r2, #12]
 800afec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800aff0:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7f6 f8cf 	bl	800119a <HAL_DMA_Abort_IT>
      break;
 800affc:	e01b      	b.n	800b036 <HAL_TIMEx_PWMN_Stop_DMA+0x6e>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	6812      	ldr	r2, [r2, #0]
 800b006:	68d2      	ldr	r2, [r2, #12]
 800b008:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b00c:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b012:	4618      	mov	r0, r3
 800b014:	f7f6 f8c1 	bl	800119a <HAL_DMA_Abort_IT>
      break;
 800b018:	e00d      	b.n	800b036 <HAL_TIMEx_PWMN_Stop_DMA+0x6e>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	687a      	ldr	r2, [r7, #4]
 800b020:	6812      	ldr	r2, [r2, #0]
 800b022:	68d2      	ldr	r2, [r2, #12]
 800b024:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b028:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b02e:	4618      	mov	r0, r3
 800b030:	f7f6 f8b3 	bl	800119a <HAL_DMA_Abort_IT>
      break;
 800b034:	bf00      	nop
  }

  /* Disable the complementary PWM output */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	2200      	movs	r2, #0
 800b03c:	6839      	ldr	r1, [r7, #0]
 800b03e:	4618      	mov	r0, r3
 800b040:	f000 fcb7 	bl	800b9b2 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	6a1a      	ldr	r2, [r3, #32]
 800b04a:	f241 1311 	movw	r3, #4369	; 0x1111
 800b04e:	4013      	ands	r3, r2
 800b050:	2b00      	cmp	r3, #0
 800b052:	d10f      	bne.n	800b074 <HAL_TIMEx_PWMN_Stop_DMA+0xac>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	6a1a      	ldr	r2, [r3, #32]
 800b05a:	f240 4344 	movw	r3, #1092	; 0x444
 800b05e:	4013      	ands	r3, r2
 800b060:	2b00      	cmp	r3, #0
 800b062:	d107      	bne.n	800b074 <HAL_TIMEx_PWMN_Stop_DMA+0xac>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	6812      	ldr	r2, [r2, #0]
 800b06c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800b06e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b072:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	6a1a      	ldr	r2, [r3, #32]
 800b07a:	f241 1311 	movw	r3, #4369	; 0x1111
 800b07e:	4013      	ands	r3, r2
 800b080:	2b00      	cmp	r3, #0
 800b082:	d10f      	bne.n	800b0a4 <HAL_TIMEx_PWMN_Stop_DMA+0xdc>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	6a1a      	ldr	r2, [r3, #32]
 800b08a:	f240 4344 	movw	r3, #1092	; 0x444
 800b08e:	4013      	ands	r3, r2
 800b090:	2b00      	cmp	r3, #0
 800b092:	d107      	bne.n	800b0a4 <HAL_TIMEx_PWMN_Stop_DMA+0xdc>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	687a      	ldr	r2, [r7, #4]
 800b09a:	6812      	ldr	r2, [r2, #0]
 800b09c:	6812      	ldr	r2, [r2, #0]
 800b09e:	f022 0201 	bic.w	r2, r2, #1
 800b0a2:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b0ac:	2300      	movs	r3, #0
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3708      	adds	r7, #8
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}

0800b0b6 <HAL_TIMEx_OnePulseN_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800b0b6:	b580      	push	{r7, lr}
 800b0b8:	b082      	sub	sp, #8
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]
 800b0be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Enable the complementary One Pulse output */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2204      	movs	r2, #4
 800b0c6:	6839      	ldr	r1, [r7, #0]
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f000 fc72 	bl	800b9b2 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	6812      	ldr	r2, [r2, #0]
 800b0d6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800b0d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b0dc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 800b0de:	2300      	movs	r3, #0
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3708      	adds	r7, #8
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <HAL_TIMEx_OnePulseN_Stop>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b082      	sub	sp, #8
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Disable the complementary One Pulse output */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	6839      	ldr	r1, [r7, #0]
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f000 fc59 	bl	800b9b2 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	6a1a      	ldr	r2, [r3, #32]
 800b106:	f241 1311 	movw	r3, #4369	; 0x1111
 800b10a:	4013      	ands	r3, r2
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d10f      	bne.n	800b130 <HAL_TIMEx_OnePulseN_Stop+0x48>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	6a1a      	ldr	r2, [r3, #32]
 800b116:	f240 4344 	movw	r3, #1092	; 0x444
 800b11a:	4013      	ands	r3, r2
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d107      	bne.n	800b130 <HAL_TIMEx_OnePulseN_Stop+0x48>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	687a      	ldr	r2, [r7, #4]
 800b126:	6812      	ldr	r2, [r2, #0]
 800b128:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800b12a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b12e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	6a1a      	ldr	r2, [r3, #32]
 800b136:	f241 1311 	movw	r3, #4369	; 0x1111
 800b13a:	4013      	ands	r3, r2
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d10f      	bne.n	800b160 <HAL_TIMEx_OnePulseN_Stop+0x78>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	6a1a      	ldr	r2, [r3, #32]
 800b146:	f240 4344 	movw	r3, #1092	; 0x444
 800b14a:	4013      	ands	r3, r2
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d107      	bne.n	800b160 <HAL_TIMEx_OnePulseN_Stop+0x78>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	6812      	ldr	r2, [r2, #0]
 800b158:	6812      	ldr	r2, [r2, #0]
 800b15a:	f022 0201 	bic.w	r2, r2, #1
 800b15e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b160:	2300      	movs	r3, #0
}
 800b162:	4618      	mov	r0, r3
 800b164:	3708      	adds	r7, #8
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}

0800b16a <HAL_TIMEx_OnePulseN_Start_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800b16a:	b580      	push	{r7, lr}
 800b16c:	b082      	sub	sp, #8
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
 800b172:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	6812      	ldr	r2, [r2, #0]
 800b17c:	68d2      	ldr	r2, [r2, #12]
 800b17e:	f042 0202 	orr.w	r2, r2, #2
 800b182:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	6812      	ldr	r2, [r2, #0]
 800b18c:	68d2      	ldr	r2, [r2, #12]
 800b18e:	f042 0204 	orr.w	r2, r2, #4
 800b192:	60da      	str	r2, [r3, #12]

  /* Enable the complementary One Pulse output */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	2204      	movs	r2, #4
 800b19a:	6839      	ldr	r1, [r7, #0]
 800b19c:	4618      	mov	r0, r3
 800b19e:	f000 fc08 	bl	800b9b2 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	6812      	ldr	r2, [r2, #0]
 800b1aa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800b1ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b1b0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 800b1b2:	2300      	movs	r3, #0
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3708      	adds	r7, #8
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <HAL_TIMEx_OnePulseN_Stop_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b082      	sub	sp, #8
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	687a      	ldr	r2, [r7, #4]
 800b1cc:	6812      	ldr	r2, [r2, #0]
 800b1ce:	68d2      	ldr	r2, [r2, #12]
 800b1d0:	f022 0202 	bic.w	r2, r2, #2
 800b1d4:	60da      	str	r2, [r3, #12]

  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	687a      	ldr	r2, [r7, #4]
 800b1dc:	6812      	ldr	r2, [r2, #0]
 800b1de:	68d2      	ldr	r2, [r2, #12]
 800b1e0:	f022 0204 	bic.w	r2, r2, #4
 800b1e4:	60da      	str	r2, [r3, #12]

  /* Disable the complementary One Pulse output */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	6839      	ldr	r1, [r7, #0]
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f000 fbdf 	bl	800b9b2 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	6a1a      	ldr	r2, [r3, #32]
 800b1fa:	f241 1311 	movw	r3, #4369	; 0x1111
 800b1fe:	4013      	ands	r3, r2
 800b200:	2b00      	cmp	r3, #0
 800b202:	d10f      	bne.n	800b224 <HAL_TIMEx_OnePulseN_Stop_IT+0x68>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	6a1a      	ldr	r2, [r3, #32]
 800b20a:	f240 4344 	movw	r3, #1092	; 0x444
 800b20e:	4013      	ands	r3, r2
 800b210:	2b00      	cmp	r3, #0
 800b212:	d107      	bne.n	800b224 <HAL_TIMEx_OnePulseN_Stop_IT+0x68>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	687a      	ldr	r2, [r7, #4]
 800b21a:	6812      	ldr	r2, [r2, #0]
 800b21c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800b21e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b222:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	6a1a      	ldr	r2, [r3, #32]
 800b22a:	f241 1311 	movw	r3, #4369	; 0x1111
 800b22e:	4013      	ands	r3, r2
 800b230:	2b00      	cmp	r3, #0
 800b232:	d10f      	bne.n	800b254 <HAL_TIMEx_OnePulseN_Stop_IT+0x98>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	6a1a      	ldr	r2, [r3, #32]
 800b23a:	f240 4344 	movw	r3, #1092	; 0x444
 800b23e:	4013      	ands	r3, r2
 800b240:	2b00      	cmp	r3, #0
 800b242:	d107      	bne.n	800b254 <HAL_TIMEx_OnePulseN_Stop_IT+0x98>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	6812      	ldr	r2, [r2, #0]
 800b24c:	6812      	ldr	r2, [r2, #0]
 800b24e:	f022 0201 	bic.w	r2, r2, #1
 800b252:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b254:	2300      	movs	r3, #0
}
 800b256:	4618      	mov	r0, r3
 800b258:	3708      	adds	r7, #8
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}

0800b25e <HAL_TIMEx_ConfigCommutEvent>:
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent(TIM_HandleTypeDef *htim, uint32_t  InputTrigger,
                                              uint32_t  CommutationSource)
{
 800b25e:	b480      	push	{r7}
 800b260:	b085      	sub	sp, #20
 800b262:	af00      	add	r7, sp, #0
 800b264:	60f8      	str	r0, [r7, #12]
 800b266:	60b9      	str	r1, [r7, #8]
 800b268:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b270:	2b01      	cmp	r3, #1
 800b272:	d101      	bne.n	800b278 <HAL_TIMEx_ConfigCommutEvent+0x1a>
 800b274:	2302      	movs	r3, #2
 800b276:	e04c      	b.n	800b312 <HAL_TIMEx_ConfigCommutEvent+0xb4>
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2201      	movs	r2, #1
 800b27c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d008      	beq.n	800b298 <HAL_TIMEx_ConfigCommutEvent+0x3a>
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	2b10      	cmp	r3, #16
 800b28a:	d005      	beq.n	800b298 <HAL_TIMEx_ConfigCommutEvent+0x3a>
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	2b20      	cmp	r3, #32
 800b290:	d002      	beq.n	800b298 <HAL_TIMEx_ConfigCommutEvent+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	2b30      	cmp	r3, #48	; 0x30
 800b296:	d10f      	bne.n	800b2b8 <HAL_TIMEx_ConfigCommutEvent+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	68fa      	ldr	r2, [r7, #12]
 800b29e:	6812      	ldr	r2, [r2, #0]
 800b2a0:	6892      	ldr	r2, [r2, #8]
 800b2a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b2a6:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	68fa      	ldr	r2, [r7, #12]
 800b2ae:	6812      	ldr	r2, [r2, #0]
 800b2b0:	6891      	ldr	r1, [r2, #8]
 800b2b2:	68ba      	ldr	r2, [r7, #8]
 800b2b4:	430a      	orrs	r2, r1
 800b2b6:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	68fa      	ldr	r2, [r7, #12]
 800b2be:	6812      	ldr	r2, [r2, #0]
 800b2c0:	6852      	ldr	r2, [r2, #4]
 800b2c2:	f042 0201 	orr.w	r2, r2, #1
 800b2c6:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	68fa      	ldr	r2, [r7, #12]
 800b2ce:	6812      	ldr	r2, [r2, #0]
 800b2d0:	6852      	ldr	r2, [r2, #4]
 800b2d2:	f022 0204 	bic.w	r2, r2, #4
 800b2d6:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	68fa      	ldr	r2, [r7, #12]
 800b2de:	6812      	ldr	r2, [r2, #0]
 800b2e0:	6851      	ldr	r1, [r2, #4]
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	430a      	orrs	r2, r1
 800b2e6:	605a      	str	r2, [r3, #4]

  /* Disable Commutation Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_COM);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	68fa      	ldr	r2, [r7, #12]
 800b2ee:	6812      	ldr	r2, [r2, #0]
 800b2f0:	68d2      	ldr	r2, [r2, #12]
 800b2f2:	f022 0220 	bic.w	r2, r2, #32
 800b2f6:	60da      	str	r2, [r3, #12]

  /* Disable Commutation DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	68fa      	ldr	r2, [r7, #12]
 800b2fe:	6812      	ldr	r2, [r2, #0]
 800b300:	68d2      	ldr	r2, [r2, #12]
 800b302:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b306:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	2200      	movs	r2, #0
 800b30c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b310:	2300      	movs	r3, #0
}
 800b312:	4618      	mov	r0, r3
 800b314:	3714      	adds	r7, #20
 800b316:	46bd      	mov	sp, r7
 800b318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31c:	4770      	bx	lr

0800b31e <HAL_TIMEx_ConfigCommutEvent_IT>:
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger,
                                                 uint32_t  CommutationSource)
{
 800b31e:	b480      	push	{r7}
 800b320:	b085      	sub	sp, #20
 800b322:	af00      	add	r7, sp, #0
 800b324:	60f8      	str	r0, [r7, #12]
 800b326:	60b9      	str	r1, [r7, #8]
 800b328:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b330:	2b01      	cmp	r3, #1
 800b332:	d101      	bne.n	800b338 <HAL_TIMEx_ConfigCommutEvent_IT+0x1a>
 800b334:	2302      	movs	r3, #2
 800b336:	e04c      	b.n	800b3d2 <HAL_TIMEx_ConfigCommutEvent_IT+0xb4>
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	2201      	movs	r2, #1
 800b33c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d008      	beq.n	800b358 <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	2b10      	cmp	r3, #16
 800b34a:	d005      	beq.n	800b358 <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	2b20      	cmp	r3, #32
 800b350:	d002      	beq.n	800b358 <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	2b30      	cmp	r3, #48	; 0x30
 800b356:	d10f      	bne.n	800b378 <HAL_TIMEx_ConfigCommutEvent_IT+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	68fa      	ldr	r2, [r7, #12]
 800b35e:	6812      	ldr	r2, [r2, #0]
 800b360:	6892      	ldr	r2, [r2, #8]
 800b362:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b366:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	68fa      	ldr	r2, [r7, #12]
 800b36e:	6812      	ldr	r2, [r2, #0]
 800b370:	6891      	ldr	r1, [r2, #8]
 800b372:	68ba      	ldr	r2, [r7, #8]
 800b374:	430a      	orrs	r2, r1
 800b376:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	68fa      	ldr	r2, [r7, #12]
 800b37e:	6812      	ldr	r2, [r2, #0]
 800b380:	6852      	ldr	r2, [r2, #4]
 800b382:	f042 0201 	orr.w	r2, r2, #1
 800b386:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	68fa      	ldr	r2, [r7, #12]
 800b38e:	6812      	ldr	r2, [r2, #0]
 800b390:	6852      	ldr	r2, [r2, #4]
 800b392:	f022 0204 	bic.w	r2, r2, #4
 800b396:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	68fa      	ldr	r2, [r7, #12]
 800b39e:	6812      	ldr	r2, [r2, #0]
 800b3a0:	6851      	ldr	r1, [r2, #4]
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	430a      	orrs	r2, r1
 800b3a6:	605a      	str	r2, [r3, #4]

  /* Disable Commutation DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	68fa      	ldr	r2, [r7, #12]
 800b3ae:	6812      	ldr	r2, [r2, #0]
 800b3b0:	68d2      	ldr	r2, [r2, #12]
 800b3b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b3b6:	60da      	str	r2, [r3, #12]

  /* Enable the Commutation Interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	68fa      	ldr	r2, [r7, #12]
 800b3be:	6812      	ldr	r2, [r2, #0]
 800b3c0:	68d2      	ldr	r2, [r2, #12]
 800b3c2:	f042 0220 	orr.w	r2, r2, #32
 800b3c6:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b3d0:	2300      	movs	r3, #0
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3714      	adds	r7, #20
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr

0800b3de <HAL_TIMEx_ConfigCommutEvent_DMA>:
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent_DMA(TIM_HandleTypeDef *htim, uint32_t  InputTrigger,
                                                  uint32_t  CommutationSource)
{
 800b3de:	b480      	push	{r7}
 800b3e0:	b085      	sub	sp, #20
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	60f8      	str	r0, [r7, #12]
 800b3e6:	60b9      	str	r1, [r7, #8]
 800b3e8:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3f0:	2b01      	cmp	r3, #1
 800b3f2:	d101      	bne.n	800b3f8 <HAL_TIMEx_ConfigCommutEvent_DMA+0x1a>
 800b3f4:	2302      	movs	r3, #2
 800b3f6:	e058      	b.n	800b4aa <HAL_TIMEx_ConfigCommutEvent_DMA+0xcc>
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d008      	beq.n	800b418 <HAL_TIMEx_ConfigCommutEvent_DMA+0x3a>
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	2b10      	cmp	r3, #16
 800b40a:	d005      	beq.n	800b418 <HAL_TIMEx_ConfigCommutEvent_DMA+0x3a>
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	2b20      	cmp	r3, #32
 800b410:	d002      	beq.n	800b418 <HAL_TIMEx_ConfigCommutEvent_DMA+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	2b30      	cmp	r3, #48	; 0x30
 800b416:	d10f      	bne.n	800b438 <HAL_TIMEx_ConfigCommutEvent_DMA+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	68fa      	ldr	r2, [r7, #12]
 800b41e:	6812      	ldr	r2, [r2, #0]
 800b420:	6892      	ldr	r2, [r2, #8]
 800b422:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b426:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	68fa      	ldr	r2, [r7, #12]
 800b42e:	6812      	ldr	r2, [r2, #0]
 800b430:	6891      	ldr	r1, [r2, #8]
 800b432:	68ba      	ldr	r2, [r7, #8]
 800b434:	430a      	orrs	r2, r1
 800b436:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	68fa      	ldr	r2, [r7, #12]
 800b43e:	6812      	ldr	r2, [r2, #0]
 800b440:	6852      	ldr	r2, [r2, #4]
 800b442:	f042 0201 	orr.w	r2, r2, #1
 800b446:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	68fa      	ldr	r2, [r7, #12]
 800b44e:	6812      	ldr	r2, [r2, #0]
 800b450:	6852      	ldr	r2, [r2, #4]
 800b452:	f022 0204 	bic.w	r2, r2, #4
 800b456:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	68fa      	ldr	r2, [r7, #12]
 800b45e:	6812      	ldr	r2, [r2, #0]
 800b460:	6851      	ldr	r1, [r2, #4]
 800b462:	687a      	ldr	r2, [r7, #4]
 800b464:	430a      	orrs	r2, r1
 800b466:	605a      	str	r2, [r3, #4]

  /* Enable the Commutation DMA Request */
  /* Set the DMA Commutation Callback */
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b46c:	4a12      	ldr	r2, [pc, #72]	; (800b4b8 <HAL_TIMEx_ConfigCommutEvent_DMA+0xda>)
 800b46e:	62da      	str	r2, [r3, #44]	; 0x2c
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback = TIMEx_DMACommutationHalfCplt;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b474:	4a11      	ldr	r2, [pc, #68]	; (800b4bc <HAL_TIMEx_ConfigCommutEvent_DMA+0xde>)
 800b476:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b47c:	4a10      	ldr	r2, [pc, #64]	; (800b4c0 <HAL_TIMEx_ConfigCommutEvent_DMA+0xe2>)
 800b47e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable Commutation Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_COM);
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	68fa      	ldr	r2, [r7, #12]
 800b486:	6812      	ldr	r2, [r2, #0]
 800b488:	68d2      	ldr	r2, [r2, #12]
 800b48a:	f022 0220 	bic.w	r2, r2, #32
 800b48e:	60da      	str	r2, [r3, #12]

  /* Enable the Commutation DMA Request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	68fa      	ldr	r2, [r7, #12]
 800b496:	6812      	ldr	r2, [r2, #0]
 800b498:	68d2      	ldr	r2, [r2, #12]
 800b49a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b49e:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b4a8:	2300      	movs	r3, #0
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3714      	adds	r7, #20
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr
 800b4b6:	bf00      	nop
 800b4b8:	0800b96b 	.word	0x0800b96b
 800b4bc:	0800b98f 	.word	0x0800b98f
 800b4c0:	08009431 	.word	0x08009431

0800b4c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b085      	sub	sp, #20
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4d4:	2b01      	cmp	r3, #1
 800b4d6:	d101      	bne.n	800b4dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b4d8:	2302      	movs	r3, #2
 800b4da:	e045      	b.n	800b568 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2201      	movs	r2, #1
 800b4e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2202      	movs	r2, #2
 800b4e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	689b      	ldr	r3, [r3, #8]
 800b4fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4a1c      	ldr	r2, [pc, #112]	; (800b574 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d004      	beq.n	800b510 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4a1b      	ldr	r2, [pc, #108]	; (800b578 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d108      	bne.n	800b522 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b516:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	68fa      	ldr	r2, [r7, #12]
 800b51e:	4313      	orrs	r3, r2
 800b520:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b528:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	68fa      	ldr	r2, [r7, #12]
 800b530:	4313      	orrs	r3, r2
 800b532:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b53a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	689b      	ldr	r3, [r3, #8]
 800b540:	68ba      	ldr	r2, [r7, #8]
 800b542:	4313      	orrs	r3, r2
 800b544:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	68fa      	ldr	r2, [r7, #12]
 800b54c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	68ba      	ldr	r2, [r7, #8]
 800b554:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2201      	movs	r2, #1
 800b55a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2200      	movs	r2, #0
 800b562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b566:	2300      	movs	r3, #0
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3714      	adds	r7, #20
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr
 800b574:	40012c00 	.word	0x40012c00
 800b578:	40013400 	.word	0x40013400

0800b57c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b57c:	b480      	push	{r7}
 800b57e:	b085      	sub	sp, #20
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
 800b584:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b586:	2300      	movs	r3, #0
 800b588:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b590:	2b01      	cmp	r3, #1
 800b592:	d101      	bne.n	800b598 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b594:	2302      	movs	r3, #2
 800b596:	e065      	b.n	800b664 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2201      	movs	r2, #1
 800b59c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	68db      	ldr	r3, [r3, #12]
 800b5aa:	4313      	orrs	r3, r2
 800b5ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	689b      	ldr	r3, [r3, #8]
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	4313      	orrs	r3, r2
 800b5c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	4313      	orrs	r3, r2
 800b5d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	691b      	ldr	r3, [r3, #16]
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	695b      	ldr	r3, [r3, #20]
 800b5f0:	4313      	orrs	r3, r2
 800b5f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5fe:	4313      	orrs	r3, r2
 800b600:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	699b      	ldr	r3, [r3, #24]
 800b60c:	041b      	lsls	r3, r3, #16
 800b60e:	4313      	orrs	r3, r2
 800b610:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	4a16      	ldr	r2, [pc, #88]	; (800b670 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d004      	beq.n	800b626 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4a14      	ldr	r2, [pc, #80]	; (800b674 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d115      	bne.n	800b652 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b630:	051b      	lsls	r3, r3, #20
 800b632:	4313      	orrs	r3, r2
 800b634:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	69db      	ldr	r3, [r3, #28]
 800b640:	4313      	orrs	r3, r2
 800b642:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	6a1b      	ldr	r3, [r3, #32]
 800b64e:	4313      	orrs	r3, r2
 800b650:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	68fa      	ldr	r2, [r7, #12]
 800b658:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2200      	movs	r2, #0
 800b65e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b662:	2300      	movs	r3, #0
}
 800b664:	4618      	mov	r0, r3
 800b666:	3714      	adds	r7, #20
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr
 800b670:	40012c00 	.word	0x40012c00
 800b674:	40013400 	.word	0x40013400

0800b678 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800b678:	b480      	push	{r7}
 800b67a:	b08b      	sub	sp, #44	; 0x2c
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	60f8      	str	r0, [r7, #12]
 800b680:	60b9      	str	r1, [r7, #8]
 800b682:	607a      	str	r2, [r7, #4]
  uint32_t tmporx;
  uint32_t bkin_enable_mask = 0U;
 800b684:	2300      	movs	r3, #0
 800b686:	623b      	str	r3, [r7, #32]
  uint32_t bkin_polarity_mask = 0U;
 800b688:	2300      	movs	r3, #0
 800b68a:	61fb      	str	r3, [r7, #28]
  uint32_t bkin_enable_bitpos = 0U;
 800b68c:	2300      	movs	r3, #0
 800b68e:	61bb      	str	r3, [r7, #24]
  uint32_t bkin_polarity_bitpos = 0U;
 800b690:	2300      	movs	r3, #0
 800b692:	617b      	str	r3, [r7, #20]
#else
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
#endif /* DFSDM1_Channel0 */

  /* Check input state */
  __HAL_LOCK(htim);
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d101      	bne.n	800b6a2 <HAL_TIMEx_ConfigBreakInput+0x2a>
 800b69e:	2302      	movs	r3, #2
 800b6a0:	e09e      	b.n	800b7e0 <HAL_TIMEx_ConfigBreakInput+0x168>
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	3b01      	subs	r3, #1
 800b6b0:	2b07      	cmp	r3, #7
 800b6b2:	d837      	bhi.n	800b724 <HAL_TIMEx_ConfigBreakInput+0xac>
 800b6b4:	a201      	add	r2, pc, #4	; (adr r2, 800b6bc <HAL_TIMEx_ConfigBreakInput+0x44>)
 800b6b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6ba:	bf00      	nop
 800b6bc:	0800b6dd 	.word	0x0800b6dd
 800b6c0:	0800b6f1 	.word	0x0800b6f1
 800b6c4:	0800b725 	.word	0x0800b725
 800b6c8:	0800b705 	.word	0x0800b705
 800b6cc:	0800b725 	.word	0x0800b725
 800b6d0:	0800b725 	.word	0x0800b725
 800b6d4:	0800b725 	.word	0x0800b725
 800b6d8:	0800b719 	.word	0x0800b719
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_OR2_BKINE;
 800b6dc:	2301      	movs	r3, #1
 800b6de:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_OR2_BKINE_Pos;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_OR2_BKINP;
 800b6e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6e8:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_OR2_BKINP_Pos;
 800b6ea:	2309      	movs	r3, #9
 800b6ec:	617b      	str	r3, [r7, #20]
      break;
 800b6ee:	e01a      	b.n	800b726 <HAL_TIMEx_ConfigBreakInput+0xae>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP1E;
 800b6f0:	2302      	movs	r3, #2
 800b6f2:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_OR2_BKCMP1E_Pos;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_OR2_BKCMP1P;
 800b6f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6fc:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP1P_Pos;
 800b6fe:	230a      	movs	r3, #10
 800b700:	617b      	str	r3, [r7, #20]
      break;
 800b702:	e010      	b.n	800b726 <HAL_TIMEx_ConfigBreakInput+0xae>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP2E;
 800b704:	2304      	movs	r3, #4
 800b706:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_OR2_BKCMP2E_Pos;
 800b708:	2302      	movs	r3, #2
 800b70a:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_OR2_BKCMP2P;
 800b70c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b710:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP2P_Pos;
 800b712:	230b      	movs	r3, #11
 800b714:	617b      	str	r3, [r7, #20]
      break;
 800b716:	e006      	b.n	800b726 <HAL_TIMEx_ConfigBreakInput+0xae>
    }
#if defined(DFSDM1_Channel0)
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_OR2_BKDF1BK0E;
 800b718:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b71c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = 8U;
 800b71e:	2308      	movs	r3, #8
 800b720:	61bb      	str	r3, [r7, #24]
      break;
 800b722:	e000      	b.n	800b726 <HAL_TIMEx_ConfigBreakInput+0xae>
    }
#endif /* DFSDM1_Channel0 */

    default:
      break;
 800b724:	bf00      	nop
  }

  switch (BreakInput)
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	2b01      	cmp	r3, #1
 800b72a:	d002      	beq.n	800b732 <HAL_TIMEx_ConfigBreakInput+0xba>
 800b72c:	2b02      	cmp	r3, #2
 800b72e:	d029      	beq.n	800b784 <HAL_TIMEx_ConfigBreakInput+0x10c>
      /* Set TIMx_OR3 */
      htim->Instance->OR3 = tmporx;
      break;
    }
    default:
      break;
 800b730:	e051      	b.n	800b7d6 <HAL_TIMEx_ConfigBreakInput+0x15e>
      tmporx = htim->Instance->OR2;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b738:	627b      	str	r3, [r7, #36]	; 0x24
      tmporx &= ~bkin_enable_mask;
 800b73a:	6a3b      	ldr	r3, [r7, #32]
 800b73c:	43db      	mvns	r3, r3
 800b73e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b740:	4013      	ands	r3, r2
 800b742:	627b      	str	r3, [r7, #36]	; 0x24
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	685a      	ldr	r2, [r3, #4]
 800b748:	69bb      	ldr	r3, [r7, #24]
 800b74a:	409a      	lsls	r2, r3
 800b74c:	6a3b      	ldr	r3, [r7, #32]
 800b74e:	4013      	ands	r3, r2
 800b750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b752:	4313      	orrs	r3, r2
 800b754:	627b      	str	r3, [r7, #36]	; 0x24
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	2b08      	cmp	r3, #8
 800b75c:	d00d      	beq.n	800b77a <HAL_TIMEx_ConfigBreakInput+0x102>
        tmporx &= ~bkin_polarity_mask;
 800b75e:	69fb      	ldr	r3, [r7, #28]
 800b760:	43db      	mvns	r3, r3
 800b762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b764:	4013      	ands	r3, r2
 800b766:	627b      	str	r3, [r7, #36]	; 0x24
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	689a      	ldr	r2, [r3, #8]
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	409a      	lsls	r2, r3
 800b770:	69fb      	ldr	r3, [r7, #28]
 800b772:	4013      	ands	r3, r2
 800b774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b776:	4313      	orrs	r3, r2
 800b778:	627b      	str	r3, [r7, #36]	; 0x24
      htim->Instance->OR2 = tmporx;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b780:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800b782:	e028      	b.n	800b7d6 <HAL_TIMEx_ConfigBreakInput+0x15e>
      tmporx = htim->Instance->OR3;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b78a:	627b      	str	r3, [r7, #36]	; 0x24
      tmporx &= ~bkin_enable_mask;
 800b78c:	6a3b      	ldr	r3, [r7, #32]
 800b78e:	43db      	mvns	r3, r3
 800b790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b792:	4013      	ands	r3, r2
 800b794:	627b      	str	r3, [r7, #36]	; 0x24
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	685a      	ldr	r2, [r3, #4]
 800b79a:	69bb      	ldr	r3, [r7, #24]
 800b79c:	409a      	lsls	r2, r3
 800b79e:	6a3b      	ldr	r3, [r7, #32]
 800b7a0:	4013      	ands	r3, r2
 800b7a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7a4:	4313      	orrs	r3, r2
 800b7a6:	627b      	str	r3, [r7, #36]	; 0x24
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	2b08      	cmp	r3, #8
 800b7ae:	d00d      	beq.n	800b7cc <HAL_TIMEx_ConfigBreakInput+0x154>
        tmporx &= ~bkin_polarity_mask;
 800b7b0:	69fb      	ldr	r3, [r7, #28]
 800b7b2:	43db      	mvns	r3, r3
 800b7b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7b6:	4013      	ands	r3, r2
 800b7b8:	627b      	str	r3, [r7, #36]	; 0x24
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	689a      	ldr	r2, [r3, #8]
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	409a      	lsls	r2, r3
 800b7c2:	69fb      	ldr	r3, [r7, #28]
 800b7c4:	4013      	ands	r3, r2
 800b7c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	627b      	str	r3, [r7, #36]	; 0x24
      htim->Instance->OR3 = tmporx;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7d2:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800b7d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b7de:	2300      	movs	r3, #0
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	372c      	adds	r7, #44	; 0x2c
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr

0800b7ec <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b085      	sub	sp, #20
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpor1 = 0U;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpor2 = 0U;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	60bb      	str	r3, [r7, #8]

  __HAL_LOCK(htim);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b804:	2b01      	cmp	r3, #1
 800b806:	d101      	bne.n	800b80c <HAL_TIMEx_RemapConfig+0x20>
 800b808:	2302      	movs	r3, #2
 800b80a:	e038      	b.n	800b87e <HAL_TIMEx_RemapConfig+0x92>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2201      	movs	r2, #1
 800b810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Check parameters */
  assert_param(IS_TIM_REMAP_INSTANCE(htim->Instance));
  assert_param(IS_TIM_REMAP(Remap));

  /* Set ETR_SEL bit field (if required) */
  if (IS_TIM_ETRSEL_INSTANCE(htim->Instance))
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4a1c      	ldr	r2, [pc, #112]	; (800b88c <HAL_TIMEx_RemapConfig+0xa0>)
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d00e      	beq.n	800b83c <HAL_TIMEx_RemapConfig+0x50>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b826:	d009      	beq.n	800b83c <HAL_TIMEx_RemapConfig+0x50>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	4a18      	ldr	r2, [pc, #96]	; (800b890 <HAL_TIMEx_RemapConfig+0xa4>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d004      	beq.n	800b83c <HAL_TIMEx_RemapConfig+0x50>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4a17      	ldr	r2, [pc, #92]	; (800b894 <HAL_TIMEx_RemapConfig+0xa8>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d111      	bne.n	800b860 <HAL_TIMEx_RemapConfig+0x74>
  {
    tmpor2 = htim->Instance->OR2;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b842:	60bb      	str	r3, [r7, #8]
    tmpor2 &= ~TIM1_OR2_ETRSEL_Msk;
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	f423 33e0 	bic.w	r3, r3, #114688	; 0x1c000
 800b84a:	60bb      	str	r3, [r7, #8]
    tmpor2 |= (Remap & TIM1_OR2_ETRSEL_Msk);
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	f403 33e0 	and.w	r3, r3, #114688	; 0x1c000
 800b852:	68ba      	ldr	r2, [r7, #8]
 800b854:	4313      	orrs	r3, r2
 800b856:	60bb      	str	r3, [r7, #8]

    /* Set TIMx_OR2 */
    htim->Instance->OR2 = tmpor2;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	68ba      	ldr	r2, [r7, #8]
 800b85e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Set other remapping capabilities */
  tmpor1 = Remap;
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	60fb      	str	r3, [r7, #12]
  tmpor1 &= ~TIM1_OR2_ETRSEL_Msk;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f423 33e0 	bic.w	r3, r3, #114688	; 0x1c000
 800b86a:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_OR1 */
  htim->Instance->OR1 = tmpor1;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	68fa      	ldr	r2, [r7, #12]
 800b872:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2200      	movs	r2, #0
 800b878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b87c:	2300      	movs	r3, #0
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3714      	adds	r7, #20
 800b882:	46bd      	mov	sp, r7
 800b884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b888:	4770      	bx	lr
 800b88a:	bf00      	nop
 800b88c:	40012c00 	.word	0x40012c00
 800b890:	40000400 	.word	0x40000400
 800b894:	40013400 	.word	0x40013400

0800b898 <HAL_TIMEx_GroupChannel5>:
  *         TIM_GROUPCH5_OC2REFC: OC2REFC is the logical AND of OC2REFC and OC5REF
  *         TIM_GROUPCH5_OC3REFC: OC3REFC is the logical AND of OC3REFC and OC5REF
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_GroupChannel5(TIM_HandleTypeDef *htim, uint32_t Channels)
{
 800b898:	b480      	push	{r7}
 800b89a:	b083      	sub	sp, #12
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_TIM_COMBINED3PHASEPWM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_GROUPCH5(Channels));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8a8:	2b01      	cmp	r3, #1
 800b8aa:	d101      	bne.n	800b8b0 <HAL_TIMEx_GroupChannel5+0x18>
 800b8ac:	2302      	movs	r3, #2
 800b8ae:	e020      	b.n	800b8f2 <HAL_TIMEx_GroupChannel5+0x5a>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2202      	movs	r2, #2
 800b8bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Clear GC5Cx bit fields */
  htim->Instance->CCR5 &= ~(TIM_CCR5_GC5C3 | TIM_CCR5_GC5C2 | TIM_CCR5_GC5C1);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	687a      	ldr	r2, [r7, #4]
 800b8c6:	6812      	ldr	r2, [r2, #0]
 800b8c8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b8ca:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800b8ce:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set GC5Cx bit fields */
  htim->Instance->CCR5 |= Channels;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	687a      	ldr	r2, [r7, #4]
 800b8d6:	6812      	ldr	r2, [r2, #0]
 800b8d8:	6d91      	ldr	r1, [r2, #88]	; 0x58
 800b8da:	683a      	ldr	r2, [r7, #0]
 800b8dc:	430a      	orrs	r2, r1
 800b8de:	659a      	str	r2, [r3, #88]	; 0x58

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b8f0:	2300      	movs	r3, #0
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	370c      	adds	r7, #12
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fc:	4770      	bx	lr

0800b8fe <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b8fe:	b480      	push	{r7}
 800b900:	b083      	sub	sp, #12
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b906:	bf00      	nop
 800b908:	370c      	adds	r7, #12
 800b90a:	46bd      	mov	sp, r7
 800b90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b910:	4770      	bx	lr

0800b912 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b912:	b480      	push	{r7}
 800b914:	b083      	sub	sp, #12
 800b916:	af00      	add	r7, sp, #0
 800b918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800b91a:	bf00      	nop
 800b91c:	370c      	adds	r7, #12
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr

0800b926 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b926:	b480      	push	{r7}
 800b928:	b083      	sub	sp, #12
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b92e:	bf00      	nop
 800b930:	370c      	adds	r7, #12
 800b932:	46bd      	mov	sp, r7
 800b934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b938:	4770      	bx	lr

0800b93a <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b93a:	b480      	push	{r7}
 800b93c:	b083      	sub	sp, #12
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b942:	bf00      	nop
 800b944:	370c      	adds	r7, #12
 800b946:	46bd      	mov	sp, r7
 800b948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94c:	4770      	bx	lr

0800b94e <HAL_TIMEx_HallSensor_GetState>:
  * @brief  Return the TIM Hall Sensor interface handle state.
  * @param  htim TIM Hall Sensor handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIMEx_HallSensor_GetState(TIM_HandleTypeDef *htim)
{
 800b94e:	b480      	push	{r7}
 800b950:	b083      	sub	sp, #12
 800b952:	af00      	add	r7, sp, #0
 800b954:	6078      	str	r0, [r7, #4]
  return htim->State;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b95c:	b2db      	uxtb	r3, r3
}
 800b95e:	4618      	mov	r0, r3
 800b960:	370c      	adds	r7, #12
 800b962:	46bd      	mov	sp, r7
 800b964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b968:	4770      	bx	lr

0800b96a <TIMEx_DMACommutationCplt>:
  * @brief  TIM DMA Commutation callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIMEx_DMACommutationCplt(DMA_HandleTypeDef *hdma)
{
 800b96a:	b580      	push	{r7, lr}
 800b96c:	b084      	sub	sp, #16
 800b96e:	af00      	add	r7, sp, #0
 800b970:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b976:	60fb      	str	r3, [r7, #12]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2201      	movs	r2, #1
 800b97c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->CommutationCallback(htim);
#else
  HAL_TIMEx_CommutCallback(htim);
 800b980:	68f8      	ldr	r0, [r7, #12]
 800b982:	f7ff ffbc 	bl	800b8fe <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 800b986:	bf00      	nop
 800b988:	3710      	adds	r7, #16
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}

0800b98e <TIMEx_DMACommutationHalfCplt>:
  * @brief  TIM DMA Commutation half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIMEx_DMACommutationHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b98e:	b580      	push	{r7, lr}
 800b990:	b084      	sub	sp, #16
 800b992:	af00      	add	r7, sp, #0
 800b994:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b99a:	60fb      	str	r3, [r7, #12]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	2201      	movs	r2, #1
 800b9a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->CommutationHalfCpltCallback(htim);
#else
  HAL_TIMEx_CommutHalfCpltCallback(htim);
 800b9a4:	68f8      	ldr	r0, [r7, #12]
 800b9a6:	f7ff ffb4 	bl	800b912 <HAL_TIMEx_CommutHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 800b9aa:	bf00      	nop
 800b9ac:	3710      	adds	r7, #16
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}

0800b9b2 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800b9b2:	b480      	push	{r7}
 800b9b4:	b087      	sub	sp, #28
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	60f8      	str	r0, [r7, #12]
 800b9ba:	60b9      	str	r1, [r7, #8]
 800b9bc:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	f003 031f 	and.w	r3, r3, #31
 800b9c4:	2204      	movs	r2, #4
 800b9c6:	fa02 f303 	lsl.w	r3, r2, r3
 800b9ca:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	6a1a      	ldr	r2, [r3, #32]
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	43db      	mvns	r3, r3
 800b9d4:	401a      	ands	r2, r3
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	6a1a      	ldr	r2, [r3, #32]
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	f003 031f 	and.w	r3, r3, #31
 800b9e4:	6879      	ldr	r1, [r7, #4]
 800b9e6:	fa01 f303 	lsl.w	r3, r1, r3
 800b9ea:	431a      	orrs	r2, r3
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	621a      	str	r2, [r3, #32]
}
 800b9f0:	bf00      	nop
 800b9f2:	371c      	adds	r7, #28
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr

0800b9fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b082      	sub	sp, #8
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d101      	bne.n	800ba0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	e040      	b.n	800ba90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d106      	bne.n	800ba24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f003 f996 	bl	800ed50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2224      	movs	r2, #36	; 0x24
 800ba28:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	687a      	ldr	r2, [r7, #4]
 800ba30:	6812      	ldr	r2, [r2, #0]
 800ba32:	6812      	ldr	r2, [r2, #0]
 800ba34:	f022 0201 	bic.w	r2, r2, #1
 800ba38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f001 fb39 	bl	800d0b2 <UART_SetConfig>
 800ba40:	4603      	mov	r3, r0
 800ba42:	2b01      	cmp	r3, #1
 800ba44:	d101      	bne.n	800ba4a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ba46:	2301      	movs	r3, #1
 800ba48:	e022      	b.n	800ba90 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d002      	beq.n	800ba58 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f001 fe68 	bl	800d728 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	687a      	ldr	r2, [r7, #4]
 800ba5e:	6812      	ldr	r2, [r2, #0]
 800ba60:	6852      	ldr	r2, [r2, #4]
 800ba62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ba66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	687a      	ldr	r2, [r7, #4]
 800ba6e:	6812      	ldr	r2, [r2, #0]
 800ba70:	6892      	ldr	r2, [r2, #8]
 800ba72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ba76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	687a      	ldr	r2, [r7, #4]
 800ba7e:	6812      	ldr	r2, [r2, #0]
 800ba80:	6812      	ldr	r2, [r2, #0]
 800ba82:	f042 0201 	orr.w	r2, r2, #1
 800ba86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f001 feef 	bl	800d86c <UART_CheckIdleState>
 800ba8e:	4603      	mov	r3, r0
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3708      	adds	r7, #8
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}

0800ba98 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d101      	bne.n	800baaa <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800baa6:	2301      	movs	r3, #1
 800baa8:	e048      	b.n	800bb3c <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d106      	bne.n	800bac0 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2200      	movs	r2, #0
 800bab6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f003 f948 	bl	800ed50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2224      	movs	r2, #36	; 0x24
 800bac4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	687a      	ldr	r2, [r7, #4]
 800bacc:	6812      	ldr	r2, [r2, #0]
 800bace:	6812      	ldr	r2, [r2, #0]
 800bad0:	f022 0201 	bic.w	r2, r2, #1
 800bad4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f001 faeb 	bl	800d0b2 <UART_SetConfig>
 800badc:	4603      	mov	r3, r0
 800bade:	2b01      	cmp	r3, #1
 800bae0:	d101      	bne.n	800bae6 <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 800bae2:	2301      	movs	r3, #1
 800bae4:	e02a      	b.n	800bb3c <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baea:	2b00      	cmp	r3, #0
 800baec:	d002      	beq.n	800baf4 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f001 fe1a 	bl	800d728 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	6812      	ldr	r2, [r2, #0]
 800bafc:	6852      	ldr	r2, [r2, #4]
 800bafe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bb02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	687a      	ldr	r2, [r7, #4]
 800bb0a:	6812      	ldr	r2, [r2, #0]
 800bb0c:	6892      	ldr	r2, [r2, #8]
 800bb0e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800bb12:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	6812      	ldr	r2, [r2, #0]
 800bb1c:	6892      	ldr	r2, [r2, #8]
 800bb1e:	f042 0208 	orr.w	r2, r2, #8
 800bb22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	687a      	ldr	r2, [r7, #4]
 800bb2a:	6812      	ldr	r2, [r2, #0]
 800bb2c:	6812      	ldr	r2, [r2, #0]
 800bb2e:	f042 0201 	orr.w	r2, r2, #1
 800bb32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f001 fe99 	bl	800d86c <UART_CheckIdleState>
 800bb3a:	4603      	mov	r3, r0
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3708      	adds	r7, #8
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <HAL_LIN_Init>:
  *          @arg @ref UART_LINBREAKDETECTLENGTH_10B 10-bit break detection
  *          @arg @ref UART_LINBREAKDETECTLENGTH_11B 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b082      	sub	sp, #8
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
 800bb4c:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d101      	bne.n	800bb58 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 800bb54:	2301      	movs	r3, #1
 800bb56:	e05f      	b.n	800bc18 <HAL_LIN_Init+0xd4>
  assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));

  /* LIN mode limited to 16-bit oversampling only */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	69db      	ldr	r3, [r3, #28]
 800bb5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb60:	d101      	bne.n	800bb66 <HAL_LIN_Init+0x22>
  {
    return HAL_ERROR;
 800bb62:	2301      	movs	r3, #1
 800bb64:	e058      	b.n	800bc18 <HAL_LIN_Init+0xd4>
  }
  /* LIN mode limited to 8-bit data length */
  if (huart->Init.WordLength != UART_WORDLENGTH_8B)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	689b      	ldr	r3, [r3, #8]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d001      	beq.n	800bb72 <HAL_LIN_Init+0x2e>
  {
    return HAL_ERROR;
 800bb6e:	2301      	movs	r3, #1
 800bb70:	e052      	b.n	800bc18 <HAL_LIN_Init+0xd4>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d106      	bne.n	800bb88 <HAL_LIN_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f003 f8e4 	bl	800ed50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2224      	movs	r2, #36	; 0x24
 800bb8c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	687a      	ldr	r2, [r7, #4]
 800bb94:	6812      	ldr	r2, [r2, #0]
 800bb96:	6812      	ldr	r2, [r2, #0]
 800bb98:	f022 0201 	bic.w	r2, r2, #1
 800bb9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f001 fa87 	bl	800d0b2 <UART_SetConfig>
 800bba4:	4603      	mov	r3, r0
 800bba6:	2b01      	cmp	r3, #1
 800bba8:	d101      	bne.n	800bbae <HAL_LIN_Init+0x6a>
  {
    return HAL_ERROR;
 800bbaa:	2301      	movs	r3, #1
 800bbac:	e034      	b.n	800bc18 <HAL_LIN_Init+0xd4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d002      	beq.n	800bbbc <HAL_LIN_Init+0x78>
  {
    UART_AdvFeatureConfig(huart);
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f001 fdb6 	bl	800d728 <UART_AdvFeatureConfig>
  }

  /* In LIN mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	6812      	ldr	r2, [r2, #0]
 800bbc4:	6852      	ldr	r2, [r2, #4]
 800bbc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bbca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	6812      	ldr	r2, [r2, #0]
 800bbd4:	6892      	ldr	r2, [r2, #8]
 800bbd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bbda:	609a      	str	r2, [r3, #8]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	6812      	ldr	r2, [r2, #0]
 800bbe4:	6852      	ldr	r2, [r2, #4]
 800bbe6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bbea:	605a      	str	r2, [r3, #4]

  /* Set the USART LIN Break detection length. */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	687a      	ldr	r2, [r7, #4]
 800bbf2:	6812      	ldr	r2, [r2, #0]
 800bbf4:	6852      	ldr	r2, [r2, #4]
 800bbf6:	f022 0120 	bic.w	r1, r2, #32
 800bbfa:	683a      	ldr	r2, [r7, #0]
 800bbfc:	430a      	orrs	r2, r1
 800bbfe:	605a      	str	r2, [r3, #4]

  __HAL_UART_ENABLE(huart);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	687a      	ldr	r2, [r7, #4]
 800bc06:	6812      	ldr	r2, [r2, #0]
 800bc08:	6812      	ldr	r2, [r2, #0]
 800bc0a:	f042 0201 	orr.w	r2, r2, #1
 800bc0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f001 fe2b 	bl	800d86c <UART_CheckIdleState>
 800bc16:	4603      	mov	r3, r0
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3708      	adds	r7, #8
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <HAL_MultiProcessor_Init>:
  *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
  *        HAL_MultiProcessor_Init().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b084      	sub	sp, #16
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	60f8      	str	r0, [r7, #12]
 800bc28:	460b      	mov	r3, r1
 800bc2a:	607a      	str	r2, [r7, #4]
 800bc2c:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d101      	bne.n	800bc38 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 800bc34:	2301      	movs	r3, #1
 800bc36:	e059      	b.n	800bcec <HAL_MultiProcessor_Init+0xcc>
  }

  /* Check the wake up method parameter */
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d106      	bne.n	800bc4e <HAL_MultiProcessor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	2200      	movs	r2, #0
 800bc44:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bc48:	68f8      	ldr	r0, [r7, #12]
 800bc4a:	f003 f881 	bl	800ed50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2224      	movs	r2, #36	; 0x24
 800bc52:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	68fa      	ldr	r2, [r7, #12]
 800bc5a:	6812      	ldr	r2, [r2, #0]
 800bc5c:	6812      	ldr	r2, [r2, #0]
 800bc5e:	f022 0201 	bic.w	r2, r2, #1
 800bc62:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bc64:	68f8      	ldr	r0, [r7, #12]
 800bc66:	f001 fa24 	bl	800d0b2 <UART_SetConfig>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	2b01      	cmp	r3, #1
 800bc6e:	d101      	bne.n	800bc74 <HAL_MultiProcessor_Init+0x54>
  {
    return HAL_ERROR;
 800bc70:	2301      	movs	r3, #1
 800bc72:	e03b      	b.n	800bcec <HAL_MultiProcessor_Init+0xcc>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d002      	beq.n	800bc82 <HAL_MultiProcessor_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800bc7c:	68f8      	ldr	r0, [r7, #12]
 800bc7e:	f001 fd53 	bl	800d728 <UART_AdvFeatureConfig>
  }

  /* In multiprocessor mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register. */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	68fa      	ldr	r2, [r7, #12]
 800bc88:	6812      	ldr	r2, [r2, #0]
 800bc8a:	6852      	ldr	r2, [r2, #4]
 800bc8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bc90:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	68fa      	ldr	r2, [r7, #12]
 800bc98:	6812      	ldr	r2, [r2, #0]
 800bc9a:	6892      	ldr	r2, [r2, #8]
 800bc9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bca0:	609a      	str	r2, [r3, #8]

  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bca8:	d10a      	bne.n	800bcc0 <HAL_MultiProcessor_Init+0xa0>
  {
    /* If address mark wake up method is chosen, set the USART address node */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	68fa      	ldr	r2, [r7, #12]
 800bcb0:	6812      	ldr	r2, [r2, #0]
 800bcb2:	6852      	ldr	r2, [r2, #4]
 800bcb4:	f022 417f 	bic.w	r1, r2, #4278190080	; 0xff000000
 800bcb8:	7afa      	ldrb	r2, [r7, #11]
 800bcba:	0612      	lsls	r2, r2, #24
 800bcbc:	430a      	orrs	r2, r1
 800bcbe:	605a      	str	r2, [r3, #4]
  }

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	68fa      	ldr	r2, [r7, #12]
 800bcc6:	6812      	ldr	r2, [r2, #0]
 800bcc8:	6812      	ldr	r2, [r2, #0]
 800bcca:	f422 6100 	bic.w	r1, r2, #2048	; 0x800
 800bcce:	687a      	ldr	r2, [r7, #4]
 800bcd0:	430a      	orrs	r2, r1
 800bcd2:	601a      	str	r2, [r3, #0]

  __HAL_UART_ENABLE(huart);
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	68fa      	ldr	r2, [r7, #12]
 800bcda:	6812      	ldr	r2, [r2, #0]
 800bcdc:	6812      	ldr	r2, [r2, #0]
 800bcde:	f042 0201 	orr.w	r2, r2, #1
 800bce2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bce4:	68f8      	ldr	r0, [r7, #12]
 800bce6:	f001 fdc1 	bl	800d86c <UART_CheckIdleState>
 800bcea:	4603      	mov	r3, r0
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3710      	adds	r7, #16
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}

0800bcf4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b082      	sub	sp, #8
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d101      	bne.n	800bd06 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800bd02:	2301      	movs	r3, #1
 800bd04:	e027      	b.n	800bd56 <HAL_UART_DeInit+0x62>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2224      	movs	r2, #36	; 0x24
 800bd0a:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	687a      	ldr	r2, [r7, #4]
 800bd12:	6812      	ldr	r2, [r2, #0]
 800bd14:	6812      	ldr	r2, [r2, #0]
 800bd16:	f022 0201 	bic.w	r2, r2, #1
 800bd1a:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	2200      	movs	r2, #0
 800bd22:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	2200      	movs	r2, #0
 800bd32:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f003 f8b1 	bl	800ee9c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2200      	movs	r2, #0
 800bd44:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800bd54:	2300      	movs	r3, #0
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3708      	adds	r7, #8
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800bd5e:	b480      	push	{r7}
 800bd60:	b083      	sub	sp, #12
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800bd66:	bf00      	nop
 800bd68:	370c      	adds	r7, #12
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd70:	4770      	bx	lr
  * @brief DeInitialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 800bd72:	b480      	push	{r7}
 800bd74:	b083      	sub	sp, #12
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 800bd7a:	bf00      	nop
 800bd7c:	370c      	adds	r7, #12
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd84:	4770      	bx	lr

0800bd86 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bd86:	b580      	push	{r7, lr}
 800bd88:	b08a      	sub	sp, #40	; 0x28
 800bd8a:	af02      	add	r7, sp, #8
 800bd8c:	60f8      	str	r0, [r7, #12]
 800bd8e:	60b9      	str	r1, [r7, #8]
 800bd90:	603b      	str	r3, [r7, #0]
 800bd92:	4613      	mov	r3, r2
 800bd94:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd9a:	2b20      	cmp	r3, #32
 800bd9c:	f040 8081 	bne.w	800bea2 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d002      	beq.n	800bdac <HAL_UART_Transmit+0x26>
 800bda6:	88fb      	ldrh	r3, [r7, #6]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d101      	bne.n	800bdb0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800bdac:	2301      	movs	r3, #1
 800bdae:	e079      	b.n	800bea4 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800bdb6:	2b01      	cmp	r3, #1
 800bdb8:	d101      	bne.n	800bdbe <HAL_UART_Transmit+0x38>
 800bdba:	2302      	movs	r3, #2
 800bdbc:	e072      	b.n	800bea4 <HAL_UART_Transmit+0x11e>
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	2221      	movs	r2, #33	; 0x21
 800bdd0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800bdd2:	f7f4 fa9f 	bl	8000314 <HAL_GetTick>
 800bdd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	88fa      	ldrh	r2, [r7, #6]
 800bddc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	88fa      	ldrh	r2, [r7, #6]
 800bde4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	689b      	ldr	r3, [r3, #8]
 800bdec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdf0:	d108      	bne.n	800be04 <HAL_UART_Transmit+0x7e>
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	691b      	ldr	r3, [r3, #16]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d104      	bne.n	800be04 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	61bb      	str	r3, [r7, #24]
 800be02:	e003      	b.n	800be0c <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800be08:	2300      	movs	r3, #0
 800be0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800be0c:	e02d      	b.n	800be6a <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	9300      	str	r3, [sp, #0]
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	2200      	movs	r2, #0
 800be16:	2180      	movs	r1, #128	; 0x80
 800be18:	68f8      	ldr	r0, [r7, #12]
 800be1a:	f001 fd6c 	bl	800d8f6 <UART_WaitOnFlagUntilTimeout>
 800be1e:	4603      	mov	r3, r0
 800be20:	2b00      	cmp	r3, #0
 800be22:	d001      	beq.n	800be28 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800be24:	2303      	movs	r3, #3
 800be26:	e03d      	b.n	800bea4 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800be28:	69fb      	ldr	r3, [r7, #28]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d10b      	bne.n	800be46 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	69ba      	ldr	r2, [r7, #24]
 800be34:	8812      	ldrh	r2, [r2, #0]
 800be36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800be3a:	b292      	uxth	r2, r2
 800be3c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800be3e:	69bb      	ldr	r3, [r7, #24]
 800be40:	3302      	adds	r3, #2
 800be42:	61bb      	str	r3, [r7, #24]
 800be44:	e008      	b.n	800be58 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	69fa      	ldr	r2, [r7, #28]
 800be4c:	7812      	ldrb	r2, [r2, #0]
 800be4e:	b292      	uxth	r2, r2
 800be50:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800be52:	69fb      	ldr	r3, [r7, #28]
 800be54:	3301      	adds	r3, #1
 800be56:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800be5e:	b29b      	uxth	r3, r3
 800be60:	3b01      	subs	r3, #1
 800be62:	b29a      	uxth	r2, r3
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800be70:	b29b      	uxth	r3, r3
 800be72:	2b00      	cmp	r3, #0
 800be74:	d1cb      	bne.n	800be0e <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	9300      	str	r3, [sp, #0]
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	2200      	movs	r2, #0
 800be7e:	2140      	movs	r1, #64	; 0x40
 800be80:	68f8      	ldr	r0, [r7, #12]
 800be82:	f001 fd38 	bl	800d8f6 <UART_WaitOnFlagUntilTimeout>
 800be86:	4603      	mov	r3, r0
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d001      	beq.n	800be90 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 800be8c:	2303      	movs	r3, #3
 800be8e:	e009      	b.n	800bea4 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2220      	movs	r2, #32
 800be94:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2200      	movs	r2, #0
 800be9a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800be9e:	2300      	movs	r3, #0
 800bea0:	e000      	b.n	800bea4 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800bea2:	2302      	movs	r3, #2
  }
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3720      	adds	r7, #32
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}

0800beac <HAL_UART_Receive>:
  * @param Size    Amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b08a      	sub	sp, #40	; 0x28
 800beb0:	af02      	add	r7, sp, #8
 800beb2:	60f8      	str	r0, [r7, #12]
 800beb4:	60b9      	str	r1, [r7, #8]
 800beb6:	603b      	str	r3, [r7, #0]
 800beb8:	4613      	mov	r3, r2
 800beba:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bec0:	2b20      	cmp	r3, #32
 800bec2:	f040 80bb 	bne.w	800c03c <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d002      	beq.n	800bed2 <HAL_UART_Receive+0x26>
 800becc:	88fb      	ldrh	r3, [r7, #6]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d101      	bne.n	800bed6 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800bed2:	2301      	movs	r3, #1
 800bed4:	e0b3      	b.n	800c03e <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800bedc:	2b01      	cmp	r3, #1
 800bede:	d101      	bne.n	800bee4 <HAL_UART_Receive+0x38>
 800bee0:	2302      	movs	r3, #2
 800bee2:	e0ac      	b.n	800c03e <HAL_UART_Receive+0x192>
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2201      	movs	r2, #1
 800bee8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2200      	movs	r2, #0
 800bef0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	2222      	movs	r2, #34	; 0x22
 800bef6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800bef8:	f7f4 fa0c 	bl	8000314 <HAL_GetTick>
 800befc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	88fa      	ldrh	r2, [r7, #6]
 800bf02:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	88fa      	ldrh	r2, [r7, #6]
 800bf0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	689b      	ldr	r3, [r3, #8]
 800bf12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf16:	d10e      	bne.n	800bf36 <HAL_UART_Receive+0x8a>
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	691b      	ldr	r3, [r3, #16]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d105      	bne.n	800bf2c <HAL_UART_Receive+0x80>
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bf26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bf2a:	e02d      	b.n	800bf88 <HAL_UART_Receive+0xdc>
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	22ff      	movs	r2, #255	; 0xff
 800bf30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bf34:	e028      	b.n	800bf88 <HAL_UART_Receive+0xdc>
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	689b      	ldr	r3, [r3, #8]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d10d      	bne.n	800bf5a <HAL_UART_Receive+0xae>
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	691b      	ldr	r3, [r3, #16]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d104      	bne.n	800bf50 <HAL_UART_Receive+0xa4>
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	22ff      	movs	r2, #255	; 0xff
 800bf4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bf4e:	e01b      	b.n	800bf88 <HAL_UART_Receive+0xdc>
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	227f      	movs	r2, #127	; 0x7f
 800bf54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bf58:	e016      	b.n	800bf88 <HAL_UART_Receive+0xdc>
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	689b      	ldr	r3, [r3, #8]
 800bf5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf62:	d10d      	bne.n	800bf80 <HAL_UART_Receive+0xd4>
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	691b      	ldr	r3, [r3, #16]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d104      	bne.n	800bf76 <HAL_UART_Receive+0xca>
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	227f      	movs	r2, #127	; 0x7f
 800bf70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bf74:	e008      	b.n	800bf88 <HAL_UART_Receive+0xdc>
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	223f      	movs	r2, #63	; 0x3f
 800bf7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bf7e:	e003      	b.n	800bf88 <HAL_UART_Receive+0xdc>
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	2200      	movs	r2, #0
 800bf84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bf8e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	689b      	ldr	r3, [r3, #8]
 800bf94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf98:	d108      	bne.n	800bfac <HAL_UART_Receive+0x100>
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	691b      	ldr	r3, [r3, #16]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d104      	bne.n	800bfac <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	61bb      	str	r3, [r7, #24]
 800bfaa:	e003      	b.n	800bfb4 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800bfb4:	e033      	b.n	800c01e <HAL_UART_Receive+0x172>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	9300      	str	r3, [sp, #0]
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	2120      	movs	r1, #32
 800bfc0:	68f8      	ldr	r0, [r7, #12]
 800bfc2:	f001 fc98 	bl	800d8f6 <UART_WaitOnFlagUntilTimeout>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d001      	beq.n	800bfd0 <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 800bfcc:	2303      	movs	r3, #3
 800bfce:	e036      	b.n	800c03e <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 800bfd0:	69fb      	ldr	r3, [r7, #28]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d10c      	bne.n	800bff0 <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bfdc:	b29a      	uxth	r2, r3
 800bfde:	8a7b      	ldrh	r3, [r7, #18]
 800bfe0:	4013      	ands	r3, r2
 800bfe2:	b29a      	uxth	r2, r3
 800bfe4:	69bb      	ldr	r3, [r7, #24]
 800bfe6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800bfe8:	69bb      	ldr	r3, [r7, #24]
 800bfea:	3302      	adds	r3, #2
 800bfec:	61bb      	str	r3, [r7, #24]
 800bfee:	e00d      	b.n	800c00c <HAL_UART_Receive+0x160>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bff6:	b29b      	uxth	r3, r3
 800bff8:	b2da      	uxtb	r2, r3
 800bffa:	8a7b      	ldrh	r3, [r7, #18]
 800bffc:	b2db      	uxtb	r3, r3
 800bffe:	4013      	ands	r3, r2
 800c000:	b2da      	uxtb	r2, r3
 800c002:	69fb      	ldr	r3, [r7, #28]
 800c004:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800c006:	69fb      	ldr	r3, [r7, #28]
 800c008:	3301      	adds	r3, #1
 800c00a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c012:	b29b      	uxth	r3, r3
 800c014:	3b01      	subs	r3, #1
 800c016:	b29a      	uxth	r2, r3
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c024:	b29b      	uxth	r3, r3
 800c026:	2b00      	cmp	r3, #0
 800c028:	d1c5      	bne.n	800bfb6 <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	2220      	movs	r2, #32
 800c02e:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	2200      	movs	r2, #0
 800c034:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800c038:	2300      	movs	r3, #0
 800c03a:	e000      	b.n	800c03e <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 800c03c:	2302      	movs	r3, #2
  }
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3720      	adds	r7, #32
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}

0800c046 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c046:	b480      	push	{r7}
 800c048:	b085      	sub	sp, #20
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	60f8      	str	r0, [r7, #12]
 800c04e:	60b9      	str	r1, [r7, #8]
 800c050:	4613      	mov	r3, r2
 800c052:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c058:	2b20      	cmp	r3, #32
 800c05a:	d144      	bne.n	800c0e6 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d002      	beq.n	800c068 <HAL_UART_Transmit_IT+0x22>
 800c062:	88fb      	ldrh	r3, [r7, #6]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d101      	bne.n	800c06c <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800c068:	2301      	movs	r3, #1
 800c06a:	e03d      	b.n	800c0e8 <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800c072:	2b01      	cmp	r3, #1
 800c074:	d101      	bne.n	800c07a <HAL_UART_Transmit_IT+0x34>
 800c076:	2302      	movs	r3, #2
 800c078:	e036      	b.n	800c0e8 <HAL_UART_Transmit_IT+0xa2>
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	2201      	movs	r2, #1
 800c07e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	68ba      	ldr	r2, [r7, #8]
 800c086:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	88fa      	ldrh	r2, [r7, #6]
 800c08c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	88fa      	ldrh	r2, [r7, #6]
 800c094:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	2200      	movs	r2, #0
 800c09c:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	2221      	movs	r2, #33	; 0x21
 800c0a8:	675a      	str	r2, [r3, #116]	; 0x74
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	689b      	ldr	r3, [r3, #8]
 800c0ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0b2:	d107      	bne.n	800c0c4 <HAL_UART_Transmit_IT+0x7e>
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	691b      	ldr	r3, [r3, #16]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d103      	bne.n	800c0c4 <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	4a0d      	ldr	r2, [pc, #52]	; (800c0f4 <HAL_UART_Transmit_IT+0xae>)
 800c0c0:	665a      	str	r2, [r3, #100]	; 0x64
 800c0c2:	e002      	b.n	800c0ca <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	4a0c      	ldr	r2, [pc, #48]	; (800c0f8 <HAL_UART_Transmit_IT+0xb2>)
 800c0c8:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	68fa      	ldr	r2, [r7, #12]
 800c0d8:	6812      	ldr	r2, [r2, #0]
 800c0da:	6812      	ldr	r2, [r2, #0]
 800c0dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c0e0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	e000      	b.n	800c0e8 <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 800c0e6:	2302      	movs	r3, #2
  }
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3714      	adds	r7, #20
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr
 800c0f4:	0800dd45 	.word	0x0800dd45
 800c0f8:	0800dcd1 	.word	0x0800dcd1

0800c0fc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	b085      	sub	sp, #20
 800c100:	af00      	add	r7, sp, #0
 800c102:	60f8      	str	r0, [r7, #12]
 800c104:	60b9      	str	r1, [r7, #8]
 800c106:	4613      	mov	r3, r2
 800c108:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c10e:	2b20      	cmp	r3, #32
 800c110:	f040 808a 	bne.w	800c228 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d002      	beq.n	800c120 <HAL_UART_Receive_IT+0x24>
 800c11a:	88fb      	ldrh	r3, [r7, #6]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d101      	bne.n	800c124 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c120:	2301      	movs	r3, #1
 800c122:	e082      	b.n	800c22a <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800c12a:	2b01      	cmp	r3, #1
 800c12c:	d101      	bne.n	800c132 <HAL_UART_Receive_IT+0x36>
 800c12e:	2302      	movs	r3, #2
 800c130:	e07b      	b.n	800c22a <HAL_UART_Receive_IT+0x12e>
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2201      	movs	r2, #1
 800c136:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	68ba      	ldr	r2, [r7, #8]
 800c13e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	88fa      	ldrh	r2, [r7, #6]
 800c144:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	88fa      	ldrh	r2, [r7, #6]
 800c14c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	2200      	movs	r2, #0
 800c154:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	689b      	ldr	r3, [r3, #8]
 800c15a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c15e:	d10e      	bne.n	800c17e <HAL_UART_Receive_IT+0x82>
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	691b      	ldr	r3, [r3, #16]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d105      	bne.n	800c174 <HAL_UART_Receive_IT+0x78>
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c16e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c172:	e02d      	b.n	800c1d0 <HAL_UART_Receive_IT+0xd4>
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	22ff      	movs	r2, #255	; 0xff
 800c178:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c17c:	e028      	b.n	800c1d0 <HAL_UART_Receive_IT+0xd4>
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	689b      	ldr	r3, [r3, #8]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d10d      	bne.n	800c1a2 <HAL_UART_Receive_IT+0xa6>
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	691b      	ldr	r3, [r3, #16]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d104      	bne.n	800c198 <HAL_UART_Receive_IT+0x9c>
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	22ff      	movs	r2, #255	; 0xff
 800c192:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c196:	e01b      	b.n	800c1d0 <HAL_UART_Receive_IT+0xd4>
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	227f      	movs	r2, #127	; 0x7f
 800c19c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c1a0:	e016      	b.n	800c1d0 <HAL_UART_Receive_IT+0xd4>
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	689b      	ldr	r3, [r3, #8]
 800c1a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c1aa:	d10d      	bne.n	800c1c8 <HAL_UART_Receive_IT+0xcc>
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	691b      	ldr	r3, [r3, #16]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d104      	bne.n	800c1be <HAL_UART_Receive_IT+0xc2>
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	227f      	movs	r2, #127	; 0x7f
 800c1b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c1bc:	e008      	b.n	800c1d0 <HAL_UART_Receive_IT+0xd4>
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	223f      	movs	r2, #63	; 0x3f
 800c1c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c1c6:	e003      	b.n	800c1d0 <HAL_UART_Receive_IT+0xd4>
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2222      	movs	r2, #34	; 0x22
 800c1da:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	68fa      	ldr	r2, [r7, #12]
 800c1e2:	6812      	ldr	r2, [r2, #0]
 800c1e4:	6892      	ldr	r2, [r2, #8]
 800c1e6:	f042 0201 	orr.w	r2, r2, #1
 800c1ea:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	689b      	ldr	r3, [r3, #8]
 800c1f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1f4:	d107      	bne.n	800c206 <HAL_UART_Receive_IT+0x10a>
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	691b      	ldr	r3, [r3, #16]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d103      	bne.n	800c206 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	4a0d      	ldr	r2, [pc, #52]	; (800c238 <HAL_UART_Receive_IT+0x13c>)
 800c202:	661a      	str	r2, [r3, #96]	; 0x60
 800c204:	e002      	b.n	800c20c <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	4a0c      	ldr	r2, [pc, #48]	; (800c23c <HAL_UART_Receive_IT+0x140>)
 800c20a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2200      	movs	r2, #0
 800c210:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	68fa      	ldr	r2, [r7, #12]
 800c21a:	6812      	ldr	r2, [r2, #0]
 800c21c:	6812      	ldr	r2, [r2, #0]
 800c21e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800c222:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800c224:	2300      	movs	r3, #0
 800c226:	e000      	b.n	800c22a <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800c228:	2302      	movs	r3, #2
  }
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3714      	adds	r7, #20
 800c22e:	46bd      	mov	sp, r7
 800c230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c234:	4770      	bx	lr
 800c236:	bf00      	nop
 800c238:	0800de9d 	.word	0x0800de9d
 800c23c:	0800ddf3 	.word	0x0800ddf3

0800c240 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b084      	sub	sp, #16
 800c244:	af00      	add	r7, sp, #0
 800c246:	60f8      	str	r0, [r7, #12]
 800c248:	60b9      	str	r1, [r7, #8]
 800c24a:	4613      	mov	r3, r2
 800c24c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c252:	2b20      	cmp	r3, #32
 800c254:	d164      	bne.n	800c320 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d002      	beq.n	800c262 <HAL_UART_Transmit_DMA+0x22>
 800c25c:	88fb      	ldrh	r3, [r7, #6]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d101      	bne.n	800c266 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800c262:	2301      	movs	r3, #1
 800c264:	e05d      	b.n	800c322 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800c26c:	2b01      	cmp	r3, #1
 800c26e:	d101      	bne.n	800c274 <HAL_UART_Transmit_DMA+0x34>
 800c270:	2302      	movs	r3, #2
 800c272:	e056      	b.n	800c322 <HAL_UART_Transmit_DMA+0xe2>
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2201      	movs	r2, #1
 800c278:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	68ba      	ldr	r2, [r7, #8]
 800c280:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	88fa      	ldrh	r2, [r7, #6]
 800c286:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	88fa      	ldrh	r2, [r7, #6]
 800c28e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	2200      	movs	r2, #0
 800c296:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	2221      	movs	r2, #33	; 0x21
 800c29c:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d02a      	beq.n	800c2fc <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2aa:	4a20      	ldr	r2, [pc, #128]	; (800c32c <HAL_UART_Transmit_DMA+0xec>)
 800c2ac:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2b2:	4a1f      	ldr	r2, [pc, #124]	; (800c330 <HAL_UART_Transmit_DMA+0xf0>)
 800c2b4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2ba:	4a1e      	ldr	r2, [pc, #120]	; (800c334 <HAL_UART_Transmit_DMA+0xf4>)
 800c2bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	3328      	adds	r3, #40	; 0x28
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	88fb      	ldrh	r3, [r7, #6]
 800c2da:	f7f4 fec0 	bl	800105e <HAL_DMA_Start_IT>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d00b      	beq.n	800c2fc <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	2210      	movs	r2, #16
 800c2e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	2220      	movs	r2, #32
 800c2f6:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	e012      	b.n	800c322 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	2240      	movs	r2, #64	; 0x40
 800c302:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2200      	movs	r2, #0
 800c308:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	68fa      	ldr	r2, [r7, #12]
 800c312:	6812      	ldr	r2, [r2, #0]
 800c314:	6892      	ldr	r2, [r2, #8]
 800c316:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c31a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800c31c:	2300      	movs	r3, #0
 800c31e:	e000      	b.n	800c322 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 800c320:	2302      	movs	r3, #2
  }
}
 800c322:	4618      	mov	r0, r3
 800c324:	3710      	adds	r7, #16
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	0800d9f1 	.word	0x0800d9f1
 800c330:	0800da45 	.word	0x0800da45
 800c334:	0800dae5 	.word	0x0800dae5

0800c338 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b084      	sub	sp, #16
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	60f8      	str	r0, [r7, #12]
 800c340:	60b9      	str	r1, [r7, #8]
 800c342:	4613      	mov	r3, r2
 800c344:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c34a:	2b20      	cmp	r3, #32
 800c34c:	d16c      	bne.n	800c428 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d002      	beq.n	800c35a <HAL_UART_Receive_DMA+0x22>
 800c354:	88fb      	ldrh	r3, [r7, #6]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d101      	bne.n	800c35e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800c35a:	2301      	movs	r3, #1
 800c35c:	e065      	b.n	800c42a <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800c364:	2b01      	cmp	r3, #1
 800c366:	d101      	bne.n	800c36c <HAL_UART_Receive_DMA+0x34>
 800c368:	2302      	movs	r3, #2
 800c36a:	e05e      	b.n	800c42a <HAL_UART_Receive_DMA+0xf2>
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	2201      	movs	r2, #1
 800c370:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	68ba      	ldr	r2, [r7, #8]
 800c378:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	88fa      	ldrh	r2, [r7, #6]
 800c37e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	2200      	movs	r2, #0
 800c386:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	2222      	movs	r2, #34	; 0x22
 800c38c:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c392:	2b00      	cmp	r3, #0
 800c394:	d02a      	beq.n	800c3ec <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c39a:	4a26      	ldr	r2, [pc, #152]	; (800c434 <HAL_UART_Receive_DMA+0xfc>)
 800c39c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3a2:	4a25      	ldr	r2, [pc, #148]	; (800c438 <HAL_UART_Receive_DMA+0x100>)
 800c3a4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3aa:	4a24      	ldr	r2, [pc, #144]	; (800c43c <HAL_UART_Receive_DMA+0x104>)
 800c3ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	3324      	adds	r3, #36	; 0x24
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3c6:	461a      	mov	r2, r3
 800c3c8:	88fb      	ldrh	r3, [r7, #6]
 800c3ca:	f7f4 fe48 	bl	800105e <HAL_DMA_Start_IT>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d00b      	beq.n	800c3ec <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	2210      	movs	r2, #16
 800c3d8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	2220      	movs	r2, #32
 800c3e6:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	e01e      	b.n	800c42a <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	68fa      	ldr	r2, [r7, #12]
 800c3fa:	6812      	ldr	r2, [r2, #0]
 800c3fc:	6812      	ldr	r2, [r2, #0]
 800c3fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c402:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	68fa      	ldr	r2, [r7, #12]
 800c40a:	6812      	ldr	r2, [r2, #0]
 800c40c:	6892      	ldr	r2, [r2, #8]
 800c40e:	f042 0201 	orr.w	r2, r2, #1
 800c412:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	68fa      	ldr	r2, [r7, #12]
 800c41a:	6812      	ldr	r2, [r2, #0]
 800c41c:	6892      	ldr	r2, [r2, #8]
 800c41e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c422:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800c424:	2300      	movs	r3, #0
 800c426:	e000      	b.n	800c42a <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 800c428:	2302      	movs	r3, #2
  }
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3710      	adds	r7, #16
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	bf00      	nop
 800c434:	0800da61 	.word	0x0800da61
 800c438:	0800dac9 	.word	0x0800dac9
 800c43c:	0800dae5 	.word	0x0800dae5

0800c440 <HAL_UART_DMAPause>:
  * @brief Pause the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 800c440:	b480      	push	{r7}
 800c442:	b085      	sub	sp, #20
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c44c:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c452:	60bb      	str	r3, [r7, #8]

  __HAL_LOCK(huart);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800c45a:	2b01      	cmp	r3, #1
 800c45c:	d101      	bne.n	800c462 <HAL_UART_DMAPause+0x22>
 800c45e:	2302      	movs	r3, #2
 800c460:	e03c      	b.n	800c4dc <HAL_UART_DMAPause+0x9c>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2201      	movs	r2, #1
 800c466:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	689b      	ldr	r3, [r3, #8]
 800c470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c474:	2b80      	cmp	r3, #128	; 0x80
 800c476:	d10a      	bne.n	800c48e <HAL_UART_DMAPause+0x4e>
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	2b21      	cmp	r3, #33	; 0x21
 800c47c:	d107      	bne.n	800c48e <HAL_UART_DMAPause+0x4e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    /* Disable the UART DMA Tx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	687a      	ldr	r2, [r7, #4]
 800c484:	6812      	ldr	r2, [r2, #0]
 800c486:	6892      	ldr	r2, [r2, #8]
 800c488:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c48c:	609a      	str	r2, [r3, #8]
  }
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	689b      	ldr	r3, [r3, #8]
 800c494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c498:	2b40      	cmp	r3, #64	; 0x40
 800c49a:	d11a      	bne.n	800c4d2 <HAL_UART_DMAPause+0x92>
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	2b22      	cmp	r3, #34	; 0x22
 800c4a0:	d117      	bne.n	800c4d2 <HAL_UART_DMAPause+0x92>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	687a      	ldr	r2, [r7, #4]
 800c4a8:	6812      	ldr	r2, [r2, #0]
 800c4aa:	6812      	ldr	r2, [r2, #0]
 800c4ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c4b0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	687a      	ldr	r2, [r7, #4]
 800c4b8:	6812      	ldr	r2, [r2, #0]
 800c4ba:	6892      	ldr	r2, [r2, #8]
 800c4bc:	f022 0201 	bic.w	r2, r2, #1
 800c4c0:	609a      	str	r2, [r3, #8]

    /* Disable the UART DMA Rx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	687a      	ldr	r2, [r7, #4]
 800c4c8:	6812      	ldr	r2, [r2, #0]
 800c4ca:	6892      	ldr	r2, [r2, #8]
 800c4cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c4d0:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800c4da:	2300      	movs	r3, #0
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3714      	adds	r7, #20
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e6:	4770      	bx	lr

0800c4e8 <HAL_UART_DMAResume>:
  * @brief Resume the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b083      	sub	sp, #12
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800c4f6:	2b01      	cmp	r3, #1
 800c4f8:	d101      	bne.n	800c4fe <HAL_UART_DMAResume+0x16>
 800c4fa:	2302      	movs	r3, #2
 800c4fc:	e034      	b.n	800c568 <HAL_UART_DMAResume+0x80>
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2201      	movs	r2, #1
 800c502:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c50a:	2b21      	cmp	r3, #33	; 0x21
 800c50c:	d107      	bne.n	800c51e <HAL_UART_DMAResume+0x36>
  {
    /* Enable the UART DMA Tx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	687a      	ldr	r2, [r7, #4]
 800c514:	6812      	ldr	r2, [r2, #0]
 800c516:	6892      	ldr	r2, [r2, #8]
 800c518:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c51c:	609a      	str	r2, [r3, #8]
  }
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c522:	2b22      	cmp	r3, #34	; 0x22
 800c524:	d11b      	bne.n	800c55e <HAL_UART_DMAResume+0x76>
  {
    /* Clear the Overrun flag before resuming the Rx transfer */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	2208      	movs	r2, #8
 800c52c:	621a      	str	r2, [r3, #32]

    /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	687a      	ldr	r2, [r7, #4]
 800c534:	6812      	ldr	r2, [r2, #0]
 800c536:	6812      	ldr	r2, [r2, #0]
 800c538:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c53c:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	687a      	ldr	r2, [r7, #4]
 800c544:	6812      	ldr	r2, [r2, #0]
 800c546:	6892      	ldr	r2, [r2, #8]
 800c548:	f042 0201 	orr.w	r2, r2, #1
 800c54c:	609a      	str	r2, [r3, #8]

    /* Enable the UART DMA Rx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	687a      	ldr	r2, [r7, #4]
 800c554:	6812      	ldr	r2, [r2, #0]
 800c556:	6892      	ldr	r2, [r2, #8]
 800c558:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c55c:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2200      	movs	r2, #0
 800c562:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800c566:	2300      	movs	r3, #0
}
 800c568:	4618      	mov	r0, r3
 800c56a:	370c      	adds	r7, #12
 800c56c:	46bd      	mov	sp, r7
 800c56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c572:	4770      	bx	lr

0800c574 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b084      	sub	sp, #16
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c580:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c586:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	689b      	ldr	r3, [r3, #8]
 800c58e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c592:	2b80      	cmp	r3, #128	; 0x80
 800c594:	d126      	bne.n	800c5e4 <HAL_UART_DMAStop+0x70>
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2b21      	cmp	r3, #33	; 0x21
 800c59a:	d123      	bne.n	800c5e4 <HAL_UART_DMAStop+0x70>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	687a      	ldr	r2, [r7, #4]
 800c5a2:	6812      	ldr	r2, [r2, #0]
 800c5a4:	6892      	ldr	r2, [r2, #8]
 800c5a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c5aa:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d014      	beq.n	800c5de <HAL_UART_DMAStop+0x6a>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f7f4 fdb0 	bl	800111e <HAL_DMA_Abort>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d00c      	beq.n	800c5de <HAL_UART_DMAStop+0x6a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7f5 f82b 	bl	8001624 <HAL_DMA_GetError>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	2b20      	cmp	r3, #32
 800c5d2:	d104      	bne.n	800c5de <HAL_UART_DMAStop+0x6a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2210      	movs	r2, #16
 800c5d8:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800c5da:	2303      	movs	r3, #3
 800c5dc:	e031      	b.n	800c642 <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f001 f9d1 	bl	800d986 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	689b      	ldr	r3, [r3, #8]
 800c5ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5ee:	2b40      	cmp	r3, #64	; 0x40
 800c5f0:	d126      	bne.n	800c640 <HAL_UART_DMAStop+0xcc>
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	2b22      	cmp	r3, #34	; 0x22
 800c5f6:	d123      	bne.n	800c640 <HAL_UART_DMAStop+0xcc>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	687a      	ldr	r2, [r7, #4]
 800c5fe:	6812      	ldr	r2, [r2, #0]
 800c600:	6892      	ldr	r2, [r2, #8]
 800c602:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c606:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d014      	beq.n	800c63a <HAL_UART_DMAStop+0xc6>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c614:	4618      	mov	r0, r3
 800c616:	f7f4 fd82 	bl	800111e <HAL_DMA_Abort>
 800c61a:	4603      	mov	r3, r0
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d00c      	beq.n	800c63a <HAL_UART_DMAStop+0xc6>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c624:	4618      	mov	r0, r3
 800c626:	f7f4 fffd 	bl	8001624 <HAL_DMA_GetError>
 800c62a:	4603      	mov	r3, r0
 800c62c:	2b20      	cmp	r3, #32
 800c62e:	d104      	bne.n	800c63a <HAL_UART_DMAStop+0xc6>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2210      	movs	r2, #16
 800c634:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800c636:	2303      	movs	r3, #3
 800c638:	e003      	b.n	800c642 <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f001 f9b8 	bl	800d9b0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800c640:	2300      	movs	r3, #0
}
 800c642:	4618      	mov	r0, r3
 800c644:	3710      	adds	r7, #16
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}

0800c64a <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800c64a:	b580      	push	{r7, lr}
 800c64c:	b082      	sub	sp, #8
 800c64e:	af00      	add	r7, sp, #0
 800c650:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	687a      	ldr	r2, [r7, #4]
 800c658:	6812      	ldr	r2, [r2, #0]
 800c65a:	6812      	ldr	r2, [r2, #0]
 800c65c:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 800c660:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	687a      	ldr	r2, [r7, #4]
 800c668:	6812      	ldr	r2, [r2, #0]
 800c66a:	6892      	ldr	r2, [r2, #8]
 800c66c:	f022 0201 	bic.w	r2, r2, #1
 800c670:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	689b      	ldr	r3, [r3, #8]
 800c678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c67c:	2b80      	cmp	r3, #128	; 0x80
 800c67e:	d124      	bne.n	800c6ca <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	687a      	ldr	r2, [r7, #4]
 800c686:	6812      	ldr	r2, [r2, #0]
 800c688:	6892      	ldr	r2, [r2, #8]
 800c68a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c68e:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c694:	2b00      	cmp	r3, #0
 800c696:	d018      	beq.n	800c6ca <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c69c:	2200      	movs	r2, #0
 800c69e:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f7f4 fd3a 	bl	800111e <HAL_DMA_Abort>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d00c      	beq.n	800c6ca <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f7f4 ffb5 	bl	8001624 <HAL_DMA_GetError>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	2b20      	cmp	r3, #32
 800c6be:	d104      	bne.n	800c6ca <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2210      	movs	r2, #16
 800c6c4:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800c6c6:	2303      	movs	r3, #3
 800c6c8:	e04b      	b.n	800c762 <HAL_UART_Abort+0x118>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	689b      	ldr	r3, [r3, #8]
 800c6d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6d4:	2b40      	cmp	r3, #64	; 0x40
 800c6d6:	d124      	bne.n	800c722 <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	687a      	ldr	r2, [r7, #4]
 800c6de:	6812      	ldr	r2, [r2, #0]
 800c6e0:	6892      	ldr	r2, [r2, #8]
 800c6e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c6e6:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d018      	beq.n	800c722 <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f7f4 fd0e 	bl	800111e <HAL_DMA_Abort>
 800c702:	4603      	mov	r3, r0
 800c704:	2b00      	cmp	r3, #0
 800c706:	d00c      	beq.n	800c722 <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c70c:	4618      	mov	r0, r3
 800c70e:	f7f4 ff89 	bl	8001624 <HAL_DMA_GetError>
 800c712:	4603      	mov	r3, r0
 800c714:	2b20      	cmp	r3, #32
 800c716:	d104      	bne.n	800c722 <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2210      	movs	r2, #16
 800c71c:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800c71e:	2303      	movs	r3, #3
 800c720:	e01f      	b.n	800c762 <HAL_UART_Abort+0x118>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2200      	movs	r2, #0
 800c726:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2200      	movs	r2, #0
 800c72e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	220f      	movs	r2, #15
 800c738:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	687a      	ldr	r2, [r7, #4]
 800c740:	6812      	ldr	r2, [r2, #0]
 800c742:	8b12      	ldrh	r2, [r2, #24]
 800c744:	b292      	uxth	r2, r2
 800c746:	f042 0208 	orr.w	r2, r2, #8
 800c74a:	b292      	uxth	r2, r2
 800c74c:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2220      	movs	r2, #32
 800c752:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2220      	movs	r2, #32
 800c758:	679a      	str	r2, [r3, #120]	; 0x78

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2200      	movs	r2, #0
 800c75e:	67da      	str	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c760:	2300      	movs	r3, #0
}
 800c762:	4618      	mov	r0, r3
 800c764:	3708      	adds	r7, #8
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}

0800c76a <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 800c76a:	b580      	push	{r7, lr}
 800c76c:	b082      	sub	sp, #8
 800c76e:	af00      	add	r7, sp, #0
 800c770:	6078      	str	r0, [r7, #4]
  /* Disable TCIE, TXEIE and TXFTIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	687a      	ldr	r2, [r7, #4]
 800c778:	6812      	ldr	r2, [r2, #0]
 800c77a:	6812      	ldr	r2, [r2, #0]
 800c77c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c780:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	689b      	ldr	r3, [r3, #8]
 800c788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c78c:	2b80      	cmp	r3, #128	; 0x80
 800c78e:	d124      	bne.n	800c7da <HAL_UART_AbortTransmit+0x70>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	687a      	ldr	r2, [r7, #4]
 800c796:	6812      	ldr	r2, [r2, #0]
 800c798:	6892      	ldr	r2, [r2, #8]
 800c79a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c79e:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d018      	beq.n	800c7da <HAL_UART_AbortTransmit+0x70>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f7f4 fcb2 	bl	800111e <HAL_DMA_Abort>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d00c      	beq.n	800c7da <HAL_UART_AbortTransmit+0x70>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f7f4 ff2d 	bl	8001624 <HAL_DMA_GetError>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	2b20      	cmp	r3, #32
 800c7ce:	d104      	bne.n	800c7da <HAL_UART_AbortTransmit+0x70>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2210      	movs	r2, #16
 800c7d4:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800c7d6:	2303      	movs	r3, #3
 800c7d8:	e007      	b.n	800c7ea <HAL_UART_AbortTransmit+0x80>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2220      	movs	r2, #32
 800c7e6:	675a      	str	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800c7e8:	2300      	movs	r3, #0
}
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	3708      	adds	r7, #8
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}

0800c7f2 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800c7f2:	b580      	push	{r7, lr}
 800c7f4:	b082      	sub	sp, #8
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
#else
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	687a      	ldr	r2, [r7, #4]
 800c800:	6812      	ldr	r2, [r2, #0]
 800c802:	6812      	ldr	r2, [r2, #0]
 800c804:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c808:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	687a      	ldr	r2, [r7, #4]
 800c810:	6812      	ldr	r2, [r2, #0]
 800c812:	6892      	ldr	r2, [r2, #8]
 800c814:	f022 0201 	bic.w	r2, r2, #1
 800c818:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	689b      	ldr	r3, [r3, #8]
 800c820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c824:	2b40      	cmp	r3, #64	; 0x40
 800c826:	d124      	bne.n	800c872 <HAL_UART_AbortReceive+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	687a      	ldr	r2, [r7, #4]
 800c82e:	6812      	ldr	r2, [r2, #0]
 800c830:	6892      	ldr	r2, [r2, #8]
 800c832:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c836:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d018      	beq.n	800c872 <HAL_UART_AbortReceive+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c844:	2200      	movs	r2, #0
 800c846:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c84c:	4618      	mov	r0, r3
 800c84e:	f7f4 fc66 	bl	800111e <HAL_DMA_Abort>
 800c852:	4603      	mov	r3, r0
 800c854:	2b00      	cmp	r3, #0
 800c856:	d00c      	beq.n	800c872 <HAL_UART_AbortReceive+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c85c:	4618      	mov	r0, r3
 800c85e:	f7f4 fee1 	bl	8001624 <HAL_DMA_GetError>
 800c862:	4603      	mov	r3, r0
 800c864:	2b20      	cmp	r3, #32
 800c866:	d104      	bne.n	800c872 <HAL_UART_AbortReceive+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2210      	movs	r2, #16
 800c86c:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800c86e:	2303      	movs	r3, #3
 800c870:	e015      	b.n	800c89e <HAL_UART_AbortReceive+0xac>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2200      	movs	r2, #0
 800c876:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	220f      	movs	r2, #15
 800c880:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	687a      	ldr	r2, [r7, #4]
 800c888:	6812      	ldr	r2, [r2, #0]
 800c88a:	8b12      	ldrh	r2, [r2, #24]
 800c88c:	b292      	uxth	r2, r2
 800c88e:	f042 0208 	orr.w	r2, r2, #8
 800c892:	b292      	uxth	r2, r2
 800c894:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2220      	movs	r2, #32
 800c89a:	679a      	str	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800c89c:	2300      	movs	r3, #0
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3708      	adds	r7, #8
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}

0800c8a6 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800c8a6:	b580      	push	{r7, lr}
 800c8a8:	b084      	sub	sp, #16
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	60fb      	str	r3, [r7, #12]
  /* Disable interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE | USART_CR1_TXEIE_TXFNFIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	687a      	ldr	r2, [r7, #4]
 800c8b8:	6812      	ldr	r2, [r2, #0]
 800c8ba:	6812      	ldr	r2, [r2, #0]
 800c8bc:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 800c8c0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	687a      	ldr	r2, [r7, #4]
 800c8c8:	6812      	ldr	r2, [r2, #0]
 800c8ca:	6892      	ldr	r2, [r2, #8]
 800c8cc:	f022 0201 	bic.w	r2, r2, #1
 800c8d0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d00f      	beq.n	800c8fa <HAL_UART_Abort_IT+0x54>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	689b      	ldr	r3, [r3, #8]
 800c8e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8e4:	2b80      	cmp	r3, #128	; 0x80
 800c8e6:	d104      	bne.n	800c8f2 <HAL_UART_Abort_IT+0x4c>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8ec:	4a48      	ldr	r2, [pc, #288]	; (800ca10 <HAL_UART_Abort_IT+0x16a>)
 800c8ee:	639a      	str	r2, [r3, #56]	; 0x38
 800c8f0:	e003      	b.n	800c8fa <HAL_UART_Abort_IT+0x54>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d00f      	beq.n	800c922 <HAL_UART_Abort_IT+0x7c>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	689b      	ldr	r3, [r3, #8]
 800c908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c90c:	2b40      	cmp	r3, #64	; 0x40
 800c90e:	d104      	bne.n	800c91a <HAL_UART_Abort_IT+0x74>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c914:	4a3f      	ldr	r2, [pc, #252]	; (800ca14 <HAL_UART_Abort_IT+0x16e>)
 800c916:	639a      	str	r2, [r3, #56]	; 0x38
 800c918:	e003      	b.n	800c922 <HAL_UART_Abort_IT+0x7c>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c91e:	2200      	movs	r2, #0
 800c920:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	689b      	ldr	r3, [r3, #8]
 800c928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c92c:	2b80      	cmp	r3, #128	; 0x80
 800c92e:	d11a      	bne.n	800c966 <HAL_UART_Abort_IT+0xc0>
  {
    /* Disable DMA Tx at UART level */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	687a      	ldr	r2, [r7, #4]
 800c936:	6812      	ldr	r2, [r2, #0]
 800c938:	6892      	ldr	r2, [r2, #8]
 800c93a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c93e:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c944:	2b00      	cmp	r3, #0
 800c946:	d00e      	beq.n	800c966 <HAL_UART_Abort_IT+0xc0>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c94c:	4618      	mov	r0, r3
 800c94e:	f7f4 fc24 	bl	800119a <HAL_DMA_Abort_IT>
 800c952:	4603      	mov	r3, r0
 800c954:	2b00      	cmp	r3, #0
 800c956:	d004      	beq.n	800c962 <HAL_UART_Abort_IT+0xbc>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c95c:	2200      	movs	r2, #0
 800c95e:	639a      	str	r2, [r3, #56]	; 0x38
 800c960:	e001      	b.n	800c966 <HAL_UART_Abort_IT+0xc0>
      }
      else
      {
        abortcplt = 0U;
 800c962:	2300      	movs	r3, #0
 800c964:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	689b      	ldr	r3, [r3, #8]
 800c96c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c970:	2b40      	cmp	r3, #64	; 0x40
 800c972:	d11c      	bne.n	800c9ae <HAL_UART_Abort_IT+0x108>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	687a      	ldr	r2, [r7, #4]
 800c97a:	6812      	ldr	r2, [r2, #0]
 800c97c:	6892      	ldr	r2, [r2, #8]
 800c97e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c982:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d010      	beq.n	800c9ae <HAL_UART_Abort_IT+0x108>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c990:	4618      	mov	r0, r3
 800c992:	f7f4 fc02 	bl	800119a <HAL_DMA_Abort_IT>
 800c996:	4603      	mov	r3, r0
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d006      	beq.n	800c9aa <HAL_UART_Abort_IT+0x104>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	639a      	str	r2, [r3, #56]	; 0x38
        abortcplt = 1U;
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	60fb      	str	r3, [r7, #12]
 800c9a8:	e001      	b.n	800c9ae <HAL_UART_Abort_IT+0x108>
      }
      else
      {
        abortcplt = 0U;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	2b01      	cmp	r3, #1
 800c9b2:	d127      	bne.n	800ca04 <HAL_UART_Abort_IT+0x15e>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->RxXferCount = 0U;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	661a      	str	r2, [r3, #96]	; 0x60
    huart->TxISR = NULL;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	665a      	str	r2, [r3, #100]	; 0x64

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	220f      	movs	r2, #15
 800c9dc:	621a      	str	r2, [r3, #32]
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	687a      	ldr	r2, [r7, #4]
 800c9e4:	6812      	ldr	r2, [r2, #0]
 800c9e6:	8b12      	ldrh	r2, [r2, #24]
 800c9e8:	b292      	uxth	r2, r2
 800c9ea:	f042 0208 	orr.w	r2, r2, #8
 800c9ee:	b292      	uxth	r2, r2
 800c9f0:	831a      	strh	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2220      	movs	r2, #32
 800c9f6:	675a      	str	r2, [r3, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_READY;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2220      	movs	r2, #32
 800c9fc:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f000 fa32 	bl	800ce68 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800ca04:	2300      	movs	r3, #0
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3710      	adds	r7, #16
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}
 800ca0e:	bf00      	nop
 800ca10:	0800db89 	.word	0x0800db89
 800ca14:	0800dbeb 	.word	0x0800dbeb

0800ca18 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b082      	sub	sp, #8
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
  /* Disable interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	687a      	ldr	r2, [r7, #4]
 800ca26:	6812      	ldr	r2, [r2, #0]
 800ca28:	6812      	ldr	r2, [r2, #0]
 800ca2a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800ca2e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	689b      	ldr	r3, [r3, #8]
 800ca36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca3a:	2b80      	cmp	r3, #128	; 0x80
 800ca3c:	d12d      	bne.n	800ca9a <HAL_UART_AbortTransmit_IT+0x82>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	687a      	ldr	r2, [r7, #4]
 800ca44:	6812      	ldr	r2, [r2, #0]
 800ca46:	6892      	ldr	r2, [r2, #8]
 800ca48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ca4c:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d013      	beq.n	800ca7e <HAL_UART_AbortTransmit_IT+0x66>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca5a:	4a19      	ldr	r2, [pc, #100]	; (800cac0 <HAL_UART_AbortTransmit_IT+0xa8>)
 800ca5c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca62:	4618      	mov	r0, r3
 800ca64:	f7f4 fb99 	bl	800119a <HAL_DMA_Abort_IT>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d022      	beq.n	800cab4 <HAL_UART_AbortTransmit_IT+0x9c>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca74:	687a      	ldr	r2, [r7, #4]
 800ca76:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800ca78:	4610      	mov	r0, r2
 800ca7a:	4798      	blx	r3
 800ca7c:	e01a      	b.n	800cab4 <HAL_UART_AbortTransmit_IT+0x9c>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0U;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2200      	movs	r2, #0
 800ca82:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      /* Clear TxISR function pointers */
      huart->TxISR = NULL;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2220      	movs	r2, #32
 800ca90:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f000 f9f2 	bl	800ce7c <HAL_UART_AbortTransmitCpltCallback>
 800ca98:	e00c      	b.n	800cab4 <HAL_UART_AbortTransmit_IT+0x9c>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0U;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Clear TxISR function pointers */
    huart->TxISR = NULL;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2200      	movs	r2, #0
 800caa6:	665a      	str	r2, [r3, #100]	; 0x64
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2220      	movs	r2, #32
 800caac:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f000 f9e4 	bl	800ce7c <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800cab4:	2300      	movs	r3, #0
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	3708      	adds	r7, #8
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}
 800cabe:	bf00      	nop
 800cac0:	0800dc61 	.word	0x0800dc61

0800cac4 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b082      	sub	sp, #8
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	687a      	ldr	r2, [r7, #4]
 800cad2:	6812      	ldr	r2, [r2, #0]
 800cad4:	6812      	ldr	r2, [r2, #0]
 800cad6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800cada:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	687a      	ldr	r2, [r7, #4]
 800cae2:	6812      	ldr	r2, [r2, #0]
 800cae4:	6892      	ldr	r2, [r2, #8]
 800cae6:	f022 0201 	bic.w	r2, r2, #1
 800caea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	689b      	ldr	r3, [r3, #8]
 800caf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caf6:	2b40      	cmp	r3, #64	; 0x40
 800caf8:	d13b      	bne.n	800cb72 <HAL_UART_AbortReceive_IT+0xae>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	687a      	ldr	r2, [r7, #4]
 800cb00:	6812      	ldr	r2, [r2, #0]
 800cb02:	6892      	ldr	r2, [r2, #8]
 800cb04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cb08:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d013      	beq.n	800cb3a <HAL_UART_AbortReceive_IT+0x76>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb16:	4a22      	ldr	r2, [pc, #136]	; (800cba0 <HAL_UART_AbortReceive_IT+0xdc>)
 800cb18:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f7f4 fb3b 	bl	800119a <HAL_DMA_Abort_IT>
 800cb24:	4603      	mov	r3, r0
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d034      	beq.n	800cb94 <HAL_UART_AbortReceive_IT+0xd0>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb30:	687a      	ldr	r2, [r7, #4]
 800cb32:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800cb34:	4610      	mov	r0, r2
 800cb36:	4798      	blx	r3
 800cb38:	e02c      	b.n	800cb94 <HAL_UART_AbortReceive_IT+0xd0>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2200      	movs	r2, #0
 800cb46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	220f      	movs	r2, #15
 800cb4e:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	687a      	ldr	r2, [r7, #4]
 800cb56:	6812      	ldr	r2, [r2, #0]
 800cb58:	8b12      	ldrh	r2, [r2, #24]
 800cb5a:	b292      	uxth	r2, r2
 800cb5c:	f042 0208 	orr.w	r2, r2, #8
 800cb60:	b292      	uxth	r2, r2
 800cb62:	831a      	strh	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2220      	movs	r2, #32
 800cb68:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	f000 f990 	bl	800ce90 <HAL_UART_AbortReceiveCpltCallback>
 800cb70:	e010      	b.n	800cb94 <HAL_UART_AbortReceive_IT+0xd0>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2200      	movs	r2, #0
 800cb76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	220f      	movs	r2, #15
 800cb86:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2220      	movs	r2, #32
 800cb8c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f000 f97e 	bl	800ce90 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800cb94:	2300      	movs	r3, #0
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	3708      	adds	r7, #8
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}
 800cb9e:	bf00      	nop
 800cba0:	0800dc8b 	.word	0x0800dc8b

0800cba4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b088      	sub	sp, #32
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	69db      	ldr	r3, [r3, #28]
 800cbb2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	689b      	ldr	r3, [r3, #8]
 800cbc2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800cbc4:	69fb      	ldr	r3, [r7, #28]
 800cbc6:	f003 030f 	and.w	r3, r3, #15
 800cbca:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800cbcc:	693b      	ldr	r3, [r7, #16]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d113      	bne.n	800cbfa <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800cbd2:	69fb      	ldr	r3, [r7, #28]
 800cbd4:	f003 0320 	and.w	r3, r3, #32
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d00e      	beq.n	800cbfa <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800cbdc:	69bb      	ldr	r3, [r7, #24]
 800cbde:	f003 0320 	and.w	r3, r3, #32
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d009      	beq.n	800cbfa <HAL_UART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	f000 80ff 	beq.w	800cdee <HAL_UART_IRQHandler+0x24a>
      {
        huart->RxISR(huart);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	4798      	blx	r3
      }
      return;
 800cbf8:	e0f9      	b.n	800cdee <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800cbfa:	693b      	ldr	r3, [r7, #16]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	f000 80c1 	beq.w	800cd84 <HAL_UART_IRQHandler+0x1e0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	f003 0301 	and.w	r3, r3, #1
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d105      	bne.n	800cc18 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800cc0c:	69bb      	ldr	r3, [r7, #24]
 800cc0e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	f000 80b6 	beq.w	800cd84 <HAL_UART_IRQHandler+0x1e0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cc18:	69fb      	ldr	r3, [r7, #28]
 800cc1a:	f003 0301 	and.w	r3, r3, #1
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d00e      	beq.n	800cc40 <HAL_UART_IRQHandler+0x9c>
 800cc22:	69bb      	ldr	r3, [r7, #24]
 800cc24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d009      	beq.n	800cc40 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	2201      	movs	r2, #1
 800cc32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc38:	f043 0201 	orr.w	r2, r3, #1
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc40:	69fb      	ldr	r3, [r7, #28]
 800cc42:	f003 0302 	and.w	r3, r3, #2
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d00e      	beq.n	800cc68 <HAL_UART_IRQHandler+0xc4>
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	f003 0301 	and.w	r3, r3, #1
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d009      	beq.n	800cc68 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	2202      	movs	r2, #2
 800cc5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc60:	f043 0204 	orr.w	r2, r3, #4
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc68:	69fb      	ldr	r3, [r7, #28]
 800cc6a:	f003 0304 	and.w	r3, r3, #4
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d00e      	beq.n	800cc90 <HAL_UART_IRQHandler+0xec>
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	f003 0301 	and.w	r3, r3, #1
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d009      	beq.n	800cc90 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	2204      	movs	r2, #4
 800cc82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc88:	f043 0202 	orr.w	r2, r3, #2
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cc90:	69fb      	ldr	r3, [r7, #28]
 800cc92:	f003 0308 	and.w	r3, r3, #8
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d013      	beq.n	800ccc2 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800cc9a:	69bb      	ldr	r3, [r7, #24]
 800cc9c:	f003 0320 	and.w	r3, r3, #32
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d104      	bne.n	800ccae <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d009      	beq.n	800ccc2 <HAL_UART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	2208      	movs	r2, #8
 800ccb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccba:	f043 0208 	orr.w	r2, r3, #8
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	f000 8093 	beq.w	800cdf2 <HAL_UART_IRQHandler+0x24e>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800cccc:	69fb      	ldr	r3, [r7, #28]
 800ccce:	f003 0320 	and.w	r3, r3, #32
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d00c      	beq.n	800ccf0 <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ccd6:	69bb      	ldr	r3, [r7, #24]
 800ccd8:	f003 0320 	and.w	r3, r3, #32
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d007      	beq.n	800ccf0 <HAL_UART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d003      	beq.n	800ccf0 <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccf4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	689b      	ldr	r3, [r3, #8]
 800ccfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd00:	2b40      	cmp	r3, #64	; 0x40
 800cd02:	d004      	beq.n	800cd0e <HAL_UART_IRQHandler+0x16a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d031      	beq.n	800cd72 <HAL_UART_IRQHandler+0x1ce>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f000 fe4e 	bl	800d9b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	689b      	ldr	r3, [r3, #8]
 800cd1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd1e:	2b40      	cmp	r3, #64	; 0x40
 800cd20:	d123      	bne.n	800cd6a <HAL_UART_IRQHandler+0x1c6>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	687a      	ldr	r2, [r7, #4]
 800cd28:	6812      	ldr	r2, [r2, #0]
 800cd2a:	6892      	ldr	r2, [r2, #8]
 800cd2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cd30:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d013      	beq.n	800cd62 <HAL_UART_IRQHandler+0x1be>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd3e:	4a30      	ldr	r2, [pc, #192]	; (800ce00 <HAL_UART_IRQHandler+0x25c>)
 800cd40:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd46:	4618      	mov	r0, r3
 800cd48:	f7f4 fa27 	bl	800119a <HAL_DMA_Abort_IT>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d016      	beq.n	800cd80 <HAL_UART_IRQHandler+0x1dc>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd58:	687a      	ldr	r2, [r7, #4]
 800cd5a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800cd5c:	4610      	mov	r0, r2
 800cd5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd60:	e00e      	b.n	800cd80 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f000 f876 	bl	800ce54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd68:	e00a      	b.n	800cd80 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f000 f872 	bl	800ce54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd70:	e006      	b.n	800cd80 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f000 f86e 	bl	800ce54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800cd7e:	e038      	b.n	800cdf2 <HAL_UART_IRQHandler+0x24e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd80:	bf00      	nop
    return;
 800cd82:	e036      	b.n	800cdf2 <HAL_UART_IRQHandler+0x24e>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cd84:	69fb      	ldr	r3, [r7, #28]
 800cd86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d00d      	beq.n	800cdaa <HAL_UART_IRQHandler+0x206>
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d008      	beq.n	800cdaa <HAL_UART_IRQHandler+0x206>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800cda0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f001 f937 	bl	800e016 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cda8:	e026      	b.n	800cdf8 <HAL_UART_IRQHandler+0x254>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800cdaa:	69fb      	ldr	r3, [r7, #28]
 800cdac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d00d      	beq.n	800cdd0 <HAL_UART_IRQHandler+0x22c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800cdb4:	69bb      	ldr	r3, [r7, #24]
 800cdb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d008      	beq.n	800cdd0 <HAL_UART_IRQHandler+0x22c>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d017      	beq.n	800cdf6 <HAL_UART_IRQHandler+0x252>
    {
      huart->TxISR(huart);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	4798      	blx	r3
    }
    return;
 800cdce:	e012      	b.n	800cdf6 <HAL_UART_IRQHandler+0x252>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cdd0:	69fb      	ldr	r3, [r7, #28]
 800cdd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d00e      	beq.n	800cdf8 <HAL_UART_IRQHandler+0x254>
 800cdda:	69bb      	ldr	r3, [r7, #24]
 800cddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d009      	beq.n	800cdf8 <HAL_UART_IRQHandler+0x254>
  {
    UART_EndTransmit_IT(huart);
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f000 ffeb 	bl	800ddc0 <UART_EndTransmit_IT>
    return;
 800cdea:	bf00      	nop
 800cdec:	e004      	b.n	800cdf8 <HAL_UART_IRQHandler+0x254>
      return;
 800cdee:	bf00      	nop
 800cdf0:	e002      	b.n	800cdf8 <HAL_UART_IRQHandler+0x254>
    return;
 800cdf2:	bf00      	nop
 800cdf4:	e000      	b.n	800cdf8 <HAL_UART_IRQHandler+0x254>
    return;
 800cdf6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800cdf8:	3720      	adds	r7, #32
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}
 800cdfe:	bf00      	nop
 800ce00:	0800db5d 	.word	0x0800db5d

0800ce04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ce04:	b480      	push	{r7}
 800ce06:	b083      	sub	sp, #12
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ce0c:	bf00      	nop
 800ce0e:	370c      	adds	r7, #12
 800ce10:	46bd      	mov	sp, r7
 800ce12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce16:	4770      	bx	lr

0800ce18 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b083      	sub	sp, #12
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ce20:	bf00      	nop
 800ce22:	370c      	adds	r7, #12
 800ce24:	46bd      	mov	sp, r7
 800ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2a:	4770      	bx	lr

0800ce2c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	b083      	sub	sp, #12
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800ce34:	bf00      	nop
 800ce36:	370c      	adds	r7, #12
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3e:	4770      	bx	lr

0800ce40 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b083      	sub	sp, #12
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ce48:	bf00      	nop
 800ce4a:	370c      	adds	r7, #12
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce52:	4770      	bx	lr

0800ce54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ce54:	b480      	push	{r7}
 800ce56:	b083      	sub	sp, #12
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ce5c:	bf00      	nop
 800ce5e:	370c      	adds	r7, #12
 800ce60:	46bd      	mov	sp, r7
 800ce62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce66:	4770      	bx	lr

0800ce68 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800ce68:	b480      	push	{r7}
 800ce6a:	b083      	sub	sp, #12
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800ce70:	bf00      	nop
 800ce72:	370c      	adds	r7, #12
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr

0800ce7c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b083      	sub	sp, #12
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800ce84:	bf00      	nop
 800ce86:	370c      	adds	r7, #12
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8e:	4770      	bx	lr

0800ce90 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800ce90:	b480      	push	{r7}
 800ce92:	b083      	sub	sp, #12
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800ce98:	bf00      	nop
 800ce9a:	370c      	adds	r7, #12
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea2:	4770      	bx	lr

0800cea4 <HAL_MultiProcessor_EnableMuteMode>:
  *         to enter mute mode, HAL_MultiProcessor_EnterMuteMode() API must be called).
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_EnableMuteMode(UART_HandleTypeDef *huart)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b082      	sub	sp, #8
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800ceb2:	2b01      	cmp	r3, #1
 800ceb4:	d101      	bne.n	800ceba <HAL_MultiProcessor_EnableMuteMode+0x16>
 800ceb6:	2302      	movs	r3, #2
 800ceb8:	e015      	b.n	800cee6 <HAL_MultiProcessor_EnableMuteMode+0x42>
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2201      	movs	r2, #1
 800cebe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  huart->gState = HAL_UART_STATE_BUSY;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	2224      	movs	r2, #36	; 0x24
 800cec6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Enable USART mute mode by setting the MME bit in the CR1 register */
  SET_BIT(huart->Instance->CR1, USART_CR1_MME);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	687a      	ldr	r2, [r7, #4]
 800cece:	6812      	ldr	r2, [r2, #0]
 800ced0:	6812      	ldr	r2, [r2, #0]
 800ced2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ced6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2220      	movs	r2, #32
 800cedc:	675a      	str	r2, [r3, #116]	; 0x74

  return (UART_CheckIdleState(huart));
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f000 fcc4 	bl	800d86c <UART_CheckIdleState>
 800cee4:	4603      	mov	r3, r0
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3708      	adds	r7, #8
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}

0800ceee <HAL_MultiProcessor_DisableMuteMode>:
  *         as it may not have been in mute mode at this very moment).
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_DisableMuteMode(UART_HandleTypeDef *huart)
{
 800ceee:	b580      	push	{r7, lr}
 800cef0:	b082      	sub	sp, #8
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800cefc:	2b01      	cmp	r3, #1
 800cefe:	d101      	bne.n	800cf04 <HAL_MultiProcessor_DisableMuteMode+0x16>
 800cf00:	2302      	movs	r3, #2
 800cf02:	e015      	b.n	800cf30 <HAL_MultiProcessor_DisableMuteMode+0x42>
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2201      	movs	r2, #1
 800cf08:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  huart->gState = HAL_UART_STATE_BUSY;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2224      	movs	r2, #36	; 0x24
 800cf10:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable USART mute mode by clearing the MME bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_MME);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	687a      	ldr	r2, [r7, #4]
 800cf18:	6812      	ldr	r2, [r2, #0]
 800cf1a:	6812      	ldr	r2, [r2, #0]
 800cf1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cf20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2220      	movs	r2, #32
 800cf26:	675a      	str	r2, [r3, #116]	; 0x74

  return (UART_CheckIdleState(huart));
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f000 fc9f 	bl	800d86c <UART_CheckIdleState>
 800cf2e:	4603      	mov	r3, r0
}
 800cf30:	4618      	mov	r0, r3
 800cf32:	3708      	adds	r7, #8
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}

0800cf38 <HAL_MultiProcessor_EnterMuteMode>:
  * @note  To exit from mute mode, HAL_MultiProcessor_DisableMuteMode() API must be called.
  * @param huart UART handle.
  * @retval None
  */
void HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b083      	sub	sp, #12
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
  __HAL_UART_SEND_REQ(huart, UART_MUTE_MODE_REQUEST);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	687a      	ldr	r2, [r7, #4]
 800cf46:	6812      	ldr	r2, [r2, #0]
 800cf48:	8b12      	ldrh	r2, [r2, #24]
 800cf4a:	b292      	uxth	r2, r2
 800cf4c:	f042 0204 	orr.w	r2, r2, #4
 800cf50:	b292      	uxth	r2, r2
 800cf52:	831a      	strh	r2, [r3, #24]
}
 800cf54:	bf00      	nop
 800cf56:	370c      	adds	r7, #12
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5e:	4770      	bx	lr

0800cf60 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800cf60:	b480      	push	{r7}
 800cf62:	b083      	sub	sp, #12
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800cf6e:	2b01      	cmp	r3, #1
 800cf70:	d101      	bne.n	800cf76 <HAL_HalfDuplex_EnableTransmitter+0x16>
 800cf72:	2302      	movs	r3, #2
 800cf74:	e01e      	b.n	800cfb4 <HAL_HalfDuplex_EnableTransmitter+0x54>
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2201      	movs	r2, #1
 800cf7a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
  huart->gState = HAL_UART_STATE_BUSY;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2224      	movs	r2, #36	; 0x24
 800cf82:	675a      	str	r2, [r3, #116]	; 0x74

  /* Clear TE and RE bits */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	687a      	ldr	r2, [r7, #4]
 800cf8a:	6812      	ldr	r2, [r2, #0]
 800cf8c:	6812      	ldr	r2, [r2, #0]
 800cf8e:	f022 020c 	bic.w	r2, r2, #12
 800cf92:	601a      	str	r2, [r3, #0]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	687a      	ldr	r2, [r7, #4]
 800cf9a:	6812      	ldr	r2, [r2, #0]
 800cf9c:	6812      	ldr	r2, [r2, #0]
 800cf9e:	f042 0208 	orr.w	r2, r2, #8
 800cfa2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2220      	movs	r2, #32
 800cfa8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UNLOCK(huart);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2200      	movs	r2, #0
 800cfae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800cfb2:	2300      	movs	r3, #0
}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	370c      	adds	r7, #12
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbe:	4770      	bx	lr

0800cfc0 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b083      	sub	sp, #12
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800cfce:	2b01      	cmp	r3, #1
 800cfd0:	d101      	bne.n	800cfd6 <HAL_HalfDuplex_EnableReceiver+0x16>
 800cfd2:	2302      	movs	r3, #2
 800cfd4:	e01e      	b.n	800d014 <HAL_HalfDuplex_EnableReceiver+0x54>
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2201      	movs	r2, #1
 800cfda:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
  huart->gState = HAL_UART_STATE_BUSY;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2224      	movs	r2, #36	; 0x24
 800cfe2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Clear TE and RE bits */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	687a      	ldr	r2, [r7, #4]
 800cfea:	6812      	ldr	r2, [r2, #0]
 800cfec:	6812      	ldr	r2, [r2, #0]
 800cfee:	f022 020c 	bic.w	r2, r2, #12
 800cff2:	601a      	str	r2, [r3, #0]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	687a      	ldr	r2, [r7, #4]
 800cffa:	6812      	ldr	r2, [r2, #0]
 800cffc:	6812      	ldr	r2, [r2, #0]
 800cffe:	f042 0204 	orr.w	r2, r2, #4
 800d002:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2220      	movs	r2, #32
 800d008:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UNLOCK(huart);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2200      	movs	r2, #0
 800d00e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800d012:	2300      	movs	r3, #0
}
 800d014:	4618      	mov	r0, r3
 800d016:	370c      	adds	r7, #12
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr

0800d020 <HAL_LIN_SendBreak>:
  * @brief  Transmit break characters.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 800d020:	b480      	push	{r7}
 800d022:	b083      	sub	sp, #12
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_LIN_INSTANCE(huart->Instance));

  __HAL_LOCK(huart);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800d02e:	2b01      	cmp	r3, #1
 800d030:	d101      	bne.n	800d036 <HAL_LIN_SendBreak+0x16>
 800d032:	2302      	movs	r3, #2
 800d034:	e018      	b.n	800d068 <HAL_LIN_SendBreak+0x48>
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2201      	movs	r2, #1
 800d03a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  huart->gState = HAL_UART_STATE_BUSY;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2224      	movs	r2, #36	; 0x24
 800d042:	675a      	str	r2, [r3, #116]	; 0x74

  /* Send break characters */
  __HAL_UART_SEND_REQ(huart, UART_SENDBREAK_REQUEST);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	687a      	ldr	r2, [r7, #4]
 800d04a:	6812      	ldr	r2, [r2, #0]
 800d04c:	8b12      	ldrh	r2, [r2, #24]
 800d04e:	b292      	uxth	r2, r2
 800d050:	f042 0202 	orr.w	r2, r2, #2
 800d054:	b292      	uxth	r2, r2
 800d056:	831a      	strh	r2, [r3, #24]

  huart->gState = HAL_UART_STATE_READY;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2220      	movs	r2, #32
 800d05c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UNLOCK(huart);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2200      	movs	r2, #0
 800d062:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800d066:	2300      	movs	r3, #0
}
 800d068:	4618      	mov	r0, r3
 800d06a:	370c      	adds	r7, #12
 800d06c:	46bd      	mov	sp, r7
 800d06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d072:	4770      	bx	lr

0800d074 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 800d074:	b480      	push	{r7}
 800d076:	b085      	sub	sp, #20
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d080:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d086:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800d088:	68fa      	ldr	r2, [r7, #12]
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	4313      	orrs	r3, r2
}
 800d08e:	4618      	mov	r0, r3
 800d090:	3714      	adds	r7, #20
 800d092:	46bd      	mov	sp, r7
 800d094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d098:	4770      	bx	lr

0800d09a <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 800d09a:	b480      	push	{r7}
 800d09c:	b083      	sub	sp, #12
 800d09e:	af00      	add	r7, sp, #0
 800d0a0:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
}
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	370c      	adds	r7, #12
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b0:	4770      	bx	lr

0800d0b2 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d0b2:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d0b6:	b088      	sub	sp, #32
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	689a      	ldr	r2, [r3, #8]
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	691b      	ldr	r3, [r3, #16]
 800d0d0:	431a      	orrs	r2, r3
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	695b      	ldr	r3, [r3, #20]
 800d0d6:	431a      	orrs	r2, r3
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	69db      	ldr	r3, [r3, #28]
 800d0dc:	4313      	orrs	r3, r2
 800d0de:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681a      	ldr	r2, [r3, #0]
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	6819      	ldr	r1, [r3, #0]
 800d0ea:	4bac      	ldr	r3, [pc, #688]	; (800d39c <UART_SetConfig+0x2ea>)
 800d0ec:	400b      	ands	r3, r1
 800d0ee:	69f9      	ldr	r1, [r7, #28]
 800d0f0:	430b      	orrs	r3, r1
 800d0f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	687a      	ldr	r2, [r7, #4]
 800d0fa:	6812      	ldr	r2, [r2, #0]
 800d0fc:	6852      	ldr	r2, [r2, #4]
 800d0fe:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800d102:	687a      	ldr	r2, [r7, #4]
 800d104:	68d2      	ldr	r2, [r2, #12]
 800d106:	430a      	orrs	r2, r1
 800d108:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	699b      	ldr	r3, [r3, #24]
 800d10e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	4aa2      	ldr	r2, [pc, #648]	; (800d3a0 <UART_SetConfig+0x2ee>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d004      	beq.n	800d124 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	6a1b      	ldr	r3, [r3, #32]
 800d11e:	69fa      	ldr	r2, [r7, #28]
 800d120:	4313      	orrs	r3, r2
 800d122:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	687a      	ldr	r2, [r7, #4]
 800d12a:	6812      	ldr	r2, [r2, #0]
 800d12c:	6892      	ldr	r2, [r2, #8]
 800d12e:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 800d132:	69fa      	ldr	r2, [r7, #28]
 800d134:	430a      	orrs	r2, r1
 800d136:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	4a99      	ldr	r2, [pc, #612]	; (800d3a4 <UART_SetConfig+0x2f2>)
 800d13e:	4293      	cmp	r3, r2
 800d140:	d122      	bne.n	800d188 <UART_SetConfig+0xd6>
 800d142:	4b99      	ldr	r3, [pc, #612]	; (800d3a8 <UART_SetConfig+0x2f6>)
 800d144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d148:	f003 0303 	and.w	r3, r3, #3
 800d14c:	2b03      	cmp	r3, #3
 800d14e:	d817      	bhi.n	800d180 <UART_SetConfig+0xce>
 800d150:	a201      	add	r2, pc, #4	; (adr r2, 800d158 <UART_SetConfig+0xa6>)
 800d152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d156:	bf00      	nop
 800d158:	0800d169 	.word	0x0800d169
 800d15c:	0800d175 	.word	0x0800d175
 800d160:	0800d16f 	.word	0x0800d16f
 800d164:	0800d17b 	.word	0x0800d17b
 800d168:	2301      	movs	r3, #1
 800d16a:	76fb      	strb	r3, [r7, #27]
 800d16c:	e0e8      	b.n	800d340 <UART_SetConfig+0x28e>
 800d16e:	2302      	movs	r3, #2
 800d170:	76fb      	strb	r3, [r7, #27]
 800d172:	e0e5      	b.n	800d340 <UART_SetConfig+0x28e>
 800d174:	2304      	movs	r3, #4
 800d176:	76fb      	strb	r3, [r7, #27]
 800d178:	e0e2      	b.n	800d340 <UART_SetConfig+0x28e>
 800d17a:	2308      	movs	r3, #8
 800d17c:	76fb      	strb	r3, [r7, #27]
 800d17e:	e0df      	b.n	800d340 <UART_SetConfig+0x28e>
 800d180:	2310      	movs	r3, #16
 800d182:	76fb      	strb	r3, [r7, #27]
 800d184:	bf00      	nop
 800d186:	e0db      	b.n	800d340 <UART_SetConfig+0x28e>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	4a87      	ldr	r2, [pc, #540]	; (800d3ac <UART_SetConfig+0x2fa>)
 800d18e:	4293      	cmp	r3, r2
 800d190:	d134      	bne.n	800d1fc <UART_SetConfig+0x14a>
 800d192:	4b85      	ldr	r3, [pc, #532]	; (800d3a8 <UART_SetConfig+0x2f6>)
 800d194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d198:	f003 030c 	and.w	r3, r3, #12
 800d19c:	2b0c      	cmp	r3, #12
 800d19e:	d829      	bhi.n	800d1f4 <UART_SetConfig+0x142>
 800d1a0:	a201      	add	r2, pc, #4	; (adr r2, 800d1a8 <UART_SetConfig+0xf6>)
 800d1a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1a6:	bf00      	nop
 800d1a8:	0800d1dd 	.word	0x0800d1dd
 800d1ac:	0800d1f5 	.word	0x0800d1f5
 800d1b0:	0800d1f5 	.word	0x0800d1f5
 800d1b4:	0800d1f5 	.word	0x0800d1f5
 800d1b8:	0800d1e9 	.word	0x0800d1e9
 800d1bc:	0800d1f5 	.word	0x0800d1f5
 800d1c0:	0800d1f5 	.word	0x0800d1f5
 800d1c4:	0800d1f5 	.word	0x0800d1f5
 800d1c8:	0800d1e3 	.word	0x0800d1e3
 800d1cc:	0800d1f5 	.word	0x0800d1f5
 800d1d0:	0800d1f5 	.word	0x0800d1f5
 800d1d4:	0800d1f5 	.word	0x0800d1f5
 800d1d8:	0800d1ef 	.word	0x0800d1ef
 800d1dc:	2300      	movs	r3, #0
 800d1de:	76fb      	strb	r3, [r7, #27]
 800d1e0:	e0ae      	b.n	800d340 <UART_SetConfig+0x28e>
 800d1e2:	2302      	movs	r3, #2
 800d1e4:	76fb      	strb	r3, [r7, #27]
 800d1e6:	e0ab      	b.n	800d340 <UART_SetConfig+0x28e>
 800d1e8:	2304      	movs	r3, #4
 800d1ea:	76fb      	strb	r3, [r7, #27]
 800d1ec:	e0a8      	b.n	800d340 <UART_SetConfig+0x28e>
 800d1ee:	2308      	movs	r3, #8
 800d1f0:	76fb      	strb	r3, [r7, #27]
 800d1f2:	e0a5      	b.n	800d340 <UART_SetConfig+0x28e>
 800d1f4:	2310      	movs	r3, #16
 800d1f6:	76fb      	strb	r3, [r7, #27]
 800d1f8:	bf00      	nop
 800d1fa:	e0a1      	b.n	800d340 <UART_SetConfig+0x28e>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4a6b      	ldr	r2, [pc, #428]	; (800d3b0 <UART_SetConfig+0x2fe>)
 800d202:	4293      	cmp	r3, r2
 800d204:	d120      	bne.n	800d248 <UART_SetConfig+0x196>
 800d206:	4b68      	ldr	r3, [pc, #416]	; (800d3a8 <UART_SetConfig+0x2f6>)
 800d208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d20c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d210:	2b10      	cmp	r3, #16
 800d212:	d00f      	beq.n	800d234 <UART_SetConfig+0x182>
 800d214:	2b10      	cmp	r3, #16
 800d216:	d802      	bhi.n	800d21e <UART_SetConfig+0x16c>
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d005      	beq.n	800d228 <UART_SetConfig+0x176>
 800d21c:	e010      	b.n	800d240 <UART_SetConfig+0x18e>
 800d21e:	2b20      	cmp	r3, #32
 800d220:	d005      	beq.n	800d22e <UART_SetConfig+0x17c>
 800d222:	2b30      	cmp	r3, #48	; 0x30
 800d224:	d009      	beq.n	800d23a <UART_SetConfig+0x188>
 800d226:	e00b      	b.n	800d240 <UART_SetConfig+0x18e>
 800d228:	2300      	movs	r3, #0
 800d22a:	76fb      	strb	r3, [r7, #27]
 800d22c:	e088      	b.n	800d340 <UART_SetConfig+0x28e>
 800d22e:	2302      	movs	r3, #2
 800d230:	76fb      	strb	r3, [r7, #27]
 800d232:	e085      	b.n	800d340 <UART_SetConfig+0x28e>
 800d234:	2304      	movs	r3, #4
 800d236:	76fb      	strb	r3, [r7, #27]
 800d238:	e082      	b.n	800d340 <UART_SetConfig+0x28e>
 800d23a:	2308      	movs	r3, #8
 800d23c:	76fb      	strb	r3, [r7, #27]
 800d23e:	e07f      	b.n	800d340 <UART_SetConfig+0x28e>
 800d240:	2310      	movs	r3, #16
 800d242:	76fb      	strb	r3, [r7, #27]
 800d244:	bf00      	nop
 800d246:	e07b      	b.n	800d340 <UART_SetConfig+0x28e>
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	4a59      	ldr	r2, [pc, #356]	; (800d3b4 <UART_SetConfig+0x302>)
 800d24e:	4293      	cmp	r3, r2
 800d250:	d120      	bne.n	800d294 <UART_SetConfig+0x1e2>
 800d252:	4b55      	ldr	r3, [pc, #340]	; (800d3a8 <UART_SetConfig+0x2f6>)
 800d254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d258:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d25c:	2b40      	cmp	r3, #64	; 0x40
 800d25e:	d00f      	beq.n	800d280 <UART_SetConfig+0x1ce>
 800d260:	2b40      	cmp	r3, #64	; 0x40
 800d262:	d802      	bhi.n	800d26a <UART_SetConfig+0x1b8>
 800d264:	2b00      	cmp	r3, #0
 800d266:	d005      	beq.n	800d274 <UART_SetConfig+0x1c2>
 800d268:	e010      	b.n	800d28c <UART_SetConfig+0x1da>
 800d26a:	2b80      	cmp	r3, #128	; 0x80
 800d26c:	d005      	beq.n	800d27a <UART_SetConfig+0x1c8>
 800d26e:	2bc0      	cmp	r3, #192	; 0xc0
 800d270:	d009      	beq.n	800d286 <UART_SetConfig+0x1d4>
 800d272:	e00b      	b.n	800d28c <UART_SetConfig+0x1da>
 800d274:	2300      	movs	r3, #0
 800d276:	76fb      	strb	r3, [r7, #27]
 800d278:	e062      	b.n	800d340 <UART_SetConfig+0x28e>
 800d27a:	2302      	movs	r3, #2
 800d27c:	76fb      	strb	r3, [r7, #27]
 800d27e:	e05f      	b.n	800d340 <UART_SetConfig+0x28e>
 800d280:	2304      	movs	r3, #4
 800d282:	76fb      	strb	r3, [r7, #27]
 800d284:	e05c      	b.n	800d340 <UART_SetConfig+0x28e>
 800d286:	2308      	movs	r3, #8
 800d288:	76fb      	strb	r3, [r7, #27]
 800d28a:	e059      	b.n	800d340 <UART_SetConfig+0x28e>
 800d28c:	2310      	movs	r3, #16
 800d28e:	76fb      	strb	r3, [r7, #27]
 800d290:	bf00      	nop
 800d292:	e055      	b.n	800d340 <UART_SetConfig+0x28e>
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	4a47      	ldr	r2, [pc, #284]	; (800d3b8 <UART_SetConfig+0x306>)
 800d29a:	4293      	cmp	r3, r2
 800d29c:	d124      	bne.n	800d2e8 <UART_SetConfig+0x236>
 800d29e:	4b42      	ldr	r3, [pc, #264]	; (800d3a8 <UART_SetConfig+0x2f6>)
 800d2a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d2a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d2ac:	d012      	beq.n	800d2d4 <UART_SetConfig+0x222>
 800d2ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d2b2:	d802      	bhi.n	800d2ba <UART_SetConfig+0x208>
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d007      	beq.n	800d2c8 <UART_SetConfig+0x216>
 800d2b8:	e012      	b.n	800d2e0 <UART_SetConfig+0x22e>
 800d2ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d2be:	d006      	beq.n	800d2ce <UART_SetConfig+0x21c>
 800d2c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d2c4:	d009      	beq.n	800d2da <UART_SetConfig+0x228>
 800d2c6:	e00b      	b.n	800d2e0 <UART_SetConfig+0x22e>
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	76fb      	strb	r3, [r7, #27]
 800d2cc:	e038      	b.n	800d340 <UART_SetConfig+0x28e>
 800d2ce:	2302      	movs	r3, #2
 800d2d0:	76fb      	strb	r3, [r7, #27]
 800d2d2:	e035      	b.n	800d340 <UART_SetConfig+0x28e>
 800d2d4:	2304      	movs	r3, #4
 800d2d6:	76fb      	strb	r3, [r7, #27]
 800d2d8:	e032      	b.n	800d340 <UART_SetConfig+0x28e>
 800d2da:	2308      	movs	r3, #8
 800d2dc:	76fb      	strb	r3, [r7, #27]
 800d2de:	e02f      	b.n	800d340 <UART_SetConfig+0x28e>
 800d2e0:	2310      	movs	r3, #16
 800d2e2:	76fb      	strb	r3, [r7, #27]
 800d2e4:	bf00      	nop
 800d2e6:	e02b      	b.n	800d340 <UART_SetConfig+0x28e>
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	4a2c      	ldr	r2, [pc, #176]	; (800d3a0 <UART_SetConfig+0x2ee>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d124      	bne.n	800d33c <UART_SetConfig+0x28a>
 800d2f2:	4b2d      	ldr	r3, [pc, #180]	; (800d3a8 <UART_SetConfig+0x2f6>)
 800d2f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d2fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d300:	d012      	beq.n	800d328 <UART_SetConfig+0x276>
 800d302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d306:	d802      	bhi.n	800d30e <UART_SetConfig+0x25c>
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d007      	beq.n	800d31c <UART_SetConfig+0x26a>
 800d30c:	e012      	b.n	800d334 <UART_SetConfig+0x282>
 800d30e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d312:	d006      	beq.n	800d322 <UART_SetConfig+0x270>
 800d314:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d318:	d009      	beq.n	800d32e <UART_SetConfig+0x27c>
 800d31a:	e00b      	b.n	800d334 <UART_SetConfig+0x282>
 800d31c:	2300      	movs	r3, #0
 800d31e:	76fb      	strb	r3, [r7, #27]
 800d320:	e00e      	b.n	800d340 <UART_SetConfig+0x28e>
 800d322:	2302      	movs	r3, #2
 800d324:	76fb      	strb	r3, [r7, #27]
 800d326:	e00b      	b.n	800d340 <UART_SetConfig+0x28e>
 800d328:	2304      	movs	r3, #4
 800d32a:	76fb      	strb	r3, [r7, #27]
 800d32c:	e008      	b.n	800d340 <UART_SetConfig+0x28e>
 800d32e:	2308      	movs	r3, #8
 800d330:	76fb      	strb	r3, [r7, #27]
 800d332:	e005      	b.n	800d340 <UART_SetConfig+0x28e>
 800d334:	2310      	movs	r3, #16
 800d336:	76fb      	strb	r3, [r7, #27]
 800d338:	bf00      	nop
 800d33a:	e001      	b.n	800d340 <UART_SetConfig+0x28e>
 800d33c:	2310      	movs	r3, #16
 800d33e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	4a16      	ldr	r2, [pc, #88]	; (800d3a0 <UART_SetConfig+0x2ee>)
 800d346:	4293      	cmp	r3, r2
 800d348:	f040 80ed 	bne.w	800d526 <UART_SetConfig+0x474>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d34c:	7efb      	ldrb	r3, [r7, #27]
 800d34e:	2b08      	cmp	r3, #8
 800d350:	d836      	bhi.n	800d3c0 <UART_SetConfig+0x30e>
 800d352:	a201      	add	r2, pc, #4	; (adr r2, 800d358 <UART_SetConfig+0x2a6>)
 800d354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d358:	0800d37d 	.word	0x0800d37d
 800d35c:	0800d3c1 	.word	0x0800d3c1
 800d360:	0800d385 	.word	0x0800d385
 800d364:	0800d3c1 	.word	0x0800d3c1
 800d368:	0800d38b 	.word	0x0800d38b
 800d36c:	0800d3c1 	.word	0x0800d3c1
 800d370:	0800d3c1 	.word	0x0800d3c1
 800d374:	0800d3c1 	.word	0x0800d3c1
 800d378:	0800d393 	.word	0x0800d393
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800d37c:	f7f6 faba 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 800d380:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800d382:	e020      	b.n	800d3c6 <UART_SetConfig+0x314>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800d384:	4b0d      	ldr	r3, [pc, #52]	; (800d3bc <UART_SetConfig+0x30a>)
 800d386:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800d388:	e01d      	b.n	800d3c6 <UART_SetConfig+0x314>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800d38a:	f7f6 fa1d 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 800d38e:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800d390:	e019      	b.n	800d3c6 <UART_SetConfig+0x314>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800d392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d396:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800d398:	e015      	b.n	800d3c6 <UART_SetConfig+0x314>
 800d39a:	bf00      	nop
 800d39c:	efff69f3 	.word	0xefff69f3
 800d3a0:	40008000 	.word	0x40008000
 800d3a4:	40013800 	.word	0x40013800
 800d3a8:	40021000 	.word	0x40021000
 800d3ac:	40004400 	.word	0x40004400
 800d3b0:	40004800 	.word	0x40004800
 800d3b4:	40004c00 	.word	0x40004c00
 800d3b8:	40005000 	.word	0x40005000
 800d3bc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	74fb      	strb	r3, [r7, #19]
        break;
 800d3c4:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	f000 819e 	beq.w	800d70a <UART_SetConfig+0x658>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	685a      	ldr	r2, [r3, #4]
 800d3d2:	4613      	mov	r3, r2
 800d3d4:	005b      	lsls	r3, r3, #1
 800d3d6:	441a      	add	r2, r3
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	d805      	bhi.n	800d3ea <UART_SetConfig+0x338>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	685b      	ldr	r3, [r3, #4]
 800d3e2:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	d202      	bcs.n	800d3f0 <UART_SetConfig+0x33e>
      {
        ret = HAL_ERROR;
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	74fb      	strb	r3, [r7, #19]
 800d3ee:	e18c      	b.n	800d70a <UART_SetConfig+0x658>
      }
      else
      {
        switch (clocksource)
 800d3f0:	7efb      	ldrb	r3, [r7, #27]
 800d3f2:	2b08      	cmp	r3, #8
 800d3f4:	f200 8084 	bhi.w	800d500 <UART_SetConfig+0x44e>
 800d3f8:	a201      	add	r2, pc, #4	; (adr r2, 800d400 <UART_SetConfig+0x34e>)
 800d3fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3fe:	bf00      	nop
 800d400:	0800d425 	.word	0x0800d425
 800d404:	0800d501 	.word	0x0800d501
 800d408:	0800d465 	.word	0x0800d465
 800d40c:	0800d501 	.word	0x0800d501
 800d410:	0800d499 	.word	0x0800d499
 800d414:	0800d501 	.word	0x0800d501
 800d418:	0800d501 	.word	0x0800d501
 800d41c:	0800d501 	.word	0x0800d501
 800d420:	0800d4d7 	.word	0x0800d4d7
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800d424:	f7f6 fa66 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 800d428:	4603      	mov	r3, r0
 800d42a:	f04f 0400 	mov.w	r4, #0
 800d42e:	ea4f 2904 	mov.w	r9, r4, lsl #8
 800d432:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 800d436:	ea4f 2803 	mov.w	r8, r3, lsl #8
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	685b      	ldr	r3, [r3, #4]
 800d43e:	085b      	lsrs	r3, r3, #1
 800d440:	f04f 0400 	mov.w	r4, #0
 800d444:	eb18 0003 	adds.w	r0, r8, r3
 800d448:	eb49 0104 	adc.w	r1, r9, r4
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	685b      	ldr	r3, [r3, #4]
 800d450:	f04f 0400 	mov.w	r4, #0
 800d454:	461a      	mov	r2, r3
 800d456:	4623      	mov	r3, r4
 800d458:	f001 feb6 	bl	800f1c8 <__aeabi_uldivmod>
 800d45c:	4603      	mov	r3, r0
 800d45e:	460c      	mov	r4, r1
 800d460:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800d462:	e050      	b.n	800d506 <UART_SetConfig+0x454>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	685b      	ldr	r3, [r3, #4]
 800d468:	085b      	lsrs	r3, r3, #1
 800d46a:	f04f 0400 	mov.w	r4, #0
 800d46e:	49ad      	ldr	r1, [pc, #692]	; (800d724 <UART_SetConfig+0x672>)
 800d470:	f04f 0200 	mov.w	r2, #0
 800d474:	eb13 0801 	adds.w	r8, r3, r1
 800d478:	eb44 0902 	adc.w	r9, r4, r2
 800d47c:	4640      	mov	r0, r8
 800d47e:	4649      	mov	r1, r9
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	685b      	ldr	r3, [r3, #4]
 800d484:	f04f 0400 	mov.w	r4, #0
 800d488:	461a      	mov	r2, r3
 800d48a:	4623      	mov	r3, r4
 800d48c:	f001 fe9c 	bl	800f1c8 <__aeabi_uldivmod>
 800d490:	4603      	mov	r3, r0
 800d492:	460c      	mov	r4, r1
 800d494:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800d496:	e036      	b.n	800d506 <UART_SetConfig+0x454>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800d498:	f7f6 f996 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 800d49c:	4603      	mov	r3, r0
 800d49e:	461a      	mov	r2, r3
 800d4a0:	f04f 0300 	mov.w	r3, #0
 800d4a4:	021d      	lsls	r5, r3, #8
 800d4a6:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 800d4aa:	0214      	lsls	r4, r2, #8
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	685b      	ldr	r3, [r3, #4]
 800d4b0:	085b      	lsrs	r3, r3, #1
 800d4b2:	461a      	mov	r2, r3
 800d4b4:	f04f 0300 	mov.w	r3, #0
 800d4b8:	18a0      	adds	r0, r4, r2
 800d4ba:	eb45 0103 	adc.w	r1, r5, r3
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	685b      	ldr	r3, [r3, #4]
 800d4c2:	f04f 0400 	mov.w	r4, #0
 800d4c6:	461a      	mov	r2, r3
 800d4c8:	4623      	mov	r3, r4
 800d4ca:	f001 fe7d 	bl	800f1c8 <__aeabi_uldivmod>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	460c      	mov	r4, r1
 800d4d2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800d4d4:	e017      	b.n	800d506 <UART_SetConfig+0x454>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	685b      	ldr	r3, [r3, #4]
 800d4da:	085b      	lsrs	r3, r3, #1
 800d4dc:	f04f 0400 	mov.w	r4, #0
 800d4e0:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800d4e4:	f144 0100 	adc.w	r1, r4, #0
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	685b      	ldr	r3, [r3, #4]
 800d4ec:	f04f 0400 	mov.w	r4, #0
 800d4f0:	461a      	mov	r2, r3
 800d4f2:	4623      	mov	r3, r4
 800d4f4:	f001 fe68 	bl	800f1c8 <__aeabi_uldivmod>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	460c      	mov	r4, r1
 800d4fc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800d4fe:	e002      	b.n	800d506 <UART_SetConfig+0x454>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 800d500:	2301      	movs	r3, #1
 800d502:	74fb      	strb	r3, [r7, #19]
            break;
 800d504:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d50c:	d308      	bcc.n	800d520 <UART_SetConfig+0x46e>
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d514:	d204      	bcs.n	800d520 <UART_SetConfig+0x46e>
        {
          huart->Instance->BRR = usartdiv;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	697a      	ldr	r2, [r7, #20]
 800d51c:	60da      	str	r2, [r3, #12]
 800d51e:	e0f4      	b.n	800d70a <UART_SetConfig+0x658>
        }
        else
        {
          ret = HAL_ERROR;
 800d520:	2301      	movs	r3, #1
 800d522:	74fb      	strb	r3, [r7, #19]
 800d524:	e0f1      	b.n	800d70a <UART_SetConfig+0x658>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	69db      	ldr	r3, [r3, #28]
 800d52a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d52e:	d17e      	bne.n	800d62e <UART_SetConfig+0x57c>
  {
    switch (clocksource)
 800d530:	7efb      	ldrb	r3, [r7, #27]
 800d532:	2b08      	cmp	r3, #8
 800d534:	d85b      	bhi.n	800d5ee <UART_SetConfig+0x53c>
 800d536:	a201      	add	r2, pc, #4	; (adr r2, 800d53c <UART_SetConfig+0x48a>)
 800d538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d53c:	0800d561 	.word	0x0800d561
 800d540:	0800d57f 	.word	0x0800d57f
 800d544:	0800d59d 	.word	0x0800d59d
 800d548:	0800d5ef 	.word	0x0800d5ef
 800d54c:	0800d5b9 	.word	0x0800d5b9
 800d550:	0800d5ef 	.word	0x0800d5ef
 800d554:	0800d5ef 	.word	0x0800d5ef
 800d558:	0800d5ef 	.word	0x0800d5ef
 800d55c:	0800d5d7 	.word	0x0800d5d7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800d560:	f7f6 f9c8 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 800d564:	4603      	mov	r3, r0
 800d566:	005a      	lsls	r2, r3, #1
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	685b      	ldr	r3, [r3, #4]
 800d56c:	085b      	lsrs	r3, r3, #1
 800d56e:	441a      	add	r2, r3
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	685b      	ldr	r3, [r3, #4]
 800d574:	fbb2 f3f3 	udiv	r3, r2, r3
 800d578:	b29b      	uxth	r3, r3
 800d57a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800d57c:	e03a      	b.n	800d5f4 <UART_SetConfig+0x542>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800d57e:	f7f6 f9cf 	bl	8003920 <HAL_RCC_GetPCLK2Freq>
 800d582:	4603      	mov	r3, r0
 800d584:	005a      	lsls	r2, r3, #1
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	685b      	ldr	r3, [r3, #4]
 800d58a:	085b      	lsrs	r3, r3, #1
 800d58c:	441a      	add	r2, r3
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	685b      	ldr	r3, [r3, #4]
 800d592:	fbb2 f3f3 	udiv	r3, r2, r3
 800d596:	b29b      	uxth	r3, r3
 800d598:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800d59a:	e02b      	b.n	800d5f4 <UART_SetConfig+0x542>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	685b      	ldr	r3, [r3, #4]
 800d5a0:	085b      	lsrs	r3, r3, #1
 800d5a2:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800d5a6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800d5aa:	687a      	ldr	r2, [r7, #4]
 800d5ac:	6852      	ldr	r2, [r2, #4]
 800d5ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800d5b2:	b29b      	uxth	r3, r3
 800d5b4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800d5b6:	e01d      	b.n	800d5f4 <UART_SetConfig+0x542>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800d5b8:	f7f6 f906 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	005a      	lsls	r2, r3, #1
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	685b      	ldr	r3, [r3, #4]
 800d5c4:	085b      	lsrs	r3, r3, #1
 800d5c6:	441a      	add	r2, r3
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	685b      	ldr	r3, [r3, #4]
 800d5cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5d0:	b29b      	uxth	r3, r3
 800d5d2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800d5d4:	e00e      	b.n	800d5f4 <UART_SetConfig+0x542>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	685b      	ldr	r3, [r3, #4]
 800d5da:	085b      	lsrs	r3, r3, #1
 800d5dc:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	685b      	ldr	r3, [r3, #4]
 800d5e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5e8:	b29b      	uxth	r3, r3
 800d5ea:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800d5ec:	e002      	b.n	800d5f4 <UART_SetConfig+0x542>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	74fb      	strb	r3, [r7, #19]
        break;
 800d5f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d5f4:	697b      	ldr	r3, [r7, #20]
 800d5f6:	2b0f      	cmp	r3, #15
 800d5f8:	d916      	bls.n	800d628 <UART_SetConfig+0x576>
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d600:	d212      	bcs.n	800d628 <UART_SetConfig+0x576>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	b29b      	uxth	r3, r3
 800d606:	f023 030f 	bic.w	r3, r3, #15
 800d60a:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d60c:	697b      	ldr	r3, [r7, #20]
 800d60e:	085b      	lsrs	r3, r3, #1
 800d610:	b29b      	uxth	r3, r3
 800d612:	f003 0307 	and.w	r3, r3, #7
 800d616:	b29a      	uxth	r2, r3
 800d618:	897b      	ldrh	r3, [r7, #10]
 800d61a:	4313      	orrs	r3, r2
 800d61c:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	897a      	ldrh	r2, [r7, #10]
 800d624:	60da      	str	r2, [r3, #12]
 800d626:	e070      	b.n	800d70a <UART_SetConfig+0x658>
    }
    else
    {
      ret = HAL_ERROR;
 800d628:	2301      	movs	r3, #1
 800d62a:	74fb      	strb	r3, [r7, #19]
 800d62c:	e06d      	b.n	800d70a <UART_SetConfig+0x658>
    }
  }
  else
  {
    switch (clocksource)
 800d62e:	7efb      	ldrb	r3, [r7, #27]
 800d630:	2b08      	cmp	r3, #8
 800d632:	d859      	bhi.n	800d6e8 <UART_SetConfig+0x636>
 800d634:	a201      	add	r2, pc, #4	; (adr r2, 800d63c <UART_SetConfig+0x58a>)
 800d636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d63a:	bf00      	nop
 800d63c:	0800d661 	.word	0x0800d661
 800d640:	0800d67d 	.word	0x0800d67d
 800d644:	0800d699 	.word	0x0800d699
 800d648:	0800d6e9 	.word	0x0800d6e9
 800d64c:	0800d6b5 	.word	0x0800d6b5
 800d650:	0800d6e9 	.word	0x0800d6e9
 800d654:	0800d6e9 	.word	0x0800d6e9
 800d658:	0800d6e9 	.word	0x0800d6e9
 800d65c:	0800d6d1 	.word	0x0800d6d1
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800d660:	f7f6 f948 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 800d664:	4602      	mov	r2, r0
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	685b      	ldr	r3, [r3, #4]
 800d66a:	085b      	lsrs	r3, r3, #1
 800d66c:	441a      	add	r2, r3
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	685b      	ldr	r3, [r3, #4]
 800d672:	fbb2 f3f3 	udiv	r3, r2, r3
 800d676:	b29b      	uxth	r3, r3
 800d678:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800d67a:	e038      	b.n	800d6ee <UART_SetConfig+0x63c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800d67c:	f7f6 f950 	bl	8003920 <HAL_RCC_GetPCLK2Freq>
 800d680:	4602      	mov	r2, r0
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	685b      	ldr	r3, [r3, #4]
 800d686:	085b      	lsrs	r3, r3, #1
 800d688:	441a      	add	r2, r3
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	685b      	ldr	r3, [r3, #4]
 800d68e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d692:	b29b      	uxth	r3, r3
 800d694:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800d696:	e02a      	b.n	800d6ee <UART_SetConfig+0x63c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	685b      	ldr	r3, [r3, #4]
 800d69c:	085b      	lsrs	r3, r3, #1
 800d69e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800d6a2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800d6a6:	687a      	ldr	r2, [r7, #4]
 800d6a8:	6852      	ldr	r2, [r2, #4]
 800d6aa:	fbb3 f3f2 	udiv	r3, r3, r2
 800d6ae:	b29b      	uxth	r3, r3
 800d6b0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800d6b2:	e01c      	b.n	800d6ee <UART_SetConfig+0x63c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800d6b4:	f7f6 f888 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 800d6b8:	4602      	mov	r2, r0
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	685b      	ldr	r3, [r3, #4]
 800d6be:	085b      	lsrs	r3, r3, #1
 800d6c0:	441a      	add	r2, r3
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	685b      	ldr	r3, [r3, #4]
 800d6c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6ca:	b29b      	uxth	r3, r3
 800d6cc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800d6ce:	e00e      	b.n	800d6ee <UART_SetConfig+0x63c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	685b      	ldr	r3, [r3, #4]
 800d6d4:	085b      	lsrs	r3, r3, #1
 800d6d6:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	685b      	ldr	r3, [r3, #4]
 800d6de:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6e2:	b29b      	uxth	r3, r3
 800d6e4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800d6e6:	e002      	b.n	800d6ee <UART_SetConfig+0x63c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800d6e8:	2301      	movs	r3, #1
 800d6ea:	74fb      	strb	r3, [r7, #19]
        break;
 800d6ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	2b0f      	cmp	r3, #15
 800d6f2:	d908      	bls.n	800d706 <UART_SetConfig+0x654>
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d6fa:	d204      	bcs.n	800d706 <UART_SetConfig+0x654>
    {
      huart->Instance->BRR = usartdiv;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	697a      	ldr	r2, [r7, #20]
 800d702:	60da      	str	r2, [r3, #12]
 800d704:	e001      	b.n	800d70a <UART_SetConfig+0x658>
    }
    else
    {
      ret = HAL_ERROR;
 800d706:	2301      	movs	r3, #1
 800d708:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2200      	movs	r2, #0
 800d70e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2200      	movs	r2, #0
 800d714:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800d716:	7cfb      	ldrb	r3, [r7, #19]
}
 800d718:	4618      	mov	r0, r3
 800d71a:	3720      	adds	r7, #32
 800d71c:	46bd      	mov	sp, r7
 800d71e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d722:	bf00      	nop
 800d724:	f4240000 	.word	0xf4240000

0800d728 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d728:	b480      	push	{r7}
 800d72a:	b083      	sub	sp, #12
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d734:	f003 0301 	and.w	r3, r3, #1
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d00a      	beq.n	800d752 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	687a      	ldr	r2, [r7, #4]
 800d742:	6812      	ldr	r2, [r2, #0]
 800d744:	6852      	ldr	r2, [r2, #4]
 800d746:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 800d74a:	687a      	ldr	r2, [r7, #4]
 800d74c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800d74e:	430a      	orrs	r2, r1
 800d750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d756:	f003 0302 	and.w	r3, r3, #2
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d00a      	beq.n	800d774 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	687a      	ldr	r2, [r7, #4]
 800d764:	6812      	ldr	r2, [r2, #0]
 800d766:	6852      	ldr	r2, [r2, #4]
 800d768:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 800d76c:	687a      	ldr	r2, [r7, #4]
 800d76e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d770:	430a      	orrs	r2, r1
 800d772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d778:	f003 0304 	and.w	r3, r3, #4
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d00a      	beq.n	800d796 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	687a      	ldr	r2, [r7, #4]
 800d786:	6812      	ldr	r2, [r2, #0]
 800d788:	6852      	ldr	r2, [r2, #4]
 800d78a:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800d78e:	687a      	ldr	r2, [r7, #4]
 800d790:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d792:	430a      	orrs	r2, r1
 800d794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d79a:	f003 0308 	and.w	r3, r3, #8
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d00a      	beq.n	800d7b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	687a      	ldr	r2, [r7, #4]
 800d7a8:	6812      	ldr	r2, [r2, #0]
 800d7aa:	6852      	ldr	r2, [r2, #4]
 800d7ac:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 800d7b0:	687a      	ldr	r2, [r7, #4]
 800d7b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d7b4:	430a      	orrs	r2, r1
 800d7b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7bc:	f003 0310 	and.w	r3, r3, #16
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d00a      	beq.n	800d7da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	687a      	ldr	r2, [r7, #4]
 800d7ca:	6812      	ldr	r2, [r2, #0]
 800d7cc:	6892      	ldr	r2, [r2, #8]
 800d7ce:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800d7d2:	687a      	ldr	r2, [r7, #4]
 800d7d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d7d6:	430a      	orrs	r2, r1
 800d7d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7de:	f003 0320 	and.w	r3, r3, #32
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d00a      	beq.n	800d7fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	687a      	ldr	r2, [r7, #4]
 800d7ec:	6812      	ldr	r2, [r2, #0]
 800d7ee:	6892      	ldr	r2, [r2, #8]
 800d7f0:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 800d7f4:	687a      	ldr	r2, [r7, #4]
 800d7f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d7f8:	430a      	orrs	r2, r1
 800d7fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d804:	2b00      	cmp	r3, #0
 800d806:	d01a      	beq.n	800d83e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	687a      	ldr	r2, [r7, #4]
 800d80e:	6812      	ldr	r2, [r2, #0]
 800d810:	6852      	ldr	r2, [r2, #4]
 800d812:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 800d816:	687a      	ldr	r2, [r7, #4]
 800d818:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800d81a:	430a      	orrs	r2, r1
 800d81c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d822:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d826:	d10a      	bne.n	800d83e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	687a      	ldr	r2, [r7, #4]
 800d82e:	6812      	ldr	r2, [r2, #0]
 800d830:	6852      	ldr	r2, [r2, #4]
 800d832:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 800d836:	687a      	ldr	r2, [r7, #4]
 800d838:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800d83a:	430a      	orrs	r2, r1
 800d83c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d846:	2b00      	cmp	r3, #0
 800d848:	d00a      	beq.n	800d860 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	687a      	ldr	r2, [r7, #4]
 800d850:	6812      	ldr	r2, [r2, #0]
 800d852:	6852      	ldr	r2, [r2, #4]
 800d854:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 800d858:	687a      	ldr	r2, [r7, #4]
 800d85a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d85c:	430a      	orrs	r2, r1
 800d85e:	605a      	str	r2, [r3, #4]
  }
}
 800d860:	bf00      	nop
 800d862:	370c      	adds	r7, #12
 800d864:	46bd      	mov	sp, r7
 800d866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86a:	4770      	bx	lr

0800d86c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b086      	sub	sp, #24
 800d870:	af02      	add	r7, sp, #8
 800d872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2200      	movs	r2, #0
 800d878:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800d87a:	f7f2 fd4b 	bl	8000314 <HAL_GetTick>
 800d87e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	f003 0308 	and.w	r3, r3, #8
 800d88a:	2b08      	cmp	r3, #8
 800d88c:	d10e      	bne.n	800d8ac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d88e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d892:	9300      	str	r3, [sp, #0]
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	2200      	movs	r2, #0
 800d898:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f000 f82a 	bl	800d8f6 <UART_WaitOnFlagUntilTimeout>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d001      	beq.n	800d8ac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d8a8:	2303      	movs	r3, #3
 800d8aa:	e020      	b.n	800d8ee <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	f003 0304 	and.w	r3, r3, #4
 800d8b6:	2b04      	cmp	r3, #4
 800d8b8:	d10e      	bne.n	800d8d8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d8ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d8be:	9300      	str	r3, [sp, #0]
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d8c8:	6878      	ldr	r0, [r7, #4]
 800d8ca:	f000 f814 	bl	800d8f6 <UART_WaitOnFlagUntilTimeout>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d001      	beq.n	800d8d8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d8d4:	2303      	movs	r3, #3
 800d8d6:	e00a      	b.n	800d8ee <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2220      	movs	r2, #32
 800d8dc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2220      	movs	r2, #32
 800d8e2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800d8ec:	2300      	movs	r3, #0
}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	3710      	adds	r7, #16
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}

0800d8f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d8f6:	b580      	push	{r7, lr}
 800d8f8:	b084      	sub	sp, #16
 800d8fa:	af00      	add	r7, sp, #0
 800d8fc:	60f8      	str	r0, [r7, #12]
 800d8fe:	60b9      	str	r1, [r7, #8]
 800d900:	603b      	str	r3, [r7, #0]
 800d902:	4613      	mov	r3, r2
 800d904:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d906:	e02a      	b.n	800d95e <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d908:	69bb      	ldr	r3, [r7, #24]
 800d90a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d90e:	d026      	beq.n	800d95e <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d910:	f7f2 fd00 	bl	8000314 <HAL_GetTick>
 800d914:	4602      	mov	r2, r0
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	1ad2      	subs	r2, r2, r3
 800d91a:	69bb      	ldr	r3, [r7, #24]
 800d91c:	429a      	cmp	r2, r3
 800d91e:	d802      	bhi.n	800d926 <UART_WaitOnFlagUntilTimeout+0x30>
 800d920:	69bb      	ldr	r3, [r7, #24]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d11b      	bne.n	800d95e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	68fa      	ldr	r2, [r7, #12]
 800d92c:	6812      	ldr	r2, [r2, #0]
 800d92e:	6812      	ldr	r2, [r2, #0]
 800d930:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d934:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	68fa      	ldr	r2, [r7, #12]
 800d93c:	6812      	ldr	r2, [r2, #0]
 800d93e:	6892      	ldr	r2, [r2, #8]
 800d940:	f022 0201 	bic.w	r2, r2, #1
 800d944:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	2220      	movs	r2, #32
 800d94a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	2220      	movs	r2, #32
 800d950:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	2200      	movs	r2, #0
 800d956:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800d95a:	2303      	movs	r3, #3
 800d95c:	e00f      	b.n	800d97e <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	69da      	ldr	r2, [r3, #28]
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	401a      	ands	r2, r3
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	429a      	cmp	r2, r3
 800d96c:	bf0c      	ite	eq
 800d96e:	2301      	moveq	r3, #1
 800d970:	2300      	movne	r3, #0
 800d972:	b2db      	uxtb	r3, r3
 800d974:	461a      	mov	r2, r3
 800d976:	79fb      	ldrb	r3, [r7, #7]
 800d978:	429a      	cmp	r2, r3
 800d97a:	d0c5      	beq.n	800d908 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d97c:	2300      	movs	r3, #0
}
 800d97e:	4618      	mov	r0, r3
 800d980:	3710      	adds	r7, #16
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}

0800d986 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d986:	b480      	push	{r7}
 800d988:	b083      	sub	sp, #12
 800d98a:	af00      	add	r7, sp, #0
 800d98c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	687a      	ldr	r2, [r7, #4]
 800d994:	6812      	ldr	r2, [r2, #0]
 800d996:	6812      	ldr	r2, [r2, #0]
 800d998:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800d99c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2220      	movs	r2, #32
 800d9a2:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d9a4:	bf00      	nop
 800d9a6:	370c      	adds	r7, #12
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ae:	4770      	bx	lr

0800d9b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	b083      	sub	sp, #12
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	687a      	ldr	r2, [r7, #4]
 800d9be:	6812      	ldr	r2, [r2, #0]
 800d9c0:	6812      	ldr	r2, [r2, #0]
 800d9c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d9c6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	687a      	ldr	r2, [r7, #4]
 800d9ce:	6812      	ldr	r2, [r2, #0]
 800d9d0:	6892      	ldr	r2, [r2, #8]
 800d9d2:	f022 0201 	bic.w	r2, r2, #1
 800d9d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2220      	movs	r2, #32
 800d9dc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	661a      	str	r2, [r3, #96]	; 0x60
}
 800d9e4:	bf00      	nop
 800d9e6:	370c      	adds	r7, #12
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr

0800d9f0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b084      	sub	sp, #16
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9fc:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	f003 0320 	and.w	r3, r3, #32
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d114      	bne.n	800da36 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	2200      	movs	r2, #0
 800da10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	68fa      	ldr	r2, [r7, #12]
 800da1a:	6812      	ldr	r2, [r2, #0]
 800da1c:	6892      	ldr	r2, [r2, #8]
 800da1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800da22:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	68fa      	ldr	r2, [r7, #12]
 800da2a:	6812      	ldr	r2, [r2, #0]
 800da2c:	6812      	ldr	r2, [r2, #0]
 800da2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800da32:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800da34:	e002      	b.n	800da3c <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800da36:	68f8      	ldr	r0, [r7, #12]
 800da38:	f7ff f9e4 	bl	800ce04 <HAL_UART_TxCpltCallback>
}
 800da3c:	bf00      	nop
 800da3e:	3710      	adds	r7, #16
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}

0800da44 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b084      	sub	sp, #16
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da50:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800da52:	68f8      	ldr	r0, [r7, #12]
 800da54:	f7ff f9e0 	bl	800ce18 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da58:	bf00      	nop
 800da5a:	3710      	adds	r7, #16
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd80      	pop	{r7, pc}

0800da60 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b084      	sub	sp, #16
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da6c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	f003 0320 	and.w	r3, r3, #32
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d11e      	bne.n	800daba <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	2200      	movs	r2, #0
 800da80:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	68fa      	ldr	r2, [r7, #12]
 800da8a:	6812      	ldr	r2, [r2, #0]
 800da8c:	6812      	ldr	r2, [r2, #0]
 800da8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800da92:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	68fa      	ldr	r2, [r7, #12]
 800da9a:	6812      	ldr	r2, [r2, #0]
 800da9c:	6892      	ldr	r2, [r2, #8]
 800da9e:	f022 0201 	bic.w	r2, r2, #1
 800daa2:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	68fa      	ldr	r2, [r7, #12]
 800daaa:	6812      	ldr	r2, [r2, #0]
 800daac:	6892      	ldr	r2, [r2, #8]
 800daae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dab2:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	2220      	movs	r2, #32
 800dab8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800daba:	68f8      	ldr	r0, [r7, #12]
 800dabc:	f7ff f9b6 	bl	800ce2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dac0:	bf00      	nop
 800dac2:	3710      	adds	r7, #16
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}

0800dac8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b084      	sub	sp, #16
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dad4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800dad6:	68f8      	ldr	r0, [r7, #12]
 800dad8:	f7ff f9b2 	bl	800ce40 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dadc:	bf00      	nop
 800dade:	3710      	adds	r7, #16
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}

0800dae4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b086      	sub	sp, #24
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daf0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800daf2:	697b      	ldr	r3, [r7, #20]
 800daf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800daf6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dafc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800dafe:	697b      	ldr	r3, [r7, #20]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	689b      	ldr	r3, [r3, #8]
 800db04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db08:	2b80      	cmp	r3, #128	; 0x80
 800db0a:	d109      	bne.n	800db20 <UART_DMAError+0x3c>
 800db0c:	693b      	ldr	r3, [r7, #16]
 800db0e:	2b21      	cmp	r3, #33	; 0x21
 800db10:	d106      	bne.n	800db20 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	2200      	movs	r2, #0
 800db16:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800db1a:	6978      	ldr	r0, [r7, #20]
 800db1c:	f7ff ff33 	bl	800d986 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800db20:	697b      	ldr	r3, [r7, #20]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	689b      	ldr	r3, [r3, #8]
 800db26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db2a:	2b40      	cmp	r3, #64	; 0x40
 800db2c:	d109      	bne.n	800db42 <UART_DMAError+0x5e>
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	2b22      	cmp	r3, #34	; 0x22
 800db32:	d106      	bne.n	800db42 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800db34:	697b      	ldr	r3, [r7, #20]
 800db36:	2200      	movs	r2, #0
 800db38:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800db3c:	6978      	ldr	r0, [r7, #20]
 800db3e:	f7ff ff37 	bl	800d9b0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800db42:	697b      	ldr	r3, [r7, #20]
 800db44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db46:	f043 0210 	orr.w	r2, r3, #16
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800db4e:	6978      	ldr	r0, [r7, #20]
 800db50:	f7ff f980 	bl	800ce54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db54:	bf00      	nop
 800db56:	3718      	adds	r7, #24
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}

0800db5c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b084      	sub	sp, #16
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	2200      	movs	r2, #0
 800db6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	2200      	movs	r2, #0
 800db76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800db7a:	68f8      	ldr	r0, [r7, #12]
 800db7c:	f7ff f96a 	bl	800ce54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db80:	bf00      	nop
 800db82:	3710      	adds	r7, #16
 800db84:	46bd      	mov	sp, r7
 800db86:	bd80      	pop	{r7, pc}

0800db88 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b084      	sub	sp, #16
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db94:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db9a:	2200      	movs	r2, #0
 800db9c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d004      	beq.n	800dbb0 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d118      	bne.n	800dbe2 <UART_DMATxAbortCallback+0x5a>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	2200      	movs	r2, #0
 800dbbc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	220f      	movs	r2, #15
 800dbcc:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	2220      	movs	r2, #32
 800dbd2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	2220      	movs	r2, #32
 800dbd8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800dbda:	68f8      	ldr	r0, [r7, #12]
 800dbdc:	f7ff f944 	bl	800ce68 <HAL_UART_AbortCpltCallback>
 800dbe0:	e000      	b.n	800dbe4 <UART_DMATxAbortCallback+0x5c>
      return;
 800dbe2:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dbe4:	3710      	adds	r7, #16
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}

0800dbea <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800dbea:	b580      	push	{r7, lr}
 800dbec:	b084      	sub	sp, #16
 800dbee:	af00      	add	r7, sp, #0
 800dbf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbf6:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d004      	beq.n	800dc12 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d122      	bne.n	800dc58 <UART_DMARxAbortCallback+0x6e>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	2200      	movs	r2, #0
 800dc16:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2200      	movs	r2, #0
 800dc26:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	220f      	movs	r2, #15
 800dc2e:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	68fa      	ldr	r2, [r7, #12]
 800dc36:	6812      	ldr	r2, [r2, #0]
 800dc38:	8b12      	ldrh	r2, [r2, #24]
 800dc3a:	b292      	uxth	r2, r2
 800dc3c:	f042 0208 	orr.w	r2, r2, #8
 800dc40:	b292      	uxth	r2, r2
 800dc42:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	2220      	movs	r2, #32
 800dc48:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	2220      	movs	r2, #32
 800dc4e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800dc50:	68f8      	ldr	r0, [r7, #12]
 800dc52:	f7ff f909 	bl	800ce68 <HAL_UART_AbortCpltCallback>
 800dc56:	e000      	b.n	800dc5a <UART_DMARxAbortCallback+0x70>
      return;
 800dc58:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc5a:	3710      	adds	r7, #16
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd80      	pop	{r7, pc}

0800dc60 <UART_DMATxOnlyAbortCallback>:
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b084      	sub	sp, #16
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc6c:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0U;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	2200      	movs	r2, #0
 800dc72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	2220      	movs	r2, #32
 800dc7a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 800dc7c:	68f8      	ldr	r0, [r7, #12]
 800dc7e:	f7ff f8fd 	bl	800ce7c <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc82:	bf00      	nop
 800dc84:	3710      	adds	r7, #16
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}

0800dc8a <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800dc8a:	b580      	push	{r7, lr}
 800dc8c:	b084      	sub	sp, #16
 800dc8e:	af00      	add	r7, sp, #0
 800dc90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc96:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	220f      	movs	r2, #15
 800dca6:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	68fa      	ldr	r2, [r7, #12]
 800dcae:	6812      	ldr	r2, [r2, #0]
 800dcb0:	8b12      	ldrh	r2, [r2, #24]
 800dcb2:	b292      	uxth	r2, r2
 800dcb4:	f042 0208 	orr.w	r2, r2, #8
 800dcb8:	b292      	uxth	r2, r2
 800dcba:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	2220      	movs	r2, #32
 800dcc0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800dcc2:	68f8      	ldr	r0, [r7, #12]
 800dcc4:	f7ff f8e4 	bl	800ce90 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dcc8:	bf00      	nop
 800dcca:	3710      	adds	r7, #16
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}

0800dcd0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b083      	sub	sp, #12
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcdc:	2b21      	cmp	r3, #33	; 0x21
 800dcde:	d12b      	bne.n	800dd38 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800dce6:	b29b      	uxth	r3, r3
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d110      	bne.n	800dd0e <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	687a      	ldr	r2, [r7, #4]
 800dcf2:	6812      	ldr	r2, [r2, #0]
 800dcf4:	6812      	ldr	r2, [r2, #0]
 800dcf6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dcfa:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	687a      	ldr	r2, [r7, #4]
 800dd02:	6812      	ldr	r2, [r2, #0]
 800dd04:	6812      	ldr	r2, [r2, #0]
 800dd06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dd0a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800dd0c:	e014      	b.n	800dd38 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	687a      	ldr	r2, [r7, #4]
 800dd14:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800dd16:	7812      	ldrb	r2, [r2, #0]
 800dd18:	b292      	uxth	r2, r2
 800dd1a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd20:	1c5a      	adds	r2, r3, #1
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800dd2c:	b29b      	uxth	r3, r3
 800dd2e:	3b01      	subs	r3, #1
 800dd30:	b29a      	uxth	r2, r3
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800dd38:	bf00      	nop
 800dd3a:	370c      	adds	r7, #12
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd42:	4770      	bx	lr

0800dd44 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800dd44:	b480      	push	{r7}
 800dd46:	b085      	sub	sp, #20
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd50:	2b21      	cmp	r3, #33	; 0x21
 800dd52:	d12f      	bne.n	800ddb4 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800dd5a:	b29b      	uxth	r3, r3
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d110      	bne.n	800dd82 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	687a      	ldr	r2, [r7, #4]
 800dd66:	6812      	ldr	r2, [r2, #0]
 800dd68:	6812      	ldr	r2, [r2, #0]
 800dd6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dd6e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	687a      	ldr	r2, [r7, #4]
 800dd76:	6812      	ldr	r2, [r2, #0]
 800dd78:	6812      	ldr	r2, [r2, #0]
 800dd7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dd7e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800dd80:	e018      	b.n	800ddb4 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd86:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	68fa      	ldr	r2, [r7, #12]
 800dd8e:	8812      	ldrh	r2, [r2, #0]
 800dd90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dd94:	b292      	uxth	r2, r2
 800dd96:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd9c:	1c9a      	adds	r2, r3, #2
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800dda8:	b29b      	uxth	r3, r3
 800ddaa:	3b01      	subs	r3, #1
 800ddac:	b29a      	uxth	r2, r3
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800ddb4:	bf00      	nop
 800ddb6:	3714      	adds	r7, #20
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbe:	4770      	bx	lr

0800ddc0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b082      	sub	sp, #8
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	687a      	ldr	r2, [r7, #4]
 800ddce:	6812      	ldr	r2, [r2, #0]
 800ddd0:	6812      	ldr	r2, [r2, #0]
 800ddd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ddd6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2220      	movs	r2, #32
 800dddc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2200      	movs	r2, #0
 800dde2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f7ff f80d 	bl	800ce04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ddea:	bf00      	nop
 800ddec:	3708      	adds	r7, #8
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd80      	pop	{r7, pc}

0800ddf2 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ddf2:	b580      	push	{r7, lr}
 800ddf4:	b084      	sub	sp, #16
 800ddf6:	af00      	add	r7, sp, #0
 800ddf8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800de00:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de06:	2b22      	cmp	r3, #34	; 0x22
 800de08:	d13a      	bne.n	800de80 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800de10:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de16:	89ba      	ldrh	r2, [r7, #12]
 800de18:	b2d1      	uxtb	r1, r2
 800de1a:	89fa      	ldrh	r2, [r7, #14]
 800de1c:	b2d2      	uxtb	r2, r2
 800de1e:	400a      	ands	r2, r1
 800de20:	b2d2      	uxtb	r2, r2
 800de22:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de28:	1c5a      	adds	r2, r3, #1
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800de34:	b29b      	uxth	r3, r3
 800de36:	3b01      	subs	r3, #1
 800de38:	b29a      	uxth	r2, r3
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800de46:	b29b      	uxth	r3, r3
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d123      	bne.n	800de94 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	687a      	ldr	r2, [r7, #4]
 800de52:	6812      	ldr	r2, [r2, #0]
 800de54:	6812      	ldr	r2, [r2, #0]
 800de56:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800de5a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	687a      	ldr	r2, [r7, #4]
 800de62:	6812      	ldr	r2, [r2, #0]
 800de64:	6892      	ldr	r2, [r2, #8]
 800de66:	f022 0201 	bic.w	r2, r2, #1
 800de6a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2220      	movs	r2, #32
 800de70:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2200      	movs	r2, #0
 800de76:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	f7fe ffd7 	bl	800ce2c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800de7e:	e009      	b.n	800de94 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	687a      	ldr	r2, [r7, #4]
 800de86:	6812      	ldr	r2, [r2, #0]
 800de88:	8b12      	ldrh	r2, [r2, #24]
 800de8a:	b292      	uxth	r2, r2
 800de8c:	f042 0208 	orr.w	r2, r2, #8
 800de90:	b292      	uxth	r2, r2
 800de92:	831a      	strh	r2, [r3, #24]
}
 800de94:	bf00      	nop
 800de96:	3710      	adds	r7, #16
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}

0800de9c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b084      	sub	sp, #16
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800deaa:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800deb0:	2b22      	cmp	r3, #34	; 0x22
 800deb2:	d13a      	bne.n	800df2a <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800deba:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dec0:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800dec2:	89ba      	ldrh	r2, [r7, #12]
 800dec4:	89fb      	ldrh	r3, [r7, #14]
 800dec6:	4013      	ands	r3, r2
 800dec8:	b29a      	uxth	r2, r3
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ded2:	1c9a      	adds	r2, r3, #2
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800dede:	b29b      	uxth	r3, r3
 800dee0:	3b01      	subs	r3, #1
 800dee2:	b29a      	uxth	r2, r3
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800def0:	b29b      	uxth	r3, r3
 800def2:	2b00      	cmp	r3, #0
 800def4:	d123      	bne.n	800df3e <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	687a      	ldr	r2, [r7, #4]
 800defc:	6812      	ldr	r2, [r2, #0]
 800defe:	6812      	ldr	r2, [r2, #0]
 800df00:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800df04:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	687a      	ldr	r2, [r7, #4]
 800df0c:	6812      	ldr	r2, [r2, #0]
 800df0e:	6892      	ldr	r2, [r2, #8]
 800df10:	f022 0201 	bic.w	r2, r2, #1
 800df14:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	2220      	movs	r2, #32
 800df1a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2200      	movs	r2, #0
 800df20:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f7fe ff82 	bl	800ce2c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800df28:	e009      	b.n	800df3e <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	687a      	ldr	r2, [r7, #4]
 800df30:	6812      	ldr	r2, [r2, #0]
 800df32:	8b12      	ldrh	r2, [r2, #24]
 800df34:	b292      	uxth	r2, r2
 800df36:	f042 0208 	orr.w	r2, r2, #8
 800df3a:	b292      	uxth	r2, r2
 800df3c:	831a      	strh	r2, [r3, #24]
}
 800df3e:	bf00      	nop
 800df40:	3710      	adds	r7, #16
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}
 800df46:	bf00      	nop

0800df48 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b086      	sub	sp, #24
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	60f8      	str	r0, [r7, #12]
 800df50:	60b9      	str	r1, [r7, #8]
 800df52:	607a      	str	r2, [r7, #4]
 800df54:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d101      	bne.n	800df60 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800df5c:	2301      	movs	r3, #1
 800df5e:	e056      	b.n	800e00e <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df64:	2b00      	cmp	r3, #0
 800df66:	d106      	bne.n	800df76 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	2200      	movs	r2, #0
 800df6c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800df70:	68f8      	ldr	r0, [r7, #12]
 800df72:	f000 feed 	bl	800ed50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	2224      	movs	r2, #36	; 0x24
 800df7a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	68fa      	ldr	r2, [r7, #12]
 800df82:	6812      	ldr	r2, [r2, #0]
 800df84:	6812      	ldr	r2, [r2, #0]
 800df86:	f022 0201 	bic.w	r2, r2, #1
 800df8a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800df8c:	68f8      	ldr	r0, [r7, #12]
 800df8e:	f7ff f890 	bl	800d0b2 <UART_SetConfig>
 800df92:	4603      	mov	r3, r0
 800df94:	2b01      	cmp	r3, #1
 800df96:	d101      	bne.n	800df9c <HAL_RS485Ex_Init+0x54>
  {
    return HAL_ERROR;
 800df98:	2301      	movs	r3, #1
 800df9a:	e038      	b.n	800e00e <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d002      	beq.n	800dfaa <HAL_RS485Ex_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800dfa4:	68f8      	ldr	r0, [r7, #12]
 800dfa6:	f7ff fbbf 	bl	800d728 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	68fa      	ldr	r2, [r7, #12]
 800dfb0:	6812      	ldr	r2, [r2, #0]
 800dfb2:	6892      	ldr	r2, [r2, #8]
 800dfb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dfb8:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	68fa      	ldr	r2, [r7, #12]
 800dfc0:	6812      	ldr	r2, [r2, #0]
 800dfc2:	6892      	ldr	r2, [r2, #8]
 800dfc4:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 800dfc8:	68ba      	ldr	r2, [r7, #8]
 800dfca:	430a      	orrs	r2, r1
 800dfcc:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	055b      	lsls	r3, r3, #21
 800dfd2:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	041b      	lsls	r3, r3, #16
 800dfd8:	697a      	ldr	r2, [r7, #20]
 800dfda:	4313      	orrs	r3, r2
 800dfdc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	681a      	ldr	r2, [r3, #0]
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 800dfec:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800dff0:	6979      	ldr	r1, [r7, #20]
 800dff2:	430b      	orrs	r3, r1
 800dff4:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	68fa      	ldr	r2, [r7, #12]
 800dffc:	6812      	ldr	r2, [r2, #0]
 800dffe:	6812      	ldr	r2, [r2, #0]
 800e000:	f042 0201 	orr.w	r2, r2, #1
 800e004:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e006:	68f8      	ldr	r0, [r7, #12]
 800e008:	f7ff fc30 	bl	800d86c <UART_CheckIdleState>
 800e00c:	4603      	mov	r3, r0
}
 800e00e:	4618      	mov	r0, r3
 800e010:	3718      	adds	r7, #24
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}

0800e016 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e016:	b480      	push	{r7}
 800e018:	b083      	sub	sp, #12
 800e01a:	af00      	add	r7, sp, #0
 800e01c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e01e:	bf00      	nop
 800e020:	370c      	adds	r7, #12
 800e022:	46bd      	mov	sp, r7
 800e024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e028:	4770      	bx	lr

0800e02a <HAL_UARTEx_EnableClockStopMode>:
  *         and desired baud rate is 9600 baud, the bit UCESM bit in LPUART_CR3 control register must be set.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableClockStopMode(UART_HandleTypeDef *huart)
{
 800e02a:	b480      	push	{r7}
 800e02c:	b083      	sub	sp, #12
 800e02e:	af00      	add	r7, sp, #0
 800e030:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800e038:	2b01      	cmp	r3, #1
 800e03a:	d101      	bne.n	800e040 <HAL_UARTEx_EnableClockStopMode+0x16>
 800e03c:	2302      	movs	r3, #2
 800e03e:	e010      	b.n	800e062 <HAL_UARTEx_EnableClockStopMode+0x38>
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2201      	movs	r2, #1
 800e044:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  /* Set UCESM bit */
  SET_BIT(huart->Instance->CR3, USART_CR3_UCESM);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	687a      	ldr	r2, [r7, #4]
 800e04e:	6812      	ldr	r2, [r2, #0]
 800e050:	6892      	ldr	r2, [r2, #8]
 800e052:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800e056:	609a      	str	r2, [r3, #8]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2200      	movs	r2, #0
 800e05c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800e060:	2300      	movs	r3, #0
}
 800e062:	4618      	mov	r0, r3
 800e064:	370c      	adds	r7, #12
 800e066:	46bd      	mov	sp, r7
 800e068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06c:	4770      	bx	lr

0800e06e <HAL_UARTEx_DisableClockStopMode>:
  * @brief  Disable UART Clock when in Stop Mode.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableClockStopMode(UART_HandleTypeDef *huart)
{
 800e06e:	b480      	push	{r7}
 800e070:	b083      	sub	sp, #12
 800e072:	af00      	add	r7, sp, #0
 800e074:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800e07c:	2b01      	cmp	r3, #1
 800e07e:	d101      	bne.n	800e084 <HAL_UARTEx_DisableClockStopMode+0x16>
 800e080:	2302      	movs	r3, #2
 800e082:	e010      	b.n	800e0a6 <HAL_UARTEx_DisableClockStopMode+0x38>
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2201      	movs	r2, #1
 800e088:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  /* Clear UCESM bit */
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_UCESM);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	687a      	ldr	r2, [r7, #4]
 800e092:	6812      	ldr	r2, [r2, #0]
 800e094:	6892      	ldr	r2, [r2, #8]
 800e096:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800e09a:	609a      	str	r2, [r3, #8]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800e0a4:	2300      	movs	r3, #0
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	370c      	adds	r7, #12
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b0:	4770      	bx	lr

0800e0b2 <HAL_MultiProcessorEx_AddressLength_Set>:
  *          @arg @ref UART_ADDRESS_DETECT_4B 4-bit long address
  *          @arg @ref UART_ADDRESS_DETECT_7B 6-, 7- or 8-bit long address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessorEx_AddressLength_Set(UART_HandleTypeDef *huart, uint32_t AddressLength)
{
 800e0b2:	b580      	push	{r7, lr}
 800e0b4:	b082      	sub	sp, #8
 800e0b6:	af00      	add	r7, sp, #0
 800e0b8:	6078      	str	r0, [r7, #4]
 800e0ba:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d101      	bne.n	800e0c6 <HAL_MultiProcessorEx_AddressLength_Set+0x14>
  {
    return HAL_ERROR;
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	e020      	b.n	800e108 <HAL_MultiProcessorEx_AddressLength_Set+0x56>
  }

  /* Check the address length parameter */
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(AddressLength));

  huart->gState = HAL_UART_STATE_BUSY;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	2224      	movs	r2, #36	; 0x24
 800e0ca:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	687a      	ldr	r2, [r7, #4]
 800e0d2:	6812      	ldr	r2, [r2, #0]
 800e0d4:	6812      	ldr	r2, [r2, #0]
 800e0d6:	f022 0201 	bic.w	r2, r2, #1
 800e0da:	601a      	str	r2, [r3, #0]

  /* Set the address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, AddressLength);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	687a      	ldr	r2, [r7, #4]
 800e0e2:	6812      	ldr	r2, [r2, #0]
 800e0e4:	6852      	ldr	r2, [r2, #4]
 800e0e6:	f022 0110 	bic.w	r1, r2, #16
 800e0ea:	683a      	ldr	r2, [r7, #0]
 800e0ec:	430a      	orrs	r2, r1
 800e0ee:	605a      	str	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	687a      	ldr	r2, [r7, #4]
 800e0f6:	6812      	ldr	r2, [r2, #0]
 800e0f8:	6812      	ldr	r2, [r2, #0]
 800e0fa:	f042 0201 	orr.w	r2, r2, #1
 800e0fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState to Ready */
  return (UART_CheckIdleState(huart));
 800e100:	6878      	ldr	r0, [r7, #4]
 800e102:	f7ff fbb3 	bl	800d86c <UART_CheckIdleState>
 800e106:	4603      	mov	r3, r0
}
 800e108:	4618      	mov	r0, r3
 800e10a:	3708      	adds	r7, #8
 800e10c:	46bd      	mov	sp, r7
 800e10e:	bd80      	pop	{r7, pc}

0800e110 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b088      	sub	sp, #32
 800e114:	af02      	add	r7, sp, #8
 800e116:	60f8      	str	r0, [r7, #12]
 800e118:	1d3b      	adds	r3, r7, #4
 800e11a:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800e11e:	2300      	movs	r3, #0
 800e120:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800e128:	2b01      	cmp	r3, #1
 800e12a:	d101      	bne.n	800e130 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800e12c:	2302      	movs	r3, #2
 800e12e:	e044      	b.n	800e1ba <HAL_UARTEx_StopModeWakeUpSourceConfig+0xaa>
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	2201      	movs	r2, #1
 800e134:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  huart->gState = HAL_UART_STATE_BUSY;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	2224      	movs	r2, #36	; 0x24
 800e13c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	68fa      	ldr	r2, [r7, #12]
 800e144:	6812      	ldr	r2, [r2, #0]
 800e146:	6812      	ldr	r2, [r2, #0]
 800e148:	f022 0201 	bic.w	r2, r2, #1
 800e14c:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	68fa      	ldr	r2, [r7, #12]
 800e154:	6812      	ldr	r2, [r2, #0]
 800e156:	6892      	ldr	r2, [r2, #8]
 800e158:	f422 1140 	bic.w	r1, r2, #3145728	; 0x300000
 800e15c:	687a      	ldr	r2, [r7, #4]
 800e15e:	430a      	orrs	r2, r1
 800e160:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d105      	bne.n	800e174 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x64>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800e168:	1d3b      	adds	r3, r7, #4
 800e16a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800e16e:	68f8      	ldr	r0, [r7, #12]
 800e170:	f000 f86b 	bl	800e24a <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	68fa      	ldr	r2, [r7, #12]
 800e17a:	6812      	ldr	r2, [r2, #0]
 800e17c:	6812      	ldr	r2, [r2, #0]
 800e17e:	f042 0201 	orr.w	r2, r2, #1
 800e182:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800e184:	f7f2 f8c6 	bl	8000314 <HAL_GetTick>
 800e188:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e18a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e18e:	9300      	str	r3, [sp, #0]
 800e190:	693b      	ldr	r3, [r7, #16]
 800e192:	2200      	movs	r2, #0
 800e194:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e198:	68f8      	ldr	r0, [r7, #12]
 800e19a:	f7ff fbac 	bl	800d8f6 <UART_WaitOnFlagUntilTimeout>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d002      	beq.n	800e1aa <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9a>
  {
    status = HAL_TIMEOUT;
 800e1a4:	2303      	movs	r3, #3
 800e1a6:	75fb      	strb	r3, [r7, #23]
 800e1a8:	e002      	b.n	800e1b0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa0>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	2220      	movs	r2, #32
 800e1ae:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return status;
 800e1b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	3718      	adds	r7, #24
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}

0800e1c2 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800e1c2:	b480      	push	{r7}
 800e1c4:	b083      	sub	sp, #12
 800e1c6:	af00      	add	r7, sp, #0
 800e1c8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800e1d0:	2b01      	cmp	r3, #1
 800e1d2:	d101      	bne.n	800e1d8 <HAL_UARTEx_EnableStopMode+0x16>
 800e1d4:	2302      	movs	r3, #2
 800e1d6:	e010      	b.n	800e1fa <HAL_UARTEx_EnableStopMode+0x38>
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2201      	movs	r2, #1
 800e1dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  /* Set UESM bit */
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	687a      	ldr	r2, [r7, #4]
 800e1e6:	6812      	ldr	r2, [r2, #0]
 800e1e8:	6812      	ldr	r2, [r2, #0]
 800e1ea:	f042 0202 	orr.w	r2, r2, #2
 800e1ee:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800e1f8:	2300      	movs	r3, #0
}
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	370c      	adds	r7, #12
 800e1fe:	46bd      	mov	sp, r7
 800e200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e204:	4770      	bx	lr

0800e206 <HAL_UARTEx_DisableStopMode>:
  * @brief Disable UART Stop Mode.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableStopMode(UART_HandleTypeDef *huart)
{
 800e206:	b480      	push	{r7}
 800e208:	b083      	sub	sp, #12
 800e20a:	af00      	add	r7, sp, #0
 800e20c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800e214:	2b01      	cmp	r3, #1
 800e216:	d101      	bne.n	800e21c <HAL_UARTEx_DisableStopMode+0x16>
 800e218:	2302      	movs	r3, #2
 800e21a:	e010      	b.n	800e23e <HAL_UARTEx_DisableStopMode+0x38>
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2201      	movs	r2, #1
 800e220:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  /* Clear UESM bit */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	687a      	ldr	r2, [r7, #4]
 800e22a:	6812      	ldr	r2, [r2, #0]
 800e22c:	6812      	ldr	r2, [r2, #0]
 800e22e:	f022 0202 	bic.w	r2, r2, #2
 800e232:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2200      	movs	r2, #0
 800e238:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800e23c:	2300      	movs	r3, #0
}
 800e23e:	4618      	mov	r0, r3
 800e240:	370c      	adds	r7, #12
 800e242:	46bd      	mov	sp, r7
 800e244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e248:	4770      	bx	lr

0800e24a <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800e24a:	b480      	push	{r7}
 800e24c:	b085      	sub	sp, #20
 800e24e:	af00      	add	r7, sp, #0
 800e250:	60f8      	str	r0, [r7, #12]
 800e252:	1d3b      	adds	r3, r7, #4
 800e254:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	68fa      	ldr	r2, [r7, #12]
 800e25e:	6812      	ldr	r2, [r2, #0]
 800e260:	6852      	ldr	r2, [r2, #4]
 800e262:	f022 0210 	bic.w	r2, r2, #16
 800e266:	8939      	ldrh	r1, [r7, #8]
 800e268:	430a      	orrs	r2, r1
 800e26a:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	68fa      	ldr	r2, [r7, #12]
 800e272:	6812      	ldr	r2, [r2, #0]
 800e274:	6852      	ldr	r2, [r2, #4]
 800e276:	f022 417f 	bic.w	r1, r2, #4278190080	; 0xff000000
 800e27a:	7aba      	ldrb	r2, [r7, #10]
 800e27c:	0612      	lsls	r2, r2, #24
 800e27e:	430a      	orrs	r2, r1
 800e280:	605a      	str	r2, [r3, #4]
}
 800e282:	bf00      	nop
 800e284:	3714      	adds	r7, #20
 800e286:	46bd      	mov	sp, r7
 800e288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28c:	4770      	bx	lr
	...

0800e290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b082      	sub	sp, #8
 800e294:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800e296:	f7f1 ff97 	bl	80001c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800e29a:	f000 f81a 	bl	800e2d2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800e29e:	f000 f9d5 	bl	800e64c <MX_GPIO_Init>
  MX_DMA_Init();
 800e2a2:	f000 f971 	bl	800e588 <MX_DMA_Init>
  MX_TIM5_Init();
 800e2a6:	f000 f889 	bl	800e3bc <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  //calculate timeout
  MX_DMA_Init();
 800e2aa:	f000 f96d 	bl	800e588 <MX_DMA_Init>
  MX_UART4_Init();
 800e2ae:	f000 f8d5 	bl	800e45c <MX_UART4_Init>

  uint32_t ack_ack = UBX_Send_Ack();
 800e2b2:	f000 fba9 	bl	800ea08 <UBX_Send_Ack>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	607b      	str	r3, [r7, #4]
  if(ack_ack == UBX_ACK_ACK)
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	2b01      	cmp	r3, #1
 800e2be:	d105      	bne.n	800e2cc <main+0x3c>
  {
	  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,SET);
 800e2c0:	2201      	movs	r2, #1
 800e2c2:	2120      	movs	r1, #32
 800e2c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e2c8:	f7f3 fc9c 	bl	8001c04 <HAL_GPIO_WritePin>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int i = 0;
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	603b      	str	r3, [r7, #0]
  while (1)
 800e2d0:	e7fe      	b.n	800e2d0 <main+0x40>

0800e2d2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800e2d2:	b580      	push	{r7, lr}
 800e2d4:	b0b8      	sub	sp, #224	; 0xe0
 800e2d6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800e2d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800e2dc:	2244      	movs	r2, #68	; 0x44
 800e2de:	2100      	movs	r1, #0
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f001 f947 	bl	800f574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800e2e6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	601a      	str	r2, [r3, #0]
 800e2ee:	605a      	str	r2, [r3, #4]
 800e2f0:	609a      	str	r2, [r3, #8]
 800e2f2:	60da      	str	r2, [r3, #12]
 800e2f4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e2f6:	463b      	mov	r3, r7
 800e2f8:	2288      	movs	r2, #136	; 0x88
 800e2fa:	2100      	movs	r1, #0
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	f001 f939 	bl	800f574 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800e302:	2302      	movs	r3, #2
 800e304:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800e308:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e30c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800e310:	2310      	movs	r3, #16
 800e312:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e316:	2302      	movs	r3, #2
 800e318:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800e31c:	2302      	movs	r3, #2
 800e31e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800e322:	2301      	movs	r3, #1
 800e324:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 9;
 800e328:	2309      	movs	r3, #9
 800e32a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800e32e:	2307      	movs	r3, #7
 800e330:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800e334:	2302      	movs	r3, #2
 800e336:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 800e33a:	2306      	movs	r3, #6
 800e33c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e340:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800e344:	4618      	mov	r0, r3
 800e346:	f7f4 fd79 	bl	8002e3c <HAL_RCC_OscConfig>
 800e34a:	4603      	mov	r3, r0
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d001      	beq.n	800e354 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800e350:	f000 fc92 	bl	800ec78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800e354:	230f      	movs	r3, #15
 800e356:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800e35a:	2303      	movs	r3, #3
 800e35c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800e360:	2300      	movs	r3, #0
 800e362:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800e366:	2300      	movs	r3, #0
 800e368:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800e36c:	2300      	movs	r3, #0
 800e36e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800e372:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800e376:	2101      	movs	r1, #1
 800e378:	4618      	mov	r0, r3
 800e37a:	f7f5 f90f 	bl	800359c <HAL_RCC_ClockConfig>
 800e37e:	4603      	mov	r3, r0
 800e380:	2b00      	cmp	r3, #0
 800e382:	d001      	beq.n	800e388 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800e384:	f000 fc78 	bl	800ec78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800e388:	2308      	movs	r3, #8
 800e38a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800e38c:	2300      	movs	r3, #0
 800e38e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e390:	463b      	mov	r3, r7
 800e392:	4618      	mov	r0, r3
 800e394:	f7f5 fc5e 	bl	8003c54 <HAL_RCCEx_PeriphCLKConfig>
 800e398:	4603      	mov	r3, r0
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d001      	beq.n	800e3a2 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800e39e:	f000 fc6b 	bl	800ec78 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800e3a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 800e3a6:	f7f3 fe53 	bl	8002050 <HAL_PWREx_ControlVoltageScaling>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d001      	beq.n	800e3b4 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800e3b0:	f000 fc62 	bl	800ec78 <Error_Handler>
  }
}
 800e3b4:	bf00      	nop
 800e3b6:	37e0      	adds	r7, #224	; 0xe0
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}

0800e3bc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b088      	sub	sp, #32
 800e3c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e3c2:	f107 0310 	add.w	r3, r7, #16
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	601a      	str	r2, [r3, #0]
 800e3ca:	605a      	str	r2, [r3, #4]
 800e3cc:	609a      	str	r2, [r3, #8]
 800e3ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e3d0:	1d3b      	adds	r3, r7, #4
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	601a      	str	r2, [r3, #0]
 800e3d6:	605a      	str	r2, [r3, #4]
 800e3d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800e3da:	4b1e      	ldr	r3, [pc, #120]	; (800e454 <MX_TIM5_Init+0x98>)
 800e3dc:	4a1e      	ldr	r2, [pc, #120]	; (800e458 <MX_TIM5_Init+0x9c>)
 800e3de:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 23999;
 800e3e0:	4b1c      	ldr	r3, [pc, #112]	; (800e454 <MX_TIM5_Init+0x98>)
 800e3e2:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 800e3e6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e3e8:	4b1a      	ldr	r3, [pc, #104]	; (800e454 <MX_TIM5_Init+0x98>)
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 480;
 800e3ee:	4b19      	ldr	r3, [pc, #100]	; (800e454 <MX_TIM5_Init+0x98>)
 800e3f0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e3f4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e3f6:	4b17      	ldr	r3, [pc, #92]	; (800e454 <MX_TIM5_Init+0x98>)
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e3fc:	4b15      	ldr	r3, [pc, #84]	; (800e454 <MX_TIM5_Init+0x98>)
 800e3fe:	2200      	movs	r2, #0
 800e400:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800e402:	4814      	ldr	r0, [pc, #80]	; (800e454 <MX_TIM5_Init+0x98>)
 800e404:	f7f7 f9b8 	bl	8005778 <HAL_TIM_Base_Init>
 800e408:	4603      	mov	r3, r0
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d001      	beq.n	800e412 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 800e40e:	f000 fc33 	bl	800ec78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e412:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e416:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800e418:	f107 0310 	add.w	r3, r7, #16
 800e41c:	4619      	mov	r1, r3
 800e41e:	480d      	ldr	r0, [pc, #52]	; (800e454 <MX_TIM5_Init+0x98>)
 800e420:	f7fa fdb2 	bl	8008f88 <HAL_TIM_ConfigClockSource>
 800e424:	4603      	mov	r3, r0
 800e426:	2b00      	cmp	r3, #0
 800e428:	d001      	beq.n	800e42e <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 800e42a:	f000 fc25 	bl	800ec78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e42e:	2300      	movs	r3, #0
 800e430:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e432:	2300      	movs	r3, #0
 800e434:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800e436:	1d3b      	adds	r3, r7, #4
 800e438:	4619      	mov	r1, r3
 800e43a:	4806      	ldr	r0, [pc, #24]	; (800e454 <MX_TIM5_Init+0x98>)
 800e43c:	f7fd f842 	bl	800b4c4 <HAL_TIMEx_MasterConfigSynchronization>
 800e440:	4603      	mov	r3, r0
 800e442:	2b00      	cmp	r3, #0
 800e444:	d001      	beq.n	800e44a <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 800e446:	f000 fc17 	bl	800ec78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800e44a:	bf00      	nop
 800e44c:	3720      	adds	r7, #32
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}
 800e452:	bf00      	nop
 800e454:	2000027c 	.word	0x2000027c
 800e458:	40000c00 	.word	0x40000c00

0800e45c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init()
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	af00      	add	r7, sp, #0

  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */
  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800e460:	4b46      	ldr	r3, [pc, #280]	; (800e57c <MX_UART4_Init+0x120>)
 800e462:	4a47      	ldr	r2, [pc, #284]	; (800e580 <MX_UART4_Init+0x124>)
 800e464:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800e466:	4b45      	ldr	r3, [pc, #276]	; (800e57c <MX_UART4_Init+0x120>)
 800e468:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800e46c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800e46e:	4b43      	ldr	r3, [pc, #268]	; (800e57c <MX_UART4_Init+0x120>)
 800e470:	2200      	movs	r2, #0
 800e472:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800e474:	4b41      	ldr	r3, [pc, #260]	; (800e57c <MX_UART4_Init+0x120>)
 800e476:	2200      	movs	r2, #0
 800e478:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800e47a:	4b40      	ldr	r3, [pc, #256]	; (800e57c <MX_UART4_Init+0x120>)
 800e47c:	2200      	movs	r2, #0
 800e47e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800e480:	4b3e      	ldr	r3, [pc, #248]	; (800e57c <MX_UART4_Init+0x120>)
 800e482:	220c      	movs	r2, #12
 800e484:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e486:	4b3d      	ldr	r3, [pc, #244]	; (800e57c <MX_UART4_Init+0x120>)
 800e488:	2200      	movs	r2, #0
 800e48a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800e48c:	4b3b      	ldr	r3, [pc, #236]	; (800e57c <MX_UART4_Init+0x120>)
 800e48e:	2200      	movs	r2, #0
 800e490:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e492:	4b3a      	ldr	r3, [pc, #232]	; (800e57c <MX_UART4_Init+0x120>)
 800e494:	2200      	movs	r2, #0
 800e496:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 800e498:	4b38      	ldr	r3, [pc, #224]	; (800e57c <MX_UART4_Init+0x120>)
 800e49a:	2240      	movs	r2, #64	; 0x40
 800e49c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 800e49e:	4b37      	ldr	r3, [pc, #220]	; (800e57c <MX_UART4_Init+0x120>)
 800e4a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e4a4:	641a      	str	r2, [r3, #64]	; 0x40
  huart4.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 800e4a6:	4b35      	ldr	r3, [pc, #212]	; (800e57c <MX_UART4_Init+0x120>)
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	645a      	str	r2, [r3, #68]	; 0x44
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800e4ac:	4833      	ldr	r0, [pc, #204]	; (800e57c <MX_UART4_Init+0x120>)
 800e4ae:	f7fd faa5 	bl	800b9fc <HAL_UART_Init>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d001      	beq.n	800e4bc <MX_UART4_Init+0x60>
  {
    Error_Handler();
 800e4b8:	f000 fbde 	bl	800ec78 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */
  /********************** AUTOBAUDRATE Detection *****************/
  /* Wait until Receive enable acknowledge flag is set */
  while(__HAL_UART_GET_FLAG(&huart4,UART_FLAG_REACK) == RESET)
 800e4bc:	bf00      	nop
 800e4be:	4b2f      	ldr	r3, [pc, #188]	; (800e57c <MX_UART4_Init+0x120>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	69db      	ldr	r3, [r3, #28]
 800e4c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e4c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e4cc:	d1f7      	bne.n	800e4be <MX_UART4_Init+0x62>
  {}
  /* Wait until Transmit enable acknowledge flag is set */
  while(__HAL_UART_GET_FLAG(&huart4,UART_FLAG_TEACK) == RESET)
 800e4ce:	bf00      	nop
 800e4d0:	4b2a      	ldr	r3, [pc, #168]	; (800e57c <MX_UART4_Init+0x120>)
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	69db      	ldr	r3, [r3, #28]
 800e4d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e4da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e4de:	d1f7      	bne.n	800e4d0 <MX_UART4_Init+0x74>
  {}
  /* Loop until the end of Autobaudrate phase */
  while(__HAL_UART_GET_FLAG(&huart4,UART_FLAG_ABRF) == RESET)
 800e4e0:	bf00      	nop
 800e4e2:	4b26      	ldr	r3, [pc, #152]	; (800e57c <MX_UART4_Init+0x120>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	69db      	ldr	r3, [r3, #28]
 800e4e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e4ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e4f0:	d1f7      	bne.n	800e4e2 <MX_UART4_Init+0x86>
  {}
  /* Check for any errors that may have occured */
  if(__HAL_UART_GET_FLAG(&huart4, UART_FLAG_ABRE) != SET)
 800e4f2:	4b22      	ldr	r3, [pc, #136]	; (800e57c <MX_UART4_Init+0x120>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	69db      	ldr	r3, [r3, #28]
 800e4f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e4fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e500:	d007      	beq.n	800e512 <MX_UART4_Init+0xb6>
  {
	  // wait for RXNE flag
	  while(__HAL_UART_GET_FLAG(&huart4, UART_FLAG_RXNE) != SET);
 800e502:	bf00      	nop
 800e504:	4b1d      	ldr	r3, [pc, #116]	; (800e57c <MX_UART4_Init+0x120>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	69db      	ldr	r3, [r3, #28]
 800e50a:	f003 0320 	and.w	r3, r3, #32
 800e50e:	2b20      	cmp	r3, #32
 800e510:	d1f8      	bne.n	800e504 <MX_UART4_Init+0xa8>

  }

  /*********************** END *******************************/
  // clear any additional errors
  		if(__HAL_UART_GET_FLAG(&huart4,UART_FLAG_PE))
 800e512:	4b1a      	ldr	r3, [pc, #104]	; (800e57c <MX_UART4_Init+0x120>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	69db      	ldr	r3, [r3, #28]
 800e518:	f003 0301 	and.w	r3, r3, #1
 800e51c:	2b01      	cmp	r3, #1
 800e51e:	d103      	bne.n	800e528 <MX_UART4_Init+0xcc>
  		{
  			__HAL_UART_CLEAR_FLAG(&huart4,UART_FLAG_PE);
 800e520:	4b16      	ldr	r3, [pc, #88]	; (800e57c <MX_UART4_Init+0x120>)
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	2201      	movs	r2, #1
 800e526:	621a      	str	r2, [r3, #32]
  		}
  		if(__HAL_UART_GET_FLAG(&huart4,UART_FLAG_NE))
 800e528:	4b14      	ldr	r3, [pc, #80]	; (800e57c <MX_UART4_Init+0x120>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	69db      	ldr	r3, [r3, #28]
 800e52e:	f003 0304 	and.w	r3, r3, #4
 800e532:	2b04      	cmp	r3, #4
 800e534:	d103      	bne.n	800e53e <MX_UART4_Init+0xe2>
  		{
  			__HAL_UART_CLEAR_FLAG(&huart4,UART_FLAG_NE);
 800e536:	4b11      	ldr	r3, [pc, #68]	; (800e57c <MX_UART4_Init+0x120>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	2204      	movs	r2, #4
 800e53c:	621a      	str	r2, [r3, #32]
  		}
  		if(__HAL_UART_GET_FLAG(&huart4,UART_FLAG_FE))
 800e53e:	4b0f      	ldr	r3, [pc, #60]	; (800e57c <MX_UART4_Init+0x120>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	69db      	ldr	r3, [r3, #28]
 800e544:	f003 0302 	and.w	r3, r3, #2
 800e548:	2b02      	cmp	r3, #2
 800e54a:	d103      	bne.n	800e554 <MX_UART4_Init+0xf8>
  		{
  			__HAL_UART_CLEAR_FLAG(&huart4,UART_FLAG_FE);
 800e54c:	4b0b      	ldr	r3, [pc, #44]	; (800e57c <MX_UART4_Init+0x120>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	2202      	movs	r2, #2
 800e552:	621a      	str	r2, [r3, #32]
  		}
  		if(__HAL_UART_GET_FLAG(&huart4,UART_FLAG_ORE))
 800e554:	4b09      	ldr	r3, [pc, #36]	; (800e57c <MX_UART4_Init+0x120>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	69db      	ldr	r3, [r3, #28]
 800e55a:	f003 0308 	and.w	r3, r3, #8
 800e55e:	2b08      	cmp	r3, #8
 800e560:	d103      	bne.n	800e56a <MX_UART4_Init+0x10e>
  		{
  			__HAL_UART_CLEAR_FLAG(&huart4,UART_FLAG_ORE);
 800e562:	4b06      	ldr	r3, [pc, #24]	; (800e57c <MX_UART4_Init+0x120>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	2208      	movs	r2, #8
 800e568:	621a      	str	r2, [r3, #32]
  		}
  		__HAL_UART_CLEAR_FLAG(&huart4,UART_FLAG_IDLE);
 800e56a:	4b04      	ldr	r3, [pc, #16]	; (800e57c <MX_UART4_Init+0x120>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	2210      	movs	r2, #16
 800e570:	621a      	str	r2, [r3, #32]
  		USART_TX_Ready = 1;
 800e572:	4b04      	ldr	r3, [pc, #16]	; (800e584 <MX_UART4_Init+0x128>)
 800e574:	2201      	movs	r2, #1
 800e576:	701a      	strb	r2, [r3, #0]
  /* USER CODE END UART4_Init 2 */

}
 800e578:	bf00      	nop
 800e57a:	bd80      	pop	{r7, pc}
 800e57c:	20000518 	.word	0x20000518
 800e580:	40004c00 	.word	0x40004c00
 800e584:	20000074 	.word	0x20000074

0800e588 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  */
static void MX_DMA_Init(void) 
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b082      	sub	sp, #8
 800e58c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800e58e:	4a2c      	ldr	r2, [pc, #176]	; (800e640 <MX_DMA_Init+0xb8>)
 800e590:	4b2b      	ldr	r3, [pc, #172]	; (800e640 <MX_DMA_Init+0xb8>)
 800e592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e594:	f043 0302 	orr.w	r3, r3, #2
 800e598:	6493      	str	r3, [r2, #72]	; 0x48
 800e59a:	4b29      	ldr	r3, [pc, #164]	; (800e640 <MX_DMA_Init+0xb8>)
 800e59c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e59e:	f003 0302 	and.w	r3, r3, #2
 800e5a2:	607b      	str	r3, [r7, #4]
 800e5a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800e5a6:	4a26      	ldr	r2, [pc, #152]	; (800e640 <MX_DMA_Init+0xb8>)
 800e5a8:	4b25      	ldr	r3, [pc, #148]	; (800e640 <MX_DMA_Init+0xb8>)
 800e5aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5ac:	f043 0301 	orr.w	r3, r3, #1
 800e5b0:	6493      	str	r3, [r2, #72]	; 0x48
 800e5b2:	4b23      	ldr	r3, [pc, #140]	; (800e640 <MX_DMA_Init+0xb8>)
 800e5b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5b6:	f003 0301 	and.w	r3, r3, #1
 800e5ba:	603b      	str	r3, [r7, #0]
 800e5bc:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 800e5be:	4b21      	ldr	r3, [pc, #132]	; (800e644 <MX_DMA_Init+0xbc>)
 800e5c0:	4a21      	ldr	r2, [pc, #132]	; (800e648 <MX_DMA_Init+0xc0>)
 800e5c2:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel1.Init.Request = DMA_REQUEST_0;
 800e5c4:	4b1f      	ldr	r3, [pc, #124]	; (800e644 <MX_DMA_Init+0xbc>)
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800e5ca:	4b1e      	ldr	r3, [pc, #120]	; (800e644 <MX_DMA_Init+0xbc>)
 800e5cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800e5d0:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 800e5d2:	4b1c      	ldr	r3, [pc, #112]	; (800e644 <MX_DMA_Init+0xbc>)
 800e5d4:	2240      	movs	r2, #64	; 0x40
 800e5d6:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 800e5d8:	4b1a      	ldr	r3, [pc, #104]	; (800e644 <MX_DMA_Init+0xbc>)
 800e5da:	2280      	movs	r2, #128	; 0x80
 800e5dc:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e5de:	4b19      	ldr	r3, [pc, #100]	; (800e644 <MX_DMA_Init+0xbc>)
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e5e4:	4b17      	ldr	r3, [pc, #92]	; (800e644 <MX_DMA_Init+0xbc>)
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 800e5ea:	4b16      	ldr	r3, [pc, #88]	; (800e644 <MX_DMA_Init+0xbc>)
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 800e5f0:	4b14      	ldr	r3, [pc, #80]	; (800e644 <MX_DMA_Init+0xbc>)
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 800e5f6:	4813      	ldr	r0, [pc, #76]	; (800e644 <MX_DMA_Init+0xbc>)
 800e5f8:	f7f2 fba4 	bl	8000d44 <HAL_DMA_Init>
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d001      	beq.n	800e606 <MX_DMA_Init+0x7e>
  {
    Error_Handler( );
 800e602:	f000 fb39 	bl	800ec78 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800e606:	2200      	movs	r2, #0
 800e608:	2100      	movs	r1, #0
 800e60a:	200b      	movs	r0, #11
 800e60c:	f7f2 fa59 	bl	8000ac2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800e610:	200b      	movs	r0, #11
 800e612:	f7f2 fa72 	bl	8000afa <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 800e616:	2200      	movs	r2, #0
 800e618:	2100      	movs	r1, #0
 800e61a:	203a      	movs	r0, #58	; 0x3a
 800e61c:	f7f2 fa51 	bl	8000ac2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 800e620:	203a      	movs	r0, #58	; 0x3a
 800e622:	f7f2 fa6a 	bl	8000afa <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 800e626:	2200      	movs	r2, #0
 800e628:	2100      	movs	r1, #0
 800e62a:	203c      	movs	r0, #60	; 0x3c
 800e62c:	f7f2 fa49 	bl	8000ac2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 800e630:	203c      	movs	r0, #60	; 0x3c
 800e632:	f7f2 fa62 	bl	8000afa <HAL_NVIC_EnableIRQ>

}
 800e636:	bf00      	nop
 800e638:	3708      	adds	r7, #8
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}
 800e63e:	bf00      	nop
 800e640:	40021000 	.word	0x40021000
 800e644:	200002dc 	.word	0x200002dc
 800e648:	40020008 	.word	0x40020008

0800e64c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b08a      	sub	sp, #40	; 0x28
 800e650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e652:	f107 0314 	add.w	r3, r7, #20
 800e656:	2200      	movs	r2, #0
 800e658:	601a      	str	r2, [r3, #0]
 800e65a:	605a      	str	r2, [r3, #4]
 800e65c:	609a      	str	r2, [r3, #8]
 800e65e:	60da      	str	r2, [r3, #12]
 800e660:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e662:	4a2b      	ldr	r2, [pc, #172]	; (800e710 <MX_GPIO_Init+0xc4>)
 800e664:	4b2a      	ldr	r3, [pc, #168]	; (800e710 <MX_GPIO_Init+0xc4>)
 800e666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e668:	f043 0304 	orr.w	r3, r3, #4
 800e66c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e66e:	4b28      	ldr	r3, [pc, #160]	; (800e710 <MX_GPIO_Init+0xc4>)
 800e670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e672:	f003 0304 	and.w	r3, r3, #4
 800e676:	613b      	str	r3, [r7, #16]
 800e678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800e67a:	4a25      	ldr	r2, [pc, #148]	; (800e710 <MX_GPIO_Init+0xc4>)
 800e67c:	4b24      	ldr	r3, [pc, #144]	; (800e710 <MX_GPIO_Init+0xc4>)
 800e67e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e684:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e686:	4b22      	ldr	r3, [pc, #136]	; (800e710 <MX_GPIO_Init+0xc4>)
 800e688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e68a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e68e:	60fb      	str	r3, [r7, #12]
 800e690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e692:	4a1f      	ldr	r2, [pc, #124]	; (800e710 <MX_GPIO_Init+0xc4>)
 800e694:	4b1e      	ldr	r3, [pc, #120]	; (800e710 <MX_GPIO_Init+0xc4>)
 800e696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e698:	f043 0301 	orr.w	r3, r3, #1
 800e69c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e69e:	4b1c      	ldr	r3, [pc, #112]	; (800e710 <MX_GPIO_Init+0xc4>)
 800e6a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e6a2:	f003 0301 	and.w	r3, r3, #1
 800e6a6:	60bb      	str	r3, [r7, #8]
 800e6a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e6aa:	4a19      	ldr	r2, [pc, #100]	; (800e710 <MX_GPIO_Init+0xc4>)
 800e6ac:	4b18      	ldr	r3, [pc, #96]	; (800e710 <MX_GPIO_Init+0xc4>)
 800e6ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e6b0:	f043 0302 	orr.w	r3, r3, #2
 800e6b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e6b6:	4b16      	ldr	r3, [pc, #88]	; (800e710 <MX_GPIO_Init+0xc4>)
 800e6b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e6ba:	f003 0302 	and.w	r3, r3, #2
 800e6be:	607b      	str	r3, [r7, #4]
 800e6c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	2120      	movs	r1, #32
 800e6c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e6ca:	f7f3 fa9b 	bl	8001c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800e6ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e6d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800e6d4:	4b0f      	ldr	r3, [pc, #60]	; (800e714 <MX_GPIO_Init+0xc8>)
 800e6d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e6d8:	2300      	movs	r3, #0
 800e6da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800e6dc:	f107 0314 	add.w	r3, r7, #20
 800e6e0:	4619      	mov	r1, r3
 800e6e2:	480d      	ldr	r0, [pc, #52]	; (800e718 <MX_GPIO_Init+0xcc>)
 800e6e4:	f7f2 ffda 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800e6e8:	2320      	movs	r3, #32
 800e6ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800e6f8:	f107 0314 	add.w	r3, r7, #20
 800e6fc:	4619      	mov	r1, r3
 800e6fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e702:	f7f2 ffcb 	bl	800169c <HAL_GPIO_Init>

}
 800e706:	bf00      	nop
 800e708:	3728      	adds	r7, #40	; 0x28
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}
 800e70e:	bf00      	nop
 800e710:	40021000 	.word	0x40021000
 800e714:	10210000 	.word	0x10210000
 800e718:	48000800 	.word	0x48000800

0800e71c <USART_GPS_IRQHandler>:

/* USER CODE BEGIN 4 */
void  USART_GPS_IRQHandler( UART_HandleTypeDef* huart, DMA_HandleTypeDef* hdma )
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b084      	sub	sp, #16
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
 800e724:	6039      	str	r1, [r7, #0]
	if(__HAL_UART_GET_IT_SOURCE(huart,UART_IT_IDLE))
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	f003 0310 	and.w	r3, r3, #16
 800e730:	2b00      	cmp	r3, #0
 800e732:	d030      	beq.n	800e796 <USART_GPS_IRQHandler+0x7a>
	{

		//clears IDLE AND OVERRUN ERROR FLAG
		uint32_t temp  = huart->Instance->RDR;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e73a:	b29b      	uxth	r3, r3
 800e73c:	60fb      	str	r3, [r7, #12]
		temp = huart->Instance->ISR;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	69db      	ldr	r3, [r3, #28]
 800e744:	60fb      	str	r3, [r7, #12]
		(void)temp;
		 HAL_USART_Error_Handle(huart);
 800e746:	6878      	ldr	r0, [r7, #4]
 800e748:	f000 f900 	bl	800e94c <HAL_USART_Error_Handle>
		//clear DMA stream
		//This code overcomes the errata in the DMA where
		//all three Transfer flags active causes the DMA Channel
		//To become disabled

		__HAL_DMA_DISABLE(hdma);
 800e74c:	683b      	ldr	r3, [r7, #0]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	683a      	ldr	r2, [r7, #0]
 800e752:	6812      	ldr	r2, [r2, #0]
 800e754:	6812      	ldr	r2, [r2, #0]
 800e756:	f022 0201 	bic.w	r2, r2, #1
 800e75a:	601a      	str	r2, [r3, #0]
		while(__HAL_DMA_GET_FLAG(hdma,DMA_Rx_Flag_TCF) == RESET);
 800e75c:	bf00      	nop
 800e75e:	683b      	ldr	r3, [r7, #0]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	461a      	mov	r2, r3
 800e764:	4b29      	ldr	r3, [pc, #164]	; (800e80c <USART_GPS_IRQHandler+0xf0>)
 800e766:	429a      	cmp	r2, r3
 800e768:	d909      	bls.n	800e77e <USART_GPS_IRQHandler+0x62>
 800e76a:	4b29      	ldr	r3, [pc, #164]	; (800e810 <USART_GPS_IRQHandler+0xf4>)
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e772:	2b00      	cmp	r3, #0
 800e774:	bf0c      	ite	eq
 800e776:	2301      	moveq	r3, #1
 800e778:	2300      	movne	r3, #0
 800e77a:	b2db      	uxtb	r3, r3
 800e77c:	e008      	b.n	800e790 <USART_GPS_IRQHandler+0x74>
 800e77e:	4b25      	ldr	r3, [pc, #148]	; (800e814 <USART_GPS_IRQHandler+0xf8>)
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e786:	2b00      	cmp	r3, #0
 800e788:	bf0c      	ite	eq
 800e78a:	2301      	moveq	r3, #1
 800e78c:	2300      	movne	r3, #0
 800e78e:	b2db      	uxtb	r3, r3
 800e790:	2b00      	cmp	r3, #0
 800e792:	d1e4      	bne.n	800e75e <USART_GPS_IRQHandler+0x42>
		__NOP();
 800e794:	bf00      	nop


	}
	//Tx USART_Handler
	if(__HAL_UART_GET_IT(huart,UART_IT_TC))
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	69db      	ldr	r3, [r3, #28]
 800e79c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d02f      	beq.n	800e804 <USART_GPS_IRQHandler+0xe8>
	{
		//read from TDR
		if(USART_TX_Ready)
 800e7a4:	4b1c      	ldr	r3, [pc, #112]	; (800e818 <USART_GPS_IRQHandler+0xfc>)
 800e7a6:	781b      	ldrb	r3, [r3, #0]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d01f      	beq.n	800e7ec <USART_GPS_IRQHandler+0xd0>
		{
			uint32_t temp = huart->Instance->TDR;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e7b2:	b29b      	uxth	r3, r3
 800e7b4:	60bb      	str	r3, [r7, #8]
			(void)temp;
			//clear flag
			__HAL_UART_CLEAR_FLAG(huart,UART_FLAG_TC |UART_FLAG_TXE);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	22c0      	movs	r2, #192	; 0xc0
 800e7bc:	621a      	str	r2, [r3, #32]
			//disable DMA
			TX_COMPLETE_FLAG = 1;
 800e7be:	4b17      	ldr	r3, [pc, #92]	; (800e81c <USART_GPS_IRQHandler+0x100>)
 800e7c0:	2201      	movs	r2, #1
 800e7c2:	601a      	str	r2, [r3, #0]
			USART_TX_Ready = 0;
 800e7c4:	4b14      	ldr	r3, [pc, #80]	; (800e818 <USART_GPS_IRQHandler+0xfc>)
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	701a      	strb	r2, [r3, #0]
			Clear_Buffer(DMA_TX_Buffer,DMA_TX_BUFFER_SIZE);
 800e7ca:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e7ce:	4814      	ldr	r0, [pc, #80]	; (800e820 <USART_GPS_IRQHandler+0x104>)
 800e7d0:	f000 fa38 	bl	800ec44 <Clear_Buffer>
			CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	687a      	ldr	r2, [r7, #4]
 800e7da:	6812      	ldr	r2, [r2, #0]
 800e7dc:	6892      	ldr	r2, [r2, #8]
 800e7de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e7e2:	609a      	str	r2, [r3, #8]
			huart->gState = HAL_UART_STATE_READY;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2220      	movs	r2, #32
 800e7e8:	675a      	str	r2, [r3, #116]	; 0x74
			__HAL_UART_DISABLE_IT(huart, UART_IT_TC);

		}
	}

}
 800e7ea:	e00b      	b.n	800e804 <USART_GPS_IRQHandler+0xe8>
			__HAL_UART_CLEAR_FLAG(huart,UART_FLAG_TC |UART_FLAG_TXE);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	22c0      	movs	r2, #192	; 0xc0
 800e7f2:	621a      	str	r2, [r3, #32]
			__HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	687a      	ldr	r2, [r7, #4]
 800e7fa:	6812      	ldr	r2, [r2, #0]
 800e7fc:	6812      	ldr	r2, [r2, #0]
 800e7fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e802:	601a      	str	r2, [r3, #0]
}
 800e804:	bf00      	nop
 800e806:	3710      	adds	r7, #16
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}
 800e80c:	40020080 	.word	0x40020080
 800e810:	40020400 	.word	0x40020400
 800e814:	40020000 	.word	0x40020000
 800e818:	20000074 	.word	0x20000074
 800e81c:	20000278 	.word	0x20000278
 800e820:	200005e0 	.word	0x200005e0

0800e824 <DMA_Rx_IRQHandler>:

void DMA_Rx_IRQHandler( DMA_HandleTypeDef* hdma, UART_HandleTypeDef* huart )
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b082      	sub	sp, #8
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
 800e82c:	6039      	str	r1, [r7, #0]


	if(__HAL_DMA_GET_IT_SOURCE(hdma,DMA_IT_TC))
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	f003 0302 	and.w	r3, r3, #2
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d031      	beq.n	800e8a0 <DMA_Rx_IRQHandler+0x7c>
	{
		//clear Transfer complete flag
		__HAL_DMA_CLEAR_FLAG(hdma,DMA_Rx_Flag_TCF);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	461a      	mov	r2, r3
 800e842:	4b19      	ldr	r3, [pc, #100]	; (800e8a8 <DMA_Rx_IRQHandler+0x84>)
 800e844:	429a      	cmp	r2, r3
 800e846:	d904      	bls.n	800e852 <DMA_Rx_IRQHandler+0x2e>
 800e848:	4b18      	ldr	r3, [pc, #96]	; (800e8ac <DMA_Rx_IRQHandler+0x88>)
 800e84a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800e84e:	605a      	str	r2, [r3, #4]
 800e850:	e003      	b.n	800e85a <DMA_Rx_IRQHandler+0x36>
 800e852:	4b17      	ldr	r3, [pc, #92]	; (800e8b0 <DMA_Rx_IRQHandler+0x8c>)
 800e854:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800e858:	605a      	str	r2, [r3, #4]

		/*****************************************************************/
		/*    	     TODO: Additional processing HERE    				 */
		/*****************************************************************/
		//stop timer
		gnss_length = DMA_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(hdma);
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	685b      	ldr	r3, [r3, #4]
 800e860:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 800e864:	461a      	mov	r2, r3
 800e866:	4b13      	ldr	r3, [pc, #76]	; (800e8b4 <DMA_Rx_IRQHandler+0x90>)
 800e868:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim5);
 800e86a:	4813      	ldr	r0, [pc, #76]	; (800e8b8 <DMA_Rx_IRQHandler+0x94>)
 800e86c:	f7f7 f874 	bl	8005958 <HAL_TIM_Base_Stop_IT>
		/*****************************************************************/
		/*    	     					end				   				 */
		/*****************************************************************/

		/* Method to prepare for next DMA transfer*/
		HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel1,(uint32_t)DMA_RX_Buffer,(uint32_t)GNSS_LOG_Buffer,gnss_length);
 800e870:	4912      	ldr	r1, [pc, #72]	; (800e8bc <DMA_Rx_IRQHandler+0x98>)
 800e872:	4a13      	ldr	r2, [pc, #76]	; (800e8c0 <DMA_Rx_IRQHandler+0x9c>)
 800e874:	4b0f      	ldr	r3, [pc, #60]	; (800e8b4 <DMA_Rx_IRQHandler+0x90>)
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	4812      	ldr	r0, [pc, #72]	; (800e8c4 <DMA_Rx_IRQHandler+0xa0>)
 800e87a:	f7f2 fbf0 	bl	800105e <HAL_DMA_Start_IT>
		hdma->DmaBaseAddress->IFCR = 0x3FU << hdma->ChannelIndex; // clear all interrupts
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e882:	687a      	ldr	r2, [r7, #4]
 800e884:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800e886:	213f      	movs	r1, #63	; 0x3f
 800e888:	fa01 f202 	lsl.w	r2, r1, r2
 800e88c:	605a      	str	r2, [r3, #4]
		hdma->Instance->CMAR = (uint32_t)DMA_RX_Buffer; //reset the pointer
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	4a0a      	ldr	r2, [pc, #40]	; (800e8bc <DMA_Rx_IRQHandler+0x98>)
 800e894:	60da      	str	r2, [r3, #12]
		hdma->Instance->CNDTR = DMA_RX_BUFFER_SIZE; //set the number of bytes to expect
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800e89e:	605a      	str	r2, [r3, #4]
	}

}
 800e8a0:	bf00      	nop
 800e8a2:	3708      	adds	r7, #8
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}
 800e8a8:	40020080 	.word	0x40020080
 800e8ac:	40020400 	.word	0x40020400
 800e8b0:	40020000 	.word	0x40020000
 800e8b4:	20000270 	.word	0x20000270
 800e8b8:	2000027c 	.word	0x2000027c
 800e8bc:	20000324 	.word	0x20000324
 800e8c0:	20000078 	.word	0x20000078
 800e8c4:	200002dc 	.word	0x200002dc

0800e8c8 <DMA_MEM_IRQHandler>:
void DMA_MEM_IRQHandler(DMA_HandleTypeDef* hdma, UART_HandleTypeDef* huart)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b082      	sub	sp, #8
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
 800e8d0:	6039      	str	r1, [r7, #0]
	if(__HAL_DMA_GET_IT_SOURCE(hdma,DMA_IT_TC))
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	f003 0302 	and.w	r3, r3, #2
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d027      	beq.n	800e930 <DMA_MEM_IRQHandler+0x68>
	{
		RX_COMPLETE_FLAG = 1;
 800e8e0:	4b15      	ldr	r3, [pc, #84]	; (800e938 <DMA_MEM_IRQHandler+0x70>)
 800e8e2:	2201      	movs	r2, #1
 800e8e4:	601a      	str	r2, [r3, #0]

		//clear RX Buffer
		Clear_Buffer(DMA_RX_Buffer,DMA_RX_BUFFER_SIZE);
 800e8e6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e8ea:	4814      	ldr	r0, [pc, #80]	; (800e93c <DMA_MEM_IRQHandler+0x74>)
 800e8ec:	f000 f9aa 	bl	800ec44 <Clear_Buffer>
		__HAL_DMA_CLEAR_FLAG(hdma,DMA_MEM_FLAG_TC);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	461a      	mov	r2, r3
 800e8f6:	4b12      	ldr	r3, [pc, #72]	; (800e940 <DMA_MEM_IRQHandler+0x78>)
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	d903      	bls.n	800e904 <DMA_MEM_IRQHandler+0x3c>
 800e8fc:	4b11      	ldr	r3, [pc, #68]	; (800e944 <DMA_MEM_IRQHandler+0x7c>)
 800e8fe:	2202      	movs	r2, #2
 800e900:	605a      	str	r2, [r3, #4]
 800e902:	e002      	b.n	800e90a <DMA_MEM_IRQHandler+0x42>
 800e904:	4b10      	ldr	r3, [pc, #64]	; (800e948 <DMA_MEM_IRQHandler+0x80>)
 800e906:	2202      	movs	r2, #2
 800e908:	605a      	str	r2, [r3, #4]
		__HAL_DMA_ENABLE(huart->hdmarx);
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	683a      	ldr	r2, [r7, #0]
 800e912:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800e914:	6812      	ldr	r2, [r2, #0]
 800e916:	6812      	ldr	r2, [r2, #0]
 800e918:	f042 0201 	orr.w	r2, r2, #1
 800e91c:	601a      	str	r2, [r3, #0]
		while(HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_EN)==RESET);
 800e91e:	bf00      	nop
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	f003 0301 	and.w	r3, r3, #1
 800e92c:	2b01      	cmp	r3, #1
 800e92e:	d1f7      	bne.n	800e920 <DMA_MEM_IRQHandler+0x58>

	}
}
 800e930:	bf00      	nop
 800e932:	3708      	adds	r7, #8
 800e934:	46bd      	mov	sp, r7
 800e936:	bd80      	pop	{r7, pc}
 800e938:	200002c8 	.word	0x200002c8
 800e93c:	20000324 	.word	0x20000324
 800e940:	40020080 	.word	0x40020080
 800e944:	40020400 	.word	0x40020400
 800e948:	40020000 	.word	0x40020000

0800e94c <HAL_USART_Error_Handle>:
void HAL_USART_Error_Handle(UART_HandleTypeDef *huart)
{
 800e94c:	b480      	push	{r7}
 800e94e:	b085      	sub	sp, #20
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
				uint32_t temp  = READ_REG(huart->Instance->ISR);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	69db      	ldr	r3, [r3, #28]
 800e95a:	60fb      	str	r3, [r7, #12]
		 		temp =  READ_REG(huart->Instance->ISR);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	69db      	ldr	r3, [r3, #28]
 800e962:	60fb      	str	r3, [r7, #12]
		 		(void)temp;
	 			__HAL_UART_DISABLE_IT(huart, UART_IT_IDLE);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	687a      	ldr	r2, [r7, #4]
 800e96a:	6812      	ldr	r2, [r2, #0]
 800e96c:	6812      	ldr	r2, [r2, #0]
 800e96e:	f022 0210 	bic.w	r2, r2, #16
 800e972:	601a      	str	r2, [r3, #0]
	 			CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	687a      	ldr	r2, [r7, #4]
 800e97a:	6812      	ldr	r2, [r2, #0]
 800e97c:	6812      	ldr	r2, [r2, #0]
 800e97e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e982:	601a      	str	r2, [r3, #0]
	 			CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	687a      	ldr	r2, [r7, #4]
 800e98a:	6812      	ldr	r2, [r2, #0]
 800e98c:	6892      	ldr	r2, [r2, #8]
 800e98e:	f022 0201 	bic.w	r2, r2, #1
 800e992:	609a      	str	r2, [r3, #8]
	 			huart4.Instance->ICR = 0xFFFF;
 800e994:	4b1b      	ldr	r3, [pc, #108]	; (800ea04 <HAL_USART_Error_Handle+0xb8>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e99c:	621a      	str	r2, [r3, #32]
	 			if(__HAL_UART_GET_FLAG(huart,UART_FLAG_ORE))
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	69db      	ldr	r3, [r3, #28]
 800e9a4:	f003 0308 	and.w	r3, r3, #8
 800e9a8:	2b08      	cmp	r3, #8
 800e9aa:	d103      	bne.n	800e9b4 <HAL_USART_Error_Handle+0x68>
	 			{
	 				__HAL_UART_CLEAR_FLAG(huart,UART_FLAG_ORE);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	2208      	movs	r2, #8
 800e9b2:	621a      	str	r2, [r3, #32]
	 			}
	 			// clear any additional errors
	 			if(__HAL_UART_GET_FLAG(huart,UART_FLAG_PE))
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	69db      	ldr	r3, [r3, #28]
 800e9ba:	f003 0301 	and.w	r3, r3, #1
 800e9be:	2b01      	cmp	r3, #1
 800e9c0:	d103      	bne.n	800e9ca <HAL_USART_Error_Handle+0x7e>
	 			{
	 				__HAL_UART_CLEAR_FLAG(huart,UART_FLAG_PE);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	2201      	movs	r2, #1
 800e9c8:	621a      	str	r2, [r3, #32]
	 			}
	 			if(__HAL_UART_GET_FLAG(huart,UART_FLAG_NE))
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	69db      	ldr	r3, [r3, #28]
 800e9d0:	f003 0304 	and.w	r3, r3, #4
 800e9d4:	2b04      	cmp	r3, #4
 800e9d6:	d103      	bne.n	800e9e0 <HAL_USART_Error_Handle+0x94>
	 			{
	 				__HAL_UART_CLEAR_FLAG(huart,UART_FLAG_NE);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	2204      	movs	r2, #4
 800e9de:	621a      	str	r2, [r3, #32]
	 			}
	 			if(__HAL_UART_GET_FLAG(huart,UART_FLAG_FE))
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	69db      	ldr	r3, [r3, #28]
 800e9e6:	f003 0302 	and.w	r3, r3, #2
 800e9ea:	2b02      	cmp	r3, #2
 800e9ec:	d103      	bne.n	800e9f6 <HAL_USART_Error_Handle+0xaa>
	 			{
	 				__HAL_UART_CLEAR_FLAG(huart,UART_FLAG_FE);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	2202      	movs	r2, #2
 800e9f4:	621a      	str	r2, [r3, #32]
	 			}
}
 800e9f6:	bf00      	nop
 800e9f8:	3714      	adds	r7, #20
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea00:	4770      	bx	lr
 800ea02:	bf00      	nop
 800ea04:	20000518 	.word	0x20000518

0800ea08 <UBX_Send_Ack>:
/********************* END OF PERIPHERAL FUNCTIONS ********************************/

/********************* START OF UBX FUNCTIONS ************************************/
UBX_MSG_t UBX_Send_Ack(void)
{
 800ea08:	b5b0      	push	{r4, r5, r7, lr}
 800ea0a:	b090      	sub	sp, #64	; 0x40
 800ea0c:	af00      	add	r7, sp, #0
	  __HAL_UART_ENABLE_IT(&huart4, UART_IT_TC);
 800ea0e:	4b6d      	ldr	r3, [pc, #436]	; (800ebc4 <UBX_Send_Ack+0x1bc>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	4a6c      	ldr	r2, [pc, #432]	; (800ebc4 <UBX_Send_Ack+0x1bc>)
 800ea14:	6812      	ldr	r2, [r2, #0]
 800ea16:	6812      	ldr	r2, [r2, #0]
 800ea18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ea1c:	601a      	str	r2, [r3, #0]
	uint8_t ubx_ack_string[] = {0xB5 ,0x62 ,0x06 ,0x09 ,0x0D ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0xFF ,0xFF ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x17 ,0x31 ,0xBF };
 800ea1e:	4b6a      	ldr	r3, [pc, #424]	; (800ebc8 <UBX_Send_Ack+0x1c0>)
 800ea20:	f107 0410 	add.w	r4, r7, #16
 800ea24:	461d      	mov	r5, r3
 800ea26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea2a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ea2e:	6020      	str	r0, [r4, #0]
 800ea30:	3404      	adds	r4, #4
 800ea32:	7021      	strb	r1, [r4, #0]
	 int size = (sizeof(ubx_ack_string)/sizeof(*ubx_ack_string));
 800ea34:	2315      	movs	r3, #21
 800ea36:	633b      	str	r3, [r7, #48]	; 0x30

	 for (int i = 0; i < size ; ++i)
 800ea38:	2300      	movs	r3, #0
 800ea3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ea3c:	e00c      	b.n	800ea58 <UBX_Send_Ack+0x50>
	 {
		DMA_TX_Buffer[i] = ubx_ack_string[i];
 800ea3e:	f107 0210 	add.w	r2, r7, #16
 800ea42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea44:	4413      	add	r3, r2
 800ea46:	7819      	ldrb	r1, [r3, #0]
 800ea48:	4a60      	ldr	r2, [pc, #384]	; (800ebcc <UBX_Send_Ack+0x1c4>)
 800ea4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea4c:	4413      	add	r3, r2
 800ea4e:	460a      	mov	r2, r1
 800ea50:	701a      	strb	r2, [r3, #0]
	 for (int i = 0; i < size ; ++i)
 800ea52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea54:	3301      	adds	r3, #1
 800ea56:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ea58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea5c:	429a      	cmp	r2, r3
 800ea5e:	dbee      	blt.n	800ea3e <UBX_Send_Ack+0x36>
	 }

	 if(HAL_UART_Transmit_DMA(&huart4,DMA_TX_Buffer,size)== HAL_OK)
 800ea60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea62:	b29b      	uxth	r3, r3
 800ea64:	461a      	mov	r2, r3
 800ea66:	4959      	ldr	r1, [pc, #356]	; (800ebcc <UBX_Send_Ack+0x1c4>)
 800ea68:	4856      	ldr	r0, [pc, #344]	; (800ebc4 <UBX_Send_Ack+0x1bc>)
 800ea6a:	f7fd fbe9 	bl	800c240 <HAL_UART_Transmit_DMA>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d11b      	bne.n	800eaac <UBX_Send_Ack+0xa4>
	 {
		  __HAL_DMA_ENABLE_IT(&hdma_uart4_rx, DMA_IT_TC);
 800ea74:	4b56      	ldr	r3, [pc, #344]	; (800ebd0 <UBX_Send_Ack+0x1c8>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	4a55      	ldr	r2, [pc, #340]	; (800ebd0 <UBX_Send_Ack+0x1c8>)
 800ea7a:	6812      	ldr	r2, [r2, #0]
 800ea7c:	6812      	ldr	r2, [r2, #0]
 800ea7e:	f042 0202 	orr.w	r2, r2, #2
 800ea82:	601a      	str	r2, [r3, #0]
		  __HAL_UART_ENABLE_IT(&huart4,UART_IT_IDLE);
 800ea84:	4b4f      	ldr	r3, [pc, #316]	; (800ebc4 <UBX_Send_Ack+0x1bc>)
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	4a4e      	ldr	r2, [pc, #312]	; (800ebc4 <UBX_Send_Ack+0x1bc>)
 800ea8a:	6812      	ldr	r2, [r2, #0]
 800ea8c:	6812      	ldr	r2, [r2, #0]
 800ea8e:	f042 0210 	orr.w	r2, r2, #16
 800ea92:	601a      	str	r2, [r3, #0]
		 HAL_UART_Receive_DMA(&huart4,DMA_RX_Buffer,DMA_RX_BUFFER_SIZE);
 800ea94:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ea98:	494e      	ldr	r1, [pc, #312]	; (800ebd4 <UBX_Send_Ack+0x1cc>)
 800ea9a:	484a      	ldr	r0, [pc, #296]	; (800ebc4 <UBX_Send_Ack+0x1bc>)
 800ea9c:	f7fd fc4c 	bl	800c338 <HAL_UART_Receive_DMA>
		 USART_Begin_Timeout(&htim5,10000);
 800eaa0:	f242 7110 	movw	r1, #10000	; 0x2710
 800eaa4:	484c      	ldr	r0, [pc, #304]	; (800ebd8 <UBX_Send_Ack+0x1d0>)
 800eaa6:	f000 f8b3 	bl	800ec10 <USART_Begin_Timeout>
	 }else
	 {
		 return UBX_TIMEOUT_Tx;
	 }

	 while(!RX_COMPLETE_FLAG)
 800eaaa:	e00c      	b.n	800eac6 <UBX_Send_Ack+0xbe>
		 return UBX_TIMEOUT_Tx;
 800eaac:	f06f 0301 	mvn.w	r3, #1
 800eab0:	e083      	b.n	800ebba <UBX_Send_Ack+0x1b2>
	 {
		 if(RX_TIMEOUT_FLAG)
 800eab2:	4b4a      	ldr	r3, [pc, #296]	; (800ebdc <UBX_Send_Ack+0x1d4>)
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d005      	beq.n	800eac6 <UBX_Send_Ack+0xbe>
		 {
			 RX_TIMEOUT_FLAG = 0;
 800eaba:	4b48      	ldr	r3, [pc, #288]	; (800ebdc <UBX_Send_Ack+0x1d4>)
 800eabc:	2200      	movs	r2, #0
 800eabe:	601a      	str	r2, [r3, #0]
			 return UBX_TIMEOUT_Rx;
 800eac0:	f06f 0302 	mvn.w	r3, #2
 800eac4:	e079      	b.n	800ebba <UBX_Send_Ack+0x1b2>
	 while(!RX_COMPLETE_FLAG)
 800eac6:	4b46      	ldr	r3, [pc, #280]	; (800ebe0 <UBX_Send_Ack+0x1d8>)
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d0f1      	beq.n	800eab2 <UBX_Send_Ack+0xaa>
		 }
	 }
	 RX_COMPLETE_FLAG = 0;
 800eace:	4b44      	ldr	r3, [pc, #272]	; (800ebe0 <UBX_Send_Ack+0x1d8>)
 800ead0:	2200      	movs	r2, #0
 800ead2:	601a      	str	r2, [r3, #0]
	 //wait for Rx to complete
	 //find first occurance of 0xB5
	 char val = (char) 0xB5;
 800ead4:	23b5      	movs	r3, #181	; 0xb5
 800ead6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	 int index = (int)(strchr((char*)GNSS_LOG_Buffer,val))-(int)GNSS_LOG_Buffer;
 800eada:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eade:	4619      	mov	r1, r3
 800eae0:	4840      	ldr	r0, [pc, #256]	; (800ebe4 <UBX_Send_Ack+0x1dc>)
 800eae2:	f000 fd4f 	bl	800f584 <strchr>
 800eae6:	4603      	mov	r3, r0
 800eae8:	461a      	mov	r2, r3
 800eaea:	4b3e      	ldr	r3, [pc, #248]	; (800ebe4 <UBX_Send_Ack+0x1dc>)
 800eaec:	1ad3      	subs	r3, r2, r3
 800eaee:	62bb      	str	r3, [r7, #40]	; 0x28
	 if((index < 0) || (index >GNSS_LOG_BUFFER_SIZE))
 800eaf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	db03      	blt.n	800eafe <UBX_Send_Ack+0xf6>
 800eaf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaf8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800eafc:	dd02      	ble.n	800eb04 <UBX_Send_Ack+0xfc>
	 {
	 	return UBX_ERROR;
 800eafe:	f04f 33ff 	mov.w	r3, #4294967295
 800eb02:	e05a      	b.n	800ebba <UBX_Send_Ack+0x1b2>
	 }
	 uint8_t msg[10] = {0};
 800eb04:	1d3b      	adds	r3, r7, #4
 800eb06:	2200      	movs	r2, #0
 800eb08:	601a      	str	r2, [r3, #0]
 800eb0a:	605a      	str	r2, [r3, #4]
 800eb0c:	811a      	strh	r2, [r3, #8]
	 memcpy(msg,&GNSS_LOG_Buffer[index],10);
 800eb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb10:	4a34      	ldr	r2, [pc, #208]	; (800ebe4 <UBX_Send_Ack+0x1dc>)
 800eb12:	441a      	add	r2, r3
 800eb14:	1d3b      	adds	r3, r7, #4
 800eb16:	6810      	ldr	r0, [r2, #0]
 800eb18:	6851      	ldr	r1, [r2, #4]
 800eb1a:	c303      	stmia	r3!, {r0, r1}
 800eb1c:	8912      	ldrh	r2, [r2, #8]
 800eb1e:	801a      	strh	r2, [r3, #0]
	 UBX_MSG_t GPS_Acknowledgement_State;
	 uint16_t header = ((uint16_t)msg[0]<<8) | ((uint16_t)msg[1]);
 800eb20:	793b      	ldrb	r3, [r7, #4]
 800eb22:	021b      	lsls	r3, r3, #8
 800eb24:	b21a      	sxth	r2, r3
 800eb26:	797b      	ldrb	r3, [r7, #5]
 800eb28:	b21b      	sxth	r3, r3
 800eb2a:	4313      	orrs	r3, r2
 800eb2c:	b21b      	sxth	r3, r3
 800eb2e:	84fb      	strh	r3, [r7, #38]	; 0x26
	 if(header == 0xb562)
 800eb30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eb32:	f24b 5262 	movw	r2, #46434	; 0xb562
 800eb36:	4293      	cmp	r3, r2
 800eb38:	d13d      	bne.n	800ebb6 <UBX_Send_Ack+0x1ae>
	 {
		 uint8_t ck_A =0, ck_B =0;
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800eb40:	2300      	movs	r3, #0
 800eb42:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
		 for (int i = 2; i < 8; ++i)
 800eb46:	2302      	movs	r3, #2
 800eb48:	637b      	str	r3, [r7, #52]	; 0x34
 800eb4a:	e012      	b.n	800eb72 <UBX_Send_Ack+0x16a>
		 {
		 	ck_A += (uint8_t)msg[i];
 800eb4c:	1d3a      	adds	r2, r7, #4
 800eb4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb50:	4413      	add	r3, r2
 800eb52:	781a      	ldrb	r2, [r3, #0]
 800eb54:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800eb58:	4413      	add	r3, r2
 800eb5a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		 	ck_B += ck_A;
 800eb5e:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800eb62:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800eb66:	4413      	add	r3, r2
 800eb68:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
		 for (int i = 2; i < 8; ++i)
 800eb6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb6e:	3301      	adds	r3, #1
 800eb70:	637b      	str	r3, [r7, #52]	; 0x34
 800eb72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb74:	2b07      	cmp	r3, #7
 800eb76:	dde9      	ble.n	800eb4c <UBX_Send_Ack+0x144>
		 }
		 if((ck_A == msg[8])&& (ck_B == msg[9]))
 800eb78:	7b3b      	ldrb	r3, [r7, #12]
 800eb7a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800eb7e:	429a      	cmp	r2, r3
 800eb80:	d116      	bne.n	800ebb0 <UBX_Send_Ack+0x1a8>
 800eb82:	7b7b      	ldrb	r3, [r7, #13]
 800eb84:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800eb88:	429a      	cmp	r2, r3
 800eb8a:	d111      	bne.n	800ebb0 <UBX_Send_Ack+0x1a8>
		 {
		 	//acknowledgement
		 	if(msg[2] == 0x05)
 800eb8c:	79bb      	ldrb	r3, [r7, #6]
 800eb8e:	2b05      	cmp	r3, #5
 800eb90:	d111      	bne.n	800ebb6 <UBX_Send_Ack+0x1ae>
		 	{
		 		switch (msg[3])
 800eb92:	79fb      	ldrb	r3, [r7, #7]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d002      	beq.n	800eb9e <UBX_Send_Ack+0x196>
 800eb98:	2b01      	cmp	r3, #1
 800eb9a:	d004      	beq.n	800eba6 <UBX_Send_Ack+0x19e>
		 	if(msg[2] == 0x05)
 800eb9c:	e00b      	b.n	800ebb6 <UBX_Send_Ack+0x1ae>
		 		{
		 			case 0:
		 			GPS_Acknowledgement_State = UBX_ACK_NACK;
 800eb9e:	2300      	movs	r3, #0
 800eba0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		 			break;
 800eba4:	e003      	b.n	800ebae <UBX_Send_Ack+0x1a6>
		 			case 1:
		 			GPS_Acknowledgement_State = UBX_ACK_ACK;
 800eba6:	2301      	movs	r3, #1
 800eba8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		 			break;
 800ebac:	bf00      	nop
		 	if(msg[2] == 0x05)
 800ebae:	e002      	b.n	800ebb6 <UBX_Send_Ack+0x1ae>
		 		}
		 	}
		 }
		 else
		 {
		 	GPS_Acknowledgement_State = UBX_ERROR;
 800ebb0:	23ff      	movs	r3, #255	; 0xff
 800ebb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		 }
	 }
	 return GPS_Acknowledgement_State;
 800ebb6:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 800ebba:	4618      	mov	r0, r3
 800ebbc:	3740      	adds	r7, #64	; 0x40
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bdb0      	pop	{r4, r5, r7, pc}
 800ebc2:	bf00      	nop
 800ebc4:	20000518 	.word	0x20000518
 800ebc8:	0800f5b8 	.word	0x0800f5b8
 800ebcc:	200005e0 	.word	0x200005e0
 800ebd0:	2000002c 	.word	0x2000002c
 800ebd4:	20000324 	.word	0x20000324
 800ebd8:	2000027c 	.word	0x2000027c
 800ebdc:	2000026c 	.word	0x2000026c
 800ebe0:	200002c8 	.word	0x200002c8
 800ebe4:	20000078 	.word	0x20000078

0800ebe8 <USART_GPS_Timout_Handler>:

void USART_GPS_Timout_Handler(TIM_HandleTypeDef *htim, UART_HandleTypeDef *huart)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b082      	sub	sp, #8
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
 800ebf0:	6039      	str	r1, [r7, #0]
	//disable Timer
	HAL_TIM_Base_Stop_IT(htim);
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	f7f6 feb0 	bl	8005958 <HAL_TIM_Base_Stop_IT>
	RX_TIMEOUT_FLAG = 1;
 800ebf8:	4b04      	ldr	r3, [pc, #16]	; (800ec0c <USART_GPS_Timout_Handler+0x24>)
 800ebfa:	2201      	movs	r2, #1
 800ebfc:	601a      	str	r2, [r3, #0]
	//disable DMA
	HAL_UART_DMAStop(huart);
 800ebfe:	6838      	ldr	r0, [r7, #0]
 800ec00:	f7fd fcb8 	bl	800c574 <HAL_UART_DMAStop>
}
 800ec04:	bf00      	nop
 800ec06:	3708      	adds	r7, #8
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}
 800ec0c:	2000026c 	.word	0x2000026c

0800ec10 <USART_Begin_Timeout>:

void USART_Begin_Timeout(TIM_HandleTypeDef *htim,uint32_t ms)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b084      	sub	sp, #16
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
 800ec18:	6039      	str	r1, [r7, #0]
	  uint32_t time = ms; //ms
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	60fb      	str	r3, [r7, #12]
	  //clear any pending updates
	  __HAL_TIM_SET_AUTORELOAD(htim,time);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	68fa      	ldr	r2, [r7, #12]
 800ec24:	62da      	str	r2, [r3, #44]	; 0x2c
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	68fa      	ldr	r2, [r7, #12]
 800ec2a:	60da      	str	r2, [r3, #12]
	  __HAL_TIM_CLEAR_IT(htim,TIM_IT_UPDATE);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	f06f 0201 	mvn.w	r2, #1
 800ec34:	611a      	str	r2, [r3, #16]
	  HAL_TIM_Base_Start_IT(htim);
 800ec36:	6878      	ldr	r0, [r7, #4]
 800ec38:	f7f6 fe63 	bl	8005902 <HAL_TIM_Base_Start_IT>
}
 800ec3c:	bf00      	nop
 800ec3e:	3710      	adds	r7, #16
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bd80      	pop	{r7, pc}

0800ec44 <Clear_Buffer>:

void Clear_Buffer(uint8_t* buffer,int size)
{
 800ec44:	b480      	push	{r7}
 800ec46:	b085      	sub	sp, #20
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
 800ec4c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < size; ++i)
 800ec4e:	2300      	movs	r3, #0
 800ec50:	60fb      	str	r3, [r7, #12]
 800ec52:	e007      	b.n	800ec64 <Clear_Buffer+0x20>
	{
		buffer[i] = 0;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	687a      	ldr	r2, [r7, #4]
 800ec58:	4413      	add	r3, r2
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; ++i)
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	3301      	adds	r3, #1
 800ec62:	60fb      	str	r3, [r7, #12]
 800ec64:	68fa      	ldr	r2, [r7, #12]
 800ec66:	683b      	ldr	r3, [r7, #0]
 800ec68:	429a      	cmp	r2, r3
 800ec6a:	dbf3      	blt.n	800ec54 <Clear_Buffer+0x10>
	}
}
 800ec6c:	bf00      	nop
 800ec6e:	3714      	adds	r7, #20
 800ec70:	46bd      	mov	sp, r7
 800ec72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec76:	4770      	bx	lr

0800ec78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ec78:	b480      	push	{r7}
 800ec7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800ec7c:	bf00      	nop
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec84:	4770      	bx	lr
 800ec86:	bf00      	nop

0800ec88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ec88:	b480      	push	{r7}
 800ec8a:	b083      	sub	sp, #12
 800ec8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ec8e:	4a0f      	ldr	r2, [pc, #60]	; (800eccc <HAL_MspInit+0x44>)
 800ec90:	4b0e      	ldr	r3, [pc, #56]	; (800eccc <HAL_MspInit+0x44>)
 800ec92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec94:	f043 0301 	orr.w	r3, r3, #1
 800ec98:	6613      	str	r3, [r2, #96]	; 0x60
 800ec9a:	4b0c      	ldr	r3, [pc, #48]	; (800eccc <HAL_MspInit+0x44>)
 800ec9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec9e:	f003 0301 	and.w	r3, r3, #1
 800eca2:	607b      	str	r3, [r7, #4]
 800eca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800eca6:	4a09      	ldr	r2, [pc, #36]	; (800eccc <HAL_MspInit+0x44>)
 800eca8:	4b08      	ldr	r3, [pc, #32]	; (800eccc <HAL_MspInit+0x44>)
 800ecaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ecb0:	6593      	str	r3, [r2, #88]	; 0x58
 800ecb2:	4b06      	ldr	r3, [pc, #24]	; (800eccc <HAL_MspInit+0x44>)
 800ecb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ecba:	603b      	str	r3, [r7, #0]
 800ecbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ecbe:	bf00      	nop
 800ecc0:	370c      	adds	r7, #12
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc8:	4770      	bx	lr
 800ecca:	bf00      	nop
 800eccc:	40021000 	.word	0x40021000

0800ecd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b084      	sub	sp, #16
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	4a0d      	ldr	r2, [pc, #52]	; (800ed14 <HAL_TIM_Base_MspInit+0x44>)
 800ecde:	4293      	cmp	r3, r2
 800ece0:	d113      	bne.n	800ed0a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800ece2:	4a0d      	ldr	r2, [pc, #52]	; (800ed18 <HAL_TIM_Base_MspInit+0x48>)
 800ece4:	4b0c      	ldr	r3, [pc, #48]	; (800ed18 <HAL_TIM_Base_MspInit+0x48>)
 800ece6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ece8:	f043 0308 	orr.w	r3, r3, #8
 800ecec:	6593      	str	r3, [r2, #88]	; 0x58
 800ecee:	4b0a      	ldr	r3, [pc, #40]	; (800ed18 <HAL_TIM_Base_MspInit+0x48>)
 800ecf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecf2:	f003 0308 	and.w	r3, r3, #8
 800ecf6:	60fb      	str	r3, [r7, #12]
 800ecf8:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	2100      	movs	r1, #0
 800ecfe:	2032      	movs	r0, #50	; 0x32
 800ed00:	f7f1 fedf 	bl	8000ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800ed04:	2032      	movs	r0, #50	; 0x32
 800ed06:	f7f1 fef8 	bl	8000afa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800ed0a:	bf00      	nop
 800ed0c:	3710      	adds	r7, #16
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}
 800ed12:	bf00      	nop
 800ed14:	40000c00 	.word	0x40000c00
 800ed18:	40021000 	.word	0x40021000

0800ed1c <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b082      	sub	sp, #8
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	4a07      	ldr	r2, [pc, #28]	; (800ed48 <HAL_TIM_Base_MspDeInit+0x2c>)
 800ed2a:	4293      	cmp	r3, r2
 800ed2c:	d108      	bne.n	800ed40 <HAL_TIM_Base_MspDeInit+0x24>
  {
  /* USER CODE BEGIN TIM5_MspDeInit 0 */

  /* USER CODE END TIM5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM5_CLK_DISABLE();
 800ed2e:	4a07      	ldr	r2, [pc, #28]	; (800ed4c <HAL_TIM_Base_MspDeInit+0x30>)
 800ed30:	4b06      	ldr	r3, [pc, #24]	; (800ed4c <HAL_TIM_Base_MspDeInit+0x30>)
 800ed32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed34:	f023 0308 	bic.w	r3, r3, #8
 800ed38:	6593      	str	r3, [r2, #88]	; 0x58

    /* TIM5 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM5_IRQn);
 800ed3a:	2032      	movs	r0, #50	; 0x32
 800ed3c:	f7f1 feeb 	bl	8000b16 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM5_MspDeInit 1 */

  /* USER CODE END TIM5_MspDeInit 1 */
  }

}
 800ed40:	bf00      	nop
 800ed42:	3708      	adds	r7, #8
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}
 800ed48:	40000c00 	.word	0x40000c00
 800ed4c:	40021000 	.word	0x40021000

0800ed50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b08a      	sub	sp, #40	; 0x28
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ed58:	f107 0314 	add.w	r3, r7, #20
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	601a      	str	r2, [r3, #0]
 800ed60:	605a      	str	r2, [r3, #4]
 800ed62:	609a      	str	r2, [r3, #8]
 800ed64:	60da      	str	r2, [r3, #12]
 800ed66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	4a45      	ldr	r2, [pc, #276]	; (800ee84 <HAL_UART_MspInit+0x134>)
 800ed6e:	4293      	cmp	r3, r2
 800ed70:	f040 8083 	bne.w	800ee7a <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800ed74:	4a44      	ldr	r2, [pc, #272]	; (800ee88 <HAL_UART_MspInit+0x138>)
 800ed76:	4b44      	ldr	r3, [pc, #272]	; (800ee88 <HAL_UART_MspInit+0x138>)
 800ed78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ed7e:	6593      	str	r3, [r2, #88]	; 0x58
 800ed80:	4b41      	ldr	r3, [pc, #260]	; (800ee88 <HAL_UART_MspInit+0x138>)
 800ed82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ed88:	613b      	str	r3, [r7, #16]
 800ed8a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ed8c:	4a3e      	ldr	r2, [pc, #248]	; (800ee88 <HAL_UART_MspInit+0x138>)
 800ed8e:	4b3e      	ldr	r3, [pc, #248]	; (800ee88 <HAL_UART_MspInit+0x138>)
 800ed90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed92:	f043 0301 	orr.w	r3, r3, #1
 800ed96:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ed98:	4b3b      	ldr	r3, [pc, #236]	; (800ee88 <HAL_UART_MspInit+0x138>)
 800ed9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed9c:	f003 0301 	and.w	r3, r3, #1
 800eda0:	60fb      	str	r3, [r7, #12]
 800eda2:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800eda4:	2303      	movs	r3, #3
 800eda6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eda8:	2302      	movs	r3, #2
 800edaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800edac:	2300      	movs	r3, #0
 800edae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800edb0:	2303      	movs	r3, #3
 800edb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800edb4:	2308      	movs	r3, #8
 800edb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800edb8:	f107 0314 	add.w	r3, r7, #20
 800edbc:	4619      	mov	r1, r3
 800edbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800edc2:	f7f2 fc6b 	bl	800169c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 800edc6:	4b31      	ldr	r3, [pc, #196]	; (800ee8c <HAL_UART_MspInit+0x13c>)
 800edc8:	4a31      	ldr	r2, [pc, #196]	; (800ee90 <HAL_UART_MspInit+0x140>)
 800edca:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 800edcc:	4b2f      	ldr	r3, [pc, #188]	; (800ee8c <HAL_UART_MspInit+0x13c>)
 800edce:	2202      	movs	r2, #2
 800edd0:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800edd2:	4b2e      	ldr	r3, [pc, #184]	; (800ee8c <HAL_UART_MspInit+0x13c>)
 800edd4:	2200      	movs	r2, #0
 800edd6:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800edd8:	4b2c      	ldr	r3, [pc, #176]	; (800ee8c <HAL_UART_MspInit+0x13c>)
 800edda:	2200      	movs	r2, #0
 800eddc:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800edde:	4b2b      	ldr	r3, [pc, #172]	; (800ee8c <HAL_UART_MspInit+0x13c>)
 800ede0:	2280      	movs	r2, #128	; 0x80
 800ede2:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ede4:	4b29      	ldr	r3, [pc, #164]	; (800ee8c <HAL_UART_MspInit+0x13c>)
 800ede6:	2200      	movs	r2, #0
 800ede8:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800edea:	4b28      	ldr	r3, [pc, #160]	; (800ee8c <HAL_UART_MspInit+0x13c>)
 800edec:	2200      	movs	r2, #0
 800edee:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800edf0:	4b26      	ldr	r3, [pc, #152]	; (800ee8c <HAL_UART_MspInit+0x13c>)
 800edf2:	2200      	movs	r2, #0
 800edf4:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800edf6:	4b25      	ldr	r3, [pc, #148]	; (800ee8c <HAL_UART_MspInit+0x13c>)
 800edf8:	2200      	movs	r2, #0
 800edfa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800edfc:	4823      	ldr	r0, [pc, #140]	; (800ee8c <HAL_UART_MspInit+0x13c>)
 800edfe:	f7f1 ffa1 	bl	8000d44 <HAL_DMA_Init>
 800ee02:	4603      	mov	r3, r0
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d001      	beq.n	800ee0c <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 800ee08:	f7ff ff36 	bl	800ec78 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	4a1f      	ldr	r2, [pc, #124]	; (800ee8c <HAL_UART_MspInit+0x13c>)
 800ee10:	66da      	str	r2, [r3, #108]	; 0x6c
 800ee12:	4a1e      	ldr	r2, [pc, #120]	; (800ee8c <HAL_UART_MspInit+0x13c>)
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel3;
 800ee18:	4b1e      	ldr	r3, [pc, #120]	; (800ee94 <HAL_UART_MspInit+0x144>)
 800ee1a:	4a1f      	ldr	r2, [pc, #124]	; (800ee98 <HAL_UART_MspInit+0x148>)
 800ee1c:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_2;
 800ee1e:	4b1d      	ldr	r3, [pc, #116]	; (800ee94 <HAL_UART_MspInit+0x144>)
 800ee20:	2202      	movs	r2, #2
 800ee22:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ee24:	4b1b      	ldr	r3, [pc, #108]	; (800ee94 <HAL_UART_MspInit+0x144>)
 800ee26:	2210      	movs	r2, #16
 800ee28:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ee2a:	4b1a      	ldr	r3, [pc, #104]	; (800ee94 <HAL_UART_MspInit+0x144>)
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ee30:	4b18      	ldr	r3, [pc, #96]	; (800ee94 <HAL_UART_MspInit+0x144>)
 800ee32:	2280      	movs	r2, #128	; 0x80
 800ee34:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ee36:	4b17      	ldr	r3, [pc, #92]	; (800ee94 <HAL_UART_MspInit+0x144>)
 800ee38:	2200      	movs	r2, #0
 800ee3a:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ee3c:	4b15      	ldr	r3, [pc, #84]	; (800ee94 <HAL_UART_MspInit+0x144>)
 800ee3e:	2200      	movs	r2, #0
 800ee40:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800ee42:	4b14      	ldr	r3, [pc, #80]	; (800ee94 <HAL_UART_MspInit+0x144>)
 800ee44:	2200      	movs	r2, #0
 800ee46:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800ee48:	4b12      	ldr	r3, [pc, #72]	; (800ee94 <HAL_UART_MspInit+0x144>)
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800ee4e:	4811      	ldr	r0, [pc, #68]	; (800ee94 <HAL_UART_MspInit+0x144>)
 800ee50:	f7f1 ff78 	bl	8000d44 <HAL_DMA_Init>
 800ee54:	4603      	mov	r3, r0
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d001      	beq.n	800ee5e <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 800ee5a:	f7ff ff0d 	bl	800ec78 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	4a0c      	ldr	r2, [pc, #48]	; (800ee94 <HAL_UART_MspInit+0x144>)
 800ee62:	669a      	str	r2, [r3, #104]	; 0x68
 800ee64:	4a0b      	ldr	r2, [pc, #44]	; (800ee94 <HAL_UART_MspInit+0x144>)
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	2100      	movs	r1, #0
 800ee6e:	2034      	movs	r0, #52	; 0x34
 800ee70:	f7f1 fe27 	bl	8000ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800ee74:	2034      	movs	r0, #52	; 0x34
 800ee76:	f7f1 fe40 	bl	8000afa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800ee7a:	bf00      	nop
 800ee7c:	3728      	adds	r7, #40	; 0x28
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}
 800ee82:	bf00      	nop
 800ee84:	40004c00 	.word	0x40004c00
 800ee88:	40021000 	.word	0x40021000
 800ee8c:	2000002c 	.word	0x2000002c
 800ee90:	40020458 	.word	0x40020458
 800ee94:	20000598 	.word	0x20000598
 800ee98:	40020430 	.word	0x40020430

0800ee9c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b082      	sub	sp, #8
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	4a0f      	ldr	r2, [pc, #60]	; (800eee8 <HAL_UART_MspDeInit+0x4c>)
 800eeaa:	4293      	cmp	r3, r2
 800eeac:	d117      	bne.n	800eede <HAL_UART_MspDeInit+0x42>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 800eeae:	4a0f      	ldr	r2, [pc, #60]	; (800eeec <HAL_UART_MspDeInit+0x50>)
 800eeb0:	4b0e      	ldr	r3, [pc, #56]	; (800eeec <HAL_UART_MspDeInit+0x50>)
 800eeb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eeb4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800eeb8:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**UART4 GPIO Configuration    
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 800eeba:	2103      	movs	r1, #3
 800eebc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800eec0:	f7f2 fd94 	bl	80019ec <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eec8:	4618      	mov	r0, r3
 800eeca:	f7f1 fff3 	bl	8000eb4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eed2:	4618      	mov	r0, r3
 800eed4:	f7f1 ffee 	bl	8000eb4 <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 800eed8:	2034      	movs	r0, #52	; 0x34
 800eeda:	f7f1 fe1c 	bl	8000b16 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN UART4_MspDeInit 1 */

  /* USER CODE END UART4_MspDeInit 1 */
  }

}
 800eede:	bf00      	nop
 800eee0:	3708      	adds	r7, #8
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}
 800eee6:	bf00      	nop
 800eee8:	40004c00 	.word	0x40004c00
 800eeec:	40021000 	.word	0x40021000

0800eef0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800eef0:	b480      	push	{r7}
 800eef2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800eef4:	bf00      	nop
 800eef6:	46bd      	mov	sp, r7
 800eef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefc:	4770      	bx	lr

0800eefe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800eefe:	b480      	push	{r7}
 800ef00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ef02:	e7fe      	b.n	800ef02 <HardFault_Handler+0x4>

0800ef04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ef04:	b480      	push	{r7}
 800ef06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ef08:	e7fe      	b.n	800ef08 <MemManage_Handler+0x4>

0800ef0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ef0a:	b480      	push	{r7}
 800ef0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ef0e:	e7fe      	b.n	800ef0e <BusFault_Handler+0x4>

0800ef10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ef10:	b480      	push	{r7}
 800ef12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ef14:	e7fe      	b.n	800ef14 <UsageFault_Handler+0x4>

0800ef16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ef16:	b480      	push	{r7}
 800ef18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ef1a:	bf00      	nop
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef22:	4770      	bx	lr

0800ef24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ef24:	b480      	push	{r7}
 800ef26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ef28:	bf00      	nop
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef30:	4770      	bx	lr

0800ef32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ef32:	b480      	push	{r7}
 800ef34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ef36:	bf00      	nop
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3e:	4770      	bx	lr

0800ef40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ef44:	f7f1 f9d4 	bl	80002f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ef48:	bf00      	nop
 800ef4a:	bd80      	pop	{r7, pc}

0800ef4c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	DMA_MEM_IRQHandler(&hdma_memtomem_dma1_channel1,&huart4);
 800ef50:	4904      	ldr	r1, [pc, #16]	; (800ef64 <DMA1_Channel1_IRQHandler+0x18>)
 800ef52:	4805      	ldr	r0, [pc, #20]	; (800ef68 <DMA1_Channel1_IRQHandler+0x1c>)
 800ef54:	f7ff fcb8 	bl	800e8c8 <DMA_MEM_IRQHandler>
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel1);
 800ef58:	4803      	ldr	r0, [pc, #12]	; (800ef68 <DMA1_Channel1_IRQHandler+0x1c>)
 800ef5a:	f7f2 fa06 	bl	800136a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800ef5e:	bf00      	nop
 800ef60:	bd80      	pop	{r7, pc}
 800ef62:	bf00      	nop
 800ef64:	20000518 	.word	0x20000518
 800ef68:	200002dc 	.word	0x200002dc

0800ef6c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  /* USER CODE BEGIN TIM5_IRQn 1 */
  USART_GPS_Timout_Handler(&htim5,&huart4);
 800ef70:	4902      	ldr	r1, [pc, #8]	; (800ef7c <TIM5_IRQHandler+0x10>)
 800ef72:	4803      	ldr	r0, [pc, #12]	; (800ef80 <TIM5_IRQHandler+0x14>)
 800ef74:	f7ff fe38 	bl	800ebe8 <USART_GPS_Timout_Handler>
  /* USER CODE END TIM5_IRQn 1 */
}
 800ef78:	bf00      	nop
 800ef7a:	bd80      	pop	{r7, pc}
 800ef7c:	20000518 	.word	0x20000518
 800ef80:	2000027c 	.word	0x2000027c

0800ef84 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
 USART_GPS_IRQHandler(&huart4,&hdma_uart4_rx);
 800ef88:	4908      	ldr	r1, [pc, #32]	; (800efac <UART4_IRQHandler+0x28>)
 800ef8a:	4809      	ldr	r0, [pc, #36]	; (800efb0 <UART4_IRQHandler+0x2c>)
 800ef8c:	f7ff fbc6 	bl	800e71c <USART_GPS_IRQHandler>
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */
 if(RX_COMPLETE_FLAG || RX_TIMEOUT_FLAG)
 800ef90:	4b08      	ldr	r3, [pc, #32]	; (800efb4 <UART4_IRQHandler+0x30>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d103      	bne.n	800efa0 <UART4_IRQHandler+0x1c>
 800ef98:	4b07      	ldr	r3, [pc, #28]	; (800efb8 <UART4_IRQHandler+0x34>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d002      	beq.n	800efa6 <UART4_IRQHandler+0x22>
 {
	 HAL_USART_Error_Handle(&huart4);
 800efa0:	4803      	ldr	r0, [pc, #12]	; (800efb0 <UART4_IRQHandler+0x2c>)
 800efa2:	f7ff fcd3 	bl	800e94c <HAL_USART_Error_Handle>
 }
  /* USER CODE END UART4_IRQn 1 */
}
 800efa6:	bf00      	nop
 800efa8:	bd80      	pop	{r7, pc}
 800efaa:	bf00      	nop
 800efac:	2000002c 	.word	0x2000002c
 800efb0:	20000518 	.word	0x20000518
 800efb4:	200002c8 	.word	0x200002c8
 800efb8:	2000026c 	.word	0x2000026c

0800efbc <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800efc0:	4802      	ldr	r0, [pc, #8]	; (800efcc <DMA2_Channel3_IRQHandler+0x10>)
 800efc2:	f7f2 f9d2 	bl	800136a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */
  //disable HDMA channel and clear intterupts

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 800efc6:	bf00      	nop
 800efc8:	bd80      	pop	{r7, pc}
 800efca:	bf00      	nop
 800efcc:	20000598 	.word	0x20000598

0800efd0 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */
	DMA_Rx_IRQHandler(&hdma_uart4_rx,&huart4);
 800efd4:	4902      	ldr	r1, [pc, #8]	; (800efe0 <DMA2_Channel5_IRQHandler+0x10>)
 800efd6:	4803      	ldr	r0, [pc, #12]	; (800efe4 <DMA2_Channel5_IRQHandler+0x14>)
 800efd8:	f7ff fc24 	bl	800e824 <DMA_Rx_IRQHandler>
  /* USER CODE END DMA2_Channel5_IRQn 0 */
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 800efdc:	bf00      	nop
 800efde:	bd80      	pop	{r7, pc}
 800efe0:	20000518 	.word	0x20000518
 800efe4:	2000002c 	.word	0x2000002c

0800efe8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800efe8:	b480      	push	{r7}
 800efea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800efec:	4a17      	ldr	r2, [pc, #92]	; (800f04c <SystemInit+0x64>)
 800efee:	4b17      	ldr	r3, [pc, #92]	; (800f04c <SystemInit+0x64>)
 800eff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eff4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800eff8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800effc:	4a14      	ldr	r2, [pc, #80]	; (800f050 <SystemInit+0x68>)
 800effe:	4b14      	ldr	r3, [pc, #80]	; (800f050 <SystemInit+0x68>)
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	f043 0301 	orr.w	r3, r3, #1
 800f006:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800f008:	4b11      	ldr	r3, [pc, #68]	; (800f050 <SystemInit+0x68>)
 800f00a:	2200      	movs	r2, #0
 800f00c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800f00e:	4a10      	ldr	r2, [pc, #64]	; (800f050 <SystemInit+0x68>)
 800f010:	4b0f      	ldr	r3, [pc, #60]	; (800f050 <SystemInit+0x68>)
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800f018:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800f01c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800f01e:	4b0c      	ldr	r3, [pc, #48]	; (800f050 <SystemInit+0x68>)
 800f020:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f024:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800f026:	4a0a      	ldr	r2, [pc, #40]	; (800f050 <SystemInit+0x68>)
 800f028:	4b09      	ldr	r3, [pc, #36]	; (800f050 <SystemInit+0x68>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f030:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800f032:	4b07      	ldr	r3, [pc, #28]	; (800f050 <SystemInit+0x68>)
 800f034:	2200      	movs	r2, #0
 800f036:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800f038:	4b04      	ldr	r3, [pc, #16]	; (800f04c <SystemInit+0x64>)
 800f03a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800f03e:	609a      	str	r2, [r3, #8]
#endif
}
 800f040:	bf00      	nop
 800f042:	46bd      	mov	sp, r7
 800f044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f048:	4770      	bx	lr
 800f04a:	bf00      	nop
 800f04c:	e000ed00 	.word	0xe000ed00
 800f050:	40021000 	.word	0x40021000

0800f054 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800f054:	b480      	push	{r7}
 800f056:	b087      	sub	sp, #28
 800f058:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, msirange = 0U, pllvco = 0U, pllr = 2U, pllsource = 0U, pllm = 2U;
 800f05a:	2300      	movs	r3, #0
 800f05c:	60fb      	str	r3, [r7, #12]
 800f05e:	2300      	movs	r3, #0
 800f060:	617b      	str	r3, [r7, #20]
 800f062:	2300      	movs	r3, #0
 800f064:	613b      	str	r3, [r7, #16]
 800f066:	2302      	movs	r3, #2
 800f068:	60bb      	str	r3, [r7, #8]
 800f06a:	2300      	movs	r3, #0
 800f06c:	607b      	str	r3, [r7, #4]
 800f06e:	2302      	movs	r3, #2
 800f070:	603b      	str	r3, [r7, #0]

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == RESET)
 800f072:	4b4f      	ldr	r3, [pc, #316]	; (800f1b0 <SystemCoreClockUpdate+0x15c>)
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	f003 0308 	and.w	r3, r3, #8
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d107      	bne.n	800f08e <SystemCoreClockUpdate+0x3a>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800f07e:	4b4c      	ldr	r3, [pc, #304]	; (800f1b0 <SystemCoreClockUpdate+0x15c>)
 800f080:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f084:	0a1b      	lsrs	r3, r3, #8
 800f086:	f003 030f 	and.w	r3, r3, #15
 800f08a:	617b      	str	r3, [r7, #20]
 800f08c:	e005      	b.n	800f09a <SystemCoreClockUpdate+0x46>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800f08e:	4b48      	ldr	r3, [pc, #288]	; (800f1b0 <SystemCoreClockUpdate+0x15c>)
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	091b      	lsrs	r3, r3, #4
 800f094:	f003 030f 	and.w	r3, r3, #15
 800f098:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800f09a:	4a46      	ldr	r2, [pc, #280]	; (800f1b4 <SystemCoreClockUpdate+0x160>)
 800f09c:	697b      	ldr	r3, [r7, #20]
 800f09e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0a2:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f0a4:	4b42      	ldr	r3, [pc, #264]	; (800f1b0 <SystemCoreClockUpdate+0x15c>)
 800f0a6:	689b      	ldr	r3, [r3, #8]
 800f0a8:	f003 030c 	and.w	r3, r3, #12
 800f0ac:	2b0c      	cmp	r3, #12
 800f0ae:	d865      	bhi.n	800f17c <SystemCoreClockUpdate+0x128>
 800f0b0:	a201      	add	r2, pc, #4	; (adr r2, 800f0b8 <SystemCoreClockUpdate+0x64>)
 800f0b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0b6:	bf00      	nop
 800f0b8:	0800f0ed 	.word	0x0800f0ed
 800f0bc:	0800f17d 	.word	0x0800f17d
 800f0c0:	0800f17d 	.word	0x0800f17d
 800f0c4:	0800f17d 	.word	0x0800f17d
 800f0c8:	0800f0f5 	.word	0x0800f0f5
 800f0cc:	0800f17d 	.word	0x0800f17d
 800f0d0:	0800f17d 	.word	0x0800f17d
 800f0d4:	0800f17d 	.word	0x0800f17d
 800f0d8:	0800f0fd 	.word	0x0800f0fd
 800f0dc:	0800f17d 	.word	0x0800f17d
 800f0e0:	0800f17d 	.word	0x0800f17d
 800f0e4:	0800f17d 	.word	0x0800f17d
 800f0e8:	0800f105 	.word	0x0800f105
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 800f0ec:	4a32      	ldr	r2, [pc, #200]	; (800f1b8 <SystemCoreClockUpdate+0x164>)
 800f0ee:	697b      	ldr	r3, [r7, #20]
 800f0f0:	6013      	str	r3, [r2, #0]
      break;
 800f0f2:	e047      	b.n	800f184 <SystemCoreClockUpdate+0x130>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800f0f4:	4b30      	ldr	r3, [pc, #192]	; (800f1b8 <SystemCoreClockUpdate+0x164>)
 800f0f6:	4a31      	ldr	r2, [pc, #196]	; (800f1bc <SystemCoreClockUpdate+0x168>)
 800f0f8:	601a      	str	r2, [r3, #0]
      break;
 800f0fa:	e043      	b.n	800f184 <SystemCoreClockUpdate+0x130>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800f0fc:	4b2e      	ldr	r3, [pc, #184]	; (800f1b8 <SystemCoreClockUpdate+0x164>)
 800f0fe:	4a30      	ldr	r2, [pc, #192]	; (800f1c0 <SystemCoreClockUpdate+0x16c>)
 800f100:	601a      	str	r2, [r3, #0]
      break;
 800f102:	e03f      	b.n	800f184 <SystemCoreClockUpdate+0x130>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800f104:	4b2a      	ldr	r3, [pc, #168]	; (800f1b0 <SystemCoreClockUpdate+0x15c>)
 800f106:	68db      	ldr	r3, [r3, #12]
 800f108:	f003 0303 	and.w	r3, r3, #3
 800f10c:	607b      	str	r3, [r7, #4]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 800f10e:	4b28      	ldr	r3, [pc, #160]	; (800f1b0 <SystemCoreClockUpdate+0x15c>)
 800f110:	68db      	ldr	r3, [r3, #12]
 800f112:	091b      	lsrs	r3, r3, #4
 800f114:	f003 0307 	and.w	r3, r3, #7
 800f118:	3301      	adds	r3, #1
 800f11a:	603b      	str	r3, [r7, #0]

      switch (pllsource)
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2b02      	cmp	r3, #2
 800f120:	d002      	beq.n	800f128 <SystemCoreClockUpdate+0xd4>
 800f122:	2b03      	cmp	r3, #3
 800f124:	d006      	beq.n	800f134 <SystemCoreClockUpdate+0xe0>
 800f126:	e00b      	b.n	800f140 <SystemCoreClockUpdate+0xec>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800f128:	4a24      	ldr	r2, [pc, #144]	; (800f1bc <SystemCoreClockUpdate+0x168>)
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f130:	613b      	str	r3, [r7, #16]
          break;
 800f132:	e00b      	b.n	800f14c <SystemCoreClockUpdate+0xf8>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800f134:	4a22      	ldr	r2, [pc, #136]	; (800f1c0 <SystemCoreClockUpdate+0x16c>)
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	fbb2 f3f3 	udiv	r3, r2, r3
 800f13c:	613b      	str	r3, [r7, #16]
          break;
 800f13e:	e005      	b.n	800f14c <SystemCoreClockUpdate+0xf8>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800f140:	697a      	ldr	r2, [r7, #20]
 800f142:	683b      	ldr	r3, [r7, #0]
 800f144:	fbb2 f3f3 	udiv	r3, r2, r3
 800f148:	613b      	str	r3, [r7, #16]
          break;
 800f14a:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800f14c:	4b18      	ldr	r3, [pc, #96]	; (800f1b0 <SystemCoreClockUpdate+0x15c>)
 800f14e:	68db      	ldr	r3, [r3, #12]
 800f150:	0a1b      	lsrs	r3, r3, #8
 800f152:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f156:	693b      	ldr	r3, [r7, #16]
 800f158:	fb02 f303 	mul.w	r3, r2, r3
 800f15c:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 800f15e:	4b14      	ldr	r3, [pc, #80]	; (800f1b0 <SystemCoreClockUpdate+0x15c>)
 800f160:	68db      	ldr	r3, [r3, #12]
 800f162:	0e5b      	lsrs	r3, r3, #25
 800f164:	f003 0303 	and.w	r3, r3, #3
 800f168:	3301      	adds	r3, #1
 800f16a:	005b      	lsls	r3, r3, #1
 800f16c:	60bb      	str	r3, [r7, #8]
      SystemCoreClock = pllvco/pllr;
 800f16e:	693a      	ldr	r2, [r7, #16]
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	fbb2 f3f3 	udiv	r3, r2, r3
 800f176:	4a10      	ldr	r2, [pc, #64]	; (800f1b8 <SystemCoreClockUpdate+0x164>)
 800f178:	6013      	str	r3, [r2, #0]
      break;
 800f17a:	e003      	b.n	800f184 <SystemCoreClockUpdate+0x130>

    default:
      SystemCoreClock = msirange;
 800f17c:	4a0e      	ldr	r2, [pc, #56]	; (800f1b8 <SystemCoreClockUpdate+0x164>)
 800f17e:	697b      	ldr	r3, [r7, #20]
 800f180:	6013      	str	r3, [r2, #0]
      break;
 800f182:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800f184:	4b0a      	ldr	r3, [pc, #40]	; (800f1b0 <SystemCoreClockUpdate+0x15c>)
 800f186:	689b      	ldr	r3, [r3, #8]
 800f188:	091b      	lsrs	r3, r3, #4
 800f18a:	f003 030f 	and.w	r3, r3, #15
 800f18e:	4a0d      	ldr	r2, [pc, #52]	; (800f1c4 <SystemCoreClockUpdate+0x170>)
 800f190:	5cd3      	ldrb	r3, [r2, r3]
 800f192:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800f194:	4b08      	ldr	r3, [pc, #32]	; (800f1b8 <SystemCoreClockUpdate+0x164>)
 800f196:	681a      	ldr	r2, [r3, #0]
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	fa22 f303 	lsr.w	r3, r2, r3
 800f19e:	4a06      	ldr	r2, [pc, #24]	; (800f1b8 <SystemCoreClockUpdate+0x164>)
 800f1a0:	6013      	str	r3, [r2, #0]
}
 800f1a2:	bf00      	nop
 800f1a4:	371c      	adds	r7, #28
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ac:	4770      	bx	lr
 800f1ae:	bf00      	nop
 800f1b0:	40021000 	.word	0x40021000
 800f1b4:	0800f5e8 	.word	0x0800f5e8
 800f1b8:	20000008 	.word	0x20000008
 800f1bc:	00f42400 	.word	0x00f42400
 800f1c0:	007a1200 	.word	0x007a1200
 800f1c4:	0800f5d0 	.word	0x0800f5d0

0800f1c8 <__aeabi_uldivmod>:
 800f1c8:	b953      	cbnz	r3, 800f1e0 <__aeabi_uldivmod+0x18>
 800f1ca:	b94a      	cbnz	r2, 800f1e0 <__aeabi_uldivmod+0x18>
 800f1cc:	2900      	cmp	r1, #0
 800f1ce:	bf08      	it	eq
 800f1d0:	2800      	cmpeq	r0, #0
 800f1d2:	bf1c      	itt	ne
 800f1d4:	f04f 31ff 	movne.w	r1, #4294967295
 800f1d8:	f04f 30ff 	movne.w	r0, #4294967295
 800f1dc:	f000 b97a 	b.w	800f4d4 <__aeabi_idiv0>
 800f1e0:	f1ad 0c08 	sub.w	ip, sp, #8
 800f1e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800f1e8:	f000 f806 	bl	800f1f8 <__udivmoddi4>
 800f1ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 800f1f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f1f4:	b004      	add	sp, #16
 800f1f6:	4770      	bx	lr

0800f1f8 <__udivmoddi4>:
 800f1f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1fc:	468c      	mov	ip, r1
 800f1fe:	460d      	mov	r5, r1
 800f200:	4604      	mov	r4, r0
 800f202:	9e08      	ldr	r6, [sp, #32]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d151      	bne.n	800f2ac <__udivmoddi4+0xb4>
 800f208:	428a      	cmp	r2, r1
 800f20a:	4617      	mov	r7, r2
 800f20c:	d96d      	bls.n	800f2ea <__udivmoddi4+0xf2>
 800f20e:	fab2 fe82 	clz	lr, r2
 800f212:	f1be 0f00 	cmp.w	lr, #0
 800f216:	d00b      	beq.n	800f230 <__udivmoddi4+0x38>
 800f218:	f1ce 0c20 	rsb	ip, lr, #32
 800f21c:	fa01 f50e 	lsl.w	r5, r1, lr
 800f220:	fa20 fc0c 	lsr.w	ip, r0, ip
 800f224:	fa02 f70e 	lsl.w	r7, r2, lr
 800f228:	ea4c 0c05 	orr.w	ip, ip, r5
 800f22c:	fa00 f40e 	lsl.w	r4, r0, lr
 800f230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800f234:	0c25      	lsrs	r5, r4, #16
 800f236:	fbbc f8fa 	udiv	r8, ip, sl
 800f23a:	fa1f f987 	uxth.w	r9, r7
 800f23e:	fb0a cc18 	mls	ip, sl, r8, ip
 800f242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800f246:	fb08 f309 	mul.w	r3, r8, r9
 800f24a:	42ab      	cmp	r3, r5
 800f24c:	d90a      	bls.n	800f264 <__udivmoddi4+0x6c>
 800f24e:	19ed      	adds	r5, r5, r7
 800f250:	f108 32ff 	add.w	r2, r8, #4294967295
 800f254:	f080 8123 	bcs.w	800f49e <__udivmoddi4+0x2a6>
 800f258:	42ab      	cmp	r3, r5
 800f25a:	f240 8120 	bls.w	800f49e <__udivmoddi4+0x2a6>
 800f25e:	f1a8 0802 	sub.w	r8, r8, #2
 800f262:	443d      	add	r5, r7
 800f264:	1aed      	subs	r5, r5, r3
 800f266:	b2a4      	uxth	r4, r4
 800f268:	fbb5 f0fa 	udiv	r0, r5, sl
 800f26c:	fb0a 5510 	mls	r5, sl, r0, r5
 800f270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800f274:	fb00 f909 	mul.w	r9, r0, r9
 800f278:	45a1      	cmp	r9, r4
 800f27a:	d909      	bls.n	800f290 <__udivmoddi4+0x98>
 800f27c:	19e4      	adds	r4, r4, r7
 800f27e:	f100 33ff 	add.w	r3, r0, #4294967295
 800f282:	f080 810a 	bcs.w	800f49a <__udivmoddi4+0x2a2>
 800f286:	45a1      	cmp	r9, r4
 800f288:	f240 8107 	bls.w	800f49a <__udivmoddi4+0x2a2>
 800f28c:	3802      	subs	r0, #2
 800f28e:	443c      	add	r4, r7
 800f290:	eba4 0409 	sub.w	r4, r4, r9
 800f294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800f298:	2100      	movs	r1, #0
 800f29a:	2e00      	cmp	r6, #0
 800f29c:	d061      	beq.n	800f362 <__udivmoddi4+0x16a>
 800f29e:	fa24 f40e 	lsr.w	r4, r4, lr
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	6034      	str	r4, [r6, #0]
 800f2a6:	6073      	str	r3, [r6, #4]
 800f2a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2ac:	428b      	cmp	r3, r1
 800f2ae:	d907      	bls.n	800f2c0 <__udivmoddi4+0xc8>
 800f2b0:	2e00      	cmp	r6, #0
 800f2b2:	d054      	beq.n	800f35e <__udivmoddi4+0x166>
 800f2b4:	2100      	movs	r1, #0
 800f2b6:	e886 0021 	stmia.w	r6, {r0, r5}
 800f2ba:	4608      	mov	r0, r1
 800f2bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2c0:	fab3 f183 	clz	r1, r3
 800f2c4:	2900      	cmp	r1, #0
 800f2c6:	f040 808e 	bne.w	800f3e6 <__udivmoddi4+0x1ee>
 800f2ca:	42ab      	cmp	r3, r5
 800f2cc:	d302      	bcc.n	800f2d4 <__udivmoddi4+0xdc>
 800f2ce:	4282      	cmp	r2, r0
 800f2d0:	f200 80fa 	bhi.w	800f4c8 <__udivmoddi4+0x2d0>
 800f2d4:	1a84      	subs	r4, r0, r2
 800f2d6:	eb65 0503 	sbc.w	r5, r5, r3
 800f2da:	2001      	movs	r0, #1
 800f2dc:	46ac      	mov	ip, r5
 800f2de:	2e00      	cmp	r6, #0
 800f2e0:	d03f      	beq.n	800f362 <__udivmoddi4+0x16a>
 800f2e2:	e886 1010 	stmia.w	r6, {r4, ip}
 800f2e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2ea:	b912      	cbnz	r2, 800f2f2 <__udivmoddi4+0xfa>
 800f2ec:	2701      	movs	r7, #1
 800f2ee:	fbb7 f7f2 	udiv	r7, r7, r2
 800f2f2:	fab7 fe87 	clz	lr, r7
 800f2f6:	f1be 0f00 	cmp.w	lr, #0
 800f2fa:	d134      	bne.n	800f366 <__udivmoddi4+0x16e>
 800f2fc:	1beb      	subs	r3, r5, r7
 800f2fe:	0c3a      	lsrs	r2, r7, #16
 800f300:	fa1f fc87 	uxth.w	ip, r7
 800f304:	2101      	movs	r1, #1
 800f306:	fbb3 f8f2 	udiv	r8, r3, r2
 800f30a:	0c25      	lsrs	r5, r4, #16
 800f30c:	fb02 3318 	mls	r3, r2, r8, r3
 800f310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800f314:	fb0c f308 	mul.w	r3, ip, r8
 800f318:	42ab      	cmp	r3, r5
 800f31a:	d907      	bls.n	800f32c <__udivmoddi4+0x134>
 800f31c:	19ed      	adds	r5, r5, r7
 800f31e:	f108 30ff 	add.w	r0, r8, #4294967295
 800f322:	d202      	bcs.n	800f32a <__udivmoddi4+0x132>
 800f324:	42ab      	cmp	r3, r5
 800f326:	f200 80d1 	bhi.w	800f4cc <__udivmoddi4+0x2d4>
 800f32a:	4680      	mov	r8, r0
 800f32c:	1aed      	subs	r5, r5, r3
 800f32e:	b2a3      	uxth	r3, r4
 800f330:	fbb5 f0f2 	udiv	r0, r5, r2
 800f334:	fb02 5510 	mls	r5, r2, r0, r5
 800f338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800f33c:	fb0c fc00 	mul.w	ip, ip, r0
 800f340:	45a4      	cmp	ip, r4
 800f342:	d907      	bls.n	800f354 <__udivmoddi4+0x15c>
 800f344:	19e4      	adds	r4, r4, r7
 800f346:	f100 33ff 	add.w	r3, r0, #4294967295
 800f34a:	d202      	bcs.n	800f352 <__udivmoddi4+0x15a>
 800f34c:	45a4      	cmp	ip, r4
 800f34e:	f200 80b8 	bhi.w	800f4c2 <__udivmoddi4+0x2ca>
 800f352:	4618      	mov	r0, r3
 800f354:	eba4 040c 	sub.w	r4, r4, ip
 800f358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800f35c:	e79d      	b.n	800f29a <__udivmoddi4+0xa2>
 800f35e:	4631      	mov	r1, r6
 800f360:	4630      	mov	r0, r6
 800f362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f366:	f1ce 0420 	rsb	r4, lr, #32
 800f36a:	fa05 f30e 	lsl.w	r3, r5, lr
 800f36e:	fa07 f70e 	lsl.w	r7, r7, lr
 800f372:	fa20 f804 	lsr.w	r8, r0, r4
 800f376:	0c3a      	lsrs	r2, r7, #16
 800f378:	fa25 f404 	lsr.w	r4, r5, r4
 800f37c:	ea48 0803 	orr.w	r8, r8, r3
 800f380:	fbb4 f1f2 	udiv	r1, r4, r2
 800f384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 800f388:	fb02 4411 	mls	r4, r2, r1, r4
 800f38c:	fa1f fc87 	uxth.w	ip, r7
 800f390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800f394:	fb01 f30c 	mul.w	r3, r1, ip
 800f398:	42ab      	cmp	r3, r5
 800f39a:	fa00 f40e 	lsl.w	r4, r0, lr
 800f39e:	d909      	bls.n	800f3b4 <__udivmoddi4+0x1bc>
 800f3a0:	19ed      	adds	r5, r5, r7
 800f3a2:	f101 30ff 	add.w	r0, r1, #4294967295
 800f3a6:	f080 808a 	bcs.w	800f4be <__udivmoddi4+0x2c6>
 800f3aa:	42ab      	cmp	r3, r5
 800f3ac:	f240 8087 	bls.w	800f4be <__udivmoddi4+0x2c6>
 800f3b0:	3902      	subs	r1, #2
 800f3b2:	443d      	add	r5, r7
 800f3b4:	1aeb      	subs	r3, r5, r3
 800f3b6:	fa1f f588 	uxth.w	r5, r8
 800f3ba:	fbb3 f0f2 	udiv	r0, r3, r2
 800f3be:	fb02 3310 	mls	r3, r2, r0, r3
 800f3c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800f3c6:	fb00 f30c 	mul.w	r3, r0, ip
 800f3ca:	42ab      	cmp	r3, r5
 800f3cc:	d907      	bls.n	800f3de <__udivmoddi4+0x1e6>
 800f3ce:	19ed      	adds	r5, r5, r7
 800f3d0:	f100 38ff 	add.w	r8, r0, #4294967295
 800f3d4:	d26f      	bcs.n	800f4b6 <__udivmoddi4+0x2be>
 800f3d6:	42ab      	cmp	r3, r5
 800f3d8:	d96d      	bls.n	800f4b6 <__udivmoddi4+0x2be>
 800f3da:	3802      	subs	r0, #2
 800f3dc:	443d      	add	r5, r7
 800f3de:	1aeb      	subs	r3, r5, r3
 800f3e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800f3e4:	e78f      	b.n	800f306 <__udivmoddi4+0x10e>
 800f3e6:	f1c1 0720 	rsb	r7, r1, #32
 800f3ea:	fa22 f807 	lsr.w	r8, r2, r7
 800f3ee:	408b      	lsls	r3, r1
 800f3f0:	fa05 f401 	lsl.w	r4, r5, r1
 800f3f4:	ea48 0303 	orr.w	r3, r8, r3
 800f3f8:	fa20 fe07 	lsr.w	lr, r0, r7
 800f3fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800f400:	40fd      	lsrs	r5, r7
 800f402:	ea4e 0e04 	orr.w	lr, lr, r4
 800f406:	fbb5 f9fc 	udiv	r9, r5, ip
 800f40a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800f40e:	fb0c 5519 	mls	r5, ip, r9, r5
 800f412:	fa1f f883 	uxth.w	r8, r3
 800f416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800f41a:	fb09 f408 	mul.w	r4, r9, r8
 800f41e:	42ac      	cmp	r4, r5
 800f420:	fa02 f201 	lsl.w	r2, r2, r1
 800f424:	fa00 fa01 	lsl.w	sl, r0, r1
 800f428:	d908      	bls.n	800f43c <__udivmoddi4+0x244>
 800f42a:	18ed      	adds	r5, r5, r3
 800f42c:	f109 30ff 	add.w	r0, r9, #4294967295
 800f430:	d243      	bcs.n	800f4ba <__udivmoddi4+0x2c2>
 800f432:	42ac      	cmp	r4, r5
 800f434:	d941      	bls.n	800f4ba <__udivmoddi4+0x2c2>
 800f436:	f1a9 0902 	sub.w	r9, r9, #2
 800f43a:	441d      	add	r5, r3
 800f43c:	1b2d      	subs	r5, r5, r4
 800f43e:	fa1f fe8e 	uxth.w	lr, lr
 800f442:	fbb5 f0fc 	udiv	r0, r5, ip
 800f446:	fb0c 5510 	mls	r5, ip, r0, r5
 800f44a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800f44e:	fb00 f808 	mul.w	r8, r0, r8
 800f452:	45a0      	cmp	r8, r4
 800f454:	d907      	bls.n	800f466 <__udivmoddi4+0x26e>
 800f456:	18e4      	adds	r4, r4, r3
 800f458:	f100 35ff 	add.w	r5, r0, #4294967295
 800f45c:	d229      	bcs.n	800f4b2 <__udivmoddi4+0x2ba>
 800f45e:	45a0      	cmp	r8, r4
 800f460:	d927      	bls.n	800f4b2 <__udivmoddi4+0x2ba>
 800f462:	3802      	subs	r0, #2
 800f464:	441c      	add	r4, r3
 800f466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800f46a:	eba4 0408 	sub.w	r4, r4, r8
 800f46e:	fba0 8902 	umull	r8, r9, r0, r2
 800f472:	454c      	cmp	r4, r9
 800f474:	46c6      	mov	lr, r8
 800f476:	464d      	mov	r5, r9
 800f478:	d315      	bcc.n	800f4a6 <__udivmoddi4+0x2ae>
 800f47a:	d012      	beq.n	800f4a2 <__udivmoddi4+0x2aa>
 800f47c:	b156      	cbz	r6, 800f494 <__udivmoddi4+0x29c>
 800f47e:	ebba 030e 	subs.w	r3, sl, lr
 800f482:	eb64 0405 	sbc.w	r4, r4, r5
 800f486:	fa04 f707 	lsl.w	r7, r4, r7
 800f48a:	40cb      	lsrs	r3, r1
 800f48c:	431f      	orrs	r7, r3
 800f48e:	40cc      	lsrs	r4, r1
 800f490:	6037      	str	r7, [r6, #0]
 800f492:	6074      	str	r4, [r6, #4]
 800f494:	2100      	movs	r1, #0
 800f496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f49a:	4618      	mov	r0, r3
 800f49c:	e6f8      	b.n	800f290 <__udivmoddi4+0x98>
 800f49e:	4690      	mov	r8, r2
 800f4a0:	e6e0      	b.n	800f264 <__udivmoddi4+0x6c>
 800f4a2:	45c2      	cmp	sl, r8
 800f4a4:	d2ea      	bcs.n	800f47c <__udivmoddi4+0x284>
 800f4a6:	ebb8 0e02 	subs.w	lr, r8, r2
 800f4aa:	eb69 0503 	sbc.w	r5, r9, r3
 800f4ae:	3801      	subs	r0, #1
 800f4b0:	e7e4      	b.n	800f47c <__udivmoddi4+0x284>
 800f4b2:	4628      	mov	r0, r5
 800f4b4:	e7d7      	b.n	800f466 <__udivmoddi4+0x26e>
 800f4b6:	4640      	mov	r0, r8
 800f4b8:	e791      	b.n	800f3de <__udivmoddi4+0x1e6>
 800f4ba:	4681      	mov	r9, r0
 800f4bc:	e7be      	b.n	800f43c <__udivmoddi4+0x244>
 800f4be:	4601      	mov	r1, r0
 800f4c0:	e778      	b.n	800f3b4 <__udivmoddi4+0x1bc>
 800f4c2:	3802      	subs	r0, #2
 800f4c4:	443c      	add	r4, r7
 800f4c6:	e745      	b.n	800f354 <__udivmoddi4+0x15c>
 800f4c8:	4608      	mov	r0, r1
 800f4ca:	e708      	b.n	800f2de <__udivmoddi4+0xe6>
 800f4cc:	f1a8 0802 	sub.w	r8, r8, #2
 800f4d0:	443d      	add	r5, r7
 800f4d2:	e72b      	b.n	800f32c <__udivmoddi4+0x134>

0800f4d4 <__aeabi_idiv0>:
 800f4d4:	4770      	bx	lr
 800f4d6:	bf00      	nop

0800f4d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800f4d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f510 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800f4dc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800f4de:	e003      	b.n	800f4e8 <LoopCopyDataInit>

0800f4e0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800f4e0:	4b0c      	ldr	r3, [pc, #48]	; (800f514 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800f4e2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800f4e4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800f4e6:	3104      	adds	r1, #4

0800f4e8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800f4e8:	480b      	ldr	r0, [pc, #44]	; (800f518 <LoopForever+0xa>)
	ldr	r3, =_edata
 800f4ea:	4b0c      	ldr	r3, [pc, #48]	; (800f51c <LoopForever+0xe>)
	adds	r2, r0, r1
 800f4ec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800f4ee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800f4f0:	d3f6      	bcc.n	800f4e0 <CopyDataInit>
	ldr	r2, =_sbss
 800f4f2:	4a0b      	ldr	r2, [pc, #44]	; (800f520 <LoopForever+0x12>)
	b	LoopFillZerobss
 800f4f4:	e002      	b.n	800f4fc <LoopFillZerobss>

0800f4f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800f4f6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800f4f8:	f842 3b04 	str.w	r3, [r2], #4

0800f4fc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800f4fc:	4b09      	ldr	r3, [pc, #36]	; (800f524 <LoopForever+0x16>)
	cmp	r2, r3
 800f4fe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800f500:	d3f9      	bcc.n	800f4f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800f502:	f7ff fd71 	bl	800efe8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800f506:	f000 f811 	bl	800f52c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800f50a:	f7fe fec1 	bl	800e290 <main>

0800f50e <LoopForever>:

LoopForever:
    b LoopForever
 800f50e:	e7fe      	b.n	800f50e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800f510:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800f514:	0800f628 	.word	0x0800f628
	ldr	r0, =_sdata
 800f518:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800f51c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800f520:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800f524:	200007d4 	.word	0x200007d4

0800f528 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800f528:	e7fe      	b.n	800f528 <ADC1_2_IRQHandler>
	...

0800f52c <__libc_init_array>:
 800f52c:	b570      	push	{r4, r5, r6, lr}
 800f52e:	4e0d      	ldr	r6, [pc, #52]	; (800f564 <__libc_init_array+0x38>)
 800f530:	4c0d      	ldr	r4, [pc, #52]	; (800f568 <__libc_init_array+0x3c>)
 800f532:	1ba4      	subs	r4, r4, r6
 800f534:	10a4      	asrs	r4, r4, #2
 800f536:	2500      	movs	r5, #0
 800f538:	42a5      	cmp	r5, r4
 800f53a:	d109      	bne.n	800f550 <__libc_init_array+0x24>
 800f53c:	4e0b      	ldr	r6, [pc, #44]	; (800f56c <__libc_init_array+0x40>)
 800f53e:	4c0c      	ldr	r4, [pc, #48]	; (800f570 <__libc_init_array+0x44>)
 800f540:	f000 f82e 	bl	800f5a0 <_init>
 800f544:	1ba4      	subs	r4, r4, r6
 800f546:	10a4      	asrs	r4, r4, #2
 800f548:	2500      	movs	r5, #0
 800f54a:	42a5      	cmp	r5, r4
 800f54c:	d105      	bne.n	800f55a <__libc_init_array+0x2e>
 800f54e:	bd70      	pop	{r4, r5, r6, pc}
 800f550:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f554:	4798      	blx	r3
 800f556:	3501      	adds	r5, #1
 800f558:	e7ee      	b.n	800f538 <__libc_init_array+0xc>
 800f55a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f55e:	4798      	blx	r3
 800f560:	3501      	adds	r5, #1
 800f562:	e7f2      	b.n	800f54a <__libc_init_array+0x1e>
 800f564:	0800f620 	.word	0x0800f620
 800f568:	0800f620 	.word	0x0800f620
 800f56c:	0800f620 	.word	0x0800f620
 800f570:	0800f624 	.word	0x0800f624

0800f574 <memset>:
 800f574:	4402      	add	r2, r0
 800f576:	4603      	mov	r3, r0
 800f578:	4293      	cmp	r3, r2
 800f57a:	d100      	bne.n	800f57e <memset+0xa>
 800f57c:	4770      	bx	lr
 800f57e:	f803 1b01 	strb.w	r1, [r3], #1
 800f582:	e7f9      	b.n	800f578 <memset+0x4>

0800f584 <strchr>:
 800f584:	b2c9      	uxtb	r1, r1
 800f586:	4603      	mov	r3, r0
 800f588:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f58c:	b11a      	cbz	r2, 800f596 <strchr+0x12>
 800f58e:	4291      	cmp	r1, r2
 800f590:	d1f9      	bne.n	800f586 <strchr+0x2>
 800f592:	4618      	mov	r0, r3
 800f594:	4770      	bx	lr
 800f596:	2900      	cmp	r1, #0
 800f598:	bf0c      	ite	eq
 800f59a:	4618      	moveq	r0, r3
 800f59c:	2000      	movne	r0, #0
 800f59e:	4770      	bx	lr

0800f5a0 <_init>:
 800f5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5a2:	bf00      	nop
 800f5a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5a6:	bc08      	pop	{r3}
 800f5a8:	469e      	mov	lr, r3
 800f5aa:	4770      	bx	lr

0800f5ac <_fini>:
 800f5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5ae:	bf00      	nop
 800f5b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5b2:	bc08      	pop	{r3}
 800f5b4:	469e      	mov	lr, r3
 800f5b6:	4770      	bx	lr
